
MainBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c63c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800c780  0800c780  0001c780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccbc  0800ccbc  0002035c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccbc  0800ccbc  0001ccbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccc4  0800ccc4  0002035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccc4  0800ccc4  0001ccc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccc8  0800ccc8  0001ccc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0800cccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001660  2000035c  0800d028  0002035c  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  200019bc  0800d028  000219bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028663  00000000  00000000  00020385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005022  00000000  00000000  000489e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001d1dd  00000000  00000000  0004da0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  0006abe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004e98  00000000  00000000  0006bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d0c  00000000  00000000  00070d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a240  00000000  00000000  0008aa44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000900e8  00000000  00000000  000b4c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144d6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005164  00000000  00000000  00144dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000035c 	.word	0x2000035c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c764 	.word	0x0800c764

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000360 	.word	0x20000360
 800017c:	0800c764 	.word	0x0800c764

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2uiz>:
 8001100:	0042      	lsls	r2, r0, #1
 8001102:	d20e      	bcs.n	8001122 <__aeabi_f2uiz+0x22>
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001108:	d30b      	bcc.n	8001122 <__aeabi_f2uiz+0x22>
 800110a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d409      	bmi.n	8001128 <__aeabi_f2uiz+0x28>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr
 8001128:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800112c:	d101      	bne.n	8001132 <__aeabi_f2uiz+0x32>
 800112e:	0242      	lsls	r2, r0, #9
 8001130:	d102      	bne.n	8001138 <__aeabi_f2uiz+0x38>
 8001132:	f04f 30ff 	mov.w	r0, #4294967295
 8001136:	4770      	bx	lr
 8001138:	f04f 0000 	mov.w	r0, #0
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <__aeabi_uldivmod>:
 8001140:	b953      	cbnz	r3, 8001158 <__aeabi_uldivmod+0x18>
 8001142:	b94a      	cbnz	r2, 8001158 <__aeabi_uldivmod+0x18>
 8001144:	2900      	cmp	r1, #0
 8001146:	bf08      	it	eq
 8001148:	2800      	cmpeq	r0, #0
 800114a:	bf1c      	itt	ne
 800114c:	f04f 31ff 	movne.w	r1, #4294967295
 8001150:	f04f 30ff 	movne.w	r0, #4294967295
 8001154:	f000 b976 	b.w	8001444 <__aeabi_idiv0>
 8001158:	f1ad 0c08 	sub.w	ip, sp, #8
 800115c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001160:	f000 f806 	bl	8001170 <__udivmoddi4>
 8001164:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800116c:	b004      	add	sp, #16
 800116e:	4770      	bx	lr

08001170 <__udivmoddi4>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	9e08      	ldr	r6, [sp, #32]
 8001176:	460d      	mov	r5, r1
 8001178:	4604      	mov	r4, r0
 800117a:	4688      	mov	r8, r1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14d      	bne.n	800121c <__udivmoddi4+0xac>
 8001180:	428a      	cmp	r2, r1
 8001182:	4694      	mov	ip, r2
 8001184:	d968      	bls.n	8001258 <__udivmoddi4+0xe8>
 8001186:	fab2 f282 	clz	r2, r2
 800118a:	b152      	cbz	r2, 80011a2 <__udivmoddi4+0x32>
 800118c:	fa01 f302 	lsl.w	r3, r1, r2
 8001190:	f1c2 0120 	rsb	r1, r2, #32
 8001194:	fa20 f101 	lsr.w	r1, r0, r1
 8001198:	fa0c fc02 	lsl.w	ip, ip, r2
 800119c:	ea41 0803 	orr.w	r8, r1, r3
 80011a0:	4094      	lsls	r4, r2
 80011a2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80011a6:	fbb8 f7f1 	udiv	r7, r8, r1
 80011aa:	fa1f fe8c 	uxth.w	lr, ip
 80011ae:	fb01 8817 	mls	r8, r1, r7, r8
 80011b2:	fb07 f00e 	mul.w	r0, r7, lr
 80011b6:	0c23      	lsrs	r3, r4, #16
 80011b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011bc:	4298      	cmp	r0, r3
 80011be:	d90a      	bls.n	80011d6 <__udivmoddi4+0x66>
 80011c0:	eb1c 0303 	adds.w	r3, ip, r3
 80011c4:	f107 35ff 	add.w	r5, r7, #4294967295
 80011c8:	f080 811e 	bcs.w	8001408 <__udivmoddi4+0x298>
 80011cc:	4298      	cmp	r0, r3
 80011ce:	f240 811b 	bls.w	8001408 <__udivmoddi4+0x298>
 80011d2:	3f02      	subs	r7, #2
 80011d4:	4463      	add	r3, ip
 80011d6:	1a1b      	subs	r3, r3, r0
 80011d8:	fbb3 f0f1 	udiv	r0, r3, r1
 80011dc:	fb01 3310 	mls	r3, r1, r0, r3
 80011e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80011e4:	b2a4      	uxth	r4, r4
 80011e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011ea:	45a6      	cmp	lr, r4
 80011ec:	d90a      	bls.n	8001204 <__udivmoddi4+0x94>
 80011ee:	eb1c 0404 	adds.w	r4, ip, r4
 80011f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80011f6:	f080 8109 	bcs.w	800140c <__udivmoddi4+0x29c>
 80011fa:	45a6      	cmp	lr, r4
 80011fc:	f240 8106 	bls.w	800140c <__udivmoddi4+0x29c>
 8001200:	4464      	add	r4, ip
 8001202:	3802      	subs	r0, #2
 8001204:	2100      	movs	r1, #0
 8001206:	eba4 040e 	sub.w	r4, r4, lr
 800120a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800120e:	b11e      	cbz	r6, 8001218 <__udivmoddi4+0xa8>
 8001210:	2300      	movs	r3, #0
 8001212:	40d4      	lsrs	r4, r2
 8001214:	e9c6 4300 	strd	r4, r3, [r6]
 8001218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800121c:	428b      	cmp	r3, r1
 800121e:	d908      	bls.n	8001232 <__udivmoddi4+0xc2>
 8001220:	2e00      	cmp	r6, #0
 8001222:	f000 80ee 	beq.w	8001402 <__udivmoddi4+0x292>
 8001226:	2100      	movs	r1, #0
 8001228:	e9c6 0500 	strd	r0, r5, [r6]
 800122c:	4608      	mov	r0, r1
 800122e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001232:	fab3 f183 	clz	r1, r3
 8001236:	2900      	cmp	r1, #0
 8001238:	d14a      	bne.n	80012d0 <__udivmoddi4+0x160>
 800123a:	42ab      	cmp	r3, r5
 800123c:	d302      	bcc.n	8001244 <__udivmoddi4+0xd4>
 800123e:	4282      	cmp	r2, r0
 8001240:	f200 80fc 	bhi.w	800143c <__udivmoddi4+0x2cc>
 8001244:	1a84      	subs	r4, r0, r2
 8001246:	eb65 0303 	sbc.w	r3, r5, r3
 800124a:	2001      	movs	r0, #1
 800124c:	4698      	mov	r8, r3
 800124e:	2e00      	cmp	r6, #0
 8001250:	d0e2      	beq.n	8001218 <__udivmoddi4+0xa8>
 8001252:	e9c6 4800 	strd	r4, r8, [r6]
 8001256:	e7df      	b.n	8001218 <__udivmoddi4+0xa8>
 8001258:	b902      	cbnz	r2, 800125c <__udivmoddi4+0xec>
 800125a:	deff      	udf	#255	; 0xff
 800125c:	fab2 f282 	clz	r2, r2
 8001260:	2a00      	cmp	r2, #0
 8001262:	f040 8091 	bne.w	8001388 <__udivmoddi4+0x218>
 8001266:	eba1 000c 	sub.w	r0, r1, ip
 800126a:	2101      	movs	r1, #1
 800126c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001270:	fa1f fe8c 	uxth.w	lr, ip
 8001274:	fbb0 f3f7 	udiv	r3, r0, r7
 8001278:	fb07 0013 	mls	r0, r7, r3, r0
 800127c:	0c25      	lsrs	r5, r4, #16
 800127e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001282:	fb0e f003 	mul.w	r0, lr, r3
 8001286:	42a8      	cmp	r0, r5
 8001288:	d908      	bls.n	800129c <__udivmoddi4+0x12c>
 800128a:	eb1c 0505 	adds.w	r5, ip, r5
 800128e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001292:	d202      	bcs.n	800129a <__udivmoddi4+0x12a>
 8001294:	42a8      	cmp	r0, r5
 8001296:	f200 80ce 	bhi.w	8001436 <__udivmoddi4+0x2c6>
 800129a:	4643      	mov	r3, r8
 800129c:	1a2d      	subs	r5, r5, r0
 800129e:	fbb5 f0f7 	udiv	r0, r5, r7
 80012a2:	fb07 5510 	mls	r5, r7, r0, r5
 80012a6:	fb0e fe00 	mul.w	lr, lr, r0
 80012aa:	b2a4      	uxth	r4, r4
 80012ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012b0:	45a6      	cmp	lr, r4
 80012b2:	d908      	bls.n	80012c6 <__udivmoddi4+0x156>
 80012b4:	eb1c 0404 	adds.w	r4, ip, r4
 80012b8:	f100 35ff 	add.w	r5, r0, #4294967295
 80012bc:	d202      	bcs.n	80012c4 <__udivmoddi4+0x154>
 80012be:	45a6      	cmp	lr, r4
 80012c0:	f200 80b6 	bhi.w	8001430 <__udivmoddi4+0x2c0>
 80012c4:	4628      	mov	r0, r5
 80012c6:	eba4 040e 	sub.w	r4, r4, lr
 80012ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012ce:	e79e      	b.n	800120e <__udivmoddi4+0x9e>
 80012d0:	f1c1 0720 	rsb	r7, r1, #32
 80012d4:	408b      	lsls	r3, r1
 80012d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80012da:	ea4c 0c03 	orr.w	ip, ip, r3
 80012de:	fa25 fa07 	lsr.w	sl, r5, r7
 80012e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012e6:	fbba f8f9 	udiv	r8, sl, r9
 80012ea:	fa20 f307 	lsr.w	r3, r0, r7
 80012ee:	fb09 aa18 	mls	sl, r9, r8, sl
 80012f2:	408d      	lsls	r5, r1
 80012f4:	fa1f fe8c 	uxth.w	lr, ip
 80012f8:	431d      	orrs	r5, r3
 80012fa:	fa00 f301 	lsl.w	r3, r0, r1
 80012fe:	fb08 f00e 	mul.w	r0, r8, lr
 8001302:	0c2c      	lsrs	r4, r5, #16
 8001304:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001308:	42a0      	cmp	r0, r4
 800130a:	fa02 f201 	lsl.w	r2, r2, r1
 800130e:	d90b      	bls.n	8001328 <__udivmoddi4+0x1b8>
 8001310:	eb1c 0404 	adds.w	r4, ip, r4
 8001314:	f108 3aff 	add.w	sl, r8, #4294967295
 8001318:	f080 8088 	bcs.w	800142c <__udivmoddi4+0x2bc>
 800131c:	42a0      	cmp	r0, r4
 800131e:	f240 8085 	bls.w	800142c <__udivmoddi4+0x2bc>
 8001322:	f1a8 0802 	sub.w	r8, r8, #2
 8001326:	4464      	add	r4, ip
 8001328:	1a24      	subs	r4, r4, r0
 800132a:	fbb4 f0f9 	udiv	r0, r4, r9
 800132e:	fb09 4410 	mls	r4, r9, r0, r4
 8001332:	fb00 fe0e 	mul.w	lr, r0, lr
 8001336:	b2ad      	uxth	r5, r5
 8001338:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800133c:	45a6      	cmp	lr, r4
 800133e:	d908      	bls.n	8001352 <__udivmoddi4+0x1e2>
 8001340:	eb1c 0404 	adds.w	r4, ip, r4
 8001344:	f100 35ff 	add.w	r5, r0, #4294967295
 8001348:	d26c      	bcs.n	8001424 <__udivmoddi4+0x2b4>
 800134a:	45a6      	cmp	lr, r4
 800134c:	d96a      	bls.n	8001424 <__udivmoddi4+0x2b4>
 800134e:	3802      	subs	r0, #2
 8001350:	4464      	add	r4, ip
 8001352:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001356:	fba0 9502 	umull	r9, r5, r0, r2
 800135a:	eba4 040e 	sub.w	r4, r4, lr
 800135e:	42ac      	cmp	r4, r5
 8001360:	46c8      	mov	r8, r9
 8001362:	46ae      	mov	lr, r5
 8001364:	d356      	bcc.n	8001414 <__udivmoddi4+0x2a4>
 8001366:	d053      	beq.n	8001410 <__udivmoddi4+0x2a0>
 8001368:	2e00      	cmp	r6, #0
 800136a:	d069      	beq.n	8001440 <__udivmoddi4+0x2d0>
 800136c:	ebb3 0208 	subs.w	r2, r3, r8
 8001370:	eb64 040e 	sbc.w	r4, r4, lr
 8001374:	fa22 f301 	lsr.w	r3, r2, r1
 8001378:	fa04 f707 	lsl.w	r7, r4, r7
 800137c:	431f      	orrs	r7, r3
 800137e:	40cc      	lsrs	r4, r1
 8001380:	e9c6 7400 	strd	r7, r4, [r6]
 8001384:	2100      	movs	r1, #0
 8001386:	e747      	b.n	8001218 <__udivmoddi4+0xa8>
 8001388:	fa0c fc02 	lsl.w	ip, ip, r2
 800138c:	f1c2 0120 	rsb	r1, r2, #32
 8001390:	fa25 f301 	lsr.w	r3, r5, r1
 8001394:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001398:	fa20 f101 	lsr.w	r1, r0, r1
 800139c:	4095      	lsls	r5, r2
 800139e:	430d      	orrs	r5, r1
 80013a0:	fbb3 f1f7 	udiv	r1, r3, r7
 80013a4:	fb07 3311 	mls	r3, r7, r1, r3
 80013a8:	fa1f fe8c 	uxth.w	lr, ip
 80013ac:	0c28      	lsrs	r0, r5, #16
 80013ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013b2:	fb01 f30e 	mul.w	r3, r1, lr
 80013b6:	4283      	cmp	r3, r0
 80013b8:	fa04 f402 	lsl.w	r4, r4, r2
 80013bc:	d908      	bls.n	80013d0 <__udivmoddi4+0x260>
 80013be:	eb1c 0000 	adds.w	r0, ip, r0
 80013c2:	f101 38ff 	add.w	r8, r1, #4294967295
 80013c6:	d22f      	bcs.n	8001428 <__udivmoddi4+0x2b8>
 80013c8:	4283      	cmp	r3, r0
 80013ca:	d92d      	bls.n	8001428 <__udivmoddi4+0x2b8>
 80013cc:	3902      	subs	r1, #2
 80013ce:	4460      	add	r0, ip
 80013d0:	1ac0      	subs	r0, r0, r3
 80013d2:	fbb0 f3f7 	udiv	r3, r0, r7
 80013d6:	fb07 0013 	mls	r0, r7, r3, r0
 80013da:	b2ad      	uxth	r5, r5
 80013dc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80013e0:	fb03 f00e 	mul.w	r0, r3, lr
 80013e4:	42a8      	cmp	r0, r5
 80013e6:	d908      	bls.n	80013fa <__udivmoddi4+0x28a>
 80013e8:	eb1c 0505 	adds.w	r5, ip, r5
 80013ec:	f103 38ff 	add.w	r8, r3, #4294967295
 80013f0:	d216      	bcs.n	8001420 <__udivmoddi4+0x2b0>
 80013f2:	42a8      	cmp	r0, r5
 80013f4:	d914      	bls.n	8001420 <__udivmoddi4+0x2b0>
 80013f6:	3b02      	subs	r3, #2
 80013f8:	4465      	add	r5, ip
 80013fa:	1a28      	subs	r0, r5, r0
 80013fc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001400:	e738      	b.n	8001274 <__udivmoddi4+0x104>
 8001402:	4631      	mov	r1, r6
 8001404:	4630      	mov	r0, r6
 8001406:	e707      	b.n	8001218 <__udivmoddi4+0xa8>
 8001408:	462f      	mov	r7, r5
 800140a:	e6e4      	b.n	80011d6 <__udivmoddi4+0x66>
 800140c:	4618      	mov	r0, r3
 800140e:	e6f9      	b.n	8001204 <__udivmoddi4+0x94>
 8001410:	454b      	cmp	r3, r9
 8001412:	d2a9      	bcs.n	8001368 <__udivmoddi4+0x1f8>
 8001414:	ebb9 0802 	subs.w	r8, r9, r2
 8001418:	eb65 0e0c 	sbc.w	lr, r5, ip
 800141c:	3801      	subs	r0, #1
 800141e:	e7a3      	b.n	8001368 <__udivmoddi4+0x1f8>
 8001420:	4643      	mov	r3, r8
 8001422:	e7ea      	b.n	80013fa <__udivmoddi4+0x28a>
 8001424:	4628      	mov	r0, r5
 8001426:	e794      	b.n	8001352 <__udivmoddi4+0x1e2>
 8001428:	4641      	mov	r1, r8
 800142a:	e7d1      	b.n	80013d0 <__udivmoddi4+0x260>
 800142c:	46d0      	mov	r8, sl
 800142e:	e77b      	b.n	8001328 <__udivmoddi4+0x1b8>
 8001430:	4464      	add	r4, ip
 8001432:	3802      	subs	r0, #2
 8001434:	e747      	b.n	80012c6 <__udivmoddi4+0x156>
 8001436:	3b02      	subs	r3, #2
 8001438:	4465      	add	r5, ip
 800143a:	e72f      	b.n	800129c <__udivmoddi4+0x12c>
 800143c:	4608      	mov	r0, r1
 800143e:	e706      	b.n	800124e <__udivmoddi4+0xde>
 8001440:	4631      	mov	r1, r6
 8001442:	e6e9      	b.n	8001218 <__udivmoddi4+0xa8>

08001444 <__aeabi_idiv0>:
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <MX_ADC_Init>:
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 5;
 8001448:	2105      	movs	r1, #5
  ADC_ChannelConfTypeDef sConfig = {0};
 800144a:	2300      	movs	r3, #0
{
 800144c:	b5f0      	push	{r4, r5, r6, r7, lr}
  hadc.Instance = ADC1;
 800144e:	4c2f      	ldr	r4, [pc, #188]	; (800150c <MX_ADC_Init+0xc4>)
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001450:	f44f 7080 	mov.w	r0, #256	; 0x100
  hadc.Init.ContinuousConvMode = ENABLE;
 8001454:	2201      	movs	r2, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001456:	f44f 3500 	mov.w	r5, #131072	; 0x20000
  hadc.Init.NbrOfConversion = 5;
 800145a:	62a1      	str	r1, [r4, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800145c:	2110      	movs	r1, #16
{
 800145e:	b085      	sub	sp, #20
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001460:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001464:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001468:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 800146c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001470:	9300      	str	r3, [sp, #0]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001472:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001476:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Instance = ADC1;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_ADC_Init+0xc8>)
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800147a:	6120      	str	r0, [r4, #16]
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800147c:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800147e:	6065      	str	r5, [r4, #4]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001480:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001484:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  hadc.Instance = ADC1;
 8001488:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148a:	6361      	str	r1, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800148c:	f003 f9bc 	bl	8004808 <HAL_ADC_Init>
 8001490:	b108      	cbz	r0, 8001496 <MX_ADC_Init+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001492:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	e7fe      	b.n	8001494 <MX_ADC_Init+0x4c>
  sConfig.Channel = ADC_CHANNEL_0;
 8001496:	2600      	movs	r6, #0
 8001498:	2701      	movs	r7, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 800149a:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800149c:	4669      	mov	r1, sp
 800149e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 80014a0:	e9cd 6700 	strd	r6, r7, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 80014a4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014a6:	f003 fb57 	bl	8004b58 <HAL_ADC_ConfigChannel>
 80014aa:	b108      	cbz	r0, 80014b0 <MX_ADC_Init+0x68>
 80014ac:	b672      	cpsid	i
  while (1)
 80014ae:	e7fe      	b.n	80014ae <MX_ADC_Init+0x66>
  sConfig.Channel = ADC_CHANNEL_1;
 80014b0:	2201      	movs	r2, #1
 80014b2:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014b4:	4669      	mov	r1, sp
 80014b6:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80014b8:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014bc:	f003 fb4c 	bl	8004b58 <HAL_ADC_ConfigChannel>
 80014c0:	b108      	cbz	r0, 80014c6 <MX_ADC_Init+0x7e>
 80014c2:	b672      	cpsid	i
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MX_ADC_Init+0x7c>
  sConfig.Channel = ADC_CHANNEL_2;
 80014c6:	2202      	movs	r2, #2
 80014c8:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014ca:	4669      	mov	r1, sp
 80014cc:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80014ce:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014d2:	f003 fb41 	bl	8004b58 <HAL_ADC_ConfigChannel>
 80014d6:	b108      	cbz	r0, 80014dc <MX_ADC_Init+0x94>
 80014d8:	b672      	cpsid	i
  while (1)
 80014da:	e7fe      	b.n	80014da <MX_ADC_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_3;
 80014dc:	2203      	movs	r2, #3
 80014de:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014e0:	4669      	mov	r1, sp
 80014e2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80014e4:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014e8:	f003 fb36 	bl	8004b58 <HAL_ADC_ConfigChannel>
 80014ec:	b108      	cbz	r0, 80014f2 <MX_ADC_Init+0xaa>
 80014ee:	b672      	cpsid	i
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MX_ADC_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014f2:	2211      	movs	r2, #17
 80014f4:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014f6:	4669      	mov	r1, sp
 80014f8:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014fa:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014fe:	f003 fb2b 	bl	8004b58 <HAL_ADC_ConfigChannel>
 8001502:	b108      	cbz	r0, 8001508 <MX_ADC_Init+0xc0>
 8001504:	b672      	cpsid	i
  while (1)
 8001506:	e7fe      	b.n	8001506 <MX_ADC_Init+0xbe>
}
 8001508:	b005      	add	sp, #20
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	200003b0 	.word	0x200003b0
 8001510:	40012400 	.word	0x40012400

08001514 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001514:	2300      	movs	r3, #0
{
 8001516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151a:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800151e:	2403      	movs	r4, #3
 8001520:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001522:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001524:	f04f 0810 	mov.w	r8, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001528:	f04f 0e02 	mov.w	lr, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800152c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001530:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
{
 8001534:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800153a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800153e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001542:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001546:	e9cd 3303 	strd	r3, r3, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800154a:	4a16      	ldr	r2, [pc, #88]	; (80015a4 <SystemClock_Config+0x90>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154e:	9300      	str	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001550:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001552:	a806      	add	r0, sp, #24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001554:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800155c:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800155e:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001562:	e9cd ec0f 	strd	lr, ip, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001566:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800156a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156e:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001570:	f005 fa7e 	bl	8006a70 <HAL_RCC_OscConfig>
 8001574:	b108      	cbz	r0, 800157a <SystemClock_Config+0x66>
 8001576:	b672      	cpsid	i
  while (1)
 8001578:	e7fe      	b.n	8001578 <SystemClock_Config+0x64>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800157c:	240f      	movs	r4, #15
 800157e:	2503      	movs	r5, #3
 8001580:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001582:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001584:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001586:	4631      	mov	r1, r6
 8001588:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158a:	e9cd 4500 	strd	r4, r5, [sp]
 800158e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001592:	f005 fccd 	bl	8006f30 <HAL_RCC_ClockConfig>
 8001596:	b108      	cbz	r0, 800159c <SystemClock_Config+0x88>
 8001598:	b672      	cpsid	i
  while (1)
 800159a:	e7fe      	b.n	800159a <SystemClock_Config+0x86>
}
 800159c:	b014      	add	sp, #80	; 0x50
 800159e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015a2:	bf00      	nop
 80015a4:	40007000 	.word	0x40007000

080015a8 <EXTI1_IRQHandler>:
{
 80015a8:	b410      	push	{r4}
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 80015aa:	2407      	movs	r4, #7
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <EXTI1_IRQHandler+0x14>)
	memset (usbbuffer, '\0', 128);  // clear the buffer
 80015ae:	2280      	movs	r2, #128	; 0x80
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 80015b0:	615c      	str	r4, [r3, #20]
	memset (usbbuffer, '\0', 128);  // clear the buffer
 80015b2:	2100      	movs	r1, #0
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <EXTI1_IRQHandler+0x18>)
}
 80015b6:	bc10      	pop	{r4}
	memset (usbbuffer, '\0', 128);  // clear the buffer
 80015b8:	f008 b9ec 	b.w	8009994 <memset>
 80015bc:	40010400 	.word	0x40010400
 80015c0:	2000079c 	.word	0x2000079c

080015c4 <lcd_createChar>:
{
 80015c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80015c8:	2564      	movs	r5, #100	; 0x64
 80015ca:	482d      	ldr	r0, [pc, #180]	; (8001680 <lcd_createChar+0xbc>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80015cc:	492d      	ldr	r1, [pc, #180]	; (8001684 <lcd_createChar+0xc0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80015ce:	4607      	mov	r7, r0
{
 80015d0:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80015d2:	2304      	movs	r3, #4
 80015d4:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80015d6:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80015d8:	9500      	str	r5, [sp, #0]
 80015da:	214e      	movs	r1, #78	; 0x4e
 80015dc:	f004 f954 	bl	8005888 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80015e0:	2001      	movs	r0, #1
 80015e2:	f003 f8ff 	bl	80047e4 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80015e8:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80015ea:	9303      	str	r3, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80015ec:	4638      	mov	r0, r7
 80015ee:	2304      	movs	r3, #4
 80015f0:	4c26      	ldr	r4, [pc, #152]	; (800168c <lcd_createChar+0xc8>)
 80015f2:	9500      	str	r5, [sp, #0]
 80015f4:	aa03      	add	r2, sp, #12
 80015f6:	f004 f947 	bl	8005888 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80015fa:	2001      	movs	r0, #1
 80015fc:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8001600:	f003 f8f0 	bl	80047e4 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001604:	2304      	movs	r3, #4
		lcd_send_data(customChar[i]);
 8001606:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800160a:	4638      	mov	r0, r7
	data_l = ((data<<4)&0xf0);
 800160c:	fa02 f103 	lsl.w	r1, r2, r3
 8001610:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8001612:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001616:	f042 0c09 	orr.w	ip, r2, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800161a:	f041 0e09 	orr.w	lr, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800161e:	f042 090d 	orr.w	r9, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001622:	f041 080d 	orr.w	r8, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001626:	aa03      	add	r2, sp, #12
 8001628:	214e      	movs	r1, #78	; 0x4e
 800162a:	9500      	str	r5, [sp, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800162c:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001630:	f88d e00f 	strb.w	lr, [sp, #15]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001634:	f88d 900c 	strb.w	r9, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001638:	f88d 800e 	strb.w	r8, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800163c:	f004 f924 	bl	8005888 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f003 f8cf 	bl	80047e4 <HAL_Delay>
	for(int i = 0; i < 64 ; i++){
 8001646:	42a6      	cmp	r6, r4
 8001648:	d1dc      	bne.n	8001604 <lcd_createChar+0x40>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800164a:	490f      	ldr	r1, [pc, #60]	; (8001688 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800164c:	aa03      	add	r2, sp, #12
 800164e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001650:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001652:	9500      	str	r5, [sp, #0]
 8001654:	214e      	movs	r1, #78	; 0x4e
 8001656:	480a      	ldr	r0, [pc, #40]	; (8001680 <lcd_createChar+0xbc>)
 8001658:	f004 f916 	bl	8005888 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800165c:	2001      	movs	r0, #1
 800165e:	f003 f8c1 	bl	80047e4 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001662:	480b      	ldr	r0, [pc, #44]	; (8001690 <lcd_createChar+0xcc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001664:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001666:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001668:	214e      	movs	r1, #78	; 0x4e
 800166a:	aa03      	add	r2, sp, #12
 800166c:	9500      	str	r5, [sp, #0]
 800166e:	4804      	ldr	r0, [pc, #16]	; (8001680 <lcd_createChar+0xbc>)
 8001670:	f004 f90a 	bl	8005888 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001674:	2001      	movs	r0, #1
}
 8001676:	b005      	add	sp, #20
 8001678:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 800167c:	f003 b8b2 	b.w	80047e4 <HAL_Delay>
 8001680:	200004ec 	.word	0x200004ec
 8001684:	080c484c 	.word	0x080c484c
 8001688:	080c080c 	.word	0x080c080c
 800168c:	0800c823 	.word	0x0800c823
 8001690:	282c080c 	.word	0x282c080c

08001694 <lcd_init>:
{
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 8001696:	2064      	movs	r0, #100	; 0x64
{
 8001698:	b085      	sub	sp, #20
	HAL_Delay(100);
 800169a:	f003 f8a3 	bl	80047e4 <HAL_Delay>
 800169e:	2403      	movs	r4, #3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80016a0:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016a2:	4f2e      	ldr	r7, [pc, #184]	; (800175c <lcd_init+0xc8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80016a4:	4e2e      	ldr	r6, [pc, #184]	; (8001760 <lcd_init+0xcc>)
 80016a6:	2304      	movs	r3, #4
 80016a8:	214e      	movs	r1, #78	; 0x4e
 80016aa:	aa03      	add	r2, sp, #12
 80016ac:	4630      	mov	r0, r6
 80016ae:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016b0:	9703      	str	r7, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80016b2:	f004 f8e9 	bl	8005888 <HAL_I2C_Master_Transmit>
		HAL_Delay(45);
 80016b6:	202d      	movs	r0, #45	; 0x2d
 80016b8:	f003 f894 	bl	80047e4 <HAL_Delay>
	for(i=0;i<3;i++){ //sending 3 times: select 4-bit mode
 80016bc:	1e63      	subs	r3, r4, #1
 80016be:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80016c2:	d1f0      	bne.n	80016a6 <lcd_init+0x12>
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80016c4:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016c6:	4927      	ldr	r1, [pc, #156]	; (8001764 <lcd_init+0xd0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80016c8:	2304      	movs	r3, #4
 80016ca:	aa03      	add	r2, sp, #12
 80016cc:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016ce:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80016d0:	4823      	ldr	r0, [pc, #140]	; (8001760 <lcd_init+0xcc>)
 80016d2:	214e      	movs	r1, #78	; 0x4e
 80016d4:	f004 f8d8 	bl	8005888 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 80016d8:	4620      	mov	r0, r4
 80016da:	f003 f883 	bl	80047e4 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016de:	4a22      	ldr	r2, [pc, #136]	; (8001768 <lcd_init+0xd4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80016e0:	2304      	movs	r3, #4
 80016e2:	214e      	movs	r1, #78	; 0x4e
 80016e4:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016e6:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80016e8:	481d      	ldr	r0, [pc, #116]	; (8001760 <lcd_init+0xcc>)
 80016ea:	aa03      	add	r2, sp, #12
 80016ec:	f004 f8cc 	bl	8005888 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f003 f877 	bl	80047e4 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016f6:	4a1d      	ldr	r2, [pc, #116]	; (800176c <lcd_init+0xd8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80016f8:	2304      	movs	r3, #4
 80016fa:	214e      	movs	r1, #78	; 0x4e
 80016fc:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016fe:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001700:	4817      	ldr	r0, [pc, #92]	; (8001760 <lcd_init+0xcc>)
 8001702:	aa03      	add	r2, sp, #12
 8001704:	f004 f8c0 	bl	8005888 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001708:	2001      	movs	r0, #1
 800170a:	f003 f86b 	bl	80047e4 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800170e:	4a18      	ldr	r2, [pc, #96]	; (8001770 <lcd_init+0xdc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001710:	2304      	movs	r3, #4
 8001712:	214e      	movs	r1, #78	; 0x4e
 8001714:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001716:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001718:	4811      	ldr	r0, [pc, #68]	; (8001760 <lcd_init+0xcc>)
 800171a:	aa03      	add	r2, sp, #12
 800171c:	f004 f8b4 	bl	8005888 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001720:	2001      	movs	r0, #1
 8001722:	f003 f85f 	bl	80047e4 <HAL_Delay>
	lcd_createChar();
 8001726:	f7ff ff4d 	bl	80015c4 <lcd_createChar>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <lcd_init+0xe0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800172c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800172e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001730:	2304      	movs	r3, #4
 8001732:	214e      	movs	r1, #78	; 0x4e
 8001734:	480a      	ldr	r0, [pc, #40]	; (8001760 <lcd_init+0xcc>)
 8001736:	aa03      	add	r2, sp, #12
 8001738:	f004 f8a6 	bl	8005888 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800173c:	4627      	mov	r7, r4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800173e:	4e0e      	ldr	r6, [pc, #56]	; (8001778 <lcd_init+0xe4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001740:	4d07      	ldr	r5, [pc, #28]	; (8001760 <lcd_init+0xcc>)
 8001742:	2304      	movs	r3, #4
 8001744:	214e      	movs	r1, #78	; 0x4e
 8001746:	4628      	mov	r0, r5
 8001748:	aa03      	add	r2, sp, #12
 800174a:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800174c:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800174e:	f004 f89b 	bl	8005888 <HAL_I2C_Master_Transmit>
	for (int i=0; i<100; i++) {
 8001752:	3c01      	subs	r4, #1
 8001754:	d1f5      	bne.n	8001742 <lcd_init+0xae>
}
 8001756:	b005      	add	sp, #20
 8001758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800175a:	bf00      	nop
 800175c:	383c080c 	.word	0x383c080c
 8001760:	200004ec 	.word	0x200004ec
 8001764:	282c080c 	.word	0x282c080c
 8001768:	888c282c 	.word	0x888c282c
 800176c:	c8cc080c 	.word	0xc8cc080c
 8001770:	080c888c 	.word	0x080c888c
 8001774:	080c080c 	.word	0x080c080c
 8001778:	090d292d 	.word	0x090d292d

0800177c <lcd_psu_init>:
{
 800177c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001780:	2664      	movs	r6, #100	; 0x64
{
 8001782:	b084      	sub	sp, #16
	lcd_init();
 8001784:	f7ff ff86 	bl	8001694 <lcd_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001788:	49c7      	ldr	r1, [pc, #796]	; (8001aa8 <lcd_psu_init+0x32c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800178a:	48c8      	ldr	r0, [pc, #800]	; (8001aac <lcd_psu_init+0x330>)
 800178c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800178e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001790:	aa03      	add	r2, sp, #12
 8001792:	214e      	movs	r1, #78	; 0x4e
 8001794:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001796:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001798:	f004 f876 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800179c:	2356      	movs	r3, #86	; 0x56
 800179e:	4dc4      	ldr	r5, [pc, #784]	; (8001ab0 <lcd_psu_init+0x334>)
	data_l = ((data<<4)&0xf0);
 80017a0:	011a      	lsls	r2, r3, #4
 80017a2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80017a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80017a8:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80017ac:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80017b0:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80017b4:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80017b8:	2304      	movs	r3, #4
 80017ba:	214e      	movs	r1, #78	; 0x4e
 80017bc:	4638      	mov	r0, r7
 80017be:	aa03      	add	r2, sp, #12
 80017c0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80017c2:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80017c6:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80017ca:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80017ce:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80017d2:	f004 f859 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80017d6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1e0      	bne.n	80017a0 <lcd_psu_init+0x24>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80017de:	49b5      	ldr	r1, [pc, #724]	; (8001ab4 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80017e0:	2304      	movs	r3, #4
 80017e2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80017e4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80017e6:	48b1      	ldr	r0, [pc, #708]	; (8001aac <lcd_psu_init+0x330>)
 80017e8:	214e      	movs	r1, #78	; 0x4e
 80017ea:	aa03      	add	r2, sp, #12
 80017ec:	f004 f84c 	bl	8005888 <HAL_I2C_Master_Transmit>
 80017f0:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80017f2:	2320      	movs	r3, #32
 80017f4:	4db0      	ldr	r5, [pc, #704]	; (8001ab8 <lcd_psu_init+0x33c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80017f6:	4fad      	ldr	r7, [pc, #692]	; (8001aac <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 80017f8:	011a      	lsls	r2, r3, #4
 80017fa:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80017fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001800:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001804:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001808:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800180c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001810:	2304      	movs	r3, #4
 8001812:	214e      	movs	r1, #78	; 0x4e
 8001814:	4638      	mov	r0, r7
 8001816:	aa03      	add	r2, sp, #12
 8001818:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800181a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800181e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001822:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001826:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800182a:	f004 f82d 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800182e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1e0      	bne.n	80017f8 <lcd_psu_init+0x7c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001836:	49a1      	ldr	r1, [pc, #644]	; (8001abc <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001838:	2304      	movs	r3, #4
 800183a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800183c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800183e:	489b      	ldr	r0, [pc, #620]	; (8001aac <lcd_psu_init+0x330>)
 8001840:	214e      	movs	r1, #78	; 0x4e
 8001842:	aa03      	add	r2, sp, #12
 8001844:	f004 f820 	bl	8005888 <HAL_I2C_Master_Transmit>
 8001848:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 800184a:	2330      	movs	r3, #48	; 0x30
 800184c:	4d9c      	ldr	r5, [pc, #624]	; (8001ac0 <lcd_psu_init+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800184e:	4f97      	ldr	r7, [pc, #604]	; (8001aac <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001850:	011a      	lsls	r2, r3, #4
 8001852:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001858:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800185c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001860:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001864:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001868:	2304      	movs	r3, #4
 800186a:	214e      	movs	r1, #78	; 0x4e
 800186c:	4638      	mov	r0, r7
 800186e:	aa03      	add	r2, sp, #12
 8001870:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001872:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001876:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800187a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800187e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001882:	f004 f801 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001886:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1e0      	bne.n	8001850 <lcd_psu_init+0xd4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800188e:	498d      	ldr	r1, [pc, #564]	; (8001ac4 <lcd_psu_init+0x348>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001890:	2304      	movs	r3, #4
 8001892:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001894:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001896:	4885      	ldr	r0, [pc, #532]	; (8001aac <lcd_psu_init+0x330>)
 8001898:	214e      	movs	r1, #78	; 0x4e
 800189a:	aa03      	add	r2, sp, #12
 800189c:	f003 fff4 	bl	8005888 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80018a0:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80018a2:	2341      	movs	r3, #65	; 0x41
 80018a4:	4d88      	ldr	r5, [pc, #544]	; (8001ac8 <lcd_psu_init+0x34c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80018a6:	4f81      	ldr	r7, [pc, #516]	; (8001aac <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 80018a8:	011a      	lsls	r2, r3, #4
 80018aa:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80018ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80018b0:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80018b4:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80018b8:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80018bc:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80018c0:	2304      	movs	r3, #4
 80018c2:	214e      	movs	r1, #78	; 0x4e
 80018c4:	4638      	mov	r0, r7
 80018c6:	aa03      	add	r2, sp, #12
 80018c8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80018ca:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80018ce:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80018d2:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80018d6:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80018da:	f003 ffd5 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80018de:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1e0      	bne.n	80018a8 <lcd_psu_init+0x12c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80018e6:	4973      	ldr	r1, [pc, #460]	; (8001ab4 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80018e8:	2304      	movs	r3, #4
 80018ea:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80018ec:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80018ee:	486f      	ldr	r0, [pc, #444]	; (8001aac <lcd_psu_init+0x330>)
 80018f0:	214e      	movs	r1, #78	; 0x4e
 80018f2:	aa03      	add	r2, sp, #12
 80018f4:	f003 ffc8 	bl	8005888 <HAL_I2C_Master_Transmit>
 80018f8:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80018fa:	2320      	movs	r3, #32
 80018fc:	4d73      	ldr	r5, [pc, #460]	; (8001acc <lcd_psu_init+0x350>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80018fe:	4f6b      	ldr	r7, [pc, #428]	; (8001aac <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001900:	011a      	lsls	r2, r3, #4
 8001902:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001908:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800190c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001910:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001914:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001918:	2304      	movs	r3, #4
 800191a:	214e      	movs	r1, #78	; 0x4e
 800191c:	4638      	mov	r0, r7
 800191e:	aa03      	add	r2, sp, #12
 8001920:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001922:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001926:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800192a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800192e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001932:	f003 ffa9 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001936:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1e0      	bne.n	8001900 <lcd_psu_init+0x184>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800193e:	495f      	ldr	r1, [pc, #380]	; (8001abc <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001940:	2304      	movs	r3, #4
 8001942:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001944:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001946:	4859      	ldr	r0, [pc, #356]	; (8001aac <lcd_psu_init+0x330>)
 8001948:	214e      	movs	r1, #78	; 0x4e
 800194a:	aa03      	add	r2, sp, #12
 800194c:	f003 ff9c 	bl	8005888 <HAL_I2C_Master_Transmit>
 8001950:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001952:	2330      	movs	r3, #48	; 0x30
 8001954:	4d5e      	ldr	r5, [pc, #376]	; (8001ad0 <lcd_psu_init+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001956:	4f55      	ldr	r7, [pc, #340]	; (8001aac <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001958:	011a      	lsls	r2, r3, #4
 800195a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800195c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001960:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001964:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001968:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800196c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001970:	2304      	movs	r3, #4
 8001972:	214e      	movs	r1, #78	; 0x4e
 8001974:	4638      	mov	r0, r7
 8001976:	aa03      	add	r2, sp, #12
 8001978:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800197a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800197e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001982:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001986:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800198a:	f003 ff7d 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800198e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1e0      	bne.n	8001958 <lcd_psu_init+0x1dc>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001996:	494f      	ldr	r1, [pc, #316]	; (8001ad4 <lcd_psu_init+0x358>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001998:	2304      	movs	r3, #4
 800199a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800199c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800199e:	4843      	ldr	r0, [pc, #268]	; (8001aac <lcd_psu_init+0x330>)
 80019a0:	214e      	movs	r1, #78	; 0x4e
 80019a2:	aa03      	add	r2, sp, #12
 80019a4:	f003 ff70 	bl	8005888 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80019a8:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80019aa:	2356      	movs	r3, #86	; 0x56
 80019ac:	4d4a      	ldr	r5, [pc, #296]	; (8001ad8 <lcd_psu_init+0x35c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80019ae:	4f3f      	ldr	r7, [pc, #252]	; (8001aac <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 80019b0:	011a      	lsls	r2, r3, #4
 80019b2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80019b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80019b8:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80019bc:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019c0:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80019c4:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80019c8:	2304      	movs	r3, #4
 80019ca:	214e      	movs	r1, #78	; 0x4e
 80019cc:	4638      	mov	r0, r7
 80019ce:	aa03      	add	r2, sp, #12
 80019d0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019d2:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80019d6:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80019da:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80019de:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80019e2:	f003 ff51 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80019e6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1e0      	bne.n	80019b0 <lcd_psu_init+0x234>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019ee:	4931      	ldr	r1, [pc, #196]	; (8001ab4 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80019f0:	2304      	movs	r3, #4
 80019f2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019f4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80019f6:	482d      	ldr	r0, [pc, #180]	; (8001aac <lcd_psu_init+0x330>)
 80019f8:	214e      	movs	r1, #78	; 0x4e
 80019fa:	aa03      	add	r2, sp, #12
 80019fc:	f003 ff44 	bl	8005888 <HAL_I2C_Master_Transmit>
 8001a00:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001a02:	2320      	movs	r3, #32
 8001a04:	4d35      	ldr	r5, [pc, #212]	; (8001adc <lcd_psu_init+0x360>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001a06:	4f29      	ldr	r7, [pc, #164]	; (8001aac <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001a08:	011a      	lsls	r2, r3, #4
 8001a0a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a10:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a14:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a18:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a1c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001a20:	2304      	movs	r3, #4
 8001a22:	214e      	movs	r1, #78	; 0x4e
 8001a24:	4638      	mov	r0, r7
 8001a26:	aa03      	add	r2, sp, #12
 8001a28:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a2a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a2e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a32:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a36:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001a3a:	f003 ff25 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001a3e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1e0      	bne.n	8001a08 <lcd_psu_init+0x28c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a46:	491d      	ldr	r1, [pc, #116]	; (8001abc <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001a48:	2304      	movs	r3, #4
 8001a4a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a4c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001a4e:	4817      	ldr	r0, [pc, #92]	; (8001aac <lcd_psu_init+0x330>)
 8001a50:	214e      	movs	r1, #78	; 0x4e
 8001a52:	aa03      	add	r2, sp, #12
 8001a54:	f003 ff18 	bl	8005888 <HAL_I2C_Master_Transmit>
 8001a58:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001a5a:	2330      	movs	r3, #48	; 0x30
 8001a5c:	4d18      	ldr	r5, [pc, #96]	; (8001ac0 <lcd_psu_init+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001a5e:	4f13      	ldr	r7, [pc, #76]	; (8001aac <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001a60:	011a      	lsls	r2, r3, #4
 8001a62:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a68:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a6c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a70:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a74:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001a78:	2304      	movs	r3, #4
 8001a7a:	214e      	movs	r1, #78	; 0x4e
 8001a7c:	4638      	mov	r0, r7
 8001a7e:	aa03      	add	r2, sp, #12
 8001a80:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a82:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a86:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a8a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a8e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001a92:	f003 fef9 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001a96:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1e0      	bne.n	8001a60 <lcd_psu_init+0x2e4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a9e:	4910      	ldr	r1, [pc, #64]	; (8001ae0 <lcd_psu_init+0x364>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	9600      	str	r6, [sp, #0]
 8001aa4:	e01e      	b.n	8001ae4 <lcd_psu_init+0x368>
 8001aa6:	bf00      	nop
 8001aa8:	080c888c 	.word	0x080c888c
 8001aac:	200004ec 	.word	0x200004ec
 8001ab0:	0800c780 	.word	0x0800c780
 8001ab4:	191d090d 	.word	0x191d090d
 8001ab8:	0800c78c 	.word	0x0800c78c
 8001abc:	090d090d 	.word	0x090d090d
 8001ac0:	0800c790 	.word	0x0800c790
 8001ac4:	080cc8cc 	.word	0x080cc8cc
 8001ac8:	0800c798 	.word	0x0800c798
 8001acc:	0800c7a4 	.word	0x0800c7a4
 8001ad0:	0800c7a8 	.word	0x0800c7a8
 8001ad4:	484c989c 	.word	0x484c989c
 8001ad8:	0800c7b0 	.word	0x0800c7b0
 8001adc:	0800c7bc 	.word	0x0800c7bc
 8001ae0:	484cd8dc 	.word	0x484cd8dc
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ae4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001ae6:	4841      	ldr	r0, [pc, #260]	; (8001bec <lcd_psu_init+0x470>)
 8001ae8:	214e      	movs	r1, #78	; 0x4e
 8001aea:	aa03      	add	r2, sp, #12
 8001aec:	f003 fecc 	bl	8005888 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001af0:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001af2:	2341      	movs	r3, #65	; 0x41
 8001af4:	4d3e      	ldr	r5, [pc, #248]	; (8001bf0 <lcd_psu_init+0x474>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001af6:	4f3d      	ldr	r7, [pc, #244]	; (8001bec <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001af8:	011a      	lsls	r2, r3, #4
 8001afa:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b00:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b04:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b08:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b0c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001b10:	2304      	movs	r3, #4
 8001b12:	214e      	movs	r1, #78	; 0x4e
 8001b14:	4638      	mov	r0, r7
 8001b16:	aa03      	add	r2, sp, #12
 8001b18:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b1a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b1e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b22:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b26:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001b2a:	f003 fead 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001b2e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1e0      	bne.n	8001af8 <lcd_psu_init+0x37c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b36:	492f      	ldr	r1, [pc, #188]	; (8001bf4 <lcd_psu_init+0x478>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001b38:	2304      	movs	r3, #4
 8001b3a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b3c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001b3e:	482b      	ldr	r0, [pc, #172]	; (8001bec <lcd_psu_init+0x470>)
 8001b40:	214e      	movs	r1, #78	; 0x4e
 8001b42:	aa03      	add	r2, sp, #12
 8001b44:	f003 fea0 	bl	8005888 <HAL_I2C_Master_Transmit>
 8001b48:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	4d2a      	ldr	r5, [pc, #168]	; (8001bf8 <lcd_psu_init+0x47c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001b4e:	4f27      	ldr	r7, [pc, #156]	; (8001bec <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001b50:	011a      	lsls	r2, r3, #4
 8001b52:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b58:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b5c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b60:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b64:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001b68:	2304      	movs	r3, #4
 8001b6a:	214e      	movs	r1, #78	; 0x4e
 8001b6c:	4638      	mov	r0, r7
 8001b6e:	aa03      	add	r2, sp, #12
 8001b70:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b72:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b76:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b7a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b7e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001b82:	f003 fe81 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001b86:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1e0      	bne.n	8001b50 <lcd_psu_init+0x3d4>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b8e:	491b      	ldr	r1, [pc, #108]	; (8001bfc <lcd_psu_init+0x480>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001b90:	2304      	movs	r3, #4
 8001b92:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b94:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001b96:	4815      	ldr	r0, [pc, #84]	; (8001bec <lcd_psu_init+0x470>)
 8001b98:	214e      	movs	r1, #78	; 0x4e
 8001b9a:	aa03      	add	r2, sp, #12
 8001b9c:	f003 fe74 	bl	8005888 <HAL_I2C_Master_Transmit>
 8001ba0:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001ba2:	2330      	movs	r3, #48	; 0x30
 8001ba4:	4c16      	ldr	r4, [pc, #88]	; (8001c00 <lcd_psu_init+0x484>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001ba6:	4d11      	ldr	r5, [pc, #68]	; (8001bec <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001ba8:	011a      	lsls	r2, r3, #4
 8001baa:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001bb0:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001bb4:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001bb8:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001bbc:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	214e      	movs	r1, #78	; 0x4e
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	aa03      	add	r2, sp, #12
 8001bc8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001bca:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001bce:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001bd2:	f88d 700e 	strb.w	r7, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001bd6:	f88d e00f 	strb.w	lr, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8001bda:	f003 fe55 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001bde:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1e0      	bne.n	8001ba8 <lcd_psu_init+0x42c>
}
 8001be6:	b004      	add	sp, #16
 8001be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bec:	200004ec 	.word	0x200004ec
 8001bf0:	0800c7c0 	.word	0x0800c7c0
 8001bf4:	191d090d 	.word	0x191d090d
 8001bf8:	0800c7cc 	.word	0x0800c7cc
 8001bfc:	090d090d 	.word	0x090d090d
 8001c00:	0800c7a8 	.word	0x0800c7a8

08001c04 <our_init>:
{
 8001c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_ADC_DeInit(&hadc);
 8001c08:	4f51      	ldr	r7, [pc, #324]	; (8001d50 <our_init+0x14c>)
{
 8001c0a:	b08d      	sub	sp, #52	; 0x34
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2140      	movs	r1, #64	; 0x40
 8001c10:	4850      	ldr	r0, [pc, #320]	; (8001d54 <our_init+0x150>)
 8001c12:	f003 fd57 	bl	80056c4 <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 8001c16:	4638      	mov	r0, r7
 8001c18:	f002 fec6 	bl	80049a8 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 8001c1c:	484e      	ldr	r0, [pc, #312]	; (8001d58 <our_init+0x154>)
 8001c1e:	f003 fa53 	bl	80050c8 <HAL_DMA_DeInit>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c24:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <our_init+0x158>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c26:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c28:	69d9      	ldr	r1, [r3, #28]
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001c2a:	4d4d      	ldr	r5, [pc, #308]	; (8001d60 <our_init+0x15c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c2c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001c30:	61d9      	str	r1, [r3, #28]
 8001c32:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c34:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c3a:	9307      	str	r3, [sp, #28]
 8001c3c:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c3e:	f003 f90d 	bl	8004e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c42:	200b      	movs	r0, #11
 8001c44:	f003 f948 	bl	8004ed8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	200e      	movs	r0, #14
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	f003 f905 	bl	8004e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c52:	200e      	movs	r0, #14
 8001c54:	f003 f940 	bl	8004ed8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	200f      	movs	r0, #15
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	f003 f8fd 	bl	8004e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c62:	200f      	movs	r0, #15
 8001c64:	f003 f938 	bl	8004ed8 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 8001c68:	f7ff fbee 	bl	8001448 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adcvalues, 5);// start the adc in dma mode
 8001c6c:	2205      	movs	r2, #5
 8001c6e:	4638      	mov	r0, r7
 8001c70:	493c      	ldr	r1, [pc, #240]	; (8001d64 <our_init+0x160>)
 8001c72:	f003 f883 	bl	8004d7c <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001c76:	2100      	movs	r1, #0
 8001c78:	4628      	mov	r0, r5
 8001c7a:	f003 f97d 	bl	8004f78 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001c7e:	2110      	movs	r1, #16
 8001c80:	4628      	mov	r0, r5
 8001c82:	f003 f979 	bl	8004f78 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001c86:	2300      	movs	r3, #0
 8001c88:	4628      	mov	r0, r5
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f003 f9a3 	bl	8004fd8 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001c92:	2300      	movs	r3, #0
 8001c94:	4628      	mov	r0, r5
 8001c96:	461a      	mov	r2, r3
 8001c98:	2110      	movs	r1, #16
 8001c9a:	f003 f99d 	bl	8004fd8 <HAL_DAC_SetValue>
	ExtiConfig.Line = EXTI_LINE_1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	4a31      	ldr	r2, [pc, #196]	; (8001d68 <our_init+0x164>)
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001ca2:	a908      	add	r1, sp, #32
	ExtiConfig.Line = EXTI_LINE_1;
 8001ca4:	e9cd 2308 	strd	r2, r3, [sp, #32]
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001ca8:	2303      	movs	r3, #3
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001caa:	4830      	ldr	r0, [pc, #192]	; (8001d6c <our_init+0x168>)
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001cac:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001cae:	f003 fb21 	bl	80052f4 <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001cb4:	2440      	movs	r4, #64	; 0x40
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	2007      	movs	r0, #7
 8001cba:	f003 f8cf 	bl	8004e5c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001cbe:	2007      	movs	r0, #7
 8001cc0:	f003 f90a 	bl	8004ed8 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001cca:	4829      	ldr	r0, [pc, #164]	; (8001d70 <our_init+0x16c>)
 8001ccc:	f003 fcfa 	bl	80056c4 <HAL_GPIO_WritePin>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001cd0:	4e28      	ldr	r6, [pc, #160]	; (8001d74 <our_init+0x170>)
	lcd_psu_init();
 8001cd2:	f7ff fd53 	bl	800177c <lcd_psu_init>
	HAL_TIM_Base_Start_IT(&htim3);
 8001cd6:	4828      	ldr	r0, [pc, #160]	; (8001d78 <our_init+0x174>)
 8001cd8:	f005 fab8 	bl	800724c <HAL_TIM_Base_Start_IT>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001cdc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8001d7c <our_init+0x178>
	memset (usbbuffer, '\0', 128);  // clear the buffer
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4826      	ldr	r0, [pc, #152]	; (8001d80 <our_init+0x17c>)
 8001ce6:	f007 fe55 	bl	8009994 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001cea:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001d84 <our_init+0x180>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001cee:	4622      	mov	r2, r4
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4630      	mov	r0, r6
 8001cf4:	f007 fe4e 	bl	8009994 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001cf8:	4622      	mov	r2, r4
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4648      	mov	r0, r9
 8001cfe:	f007 fe49 	bl	8009994 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001d02:	4622      	mov	r2, r4
 8001d04:	4649      	mov	r1, r9
 8001d06:	4640      	mov	r0, r8
 8001d08:	f005 fd14 	bl	8007734 <HAL_UART_Receive_DMA>
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", voltnum2, ampnum2, chstat2);
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <our_init+0x184>)
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <our_init+0x188>)
 8001d10:	6815      	ldr	r5, [r2, #0]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <our_init+0x18c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	9304      	str	r3, [sp, #16]
 8001d1a:	f7fe fb9d 	bl	8000458 <__aeabi_f2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4628      	mov	r0, r5
 8001d24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d28:	f7fe fb96 	bl	8000458 <__aeabi_f2d>
 8001d2c:	4682      	mov	sl, r0
 8001d2e:	468b      	mov	fp, r1
 8001d30:	4630      	mov	r0, r6
 8001d32:	2120      	movs	r1, #32
 8001d34:	e9cd ab00 	strd	sl, fp, [sp]
 8001d38:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <our_init+0x190>)
 8001d3a:	f008 fa93 	bl	800a264 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001d3e:	4622      	mov	r2, r4
 8001d40:	4631      	mov	r1, r6
 8001d42:	4640      	mov	r0, r8
}
 8001d44:	b00d      	add	sp, #52	; 0x34
 8001d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001d4a:	f005 bcb7 	b.w	80076bc <HAL_UART_Transmit_DMA>
 8001d4e:	bf00      	nop
 8001d50:	200003b0 	.word	0x200003b0
 8001d54:	40020000 	.word	0x40020000
 8001d58:	20000418 	.word	0x20000418
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	20000404 	.word	0x20000404
 8001d64:	20000390 	.word	0x20000390
 8001d68:	06000001 	.word	0x06000001
 8001d6c:	200004e4 	.word	0x200004e4
 8001d70:	40020800 	.word	0x40020800
 8001d74:	2000075c 	.word	0x2000075c
 8001d78:	20000600 	.word	0x20000600
 8001d7c:	20000710 	.word	0x20000710
 8001d80:	2000079c 	.word	0x2000079c
 8001d84:	200006c0 	.word	0x200006c0
 8001d88:	20000824 	.word	0x20000824
 8001d8c:	200003a0 	.word	0x200003a0
 8001d90:	200003a4 	.word	0x200003a4
 8001d94:	0800c7d0 	.word	0x0800c7d0

08001d98 <main>:
{
 8001d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	2400      	movs	r4, #0
{
 8001d9e:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8001da0:	f002 fcfe 	bl	80047a0 <HAL_Init>
  SystemClock_Config();
 8001da4:	f7ff fbb6 	bl	8001514 <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001da8:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8001dae:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db2:	4db0      	ldr	r5, [pc, #704]	; (8002074 <main+0x2dc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db6:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001db8:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dba:	f043 0320 	orr.w	r3, r3, #32
 8001dbe:	61eb      	str	r3, [r5, #28]
 8001dc0:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001dc2:	48ad      	ldr	r0, [pc, #692]	; (8002078 <main+0x2e0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	9304      	str	r3, [sp, #16]
 8001dca:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dce:	4691      	mov	r9, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61eb      	str	r3, [r5, #28]
 8001dd4:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001dd6:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd8:	4013      	ands	r3, r2
 8001dda:	9305      	str	r3, [sp, #20]
 8001ddc:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dde:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001de0:	2700      	movs	r7, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	61eb      	str	r3, [r5, #28]
 8001de8:	69eb      	ldr	r3, [r5, #28]
  hdac.Instance = DAC;
 8001dea:	f8df 8290 	ldr.w	r8, [pc, #656]	; 800207c <main+0x2e4>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	9306      	str	r3, [sp, #24]
 8001df4:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	69eb      	ldr	r3, [r5, #28]
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	61eb      	str	r3, [r5, #28]
 8001dfe:	69eb      	ldr	r3, [r5, #28]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	9307      	str	r3, [sp, #28]
 8001e06:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e08:	f003 fc5c 	bl	80056c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001e0c:	4622      	mov	r2, r4
 8001e0e:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001e12:	489b      	ldr	r0, [pc, #620]	; (8002080 <main+0x2e8>)
 8001e14:	f003 fc56 	bl	80056c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e18:	2240      	movs	r2, #64	; 0x40
 8001e1a:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	4896      	ldr	r0, [pc, #600]	; (8002078 <main+0x2e0>)
 8001e1e:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001e24:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f003 faca 	bl	80053c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001e2c:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8001e30:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e32:	4893      	ldr	r0, [pc, #588]	; (8002080 <main+0x2e8>)
 8001e34:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001e36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001e3a:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3e:	f003 fabf 	bl	80053c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 8001e42:	f647 4205 	movw	r2, #31749	; 0x7c05
 8001e46:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	488e      	ldr	r0, [pc, #568]	; (8002084 <main+0x2ec>)
 8001e4c:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 8001e4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e52:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e56:	f003 fab3 	bl	80053c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2202      	movs	r2, #2
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	4889      	ldr	r0, [pc, #548]	; (8002084 <main+0x2ec>)
 8001e60:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001e62:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e66:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001e6a:	f003 faa9 	bl	80053c0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e6e:	4622      	mov	r2, r4
 8001e70:	4621      	mov	r1, r4
 8001e72:	2006      	movs	r0, #6
 8001e74:	f002 fff2 	bl	8004e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e78:	2006      	movs	r0, #6
 8001e7a:	f003 f82d 	bl	8004ed8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001e7e:	4622      	mov	r2, r4
 8001e80:	4621      	mov	r1, r4
 8001e82:	2008      	movs	r0, #8
 8001e84:	f002 ffea 	bl	8004e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001e88:	2008      	movs	r0, #8
 8001e8a:	f003 f825 	bl	8004ed8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e8e:	4622      	mov	r2, r4
 8001e90:	4621      	mov	r1, r4
 8001e92:	2028      	movs	r0, #40	; 0x28
 8001e94:	f002 ffe2 	bl	8004e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e98:	2028      	movs	r0, #40	; 0x28
 8001e9a:	f003 f81d 	bl	8004ed8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e9e:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ea0:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	61eb      	str	r3, [r5, #28]
 8001ea8:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001eaa:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001eb0:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eb2:	9303      	str	r3, [sp, #12]
 8001eb4:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001eb6:	f002 ffd1 	bl	8004e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001eba:	200b      	movs	r0, #11
 8001ebc:	f003 f80c 	bl	8004ed8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001ec0:	4622      	mov	r2, r4
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	200e      	movs	r0, #14
 8001ec6:	f002 ffc9 	bl	8004e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001eca:	200e      	movs	r0, #14
 8001ecc:	f003 f804 	bl	8004ed8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ed0:	4622      	mov	r2, r4
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	200f      	movs	r0, #15
 8001ed6:	f002 ffc1 	bl	8004e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001eda:	200f      	movs	r0, #15
 8001edc:	f002 fffc 	bl	8004ed8 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 8001ee0:	f7ff fab2 	bl	8001448 <MX_ADC_Init>
  hdac.Instance = DAC;
 8001ee4:	4b68      	ldr	r3, [pc, #416]	; (8002088 <main+0x2f0>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001ee6:	4640      	mov	r0, r8
  DAC_ChannelConfTypeDef sConfig = {0};
 8001ee8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  hdac.Instance = DAC;
 8001eec:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001ef0:	f003 f82c 	bl	8004f4c <HAL_DAC_Init>
 8001ef4:	b108      	cbz	r0, 8001efa <main+0x162>
 8001ef6:	b672      	cpsid	i
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <main+0x160>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001efa:	4602      	mov	r2, r0
 8001efc:	a90a      	add	r1, sp, #40	; 0x28
 8001efe:	4640      	mov	r0, r8
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f00:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f04:	f003 f87e 	bl	8005004 <HAL_DAC_ConfigChannel>
 8001f08:	b108      	cbz	r0, 8001f0e <main+0x176>
 8001f0a:	b672      	cpsid	i
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <main+0x174>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001f0e:	2210      	movs	r2, #16
 8001f10:	4640      	mov	r0, r8
 8001f12:	a90a      	add	r1, sp, #40	; 0x28
 8001f14:	f003 f876 	bl	8005004 <HAL_DAC_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	b108      	cbz	r0, 8001f20 <main+0x188>
 8001f1c:	b672      	cpsid	i
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <main+0x186>
  hi2c1.Instance = I2C1;
 8001f20:	485a      	ldr	r0, [pc, #360]	; (800208c <main+0x2f4>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f22:	219c      	movs	r1, #156	; 0x9c
  hi2c1.Init.OwnAddress2 = 0;
 8001f24:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f28:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f2c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001f32:	4c57      	ldr	r4, [pc, #348]	; (8002090 <main+0x2f8>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f34:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hi2c1.Init.ClockSpeed = 100000;
 8001f38:	4b56      	ldr	r3, [pc, #344]	; (8002094 <main+0x2fc>)
 8001f3a:	e9c0 4300 	strd	r4, r3, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f3e:	f003 fbdb 	bl	80056f8 <HAL_I2C_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b9b8      	cbnz	r0, 8001f76 <main+0x1de>
  huart1.Instance = USART1;
 8001f46:	4854      	ldr	r0, [pc, #336]	; (8002098 <main+0x300>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001f48:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f50:	60c3      	str	r3, [r0, #12]
  huart1.Init.BaudRate = 4800;
 8001f52:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8001f56:	6043      	str	r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001f58:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f5c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f5e:	230c      	movs	r3, #12
 8001f60:	6143      	str	r3, [r0, #20]
  huart1.Instance = USART1;
 8001f62:	4b4e      	ldr	r3, [pc, #312]	; (800209c <main+0x304>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001f64:	f8c0 8008 	str.w	r8, [r0, #8]
  huart1.Instance = USART1;
 8001f68:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f6a:	f005 fb1d 	bl	80075a8 <HAL_UART_Init>
 8001f6e:	4604      	mov	r4, r0
 8001f70:	b118      	cbz	r0, 8001f7a <main+0x1e2>
 8001f72:	b672      	cpsid	i
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <main+0x1dc>
 8001f76:	b672      	cpsid	i
 8001f78:	e7fe      	b.n	8001f78 <main+0x1e0>
  MX_USB_DEVICE_Init();
 8001f7a:	f007 fa43 	bl	8009404 <MX_USB_DEVICE_Init>
  htim2.Init.Prescaler = 32000;
 8001f7e:	f44f 49fa 	mov.w	r9, #32000	; 0x7d00
  htim2.Instance = TIM2;
 8001f82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 10;
 8001f86:	230a      	movs	r3, #10
  htim2.Instance = TIM2;
 8001f88:	4d45      	ldr	r5, [pc, #276]	; (80020a0 <main+0x308>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f8e:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f90:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f98:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9c:	60ac      	str	r4, [r5, #8]
  htim2.Instance = TIM2;
 8001f9e:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = 10;
 8001fa0:	60eb      	str	r3, [r5, #12]
  htim2.Init.Prescaler = 32000;
 8001fa2:	f8c5 9004 	str.w	r9, [r5, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fa6:	f005 f901 	bl	80071ac <HAL_TIM_Base_Init>
 8001faa:	b108      	cbz	r0, 8001fb0 <main+0x218>
 8001fac:	b672      	cpsid	i
  while (1)
 8001fae:	e7fe      	b.n	8001fae <main+0x216>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fb8:	f005 f98a 	bl	80072d0 <HAL_TIM_ConfigClockSource>
 8001fbc:	b108      	cbz	r0, 8001fc2 <main+0x22a>
 8001fbe:	b672      	cpsid	i
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <main+0x228>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fc2:	4628      	mov	r0, r5
 8001fc4:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc6:	e9cd 6708 	strd	r6, r7, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fca:	f005 fabb 	bl	8007544 <HAL_TIMEx_MasterConfigSynchronization>
 8001fce:	b108      	cbz	r0, 8001fd4 <main+0x23c>
 8001fd0:	b672      	cpsid	i
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <main+0x23a>
  htim3.Init.Period = 500;
 8001fd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  htim3.Instance = TIM3;
 8001fd8:	4c32      	ldr	r4, [pc, #200]	; (80020a4 <main+0x30c>)
 8001fda:	4b33      	ldr	r3, [pc, #204]	; (80020a8 <main+0x310>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fdc:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8001fe0:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe4:	e9cd 0008 	strd	r0, r0, [sp, #32]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe8:	e9c4 9001 	strd	r9, r0, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fec:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ff0:	4620      	mov	r0, r4
  htim3.Init.Period = 500;
 8001ff2:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 8001ff4:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ff6:	f005 f8d9 	bl	80071ac <HAL_TIM_Base_Init>
 8001ffa:	b108      	cbz	r0, 8002000 <main+0x268>
 8001ffc:	b672      	cpsid	i
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <main+0x266>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002000:	4620      	mov	r0, r4
 8002002:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002008:	f005 f962 	bl	80072d0 <HAL_TIM_ConfigClockSource>
 800200c:	b108      	cbz	r0, 8002012 <main+0x27a>
 800200e:	b672      	cpsid	i
  while (1)
 8002010:	e7fe      	b.n	8002010 <main+0x278>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002012:	2400      	movs	r4, #0
 8002014:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002016:	4823      	ldr	r0, [pc, #140]	; (80020a4 <main+0x30c>)
 8002018:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201a:	e9cd 4508 	strd	r4, r5, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800201e:	f005 fa91 	bl	8007544 <HAL_TIMEx_MasterConfigSynchronization>
 8002022:	b108      	cbz	r0, 8002028 <main+0x290>
 8002024:	b672      	cpsid	i
  while (1)
 8002026:	e7fe      	b.n	8002026 <main+0x28e>
  htim4.Init.Prescaler = 32000;
 8002028:	f44f 46fa 	mov.w	r6, #32000	; 0x7d00
  htim4.Init.Period = 10;
 800202c:	220a      	movs	r2, #10
  htim4.Instance = TIM4;
 800202e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80020ac <main+0x314>
 8002032:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <main+0x318>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002034:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8002038:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203c:	e9cd 0008 	strd	r0, r0, [sp, #32]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002040:	e9c8 0004 	strd	r0, r0, [r8, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002044:	f8c8 0008 	str.w	r0, [r8, #8]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002048:	4640      	mov	r0, r8
  htim4.Init.Period = 10;
 800204a:	f8c8 200c 	str.w	r2, [r8, #12]
  htim4.Init.Prescaler = 32000;
 800204e:	f8c8 6004 	str.w	r6, [r8, #4]
  htim4.Instance = TIM4;
 8002052:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002056:	f005 f8a9 	bl	80071ac <HAL_TIM_Base_Init>
 800205a:	b108      	cbz	r0, 8002060 <main+0x2c8>
 800205c:	b672      	cpsid	i
  while (1)
 800205e:	e7fe      	b.n	800205e <main+0x2c6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002060:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002064:	4640      	mov	r0, r8
 8002066:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002068:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800206a:	f005 f931 	bl	80072d0 <HAL_TIM_ConfigClockSource>
 800206e:	b308      	cbz	r0, 80020b4 <main+0x31c>
 8002070:	b672      	cpsid	i
  while (1)
 8002072:	e7fe      	b.n	8002072 <main+0x2da>
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000
 800207c:	20000404 	.word	0x20000404
 8002080:	40020800 	.word	0x40020800
 8002084:	40020400 	.word	0x40020400
 8002088:	40007400 	.word	0x40007400
 800208c:	200004ec 	.word	0x200004ec
 8002090:	40005400 	.word	0x40005400
 8002094:	000186a0 	.word	0x000186a0
 8002098:	200006c0 	.word	0x200006c0
 800209c:	40013800 	.word	0x40013800
 80020a0:	200005c0 	.word	0x200005c0
 80020a4:	20000600 	.word	0x20000600
 80020a8:	40000400 	.word	0x40000400
 80020ac:	20000640 	.word	0x20000640
 80020b0:	40000800 	.word	0x40000800
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020b4:	4640      	mov	r0, r8
 80020b6:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b8:	e9cd 4508 	strd	r4, r5, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020bc:	f005 fa42 	bl	8007544 <HAL_TIMEx_MasterConfigSynchronization>
 80020c0:	b108      	cbz	r0, 80020c6 <main+0x32e>
 80020c2:	b672      	cpsid	i
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <main+0x32c>
  htim9.Init.Period = 20;
 80020c6:	2214      	movs	r2, #20
  htim9.Instance = TIM9;
 80020c8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800218c <main+0x3f4>
 80020cc:	4b30      	ldr	r3, [pc, #192]	; (8002190 <main+0x3f8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ce:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80020d2:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d6:	e9cd 0008 	strd	r0, r0, [sp, #32]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020da:	e9c8 6001 	strd	r6, r0, [r8, #4]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020de:	e9c8 0004 	strd	r0, r0, [r8, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80020e2:	4640      	mov	r0, r8
  htim9.Init.Period = 20;
 80020e4:	f8c8 200c 	str.w	r2, [r8, #12]
  htim9.Instance = TIM9;
 80020e8:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80020ec:	f005 f85e 	bl	80071ac <HAL_TIM_Base_Init>
 80020f0:	b108      	cbz	r0, 80020f6 <main+0x35e>
 80020f2:	b672      	cpsid	i
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <main+0x35c>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80020f6:	4640      	mov	r0, r8
 80020f8:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fa:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80020fc:	f005 f8e8 	bl	80072d0 <HAL_TIM_ConfigClockSource>
 8002100:	b108      	cbz	r0, 8002106 <main+0x36e>
 8002102:	b672      	cpsid	i
  while (1)
 8002104:	e7fe      	b.n	8002104 <main+0x36c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8002106:	4640      	mov	r0, r8
 8002108:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210a:	e9cd 4508 	strd	r4, r5, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 800210e:	f005 fa19 	bl	8007544 <HAL_TIMEx_MasterConfigSynchronization>
 8002112:	b108      	cbz	r0, 8002118 <main+0x380>
 8002114:	b672      	cpsid	i
  while (1)
 8002116:	e7fe      	b.n	8002116 <main+0x37e>
  htim10.Init.Period = 500;
 8002118:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
  htim10.Instance = TIM10;
 800211c:	4c1d      	ldr	r4, [pc, #116]	; (8002194 <main+0x3fc>)
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <main+0x400>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002120:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8002124:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002128:	e9c4 6001 	strd	r6, r0, [r4, #4]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212c:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002130:	4620      	mov	r0, r4
  htim10.Instance = TIM10;
 8002132:	6023      	str	r3, [r4, #0]
  htim10.Init.Period = 500;
 8002134:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002136:	f005 f839 	bl	80071ac <HAL_TIM_Base_Init>
 800213a:	b108      	cbz	r0, 8002140 <main+0x3a8>
 800213c:	b672      	cpsid	i
  while (1)
 800213e:	e7fe      	b.n	800213e <main+0x3a6>
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002140:	4620      	mov	r0, r4
 8002142:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002144:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002146:	f005 f8c3 	bl	80072d0 <HAL_TIM_ConfigClockSource>
 800214a:	4603      	mov	r3, r0
 800214c:	b108      	cbz	r0, 8002152 <main+0x3ba>
 800214e:	b672      	cpsid	i
  while (1)
 8002150:	e7fe      	b.n	8002150 <main+0x3b8>
  htim11.Instance = TIM11;
 8002152:	4812      	ldr	r0, [pc, #72]	; (800219c <main+0x404>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002154:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8002158:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  htim11.Init.Period = 500;
 800215c:	e9c0 3502 	strd	r3, r5, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002160:	e9c0 3304 	strd	r3, r3, [r0, #16]
  htim11.Instance = TIM11;
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <main+0x408>)
  htim11.Init.Prescaler = 32000;
 8002166:	6046      	str	r6, [r0, #4]
  htim11.Instance = TIM11;
 8002168:	6003      	str	r3, [r0, #0]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800216a:	f005 f81f 	bl	80071ac <HAL_TIM_Base_Init>
 800216e:	b108      	cbz	r0, 8002174 <main+0x3dc>
 8002170:	b672      	cpsid	i
  while (1)
 8002172:	e7fe      	b.n	8002172 <main+0x3da>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002178:	4808      	ldr	r0, [pc, #32]	; (800219c <main+0x404>)
 800217a:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800217c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800217e:	f005 f8a7 	bl	80072d0 <HAL_TIM_ConfigClockSource>
 8002182:	4604      	mov	r4, r0
 8002184:	b170      	cbz	r0, 80021a4 <main+0x40c>
 8002186:	b672      	cpsid	i
  while (1)
 8002188:	e7fe      	b.n	8002188 <main+0x3f0>
 800218a:	bf00      	nop
 800218c:	20000680 	.word	0x20000680
 8002190:	40010800 	.word	0x40010800
 8002194:	20000540 	.word	0x20000540
 8002198:	40010c00 	.word	0x40010c00
 800219c:	20000580 	.word	0x20000580
 80021a0:	40011000 	.word	0x40011000
  our_init();
 80021a4:	f7ff fd2e 	bl	8001c04 <our_init>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095);
 80021a8:	4622      	mov	r2, r4
 80021aa:	f640 73ff 	movw	r3, #4095	; 0xfff
 80021ae:	2110      	movs	r1, #16
 80021b0:	48a9      	ldr	r0, [pc, #676]	; (8002458 <main+0x6c0>)
 80021b2:	f002 ff11 	bl	8004fd8 <HAL_DAC_SetValue>
  adc_current = &adcvalues[2];
 80021b6:	4ba9      	ldr	r3, [pc, #676]	; (800245c <main+0x6c4>)
 80021b8:	49a9      	ldr	r1, [pc, #676]	; (8002460 <main+0x6c8>)
 80021ba:	1d1a      	adds	r2, r3, #4
 80021bc:	600a      	str	r2, [r1, #0]
  adc_opamp = &adcvalues[0];
 80021be:	4aa9      	ldr	r2, [pc, #676]	; (8002464 <main+0x6cc>)
  adc_linear = &adcvalues[1];
 80021c0:	49a9      	ldr	r1, [pc, #676]	; (8002468 <main+0x6d0>)
  adc_opamp = &adcvalues[0];
 80021c2:	6013      	str	r3, [r2, #0]
  float error_previous = 0;
 80021c4:	2200      	movs	r2, #0
 80021c6:	4614      	mov	r4, r2
  float integral = 0;
 80021c8:	4692      	mov	sl, r2
  float error_previous = 0;
 80021ca:	9200      	str	r2, [sp, #0]
  adc_linear = &adcvalues[1];
 80021cc:	1c9a      	adds	r2, r3, #2
 80021ce:	600a      	str	r2, [r1, #0]
  adc_switching = &adcvalues[3];
 80021d0:	49a6      	ldr	r1, [pc, #664]	; (800246c <main+0x6d4>)
 80021d2:	1d9a      	adds	r2, r3, #6
 80021d4:	600a      	str	r2, [r1, #0]
  adc_vref = &adcvalues[4];
 80021d6:	4aa6      	ldr	r2, [pc, #664]	; (8002470 <main+0x6d8>)
 80021d8:	3308      	adds	r3, #8
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)*adc_vref);
 80021da:	f8df b298 	ldr.w	fp, [pc, #664]	; 8002474 <main+0x6dc>
	  float cur_num_temp = ((((float)3.0 * (float)*adc_current * (float)vrefvalue)/((float)*adc_vref * (float)4095) / (float)20) / (float)0.15);
 80021de:	4ea6      	ldr	r6, [pc, #664]	; (8002478 <main+0x6e0>)
  adc_vref = &adcvalues[4];
 80021e0:	6013      	str	r3, [r2, #0]
	  if(voltnum1 <= 0.00){
 80021e2:	4ba6      	ldr	r3, [pc, #664]	; (800247c <main+0x6e4>)
 80021e4:	4621      	mov	r1, r4
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	f7fe ff6c 	bl	80010c4 <__aeabi_fcmple>
 80021ec:	b148      	cbz	r0, 8002202 <main+0x46a>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80021ee:	2201      	movs	r2, #1
 80021f0:	2140      	movs	r1, #64	; 0x40
 80021f2:	48a3      	ldr	r0, [pc, #652]	; (8002480 <main+0x6e8>)
 80021f4:	f003 fa66 	bl	80056c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_RESET);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2120      	movs	r1, #32
 80021fc:	48a1      	ldr	r0, [pc, #644]	; (8002484 <main+0x6ec>)
 80021fe:	f003 fa61 	bl	80056c4 <HAL_GPIO_WritePin>
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 8002202:	4ba1      	ldr	r3, [pc, #644]	; (8002488 <main+0x6f0>)
 8002204:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)*adc_vref);
 8002206:	8818      	ldrh	r0, [r3, #0]
 8002208:	f7fe fd5c 	bl	8000cc4 <__aeabi_ui2f>
 800220c:	4b98      	ldr	r3, [pc, #608]	; (8002470 <main+0x6d8>)
 800220e:	4605      	mov	r5, r0
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	8818      	ldrh	r0, [r3, #0]
 8002214:	f7fe fd56 	bl	8000cc4 <__aeabi_ui2f>
 8002218:	4680      	mov	r8, r0
 800221a:	4628      	mov	r0, r5
 800221c:	4641      	mov	r1, r8
 800221e:	f7fe fe5d 	bl	8000edc <__aeabi_fdiv>
 8002222:	4659      	mov	r1, fp
 8002224:	f7fe fda6 	bl	8000d74 <__aeabi_fmul>
	  float cur_num_temp = ((((float)3.0 * (float)*adc_current * (float)vrefvalue)/((float)*adc_vref * (float)4095) / (float)20) / (float)0.15);
 8002228:	4631      	mov	r1, r6
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)*adc_vref);
 800222a:	4607      	mov	r7, r0
	  float cur_num_temp = ((((float)3.0 * (float)*adc_current * (float)vrefvalue)/((float)*adc_vref * (float)4095) / (float)20) / (float)0.15);
 800222c:	4640      	mov	r0, r8
 800222e:	f7fe fda1 	bl	8000d74 <__aeabi_fmul>
 8002232:	4680      	mov	r8, r0
 8002234:	4b8a      	ldr	r3, [pc, #552]	; (8002460 <main+0x6c8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	8818      	ldrh	r0, [r3, #0]
 800223a:	f7fe fd43 	bl	8000cc4 <__aeabi_ui2f>
 800223e:	4659      	mov	r1, fp
 8002240:	f7fe fd98 	bl	8000d74 <__aeabi_fmul>
 8002244:	4629      	mov	r1, r5
 8002246:	f7fe fd95 	bl	8000d74 <__aeabi_fmul>
 800224a:	4641      	mov	r1, r8
 800224c:	f7fe fe46 	bl	8000edc <__aeabi_fdiv>
 8002250:	498e      	ldr	r1, [pc, #568]	; (800248c <main+0x6f4>)
 8002252:	f7fe fe43 	bl	8000edc <__aeabi_fdiv>
 8002256:	498e      	ldr	r1, [pc, #568]	; (8002490 <main+0x6f8>)
 8002258:	f7fe fe40 	bl	8000edc <__aeabi_fdiv>
	  if (cur_num_temp >= 0.0000) {
 800225c:	4621      	mov	r1, r4
	  float cur_num_temp = ((((float)3.0 * (float)*adc_current * (float)vrefvalue)/((float)*adc_vref * (float)4095) / (float)20) / (float)0.15);
 800225e:	4681      	mov	r9, r0
	  if (cur_num_temp >= 0.0000) {
 8002260:	f7fe ff3a 	bl	80010d8 <__aeabi_fcmpge>
 8002264:	b900      	cbnz	r0, 8002268 <main+0x4d0>
		  cur_num = 0.0000;
 8002266:	46a1      	mov	r9, r4
 8002268:	4b8a      	ldr	r3, [pc, #552]	; (8002494 <main+0x6fc>)
	  float op_num_temp = ((float)3.0 * ((float)*adc_opamp * (float)4.0) * (float)vrefvalue)/((float)*adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 800226a:	498b      	ldr	r1, [pc, #556]	; (8002498 <main+0x700>)
 800226c:	f8c3 9000 	str.w	r9, [r3]
 8002270:	4648      	mov	r0, r9
 8002272:	f7fe fd7f 	bl	8000d74 <__aeabi_fmul>
 8002276:	4681      	mov	r9, r0
 8002278:	4b7a      	ldr	r3, [pc, #488]	; (8002464 <main+0x6cc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	8818      	ldrh	r0, [r3, #0]
 800227e:	f7fe fd21 	bl	8000cc4 <__aeabi_ui2f>
 8002282:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002286:	f7fe fd75 	bl	8000d74 <__aeabi_fmul>
 800228a:	4659      	mov	r1, fp
 800228c:	f7fe fd72 	bl	8000d74 <__aeabi_fmul>
 8002290:	4629      	mov	r1, r5
 8002292:	f7fe fd6f 	bl	8000d74 <__aeabi_fmul>
 8002296:	4641      	mov	r1, r8
 8002298:	f7fe fe20 	bl	8000edc <__aeabi_fdiv>
 800229c:	4649      	mov	r1, r9
 800229e:	f7fe fc5f 	bl	8000b60 <__aeabi_fsub>
	  if (op_num_temp >= 0.0000) {
 80022a2:	4621      	mov	r1, r4
	  float op_num_temp = ((float)3.0 * ((float)*adc_opamp * (float)4.0) * (float)vrefvalue)/((float)*adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 80022a4:	9001      	str	r0, [sp, #4]
	  if (op_num_temp >= 0.0000) {
 80022a6:	f7fe ff17 	bl	80010d8 <__aeabi_fcmpge>
 80022aa:	9b01      	ldr	r3, [sp, #4]
 80022ac:	b900      	cbnz	r0, 80022b0 <main+0x518>
		  op_num = 0.0000;
 80022ae:	4623      	mov	r3, r4
 80022b0:	4a7a      	ldr	r2, [pc, #488]	; (800249c <main+0x704>)
 80022b2:	6013      	str	r3, [r2, #0]
	  float lin_num_temp = ((float)3.0 * ((float)*adc_linear * (float)4.0) * (float)vrefvalue)/((float)*adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 80022b4:	4b6c      	ldr	r3, [pc, #432]	; (8002468 <main+0x6d0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	8818      	ldrh	r0, [r3, #0]
 80022ba:	f7fe fd03 	bl	8000cc4 <__aeabi_ui2f>
 80022be:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80022c2:	f7fe fd57 	bl	8000d74 <__aeabi_fmul>
 80022c6:	4659      	mov	r1, fp
 80022c8:	f7fe fd54 	bl	8000d74 <__aeabi_fmul>
 80022cc:	4629      	mov	r1, r5
 80022ce:	f7fe fd51 	bl	8000d74 <__aeabi_fmul>
 80022d2:	4641      	mov	r1, r8
 80022d4:	f7fe fe02 	bl	8000edc <__aeabi_fdiv>
 80022d8:	4649      	mov	r1, r9
 80022da:	f7fe fc41 	bl	8000b60 <__aeabi_fsub>
	  if (lin_num_temp >= 0.0000) {
 80022de:	4621      	mov	r1, r4
	  float lin_num_temp = ((float)3.0 * ((float)*adc_linear * (float)4.0) * (float)vrefvalue)/((float)*adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 80022e0:	4681      	mov	r9, r0
	  if (lin_num_temp >= 0.0000) {
 80022e2:	f7fe fef9 	bl	80010d8 <__aeabi_fcmpge>
 80022e6:	b900      	cbnz	r0, 80022ea <main+0x552>
		  lin_num = 0.0000;
 80022e8:	46a1      	mov	r9, r4
 80022ea:	4b6d      	ldr	r3, [pc, #436]	; (80024a0 <main+0x708>)
 80022ec:	f8c3 9000 	str.w	r9, [r3]
	  float swi_num_temp = ((float)3.0 * ((float)*adc_switching * (float)5.0) * (float)vrefvalue)/((float)*adc_vref * (float)4095);
 80022f0:	4b5e      	ldr	r3, [pc, #376]	; (800246c <main+0x6d4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	8818      	ldrh	r0, [r3, #0]
 80022f6:	f7fe fce5 	bl	8000cc4 <__aeabi_ui2f>
 80022fa:	496a      	ldr	r1, [pc, #424]	; (80024a4 <main+0x70c>)
 80022fc:	f7fe fd3a 	bl	8000d74 <__aeabi_fmul>
 8002300:	4659      	mov	r1, fp
 8002302:	f7fe fd37 	bl	8000d74 <__aeabi_fmul>
 8002306:	4629      	mov	r1, r5
 8002308:	f7fe fd34 	bl	8000d74 <__aeabi_fmul>
 800230c:	4641      	mov	r1, r8
 800230e:	f7fe fde5 	bl	8000edc <__aeabi_fdiv>
	  if(swi_num_temp >= 0.0000){
 8002312:	4621      	mov	r1, r4
	  float swi_num_temp = ((float)3.0 * ((float)*adc_switching * (float)5.0) * (float)vrefvalue)/((float)*adc_vref * (float)4095);
 8002314:	4605      	mov	r5, r0
	  if(swi_num_temp >= 0.0000){
 8002316:	f7fe fedf 	bl	80010d8 <__aeabi_fcmpge>
 800231a:	b900      	cbnz	r0, 800231e <main+0x586>
		  swi_num = 0.0000;
 800231c:	4625      	mov	r5, r4
 800231e:	4b62      	ldr	r3, [pc, #392]	; (80024a8 <main+0x710>)
 8002320:	601d      	str	r5, [r3, #0]
	  if (first_shot) {
 8002322:	4b62      	ldr	r3, [pc, #392]	; (80024ac <main+0x714>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 80cc 	bne.w	80024c4 <main+0x72c>
		  error = lin_num - voltnum1;
 800232c:	4b53      	ldr	r3, [pc, #332]	; (800247c <main+0x6e4>)
 800232e:	4648      	mov	r0, r9
 8002330:	6819      	ldr	r1, [r3, #0]
 8002332:	f7fe fc15 	bl	8000b60 <__aeabi_fsub>
 8002336:	4605      	mov	r5, r0
		  integral += error;
 8002338:	4650      	mov	r0, sl
 800233a:	4629      	mov	r1, r5
 800233c:	f7fe fc12 	bl	8000b64 <__addsf3>
		  if (integral > (float)4095.0) {
 8002340:	4631      	mov	r1, r6
		  integral += error;
 8002342:	4682      	mov	sl, r0
		  if (integral > (float)4095.0) {
 8002344:	f7fe fed2 	bl	80010ec <__aeabi_fcmpgt>
 8002348:	2800      	cmp	r0, #0
 800234a:	d17e      	bne.n	800244a <main+0x6b2>
		  } else if (integral < (float)-4095.0) {
 800234c:	4650      	mov	r0, sl
 800234e:	4958      	ldr	r1, [pc, #352]	; (80024b0 <main+0x718>)
 8002350:	f7fe feae 	bl	80010b0 <__aeabi_fcmplt>
 8002354:	b108      	cbz	r0, 800235a <main+0x5c2>
			  integral = (float)-4095.0;
 8002356:	f8df a158 	ldr.w	sl, [pc, #344]	; 80024b0 <main+0x718>
		  correction = P * error + I * integral + D * derivative;
 800235a:	4628      	mov	r0, r5
 800235c:	f7fe f87c 	bl	8000458 <__aeabi_f2d>
		  correctedvoltnum1 = voltnum1 - correction;
 8002360:	4b46      	ldr	r3, [pc, #280]	; (800247c <main+0x6e4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	9301      	str	r3, [sp, #4]
		  correction = P * error + I * integral + D * derivative;
 8002366:	a33a      	add	r3, pc, #232	; (adr r3, 8002450 <main+0x6b8>)
 8002368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236c:	f7fe f8cc 	bl	8000508 <__aeabi_dmul>
 8002370:	4680      	mov	r8, r0
 8002372:	4650      	mov	r0, sl
 8002374:	4689      	mov	r9, r1
 8002376:	f7fe f86f 	bl	8000458 <__aeabi_f2d>
 800237a:	a335      	add	r3, pc, #212	; (adr r3, 8002450 <main+0x6b8>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	f7fe f8c2 	bl	8000508 <__aeabi_dmul>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4640      	mov	r0, r8
 800238a:	4649      	mov	r1, r9
 800238c:	f7fd ff06 	bl	800019c <__adddf3>
 8002390:	4680      	mov	r8, r0
 8002392:	4689      	mov	r9, r1
		  derivative = error - error_previous;
 8002394:	4628      	mov	r0, r5
 8002396:	9900      	ldr	r1, [sp, #0]
 8002398:	f7fe fbe2 	bl	8000b60 <__aeabi_fsub>
		  correction = P * error + I * integral + D * derivative;
 800239c:	f7fe f85c 	bl	8000458 <__aeabi_f2d>
 80023a0:	a32b      	add	r3, pc, #172	; (adr r3, 8002450 <main+0x6b8>)
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	f7fe f8af 	bl	8000508 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4640      	mov	r0, r8
 80023b0:	4649      	mov	r1, r9
 80023b2:	f7fd fef3 	bl	800019c <__adddf3>
 80023b6:	f7fe fb7f 	bl	8000ab8 <__aeabi_d2f>
 80023ba:	4601      	mov	r1, r0
		  correctedvoltnum1 = voltnum1 - correction;
 80023bc:	9801      	ldr	r0, [sp, #4]
 80023be:	f7fe fbcf 	bl	8000b60 <__aeabi_fsub>
		  if (correctedvoltnum1 > 12.0) {
 80023c2:	493c      	ldr	r1, [pc, #240]	; (80024b4 <main+0x71c>)
		  correctedvoltnum1 = voltnum1 - correction;
 80023c4:	4680      	mov	r8, r0
		  if (correctedvoltnum1 > 12.0) {
 80023c6:	f7fe fe91 	bl	80010ec <__aeabi_fcmpgt>
 80023ca:	2800      	cmp	r0, #0
 80023cc:	f040 809a 	bne.w	8002504 <main+0x76c>
		  } else if(correctedvoltnum1 < 0.0) {
 80023d0:	4621      	mov	r1, r4
 80023d2:	4640      	mov	r0, r8
 80023d4:	f7fe fe6c 	bl	80010b0 <__aeabi_fcmplt>
 80023d8:	2800      	cmp	r0, #0
 80023da:	d134      	bne.n	8002446 <main+0x6ae>
		  v1 = (uint16_t)((((correctedvoltnum1 / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 80023dc:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80023e0:	4640      	mov	r0, r8
		  error_previous = error;
 80023e2:	9500      	str	r5, [sp, #0]
		  v1 = (uint16_t)((((correctedvoltnum1 / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 80023e4:	f7fe fcc6 	bl	8000d74 <__aeabi_fmul>
 80023e8:	4933      	ldr	r1, [pc, #204]	; (80024b8 <main+0x720>)
 80023ea:	f7fe fbbb 	bl	8000b64 <__addsf3>
 80023ee:	4631      	mov	r1, r6
 80023f0:	f7fe fcc0 	bl	8000d74 <__aeabi_fmul>
 80023f4:	4639      	mov	r1, r7
 80023f6:	f7fe fd71 	bl	8000edc <__aeabi_fdiv>
 80023fa:	f7fe fe81 	bl	8001100 <__aeabi_f2uiz>
 80023fe:	4603      	mov	r3, r0
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002400:	2200      	movs	r2, #0
		  v1 = (uint16_t)((((correctedvoltnum1 / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8002402:	492e      	ldr	r1, [pc, #184]	; (80024bc <main+0x724>)
 8002404:	b29b      	uxth	r3, r3
 8002406:	800b      	strh	r3, [r1, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002408:	4813      	ldr	r0, [pc, #76]	; (8002458 <main+0x6c0>)
 800240a:	4611      	mov	r1, r2
 800240c:	f002 fde4 	bl	8004fd8 <HAL_DAC_SetValue>
	  if(voltnum1 > 0.00){
 8002410:	4b1a      	ldr	r3, [pc, #104]	; (800247c <main+0x6e4>)
 8002412:	4621      	mov	r1, r4
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	f7fe fe69 	bl	80010ec <__aeabi_fcmpgt>
 800241a:	b148      	cbz	r0, 8002430 <main+0x698>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 800241c:	2200      	movs	r2, #0
 800241e:	2140      	movs	r1, #64	; 0x40
 8002420:	4817      	ldr	r0, [pc, #92]	; (8002480 <main+0x6e8>)
 8002422:	f003 f94f 	bl	80056c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_SET);
 8002426:	2201      	movs	r2, #1
 8002428:	2120      	movs	r1, #32
 800242a:	4816      	ldr	r0, [pc, #88]	; (8002484 <main+0x6ec>)
 800242c:	f003 f94a 	bl	80056c4 <HAL_GPIO_WritePin>
	  if(chstat2 == 1){
 8002430:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <main+0x728>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	b2da      	uxtb	r2, r3
 8002438:	f47f aed3 	bne.w	80021e2 <main+0x44a>
		  HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_SET);
 800243c:	2110      	movs	r1, #16
 800243e:	4811      	ldr	r0, [pc, #68]	; (8002484 <main+0x6ec>)
 8002440:	f003 f940 	bl	80056c4 <HAL_GPIO_WritePin>
 8002444:	e6cd      	b.n	80021e2 <main+0x44a>
			  correctedvoltnum1 = 0.0;
 8002446:	46a0      	mov	r8, r4
 8002448:	e7c8      	b.n	80023dc <main+0x644>
			  integral = (float)4095;
 800244a:	46b2      	mov	sl, r6
 800244c:	e785      	b.n	800235a <main+0x5c2>
 800244e:	bf00      	nop
 8002450:	9999999a 	.word	0x9999999a
 8002454:	3fb99999 	.word	0x3fb99999
 8002458:	20000404 	.word	0x20000404
 800245c:	20000390 	.word	0x20000390
 8002460:	2000037c 	.word	0x2000037c
 8002464:	20000384 	.word	0x20000384
 8002468:	20000380 	.word	0x20000380
 800246c:	20000388 	.word	0x20000388
 8002470:	2000038c 	.word	0x2000038c
 8002474:	40400000 	.word	0x40400000
 8002478:	457ff000 	.word	0x457ff000
 800247c:	20000820 	.word	0x20000820
 8002480:	40020000 	.word	0x40020000
 8002484:	40020800 	.word	0x40020800
 8002488:	2000000c 	.word	0x2000000c
 800248c:	41a00000 	.word	0x41a00000
 8002490:	3e19999a 	.word	0x3e19999a
 8002494:	200003a8 	.word	0x200003a8
 8002498:	3eb33333 	.word	0x3eb33333
 800249c:	2000070c 	.word	0x2000070c
 80024a0:	20000708 	.word	0x20000708
 80024a4:	40a00000 	.word	0x40a00000
 80024a8:	20000758 	.word	0x20000758
 80024ac:	200003ae 	.word	0x200003ae
 80024b0:	c57ff000 	.word	0xc57ff000
 80024b4:	41400000 	.word	0x41400000
 80024b8:	3de4d9c9 	.word	0x3de4d9c9
 80024bc:	2000081c 	.word	0x2000081c
 80024c0:	200003a4 	.word	0x200003a4
		  v1 = (uint16_t)((( (((float)voltnum1) / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 80024c4:	4d11      	ldr	r5, [pc, #68]	; (800250c <main+0x774>)
 80024c6:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80024ca:	6828      	ldr	r0, [r5, #0]
 80024cc:	f7fe fc52 	bl	8000d74 <__aeabi_fmul>
 80024d0:	490f      	ldr	r1, [pc, #60]	; (8002510 <main+0x778>)
 80024d2:	f7fe fb47 	bl	8000b64 <__addsf3>
 80024d6:	4631      	mov	r1, r6
 80024d8:	f7fe fc4c 	bl	8000d74 <__aeabi_fmul>
 80024dc:	4639      	mov	r1, r7
 80024de:	f7fe fcfd 	bl	8000edc <__aeabi_fdiv>
 80024e2:	f7fe fe0d 	bl	8001100 <__aeabi_f2uiz>
 80024e6:	4603      	mov	r3, r0
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80024e8:	2200      	movs	r2, #0
		  v1 = (uint16_t)((( (((float)voltnum1) / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 80024ea:	490a      	ldr	r1, [pc, #40]	; (8002514 <main+0x77c>)
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	800b      	strh	r3, [r1, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80024f0:	4809      	ldr	r0, [pc, #36]	; (8002518 <main+0x780>)
 80024f2:	4611      	mov	r1, r2
 80024f4:	f002 fd70 	bl	8004fd8 <HAL_DAC_SetValue>
		  correctedvoltnum1 = voltnum1;
 80024f8:	682b      	ldr	r3, [r5, #0]
		  first_shot = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	4a07      	ldr	r2, [pc, #28]	; (800251c <main+0x784>)
		  integral = 0;
 80024fe:	46a2      	mov	sl, r4
		  first_shot = 0;
 8002500:	7013      	strb	r3, [r2, #0]
 8002502:	e785      	b.n	8002410 <main+0x678>
			  correctedvoltnum1 = 12.0;
 8002504:	f8df 8018 	ldr.w	r8, [pc, #24]	; 8002520 <main+0x788>
 8002508:	e768      	b.n	80023dc <main+0x644>
 800250a:	bf00      	nop
 800250c:	20000820 	.word	0x20000820
 8002510:	3de4d9c9 	.word	0x3de4d9c9
 8002514:	2000081c 	.word	0x2000081c
 8002518:	20000404 	.word	0x20000404
 800251c:	200003ae 	.word	0x200003ae
 8002520:	41400000 	.word	0x41400000

08002524 <lcd_update_voltage>:
{
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002526:	4604      	mov	r4, r0
 8002528:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.2f", num);
 800252a:	4608      	mov	r0, r1
 800252c:	f7fd ff94 	bl	8000458 <__aeabi_f2d>
 8002530:	4606      	mov	r6, r0
 8002532:	460f      	mov	r7, r1
 8002534:	4ac7      	ldr	r2, [pc, #796]	; (8002854 <lcd_update_voltage+0x330>)
 8002536:	2106      	movs	r1, #6
 8002538:	e9cd 6700 	strd	r6, r7, [sp]
 800253c:	a804      	add	r0, sp, #16
 800253e:	f007 fe91 	bl	800a264 <sniprintf>
	switch (channel) {
 8002542:	1e60      	subs	r0, r4, #1
 8002544:	2803      	cmp	r0, #3
 8002546:	d86a      	bhi.n	800261e <lcd_update_voltage+0xfa>
 8002548:	e8df f010 	tbh	[pc, r0, lsl #1]
 800254c:	00c80126 	.word	0x00c80126
 8002550:	0004006b 	.word	0x0004006b
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002554:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002556:	4ac0      	ldr	r2, [pc, #768]	; (8002858 <lcd_update_voltage+0x334>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002558:	48c0      	ldr	r0, [pc, #768]	; (800285c <lcd_update_voltage+0x338>)
 800255a:	ad03      	add	r5, sp, #12
 800255c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800255e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002560:	214e      	movs	r1, #78	; 0x4e
 8002562:	462a      	mov	r2, r5
 8002564:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002566:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002568:	f003 f98e 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800256c:	2320      	movs	r3, #32
 800256e:	4cbc      	ldr	r4, [pc, #752]	; (8002860 <lcd_update_voltage+0x33c>)
	data_l = ((data<<4)&0xf0);
 8002570:	011a      	lsls	r2, r3, #4
 8002572:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002578:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800257c:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002580:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002584:	f043 0309 	orr.w	r3, r3, #9
 8002588:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800258c:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002590:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002592:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002596:	462a      	mov	r2, r5
 8002598:	214e      	movs	r1, #78	; 0x4e
 800259a:	4638      	mov	r0, r7
 800259c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800259e:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80025a2:	f003 f971 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80025a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1e0      	bne.n	8002570 <lcd_update_voltage+0x4c>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80025ae:	4aaa      	ldr	r2, [pc, #680]	; (8002858 <lcd_update_voltage+0x334>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80025b0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80025b2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80025b4:	214e      	movs	r1, #78	; 0x4e
 80025b6:	462a      	mov	r2, r5
 80025b8:	48a8      	ldr	r0, [pc, #672]	; (800285c <lcd_update_voltage+0x338>)
 80025ba:	9600      	str	r6, [sp, #0]
 80025bc:	f003 f964 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80025c0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80025c4:	b30b      	cbz	r3, 800260a <lcd_update_voltage+0xe6>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80025c6:	2764      	movs	r7, #100	; 0x64
 80025c8:	4ea4      	ldr	r6, [pc, #656]	; (800285c <lcd_update_voltage+0x338>)
	while (*str) lcd_send_data (*str++);
 80025ca:	ac04      	add	r4, sp, #16
	data_l = ((data<<4)&0xf0);
 80025cc:	0119      	lsls	r1, r3, #4
 80025ce:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 80025d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80025d4:	f043 0209 	orr.w	r2, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80025d8:	f041 0009 	orr.w	r0, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80025dc:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80025e0:	f041 0c0d 	orr.w	ip, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80025e4:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80025e6:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80025ea:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80025ee:	462a      	mov	r2, r5
 80025f0:	214e      	movs	r1, #78	; 0x4e
 80025f2:	4630      	mov	r0, r6
 80025f4:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80025f6:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80025fa:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80025fe:	f003 f943 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002602:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1e0      	bne.n	80025cc <lcd_update_voltage+0xa8>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800260a:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800260c:	4895      	ldr	r0, [pc, #596]	; (8002864 <lcd_update_voltage+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800260e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002610:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002612:	462a      	mov	r2, r5
 8002614:	214e      	movs	r1, #78	; 0x4e
 8002616:	4891      	ldr	r0, [pc, #580]	; (800285c <lcd_update_voltage+0x338>)
 8002618:	9400      	str	r4, [sp, #0]
 800261a:	f003 f935 	bl	8005888 <HAL_I2C_Master_Transmit>
}
 800261e:	b007      	add	sp, #28
 8002620:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002622:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002624:	4a90      	ldr	r2, [pc, #576]	; (8002868 <lcd_update_voltage+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002626:	488d      	ldr	r0, [pc, #564]	; (800285c <lcd_update_voltage+0x338>)
 8002628:	ad03      	add	r5, sp, #12
 800262a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800262c:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800262e:	214e      	movs	r1, #78	; 0x4e
 8002630:	462a      	mov	r2, r5
 8002632:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002634:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002636:	f003 f927 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800263a:	2320      	movs	r3, #32
 800263c:	4c88      	ldr	r4, [pc, #544]	; (8002860 <lcd_update_voltage+0x33c>)
	data_l = ((data<<4)&0xf0);
 800263e:	011a      	lsls	r2, r3, #4
 8002640:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002646:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800264a:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800264e:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002652:	f043 0309 	orr.w	r3, r3, #9
 8002656:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800265a:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800265e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002660:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002664:	462a      	mov	r2, r5
 8002666:	214e      	movs	r1, #78	; 0x4e
 8002668:	4638      	mov	r0, r7
 800266a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800266c:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002670:	f003 f90a 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002674:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e0      	bne.n	800263e <lcd_update_voltage+0x11a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800267c:	4a7a      	ldr	r2, [pc, #488]	; (8002868 <lcd_update_voltage+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800267e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002680:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002682:	214e      	movs	r1, #78	; 0x4e
 8002684:	462a      	mov	r2, r5
 8002686:	4875      	ldr	r0, [pc, #468]	; (800285c <lcd_update_voltage+0x338>)
 8002688:	9600      	str	r6, [sp, #0]
 800268a:	f003 f8fd 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800268e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0b9      	beq.n	800260a <lcd_update_voltage+0xe6>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002696:	2764      	movs	r7, #100	; 0x64
 8002698:	4e70      	ldr	r6, [pc, #448]	; (800285c <lcd_update_voltage+0x338>)
	while (*str) lcd_send_data (*str++);
 800269a:	ac04      	add	r4, sp, #16
	data_l = ((data<<4)&0xf0);
 800269c:	0119      	lsls	r1, r3, #4
 800269e:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 80026a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80026a4:	f043 0209 	orr.w	r2, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80026a8:	f041 0009 	orr.w	r0, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80026ac:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80026b0:	f041 0c0d 	orr.w	ip, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80026b4:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80026b6:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80026ba:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80026be:	462a      	mov	r2, r5
 80026c0:	214e      	movs	r1, #78	; 0x4e
 80026c2:	4630      	mov	r0, r6
 80026c4:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80026c6:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80026ca:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80026ce:	f003 f8db 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80026d2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e0      	bne.n	800269c <lcd_update_voltage+0x178>
 80026da:	e796      	b.n	800260a <lcd_update_voltage+0xe6>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80026dc:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80026de:	4a63      	ldr	r2, [pc, #396]	; (800286c <lcd_update_voltage+0x348>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80026e0:	485e      	ldr	r0, [pc, #376]	; (800285c <lcd_update_voltage+0x338>)
 80026e2:	ad03      	add	r5, sp, #12
 80026e4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80026e6:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80026e8:	214e      	movs	r1, #78	; 0x4e
 80026ea:	462a      	mov	r2, r5
 80026ec:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80026ee:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80026f0:	f003 f8ca 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80026f4:	2320      	movs	r3, #32
 80026f6:	4c5a      	ldr	r4, [pc, #360]	; (8002860 <lcd_update_voltage+0x33c>)
	data_l = ((data<<4)&0xf0);
 80026f8:	011a      	lsls	r2, r3, #4
 80026fa:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80026fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002700:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002704:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002708:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800270c:	f043 0309 	orr.w	r3, r3, #9
 8002710:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002714:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002718:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800271a:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800271e:	462a      	mov	r2, r5
 8002720:	214e      	movs	r1, #78	; 0x4e
 8002722:	4638      	mov	r0, r7
 8002724:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002726:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800272a:	f003 f8ad 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800272e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1e0      	bne.n	80026f8 <lcd_update_voltage+0x1d4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002736:	4a4d      	ldr	r2, [pc, #308]	; (800286c <lcd_update_voltage+0x348>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002738:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800273a:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800273c:	214e      	movs	r1, #78	; 0x4e
 800273e:	462a      	mov	r2, r5
 8002740:	4846      	ldr	r0, [pc, #280]	; (800285c <lcd_update_voltage+0x338>)
 8002742:	9600      	str	r6, [sp, #0]
 8002744:	f003 f8a0 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002748:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f43f af5c 	beq.w	800260a <lcd_update_voltage+0xe6>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002752:	2764      	movs	r7, #100	; 0x64
 8002754:	4e41      	ldr	r6, [pc, #260]	; (800285c <lcd_update_voltage+0x338>)
	while (*str) lcd_send_data (*str++);
 8002756:	ac04      	add	r4, sp, #16
	data_l = ((data<<4)&0xf0);
 8002758:	0119      	lsls	r1, r3, #4
 800275a:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 800275c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002760:	f043 0209 	orr.w	r2, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002764:	f041 0009 	orr.w	r0, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002768:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800276c:	f041 0c0d 	orr.w	ip, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002770:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002772:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002776:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800277a:	462a      	mov	r2, r5
 800277c:	214e      	movs	r1, #78	; 0x4e
 800277e:	4630      	mov	r0, r6
 8002780:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002782:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002786:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800278a:	f003 f87d 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800278e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1e0      	bne.n	8002758 <lcd_update_voltage+0x234>
 8002796:	e738      	b.n	800260a <lcd_update_voltage+0xe6>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002798:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800279a:	4a35      	ldr	r2, [pc, #212]	; (8002870 <lcd_update_voltage+0x34c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800279c:	482f      	ldr	r0, [pc, #188]	; (800285c <lcd_update_voltage+0x338>)
 800279e:	ad03      	add	r5, sp, #12
 80027a0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80027a2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80027a4:	214e      	movs	r1, #78	; 0x4e
 80027a6:	462a      	mov	r2, r5
 80027a8:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80027aa:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80027ac:	f003 f86c 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80027b0:	2320      	movs	r3, #32
 80027b2:	4c2b      	ldr	r4, [pc, #172]	; (8002860 <lcd_update_voltage+0x33c>)
	data_l = ((data<<4)&0xf0);
 80027b4:	011a      	lsls	r2, r3, #4
 80027b6:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80027b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80027bc:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80027c0:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80027c4:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80027c8:	f043 0309 	orr.w	r3, r3, #9
 80027cc:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80027d0:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80027d4:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80027d6:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80027da:	462a      	mov	r2, r5
 80027dc:	214e      	movs	r1, #78	; 0x4e
 80027de:	4638      	mov	r0, r7
 80027e0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80027e2:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80027e6:	f003 f84f 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80027ea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1e0      	bne.n	80027b4 <lcd_update_voltage+0x290>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80027f2:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <lcd_update_voltage+0x34c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80027f4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80027f6:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80027f8:	214e      	movs	r1, #78	; 0x4e
 80027fa:	462a      	mov	r2, r5
 80027fc:	4817      	ldr	r0, [pc, #92]	; (800285c <lcd_update_voltage+0x338>)
 80027fe:	9600      	str	r6, [sp, #0]
 8002800:	f003 f842 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002804:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f43f aefe 	beq.w	800260a <lcd_update_voltage+0xe6>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800280e:	2764      	movs	r7, #100	; 0x64
 8002810:	4e12      	ldr	r6, [pc, #72]	; (800285c <lcd_update_voltage+0x338>)
	while (*str) lcd_send_data (*str++);
 8002812:	ac04      	add	r4, sp, #16
	data_l = ((data<<4)&0xf0);
 8002814:	0119      	lsls	r1, r3, #4
 8002816:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8002818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800281c:	f043 0209 	orr.w	r2, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002820:	f041 0009 	orr.w	r0, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002824:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002828:	f041 0c0d 	orr.w	ip, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800282c:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800282e:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002832:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002836:	462a      	mov	r2, r5
 8002838:	214e      	movs	r1, #78	; 0x4e
 800283a:	4630      	mov	r0, r6
 800283c:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800283e:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002842:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002846:	f003 f81f 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800284a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e0      	bne.n	8002814 <lcd_update_voltage+0x2f0>
 8002852:	e6da      	b.n	800260a <lcd_update_voltage+0xe6>
 8002854:	0800c7f4 	.word	0x0800c7f4
 8002858:	282ca8ac 	.word	0x282ca8ac
 800285c:	200004ec 	.word	0x200004ec
 8002860:	0800c7ec 	.word	0x0800c7ec
 8002864:	696d595d 	.word	0x696d595d
 8002868:	787c989c 	.word	0x787c989c
 800286c:	e8ec888c 	.word	0xe8ec888c
 8002870:	383c888c 	.word	0x383c888c

08002874 <lcd_update_amperage>:
{
 8002874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002876:	4604      	mov	r4, r0
 8002878:	b087      	sub	sp, #28
	snprintf(kpbuff, 5, "%.2f", num);
 800287a:	4608      	mov	r0, r1
 800287c:	f7fd fdec 	bl	8000458 <__aeabi_f2d>
 8002880:	4606      	mov	r6, r0
 8002882:	460f      	mov	r7, r1
 8002884:	4ac7      	ldr	r2, [pc, #796]	; (8002ba4 <lcd_update_amperage+0x330>)
 8002886:	2105      	movs	r1, #5
 8002888:	e9cd 6700 	strd	r6, r7, [sp]
 800288c:	a804      	add	r0, sp, #16
 800288e:	f007 fce9 	bl	800a264 <sniprintf>
	switch (channel) {
 8002892:	1e60      	subs	r0, r4, #1
 8002894:	2803      	cmp	r0, #3
 8002896:	d86a      	bhi.n	800296e <lcd_update_amperage+0xfa>
 8002898:	e8df f010 	tbh	[pc, r0, lsl #1]
 800289c:	00c80126 	.word	0x00c80126
 80028a0:	0004006b 	.word	0x0004006b
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80028a4:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80028a6:	4ac0      	ldr	r2, [pc, #768]	; (8002ba8 <lcd_update_amperage+0x334>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80028a8:	48c0      	ldr	r0, [pc, #768]	; (8002bac <lcd_update_amperage+0x338>)
 80028aa:	ad03      	add	r5, sp, #12
 80028ac:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80028ae:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80028b0:	214e      	movs	r1, #78	; 0x4e
 80028b2:	462a      	mov	r2, r5
 80028b4:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80028b6:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80028b8:	f002 ffe6 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80028bc:	2320      	movs	r3, #32
 80028be:	4cbc      	ldr	r4, [pc, #752]	; (8002bb0 <lcd_update_amperage+0x33c>)
	data_l = ((data<<4)&0xf0);
 80028c0:	011a      	lsls	r2, r3, #4
 80028c2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80028c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028c8:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80028cc:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80028d0:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80028d4:	f043 0309 	orr.w	r3, r3, #9
 80028d8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80028dc:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80028e0:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80028e2:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80028e6:	462a      	mov	r2, r5
 80028e8:	214e      	movs	r1, #78	; 0x4e
 80028ea:	4638      	mov	r0, r7
 80028ec:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028ee:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80028f2:	f002 ffc9 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80028f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1e0      	bne.n	80028c0 <lcd_update_amperage+0x4c>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80028fe:	4aaa      	ldr	r2, [pc, #680]	; (8002ba8 <lcd_update_amperage+0x334>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002900:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002902:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002904:	214e      	movs	r1, #78	; 0x4e
 8002906:	462a      	mov	r2, r5
 8002908:	48a8      	ldr	r0, [pc, #672]	; (8002bac <lcd_update_amperage+0x338>)
 800290a:	9600      	str	r6, [sp, #0]
 800290c:	f002 ffbc 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002910:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002914:	b30b      	cbz	r3, 800295a <lcd_update_amperage+0xe6>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002916:	2764      	movs	r7, #100	; 0x64
 8002918:	4ea4      	ldr	r6, [pc, #656]	; (8002bac <lcd_update_amperage+0x338>)
	while (*str) lcd_send_data (*str++);
 800291a:	ac04      	add	r4, sp, #16
	data_l = ((data<<4)&0xf0);
 800291c:	0119      	lsls	r1, r3, #4
 800291e:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8002920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002924:	f043 0209 	orr.w	r2, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002928:	f041 0009 	orr.w	r0, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800292c:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002930:	f041 0c0d 	orr.w	ip, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002934:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002936:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800293a:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800293e:	462a      	mov	r2, r5
 8002940:	214e      	movs	r1, #78	; 0x4e
 8002942:	4630      	mov	r0, r6
 8002944:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002946:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800294a:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800294e:	f002 ff9b 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002952:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e0      	bne.n	800291c <lcd_update_amperage+0xa8>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800295a:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800295c:	4895      	ldr	r0, [pc, #596]	; (8002bb4 <lcd_update_amperage+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800295e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002960:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002962:	462a      	mov	r2, r5
 8002964:	214e      	movs	r1, #78	; 0x4e
 8002966:	4891      	ldr	r0, [pc, #580]	; (8002bac <lcd_update_amperage+0x338>)
 8002968:	9400      	str	r4, [sp, #0]
 800296a:	f002 ff8d 	bl	8005888 <HAL_I2C_Master_Transmit>
}
 800296e:	b007      	add	sp, #28
 8002970:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002972:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002974:	4a90      	ldr	r2, [pc, #576]	; (8002bb8 <lcd_update_amperage+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002976:	488d      	ldr	r0, [pc, #564]	; (8002bac <lcd_update_amperage+0x338>)
 8002978:	ad03      	add	r5, sp, #12
 800297a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800297c:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800297e:	214e      	movs	r1, #78	; 0x4e
 8002980:	462a      	mov	r2, r5
 8002982:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002984:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002986:	f002 ff7f 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800298a:	2320      	movs	r3, #32
 800298c:	4c88      	ldr	r4, [pc, #544]	; (8002bb0 <lcd_update_amperage+0x33c>)
	data_l = ((data<<4)&0xf0);
 800298e:	011a      	lsls	r2, r3, #4
 8002990:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002996:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800299a:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800299e:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80029a2:	f043 0309 	orr.w	r3, r3, #9
 80029a6:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80029aa:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80029ae:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80029b0:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80029b4:	462a      	mov	r2, r5
 80029b6:	214e      	movs	r1, #78	; 0x4e
 80029b8:	4638      	mov	r0, r7
 80029ba:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80029bc:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80029c0:	f002 ff62 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80029c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e0      	bne.n	800298e <lcd_update_amperage+0x11a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029cc:	4a7a      	ldr	r2, [pc, #488]	; (8002bb8 <lcd_update_amperage+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80029ce:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029d0:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80029d2:	214e      	movs	r1, #78	; 0x4e
 80029d4:	462a      	mov	r2, r5
 80029d6:	4875      	ldr	r0, [pc, #468]	; (8002bac <lcd_update_amperage+0x338>)
 80029d8:	9600      	str	r6, [sp, #0]
 80029da:	f002 ff55 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80029de:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0b9      	beq.n	800295a <lcd_update_amperage+0xe6>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 80029e6:	2764      	movs	r7, #100	; 0x64
 80029e8:	4e70      	ldr	r6, [pc, #448]	; (8002bac <lcd_update_amperage+0x338>)
	while (*str) lcd_send_data (*str++);
 80029ea:	ac04      	add	r4, sp, #16
	data_l = ((data<<4)&0xf0);
 80029ec:	0119      	lsls	r1, r3, #4
 80029ee:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 80029f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80029f4:	f043 0209 	orr.w	r2, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80029f8:	f041 0009 	orr.w	r0, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80029fc:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a00:	f041 0c0d 	orr.w	ip, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002a04:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a06:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a0a:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002a0e:	462a      	mov	r2, r5
 8002a10:	214e      	movs	r1, #78	; 0x4e
 8002a12:	4630      	mov	r0, r6
 8002a14:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a16:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a1a:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002a1e:	f002 ff33 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a22:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e0      	bne.n	80029ec <lcd_update_amperage+0x178>
 8002a2a:	e796      	b.n	800295a <lcd_update_amperage+0xe6>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002a2c:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a2e:	4a63      	ldr	r2, [pc, #396]	; (8002bbc <lcd_update_amperage+0x348>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002a30:	485e      	ldr	r0, [pc, #376]	; (8002bac <lcd_update_amperage+0x338>)
 8002a32:	ad03      	add	r5, sp, #12
 8002a34:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a36:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002a38:	214e      	movs	r1, #78	; 0x4e
 8002a3a:	462a      	mov	r2, r5
 8002a3c:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002a3e:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002a40:	f002 ff22 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a44:	2320      	movs	r3, #32
 8002a46:	4c5a      	ldr	r4, [pc, #360]	; (8002bb0 <lcd_update_amperage+0x33c>)
	data_l = ((data<<4)&0xf0);
 8002a48:	011a      	lsls	r2, r3, #4
 8002a4a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a50:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a54:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a58:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a5c:	f043 0309 	orr.w	r3, r3, #9
 8002a60:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a64:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002a68:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a6a:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002a6e:	462a      	mov	r2, r5
 8002a70:	214e      	movs	r1, #78	; 0x4e
 8002a72:	4638      	mov	r0, r7
 8002a74:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a76:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002a7a:	f002 ff05 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a7e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1e0      	bne.n	8002a48 <lcd_update_amperage+0x1d4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a86:	4a4d      	ldr	r2, [pc, #308]	; (8002bbc <lcd_update_amperage+0x348>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002a88:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a8a:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002a8c:	214e      	movs	r1, #78	; 0x4e
 8002a8e:	462a      	mov	r2, r5
 8002a90:	4846      	ldr	r0, [pc, #280]	; (8002bac <lcd_update_amperage+0x338>)
 8002a92:	9600      	str	r6, [sp, #0]
 8002a94:	f002 fef8 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a98:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f43f af5c 	beq.w	800295a <lcd_update_amperage+0xe6>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002aa2:	2764      	movs	r7, #100	; 0x64
 8002aa4:	4e41      	ldr	r6, [pc, #260]	; (8002bac <lcd_update_amperage+0x338>)
	while (*str) lcd_send_data (*str++);
 8002aa6:	ac04      	add	r4, sp, #16
	data_l = ((data<<4)&0xf0);
 8002aa8:	0119      	lsls	r1, r3, #4
 8002aaa:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8002aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ab0:	f043 0209 	orr.w	r2, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ab4:	f041 0009 	orr.w	r0, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ab8:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002abc:	f041 0c0d 	orr.w	ip, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002ac0:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ac2:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ac6:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002aca:	462a      	mov	r2, r5
 8002acc:	214e      	movs	r1, #78	; 0x4e
 8002ace:	4630      	mov	r0, r6
 8002ad0:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ad2:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ad6:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002ada:	f002 fed5 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002ade:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e0      	bne.n	8002aa8 <lcd_update_amperage+0x234>
 8002ae6:	e738      	b.n	800295a <lcd_update_amperage+0xe6>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002ae8:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002aea:	4a35      	ldr	r2, [pc, #212]	; (8002bc0 <lcd_update_amperage+0x34c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002aec:	482f      	ldr	r0, [pc, #188]	; (8002bac <lcd_update_amperage+0x338>)
 8002aee:	ad03      	add	r5, sp, #12
 8002af0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002af2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002af4:	214e      	movs	r1, #78	; 0x4e
 8002af6:	462a      	mov	r2, r5
 8002af8:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002afa:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002afc:	f002 fec4 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b00:	2320      	movs	r3, #32
 8002b02:	4c2b      	ldr	r4, [pc, #172]	; (8002bb0 <lcd_update_amperage+0x33c>)
	data_l = ((data<<4)&0xf0);
 8002b04:	011a      	lsls	r2, r3, #4
 8002b06:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b0c:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b10:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b14:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002b18:	f043 0309 	orr.w	r3, r3, #9
 8002b1c:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b20:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002b24:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b26:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002b2a:	462a      	mov	r2, r5
 8002b2c:	214e      	movs	r1, #78	; 0x4e
 8002b2e:	4638      	mov	r0, r7
 8002b30:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b32:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002b36:	f002 fea7 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b3a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e0      	bne.n	8002b04 <lcd_update_amperage+0x290>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b42:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <lcd_update_amperage+0x34c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002b44:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b46:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002b48:	214e      	movs	r1, #78	; 0x4e
 8002b4a:	462a      	mov	r2, r5
 8002b4c:	4817      	ldr	r0, [pc, #92]	; (8002bac <lcd_update_amperage+0x338>)
 8002b4e:	9600      	str	r6, [sp, #0]
 8002b50:	f002 fe9a 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b54:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f43f aefe 	beq.w	800295a <lcd_update_amperage+0xe6>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002b5e:	2764      	movs	r7, #100	; 0x64
 8002b60:	4e12      	ldr	r6, [pc, #72]	; (8002bac <lcd_update_amperage+0x338>)
	while (*str) lcd_send_data (*str++);
 8002b62:	ac04      	add	r4, sp, #16
	data_l = ((data<<4)&0xf0);
 8002b64:	0119      	lsls	r1, r3, #4
 8002b66:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8002b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002b6c:	f043 0209 	orr.w	r2, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b70:	f041 0009 	orr.w	r0, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b74:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b78:	f041 0c0d 	orr.w	ip, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002b7c:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002b7e:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b82:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002b86:	462a      	mov	r2, r5
 8002b88:	214e      	movs	r1, #78	; 0x4e
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b8e:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b92:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002b96:	f002 fe77 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b9a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1e0      	bne.n	8002b64 <lcd_update_amperage+0x2f0>
 8002ba2:	e6da      	b.n	800295a <lcd_update_amperage+0xe6>
 8002ba4:	0800c7f4 	.word	0x0800c7f4
 8002ba8:	282ce8ec 	.word	0x282ce8ec
 8002bac:	200004ec 	.word	0x200004ec
 8002bb0:	0800c7ec 	.word	0x0800c7ec
 8002bb4:	191d494d 	.word	0x191d494d
 8002bb8:	787cd8dc 	.word	0x787cd8dc
 8002bbc:	e8ecc8cc 	.word	0xe8ecc8cc
 8002bc0:	383cc8cc 	.word	0x383cc8cc

08002bc4 <lcd_psu_update>:
{
 8002bc4:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002bc6:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002bc8:	49b4      	ldr	r1, [pc, #720]	; (8002e9c <lcd_psu_update+0x2d8>)
{
 8002bca:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002bcc:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002bce:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002bd0:	48b3      	ldr	r0, [pc, #716]	; (8002ea0 <lcd_psu_update+0x2dc>)
 8002bd2:	214e      	movs	r1, #78	; 0x4e
 8002bd4:	aa03      	add	r2, sp, #12
 8002bd6:	9400      	str	r4, [sp, #0]
 8002bd8:	f002 fe56 	bl	8005888 <HAL_I2C_Master_Transmit>
	switch(kpenum) {
 8002bdc:	4bb1      	ldr	r3, [pc, #708]	; (8002ea4 <lcd_psu_update+0x2e0>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	f200 8108 	bhi.w	8002df6 <lcd_psu_update+0x232>
 8002be6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002bea:	0179      	.short	0x0179
 8002bec:	01a40005 	.word	0x01a40005
 8002bf0:	010801f5 	.word	0x010801f5
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002bf4:	2564      	movs	r5, #100	; 0x64
		lcd_update_voltage(1,voltnum2);
 8002bf6:	4bac      	ldr	r3, [pc, #688]	; (8002ea8 <lcd_psu_update+0x2e4>)
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	6819      	ldr	r1, [r3, #0]
 8002bfc:	f7ff fc92 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(1,ampnum2);
 8002c00:	4baa      	ldr	r3, [pc, #680]	; (8002eac <lcd_psu_update+0x2e8>)
 8002c02:	2001      	movs	r0, #1
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	f7ff fe35 	bl	8002874 <lcd_update_amperage>
		lcd_update_voltage(2,slin_num);
 8002c0a:	4ba9      	ldr	r3, [pc, #676]	; (8002eb0 <lcd_psu_update+0x2ec>)
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	f7ff fc88 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(2,scur_num);
 8002c14:	4ba7      	ldr	r3, [pc, #668]	; (8002eb4 <lcd_psu_update+0x2f0>)
 8002c16:	2002      	movs	r0, #2
 8002c18:	6819      	ldr	r1, [r3, #0]
 8002c1a:	f7ff fe2b 	bl	8002874 <lcd_update_amperage>
		lcd_update_amperage(3,ampnum1);
 8002c1e:	4ba6      	ldr	r3, [pc, #664]	; (8002eb8 <lcd_psu_update+0x2f4>)
 8002c20:	2003      	movs	r0, #3
 8002c22:	6819      	ldr	r1, [r3, #0]
 8002c24:	f7ff fe26 	bl	8002874 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8002c28:	4ba4      	ldr	r3, [pc, #656]	; (8002ebc <lcd_psu_update+0x2f8>)
 8002c2a:	2004      	movs	r0, #4
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	f7ff fc79 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002c32:	4ba3      	ldr	r3, [pc, #652]	; (8002ec0 <lcd_psu_update+0x2fc>)
 8002c34:	2004      	movs	r0, #4
 8002c36:	6819      	ldr	r1, [r3, #0]
 8002c38:	f7ff fe1c 	bl	8002874 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c3c:	49a1      	ldr	r1, [pc, #644]	; (8002ec4 <lcd_psu_update+0x300>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002c3e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c40:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002c42:	4897      	ldr	r0, [pc, #604]	; (8002ea0 <lcd_psu_update+0x2dc>)
 8002c44:	214e      	movs	r1, #78	; 0x4e
 8002c46:	aa03      	add	r2, sp, #12
 8002c48:	9500      	str	r5, [sp, #0]
 8002c4a:	f002 fe1d 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c4e:	2320      	movs	r3, #32
 8002c50:	4c9d      	ldr	r4, [pc, #628]	; (8002ec8 <lcd_psu_update+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002c52:	4e93      	ldr	r6, [pc, #588]	; (8002ea0 <lcd_psu_update+0x2dc>)
	data_l = ((data<<4)&0xf0);
 8002c54:	011a      	lsls	r2, r3, #4
 8002c56:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c5c:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c60:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c64:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c68:	f043 0309 	orr.w	r3, r3, #9
 8002c6c:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c70:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002c74:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c76:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	214e      	movs	r1, #78	; 0x4e
 8002c7e:	9500      	str	r5, [sp, #0]
 8002c80:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c82:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002c86:	f002 fdff 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c8a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1e0      	bne.n	8002c54 <lcd_psu_update+0x90>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c92:	498c      	ldr	r1, [pc, #560]	; (8002ec4 <lcd_psu_update+0x300>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002c94:	2304      	movs	r3, #4
 8002c96:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c98:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002c9a:	4881      	ldr	r0, [pc, #516]	; (8002ea0 <lcd_psu_update+0x2dc>)
 8002c9c:	214e      	movs	r1, #78	; 0x4e
 8002c9e:	9500      	str	r5, [sp, #0]
 8002ca0:	f002 fdf2 	bl	8005888 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ca4:	4989      	ldr	r1, [pc, #548]	; (8002ecc <lcd_psu_update+0x308>)
			if (keypadarr[i] != 'z') {
 8002ca6:	4c8a      	ldr	r4, [pc, #552]	; (8002ed0 <lcd_psu_update+0x30c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002ca8:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002caa:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002cac:	487c      	ldr	r0, [pc, #496]	; (8002ea0 <lcd_psu_update+0x2dc>)
 8002cae:	214e      	movs	r1, #78	; 0x4e
 8002cb0:	aa03      	add	r2, sp, #12
 8002cb2:	9500      	str	r5, [sp, #0]
 8002cb4:	f002 fde8 	bl	8005888 <HAL_I2C_Master_Transmit>
			if (keypadarr[i] != 'z') {
 8002cb8:	7823      	ldrb	r3, [r4, #0]
 8002cba:	2b7a      	cmp	r3, #122	; 0x7a
 8002cbc:	d01b      	beq.n	8002cf6 <lcd_psu_update+0x132>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002cbe:	9500      	str	r5, [sp, #0]
				lcd_send_data(keypadarr[i]);
 8002cc0:	7823      	ldrb	r3, [r4, #0]
	data_l = ((data<<4)&0xf0);
 8002cc2:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002cc8:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cca:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002cce:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002cd2:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cd6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002cda:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002cde:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ce2:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ce6:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002cea:	2304      	movs	r3, #4
 8002cec:	214e      	movs	r1, #78	; 0x4e
 8002cee:	486c      	ldr	r0, [pc, #432]	; (8002ea0 <lcd_psu_update+0x2dc>)
 8002cf0:	aa03      	add	r2, sp, #12
 8002cf2:	f002 fdc9 	bl	8005888 <HAL_I2C_Master_Transmit>
			if (keypadarr[i] != 'z') {
 8002cf6:	7863      	ldrb	r3, [r4, #1]
 8002cf8:	2b7a      	cmp	r3, #122	; 0x7a
 8002cfa:	d01c      	beq.n	8002d36 <lcd_psu_update+0x172>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002cfc:	2564      	movs	r5, #100	; 0x64
				lcd_send_data(keypadarr[i]);
 8002cfe:	7863      	ldrb	r3, [r4, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002d00:	4867      	ldr	r0, [pc, #412]	; (8002ea0 <lcd_psu_update+0x2dc>)
	data_l = ((data<<4)&0xf0);
 8002d02:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d08:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002d0c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d0e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d12:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d16:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d1a:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d1e:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d22:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d26:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	214e      	movs	r1, #78	; 0x4e
 8002d2e:	aa03      	add	r2, sp, #12
 8002d30:	9500      	str	r5, [sp, #0]
 8002d32:	f002 fda9 	bl	8005888 <HAL_I2C_Master_Transmit>
			if (keypadarr[i] != 'z') {
 8002d36:	78a3      	ldrb	r3, [r4, #2]
 8002d38:	2b7a      	cmp	r3, #122	; 0x7a
 8002d3a:	d01c      	beq.n	8002d76 <lcd_psu_update+0x1b2>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002d3c:	2564      	movs	r5, #100	; 0x64
				lcd_send_data(keypadarr[i]);
 8002d3e:	78a3      	ldrb	r3, [r4, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002d40:	4857      	ldr	r0, [pc, #348]	; (8002ea0 <lcd_psu_update+0x2dc>)
	data_l = ((data<<4)&0xf0);
 8002d42:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d48:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002d4c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d4e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d52:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d56:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d5a:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d5e:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d62:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d66:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	214e      	movs	r1, #78	; 0x4e
 8002d6e:	aa03      	add	r2, sp, #12
 8002d70:	9500      	str	r5, [sp, #0]
 8002d72:	f002 fd89 	bl	8005888 <HAL_I2C_Master_Transmit>
			if (keypadarr[i] != 'z') {
 8002d76:	78e3      	ldrb	r3, [r4, #3]
 8002d78:	2b7a      	cmp	r3, #122	; 0x7a
 8002d7a:	d01c      	beq.n	8002db6 <lcd_psu_update+0x1f2>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002d7c:	2564      	movs	r5, #100	; 0x64
				lcd_send_data(keypadarr[i]);
 8002d7e:	78e3      	ldrb	r3, [r4, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002d80:	4847      	ldr	r0, [pc, #284]	; (8002ea0 <lcd_psu_update+0x2dc>)
	data_l = ((data<<4)&0xf0);
 8002d82:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d88:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002d8c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d8e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d92:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d96:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d9a:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d9e:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002da2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002da6:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002daa:	2304      	movs	r3, #4
 8002dac:	214e      	movs	r1, #78	; 0x4e
 8002dae:	aa03      	add	r2, sp, #12
 8002db0:	9500      	str	r5, [sp, #0]
 8002db2:	f002 fd69 	bl	8005888 <HAL_I2C_Master_Transmit>
			if (keypadarr[i] != 'z') {
 8002db6:	7923      	ldrb	r3, [r4, #4]
 8002db8:	2b7a      	cmp	r3, #122	; 0x7a
 8002dba:	d01c      	beq.n	8002df6 <lcd_psu_update+0x232>
				lcd_send_data(keypadarr[i]);
 8002dbc:	7923      	ldrb	r3, [r4, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002dbe:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8002dc0:	0119      	lsls	r1, r3, #4
	data_u = (data&0xf0);
 8002dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002dc6:	b2c9      	uxtb	r1, r1
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dc8:	f043 000d 	orr.w	r0, r3, #13
 8002dcc:	f88d 000c 	strb.w	r0, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002dd0:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002dd4:	f041 0009 	orr.w	r0, r1, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002dd8:	f041 050d 	orr.w	r5, r1, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ddc:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002de0:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002de4:	2304      	movs	r3, #4
 8002de6:	214e      	movs	r1, #78	; 0x4e
 8002de8:	482d      	ldr	r0, [pc, #180]	; (8002ea0 <lcd_psu_update+0x2dc>)
 8002dea:	aa03      	add	r2, sp, #12
 8002dec:	9400      	str	r4, [sp, #0]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002dee:	f88d 500e 	strb.w	r5, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002df2:	f002 fd49 	bl	8005888 <HAL_I2C_Master_Transmit>
}
 8002df6:	b004      	add	sp, #16
 8002df8:	bd70      	pop	{r4, r5, r6, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002dfa:	2564      	movs	r5, #100	; 0x64
		lcd_update_voltage(1,voltnum2);
 8002dfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <lcd_psu_update+0x2e4>)
 8002dfe:	2001      	movs	r0, #1
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	f7ff fb8f 	bl	8002524 <lcd_update_voltage>
		lcd_update_voltage(2,slin_num);
 8002e06:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <lcd_psu_update+0x2ec>)
 8002e08:	2002      	movs	r0, #2
 8002e0a:	6819      	ldr	r1, [r3, #0]
 8002e0c:	f7ff fb8a 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(2,scur_num);
 8002e10:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <lcd_psu_update+0x2f0>)
 8002e12:	2002      	movs	r0, #2
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	f7ff fd2d 	bl	8002874 <lcd_update_amperage>
		lcd_update_voltage(3,voltnum1);
 8002e1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <lcd_psu_update+0x310>)
 8002e1c:	2003      	movs	r0, #3
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	f7ff fb80 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(3,ampnum1);
 8002e24:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <lcd_psu_update+0x2f4>)
 8002e26:	2003      	movs	r0, #3
 8002e28:	6819      	ldr	r1, [r3, #0]
 8002e2a:	f7ff fd23 	bl	8002874 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8002e2e:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <lcd_psu_update+0x2f8>)
 8002e30:	2004      	movs	r0, #4
 8002e32:	6819      	ldr	r1, [r3, #0]
 8002e34:	f7ff fb76 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002e38:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <lcd_psu_update+0x2fc>)
 8002e3a:	2004      	movs	r0, #4
 8002e3c:	6819      	ldr	r1, [r3, #0]
 8002e3e:	f7ff fd19 	bl	8002874 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e42:	4925      	ldr	r1, [pc, #148]	; (8002ed8 <lcd_psu_update+0x314>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002e44:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e46:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002e48:	4815      	ldr	r0, [pc, #84]	; (8002ea0 <lcd_psu_update+0x2dc>)
 8002e4a:	214e      	movs	r1, #78	; 0x4e
 8002e4c:	aa03      	add	r2, sp, #12
 8002e4e:	9500      	str	r5, [sp, #0]
 8002e50:	f002 fd1a 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e54:	2320      	movs	r3, #32
 8002e56:	4c1c      	ldr	r4, [pc, #112]	; (8002ec8 <lcd_psu_update+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002e58:	4e11      	ldr	r6, [pc, #68]	; (8002ea0 <lcd_psu_update+0x2dc>)
	data_l = ((data<<4)&0xf0);
 8002e5a:	011a      	lsls	r2, r3, #4
 8002e5c:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e62:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e66:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e6a:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e6e:	f043 0309 	orr.w	r3, r3, #9
 8002e72:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e76:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002e7a:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e7c:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002e80:	4630      	mov	r0, r6
 8002e82:	214e      	movs	r1, #78	; 0x4e
 8002e84:	9500      	str	r5, [sp, #0]
 8002e86:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e88:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002e8c:	f002 fcfc 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e90:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e0      	bne.n	8002e5a <lcd_psu_update+0x296>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e98:	490f      	ldr	r1, [pc, #60]	; (8002ed8 <lcd_psu_update+0x314>)
 8002e9a:	e6fb      	b.n	8002c94 <lcd_psu_update+0xd0>
 8002e9c:	c8cc080c 	.word	0xc8cc080c
 8002ea0:	200004ec 	.word	0x200004ec
 8002ea4:	20000705 	.word	0x20000705
 8002ea8:	20000824 	.word	0x20000824
 8002eac:	200003a0 	.word	0x200003a0
 8002eb0:	20000754 	.word	0x20000754
 8002eb4:	20000750 	.word	0x20000750
 8002eb8:	2000039c 	.word	0x2000039c
 8002ebc:	20000708 	.word	0x20000708
 8002ec0:	200003a8 	.word	0x200003a8
 8002ec4:	787c989c 	.word	0x787c989c
 8002ec8:	0800c7ec 	.word	0x0800c7ec
 8002ecc:	f8fc080c 	.word	0xf8fc080c
 8002ed0:	20000004 	.word	0x20000004
 8002ed4:	20000820 	.word	0x20000820
 8002ed8:	383cc8cc 	.word	0x383cc8cc
		lcd_update_voltage(1,voltnum2);
 8002edc:	4b66      	ldr	r3, [pc, #408]	; (8003078 <lcd_psu_update+0x4b4>)
 8002ede:	2001      	movs	r0, #1
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	f7ff fb1f 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(1,ampnum2);
 8002ee6:	4b65      	ldr	r3, [pc, #404]	; (800307c <lcd_psu_update+0x4b8>)
 8002ee8:	2001      	movs	r0, #1
 8002eea:	6819      	ldr	r1, [r3, #0]
 8002eec:	f7ff fcc2 	bl	8002874 <lcd_update_amperage>
		lcd_update_voltage(2,slin_num);
 8002ef0:	4b63      	ldr	r3, [pc, #396]	; (8003080 <lcd_psu_update+0x4bc>)
 8002ef2:	2002      	movs	r0, #2
 8002ef4:	6819      	ldr	r1, [r3, #0]
 8002ef6:	f7ff fb15 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(2,scur_num);
 8002efa:	4b62      	ldr	r3, [pc, #392]	; (8003084 <lcd_psu_update+0x4c0>)
 8002efc:	2002      	movs	r0, #2
 8002efe:	6819      	ldr	r1, [r3, #0]
 8002f00:	f7ff fcb8 	bl	8002874 <lcd_update_amperage>
		lcd_update_voltage(3,voltnum1);
 8002f04:	4b60      	ldr	r3, [pc, #384]	; (8003088 <lcd_psu_update+0x4c4>)
 8002f06:	2003      	movs	r0, #3
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	f7ff fb0b 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(3,ampnum1);
 8002f0e:	4b5f      	ldr	r3, [pc, #380]	; (800308c <lcd_psu_update+0x4c8>)
 8002f10:	2003      	movs	r0, #3
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	f7ff fcae 	bl	8002874 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8002f18:	4b5d      	ldr	r3, [pc, #372]	; (8003090 <lcd_psu_update+0x4cc>)
 8002f1a:	2004      	movs	r0, #4
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	f7ff fb01 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002f22:	2004      	movs	r0, #4
 8002f24:	4b5b      	ldr	r3, [pc, #364]	; (8003094 <lcd_psu_update+0x4d0>)
 8002f26:	6819      	ldr	r1, [r3, #0]
}
 8002f28:	b004      	add	sp, #16
 8002f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lcd_update_amperage(4,cur_num);
 8002f2e:	f7ff bca1 	b.w	8002874 <lcd_update_amperage>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002f32:	2564      	movs	r5, #100	; 0x64
		lcd_update_voltage(1,voltnum2);
 8002f34:	4b50      	ldr	r3, [pc, #320]	; (8003078 <lcd_psu_update+0x4b4>)
 8002f36:	2001      	movs	r0, #1
 8002f38:	6819      	ldr	r1, [r3, #0]
 8002f3a:	f7ff faf3 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(1,ampnum2);
 8002f3e:	4b4f      	ldr	r3, [pc, #316]	; (800307c <lcd_psu_update+0x4b8>)
 8002f40:	2001      	movs	r0, #1
 8002f42:	6819      	ldr	r1, [r3, #0]
 8002f44:	f7ff fc96 	bl	8002874 <lcd_update_amperage>
		lcd_update_voltage(2,slin_num);
 8002f48:	4b4d      	ldr	r3, [pc, #308]	; (8003080 <lcd_psu_update+0x4bc>)
 8002f4a:	2002      	movs	r0, #2
 8002f4c:	6819      	ldr	r1, [r3, #0]
 8002f4e:	f7ff fae9 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(2,scur_num);
 8002f52:	4b4c      	ldr	r3, [pc, #304]	; (8003084 <lcd_psu_update+0x4c0>)
 8002f54:	2002      	movs	r0, #2
 8002f56:	6819      	ldr	r1, [r3, #0]
 8002f58:	f7ff fc8c 	bl	8002874 <lcd_update_amperage>
		lcd_update_voltage(3,voltnum1);
 8002f5c:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <lcd_psu_update+0x4c4>)
 8002f5e:	2003      	movs	r0, #3
 8002f60:	6819      	ldr	r1, [r3, #0]
 8002f62:	f7ff fadf 	bl	8002524 <lcd_update_voltage>
		lcd_update_voltage(4,lin_num);
 8002f66:	4b4a      	ldr	r3, [pc, #296]	; (8003090 <lcd_psu_update+0x4cc>)
 8002f68:	2004      	movs	r0, #4
 8002f6a:	6819      	ldr	r1, [r3, #0]
 8002f6c:	f7ff fada 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002f70:	4b48      	ldr	r3, [pc, #288]	; (8003094 <lcd_psu_update+0x4d0>)
 8002f72:	2004      	movs	r0, #4
 8002f74:	6819      	ldr	r1, [r3, #0]
 8002f76:	f7ff fc7d 	bl	8002874 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f7a:	4947      	ldr	r1, [pc, #284]	; (8003098 <lcd_psu_update+0x4d4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002f7c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f7e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002f80:	4846      	ldr	r0, [pc, #280]	; (800309c <lcd_psu_update+0x4d8>)
 8002f82:	214e      	movs	r1, #78	; 0x4e
 8002f84:	aa03      	add	r2, sp, #12
 8002f86:	9500      	str	r5, [sp, #0]
 8002f88:	f002 fc7e 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	4c44      	ldr	r4, [pc, #272]	; (80030a0 <lcd_psu_update+0x4dc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002f90:	4e42      	ldr	r6, [pc, #264]	; (800309c <lcd_psu_update+0x4d8>)
	data_l = ((data<<4)&0xf0);
 8002f92:	011a      	lsls	r2, r3, #4
 8002f94:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f9a:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f9e:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fa2:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002fa6:	f043 0309 	orr.w	r3, r3, #9
 8002faa:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fae:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002fb2:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fb4:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002fb8:	4630      	mov	r0, r6
 8002fba:	214e      	movs	r1, #78	; 0x4e
 8002fbc:	9500      	str	r5, [sp, #0]
 8002fbe:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fc0:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002fc4:	f002 fc60 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002fc8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e0      	bne.n	8002f92 <lcd_psu_update+0x3ce>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fd0:	4931      	ldr	r1, [pc, #196]	; (8003098 <lcd_psu_update+0x4d4>)
 8002fd2:	e65f      	b.n	8002c94 <lcd_psu_update+0xd0>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8002fd4:	2564      	movs	r5, #100	; 0x64
		lcd_update_amperage(1,ampnum2);
 8002fd6:	4b29      	ldr	r3, [pc, #164]	; (800307c <lcd_psu_update+0x4b8>)
 8002fd8:	2001      	movs	r0, #1
 8002fda:	6819      	ldr	r1, [r3, #0]
 8002fdc:	f7ff fc4a 	bl	8002874 <lcd_update_amperage>
		lcd_update_voltage(2,slin_num);
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <lcd_psu_update+0x4bc>)
 8002fe2:	2002      	movs	r0, #2
 8002fe4:	6819      	ldr	r1, [r3, #0]
 8002fe6:	f7ff fa9d 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(2,scur_num);
 8002fea:	4b26      	ldr	r3, [pc, #152]	; (8003084 <lcd_psu_update+0x4c0>)
 8002fec:	2002      	movs	r0, #2
 8002fee:	6819      	ldr	r1, [r3, #0]
 8002ff0:	f7ff fc40 	bl	8002874 <lcd_update_amperage>
		lcd_update_voltage(3,voltnum1);
 8002ff4:	4b24      	ldr	r3, [pc, #144]	; (8003088 <lcd_psu_update+0x4c4>)
 8002ff6:	2003      	movs	r0, #3
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	f7ff fa93 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(3,ampnum1);
 8002ffe:	4b23      	ldr	r3, [pc, #140]	; (800308c <lcd_psu_update+0x4c8>)
 8003000:	2003      	movs	r0, #3
 8003002:	6819      	ldr	r1, [r3, #0]
 8003004:	f7ff fc36 	bl	8002874 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <lcd_psu_update+0x4cc>)
 800300a:	2004      	movs	r0, #4
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	f7ff fa89 	bl	8002524 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003012:	4b20      	ldr	r3, [pc, #128]	; (8003094 <lcd_psu_update+0x4d0>)
 8003014:	2004      	movs	r0, #4
 8003016:	6819      	ldr	r1, [r3, #0]
 8003018:	f7ff fc2c 	bl	8002874 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800301c:	4921      	ldr	r1, [pc, #132]	; (80030a4 <lcd_psu_update+0x4e0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800301e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003020:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8003022:	481e      	ldr	r0, [pc, #120]	; (800309c <lcd_psu_update+0x4d8>)
 8003024:	214e      	movs	r1, #78	; 0x4e
 8003026:	aa03      	add	r2, sp, #12
 8003028:	9500      	str	r5, [sp, #0]
 800302a:	f002 fc2d 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800302e:	2320      	movs	r3, #32
 8003030:	4c1b      	ldr	r4, [pc, #108]	; (80030a0 <lcd_psu_update+0x4dc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8003032:	4e1a      	ldr	r6, [pc, #104]	; (800309c <lcd_psu_update+0x4d8>)
	data_l = ((data<<4)&0xf0);
 8003034:	011a      	lsls	r2, r3, #4
 8003036:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8003038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800303c:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003040:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003044:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003048:	f043 0309 	orr.w	r3, r3, #9
 800304c:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003050:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8003054:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003056:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 800305a:	4630      	mov	r0, r6
 800305c:	214e      	movs	r1, #78	; 0x4e
 800305e:	9500      	str	r5, [sp, #0]
 8003060:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003062:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8003066:	f002 fc0f 	bl	8005888 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800306a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e0      	bne.n	8003034 <lcd_psu_update+0x470>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003072:	490c      	ldr	r1, [pc, #48]	; (80030a4 <lcd_psu_update+0x4e0>)
 8003074:	e60e      	b.n	8002c94 <lcd_psu_update+0xd0>
 8003076:	bf00      	nop
 8003078:	20000824 	.word	0x20000824
 800307c:	200003a0 	.word	0x200003a0
 8003080:	20000754 	.word	0x20000754
 8003084:	20000750 	.word	0x20000750
 8003088:	20000820 	.word	0x20000820
 800308c:	2000039c 	.word	0x2000039c
 8003090:	20000708 	.word	0x20000708
 8003094:	200003a8 	.word	0x200003a8
 8003098:	787cd8dc 	.word	0x787cd8dc
 800309c:	200004ec 	.word	0x200004ec
 80030a0:	0800c7ec 	.word	0x0800c7ec
 80030a4:	383c888c 	.word	0x383c888c

080030a8 <translate_keypad>:
{
 80030a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < keypadlength; i++) {
 80030ac:	2700      	movs	r7, #0
	int decimallocation = -1;
 80030ae:	f04f 35ff 	mov.w	r5, #4294967295
	float num = 0;
 80030b2:	2600      	movs	r6, #0
 80030b4:	4caf      	ldr	r4, [pc, #700]	; (8003374 <translate_keypad+0x2cc>)
					num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80030b6:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8003378 <translate_keypad+0x2d0>
		if (keypadarr[i] == '.') {
 80030ba:	5de3      	ldrb	r3, [r4, r7]
 80030bc:	2b2e      	cmp	r3, #46	; 0x2e
 80030be:	d03b      	beq.n	8003138 <translate_keypad+0x90>
		if (decimallocation == -1) {
 80030c0:	1c6b      	adds	r3, r5, #1
 80030c2:	d13a      	bne.n	800313a <translate_keypad+0x92>
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 80030c4:	7923      	ldrb	r3, [r4, #4]
 80030c6:	2b2f      	cmp	r3, #47	; 0x2f
 80030c8:	d903      	bls.n	80030d2 <translate_keypad+0x2a>
 80030ca:	7923      	ldrb	r3, [r4, #4]
 80030cc:	2b39      	cmp	r3, #57	; 0x39
 80030ce:	f240 8174 	bls.w	80033ba <translate_keypad+0x312>
 80030d2:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 80030d6:	f04f 0b64 	mov.w	fp, #100	; 0x64
 80030da:	f04f 080a 	mov.w	r8, #10
			int count = 1;
 80030de:	2301      	movs	r3, #1
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 80030e0:	78e1      	ldrb	r1, [r4, #3]
 80030e2:	292f      	cmp	r1, #47	; 0x2f
 80030e4:	d903      	bls.n	80030ee <translate_keypad+0x46>
 80030e6:	78e1      	ldrb	r1, [r4, #3]
 80030e8:	2939      	cmp	r1, #57	; 0x39
 80030ea:	f240 8157 	bls.w	800339c <translate_keypad+0x2f4>
 80030ee:	78a2      	ldrb	r2, [r4, #2]
 80030f0:	2a2f      	cmp	r2, #47	; 0x2f
 80030f2:	d903      	bls.n	80030fc <translate_keypad+0x54>
 80030f4:	78a2      	ldrb	r2, [r4, #2]
 80030f6:	2a39      	cmp	r2, #57	; 0x39
 80030f8:	f240 8142 	bls.w	8003380 <translate_keypad+0x2d8>
 80030fc:	7862      	ldrb	r2, [r4, #1]
 80030fe:	2a2f      	cmp	r2, #47	; 0x2f
 8003100:	d903      	bls.n	800310a <translate_keypad+0x62>
 8003102:	7862      	ldrb	r2, [r4, #1]
 8003104:	2a39      	cmp	r2, #57	; 0x39
 8003106:	f240 8127 	bls.w	8003358 <translate_keypad+0x2b0>
 800310a:	7822      	ldrb	r2, [r4, #0]
 800310c:	2a2f      	cmp	r2, #47	; 0x2f
 800310e:	d90d      	bls.n	800312c <translate_keypad+0x84>
 8003110:	7822      	ldrb	r2, [r4, #0]
 8003112:	2a39      	cmp	r2, #57	; 0x39
 8003114:	d80a      	bhi.n	800312c <translate_keypad+0x84>
					num += ((int)keypadarr[i] - (int)'0') * (count);
 8003116:	7820      	ldrb	r0, [r4, #0]
 8003118:	3830      	subs	r0, #48	; 0x30
 800311a:	fb03 f000 	mul.w	r0, r3, r0
 800311e:	f7fd fdd5 	bl	8000ccc <__aeabi_i2f>
 8003122:	4601      	mov	r1, r0
 8003124:	4630      	mov	r0, r6
 8003126:	f7fd fd1d 	bl	8000b64 <__addsf3>
 800312a:	4606      	mov	r6, r0
	for (int i = 0; i < keypadlength; i++) {
 800312c:	3701      	adds	r7, #1
 800312e:	2f05      	cmp	r7, #5
 8003130:	d1c3      	bne.n	80030ba <translate_keypad+0x12>
}
 8003132:	4630      	mov	r0, r6
 8003134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003138:	463d      	mov	r5, r7
			for (int i = decimallocation-1; i >=0; i--) {
 800313a:	1e6b      	subs	r3, r5, #1
 800313c:	2d00      	cmp	r5, #0
 800313e:	f000 80d5 	beq.w	80032ec <translate_keypad+0x244>
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 8003142:	5ce2      	ldrb	r2, [r4, r3]
 8003144:	2a2f      	cmp	r2, #47	; 0x2f
 8003146:	f240 80c1 	bls.w	80032cc <translate_keypad+0x224>
 800314a:	5ce2      	ldrb	r2, [r4, r3]
 800314c:	2a39      	cmp	r2, #57	; 0x39
 800314e:	f200 80bd 	bhi.w	80032cc <translate_keypad+0x224>
					num += ((int)keypadarr[i] - (int)'0') * (count);
 8003152:	5ce0      	ldrb	r0, [r4, r3]
					count = count * 10;
 8003154:	f04f 080a 	mov.w	r8, #10
					num += ((int)keypadarr[i] - (int)'0') * (count);
 8003158:	3830      	subs	r0, #48	; 0x30
 800315a:	f7fd fdb7 	bl	8000ccc <__aeabi_i2f>
 800315e:	4601      	mov	r1, r0
 8003160:	4630      	mov	r0, r6
 8003162:	f7fd fcff 	bl	8000b64 <__addsf3>
			for (int i = decimallocation-1; i >=0; i--) {
 8003166:	2d01      	cmp	r5, #1
					num += ((int)keypadarr[i] - (int)'0') * (count);
 8003168:	4606      	mov	r6, r0
			for (int i = decimallocation-1; i >=0; i--) {
 800316a:	f1a5 0302 	sub.w	r3, r5, #2
 800316e:	f000 80b4 	beq.w	80032da <translate_keypad+0x232>
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 8003172:	5ce2      	ldrb	r2, [r4, r3]
 8003174:	2a2f      	cmp	r2, #47	; 0x2f
 8003176:	d911      	bls.n	800319c <translate_keypad+0xf4>
 8003178:	5ce2      	ldrb	r2, [r4, r3]
 800317a:	2a39      	cmp	r2, #57	; 0x39
 800317c:	d80e      	bhi.n	800319c <translate_keypad+0xf4>
					num += ((int)keypadarr[i] - (int)'0') * (count);
 800317e:	5ce0      	ldrb	r0, [r4, r3]
 8003180:	3830      	subs	r0, #48	; 0x30
 8003182:	fb08 f000 	mul.w	r0, r8, r0
 8003186:	f7fd fda1 	bl	8000ccc <__aeabi_i2f>
 800318a:	4601      	mov	r1, r0
 800318c:	4630      	mov	r0, r6
 800318e:	f7fd fce9 	bl	8000b64 <__addsf3>
 8003192:	4606      	mov	r6, r0
					count = count * 10;
 8003194:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8003198:	ea4f 0848 	mov.w	r8, r8, lsl #1
			for (int i = decimallocation-1; i >=0; i--) {
 800319c:	2d02      	cmp	r5, #2
 800319e:	f1a5 0303 	sub.w	r3, r5, #3
 80031a2:	f000 809a 	beq.w	80032da <translate_keypad+0x232>
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 80031a6:	5ce2      	ldrb	r2, [r4, r3]
 80031a8:	2a2f      	cmp	r2, #47	; 0x2f
 80031aa:	d903      	bls.n	80031b4 <translate_keypad+0x10c>
 80031ac:	5ce2      	ldrb	r2, [r4, r3]
 80031ae:	2a39      	cmp	r2, #57	; 0x39
 80031b0:	f240 80c2 	bls.w	8003338 <translate_keypad+0x290>
			for (int i = decimallocation-1; i >=0; i--) {
 80031b4:	2d03      	cmp	r5, #3
 80031b6:	f1a5 0304 	sub.w	r3, r5, #4
 80031ba:	f000 808e 	beq.w	80032da <translate_keypad+0x232>
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 80031be:	5ce2      	ldrb	r2, [r4, r3]
 80031c0:	2a2f      	cmp	r2, #47	; 0x2f
 80031c2:	d903      	bls.n	80031cc <translate_keypad+0x124>
 80031c4:	5ce2      	ldrb	r2, [r4, r3]
 80031c6:	2a39      	cmp	r2, #57	; 0x39
 80031c8:	f240 8108 	bls.w	80033dc <translate_keypad+0x334>
			for (int i = decimallocation-1; i >=0; i--) {
 80031cc:	2d04      	cmp	r5, #4
 80031ce:	f1a5 0305 	sub.w	r3, r5, #5
 80031d2:	d006      	beq.n	80031e2 <translate_keypad+0x13a>
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 80031d4:	5ce2      	ldrb	r2, [r4, r3]
 80031d6:	2a2f      	cmp	r2, #47	; 0x2f
 80031d8:	d903      	bls.n	80031e2 <translate_keypad+0x13a>
 80031da:	5ce2      	ldrb	r2, [r4, r3]
 80031dc:	2a39      	cmp	r2, #57	; 0x39
 80031de:	f240 810d 	bls.w	80033fc <translate_keypad+0x354>
			for (int i = decimallocation+1; i < keypadlength; i++) {
 80031e2:	f105 0801 	add.w	r8, r5, #1
 80031e6:	f1b8 0f04 	cmp.w	r8, #4
 80031ea:	dc9f      	bgt.n	800312c <translate_keypad+0x84>
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 80031ec:	f814 3008 	ldrb.w	r3, [r4, r8]
 80031f0:	2b2f      	cmp	r3, #47	; 0x2f
 80031f2:	d978      	bls.n	80032e6 <translate_keypad+0x23e>
 80031f4:	f814 3008 	ldrb.w	r3, [r4, r8]
 80031f8:	2b39      	cmp	r3, #57	; 0x39
 80031fa:	d874      	bhi.n	80032e6 <translate_keypad+0x23e>
					num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80031fc:	f814 0008 	ldrb.w	r0, [r4, r8]
 8003200:	f7fd fd64 	bl	8000ccc <__aeabi_i2f>
 8003204:	4649      	mov	r1, r9
 8003206:	f7fd fcab 	bl	8000b60 <__aeabi_fsub>
 800320a:	495c      	ldr	r1, [pc, #368]	; (800337c <translate_keypad+0x2d4>)
 800320c:	f7fd fe66 	bl	8000edc <__aeabi_fdiv>
 8003210:	4601      	mov	r1, r0
 8003212:	4630      	mov	r0, r6
 8003214:	f7fd fca6 	bl	8000b64 <__addsf3>
					count = count * 10;
 8003218:	f04f 0a64 	mov.w	sl, #100	; 0x64
					num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800321c:	4606      	mov	r6, r0
			for (int i = decimallocation+1; i < keypadlength; i++) {
 800321e:	f1b8 0f04 	cmp.w	r8, #4
 8003222:	f108 0b01 	add.w	fp, r8, #1
 8003226:	d081      	beq.n	800312c <translate_keypad+0x84>
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 8003228:	f814 200b 	ldrb.w	r2, [r4, fp]
 800322c:	2a2f      	cmp	r2, #47	; 0x2f
 800322e:	d91b      	bls.n	8003268 <translate_keypad+0x1c0>
 8003230:	f814 200b 	ldrb.w	r2, [r4, fp]
 8003234:	2a39      	cmp	r2, #57	; 0x39
 8003236:	d817      	bhi.n	8003268 <translate_keypad+0x1c0>
					num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003238:	f814 000b 	ldrb.w	r0, [r4, fp]
 800323c:	f7fd fd46 	bl	8000ccc <__aeabi_i2f>
 8003240:	4649      	mov	r1, r9
 8003242:	f7fd fc8d 	bl	8000b60 <__aeabi_fsub>
 8003246:	4680      	mov	r8, r0
 8003248:	4650      	mov	r0, sl
 800324a:	f7fd fd3f 	bl	8000ccc <__aeabi_i2f>
 800324e:	4601      	mov	r1, r0
 8003250:	4640      	mov	r0, r8
 8003252:	f7fd fe43 	bl	8000edc <__aeabi_fdiv>
 8003256:	4601      	mov	r1, r0
 8003258:	4630      	mov	r0, r6
 800325a:	f7fd fc83 	bl	8000b64 <__addsf3>
 800325e:	4606      	mov	r6, r0
					count = count * 10;
 8003260:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8003264:	ea4f 0a43 	mov.w	sl, r3, lsl #1
			for (int i = decimallocation+1; i < keypadlength; i++) {
 8003268:	f1bb 0f04 	cmp.w	fp, #4
 800326c:	f10b 0801 	add.w	r8, fp, #1
 8003270:	f43f af5c 	beq.w	800312c <translate_keypad+0x84>
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 8003274:	f814 2008 	ldrb.w	r2, [r4, r8]
 8003278:	2a2f      	cmp	r2, #47	; 0x2f
 800327a:	d903      	bls.n	8003284 <translate_keypad+0x1dc>
 800327c:	f814 2008 	ldrb.w	r2, [r4, r8]
 8003280:	2a39      	cmp	r2, #57	; 0x39
 8003282:	d940      	bls.n	8003306 <translate_keypad+0x25e>
			for (int i = decimallocation+1; i < keypadlength; i++) {
 8003284:	f1b8 0f03 	cmp.w	r8, #3
 8003288:	f47f af50 	bne.w	800312c <translate_keypad+0x84>
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 800328c:	7922      	ldrb	r2, [r4, #4]
 800328e:	2a2f      	cmp	r2, #47	; 0x2f
 8003290:	f67f af4c 	bls.w	800312c <translate_keypad+0x84>
 8003294:	7922      	ldrb	r2, [r4, #4]
 8003296:	2a39      	cmp	r2, #57	; 0x39
 8003298:	f63f af48 	bhi.w	800312c <translate_keypad+0x84>
					num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800329c:	7920      	ldrb	r0, [r4, #4]
 800329e:	f7fd fd15 	bl	8000ccc <__aeabi_i2f>
 80032a2:	4649      	mov	r1, r9
 80032a4:	f7fd fc5c 	bl	8000b60 <__aeabi_fsub>
 80032a8:	4680      	mov	r8, r0
 80032aa:	4650      	mov	r0, sl
 80032ac:	f7fd fd0e 	bl	8000ccc <__aeabi_i2f>
 80032b0:	4601      	mov	r1, r0
 80032b2:	4640      	mov	r0, r8
 80032b4:	f7fd fe12 	bl	8000edc <__aeabi_fdiv>
 80032b8:	4601      	mov	r1, r0
 80032ba:	4630      	mov	r0, r6
 80032bc:	f7fd fc52 	bl	8000b64 <__addsf3>
	for (int i = 0; i < keypadlength; i++) {
 80032c0:	3701      	adds	r7, #1
 80032c2:	2f05      	cmp	r7, #5
					num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80032c4:	4606      	mov	r6, r0
	for (int i = 0; i < keypadlength; i++) {
 80032c6:	f47f aef8 	bne.w	80030ba <translate_keypad+0x12>
 80032ca:	e732      	b.n	8003132 <translate_keypad+0x8a>
			for (int i = decimallocation-1; i >=0; i--) {
 80032cc:	2d01      	cmp	r5, #1
			int count = 1;
 80032ce:	f04f 0801 	mov.w	r8, #1
			for (int i = decimallocation-1; i >=0; i--) {
 80032d2:	f1a5 0302 	sub.w	r3, r5, #2
 80032d6:	f47f af4c 	bne.w	8003172 <translate_keypad+0xca>
			for (int i = decimallocation+1; i < keypadlength; i++) {
 80032da:	f105 0801 	add.w	r8, r5, #1
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 80032de:	f814 3008 	ldrb.w	r3, [r4, r8]
 80032e2:	2b2f      	cmp	r3, #47	; 0x2f
 80032e4:	d886      	bhi.n	80031f4 <translate_keypad+0x14c>
 80032e6:	f04f 0a0a 	mov.w	sl, #10
 80032ea:	e798      	b.n	800321e <translate_keypad+0x176>
 80032ec:	7863      	ldrb	r3, [r4, #1]
 80032ee:	2b2f      	cmp	r3, #47	; 0x2f
 80032f0:	f240 8090 	bls.w	8003414 <translate_keypad+0x36c>
 80032f4:	7863      	ldrb	r3, [r4, #1]
 80032f6:	2b39      	cmp	r3, #57	; 0x39
 80032f8:	f240 8099 	bls.w	800342e <translate_keypad+0x386>
			for (int i = decimallocation+1; i < keypadlength; i++) {
 80032fc:	f04f 0b02 	mov.w	fp, #2
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 8003300:	f04f 0a0a 	mov.w	sl, #10
 8003304:	e790      	b.n	8003228 <translate_keypad+0x180>
					num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003306:	f814 0008 	ldrb.w	r0, [r4, r8]
 800330a:	f7fd fcdf 	bl	8000ccc <__aeabi_i2f>
 800330e:	4649      	mov	r1, r9
 8003310:	f7fd fc26 	bl	8000b60 <__aeabi_fsub>
 8003314:	4683      	mov	fp, r0
 8003316:	4650      	mov	r0, sl
 8003318:	f7fd fcd8 	bl	8000ccc <__aeabi_i2f>
 800331c:	4601      	mov	r1, r0
 800331e:	4658      	mov	r0, fp
 8003320:	f7fd fddc 	bl	8000edc <__aeabi_fdiv>
 8003324:	4601      	mov	r1, r0
 8003326:	4630      	mov	r0, r6
 8003328:	f7fd fc1c 	bl	8000b64 <__addsf3>
					count = count * 10;
 800332c:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
					num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003330:	4606      	mov	r6, r0
					count = count * 10;
 8003332:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8003336:	e7a5      	b.n	8003284 <translate_keypad+0x1dc>
					num += ((int)keypadarr[i] - (int)'0') * (count);
 8003338:	5ce0      	ldrb	r0, [r4, r3]
 800333a:	3830      	subs	r0, #48	; 0x30
 800333c:	fb08 f000 	mul.w	r0, r8, r0
 8003340:	f7fd fcc4 	bl	8000ccc <__aeabi_i2f>
 8003344:	4601      	mov	r1, r0
 8003346:	4630      	mov	r0, r6
 8003348:	f7fd fc0c 	bl	8000b64 <__addsf3>
					count = count * 10;
 800334c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
					num += ((int)keypadarr[i] - (int)'0') * (count);
 8003350:	4606      	mov	r6, r0
					count = count * 10;
 8003352:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8003356:	e72d      	b.n	80031b4 <translate_keypad+0x10c>
					num += ((int)keypadarr[i] - (int)'0') * (count);
 8003358:	7860      	ldrb	r0, [r4, #1]
 800335a:	3830      	subs	r0, #48	; 0x30
 800335c:	fb03 f000 	mul.w	r0, r3, r0
 8003360:	f7fd fcb4 	bl	8000ccc <__aeabi_i2f>
 8003364:	4601      	mov	r1, r0
 8003366:	4630      	mov	r0, r6
 8003368:	f7fd fbfc 	bl	8000b64 <__addsf3>
					count = count * 10;
 800336c:	4643      	mov	r3, r8
					num += ((int)keypadarr[i] - (int)'0') * (count);
 800336e:	4606      	mov	r6, r0
					count = count * 10;
 8003370:	e6cb      	b.n	800310a <translate_keypad+0x62>
 8003372:	bf00      	nop
 8003374:	20000004 	.word	0x20000004
 8003378:	42400000 	.word	0x42400000
 800337c:	41200000 	.word	0x41200000
					num += ((int)keypadarr[i] - (int)'0') * (count);
 8003380:	78a0      	ldrb	r0, [r4, #2]
 8003382:	3830      	subs	r0, #48	; 0x30
 8003384:	fb03 f000 	mul.w	r0, r3, r0
 8003388:	f7fd fca0 	bl	8000ccc <__aeabi_i2f>
 800338c:	4601      	mov	r1, r0
 800338e:	4630      	mov	r0, r6
 8003390:	f7fd fbe8 	bl	8000b64 <__addsf3>
					count = count * 10;
 8003394:	4643      	mov	r3, r8
					num += ((int)keypadarr[i] - (int)'0') * (count);
 8003396:	4606      	mov	r6, r0
 8003398:	46d8      	mov	r8, fp
 800339a:	e6af      	b.n	80030fc <translate_keypad+0x54>
 800339c:	78e0      	ldrb	r0, [r4, #3]
 800339e:	3830      	subs	r0, #48	; 0x30
 80033a0:	fb03 f000 	mul.w	r0, r3, r0
 80033a4:	f7fd fc92 	bl	8000ccc <__aeabi_i2f>
 80033a8:	4601      	mov	r1, r0
 80033aa:	4630      	mov	r0, r6
 80033ac:	f7fd fbda 	bl	8000b64 <__addsf3>
					count = count * 10;
 80033b0:	4643      	mov	r3, r8
					num += ((int)keypadarr[i] - (int)'0') * (count);
 80033b2:	4606      	mov	r6, r0
 80033b4:	46d8      	mov	r8, fp
 80033b6:	46d3      	mov	fp, sl
 80033b8:	e699      	b.n	80030ee <translate_keypad+0x46>
 80033ba:	7920      	ldrb	r0, [r4, #4]
 80033bc:	f242 7a10 	movw	sl, #10000	; 0x2710
 80033c0:	3830      	subs	r0, #48	; 0x30
 80033c2:	f7fd fc83 	bl	8000ccc <__aeabi_i2f>
 80033c6:	4601      	mov	r1, r0
 80033c8:	4630      	mov	r0, r6
 80033ca:	f7fd fbcb 	bl	8000b64 <__addsf3>
 80033ce:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
 80033d2:	f04f 0864 	mov.w	r8, #100	; 0x64
					count = count * 10;
 80033d6:	230a      	movs	r3, #10
					num += ((int)keypadarr[i] - (int)'0') * (count);
 80033d8:	4606      	mov	r6, r0
					count = count * 10;
 80033da:	e681      	b.n	80030e0 <translate_keypad+0x38>
					num += ((int)keypadarr[i] - (int)'0') * (count);
 80033dc:	5ce0      	ldrb	r0, [r4, r3]
 80033de:	3830      	subs	r0, #48	; 0x30
 80033e0:	fb08 f000 	mul.w	r0, r8, r0
 80033e4:	f7fd fc72 	bl	8000ccc <__aeabi_i2f>
 80033e8:	4601      	mov	r1, r0
 80033ea:	4630      	mov	r0, r6
 80033ec:	f7fd fbba 	bl	8000b64 <__addsf3>
					count = count * 10;
 80033f0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
					num += ((int)keypadarr[i] - (int)'0') * (count);
 80033f4:	4606      	mov	r6, r0
					count = count * 10;
 80033f6:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80033fa:	e6e7      	b.n	80031cc <translate_keypad+0x124>
					num += ((int)keypadarr[i] - (int)'0') * (count);
 80033fc:	5ce0      	ldrb	r0, [r4, r3]
 80033fe:	3830      	subs	r0, #48	; 0x30
 8003400:	fb08 f000 	mul.w	r0, r8, r0
 8003404:	f7fd fc62 	bl	8000ccc <__aeabi_i2f>
 8003408:	4601      	mov	r1, r0
 800340a:	4630      	mov	r0, r6
 800340c:	f7fd fbaa 	bl	8000b64 <__addsf3>
 8003410:	4606      	mov	r6, r0
			for (int i = decimallocation-1; i >=0; i--) {
 8003412:	e6e6      	b.n	80031e2 <translate_keypad+0x13a>
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 8003414:	78a3      	ldrb	r3, [r4, #2]
 8003416:	2b2f      	cmp	r3, #47	; 0x2f
 8003418:	d904      	bls.n	8003424 <translate_keypad+0x37c>
			for (int i = decimallocation+1; i < keypadlength; i++) {
 800341a:	f04f 0b02 	mov.w	fp, #2
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 800341e:	f04f 0a0a 	mov.w	sl, #10
 8003422:	e705      	b.n	8003230 <translate_keypad+0x188>
			for (int i = decimallocation+1; i < keypadlength; i++) {
 8003424:	f04f 0803 	mov.w	r8, #3
				if (keypadarr[i] >= '0' && keypadarr[i] <= '9') {
 8003428:	f04f 0a0a 	mov.w	sl, #10
 800342c:	e722      	b.n	8003274 <translate_keypad+0x1cc>
			for (int i = decimallocation+1; i < keypadlength; i++) {
 800342e:	f04f 0801 	mov.w	r8, #1
 8003432:	e6e3      	b.n	80031fc <translate_keypad+0x154>

08003434 <update_keypad>:
	if (num == 'z') {
 8003434:	287a      	cmp	r0, #122	; 0x7a
{
 8003436:	b538      	push	{r3, r4, r5, lr}
	if (num == 'z') {
 8003438:	d038      	beq.n	80034ac <update_keypad+0x78>
	} else if(num == '.') {
 800343a:	282e      	cmp	r0, #46	; 0x2e
 800343c:	4604      	mov	r4, r0
 800343e:	d018      	beq.n	8003472 <update_keypad+0x3e>
	else if(num >= '0' && num <= '9'){
 8003440:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003444:	2b09      	cmp	r3, #9
 8003446:	d813      	bhi.n	8003470 <update_keypad+0x3c>
		if (keypaditerator > 2) {
 8003448:	4d47      	ldr	r5, [pc, #284]	; (8003568 <update_keypad+0x134>)
 800344a:	782b      	ldrb	r3, [r5, #0]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d852      	bhi.n	80034f6 <update_keypad+0xc2>
		} else if(keypaditerator <= 1 && keypaddecimal == 1 && keypadarr[1] == 'z' && keypadarr[2] != '.') {
 8003450:	782b      	ldrb	r3, [r5, #0]
 8003452:	2b01      	cmp	r3, #1
 8003454:	4b45      	ldr	r3, [pc, #276]	; (800356c <update_keypad+0x138>)
 8003456:	d961      	bls.n	800351c <update_keypad+0xe8>
		else if (keypaditerator <= 1 && keypaddecimal == 1 && keypadarr[1] == 'z') {
 8003458:	782a      	ldrb	r2, [r5, #0]
 800345a:	2a01      	cmp	r2, #1
 800345c:	d97a      	bls.n	8003554 <update_keypad+0x120>
		else if (keypaditerator > 0 && keypaddecimal == 1) {
 800345e:	782a      	ldrb	r2, [r5, #0]
 8003460:	b112      	cbz	r2, 8003468 <update_keypad+0x34>
 8003462:	781a      	ldrb	r2, [r3, #0]
 8003464:	2a01      	cmp	r2, #1
 8003466:	d046      	beq.n	80034f6 <update_keypad+0xc2>
		else if ((keypaditerator >= 0) && (keypaddecimal == 1) && (translate_keypad() >= 10.0)) {
 8003468:	782a      	ldrb	r2, [r5, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d03b      	beq.n	80034e8 <update_keypad+0xb4>
}
 8003470:	bd38      	pop	{r3, r4, r5, pc}
		if (keypaditerator >= keypadlength-3 && keypaddecimal == 0) {
 8003472:	4a3d      	ldr	r2, [pc, #244]	; (8003568 <update_keypad+0x134>)
 8003474:	7813      	ldrb	r3, [r2, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d9fa      	bls.n	8003470 <update_keypad+0x3c>
 800347a:	493c      	ldr	r1, [pc, #240]	; (800356c <update_keypad+0x138>)
 800347c:	780b      	ldrb	r3, [r1, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f6      	bne.n	8003470 <update_keypad+0x3c>
				keypadarr[i-1] = keypadarr[i];
 8003482:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <update_keypad+0x13c>)
 8003484:	7858      	ldrb	r0, [r3, #1]
 8003486:	b2c0      	uxtb	r0, r0
 8003488:	7018      	strb	r0, [r3, #0]
 800348a:	7898      	ldrb	r0, [r3, #2]
 800348c:	b2c0      	uxtb	r0, r0
 800348e:	7058      	strb	r0, [r3, #1]
 8003490:	78d8      	ldrb	r0, [r3, #3]
 8003492:	b2c0      	uxtb	r0, r0
 8003494:	7098      	strb	r0, [r3, #2]
 8003496:	7918      	ldrb	r0, [r3, #4]
 8003498:	b2c0      	uxtb	r0, r0
 800349a:	70d8      	strb	r0, [r3, #3]
			keypaddecimal = 1;
 800349c:	2001      	movs	r0, #1
			keypadarr[keypadlength-1] = num;
 800349e:	711c      	strb	r4, [r3, #4]
			keypaddecimal = 1;
 80034a0:	7008      	strb	r0, [r1, #0]
			keypaditerator--;
 80034a2:	7813      	ldrb	r3, [r2, #0]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	7013      	strb	r3, [r2, #0]
}
 80034aa:	bd38      	pop	{r3, r4, r5, pc}
		if(keypaditerator < keypadlength-1){
 80034ac:	4d2e      	ldr	r5, [pc, #184]	; (8003568 <update_keypad+0x134>)
 80034ae:	782b      	ldrb	r3, [r5, #0]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d8dd      	bhi.n	8003470 <update_keypad+0x3c>
			if(keypadarr[4] == '.'){
 80034b4:	4b2e      	ldr	r3, [pc, #184]	; (8003570 <update_keypad+0x13c>)
 80034b6:	791a      	ldrb	r2, [r3, #4]
 80034b8:	2a2e      	cmp	r2, #46	; 0x2e
 80034ba:	d102      	bne.n	80034c2 <update_keypad+0x8e>
				keypaddecimal = 0;
 80034bc:	2100      	movs	r1, #0
 80034be:	4a2b      	ldr	r2, [pc, #172]	; (800356c <update_keypad+0x138>)
 80034c0:	7011      	strb	r1, [r2, #0]
			keypadarr[0] = num;
 80034c2:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 80034c4:	78da      	ldrb	r2, [r3, #3]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	711a      	strb	r2, [r3, #4]
 80034ca:	789a      	ldrb	r2, [r3, #2]
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	70da      	strb	r2, [r3, #3]
 80034d0:	785a      	ldrb	r2, [r3, #1]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	709a      	strb	r2, [r3, #2]
 80034d6:	781a      	ldrb	r2, [r3, #0]
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	705a      	strb	r2, [r3, #1]
			keypadarr[0] = num;
 80034dc:	7019      	strb	r1, [r3, #0]
			keypaditerator++;
 80034de:	782b      	ldrb	r3, [r5, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	702b      	strb	r3, [r5, #0]
}
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
		else if ((keypaditerator >= 0) && (keypaddecimal == 1) && (translate_keypad() >= 10.0)) {
 80034e8:	f7ff fdde 	bl	80030a8 <translate_keypad>
 80034ec:	4921      	ldr	r1, [pc, #132]	; (8003574 <update_keypad+0x140>)
 80034ee:	f7fd fdf3 	bl	80010d8 <__aeabi_fcmpge>
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d0bc      	beq.n	8003470 <update_keypad+0x3c>
				keypadarr[i-1] = keypadarr[i];
 80034f6:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <update_keypad+0x13c>)
 80034f8:	785a      	ldrb	r2, [r3, #1]
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	789a      	ldrb	r2, [r3, #2]
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	705a      	strb	r2, [r3, #1]
 8003504:	78da      	ldrb	r2, [r3, #3]
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	709a      	strb	r2, [r3, #2]
 800350a:	791a      	ldrb	r2, [r3, #4]
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	70da      	strb	r2, [r3, #3]
			keypadarr[keypadlength-1] = num;
 8003510:	711c      	strb	r4, [r3, #4]
			keypaditerator--;
 8003512:	782b      	ldrb	r3, [r5, #0]
 8003514:	3b01      	subs	r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	702b      	strb	r3, [r5, #0]
}
 800351a:	bd38      	pop	{r3, r4, r5, pc}
		} else if(keypaditerator <= 1 && keypaddecimal == 1 && keypadarr[1] == 'z' && keypadarr[2] != '.') {
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	2a01      	cmp	r2, #1
 8003520:	d19a      	bne.n	8003458 <update_keypad+0x24>
 8003522:	4a13      	ldr	r2, [pc, #76]	; (8003570 <update_keypad+0x13c>)
 8003524:	7851      	ldrb	r1, [r2, #1]
 8003526:	297a      	cmp	r1, #122	; 0x7a
 8003528:	d196      	bne.n	8003458 <update_keypad+0x24>
 800352a:	7891      	ldrb	r1, [r2, #2]
 800352c:	292e      	cmp	r1, #46	; 0x2e
 800352e:	d093      	beq.n	8003458 <update_keypad+0x24>
				keypadarr[i-1] = keypadarr[i];
 8003530:	7853      	ldrb	r3, [r2, #1]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	7013      	strb	r3, [r2, #0]
 8003536:	7893      	ldrb	r3, [r2, #2]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	7053      	strb	r3, [r2, #1]
 800353c:	78d3      	ldrb	r3, [r2, #3]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	7093      	strb	r3, [r2, #2]
 8003542:	7913      	ldrb	r3, [r2, #4]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	70d3      	strb	r3, [r2, #3]
			keypadarr[keypadlength-1] = num;
 8003548:	7110      	strb	r0, [r2, #4]
			keypaditerator--;
 800354a:	782b      	ldrb	r3, [r5, #0]
 800354c:	3b01      	subs	r3, #1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	702b      	strb	r3, [r5, #0]
}
 8003552:	bd38      	pop	{r3, r4, r5, pc}
		else if (keypaditerator <= 1 && keypaddecimal == 1 && keypadarr[1] == 'z') {
 8003554:	781a      	ldrb	r2, [r3, #0]
 8003556:	2a01      	cmp	r2, #1
 8003558:	d181      	bne.n	800345e <update_keypad+0x2a>
 800355a:	4a05      	ldr	r2, [pc, #20]	; (8003570 <update_keypad+0x13c>)
 800355c:	7852      	ldrb	r2, [r2, #1]
 800355e:	2a7a      	cmp	r2, #122	; 0x7a
 8003560:	f47f af7d 	bne.w	800345e <update_keypad+0x2a>
}
 8003564:	bd38      	pop	{r3, r4, r5, pc}
 8003566:	bf00      	nop
 8003568:	20000009 	.word	0x20000009
 800356c:	20000704 	.word	0x20000704
 8003570:	20000004 	.word	0x20000004
 8003574:	41200000 	.word	0x41200000

08003578 <keypad_sm>:
{
 8003578:	b538      	push	{r3, r4, r5, lr}
	switch (kpenum) {
 800357a:	4ca4      	ldr	r4, [pc, #656]	; (800380c <keypad_sm+0x294>)
 800357c:	7823      	ldrb	r3, [r4, #0]
 800357e:	2b04      	cmp	r3, #4
 8003580:	d814      	bhi.n	80035ac <keypad_sm+0x34>
 8003582:	e8df f003 	tbb	[pc, r3]
 8003586:	4714      	.short	0x4714
 8003588:	781c      	.short	0x781c
 800358a:	03          	.byte	0x03
 800358b:	00          	.byte	0x00
		if (num == 'A') {
 800358c:	2841      	cmp	r0, #65	; 0x41
 800358e:	d004      	beq.n	800359a <keypad_sm+0x22>
		} else if (num == 'B') {
 8003590:	2842      	cmp	r0, #66	; 0x42
 8003592:	d002      	beq.n	800359a <keypad_sm+0x22>
		} else if (num == 'C') {
 8003594:	2843      	cmp	r0, #67	; 0x43
 8003596:	f040 809c 	bne.w	80036d2 <keypad_sm+0x15a>
			kpenum = WAIT;
 800359a:	2100      	movs	r1, #0
		keypadarr[i] = 'z';
 800359c:	227a      	movs	r2, #122	; 0x7a
 800359e:	4b9c      	ldr	r3, [pc, #624]	; (8003810 <keypad_sm+0x298>)
			kpenum = WAIT;
 80035a0:	7021      	strb	r1, [r4, #0]
		keypadarr[i] = 'z';
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	705a      	strb	r2, [r3, #1]
 80035a6:	709a      	strb	r2, [r3, #2]
 80035a8:	70da      	strb	r2, [r3, #3]
 80035aa:	711a      	strb	r2, [r3, #4]
}
 80035ac:	bd38      	pop	{r3, r4, r5, pc}
		switch(num) {
 80035ae:	3841      	subs	r0, #65	; 0x41
 80035b0:	2803      	cmp	r0, #3
 80035b2:	f200 808b 	bhi.w	80036cc <keypad_sm+0x154>
 80035b6:	e8df f000 	tbb	[pc, r0]
 80035ba:	a187      	.short	0xa187
 80035bc:	9ea4      	.short	0x9ea4
		if (num == 'A') {
 80035be:	2841      	cmp	r0, #65	; 0x41
 80035c0:	d0eb      	beq.n	800359a <keypad_sm+0x22>
		} else if (num == 'B') {
 80035c2:	2842      	cmp	r0, #66	; 0x42
 80035c4:	f000 80d8 	beq.w	8003778 <keypad_sm+0x200>
		} else if (num == 'C') {
 80035c8:	2843      	cmp	r0, #67	; 0x43
 80035ca:	d0e6      	beq.n	800359a <keypad_sm+0x22>
		} else if (num == 'D') {
 80035cc:	2844      	cmp	r0, #68	; 0x44
 80035ce:	d0e4      	beq.n	800359a <keypad_sm+0x22>
		} else if (num == '.') {
 80035d0:	282e      	cmp	r0, #46	; 0x2e
 80035d2:	f000 80b2 	beq.w	800373a <keypad_sm+0x1c2>
		} else if (num >= '0' && num <= '9') {
 80035d6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80035da:	2b09      	cmp	r3, #9
 80035dc:	f240 8094 	bls.w	8003708 <keypad_sm+0x190>
		} else if (num == '#') {
 80035e0:	2823      	cmp	r0, #35	; 0x23
 80035e2:	f000 80df 	beq.w	80037a4 <keypad_sm+0x22c>
		} else if (num == '+') {
 80035e6:	282b      	cmp	r0, #43	; 0x2b
 80035e8:	f040 8081 	bne.w	80036ee <keypad_sm+0x176>
	float temp = translate_keypad();
 80035ec:	f7ff fd5c 	bl	80030a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 80035f0:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80035f2:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 80035f4:	f7fd fd70 	bl	80010d8 <__aeabi_fcmpge>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d0ce      	beq.n	800359a <keypad_sm+0x22>
 80035fc:	4628      	mov	r0, r5
 80035fe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003602:	f7fd fd5f 	bl	80010c4 <__aeabi_fcmple>
 8003606:	2800      	cmp	r0, #0
 8003608:	d0c7      	beq.n	800359a <keypad_sm+0x22>
				ampnum1 = translate_keypad();
 800360a:	f7ff fd4d 	bl	80030a8 <translate_keypad>
 800360e:	4a81      	ldr	r2, [pc, #516]	; (8003814 <keypad_sm+0x29c>)
 8003610:	6010      	str	r0, [r2, #0]
 8003612:	e7c2      	b.n	800359a <keypad_sm+0x22>
		if (num == 'A') {
 8003614:	2841      	cmp	r0, #65	; 0x41
 8003616:	d07b      	beq.n	8003710 <keypad_sm+0x198>
		} else if (num == 'B') {
 8003618:	2842      	cmp	r0, #66	; 0x42
 800361a:	d0be      	beq.n	800359a <keypad_sm+0x22>
		} else if (num == 'C') {
 800361c:	2843      	cmp	r0, #67	; 0x43
 800361e:	d0bc      	beq.n	800359a <keypad_sm+0x22>
		} else if (num == 'D') {
 8003620:	2844      	cmp	r0, #68	; 0x44
 8003622:	d0ba      	beq.n	800359a <keypad_sm+0x22>
		} else if (num == '.') {
 8003624:	282e      	cmp	r0, #46	; 0x2e
 8003626:	f000 8088 	beq.w	800373a <keypad_sm+0x1c2>
		} else if (num >= '0' && num <= '9') {
 800362a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800362e:	2b09      	cmp	r3, #9
 8003630:	d96a      	bls.n	8003708 <keypad_sm+0x190>
		} else if (num == '#') {
 8003632:	2823      	cmp	r0, #35	; 0x23
 8003634:	f000 80b6 	beq.w	80037a4 <keypad_sm+0x22c>
		} else if (num == '+') {
 8003638:	282b      	cmp	r0, #43	; 0x2b
 800363a:	d158      	bne.n	80036ee <keypad_sm+0x176>
	float temp = translate_keypad();
 800363c:	f7ff fd34 	bl	80030a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 8003640:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8003642:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 8003644:	f7fd fd48 	bl	80010d8 <__aeabi_fcmpge>
 8003648:	b140      	cbz	r0, 800365c <keypad_sm+0xe4>
 800364a:	4628      	mov	r0, r5
 800364c:	4972      	ldr	r1, [pc, #456]	; (8003818 <keypad_sm+0x2a0>)
 800364e:	f7fd fd39 	bl	80010c4 <__aeabi_fcmple>
 8003652:	b118      	cbz	r0, 800365c <keypad_sm+0xe4>
				voltnum1 = translate_keypad();
 8003654:	f7ff fd28 	bl	80030a8 <translate_keypad>
 8003658:	4a70      	ldr	r2, [pc, #448]	; (800381c <keypad_sm+0x2a4>)
 800365a:	6010      	str	r0, [r2, #0]
		keypadarr[i] = 'z';
 800365c:	227a      	movs	r2, #122	; 0x7a
			kpenum = WAIT;
 800365e:	2500      	movs	r5, #0
			first_shot = 1;
 8003660:	2001      	movs	r0, #1
		keypadarr[i] = 'z';
 8003662:	4b6b      	ldr	r3, [pc, #428]	; (8003810 <keypad_sm+0x298>)
			first_shot = 1;
 8003664:	496e      	ldr	r1, [pc, #440]	; (8003820 <keypad_sm+0x2a8>)
			kpenum = WAIT;
 8003666:	7025      	strb	r5, [r4, #0]
		keypadarr[i] = 'z';
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	705a      	strb	r2, [r3, #1]
 800366c:	709a      	strb	r2, [r3, #2]
 800366e:	70da      	strb	r2, [r3, #3]
 8003670:	711a      	strb	r2, [r3, #4]
			first_shot = 1;
 8003672:	7008      	strb	r0, [r1, #0]
}
 8003674:	bd38      	pop	{r3, r4, r5, pc}
		if (num == 'A') {
 8003676:	2841      	cmp	r0, #65	; 0x41
 8003678:	d08f      	beq.n	800359a <keypad_sm+0x22>
		} else if (num == 'B') {
 800367a:	2842      	cmp	r0, #66	; 0x42
 800367c:	d08d      	beq.n	800359a <keypad_sm+0x22>
		} else if (num == 'C') {
 800367e:	2843      	cmp	r0, #67	; 0x43
 8003680:	f000 80af 	beq.w	80037e2 <keypad_sm+0x26a>
		} else if (num == 'D') {
 8003684:	2844      	cmp	r0, #68	; 0x44
 8003686:	d088      	beq.n	800359a <keypad_sm+0x22>
		} else if (num == '.') {
 8003688:	282e      	cmp	r0, #46	; 0x2e
 800368a:	d056      	beq.n	800373a <keypad_sm+0x1c2>
		} else if (num >= '0' && num <= '9') {
 800368c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003690:	2b09      	cmp	r3, #9
 8003692:	d939      	bls.n	8003708 <keypad_sm+0x190>
		} else if (num == '#') {
 8003694:	2823      	cmp	r0, #35	; 0x23
 8003696:	f000 8085 	beq.w	80037a4 <keypad_sm+0x22c>
		} else if (num == '+') {
 800369a:	282b      	cmp	r0, #43	; 0x2b
 800369c:	d127      	bne.n	80036ee <keypad_sm+0x176>
	float temp = translate_keypad();
 800369e:	f7ff fd03 	bl	80030a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 80036a2:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80036a4:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 80036a6:	f7fd fd17 	bl	80010d8 <__aeabi_fcmpge>
 80036aa:	2800      	cmp	r0, #0
 80036ac:	f43f af75 	beq.w	800359a <keypad_sm+0x22>
 80036b0:	4628      	mov	r0, r5
 80036b2:	4959      	ldr	r1, [pc, #356]	; (8003818 <keypad_sm+0x2a0>)
 80036b4:	f7fd fd06 	bl	80010c4 <__aeabi_fcmple>
 80036b8:	2800      	cmp	r0, #0
 80036ba:	f43f af6e 	beq.w	800359a <keypad_sm+0x22>
				voltnum2 = translate_keypad();
 80036be:	f7ff fcf3 	bl	80030a8 <translate_keypad>
 80036c2:	4a58      	ldr	r2, [pc, #352]	; (8003824 <keypad_sm+0x2ac>)
 80036c4:	6010      	str	r0, [r2, #0]
 80036c6:	e768      	b.n	800359a <keypad_sm+0x22>
			kpenum = V1;
 80036c8:	2301      	movs	r3, #1
 80036ca:	7023      	strb	r3, [r4, #0]
		keypadarr[i] = 'z';
 80036cc:	227a      	movs	r2, #122	; 0x7a
 80036ce:	4b50      	ldr	r3, [pc, #320]	; (8003810 <keypad_sm+0x298>)
 80036d0:	e767      	b.n	80035a2 <keypad_sm+0x2a>
		} else if (num == 'D') {
 80036d2:	2844      	cmp	r0, #68	; 0x44
 80036d4:	f000 80ac 	beq.w	8003830 <keypad_sm+0x2b8>
		} else if (num == '.') {
 80036d8:	282e      	cmp	r0, #46	; 0x2e
 80036da:	d02e      	beq.n	800373a <keypad_sm+0x1c2>
		} else if (num >= '0' && num <= '9') {
 80036dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80036e0:	2b09      	cmp	r3, #9
 80036e2:	d911      	bls.n	8003708 <keypad_sm+0x190>
		} else if (num == '#') {
 80036e4:	2823      	cmp	r0, #35	; 0x23
 80036e6:	d05d      	beq.n	80037a4 <keypad_sm+0x22c>
		} else if (num == '+') {
 80036e8:	282b      	cmp	r0, #43	; 0x2b
 80036ea:	f000 80b7 	beq.w	800385c <keypad_sm+0x2e4>
		} else if (num == '-') {
 80036ee:	282d      	cmp	r0, #45	; 0x2d
 80036f0:	f43f af53 	beq.w	800359a <keypad_sm+0x22>
}
 80036f4:	bd38      	pop	{r3, r4, r5, pc}
			kpenum = A2;
 80036f6:	2304      	movs	r3, #4
 80036f8:	7023      	strb	r3, [r4, #0]
			break;
 80036fa:	e7e7      	b.n	80036cc <keypad_sm+0x154>
			kpenum = A1;
 80036fc:	2302      	movs	r3, #2
 80036fe:	7023      	strb	r3, [r4, #0]
			break;
 8003700:	e7e4      	b.n	80036cc <keypad_sm+0x154>
			kpenum = V2;
 8003702:	2303      	movs	r3, #3
 8003704:	7023      	strb	r3, [r4, #0]
			break;
 8003706:	e7e1      	b.n	80036cc <keypad_sm+0x154>
}
 8003708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			update_keypad(num);
 800370c:	f7ff be92 	b.w	8003434 <update_keypad>
	float temp = translate_keypad();
 8003710:	f7ff fcca 	bl	80030a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 8003714:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8003716:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 8003718:	f7fd fcde 	bl	80010d8 <__aeabi_fcmpge>
 800371c:	2800      	cmp	r0, #0
 800371e:	f43f af3c 	beq.w	800359a <keypad_sm+0x22>
 8003722:	4628      	mov	r0, r5
 8003724:	493c      	ldr	r1, [pc, #240]	; (8003818 <keypad_sm+0x2a0>)
 8003726:	f7fd fccd 	bl	80010c4 <__aeabi_fcmple>
 800372a:	2800      	cmp	r0, #0
 800372c:	f43f af35 	beq.w	800359a <keypad_sm+0x22>
				voltnum1 = translate_keypad();
 8003730:	f7ff fcba 	bl	80030a8 <translate_keypad>
 8003734:	4b39      	ldr	r3, [pc, #228]	; (800381c <keypad_sm+0x2a4>)
 8003736:	6018      	str	r0, [r3, #0]
 8003738:	e72f      	b.n	800359a <keypad_sm+0x22>
		if (keypaditerator >= keypadlength-3 && keypaddecimal == 0) {
 800373a:	4a3b      	ldr	r2, [pc, #236]	; (8003828 <keypad_sm+0x2b0>)
 800373c:	7813      	ldrb	r3, [r2, #0]
 800373e:	2b01      	cmp	r3, #1
 8003740:	f67f af34 	bls.w	80035ac <keypad_sm+0x34>
 8003744:	4939      	ldr	r1, [pc, #228]	; (800382c <keypad_sm+0x2b4>)
 8003746:	780b      	ldrb	r3, [r1, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f47f af2f 	bne.w	80035ac <keypad_sm+0x34>
				keypadarr[i-1] = keypadarr[i];
 800374e:	4b30      	ldr	r3, [pc, #192]	; (8003810 <keypad_sm+0x298>)
 8003750:	785c      	ldrb	r4, [r3, #1]
 8003752:	b2e4      	uxtb	r4, r4
 8003754:	701c      	strb	r4, [r3, #0]
 8003756:	789c      	ldrb	r4, [r3, #2]
 8003758:	b2e4      	uxtb	r4, r4
 800375a:	705c      	strb	r4, [r3, #1]
 800375c:	78dc      	ldrb	r4, [r3, #3]
 800375e:	b2e4      	uxtb	r4, r4
 8003760:	709c      	strb	r4, [r3, #2]
 8003762:	791c      	ldrb	r4, [r3, #4]
 8003764:	b2e4      	uxtb	r4, r4
 8003766:	70dc      	strb	r4, [r3, #3]
			keypaddecimal = 1;
 8003768:	2401      	movs	r4, #1
			keypadarr[keypadlength-1] = num;
 800376a:	7118      	strb	r0, [r3, #4]
			keypaddecimal = 1;
 800376c:	700c      	strb	r4, [r1, #0]
			keypaditerator--;
 800376e:	7813      	ldrb	r3, [r2, #0]
 8003770:	3b01      	subs	r3, #1
 8003772:	b2db      	uxtb	r3, r3
 8003774:	7013      	strb	r3, [r2, #0]
}
 8003776:	bd38      	pop	{r3, r4, r5, pc}
	float temp = translate_keypad();
 8003778:	f7ff fc96 	bl	80030a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 800377c:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800377e:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 8003780:	f7fd fcaa 	bl	80010d8 <__aeabi_fcmpge>
 8003784:	2800      	cmp	r0, #0
 8003786:	f43f af08 	beq.w	800359a <keypad_sm+0x22>
 800378a:	4628      	mov	r0, r5
 800378c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003790:	f7fd fc98 	bl	80010c4 <__aeabi_fcmple>
 8003794:	2800      	cmp	r0, #0
 8003796:	f43f af00 	beq.w	800359a <keypad_sm+0x22>
				ampnum1 = translate_keypad();
 800379a:	f7ff fc85 	bl	80030a8 <translate_keypad>
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <keypad_sm+0x29c>)
 80037a0:	6018      	str	r0, [r3, #0]
 80037a2:	e6fa      	b.n	800359a <keypad_sm+0x22>
		if(keypaditerator < keypadlength-1){
 80037a4:	4a20      	ldr	r2, [pc, #128]	; (8003828 <keypad_sm+0x2b0>)
 80037a6:	7813      	ldrb	r3, [r2, #0]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	f63f aeff 	bhi.w	80035ac <keypad_sm+0x34>
			if(keypadarr[4] == '.'){
 80037ae:	4b18      	ldr	r3, [pc, #96]	; (8003810 <keypad_sm+0x298>)
 80037b0:	7919      	ldrb	r1, [r3, #4]
 80037b2:	292e      	cmp	r1, #46	; 0x2e
 80037b4:	d102      	bne.n	80037bc <keypad_sm+0x244>
				keypaddecimal = 0;
 80037b6:	2000      	movs	r0, #0
 80037b8:	491c      	ldr	r1, [pc, #112]	; (800382c <keypad_sm+0x2b4>)
 80037ba:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 80037bc:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 80037be:	78d9      	ldrb	r1, [r3, #3]
 80037c0:	b2c9      	uxtb	r1, r1
 80037c2:	7119      	strb	r1, [r3, #4]
 80037c4:	7899      	ldrb	r1, [r3, #2]
 80037c6:	b2c9      	uxtb	r1, r1
 80037c8:	70d9      	strb	r1, [r3, #3]
 80037ca:	7859      	ldrb	r1, [r3, #1]
 80037cc:	b2c9      	uxtb	r1, r1
 80037ce:	7099      	strb	r1, [r3, #2]
 80037d0:	7819      	ldrb	r1, [r3, #0]
 80037d2:	b2c9      	uxtb	r1, r1
 80037d4:	7059      	strb	r1, [r3, #1]
			keypadarr[0] = num;
 80037d6:	7018      	strb	r0, [r3, #0]
			keypaditerator++;
 80037d8:	7813      	ldrb	r3, [r2, #0]
 80037da:	3301      	adds	r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	7013      	strb	r3, [r2, #0]
}
 80037e0:	bd38      	pop	{r3, r4, r5, pc}
	float temp = translate_keypad();
 80037e2:	f7ff fc61 	bl	80030a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 80037e6:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80037e8:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 80037ea:	f7fd fc75 	bl	80010d8 <__aeabi_fcmpge>
 80037ee:	2800      	cmp	r0, #0
 80037f0:	f43f aed3 	beq.w	800359a <keypad_sm+0x22>
 80037f4:	4628      	mov	r0, r5
 80037f6:	4908      	ldr	r1, [pc, #32]	; (8003818 <keypad_sm+0x2a0>)
 80037f8:	f7fd fc64 	bl	80010c4 <__aeabi_fcmple>
 80037fc:	2800      	cmp	r0, #0
 80037fe:	f43f aecc 	beq.w	800359a <keypad_sm+0x22>
				voltnum2 = translate_keypad();
 8003802:	f7ff fc51 	bl	80030a8 <translate_keypad>
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <keypad_sm+0x2ac>)
 8003808:	6018      	str	r0, [r3, #0]
 800380a:	e6c6      	b.n	800359a <keypad_sm+0x22>
 800380c:	20000705 	.word	0x20000705
 8003810:	20000004 	.word	0x20000004
 8003814:	2000039c 	.word	0x2000039c
 8003818:	41400000 	.word	0x41400000
 800381c:	20000820 	.word	0x20000820
 8003820:	200003ae 	.word	0x200003ae
 8003824:	20000824 	.word	0x20000824
 8003828:	20000009 	.word	0x20000009
 800382c:	20000704 	.word	0x20000704
	float temp = translate_keypad();
 8003830:	f7ff fc3a 	bl	80030a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 8003834:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8003836:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 8003838:	f7fd fc4e 	bl	80010d8 <__aeabi_fcmpge>
 800383c:	2800      	cmp	r0, #0
 800383e:	f43f aeac 	beq.w	800359a <keypad_sm+0x22>
 8003842:	4628      	mov	r0, r5
 8003844:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003848:	f7fd fc3c 	bl	80010c4 <__aeabi_fcmple>
 800384c:	2800      	cmp	r0, #0
 800384e:	f43f aea4 	beq.w	800359a <keypad_sm+0x22>
				ampnum2 = translate_keypad();
 8003852:	f7ff fc29 	bl	80030a8 <translate_keypad>
 8003856:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <keypad_sm+0x310>)
 8003858:	6018      	str	r0, [r3, #0]
 800385a:	e69e      	b.n	800359a <keypad_sm+0x22>
	float temp = translate_keypad();
 800385c:	f7ff fc24 	bl	80030a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 8003860:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8003862:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.5) : (temp >= 0 && temp <= 12.00);
 8003864:	f7fd fc38 	bl	80010d8 <__aeabi_fcmpge>
 8003868:	2800      	cmp	r0, #0
 800386a:	f43f ae96 	beq.w	800359a <keypad_sm+0x22>
 800386e:	4628      	mov	r0, r5
 8003870:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003874:	f7fd fc26 	bl	80010c4 <__aeabi_fcmple>
 8003878:	2800      	cmp	r0, #0
 800387a:	f43f ae8e 	beq.w	800359a <keypad_sm+0x22>
				ampnum2 = translate_keypad();
 800387e:	f7ff fc13 	bl	80030a8 <translate_keypad>
 8003882:	4a01      	ldr	r2, [pc, #4]	; (8003888 <keypad_sm+0x310>)
 8003884:	6010      	str	r0, [r2, #0]
 8003886:	e688      	b.n	800359a <keypad_sm+0x22>
 8003888:	200003a0 	.word	0x200003a0

0800388c <row_input>:
{
 800388c:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388e:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8003890:	4e30      	ldr	r6, [pc, #192]	; (8003954 <row_input+0xc8>)
{
 8003892:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8003894:	4630      	mov	r0, r6
 8003896:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389a:	e9cd 4400 	strd	r4, r4, [sp]
 800389e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80038a2:	9404      	str	r4, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80038a4:	f001 fe76 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 80038a8:	4630      	mov	r0, r6
 80038aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038ae:	f001 fe71 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80038b2:	4630      	mov	r0, r6
 80038b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80038b8:	4d27      	ldr	r5, [pc, #156]	; (8003958 <row_input+0xcc>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80038ba:	f001 fe6b 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 80038be:	4630      	mov	r0, r6
 80038c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038c4:	f001 fe66 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 80038c8:	4630      	mov	r0, r6
 80038ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038ce:	f001 fe61 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80038d2:	4628      	mov	r0, r5
 80038d4:	2140      	movs	r1, #64	; 0x40
 80038d6:	f001 fe5d 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 80038da:	4628      	mov	r0, r5
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	f001 fe59 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 80038e2:	4628      	mov	r0, r5
 80038e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038e8:	f001 fe54 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 80038ec:	4628      	mov	r0, r5
 80038ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038f2:	f001 fe4f 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 80038f6:	4622      	mov	r2, r4
 80038f8:	4628      	mov	r0, r5
 80038fa:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80038fe:	f001 fee1 	bl	80056c4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8003902:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8003906:	2301      	movs	r3, #1
 8003908:	e9cd 2300 	strd	r2, r3, [sp]
 800390c:	2200      	movs	r2, #0
 800390e:	2300      	movs	r3, #0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8003910:	4669      	mov	r1, sp
 8003912:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8003914:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8003918:	f001 fd52 	bl	80053c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 800391c:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 8003920:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003924:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003928:	2301      	movs	r3, #1
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 800392a:	4669      	mov	r1, sp
 800392c:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800392e:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8003930:	f001 fd46 	bl	80053c0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8003934:	4622      	mov	r2, r4
 8003936:	4628      	mov	r0, r5
 8003938:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800393c:	f001 fec2 	bl	80056c4 <HAL_GPIO_WritePin>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003940:	4622      	mov	r2, r4
 8003942:	4621      	mov	r1, r4
 8003944:	2028      	movs	r0, #40	; 0x28
 8003946:	f001 fa89 	bl	8004e5c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800394a:	2028      	movs	r0, #40	; 0x28
 800394c:	f001 fac4 	bl	8004ed8 <HAL_NVIC_EnableIRQ>
}
 8003950:	b006      	add	sp, #24
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	40020400 	.word	0x40020400
 8003958:	40020800 	.word	0x40020800

0800395c <column_input>:
{
 800395c:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395e:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8003960:	4d2d      	ldr	r5, [pc, #180]	; (8003a18 <column_input+0xbc>)
{
 8003962:	b086      	sub	sp, #24
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8003964:	2028      	movs	r0, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003966:	e9cd 4400 	strd	r4, r4, [sp]
 800396a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800396e:	9404      	str	r4, [sp, #16]
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8003970:	f001 fac0 	bl	8004ef4 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8003974:	4628      	mov	r0, r5
 8003976:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800397a:	f001 fe0b 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 800397e:	4628      	mov	r0, r5
 8003980:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003984:	f001 fe06 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8003988:	4628      	mov	r0, r5
 800398a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 800398e:	4e23      	ldr	r6, [pc, #140]	; (8003a1c <column_input+0xc0>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8003990:	f001 fe00 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 8003994:	4628      	mov	r0, r5
 8003996:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800399a:	f001 fdfb 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 800399e:	4628      	mov	r0, r5
 80039a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039a4:	f001 fdf6 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80039a8:	4630      	mov	r0, r6
 80039aa:	2140      	movs	r1, #64	; 0x40
 80039ac:	f001 fdf2 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 80039b0:	4630      	mov	r0, r6
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	f001 fdee 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 80039b8:	4630      	mov	r0, r6
 80039ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039be:	f001 fde9 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 80039c2:	4630      	mov	r0, r6
 80039c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039c8:	f001 fde4 	bl	8005594 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 80039cc:	4622      	mov	r2, r4
 80039ce:	4628      	mov	r0, r5
 80039d0:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 80039d4:	f001 fe76 	bl	80056c4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 80039d8:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 80039dc:	2301      	movs	r3, #1
 80039de:	e9cd 2300 	strd	r2, r3, [sp]
 80039e2:	2200      	movs	r2, #0
 80039e4:	2300      	movs	r3, #0
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80039e6:	4628      	mov	r0, r5
 80039e8:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 80039ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80039ee:	f001 fce7 	bl	80053c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039f2:	2001      	movs	r0, #1
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f44f 7270 	mov.w	r2, #960	; 0x3c0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 80039fa:	4669      	mov	r1, sp
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039fc:	9002      	str	r0, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 80039fe:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8003a00:	e9cd 2300 	strd	r2, r3, [sp]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8003a04:	f001 fcdc 	bl	80053c0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 8003a08:	4622      	mov	r2, r4
 8003a0a:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8003a0e:	4630      	mov	r0, r6
 8003a10:	f001 fe58 	bl	80056c4 <HAL_GPIO_WritePin>
}
 8003a14:	b006      	add	sp, #24
 8003a16:	bd70      	pop	{r4, r5, r6, pc}
 8003a18:	40020400 	.word	0x40020400
 8003a1c:	40020800 	.word	0x40020800

08003a20 <keypad_decode>:
{
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (row_pin) {
 8003a22:	b170      	cbz	r0, 8003a42 <keypad_decode+0x22>
 8003a24:	4607      	mov	r7, r0
 8003a26:	2400      	movs	r4, #0
 8003a28:	4e24      	ldr	r6, [pc, #144]	; (8003abc <keypad_decode+0x9c>)
 8003a2a:	4d25      	ldr	r5, [pc, #148]	; (8003ac0 <keypad_decode+0xa0>)
			if (HAL_GPIO_ReadPin(col_ports[i], col_pins[i]) == PRESSED) {
 8003a2c:	f835 1b02 	ldrh.w	r1, [r5], #2
 8003a30:	f856 0b04 	ldr.w	r0, [r6], #4
 8003a34:	f001 fe40 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003a38:	b1d8      	cbz	r0, 8003a72 <keypad_decode+0x52>
		for (uint8_t i = 0; i < 4; i++) {
 8003a3a:	3401      	adds	r4, #1
 8003a3c:	2c04      	cmp	r4, #4
 8003a3e:	d1f5      	bne.n	8003a2c <keypad_decode+0xc>
}
 8003a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (HAL_GPIO_ReadPin(Col_1_GPIO_Port, Col_1_Pin) == PRESSED) {
 8003a42:	2140      	movs	r1, #64	; 0x40
 8003a44:	481f      	ldr	r0, [pc, #124]	; (8003ac4 <keypad_decode+0xa4>)
 8003a46:	f001 fe37 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003a4a:	b148      	cbz	r0, 8003a60 <keypad_decode+0x40>
		} else if (HAL_GPIO_ReadPin(Col_2_GPIO_Port, Col_2_Pin) == PRESSED) {
 8003a4c:	2180      	movs	r1, #128	; 0x80
 8003a4e:	481d      	ldr	r0, [pc, #116]	; (8003ac4 <keypad_decode+0xa4>)
 8003a50:	f001 fe32 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003a54:	b9b0      	cbnz	r0, 8003a84 <keypad_decode+0x64>
}
 8003a56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			keypad_sm('+'); // Confirm
 8003a5a:	202b      	movs	r0, #43	; 0x2b
 8003a5c:	f7ff bd8c 	b.w	8003578 <keypad_sm>
			HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 8003a60:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003a64:	2110      	movs	r1, #16
}
 8003a66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 8003a6a:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 8003a6e:	f001 be2d 	b.w	80056cc <HAL_GPIO_TogglePin>
				keypad_sm(keypad_labels[row_pin - 1][i]);
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <keypad_decode+0xa8>)
 8003a74:	3f01      	subs	r7, #1
 8003a76:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003a7a:	5d38      	ldrb	r0, [r7, r4]
}
 8003a7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				keypad_sm(keypad_labels[row_pin - 1][i]);
 8003a80:	f7ff bd7a 	b.w	8003578 <keypad_sm>
		} else if (HAL_GPIO_ReadPin(Col_3_GPIO_Port, Col_3_Pin) == PRESSED) {
 8003a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a88:	480e      	ldr	r0, [pc, #56]	; (8003ac4 <keypad_decode+0xa4>)
 8003a8a:	f001 fe15 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003a8e:	b178      	cbz	r0, 8003ab0 <keypad_decode+0x90>
		} else if (HAL_GPIO_ReadPin(Col_4_GPIO_Port, Col_4_Pin) == PRESSED) {
 8003a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a94:	480b      	ldr	r0, [pc, #44]	; (8003ac4 <keypad_decode+0xa4>)
 8003a96:	f001 fe0f 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d1d0      	bne.n	8003a40 <keypad_decode+0x20>
}
 8003a9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 8003aa2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003aa6:	2120      	movs	r1, #32
 8003aa8:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 8003aac:	f001 be0e 	b.w	80056cc <HAL_GPIO_TogglePin>
			keypad_sm('-'); // Cancel
 8003ab0:	202d      	movs	r0, #45	; 0x2d
}
 8003ab2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			keypad_sm('-'); // Cancel
 8003ab6:	f7ff bd5f 	b.w	8003578 <keypad_sm>
 8003aba:	bf00      	nop
 8003abc:	0800c814 	.word	0x0800c814
 8003ac0:	0800c80c 	.word	0x0800c80c
 8003ac4:	40020800 	.word	0x40020800
 8003ac8:	0800c864 	.word	0x0800c864

08003acc <HAL_GPIO_EXTI_Callback>:
{
 8003acc:	b530      	push	{r4, r5, lr}
	switch(GPIO_Pin) {
 8003ace:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
 8003ad2:	4601      	mov	r1, r0
 8003ad4:	b083      	sub	sp, #12
	switch(GPIO_Pin) {
 8003ad6:	d064      	beq.n	8003ba2 <HAL_GPIO_EXTI_Callback+0xd6>
 8003ad8:	d811      	bhi.n	8003afe <HAL_GPIO_EXTI_Callback+0x32>
 8003ada:	2804      	cmp	r0, #4
 8003adc:	d071      	beq.n	8003bc2 <HAL_GPIO_EXTI_Callback+0xf6>
 8003ade:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003ae2:	d122      	bne.n	8003b2a <HAL_GPIO_EXTI_Callback+0x5e>
	if (HAL_GPIO_ReadPin(row_ports[row_num], row_pins[row_num]) == PRESSED) {
 8003ae4:	484c      	ldr	r0, [pc, #304]	; (8003c18 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003ae6:	f001 fde7 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d14d      	bne.n	8003b8c <HAL_GPIO_EXTI_Callback+0xc0>
		if (kpedge ==  RISING) {
 8003af0:	4a4a      	ldr	r2, [pc, #296]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x150>)
 8003af2:	7811      	ldrb	r1, [r2, #0]
 8003af4:	2901      	cmp	r1, #1
 8003af6:	f000 808a 	beq.w	8003c0e <HAL_GPIO_EXTI_Callback+0x142>
}
 8003afa:	b003      	add	sp, #12
 8003afc:	bd30      	pop	{r4, r5, pc}
	switch(GPIO_Pin) {
 8003afe:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003b02:	d073      	beq.n	8003bec <HAL_GPIO_EXTI_Callback+0x120>
 8003b04:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8003b08:	d12e      	bne.n	8003b68 <HAL_GPIO_EXTI_Callback+0x9c>
	if (HAL_GPIO_ReadPin(row_ports[row_num], row_pins[row_num]) == PRESSED) {
 8003b0a:	4843      	ldr	r0, [pc, #268]	; (8003c18 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003b0c:	f001 fdd4 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2800      	cmp	r0, #0
 8003b14:	d13a      	bne.n	8003b8c <HAL_GPIO_EXTI_Callback+0xc0>
		if (kpedge ==  RISING) {
 8003b16:	4a41      	ldr	r2, [pc, #260]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x150>)
 8003b18:	7811      	ldrb	r1, [r2, #0]
 8003b1a:	2901      	cmp	r1, #1
 8003b1c:	d1ed      	bne.n	8003afa <HAL_GPIO_EXTI_Callback+0x2e>
			rowpin = row_num;
 8003b1e:	2404      	movs	r4, #4
 8003b20:	493f      	ldr	r1, [pc, #252]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x154>)
			kpedge = FALLING;
 8003b22:	7013      	strb	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8003b24:	483f      	ldr	r0, [pc, #252]	; (8003c24 <HAL_GPIO_EXTI_Callback+0x158>)
			rowpin = row_num;
 8003b26:	700c      	strb	r4, [r1, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8003b28:	e05b      	b.n	8003be2 <HAL_GPIO_EXTI_Callback+0x116>
	switch(GPIO_Pin) {
 8003b2a:	2801      	cmp	r0, #1
 8003b2c:	d1e5      	bne.n	8003afa <HAL_GPIO_EXTI_Callback+0x2e>
		if ((kpenum != WAIT) && (Rot_State != NOTURN)) {
 8003b2e:	4b3e      	ldr	r3, [pc, #248]	; (8003c28 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0e1      	beq.n	8003afa <HAL_GPIO_EXTI_Callback+0x2e>
 8003b36:	4c3d      	ldr	r4, [pc, #244]	; (8003c2c <HAL_GPIO_EXTI_Callback+0x160>)
 8003b38:	7823      	ldrb	r3, [r4, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0dd      	beq.n	8003afa <HAL_GPIO_EXTI_Callback+0x2e>
			HAL_NVIC_DisableIRQ(Rot_CLK_EXTI_IRQn);
 8003b3e:	9001      	str	r0, [sp, #4]
 8003b40:	2006      	movs	r0, #6
 8003b42:	f001 f9d7 	bl	8004ef4 <HAL_NVIC_DisableIRQ>
			Rot_State = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 8003b46:	9901      	ldr	r1, [sp, #4]
 8003b48:	4833      	ldr	r0, [pc, #204]	; (8003c18 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003b4a:	f001 fdb5 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003b4e:	2102      	movs	r1, #2
 8003b50:	4605      	mov	r5, r0
 8003b52:	4831      	ldr	r0, [pc, #196]	; (8003c18 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003b54:	f001 fdb0 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	429d      	cmp	r5, r3
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2501      	moveq	r5, #1
 8003b60:	2502      	movne	r5, #2
			HAL_TIM_Base_Start_IT(&htim4);
 8003b62:	4833      	ldr	r0, [pc, #204]	; (8003c30 <HAL_GPIO_EXTI_Callback+0x164>)
			Rot_State = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 8003b64:	7025      	strb	r5, [r4, #0]
			HAL_TIM_Base_Start_IT(&htim4);
 8003b66:	e03c      	b.n	8003be2 <HAL_GPIO_EXTI_Callback+0x116>
	switch(GPIO_Pin) {
 8003b68:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8003b6c:	d1c5      	bne.n	8003afa <HAL_GPIO_EXTI_Callback+0x2e>
	if (HAL_GPIO_ReadPin(row_ports[row_num], row_pins[row_num]) == PRESSED) {
 8003b6e:	482a      	ldr	r0, [pc, #168]	; (8003c18 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003b70:	f001 fda2 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003b74:	4603      	mov	r3, r0
 8003b76:	b948      	cbnz	r0, 8003b8c <HAL_GPIO_EXTI_Callback+0xc0>
		if (kpedge ==  RISING) {
 8003b78:	4a28      	ldr	r2, [pc, #160]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x150>)
 8003b7a:	7811      	ldrb	r1, [r2, #0]
 8003b7c:	2901      	cmp	r1, #1
 8003b7e:	d1bc      	bne.n	8003afa <HAL_GPIO_EXTI_Callback+0x2e>
			rowpin = row_num;
 8003b80:	2402      	movs	r4, #2
 8003b82:	4927      	ldr	r1, [pc, #156]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x154>)
			kpedge = FALLING;
 8003b84:	7013      	strb	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8003b86:	4827      	ldr	r0, [pc, #156]	; (8003c24 <HAL_GPIO_EXTI_Callback+0x158>)
			rowpin = row_num;
 8003b88:	700c      	strb	r4, [r1, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8003b8a:	e02a      	b.n	8003be2 <HAL_GPIO_EXTI_Callback+0x116>
		if (kpedge ==  FALLING) {
 8003b8c:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x150>)
 8003b8e:	781a      	ldrb	r2, [r3, #0]
 8003b90:	2a00      	cmp	r2, #0
 8003b92:	d1b2      	bne.n	8003afa <HAL_GPIO_EXTI_Callback+0x2e>
			kpedge = RISING;
 8003b94:	2001      	movs	r0, #1
			rowpin = -1;
 8003b96:	21ff      	movs	r1, #255	; 0xff
 8003b98:	4a21      	ldr	r2, [pc, #132]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x154>)
			kpedge = RISING;
 8003b9a:	7018      	strb	r0, [r3, #0]
			rowpin = -1;
 8003b9c:	7011      	strb	r1, [r2, #0]
}
 8003b9e:	b003      	add	sp, #12
 8003ba0:	bd30      	pop	{r4, r5, pc}
	if (HAL_GPIO_ReadPin(row_ports[row_num], row_pins[row_num]) == PRESSED) {
 8003ba2:	481d      	ldr	r0, [pc, #116]	; (8003c18 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003ba4:	f001 fd88 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d1ee      	bne.n	8003b8c <HAL_GPIO_EXTI_Callback+0xc0>
		if (kpedge ==  RISING) {
 8003bae:	491b      	ldr	r1, [pc, #108]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x150>)
 8003bb0:	780a      	ldrb	r2, [r1, #0]
 8003bb2:	2a01      	cmp	r2, #1
 8003bb4:	b2d4      	uxtb	r4, r2
 8003bb6:	d1a0      	bne.n	8003afa <HAL_GPIO_EXTI_Callback+0x2e>
			rowpin = row_num;
 8003bb8:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x154>)
			kpedge = FALLING;
 8003bba:	700b      	strb	r3, [r1, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8003bbc:	4819      	ldr	r0, [pc, #100]	; (8003c24 <HAL_GPIO_EXTI_Callback+0x158>)
			rowpin = row_num;
 8003bbe:	7014      	strb	r4, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8003bc0:	e00f      	b.n	8003be2 <HAL_GPIO_EXTI_Callback+0x116>
		if (kpenum != WAIT) {
 8003bc2:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d097      	beq.n	8003afa <HAL_GPIO_EXTI_Callback+0x2e>
 8003bca:	9001      	str	r0, [sp, #4]
			HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 8003bcc:	2008      	movs	r0, #8
 8003bce:	f001 f991 	bl	8004ef4 <HAL_NVIC_DisableIRQ>
			Rot_SW_State = HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin);
 8003bd2:	9901      	ldr	r1, [sp, #4]
 8003bd4:	4810      	ldr	r0, [pc, #64]	; (8003c18 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003bd6:	f001 fd6f 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <HAL_GPIO_EXTI_Callback+0x168>)
			HAL_TIM_Base_Start_IT(&htim9);
 8003bde:	4816      	ldr	r0, [pc, #88]	; (8003c38 <HAL_GPIO_EXTI_Callback+0x16c>)
			Rot_SW_State = HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin);
 8003be0:	7013      	strb	r3, [r2, #0]
}
 8003be2:	b003      	add	sp, #12
 8003be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			HAL_TIM_Base_Start_IT(&htim9);
 8003be8:	f003 bb30 	b.w	800724c <HAL_TIM_Base_Start_IT>
	if (HAL_GPIO_ReadPin(row_ports[row_num], row_pins[row_num]) == PRESSED) {
 8003bec:	480a      	ldr	r0, [pc, #40]	; (8003c18 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003bee:	f001 fd63 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d1c9      	bne.n	8003b8c <HAL_GPIO_EXTI_Callback+0xc0>
		if (kpedge ==  RISING) {
 8003bf8:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x150>)
 8003bfa:	7811      	ldrb	r1, [r2, #0]
 8003bfc:	2901      	cmp	r1, #1
 8003bfe:	f47f af7c 	bne.w	8003afa <HAL_GPIO_EXTI_Callback+0x2e>
			rowpin = row_num;
 8003c02:	2403      	movs	r4, #3
 8003c04:	4906      	ldr	r1, [pc, #24]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x154>)
			kpedge = FALLING;
 8003c06:	7013      	strb	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8003c08:	4806      	ldr	r0, [pc, #24]	; (8003c24 <HAL_GPIO_EXTI_Callback+0x158>)
			rowpin = row_num;
 8003c0a:	700c      	strb	r4, [r1, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8003c0c:	e7e9      	b.n	8003be2 <HAL_GPIO_EXTI_Callback+0x116>
			rowpin = row_num;
 8003c0e:	4904      	ldr	r1, [pc, #16]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x154>)
			kpedge = FALLING;
 8003c10:	7013      	strb	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8003c12:	4804      	ldr	r0, [pc, #16]	; (8003c24 <HAL_GPIO_EXTI_Callback+0x158>)
			rowpin = row_num;
 8003c14:	700b      	strb	r3, [r1, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8003c16:	e7e4      	b.n	8003be2 <HAL_GPIO_EXTI_Callback+0x116>
 8003c18:	40020400 	.word	0x40020400
 8003c1c:	2000000a 	.word	0x2000000a
 8003c20:	2000000b 	.word	0x2000000b
 8003c24:	200005c0 	.word	0x200005c0
 8003c28:	20000705 	.word	0x20000705
 8003c2c:	20000379 	.word	0x20000379
 8003c30:	20000640 	.word	0x20000640
 8003c34:	20000000 	.word	0x20000000
 8003c38:	20000680 	.word	0x20000680

08003c3c <HAL_TIM_PeriodElapsedCallback>:
{
 8003c3c:	b530      	push	{r4, r5, lr}
	if (htim == &htim2) {
 8003c3e:	4b89      	ldr	r3, [pc, #548]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x228>)
{
 8003c40:	b085      	sub	sp, #20
	if (htim == &htim2) {
 8003c42:	4298      	cmp	r0, r3
 8003c44:	d02e      	beq.n	8003ca4 <HAL_TIM_PeriodElapsedCallback+0x68>
	} else if (htim == &htim3) {
 8003c46:	4b88      	ldr	r3, [pc, #544]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8003c48:	4604      	mov	r4, r0
 8003c4a:	4298      	cmp	r0, r3
 8003c4c:	d037      	beq.n	8003cbe <HAL_TIM_PeriodElapsedCallback+0x82>
	} else if (htim == &htim4) {
 8003c4e:	4b87      	ldr	r3, [pc, #540]	; (8003e6c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003c50:	4298      	cmp	r0, r3
 8003c52:	d03e      	beq.n	8003cd2 <HAL_TIM_PeriodElapsedCallback+0x96>
	} else if (htim == &htim9) {
 8003c54:	4b86      	ldr	r3, [pc, #536]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8003c56:	4298      	cmp	r0, r3
 8003c58:	d007      	beq.n	8003c6a <HAL_TIM_PeriodElapsedCallback+0x2e>
	} else if (htim == &htim10) {
 8003c5a:	4b86      	ldr	r3, [pc, #536]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003c5c:	4298      	cmp	r0, r3
 8003c5e:	d075      	beq.n	8003d4c <HAL_TIM_PeriodElapsedCallback+0x110>
	} else if (htim == &htim11) {
 8003c60:	4b85      	ldr	r3, [pc, #532]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003c62:	4298      	cmp	r0, r3
 8003c64:	d05e      	beq.n	8003d24 <HAL_TIM_PeriodElapsedCallback+0xe8>
}
 8003c66:	b005      	add	sp, #20
 8003c68:	bd30      	pop	{r4, r5, pc}
		HAL_TIM_Base_Stop_IT(&htim9);
 8003c6a:	f003 fb1b 	bl	80072a4 <HAL_TIM_Base_Stop_IT>
		if (HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin) == Rot_SW_State) {
 8003c6e:	2104      	movs	r1, #4
 8003c70:	4882      	ldr	r0, [pc, #520]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003c72:	f001 fd21 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003c76:	4d82      	ldr	r5, [pc, #520]	; (8003e80 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003c78:	782b      	ldrb	r3, [r5, #0]
 8003c7a:	4298      	cmp	r0, r3
 8003c7c:	f040 809e 	bne.w	8003dbc <HAL_TIM_PeriodElapsedCallback+0x180>
			switch (Rot_SW_State) {
 8003c80:	782b      	ldrb	r3, [r5, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d073      	beq.n	8003d6e <HAL_TIM_PeriodElapsedCallback+0x132>
 8003c86:	4b7f      	ldr	r3, [pc, #508]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x248>)
		switch (Rot_Mode) {
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80a6 	beq.w	8003de0 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8003c94:	2a01      	cmp	r2, #1
 8003c96:	d066      	beq.n	8003d66 <HAL_TIM_PeriodElapsedCallback+0x12a>
		HAL_NVIC_EnableIRQ(Rot_SW_EXTI_IRQn);
 8003c98:	2008      	movs	r0, #8
}
 8003c9a:	b005      	add	sp, #20
 8003c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		HAL_NVIC_EnableIRQ(Rot_SW_EXTI_IRQn);
 8003ca0:	f001 b91a 	b.w	8004ed8 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim2);
 8003ca4:	f003 fafe 	bl	80072a4 <HAL_TIM_Base_Stop_IT>
		column_input();
 8003ca8:	f7ff fe58 	bl	800395c <column_input>
		keypad_decode(rowpin);
 8003cac:	4b76      	ldr	r3, [pc, #472]	; (8003e88 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003cae:	7818      	ldrb	r0, [r3, #0]
 8003cb0:	f7ff feb6 	bl	8003a20 <keypad_decode>
}
 8003cb4:	b005      	add	sp, #20
 8003cb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		row_input();
 8003cba:	f7ff bde7 	b.w	800388c <row_input>
		HAL_TIM_Base_Stop_IT(&htim3);
 8003cbe:	f003 faf1 	bl	80072a4 <HAL_TIM_Base_Stop_IT>
		lcd_psu_update();
 8003cc2:	f7fe ff7f 	bl	8002bc4 <lcd_psu_update>
		HAL_TIM_Base_Start_IT(&htim3);
 8003cc6:	4620      	mov	r0, r4
}
 8003cc8:	b005      	add	sp, #20
 8003cca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		HAL_TIM_Base_Start_IT(&htim3);
 8003cce:	f003 babd 	b.w	800724c <HAL_TIM_Base_Start_IT>
		if (Rot_State != NOTURN) {
 8003cd2:	4c6e      	ldr	r4, [pc, #440]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x250>)
		HAL_TIM_Base_Stop_IT(&htim4);
 8003cd4:	f003 fae6 	bl	80072a4 <HAL_TIM_Base_Stop_IT>
		if (Rot_State != NOTURN) {
 8003cd8:	7823      	ldrb	r3, [r4, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0c3      	beq.n	8003c66 <HAL_TIM_PeriodElapsedCallback+0x2a>
			switch (Rot_Mode) {
 8003cde:	4b69      	ldr	r3, [pc, #420]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d048      	beq.n	8003d7c <HAL_TIM_PeriodElapsedCallback+0x140>
 8003cea:	2a01      	cmp	r2, #1
 8003cec:	d116      	bne.n	8003d1c <HAL_TIM_PeriodElapsedCallback+0xe0>
				switch (Rot_State) {
 8003cee:	7823      	ldrb	r3, [r4, #0]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	d078      	beq.n	8003de8 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8003cf6:	2a02      	cmp	r2, #2
 8003cf8:	d110      	bne.n	8003d1c <HAL_TIM_PeriodElapsedCallback+0xe0>
					if (keypaditerator > 0) {
 8003cfa:	4b65      	ldr	r3, [pc, #404]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	b16a      	cbz	r2, 8003d1c <HAL_TIM_PeriodElapsedCallback+0xe0>
						keypaditerator--;
 8003d00:	781a      	ldrb	r2, [r3, #0]
						if (keypadarr[keypaditerator] == '.') {
 8003d02:	4964      	ldr	r1, [pc, #400]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x258>)
						keypaditerator--;
 8003d04:	3a01      	subs	r2, #1
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]
						if (keypadarr[keypaditerator] == '.') {
 8003d0a:	781a      	ldrb	r2, [r3, #0]
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	5c8a      	ldrb	r2, [r1, r2]
 8003d10:	2a2e      	cmp	r2, #46	; 0x2e
 8003d12:	d103      	bne.n	8003d1c <HAL_TIM_PeriodElapsedCallback+0xe0>
							keypaditerator--;
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	3a01      	subs	r2, #1
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	701a      	strb	r2, [r3, #0]
			Rot_State = NOTURN;
 8003d1c:	2300      	movs	r3, #0
			HAL_NVIC_EnableIRQ(Rot_CLK_EXTI_IRQn);
 8003d1e:	2006      	movs	r0, #6
			Rot_State = NOTURN;
 8003d20:	7023      	strb	r3, [r4, #0]
			HAL_NVIC_EnableIRQ(Rot_CLK_EXTI_IRQn);
 8003d22:	e7ba      	b.n	8003c9a <HAL_TIM_PeriodElapsedCallback+0x5e>
		lcd_cursor_onoff(cursor);
 8003d24:	4c5c      	ldr	r4, [pc, #368]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x25c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8003d26:	2564      	movs	r5, #100	; 0x64
	(status) ? lcd_send_cmd(0x0E) : lcd_send_cmd(0x0C);
 8003d28:	7823      	ldrb	r3, [r4, #0]
 8003d2a:	b1d3      	cbz	r3, 8003d62 <HAL_TIM_PeriodElapsedCallback+0x126>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d2c:	495b      	ldr	r1, [pc, #364]	; (8003e9c <HAL_TIM_PeriodElapsedCallback+0x260>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8003d2e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d30:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8003d32:	485b      	ldr	r0, [pc, #364]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003d34:	214e      	movs	r1, #78	; 0x4e
 8003d36:	aa03      	add	r2, sp, #12
 8003d38:	9500      	str	r5, [sp, #0]
 8003d3a:	f001 fda5 	bl	8005888 <HAL_I2C_Master_Transmit>
		cursor = !cursor;
 8003d3e:	7823      	ldrb	r3, [r4, #0]
 8003d40:	fab3 f383 	clz	r3, r3
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	7023      	strb	r3, [r4, #0]
}
 8003d48:	b005      	add	sp, #20
 8003d4a:	bd30      	pop	{r4, r5, pc}
		lcd_cursorblink_onoff(cursor_blink, cursor_blink);
 8003d4c:	4c55      	ldr	r4, [pc, #340]	; (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003d4e:	7823      	ldrb	r3, [r4, #0]
	if ((cursor_status == 0) && (blink_status == 0)) {
 8003d50:	b913      	cbnz	r3, 8003d58 <HAL_TIM_PeriodElapsedCallback+0x11c>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8003d52:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d54:	4954      	ldr	r1, [pc, #336]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003d56:	e7ea      	b.n	8003d2e <HAL_TIM_PeriodElapsedCallback+0xf2>
	} else if ((cursor_status == 1) && (blink_status == 1)) {
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d1f1      	bne.n	8003d40 <HAL_TIM_PeriodElapsedCallback+0x104>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t*) data_t, 4, 100);
 8003d5c:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d5e:	4953      	ldr	r1, [pc, #332]	; (8003eac <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003d60:	e7e5      	b.n	8003d2e <HAL_TIM_PeriodElapsedCallback+0xf2>
 8003d62:	4951      	ldr	r1, [pc, #324]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003d64:	e7e3      	b.n	8003d2e <HAL_TIM_PeriodElapsedCallback+0xf2>
			HAL_TIM_Base_Start_IT(&htim10);
 8003d66:	4843      	ldr	r0, [pc, #268]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003d68:	f003 fa70 	bl	800724c <HAL_TIM_Base_Start_IT>
			break;
 8003d6c:	e794      	b.n	8003c98 <HAL_TIM_PeriodElapsedCallback+0x5c>
				Rot_Mode = !Rot_Mode;
 8003d6e:	4b45      	ldr	r3, [pc, #276]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003d70:	781a      	ldrb	r2, [r3, #0]
 8003d72:	fab2 f282 	clz	r2, r2
 8003d76:	0952      	lsrs	r2, r2, #5
 8003d78:	701a      	strb	r2, [r3, #0]
				break;
 8003d7a:	e785      	b.n	8003c88 <HAL_TIM_PeriodElapsedCallback+0x4c>
				switch(Rot_State) {
 8003d7c:	7823      	ldrb	r3, [r4, #0]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	d044      	beq.n	8003e0e <HAL_TIM_PeriodElapsedCallback+0x1d2>
 8003d84:	2a02      	cmp	r2, #2
 8003d86:	d10c      	bne.n	8003da2 <HAL_TIM_PeriodElapsedCallback+0x166>
					if ((uint8_t)keypadarr[keypaditerator] > (uint8_t)('0')) {
 8003d88:	4941      	ldr	r1, [pc, #260]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003d8a:	4a42      	ldr	r2, [pc, #264]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003d8c:	780b      	ldrb	r3, [r1, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	5cd3      	ldrb	r3, [r2, r3]
 8003d92:	2b30      	cmp	r3, #48	; 0x30
 8003d94:	d949      	bls.n	8003e2a <HAL_TIM_PeriodElapsedCallback+0x1ee>
						(uint8_t)keypadarr[keypaditerator]--;
 8003d96:	7809      	ldrb	r1, [r1, #0]
 8003d98:	b2c9      	uxtb	r1, r1
 8003d9a:	5c53      	ldrb	r3, [r2, r1]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	5453      	strb	r3, [r2, r1]
				switch (kpenum) {
 8003da2:	4b43      	ldr	r3, [pc, #268]	; (8003eb0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d8b6      	bhi.n	8003d1c <HAL_TIM_PeriodElapsedCallback+0xe0>
 8003dae:	4a41      	ldr	r2, [pc, #260]	; (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003db0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
					*modifying_output = translate_keypad();
 8003db4:	f7ff f978 	bl	80030a8 <translate_keypad>
 8003db8:	6028      	str	r0, [r5, #0]
 8003dba:	e7af      	b.n	8003d1c <HAL_TIM_PeriodElapsedCallback+0xe0>
		if (kpenum != WAIT) {
 8003dbc:	4b3c      	ldr	r3, [pc, #240]	; (8003eb0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f43f af60 	beq.w	8003c86 <HAL_TIM_PeriodElapsedCallback+0x4a>
			HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 8003dc6:	2008      	movs	r0, #8
 8003dc8:	f001 f894 	bl	8004ef4 <HAL_NVIC_DisableIRQ>
			Rot_SW_State = HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin);
 8003dcc:	2104      	movs	r1, #4
 8003dce:	482b      	ldr	r0, [pc, #172]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003dd0:	f001 fc72 	bl	80056b8 <HAL_GPIO_ReadPin>
 8003dd4:	4603      	mov	r3, r0
			HAL_TIM_Base_Start_IT(&htim9);
 8003dd6:	4620      	mov	r0, r4
			Rot_SW_State = HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin);
 8003dd8:	702b      	strb	r3, [r5, #0]
			HAL_TIM_Base_Start_IT(&htim9);
 8003dda:	f003 fa37 	bl	800724c <HAL_TIM_Base_Start_IT>
 8003dde:	e752      	b.n	8003c86 <HAL_TIM_PeriodElapsedCallback+0x4a>
			HAL_TIM_Base_Stop_IT(&htim10);
 8003de0:	4824      	ldr	r0, [pc, #144]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003de2:	f003 fa5f 	bl	80072a4 <HAL_TIM_Base_Stop_IT>
			break;
 8003de6:	e757      	b.n	8003c98 <HAL_TIM_PeriodElapsedCallback+0x5c>
					if (keypaditerator < (keypadlength - 1)) {
 8003de8:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	2a03      	cmp	r2, #3
 8003dee:	d895      	bhi.n	8003d1c <HAL_TIM_PeriodElapsedCallback+0xe0>
						keypaditerator++;
 8003df0:	781a      	ldrb	r2, [r3, #0]
						if (keypadarr[keypaditerator] == '.') {
 8003df2:	4928      	ldr	r1, [pc, #160]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x258>)
						keypaditerator++;
 8003df4:	3201      	adds	r2, #1
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]
						if (keypadarr[keypaditerator] == '.') {
 8003dfa:	781a      	ldrb	r2, [r3, #0]
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	5c8a      	ldrb	r2, [r1, r2]
 8003e00:	2a2e      	cmp	r2, #46	; 0x2e
 8003e02:	d18b      	bne.n	8003d1c <HAL_TIM_PeriodElapsedCallback+0xe0>
							keypaditerator++;
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	3201      	adds	r2, #1
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	e786      	b.n	8003d1c <HAL_TIM_PeriodElapsedCallback+0xe0>
					if ((uint8_t)keypadarr[keypaditerator] < (uint8_t)('9')) {
 8003e0e:	4920      	ldr	r1, [pc, #128]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003e10:	4a20      	ldr	r2, [pc, #128]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003e12:	780b      	ldrb	r3, [r1, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	5cd3      	ldrb	r3, [r2, r3]
 8003e18:	2b38      	cmp	r3, #56	; 0x38
 8003e1a:	d814      	bhi.n	8003e46 <HAL_TIM_PeriodElapsedCallback+0x20a>
						(uint8_t)keypadarr[keypaditerator]++;
 8003e1c:	7809      	ldrb	r1, [r1, #0]
 8003e1e:	b2c9      	uxtb	r1, r1
 8003e20:	5c53      	ldrb	r3, [r2, r1]
 8003e22:	3301      	adds	r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	5453      	strb	r3, [r2, r1]
 8003e28:	e7bb      	b.n	8003da2 <HAL_TIM_PeriodElapsedCallback+0x166>
					} else if (keypaditerator < (keypadlength - 1)) {
 8003e2a:	780b      	ldrb	r3, [r1, #0]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d8b8      	bhi.n	8003da2 <HAL_TIM_PeriodElapsedCallback+0x166>
						(uint8_t)keypadarr[keypaditerator + 1]--;
 8003e30:	7808      	ldrb	r0, [r1, #0]
 8003e32:	3001      	adds	r0, #1
 8003e34:	5c13      	ldrb	r3, [r2, r0]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	5413      	strb	r3, [r2, r0]
						keypadarr[keypaditerator] = '9';
 8003e3c:	2039      	movs	r0, #57	; 0x39
 8003e3e:	780b      	ldrb	r3, [r1, #0]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	54d0      	strb	r0, [r2, r3]
 8003e44:	e7ad      	b.n	8003da2 <HAL_TIM_PeriodElapsedCallback+0x166>
					} else if (keypaditerator > 0) {
 8003e46:	780b      	ldrb	r3, [r1, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0aa      	beq.n	8003da2 <HAL_TIM_PeriodElapsedCallback+0x166>
						keypadarr[keypaditerator] = '0';
 8003e4c:	2030      	movs	r0, #48	; 0x30
 8003e4e:	780b      	ldrb	r3, [r1, #0]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	54d0      	strb	r0, [r2, r3]
						(uint8_t)keypadarr[keypaditerator-1]++;
 8003e54:	7809      	ldrb	r1, [r1, #0]
 8003e56:	3901      	subs	r1, #1
 8003e58:	5c53      	ldrb	r3, [r2, r1]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	5453      	strb	r3, [r2, r1]
 8003e60:	e79f      	b.n	8003da2 <HAL_TIM_PeriodElapsedCallback+0x166>
 8003e62:	bf00      	nop
 8003e64:	200005c0 	.word	0x200005c0
 8003e68:	20000600 	.word	0x20000600
 8003e6c:	20000640 	.word	0x20000640
 8003e70:	20000680 	.word	0x20000680
 8003e74:	20000540 	.word	0x20000540
 8003e78:	20000580 	.word	0x20000580
 8003e7c:	40020400 	.word	0x40020400
 8003e80:	20000000 	.word	0x20000000
 8003e84:	20000378 	.word	0x20000378
 8003e88:	2000000b 	.word	0x2000000b
 8003e8c:	20000379 	.word	0x20000379
 8003e90:	20000009 	.word	0x20000009
 8003e94:	20000004 	.word	0x20000004
 8003e98:	200003ac 	.word	0x200003ac
 8003e9c:	e8ec080c 	.word	0xe8ec080c
 8003ea0:	200004ec 	.word	0x200004ec
 8003ea4:	200003ad 	.word	0x200003ad
 8003ea8:	c8cc080c 	.word	0xc8cc080c
 8003eac:	f8fc080c 	.word	0xf8fc080c
 8003eb0:	20000705 	.word	0x20000705
 8003eb4:	0800c7fc 	.word	0x0800c7fc

08003eb8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8003eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ebc:	4e83      	ldr	r6, [pc, #524]	; (80040cc <HAL_UART_RxCpltCallback+0x214>)
	for(int i = 0; i < 64; i++){
 8003ebe:	2400      	movs	r4, #0
 8003ec0:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8003ec2:	b08b      	sub	sp, #44	; 0x2c
 8003ec4:	e003      	b.n	8003ece <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 8003ec6:	3401      	adds	r4, #1
 8003ec8:	2c40      	cmp	r4, #64	; 0x40
 8003eca:	f000 80fc 	beq.w	80040c6 <HAL_UART_RxCpltCallback+0x20e>
		if (rxbuffer[i] == '*') {
 8003ece:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003ed2:	2d2a      	cmp	r5, #42	; 0x2a
 8003ed4:	d1f7      	bne.n	8003ec6 <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 8003ed6:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 8003ed8:	2220      	movs	r2, #32
 8003eda:	2100      	movs	r1, #0
 8003edc:	a802      	add	r0, sp, #8
 8003ede:	f005 fd59 	bl	8009994 <memset>
	for (int i = 0; i < 25; i++) {
 8003ee2:	f10d 0307 	add.w	r3, sp, #7
 8003ee6:	aa08      	add	r2, sp, #32
 8003ee8:	e000      	b.n	8003eec <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 8003eea:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 8003eec:	3401      	adds	r4, #1
 8003eee:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 8003ef0:	2c41      	cmp	r4, #65	; 0x41
		rxbuffercpy[i] = rxbuffer[rxiter];
 8003ef2:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 8003ef6:	bf28      	it	cs
 8003ef8:	2400      	movcs	r4, #0
	for (int i = 0; i < 25; i++) {
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d1f5      	bne.n	8003eea <HAL_UART_RxCpltCallback+0x32>
	if (//Check start condition
 8003efe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003f02:	2b2a      	cmp	r3, #42	; 0x2a
 8003f04:	d00c      	beq.n	8003f20 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8003f06:	2240      	movs	r2, #64	; 0x40
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4870      	ldr	r0, [pc, #448]	; (80040cc <HAL_UART_RxCpltCallback+0x214>)
 8003f0c:	f005 fd42 	bl	8009994 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8003f10:	2240      	movs	r2, #64	; 0x40
 8003f12:	496e      	ldr	r1, [pc, #440]	; (80040cc <HAL_UART_RxCpltCallback+0x214>)
 8003f14:	486e      	ldr	r0, [pc, #440]	; (80040d0 <HAL_UART_RxCpltCallback+0x218>)
}
 8003f16:	b00b      	add	sp, #44	; 0x2c
 8003f18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8003f1c:	f003 bc0a 	b.w	8007734 <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 8003f20:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003f24:	2b53      	cmp	r3, #83	; 0x53
 8003f26:	d1ee      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
 8003f28:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003f2c:	2b54      	cmp	r3, #84	; 0x54
 8003f2e:	d1ea      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
 8003f30:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003f34:	2b52      	cmp	r3, #82	; 0x52
 8003f36:	d1e6      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
 8003f38:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003f3c:	2b54      	cmp	r3, #84	; 0x54
 8003f3e:	d1e2      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
 8003f40:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8003f44:	2b46      	cmp	r3, #70	; 0x46
 8003f46:	d1de      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 8003f48:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8003f4c:	2b4e      	cmp	r3, #78	; 0x4e
 8003f4e:	d1da      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
 8003f50:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8003f54:	2b53      	cmp	r3, #83	; 0x53
 8003f56:	d1d6      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
 8003f58:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8003f5c:	2b48      	cmp	r3, #72	; 0x48
 8003f5e:	d1d2      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
 8003f60:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8003f64:	2b21      	cmp	r3, #33	; 0x21
 8003f66:	d1ce      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
 8003f68:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003f6c:	2b2c      	cmp	r3, #44	; 0x2c
 8003f6e:	d1ca      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8003f70:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003f74:	2b2c      	cmp	r3, #44	; 0x2c
 8003f76:	d1c6      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
 8003f78:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003f7c:	2b2c      	cmp	r3, #44	; 0x2c
 8003f7e:	d1c2      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
 8003f80:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003f84:	2b2c      	cmp	r3, #44	; 0x2c
 8003f86:	d1be      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8003f88:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8003f8c:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8003f8e:	b2c3      	uxtb	r3, r0
 8003f90:	2b09      	cmp	r3, #9
 8003f92:	d8b8      	bhi.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8003f94:	f89d b00f 	ldrb.w	fp, [sp, #15]
 8003f98:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 8003f9c:	fa5f f38b 	uxtb.w	r3, fp
 8003fa0:	2b09      	cmp	r3, #9
 8003fa2:	d8b0      	bhi.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
 8003fa4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8003faa:	d1ac      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8003fac:	f89d a011 	ldrb.w	sl, [sp, #17]
 8003fb0:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8003fb4:	fa5f f38a 	uxtb.w	r3, sl
 8003fb8:	2b09      	cmp	r3, #9
 8003fba:	d8a4      	bhi.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8003fbc:	f89d 6012 	ldrb.w	r6, [sp, #18]
 8003fc0:	3e30      	subs	r6, #48	; 0x30
 8003fc2:	b2f3      	uxtb	r3, r6
 8003fc4:	2b09      	cmp	r3, #9
 8003fc6:	d89e      	bhi.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8003fc8:	f89d 9014 	ldrb.w	r9, [sp, #20]
 8003fcc:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8003fd0:	fa5f f389 	uxtb.w	r3, r9
 8003fd4:	2b09      	cmp	r3, #9
 8003fd6:	d896      	bhi.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8003fd8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8003fde:	d192      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
 8003fe0:	f89d 8016 	ldrb.w	r8, [sp, #22]
 8003fe4:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8003fe8:	fa5f f388 	uxtb.w	r3, r8
 8003fec:	2b09      	cmp	r3, #9
 8003fee:	d88a      	bhi.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8003ff0:	f89d 7017 	ldrb.w	r7, [sp, #23]
 8003ff4:	3f30      	subs	r7, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8003ff6:	b2fb      	uxtb	r3, r7
 8003ff8:	2b09      	cmp	r3, #9
 8003ffa:	d884      	bhi.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8003ffc:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8004000:	3d30      	subs	r5, #48	; 0x30
 8004002:	b2eb      	uxtb	r3, r5
 8004004:	2b09      	cmp	r3, #9
 8004006:	f63f af7e 	bhi.w	8003f06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 800400a:	f89d 401a 	ldrb.w	r4, [sp, #26]
 800400e:	3c30      	subs	r4, #48	; 0x30
 8004010:	b2e4      	uxtb	r4, r4
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8004012:	2c02      	cmp	r4, #2
 8004014:	f63f af77 	bhi.w	8003f06 <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8004018:	f7fc fe58 	bl	8000ccc <__aeabi_i2f>
 800401c:	492d      	ldr	r1, [pc, #180]	; (80040d4 <HAL_UART_RxCpltCallback+0x21c>)
 800401e:	f7fc fea9 	bl	8000d74 <__aeabi_fmul>
 8004022:	2100      	movs	r1, #0
 8004024:	f7fc fd9e 	bl	8000b64 <__addsf3>
 8004028:	4601      	mov	r1, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 800402a:	4658      	mov	r0, fp
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 800402c:	9101      	str	r1, [sp, #4]
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 800402e:	f7fc fe4d 	bl	8000ccc <__aeabi_i2f>
 8004032:	9901      	ldr	r1, [sp, #4]
 8004034:	f7fc fd96 	bl	8000b64 <__addsf3>
 8004038:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 800403a:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 800403c:	4692      	mov	sl, r2
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 800403e:	f7fc fe45 	bl	8000ccc <__aeabi_i2f>
 8004042:	4924      	ldr	r1, [pc, #144]	; (80040d4 <HAL_UART_RxCpltCallback+0x21c>)
 8004044:	f7fc ff4a 	bl	8000edc <__aeabi_fdiv>
 8004048:	4651      	mov	r1, sl
 800404a:	f7fc fd8b 	bl	8000b64 <__addsf3>
 800404e:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8004050:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8004052:	4691      	mov	r9, r2
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8004054:	f7fc fe3a 	bl	8000ccc <__aeabi_i2f>
 8004058:	2100      	movs	r1, #0
 800405a:	f7fc fd83 	bl	8000b64 <__addsf3>
 800405e:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8004060:	4640      	mov	r0, r8
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8004062:	4690      	mov	r8, r2
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8004064:	f7fc fe32 	bl	8000ccc <__aeabi_i2f>
 8004068:	491a      	ldr	r1, [pc, #104]	; (80040d4 <HAL_UART_RxCpltCallback+0x21c>)
 800406a:	f7fc ff37 	bl	8000edc <__aeabi_fdiv>
 800406e:	4641      	mov	r1, r8
 8004070:	f7fc fd78 	bl	8000b64 <__addsf3>
 8004074:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8004076:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8004078:	4617      	mov	r7, r2
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 800407a:	f7fc fe27 	bl	8000ccc <__aeabi_i2f>
 800407e:	4916      	ldr	r1, [pc, #88]	; (80040d8 <HAL_UART_RxCpltCallback+0x220>)
 8004080:	f7fc ff2c 	bl	8000edc <__aeabi_fdiv>
 8004084:	4639      	mov	r1, r7
 8004086:	f7fc fd6d 	bl	8000b64 <__addsf3>
 800408a:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 800408c:	4630      	mov	r0, r6
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 800408e:	4616      	mov	r6, r2
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8004090:	f7fc fe1c 	bl	8000ccc <__aeabi_i2f>
 8004094:	4910      	ldr	r1, [pc, #64]	; (80040d8 <HAL_UART_RxCpltCallback+0x220>)
 8004096:	f7fc ff21 	bl	8000edc <__aeabi_fdiv>
 800409a:	4649      	mov	r1, r9
 800409c:	f7fc fd62 	bl	8000b64 <__addsf3>
 80040a0:	4602      	mov	r2, r0
		slin_num = tempv2;
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <HAL_UART_RxCpltCallback+0x224>)
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 80040a4:	4628      	mov	r0, r5
		slin_num = tempv2;
 80040a6:	601a      	str	r2, [r3, #0]
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 80040a8:	f7fc fe10 	bl	8000ccc <__aeabi_i2f>
 80040ac:	490c      	ldr	r1, [pc, #48]	; (80040e0 <HAL_UART_RxCpltCallback+0x228>)
 80040ae:	f7fc ff15 	bl	8000edc <__aeabi_fdiv>
 80040b2:	4631      	mov	r1, r6
 80040b4:	f7fc fd56 	bl	8000b64 <__addsf3>
		scur_num = tempa2;
 80040b8:	f8df b028 	ldr.w	fp, [pc, #40]	; 80040e4 <HAL_UART_RxCpltCallback+0x22c>
		chstat2 = rxbuffercpy[18]-48;
 80040bc:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <HAL_UART_RxCpltCallback+0x230>)
		scur_num = tempa2;
 80040be:	f8cb 0000 	str.w	r0, [fp]
		chstat2 = rxbuffercpy[18]-48;
 80040c2:	701c      	strb	r4, [r3, #0]
 80040c4:	e71f      	b.n	8003f06 <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 80040c6:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 80040c8:	7835      	ldrb	r5, [r6, #0]
 80040ca:	e705      	b.n	8003ed8 <HAL_UART_RxCpltCallback+0x20>
 80040cc:	20000710 	.word	0x20000710
 80040d0:	200006c0 	.word	0x200006c0
 80040d4:	41200000 	.word	0x41200000
 80040d8:	42c80000 	.word	0x42c80000
 80040dc:	20000754 	.word	0x20000754
 80040e0:	447a0000 	.word	0x447a0000
 80040e4:	20000750 	.word	0x20000750
 80040e8:	200003a4 	.word	0x200003a4

080040ec <HAL_UART_TxCpltCallback>:
{
 80040ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	memset (txbuffer, '\0', 64);  // clear the buffer
 80040ee:	2540      	movs	r5, #64	; 0x40
 80040f0:	4c13      	ldr	r4, [pc, #76]	; (8004140 <HAL_UART_TxCpltCallback+0x54>)
{
 80040f2:	b087      	sub	sp, #28
	memset (txbuffer, '\0', 64);  // clear the buffer
 80040f4:	462a      	mov	r2, r5
 80040f6:	2100      	movs	r1, #0
 80040f8:	4620      	mov	r0, r4
 80040fa:	f005 fc4b 	bl	8009994 <memset>
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", voltnum2, ampnum2, chstat2);
 80040fe:	4a11      	ldr	r2, [pc, #68]	; (8004144 <HAL_UART_TxCpltCallback+0x58>)
 8004100:	4911      	ldr	r1, [pc, #68]	; (8004148 <HAL_UART_TxCpltCallback+0x5c>)
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_UART_TxCpltCallback+0x60>)
 8004104:	680e      	ldr	r6, [r1, #0]
 8004106:	6810      	ldr	r0, [r2, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	9304      	str	r3, [sp, #16]
 800410c:	f7fc f9a4 	bl	8000458 <__aeabi_f2d>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4630      	mov	r0, r6
 8004116:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800411a:	f7fc f99d 	bl	8000458 <__aeabi_f2d>
 800411e:	4606      	mov	r6, r0
 8004120:	460f      	mov	r7, r1
 8004122:	4620      	mov	r0, r4
 8004124:	2120      	movs	r1, #32
 8004126:	e9cd 6700 	strd	r6, r7, [sp]
 800412a:	4a09      	ldr	r2, [pc, #36]	; (8004150 <HAL_UART_TxCpltCallback+0x64>)
 800412c:	f006 f89a 	bl	800a264 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8004130:	462a      	mov	r2, r5
 8004132:	4621      	mov	r1, r4
 8004134:	4807      	ldr	r0, [pc, #28]	; (8004154 <HAL_UART_TxCpltCallback+0x68>)
}
 8004136:	b007      	add	sp, #28
 8004138:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 800413c:	f003 babe 	b.w	80076bc <HAL_UART_Transmit_DMA>
 8004140:	2000075c 	.word	0x2000075c
 8004144:	200003a0 	.word	0x200003a0
 8004148:	20000824 	.word	0x20000824
 800414c:	200003a4 	.word	0x200003a4
 8004150:	0800c7d0 	.word	0x0800c7d0
 8004154:	200006c0 	.word	0x200006c0

08004158 <Error_Handler>:
 8004158:	b672      	cpsid	i
  while (1)
 800415a:	e7fe      	b.n	800415a <Error_Handler+0x2>

0800415c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800415c:	4b0f      	ldr	r3, [pc, #60]	; (800419c <HAL_MspInit+0x40>)
{
 800415e:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8004160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004162:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004166:	625a      	str	r2, [r3, #36]	; 0x24
 8004168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800416a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800416e:	9201      	str	r2, [sp, #4]
 8004170:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004172:	6a1a      	ldr	r2, [r3, #32]
 8004174:	f042 0201 	orr.w	r2, r2, #1
 8004178:	621a      	str	r2, [r3, #32]
 800417a:	6a1a      	ldr	r2, [r3, #32]
 800417c:	f002 0201 	and.w	r2, r2, #1
 8004180:	9202      	str	r2, [sp, #8]
 8004182:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004186:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800418a:	625a      	str	r2, [r3, #36]	; 0x24
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	9303      	str	r3, [sp, #12]
 8004194:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004196:	b004      	add	sp, #16
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800

080041a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041a0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a2:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80041a4:	4b21      	ldr	r3, [pc, #132]	; (800422c <HAL_ADC_MspInit+0x8c>)
 80041a6:	6802      	ldr	r2, [r0, #0]
{
 80041a8:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 80041aa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ac:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80041b0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80041b4:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 80041b6:	d001      	beq.n	80041bc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80041b8:	b008      	add	sp, #32
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041bc:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 80041c0:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c2:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c8:	621a      	str	r2, [r3, #32]
 80041ca:	6a1a      	ldr	r2, [r3, #32]
 80041cc:	4605      	mov	r5, r0
 80041ce:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80041d2:	9200      	str	r2, [sp, #0]
 80041d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d6:	69da      	ldr	r2, [r3, #28]
    hdma_adc.Instance = DMA1_Channel1;
 80041d8:	4e15      	ldr	r6, [pc, #84]	; (8004230 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	61da      	str	r2, [r3, #28]
 80041e0:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80041e2:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80041ea:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ec:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ee:	4811      	ldr	r0, [pc, #68]	; (8004234 <HAL_ADC_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80041f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f4:	f001 f8e4 	bl	80053c0 <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80041f8:	2380      	movs	r3, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 80041fa:	490f      	ldr	r1, [pc, #60]	; (8004238 <HAL_ADC_MspInit+0x98>)
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041fc:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004200:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004204:	60f3      	str	r3, [r6, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004206:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800420a:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800420c:	4630      	mov	r0, r6
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800420e:	60b4      	str	r4, [r6, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8004210:	61f4      	str	r4, [r6, #28]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004212:	6171      	str	r1, [r6, #20]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004214:	6132      	str	r2, [r6, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004216:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004218:	f000 ff1e 	bl	8005058 <HAL_DMA_Init>
 800421c:	b918      	cbnz	r0, 8004226 <HAL_ADC_MspInit+0x86>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800421e:	646e      	str	r6, [r5, #68]	; 0x44
 8004220:	6275      	str	r5, [r6, #36]	; 0x24
}
 8004222:	b008      	add	sp, #32
 8004224:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004226:	f7ff ff97 	bl	8004158 <Error_Handler>
 800422a:	e7f8      	b.n	800421e <HAL_ADC_MspInit+0x7e>
 800422c:	40012400 	.word	0x40012400
 8004230:	20000418 	.word	0x20000418
 8004234:	40020000 	.word	0x40020000
 8004238:	40026008 	.word	0x40026008

0800423c <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 800423c:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <HAL_ADC_MspDeInit+0x2c>)
 800423e:	6802      	ldr	r2, [r0, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d000      	beq.n	8004246 <HAL_ADC_MspDeInit+0xa>
 8004244:	4770      	bx	lr
{
 8004246:	b510      	push	{r4, lr}
 8004248:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800424a:	4a08      	ldr	r2, [pc, #32]	; (800426c <HAL_ADC_MspDeInit+0x30>)
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 800424c:	4808      	ldr	r0, [pc, #32]	; (8004270 <HAL_ADC_MspDeInit+0x34>)
    __HAL_RCC_ADC1_CLK_DISABLE();
 800424e:	6a13      	ldr	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8004250:	210f      	movs	r1, #15
    __HAL_RCC_ADC1_CLK_DISABLE();
 8004252:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004256:	6213      	str	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8004258:	f001 f99c 	bl	8005594 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 800425c:	6c60      	ldr	r0, [r4, #68]	; 0x44
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 800425e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8004262:	f000 bf31 	b.w	80050c8 <HAL_DMA_DeInit>
 8004266:	bf00      	nop
 8004268:	40012400 	.word	0x40012400
 800426c:	40023800 	.word	0x40023800
 8004270:	40020000 	.word	0x40020000

08004274 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004274:	2300      	movs	r3, #0
{
 8004276:	b530      	push	{r4, r5, lr}
  if(hdac->Instance==DAC)
 8004278:	4a14      	ldr	r2, [pc, #80]	; (80042cc <HAL_DAC_MspInit+0x58>)
 800427a:	6801      	ldr	r1, [r0, #0]
{
 800427c:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 800427e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004280:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004284:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004288:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 800428a:	d001      	beq.n	8004290 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800428c:	b009      	add	sp, #36	; 0x24
 800428e:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004290:	2430      	movs	r4, #48	; 0x30
 8004292:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8004294:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <HAL_DAC_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004296:	480f      	ldr	r0, [pc, #60]	; (80042d4 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8004298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800429a:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC_CLK_ENABLE();
 800429c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24
 80042a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042a4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80042a8:	9200      	str	r2, [sp, #0]
 80042aa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ac:	69da      	ldr	r2, [r3, #28]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	61da      	str	r2, [r3, #28]
 80042b4:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80042b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c2:	f001 f87d 	bl	80053c0 <HAL_GPIO_Init>
}
 80042c6:	b009      	add	sp, #36	; 0x24
 80042c8:	bd30      	pop	{r4, r5, pc}
 80042ca:	bf00      	nop
 80042cc:	40007400 	.word	0x40007400
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40020000 	.word	0x40020000

080042d8 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d8:	2300      	movs	r3, #0
{
 80042da:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 80042dc:	4a16      	ldr	r2, [pc, #88]	; (8004338 <HAL_I2C_MspInit+0x60>)
 80042de:	6801      	ldr	r1, [r0, #0]
{
 80042e0:	b088      	sub	sp, #32
  if(hi2c->Instance==I2C1)
 80042e2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80042e8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80042ec:	9306      	str	r3, [sp, #24]
  if(hi2c->Instance==I2C1)
 80042ee:	d001      	beq.n	80042f4 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80042f0:	b008      	add	sp, #32
 80042f2:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f4:	2003      	movs	r0, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042f6:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042f8:	26c0      	movs	r6, #192	; 0xc0
 80042fa:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042fc:	4c0f      	ldr	r4, [pc, #60]	; (800433c <HAL_I2C_MspInit+0x64>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042fe:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004300:	69e3      	ldr	r3, [r4, #28]
 8004302:	f043 0302 	orr.w	r3, r3, #2
 8004306:	61e3      	str	r3, [r4, #28]
 8004308:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800430a:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004312:	480b      	ldr	r0, [pc, #44]	; (8004340 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004314:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004316:	e9cd 6702 	strd	r6, r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800431a:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800431c:	f001 f850 	bl	80053c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004322:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004326:	6263      	str	r3, [r4, #36]	; 0x24
 8004328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800432a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	9b01      	ldr	r3, [sp, #4]
}
 8004332:	b008      	add	sp, #32
 8004334:	bdd0      	pop	{r4, r6, r7, pc}
 8004336:	bf00      	nop
 8004338:	40005400 	.word	0x40005400
 800433c:	40023800 	.word	0x40023800
 8004340:	40020400 	.word	0x40020400

08004344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004344:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8004346:	6803      	ldr	r3, [r0, #0]
{
 8004348:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 800434a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434e:	d026      	beq.n	800439e <HAL_TIM_Base_MspInit+0x5a>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004350:	4a44      	ldr	r2, [pc, #272]	; (8004464 <HAL_TIM_Base_MspInit+0x120>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d039      	beq.n	80043ca <HAL_TIM_Base_MspInit+0x86>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8004356:	4a44      	ldr	r2, [pc, #272]	; (8004468 <HAL_TIM_Base_MspInit+0x124>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d04b      	beq.n	80043f4 <HAL_TIM_Base_MspInit+0xb0>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 800435c:	4a43      	ldr	r2, [pc, #268]	; (800446c <HAL_TIM_Base_MspInit+0x128>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d008      	beq.n	8004374 <HAL_TIM_Base_MspInit+0x30>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8004362:	4a43      	ldr	r2, [pc, #268]	; (8004470 <HAL_TIM_Base_MspInit+0x12c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d05a      	beq.n	800441e <HAL_TIM_Base_MspInit+0xda>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8004368:	4a42      	ldr	r2, [pc, #264]	; (8004474 <HAL_TIM_Base_MspInit+0x130>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d068      	beq.n	8004440 <HAL_TIM_Base_MspInit+0xfc>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800436e:	b007      	add	sp, #28
 8004370:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8004374:	2200      	movs	r2, #0
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004376:	4b40      	ldr	r3, [pc, #256]	; (8004478 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8004378:	2019      	movs	r0, #25
    __HAL_RCC_TIM9_CLK_ENABLE();
 800437a:	6a19      	ldr	r1, [r3, #32]
 800437c:	f041 0104 	orr.w	r1, r1, #4
 8004380:	6219      	str	r1, [r3, #32]
 8004382:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8004384:	4611      	mov	r1, r2
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	9303      	str	r3, [sp, #12]
 800438c:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 800438e:	f000 fd65 	bl	8004e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8004392:	2019      	movs	r0, #25
}
 8004394:	b007      	add	sp, #28
 8004396:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 800439a:	f000 bd9d 	b.w	8004ed8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800439e:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043a0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80043a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80043a6:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043a8:	f041 0101 	orr.w	r1, r1, #1
 80043ac:	6259      	str	r1, [r3, #36]	; 0x24
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80043b0:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80043ba:	f000 fd4f 	bl	8004e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80043be:	201c      	movs	r0, #28
}
 80043c0:	b007      	add	sp, #28
 80043c2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 80043c6:	f000 bd87 	b.w	8004ed8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80043ca:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043cc:	4b2a      	ldr	r3, [pc, #168]	; (8004478 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80043ce:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043d2:	f041 0102 	orr.w	r1, r1, #2
 80043d6:	6259      	str	r1, [r3, #36]	; 0x24
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80043da:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80043e4:	f000 fd3a 	bl	8004e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80043e8:	201d      	movs	r0, #29
}
 80043ea:	b007      	add	sp, #28
 80043ec:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 80043f0:	f000 bd72 	b.w	8004ed8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80043f4:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043f6:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80043f8:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043fc:	f041 0104 	orr.w	r1, r1, #4
 8004400:	6259      	str	r1, [r3, #36]	; 0x24
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004404:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	9302      	str	r3, [sp, #8]
 800440c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800440e:	f000 fd25 	bl	8004e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004412:	201e      	movs	r0, #30
}
 8004414:	b007      	add	sp, #28
 8004416:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 800441a:	f000 bd5d 	b.w	8004ed8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 800441e:	2200      	movs	r2, #0
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004420:	4b15      	ldr	r3, [pc, #84]	; (8004478 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8004422:	201a      	movs	r0, #26
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004424:	6a19      	ldr	r1, [r3, #32]
 8004426:	f041 0108 	orr.w	r1, r1, #8
 800442a:	6219      	str	r1, [r3, #32]
 800442c:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 800442e:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	9304      	str	r3, [sp, #16]
 8004436:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8004438:	f000 fd10 	bl	8004e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 800443c:	201a      	movs	r0, #26
 800443e:	e7a9      	b.n	8004394 <HAL_TIM_Base_MspInit+0x50>
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8004440:	2200      	movs	r2, #0
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004442:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8004444:	201b      	movs	r0, #27
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004446:	6a19      	ldr	r1, [r3, #32]
 8004448:	f041 0110 	orr.w	r1, r1, #16
 800444c:	6219      	str	r1, [r3, #32]
 800444e:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8004450:	4611      	mov	r1, r2
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	9305      	str	r3, [sp, #20]
 8004458:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 800445a:	f000 fcff 	bl	8004e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 800445e:	201b      	movs	r0, #27
 8004460:	e798      	b.n	8004394 <HAL_TIM_Base_MspInit+0x50>
 8004462:	bf00      	nop
 8004464:	40000400 	.word	0x40000400
 8004468:	40000800 	.word	0x40000800
 800446c:	40010800 	.word	0x40010800
 8004470:	40010c00 	.word	0x40010c00
 8004474:	40011000 	.word	0x40011000
 8004478:	40023800 	.word	0x40023800

0800447c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800447c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800447e:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8004480:	4b30      	ldr	r3, [pc, #192]	; (8004544 <HAL_UART_MspInit+0xc8>)
 8004482:	6802      	ldr	r2, [r0, #0]
{
 8004484:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8004486:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004488:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800448c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004490:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8004492:	d001      	beq.n	8004498 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004494:	b008      	add	sp, #32
 8004496:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004498:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800449c:	6a1a      	ldr	r2, [r3, #32]
 800449e:	4605      	mov	r5, r0
 80044a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044a4:	621a      	str	r2, [r3, #32]
 80044a6:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044a8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80044aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80044ae:	9200      	str	r2, [sp, #0]
 80044b0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b2:	69da      	ldr	r2, [r3, #28]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80044b4:	4e24      	ldr	r6, [pc, #144]	; (8004548 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	61da      	str	r2, [r3, #28]
 80044bc:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044be:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044c8:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ca:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044cc:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044d2:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d4:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d6:	481d      	ldr	r0, [pc, #116]	; (800454c <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044d8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044da:	f000 ff71 	bl	80053c0 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044de:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80044e0:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <HAL_UART_MspInit+0xd4>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80044e2:	4630      	mov	r0, r6
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80044e4:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044e8:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044ec:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044f0:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044f2:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80044f4:	f000 fdb0 	bl	8005058 <HAL_DMA_Init>
 80044f8:	b9f0      	cbnz	r0, 8004538 <HAL_UART_MspInit+0xbc>
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044fa:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044fc:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044fe:	2110      	movs	r1, #16
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004500:	4c14      	ldr	r4, [pc, #80]	; (8004554 <HAL_UART_MspInit+0xd8>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004502:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004504:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004508:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800450c:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004510:	4b11      	ldr	r3, [pc, #68]	; (8004558 <HAL_UART_MspInit+0xdc>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004512:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004514:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004516:	6061      	str	r1, [r4, #4]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004518:	6023      	str	r3, [r4, #0]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800451a:	f000 fd9d 	bl	8005058 <HAL_DMA_Init>
 800451e:	b970      	cbnz	r0, 800453e <HAL_UART_MspInit+0xc2>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004520:	2200      	movs	r2, #0
 8004522:	2025      	movs	r0, #37	; 0x25
 8004524:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004526:	636c      	str	r4, [r5, #52]	; 0x34
 8004528:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800452a:	f000 fc97 	bl	8004e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800452e:	2025      	movs	r0, #37	; 0x25
 8004530:	f000 fcd2 	bl	8004ed8 <HAL_NVIC_EnableIRQ>
}
 8004534:	b008      	add	sp, #32
 8004536:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004538:	f7ff fe0e 	bl	8004158 <Error_Handler>
 800453c:	e7dd      	b.n	80044fa <HAL_UART_MspInit+0x7e>
      Error_Handler();
 800453e:	f7ff fe0b 	bl	8004158 <Error_Handler>
 8004542:	e7ed      	b.n	8004520 <HAL_UART_MspInit+0xa4>
 8004544:	40013800 	.word	0x40013800
 8004548:	2000045c 	.word	0x2000045c
 800454c:	40020000 	.word	0x40020000
 8004550:	40026058 	.word	0x40026058
 8004554:	200004a0 	.word	0x200004a0
 8004558:	40026044 	.word	0x40026044

0800455c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800455c:	e7fe      	b.n	800455c <NMI_Handler>
 800455e:	bf00      	nop

08004560 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004560:	e7fe      	b.n	8004560 <HardFault_Handler>
 8004562:	bf00      	nop

08004564 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004564:	e7fe      	b.n	8004564 <MemManage_Handler>
 8004566:	bf00      	nop

08004568 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004568:	e7fe      	b.n	8004568 <BusFault_Handler>
 800456a:	bf00      	nop

0800456c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800456c:	e7fe      	b.n	800456c <UsageFault_Handler>
 800456e:	bf00      	nop

08004570 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop

08004574 <DebugMon_Handler>:
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop

08004578 <PendSV_Handler>:
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop

0800457c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800457c:	f000 b920 	b.w	80047c0 <HAL_IncTick>

08004580 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_CLK_Pin);
 8004580:	2001      	movs	r0, #1
 8004582:	f001 b8ad 	b.w	80056e0 <HAL_GPIO_EXTI_IRQHandler>
 8004586:	bf00      	nop

08004588 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_SW_Pin);
 8004588:	2004      	movs	r0, #4
 800458a:	f001 b8a9 	b.w	80056e0 <HAL_GPIO_EXTI_IRQHandler>
 800458e:	bf00      	nop

08004590 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004590:	4801      	ldr	r0, [pc, #4]	; (8004598 <DMA1_Channel1_IRQHandler+0x8>)
 8004592:	f000 be61 	b.w	8005258 <HAL_DMA_IRQHandler>
 8004596:	bf00      	nop
 8004598:	20000418 	.word	0x20000418

0800459c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800459c:	4801      	ldr	r0, [pc, #4]	; (80045a4 <DMA1_Channel4_IRQHandler+0x8>)
 800459e:	f000 be5b 	b.w	8005258 <HAL_DMA_IRQHandler>
 80045a2:	bf00      	nop
 80045a4:	200004a0 	.word	0x200004a0

080045a8 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80045a8:	4801      	ldr	r0, [pc, #4]	; (80045b0 <DMA1_Channel5_IRQHandler+0x8>)
 80045aa:	f000 be55 	b.w	8005258 <HAL_DMA_IRQHandler>
 80045ae:	bf00      	nop
 80045b0:	2000045c 	.word	0x2000045c

080045b4 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80045b4:	4801      	ldr	r0, [pc, #4]	; (80045bc <USB_LP_IRQHandler+0x8>)
 80045b6:	f001 bb79 	b.w	8005cac <HAL_PCD_IRQHandler>
 80045ba:	bf00      	nop
 80045bc:	200014a0 	.word	0x200014a0

080045c0 <TIM9_IRQHandler>:
void TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM9_IRQn 0 */

  /* USER CODE END TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80045c0:	4801      	ldr	r0, [pc, #4]	; (80045c8 <TIM9_IRQHandler+0x8>)
 80045c2:	f002 bf33 	b.w	800742c <HAL_TIM_IRQHandler>
 80045c6:	bf00      	nop
 80045c8:	20000680 	.word	0x20000680

080045cc <TIM10_IRQHandler>:
void TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80045cc:	4801      	ldr	r0, [pc, #4]	; (80045d4 <TIM10_IRQHandler+0x8>)
 80045ce:	f002 bf2d 	b.w	800742c <HAL_TIM_IRQHandler>
 80045d2:	bf00      	nop
 80045d4:	20000540 	.word	0x20000540

080045d8 <TIM11_IRQHandler>:
void TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80045d8:	4801      	ldr	r0, [pc, #4]	; (80045e0 <TIM11_IRQHandler+0x8>)
 80045da:	f002 bf27 	b.w	800742c <HAL_TIM_IRQHandler>
 80045de:	bf00      	nop
 80045e0:	20000580 	.word	0x20000580

080045e4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045e4:	4801      	ldr	r0, [pc, #4]	; (80045ec <TIM2_IRQHandler+0x8>)
 80045e6:	f002 bf21 	b.w	800742c <HAL_TIM_IRQHandler>
 80045ea:	bf00      	nop
 80045ec:	200005c0 	.word	0x200005c0

080045f0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045f0:	4801      	ldr	r0, [pc, #4]	; (80045f8 <TIM3_IRQHandler+0x8>)
 80045f2:	f002 bf1b 	b.w	800742c <HAL_TIM_IRQHandler>
 80045f6:	bf00      	nop
 80045f8:	20000600 	.word	0x20000600

080045fc <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80045fc:	4801      	ldr	r0, [pc, #4]	; (8004604 <TIM4_IRQHandler+0x8>)
 80045fe:	f002 bf15 	b.w	800742c <HAL_TIM_IRQHandler>
 8004602:	bf00      	nop
 8004604:	20000640 	.word	0x20000640

08004608 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004608:	4801      	ldr	r0, [pc, #4]	; (8004610 <USART1_IRQHandler+0x8>)
 800460a:	f003 b9e1 	b.w	80079d0 <HAL_UART_IRQHandler>
 800460e:	bf00      	nop
 8004610:	200006c0 	.word	0x200006c0

08004614 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004614:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Row_1_Pin);
 8004616:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800461a:	f001 f861 	bl	80056e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_2_Pin);
 800461e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004622:	f001 f85d 	bl	80056e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_3_Pin);
 8004626:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800462a:	f001 f859 	bl	80056e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_4_Pin);
 800462e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004632:	f001 f855 	bl	80056e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
 800463a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800463e:	f001 b84f 	b.w	80056e0 <HAL_GPIO_EXTI_IRQHandler>
 8004642:	bf00      	nop

08004644 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004644:	2001      	movs	r0, #1
 8004646:	4770      	bx	lr

08004648 <_kill>:

int _kill(int pid, int sig)
{
 8004648:	b508      	push	{r3, lr}
	errno = EINVAL;
 800464a:	f005 f96b 	bl	8009924 <__errno>
 800464e:	2216      	movs	r2, #22
 8004650:	4603      	mov	r3, r0
	return -1;
}
 8004652:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8004656:	601a      	str	r2, [r3, #0]
}
 8004658:	bd08      	pop	{r3, pc}
 800465a:	bf00      	nop

0800465c <_exit>:

void _exit (int status)
{
 800465c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800465e:	f005 f961 	bl	8009924 <__errno>
 8004662:	2316      	movs	r3, #22
 8004664:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004666:	e7fe      	b.n	8004666 <_exit+0xa>

08004668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004668:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466a:	1e16      	subs	r6, r2, #0
 800466c:	dd07      	ble.n	800467e <_read+0x16>
 800466e:	460c      	mov	r4, r1
 8004670:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8004672:	f3af 8000 	nop.w
 8004676:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800467a:	42a5      	cmp	r5, r4
 800467c:	d1f9      	bne.n	8004672 <_read+0xa>
	}

return len;
}
 800467e:	4630      	mov	r0, r6
 8004680:	bd70      	pop	{r4, r5, r6, pc}
 8004682:	bf00      	nop

08004684 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004684:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004686:	1e16      	subs	r6, r2, #0
 8004688:	dd07      	ble.n	800469a <_write+0x16>
 800468a:	460c      	mov	r4, r1
 800468c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800468e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004692:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004696:	42ac      	cmp	r4, r5
 8004698:	d1f9      	bne.n	800468e <_write+0xa>
	}
	return len;
}
 800469a:	4630      	mov	r0, r6
 800469c:	bd70      	pop	{r4, r5, r6, pc}
 800469e:	bf00      	nop

080046a0 <_close>:

int _close(int file)
{
	return -1;
}
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop

080046a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80046a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80046ac:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80046ae:	604b      	str	r3, [r1, #4]
}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop

080046b4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80046b4:	2001      	movs	r0, #1
 80046b6:	4770      	bx	lr

080046b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80046b8:	2000      	movs	r0, #0
 80046ba:	4770      	bx	lr

080046bc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046bc:	490d      	ldr	r1, [pc, #52]	; (80046f4 <_sbrk+0x38>)
{
 80046be:	4603      	mov	r3, r0
 80046c0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046c2:	4a0d      	ldr	r2, [pc, #52]	; (80046f8 <_sbrk+0x3c>)
 80046c4:	4c0d      	ldr	r4, [pc, #52]	; (80046fc <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80046c6:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046c8:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80046ca:	b120      	cbz	r0, 80046d6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046cc:	4403      	add	r3, r0
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d807      	bhi.n	80046e2 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80046d2:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80046d4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80046d6:	4c0a      	ldr	r4, [pc, #40]	; (8004700 <_sbrk+0x44>)
 80046d8:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80046da:	4403      	add	r3, r0
 80046dc:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80046de:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80046e0:	d9f7      	bls.n	80046d2 <_sbrk+0x16>
    errno = ENOMEM;
 80046e2:	f005 f91f 	bl	8009924 <__errno>
 80046e6:	220c      	movs	r2, #12
 80046e8:	4603      	mov	r3, r0
    return (void *)-1;
 80046ea:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80046ee:	601a      	str	r2, [r3, #0]
}
 80046f0:	bd10      	pop	{r4, pc}
 80046f2:	bf00      	nop
 80046f4:	20000828 	.word	0x20000828
 80046f8:	20008000 	.word	0x20008000
 80046fc:	00002000 	.word	0x00002000
 8004700:	200019c0 	.word	0x200019c0

08004704 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop

08004708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004708:	480c      	ldr	r0, [pc, #48]	; (800473c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800470a:	490d      	ldr	r1, [pc, #52]	; (8004740 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800470c:	4a0d      	ldr	r2, [pc, #52]	; (8004744 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800470e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004710:	e002      	b.n	8004718 <LoopCopyDataInit>

08004712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004716:	3304      	adds	r3, #4

08004718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800471a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800471c:	d3f9      	bcc.n	8004712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800471e:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004720:	4c0a      	ldr	r4, [pc, #40]	; (800474c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004724:	e001      	b.n	800472a <LoopFillZerobss>

08004726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004728:	3204      	adds	r2, #4

0800472a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800472a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800472c:	d3fb      	bcc.n	8004726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800472e:	f7ff ffe9 	bl	8004704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004732:	f005 f8fd 	bl	8009930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004736:	f7fd fb2f 	bl	8001d98 <main>
  bx lr
 800473a:	4770      	bx	lr
  ldr r0, =_sdata
 800473c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004740:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8004744:	0800cccc 	.word	0x0800cccc
  ldr r2, =_sbss
 8004748:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 800474c:	200019bc 	.word	0x200019bc

08004750 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004750:	e7fe      	b.n	8004750 <ADC1_IRQHandler>
	...

08004754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004754:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004756:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <HAL_InitTick+0x40>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	b90b      	cbnz	r3, 8004760 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800475c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800475e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	490b      	ldr	r1, [pc, #44]	; (8004798 <HAL_InitTick+0x44>)
 800476a:	4605      	mov	r5, r0
 800476c:	6808      	ldr	r0, [r1, #0]
 800476e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004772:	f000 fbd3 	bl	8004f1c <HAL_SYSTICK_Config>
 8004776:	4604      	mov	r4, r0
 8004778:	2800      	cmp	r0, #0
 800477a:	d1ef      	bne.n	800475c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800477c:	2d0f      	cmp	r5, #15
 800477e:	d8ed      	bhi.n	800475c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004780:	4602      	mov	r2, r0
 8004782:	4629      	mov	r1, r5
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	f000 fb68 	bl	8004e5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800478c:	4b03      	ldr	r3, [pc, #12]	; (800479c <HAL_InitTick+0x48>)
 800478e:	4620      	mov	r0, r4
 8004790:	601d      	str	r5, [r3, #0]
}
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	20000014 	.word	0x20000014
 8004798:	20000010 	.word	0x20000010
 800479c:	20000018 	.word	0x20000018

080047a0 <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047a0:	2003      	movs	r0, #3
{
 80047a2:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047a4:	f000 fb48 	bl	8004e38 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047a8:	200f      	movs	r0, #15
 80047aa:	f7ff ffd3 	bl	8004754 <HAL_InitTick>
 80047ae:	b110      	cbz	r0, 80047b6 <HAL_Init+0x16>
    status = HAL_ERROR;
 80047b0:	2401      	movs	r4, #1
}
 80047b2:	4620      	mov	r0, r4
 80047b4:	bd10      	pop	{r4, pc}
 80047b6:	4604      	mov	r4, r0
    HAL_MspInit();
 80047b8:	f7ff fcd0 	bl	800415c <HAL_MspInit>
}
 80047bc:	4620      	mov	r0, r4
 80047be:	bd10      	pop	{r4, pc}

080047c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80047c0:	4a03      	ldr	r2, [pc, #12]	; (80047d0 <HAL_IncTick+0x10>)
 80047c2:	4904      	ldr	r1, [pc, #16]	; (80047d4 <HAL_IncTick+0x14>)
 80047c4:	6813      	ldr	r3, [r2, #0]
 80047c6:	6809      	ldr	r1, [r1, #0]
 80047c8:	440b      	add	r3, r1
 80047ca:	6013      	str	r3, [r2, #0]
}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	2000082c 	.word	0x2000082c
 80047d4:	20000014 	.word	0x20000014

080047d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80047d8:	4b01      	ldr	r3, [pc, #4]	; (80047e0 <HAL_GetTick+0x8>)
 80047da:	6818      	ldr	r0, [r3, #0]
}
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	2000082c 	.word	0x2000082c

080047e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80047e8:	f7ff fff6 	bl	80047d8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047ec:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80047ee:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80047f0:	d002      	beq.n	80047f8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80047f2:	4b04      	ldr	r3, [pc, #16]	; (8004804 <HAL_Delay+0x20>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047f8:	f7ff ffee 	bl	80047d8 <HAL_GetTick>
 80047fc:	1b40      	subs	r0, r0, r5
 80047fe:	42a0      	cmp	r0, r4
 8004800:	d3fa      	bcc.n	80047f8 <HAL_Delay+0x14>
  {
  }
}
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	20000014 	.word	0x20000014

08004808 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004808:	2800      	cmp	r0, #0
 800480a:	f000 80a9 	beq.w	8004960 <HAL_ADC_Init+0x158>
{
 800480e:	b530      	push	{r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004810:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004812:	4604      	mov	r4, r0
{
 8004814:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004816:	2b00      	cmp	r3, #0
 8004818:	d078      	beq.n	800490c <HAL_ADC_Init+0x104>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800481a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800481c:	06d8      	lsls	r0, r3, #27
 800481e:	d453      	bmi.n	80048c8 <HAL_ADC_Init+0xc0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004820:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8004822:	4a5c      	ldr	r2, [pc, #368]	; (8004994 <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 8004824:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004828:	f023 0302 	bic.w	r3, r3, #2
 800482c:	f043 0302 	orr.w	r3, r3, #2
 8004830:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8004832:	6853      	ldr	r3, [r2, #4]
 8004834:	6861      	ldr	r1, [r4, #4]
 8004836:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800483a:	430b      	orrs	r3, r1
 800483c:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004842:	fa91 f1a1 	rbit	r1, r1
 8004846:	2302      	movs	r3, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004848:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800484c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8004850:	fa93 f3a3 	rbit	r3, r3
 8004854:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004858:	6965      	ldr	r5, [r4, #20]
 800485a:	68e2      	ldr	r2, [r4, #12]
 800485c:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 8004860:	432a      	orrs	r2, r5
 8004862:	6a25      	ldr	r5, [r4, #32]
 8004864:	fa0c f101 	lsl.w	r1, ip, r1
 8004868:	432a      	orrs	r2, r5
 800486a:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800486c:	6b61      	ldr	r1, [r4, #52]	; 0x34
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800486e:	fa00 f303 	lsl.w	r3, r0, r3
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004872:	2910      	cmp	r1, #16
                hadc->Init.ChannelsBank                                        |
 8004874:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004878:	d002      	beq.n	8004880 <HAL_ADC_Init+0x78>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800487a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800487c:	4311      	orrs	r1, r2
 800487e:	430b      	orrs	r3, r1
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8004880:	6822      	ldr	r2, [r4, #0]
 8004882:	6811      	ldr	r1, [r2, #0]
 8004884:	0649      	lsls	r1, r1, #25
 8004886:	d551      	bpl.n	800492c <HAL_ADC_Init+0x124>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8004888:	6925      	ldr	r5, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800488a:	6890      	ldr	r0, [r2, #8]
 800488c:	4942      	ldr	r1, [pc, #264]	; (8004998 <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800488e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 8004892:	ea01 0100 	and.w	r1, r1, r0
 8004896:	ea41 0103 	orr.w	r1, r1, r3
 800489a:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800489c:	d017      	beq.n	80048ce <HAL_ADC_Init+0xc6>
 800489e:	2d01      	cmp	r5, #1
 80048a0:	d015      	beq.n	80048ce <HAL_ADC_Init+0xc6>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80048a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80048a4:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 80048a8:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80048aa:	6891      	ldr	r1, [r2, #8]
 80048ac:	4a3b      	ldr	r2, [pc, #236]	; (800499c <HAL_ADC_Init+0x194>)
 80048ae:	400a      	ands	r2, r1
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d11f      	bne.n	80048f4 <HAL_ADC_Init+0xec>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80048b4:	2000      	movs	r0, #0
 80048b6:	6520      	str	r0, [r4, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80048b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80048ba:	f023 0303 	bic.w	r3, r3, #3
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80048c4:	b003      	add	sp, #12
 80048c6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80048c8:	2001      	movs	r0, #1
}
 80048ca:	b003      	add	sp, #12
 80048cc:	bd30      	pop	{r4, r5, pc}
 80048ce:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80048d2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80048d4:	fa91 f1a1 	rbit	r1, r1
 80048d8:	fab1 f081 	clz	r0, r1
 80048dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80048de:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 80048e2:	3901      	subs	r1, #1
 80048e4:	4081      	lsls	r1, r0
 80048e6:	4329      	orrs	r1, r5
 80048e8:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80048ea:	6891      	ldr	r1, [r2, #8]
 80048ec:	4a2b      	ldr	r2, [pc, #172]	; (800499c <HAL_ADC_Init+0x194>)
 80048ee:	400a      	ands	r2, r1
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d0df      	beq.n	80048b4 <HAL_ADC_Init+0xac>
      tmp_hal_status = HAL_ERROR;
 80048f4:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80048f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80048f8:	f023 0312 	bic.w	r3, r3, #18
 80048fc:	f043 0310 	orr.w	r3, r3, #16
 8004900:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004902:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004904:	4303      	orrs	r3, r0
 8004906:	6523      	str	r3, [r4, #80]	; 0x50
}
 8004908:	b003      	add	sp, #12
 800490a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800490c:	4a24      	ldr	r2, [pc, #144]	; (80049a0 <HAL_ADC_Init+0x198>)
    ADC_CLEAR_ERRORCODE(hadc);
 800490e:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 8004910:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004914:	6a13      	ldr	r3, [r2, #32]
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	6213      	str	r3, [r2, #32]
 800491c:	6a13      	ldr	r3, [r2, #32]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	9301      	str	r3, [sp, #4]
 8004924:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8004926:	f7ff fc3b 	bl	80041a0 <HAL_ADC_MspInit>
 800492a:	e776      	b.n	800481a <HAL_ADC_Init+0x12>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800492c:	69a1      	ldr	r1, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800492e:	68a5      	ldr	r5, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8004930:	430b      	orrs	r3, r1
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004932:	69e1      	ldr	r1, [r4, #28]
 8004934:	ea45 0c01 	orr.w	ip, r5, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8004938:	6925      	ldr	r5, [r4, #16]
 800493a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800493e:	d00c      	beq.n	800495a <HAL_ADC_Init+0x152>
 8004940:	2d01      	cmp	r5, #1
 8004942:	d00a      	beq.n	800495a <HAL_ADC_Init+0x152>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004944:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8004948:	2901      	cmp	r1, #1
 800494a:	d00b      	beq.n	8004964 <HAL_ADC_Init+0x15c>
        MODIFY_REG(hadc->Instance->CR1,
 800494c:	6850      	ldr	r0, [r2, #4]
 800494e:	4915      	ldr	r1, [pc, #84]	; (80049a4 <HAL_ADC_Init+0x19c>)
 8004950:	4001      	ands	r1, r0
 8004952:	ea41 010c 	orr.w	r1, r1, ip
 8004956:	6051      	str	r1, [r2, #4]
 8004958:	e797      	b.n	800488a <HAL_ADC_Init+0x82>
                  hadc->Init.LowPowerAutoPowerOff           |
 800495a:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 800495e:	e7f1      	b.n	8004944 <HAL_ADC_Init+0x13c>
    return HAL_ERROR;
 8004960:	2001      	movs	r0, #1
}
 8004962:	4770      	bx	lr
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004964:	b968      	cbnz	r0, 8004982 <HAL_ADC_Init+0x17a>
 8004966:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800496a:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800496e:	fab1 f081 	clz	r0, r1
 8004972:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004974:	3901      	subs	r1, #1
 8004976:	4081      	lsls	r1, r0
 8004978:	ea41 010c 	orr.w	r1, r1, ip
 800497c:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 8004980:	e7e4      	b.n	800494c <HAL_ADC_Init+0x144>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004982:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004984:	f041 0120 	orr.w	r1, r1, #32
 8004988:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800498a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800498c:	f041 0101 	orr.w	r1, r1, #1
 8004990:	6521      	str	r1, [r4, #80]	; 0x50
 8004992:	e7db      	b.n	800494c <HAL_ADC_Init+0x144>
 8004994:	40012700 	.word	0x40012700
 8004998:	c0fff18d 	.word	0xc0fff18d
 800499c:	bf80fffe 	.word	0xbf80fffe
 80049a0:	40023800 	.word	0x40023800
 80049a4:	fcfc16ff 	.word	0xfcfc16ff

080049a8 <HAL_ADC_DeInit>:
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d075      	beq.n	8004a98 <HAL_ADC_DeInit+0xf0>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80049ac:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 80049ae:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80049b0:	f042 0202 	orr.w	r2, r2, #2
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80049b4:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80049b6:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (ADC_IS_ENABLE(hadc) != RESET)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4604      	mov	r4, r0
 80049bc:	0655      	lsls	r5, r2, #25
 80049be:	d453      	bmi.n	8004a68 <HAL_ADC_DeInit+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 80049c0:	f06f 001f 	mvn.w	r0, #31
 80049c4:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80049c6:	6858      	ldr	r0, [r3, #4]
 80049c8:	4939      	ldr	r1, [pc, #228]	; (8004ab0 <HAL_ADC_DeInit+0x108>)
    ADC_CR2_CLEAR(hadc);
 80049ca:	4a3a      	ldr	r2, [pc, #232]	; (8004ab4 <HAL_ADC_DeInit+0x10c>)
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80049cc:	4001      	ands	r1, r0
 80049ce:	6059      	str	r1, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 80049d0:	6899      	ldr	r1, [r3, #8]
 80049d2:	400a      	ands	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 80049d6:	bf00      	nop
    ADC_SMPR1_CLEAR(hadc);
 80049d8:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80049da:	4a37      	ldr	r2, [pc, #220]	; (8004ab8 <HAL_ADC_DeInit+0x110>)
    ADC_SMPR1_CLEAR(hadc);
 80049dc:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 80049de:	4837      	ldr	r0, [pc, #220]	; (8004abc <HAL_ADC_DeInit+0x114>)
    ADC_SMPR1_CLEAR(hadc);
 80049e0:	0d49      	lsrs	r1, r1, #21
 80049e2:	0549      	lsls	r1, r1, #21
 80049e4:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 80049e6:	6919      	ldr	r1, [r3, #16]
 80049e8:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80049ec:	6119      	str	r1, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 80049ee:	6959      	ldr	r1, [r3, #20]
 80049f0:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80049f4:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80049f6:	6999      	ldr	r1, [r3, #24]
 80049f8:	4011      	ands	r1, r2
 80049fa:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 80049fc:	69d9      	ldr	r1, [r3, #28]
 80049fe:	4011      	ands	r1, r2
 8004a00:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8004a02:	6a19      	ldr	r1, [r3, #32]
 8004a04:	4011      	ands	r1, r2
 8004a06:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8004a08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004a0a:	4011      	ands	r1, r2
 8004a0c:	6259      	str	r1, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8004a0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004a10:	4011      	ands	r1, r2
 8004a12:	6299      	str	r1, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8004a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a16:	400a      	ands	r2, r1
 8004a18:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8004a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8004a1c:	4928      	ldr	r1, [pc, #160]	; (8004ac0 <HAL_ADC_DeInit+0x118>)
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8004a1e:	4010      	ands	r0, r2
 8004a20:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8004a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_ADC_MspDeInit(hadc);
 8004a24:	4620      	mov	r0, r4
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8004a26:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8004a2a:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8004a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a2e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 8004a34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a36:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8004a3a:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 8004a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a3e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 8004a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a46:	0d92      	lsrs	r2, r2, #22
 8004a48:	0592      	lsls	r2, r2, #22
 8004a4a:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8004a4c:	684b      	ldr	r3, [r1, #4]
 8004a4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a52:	604b      	str	r3, [r1, #4]
    HAL_ADC_MspDeInit(hadc);
 8004a54:	f7ff fbf2 	bl	800423c <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004a58:	2300      	movs	r3, #0
    hadc->State = HAL_ADC_STATE_RESET;
 8004a5a:	4618      	mov	r0, r3
    ADC_CLEAR_ERRORCODE(hadc);
 8004a5c:	6523      	str	r3, [r4, #80]	; 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 8004a5e:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 8004a60:	2300      	movs	r3, #0
 8004a62:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 8004a66:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a70:	f7ff feb2 	bl	80047d8 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004a74:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004a76:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	0650      	lsls	r0, r2, #25
 8004a7c:	d5a0      	bpl.n	80049c0 <HAL_ADC_DeInit+0x18>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8004a7e:	f7ff feab 	bl	80047d8 <HAL_GetTick>
 8004a82:	1b40      	subs	r0, r0, r5
 8004a84:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004a86:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8004a88:	d902      	bls.n	8004a90 <HAL_ADC_DeInit+0xe8>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	0651      	lsls	r1, r2, #25
 8004a8e:	d405      	bmi.n	8004a9c <HAL_ADC_DeInit+0xf4>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	0652      	lsls	r2, r2, #25
 8004a94:	d4f3      	bmi.n	8004a7e <HAL_ADC_DeInit+0xd6>
 8004a96:	e793      	b.n	80049c0 <HAL_ADC_DeInit+0x18>
    return HAL_ERROR;
 8004a98:	2001      	movs	r0, #1
}
 8004a9a:	4770      	bx	lr
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a9c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004aa0:	f043 0310 	orr.w	r3, r3, #16
 8004aa4:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aa6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004aa8:	4303      	orrs	r3, r0
 8004aaa:	6523      	str	r3, [r4, #80]	; 0x50
  if (tmp_hal_status == HAL_OK)
 8004aac:	e7d8      	b.n	8004a60 <HAL_ADC_DeInit+0xb8>
 8004aae:	bf00      	nop
 8004ab0:	f83c0000 	.word	0xf83c0000
 8004ab4:	8080f08c 	.word	0x8080f08c
 8004ab8:	fffff000 	.word	0xfffff000
 8004abc:	fe0f8000 	.word	0xfe0f8000
 8004ac0:	40012700 	.word	0x40012700

08004ac4 <HAL_ADC_ConvCpltCallback>:
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop

08004ac8 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ac8:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004acc:	f012 0f50 	tst.w	r2, #80	; 0x50
 8004ad0:	d126      	bne.n	8004b20 <ADC_DMAConvCplt+0x58>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ad4:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8004ada:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004adc:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ade:	688a      	ldr	r2, [r1, #8]
 8004ae0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004ae4:	d118      	bne.n	8004b18 <ADC_DMAConvCplt+0x50>
 8004ae6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004aea:	b9aa      	cbnz	r2, 8004b18 <ADC_DMAConvCplt+0x50>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004aec:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004aee:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8004af2:	d002      	beq.n	8004afa <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004af4:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004af6:	0550      	lsls	r0, r2, #21
 8004af8:	d40e      	bmi.n	8004b18 <ADC_DMAConvCplt+0x50>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004afa:	684a      	ldr	r2, [r1, #4]
 8004afc:	f022 0220 	bic.w	r2, r2, #32
 8004b00:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b08:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b0c:	04d2      	lsls	r2, r2, #19
 8004b0e:	d403      	bmi.n	8004b18 <ADC_DMAConvCplt+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff ffd3 	bl	8004ac4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004b1e:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	4718      	bx	r3
 8004b26:	bf00      	nop

08004b28 <HAL_ADC_ConvHalfCpltCallback>:
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop

08004b2c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b2c:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004b30:	f7ff fffa 	bl	8004b28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b34:	bd08      	pop	{r3, pc}
 8004b36:	bf00      	nop

08004b38 <HAL_ADC_ErrorCallback>:
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop

08004b3c <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b3c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8004b3e:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b46:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b48:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004b4a:	f043 0304 	orr.w	r3, r3, #4
 8004b4e:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b50:	f7ff fff2 	bl	8004b38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b54:	bd08      	pop	{r3, pc}
 8004b56:	bf00      	nop

08004b58 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8004b58:	2300      	movs	r3, #0
{
 8004b5a:	b530      	push	{r4, r5, lr}
 8004b5c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8004b5e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004b60:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	f000 80aa 	beq.w	8004cbe <HAL_ADC_ConfigChannel+0x166>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 8004b70:	684b      	ldr	r3, [r1, #4]
 8004b72:	4602      	mov	r2, r0
 8004b74:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR5,
 8004b76:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7)
 8004b78:	d924      	bls.n	8004bc4 <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13)
 8004b7a:	2b0c      	cmp	r3, #12
 8004b7c:	d866      	bhi.n	8004c4c <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SQR4,
 8004b7e:	f04f 0c1f 	mov.w	ip, #31
 8004b82:	680c      	ldr	r4, [r1, #0]
 8004b84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b88:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8004b8a:	3b23      	subs	r3, #35	; 0x23
 8004b8c:	fa04 fe03 	lsl.w	lr, r4, r3
 8004b90:	fa0c f303 	lsl.w	r3, ip, r3
 8004b94:	ea25 0303 	bic.w	r3, r5, r3
 8004b98:	ea43 030e 	orr.w	r3, r3, lr
 8004b9c:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel < ADC_CHANNEL_10)
 8004b9e:	2c09      	cmp	r4, #9
 8004ba0:	d822      	bhi.n	8004be8 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR3,
 8004ba2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8004ba6:	2407      	movs	r4, #7
 8004ba8:	6943      	ldr	r3, [r0, #20]
 8004baa:	6889      	ldr	r1, [r1, #8]
 8004bac:	40ac      	lsls	r4, r5
 8004bae:	40a9      	lsls	r1, r5
 8004bb0:	ea23 0404 	bic.w	r4, r3, r4
 8004bb4:	430c      	orrs	r4, r1
 8004bb6:	6144      	str	r4, [r0, #20]
  __HAL_UNLOCK(hadc);
 8004bb8:	2300      	movs	r3, #0
  return tmp_hal_status;
 8004bba:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8004bbc:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
}
 8004bc0:	b003      	add	sp, #12
 8004bc2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR5,
 8004bc4:	f04f 0c1f 	mov.w	ip, #31
 8004bc8:	680c      	ldr	r4, [r1, #0]
 8004bca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004bce:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004bd0:	3b05      	subs	r3, #5
 8004bd2:	fa04 fe03 	lsl.w	lr, r4, r3
 8004bd6:	fa0c f303 	lsl.w	r3, ip, r3
 8004bda:	ea25 0303 	bic.w	r3, r5, r3
 8004bde:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel < ADC_CHANNEL_10)
 8004be2:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SQR5,
 8004be4:	6403      	str	r3, [r0, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 8004be6:	d9dc      	bls.n	8004ba2 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8004be8:	2c13      	cmp	r4, #19
 8004bea:	d844      	bhi.n	8004c76 <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 8004bec:	f04f 0c07 	mov.w	ip, #7
 8004bf0:	688d      	ldr	r5, [r1, #8]
 8004bf2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8004bf6:	6903      	ldr	r3, [r0, #16]
 8004bf8:	391e      	subs	r1, #30
 8004bfa:	408d      	lsls	r5, r1
 8004bfc:	fa0c f101 	lsl.w	r1, ip, r1
 8004c00:	ea23 0301 	bic.w	r3, r3, r1
 8004c04:	432b      	orrs	r3, r5
 8004c06:	6103      	str	r3, [r0, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004c08:	f1a4 0310 	sub.w	r3, r4, #16
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d8d3      	bhi.n	8004bb8 <HAL_ADC_ConfigChannel+0x60>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8004c10:	4b34      	ldr	r3, [pc, #208]	; (8004ce4 <HAL_ADC_ConfigChannel+0x18c>)
 8004c12:	6859      	ldr	r1, [r3, #4]
 8004c14:	0209      	lsls	r1, r1, #8
 8004c16:	d4cf      	bmi.n	8004bb8 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8004c18:	6859      	ldr	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c1a:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8004c1c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8004c20:	6059      	str	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c22:	d1c9      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004c24:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <HAL_ADC_ConfigChannel+0x190>)
 8004c26:	4931      	ldr	r1, [pc, #196]	; (8004cec <HAL_ADC_ConfigChannel+0x194>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	fba1 1303 	umull	r1, r3, r1, r3
 8004c2e:	0c9b      	lsrs	r3, r3, #18
 8004c30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8004c38:	9b01      	ldr	r3, [sp, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0bc      	beq.n	8004bb8 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8004c3e:	9b01      	ldr	r3, [sp, #4]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8004c44:	9b01      	ldr	r3, [sp, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f9      	bne.n	8004c3e <HAL_ADC_ConfigChannel+0xe6>
 8004c4a:	e7b5      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x60>
  else if (sConfig->Rank < 19)
 8004c4c:	2b12      	cmp	r3, #18
 8004c4e:	d925      	bls.n	8004c9c <HAL_ADC_ConfigChannel+0x144>
  else if (sConfig->Rank < 25)
 8004c50:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 8004c52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 8004c56:	d835      	bhi.n	8004cc4 <HAL_ADC_ConfigChannel+0x16c>
    MODIFY_REG(hadc->Instance->SQR2,
 8004c58:	f04f 0c1f 	mov.w	ip, #31
 8004c5c:	680c      	ldr	r4, [r1, #0]
 8004c5e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8004c60:	3b5f      	subs	r3, #95	; 0x5f
 8004c62:	fa04 fe03 	lsl.w	lr, r4, r3
 8004c66:	fa0c f303 	lsl.w	r3, ip, r3
 8004c6a:	ea25 0303 	bic.w	r3, r5, r3
 8004c6e:	ea43 030e 	orr.w	r3, r3, lr
 8004c72:	6343      	str	r3, [r0, #52]	; 0x34
 8004c74:	e793      	b.n	8004b9e <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8004c76:	2c1a      	cmp	r4, #26
 8004c78:	d80d      	bhi.n	8004c96 <HAL_ADC_ConfigChannel+0x13e>
    MODIFY_REG(hadc->Instance->SMPR1,
 8004c7a:	2507      	movs	r5, #7
 8004c7c:	6889      	ldr	r1, [r1, #8]
 8004c7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004c82:	68c3      	ldr	r3, [r0, #12]
 8004c84:	3c3c      	subs	r4, #60	; 0x3c
 8004c86:	40a1      	lsls	r1, r4
 8004c88:	fa05 f404 	lsl.w	r4, r5, r4
 8004c8c:	ea23 0304 	bic.w	r3, r3, r4
 8004c90:	430b      	orrs	r3, r1
 8004c92:	60c3      	str	r3, [r0, #12]
 8004c94:	e790      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x60>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8004c96:	bf00      	nop
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004c98:	680c      	ldr	r4, [r1, #0]
 8004c9a:	e7b5      	b.n	8004c08 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR3,
 8004c9c:	f04f 0c1f 	mov.w	ip, #31
 8004ca0:	680c      	ldr	r4, [r1, #0]
 8004ca2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ca6:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8004ca8:	3b41      	subs	r3, #65	; 0x41
 8004caa:	fa04 fe03 	lsl.w	lr, r4, r3
 8004cae:	fa0c f303 	lsl.w	r3, ip, r3
 8004cb2:	ea25 0303 	bic.w	r3, r5, r3
 8004cb6:	ea43 030e 	orr.w	r3, r3, lr
 8004cba:	6383      	str	r3, [r0, #56]	; 0x38
 8004cbc:	e76f      	b.n	8004b9e <HAL_ADC_ConfigChannel+0x46>
  __HAL_LOCK(hadc);
 8004cbe:	2002      	movs	r0, #2
}
 8004cc0:	b003      	add	sp, #12
 8004cc2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR1,
 8004cc4:	f04f 0c1f 	mov.w	ip, #31
 8004cc8:	680c      	ldr	r4, [r1, #0]
 8004cca:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8004ccc:	3b7d      	subs	r3, #125	; 0x7d
 8004cce:	fa04 fe03 	lsl.w	lr, r4, r3
 8004cd2:	fa0c f303 	lsl.w	r3, ip, r3
 8004cd6:	ea25 0303 	bic.w	r3, r5, r3
 8004cda:	ea43 030e 	orr.w	r3, r3, lr
 8004cde:	6303      	str	r3, [r0, #48]	; 0x30
 8004ce0:	e75d      	b.n	8004b9e <HAL_ADC_ConfigChannel+0x46>
 8004ce2:	bf00      	nop
 8004ce4:	40012700 	.word	0x40012700
 8004ce8:	20000010 	.word	0x20000010
 8004cec:	431bde83 	.word	0x431bde83

08004cf0 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 8004cf0:	2300      	movs	r3, #0
{
 8004cf2:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004cf4:	6802      	ldr	r2, [r0, #0]
{
 8004cf6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8004cf8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004cfa:	6813      	ldr	r3, [r2, #0]
 8004cfc:	0659      	lsls	r1, r3, #25
 8004cfe:	d429      	bmi.n	8004d54 <ADC_Enable+0x64>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004d00:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <ADC_Enable+0x84>)
 8004d02:	4604      	mov	r4, r0
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	481c      	ldr	r0, [pc, #112]	; (8004d78 <ADC_Enable+0x88>)
    __HAL_ADC_ENABLE(hadc);
 8004d08:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004d0a:	fba0 0303 	umull	r0, r3, r0, r3
 8004d0e:	0c9b      	lsrs	r3, r3, #18
 8004d10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8004d14:	f041 0101 	orr.w	r1, r1, #1
 8004d18:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004d1a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8004d1c:	9b01      	ldr	r3, [sp, #4]
 8004d1e:	b12b      	cbz	r3, 8004d2c <ADC_Enable+0x3c>
      wait_loop_index--;
 8004d20:	9b01      	ldr	r3, [sp, #4]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8004d26:	9b01      	ldr	r3, [sp, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f9      	bne.n	8004d20 <ADC_Enable+0x30>
    tickstart = HAL_GetTick();    
 8004d2c:	f7ff fd54 	bl	80047d8 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004d30:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();    
 8004d32:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	065a      	lsls	r2, r3, #25
 8004d38:	d40c      	bmi.n	8004d54 <ADC_Enable+0x64>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8004d3a:	f7ff fd4d 	bl	80047d8 <HAL_GetTick>
 8004d3e:	1b43      	subs	r3, r0, r5
 8004d40:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004d42:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8004d44:	d903      	bls.n	8004d4e <ADC_Enable+0x5e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004d4c:	d005      	beq.n	8004d5a <ADC_Enable+0x6a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	065b      	lsls	r3, r3, #25
 8004d52:	d5f2      	bpl.n	8004d3a <ADC_Enable+0x4a>
  return HAL_OK;
 8004d54:	2000      	movs	r0, #0
}
 8004d56:	b003      	add	sp, #12
 8004d58:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8004d5a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 8004d5e:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d62:	f043 0310 	orr.w	r3, r3, #16
 8004d66:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d68:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004d6a:	4303      	orrs	r3, r0
 8004d6c:	6523      	str	r3, [r4, #80]	; 0x50
}
 8004d6e:	b003      	add	sp, #12
 8004d70:	bd30      	pop	{r4, r5, pc}
 8004d72:	bf00      	nop
 8004d74:	20000010 	.word	0x20000010
 8004d78:	431bde83 	.word	0x431bde83

08004d7c <HAL_ADC_Start_DMA>:
{
 8004d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8004d80:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 8004d84:	2d01      	cmp	r5, #1
 8004d86:	d04c      	beq.n	8004e22 <HAL_ADC_Start_DMA+0xa6>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8004d8e:	4604      	mov	r4, r0
 8004d90:	4688      	mov	r8, r1
 8004d92:	4617      	mov	r7, r2
 8004d94:	f7ff ffac 	bl	8004cf0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8004d98:	4605      	mov	r5, r0
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d13e      	bne.n	8004e1c <HAL_ADC_Start_DMA+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 8004d9e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004da0:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8004da2:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8004da6:	f020 0001 	bic.w	r0, r0, #1
 8004daa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8004dae:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004db0:	6873      	ldr	r3, [r6, #4]
 8004db2:	055b      	lsls	r3, r3, #21
 8004db4:	d505      	bpl.n	8004dc2 <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004db6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004db8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dc0:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004dc8:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dcc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004dce:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dd0:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004dd4:	bf18      	it	ne
 8004dd6:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004dd8:	4642      	mov	r2, r8
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004dda:	bf18      	it	ne
 8004ddc:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8004de0:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004de2:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004de4:	4f11      	ldr	r7, [pc, #68]	; (8004e2c <HAL_ADC_Start_DMA+0xb0>)
 8004de6:	6287      	str	r7, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004de8:	4f11      	ldr	r7, [pc, #68]	; (8004e30 <HAL_ADC_Start_DMA+0xb4>)
 8004dea:	62c7      	str	r7, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004dec:	4f11      	ldr	r7, [pc, #68]	; (8004e34 <HAL_ADC_Start_DMA+0xb8>)
 8004dee:	6307      	str	r7, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004df0:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004df2:	6871      	ldr	r1, [r6, #4]
 8004df4:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8004df8:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004dfa:	68b1      	ldr	r1, [r6, #8]
 8004dfc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004e00:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e02:	f106 0158 	add.w	r1, r6, #88	; 0x58
 8004e06:	f000 f98d 	bl	8005124 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004e12:	d103      	bne.n	8004e1c <HAL_ADC_Start_DMA+0xa0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e1a:	609a      	str	r2, [r3, #8]
}
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 8004e22:	2502      	movs	r5, #2
}
 8004e24:	4628      	mov	r0, r5
 8004e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e2a:	bf00      	nop
 8004e2c:	08004ac9 	.word	0x08004ac9
 8004e30:	08004b2d 	.word	0x08004b2d
 8004e34:	08004b3d 	.word	0x08004b3d

08004e38 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e38:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e3c:	4906      	ldr	r1, [pc, #24]	; (8004e58 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004e3e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e40:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004e42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e46:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004e54:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004e56:	4770      	bx	lr
 8004e58:	e000ed00 	.word	0xe000ed00

08004e5c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ed0 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e5e:	b500      	push	{lr}
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e66:	f1c3 0e07 	rsb	lr, r3, #7
 8004e6a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e6e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e72:	bf28      	it	cs
 8004e74:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e78:	f1bc 0f06 	cmp.w	ip, #6
 8004e7c:	d91b      	bls.n	8004eb6 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e7e:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e82:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e84:	fa0c fc03 	lsl.w	ip, ip, r3
 8004e88:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e8c:	f04f 3cff 	mov.w	ip, #4294967295
 8004e90:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004e94:	ea21 010c 	bic.w	r1, r1, ip
 8004e98:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004e9a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e9c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004ea0:	db0c      	blt.n	8004ebc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea2:	0109      	lsls	r1, r1, #4
 8004ea4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004ea8:	b2c9      	uxtb	r1, r1
 8004eaa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004eae:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004eb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004eb6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eb8:	4613      	mov	r3, r2
 8004eba:	e7e7      	b.n	8004e8c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_NVIC_SetPriority+0x78>)
 8004ebe:	f000 000f 	and.w	r0, r0, #15
 8004ec2:	0109      	lsls	r1, r1, #4
 8004ec4:	b2c9      	uxtb	r1, r1
 8004ec6:	4403      	add	r3, r0
 8004ec8:	7619      	strb	r1, [r3, #24]
 8004eca:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ece:	bf00      	nop
 8004ed0:	e000ed00 	.word	0xe000ed00
 8004ed4:	e000ecfc 	.word	0xe000ecfc

08004ed8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	db07      	blt.n	8004eec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004edc:	2301      	movs	r3, #1
 8004ede:	f000 011f 	and.w	r1, r0, #31
 8004ee2:	4a03      	ldr	r2, [pc, #12]	; (8004ef0 <HAL_NVIC_EnableIRQ+0x18>)
 8004ee4:	0940      	lsrs	r0, r0, #5
 8004ee6:	408b      	lsls	r3, r1
 8004ee8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	e000e100 	.word	0xe000e100

08004ef4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	db0d      	blt.n	8004f14 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ef8:	2201      	movs	r2, #1
 8004efa:	4907      	ldr	r1, [pc, #28]	; (8004f18 <HAL_NVIC_DisableIRQ+0x24>)
 8004efc:	0943      	lsrs	r3, r0, #5
 8004efe:	f000 001f 	and.w	r0, r0, #31
 8004f02:	3320      	adds	r3, #32
 8004f04:	fa02 f000 	lsl.w	r0, r2, r0
 8004f08:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004f10:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	e000e100 	.word	0xe000e100

08004f1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f1c:	3801      	subs	r0, #1
 8004f1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004f22:	d20f      	bcs.n	8004f44 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f28:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f2c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f2e:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f30:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f32:	4c05      	ldr	r4, [pc, #20]	; (8004f48 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f34:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f36:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f3a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f3c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8004f3e:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f40:	6119      	str	r1, [r3, #16]
 8004f42:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004f44:	2001      	movs	r0, #1
 8004f46:	4770      	bx	lr
 8004f48:	e000ed00 	.word	0xe000ed00

08004f4c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8004f4c:	b188      	cbz	r0, 8004f72 <HAL_DAC_Init+0x26>
{
 8004f4e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004f50:	7903      	ldrb	r3, [r0, #4]
 8004f52:	4604      	mov	r4, r0
 8004f54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f58:	b13b      	cbz	r3, 8004f6a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f5a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f5c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f5e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f60:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f62:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004f64:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8004f66:	4618      	mov	r0, r3
}
 8004f68:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004f6a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004f6c:	f7ff f982 	bl	8004274 <HAL_DAC_MspInit>
 8004f70:	e7f3      	b.n	8004f5a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8004f72:	2001      	movs	r0, #1
}
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop

08004f78 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f78:	7942      	ldrb	r2, [r0, #5]
 8004f7a:	2a01      	cmp	r2, #1
 8004f7c:	d02a      	beq.n	8004fd4 <HAL_DAC_Start+0x5c>
{
 8004f7e:	b410      	push	{r4}
 8004f80:	4603      	mov	r3, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f82:	2402      	movs	r4, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004f84:	2201      	movs	r2, #1
 8004f86:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f88:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8004f8a:	6804      	ldr	r4, [r0, #0]
 8004f8c:	f001 0c10 	and.w	ip, r1, #16
 8004f90:	fa02 f20c 	lsl.w	r2, r2, ip
 8004f94:	4322      	orrs	r2, r4
 8004f96:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 8004f98:	b979      	cbnz	r1, 8004fba <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004f9a:	6802      	ldr	r2, [r0, #0]
 8004f9c:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8004fa0:	2a3c      	cmp	r2, #60	; 0x3c
 8004fa2:	d103      	bne.n	8004fac <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004fa4:	6842      	ldr	r2, [r0, #4]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004fac:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8004fae:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8004fb0:	715a      	strb	r2, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8004fb2:	7119      	strb	r1, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004fb4:	4610      	mov	r0, r2
}
 8004fb6:	bc10      	pop	{r4}
 8004fb8:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004fba:	223c      	movs	r2, #60	; 0x3c
 8004fbc:	6801      	ldr	r1, [r0, #0]
 8004fbe:	fa02 fc0c 	lsl.w	ip, r2, ip
 8004fc2:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8004fc6:	4561      	cmp	r1, ip
 8004fc8:	d1f0      	bne.n	8004fac <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004fca:	6842      	ldr	r2, [r0, #4]
 8004fcc:	f042 0202 	orr.w	r2, r2, #2
 8004fd0:	6042      	str	r2, [r0, #4]
 8004fd2:	e7eb      	b.n	8004fac <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 8004fd4:	2002      	movs	r0, #2
}
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004fd8:	b410      	push	{r4}
  __IO uint32_t tmp = 0UL;
 8004fda:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004fdc:	6800      	ldr	r0, [r0, #0]
{
 8004fde:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8004fe0:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8004fe2:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8004fe4:	b949      	cbnz	r1, 8004ffa <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004fe6:	9901      	ldr	r1, [sp, #4]
 8004fe8:	3108      	adds	r1, #8
 8004fea:	440a      	add	r2, r1
 8004fec:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
}
 8004fee:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8004ff0:	9a01      	ldr	r2, [sp, #4]
 8004ff2:	6013      	str	r3, [r2, #0]
}
 8004ff4:	b003      	add	sp, #12
 8004ff6:	bc10      	pop	{r4}
 8004ff8:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004ffa:	9901      	ldr	r1, [sp, #4]
 8004ffc:	3114      	adds	r1, #20
 8004ffe:	440a      	add	r2, r1
 8005000:	9201      	str	r2, [sp, #4]
 8005002:	e7f4      	b.n	8004fee <HAL_DAC_SetValue+0x16>

08005004 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005004:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005006:	7940      	ldrb	r0, [r0, #5]
 8005008:	2801      	cmp	r0, #1
 800500a:	d022      	beq.n	8005052 <HAL_DAC_ConfigChannel+0x4e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800500c:	2002      	movs	r0, #2
{
 800500e:	b570      	push	{r4, r5, r6, lr}
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005010:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005014:	f640 76fe 	movw	r6, #4094	; 0xffe

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005018:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 800501c:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800501e:	7118      	strb	r0, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8005020:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005022:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005026:	f002 0210 	and.w	r2, r2, #16
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800502a:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800502c:	4096      	lsls	r6, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800502e:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005032:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 = hdac->Instance->CR;
 8005036:	6821      	ldr	r1, [r4, #0]

  /* Return function status */
  return HAL_OK;
 8005038:	4670      	mov	r0, lr
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800503a:	ea21 0106 	bic.w	r1, r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800503e:	430a      	orrs	r2, r1
  hdac->Instance->CR = tmpreg1;
 8005040:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005042:	6822      	ldr	r2, [r4, #0]
 8005044:	ea22 020c 	bic.w	r2, r2, ip
 8005048:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800504a:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 800504c:	f883 e005 	strb.w	lr, [r3, #5]
}
 8005050:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 8005052:	2002      	movs	r0, #2
}
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop

08005058 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005058:	b370      	cbz	r0, 80050b8 <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800505a:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800505c:	2202      	movs	r2, #2
{
 800505e:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005060:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005064:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005066:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 800506c:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800506e:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8005070:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
  tmp |=  hdma->Init.Direction        |
 8005074:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8005078:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800507a:	4910      	ldr	r1, [pc, #64]	; (80050bc <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800507c:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800507e:	4d10      	ldr	r5, [pc, #64]	; (80050c0 <HAL_DMA_Init+0x68>)
 8005080:	4401      	add	r1, r0
 8005082:	fba5 5101 	umull	r5, r1, r5, r1
 8005086:	0909      	lsrs	r1, r1, #4
 8005088:	0089      	lsls	r1, r1, #2
 800508a:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800508c:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800508e:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005092:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005094:	6959      	ldr	r1, [r3, #20]
 8005096:	430a      	orrs	r2, r1
 8005098:	6999      	ldr	r1, [r3, #24]
 800509a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800509c:	69d9      	ldr	r1, [r3, #28]
 800509e:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 80050a0:	4908      	ldr	r1, [pc, #32]	; (80050c4 <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 80050a2:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 80050a6:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 80050a8:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050aa:	639c      	str	r4, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80050ac:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80050b0:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 80050b4:	4620      	mov	r0, r4
}
 80050b6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80050b8:	2001      	movs	r0, #1
}
 80050ba:	4770      	bx	lr
 80050bc:	bffd9ff8 	.word	0xbffd9ff8
 80050c0:	cccccccd 	.word	0xcccccccd
 80050c4:	40026000 	.word	0x40026000

080050c8 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80050c8:	b320      	cbz	r0, 8005114 <HAL_DMA_DeInit+0x4c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80050ca:	4603      	mov	r3, r0

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050cc:	2101      	movs	r1, #1
{
 80050ce:	b430      	push	{r4, r5}
  hdma->Instance->CCR = 0U;
 80050d0:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80050d2:	6805      	ldr	r5, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80050d4:	4810      	ldr	r0, [pc, #64]	; (8005118 <HAL_DMA_DeInit+0x50>)
  __HAL_DMA_DISABLE(hdma);
 80050d6:	682a      	ldr	r2, [r5, #0]
 80050d8:	f022 0201 	bic.w	r2, r2, #1
 80050dc:	602a      	str	r2, [r5, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80050de:	4a0f      	ldr	r2, [pc, #60]	; (800511c <HAL_DMA_DeInit+0x54>)
 80050e0:	442a      	add	r2, r5
 80050e2:	fba0 0202 	umull	r0, r2, r0, r2
 80050e6:	0912      	lsrs	r2, r2, #4
 80050e8:	0092      	lsls	r2, r2, #2
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050ec:	f002 021c 	and.w	r2, r2, #28
 80050f0:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 80050f4:	490a      	ldr	r1, [pc, #40]	; (8005120 <HAL_DMA_DeInit+0x58>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 80050f6:	4620      	mov	r0, r4
  hdma->DmaBaseAddress = DMA1;
 80050f8:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = 0U;
 80050fa:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050fc:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050fe:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdma);
 8005100:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 8005104:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 8005108:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 800510c:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
}
 8005110:	bc30      	pop	{r4, r5}
 8005112:	4770      	bx	lr
    return HAL_ERROR;
 8005114:	2001      	movs	r0, #1
}
 8005116:	4770      	bx	lr
 8005118:	cccccccd 	.word	0xcccccccd
 800511c:	bffd9ff8 	.word	0xbffd9ff8
 8005120:	40026000 	.word	0x40026000

08005124 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005124:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005126:	f890 0020 	ldrb.w	r0, [r0, #32]
 800512a:	2801      	cmp	r0, #1
 800512c:	d042      	beq.n	80051b4 <HAL_DMA_Start_IT+0x90>
{
 800512e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8005130:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8005132:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8005136:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800513a:	42a0      	cmp	r0, r4
 800513c:	fa5f fe80 	uxtb.w	lr, r0
 8005140:	d004      	beq.n	800514c <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005142:	2300      	movs	r3, #0
 8005144:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005148:	2002      	movs	r0, #2
  }
  return status;
}
 800514a:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800514c:	2002      	movs	r0, #2
 800514e:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005152:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8005154:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005158:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800515c:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800515e:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8005162:	f025 0501 	bic.w	r5, r5, #1
 8005166:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005168:	f000 001c 	and.w	r0, r0, #28
 800516c:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8005170:	fa0e f000 	lsl.w	r0, lr, r0
 8005174:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005176:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005178:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800517c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800517e:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005182:	bf0b      	itete	eq
 8005184:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005186:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005188:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800518a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800518c:	b14b      	cbz	r3, 80051a2 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	f043 030e 	orr.w	r3, r3, #14
 8005194:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005196:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005198:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	6023      	str	r3, [r4, #0]
}
 80051a0:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	f023 0304 	bic.w	r3, r3, #4
 80051a8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	f043 030a 	orr.w	r3, r3, #10
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	e7f0      	b.n	8005196 <HAL_DMA_Start_IT+0x72>
  __HAL_LOCK(hdma);
 80051b4:	2002      	movs	r0, #2
}
 80051b6:	4770      	bx	lr

080051b8 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051b8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80051bc:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051be:	2a02      	cmp	r2, #2
 80051c0:	d006      	beq.n	80051d0 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051c2:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80051c4:	2200      	movs	r2, #0
    return HAL_ERROR;
 80051c6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051c8:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80051ca:	f883 2020 	strb.w	r2, [r3, #32]
}
 80051ce:	4770      	bx	lr
{
 80051d0:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051d2:	f04f 0e01 	mov.w	lr, #1
    __HAL_UNLOCK(hdma);
 80051d6:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051da:	6802      	ldr	r2, [r0, #0]
 80051dc:	6811      	ldr	r1, [r2, #0]
 80051de:	f021 010e 	bic.w	r1, r1, #14
 80051e2:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80051e4:	6811      	ldr	r1, [r2, #0]
 80051e6:	f021 0101 	bic.w	r1, r1, #1
 80051ea:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051ec:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 80051f0:	f002 021c 	and.w	r2, r2, #28
 80051f4:	fa0e f202 	lsl.w	r2, lr, r2
 80051f8:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80051fa:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80051fe:	f883 c020 	strb.w	ip, [r3, #32]
    return status;
 8005202:	4660      	mov	r0, ip
}
 8005204:	f85d fb04 	ldr.w	pc, [sp], #4

08005208 <HAL_DMA_Abort_IT>:
{
 8005208:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800520a:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800520e:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005210:	2a02      	cmp	r2, #2
 8005212:	d003      	beq.n	800521c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005214:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8005216:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005218:	639a      	str	r2, [r3, #56]	; 0x38
}
 800521a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800521c:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800521e:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005222:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005224:	6c02      	ldr	r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005226:	f024 040e 	bic.w	r4, r4, #14
 800522a:	600c      	str	r4, [r1, #0]
    __HAL_UNLOCK(hdma);
 800522c:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 800522e:	680d      	ldr	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005230:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 8005234:	f025 0501 	bic.w	r5, r5, #1
 8005238:	600d      	str	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800523a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 800523c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800523e:	fa0c f202 	lsl.w	r2, ip, r2
 8005242:	606a      	str	r2, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005244:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8005248:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800524c:	b111      	cbz	r1, 8005254 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 800524e:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8005250:	4620      	mov	r0, r4
}
 8005252:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005254:	4608      	mov	r0, r1
}
 8005256:	bd38      	pop	{r3, r4, r5, pc}

08005258 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005258:	2204      	movs	r2, #4
{
 800525a:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800525c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800525e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005260:	f003 031c 	and.w	r3, r3, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005264:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005266:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005268:	409a      	lsls	r2, r3
 800526a:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 800526c:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800526e:	d00e      	beq.n	800528e <HAL_DMA_IRQHandler+0x36>
 8005270:	f014 0f04 	tst.w	r4, #4
 8005274:	d00b      	beq.n	800528e <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005276:	682b      	ldr	r3, [r5, #0]
 8005278:	069b      	lsls	r3, r3, #26
 800527a:	d403      	bmi.n	8005284 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800527c:	682b      	ldr	r3, [r5, #0]
 800527e:	f023 0304 	bic.w	r3, r3, #4
 8005282:	602b      	str	r3, [r5, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005284:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005286:	6072      	str	r2, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005288:	b1cb      	cbz	r3, 80052be <HAL_DMA_IRQHandler+0x66>
}
 800528a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800528c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800528e:	2202      	movs	r2, #2
 8005290:	409a      	lsls	r2, r3
 8005292:	420a      	tst	r2, r1
 8005294:	d015      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x6a>
 8005296:	f014 0f02 	tst.w	r4, #2
 800529a:	d012      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	0699      	lsls	r1, r3, #26
 80052a0:	d406      	bmi.n	80052b0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052a2:	682b      	ldr	r3, [r5, #0]
 80052a4:	f023 030a 	bic.w	r3, r3, #10
 80052a8:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80052b0:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 80052b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80052b4:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80052b6:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e5      	bne.n	800528a <HAL_DMA_IRQHandler+0x32>
}
 80052be:	bc70      	pop	{r4, r5, r6}
 80052c0:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80052c2:	2208      	movs	r2, #8
 80052c4:	409a      	lsls	r2, r3
 80052c6:	420a      	tst	r2, r1
 80052c8:	d0f9      	beq.n	80052be <HAL_DMA_IRQHandler+0x66>
 80052ca:	0722      	lsls	r2, r4, #28
 80052cc:	d5f7      	bpl.n	80052be <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052ce:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 80052d0:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052d2:	f022 020e 	bic.w	r2, r2, #14
 80052d6:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052d8:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 80052da:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052e2:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80052e4:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 80052e8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 80052ec:	2900      	cmp	r1, #0
 80052ee:	d0e6      	beq.n	80052be <HAL_DMA_IRQHandler+0x66>
}
 80052f0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80052f2:	4708      	bx	r1

080052f4 <HAL_EXTI_SetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d041      	beq.n	800537c <HAL_EXTI_SetConfigLine+0x88>
 80052f8:	2900      	cmp	r1, #0
 80052fa:	d03f      	beq.n	800537c <HAL_EXTI_SetConfigLine+0x88>
  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
  maskline = (1uL << linepos);
 80052fc:	f04f 0c01 	mov.w	ip, #1
  hexti->Line = pExtiConfig->Line;
 8005300:	680b      	ldr	r3, [r1, #0]
{
 8005302:	b430      	push	{r4, r5}
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8005304:	f003 021f 	and.w	r2, r3, #31
  hexti->Line = pExtiConfig->Line;
 8005308:	6003      	str	r3, [r0, #0]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 800530a:	0198      	lsls	r0, r3, #6
  maskline = (1uL << linepos);
 800530c:	fa0c fc02 	lsl.w	ip, ip, r2
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8005310:	d519      	bpl.n	8005346 <HAL_EXTI_SetConfigLine+0x52>

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
    {
      EXTI->RTSR |= maskline;
 8005312:	4d25      	ldr	r5, [pc, #148]	; (80053a8 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8005314:	6888      	ldr	r0, [r1, #8]
      EXTI->RTSR |= maskline;
 8005316:	68ac      	ldr	r4, [r5, #8]
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8005318:	f010 0f01 	tst.w	r0, #1
      EXTI->RTSR |= maskline;
 800531c:	bf14      	ite	ne
 800531e:	ea44 040c 	orrne.w	r4, r4, ip
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8005322:	ea24 040c 	biceq.w	r4, r4, ip
 8005326:	60ac      	str	r4, [r5, #8]

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
    {
      EXTI->FTSR |= maskline;
 8005328:	4c1f      	ldr	r4, [pc, #124]	; (80053a8 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 800532a:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR |= maskline;
 800532e:	68e0      	ldr	r0, [r4, #12]
 8005330:	bf14      	ite	ne
 8005332:	ea40 000c 	orrne.w	r0, r0, ip
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8005336:	ea20 000c 	biceq.w	r0, r0, ip
 800533a:	60e0      	str	r0, [r4, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 800533c:	f003 60c0 	and.w	r0, r3, #100663296	; 0x6000000
 8005340:	f1b0 6fc0 	cmp.w	r0, #100663296	; 0x6000000
 8005344:	d01c      	beq.n	8005380 <HAL_EXTI_SetConfigLine+0x8c>

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
  {
    EXTI->IMR |= maskline;
 8005346:	4a18      	ldr	r2, [pc, #96]	; (80053a8 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8005348:	6848      	ldr	r0, [r1, #4]
    EXTI->IMR |= maskline;
 800534a:	6813      	ldr	r3, [r2, #0]
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 800534c:	07c1      	lsls	r1, r0, #31
    EXTI->IMR |= maskline;
 800534e:	bf4c      	ite	mi
 8005350:	ea43 030c 	orrmi.w	r3, r3, ip
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8005354:	ea23 030c 	bicpl.w	r3, r3, ip
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8005358:	f010 0002 	ands.w	r0, r0, #2
    EXTI->IMR &= ~maskline;
 800535c:	6013      	str	r3, [r2, #0]
  {
    EXTI->EMR |= maskline;
 800535e:	4a12      	ldr	r2, [pc, #72]	; (80053a8 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8005360:	d105      	bne.n	800536e <HAL_EXTI_SetConfigLine+0x7a>
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
}
 8005362:	bc30      	pop	{r4, r5}
    EXTI->EMR &= ~maskline;
 8005364:	6853      	ldr	r3, [r2, #4]
 8005366:	ea23 030c 	bic.w	r3, r3, ip
 800536a:	6053      	str	r3, [r2, #4]
}
 800536c:	4770      	bx	lr
    EXTI->EMR |= maskline;
 800536e:	6853      	ldr	r3, [r2, #4]
  return HAL_OK;
 8005370:	2000      	movs	r0, #0
}
 8005372:	bc30      	pop	{r4, r5}
    EXTI->EMR |= maskline;
 8005374:	ea43 030c 	orr.w	r3, r3, ip
 8005378:	6053      	str	r3, [r2, #4]
}
 800537a:	4770      	bx	lr
    return HAL_ERROR;
 800537c:	2001      	movs	r0, #1
}
 800537e:	4770      	bx	lr
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005380:	250f      	movs	r5, #15
 8005382:	f002 021c 	and.w	r2, r2, #28
 8005386:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800538a:	68c8      	ldr	r0, [r1, #12]
 800538c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005390:	f003 0303 	and.w	r3, r3, #3
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8005394:	6894      	ldr	r4, [r2, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005396:	009b      	lsls	r3, r3, #2
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005398:	4098      	lsls	r0, r3
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800539a:	fa05 f303 	lsl.w	r3, r5, r3
 800539e:	ea24 0303 	bic.w	r3, r4, r3
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80053a2:	4318      	orrs	r0, r3
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 80053a4:	6090      	str	r0, [r2, #8]
 80053a6:	e7ce      	b.n	8005346 <HAL_EXTI_SetConfigLine+0x52>
 80053a8:	40010400 	.word	0x40010400

080053ac <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80053ac:	2301      	movs	r3, #1
 80053ae:	6802      	ldr	r2, [r0, #0]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 80053b0:	4902      	ldr	r1, [pc, #8]	; (80053bc <HAL_EXTI_GenerateSWI+0x10>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80053b2:	f002 021f 	and.w	r2, r2, #31
 80053b6:	4093      	lsls	r3, r2
  EXTI->SWIER = maskline;
 80053b8:	610b      	str	r3, [r1, #16]
}
 80053ba:	4770      	bx	lr
 80053bc:	40010400 	.word	0x40010400

080053c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80053c4:	680c      	ldr	r4, [r1, #0]
{
 80053c6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80053c8:	2c00      	cmp	r4, #0
 80053ca:	d07c      	beq.n	80054c6 <HAL_GPIO_Init+0x106>
 80053cc:	f04f 0e00 	mov.w	lr, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80053d0:	f04f 0b01 	mov.w	fp, #1
  uint32_t position = 0x00;
 80053d4:	4673      	mov	r3, lr
 80053d6:	468c      	mov	ip, r1
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80053d8:	fa0b f503 	lsl.w	r5, fp, r3

    if (iocurrent)
 80053dc:	ea15 0a04 	ands.w	sl, r5, r4
 80053e0:	d06b      	beq.n	80054ba <HAL_GPIO_Init+0xfa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053e2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80053e6:	f001 0203 	and.w	r2, r1, #3
 80053ea:	1e57      	subs	r7, r2, #1
 80053ec:	2f01      	cmp	r7, #1
 80053ee:	d96d      	bls.n	80054cc <HAL_GPIO_Init+0x10c>
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053f0:	2a03      	cmp	r2, #3
 80053f2:	f040 80ae 	bne.w	8005552 <HAL_GPIO_Init+0x192>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80053f6:	fa02 f20e 	lsl.w	r2, r2, lr
 80053fa:	43d7      	mvns	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053fc:	6805      	ldr	r5, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053fe:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8005402:	ea07 0705 	and.w	r7, r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005406:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 800540a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800540c:	d055      	beq.n	80054ba <HAL_GPIO_Init+0xfa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800540e:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005410:	4d5a      	ldr	r5, [pc, #360]	; (800557c <HAL_GPIO_Init+0x1bc>)
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8005412:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005416:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8005418:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800541a:	f042 0201 	orr.w	r2, r2, #1
 800541e:	622a      	str	r2, [r5, #32]
 8005420:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8005422:	fa06 f807 	lsl.w	r8, r6, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005426:	f002 0201 	and.w	r2, r2, #1
 800542a:	9203      	str	r2, [sp, #12]
 800542c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800542e:	f023 0203 	bic.w	r2, r3, #3
 8005432:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005436:	4e52      	ldr	r6, [pc, #328]	; (8005580 <HAL_GPIO_Init+0x1c0>)
 8005438:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2];
 800543c:	6895      	ldr	r5, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800543e:	42b0      	cmp	r0, r6
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8005440:	ea25 0508 	bic.w	r5, r5, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005444:	d015      	beq.n	8005472 <HAL_GPIO_Init+0xb2>
 8005446:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800544a:	42b0      	cmp	r0, r6
 800544c:	f000 808c 	beq.w	8005568 <HAL_GPIO_Init+0x1a8>
 8005450:	4e4c      	ldr	r6, [pc, #304]	; (8005584 <HAL_GPIO_Init+0x1c4>)
 8005452:	42b0      	cmp	r0, r6
 8005454:	f000 808c 	beq.w	8005570 <HAL_GPIO_Init+0x1b0>
 8005458:	4e4b      	ldr	r6, [pc, #300]	; (8005588 <HAL_GPIO_Init+0x1c8>)
 800545a:	42b0      	cmp	r0, r6
 800545c:	d07e      	beq.n	800555c <HAL_GPIO_Init+0x19c>
 800545e:	4e4b      	ldr	r6, [pc, #300]	; (800558c <HAL_GPIO_Init+0x1cc>)
 8005460:	42b0      	cmp	r0, r6
 8005462:	bf0c      	ite	eq
 8005464:	f04f 0804 	moveq.w	r8, #4
 8005468:	f04f 0805 	movne.w	r8, #5
 800546c:	fa08 f707 	lsl.w	r7, r8, r7
 8005470:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005472:	ea6f 070a 	mvn.w	r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8005476:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8005478:	4a45      	ldr	r2, [pc, #276]	; (8005590 <HAL_GPIO_Init+0x1d0>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800547a:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 800547c:	6812      	ldr	r2, [r2, #0]
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->IMR = temp;
 800547e:	4d44      	ldr	r5, [pc, #272]	; (8005590 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005480:	bf54      	ite	pl
 8005482:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8005484:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 8005488:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 800548a:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800548c:	038a      	lsls	r2, r1, #14
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->EMR = temp;
 800548e:	4a40      	ldr	r2, [pc, #256]	; (8005590 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005490:	bf54      	ite	pl
 8005492:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8005494:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR = temp;
 8005498:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800549a:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800549c:	02ce      	lsls	r6, r1, #11
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->RTSR = temp;
 800549e:	4a3c      	ldr	r2, [pc, #240]	; (8005590 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80054a0:	bf54      	ite	pl
 80054a2:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 80054a4:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR = temp;
 80054a8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80054aa:	68d2      	ldr	r2, [r2, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054ac:	0289      	lsls	r1, r1, #10
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->FTSR = temp;
 80054ae:	4938      	ldr	r1, [pc, #224]	; (8005590 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80054b0:	bf54      	ite	pl
 80054b2:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 80054b4:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 80054b8:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 80054ba:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80054bc:	fa34 f203 	lsrs.w	r2, r4, r3
 80054c0:	f10e 0e02 	add.w	lr, lr, #2
 80054c4:	d188      	bne.n	80053d8 <HAL_GPIO_Init+0x18>
  }
}
 80054c6:	b005      	add	sp, #20
 80054c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80054cc:	f04f 0903 	mov.w	r9, #3
        temp = GPIOx->OSPEEDR;
 80054d0:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80054d2:	f8dc 700c 	ldr.w	r7, [ip, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80054d6:	fa09 f90e 	lsl.w	r9, r9, lr
 80054da:	ea26 0609 	bic.w	r6, r6, r9
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80054de:	fa07 f70e 	lsl.w	r7, r7, lr
 80054e2:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 80054e4:	6087      	str	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80054e6:	ea6f 0709 	mvn.w	r7, r9
        temp = GPIOx->OTYPER;
 80054ea:	f8d0 9004 	ldr.w	r9, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054ee:	f3c1 1800 	ubfx	r8, r1, #4, #1
 80054f2:	fa08 f803 	lsl.w	r8, r8, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80054f6:	ea29 0505 	bic.w	r5, r9, r5
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054fa:	ea48 0505 	orr.w	r5, r8, r5
        GPIOx->OTYPER = temp;
 80054fe:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8005500:	68c5      	ldr	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005502:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8005504:	ea05 0807 	and.w	r8, r5, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8005508:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800550c:	fa02 f20e 	lsl.w	r2, r2, lr
 8005510:	fa05 f50e 	lsl.w	r5, r5, lr
 8005514:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->PUPDR = temp;
 8005518:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800551a:	f47f af6f 	bne.w	80053fc <HAL_GPIO_Init+0x3c>
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800551e:	f8dc 5010 	ldr.w	r5, [ip, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8005522:	f003 0807 	and.w	r8, r3, #7
 8005526:	ea4f 0888 	mov.w	r8, r8, lsl #2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800552a:	fa05 f508 	lsl.w	r5, r5, r8
 800552e:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8005530:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3];
 8005532:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8005536:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800553a:	f8d9 6020 	ldr.w	r6, [r9, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800553e:	fa05 f808 	lsl.w	r8, r5, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8005542:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8005544:	ea26 0808 	bic.w	r8, r6, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8005548:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->AFR[position >> 3] = temp;
 800554c:	f8c9 5020 	str.w	r5, [r9, #32]
 8005550:	e754      	b.n	80053fc <HAL_GPIO_Init+0x3c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005552:	2703      	movs	r7, #3
 8005554:	fa07 f70e 	lsl.w	r7, r7, lr
 8005558:	43ff      	mvns	r7, r7
 800555a:	e7d1      	b.n	8005500 <HAL_GPIO_Init+0x140>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800555c:	f04f 0803 	mov.w	r8, #3
 8005560:	fa08 f707 	lsl.w	r7, r8, r7
 8005564:	433d      	orrs	r5, r7
 8005566:	e784      	b.n	8005472 <HAL_GPIO_Init+0xb2>
 8005568:	fa0b f707 	lsl.w	r7, fp, r7
 800556c:	433d      	orrs	r5, r7
 800556e:	e780      	b.n	8005472 <HAL_GPIO_Init+0xb2>
 8005570:	f04f 0802 	mov.w	r8, #2
 8005574:	fa08 f707 	lsl.w	r7, r8, r7
 8005578:	433d      	orrs	r5, r7
 800557a:	e77a      	b.n	8005472 <HAL_GPIO_Init+0xb2>
 800557c:	40023800 	.word	0x40023800
 8005580:	40020000 	.word	0x40020000
 8005584:	40020800 	.word	0x40020800
 8005588:	40020c00 	.word	0x40020c00
 800558c:	40021000 	.word	0x40021000
 8005590:	40010400 	.word	0x40010400

08005594 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8005594:	2900      	cmp	r1, #0
 8005596:	f000 8083 	beq.w	80056a0 <HAL_GPIO_DeInit+0x10c>
{
 800559a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 800559e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80055a0:	2701      	movs	r7, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80055a2:	f04f 090f 	mov.w	r9, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80055a6:	f04f 0a03 	mov.w	sl, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80055aa:	4e3e      	ldr	r6, [pc, #248]	; (80056a4 <HAL_GPIO_DeInit+0x110>)
 80055ac:	e051      	b.n	8005652 <HAL_GPIO_DeInit+0xbe>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80055ae:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80055b2:	4558      	cmp	r0, fp
 80055b4:	d069      	beq.n	800568a <HAL_GPIO_DeInit+0xf6>
 80055b6:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 80056a8 <HAL_GPIO_DeInit+0x114>
 80055ba:	4558      	cmp	r0, fp
 80055bc:	d068      	beq.n	8005690 <HAL_GPIO_DeInit+0xfc>
 80055be:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 80056ac <HAL_GPIO_DeInit+0x118>
 80055c2:	4558      	cmp	r0, fp
 80055c4:	d069      	beq.n	800569a <HAL_GPIO_DeInit+0x106>
 80055c6:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 80056b0 <HAL_GPIO_DeInit+0x11c>
 80055ca:	4558      	cmp	r0, fp
 80055cc:	bf14      	ite	ne
 80055ce:	f04f 0b05 	movne.w	fp, #5
 80055d2:	f04f 0b04 	moveq.w	fp, #4
 80055d6:	fa0b f404 	lsl.w	r4, fp, r4
 80055da:	45a4      	cmp	ip, r4
 80055dc:	d113      	bne.n	8005606 <HAL_GPIO_DeInit+0x72>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80055de:	6834      	ldr	r4, [r6, #0]
 80055e0:	ea24 040e 	bic.w	r4, r4, lr
 80055e4:	6034      	str	r4, [r6, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80055e6:	6874      	ldr	r4, [r6, #4]
 80055e8:	ea24 040e 	bic.w	r4, r4, lr
 80055ec:	6074      	str	r4, [r6, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80055ee:	68b4      	ldr	r4, [r6, #8]
 80055f0:	ea24 040e 	bic.w	r4, r4, lr
 80055f4:	60b4      	str	r4, [r6, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80055f6:	68f4      	ldr	r4, [r6, #12]
 80055f8:	ea24 040e 	bic.w	r4, r4, lr
 80055fc:	60f4      	str	r4, [r6, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80055fe:	68ac      	ldr	r4, [r5, #8]
 8005600:	ea24 0408 	bic.w	r4, r4, r8
 8005604:	60ac      	str	r4, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8005606:	6805      	ldr	r5, [r0, #0]
 8005608:	005c      	lsls	r4, r3, #1
 800560a:	fa0a f404 	lsl.w	r4, sl, r4
 800560e:	ea25 0504 	bic.w	r5, r5, r4

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8005612:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8005616:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8005618:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800561c:	f003 0507 	and.w	r5, r3, #7
 8005620:	f8dc e020 	ldr.w	lr, [ip, #32]
 8005624:	00ad      	lsls	r5, r5, #2
 8005626:	fa09 f505 	lsl.w	r5, r9, r5
 800562a:	ea2e 0505 	bic.w	r5, lr, r5
 800562e:	f8cc 5020 	str.w	r5, [ip, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8005632:	68c5      	ldr	r5, [r0, #12]
 8005634:	ea25 0504 	bic.w	r5, r5, r4
 8005638:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800563a:	6845      	ldr	r5, [r0, #4]
 800563c:	ea25 0202 	bic.w	r2, r5, r2
 8005640:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005642:	6882      	ldr	r2, [r0, #8]
 8005644:	ea22 0404 	bic.w	r4, r2, r4
 8005648:	6084      	str	r4, [r0, #8]
    }

    position++;
 800564a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 800564c:	fa31 f203 	lsrs.w	r2, r1, r3
 8005650:	d019      	beq.n	8005686 <HAL_GPIO_DeInit+0xf2>
    iocurrent = (GPIO_Pin) & (1U << position);
 8005652:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 8005656:	ea12 0e01 	ands.w	lr, r2, r1
 800565a:	d0f6      	beq.n	800564a <HAL_GPIO_DeInit+0xb6>
      tmp = SYSCFG->EXTICR[position >> 2];
 800565c:	f023 0503 	bic.w	r5, r3, #3
 8005660:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8005664:	f8df b04c 	ldr.w	fp, [pc, #76]	; 80056b4 <HAL_GPIO_DeInit+0x120>
 8005668:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800566c:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8005670:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8005674:	00a4      	lsls	r4, r4, #2
 8005676:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800567a:	4558      	cmp	r0, fp
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800567c:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8005680:	d195      	bne.n	80055ae <HAL_GPIO_DeInit+0x1a>
 8005682:	2400      	movs	r4, #0
 8005684:	e7a9      	b.n	80055da <HAL_GPIO_DeInit+0x46>
  }
}
 8005686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800568a:	fa07 f404 	lsl.w	r4, r7, r4
 800568e:	e7a4      	b.n	80055da <HAL_GPIO_DeInit+0x46>
 8005690:	f04f 0b02 	mov.w	fp, #2
 8005694:	fa0b f404 	lsl.w	r4, fp, r4
 8005698:	e79f      	b.n	80055da <HAL_GPIO_DeInit+0x46>
 800569a:	fa0a f404 	lsl.w	r4, sl, r4
 800569e:	e79c      	b.n	80055da <HAL_GPIO_DeInit+0x46>
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40010400 	.word	0x40010400
 80056a8:	40020800 	.word	0x40020800
 80056ac:	40020c00 	.word	0x40020c00
 80056b0:	40021000 	.word	0x40021000
 80056b4:	40020000 	.word	0x40020000

080056b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056b8:	6903      	ldr	r3, [r0, #16]
 80056ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80056bc:	bf14      	ite	ne
 80056be:	2001      	movne	r0, #1
 80056c0:	2000      	moveq	r0, #0
 80056c2:	4770      	bx	lr

080056c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056c4:	b902      	cbnz	r2, 80056c8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80056c6:	0409      	lsls	r1, r1, #16
 80056c8:	6181      	str	r1, [r0, #24]
  }
}
 80056ca:	4770      	bx	lr

080056cc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80056cc:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056ce:	ea01 0203 	and.w	r2, r1, r3
 80056d2:	ea21 0103 	bic.w	r1, r1, r3
 80056d6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80056da:	6181      	str	r1, [r0, #24]
}
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop

080056e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80056e0:	4a04      	ldr	r2, [pc, #16]	; (80056f4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80056e2:	6951      	ldr	r1, [r2, #20]
 80056e4:	4201      	tst	r1, r0
 80056e6:	d100      	bne.n	80056ea <HAL_GPIO_EXTI_IRQHandler+0xa>
 80056e8:	4770      	bx	lr
{
 80056ea:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056ec:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056ee:	f7fe f9ed 	bl	8003acc <HAL_GPIO_EXTI_Callback>
  }
}
 80056f2:	bd08      	pop	{r3, pc}
 80056f4:	40010400 	.word	0x40010400

080056f8 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056f8:	2800      	cmp	r0, #0
 80056fa:	f000 80b9 	beq.w	8005870 <HAL_I2C_Init+0x178>
{
 80056fe:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005700:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005704:	4604      	mov	r4, r0
 8005706:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 8098 	beq.w	8005840 <HAL_I2C_Init+0x148>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005710:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005712:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005714:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	f022 0201 	bic.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005726:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800572e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005730:	f001 fd1c 	bl	800716c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005734:	6863      	ldr	r3, [r4, #4]
 8005736:	494f      	ldr	r1, [pc, #316]	; (8005874 <HAL_I2C_Init+0x17c>)
 8005738:	428b      	cmp	r3, r1
 800573a:	d84f      	bhi.n	80057dc <HAL_I2C_Init+0xe4>
 800573c:	4a4e      	ldr	r2, [pc, #312]	; (8005878 <HAL_I2C_Init+0x180>)
 800573e:	4290      	cmp	r0, r2
 8005740:	d97c      	bls.n	800583c <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005742:	4d4e      	ldr	r5, [pc, #312]	; (800587c <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005744:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8005746:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800574a:	1e43      	subs	r3, r0, #1
 800574c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005750:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005754:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005756:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005758:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800575a:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800575e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8005762:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8005766:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005768:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800576a:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800576c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005770:	ea41 010c 	orr.w	r1, r1, ip
 8005774:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005776:	69d1      	ldr	r1, [r2, #28]
 8005778:	ea13 0f0e 	tst.w	r3, lr
 800577c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005780:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005784:	d161      	bne.n	800584a <HAL_I2C_Init+0x152>
 8005786:	2304      	movs	r3, #4
 8005788:	430b      	orrs	r3, r1
 800578a:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800578c:	6811      	ldr	r1, [r2, #0]
 800578e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8005792:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8005796:	4303      	orrs	r3, r0
 8005798:	430b      	orrs	r3, r1
 800579a:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800579c:	6891      	ldr	r1, [r2, #8]
 800579e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80057a2:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80057a6:	4303      	orrs	r3, r0
 80057a8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80057ac:	430b      	orrs	r3, r1
 80057ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057b0:	68d0      	ldr	r0, [r2, #12]
 80057b2:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80057b6:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80057ba:	430b      	orrs	r3, r1
 80057bc:	4303      	orrs	r3, r0
 80057be:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057c0:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c2:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80057ca:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057cc:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057d2:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d4:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e

  return HAL_OK;
 80057d8:	4608      	mov	r0, r1
}
 80057da:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057dc:	4a28      	ldr	r2, [pc, #160]	; (8005880 <HAL_I2C_Init+0x188>)
 80057de:	4290      	cmp	r0, r2
 80057e0:	d92c      	bls.n	800583c <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80057e2:	4d26      	ldr	r5, [pc, #152]	; (800587c <HAL_I2C_Init+0x184>)
 80057e4:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057e8:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80057ec:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057f0:	fb02 f101 	mul.w	r1, r2, r1
 80057f4:	4d23      	ldr	r5, [pc, #140]	; (8005884 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057f6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057f8:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057fc:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057fe:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005800:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8005804:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8005808:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800580a:	6a15      	ldr	r5, [r2, #32]
 800580c:	3101      	adds	r1, #1
 800580e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8005812:	4329      	orrs	r1, r5
 8005814:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005816:	69d1      	ldr	r1, [r2, #28]
 8005818:	68a5      	ldr	r5, [r4, #8]
 800581a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800581e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005822:	b9ad      	cbnz	r5, 8005850 <HAL_I2C_Init+0x158>
 8005824:	3801      	subs	r0, #1
 8005826:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800582a:	fbb0 f3f3 	udiv	r3, r0, r3
 800582e:	3301      	adds	r3, #1
 8005830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005834:	b1d3      	cbz	r3, 800586c <HAL_I2C_Init+0x174>
 8005836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583a:	e7a5      	b.n	8005788 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800583c:	2001      	movs	r0, #1
}
 800583e:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005840:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005844:	f7fe fd48 	bl	80042d8 <HAL_I2C_MspInit>
 8005848:	e762      	b.n	8005710 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800584a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800584e:	e79b      	b.n	8005788 <HAL_I2C_Init+0x90>
 8005850:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005854:	3801      	subs	r0, #1
 8005856:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800585a:	fbb0 f3f3 	udiv	r3, r0, r3
 800585e:	3301      	adds	r3, #1
 8005860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005864:	b113      	cbz	r3, 800586c <HAL_I2C_Init+0x174>
 8005866:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800586a:	e78d      	b.n	8005788 <HAL_I2C_Init+0x90>
 800586c:	2301      	movs	r3, #1
 800586e:	e78b      	b.n	8005788 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8005870:	2001      	movs	r0, #1
}
 8005872:	4770      	bx	lr
 8005874:	000186a0 	.word	0x000186a0
 8005878:	001e847f 	.word	0x001e847f
 800587c:	431bde83 	.word	0x431bde83
 8005880:	003d08ff 	.word	0x003d08ff
 8005884:	10624dd3 	.word	0x10624dd3

08005888 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	4605      	mov	r5, r0
 800588e:	b083      	sub	sp, #12
 8005890:	4699      	mov	r9, r3
 8005892:	4688      	mov	r8, r1
 8005894:	4692      	mov	sl, r2
 8005896:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005898:	f7fe ff9e 	bl	80047d8 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800589c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d003      	beq.n	80058ac <HAL_I2C_Master_Transmit+0x24>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2002      	movs	r0, #2
  }
}
 80058a6:	b003      	add	sp, #12
 80058a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ac:	4606      	mov	r6, r0
 80058ae:	e005      	b.n	80058bc <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b0:	f7fe ff92 	bl	80047d8 <HAL_GetTick>
 80058b4:	1b80      	subs	r0, r0, r6
 80058b6:	2819      	cmp	r0, #25
 80058b8:	f200 80f8 	bhi.w	8005aac <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058bc:	682c      	ldr	r4, [r5, #0]
 80058be:	69a3      	ldr	r3, [r4, #24]
 80058c0:	ea6f 0c03 	mvn.w	ip, r3
 80058c4:	f01c 0b02 	ands.w	fp, ip, #2
 80058c8:	d0f2      	beq.n	80058b0 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 80058ca:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d0e8      	beq.n	80058a4 <HAL_I2C_Master_Transmit+0x1c>
 80058d2:	2301      	movs	r3, #1
 80058d4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	07d9      	lsls	r1, r3, #31
 80058dc:	d571      	bpl.n	80059c2 <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058de:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058e0:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058e2:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ea:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058ec:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058f0:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058f4:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 80058f6:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058fa:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058fc:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8005900:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005902:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005904:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8005906:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800590a:	2b08      	cmp	r3, #8
 800590c:	d006      	beq.n	800591c <HAL_I2C_Master_Transmit+0x94>
 800590e:	2b01      	cmp	r3, #1
 8005910:	d004      	beq.n	800591c <HAL_I2C_Master_Transmit+0x94>
 8005912:	4293      	cmp	r3, r2
 8005914:	d002      	beq.n	800591c <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005916:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005918:	2b12      	cmp	r3, #18
 800591a:	d103      	bne.n	8005924 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	1c7b      	adds	r3, r7, #1
 8005926:	d13e      	bne.n	80059a6 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005928:	6963      	ldr	r3, [r4, #20]
 800592a:	07d8      	lsls	r0, r3, #31
 800592c:	d5fc      	bpl.n	8005928 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800592e:	692b      	ldr	r3, [r5, #16]
 8005930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005934:	d14a      	bne.n	80059cc <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005936:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 800593a:	6121      	str	r1, [r4, #16]
 800593c:	1c78      	adds	r0, r7, #1
 800593e:	d004      	beq.n	800594a <HAL_I2C_Master_Transmit+0xc2>
 8005940:	e0dd      	b.n	8005afe <HAL_I2C_Master_Transmit+0x276>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005942:	6963      	ldr	r3, [r4, #20]
 8005944:	055a      	lsls	r2, r3, #21
 8005946:	f100 80c2 	bmi.w	8005ace <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800594a:	6963      	ldr	r3, [r4, #20]
 800594c:	0799      	lsls	r1, r3, #30
 800594e:	d5f8      	bpl.n	8005942 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005950:	2200      	movs	r2, #0
 8005952:	9201      	str	r2, [sp, #4]
 8005954:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 8005956:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005958:	9201      	str	r2, [sp, #4]
 800595a:	69a2      	ldr	r2, [r4, #24]
 800595c:	9201      	str	r2, [sp, #4]
 800595e:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8005960:	2b00      	cmp	r3, #0
 8005962:	d075      	beq.n	8005a50 <HAL_I2C_Master_Transmit+0x1c8>
 8005964:	1c79      	adds	r1, r7, #1
 8005966:	f040 8081 	bne.w	8005a6c <HAL_I2C_Master_Transmit+0x1e4>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800596a:	6963      	ldr	r3, [r4, #20]
 800596c:	061a      	lsls	r2, r3, #24
 800596e:	d441      	bmi.n	80059f4 <HAL_I2C_Master_Transmit+0x16c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005970:	6963      	ldr	r3, [r4, #20]
 8005972:	055b      	lsls	r3, r3, #21
 8005974:	d5f9      	bpl.n	800596a <HAL_I2C_Master_Transmit+0xe2>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005976:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8005978:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800597a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800597e:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005980:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005982:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005986:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800598a:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800598c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005990:	f043 0304 	orr.w	r3, r3, #4
 8005994:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005996:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005998:	2b04      	cmp	r3, #4
 800599a:	f000 80e6 	beq.w	8005b6a <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 800599e:	2001      	movs	r0, #1
}
 80059a0:	b003      	add	sp, #12
 80059a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059a6:	6963      	ldr	r3, [r4, #20]
 80059a8:	07d9      	lsls	r1, r3, #31
 80059aa:	d4c0      	bmi.n	800592e <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ac:	f7fe ff14 	bl	80047d8 <HAL_GetTick>
 80059b0:	1b80      	subs	r0, r0, r6
 80059b2:	4287      	cmp	r7, r0
 80059b4:	f0c0 80b3 	bcc.w	8005b1e <HAL_I2C_Master_Transmit+0x296>
 80059b8:	2f00      	cmp	r7, #0
 80059ba:	f000 80b0 	beq.w	8005b1e <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059be:	682c      	ldr	r4, [r5, #0]
 80059c0:	e7b0      	b.n	8005924 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	e788      	b.n	80058de <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059cc:	ea4f 13e8 	mov.w	r3, r8, asr #7
 80059d0:	f003 0306 	and.w	r3, r3, #6
 80059d4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80059d8:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80059da:	1c7b      	adds	r3, r7, #1
 80059dc:	d003      	beq.n	80059e6 <HAL_I2C_Master_Transmit+0x15e>
 80059de:	e0b5      	b.n	8005b4c <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059e0:	6963      	ldr	r3, [r4, #20]
 80059e2:	0559      	lsls	r1, r3, #21
 80059e4:	d473      	bmi.n	8005ace <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059e6:	6963      	ldr	r3, [r4, #20]
 80059e8:	0718      	lsls	r0, r3, #28
 80059ea:	d5f9      	bpl.n	80059e0 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059ec:	fa5f f388 	uxtb.w	r3, r8
 80059f0:	6123      	str	r3, [r4, #16]
 80059f2:	e7a3      	b.n	800593c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059f4:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 80059f6:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059fa:	4601      	mov	r1, r0
 80059fc:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 8005a00:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a04:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8005a06:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8005a08:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a10:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 8005a12:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a14:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8005a16:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a18:	d50c      	bpl.n	8005a34 <HAL_I2C_Master_Transmit+0x1ac>
 8005a1a:	b15a      	cbz	r2, 8005a34 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a1c:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 8005a1e:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a22:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8005a24:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8005a26:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005a2c:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8005a30:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8005a32:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8005a34:	1c78      	adds	r0, r7, #1
 8005a36:	d129      	bne.n	8005a8c <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a38:	6963      	ldr	r3, [r4, #20]
 8005a3a:	0759      	lsls	r1, r3, #29
 8005a3c:	d405      	bmi.n	8005a4a <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a3e:	6963      	ldr	r3, [r4, #20]
 8005a40:	055a      	lsls	r2, r3, #21
 8005a42:	d498      	bmi.n	8005976 <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a44:	6963      	ldr	r3, [r4, #20]
 8005a46:	0759      	lsls	r1, r3, #29
 8005a48:	d5f9      	bpl.n	8005a3e <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 8005a4a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d189      	bne.n	8005964 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a50:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005a52:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a54:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8005a56:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a5c:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a5e:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8005a62:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a66:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 8005a6a:	e71c      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a6c:	6963      	ldr	r3, [r4, #20]
 8005a6e:	0618      	lsls	r0, r3, #24
 8005a70:	d4c0      	bmi.n	80059f4 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a72:	6963      	ldr	r3, [r4, #20]
 8005a74:	0558      	lsls	r0, r3, #21
 8005a76:	f53f af7e 	bmi.w	8005976 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7a:	f7fe fead 	bl	80047d8 <HAL_GetTick>
 8005a7e:	1b80      	subs	r0, r0, r6
 8005a80:	4287      	cmp	r7, r0
 8005a82:	d379      	bcc.n	8005b78 <HAL_I2C_Master_Transmit+0x2f0>
 8005a84:	2f00      	cmp	r7, #0
 8005a86:	d077      	beq.n	8005b78 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a88:	682c      	ldr	r4, [r5, #0]
 8005a8a:	e76b      	b.n	8005964 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a8c:	6963      	ldr	r3, [r4, #20]
 8005a8e:	075b      	lsls	r3, r3, #29
 8005a90:	d4db      	bmi.n	8005a4a <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a92:	6963      	ldr	r3, [r4, #20]
 8005a94:	055b      	lsls	r3, r3, #21
 8005a96:	f53f af6e 	bmi.w	8005976 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9a:	f7fe fe9d 	bl	80047d8 <HAL_GetTick>
 8005a9e:	1b80      	subs	r0, r0, r6
 8005aa0:	4287      	cmp	r7, r0
 8005aa2:	d369      	bcc.n	8005b78 <HAL_I2C_Master_Transmit+0x2f0>
 8005aa4:	2f00      	cmp	r7, #0
 8005aa6:	d067      	beq.n	8005b78 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005aa8:	682c      	ldr	r4, [r5, #0]
 8005aaa:	e7c3      	b.n	8005a34 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 8005aac:	2320      	movs	r3, #32
      return HAL_BUSY;
 8005aae:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ab0:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ab4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ab8:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005abc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005abe:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ac2:	f043 0320 	orr.w	r3, r3, #32
 8005ac6:	642b      	str	r3, [r5, #64]	; 0x40
}
 8005ac8:	b003      	add	sp, #12
 8005aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ace:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad0:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ad4:	2120      	movs	r1, #32
      return HAL_ERROR;
 8005ad6:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ade:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ae0:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ae2:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ae4:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae8:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aec:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005aee:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005af2:	f043 0304 	orr.w	r3, r3, #4
 8005af6:	642b      	str	r3, [r5, #64]	; 0x40
}
 8005af8:	b003      	add	sp, #12
 8005afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005afe:	6963      	ldr	r3, [r4, #20]
 8005b00:	079b      	lsls	r3, r3, #30
 8005b02:	f53f af25 	bmi.w	8005950 <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b06:	6963      	ldr	r3, [r4, #20]
 8005b08:	055b      	lsls	r3, r3, #21
 8005b0a:	d4e0      	bmi.n	8005ace <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0c:	f7fe fe64 	bl	80047d8 <HAL_GetTick>
 8005b10:	1b80      	subs	r0, r0, r6
 8005b12:	4287      	cmp	r7, r0
 8005b14:	d33e      	bcc.n	8005b94 <HAL_I2C_Master_Transmit+0x30c>
 8005b16:	2f00      	cmp	r7, #0
 8005b18:	d03c      	beq.n	8005b94 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b1a:	682c      	ldr	r4, [r5, #0]
 8005b1c:	e70e      	b.n	800593c <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b1e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b20:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b22:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b24:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b28:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b2c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b2e:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b30:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8005b34:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b38:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b3a:	680b      	ldr	r3, [r1, #0]
 8005b3c:	05da      	lsls	r2, r3, #23
 8005b3e:	f57f af2e 	bpl.w	800599e <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b42:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8005b46:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b48:	642b      	str	r3, [r5, #64]	; 0x40
 8005b4a:	e6ac      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b4c:	6963      	ldr	r3, [r4, #20]
 8005b4e:	071a      	lsls	r2, r3, #28
 8005b50:	f53f af4c 	bmi.w	80059ec <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b54:	6963      	ldr	r3, [r4, #20]
 8005b56:	055a      	lsls	r2, r3, #21
 8005b58:	d4b9      	bmi.n	8005ace <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5a:	f7fe fe3d 	bl	80047d8 <HAL_GetTick>
 8005b5e:	1b83      	subs	r3, r0, r6
 8005b60:	429f      	cmp	r7, r3
 8005b62:	d317      	bcc.n	8005b94 <HAL_I2C_Master_Transmit+0x30c>
 8005b64:	b1b7      	cbz	r7, 8005b94 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b66:	682c      	ldr	r4, [r5, #0]
 8005b68:	e737      	b.n	80059da <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6a:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 8005b6c:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6e:	6813      	ldr	r3, [r2, #0]
 8005b70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	e696      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b78:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b7a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b7c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b7e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b82:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b86:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005b88:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b8c:	f043 0320 	orr.w	r3, r3, #32
 8005b90:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8005b92:	e700      	b.n	8005996 <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b94:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b96:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b98:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b9a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b9e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ba2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005ba4:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ba6:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8005baa:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bae:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8005bb0:	e679      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1e>
 8005bb2:	bf00      	nop

08005bb4 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d05d      	beq.n	8005c74 <HAL_PCD_Init+0xc0>
{
 8005bb8:	b570      	push	{r4, r5, r6, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005bba:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8005bbe:	4604      	mov	r4, r0
{
 8005bc0:	b086      	sub	sp, #24
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005bc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d04f      	beq.n	8005c6a <HAL_PCD_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005bca:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005bcc:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005bce:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8005bd2:	f002 f835 	bl	8007c40 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bd6:	6860      	ldr	r0, [r4, #4]
 8005bd8:	b368      	cbz	r0, 8005c36 <HAL_PCD_Init+0x82>
 8005bda:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005bdc:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005be0:	4611      	mov	r1, r2
    hpcd->IN_ep[i].is_in = 1U;
 8005be2:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8005be6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bea:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8005bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005bf2:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bf4:	fa5f f28c 	uxtb.w	r2, ip
 8005bf8:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005bfa:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8005bfe:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c02:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c06:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c08:	d3eb      	bcc.n	8005be2 <HAL_PCD_Init+0x2e>
 8005c0a:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8005c12:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c16:	f102 0c01 	add.w	ip, r2, #1
    hpcd->OUT_ep[i].num = i;
 8005c1a:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c1e:	fa5f f28c 	uxtb.w	r2, ip
 8005c22:	4282      	cmp	r2, r0
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c24:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8005c28:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c2c:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c30:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c34:	d3eb      	bcc.n	8005c0e <HAL_PCD_Init+0x5a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005c36:	46a4      	mov	ip, r4
 8005c38:	46ee      	mov	lr, sp
 8005c3a:	f85c 6b10 	ldr.w	r6, [ip], #16
 8005c3e:	1d25      	adds	r5, r4, #4
 8005c40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005c44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005c48:	f8dc 3000 	ldr.w	r3, [ip]
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f8ce 3000 	str.w	r3, [lr]
 8005c52:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8005c56:	f001 fffd 	bl	8007c54 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005c5a:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8005c5c:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8005c5e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005c62:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 8005c66:	b006      	add	sp, #24
 8005c68:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8005c6a:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8005c6e:	f003 fd1f 	bl	80096b0 <HAL_PCD_MspInit>
 8005c72:	e7aa      	b.n	8005bca <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8005c74:	2001      	movs	r0, #1
}
 8005c76:	4770      	bx	lr

08005c78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005c78:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8005c7a:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d012      	beq.n	8005ca8 <HAL_PCD_Start+0x30>
 8005c82:	4604      	mov	r4, r0
 8005c84:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 8005c86:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8005c88:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005c8c:	f001 ffce 	bl	8007c2c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005c90:	4629      	mov	r1, r5
 8005c92:	4620      	mov	r0, r4
 8005c94:	f003 fd00 	bl	8009698 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8005c98:	6820      	ldr	r0, [r4, #0]
 8005c9a:	f002 fdcb 	bl	8008834 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8

  return HAL_OK;
 8005ca4:	4618      	mov	r0, r3
}
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8005ca8:	2002      	movs	r0, #2
}
 8005caa:	bd38      	pop	{r3, r4, r5, pc}

08005cac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb0:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005cb2:	6800      	ldr	r0, [r0, #0]
 8005cb4:	f002 fdc0 	bl	8008838 <USB_ReadInterrupts>
 8005cb8:	0406      	lsls	r6, r0, #16
 8005cba:	d443      	bmi.n	8005d44 <HAL_PCD_IRQHandler+0x98>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005cbc:	6820      	ldr	r0, [r4, #0]
 8005cbe:	f002 fdbb 	bl	8008838 <USB_ReadInterrupts>
 8005cc2:	0545      	lsls	r5, r0, #21
 8005cc4:	f100 8180 	bmi.w	8005fc8 <HAL_PCD_IRQHandler+0x31c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	f002 fdb5 	bl	8008838 <USB_ReadInterrupts>
 8005cce:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005cd2:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005cd4:	d007      	beq.n	8005ce6 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005cd6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cde:	041b      	lsls	r3, r3, #16
 8005ce0:	0c1b      	lsrs	r3, r3, #16
 8005ce2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005ce6:	f002 fda7 	bl	8008838 <USB_ReadInterrupts>
 8005cea:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005cee:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005cf0:	d007      	beq.n	8005d02 <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005cf2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005cf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cfa:	041b      	lsls	r3, r3, #16
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005d02:	f002 fd99 	bl	8008838 <USB_ReadInterrupts>
 8005d06:	04c0      	lsls	r0, r0, #19
 8005d08:	f100 81f6 	bmi.w	80060f8 <HAL_PCD_IRQHandler+0x44c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005d0c:	6820      	ldr	r0, [r4, #0]
 8005d0e:	f002 fd93 	bl	8008838 <USB_ReadInterrupts>
 8005d12:	0501      	lsls	r1, r0, #20
 8005d14:	f100 81d5 	bmi.w	80060c2 <HAL_PCD_IRQHandler+0x416>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005d18:	6820      	ldr	r0, [r4, #0]
 8005d1a:	f002 fd8d 	bl	8008838 <USB_ReadInterrupts>
 8005d1e:	0582      	lsls	r2, r0, #22
 8005d20:	f100 81c2 	bmi.w	80060a8 <HAL_PCD_IRQHandler+0x3fc>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	f002 fd87 	bl	8008838 <USB_ReadInterrupts>
 8005d2a:	05c3      	lsls	r3, r0, #23
 8005d2c:	d508      	bpl.n	8005d40 <HAL_PCD_IRQHandler+0x94>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d38:	041b      	lsls	r3, r3, #16
 8005d3a:	0c1b      	lsrs	r3, r3, #16
 8005d3c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8005d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005d44:	6822      	ldr	r2, [r4, #0]
 8005d46:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	041d      	lsls	r5, r3, #16
 8005d4e:	d5b6      	bpl.n	8005cbe <HAL_PCD_IRQHandler+0x12>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005d50:	f8df 934c 	ldr.w	r9, [pc, #844]	; 80060a0 <HAL_PCD_IRQHandler+0x3f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005d54:	f8df a34c 	ldr.w	sl, [pc, #844]	; 80060a4 <HAL_PCD_IRQHandler+0x3f8>
 8005d58:	e011      	b.n	8005d7e <HAL_PCD_IRQHandler+0xd2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005d5a:	f011 0110 	ands.w	r1, r1, #16
 8005d5e:	f000 8151 	beq.w	8006004 <HAL_PCD_IRQHandler+0x358>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005d62:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005d64:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005d68:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005d6a:	f040 8176 	bne.w	800605a <HAL_PCD_IRQHandler+0x3ae>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005d6e:	0419      	lsls	r1, r3, #16
 8005d70:	f100 821b 	bmi.w	80061aa <HAL_PCD_IRQHandler+0x4fe>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005d74:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005d78:	041e      	lsls	r6, r3, #16
 8005d7a:	f140 811f 	bpl.w	8005fbc <HAL_PCD_IRQHandler+0x310>
    wIstr = hpcd->Instance->ISTR;
 8005d7e:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8005d82:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8005d84:	f015 050f 	ands.w	r5, r5, #15
 8005d88:	d0e7      	beq.n	8005d5a <HAL_PCD_IRQHandler+0xae>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005d8a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8005d8e:	00ae      	lsls	r6, r5, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005d90:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005d92:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005d96:	f100 80a0 	bmi.w	8005eda <HAL_PCD_IRQHandler+0x22e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005d9a:	f018 0f80 	tst.w	r8, #128	; 0x80
 8005d9e:	d0e9      	beq.n	8005d74 <HAL_PCD_IRQHandler+0xc8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005da0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8005da4:	1977      	adds	r7, r6, r5
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	ea03 0309 	and.w	r3, r3, r9
 8005dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db0:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005db4:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8005db8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	f000 80d0 	beq.w	8005f62 <HAL_PCD_IRQHandler+0x2b6>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 80cd 	beq.w	8005f62 <HAL_PCD_IRQHandler+0x2b6>
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d103      	bne.n	8005dd4 <HAL_PCD_IRQHandler+0x128>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005dcc:	f418 7f80 	tst.w	r8, #256	; 0x100
 8005dd0:	f000 80c7 	beq.w	8005f62 <HAL_PCD_IRQHandler+0x2b6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005dd4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005dd8:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005de2:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005de6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005dea:	f000 8255 	beq.w	8006298 <HAL_PCD_IRQHandler+0x5ec>
    if (ep->xfer_len > TxByteNbre)
 8005dee:	eb06 0c05 	add.w	ip, r6, r5
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005df2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 8005df6:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8005dfa:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 8005e02:	459e      	cmp	lr, r3
 8005e04:	f240 834b 	bls.w	800649e <HAL_PCD_IRQHandler+0x7f2>
      ep->xfer_len -= TxByteNbre;
 8005e08:	ebae 0e03 	sub.w	lr, lr, r3
 8005e0c:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8005e10:	f1be 0f00 	cmp.w	lr, #0
 8005e14:	f000 8346 	beq.w	80064a4 <HAL_PCD_IRQHandler+0x7f8>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e18:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8005e1c:	d00f      	beq.n	8005e3e <HAL_PCD_IRQHandler+0x192>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e1e:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 8005e22:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8005e26:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8005e2a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8005e2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005e32:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 8005e36:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8005e3a:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005e3e:	eb06 0e05 	add.w	lr, r6, r5
 8005e42:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8005e46:	f89e c04c 	ldrb.w	ip, [lr, #76]	; 0x4c
 8005e4a:	f1bc 0f01 	cmp.w	ip, #1
 8005e4e:	f040 8316 	bne.w	800647e <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 8005e52:	f8de 203c 	ldr.w	r2, [lr, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e56:	f8de 8038 	ldr.w	r8, [lr, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8005e5a:	eb02 0c03 	add.w	ip, r2, r3
        ep->xfer_count += TxByteNbre;
 8005e5e:	f8de 2044 	ldr.w	r2, [lr, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8005e62:	f8ce c03c 	str.w	ip, [lr, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8005e66:	441a      	add	r2, r3
 8005e68:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e6c:	f8de 2048 	ldr.w	r2, [lr, #72]	; 0x48
 8005e70:	4542      	cmp	r2, r8
 8005e72:	f0c0 83e4 	bcc.w	800663e <HAL_PCD_IRQHandler+0x992>
          ep->xfer_len_db -= len;
 8005e76:	eba2 0208 	sub.w	r2, r2, r8
 8005e7a:	f8ce 2048 	str.w	r2, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005e7e:	fa1f f388 	uxth.w	r3, r8
 8005e82:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 8005e86:	f1be 0f00 	cmp.w	lr, #0
 8005e8a:	f040 83cb 	bne.w	8006624 <HAL_PCD_IRQHandler+0x978>
 8005e8e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005e92:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005e96:	f201 4e04 	addw	lr, r1, #1028	; 0x404
 8005e9a:	b292      	uxth	r2, r2
 8005e9c:	eb0e 0102 	add.w	r1, lr, r2
 8005ea0:	f1b8 0f00 	cmp.w	r8, #0
 8005ea4:	f040 83f8 	bne.w	8006698 <HAL_PCD_IRQHandler+0x9ec>
 8005ea8:	f83e 1002 	ldrh.w	r1, [lr, r2]
 8005eac:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005eb0:	0409      	lsls	r1, r1, #16
 8005eb2:	0c09      	lsrs	r1, r1, #16
 8005eb4:	f82e 1002 	strh.w	r1, [lr, r2]
 8005eb8:	f83e 1002 	ldrh.w	r1, [lr, r2]
 8005ebc:	b289      	uxth	r1, r1
 8005ebe:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005ec2:	f82e 1002 	strh.w	r1, [lr, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005ec6:	1972      	adds	r2, r6, r5
 8005ec8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005ecc:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8005ece:	4661      	mov	r1, ip
 8005ed0:	f002 fcb6 	bl	8008840 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005ed4:	6820      	ldr	r0, [r4, #0]
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	e2d1      	b.n	800647e <HAL_PCD_IRQHandler+0x7d2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005eda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ede:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8005ee2:	1971      	adds	r1, r6, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eea:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8005eee:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8005ef2:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f040 811c 	bne.w	8006134 <HAL_PCD_IRQHandler+0x488>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005efc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005f00:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3306      	adds	r3, #6
 8005f08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005f10:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8005f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8005f18:	461f      	mov	r7, r3
          if (count != 0U)
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f040 81ac 	bne.w	8006278 <HAL_PCD_IRQHandler+0x5cc>
        ep->xfer_count += count;
 8005f20:	1971      	adds	r1, r6, r5
 8005f22:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8005f26:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8005f2a:	00c9      	lsls	r1, r1, #3
 8005f2c:	443a      	add	r2, r7
 8005f2e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8005f32:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8005f36:	443a      	add	r2, r7
 8005f38:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005f3c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8005f40:	b122      	cbz	r2, 8005f4c <HAL_PCD_IRQHandler+0x2a0>
 8005f42:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8005f46:	42bb      	cmp	r3, r7
 8005f48:	f240 819d 	bls.w	8006286 <HAL_PCD_IRQHandler+0x5da>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005f4c:	1973      	adds	r3, r6, r5
 8005f4e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005f52:	4620      	mov	r0, r4
 8005f54:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8005f58:	f003 fbd2 	bl	8009700 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005f5c:	6820      	ldr	r0, [r4, #0]
 8005f5e:	4602      	mov	r2, r0
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005f60:	e71b      	b.n	8005d9a <HAL_PCD_IRQHandler+0xee>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f62:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005f66:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          if (ep->xfer_len > TxByteNbre)
 8005f70:	442e      	add	r6, r5
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f72:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005f76:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
          if (ep->xfer_len > TxByteNbre)
 8005f7a:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8005f7e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8005f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f84:	429a      	cmp	r2, r3
 8005f86:	f240 8108 	bls.w	800619a <HAL_PCD_IRQHandler+0x4ee>
            ep->xfer_len -= TxByteNbre;
 8005f8a:	1ad2      	subs	r2, r2, r3
 8005f8c:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8005f8e:	2a00      	cmp	r2, #0
 8005f90:	f000 8105 	beq.w	800619e <HAL_PCD_IRQHandler+0x4f2>
            ep->xfer_buff += TxByteNbre;
 8005f94:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8005f96:	3501      	adds	r5, #1
            ep->xfer_buff += TxByteNbre;
 8005f98:	441a      	add	r2, r3
 8005f9a:	63f2      	str	r2, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8005f9c:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8005f9e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8005fa2:	4413      	add	r3, r2
 8005fa4:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005fa6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005faa:	f002 f8bb 	bl	8008124 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005fae:	6820      	ldr	r0, [r4, #0]
 8005fb0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	041e      	lsls	r6, r3, #16
 8005fb8:	f53f aee1 	bmi.w	8005d7e <HAL_PCD_IRQHandler+0xd2>
 8005fbc:	4610      	mov	r0, r2
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005fbe:	f002 fc3b 	bl	8008838 <USB_ReadInterrupts>
 8005fc2:	0545      	lsls	r5, r0, #21
 8005fc4:	f57f ae80 	bpl.w	8005cc8 <HAL_PCD_IRQHandler+0x1c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005fc8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8005fca:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005fcc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fd4:	041b      	lsls	r3, r3, #16
 8005fd6:	0c1b      	lsrs	r3, r3, #16
 8005fd8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8005fdc:	f003 fba8 	bl	8009730 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8005fe0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	f43f ae6f 	beq.w	8005cc8 <HAL_PCD_IRQHandler+0x1c>
  hpcd->USB_Address = address;
 8005fea:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8005fec:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005fee:	4629      	mov	r1, r5
 8005ff0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005ff2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005ff6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ffa:	f002 fc15 	bl	8008828 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ffe:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8006002:	e661      	b.n	8005cc8 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006004:	8803      	ldrh	r3, [r0, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	ea03 0309 	and.w	r3, r3, r9
 800600c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006010:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006012:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006016:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800601a:	b29b      	uxth	r3, r3
 800601c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006020:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006024:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8006028:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800602a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800602e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8006030:	4413      	add	r3, r2
 8006032:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006034:	4620      	mov	r0, r4
 8006036:	f003 fb6d 	bl	8009714 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800603a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800603e:	b363      	cbz	r3, 800609a <HAL_PCD_IRQHandler+0x3ee>
 8006040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006042:	bb53      	cbnz	r3, 800609a <HAL_PCD_IRQHandler+0x3ee>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006044:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8006048:	6820      	ldr	r0, [r4, #0]
 800604a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800604e:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 8006052:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 8006054:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8006058:	e68c      	b.n	8005d74 <HAL_PCD_IRQHandler+0xc8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800605a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800605e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8006062:	b29b      	uxth	r3, r3
 8006064:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006068:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800606c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006070:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8006074:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006078:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800607c:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8006080:	f002 fbee 	bl	8008860 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006084:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006088:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800608a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800608c:	8811      	ldrh	r1, [r2, #0]
 800608e:	400b      	ands	r3, r1
 8006090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006094:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8006096:	f003 fb2b 	bl	80096f0 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800609a:	6820      	ldr	r0, [r4, #0]
 800609c:	4602      	mov	r2, r0
 800609e:	e669      	b.n	8005d74 <HAL_PCD_IRQHandler+0xc8>
 80060a0:	ffff8f0f 	.word	0xffff8f0f
 80060a4:	ffff8fbf 	.word	0xffff8fbf
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80060a8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80060aa:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80060ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80060b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060b4:	041b      	lsls	r3, r3, #16
 80060b6:	0c1b      	lsrs	r3, r3, #16
 80060b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80060bc:	f003 fb34 	bl	8009728 <HAL_PCD_SOFCallback>
 80060c0:	e630      	b.n	8005d24 <HAL_PCD_IRQHandler+0x78>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80060c2:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SuspendCallback(hpcd);
 80060c4:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80060c6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f043 0308 	orr.w	r3, r3, #8
 80060d0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80060d4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80060d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060dc:	041b      	lsls	r3, r3, #16
 80060de:	0c1b      	lsrs	r3, r3, #16
 80060e0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80060e4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f043 0304 	orr.w	r3, r3, #4
 80060ee:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80060f2:	f003 fb2f 	bl	8009754 <HAL_PCD_SuspendCallback>
 80060f6:	e60f      	b.n	8005d18 <HAL_PCD_IRQHandler+0x6c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80060f8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80060fa:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80060fc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006100:	f023 0304 	bic.w	r3, r3, #4
 8006104:	041b      	lsls	r3, r3, #16
 8006106:	0c1b      	lsrs	r3, r3, #16
 8006108:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800610c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006110:	f023 0308 	bic.w	r3, r3, #8
 8006114:	041b      	lsls	r3, r3, #16
 8006116:	0c1b      	lsrs	r3, r3, #16
 8006118:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800611c:	f003 fb2a 	bl	8009774 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006120:	6820      	ldr	r0, [r4, #0]
 8006122:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	0c1b      	lsrs	r3, r3, #16
 800612e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8006132:	e5ec      	b.n	8005d0e <HAL_PCD_IRQHandler+0x62>
          if (ep->type == EP_TYPE_BULK)
 8006134:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8006138:	2b02      	cmp	r3, #2
 800613a:	f000 8120 	beq.w	800637e <HAL_PCD_IRQHandler+0x6d2>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800613e:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8006142:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614e:	041b      	lsls	r3, r3, #16
 8006150:	0c1b      	lsrs	r3, r3, #16
 8006152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006156:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800615a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800615e:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8006162:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006166:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800616a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800616e:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006170:	d06e      	beq.n	8006250 <HAL_PCD_IRQHandler+0x5a4>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006172:	3302      	adds	r3, #2
 8006174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006178:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800617c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8006180:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8006184:	461f      	mov	r7, r3
              if (count != 0U)
 8006186:	2b00      	cmp	r3, #0
 8006188:	f43f aeca 	beq.w	8005f20 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800618c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8006190:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8006194:	f002 fb64 	bl	8008860 <USB_ReadPMA>
 8006198:	e6c2      	b.n	8005f20 <HAL_PCD_IRQHandler+0x274>
 800619a:	2300      	movs	r3, #0
 800619c:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800619e:	4620      	mov	r0, r4
 80061a0:	f003 fab8 	bl	8009714 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	4602      	mov	r2, r0
 80061a8:	e5e4      	b.n	8005d74 <HAL_PCD_IRQHandler+0xc8>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80061ae:	8802      	ldrh	r2, [r0, #0]
 80061b0:	4013      	ands	r3, r2
 80061b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b6:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80061b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80061bc:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061c6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80061ca:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80061ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80061d6:	b193      	cbz	r3, 80061fe <HAL_PCD_IRQHandler+0x552>
 80061d8:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 80061dc:	b179      	cbz	r1, 80061fe <HAL_PCD_IRQHandler+0x552>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80061de:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80061e2:	f002 fb3d 	bl	8008860 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80061e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061ea:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80061ee:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 80061f0:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80061f2:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80061f4:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80061f8:	f003 fa82 	bl	8009700 <HAL_PCD_DataOutStageCallback>
 80061fc:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80061fe:	8803      	ldrh	r3, [r0, #0]
 8006200:	4602      	mov	r2, r0
 8006202:	051b      	lsls	r3, r3, #20
 8006204:	f53f adb6 	bmi.w	8005d74 <HAL_PCD_IRQHandler+0xc8>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006208:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800620c:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8006210:	b29b      	uxth	r3, r3
 8006212:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 8006216:	2900      	cmp	r1, #0
 8006218:	f040 80a6 	bne.w	8006368 <HAL_PCD_IRQHandler+0x6bc>
 800621c:	5ae9      	ldrh	r1, [r5, r3]
 800621e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8006222:	0409      	lsls	r1, r1, #16
 8006224:	0c09      	lsrs	r1, r1, #16
 8006226:	52e9      	strh	r1, [r5, r3]
 8006228:	5ae9      	ldrh	r1, [r5, r3]
 800622a:	b289      	uxth	r1, r1
 800622c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006230:	52e9      	strh	r1, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006232:	8803      	ldrh	r3, [r0, #0]
 8006234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623c:	041b      	lsls	r3, r3, #16
 800623e:	0c1b      	lsrs	r3, r3, #16
 8006240:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624c:	8003      	strh	r3, [r0, #0]
 800624e:	e591      	b.n	8005d74 <HAL_PCD_IRQHandler+0xc8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006250:	3306      	adds	r3, #6
 8006252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006256:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800625a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800625e:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8006262:	461f      	mov	r7, r3
              if (count != 0U)
 8006264:	2b00      	cmp	r3, #0
 8006266:	f43f ae5b 	beq.w	8005f20 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800626a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800626e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8006272:	f002 faf5 	bl	8008860 <USB_ReadPMA>
 8006276:	e653      	b.n	8005f20 <HAL_PCD_IRQHandler+0x274>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006278:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 800627c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8006280:	f002 faee 	bl	8008860 <USB_ReadPMA>
 8006284:	e64c      	b.n	8005f20 <HAL_PCD_IRQHandler+0x274>
        ep = &hpcd->OUT_ep[epindex];
 8006286:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800628a:	6820      	ldr	r0, [r4, #0]
 800628c:	4421      	add	r1, r4
 800628e:	f001 ff49 	bl	8008124 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006292:	6820      	ldr	r0, [r4, #0]
 8006294:	4602      	mov	r2, r0
 8006296:	e580      	b.n	8005d9a <HAL_PCD_IRQHandler+0xee>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006298:	f8b3 e40c 	ldrh.w	lr, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 800629c:	1973      	adds	r3, r6, r5
 800629e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80062a2:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062a6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 80062aa:	45f3      	cmp	fp, lr
 80062ac:	f0c0 80a5 	bcc.w	80063fa <HAL_PCD_IRQHandler+0x74e>
      ep->xfer_len -= TxByteNbre;
 80062b0:	ebab 0c0e 	sub.w	ip, fp, lr
 80062b4:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80062b8:	f1bc 0f00 	cmp.w	ip, #0
 80062bc:	f000 809f 	beq.w	80063fe <HAL_PCD_IRQHandler+0x752>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80062c0:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 80062c4:	d10d      	bne.n	80062e2 <HAL_PCD_IRQHandler+0x636>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80062c6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80062ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d2:	041b      	lsls	r3, r3, #16
 80062d4:	0c1b      	lsrs	r3, r3, #16
 80062d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80062e2:	1973      	adds	r3, r6, r5
 80062e4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80062e8:	f893 c04c 	ldrb.w	ip, [r3, #76]	; 0x4c
 80062ec:	f1bc 0f01 	cmp.w	ip, #1
 80062f0:	f040 80c5 	bne.w	800647e <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 80062f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80062f6:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80062fa:	eb02 0c0e 	add.w	ip, r2, lr
        ep->xfer_count += TxByteNbre;
 80062fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8006300:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8006304:	4472      	add	r2, lr
 8006306:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8006308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800630a:	4542      	cmp	r2, r8
 800630c:	f0c0 81ab 	bcc.w	8006666 <HAL_PCD_IRQHandler+0x9ba>
          ep->xfer_len_db -= len;
 8006310:	eba2 0208 	sub.w	r2, r2, r8
 8006314:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006316:	fa1f fe88 	uxth.w	lr, r8
 800631a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800631e:	2b00      	cmp	r3, #0
 8006320:	f040 8194 	bne.w	800664c <HAL_PCD_IRQHandler+0x9a0>
 8006324:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006328:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800632c:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8006330:	b292      	uxth	r2, r2
 8006332:	188b      	adds	r3, r1, r2
 8006334:	f1b8 0f00 	cmp.w	r8, #0
 8006338:	f040 81d0 	bne.w	80066dc <HAL_PCD_IRQHandler+0xa30>
 800633c:	5a8b      	ldrh	r3, [r1, r2]
 800633e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006342:	041b      	lsls	r3, r3, #16
 8006344:	0c1b      	lsrs	r3, r3, #16
 8006346:	528b      	strh	r3, [r1, r2]
 8006348:	5a8b      	ldrh	r3, [r1, r2]
 800634a:	b29b      	uxth	r3, r3
 800634c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006350:	528b      	strh	r3, [r1, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006352:	1972      	adds	r2, r6, r5
 8006354:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8006358:	4673      	mov	r3, lr
 800635a:	4661      	mov	r1, ip
 800635c:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800635e:	f002 fa6f 	bl	8008840 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006362:	6820      	ldr	r0, [r4, #0]
 8006364:	4602      	mov	r2, r0
 8006366:	e08a      	b.n	800647e <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006368:	293e      	cmp	r1, #62	; 0x3e
 800636a:	f200 80cb 	bhi.w	8006504 <HAL_PCD_IRQHandler+0x858>
 800636e:	084e      	lsrs	r6, r1, #1
 8006370:	07cf      	lsls	r7, r1, #31
 8006372:	bf48      	it	mi
 8006374:	3601      	addmi	r6, #1
 8006376:	02b1      	lsls	r1, r6, #10
 8006378:	b289      	uxth	r1, r1
 800637a:	52e9      	strh	r1, [r5, r3]
 800637c:	e759      	b.n	8006232 <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800637e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006382:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006386:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006388:	f000 80c7 	beq.w	800651a <HAL_PCD_IRQHandler+0x86e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800638c:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8006390:	3302      	adds	r3, #2
 8006392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006396:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800639a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 800639e:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80063a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 80063a6:	459c      	cmp	ip, r3
 80063a8:	461f      	mov	r7, r3
 80063aa:	f0c0 8112 	bcc.w	80065d2 <HAL_PCD_IRQHandler+0x926>
      ep->xfer_len -= count;
 80063ae:	ebac 0c03 	sub.w	ip, ip, r3
 80063b2:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80063b6:	f1bc 0f00 	cmp.w	ip, #0
 80063ba:	f000 810e 	beq.w	80065da <HAL_PCD_IRQHandler+0x92e>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80063be:	f018 0f40 	tst.w	r8, #64	; 0x40
 80063c2:	d00d      	beq.n	80063e0 <HAL_PCD_IRQHandler+0x734>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80063c4:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80063c8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80063cc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80063d0:	0409      	lsls	r1, r1, #16
 80063d2:	0c09      	lsrs	r1, r1, #16
 80063d4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80063d8:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80063dc:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80c3 	beq.w	800656c <HAL_PCD_IRQHandler+0x8c0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80063e6:	1971      	adds	r1, r6, r5
 80063e8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80063ec:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80063f0:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80063f4:	f002 fa34 	bl	8008860 <USB_ReadPMA>
 80063f8:	e592      	b.n	8005f20 <HAL_PCD_IRQHandler+0x274>
 80063fa:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063fe:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 80be 	bne.w	8006584 <HAL_PCD_IRQHandler+0x8d8>
 8006408:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800640c:	010b      	lsls	r3, r1, #4
 800640e:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8006412:	4406      	add	r6, r0
 8006414:	b2ad      	uxth	r5, r5
 8006416:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006418:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800641c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006420:	0412      	lsls	r2, r2, #16
 8006422:	0c12      	lsrs	r2, r2, #16
 8006424:	5372      	strh	r2, [r6, r5]
 8006426:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006428:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800642a:	b292      	uxth	r2, r2
 800642c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006430:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006432:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8006436:	b280      	uxth	r0, r0
 8006438:	5a1a      	ldrh	r2, [r3, r0]
 800643a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800643e:	0412      	lsls	r2, r2, #16
 8006440:	0c12      	lsrs	r2, r2, #16
 8006442:	521a      	strh	r2, [r3, r0]
 8006444:	5a1a      	ldrh	r2, [r3, r0]
 8006446:	b292      	uxth	r2, r2
 8006448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800644c:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800644e:	4620      	mov	r0, r4
 8006450:	f003 f960 	bl	8009714 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006454:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006458:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800645a:	d183      	bne.n	8006364 <HAL_PCD_IRQHandler+0x6b8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800645c:	4602      	mov	r2, r0
 800645e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8006462:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646e:	041b      	lsls	r3, r3, #16
 8006470:	0c1b      	lsrs	r3, r3, #16
 8006472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800647e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8006482:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8006486:	b29b      	uxth	r3, r3
 8006488:	ea03 030a 	and.w	r3, r3, sl
 800648c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8006490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006498:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 800649c:	e46a      	b.n	8005d74 <HAL_PCD_IRQHandler+0xc8>
 800649e:	2300      	movs	r3, #0
 80064a0:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064a4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d17f      	bne.n	80065ac <HAL_PCD_IRQHandler+0x900>
 80064ac:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80064b0:	010b      	lsls	r3, r1, #4
 80064b2:	f203 4604 	addw	r6, r3, #1028	; 0x404
 80064b6:	4406      	add	r6, r0
 80064b8:	b2ad      	uxth	r5, r5
 80064ba:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064c0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80064c4:	0412      	lsls	r2, r2, #16
 80064c6:	0c12      	lsrs	r2, r2, #16
 80064c8:	5372      	strh	r2, [r6, r5]
 80064ca:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064cc:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064ce:	b292      	uxth	r2, r2
 80064d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064d4:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064d6:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 80064da:	b280      	uxth	r0, r0
 80064dc:	5a1a      	ldrh	r2, [r3, r0]
 80064de:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80064e2:	0412      	lsls	r2, r2, #16
 80064e4:	0c12      	lsrs	r2, r2, #16
 80064e6:	521a      	strh	r2, [r3, r0]
 80064e8:	5a1a      	ldrh	r2, [r3, r0]
 80064ea:	b292      	uxth	r2, r2
 80064ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064f0:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064f2:	4620      	mov	r0, r4
 80064f4:	f003 f90e 	bl	8009714 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064f8:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80064fc:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064fe:	d1ad      	bne.n	800645c <HAL_PCD_IRQHandler+0x7b0>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006500:	4602      	mov	r2, r0
 8006502:	e7bc      	b.n	800647e <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006504:	094e      	lsrs	r6, r1, #5
 8006506:	06c9      	lsls	r1, r1, #27
 8006508:	4989      	ldr	r1, [pc, #548]	; (8006730 <HAL_PCD_IRQHandler+0xa84>)
 800650a:	bf08      	it	eq
 800650c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006510:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8006514:	b289      	uxth	r1, r1
 8006516:	52e9      	strh	r1, [r5, r3]
 8006518:	e68b      	b.n	8006232 <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800651a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800651e:	3306      	adds	r3, #6
 8006520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006524:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006528:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 800652c:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006530:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8006534:	459e      	cmp	lr, r3
 8006536:	461f      	mov	r7, r3
 8006538:	d360      	bcc.n	80065fc <HAL_PCD_IRQHandler+0x950>
      ep->xfer_len -= count;
 800653a:	ebae 0e03 	sub.w	lr, lr, r3
 800653e:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8006542:	f1be 0f00 	cmp.w	lr, #0
 8006546:	d05b      	beq.n	8006600 <HAL_PCD_IRQHandler+0x954>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006548:	f018 0f40 	tst.w	r8, #64	; 0x40
 800654c:	d10d      	bne.n	800656a <HAL_PCD_IRQHandler+0x8be>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800654e:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8006552:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8006556:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800655a:	0409      	lsls	r1, r1, #16
 800655c:	0c09      	lsrs	r1, r1, #16
 800655e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006562:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8006566:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 800656a:	b90b      	cbnz	r3, 8006570 <HAL_PCD_IRQHandler+0x8c4>
 800656c:	461f      	mov	r7, r3
 800656e:	e4d7      	b.n	8005f20 <HAL_PCD_IRQHandler+0x274>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006570:	1971      	adds	r1, r6, r5
 8006572:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8006576:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800657a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800657e:	f002 f96f 	bl	8008860 <USB_ReadPMA>
 8006582:	e4cd      	b.n	8005f20 <HAL_PCD_IRQHandler+0x274>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006584:	2b01      	cmp	r3, #1
 8006586:	f47f af62 	bne.w	800644e <HAL_PCD_IRQHandler+0x7a2>
 800658a:	2500      	movs	r5, #0
 800658c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006590:	010b      	lsls	r3, r1, #4
 8006592:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8006596:	b292      	uxth	r2, r2
 8006598:	4406      	add	r6, r0
 800659a:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800659c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80065a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065a4:	4403      	add	r3, r0
 80065a6:	b292      	uxth	r2, r2
 80065a8:	529d      	strh	r5, [r3, r2]
 80065aa:	e750      	b.n	800644e <HAL_PCD_IRQHandler+0x7a2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d1a0      	bne.n	80064f2 <HAL_PCD_IRQHandler+0x846>
 80065b0:	2500      	movs	r5, #0
 80065b2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80065b6:	010b      	lsls	r3, r1, #4
 80065b8:	f203 4604 	addw	r6, r3, #1028	; 0x404
 80065bc:	b292      	uxth	r2, r2
 80065be:	4406      	add	r6, r0
 80065c0:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065c2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80065c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065ca:	4403      	add	r3, r0
 80065cc:	b292      	uxth	r2, r2
 80065ce:	529d      	strh	r5, [r3, r2]
 80065d0:	e78f      	b.n	80064f2 <HAL_PCD_IRQHandler+0x846>
 80065d2:	f04f 0c00 	mov.w	ip, #0
 80065d6:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80065da:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80065de:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80065e2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80065e6:	0409      	lsls	r1, r1, #16
 80065e8:	0c09      	lsrs	r1, r1, #16
 80065ea:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80065ee:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80065f2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80065f6:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 80065fa:	e6e0      	b.n	80063be <HAL_PCD_IRQHandler+0x712>
 80065fc:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006600:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8006604:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8006608:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800660c:	0409      	lsls	r1, r1, #16
 800660e:	0c09      	lsrs	r1, r1, #16
 8006610:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8006614:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006618:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800661c:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8006620:	e792      	b.n	8006548 <HAL_PCD_IRQHandler+0x89c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006622:	b293      	uxth	r3, r2
 8006624:	f1be 0f01 	cmp.w	lr, #1
 8006628:	f47f ac4d 	bne.w	8005ec6 <HAL_PCD_IRQHandler+0x21a>
 800662c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006630:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006634:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8006638:	b292      	uxth	r2, r2
 800663a:	528b      	strh	r3, [r1, r2]
 800663c:	e443      	b.n	8005ec6 <HAL_PCD_IRQHandler+0x21a>
        else if (ep->xfer_len_db == 0U)
 800663e:	b9ba      	cbnz	r2, 8006670 <HAL_PCD_IRQHandler+0x9c4>
          ep->xfer_fill_db = 0U;
 8006640:	4698      	mov	r8, r3
 8006642:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
 8006646:	e41c      	b.n	8005e82 <HAL_PCD_IRQHandler+0x1d6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006648:	fa1f fe82 	uxth.w	lr, r2
 800664c:	2b01      	cmp	r3, #1
 800664e:	f47f ae80 	bne.w	8006352 <HAL_PCD_IRQHandler+0x6a6>
 8006652:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006656:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 800665a:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800665e:	b29b      	uxth	r3, r3
 8006660:	f822 e003 	strh.w	lr, [r2, r3]
 8006664:	e675      	b.n	8006352 <HAL_PCD_IRQHandler+0x6a6>
        else if (ep->xfer_len_db == 0U)
 8006666:	bb22      	cbnz	r2, 80066b2 <HAL_PCD_IRQHandler+0xa06>
          ep->xfer_fill_db = 0U;
 8006668:	46f0      	mov	r8, lr
 800666a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800666e:	e654      	b.n	800631a <HAL_PCD_IRQHandler+0x66e>
          ep->xfer_fill_db = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	f88e 304c 	strb.w	r3, [lr, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8006676:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800667a:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 800667e:	f1be 0f00 	cmp.w	lr, #0
 8006682:	d1ce      	bne.n	8006622 <HAL_PCD_IRQHandler+0x976>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006684:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006686:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800668a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800668e:	b29b      	uxth	r3, r3
 8006690:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8006694:	4419      	add	r1, r3
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006696:	b293      	uxth	r3, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006698:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 800669c:	d82b      	bhi.n	80066f6 <HAL_PCD_IRQHandler+0xa4a>
 800669e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 80066a2:	f018 0f01 	tst.w	r8, #1
 80066a6:	bf18      	it	ne
 80066a8:	3201      	addne	r2, #1
 80066aa:	0292      	lsls	r2, r2, #10
 80066ac:	b292      	uxth	r2, r2
 80066ae:	800a      	strh	r2, [r1, #0]
 80066b0:	e409      	b.n	8005ec6 <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_len_db = 0U;
 80066b2:	f04f 0e00 	mov.w	lr, #0
 80066b6:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80066ba:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80066be:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1c0      	bne.n	8006648 <HAL_PCD_IRQHandler+0x99c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80066c6:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80066c8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80066cc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80066d0:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	440b      	add	r3, r1
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80066d8:	fa1f fe82 	uxth.w	lr, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80066dc:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 80066e0:	d818      	bhi.n	8006714 <HAL_PCD_IRQHandler+0xa68>
 80066e2:	ea4f 0258 	mov.w	r2, r8, lsr #1
 80066e6:	f018 0f01 	tst.w	r8, #1
 80066ea:	bf18      	it	ne
 80066ec:	3201      	addne	r2, #1
 80066ee:	0292      	lsls	r2, r2, #10
 80066f0:	b292      	uxth	r2, r2
 80066f2:	801a      	strh	r2, [r3, #0]
 80066f4:	e62d      	b.n	8006352 <HAL_PCD_IRQHandler+0x6a6>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80066f6:	ea4f 1258 	mov.w	r2, r8, lsr #5
 80066fa:	f8df e034 	ldr.w	lr, [pc, #52]	; 8006730 <HAL_PCD_IRQHandler+0xa84>
 80066fe:	f018 0f1f 	tst.w	r8, #31
 8006702:	bf08      	it	eq
 8006704:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8006708:	ea4e 2282 	orr.w	r2, lr, r2, lsl #10
 800670c:	b292      	uxth	r2, r2
 800670e:	800a      	strh	r2, [r1, #0]
 8006710:	f7ff bbd9 	b.w	8005ec6 <HAL_PCD_IRQHandler+0x21a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006714:	ea4f 1258 	mov.w	r2, r8, lsr #5
 8006718:	4905      	ldr	r1, [pc, #20]	; (8006730 <HAL_PCD_IRQHandler+0xa84>)
 800671a:	f018 0f1f 	tst.w	r8, #31
 800671e:	bf08      	it	eq
 8006720:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8006724:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 8006728:	b292      	uxth	r2, r2
 800672a:	801a      	strh	r2, [r3, #0]
 800672c:	e611      	b.n	8006352 <HAL_PCD_IRQHandler+0x6a6>
 800672e:	bf00      	nop
 8006730:	ffff8000 	.word	0xffff8000

08006734 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8006734:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8006738:	2a01      	cmp	r2, #1
 800673a:	d00e      	beq.n	800675a <HAL_PCD_SetAddress+0x26>
{
 800673c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800673e:	2201      	movs	r2, #1
 8006740:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006742:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8006744:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8006748:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800674c:	f002 f86c 	bl	8008828 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006750:	2300      	movs	r3, #0
 8006752:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8006756:	4618      	mov	r0, r3
}
 8006758:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800675a:	2002      	movs	r0, #2
}
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop

08006760 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8006760:	f001 0c07 	and.w	ip, r1, #7
 8006764:	0609      	lsls	r1, r1, #24
{
 8006766:	b510      	push	{r4, lr}
 8006768:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800676a:	d425      	bmi.n	80067b8 <HAL_PCD_EP_Open+0x58>
    ep->is_in = 0U;
 800676c:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006770:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 8006774:	00c0      	lsls	r0, r0, #3
 8006776:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 800677a:	4420      	add	r0, r4
 800677c:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006780:	4421      	add	r1, r4
  ep->maxpacket = ep_mps;
 8006782:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8006784:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006786:	f881 c000 	strb.w	ip, [r1]
  ep->type = ep_type;
 800678a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800678c:	b10a      	cbz	r2, 8006792 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 800678e:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8006792:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8006794:	bf04      	itt	eq
 8006796:	2300      	moveq	r3, #0
 8006798:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800679a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d019      	beq.n	80067d6 <HAL_PCD_EP_Open+0x76>
 80067a2:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80067a4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80067a6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80067aa:	f001 fa67 	bl	8007c7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80067ae:	2300      	movs	r3, #0
 80067b0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return ret;
 80067b4:	4618      	mov	r0, r3
}
 80067b6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067b8:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 80067bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80067c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80067c4:	2001      	movs	r0, #1
 80067c6:	7048      	strb	r0, [r1, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067c8:	eb0c 0100 	add.w	r1, ip, r0
 80067cc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80067d0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 80067d4:	e7d5      	b.n	8006782 <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 80067d6:	2002      	movs	r0, #2
}
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	bf00      	nop

080067dc <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80067dc:	060b      	lsls	r3, r1, #24
{
 80067de:	b510      	push	{r4, lr}
 80067e0:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80067e2:	d41b      	bmi.n	800681c <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067e4:	f001 0307 	and.w	r3, r1, #7
 80067e8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80067ec:	00d2      	lsls	r2, r2, #3
 80067ee:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 80067f2:	4401      	add	r1, r0
    ep->is_in = 0U;
 80067f4:	4402      	add	r2, r0
 80067f6:	2000      	movs	r0, #0
 80067f8:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 80067fc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80067fe:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006802:	2b01      	cmp	r3, #1
 8006804:	d019      	beq.n	800683a <HAL_PCD_EP_Close+0x5e>
 8006806:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006808:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800680a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800680e:	f001 fba9 	bl	8007f64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006812:	2300      	movs	r3, #0
 8006814:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8006818:	4618      	mov	r0, r3
}
 800681a:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800681c:	2001      	movs	r0, #1
 800681e:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006822:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 8006824:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006828:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800682c:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800682e:	7050      	strb	r0, [r2, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006830:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8006832:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006836:	2b01      	cmp	r3, #1
 8006838:	d1e5      	bne.n	8006806 <HAL_PCD_EP_Close+0x2a>
 800683a:	2002      	movs	r0, #2
}
 800683c:	bd10      	pop	{r4, pc}
 800683e:	bf00      	nop

08006840 <HAL_PCD_EP_Receive>:
{
 8006840:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 8006842:	2400      	movs	r4, #0
 8006844:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8006848:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 800684c:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 8006850:	e9cc 235f 	strd	r2, r3, [ip, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006854:	6800      	ldr	r0, [r0, #0]
 8006856:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
  ep->xfer_count = 0U;
 800685a:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 800685e:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8006862:	f88c e168 	strb.w	lr, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006866:	f001 fc5d 	bl	8008124 <USB_EPStartXfer>
}
 800686a:	4620      	mov	r0, r4
 800686c:	bd10      	pop	{r4, pc}
 800686e:	bf00      	nop

08006870 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006870:	f001 0107 	and.w	r1, r1, #7
 8006874:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006878:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800687c:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop

08006884 <HAL_PCD_EP_Transmit>:
{
 8006884:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 8006886:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8006888:	2500      	movs	r5, #0
{
 800688a:	4604      	mov	r4, r0
 800688c:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8006890:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006894:	eb0e 0106 	add.w	r1, lr, r6
  ep->xfer_buff = pBuf;
 8006898:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800689c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  ep->xfer_buff = pBuf;
 80068a0:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->num = ep_addr & EP_ADDR_MSK;
 80068a4:	f88c e028 	strb.w	lr, [ip, #40]	; 0x28
  ep->xfer_len = len;
 80068a8:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 80068ac:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_fill_db = 1U;
 80068b0:	f88c 604c 	strb.w	r6, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 80068b4:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
  ep->is_in = 1U;
 80068b8:	f88c 6029 	strb.w	r6, [ip, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80068bc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80068c0:	6800      	ldr	r0, [r0, #0]
 80068c2:	f001 fc2f 	bl	8008124 <USB_EPStartXfer>
}
 80068c6:	4628      	mov	r0, r5
 80068c8:	bd70      	pop	{r4, r5, r6, pc}
 80068ca:	bf00      	nop

080068cc <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80068cc:	6843      	ldr	r3, [r0, #4]
{
 80068ce:	b510      	push	{r4, lr}
 80068d0:	4604      	mov	r4, r0
 80068d2:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80068d6:	4298      	cmp	r0, r3
 80068d8:	d82d      	bhi.n	8006936 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 80068da:	060b      	lsls	r3, r1, #24
 80068dc:	d41a      	bmi.n	8006914 <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 80068de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80068e2:	00c9      	lsls	r1, r1, #3
 80068e4:	f501 72b4 	add.w	r2, r1, #360	; 0x168
    ep->is_in = 0U;
 80068e8:	1863      	adds	r3, r4, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80068ea:	18a1      	adds	r1, r4, r2
    ep->is_in = 0U;
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 80068f2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80068f4:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 80068f6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80068f8:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d018      	beq.n	8006932 <HAL_PCD_EP_SetStall+0x66>
 8006900:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006904:	6820      	ldr	r0, [r4, #0]
 8006906:	f001 ff17 	bl	8008738 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800690a:	2300      	movs	r3, #0
 800690c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8006910:	4618      	mov	r0, r3
}
 8006912:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8006914:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006916:	1883      	adds	r3, r0, r2
    ep->is_in = 1U;
 8006918:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800691c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006920:	705a      	strb	r2, [r3, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006922:	4619      	mov	r1, r3
  ep->is_stall = 1U;
 8006924:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8006926:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 8006928:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800692a:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800692e:	429a      	cmp	r2, r3
 8006930:	d1e6      	bne.n	8006900 <HAL_PCD_EP_SetStall+0x34>
 8006932:	2002      	movs	r0, #2
}
 8006934:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006936:	2001      	movs	r0, #1
}
 8006938:	bd10      	pop	{r4, pc}
 800693a:	bf00      	nop

0800693c <HAL_PCD_EP_ClrStall>:
{
 800693c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800693e:	6843      	ldr	r3, [r0, #4]
 8006940:	f001 020f 	and.w	r2, r1, #15
 8006944:	429a      	cmp	r2, r3
 8006946:	d832      	bhi.n	80069ae <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8006948:	060b      	lsls	r3, r1, #24
 800694a:	4604      	mov	r4, r0
 800694c:	d41c      	bmi.n	8006988 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800694e:	f001 0307 	and.w	r3, r1, #7
 8006952:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006956:	00d2      	lsls	r2, r2, #3
 8006958:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800695c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800695e:	4402      	add	r2, r0
  ep->is_stall = 0U;
 8006960:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8006962:	2000      	movs	r0, #0
 8006964:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8006968:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800696a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800696c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006970:	2b01      	cmp	r3, #1
 8006972:	d01a      	beq.n	80069aa <HAL_PCD_EP_ClrStall+0x6e>
 8006974:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006976:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006978:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800697c:	f001 ff04 	bl	8008788 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006980:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8006984:	4628      	mov	r0, r5
}
 8006986:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8006988:	2001      	movs	r0, #1
 800698a:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800698e:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 8006990:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006994:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006998:	4611      	mov	r1, r2
  ep->is_stall = 0U;
 800699a:	2500      	movs	r5, #0
    ep->is_in = 1U;
 800699c:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800699e:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 80069a0:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80069a2:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d1e4      	bne.n	8006974 <HAL_PCD_EP_ClrStall+0x38>
 80069aa:	2002      	movs	r0, #2
}
 80069ac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80069ae:	2001      	movs	r0, #1
}
 80069b0:	bd38      	pop	{r3, r4, r5, pc}
 80069b2:	bf00      	nop

080069b4 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80069b4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80069b8:	d00b      	beq.n	80069d2 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069ba:	f001 0107 	and.w	r1, r1, #7
 80069be:	3101      	adds	r1, #1
 80069c0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80069c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80069c8:	b95a      	cbnz	r2, 80069e2 <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80069ca:	2000      	movs	r0, #0
    ep->pmaadress = (uint16_t)pmaadress;
 80069cc:	80cb      	strh	r3, [r1, #6]
 80069ce:	730a      	strb	r2, [r1, #12]
}
 80069d0:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80069d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80069d6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80069da:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 80069de:	2a00      	cmp	r2, #0
 80069e0:	d0f3      	beq.n	80069ca <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 80069e2:	2201      	movs	r2, #1
}
 80069e4:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80069e6:	608b      	str	r3, [r1, #8]
 80069e8:	730a      	strb	r2, [r1, #12]
}
 80069ea:	4770      	bx	lr

080069ec <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80069ec:	4b1d      	ldr	r3, [pc, #116]	; (8006a64 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 80069ee:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80069f6:	d116      	bne.n	8006a26 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80069f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069fa:	00d2      	lsls	r2, r2, #3
 80069fc:	d420      	bmi.n	8006a40 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006a00:	4919      	ldr	r1, [pc, #100]	; (8006a68 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a06:	625a      	str	r2, [r3, #36]	; 0x24
 8006a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a0a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006a0e:	9201      	str	r2, [sp, #4]
 8006a10:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006a12:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a14:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006a16:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a1a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8006a1e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a22:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8006a24:	d013      	beq.n	8006a4e <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006a26:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006a28:	4a10      	ldr	r2, [pc, #64]	; (8006a6c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8006a2a:	6813      	ldr	r3, [r2, #0]
 8006a2c:	f023 0301 	bic.w	r3, r3, #1
 8006a30:	4303      	orrs	r3, r0
 8006a32:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006a34:	6813      	ldr	r3, [r2, #0]
 8006a36:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8006a3a:	4058      	eors	r0, r3
 8006a3c:	b002      	add	sp, #8
 8006a3e:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006a40:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8006a48:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8006a4c:	d1eb      	bne.n	8006a26 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 8006a4e:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8006a52:	d1e8      	bne.n	8006a26 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 8006a54:	4a05      	ldr	r2, [pc, #20]	; (8006a6c <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 8006a56:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 8006a58:	6813      	ldr	r3, [r2, #0]
 8006a5a:	f043 0304 	orr.w	r3, r3, #4
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	e7e2      	b.n	8006a28 <RCC_SetFlashLatencyFromMSIRange+0x3c>
 8006a62:	bf00      	nop
 8006a64:	40023800 	.word	0x40023800
 8006a68:	40007000 	.word	0x40007000
 8006a6c:	40023c00 	.word	0x40023c00

08006a70 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8006a70:	2800      	cmp	r0, #0
 8006a72:	f000 81f8 	beq.w	8006e66 <HAL_RCC_OscConfig+0x3f6>
{
 8006a76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a7a:	4aa2      	ldr	r2, [pc, #648]	; (8006d04 <HAL_RCC_OscConfig+0x294>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a7c:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a7e:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a80:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a82:	07d9      	lsls	r1, r3, #31
 8006a84:	4604      	mov	r4, r0
{
 8006a86:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a88:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a8c:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a90:	d52e      	bpl.n	8006af0 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a92:	2d08      	cmp	r5, #8
 8006a94:	f000 8128 	beq.w	8006ce8 <HAL_RCC_OscConfig+0x278>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a98:	2d0c      	cmp	r5, #12
 8006a9a:	f000 8122 	beq.w	8006ce2 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a9e:	6863      	ldr	r3, [r4, #4]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d00f      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x54>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8180 	beq.w	8006daa <HAL_RCC_OscConfig+0x33a>
 8006aaa:	2b05      	cmp	r3, #5
 8006aac:	4b95      	ldr	r3, [pc, #596]	; (8006d04 <HAL_RCC_OscConfig+0x294>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	f000 81db 	beq.w	8006e6a <HAL_RCC_OscConfig+0x3fa>
 8006ab4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	e004      	b.n	8006ace <HAL_RCC_OscConfig+0x5e>
 8006ac4:	4a8f      	ldr	r2, [pc, #572]	; (8006d04 <HAL_RCC_OscConfig+0x294>)
 8006ac6:	6813      	ldr	r3, [r2, #0]
 8006ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006acc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006ace:	f7fd fe83 	bl	80047d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ad2:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8006d04 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 8006ad6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ad8:	e005      	b.n	8006ae6 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ada:	f7fd fe7d 	bl	80047d8 <HAL_GetTick>
 8006ade:	1bc0      	subs	r0, r0, r7
 8006ae0:	2864      	cmp	r0, #100	; 0x64
 8006ae2:	f200 815e 	bhi.w	8006da2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8006aea:	039b      	lsls	r3, r3, #14
 8006aec:	d5f5      	bpl.n	8006ada <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	0799      	lsls	r1, r3, #30
 8006af2:	d522      	bpl.n	8006b3a <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006af4:	2d04      	cmp	r5, #4
 8006af6:	f000 8114 	beq.w	8006d22 <HAL_RCC_OscConfig+0x2b2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006afa:	2d0c      	cmp	r5, #12
 8006afc:	f000 810e 	beq.w	8006d1c <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b00:	68e3      	ldr	r3, [r4, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8179 	beq.w	8006dfa <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 8006b08:	2201      	movs	r2, #1
 8006b0a:	4b7f      	ldr	r3, [pc, #508]	; (8006d08 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b0c:	4f7d      	ldr	r7, [pc, #500]	; (8006d04 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_ENABLE();
 8006b0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b10:	f7fd fe62 	bl	80047d8 <HAL_GetTick>
 8006b14:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b16:	e005      	b.n	8006b24 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b18:	f7fd fe5e 	bl	80047d8 <HAL_GetTick>
 8006b1c:	1b80      	subs	r0, r0, r6
 8006b1e:	2802      	cmp	r0, #2
 8006b20:	f200 813f 	bhi.w	8006da2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	079b      	lsls	r3, r3, #30
 8006b28:	d5f6      	bpl.n	8006b18 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6922      	ldr	r2, [r4, #16]
 8006b2e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006b32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006b36:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	06d9      	lsls	r1, r3, #27
 8006b3c:	d525      	bpl.n	8006b8a <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b3e:	2d00      	cmp	r5, #0
 8006b40:	f000 8098 	beq.w	8006c74 <HAL_RCC_OscConfig+0x204>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006b44:	69a3      	ldr	r3, [r4, #24]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 816a 	beq.w	8006e20 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_MSI_ENABLE();
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	4b6e      	ldr	r3, [pc, #440]	; (8006d08 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006b50:	4e6c      	ldr	r6, [pc, #432]	; (8006d04 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_MSI_ENABLE();
 8006b52:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8006b54:	f7fd fe40 	bl	80047d8 <HAL_GetTick>
 8006b58:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006b5a:	e005      	b.n	8006b68 <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b5c:	f7fd fe3c 	bl	80047d8 <HAL_GetTick>
 8006b60:	1bc0      	subs	r0, r0, r7
 8006b62:	2802      	cmp	r0, #2
 8006b64:	f200 811d 	bhi.w	8006da2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006b68:	6833      	ldr	r3, [r6, #0]
 8006b6a:	059b      	lsls	r3, r3, #22
 8006b6c:	d5f6      	bpl.n	8006b5c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b6e:	6873      	ldr	r3, [r6, #4]
 8006b70:	6a22      	ldr	r2, [r4, #32]
 8006b72:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006b76:	4313      	orrs	r3, r2
 8006b78:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b7a:	6873      	ldr	r3, [r6, #4]
 8006b7c:	69e2      	ldr	r2, [r4, #28]
 8006b7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006b86:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	0719      	lsls	r1, r3, #28
 8006b8c:	d516      	bpl.n	8006bbc <HAL_RCC_OscConfig+0x14c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b8e:	6963      	ldr	r3, [r4, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 8121 	beq.w	8006dd8 <HAL_RCC_OscConfig+0x368>
      __HAL_RCC_LSI_ENABLE();
 8006b96:	2201      	movs	r2, #1
 8006b98:	4b5b      	ldr	r3, [pc, #364]	; (8006d08 <HAL_RCC_OscConfig+0x298>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b9a:	4f5a      	ldr	r7, [pc, #360]	; (8006d04 <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_LSI_ENABLE();
 8006b9c:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8006ba0:	f7fd fe1a 	bl	80047d8 <HAL_GetTick>
 8006ba4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ba6:	e005      	b.n	8006bb4 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ba8:	f7fd fe16 	bl	80047d8 <HAL_GetTick>
 8006bac:	1b80      	subs	r0, r0, r6
 8006bae:	2802      	cmp	r0, #2
 8006bb0:	f200 80f7 	bhi.w	8006da2 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	079a      	lsls	r2, r3, #30
 8006bb8:	d5f6      	bpl.n	8006ba8 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	075e      	lsls	r6, r3, #29
 8006bbe:	d53b      	bpl.n	8006c38 <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bc0:	4b50      	ldr	r3, [pc, #320]	; (8006d04 <HAL_RCC_OscConfig+0x294>)
 8006bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bc4:	00d0      	lsls	r0, r2, #3
 8006bc6:	f100 8129 	bmi.w	8006e1c <HAL_RCC_OscConfig+0x3ac>
      pwrclkchanged = SET;
 8006bca:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bde:	4f4b      	ldr	r7, [pc, #300]	; (8006d0c <HAL_RCC_OscConfig+0x29c>)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	05d9      	lsls	r1, r3, #23
 8006be4:	f140 80cc 	bpl.w	8006d80 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006be8:	68a3      	ldr	r3, [r4, #8]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	f000 8175 	beq.w	8006eda <HAL_RCC_OscConfig+0x46a>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 80a9 	beq.w	8006d48 <HAL_RCC_OscConfig+0x2d8>
 8006bf6:	2b05      	cmp	r3, #5
 8006bf8:	4b42      	ldr	r3, [pc, #264]	; (8006d04 <HAL_RCC_OscConfig+0x294>)
 8006bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bfc:	f000 818b 	beq.w	8006f16 <HAL_RCC_OscConfig+0x4a6>
 8006c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c04:	635a      	str	r2, [r3, #52]	; 0x34
 8006c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8006c0e:	f7fd fde3 	bl	80047d8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c12:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006c16:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c18:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8006d04 <HAL_RCC_OscConfig+0x294>
 8006c1c:	e005      	b.n	8006c2a <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c1e:	f7fd fddb 	bl	80047d8 <HAL_GetTick>
 8006c22:	1bc0      	subs	r0, r0, r7
 8006c24:	4548      	cmp	r0, r9
 8006c26:	f200 80bc 	bhi.w	8006da2 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c2a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8006c2e:	059b      	lsls	r3, r3, #22
 8006c30:	d5f5      	bpl.n	8006c1e <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 8006c32:	2e00      	cmp	r6, #0
 8006c34:	f040 814b 	bne.w	8006ece <HAL_RCC_OscConfig+0x45e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c38:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c3a:	b1b8      	cbz	r0, 8006c6c <HAL_RCC_OscConfig+0x1fc>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c3c:	2d0c      	cmp	r5, #12
 8006c3e:	f000 8152 	beq.w	8006ee6 <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c42:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	4b2f      	ldr	r3, [pc, #188]	; (8006d08 <HAL_RCC_OscConfig+0x298>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c4a:	f000 8116 	beq.w	8006e7a <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_PLL_DISABLE();
 8006c4e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006c50:	f7fd fdc2 	bl	80047d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c54:	4d2b      	ldr	r5, [pc, #172]	; (8006d04 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8006c56:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c58:	e005      	b.n	8006c66 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c5a:	f7fd fdbd 	bl	80047d8 <HAL_GetTick>
 8006c5e:	1b00      	subs	r0, r0, r4
 8006c60:	2802      	cmp	r0, #2
 8006c62:	f200 809e 	bhi.w	8006da2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c66:	682b      	ldr	r3, [r5, #0]
 8006c68:	019b      	lsls	r3, r3, #6
 8006c6a:	d4f6      	bmi.n	8006c5a <HAL_RCC_OscConfig+0x1ea>
  return HAL_OK;
 8006c6c:	2000      	movs	r0, #0
}
 8006c6e:	b003      	add	sp, #12
 8006c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c74:	4b23      	ldr	r3, [pc, #140]	; (8006d04 <HAL_RCC_OscConfig+0x294>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	059a      	lsls	r2, r3, #22
 8006c7a:	d502      	bpl.n	8006c82 <HAL_RCC_OscConfig+0x212>
 8006c7c:	69a3      	ldr	r3, [r4, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d03b      	beq.n	8006cfa <HAL_RCC_OscConfig+0x28a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006c82:	4e20      	ldr	r6, [pc, #128]	; (8006d04 <HAL_RCC_OscConfig+0x294>)
 8006c84:	6a20      	ldr	r0, [r4, #32]
 8006c86:	6873      	ldr	r3, [r6, #4]
 8006c88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006c8c:	4298      	cmp	r0, r3
 8006c8e:	f240 80d7 	bls.w	8006e40 <HAL_RCC_OscConfig+0x3d0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c92:	f7ff feab 	bl	80069ec <RCC_SetFlashLatencyFromMSIRange>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d12f      	bne.n	8006cfa <HAL_RCC_OscConfig+0x28a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c9a:	6872      	ldr	r2, [r6, #4]
 8006c9c:	6a23      	ldr	r3, [r4, #32]
 8006c9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ca6:	6872      	ldr	r2, [r6, #4]
 8006ca8:	69e1      	ldr	r1, [r4, #28]
 8006caa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006cae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006cb2:	6072      	str	r2, [r6, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006cb4:	4a13      	ldr	r2, [pc, #76]	; (8006d04 <HAL_RCC_OscConfig+0x294>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006cb6:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006cb8:	6891      	ldr	r1, [r2, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006cba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006cc4:	4a12      	ldr	r2, [pc, #72]	; (8006d10 <HAL_RCC_OscConfig+0x2a0>)
 8006cc6:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8006cca:	5c52      	ldrb	r2, [r2, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006ccc:	4811      	ldr	r0, [pc, #68]	; (8006d14 <HAL_RCC_OscConfig+0x2a4>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006cce:	40d3      	lsrs	r3, r2
        status = HAL_InitTick(uwTickPrio);
 8006cd0:	4a11      	ldr	r2, [pc, #68]	; (8006d18 <HAL_RCC_OscConfig+0x2a8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006cd2:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick(uwTickPrio);
 8006cd4:	6810      	ldr	r0, [r2, #0]
 8006cd6:	f7fd fd3d 	bl	8004754 <HAL_InitTick>
        if(status != HAL_OK)
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d1c7      	bne.n	8006c6e <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	e753      	b.n	8006b8a <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ce2:	2e00      	cmp	r6, #0
 8006ce4:	f43f aedb 	beq.w	8006a9e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce8:	4a06      	ldr	r2, [pc, #24]	; (8006d04 <HAL_RCC_OscConfig+0x294>)
 8006cea:	6812      	ldr	r2, [r2, #0]
 8006cec:	0392      	lsls	r2, r2, #14
 8006cee:	f57f aeff 	bpl.w	8006af0 <HAL_RCC_OscConfig+0x80>
 8006cf2:	6862      	ldr	r2, [r4, #4]
 8006cf4:	2a00      	cmp	r2, #0
 8006cf6:	f47f aefb 	bne.w	8006af0 <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 8006cfa:	2001      	movs	r0, #1
}
 8006cfc:	b003      	add	sp, #12
 8006cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d02:	bf00      	nop
 8006d04:	40023800 	.word	0x40023800
 8006d08:	42470000 	.word	0x42470000
 8006d0c:	40007000 	.word	0x40007000
 8006d10:	0800c874 	.word	0x0800c874
 8006d14:	20000010 	.word	0x20000010
 8006d18:	20000018 	.word	0x20000018
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006d1c:	2e00      	cmp	r6, #0
 8006d1e:	f47f aeef 	bne.w	8006b00 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d22:	4a81      	ldr	r2, [pc, #516]	; (8006f28 <HAL_RCC_OscConfig+0x4b8>)
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	0792      	lsls	r2, r2, #30
 8006d28:	d502      	bpl.n	8006d30 <HAL_RCC_OscConfig+0x2c0>
 8006d2a:	68e2      	ldr	r2, [r4, #12]
 8006d2c:	2a01      	cmp	r2, #1
 8006d2e:	d1e4      	bne.n	8006cfa <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d30:	497d      	ldr	r1, [pc, #500]	; (8006f28 <HAL_RCC_OscConfig+0x4b8>)
 8006d32:	6920      	ldr	r0, [r4, #16]
 8006d34:	684a      	ldr	r2, [r1, #4]
 8006d36:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8006d3a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006d3e:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d40:	06d9      	lsls	r1, r3, #27
 8006d42:	f57f af22 	bpl.w	8006b8a <HAL_RCC_OscConfig+0x11a>
 8006d46:	e6fa      	b.n	8006b3e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d48:	4f77      	ldr	r7, [pc, #476]	; (8006f28 <HAL_RCC_OscConfig+0x4b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d4a:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
 8006d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d5c:	637b      	str	r3, [r7, #52]	; 0x34
      tickstart = HAL_GetTick();
 8006d5e:	f7fd fd3b 	bl	80047d8 <HAL_GetTick>
 8006d62:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d64:	e005      	b.n	8006d72 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d66:	f7fd fd37 	bl	80047d8 <HAL_GetTick>
 8006d6a:	eba0 0008 	sub.w	r0, r0, r8
 8006d6e:	4548      	cmp	r0, r9
 8006d70:	d817      	bhi.n	8006da2 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d74:	0598      	lsls	r0, r3, #22
 8006d76:	d4f6      	bmi.n	8006d66 <HAL_RCC_OscConfig+0x2f6>
    if(pwrclkchanged == SET)
 8006d78:	2e00      	cmp	r6, #0
 8006d7a:	f43f af5d 	beq.w	8006c38 <HAL_RCC_OscConfig+0x1c8>
 8006d7e:	e0a6      	b.n	8006ece <HAL_RCC_OscConfig+0x45e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d86:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006d88:	f7fd fd26 	bl	80047d8 <HAL_GetTick>
 8006d8c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	05da      	lsls	r2, r3, #23
 8006d92:	f53f af29 	bmi.w	8006be8 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d96:	f7fd fd1f 	bl	80047d8 <HAL_GetTick>
 8006d9a:	eba0 0008 	sub.w	r0, r0, r8
 8006d9e:	2864      	cmp	r0, #100	; 0x64
 8006da0:	d9f5      	bls.n	8006d8e <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 8006da2:	2003      	movs	r0, #3
}
 8006da4:	b003      	add	sp, #12
 8006da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006daa:	4f5f      	ldr	r7, [pc, #380]	; (8006f28 <HAL_RCC_OscConfig+0x4b8>)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dba:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8006dbc:	f7fd fd0c 	bl	80047d8 <HAL_GetTick>
 8006dc0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dc2:	e005      	b.n	8006dd0 <HAL_RCC_OscConfig+0x360>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dc4:	f7fd fd08 	bl	80047d8 <HAL_GetTick>
 8006dc8:	eba0 0008 	sub.w	r0, r0, r8
 8006dcc:	2864      	cmp	r0, #100	; 0x64
 8006dce:	d8e8      	bhi.n	8006da2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	0398      	lsls	r0, r3, #14
 8006dd4:	d4f6      	bmi.n	8006dc4 <HAL_RCC_OscConfig+0x354>
 8006dd6:	e68a      	b.n	8006aee <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 8006dd8:	4a54      	ldr	r2, [pc, #336]	; (8006f2c <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006dda:	4f53      	ldr	r7, [pc, #332]	; (8006f28 <HAL_RCC_OscConfig+0x4b8>)
      __HAL_RCC_LSI_DISABLE();
 8006ddc:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8006de0:	f7fd fcfa 	bl	80047d8 <HAL_GetTick>
 8006de4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006de6:	e004      	b.n	8006df2 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006de8:	f7fd fcf6 	bl	80047d8 <HAL_GetTick>
 8006dec:	1b80      	subs	r0, r0, r6
 8006dee:	2802      	cmp	r0, #2
 8006df0:	d8d7      	bhi.n	8006da2 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df4:	079b      	lsls	r3, r3, #30
 8006df6:	d4f7      	bmi.n	8006de8 <HAL_RCC_OscConfig+0x378>
 8006df8:	e6df      	b.n	8006bba <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 8006dfa:	4a4c      	ldr	r2, [pc, #304]	; (8006f2c <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dfc:	4f4a      	ldr	r7, [pc, #296]	; (8006f28 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_HSI_DISABLE();
 8006dfe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006e00:	f7fd fcea 	bl	80047d8 <HAL_GetTick>
 8006e04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e06:	e004      	b.n	8006e12 <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e08:	f7fd fce6 	bl	80047d8 <HAL_GetTick>
 8006e0c:	1b80      	subs	r0, r0, r6
 8006e0e:	2802      	cmp	r0, #2
 8006e10:	d8c7      	bhi.n	8006da2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	0798      	lsls	r0, r3, #30
 8006e16:	d4f7      	bmi.n	8006e08 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	e68e      	b.n	8006b3a <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	e6de      	b.n	8006bde <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_MSI_DISABLE();
 8006e20:	4a42      	ldr	r2, [pc, #264]	; (8006f2c <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006e22:	4f41      	ldr	r7, [pc, #260]	; (8006f28 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_MSI_DISABLE();
 8006e24:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8006e26:	f7fd fcd7 	bl	80047d8 <HAL_GetTick>
 8006e2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006e2c:	e004      	b.n	8006e38 <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e2e:	f7fd fcd3 	bl	80047d8 <HAL_GetTick>
 8006e32:	1b80      	subs	r0, r0, r6
 8006e34:	2802      	cmp	r0, #2
 8006e36:	d8b4      	bhi.n	8006da2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	0598      	lsls	r0, r3, #22
 8006e3c:	d4f7      	bmi.n	8006e2e <HAL_RCC_OscConfig+0x3be>
 8006e3e:	e74e      	b.n	8006cde <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e40:	6873      	ldr	r3, [r6, #4]
 8006e42:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006e46:	4303      	orrs	r3, r0
 8006e48:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e4a:	6873      	ldr	r3, [r6, #4]
 8006e4c:	69e2      	ldr	r2, [r4, #28]
 8006e4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006e56:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e58:	f7ff fdc8 	bl	80069ec <RCC_SetFlashLatencyFromMSIRange>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	f47f af4c 	bne.w	8006cfa <HAL_RCC_OscConfig+0x28a>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006e62:	6a23      	ldr	r3, [r4, #32]
 8006e64:	e726      	b.n	8006cb4 <HAL_RCC_OscConfig+0x244>
    return HAL_ERROR;
 8006e66:	2001      	movs	r0, #1
}
 8006e68:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	e629      	b.n	8006ace <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 8006e7a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006e7c:	f7fd fcac 	bl	80047d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e80:	4e29      	ldr	r6, [pc, #164]	; (8006f28 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8006e82:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e84:	e004      	b.n	8006e90 <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e86:	f7fd fca7 	bl	80047d8 <HAL_GetTick>
 8006e8a:	1b40      	subs	r0, r0, r5
 8006e8c:	2802      	cmp	r0, #2
 8006e8e:	d888      	bhi.n	8006da2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e90:	6833      	ldr	r3, [r6, #0]
 8006e92:	0199      	lsls	r1, r3, #6
 8006e94:	d4f7      	bmi.n	8006e86 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e96:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 8006e9a:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 8006e9c:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e9e:	68b2      	ldr	r2, [r6, #8]
 8006ea0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006ea2:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8006ea6:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8006ea8:	4a20      	ldr	r2, [pc, #128]	; (8006f2c <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eaa:	4303      	orrs	r3, r0
 8006eac:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 8006eae:	6611      	str	r1, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006eb0:	f7fd fc92 	bl	80047d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006eb4:	4d1c      	ldr	r5, [pc, #112]	; (8006f28 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8006eb6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006eb8:	e005      	b.n	8006ec6 <HAL_RCC_OscConfig+0x456>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eba:	f7fd fc8d 	bl	80047d8 <HAL_GetTick>
 8006ebe:	1b00      	subs	r0, r0, r4
 8006ec0:	2802      	cmp	r0, #2
 8006ec2:	f63f af6e 	bhi.w	8006da2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	019a      	lsls	r2, r3, #6
 8006eca:	d5f6      	bpl.n	8006eba <HAL_RCC_OscConfig+0x44a>
 8006ecc:	e6ce      	b.n	8006c6c <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ece:	4a16      	ldr	r2, [pc, #88]	; (8006f28 <HAL_RCC_OscConfig+0x4b8>)
 8006ed0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ed6:	6253      	str	r3, [r2, #36]	; 0x24
 8006ed8:	e6ae      	b.n	8006c38 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006eda:	4a13      	ldr	r2, [pc, #76]	; (8006f28 <HAL_RCC_OscConfig+0x4b8>)
 8006edc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee2:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ee4:	e693      	b.n	8006c0e <HAL_RCC_OscConfig+0x19e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ee6:	2801      	cmp	r0, #1
 8006ee8:	f43f aec1 	beq.w	8006c6e <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8006eec:	4b0e      	ldr	r3, [pc, #56]	; (8006f28 <HAL_RCC_OscConfig+0x4b8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 8006ef0:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef2:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8006ef6:	4291      	cmp	r1, r2
 8006ef8:	f47f aeff 	bne.w	8006cfa <HAL_RCC_OscConfig+0x28a>
 8006efc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006efe:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f02:	4291      	cmp	r1, r2
 8006f04:	f47f aef9 	bne.w	8006cfa <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006f08:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006f0a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 8006f0e:	1a18      	subs	r0, r3, r0
 8006f10:	bf18      	it	ne
 8006f12:	2001      	movne	r0, #1
 8006f14:	e6ab      	b.n	8006c6e <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f1a:	635a      	str	r2, [r3, #52]	; 0x34
 8006f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f22:	635a      	str	r2, [r3, #52]	; 0x34
 8006f24:	e673      	b.n	8006c0e <HAL_RCC_OscConfig+0x19e>
 8006f26:	bf00      	nop
 8006f28:	40023800 	.word	0x40023800
 8006f2c:	42470000 	.word	0x42470000

08006f30 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006f30:	2800      	cmp	r0, #0
 8006f32:	f000 80c2 	beq.w	80070ba <HAL_RCC_ClockConfig+0x18a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f36:	4a85      	ldr	r2, [pc, #532]	; (800714c <HAL_RCC_ClockConfig+0x21c>)
{
 8006f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f3c:	6813      	ldr	r3, [r2, #0]
 8006f3e:	4604      	mov	r4, r0
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	428b      	cmp	r3, r1
 8006f46:	460d      	mov	r5, r1
 8006f48:	d213      	bcs.n	8006f72 <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f4a:	2901      	cmp	r1, #1
 8006f4c:	d103      	bne.n	8006f56 <HAL_RCC_ClockConfig+0x26>
 8006f4e:	6813      	ldr	r3, [r2, #0]
 8006f50:	f043 0304 	orr.w	r3, r3, #4
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	4a7d      	ldr	r2, [pc, #500]	; (800714c <HAL_RCC_ClockConfig+0x21c>)
 8006f58:	6813      	ldr	r3, [r2, #0]
 8006f5a:	f023 0301 	bic.w	r3, r3, #1
 8006f5e:	432b      	orrs	r3, r5
 8006f60:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f62:	6813      	ldr	r3, [r2, #0]
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	42ab      	cmp	r3, r5
 8006f6a:	d002      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 8006f6c:	2001      	movs	r0, #1
}
 8006f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	0799      	lsls	r1, r3, #30
 8006f76:	d506      	bpl.n	8006f86 <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f78:	4975      	ldr	r1, [pc, #468]	; (8007150 <HAL_RCC_ClockConfig+0x220>)
 8006f7a:	68a0      	ldr	r0, [r4, #8]
 8006f7c:	688a      	ldr	r2, [r1, #8]
 8006f7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006f82:	4302      	orrs	r2, r0
 8006f84:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f86:	07da      	lsls	r2, r3, #31
 8006f88:	d529      	bpl.n	8006fde <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f8a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f8c:	4b70      	ldr	r3, [pc, #448]	; (8007150 <HAL_RCC_ClockConfig+0x220>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f8e:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f90:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f92:	f000 808e 	beq.w	80070b2 <HAL_RCC_ClockConfig+0x182>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f96:	2a03      	cmp	r2, #3
 8006f98:	f000 8085 	beq.w	80070a6 <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006f9c:	2a01      	cmp	r2, #1
 8006f9e:	f000 80d1 	beq.w	8007144 <HAL_RCC_ClockConfig+0x214>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006fa2:	0598      	lsls	r0, r3, #22
 8006fa4:	d5e2      	bpl.n	8006f6c <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fa6:	4e6a      	ldr	r6, [pc, #424]	; (8007150 <HAL_RCC_ClockConfig+0x220>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fa8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fac:	68b3      	ldr	r3, [r6, #8]
 8006fae:	f023 0303 	bic.w	r3, r3, #3
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006fb6:	f7fd fc0f 	bl	80047d8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fba:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8006fbc:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d055      	beq.n	800706e <HAL_RCC_ClockConfig+0x13e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d05e      	beq.n	8007084 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d105      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xa6>
 8006fca:	e066      	b.n	800709a <HAL_RCC_ClockConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fcc:	f7fd fc04 	bl	80047d8 <HAL_GetTick>
 8006fd0:	1bc0      	subs	r0, r0, r7
 8006fd2:	4540      	cmp	r0, r8
 8006fd4:	d873      	bhi.n	80070be <HAL_RCC_ClockConfig+0x18e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006fd6:	68b3      	ldr	r3, [r6, #8]
 8006fd8:	f013 0f0c 	tst.w	r3, #12
 8006fdc:	d1f6      	bne.n	8006fcc <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fde:	4a5b      	ldr	r2, [pc, #364]	; (800714c <HAL_RCC_ClockConfig+0x21c>)
 8006fe0:	6813      	ldr	r3, [r2, #0]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	42ab      	cmp	r3, r5
 8006fe8:	d906      	bls.n	8006ff8 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fea:	6813      	ldr	r3, [r2, #0]
 8006fec:	f023 0301 	bic.w	r3, r3, #1
 8006ff0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ff2:	6813      	ldr	r3, [r2, #0]
 8006ff4:	07da      	lsls	r2, r3, #31
 8006ff6:	d4b9      	bmi.n	8006f6c <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	0759      	lsls	r1, r3, #29
 8006ffc:	d506      	bpl.n	800700c <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ffe:	4954      	ldr	r1, [pc, #336]	; (8007150 <HAL_RCC_ClockConfig+0x220>)
 8007000:	68e0      	ldr	r0, [r4, #12]
 8007002:	688a      	ldr	r2, [r1, #8]
 8007004:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007008:	4302      	orrs	r2, r0
 800700a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800700c:	071b      	lsls	r3, r3, #28
 800700e:	d420      	bmi.n	8007052 <HAL_RCC_ClockConfig+0x122>
  tmpreg = RCC->CFGR;
 8007010:	494f      	ldr	r1, [pc, #316]	; (8007150 <HAL_RCC_ClockConfig+0x220>)
 8007012:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8007014:	f002 030c 	and.w	r3, r2, #12
 8007018:	2b08      	cmp	r3, #8
 800701a:	d079      	beq.n	8007110 <HAL_RCC_ClockConfig+0x1e0>
 800701c:	2b0c      	cmp	r3, #12
 800701e:	d050      	beq.n	80070c2 <HAL_RCC_ClockConfig+0x192>
 8007020:	2b04      	cmp	r3, #4
 8007022:	d044      	beq.n	80070ae <HAL_RCC_ClockConfig+0x17e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007024:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007028:	684b      	ldr	r3, [r1, #4]
 800702a:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800702e:	3301      	adds	r3, #1
 8007030:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007032:	4b47      	ldr	r3, [pc, #284]	; (8007150 <HAL_RCC_ClockConfig+0x220>)
 8007034:	4a47      	ldr	r2, [pc, #284]	; (8007154 <HAL_RCC_ClockConfig+0x224>)
 8007036:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 8007038:	4947      	ldr	r1, [pc, #284]	; (8007158 <HAL_RCC_ClockConfig+0x228>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800703a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800703e:	5cd3      	ldrb	r3, [r2, r3]
 8007040:	4a46      	ldr	r2, [pc, #280]	; (800715c <HAL_RCC_ClockConfig+0x22c>)
 8007042:	fa20 f303 	lsr.w	r3, r0, r3
}
 8007046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800704a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800704c:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 800704e:	f7fd bb81 	b.w	8004754 <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007052:	4a3f      	ldr	r2, [pc, #252]	; (8007150 <HAL_RCC_ClockConfig+0x220>)
 8007054:	6921      	ldr	r1, [r4, #16]
 8007056:	6893      	ldr	r3, [r2, #8]
 8007058:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800705c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007060:	6093      	str	r3, [r2, #8]
 8007062:	e7d5      	b.n	8007010 <HAL_RCC_ClockConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007064:	f7fd fbb8 	bl	80047d8 <HAL_GetTick>
 8007068:	1bc3      	subs	r3, r0, r7
 800706a:	4543      	cmp	r3, r8
 800706c:	d827      	bhi.n	80070be <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800706e:	68b3      	ldr	r3, [r6, #8]
 8007070:	f003 030c 	and.w	r3, r3, #12
 8007074:	2b08      	cmp	r3, #8
 8007076:	d1f5      	bne.n	8007064 <HAL_RCC_ClockConfig+0x134>
 8007078:	e7b1      	b.n	8006fde <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800707a:	f7fd fbad 	bl	80047d8 <HAL_GetTick>
 800707e:	1bc0      	subs	r0, r0, r7
 8007080:	4540      	cmp	r0, r8
 8007082:	d81c      	bhi.n	80070be <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007084:	68b3      	ldr	r3, [r6, #8]
 8007086:	f003 030c 	and.w	r3, r3, #12
 800708a:	2b0c      	cmp	r3, #12
 800708c:	d1f5      	bne.n	800707a <HAL_RCC_ClockConfig+0x14a>
 800708e:	e7a6      	b.n	8006fde <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007090:	f7fd fba2 	bl	80047d8 <HAL_GetTick>
 8007094:	1bc0      	subs	r0, r0, r7
 8007096:	4540      	cmp	r0, r8
 8007098:	d811      	bhi.n	80070be <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800709a:	68b3      	ldr	r3, [r6, #8]
 800709c:	f003 030c 	and.w	r3, r3, #12
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d1f5      	bne.n	8007090 <HAL_RCC_ClockConfig+0x160>
 80070a4:	e79b      	b.n	8006fde <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070a6:	019f      	lsls	r7, r3, #6
 80070a8:	f53f af7d 	bmi.w	8006fa6 <HAL_RCC_ClockConfig+0x76>
 80070ac:	e75e      	b.n	8006f6c <HAL_RCC_ClockConfig+0x3c>
      sysclockfreq = HSI_VALUE;
 80070ae:	482c      	ldr	r0, [pc, #176]	; (8007160 <HAL_RCC_ClockConfig+0x230>)
 80070b0:	e7bf      	b.n	8007032 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070b2:	039b      	lsls	r3, r3, #14
 80070b4:	f53f af77 	bmi.w	8006fa6 <HAL_RCC_ClockConfig+0x76>
 80070b8:	e758      	b.n	8006f6c <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 80070ba:	2001      	movs	r0, #1
}
 80070bc:	4770      	bx	lr
          return HAL_TIMEOUT;
 80070be:	2003      	movs	r0, #3
 80070c0:	e755      	b.n	8006f6e <HAL_RCC_ClockConfig+0x3e>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80070c2:	4828      	ldr	r0, [pc, #160]	; (8007164 <HAL_RCC_ClockConfig+0x234>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070c4:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80070c6:	f3c2 4183 	ubfx	r1, r2, #18, #4
 80070ca:	5c44      	ldrb	r4, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80070cc:	f3c2 5281 	ubfx	r2, r2, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070d0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80070d4:	f102 0201 	add.w	r2, r2, #1
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80070d8:	ea4f 1144 	mov.w	r1, r4, lsl #5
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070dc:	d01a      	beq.n	8007114 <HAL_RCC_ClockConfig+0x1e4>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80070de:	1b09      	subs	r1, r1, r4
 80070e0:	eb65 0505 	sbc.w	r5, r5, r5
 80070e4:	01ab      	lsls	r3, r5, #6
 80070e6:	0188      	lsls	r0, r1, #6
 80070e8:	1a40      	subs	r0, r0, r1
 80070ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070ee:	eb63 0305 	sbc.w	r3, r3, r5
 80070f2:	00c1      	lsls	r1, r0, #3
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	190c      	adds	r4, r1, r4
 80070f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80070fc:	f143 0300 	adc.w	r3, r3, #0
 8007100:	0259      	lsls	r1, r3, #9
 8007102:	0260      	lsls	r0, r4, #9
 8007104:	2300      	movs	r3, #0
 8007106:	ea41 51d4 	orr.w	r1, r1, r4, lsr #23
 800710a:	f7fa f819 	bl	8001140 <__aeabi_uldivmod>
 800710e:	e790      	b.n	8007032 <HAL_RCC_ClockConfig+0x102>
  switch (tmpreg & RCC_CFGR_SWS)
 8007110:	4815      	ldr	r0, [pc, #84]	; (8007168 <HAL_RCC_ClockConfig+0x238>)
 8007112:	e78e      	b.n	8007032 <HAL_RCC_ClockConfig+0x102>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007114:	1b0d      	subs	r5, r1, r4
 8007116:	eb66 0606 	sbc.w	r6, r6, r6
 800711a:	01b0      	lsls	r0, r6, #6
 800711c:	01a9      	lsls	r1, r5, #6
 800711e:	1b49      	subs	r1, r1, r5
 8007120:	ea40 6095 	orr.w	r0, r0, r5, lsr #26
 8007124:	eb60 0006 	sbc.w	r0, r0, r6
 8007128:	00c0      	lsls	r0, r0, #3
 800712a:	ea40 7051 	orr.w	r0, r0, r1, lsr #29
 800712e:	00c9      	lsls	r1, r1, #3
 8007130:	190c      	adds	r4, r1, r4
 8007132:	f140 0000 	adc.w	r0, r0, #0
 8007136:	0281      	lsls	r1, r0, #10
 8007138:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 800713c:	02a0      	lsls	r0, r4, #10
 800713e:	f7f9 ffff 	bl	8001140 <__aeabi_uldivmod>
 8007142:	e776      	b.n	8007032 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007144:	079e      	lsls	r6, r3, #30
 8007146:	f53f af2e 	bmi.w	8006fa6 <HAL_RCC_ClockConfig+0x76>
 800714a:	e70f      	b.n	8006f6c <HAL_RCC_ClockConfig+0x3c>
 800714c:	40023c00 	.word	0x40023c00
 8007150:	40023800 	.word	0x40023800
 8007154:	0800c874 	.word	0x0800c874
 8007158:	20000018 	.word	0x20000018
 800715c:	20000010 	.word	0x20000010
 8007160:	00f42400 	.word	0x00f42400
 8007164:	0800c88c 	.word	0x0800c88c
 8007168:	007a1200 	.word	0x007a1200

0800716c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800716c:	4b04      	ldr	r3, [pc, #16]	; (8007180 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800716e:	4a05      	ldr	r2, [pc, #20]	; (8007184 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	4905      	ldr	r1, [pc, #20]	; (8007188 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007174:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007178:	5ccb      	ldrb	r3, [r1, r3]
 800717a:	6810      	ldr	r0, [r2, #0]
}
 800717c:	40d8      	lsrs	r0, r3
 800717e:	4770      	bx	lr
 8007180:	40023800 	.word	0x40023800
 8007184:	20000010 	.word	0x20000010
 8007188:	0800c884 	.word	0x0800c884

0800718c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800718c:	4b04      	ldr	r3, [pc, #16]	; (80071a0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800718e:	4a05      	ldr	r2, [pc, #20]	; (80071a4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	4905      	ldr	r1, [pc, #20]	; (80071a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007194:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007198:	5ccb      	ldrb	r3, [r1, r3]
 800719a:	6810      	ldr	r0, [r2, #0]
}
 800719c:	40d8      	lsrs	r0, r3
 800719e:	4770      	bx	lr
 80071a0:	40023800 	.word	0x40023800
 80071a4:	20000010 	.word	0x20000010
 80071a8:	0800c884 	.word	0x0800c884

080071ac <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d049      	beq.n	8007244 <HAL_TIM_Base_Init+0x98>
{
 80071b0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071b2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80071b6:	4604      	mov	r4, r0
 80071b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d03c      	beq.n	800723a <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c0:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c2:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80071c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071c8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 80071cc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071ce:	d013      	beq.n	80071f8 <HAL_TIM_Base_Init+0x4c>
 80071d0:	491d      	ldr	r1, [pc, #116]	; (8007248 <HAL_TIM_Base_Init+0x9c>)
 80071d2:	428a      	cmp	r2, r1
 80071d4:	d010      	beq.n	80071f8 <HAL_TIM_Base_Init+0x4c>
 80071d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80071da:	428a      	cmp	r2, r1
 80071dc:	d00c      	beq.n	80071f8 <HAL_TIM_Base_Init+0x4c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071de:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80071e2:	428a      	cmp	r2, r1
 80071e4:	d00c      	beq.n	8007200 <HAL_TIM_Base_Init+0x54>
 80071e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80071ea:	428a      	cmp	r2, r1
 80071ec:	d008      	beq.n	8007200 <HAL_TIM_Base_Init+0x54>
 80071ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80071f2:	428a      	cmp	r2, r1
 80071f4:	d108      	bne.n	8007208 <HAL_TIM_Base_Init+0x5c>
 80071f6:	e003      	b.n	8007200 <HAL_TIM_Base_Init+0x54>
    tmpcr1 |= Structure->CounterMode;
 80071f8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80071fe:	430b      	orrs	r3, r1
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007200:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007206:	430b      	orrs	r3, r1
  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007208:	2101      	movs	r1, #1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800720a:	6960      	ldr	r0, [r4, #20]
 800720c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007210:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007212:	68e0      	ldr	r0, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8007214:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8007216:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007218:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800721a:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800721c:	6151      	str	r1, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800721e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007222:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 8007226:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 800722a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 800722e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 8007232:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  return HAL_OK;
 8007236:	2000      	movs	r0, #0
}
 8007238:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800723a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800723e:	f7fd f881 	bl	8004344 <HAL_TIM_Base_MspInit>
 8007242:	e7bd      	b.n	80071c0 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8007244:	2001      	movs	r0, #1
}
 8007246:	4770      	bx	lr
 8007248:	40000400 	.word	0x40000400

0800724c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800724c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007250:	2b01      	cmp	r3, #1
 8007252:	d120      	bne.n	8007296 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007254:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007256:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007258:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800725c:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800725e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007268:	d00a      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x34>
 800726a:	4a0d      	ldr	r2, [pc, #52]	; (80072a0 <HAL_TIM_Base_Start_IT+0x54>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d007      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x34>
 8007270:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007274:	4293      	cmp	r3, r2
 8007276:	d003      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x34>
 8007278:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800727c:	4293      	cmp	r3, r2
 800727e:	d104      	bne.n	800728a <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007280:	689a      	ldr	r2, [r3, #8]
 8007282:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007286:	2a06      	cmp	r2, #6
 8007288:	d007      	beq.n	800729a <HAL_TIM_Base_Start_IT+0x4e>
    __HAL_TIM_ENABLE(htim);
 800728a:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800728c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800728e:	f042 0201 	orr.w	r2, r2, #1
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	4770      	bx	lr
    return HAL_ERROR;
 8007296:	2001      	movs	r0, #1
 8007298:	4770      	bx	lr
  return HAL_OK;
 800729a:	2000      	movs	r0, #0
}
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	40000400 	.word	0x40000400

080072a4 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 80072a4:	f241 1c11 	movw	ip, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80072a8:	6802      	ldr	r2, [r0, #0]
{
 80072aa:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80072ac:	68d1      	ldr	r1, [r2, #12]
 80072ae:	f021 0101 	bic.w	r1, r1, #1
 80072b2:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80072b4:	6a11      	ldr	r1, [r2, #32]
 80072b6:	ea11 0f0c 	tst.w	r1, ip
 80072ba:	d103      	bne.n	80072c4 <HAL_TIM_Base_Stop_IT+0x20>
 80072bc:	6811      	ldr	r1, [r2, #0]
 80072be:	f021 0101 	bic.w	r1, r1, #1
 80072c2:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80072c4:	2201      	movs	r2, #1
}
 80072c6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80072c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop

080072d0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80072d0:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80072d4:	2a01      	cmp	r2, #1
 80072d6:	d075      	beq.n	80073c4 <HAL_TIM_ConfigClockSource+0xf4>
{
 80072d8:	b430      	push	{r4, r5}
 80072da:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80072dc:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80072de:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80072e0:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 80072e2:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80072e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 80072ea:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80072ec:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072ee:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80072f2:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 80072f6:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80072f8:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80072fa:	d065      	beq.n	80073c8 <HAL_TIM_ConfigClockSource+0xf8>
 80072fc:	d831      	bhi.n	8007362 <HAL_TIM_ConfigClockSource+0x92>
 80072fe:	2a40      	cmp	r2, #64	; 0x40
 8007300:	d048      	beq.n	8007394 <HAL_TIM_ConfigClockSource+0xc4>
 8007302:	d921      	bls.n	8007348 <HAL_TIM_ConfigClockSource+0x78>
 8007304:	2a50      	cmp	r2, #80	; 0x50
 8007306:	d116      	bne.n	8007336 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007308:	684c      	ldr	r4, [r1, #4]
 800730a:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800730c:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800730e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007312:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007314:	6a04      	ldr	r4, [r0, #32]
 8007316:	f024 0401 	bic.w	r4, r4, #1
 800731a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800731c:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800731e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007322:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007326:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007328:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800732a:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800732c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007330:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007334:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 8007336:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8007338:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800733a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800733e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  return HAL_OK;
 8007342:	4610      	mov	r0, r2
}
 8007344:	bc30      	pop	{r4, r5}
 8007346:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007348:	2a20      	cmp	r2, #32
 800734a:	d002      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x82>
 800734c:	d91e      	bls.n	800738c <HAL_TIM_ConfigClockSource+0xbc>
 800734e:	2a30      	cmp	r2, #48	; 0x30
 8007350:	d1f1      	bne.n	8007336 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 8007352:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007354:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007358:	430a      	orrs	r2, r1
 800735a:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 800735e:	6082      	str	r2, [r0, #8]
}
 8007360:	e7e9      	b.n	8007336 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8007362:	2a70      	cmp	r2, #112	; 0x70
 8007364:	d049      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x12a>
 8007366:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800736a:	d1e4      	bne.n	8007336 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800736c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007370:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007372:	432a      	orrs	r2, r5
 8007374:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007376:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800737a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800737e:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007380:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007382:	6882      	ldr	r2, [r0, #8]
 8007384:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007388:	6082      	str	r2, [r0, #8]
      break;
 800738a:	e7d4      	b.n	8007336 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800738c:	f032 0110 	bics.w	r1, r2, #16
 8007390:	d1d1      	bne.n	8007336 <HAL_TIM_ConfigClockSource+0x66>
 8007392:	e7de      	b.n	8007352 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007394:	684c      	ldr	r4, [r1, #4]
 8007396:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007398:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800739a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800739e:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073a0:	6a04      	ldr	r4, [r0, #32]
 80073a2:	f024 0401 	bic.w	r4, r4, #1
 80073a6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073a8:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073ae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80073b2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80073b4:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80073b6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80073b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073bc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80073c0:	6082      	str	r2, [r0, #8]
}
 80073c2:	e7b8      	b.n	8007336 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 80073c4:	2002      	movs	r0, #2
}
 80073c6:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073c8:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ca:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073cc:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073d0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073d2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073d4:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073d6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073da:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 80073de:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80073e0:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80073e6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 80073ea:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80073ec:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80073ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073f2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80073f6:	6082      	str	r2, [r0, #8]
}
 80073f8:	e79d      	b.n	8007336 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073fa:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80073fe:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007400:	432a      	orrs	r2, r5
 8007402:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007404:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007408:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800740c:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800740e:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007410:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007412:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007416:	6082      	str	r2, [r0, #8]
      break;
 8007418:	e78d      	b.n	8007336 <HAL_TIM_ConfigClockSource+0x66>
 800741a:	bf00      	nop

0800741c <HAL_TIM_OC_DelayElapsedCallback>:
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop

08007420 <HAL_TIM_IC_CaptureCallback>:
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop

08007424 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop

08007428 <HAL_TIM_TriggerCallback>:
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop

0800742c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800742c:	6803      	ldr	r3, [r0, #0]
{
 800742e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007430:	691a      	ldr	r2, [r3, #16]
{
 8007432:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007434:	0791      	lsls	r1, r2, #30
 8007436:	d502      	bpl.n	800743e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	0792      	lsls	r2, r2, #30
 800743c:	d450      	bmi.n	80074e0 <HAL_TIM_IRQHandler+0xb4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800743e:	691a      	ldr	r2, [r3, #16]
 8007440:	0752      	lsls	r2, r2, #29
 8007442:	d502      	bpl.n	800744a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	0750      	lsls	r0, r2, #29
 8007448:	d437      	bmi.n	80074ba <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800744a:	691a      	ldr	r2, [r3, #16]
 800744c:	0711      	lsls	r1, r2, #28
 800744e:	d502      	bpl.n	8007456 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	0712      	lsls	r2, r2, #28
 8007454:	d422      	bmi.n	800749c <HAL_TIM_IRQHandler+0x70>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007456:	691a      	ldr	r2, [r3, #16]
 8007458:	06d0      	lsls	r0, r2, #27
 800745a:	d502      	bpl.n	8007462 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	06d1      	lsls	r1, r2, #27
 8007460:	d40c      	bmi.n	800747c <HAL_TIM_IRQHandler+0x50>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	07d2      	lsls	r2, r2, #31
 8007466:	d502      	bpl.n	800746e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	07d0      	lsls	r0, r2, #31
 800746c:	d450      	bmi.n	8007510 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	0651      	lsls	r1, r2, #25
 8007472:	d502      	bpl.n	800747a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	0652      	lsls	r2, r2, #25
 8007478:	d443      	bmi.n	8007502 <HAL_TIM_IRQHandler+0xd6>
}
 800747a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800747c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007480:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007482:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007484:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007486:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007488:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800748a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800748e:	d047      	beq.n	8007520 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8007490:	f7ff ffc6 	bl	8007420 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007494:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007496:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007498:	7622      	strb	r2, [r4, #24]
 800749a:	e7e2      	b.n	8007462 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800749c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074a0:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074a2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074a4:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074a6:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80074a8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074aa:	079b      	lsls	r3, r3, #30
 80074ac:	d044      	beq.n	8007538 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 80074ae:	f7ff ffb7 	bl	8007420 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074b4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b6:	7622      	strb	r2, [r4, #24]
 80074b8:	e7cd      	b.n	8007456 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074ba:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074be:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074c0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074c2:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074c4:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80074c6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074c8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80074cc:	d131      	bne.n	8007532 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ce:	f7ff ffa5 	bl	800741c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d2:	4620      	mov	r0, r4
 80074d4:	f7ff ffa6 	bl	8007424 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074da:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074dc:	7622      	strb	r2, [r4, #24]
 80074de:	e7b4      	b.n	800744a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074e0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074e4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074e6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074e8:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	0799      	lsls	r1, r3, #30
 80074ee:	d11d      	bne.n	800752c <HAL_TIM_IRQHandler+0x100>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f0:	f7ff ff94 	bl	800741c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f4:	4620      	mov	r0, r4
 80074f6:	f7ff ff95 	bl	8007424 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074fc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fe:	7622      	strb	r2, [r4, #24]
 8007500:	e79d      	b.n	800743e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007502:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8007506:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007508:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800750a:	f7ff ff8d 	bl	8007428 <HAL_TIM_TriggerCallback>
}
 800750e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007510:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8007514:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007516:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007518:	f7fc fb90 	bl	8003c3c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	e7a6      	b.n	800746e <HAL_TIM_IRQHandler+0x42>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007520:	f7ff ff7c 	bl	800741c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007524:	4620      	mov	r0, r4
 8007526:	f7ff ff7d 	bl	8007424 <HAL_TIM_PWM_PulseFinishedCallback>
 800752a:	e7b3      	b.n	8007494 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_IC_CaptureCallback(htim);
 800752c:	f7ff ff78 	bl	8007420 <HAL_TIM_IC_CaptureCallback>
 8007530:	e7e3      	b.n	80074fa <HAL_TIM_IRQHandler+0xce>
        HAL_TIM_IC_CaptureCallback(htim);
 8007532:	f7ff ff75 	bl	8007420 <HAL_TIM_IC_CaptureCallback>
 8007536:	e7cf      	b.n	80074d8 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007538:	f7ff ff70 	bl	800741c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800753c:	4620      	mov	r0, r4
 800753e:	f7ff ff71 	bl	8007424 <HAL_TIM_PWM_PulseFinishedCallback>
 8007542:	e7b6      	b.n	80074b2 <HAL_TIM_IRQHandler+0x86>

08007544 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007544:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8007548:	2a01      	cmp	r2, #1
 800754a:	d028      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800754c:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800754e:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007550:	681a      	ldr	r2, [r3, #0]
{
 8007552:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 8007558:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800755a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800755c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007560:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007562:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 8007566:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8007568:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800756a:	d00a      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800756c:	480d      	ldr	r0, [pc, #52]	; (80075a4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800756e:	4282      	cmp	r2, r0
 8007570:	d007      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8007572:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007576:	4282      	cmp	r2, r0
 8007578:	d003      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800757a:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800757e:	4282      	cmp	r2, r0
 8007580:	d104      	bne.n	800758c <HAL_TIMEx_MasterConfigSynchronization+0x48>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007582:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007584:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007588:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800758a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800758c:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800758e:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8007590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8007594:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39

  return HAL_OK;
 8007598:	4610      	mov	r0, r2
}
 800759a:	bc30      	pop	{r4, r5}
 800759c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800759e:	2002      	movs	r0, #2
}
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40000400 	.word	0x40000400

080075a8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075a8:	2800      	cmp	r0, #0
 80075aa:	f000 8081 	beq.w	80076b0 <HAL_UART_Init+0x108>
{
 80075ae:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80075b4:	4604      	mov	r4, r0
 80075b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d070      	beq.n	80076a0 <HAL_UART_Init+0xf8>
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075be:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 80075c2:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075c4:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80075c6:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075c8:	4302      	orrs	r2, r0
 80075ca:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 80075cc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075d0:	4302      	orrs	r2, r0
 80075d2:	69e0      	ldr	r0, [r4, #28]
 80075d4:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 80075d6:	68d8      	ldr	r0, [r3, #12]
 80075d8:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 80075dc:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075de:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075e0:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075e2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80075e6:	4329      	orrs	r1, r5
 80075e8:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80075ea:	68d9      	ldr	r1, [r3, #12]
 80075ec:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80075f0:	f021 010c 	bic.w	r1, r1, #12
 80075f4:	430a      	orrs	r2, r1
 80075f6:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075f8:	695a      	ldr	r2, [r3, #20]


  if((huart->Instance == USART1))
 80075fa:	492e      	ldr	r1, [pc, #184]	; (80076b4 <HAL_UART_Init+0x10c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007600:	4302      	orrs	r2, r0
  if((huart->Instance == USART1))
 8007602:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007604:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1))
 8007606:	d050      	beq.n	80076aa <HAL_UART_Init+0x102>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007608:	f7ff fdb0 	bl	800716c <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800760c:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800760e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007616:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800761a:	6863      	ldr	r3, [r4, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800761c:	d027      	beq.n	800766e <HAL_UART_Init+0xc6>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	fbb0 f3f3 	udiv	r3, r0, r3
 8007624:	2564      	movs	r5, #100	; 0x64
 8007626:	4824      	ldr	r0, [pc, #144]	; (80076b8 <HAL_UART_Init+0x110>)
 8007628:	6822      	ldr	r2, [r4, #0]
 800762a:	fba0 6103 	umull	r6, r1, r0, r3
 800762e:	0949      	lsrs	r1, r1, #5
 8007630:	fb05 3311 	mls	r3, r5, r1, r3
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	3332      	adds	r3, #50	; 0x32
 8007638:	fba0 0303 	umull	r0, r3, r0, r3
 800763c:	0109      	lsls	r1, r1, #4
 800763e:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8007642:	6093      	str	r3, [r2, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007644:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8007646:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007648:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800764a:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800764c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007650:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007652:	6953      	ldr	r3, [r2, #20]
 8007654:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007658:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800765a:	68d3      	ldr	r3, [r2, #12]
 800765c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007660:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007662:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007664:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007668:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 800766c:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	fbb0 f0f3 	udiv	r0, r0, r3
 8007674:	2364      	movs	r3, #100	; 0x64
 8007676:	4e10      	ldr	r6, [pc, #64]	; (80076b8 <HAL_UART_Init+0x110>)
 8007678:	6822      	ldr	r2, [r4, #0]
 800767a:	fba6 5100 	umull	r5, r1, r6, r0
 800767e:	094d      	lsrs	r5, r1, #5
 8007680:	fb03 0315 	mls	r3, r3, r5, r0
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	3332      	adds	r3, #50	; 0x32
 8007688:	fba6 1303 	umull	r1, r3, r6, r3
 800768c:	f3c3 1142 	ubfx	r1, r3, #5, #3
 8007690:	091b      	lsrs	r3, r3, #4
 8007692:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8007696:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800769a:	440b      	add	r3, r1
 800769c:	6093      	str	r3, [r2, #8]
 800769e:	e7d1      	b.n	8007644 <HAL_UART_Init+0x9c>
    huart->Lock = HAL_UNLOCKED;
 80076a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80076a4:	f7fc feea 	bl	800447c <HAL_UART_MspInit>
 80076a8:	e789      	b.n	80075be <HAL_UART_Init+0x16>
    pclk = HAL_RCC_GetPCLK2Freq();
 80076aa:	f7ff fd6f 	bl	800718c <HAL_RCC_GetPCLK2Freq>
 80076ae:	e7ad      	b.n	800760c <HAL_UART_Init+0x64>
    return HAL_ERROR;
 80076b0:	2001      	movs	r0, #1
}
 80076b2:	4770      	bx	lr
 80076b4:	40013800 	.word	0x40013800
 80076b8:	51eb851f 	.word	0x51eb851f

080076bc <HAL_UART_Transmit_DMA>:
{
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80076c0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80076c4:	2820      	cmp	r0, #32
 80076c6:	d12d      	bne.n	8007724 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 80076c8:	b351      	cbz	r1, 8007720 <HAL_UART_Transmit_DMA+0x64>
 80076ca:	b34a      	cbz	r2, 8007720 <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 80076cc:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80076d0:	2801      	cmp	r0, #1
 80076d2:	d027      	beq.n	8007724 <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d4:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80076d6:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076da:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80076de:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80076e0:	4f11      	ldr	r7, [pc, #68]	; (8007728 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80076e2:	4e12      	ldr	r6, [pc, #72]	; (800772c <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 80076e4:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 80076e6:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e8:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 80076ea:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 80076ec:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076f0:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80076f4:	4613      	mov	r3, r2
 80076f6:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80076f8:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80076fc:	4e0c      	ldr	r6, [pc, #48]	; (8007730 <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80076fe:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 8007700:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007702:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007704:	f7fd fd0e 	bl	8005124 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007708:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800770c:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800770e:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007710:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8007712:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007716:	695a      	ldr	r2, [r3, #20]
 8007718:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800771c:	615a      	str	r2, [r3, #20]
}
 800771e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8007720:	2001      	movs	r0, #1
}
 8007722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8007724:	2002      	movs	r0, #2
}
 8007726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007728:	080077d5 	.word	0x080077d5
 800772c:	08007805 	.word	0x08007805
 8007730:	08007819 	.word	0x08007819

08007734 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007734:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007738:	2b20      	cmp	r3, #32
 800773a:	d13f      	bne.n	80077bc <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800773c:	2900      	cmp	r1, #0
 800773e:	d03b      	beq.n	80077b8 <HAL_UART_Receive_DMA+0x84>
 8007740:	2a00      	cmp	r2, #0
 8007742:	d039      	beq.n	80077b8 <HAL_UART_Receive_DMA+0x84>
{
 8007744:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 8007746:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800774a:	4604      	mov	r4, r0
 800774c:	2b01      	cmp	r3, #1
{
 800774e:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 8007750:	d036      	beq.n	80077c0 <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007752:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8007754:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007758:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 800775c:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800775e:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007760:	4f19      	ldr	r7, [pc, #100]	; (80077c8 <HAL_UART_Receive_DMA+0x94>)
 8007762:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007764:	4e19      	ldr	r6, [pc, #100]	; (80077cc <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007766:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 8007768:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800776c:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800776e:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007770:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007774:	460a      	mov	r2, r1
 8007776:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007778:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800777c:	4e14      	ldr	r6, [pc, #80]	; (80077d0 <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800777e:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 8007780:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007782:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007784:	f7fd fcce 	bl	8005124 <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007788:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	9501      	str	r5, [sp, #4]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	9201      	str	r2, [sp, #4]
 8007792:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 8007794:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007798:	9201      	str	r2, [sp, #4]
 800779a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077a2:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a4:	695a      	ldr	r2, [r3, #20]
 80077a6:	f042 0201 	orr.w	r2, r2, #1
 80077aa:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ac:	695a      	ldr	r2, [r3, #20]
 80077ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077b2:	615a      	str	r2, [r3, #20]
}
 80077b4:	b003      	add	sp, #12
 80077b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80077b8:	2001      	movs	r0, #1
}
 80077ba:	4770      	bx	lr
    return HAL_BUSY;
 80077bc:	2002      	movs	r0, #2
 80077be:	4770      	bx	lr
 80077c0:	2002      	movs	r0, #2
}
 80077c2:	b003      	add	sp, #12
 80077c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077c6:	bf00      	nop
 80077c8:	080078c5 	.word	0x080078c5
 80077cc:	080078a9 	.word	0x080078a9
 80077d0:	08007819 	.word	0x08007819

080077d4 <UART_DMATransmitCplt>:
{
 80077d4:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077d6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f013 0320 	ands.w	r3, r3, #32
 80077e0:	d10a      	bne.n	80077f8 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077e2:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 80077e4:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077e6:	6953      	ldr	r3, [r2, #20]
 80077e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ec:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077ee:	68d3      	ldr	r3, [r2, #12]
 80077f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077f4:	60d3      	str	r3, [r2, #12]
}
 80077f6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80077f8:	f7fc fc78 	bl	80040ec <HAL_UART_TxCpltCallback>
}
 80077fc:	bd08      	pop	{r3, pc}
 80077fe:	bf00      	nop

08007800 <HAL_UART_TxHalfCpltCallback>:
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop

08007804 <UART_DMATxHalfCplt>:
{
 8007804:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007806:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007808:	f7ff fffa 	bl	8007800 <HAL_UART_TxHalfCpltCallback>
}
 800780c:	bd08      	pop	{r3, pc}
 800780e:	bf00      	nop

08007810 <HAL_UART_RxHalfCpltCallback>:
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop

08007814 <HAL_UART_ErrorCallback>:
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop

08007818 <UART_DMAError>:
{
 8007818:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800781a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800781c:	6803      	ldr	r3, [r0, #0]
 800781e:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007820:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8007824:	2a21      	cmp	r2, #33	; 0x21
 8007826:	d00b      	beq.n	8007840 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007828:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800782a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800782e:	2a22      	cmp	r2, #34	; 0x22
 8007830:	d016      	beq.n	8007860 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007832:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007834:	f043 0310 	orr.w	r3, r3, #16
 8007838:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 800783a:	f7ff ffeb 	bl	8007814 <HAL_UART_ErrorCallback>
}
 800783e:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007840:	0609      	lsls	r1, r1, #24
 8007842:	d5f1      	bpl.n	8007828 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8007844:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8007846:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 8007848:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007850:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007852:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007856:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007858:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800785c:	2a22      	cmp	r2, #34	; 0x22
 800785e:	d1e8      	bne.n	8007832 <UART_DMAError+0x1a>
 8007860:	064a      	lsls	r2, r1, #25
 8007862:	d5e6      	bpl.n	8007832 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8007864:	2200      	movs	r2, #0
 8007866:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800786e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007870:	695a      	ldr	r2, [r3, #20]
 8007872:	f022 0201 	bic.w	r2, r2, #1
 8007876:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007878:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800787a:	2a01      	cmp	r2, #1
 800787c:	d103      	bne.n	8007886 <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787e:	68da      	ldr	r2, [r3, #12]
 8007880:	f022 0210 	bic.w	r2, r2, #16
 8007884:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 8007886:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007888:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800788a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800788e:	6303      	str	r3, [r0, #48]	; 0x30
}
 8007890:	e7cf      	b.n	8007832 <UART_DMAError+0x1a>
 8007892:	bf00      	nop

08007894 <UART_DMAAbortOnError>:
{
 8007894:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8007896:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007898:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800789a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800789c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800789e:	f7ff ffb9 	bl	8007814 <HAL_UART_ErrorCallback>
}
 80078a2:	bd08      	pop	{r3, pc}

080078a4 <HAL_UARTEx_RxEventCallback>:
}
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop

080078a8 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80078aa:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d002      	beq.n	80078b8 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80078b2:	f7ff ffad 	bl	8007810 <HAL_UART_RxHalfCpltCallback>
}
 80078b6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80078b8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80078ba:	0849      	lsrs	r1, r1, #1
 80078bc:	f7ff fff2 	bl	80078a4 <HAL_UARTEx_RxEventCallback>
}
 80078c0:	bd08      	pop	{r3, pc}
 80078c2:	bf00      	nop

080078c4 <UART_DMAReceiveCplt>:
{
 80078c4:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80078c6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f013 0320 	ands.w	r3, r3, #32
 80078d0:	d113      	bne.n	80078fa <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 80078d2:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078d4:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 80078d6:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078d8:	68d3      	ldr	r3, [r2, #12]
 80078da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078de:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e0:	6953      	ldr	r3, [r2, #20]
 80078e2:	f023 0301 	bic.w	r3, r3, #1
 80078e6:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078e8:	6953      	ldr	r3, [r2, #20]
 80078ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ee:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80078f0:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d009      	beq.n	800790e <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d002      	beq.n	8007906 <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 8007900:	f7fc fada 	bl	8003eb8 <HAL_UART_RxCpltCallback>
}
 8007904:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007906:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007908:	f7ff ffcc 	bl	80078a4 <HAL_UARTEx_RxEventCallback>
}
 800790c:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800790e:	68d3      	ldr	r3, [r2, #12]
 8007910:	f023 0310 	bic.w	r3, r3, #16
 8007914:	60d3      	str	r3, [r2, #12]
 8007916:	e7f0      	b.n	80078fa <UART_DMAReceiveCplt+0x36>

08007918 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007918:	6883      	ldr	r3, [r0, #8]
 800791a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800791e:	d03b      	beq.n	8007998 <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007920:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007922:	2b00      	cmp	r3, #0
 8007924:	d030      	beq.n	8007988 <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007926:	6803      	ldr	r3, [r0, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800792e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8007930:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007932:	3301      	adds	r3, #1
 8007934:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8007936:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8007938:	3b01      	subs	r3, #1
 800793a:	b29b      	uxth	r3, r3
 800793c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800793e:	bb53      	cbnz	r3, 8007996 <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 8007940:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007944:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007946:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007948:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800794a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800794c:	f021 0120 	bic.w	r1, r1, #32
 8007950:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007952:	68d1      	ldr	r1, [r2, #12]
 8007954:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007958:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800795a:	6951      	ldr	r1, [r2, #20]
 800795c:	f021 0101 	bic.w	r1, r1, #1
 8007960:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007962:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007966:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007968:	2901      	cmp	r1, #1
 800796a:	d120      	bne.n	80079ae <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796c:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796e:	68d1      	ldr	r1, [r2, #12]
 8007970:	f021 0110 	bic.w	r1, r1, #16
 8007974:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007976:	6811      	ldr	r1, [r2, #0]
 8007978:	06c9      	lsls	r1, r1, #27
 800797a:	d422      	bmi.n	80079c2 <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800797c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800797e:	f7ff ff91 	bl	80078a4 <HAL_UARTEx_RxEventCallback>
}
 8007982:	b003      	add	sp, #12
 8007984:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007988:	6903      	ldr	r3, [r0, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1cb      	bne.n	8007926 <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800798e:	6803      	ldr	r3, [r0, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	7013      	strb	r3, [r2, #0]
 8007994:	e7cc      	b.n	8007930 <UART_Receive_IT.part.0.isra.0+0x18>
 8007996:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007998:	6903      	ldr	r3, [r0, #16]
 800799a:	b96b      	cbnz	r3, 80079b8 <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800799c:	6802      	ldr	r2, [r0, #0]
 800799e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80079a0:	6852      	ldr	r2, [r2, #4]
 80079a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079a6:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80079aa:	6283      	str	r3, [r0, #40]	; 0x28
 80079ac:	e7c3      	b.n	8007936 <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 80079ae:	f7fc fa83 	bl	8003eb8 <HAL_UART_RxCpltCallback>
}
 80079b2:	b003      	add	sp, #12
 80079b4:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079b8:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079ba:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	7013      	strb	r3, [r2, #0]
 80079c0:	e7b6      	b.n	8007930 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	6813      	ldr	r3, [r2, #0]
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	6853      	ldr	r3, [r2, #4]
 80079ca:	9301      	str	r3, [sp, #4]
 80079cc:	9b01      	ldr	r3, [sp, #4]
 80079ce:	e7d5      	b.n	800797c <UART_Receive_IT.part.0.isra.0+0x64>

080079d0 <HAL_UART_IRQHandler>:
{
 80079d0:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079d2:	6803      	ldr	r3, [r0, #0]
{
 80079d4:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079d6:	681a      	ldr	r2, [r3, #0]
{
 80079d8:	b083      	sub	sp, #12
  if (errorflags == RESET)
 80079da:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079de:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079e0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80079e2:	d14e      	bne.n	8007a82 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079e4:	0695      	lsls	r5, r2, #26
 80079e6:	d502      	bpl.n	80079ee <HAL_UART_IRQHandler+0x1e>
 80079e8:	068d      	lsls	r5, r1, #26
 80079ea:	f100 8090 	bmi.w	8007b0e <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80079f0:	2801      	cmp	r0, #1
 80079f2:	d00b      	beq.n	8007a0c <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079f4:	0610      	lsls	r0, r2, #24
 80079f6:	d502      	bpl.n	80079fe <HAL_UART_IRQHandler+0x2e>
 80079f8:	060d      	lsls	r5, r1, #24
 80079fa:	f100 8092 	bmi.w	8007b22 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079fe:	0650      	lsls	r0, r2, #25
 8007a00:	d502      	bpl.n	8007a08 <HAL_UART_IRQHandler+0x38>
 8007a02:	064a      	lsls	r2, r1, #25
 8007a04:	f100 80ab 	bmi.w	8007b5e <HAL_UART_IRQHandler+0x18e>
}
 8007a08:	b003      	add	sp, #12
 8007a0a:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007a0c:	06d0      	lsls	r0, r2, #27
 8007a0e:	d5f1      	bpl.n	80079f4 <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007a10:	06cd      	lsls	r5, r1, #27
 8007a12:	d5ef      	bpl.n	80079f4 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a14:	2100      	movs	r1, #0
 8007a16:	9101      	str	r1, [sp, #4]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	9201      	str	r2, [sp, #4]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	9201      	str	r2, [sp, #4]
 8007a20:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a22:	695a      	ldr	r2, [r3, #20]
 8007a24:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8007a28:	f000 80d2 	beq.w	8007bd0 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a2c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007a2e:	6802      	ldr	r2, [r0, #0]
 8007a30:	6852      	ldr	r2, [r2, #4]
 8007a32:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8007a34:	2a00      	cmp	r2, #0
 8007a36:	d0e7      	beq.n	8007a08 <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007a38:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8007a3a:	4295      	cmp	r5, r2
 8007a3c:	d9e4      	bls.n	8007a08 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8007a3e:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a40:	6982      	ldr	r2, [r0, #24]
 8007a42:	2a20      	cmp	r2, #32
 8007a44:	d016      	beq.n	8007a74 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a4c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4e:	695a      	ldr	r2, [r3, #20]
 8007a50:	f022 0201 	bic.w	r2, r2, #1
 8007a54:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a56:	695a      	ldr	r2, [r3, #20]
 8007a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a5c:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a64:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	f022 0210 	bic.w	r2, r2, #16
 8007a6c:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a6e:	f7fd fba3 	bl	80051b8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a72:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8007a74:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8007a76:	4620      	mov	r0, r4
 8007a78:	1a69      	subs	r1, r5, r1
 8007a7a:	b289      	uxth	r1, r1
 8007a7c:	f7ff ff12 	bl	80078a4 <HAL_UARTEx_RxEventCallback>
 8007a80:	e7c2      	b.n	8007a08 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a82:	f005 0501 	and.w	r5, r5, #1
 8007a86:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8007a8a:	4328      	orrs	r0, r5
 8007a8c:	d0af      	beq.n	80079ee <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a8e:	07d0      	lsls	r0, r2, #31
 8007a90:	d505      	bpl.n	8007a9e <HAL_UART_IRQHandler+0xce>
 8007a92:	05c8      	lsls	r0, r1, #23
 8007a94:	d503      	bpl.n	8007a9e <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a96:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007a98:	f040 0001 	orr.w	r0, r0, #1
 8007a9c:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a9e:	0750      	lsls	r0, r2, #29
 8007aa0:	d530      	bpl.n	8007b04 <HAL_UART_IRQHandler+0x134>
 8007aa2:	b14d      	cbz	r5, 8007ab8 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aa4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007aa6:	f040 0002 	orr.w	r0, r0, #2
 8007aaa:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aac:	0790      	lsls	r0, r2, #30
 8007aae:	d503      	bpl.n	8007ab8 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ab0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007ab2:	f040 0004 	orr.w	r0, r0, #4
 8007ab6:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ab8:	0710      	lsls	r0, r2, #28
 8007aba:	d507      	bpl.n	8007acc <HAL_UART_IRQHandler+0xfc>
 8007abc:	f001 0020 	and.w	r0, r1, #32
 8007ac0:	4328      	orrs	r0, r5
 8007ac2:	d003      	beq.n	8007acc <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ac4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007ac6:	f040 0008 	orr.w	r0, r0, #8
 8007aca:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007acc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d09a      	beq.n	8007a08 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ad2:	0690      	lsls	r0, r2, #26
 8007ad4:	d509      	bpl.n	8007aea <HAL_UART_IRQHandler+0x11a>
 8007ad6:	068a      	lsls	r2, r1, #26
 8007ad8:	d507      	bpl.n	8007aea <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ada:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8007ade:	2a22      	cmp	r2, #34	; 0x22
 8007ae0:	d103      	bne.n	8007aea <HAL_UART_IRQHandler+0x11a>
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f7ff ff18 	bl	8007918 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007aec:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007aee:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007af2:	f005 0508 	and.w	r5, r5, #8
 8007af6:	4315      	orrs	r5, r2
 8007af8:	d13c      	bne.n	8007b74 <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 8007afa:	4620      	mov	r0, r4
 8007afc:	f7ff fe8a 	bl	8007814 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b00:	6425      	str	r5, [r4, #64]	; 0x40
 8007b02:	e781      	b.n	8007a08 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b04:	0790      	lsls	r0, r2, #30
 8007b06:	d5d7      	bpl.n	8007ab8 <HAL_UART_IRQHandler+0xe8>
 8007b08:	2d00      	cmp	r5, #0
 8007b0a:	d1d1      	bne.n	8007ab0 <HAL_UART_IRQHandler+0xe0>
 8007b0c:	e7d4      	b.n	8007ab8 <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b0e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007b12:	2b22      	cmp	r3, #34	; 0x22
 8007b14:	f47f af78 	bne.w	8007a08 <HAL_UART_IRQHandler+0x38>
}
 8007b18:	b003      	add	sp, #12
 8007b1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b1e:	f7ff befb 	b.w	8007918 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b22:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8007b26:	2a21      	cmp	r2, #33	; 0x21
 8007b28:	f47f af6e 	bne.w	8007a08 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b2c:	68a2      	ldr	r2, [r4, #8]
 8007b2e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007b32:	d06e      	beq.n	8007c12 <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b34:	6a22      	ldr	r2, [r4, #32]
 8007b36:	1c51      	adds	r1, r2, #1
 8007b38:	6221      	str	r1, [r4, #32]
 8007b3a:	7812      	ldrb	r2, [r2, #0]
 8007b3c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8007b3e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007b40:	3a01      	subs	r2, #1
 8007b42:	b292      	uxth	r2, r2
 8007b44:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007b46:	2a00      	cmp	r2, #0
 8007b48:	f47f af5e 	bne.w	8007a08 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b52:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b5a:	60da      	str	r2, [r3, #12]
 8007b5c:	e754      	b.n	8007a08 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8007b5e:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b60:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8007b62:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b68:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007b6a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8007b6e:	f7fc fabd 	bl	80040ec <HAL_UART_TxCpltCallback>
    return;
 8007b72:	e749      	b.n	8007a08 <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b7a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7c:	695a      	ldr	r2, [r3, #20]
 8007b7e:	f022 0201 	bic.w	r2, r2, #1
 8007b82:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b84:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007b86:	2a01      	cmp	r2, #1
 8007b88:	d103      	bne.n	8007b92 <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	f022 0210 	bic.w	r2, r2, #16
 8007b90:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b92:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007b94:	2120      	movs	r1, #32
 8007b96:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b9a:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b9c:	695a      	ldr	r2, [r3, #20]
 8007b9e:	0655      	lsls	r5, r2, #25
 8007ba0:	d512      	bpl.n	8007bc8 <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ba2:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007ba4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007baa:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007bac:	b160      	cbz	r0, 8007bc8 <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bae:	4b1e      	ldr	r3, [pc, #120]	; (8007c28 <HAL_UART_IRQHandler+0x258>)
 8007bb0:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bb2:	f7fd fb29 	bl	8005208 <HAL_DMA_Abort_IT>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f43f af26 	beq.w	8007a08 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bbc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007bbe:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8007bc0:	b003      	add	sp, #12
 8007bc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bc6:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f7ff fe23 	bl	8007814 <HAL_UART_ErrorCallback>
 8007bce:	e71b      	b.n	8007a08 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bd0:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8007bd2:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bd4:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8007bd6:	b289      	uxth	r1, r1
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	f43f af15 	beq.w	8007a08 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bde:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007be0:	1a08      	subs	r0, r1, r0
 8007be2:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8007be4:	2900      	cmp	r1, #0
 8007be6:	f43f af0f 	beq.w	8007a08 <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 8007bea:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bec:	68d8      	ldr	r0, [r3, #12]
 8007bee:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8007bf2:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf4:	6958      	ldr	r0, [r3, #20]
 8007bf6:	f020 0001 	bic.w	r0, r0, #1
 8007bfa:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8007bfc:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c00:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c02:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c04:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c06:	f022 0210 	bic.w	r2, r2, #16
 8007c0a:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c0c:	f7ff fe4a 	bl	80078a4 <HAL_UARTEx_RxEventCallback>
 8007c10:	e6fa      	b.n	8007a08 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c12:	6922      	ldr	r2, [r4, #16]
 8007c14:	2a00      	cmp	r2, #0
 8007c16:	d18d      	bne.n	8007b34 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c18:	6a22      	ldr	r2, [r4, #32]
 8007c1a:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007c1e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007c22:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c24:	6222      	str	r2, [r4, #32]
 8007c26:	e78a      	b.n	8007b3e <HAL_UART_IRQHandler+0x16e>
 8007c28:	08007895 	.word	0x08007895

08007c2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007c2c:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c2e:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007c30:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8007c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 8007c38:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 8007c3a:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 8007c3e:	4770      	bx	lr

08007c40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007c40:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007c42:	f244 02ff 	movw	r2, #16639	; 0x40ff
 8007c46:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40

  return HAL_OK;
}
 8007c4a:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007c4c:	400a      	ands	r2, r1
 8007c4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8007c52:	4770      	bx	lr

08007c54 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c54:	b084      	sub	sp, #16
 8007c56:	f10d 0c04 	add.w	ip, sp, #4
 8007c5a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8007c5e:	4603      	mov	r3, r0
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007c60:	2200      	movs	r2, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007c62:	2101      	movs	r1, #1

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8007c64:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007c66:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 8007c6a:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 8007c6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 8007c70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8007c74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop

08007c7c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007c7e:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8007c80:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007c84:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
{
 8007c88:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007c8a:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 8007c8e:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8007c92:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8007c96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  switch (ep->type)
 8007c9a:	f1be 0f03 	cmp.w	lr, #3
 8007c9e:	f200 815a 	bhi.w	8007f56 <USB_ActivateEndpoint+0x2da>
 8007ca2:	e8df f00e 	tbb	[pc, lr]
 8007ca6:	4e52      	.short	0x4e52
 8007ca8:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007caa:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8007cae:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007cb0:	f248 0580 	movw	r5, #32896	; 0x8080
 8007cb4:	ea4c 0c05 	orr.w	ip, ip, r5
 8007cb8:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007cbc:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 8007cc0:	4ca6      	ldr	r4, [pc, #664]	; (8007f5c <USB_ActivateEndpoint+0x2e0>)
 8007cc2:	fa1f fc8c 	uxth.w	ip, ip
 8007cc6:	ea0c 0c04 	and.w	ip, ip, r4
 8007cca:	ea4c 0c02 	orr.w	ip, ip, r2
 8007cce:	ea45 050c 	orr.w	r5, r5, ip
 8007cd2:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8007cd6:	7b0d      	ldrb	r5, [r1, #12]
 8007cd8:	2d00      	cmp	r5, #0
 8007cda:	d17e      	bne.n	8007dda <USB_ActivateEndpoint+0x15e>
  {
    if (ep->is_in != 0U)
 8007cdc:	784d      	ldrb	r5, [r1, #1]
 8007cde:	2d00      	cmp	r5, #0
 8007ce0:	f000 80dd 	beq.w	8007e9e <USB_ActivateEndpoint+0x222>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007ce4:	88c9      	ldrh	r1, [r1, #6]
 8007ce6:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8007cea:	0849      	lsrs	r1, r1, #1
 8007cec:	eb03 1602 	add.w	r6, r3, r2, lsl #4
 8007cf0:	0049      	lsls	r1, r1, #1
 8007cf2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007cf6:	b2ad      	uxth	r5, r5
 8007cf8:	5371      	strh	r1, [r6, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cfa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007cfe:	064e      	lsls	r6, r1, #25
 8007d00:	d509      	bpl.n	8007d16 <USB_ActivateEndpoint+0x9a>
 8007d02:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007d06:	b289      	uxth	r1, r1
 8007d08:	400c      	ands	r4, r1
 8007d0a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8007d0e:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8007d12:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d16:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8007d1a:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d1e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8007d22:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007d26:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8007d2a:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 8007d2e:	d04d      	beq.n	8007dcc <USB_ActivateEndpoint+0x150>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d30:	f081 0120 	eor.w	r1, r1, #32
 8007d34:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007d38:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007d3c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8007d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d42:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007d44:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
      break;
 8007d48:	e7b2      	b.n	8007cb0 <USB_ActivateEndpoint+0x34>
  HAL_StatusTypeDef ret = HAL_OK;
 8007d4a:	4670      	mov	r0, lr
      wEpRegVal |= USB_EP_CONTROL;
 8007d4c:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 8007d50:	e7ae      	b.n	8007cb0 <USB_ActivateEndpoint+0x34>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d52:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007d56:	044d      	lsls	r5, r1, #17
 8007d58:	d509      	bpl.n	8007d6e <USB_ActivateEndpoint+0xf2>
 8007d5a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007d5e:	b289      	uxth	r1, r1
 8007d60:	400c      	ands	r4, r1
 8007d62:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8007d66:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8007d6a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d6e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007d72:	0649      	lsls	r1, r1, #25
 8007d74:	d50d      	bpl.n	8007d92 <USB_ActivateEndpoint+0x116>
 8007d76:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007d7a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8007d7e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007d82:	0409      	lsls	r1, r1, #16
 8007d84:	0c09      	lsrs	r1, r1, #16
 8007d86:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007d8a:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8007d8e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d92:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8007d96:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d9a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8007d9e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007da2:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8007da6:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8007daa:	bf18      	it	ne
 8007dac:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007db0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007db4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007db8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007dbc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007dc0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8007dc4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007dc8:	0409      	lsls	r1, r1, #16
 8007dca:	0c09      	lsrs	r1, r1, #16
 8007dcc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007dd0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007dd4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8007dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007dda:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 8007dde:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 8007de2:	fa1f fc8c 	uxth.w	ip, ip
 8007de6:	ea0c 0c04 	and.w	ip, ip, r4
 8007dea:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 8007dee:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8007df2:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007df6:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 8007dfa:	890e      	ldrh	r6, [r1, #8]
 8007dfc:	fa1f fc8c 	uxth.w	ip, ip
 8007e00:	0876      	lsrs	r6, r6, #1
 8007e02:	44bc      	add	ip, r7
 8007e04:	0076      	lsls	r6, r6, #1
 8007e06:	f8ac 6400 	strh.w	r6, [ip, #1024]	; 0x400
 8007e0a:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8007e0e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8007e12:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007e16:	b2ad      	uxth	r5, r5
 8007e18:	443d      	add	r5, r7
 8007e1a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007e1e:	f8a5 c408 	strh.w	ip, [r5, #1032]	; 0x408
    if (ep->is_in == 0U)
 8007e22:	7849      	ldrb	r1, [r1, #1]
 8007e24:	2900      	cmp	r1, #0
 8007e26:	d194      	bne.n	8007d52 <USB_ActivateEndpoint+0xd6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e28:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007e2c:	044f      	lsls	r7, r1, #17
 8007e2e:	d509      	bpl.n	8007e44 <USB_ActivateEndpoint+0x1c8>
 8007e30:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007e34:	b289      	uxth	r1, r1
 8007e36:	400c      	ands	r4, r1
 8007e38:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8007e3c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8007e40:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e44:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007e48:	064e      	lsls	r6, r1, #25
 8007e4a:	d50d      	bpl.n	8007e68 <USB_ActivateEndpoint+0x1ec>
 8007e4c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007e50:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8007e54:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007e58:	0409      	lsls	r1, r1, #16
 8007e5a:	0c09      	lsrs	r1, r1, #16
 8007e5c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007e60:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8007e64:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e68:	f248 0480 	movw	r4, #32896	; 0x8080
 8007e6c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007e70:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8007e74:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007e78:	0409      	lsls	r1, r1, #16
 8007e7a:	0c09      	lsrs	r1, r1, #16
 8007e7c:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8007e80:	4321      	orrs	r1, r4
 8007e82:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e86:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007e8a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8007e8e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007e92:	0409      	lsls	r1, r1, #16
 8007e94:	0c09      	lsrs	r1, r1, #16
 8007e96:	4321      	orrs	r1, r4
 8007e98:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8007e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e9e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8007ea2:	88cd      	ldrh	r5, [r1, #6]
 8007ea4:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 8007ea8:	b2a4      	uxth	r4, r4
 8007eaa:	086d      	lsrs	r5, r5, #1
 8007eac:	006d      	lsls	r5, r5, #1
 8007eae:	443c      	add	r4, r7
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007eb0:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007eb2:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007eb6:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8007eba:	b289      	uxth	r1, r1
 8007ebc:	4439      	add	r1, r7
 8007ebe:	b366      	cbz	r6, 8007f1a <USB_ActivateEndpoint+0x29e>
 8007ec0:	2e3e      	cmp	r6, #62	; 0x3e
 8007ec2:	d83c      	bhi.n	8007f3e <USB_ActivateEndpoint+0x2c2>
 8007ec4:	0874      	lsrs	r4, r6, #1
 8007ec6:	07f5      	lsls	r5, r6, #31
 8007ec8:	bf48      	it	mi
 8007eca:	3401      	addmi	r4, #1
 8007ecc:	02a4      	lsls	r4, r4, #10
 8007ece:	b2a4      	uxth	r4, r4
 8007ed0:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ed4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007ed8:	0449      	lsls	r1, r1, #17
 8007eda:	d50d      	bpl.n	8007ef8 <USB_ActivateEndpoint+0x27c>
 8007edc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007ee0:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8007ee4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007ee8:	0409      	lsls	r1, r1, #16
 8007eea:	0c09      	lsrs	r1, r1, #16
 8007eec:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8007ef0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007ef4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ef8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007efc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8007f00:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007f04:	0409      	lsls	r1, r1, #16
 8007f06:	0c09      	lsrs	r1, r1, #16
 8007f08:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8007f0c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007f10:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007f14:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8007f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007f1a:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 8007f1e:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8007f22:	0424      	lsls	r4, r4, #16
 8007f24:	0c24      	lsrs	r4, r4, #16
 8007f26:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8007f2a:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 8007f2e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8007f32:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8007f36:	b2a4      	uxth	r4, r4
 8007f38:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8007f3c:	e7ca      	b.n	8007ed4 <USB_ActivateEndpoint+0x258>
 8007f3e:	0975      	lsrs	r5, r6, #5
 8007f40:	06f4      	lsls	r4, r6, #27
 8007f42:	4c07      	ldr	r4, [pc, #28]	; (8007f60 <USB_ActivateEndpoint+0x2e4>)
 8007f44:	bf08      	it	eq
 8007f46:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8007f4a:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8007f4e:	b2a4      	uxth	r4, r4
 8007f50:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8007f54:	e7be      	b.n	8007ed4 <USB_ActivateEndpoint+0x258>
  switch (ep->type)
 8007f56:	2001      	movs	r0, #1
 8007f58:	e6aa      	b.n	8007cb0 <USB_ActivateEndpoint+0x34>
 8007f5a:	bf00      	nop
 8007f5c:	ffff8f8f 	.word	0xffff8f8f
 8007f60:	ffff8000 	.word	0xffff8000

08007f64 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8007f64:	7b0b      	ldrb	r3, [r1, #12]
 8007f66:	b9cb      	cbnz	r3, 8007f9c <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 8007f68:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f6a:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 80b1 	beq.w	80080d4 <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f72:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f76:	0659      	lsls	r1, r3, #25
 8007f78:	f100 80c5 	bmi.w	8008106 <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f88:	041b      	lsls	r3, r3, #16
 8007f8a:	0c1b      	lsrs	r3, r3, #16
 8007f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8007f98:	2000      	movs	r0, #0
 8007f9a:	4770      	bx	lr
    if (ep->is_in == 0U)
 8007f9c:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f9e:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d14b      	bne.n	800803c <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fa4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fa8:	0459      	lsls	r1, r3, #17
 8007faa:	d50d      	bpl.n	8007fc8 <USB_DeactivateEndpoint+0x64>
 8007fac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb8:	041b      	lsls	r3, r3, #16
 8007fba:	0c1b      	lsrs	r3, r3, #16
 8007fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fc8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fcc:	065b      	lsls	r3, r3, #25
 8007fce:	d50d      	bpl.n	8007fec <USB_DeactivateEndpoint+0x88>
 8007fd0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fdc:	041b      	lsls	r3, r3, #16
 8007fde:	0c1b      	lsrs	r3, r3, #16
 8007fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fe8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fec:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8007ff0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffc:	041b      	lsls	r3, r3, #16
 8007ffe:	0c1b      	lsrs	r3, r3, #16
 8008000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008004:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008008:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800800c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008018:	041b      	lsls	r3, r3, #16
 800801a:	0c1b      	lsrs	r3, r3, #16
 800801c:	430b      	orrs	r3, r1
 800801e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008022:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800802a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800802e:	041b      	lsls	r3, r3, #16
 8008030:	0c1b      	lsrs	r3, r3, #16
 8008032:	430b      	orrs	r3, r1
 8008034:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008038:	2000      	movs	r0, #0
 800803a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800803c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008040:	0459      	lsls	r1, r3, #17
 8008042:	d50d      	bpl.n	8008060 <USB_DeactivateEndpoint+0xfc>
 8008044:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800804c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008050:	041b      	lsls	r3, r3, #16
 8008052:	0c1b      	lsrs	r3, r3, #16
 8008054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008060:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008064:	065b      	lsls	r3, r3, #25
 8008066:	d50d      	bpl.n	8008084 <USB_DeactivateEndpoint+0x120>
 8008068:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800806c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008074:	041b      	lsls	r3, r3, #16
 8008076:	0c1b      	lsrs	r3, r3, #16
 8008078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800807c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008080:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008084:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8008088:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800808c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008094:	041b      	lsls	r3, r3, #16
 8008096:	0c1b      	lsrs	r3, r3, #16
 8008098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800809c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80080a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b0:	041b      	lsls	r3, r3, #16
 80080b2:	0c1b      	lsrs	r3, r3, #16
 80080b4:	430b      	orrs	r3, r1
 80080b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80080be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c6:	041b      	lsls	r3, r3, #16
 80080c8:	0c1b      	lsrs	r3, r3, #16
 80080ca:	430b      	orrs	r3, r1
 80080cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80080d0:	2000      	movs	r0, #0
 80080d2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80080d8:	045b      	lsls	r3, r3, #17
 80080da:	d50d      	bpl.n	80080f8 <USB_DeactivateEndpoint+0x194>
 80080dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80080e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e8:	041b      	lsls	r3, r3, #16
 80080ea:	0c1b      	lsrs	r3, r3, #16
 80080ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80080fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008104:	e740      	b.n	8007f88 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008106:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800810a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800810e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008112:	041b      	lsls	r3, r3, #16
 8008114:	0c1b      	lsrs	r3, r3, #16
 8008116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800811a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800811e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008122:	e72b      	b.n	8007f7c <USB_DeactivateEndpoint+0x18>

08008124 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008128:	784b      	ldrb	r3, [r1, #1]
{
 800812a:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 800812c:	2b01      	cmp	r3, #1
 800812e:	d06b      	beq.n	8008208 <USB_EPStartXfer+0xe4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008130:	7b08      	ldrb	r0, [r1, #12]
 8008132:	2800      	cmp	r0, #0
 8008134:	d037      	beq.n	80081a6 <USB_EPStartXfer+0x82>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008136:	78c8      	ldrb	r0, [r1, #3]
 8008138:	2802      	cmp	r0, #2
 800813a:	f000 812d 	beq.w	8008398 <USB_EPStartXfer+0x274>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800813e:	2801      	cmp	r0, #1
 8008140:	f040 810a 	bne.w	8008358 <USB_EPStartXfer+0x234>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008144:	6988      	ldr	r0, [r1, #24]
 8008146:	690c      	ldr	r4, [r1, #16]
 8008148:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 800814a:	bf94      	ite	ls
 800814c:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 800814e:	1b05      	subhi	r5, r0, r4
 8008150:	618d      	str	r5, [r1, #24]
 8008152:	bf88      	it	hi
 8008154:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008156:	2b00      	cmp	r3, #0
 8008158:	f040 811b 	bne.w	8008392 <USB_EPStartXfer+0x26e>
 800815c:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8008160:	780b      	ldrb	r3, [r1, #0]
 8008162:	b2a4      	uxth	r4, r4
 8008164:	f202 4504 	addw	r5, r2, #1028	; 0x404
 8008168:	011b      	lsls	r3, r3, #4
 800816a:	442c      	add	r4, r5
 800816c:	2800      	cmp	r0, #0
 800816e:	f000 8251 	beq.w	8008614 <USB_EPStartXfer+0x4f0>
 8008172:	283e      	cmp	r0, #62	; 0x3e
 8008174:	f200 80f3 	bhi.w	800835e <USB_EPStartXfer+0x23a>
 8008178:	0845      	lsrs	r5, r0, #1
 800817a:	462e      	mov	r6, r5
 800817c:	f010 0001 	ands.w	r0, r0, #1
 8008180:	bf18      	it	ne
 8008182:	1c6e      	addne	r6, r5, #1
 8008184:	02b6      	lsls	r6, r6, #10
 8008186:	b2b6      	uxth	r6, r6
 8008188:	52e6      	strh	r6, [r4, r3]
 800818a:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800818e:	b2a6      	uxth	r6, r4
 8008190:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8008194:	4434      	add	r4, r6
 8008196:	b100      	cbz	r0, 800819a <USB_EPStartXfer+0x76>
 8008198:	3501      	adds	r5, #1
 800819a:	02ad      	lsls	r5, r5, #10
 800819c:	b2a8      	uxth	r0, r5
 800819e:	52e0      	strh	r0, [r4, r3]
 80081a0:	f891 c000 	ldrb.w	ip, [r1]
 80081a4:	e01d      	b.n	80081e2 <USB_EPStartXfer+0xbe>
      if (ep->xfer_len > ep->maxpacket)
 80081a6:	698c      	ldr	r4, [r1, #24]
 80081a8:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80081aa:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 80081ac:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 80081ae:	bf84      	itt	hi
 80081b0:	1ae0      	subhi	r0, r4, r3
 80081b2:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80081b4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80081b8:	6188      	str	r0, [r1, #24]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 80081c0:	012d      	lsls	r5, r5, #4
 80081c2:	4403      	add	r3, r0
 80081c4:	2c00      	cmp	r4, #0
 80081c6:	f000 80b7 	beq.w	8008338 <USB_EPStartXfer+0x214>
 80081ca:	2c3e      	cmp	r4, #62	; 0x3e
 80081cc:	f200 8129 	bhi.w	8008422 <USB_EPStartXfer+0x2fe>
 80081d0:	0860      	lsrs	r0, r4, #1
 80081d2:	07e4      	lsls	r4, r4, #31
 80081d4:	bf48      	it	mi
 80081d6:	3001      	addmi	r0, #1
 80081d8:	0280      	lsls	r0, r0, #10
 80081da:	b280      	uxth	r0, r0
 80081dc:	52e8      	strh	r0, [r5, r3]
 80081de:	f891 c000 	ldrb.w	ip, [r1]
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081e2:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
  }

  return HAL_OK;
 80081e6:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f0:	041b      	lsls	r3, r3, #16
 80081f2:	0c1b      	lsrs	r3, r3, #16
 80081f4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80081f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008200:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
}
 8008204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 8008208:	690d      	ldr	r5, [r1, #16]
 800820a:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 800820c:	7b0b      	ldrb	r3, [r1, #12]
 800820e:	42a8      	cmp	r0, r5
 8008210:	bf28      	it	cs
 8008212:	4628      	movcs	r0, r5
 8008214:	2b00      	cmp	r3, #0
 8008216:	d05d      	beq.n	80082d4 <USB_EPStartXfer+0x1b0>
      if (ep->type == EP_TYPE_BULK)
 8008218:	78cb      	ldrb	r3, [r1, #3]
 800821a:	2b02      	cmp	r3, #2
 800821c:	f000 810e 	beq.w	800843c <USB_EPStartXfer+0x318>
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008220:	f891 8000 	ldrb.w	r8, [r1]
        ep->xfer_len_db -= len;
 8008224:	6a0b      	ldr	r3, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008226:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800822a:	1a1b      	subs	r3, r3, r0
        PCD_SET_EP_DBUF(USBx, ep->num);
 800822c:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 8008230:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8008234:	0424      	lsls	r4, r4, #16
 8008236:	0c24      	lsrs	r4, r4, #16
 8008238:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800823c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8008240:	f822 4028 	strh.w	r4, [r2, r8, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008244:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 8008248:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800824a:	f014 0f40 	tst.w	r4, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800824e:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8008252:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8008256:	b2a6      	uxth	r6, r4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008258:	f000 814a 	beq.w	80084f0 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800825c:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8008260:	4434      	add	r4, r6
 8008262:	b286      	uxth	r6, r0
 8008264:	f824 6008 	strh.w	r6, [r4, r8]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008268:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800826a:	3601      	adds	r6, #1
 800826c:	f502 6780 	add.w	r7, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8008270:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008272:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008276:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 800827a:	d008      	beq.n	800828e <USB_EPStartXfer+0x16a>
  uint8_t *pBuf = pbUsrBuf;
 800827c:	46cc      	mov	ip, r9
 800827e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  {
    temp1 = *pBuf;
 8008282:	f83c eb02 	ldrh.w	lr, [ip], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 8008286:	f824 eb04 	strh.w	lr, [r4], #4
  for (i = n; i != 0U; i--)
 800828a:	42a6      	cmp	r6, r4
 800828c:	d1f9      	bne.n	8008282 <USB_EPStartXfer+0x15e>
          ep->xfer_buff += len;
 800828e:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 8008292:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 8008294:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8008296:	f0c0 81b7 	bcc.w	8008608 <USB_EPStartXfer+0x4e4>
            ep->xfer_len_db = 0U;
 800829a:	2500      	movs	r5, #0
 800829c:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d036      	beq.n	8008310 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082a2:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80082a6:	b285      	uxth	r5, r0
 80082a8:	f202 4004 	addw	r0, r2, #1028	; 0x404
 80082ac:	4428      	add	r0, r5
 80082ae:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80082b0:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082b2:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082b6:	8908      	ldrh	r0, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80082b8:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 80082ba:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082bc:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 80082c0:	d026      	beq.n	8008310 <USB_EPStartXfer+0x1ec>
 80082c2:	eb00 0583 	add.w	r5, r0, r3, lsl #2
    temp1 = *pBuf;
 80082c6:	f834 3b02 	ldrh.w	r3, [r4], #2
    *pdwVal = (uint16_t)temp2;
 80082ca:	f820 3b04 	strh.w	r3, [r0], #4
  for (i = n; i != 0U; i--)
 80082ce:	4285      	cmp	r5, r0
 80082d0:	d1f9      	bne.n	80082c6 <USB_EPStartXfer+0x1a2>
 80082d2:	e01d      	b.n	8008310 <USB_EPStartXfer+0x1ec>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80082d4:	b284      	uxth	r4, r0
 80082d6:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082d8:	88cd      	ldrh	r5, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80082da:	f104 0e01 	add.w	lr, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082de:	f502 6080 	add.w	r0, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80082e2:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (i = n; i != 0U; i--)
 80082ea:	bf18      	it	ne
 80082ec:	eb03 0e4e 	addne.w	lr, r3, lr, lsl #1
 80082f0:	d005      	beq.n	80082fe <USB_EPStartXfer+0x1da>
    temp1 = *pBuf;
 80082f2:	f833 cb02 	ldrh.w	ip, [r3], #2
  for (i = n; i != 0U; i--)
 80082f6:	4573      	cmp	r3, lr
    *pdwVal = (uint16_t)temp2;
 80082f8:	f820 cb04 	strh.w	ip, [r0], #4
  for (i = n; i != 0U; i--)
 80082fc:	d1f9      	bne.n	80082f2 <USB_EPStartXfer+0x1ce>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80082fe:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8008302:	7808      	ldrb	r0, [r1, #0]
 8008304:	b29d      	uxth	r5, r3
 8008306:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800830a:	0100      	lsls	r0, r0, #4
 800830c:	442b      	add	r3, r5
 800830e:	52c4      	strh	r4, [r0, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008310:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 8008312:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008314:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8008318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800831c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008320:	041b      	lsls	r3, r3, #16
 8008322:	0c1b      	lsrs	r3, r3, #16
 8008324:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8008328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800832c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008330:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 8008334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008338:	5ae8      	ldrh	r0, [r5, r3]
 800833a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800833e:	0400      	lsls	r0, r0, #16
 8008340:	0c00      	lsrs	r0, r0, #16
 8008342:	52e8      	strh	r0, [r5, r3]
 8008344:	5ae8      	ldrh	r0, [r5, r3]
 8008346:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800834a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800834e:	b280      	uxth	r0, r0
 8008350:	52e8      	strh	r0, [r5, r3]
 8008352:	f891 c000 	ldrb.w	ip, [r1]
 8008356:	e744      	b.n	80081e2 <USB_EPStartXfer+0xbe>
        return HAL_ERROR;
 8008358:	2001      	movs	r0, #1
}
 800835a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800835e:	0945      	lsrs	r5, r0, #5
 8008360:	462f      	mov	r7, r5
 8008362:	f010 001f 	ands.w	r0, r0, #31
 8008366:	bf08      	it	eq
 8008368:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800836c:	462e      	mov	r6, r5
 800836e:	4dbb      	ldr	r5, [pc, #748]	; (800865c <USB_EPStartXfer+0x538>)
 8008370:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8008374:	b2ad      	uxth	r5, r5
 8008376:	52e5      	strh	r5, [r4, r3]
 8008378:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800837c:	b2a5      	uxth	r5, r4
 800837e:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8008382:	442c      	add	r4, r5
 8008384:	b900      	cbnz	r0, 8008388 <USB_EPStartXfer+0x264>
 8008386:	3e01      	subs	r6, #1
 8008388:	48b4      	ldr	r0, [pc, #720]	; (800865c <USB_EPStartXfer+0x538>)
 800838a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800838e:	b280      	uxth	r0, r0
 8008390:	52e0      	strh	r0, [r4, r3]
 8008392:	f891 c000 	ldrb.w	ip, [r1]
 8008396:	e724      	b.n	80081e2 <USB_EPStartXfer+0xbe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008398:	bb13      	cbnz	r3, 80083e0 <USB_EPStartXfer+0x2bc>
 800839a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800839e:	780b      	ldrb	r3, [r1, #0]
 80083a0:	b284      	uxth	r4, r0
 80083a2:	f202 4004 	addw	r0, r2, #1028	; 0x404
 80083a6:	4420      	add	r0, r4
 80083a8:	690c      	ldr	r4, [r1, #16]
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	2c00      	cmp	r4, #0
 80083ae:	f000 8109 	beq.w	80085c4 <USB_EPStartXfer+0x4a0>
 80083b2:	2c3e      	cmp	r4, #62	; 0x3e
 80083b4:	f200 818e 	bhi.w	80086d4 <USB_EPStartXfer+0x5b0>
 80083b8:	0865      	lsrs	r5, r4, #1
 80083ba:	462e      	mov	r6, r5
 80083bc:	f014 0401 	ands.w	r4, r4, #1
 80083c0:	bf18      	it	ne
 80083c2:	1c6e      	addne	r6, r5, #1
 80083c4:	02b6      	lsls	r6, r6, #10
 80083c6:	b2b6      	uxth	r6, r6
 80083c8:	52c6      	strh	r6, [r0, r3]
 80083ca:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80083ce:	f202 460c 	addw	r6, r2, #1036	; 0x40c
 80083d2:	b280      	uxth	r0, r0
 80083d4:	4406      	add	r6, r0
 80083d6:	b104      	cbz	r4, 80083da <USB_EPStartXfer+0x2b6>
 80083d8:	3501      	adds	r5, #1
 80083da:	02ad      	lsls	r5, r5, #10
 80083dc:	b2a8      	uxth	r0, r5
 80083de:	52f0      	strh	r0, [r6, r3]
        if (ep->xfer_count != 0U)
 80083e0:	69cb      	ldr	r3, [r1, #28]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0d5      	beq.n	8008392 <USB_EPStartXfer+0x26e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80083e6:	f244 0340 	movw	r3, #16448	; 0x4040
 80083ea:	f891 c000 	ldrb.w	ip, [r1]
 80083ee:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80083f2:	ea03 0400 	and.w	r4, r3, r0
 80083f6:	4383      	bics	r3, r0
 80083f8:	d002      	beq.n	8008400 <USB_EPStartXfer+0x2dc>
 80083fa:	2c00      	cmp	r4, #0
 80083fc:	f47f aef1 	bne.w	80081e2 <USB_EPStartXfer+0xbe>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008400:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8008404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840c:	041b      	lsls	r3, r3, #16
 800840e:	0c1b      	lsrs	r3, r3, #16
 8008410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008414:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008418:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 800841c:	f891 c000 	ldrb.w	ip, [r1]
 8008420:	e6df      	b.n	80081e2 <USB_EPStartXfer+0xbe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008422:	0966      	lsrs	r6, r4, #5
 8008424:	06e0      	lsls	r0, r4, #27
 8008426:	488d      	ldr	r0, [pc, #564]	; (800865c <USB_EPStartXfer+0x538>)
 8008428:	bf08      	it	eq
 800842a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800842e:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8008432:	b280      	uxth	r0, r0
 8008434:	52e8      	strh	r0, [r5, r3]
 8008436:	f891 c000 	ldrb.w	ip, [r1]
 800843a:	e6d2      	b.n	80081e2 <USB_EPStartXfer+0xbe>
        if (ep->xfer_len_db > ep->maxpacket)
 800843c:	6a0c      	ldr	r4, [r1, #32]
 800843e:	42a5      	cmp	r5, r4
 8008440:	f080 8094 	bcs.w	800856c <USB_EPStartXfer+0x448>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008444:	780e      	ldrb	r6, [r1, #0]
          ep->xfer_len_db -= len;
 8008446:	1a24      	subs	r4, r4, r0
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008448:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800844c:	ea4f 1906 	mov.w	r9, r6, lsl #4
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008458:	041b      	lsls	r3, r3, #16
 800845a:	0c1b      	lsrs	r3, r3, #16
 800845c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008464:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008468:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
          ep->xfer_len_db -= len;
 800846c:	620c      	str	r4, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800846e:	f013 0f40 	tst.w	r3, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008472:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8008476:	b29e      	uxth	r6, r3
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008478:	f000 80f2 	beq.w	8008660 <USB_EPStartXfer+0x53c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800847c:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 8008480:	4433      	add	r3, r6
 8008482:	fa1f fa80 	uxth.w	sl, r0
 8008486:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800848a:	894e      	ldrh	r6, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800848c:	f10a 0801 	add.w	r8, sl, #1
 8008490:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8008494:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008498:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800849a:	eb03 0646 	add.w	r6, r3, r6, lsl #1
  for (i = n; i != 0U; i--)
 800849e:	d008      	beq.n	80084b2 <USB_EPStartXfer+0x38e>
  uint8_t *pBuf = pbUsrBuf;
 80084a0:	46bc      	mov	ip, r7
 80084a2:	eb06 0b88 	add.w	fp, r6, r8, lsl #2
    temp1 = *pBuf;
 80084a6:	f83c eb02 	ldrh.w	lr, [ip], #2
    *pdwVal = (uint16_t)temp2;
 80084aa:	f826 eb04 	strh.w	lr, [r6], #4
  for (i = n; i != 0U; i--)
 80084ae:	45b3      	cmp	fp, r6
 80084b0:	d1f9      	bne.n	80084a6 <USB_EPStartXfer+0x382>
            ep->xfer_buff += len;
 80084b2:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 80084b4:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 80084b6:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80084b8:	f080 8127 	bcs.w	800870a <USB_EPStartXfer+0x5e6>
              ep->xfer_len_db -= len;
 80084bc:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084be:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80084c2:	620c      	str	r4, [r1, #32]
 80084c4:	b284      	uxth	r4, r0
 80084c6:	f202 4004 	addw	r0, r2, #1028	; 0x404
 80084ca:	4420      	add	r0, r4
 80084cc:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084d0:	8908      	ldrh	r0, [r1, #8]
 80084d2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 80084d6:	f1b8 0f00 	cmp.w	r8, #0
 80084da:	f43f af19 	beq.w	8008310 <USB_EPStartXfer+0x1ec>
 80084de:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 80084e2:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 80084e6:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 80084ea:	429c      	cmp	r4, r3
 80084ec:	d1f9      	bne.n	80084e2 <USB_EPStartXfer+0x3be>
 80084ee:	e70f      	b.n	8008310 <USB_EPStartXfer+0x1ec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084f0:	f202 4404 	addw	r4, r2, #1028	; 0x404
 80084f4:	4434      	add	r4, r6
 80084f6:	b286      	uxth	r6, r0
 80084f8:	f824 6008 	strh.w	r6, [r4, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084fc:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008500:	3601      	adds	r6, #1
 8008502:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8008506:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008508:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800850c:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
  for (i = n; i != 0U; i--)
 8008510:	d008      	beq.n	8008524 <USB_EPStartXfer+0x400>
  uint8_t *pBuf = pbUsrBuf;
 8008512:	464c      	mov	r4, r9
 8008514:	eb09 0646 	add.w	r6, r9, r6, lsl #1
    temp1 = *pBuf;
 8008518:	f834 eb02 	ldrh.w	lr, [r4], #2
  for (i = n; i != 0U; i--)
 800851c:	42b4      	cmp	r4, r6
    *pdwVal = (uint16_t)temp2;
 800851e:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 8008522:	d1f9      	bne.n	8008518 <USB_EPStartXfer+0x3f4>
          ep->xfer_buff += len;
 8008524:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 8008528:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800852a:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800852c:	d36f      	bcc.n	800860e <USB_EPStartXfer+0x4ea>
            ep->xfer_len_db = 0U;
 800852e:	2500      	movs	r5, #0
 8008530:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 8008532:	2b00      	cmp	r3, #0
 8008534:	f43f aeec 	beq.w	8008310 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008538:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800853c:	b285      	uxth	r5, r0
 800853e:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8008542:	4428      	add	r0, r5
 8008544:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008546:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008548:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800854c:	8948      	ldrh	r0, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800854e:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 8008550:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008552:	eb07 0740 	add.w	r7, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 8008556:	f43f aedb 	beq.w	8008310 <USB_EPStartXfer+0x1ec>
 800855a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    temp1 = *pBuf;
 800855e:	f834 0b02 	ldrh.w	r0, [r4], #2
    *pdwVal = (uint16_t)temp2;
 8008562:	f827 0b04 	strh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8008566:	429f      	cmp	r7, r3
 8008568:	d1f9      	bne.n	800855e <USB_EPStartXfer+0x43a>
 800856a:	e6d1      	b.n	8008310 <USB_EPStartXfer+0x1ec>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800856c:	7808      	ldrb	r0, [r1, #0]
 800856e:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 8008572:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800857a:	041b      	lsls	r3, r3, #16
 800857c:	0c1b      	lsrs	r3, r3, #16
 800857e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008586:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800858a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800858e:	0100      	lsls	r0, r0, #4
 8008590:	b29d      	uxth	r5, r3
 8008592:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8008596:	442b      	add	r3, r5
 8008598:	b2a5      	uxth	r5, r4
 800859a:	521d      	strh	r5, [r3, r0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800859c:	b2a0      	uxth	r0, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800859e:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80085a0:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085a2:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80085a6:	0840      	lsrs	r0, r0, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085a8:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085aa:	eb03 0345 	add.w	r3, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 80085ae:	f43f aeaf 	beq.w	8008310 <USB_EPStartXfer+0x1ec>
 80085b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    temp1 = *pBuf;
 80085b6:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 80085ba:	f823 5b04 	strh.w	r5, [r3], #4
  for (i = n; i != 0U; i--)
 80085be:	4298      	cmp	r0, r3
 80085c0:	d1f9      	bne.n	80085b6 <USB_EPStartXfer+0x492>
 80085c2:	e6a5      	b.n	8008310 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80085c4:	5ac4      	ldrh	r4, [r0, r3]
 80085c6:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80085ca:	0424      	lsls	r4, r4, #16
 80085cc:	0c24      	lsrs	r4, r4, #16
 80085ce:	52c4      	strh	r4, [r0, r3]
 80085d0:	5ac5      	ldrh	r5, [r0, r3]
 80085d2:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 80085d6:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 80085da:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 80085de:	b2ad      	uxth	r5, r5
 80085e0:	52c5      	strh	r5, [r0, r3]
 80085e2:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80085e6:	b285      	uxth	r5, r0
 80085e8:	4620      	mov	r0, r4
 80085ea:	4428      	add	r0, r5
 80085ec:	5ac4      	ldrh	r4, [r0, r3]
 80085ee:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80085f2:	0424      	lsls	r4, r4, #16
 80085f4:	0c24      	lsrs	r4, r4, #16
 80085f6:	52c4      	strh	r4, [r0, r3]
 80085f8:	5ac4      	ldrh	r4, [r0, r3]
 80085fa:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80085fe:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8008602:	b2a4      	uxth	r4, r4
 8008604:	52c4      	strh	r4, [r0, r3]
 8008606:	e6eb      	b.n	80083e0 <USB_EPStartXfer+0x2bc>
            ep->xfer_len_db -= len;
 8008608:	1a1d      	subs	r5, r3, r0
 800860a:	4603      	mov	r3, r0
 800860c:	e646      	b.n	800829c <USB_EPStartXfer+0x178>
            ep->xfer_len_db -= len;
 800860e:	1a1d      	subs	r5, r3, r0
 8008610:	4603      	mov	r3, r0
 8008612:	e78d      	b.n	8008530 <USB_EPStartXfer+0x40c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008614:	5ae0      	ldrh	r0, [r4, r3]
 8008616:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800861a:	0400      	lsls	r0, r0, #16
 800861c:	0c00      	lsrs	r0, r0, #16
 800861e:	52e0      	strh	r0, [r4, r3]
 8008620:	5ae5      	ldrh	r5, [r4, r3]
 8008622:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8008626:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800862a:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800862e:	b2ad      	uxth	r5, r5
 8008630:	52e5      	strh	r5, [r4, r3]
 8008632:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8008636:	b2a4      	uxth	r4, r4
 8008638:	4420      	add	r0, r4
 800863a:	5ac4      	ldrh	r4, [r0, r3]
 800863c:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8008640:	0424      	lsls	r4, r4, #16
 8008642:	0c24      	lsrs	r4, r4, #16
 8008644:	52c4      	strh	r4, [r0, r3]
 8008646:	5ac4      	ldrh	r4, [r0, r3]
 8008648:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800864c:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8008650:	b2a4      	uxth	r4, r4
 8008652:	52c4      	strh	r4, [r0, r3]
 8008654:	f891 c000 	ldrb.w	ip, [r1]
 8008658:	e5c3      	b.n	80081e2 <USB_EPStartXfer+0xbe>
 800865a:	bf00      	nop
 800865c:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008660:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8008664:	4433      	add	r3, r6
 8008666:	fa1f fa80 	uxth.w	sl, r0
 800866a:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800866e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008672:	f10a 0801 	add.w	r8, sl, #1
 8008676:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800867a:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800867e:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008680:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
  for (i = n; i != 0U; i--)
 8008684:	d008      	beq.n	8008698 <USB_EPStartXfer+0x574>
  uint8_t *pBuf = pbUsrBuf;
 8008686:	463e      	mov	r6, r7
 8008688:	eb07 0b48 	add.w	fp, r7, r8, lsl #1
    temp1 = *pBuf;
 800868c:	f836 eb02 	ldrh.w	lr, [r6], #2
  for (i = n; i != 0U; i--)
 8008690:	45b3      	cmp	fp, r6
    *pdwVal = (uint16_t)temp2;
 8008692:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 8008696:	d1f9      	bne.n	800868c <USB_EPStartXfer+0x568>
            ep->xfer_buff += len;
 8008698:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800869a:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800869c:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800869e:	d23e      	bcs.n	800871e <USB_EPStartXfer+0x5fa>
              ep->xfer_len_db -= len;
 80086a0:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80086a2:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80086a6:	620c      	str	r4, [r1, #32]
 80086a8:	b284      	uxth	r4, r0
 80086aa:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 80086ae:	4420      	add	r0, r4
 80086b0:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086b4:	8948      	ldrh	r0, [r1, #10]
 80086b6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 80086ba:	f1b8 0f00 	cmp.w	r8, #0
 80086be:	f43f ae27 	beq.w	8008310 <USB_EPStartXfer+0x1ec>
 80086c2:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 80086c6:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 80086ca:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 80086ce:	429c      	cmp	r4, r3
 80086d0:	d1f9      	bne.n	80086c6 <USB_EPStartXfer+0x5a2>
 80086d2:	e61d      	b.n	8008310 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80086d4:	0965      	lsrs	r5, r4, #5
 80086d6:	462f      	mov	r7, r5
 80086d8:	f014 041f 	ands.w	r4, r4, #31
 80086dc:	bf08      	it	eq
 80086de:	f105 37ff 	addeq.w	r7, r5, #4294967295
 80086e2:	462e      	mov	r6, r5
 80086e4:	4d13      	ldr	r5, [pc, #76]	; (8008734 <USB_EPStartXfer+0x610>)
 80086e6:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80086ea:	b2ad      	uxth	r5, r5
 80086ec:	52c5      	strh	r5, [r0, r3]
 80086ee:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80086f2:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 80086f6:	b280      	uxth	r0, r0
 80086f8:	4405      	add	r5, r0
 80086fa:	b904      	cbnz	r4, 80086fe <USB_EPStartXfer+0x5da>
 80086fc:	3e01      	subs	r6, #1
 80086fe:	480d      	ldr	r0, [pc, #52]	; (8008734 <USB_EPStartXfer+0x610>)
 8008700:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8008704:	b280      	uxth	r0, r0
 8008706:	52e8      	strh	r0, [r5, r3]
 8008708:	e66a      	b.n	80083e0 <USB_EPStartXfer+0x2bc>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800870a:	fa1f f884 	uxth.w	r8, r4
 800870e:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008712:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008716:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800871a:	2400      	movs	r4, #0
 800871c:	e6cf      	b.n	80084be <USB_EPStartXfer+0x39a>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800871e:	fa1f f884 	uxth.w	r8, r4
 8008722:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008726:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800872a:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800872e:	2400      	movs	r4, #0
 8008730:	e7b7      	b.n	80086a2 <USB_EPStartXfer+0x57e>
 8008732:	bf00      	nop
 8008734:	ffff8000 	.word	0xffff8000

08008738 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8008738:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800873a:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800873c:	b18b      	cbz	r3, 8008762 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800873e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800874a:	041b      	lsls	r3, r3, #16
 800874c:	0c1b      	lsrs	r3, r3, #16
 800874e:	f083 0310 	eor.w	r3, r3, #16
 8008752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800875a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800875e:	2000      	movs	r0, #0
 8008760:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008762:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800876a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876e:	041b      	lsls	r3, r3, #16
 8008770:	0c1b      	lsrs	r3, r3, #16
 8008772:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800877a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800877e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008782:	2000      	movs	r0, #0
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop

08008788 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8008788:	7b0b      	ldrb	r3, [r1, #12]
 800878a:	bb3b      	cbnz	r3, 80087dc <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 800878c:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800878e:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8008790:	b333      	cbz	r3, 80087e0 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008792:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008796:	065b      	lsls	r3, r3, #25
 8008798:	d50d      	bpl.n	80087b6 <USB_EPClearStall+0x2e>
 800879a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800879e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a6:	041b      	lsls	r3, r3, #16
 80087a8:	0c1b      	lsrs	r3, r3, #16
 80087aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80087b6:	78cb      	ldrb	r3, [r1, #3]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d00f      	beq.n	80087dc <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80087c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c8:	041b      	lsls	r3, r3, #16
 80087ca:	0c1b      	lsrs	r3, r3, #16
 80087cc:	f083 0320 	eor.w	r3, r3, #32
 80087d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80087dc:	2000      	movs	r0, #0
 80087de:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80087e4:	045b      	lsls	r3, r3, #17
 80087e6:	d50d      	bpl.n	8008804 <USB_EPClearStall+0x7c>
 80087e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80087ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f4:	041b      	lsls	r3, r3, #16
 80087f6:	0c1b      	lsrs	r3, r3, #16
 80087f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008800:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008804:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800880c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008810:	041b      	lsls	r3, r3, #16
 8008812:	0c1b      	lsrs	r3, r3, #16
 8008814:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800881c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008820:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008824:	2000      	movs	r0, #0
 8008826:	4770      	bx	lr

08008828 <USB_SetDevAddress>:
  if (address == 0U)
 8008828:	b911      	cbnz	r1, 8008830 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800882a:	2380      	movs	r3, #128	; 0x80
 800882c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8008830:	2000      	movs	r0, #0
 8008832:	4770      	bx	lr

08008834 <USB_DevConnect>:
}
 8008834:	2000      	movs	r0, #0
 8008836:	4770      	bx	lr

08008838 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8008838:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 800883c:	b280      	uxth	r0, r0
 800883e:	4770      	bx	lr

08008840 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008840:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008842:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 8008846:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008848:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800884c:	d007      	beq.n	800885e <USB_WritePMA+0x1e>
 800884e:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008852:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8008856:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 800885a:	4282      	cmp	r2, r0
 800885c:	d1f9      	bne.n	8008852 <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800885e:	4770      	bx	lr

08008860 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008860:	b570      	push	{r4, r5, r6, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008862:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8008866:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008868:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800886c:	d012      	beq.n	8008894 <USB_ReadPMA+0x34>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800886e:	46ae      	mov	lr, r5
  for (i = n; i != 0U; i--)
 8008870:	46b4      	mov	ip, r6
 8008872:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008874:	f83e 2b04 	ldrh.w	r2, [lr], #4
  for (i = n; i != 0U; i--)
 8008878:	3002      	adds	r0, #2
    temp = *(__IO uint16_t *)pdwVal;
 800887a:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800887c:	0a14      	lsrs	r4, r2, #8
  for (i = n; i != 0U; i--)
 800887e:	f1bc 0c01 	subs.w	ip, ip, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008882:	f800 2c04 	strb.w	r2, [r0, #-4]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008886:	f800 4c03 	strb.w	r4, [r0, #-3]
  for (i = n; i != 0U; i--)
 800888a:	d1f3      	bne.n	8008874 <USB_ReadPMA+0x14>
    pBuf++;
 800888c:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 8008890:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008894:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8008896:	bf44      	itt	mi
 8008898:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800889a:	700b      	strbmi	r3, [r1, #0]
  }
}
 800889c:	bd70      	pop	{r4, r5, r6, pc}
 800889e:	bf00      	nop

080088a0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088a0:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80088a4:	b183      	cbz	r3, 80088c8 <USBD_CDC_EP0_RxReady+0x28>
{
 80088a6:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80088a8:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088ac:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80088b0:	28ff      	cmp	r0, #255	; 0xff
 80088b2:	d007      	beq.n	80088c4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	4621      	mov	r1, r4
 80088b8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80088bc:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 80088be:	23ff      	movs	r3, #255	; 0xff
 80088c0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80088c4:	2000      	movs	r0, #0
 80088c6:	bd10      	pop	{r4, pc}
 80088c8:	2000      	movs	r0, #0
 80088ca:	4770      	bx	lr

080088cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80088cc:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80088ce:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgFSDesc;
}
 80088d0:	4801      	ldr	r0, [pc, #4]	; (80088d8 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80088d2:	801a      	strh	r2, [r3, #0]
}
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	20000054 	.word	0x20000054

080088dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80088dc:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80088de:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgHSDesc;
}
 80088e0:	4801      	ldr	r0, [pc, #4]	; (80088e8 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80088e2:	801a      	strh	r2, [r3, #0]
}
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	20000098 	.word	0x20000098

080088ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80088ec:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80088ee:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80088f0:	4801      	ldr	r0, [pc, #4]	; (80088f8 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80088f2:	801a      	strh	r2, [r3, #0]
}
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	200000e8 	.word	0x200000e8

080088fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80088fc:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80088fe:	220a      	movs	r2, #10
  return USBD_CDC_DeviceQualifierDesc;
}
 8008900:	4801      	ldr	r0, [pc, #4]	; (8008908 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008902:	801a      	strh	r2, [r3, #0]
}
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	200000dc 	.word	0x200000dc

0800890c <USBD_CDC_DataOut>:
{
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008910:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008914:	f000 fffc 	bl	8009910 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8008918:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800891c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8008920:	b14b      	cbz	r3, 8008936 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008922:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8008926:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8008930:	4798      	blx	r3
    return USBD_OK;
 8008932:	2000      	movs	r0, #0
}
 8008934:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008936:	2002      	movs	r0, #2
}
 8008938:	bd38      	pop	{r3, r4, r5, pc}
 800893a:	bf00      	nop

0800893c <USBD_CDC_DataIn>:
{
 800893c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800893e:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 8008942:	b1ed      	cbz	r5, 8008980 <USBD_CDC_DataIn+0x44>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008944:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8008948:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 800894c:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8008950:	b14a      	cbz	r2, 8008966 <USBD_CDC_DataIn+0x2a>
 8008952:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 8008956:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800895a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800895c:	fbb2 f3f4 	udiv	r3, r2, r4
 8008960:	fb04 2413 	mls	r4, r4, r3, r2
 8008964:	b124      	cbz	r4, 8008970 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8008966:	2300      	movs	r3, #0
    return USBD_OK;
 8008968:	4618      	mov	r0, r3
      hcdc->TxState = 0U;
 800896a:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
}
 800896e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008970:	4623      	mov	r3, r4
 8008972:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 8008974:	f8cc 401c 	str.w	r4, [ip, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008978:	f000 ffae 	bl	80098d8 <USBD_LL_Transmit>
    return USBD_OK;
 800897c:	4620      	mov	r0, r4
}
 800897e:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008980:	2002      	movs	r0, #2
}
 8008982:	bd38      	pop	{r3, r4, r5, pc}

08008984 <USBD_CDC_Setup>:
{
 8008984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 8008988:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800898a:	780b      	ldrb	r3, [r1, #0]
{
 800898c:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800898e:	f013 0660 	ands.w	r6, r3, #96	; 0x60
{
 8008992:	460c      	mov	r4, r1
 8008994:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008996:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800899a:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800899e:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089a2:	d013      	beq.n	80089cc <USBD_CDC_Setup+0x48>
 80089a4:	2e20      	cmp	r6, #32
 80089a6:	d117      	bne.n	80089d8 <USBD_CDC_Setup+0x54>
    if (req->wLength)
 80089a8:	88ce      	ldrh	r6, [r1, #6]
 80089aa:	b1f6      	cbz	r6, 80089ea <USBD_CDC_Setup+0x66>
      if (req->bmRequest & 0x80U)
 80089ac:	061b      	lsls	r3, r3, #24
 80089ae:	d53f      	bpl.n	8008a30 <USBD_CDC_Setup+0xac>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089b0:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80089b4:	4632      	mov	r2, r6
 80089b6:	4641      	mov	r1, r8
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	7860      	ldrb	r0, [r4, #1]
 80089bc:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80089be:	4641      	mov	r1, r8
 80089c0:	4628      	mov	r0, r5
 80089c2:	88e2      	ldrh	r2, [r4, #6]
  uint8_t ret = USBD_OK;
 80089c4:	463e      	mov	r6, r7
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80089c6:	f000 fcd5 	bl	8009374 <USBD_CtlSendData>
 80089ca:	e00a      	b.n	80089e2 <USBD_CDC_Setup+0x5e>
    switch (req->bRequest)
 80089cc:	784b      	ldrb	r3, [r1, #1]
 80089ce:	2b0a      	cmp	r3, #10
 80089d0:	d01f      	beq.n	8008a12 <USBD_CDC_Setup+0x8e>
 80089d2:	2b0b      	cmp	r3, #11
 80089d4:	d027      	beq.n	8008a26 <USBD_CDC_Setup+0xa2>
 80089d6:	b193      	cbz	r3, 80089fe <USBD_CDC_Setup+0x7a>
      USBD_CtlError (pdev, req);
 80089d8:	4621      	mov	r1, r4
 80089da:	4628      	mov	r0, r5
 80089dc:	f000 fc94 	bl	8009308 <USBD_CtlError>
      ret = USBD_FAIL;
 80089e0:	2602      	movs	r6, #2
}
 80089e2:	4630      	mov	r0, r6
 80089e4:	b002      	add	sp, #8
 80089e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089ea:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80089ee:	4632      	mov	r2, r6
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	7848      	ldrb	r0, [r1, #1]
 80089f4:	4798      	blx	r3
}
 80089f6:	4630      	mov	r0, r6
 80089f8:	b002      	add	sp, #8
 80089fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089fe:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d1e8      	bne.n	80089d8 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008a06:	2202      	movs	r2, #2
 8008a08:	f10d 0106 	add.w	r1, sp, #6
 8008a0c:	f000 fcb2 	bl	8009374 <USBD_CtlSendData>
 8008a10:	e7e7      	b.n	80089e2 <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a12:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d1de      	bne.n	80089d8 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f10d 0105 	add.w	r1, sp, #5
 8008a20:	f000 fca8 	bl	8009374 <USBD_CtlSendData>
 8008a24:	e7dd      	b.n	80089e2 <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a26:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d0d9      	beq.n	80089e2 <USBD_CDC_Setup+0x5e>
 8008a2e:	e7d3      	b.n	80089d8 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 8008a30:	784b      	ldrb	r3, [r1, #1]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a32:	4632      	mov	r2, r6
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008a34:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a38:	4641      	mov	r1, r8
        hcdc->CmdOpCode = req->bRequest;
 8008a3a:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a3e:	f000 fcb1 	bl	80093a4 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8008a42:	463e      	mov	r6, r7
 8008a44:	e7cd      	b.n	80089e2 <USBD_CDC_Setup+0x5e>
 8008a46:	bf00      	nop

08008a48 <USBD_CDC_DeInit>:
{
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008a4c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008a4e:	2181      	movs	r1, #129	; 0x81
 8008a50:	f000 fef6 	bl	8009840 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008a54:	2101      	movs	r1, #1
 8008a56:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008a58:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008a5a:	f000 fef1 	bl	8009840 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008a5e:	2182      	movs	r1, #130	; 0x82
 8008a60:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008a62:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008a66:	f000 feeb 	bl	8009840 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8008a6a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008a6e:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8008a70:	b14b      	cbz	r3, 8008a86 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008a72:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008a7a:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8008a7e:	f000 ff4f 	bl	8009920 <USBD_static_free>
    pdev->pClassData = NULL;
 8008a82:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8008a86:	2000      	movs	r0, #0
 8008a88:	bd38      	pop	{r3, r4, r5, pc}
 8008a8a:	bf00      	nop

08008a8c <USBD_CDC_Init>:
{
 8008a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008a90:	7c03      	ldrb	r3, [r0, #16]
{
 8008a92:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008a94:	bbbb      	cbnz	r3, 8008b06 <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	2181      	movs	r1, #129	; 0x81
 8008a9e:	f000 febf 	bl	8009820 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008aa2:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008aa8:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008aaa:	4629      	mov	r1, r5
 8008aac:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008aae:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 feb5 	bl	8009820 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ab6:	2308      	movs	r3, #8
 8008ab8:	2203      	movs	r2, #3
 8008aba:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008abc:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fead 	bl	8009820 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008ac6:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008aca:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008acc:	f000 ff24 	bl	8009918 <USBD_static_malloc>
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 8008ad6:	b348      	cbz	r0, 8008b2c <USBD_CDC_Init+0xa0>
    hcdc->TxState = 0U;
 8008ad8:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008adc:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4798      	blx	r3
    hcdc->TxState = 0U;
 8008ae4:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8008ae8:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008aec:	7c26      	ldrb	r6, [r4, #16]
 8008aee:	b196      	cbz	r6, 8008b16 <USBD_CDC_Init+0x8a>
  uint8_t ret = 0U;
 8008af0:	4646      	mov	r6, r8
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008af2:	2340      	movs	r3, #64	; 0x40
 8008af4:	4639      	mov	r1, r7
 8008af6:	4620      	mov	r0, r4
 8008af8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8008afc:	f000 fefa 	bl	80098f4 <USBD_LL_PrepareReceive>
}
 8008b00:	4630      	mov	r0, r6
 8008b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b06:	2340      	movs	r3, #64	; 0x40
 8008b08:	2202      	movs	r2, #2
 8008b0a:	2181      	movs	r1, #129	; 0x81
 8008b0c:	f000 fe88 	bl	8009820 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b10:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b12:	2340      	movs	r3, #64	; 0x40
 8008b14:	e7c8      	b.n	8008aa8 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8008b22:	f000 fee7 	bl	80098f4 <USBD_LL_PrepareReceive>
}
 8008b26:	4630      	mov	r0, r6
 8008b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8008b2c:	463e      	mov	r6, r7
}
 8008b2e:	4630      	mov	r0, r6
 8008b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008b34:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8008b36:	b119      	cbz	r1, 8008b40 <USBD_CDC_RegisterInterface+0xc>
  {
    pdev->pUserData= fops;
    ret = USBD_OK;
 8008b38:	2000      	movs	r0, #0
    pdev->pUserData= fops;
 8008b3a:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008b3e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8008b40:	2002      	movs	r0, #2
  }

  return ret;
}
 8008b42:	4770      	bx	lr

08008b44 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008b44:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008b46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8008b4a:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8008b4c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b50:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop

08008b58 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8008b58:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8008b5a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  return USBD_OK;
}
 8008b5e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8008b60:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop

08008b68 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008b68:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 8008b6c:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008b6e:	b19a      	cbz	r2, 8008b98 <USBD_CDC_ReceivePacket+0x30>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008b70:	7c04      	ldrb	r4, [r0, #16]
 8008b72:	b144      	cbz	r4, 8008b86 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008b74:	2400      	movs	r4, #0
      USBD_LL_PrepareReceive(pdev,
 8008b76:	2340      	movs	r3, #64	; 0x40
 8008b78:	2101      	movs	r1, #1
 8008b7a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8008b7e:	f000 feb9 	bl	80098f4 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008b82:	4620      	mov	r0, r4
 8008b84:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8008b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8008b90:	f000 feb0 	bl	80098f4 <USBD_LL_PrepareReceive>
}
 8008b94:	4620      	mov	r0, r4
 8008b96:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8008b98:	2402      	movs	r4, #2
}
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	bd10      	pop	{r4, pc}
 8008b9e:	bf00      	nop

08008ba0 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008ba0:	b188      	cbz	r0, 8008bc6 <USBD_Init+0x26>
{
 8008ba2:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008ba4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008ba8:	b113      	cbz	r3, 8008bb0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008bb0:	b109      	cbz	r1, 8008bb6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8008bb2:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008bb6:	2301      	movs	r3, #1
  pdev->id = id;
 8008bb8:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008bba:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008bbe:	f000 fddd 	bl	800977c <USBD_LL_Init>

  return USBD_OK;
 8008bc2:	2000      	movs	r0, #0
}
 8008bc4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008bc6:	2002      	movs	r0, #2
}
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop

08008bcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bcc:	4603      	mov	r3, r0
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8008bce:	b119      	cbz	r1, 8008bd8 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 8008bd0:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 8008bd2:	f8c3 128c 	str.w	r1, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008bd6:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008bd8:	2002      	movs	r0, #2
  }

  return status;
}
 8008bda:	4770      	bx	lr

08008bdc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008bdc:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008bde:	f000 fe11 	bl	8009804 <USBD_LL_Start>

  return USBD_OK;
}
 8008be2:	2000      	movs	r0, #0
 8008be4:	bd08      	pop	{r3, pc}
 8008be6:	bf00      	nop

08008be8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008be8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8008bea:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008bee:	b11b      	cbz	r3, 8008bf8 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4798      	blx	r3
 8008bf4:	b900      	cbnz	r0, 8008bf8 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8008bf6:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008bf8:	2002      	movs	r0, #2
}
 8008bfa:	bd08      	pop	{r3, pc}

08008bfc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bfc:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008bfe:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	4798      	blx	r3
  return USBD_OK;
}
 8008c06:	2000      	movs	r0, #0
 8008c08:	bd08      	pop	{r3, pc}
 8008c0a:	bf00      	nop

08008c0c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c10:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8008c14:	4628      	mov	r0, r5
 8008c16:	f000 fb63 	bl	80092e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c1a:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8008c1c:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286

  switch (pdev->request.bmRequest & 0x1FU)
 8008c20:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 8008c24:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
 8008c28:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 8008c2c:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 8008c2e:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 8008c32:	d009      	beq.n	8008c48 <USBD_LL_SetupStage+0x3c>
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d013      	beq.n	8008c60 <USBD_LL_SetupStage+0x54>
 8008c38:	b163      	cbz	r3, 8008c54 <USBD_LL_SetupStage+0x48>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008c40:	f000 fe0c 	bl	800985c <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 8008c44:	2000      	movs	r0, #0
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8008c48:	4629      	mov	r1, r5
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f000 fa78 	bl	8009140 <USBD_StdItfReq>
}
 8008c50:	2000      	movs	r0, #0
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 8008c54:	4629      	mov	r1, r5
 8008c56:	4620      	mov	r0, r4
 8008c58:	f000 f8f8 	bl	8008e4c <USBD_StdDevReq>
}
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 8008c60:	4629      	mov	r1, r5
 8008c62:	4620      	mov	r0, r4
 8008c64:	f000 faa0 	bl	80091a8 <USBD_StdEPReq>
}
 8008c68:	2000      	movs	r0, #0
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}

08008c6c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008c70:	b969      	cbnz	r1, 8008c8e <USBD_LL_DataOutStage+0x22>
 8008c72:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c74:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8008c78:	2a03      	cmp	r2, #3
 8008c7a:	d015      	beq.n	8008ca8 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008c7c:	2a05      	cmp	r2, #5
 8008c7e:	460c      	mov	r4, r1
 8008c80:	d10e      	bne.n	8008ca0 <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008c82:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008c86:	f000 fde9 	bl	800985c <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008c8a:	4620      	mov	r0, r4
}
 8008c8c:	bd38      	pop	{r3, r4, r5, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 8008c8e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	b133      	cbz	r3, 8008ca4 <USBD_LL_DataOutStage+0x38>
 8008c96:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008c9a:	2a03      	cmp	r2, #3
 8008c9c:	d102      	bne.n	8008ca4 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 8008c9e:	4798      	blx	r3
  return USBD_OK;
 8008ca0:	2000      	movs	r0, #0
}
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008ca4:	2002      	movs	r0, #2
}
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
      if(pep->rem_length > pep->maxpacket)
 8008ca8:	e9d0 1253 	ldrd	r1, r2, [r0, #332]	; 0x14c
 8008cac:	4291      	cmp	r1, r2
 8008cae:	d90c      	bls.n	8008cca <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -=  pep->maxpacket;
 8008cb0:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx (pdev,
 8008cb2:	428a      	cmp	r2, r1
 8008cb4:	bf88      	it	hi
 8008cb6:	b28a      	uxthhi	r2, r1
        pep->rem_length -=  pep->maxpacket;
 8008cb8:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8008cbc:	bf98      	it	ls
 8008cbe:	b292      	uxthls	r2, r2
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	f000 fb7d 	bl	80093c0 <USBD_CtlContinueRx>
  return USBD_OK;
 8008cc6:	2000      	movs	r0, #0
}
 8008cc8:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008cca:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	b11b      	cbz	r3, 8008cda <USBD_LL_DataOutStage+0x6e>
 8008cd2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008cd6:	2a03      	cmp	r2, #3
 8008cd8:	d004      	beq.n	8008ce4 <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 8008cda:	4628      	mov	r0, r5
 8008cdc:	f000 fb7a 	bl	80093d4 <USBD_CtlSendStatus>
  return USBD_OK;
 8008ce0:	2000      	movs	r0, #0
}
 8008ce2:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 8008ce4:	4798      	blx	r3
 8008ce6:	e7f8      	b.n	8008cda <USBD_LL_DataOutStage+0x6e>

08008ce8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008ce8:	b570      	push	{r4, r5, r6, lr}
 8008cea:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008cec:	b961      	cbnz	r1, 8008d08 <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008cee:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d015      	beq.n	8008d22 <USBD_LL_DataInStage+0x3a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008cf6:	f033 0304 	bics.w	r3, r3, #4
 8008cfa:	d02e      	beq.n	8008d5a <USBD_LL_DataInStage+0x72>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008cfc:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d031      	beq.n	8008d68 <USBD_LL_DataInStage+0x80>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008d04:	2000      	movs	r0, #0
}
 8008d06:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 8008d08:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	b133      	cbz	r3, 8008d1e <USBD_LL_DataInStage+0x36>
 8008d10:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008d14:	2a03      	cmp	r2, #3
 8008d16:	d102      	bne.n	8008d1e <USBD_LL_DataInStage+0x36>
    pdev->pClass->DataIn(pdev, epnum);
 8008d18:	4798      	blx	r3
  return USBD_OK;
 8008d1a:	2000      	movs	r0, #0
}
 8008d1c:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8008d1e:	2002      	movs	r0, #2
}
 8008d20:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 8008d22:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8008d26:	429e      	cmp	r6, r3
 8008d28:	d833      	bhi.n	8008d92 <USBD_LL_DataInStage+0xaa>
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008d2a:	69c2      	ldr	r2, [r0, #28]
 8008d2c:	fbb2 f5f3 	udiv	r5, r2, r3
 8008d30:	fb03 2515 	mls	r5, r3, r5, r2
 8008d34:	b9ed      	cbnz	r5, 8008d72 <USBD_LL_DataInStage+0x8a>
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d81b      	bhi.n	8008d72 <USBD_LL_DataInStage+0x8a>
           (pep->total_length >= pep->maxpacket) &&
 8008d3a:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d217      	bcs.n	8008d72 <USBD_LL_DataInStage+0x8a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d42:	462a      	mov	r2, r5
 8008d44:	f000 fb24 	bl	8009390 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008d48:	462b      	mov	r3, r5
 8008d4a:	462a      	mov	r2, r5
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8008d50:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008d54:	f000 fdce 	bl	80098f4 <USBD_LL_PrepareReceive>
 8008d58:	e7d0      	b.n	8008cfc <USBD_LL_DataInStage+0x14>
        USBD_LL_StallEP(pdev, 0x80U);
 8008d5a:	2180      	movs	r1, #128	; 0x80
 8008d5c:	f000 fd7e 	bl	800985c <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 8008d60:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d1cd      	bne.n	8008d04 <USBD_LL_DataInStage+0x1c>
      pdev->dev_test_mode = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
  return USBD_OK;
 8008d6e:	4618      	mov	r0, r3
}
 8008d70:	bd70      	pop	{r4, r5, r6, pc}
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008d72:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	b11b      	cbz	r3, 8008d82 <USBD_LL_DataInStage+0x9a>
 8008d7a:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8008d7e:	2a03      	cmp	r2, #3
 8008d80:	d015      	beq.n	8008dae <USBD_LL_DataInStage+0xc6>
          USBD_LL_StallEP(pdev, 0x80U);
 8008d82:	2180      	movs	r1, #128	; 0x80
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 fd69 	bl	800985c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f000 fb2e 	bl	80093ec <USBD_CtlReceiveStatus>
 8008d90:	e7b4      	b.n	8008cfc <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8008d92:	460d      	mov	r5, r1
 8008d94:	1af3      	subs	r3, r6, r3
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008d96:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8008d98:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	f000 faf8 	bl	8009390 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008da0:	462b      	mov	r3, r5
 8008da2:	462a      	mov	r2, r5
 8008da4:	4629      	mov	r1, r5
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 fda4 	bl	80098f4 <USBD_LL_PrepareReceive>
 8008dac:	e7a6      	b.n	8008cfc <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 8008dae:	4620      	mov	r0, r4
 8008db0:	4798      	blx	r3
 8008db2:	e7e6      	b.n	8008d82 <USBD_LL_DataInStage+0x9a>

08008db4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008db4:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008db6:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008db8:	2640      	movs	r6, #64	; 0x40
{
 8008dba:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008dbc:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4633      	mov	r3, r6
 8008dc2:	f000 fd2d 	bl	8009820 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dc6:	4633      	mov	r3, r6
 8008dc8:	2180      	movs	r1, #128	; 0x80
 8008dca:	2200      	movs	r2, #0
 8008dcc:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008dce:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dd2:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dd6:	f000 fd23 	bl	8009820 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8008dda:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8008ddc:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008de0:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008de2:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008de4:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008de8:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008dec:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8008dee:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8008df2:	b123      	cbz	r3, 8008dfe <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008df4:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008df8:	4620      	mov	r0, r4
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008dfe:	2000      	movs	r0, #0
 8008e00:	bd70      	pop	{r4, r5, r6, pc}
 8008e02:	bf00      	nop

08008e04 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008e04:	4603      	mov	r3, r0
  pdev->dev_speed = speed;
  return USBD_OK;
}
 8008e06:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8008e08:	7419      	strb	r1, [r3, #16]
}
 8008e0a:	4770      	bx	lr

08008e0c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008e0c:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008e0e:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 8008e10:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
}
 8008e14:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008e16:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
  pdev->dev_old_state =  pdev->dev_state;
 8008e1a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
}
 8008e1e:	4770      	bx	lr

08008e20 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008e20:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
 8008e22:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
  return USBD_OK;
}
 8008e26:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 8008e28:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop

08008e30 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e30:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008e34:	2a03      	cmp	r2, #3
 8008e36:	d001      	beq.n	8008e3c <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8008e38:	2000      	movs	r0, #0
 8008e3a:	4770      	bx	lr
{
 8008e3c:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 8008e3e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	b103      	cbz	r3, 8008e48 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8008e46:	4798      	blx	r3
}
 8008e48:	2000      	movs	r0, #0
 8008e4a:	bd08      	pop	{r3, pc}

08008e4c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008e4c:	b530      	push	{r4, r5, lr}
 8008e4e:	780b      	ldrb	r3, [r1, #0]
 8008e50:	460d      	mov	r5, r1
 8008e52:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e56:	2b20      	cmp	r3, #32
{
 8008e58:	4604      	mov	r4, r0
 8008e5a:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e5c:	d00d      	beq.n	8008e7a <USBD_StdDevReq+0x2e>
 8008e5e:	2b40      	cmp	r3, #64	; 0x40
 8008e60:	d00b      	beq.n	8008e7a <USBD_StdDevReq+0x2e>
 8008e62:	b19b      	cbz	r3, 8008e8c <USBD_StdDevReq+0x40>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8008e64:	2180      	movs	r1, #128	; 0x80
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 fcf8 	bl	800985c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f000 fcf4 	bl	800985c <USBD_LL_StallEP>
}
 8008e74:	2000      	movs	r0, #0
 8008e76:	b003      	add	sp, #12
 8008e78:	bd30      	pop	{r4, r5, pc}
    pdev->pClass->Setup(pdev, req);
 8008e7a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008e7e:	4629      	mov	r1, r5
 8008e80:	4620      	mov	r0, r4
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	4798      	blx	r3
}
 8008e86:	2000      	movs	r0, #0
 8008e88:	b003      	add	sp, #12
 8008e8a:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 8008e8c:	784b      	ldrb	r3, [r1, #1]
 8008e8e:	2b09      	cmp	r3, #9
 8008e90:	d8e8      	bhi.n	8008e64 <USBD_StdDevReq+0x18>
 8008e92:	a201      	add	r2, pc, #4	; (adr r2, 8008e98 <USBD_StdDevReq+0x4c>)
 8008e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e98:	08008ef3 	.word	0x08008ef3
 8008e9c:	08008f1f 	.word	0x08008f1f
 8008ea0:	08008e65 	.word	0x08008e65
 8008ea4:	08008f3d 	.word	0x08008f3d
 8008ea8:	08008e65 	.word	0x08008e65
 8008eac:	08008f45 	.word	0x08008f45
 8008eb0:	08008f7d 	.word	0x08008f7d
 8008eb4:	08008e65 	.word	0x08008e65
 8008eb8:	08008fad 	.word	0x08008fad
 8008ebc:	08008ec1 	.word	0x08008ec1
  cfgidx = (uint8_t)(req->wValue);
 8008ec0:	7889      	ldrb	r1, [r1, #2]
 8008ec2:	4d9e      	ldr	r5, [pc, #632]	; (800913c <USBD_StdDevReq+0x2f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ec4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8008ec6:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ec8:	d8cc      	bhi.n	8008e64 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8008eca:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	f000 8111 	beq.w	80090f6 <USBD_StdDevReq+0x2aa>
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	f000 80ff 	beq.w	80090d8 <USBD_StdDevReq+0x28c>
  USBD_LL_StallEP(pdev , 0x80U);
 8008eda:	2180      	movs	r1, #128	; 0x80
 8008edc:	f000 fcbe 	bl	800985c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f000 fcba 	bl	800985c <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008ee8:	4620      	mov	r0, r4
 8008eea:	7829      	ldrb	r1, [r5, #0]
 8008eec:	f7ff fe86 	bl	8008bfc <USBD_ClrClassConfig>
      break;
 8008ef0:	e7c0      	b.n	8008e74 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8008ef2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d8b3      	bhi.n	8008e64 <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 8008efc:	88cb      	ldrh	r3, [r1, #6]
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d1b0      	bne.n	8008e64 <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f02:	2201      	movs	r2, #1
    if (pdev->dev_remote_wakeup)
 8008f04:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f08:	60c2      	str	r2, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8008f0a:	b10b      	cbz	r3, 8008f10 <USBD_StdDevReq+0xc4>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008f10:	2202      	movs	r2, #2
 8008f12:	4620      	mov	r0, r4
 8008f14:	f104 010c 	add.w	r1, r4, #12
 8008f18:	f000 fa2c 	bl	8009374 <USBD_CtlSendData>
    break;
 8008f1c:	e7aa      	b.n	8008e74 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8008f1e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008f22:	3b01      	subs	r3, #1
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d89d      	bhi.n	8008e64 <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f28:	884b      	ldrh	r3, [r1, #2]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d1a2      	bne.n	8008e74 <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 8008f2e:	2300      	movs	r3, #0
      USBD_CtlSendStatus(pdev);
 8008f30:	4620      	mov	r0, r4
      pdev->dev_remote_wakeup = 0U;
 8008f32:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008f36:	f000 fa4d 	bl	80093d4 <USBD_CtlSendStatus>
 8008f3a:	e79b      	b.n	8008e74 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f3c:	884b      	ldrh	r3, [r1, #2]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d198      	bne.n	8008e74 <USBD_StdDevReq+0x28>
 8008f42:	e7f5      	b.n	8008f30 <USBD_StdDevReq+0xe4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f44:	888b      	ldrh	r3, [r1, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d18c      	bne.n	8008e64 <USBD_StdDevReq+0x18>
 8008f4a:	88cb      	ldrh	r3, [r1, #6]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d189      	bne.n	8008e64 <USBD_StdDevReq+0x18>
 8008f50:	884d      	ldrh	r5, [r1, #2]
 8008f52:	2d7f      	cmp	r5, #127	; 0x7f
 8008f54:	d886      	bhi.n	8008e64 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f56:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d082      	beq.n	8008e64 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f5e:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8008f60:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f64:	f000 fcaa 	bl	80098bc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 fa33 	bl	80093d4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008f6e:	2d00      	cmp	r5, #0
 8008f70:	f000 80df 	beq.w	8009132 <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f74:	2302      	movs	r3, #2
 8008f76:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8008f7a:	e77b      	b.n	8008e74 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 8008f7c:	884a      	ldrh	r2, [r1, #2]
 8008f7e:	0a13      	lsrs	r3, r2, #8
 8008f80:	3b01      	subs	r3, #1
 8008f82:	2b06      	cmp	r3, #6
 8008f84:	f63f af6e 	bhi.w	8008e64 <USBD_StdDevReq+0x18>
 8008f88:	a101      	add	r1, pc, #4	; (adr r1, 8008f90 <USBD_StdDevReq+0x144>)
 8008f8a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f8e:	bf00      	nop
 8008f90:	0800903f 	.word	0x0800903f
 8008f94:	08009027 	.word	0x08009027
 8008f98:	08009015 	.word	0x08009015
 8008f9c:	08008e65 	.word	0x08008e65
 8008fa0:	08008e65 	.word	0x08008e65
 8008fa4:	08008fff 	.word	0x08008fff
 8008fa8:	08008fd1 	.word	0x08008fd1
  if (req->wLength != 1U)
 8008fac:	88ca      	ldrh	r2, [r1, #6]
 8008fae:	2a01      	cmp	r2, #1
 8008fb0:	f47f af58 	bne.w	8008e64 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8008fb4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d878      	bhi.n	80090ae <USBD_StdDevReq+0x262>
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f43f af51 	beq.w	8008e64 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 8008fc2:	4601      	mov	r1, r0
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008fca:	f000 f9d3 	bl	8009374 <USBD_CtlSendData>
      break;
 8008fce:	e751      	b.n	8008e74 <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008fd0:	7c03      	ldrb	r3, [r0, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f47f af46 	bne.w	8008e64 <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008fd8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008fdc:	f10d 0006 	add.w	r0, sp, #6
 8008fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fe4:	2307      	movs	r3, #7
 8008fe6:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 8008fe8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008fec:	2a00      	cmp	r2, #0
 8008fee:	d06e      	beq.n	80090ce <USBD_StdDevReq+0x282>
 8008ff0:	88eb      	ldrh	r3, [r5, #6]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d162      	bne.n	80090bc <USBD_StdDevReq+0x270>
        USBD_CtlSendStatus(pdev);
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f000 f9ec 	bl	80093d4 <USBD_CtlSendStatus>
 8008ffc:	e73a      	b.n	8008e74 <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008ffe:	7c03      	ldrb	r3, [r0, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	f47f af2f 	bne.w	8008e64 <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009006:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800900a:	f10d 0006 	add.w	r0, sp, #6
 800900e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009010:	4798      	blx	r3
      break;
 8009012:	e7e9      	b.n	8008fe8 <USBD_StdDevReq+0x19c>
    switch ((uint8_t)(req->wValue))
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	2a05      	cmp	r2, #5
 8009018:	f63f af24 	bhi.w	8008e64 <USBD_StdDevReq+0x18>
 800901c:	e8df f002 	tbb	[pc, r2]
 8009020:	272f373f 	.word	0x272f373f
 8009024:	171f      	.short	0x171f
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009026:	7c03      	ldrb	r3, [r0, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d172      	bne.n	8009112 <USBD_StdDevReq+0x2c6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800902c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009030:	f10d 0006 	add.w	r0, sp, #6
 8009034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009036:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009038:	2302      	movs	r3, #2
 800903a:	7043      	strb	r3, [r0, #1]
 800903c:	e7d4      	b.n	8008fe8 <USBD_StdDevReq+0x19c>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800903e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009042:	f10d 0106 	add.w	r1, sp, #6
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	7c00      	ldrb	r0, [r0, #16]
 800904a:	4798      	blx	r3
    break;
 800904c:	e7cc      	b.n	8008fe8 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800904e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009052:	f10d 0106 	add.w	r1, sp, #6
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	7c00      	ldrb	r0, [r0, #16]
 800905a:	4798      	blx	r3
      break;
 800905c:	e7c4      	b.n	8008fe8 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800905e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009062:	f10d 0106 	add.w	r1, sp, #6
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	7c00      	ldrb	r0, [r0, #16]
 800906a:	4798      	blx	r3
      break;
 800906c:	e7bc      	b.n	8008fe8 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800906e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009072:	f10d 0106 	add.w	r1, sp, #6
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	7c00      	ldrb	r0, [r0, #16]
 800907a:	4798      	blx	r3
      break;
 800907c:	e7b4      	b.n	8008fe8 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800907e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009082:	f10d 0106 	add.w	r1, sp, #6
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	7c00      	ldrb	r0, [r0, #16]
 800908a:	4798      	blx	r3
      break;
 800908c:	e7ac      	b.n	8008fe8 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800908e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009092:	f10d 0106 	add.w	r1, sp, #6
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	7c00      	ldrb	r0, [r0, #16]
 800909a:	4798      	blx	r3
      break;
 800909c:	e7a4      	b.n	8008fe8 <USBD_StdDevReq+0x19c>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800909e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80090a2:	f10d 0106 	add.w	r1, sp, #6
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	7c00      	ldrb	r0, [r0, #16]
 80090aa:	4798      	blx	r3
      break;
 80090ac:	e79c      	b.n	8008fe8 <USBD_StdDevReq+0x19c>
    switch (pdev->dev_state)
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	f47f aed8 	bne.w	8008e64 <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80090b4:	1d01      	adds	r1, r0, #4
 80090b6:	f000 f95d 	bl	8009374 <USBD_CtlSendData>
      break;
 80090ba:	e6db      	b.n	8008e74 <USBD_StdDevReq+0x28>
    len = MIN(len, req->wLength);
 80090bc:	429a      	cmp	r2, r3
 80090be:	bf28      	it	cs
 80090c0:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 80090c2:	4601      	mov	r1, r0
 80090c4:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 80090c6:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80090ca:	f000 f953 	bl	8009374 <USBD_CtlSendData>
  if(req->wLength == 0U)
 80090ce:	88eb      	ldrh	r3, [r5, #6]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f47f aecf 	bne.w	8008e74 <USBD_StdDevReq+0x28>
 80090d6:	e78e      	b.n	8008ff6 <USBD_StdDevReq+0x1aa>
      if (cfgidx == 0U)
 80090d8:	b321      	cbz	r1, 8009124 <USBD_StdDevReq+0x2d8>
      else if (cfgidx != pdev->dev_config)
 80090da:	6841      	ldr	r1, [r0, #4]
 80090dc:	2901      	cmp	r1, #1
 80090de:	d08a      	beq.n	8008ff6 <USBD_StdDevReq+0x1aa>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090e0:	b2c9      	uxtb	r1, r1
 80090e2:	f7ff fd8b 	bl	8008bfc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80090e6:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090e8:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 80090ea:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090ec:	f7ff fd7c 	bl	8008be8 <USBD_SetClassConfig>
 80090f0:	2802      	cmp	r0, #2
 80090f2:	d180      	bne.n	8008ff6 <USBD_StdDevReq+0x1aa>
 80090f4:	e6b6      	b.n	8008e64 <USBD_StdDevReq+0x18>
      if (cfgidx)
 80090f6:	2900      	cmp	r1, #0
 80090f8:	f43f af7d 	beq.w	8008ff6 <USBD_StdDevReq+0x1aa>
        pdev->dev_config = cfgidx;
 80090fc:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80090fe:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8009100:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009102:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009106:	f7ff fd6f 	bl	8008be8 <USBD_SetClassConfig>
 800910a:	2802      	cmp	r0, #2
 800910c:	f47f af73 	bne.w	8008ff6 <USBD_StdDevReq+0x1aa>
 8009110:	e6a8      	b.n	8008e64 <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009112:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009116:	f10d 0006 	add.w	r0, sp, #6
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800911e:	2302      	movs	r3, #2
 8009120:	7043      	strb	r3, [r0, #1]
 8009122:	e761      	b.n	8008fe8 <USBD_StdDevReq+0x19c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009124:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8009126:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009128:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 800912c:	f7ff fd66 	bl	8008bfc <USBD_ClrClassConfig>
 8009130:	e761      	b.n	8008ff6 <USBD_StdDevReq+0x1aa>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009132:	2301      	movs	r3, #1
 8009134:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8009138:	e69c      	b.n	8008e74 <USBD_StdDevReq+0x28>
 800913a:	bf00      	nop
 800913c:	20000830 	.word	0x20000830

08009140 <USBD_StdItfReq>:
{
 8009140:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009142:	780b      	ldrb	r3, [r1, #0]
{
 8009144:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009146:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800914a:	2a40      	cmp	r2, #64	; 0x40
{
 800914c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800914e:	d00a      	beq.n	8009166 <USBD_StdItfReq+0x26>
 8009150:	065b      	lsls	r3, r3, #25
 8009152:	d508      	bpl.n	8009166 <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 8009154:	2180      	movs	r1, #128	; 0x80
 8009156:	f000 fb81 	bl	800985c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800915a:	2100      	movs	r1, #0
 800915c:	4620      	mov	r0, r4
 800915e:	f000 fb7d 	bl	800985c <USBD_LL_StallEP>
}
 8009162:	2000      	movs	r0, #0
 8009164:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8009166:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800916a:	3b01      	subs	r3, #1
 800916c:	2b02      	cmp	r3, #2
 800916e:	d811      	bhi.n	8009194 <USBD_StdItfReq+0x54>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009170:	792b      	ldrb	r3, [r5, #4]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d80e      	bhi.n	8009194 <USBD_StdItfReq+0x54>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009176:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800917a:	4629      	mov	r1, r5
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	4620      	mov	r0, r4
 8009180:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009182:	88eb      	ldrh	r3, [r5, #6]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1ec      	bne.n	8009162 <USBD_StdItfReq+0x22>
 8009188:	2800      	cmp	r0, #0
 800918a:	d1ea      	bne.n	8009162 <USBD_StdItfReq+0x22>
          USBD_CtlSendStatus(pdev);
 800918c:	4620      	mov	r0, r4
 800918e:	f000 f921 	bl	80093d4 <USBD_CtlSendStatus>
 8009192:	e7e6      	b.n	8009162 <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev , 0x80U);
 8009194:	2180      	movs	r1, #128	; 0x80
 8009196:	4620      	mov	r0, r4
 8009198:	f000 fb60 	bl	800985c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800919c:	2100      	movs	r1, #0
 800919e:	4620      	mov	r0, r4
 80091a0:	f000 fb5c 	bl	800985c <USBD_LL_StallEP>
}
 80091a4:	2000      	movs	r0, #0
 80091a6:	bd38      	pop	{r3, r4, r5, pc}

080091a8 <USBD_StdEPReq>:
{
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	780b      	ldrb	r3, [r1, #0]
 80091ac:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091b2:	2b20      	cmp	r3, #32
 80091b4:	d00c      	beq.n	80091d0 <USBD_StdEPReq+0x28>
 80091b6:	2b40      	cmp	r3, #64	; 0x40
 80091b8:	d00a      	beq.n	80091d0 <USBD_StdEPReq+0x28>
 80091ba:	b183      	cbz	r3, 80091de <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 80091bc:	2180      	movs	r1, #128	; 0x80
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 fb4c 	bl	800985c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80091c4:	2100      	movs	r1, #0
 80091c6:	4620      	mov	r0, r4
 80091c8:	f000 fb48 	bl	800985c <USBD_LL_StallEP>
}
 80091cc:	2000      	movs	r0, #0
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->Setup (pdev, req);
 80091d0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80091d4:	4620      	mov	r0, r4
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	4798      	blx	r3
}
 80091da:	2000      	movs	r0, #0
 80091dc:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 80091de:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80091e0:	888a      	ldrh	r2, [r1, #4]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	fa5f fc82 	uxtb.w	ip, r2
    switch (req->bRequest)
 80091e8:	d03e      	beq.n	8009268 <USBD_StdEPReq+0xc0>
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	d02a      	beq.n	8009244 <USBD_StdEPReq+0x9c>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1e4      	bne.n	80091bc <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 80091f2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d051      	beq.n	800929e <USBD_StdEPReq+0xf6>
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d1de      	bne.n	80091bc <USBD_StdEPReq+0x14>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091fe:	f00c 030f 	and.w	r3, ip, #15
 8009202:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 8009206:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009208:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800920c:	d456      	bmi.n	80092bc <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800920e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0d2      	beq.n	80091bc <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009216:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800921a:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800921e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8009222:	f505 75a0 	add.w	r5, r5, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009226:	b133      	cbz	r3, 8009236 <USBD_StdEPReq+0x8e>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009228:	4661      	mov	r1, ip
 800922a:	4620      	mov	r0, r4
 800922c:	f000 fb32 	bl	8009894 <USBD_LL_IsStallEP>
 8009230:	2800      	cmp	r0, #0
 8009232:	d04f      	beq.n	80092d4 <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 8009234:	2301      	movs	r3, #1
 8009236:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009238:	2202      	movs	r2, #2
 800923a:	4629      	mov	r1, r5
 800923c:	4620      	mov	r0, r4
 800923e:	f000 f899 	bl	8009374 <USBD_CtlSendData>
          break;
 8009242:	e7c3      	b.n	80091cc <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 8009244:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009248:	2b02      	cmp	r3, #2
 800924a:	d01d      	beq.n	8009288 <USBD_StdEPReq+0xe0>
 800924c:	2b03      	cmp	r3, #3
 800924e:	d1b5      	bne.n	80091bc <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009250:	884b      	ldrh	r3, [r1, #2]
 8009252:	b92b      	cbnz	r3, 8009260 <USBD_StdEPReq+0xb8>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009254:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8009258:	d002      	beq.n	8009260 <USBD_StdEPReq+0xb8>
 800925a:	88cb      	ldrh	r3, [r1, #6]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d03b      	beq.n	80092d8 <USBD_StdEPReq+0x130>
        USBD_CtlSendStatus(pdev);
 8009260:	4620      	mov	r0, r4
 8009262:	f000 f8b7 	bl	80093d4 <USBD_CtlSendStatus>
        break;
 8009266:	e7b1      	b.n	80091cc <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 8009268:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800926c:	2b02      	cmp	r3, #2
 800926e:	d00b      	beq.n	8009288 <USBD_StdEPReq+0xe0>
 8009270:	2b03      	cmp	r3, #3
 8009272:	d1a3      	bne.n	80091bc <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009274:	884b      	ldrh	r3, [r1, #2]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1a8      	bne.n	80091cc <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 800927a:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800927e:	d0ef      	beq.n	8009260 <USBD_StdEPReq+0xb8>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8009280:	4661      	mov	r1, ip
 8009282:	f000 faf9 	bl	8009878 <USBD_LL_ClearStallEP>
 8009286:	e7eb      	b.n	8009260 <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009288:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800928c:	d096      	beq.n	80091bc <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 800928e:	4661      	mov	r1, ip
 8009290:	f000 fae4 	bl	800985c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009294:	2180      	movs	r1, #128	; 0x80
 8009296:	4620      	mov	r0, r4
 8009298:	f000 fae0 	bl	800985c <USBD_LL_StallEP>
 800929c:	e796      	b.n	80091cc <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800929e:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 80092a2:	d18b      	bne.n	80091bc <USBD_StdEPReq+0x14>
          pep->status = 0x0000U;
 80092a4:	2300      	movs	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80092a6:	0611      	lsls	r1, r2, #24
 80092a8:	bf4c      	ite	mi
 80092aa:	f100 0114 	addmi.w	r1, r0, #20
 80092ae:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80092b2:	2202      	movs	r2, #2
          pep->status = 0x0000U;
 80092b4:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80092b6:	f000 f85d 	bl	8009374 <USBD_CtlSendData>
          break;
 80092ba:	e787      	b.n	80091cc <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f43f af7c 	beq.w	80091bc <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80092c4:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 80092c8:	1c5d      	adds	r5, r3, #1
 80092ca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80092ce:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80092d2:	e7a8      	b.n	8009226 <USBD_StdEPReq+0x7e>
            pep->status = 0x0000U;
 80092d4:	6028      	str	r0, [r5, #0]
 80092d6:	e7af      	b.n	8009238 <USBD_StdEPReq+0x90>
            USBD_LL_StallEP(pdev, ep_addr);
 80092d8:	4661      	mov	r1, ip
 80092da:	f000 fabf 	bl	800985c <USBD_LL_StallEP>
 80092de:	e7bf      	b.n	8009260 <USBD_StdEPReq+0xb8>

080092e0 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80092e0:	780b      	ldrb	r3, [r1, #0]
 80092e2:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80092e4:	784b      	ldrb	r3, [r1, #1]
 80092e6:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80092e8:	78ca      	ldrb	r2, [r1, #3]
 80092ea:	788b      	ldrb	r3, [r1, #2]
 80092ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80092f0:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80092f2:	794a      	ldrb	r2, [r1, #5]
 80092f4:	790b      	ldrb	r3, [r1, #4]
 80092f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80092fa:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80092fc:	79ca      	ldrb	r2, [r1, #7]
 80092fe:	798b      	ldrb	r3, [r1, #6]
 8009300:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009304:	80c3      	strh	r3, [r0, #6]
}
 8009306:	4770      	bx	lr

08009308 <USBD_CtlError>:
{
 8009308:	b510      	push	{r4, lr}
 800930a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800930c:	2180      	movs	r1, #128	; 0x80
 800930e:	f000 faa5 	bl	800985c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009312:	4620      	mov	r0, r4
}
 8009314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8009318:	2100      	movs	r1, #0
 800931a:	f000 ba9f 	b.w	800985c <USBD_LL_StallEP>
 800931e:	bf00      	nop

08009320 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8009320:	b318      	cbz	r0, 800936a <USBD_GetString+0x4a>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8009322:	7803      	ldrb	r3, [r0, #0]
{
 8009324:	b430      	push	{r4, r5}
    while (*buf != '\0')
 8009326:	b30b      	cbz	r3, 800936c <USBD_GetString+0x4c>
 8009328:	4604      	mov	r4, r0
 800932a:	f1c0 0c01 	rsb	ip, r0, #1
    {
        len++;
 800932e:	eb04 030c 	add.w	r3, r4, ip
    while (*buf != '\0')
 8009332:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2d00      	cmp	r5, #0
 800933a:	d1f8      	bne.n	800932e <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800933c:	3301      	adds	r3, #1
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	b2dc      	uxtb	r4, r3
 8009342:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009344:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009346:	700c      	strb	r4, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009348:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 800934a:	7804      	ldrb	r4, [r0, #0]
 800934c:	b15c      	cbz	r4, 8009366 <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800934e:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8009350:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	b2d2      	uxtb	r2, r2
 8009356:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8009358:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800935a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 800935e:	3302      	adds	r3, #2
 8009360:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8009362:	2c00      	cmp	r4, #0
 8009364:	d1f5      	bne.n	8009352 <USBD_GetString+0x32>
}
 8009366:	bc30      	pop	{r4, r5}
 8009368:	4770      	bx	lr
 800936a:	4770      	bx	lr
    while (*buf != '\0')
 800936c:	2402      	movs	r4, #2
 800936e:	4623      	mov	r3, r4
 8009370:	e7e7      	b.n	8009342 <USBD_GetString+0x22>
 8009372:	bf00      	nop

08009374 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009374:	b510      	push	{r4, lr}
 8009376:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009378:	2402      	movs	r4, #2
{
 800937a:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800937c:	e9c0 3307 	strd	r3, r3, [r0, #28]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009380:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009382:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009386:	f000 faa7 	bl	80098d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800938a:	2000      	movs	r0, #0
 800938c:	bd10      	pop	{r4, pc}
 800938e:	bf00      	nop

08009390 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009390:	468c      	mov	ip, r1
 8009392:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009394:	2100      	movs	r1, #0
{
 8009396:	4613      	mov	r3, r2
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009398:	4662      	mov	r2, ip
 800939a:	f000 fa9d 	bl	80098d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800939e:	2000      	movs	r0, #0
 80093a0:	bd08      	pop	{r3, pc}
 80093a2:	bf00      	nop

080093a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80093a4:	b510      	push	{r4, lr}
 80093a6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093a8:	2403      	movs	r4, #3
{
 80093aa:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 80093ac:	e9c0 3352 	strd	r3, r3, [r0, #328]	; 0x148

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80093b0:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093b2:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80093b6:	f000 fa9d 	bl	80098f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80093ba:	2000      	movs	r0, #0
 80093bc:	bd10      	pop	{r4, pc}
 80093be:	bf00      	nop

080093c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80093c0:	468c      	mov	ip, r1
 80093c2:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093c4:	2100      	movs	r1, #0
{
 80093c6:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093c8:	4662      	mov	r2, ip
 80093ca:	f000 fa93 	bl	80098f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80093ce:	2000      	movs	r0, #0
 80093d0:	bd08      	pop	{r3, pc}
 80093d2:	bf00      	nop

080093d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80093d4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093d6:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80093d8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093da:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80093de:	461a      	mov	r2, r3
 80093e0:	4619      	mov	r1, r3
 80093e2:	f000 fa79 	bl	80098d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80093e6:	2000      	movs	r0, #0
 80093e8:	bd08      	pop	{r3, pc}
 80093ea:	bf00      	nop

080093ec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80093ec:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093ee:	2105      	movs	r1, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80093f0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093f2:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80093f6:	461a      	mov	r2, r3
 80093f8:	4619      	mov	r1, r3
 80093fa:	f000 fa7b 	bl	80098f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80093fe:	2000      	movs	r0, #0
 8009400:	bd08      	pop	{r3, pc}
 8009402:	bf00      	nop

08009404 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009404:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009406:	2200      	movs	r2, #0
 8009408:	4917      	ldr	r1, [pc, #92]	; (8009468 <MX_USB_DEVICE_Init+0x64>)
 800940a:	4818      	ldr	r0, [pc, #96]	; (800946c <MX_USB_DEVICE_Init+0x68>)
 800940c:	f7ff fbc8 	bl	8008ba0 <USBD_Init>
 8009410:	b970      	cbnz	r0, 8009430 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009412:	4917      	ldr	r1, [pc, #92]	; (8009470 <MX_USB_DEVICE_Init+0x6c>)
 8009414:	4815      	ldr	r0, [pc, #84]	; (800946c <MX_USB_DEVICE_Init+0x68>)
 8009416:	f7ff fbd9 	bl	8008bcc <USBD_RegisterClass>
 800941a:	b988      	cbnz	r0, 8009440 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800941c:	4915      	ldr	r1, [pc, #84]	; (8009474 <MX_USB_DEVICE_Init+0x70>)
 800941e:	4813      	ldr	r0, [pc, #76]	; (800946c <MX_USB_DEVICE_Init+0x68>)
 8009420:	f7ff fb88 	bl	8008b34 <USBD_CDC_RegisterInterface>
 8009424:	b9a0      	cbnz	r0, 8009450 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009426:	4811      	ldr	r0, [pc, #68]	; (800946c <MX_USB_DEVICE_Init+0x68>)
 8009428:	f7ff fbd8 	bl	8008bdc <USBD_Start>
 800942c:	b9b8      	cbnz	r0, 800945e <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800942e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009430:	f7fa fe92 	bl	8004158 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009434:	490e      	ldr	r1, [pc, #56]	; (8009470 <MX_USB_DEVICE_Init+0x6c>)
 8009436:	480d      	ldr	r0, [pc, #52]	; (800946c <MX_USB_DEVICE_Init+0x68>)
 8009438:	f7ff fbc8 	bl	8008bcc <USBD_RegisterClass>
 800943c:	2800      	cmp	r0, #0
 800943e:	d0ed      	beq.n	800941c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8009440:	f7fa fe8a 	bl	8004158 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009444:	490b      	ldr	r1, [pc, #44]	; (8009474 <MX_USB_DEVICE_Init+0x70>)
 8009446:	4809      	ldr	r0, [pc, #36]	; (800946c <MX_USB_DEVICE_Init+0x68>)
 8009448:	f7ff fb74 	bl	8008b34 <USBD_CDC_RegisterInterface>
 800944c:	2800      	cmp	r0, #0
 800944e:	d0ea      	beq.n	8009426 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8009450:	f7fa fe82 	bl	8004158 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009454:	4805      	ldr	r0, [pc, #20]	; (800946c <MX_USB_DEVICE_Init+0x68>)
 8009456:	f7ff fbc1 	bl	8008bdc <USBD_Start>
 800945a:	2800      	cmp	r0, #0
 800945c:	d0e7      	beq.n	800942e <MX_USB_DEVICE_Init+0x2a>
}
 800945e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8009462:	f7fa be79 	b.w	8004158 <Error_Handler>
 8009466:	bf00      	nop
 8009468:	2000013c 	.word	0x2000013c
 800946c:	20000834 	.word	0x20000834
 8009470:	2000001c 	.word	0x2000001c
 8009474:	2000012c 	.word	0x2000012c

08009478 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8009478:	2000      	movs	r0, #0
 800947a:	4770      	bx	lr

0800947c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800947c:	2000      	movs	r0, #0
 800947e:	4770      	bx	lr

08009480 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009482:	4604      	mov	r4, r0
 8009484:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009486:	4f0f      	ldr	r7, [pc, #60]	; (80094c4 <CDC_Receive_FS+0x44>)
 8009488:	4621      	mov	r1, r4
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);

	memset (usbbuffer, '\0', 128);  // clear the buffer
 800948a:	4e0f      	ldr	r6, [pc, #60]	; (80094c8 <CDC_Receive_FS+0x48>)
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800948c:	4638      	mov	r0, r7
 800948e:	f7ff fb63 	bl	8008b58 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009492:	4638      	mov	r0, r7
 8009494:	f7ff fb68 	bl	8008b68 <USBD_CDC_ReceivePacket>
	memset (usbbuffer, '\0', 128);  // clear the buffer
 8009498:	2280      	movs	r2, #128	; 0x80
 800949a:	2100      	movs	r1, #0
 800949c:	4630      	mov	r0, r6
 800949e:	f000 fa79 	bl	8009994 <memset>
	uint8_t len = (uint8_t)*Len;
	memcpy(usbbuffer, Buf, len);  // copy the data to the buffer
 80094a2:	782d      	ldrb	r5, [r5, #0]
 80094a4:	4621      	mov	r1, r4
 80094a6:	462a      	mov	r2, r5
 80094a8:	4630      	mov	r0, r6
 80094aa:	f000 fa65 	bl	8009978 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 80094ae:	462a      	mov	r2, r5
 80094b0:	2100      	movs	r1, #0
 80094b2:	4620      	mov	r0, r4
 80094b4:	f000 fa6e 	bl	8009994 <memset>

	HAL_EXTI_GenerateSWI(&hexti1);
 80094b8:	4804      	ldr	r0, [pc, #16]	; (80094cc <CDC_Receive_FS+0x4c>)
 80094ba:	f7fb ff77 	bl	80053ac <HAL_EXTI_GenerateSWI>

	return (USBD_OK);
  /* USER CODE END 6 */
}
 80094be:	2000      	movs	r0, #0
 80094c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20000834 	.word	0x20000834
 80094c8:	2000079c 	.word	0x2000079c
 80094cc:	200004e4 	.word	0x200004e4

080094d0 <CDC_Init_FS>:
{
 80094d0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80094d2:	4c06      	ldr	r4, [pc, #24]	; (80094ec <CDC_Init_FS+0x1c>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	4620      	mov	r0, r4
 80094d8:	4905      	ldr	r1, [pc, #20]	; (80094f0 <CDC_Init_FS+0x20>)
 80094da:	f7ff fb33 	bl	8008b44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80094de:	4620      	mov	r0, r4
 80094e0:	4904      	ldr	r1, [pc, #16]	; (80094f4 <CDC_Init_FS+0x24>)
 80094e2:	f7ff fb39 	bl	8008b58 <USBD_CDC_SetRxBuffer>
}
 80094e6:	2000      	movs	r0, #0
 80094e8:	bd10      	pop	{r4, pc}
 80094ea:	bf00      	nop
 80094ec:	20000834 	.word	0x20000834
 80094f0:	20000eb8 	.word	0x20000eb8
 80094f4:	20000ad0 	.word	0x20000ad0

080094f8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094f8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80094fa:	4801      	ldr	r0, [pc, #4]	; (8009500 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80094fc:	800b      	strh	r3, [r1, #0]
}
 80094fe:	4770      	bx	lr
 8009500:	20000158 	.word	0x20000158

08009504 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009504:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8009506:	4801      	ldr	r0, [pc, #4]	; (800950c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8009508:	800b      	strh	r3, [r1, #0]
}
 800950a:	4770      	bx	lr
 800950c:	2000016c 	.word	0x2000016c

08009510 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009510:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009512:	4c04      	ldr	r4, [pc, #16]	; (8009524 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8009514:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009516:	4804      	ldr	r0, [pc, #16]	; (8009528 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8009518:	4621      	mov	r1, r4
 800951a:	f7ff ff01 	bl	8009320 <USBD_GetString>
  return USBD_StrDesc;
}
 800951e:	4620      	mov	r0, r4
 8009520:	bd10      	pop	{r4, pc}
 8009522:	bf00      	nop
 8009524:	200012a0 	.word	0x200012a0
 8009528:	0800c898 	.word	0x0800c898

0800952c <USBD_FS_ProductStrDescriptor>:
{
 800952c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800952e:	4c04      	ldr	r4, [pc, #16]	; (8009540 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8009530:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009532:	4804      	ldr	r0, [pc, #16]	; (8009544 <USBD_FS_ProductStrDescriptor+0x18>)
 8009534:	4621      	mov	r1, r4
 8009536:	f7ff fef3 	bl	8009320 <USBD_GetString>
}
 800953a:	4620      	mov	r0, r4
 800953c:	bd10      	pop	{r4, pc}
 800953e:	bf00      	nop
 8009540:	200012a0 	.word	0x200012a0
 8009544:	0800c8ac 	.word	0x0800c8ac

08009548 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009548:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800954a:	4c04      	ldr	r4, [pc, #16]	; (800955c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800954c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800954e:	4804      	ldr	r0, [pc, #16]	; (8009560 <USBD_FS_ConfigStrDescriptor+0x18>)
 8009550:	4621      	mov	r1, r4
 8009552:	f7ff fee5 	bl	8009320 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8009556:	4620      	mov	r0, r4
 8009558:	bd10      	pop	{r4, pc}
 800955a:	bf00      	nop
 800955c:	200012a0 	.word	0x200012a0
 8009560:	0800c8c4 	.word	0x0800c8c4

08009564 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009564:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009566:	4c04      	ldr	r4, [pc, #16]	; (8009578 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8009568:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800956a:	4804      	ldr	r0, [pc, #16]	; (800957c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800956c:	4621      	mov	r1, r4
 800956e:	f7ff fed7 	bl	8009320 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8009572:	4620      	mov	r0, r4
 8009574:	bd10      	pop	{r4, pc}
 8009576:	bf00      	nop
 8009578:	200012a0 	.word	0x200012a0
 800957c:	0800c8d0 	.word	0x0800c8d0

08009580 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8009580:	f04f 0c1a 	mov.w	ip, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009584:	4a42      	ldr	r2, [pc, #264]	; (8009690 <USBD_FS_SerialStrDescriptor+0x110>)
 8009586:	6d10      	ldr	r0, [r2, #80]	; 0x50
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8009588:	6d93      	ldr	r3, [r2, #88]	; 0x58
  *length = USB_SIZ_STRING_SERIAL;
 800958a:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800958e:	18c3      	adds	r3, r0, r3
 8009590:	d101      	bne.n	8009596 <USBD_FS_SerialStrDescriptor+0x16>
}
 8009592:	4840      	ldr	r0, [pc, #256]	; (8009694 <USBD_FS_SerialStrDescriptor+0x114>)
 8009594:	4770      	bx	lr
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8009596:	f04f 0c00 	mov.w	ip, #0
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800959a:	6d51      	ldr	r1, [r2, #84]	; 0x54
    if (((value >> 28)) < 0xA)
 800959c:	0f18      	lsrs	r0, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800959e:	4a3d      	ldr	r2, [pc, #244]	; (8009694 <USBD_FS_SerialStrDescriptor+0x114>)
    if (((value >> 28)) < 0xA)
 80095a0:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095a4:	bf2c      	ite	cs
 80095a6:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80095a8:	3030      	addcc	r0, #48	; 0x30
 80095aa:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 80095ac:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80095b0:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095b2:	bf8c      	ite	hi
 80095b4:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80095b6:	3030      	addls	r0, #48	; 0x30
 80095b8:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 80095ba:	f3c3 5003 	ubfx	r0, r3, #20, #4
 80095be:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095c0:	bf8c      	ite	hi
 80095c2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80095c4:	3030      	addls	r0, #48	; 0x30
 80095c6:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 80095c8:	f3c3 4003 	ubfx	r0, r3, #16, #4
 80095cc:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095ce:	bf8c      	ite	hi
 80095d0:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80095d2:	3030      	addls	r0, #48	; 0x30
 80095d4:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 80095d6:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80095da:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095dc:	bf8c      	ite	hi
 80095de:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80095e0:	3030      	addls	r0, #48	; 0x30
 80095e2:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 80095e4:	f3c3 2003 	ubfx	r0, r3, #8, #4
 80095e8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095ea:	bf8c      	ite	hi
 80095ec:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80095ee:	3030      	addls	r0, #48	; 0x30
 80095f0:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 80095f2:	f3c3 1003 	ubfx	r0, r3, #4, #4
 80095f6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095f8:	bf8c      	ite	hi
 80095fa:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80095fc:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 80095fe:	f882 c003 	strb.w	ip, [r2, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 8009602:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 8009604:	f04f 0c00 	mov.w	ip, #0
 8009608:	2000      	movs	r0, #0
 800960a:	f882 c005 	strb.w	ip, [r2, #5]
 800960e:	73d0      	strb	r0, [r2, #15]
 8009610:	f04f 0c00 	mov.w	ip, #0
 8009614:	2000      	movs	r0, #0
 8009616:	f882 c007 	strb.w	ip, [r2, #7]
 800961a:	7450      	strb	r0, [r2, #17]
 800961c:	f04f 0c00 	mov.w	ip, #0
 8009620:	2000      	movs	r0, #0
 8009622:	f882 c009 	strb.w	ip, [r2, #9]
 8009626:	74d0      	strb	r0, [r2, #19]
 8009628:	f04f 0c00 	mov.w	ip, #0
 800962c:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800962e:	f003 030f 	and.w	r3, r3, #15
 8009632:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8009634:	bf94      	ite	ls
 8009636:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009638:	3337      	addhi	r3, #55	; 0x37
 800963a:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800963c:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 8009640:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009644:	bf2c      	ite	cs
 8009646:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8009648:	3330      	addcc	r3, #48	; 0x30
 800964a:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800964c:	f3c1 6303 	ubfx	r3, r1, #24, #4
 8009650:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009652:	bf8c      	ite	hi
 8009654:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8009656:	3330      	addls	r3, #48	; 0x30
 8009658:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800965a:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800965e:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009660:	bf8c      	ite	hi
 8009662:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8009664:	3330      	addls	r3, #48	; 0x30
 8009666:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 8009668:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800966c:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800966e:	bf94      	ite	ls
 8009670:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009672:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 8009674:	f882 c00b 	strb.w	ip, [r2, #11]
 8009678:	7550      	strb	r0, [r2, #21]
 800967a:	f04f 0c00 	mov.w	ip, #0
 800967e:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009680:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	75d0      	strb	r0, [r2, #23]
 8009686:	f882 c00d 	strb.w	ip, [r2, #13]
}
 800968a:	4802      	ldr	r0, [pc, #8]	; (8009694 <USBD_FS_SerialStrDescriptor+0x114>)
    pbuf[2 * idx + 1] = 0;
 800968c:	7653      	strb	r3, [r2, #25]
}
 800968e:	4770      	bx	lr
 8009690:	1ff80000 	.word	0x1ff80000
 8009694:	20000170 	.word	0x20000170

08009698 <HAL_PCDEx_SetConnectionState>:
{
  /* USER CODE BEGIN 6 */
  if (state == 1)
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009698:	4a04      	ldr	r2, [pc, #16]	; (80096ac <HAL_PCDEx_SetConnectionState+0x14>)
  if (state == 1)
 800969a:	2901      	cmp	r1, #1
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800969c:	6853      	ldr	r3, [r2, #4]
 800969e:	bf0c      	ite	eq
 80096a0:	f043 0301 	orreq.w	r3, r3, #1
  }
  else
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 80096a4:	f023 0301 	bicne.w	r3, r3, #1
 80096a8:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END 6 */
}
 80096aa:	4770      	bx	lr
 80096ac:	40010000 	.word	0x40010000

080096b0 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 80096b0:	4b0e      	ldr	r3, [pc, #56]	; (80096ec <HAL_PCD_MspInit+0x3c>)
 80096b2:	6802      	ldr	r2, [r0, #0]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d000      	beq.n	80096ba <HAL_PCD_MspInit+0xa>
 80096b8:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80096ba:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80096bc:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 80096c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
{
 80096c2:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 80096c4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80096c8:	6259      	str	r1, [r3, #36]	; 0x24
 80096ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 80096cc:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 80096ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096d2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80096d4:	2014      	movs	r0, #20
 80096d6:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80096d8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80096da:	f7fb fbbf 	bl	8004e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80096de:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80096e0:	b003      	add	sp, #12
 80096e2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80096e6:	f7fb bbf7 	b.w	8004ed8 <HAL_NVIC_EnableIRQ>
 80096ea:	bf00      	nop
 80096ec:	40005c00 	.word	0x40005c00

080096f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f0:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80096f2:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80096f6:	f501 712c 	add.w	r1, r1, #688	; 0x2b0
 80096fa:	f7ff ba87 	b.w	8008c0c <USBD_LL_SetupStage>
 80096fe:	bf00      	nop

08009700 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009700:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009704:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8009708:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800970c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009710:	f7ff baac 	b.w	8008c6c <USBD_LL_DataOutStage>

08009714 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009714:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009718:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800971c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800971e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009722:	f7ff bae1 	b.w	8008ce8 <USBD_LL_DataInStage>
 8009726:	bf00      	nop

08009728 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009728:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800972c:	f7ff bb80 	b.w	8008e30 <USBD_LL_SOF>

08009730 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009730:	6883      	ldr	r3, [r0, #8]
{
 8009732:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009734:	2b02      	cmp	r3, #2
{
 8009736:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009738:	d001      	beq.n	800973e <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800973a:	f7fa fd0d 	bl	8004158 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800973e:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8009742:	2101      	movs	r1, #1
 8009744:	f7ff fb5e 	bl	8008e04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009748:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800974c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009750:	f7ff bb30 	b.w	8008db4 <USBD_LL_Reset>

08009754 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009754:	b510      	push	{r4, lr}
 8009756:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009758:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800975c:	f7ff fb56 	bl	8008e0c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009760:	69a3      	ldr	r3, [r4, #24]
 8009762:	b123      	cbz	r3, 800976e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009764:	4a02      	ldr	r2, [pc, #8]	; (8009770 <HAL_PCD_SuspendCallback+0x1c>)
 8009766:	6913      	ldr	r3, [r2, #16]
 8009768:	f043 0306 	orr.w	r3, r3, #6
 800976c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800976e:	bd10      	pop	{r4, pc}
 8009770:	e000ed00 	.word	0xe000ed00

08009774 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009774:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009778:	f7ff bb52 	b.w	8008e20 <USBD_LL_Resume>

0800977c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800977c:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800977e:	2408      	movs	r4, #8
  hpcd_USB_FS.pData = pdev;
 8009780:	4b1e      	ldr	r3, [pc, #120]	; (80097fc <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009782:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009784:	605c      	str	r4, [r3, #4]
{
 8009786:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009788:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800978a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800978c:	621a      	str	r2, [r3, #32]
  hpcd_USB_FS.Instance = USB;
 800978e:	4a1c      	ldr	r2, [pc, #112]	; (8009800 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 8009790:	f8c3 42e8 	str.w	r4, [r3, #744]	; 0x2e8
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009794:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 8009796:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800979a:	6099      	str	r1, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800979c:	6119      	str	r1, [r3, #16]
  hpcd_USB_FS.Instance = USB;
 800979e:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80097a0:	f7fc fa08 	bl	8005bb4 <HAL_PCD_Init>
 80097a4:	bb30      	cbnz	r0, 80097f4 <USBD_LL_Init+0x78>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80097a6:	2200      	movs	r2, #0
 80097a8:	2318      	movs	r3, #24
 80097aa:	4611      	mov	r1, r2
 80097ac:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 80097b0:	f7fd f900 	bl	80069b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80097b4:	2358      	movs	r3, #88	; 0x58
 80097b6:	2200      	movs	r2, #0
 80097b8:	2180      	movs	r1, #128	; 0x80
 80097ba:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 80097be:	f7fd f8f9 	bl	80069b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80097c2:	23c0      	movs	r3, #192	; 0xc0
 80097c4:	2200      	movs	r2, #0
 80097c6:	2181      	movs	r1, #129	; 0x81
 80097c8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 80097cc:	f7fd f8f2 	bl	80069b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80097d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80097d4:	2200      	movs	r2, #0
 80097d6:	2101      	movs	r1, #1
 80097d8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 80097dc:	f7fd f8ea 	bl	80069b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80097e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097e4:	2200      	movs	r2, #0
 80097e6:	2182      	movs	r1, #130	; 0x82
 80097e8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 80097ec:	f7fd f8e2 	bl	80069b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 80097f0:	2000      	movs	r0, #0
 80097f2:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80097f4:	f7fa fcb0 	bl	8004158 <Error_Handler>
 80097f8:	e7d5      	b.n	80097a6 <USBD_LL_Init+0x2a>
 80097fa:	bf00      	nop
 80097fc:	200014a0 	.word	0x200014a0
 8009800:	40005c00 	.word	0x40005c00

08009804 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009804:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8009806:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800980a:	f7fc fa35 	bl	8005c78 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800980e:	2803      	cmp	r0, #3
 8009810:	bf96      	itet	ls
 8009812:	4b02      	ldrls	r3, [pc, #8]	; (800981c <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8009814:	2002      	movhi	r0, #2
 8009816:	5c18      	ldrbls	r0, [r3, r0]
}
 8009818:	bd08      	pop	{r3, pc}
 800981a:	bf00      	nop
 800981c:	0800c8e0 	.word	0x0800c8e0

08009820 <USBD_LL_OpenEP>:
{
 8009820:	4694      	mov	ip, r2
 8009822:	b508      	push	{r3, lr}
 8009824:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009826:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800982a:	4663      	mov	r3, ip
 800982c:	f7fc ff98 	bl	8006760 <HAL_PCD_EP_Open>
  switch (hal_status)
 8009830:	2803      	cmp	r0, #3
 8009832:	bf96      	itet	ls
 8009834:	4b01      	ldrls	r3, [pc, #4]	; (800983c <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009836:	2002      	movhi	r0, #2
 8009838:	5c18      	ldrbls	r0, [r3, r0]
}
 800983a:	bd08      	pop	{r3, pc}
 800983c:	0800c8e0 	.word	0x0800c8e0

08009840 <USBD_LL_CloseEP>:
{
 8009840:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009842:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8009846:	f7fc ffc9 	bl	80067dc <HAL_PCD_EP_Close>
  switch (hal_status)
 800984a:	2803      	cmp	r0, #3
 800984c:	bf96      	itet	ls
 800984e:	4b02      	ldrls	r3, [pc, #8]	; (8009858 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009850:	2002      	movhi	r0, #2
 8009852:	5c18      	ldrbls	r0, [r3, r0]
}
 8009854:	bd08      	pop	{r3, pc}
 8009856:	bf00      	nop
 8009858:	0800c8e0 	.word	0x0800c8e0

0800985c <USBD_LL_StallEP>:
{
 800985c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800985e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8009862:	f7fd f833 	bl	80068cc <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8009866:	2803      	cmp	r0, #3
 8009868:	bf96      	itet	ls
 800986a:	4b02      	ldrls	r3, [pc, #8]	; (8009874 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800986c:	2002      	movhi	r0, #2
 800986e:	5c18      	ldrbls	r0, [r3, r0]
}
 8009870:	bd08      	pop	{r3, pc}
 8009872:	bf00      	nop
 8009874:	0800c8e0 	.word	0x0800c8e0

08009878 <USBD_LL_ClearStallEP>:
{
 8009878:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800987a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800987e:	f7fd f85d 	bl	800693c <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8009882:	2803      	cmp	r0, #3
 8009884:	bf96      	itet	ls
 8009886:	4b02      	ldrls	r3, [pc, #8]	; (8009890 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009888:	2002      	movhi	r0, #2
 800988a:	5c18      	ldrbls	r0, [r3, r0]
}
 800988c:	bd08      	pop	{r3, pc}
 800988e:	bf00      	nop
 8009890:	0800c8e0 	.word	0x0800c8e0

08009894 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8009894:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009896:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 800989a:	d406      	bmi.n	80098aa <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800989c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80098a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80098a4:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 80098a8:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098aa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80098ae:	3101      	adds	r1, #1
 80098b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80098b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80098b8:	7888      	ldrb	r0, [r1, #2]
 80098ba:	4770      	bx	lr

080098bc <USBD_LL_SetUSBAddress>:
{
 80098bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098be:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80098c2:	f7fc ff37 	bl	8006734 <HAL_PCD_SetAddress>
  switch (hal_status)
 80098c6:	2803      	cmp	r0, #3
 80098c8:	bf96      	itet	ls
 80098ca:	4b02      	ldrls	r3, [pc, #8]	; (80098d4 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098cc:	2002      	movhi	r0, #2
 80098ce:	5c18      	ldrbls	r0, [r3, r0]
}
 80098d0:	bd08      	pop	{r3, pc}
 80098d2:	bf00      	nop
 80098d4:	0800c8e0 	.word	0x0800c8e0

080098d8 <USBD_LL_Transmit>:
{
 80098d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098da:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80098de:	f7fc ffd1 	bl	8006884 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80098e2:	2803      	cmp	r0, #3
 80098e4:	bf96      	itet	ls
 80098e6:	4b02      	ldrls	r3, [pc, #8]	; (80098f0 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098e8:	2002      	movhi	r0, #2
 80098ea:	5c18      	ldrbls	r0, [r3, r0]
}
 80098ec:	bd08      	pop	{r3, pc}
 80098ee:	bf00      	nop
 80098f0:	0800c8e0 	.word	0x0800c8e0

080098f4 <USBD_LL_PrepareReceive>:
{
 80098f4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098f6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80098fa:	f7fc ffa1 	bl	8006840 <HAL_PCD_EP_Receive>
  switch (hal_status)
 80098fe:	2803      	cmp	r0, #3
 8009900:	bf96      	itet	ls
 8009902:	4b02      	ldrls	r3, [pc, #8]	; (800990c <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009904:	2002      	movhi	r0, #2
 8009906:	5c18      	ldrbls	r0, [r3, r0]
}
 8009908:	bd08      	pop	{r3, pc}
 800990a:	bf00      	nop
 800990c:	0800c8e0 	.word	0x0800c8e0

08009910 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009910:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8009914:	f7fc bfac 	b.w	8006870 <HAL_PCD_EP_GetRxCount>

08009918 <USBD_static_malloc>:
}
 8009918:	4800      	ldr	r0, [pc, #0]	; (800991c <USBD_static_malloc+0x4>)
 800991a:	4770      	bx	lr
 800991c:	2000178c 	.word	0x2000178c

08009920 <USBD_static_free>:
}
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop

08009924 <__errno>:
 8009924:	4b01      	ldr	r3, [pc, #4]	; (800992c <__errno+0x8>)
 8009926:	6818      	ldr	r0, [r3, #0]
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	2000018c 	.word	0x2000018c

08009930 <__libc_init_array>:
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	2600      	movs	r6, #0
 8009934:	4d0c      	ldr	r5, [pc, #48]	; (8009968 <__libc_init_array+0x38>)
 8009936:	4c0d      	ldr	r4, [pc, #52]	; (800996c <__libc_init_array+0x3c>)
 8009938:	1b64      	subs	r4, r4, r5
 800993a:	10a4      	asrs	r4, r4, #2
 800993c:	42a6      	cmp	r6, r4
 800993e:	d109      	bne.n	8009954 <__libc_init_array+0x24>
 8009940:	f002 ff10 	bl	800c764 <_init>
 8009944:	2600      	movs	r6, #0
 8009946:	4d0a      	ldr	r5, [pc, #40]	; (8009970 <__libc_init_array+0x40>)
 8009948:	4c0a      	ldr	r4, [pc, #40]	; (8009974 <__libc_init_array+0x44>)
 800994a:	1b64      	subs	r4, r4, r5
 800994c:	10a4      	asrs	r4, r4, #2
 800994e:	42a6      	cmp	r6, r4
 8009950:	d105      	bne.n	800995e <__libc_init_array+0x2e>
 8009952:	bd70      	pop	{r4, r5, r6, pc}
 8009954:	f855 3b04 	ldr.w	r3, [r5], #4
 8009958:	4798      	blx	r3
 800995a:	3601      	adds	r6, #1
 800995c:	e7ee      	b.n	800993c <__libc_init_array+0xc>
 800995e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009962:	4798      	blx	r3
 8009964:	3601      	adds	r6, #1
 8009966:	e7f2      	b.n	800994e <__libc_init_array+0x1e>
 8009968:	0800ccc4 	.word	0x0800ccc4
 800996c:	0800ccc4 	.word	0x0800ccc4
 8009970:	0800ccc4 	.word	0x0800ccc4
 8009974:	0800ccc8 	.word	0x0800ccc8

08009978 <memcpy>:
 8009978:	440a      	add	r2, r1
 800997a:	4291      	cmp	r1, r2
 800997c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009980:	d100      	bne.n	8009984 <memcpy+0xc>
 8009982:	4770      	bx	lr
 8009984:	b510      	push	{r4, lr}
 8009986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800998a:	4291      	cmp	r1, r2
 800998c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009990:	d1f9      	bne.n	8009986 <memcpy+0xe>
 8009992:	bd10      	pop	{r4, pc}

08009994 <memset>:
 8009994:	4603      	mov	r3, r0
 8009996:	4402      	add	r2, r0
 8009998:	4293      	cmp	r3, r2
 800999a:	d100      	bne.n	800999e <memset+0xa>
 800999c:	4770      	bx	lr
 800999e:	f803 1b01 	strb.w	r1, [r3], #1
 80099a2:	e7f9      	b.n	8009998 <memset+0x4>

080099a4 <__cvt>:
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099aa:	461f      	mov	r7, r3
 80099ac:	bfbb      	ittet	lt
 80099ae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80099b2:	461f      	movlt	r7, r3
 80099b4:	2300      	movge	r3, #0
 80099b6:	232d      	movlt	r3, #45	; 0x2d
 80099b8:	b088      	sub	sp, #32
 80099ba:	4614      	mov	r4, r2
 80099bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099be:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80099c0:	7013      	strb	r3, [r2, #0]
 80099c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80099c8:	f023 0820 	bic.w	r8, r3, #32
 80099cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099d0:	d005      	beq.n	80099de <__cvt+0x3a>
 80099d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80099d6:	d100      	bne.n	80099da <__cvt+0x36>
 80099d8:	3501      	adds	r5, #1
 80099da:	2302      	movs	r3, #2
 80099dc:	e000      	b.n	80099e0 <__cvt+0x3c>
 80099de:	2303      	movs	r3, #3
 80099e0:	aa07      	add	r2, sp, #28
 80099e2:	9204      	str	r2, [sp, #16]
 80099e4:	aa06      	add	r2, sp, #24
 80099e6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80099ea:	e9cd 3500 	strd	r3, r5, [sp]
 80099ee:	4622      	mov	r2, r4
 80099f0:	463b      	mov	r3, r7
 80099f2:	f000 fcf9 	bl	800a3e8 <_dtoa_r>
 80099f6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80099fa:	4606      	mov	r6, r0
 80099fc:	d102      	bne.n	8009a04 <__cvt+0x60>
 80099fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a00:	07db      	lsls	r3, r3, #31
 8009a02:	d522      	bpl.n	8009a4a <__cvt+0xa6>
 8009a04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a08:	eb06 0905 	add.w	r9, r6, r5
 8009a0c:	d110      	bne.n	8009a30 <__cvt+0x8c>
 8009a0e:	7833      	ldrb	r3, [r6, #0]
 8009a10:	2b30      	cmp	r3, #48	; 0x30
 8009a12:	d10a      	bne.n	8009a2a <__cvt+0x86>
 8009a14:	2200      	movs	r2, #0
 8009a16:	2300      	movs	r3, #0
 8009a18:	4620      	mov	r0, r4
 8009a1a:	4639      	mov	r1, r7
 8009a1c:	f7f6 ffdc 	bl	80009d8 <__aeabi_dcmpeq>
 8009a20:	b918      	cbnz	r0, 8009a2a <__cvt+0x86>
 8009a22:	f1c5 0501 	rsb	r5, r5, #1
 8009a26:	f8ca 5000 	str.w	r5, [sl]
 8009a2a:	f8da 3000 	ldr.w	r3, [sl]
 8009a2e:	4499      	add	r9, r3
 8009a30:	2200      	movs	r2, #0
 8009a32:	2300      	movs	r3, #0
 8009a34:	4620      	mov	r0, r4
 8009a36:	4639      	mov	r1, r7
 8009a38:	f7f6 ffce 	bl	80009d8 <__aeabi_dcmpeq>
 8009a3c:	b108      	cbz	r0, 8009a42 <__cvt+0x9e>
 8009a3e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009a42:	2230      	movs	r2, #48	; 0x30
 8009a44:	9b07      	ldr	r3, [sp, #28]
 8009a46:	454b      	cmp	r3, r9
 8009a48:	d307      	bcc.n	8009a5a <__cvt+0xb6>
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	9b07      	ldr	r3, [sp, #28]
 8009a4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a50:	1b9b      	subs	r3, r3, r6
 8009a52:	6013      	str	r3, [r2, #0]
 8009a54:	b008      	add	sp, #32
 8009a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5a:	1c59      	adds	r1, r3, #1
 8009a5c:	9107      	str	r1, [sp, #28]
 8009a5e:	701a      	strb	r2, [r3, #0]
 8009a60:	e7f0      	b.n	8009a44 <__cvt+0xa0>

08009a62 <__exponent>:
 8009a62:	4603      	mov	r3, r0
 8009a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a66:	2900      	cmp	r1, #0
 8009a68:	f803 2b02 	strb.w	r2, [r3], #2
 8009a6c:	bfb6      	itet	lt
 8009a6e:	222d      	movlt	r2, #45	; 0x2d
 8009a70:	222b      	movge	r2, #43	; 0x2b
 8009a72:	4249      	neglt	r1, r1
 8009a74:	2909      	cmp	r1, #9
 8009a76:	7042      	strb	r2, [r0, #1]
 8009a78:	dd2b      	ble.n	8009ad2 <__exponent+0x70>
 8009a7a:	f10d 0407 	add.w	r4, sp, #7
 8009a7e:	46a4      	mov	ip, r4
 8009a80:	270a      	movs	r7, #10
 8009a82:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a86:	460a      	mov	r2, r1
 8009a88:	46a6      	mov	lr, r4
 8009a8a:	fb07 1516 	mls	r5, r7, r6, r1
 8009a8e:	2a63      	cmp	r2, #99	; 0x63
 8009a90:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009a94:	4631      	mov	r1, r6
 8009a96:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a9e:	dcf0      	bgt.n	8009a82 <__exponent+0x20>
 8009aa0:	3130      	adds	r1, #48	; 0x30
 8009aa2:	f1ae 0502 	sub.w	r5, lr, #2
 8009aa6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009aaa:	4629      	mov	r1, r5
 8009aac:	1c44      	adds	r4, r0, #1
 8009aae:	4561      	cmp	r1, ip
 8009ab0:	d30a      	bcc.n	8009ac8 <__exponent+0x66>
 8009ab2:	f10d 0209 	add.w	r2, sp, #9
 8009ab6:	eba2 020e 	sub.w	r2, r2, lr
 8009aba:	4565      	cmp	r5, ip
 8009abc:	bf88      	it	hi
 8009abe:	2200      	movhi	r2, #0
 8009ac0:	4413      	add	r3, r2
 8009ac2:	1a18      	subs	r0, r3, r0
 8009ac4:	b003      	add	sp, #12
 8009ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ac8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009acc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ad0:	e7ed      	b.n	8009aae <__exponent+0x4c>
 8009ad2:	2330      	movs	r3, #48	; 0x30
 8009ad4:	3130      	adds	r1, #48	; 0x30
 8009ad6:	7083      	strb	r3, [r0, #2]
 8009ad8:	70c1      	strb	r1, [r0, #3]
 8009ada:	1d03      	adds	r3, r0, #4
 8009adc:	e7f1      	b.n	8009ac2 <__exponent+0x60>
	...

08009ae0 <_printf_float>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	b091      	sub	sp, #68	; 0x44
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009aec:	4616      	mov	r6, r2
 8009aee:	461f      	mov	r7, r3
 8009af0:	4605      	mov	r5, r0
 8009af2:	f001 fa67 	bl	800afc4 <_localeconv_r>
 8009af6:	6803      	ldr	r3, [r0, #0]
 8009af8:	4618      	mov	r0, r3
 8009afa:	9309      	str	r3, [sp, #36]	; 0x24
 8009afc:	f7f6 fb40 	bl	8000180 <strlen>
 8009b00:	2300      	movs	r3, #0
 8009b02:	930e      	str	r3, [sp, #56]	; 0x38
 8009b04:	f8d8 3000 	ldr.w	r3, [r8]
 8009b08:	900a      	str	r0, [sp, #40]	; 0x28
 8009b0a:	3307      	adds	r3, #7
 8009b0c:	f023 0307 	bic.w	r3, r3, #7
 8009b10:	f103 0208 	add.w	r2, r3, #8
 8009b14:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009b18:	f8d4 b000 	ldr.w	fp, [r4]
 8009b1c:	f8c8 2000 	str.w	r2, [r8]
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b28:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009b2c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009b30:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b32:	f04f 32ff 	mov.w	r2, #4294967295
 8009b36:	4640      	mov	r0, r8
 8009b38:	4b9c      	ldr	r3, [pc, #624]	; (8009dac <_printf_float+0x2cc>)
 8009b3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b3c:	f7f6 ff7e 	bl	8000a3c <__aeabi_dcmpun>
 8009b40:	bb70      	cbnz	r0, 8009ba0 <_printf_float+0xc0>
 8009b42:	f04f 32ff 	mov.w	r2, #4294967295
 8009b46:	4640      	mov	r0, r8
 8009b48:	4b98      	ldr	r3, [pc, #608]	; (8009dac <_printf_float+0x2cc>)
 8009b4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b4c:	f7f6 ff58 	bl	8000a00 <__aeabi_dcmple>
 8009b50:	bb30      	cbnz	r0, 8009ba0 <_printf_float+0xc0>
 8009b52:	2200      	movs	r2, #0
 8009b54:	2300      	movs	r3, #0
 8009b56:	4640      	mov	r0, r8
 8009b58:	4651      	mov	r1, sl
 8009b5a:	f7f6 ff47 	bl	80009ec <__aeabi_dcmplt>
 8009b5e:	b110      	cbz	r0, 8009b66 <_printf_float+0x86>
 8009b60:	232d      	movs	r3, #45	; 0x2d
 8009b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b66:	4b92      	ldr	r3, [pc, #584]	; (8009db0 <_printf_float+0x2d0>)
 8009b68:	4892      	ldr	r0, [pc, #584]	; (8009db4 <_printf_float+0x2d4>)
 8009b6a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009b6e:	bf94      	ite	ls
 8009b70:	4698      	movls	r8, r3
 8009b72:	4680      	movhi	r8, r0
 8009b74:	2303      	movs	r3, #3
 8009b76:	f04f 0a00 	mov.w	sl, #0
 8009b7a:	6123      	str	r3, [r4, #16]
 8009b7c:	f02b 0304 	bic.w	r3, fp, #4
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	4633      	mov	r3, r6
 8009b84:	4621      	mov	r1, r4
 8009b86:	4628      	mov	r0, r5
 8009b88:	9700      	str	r7, [sp, #0]
 8009b8a:	aa0f      	add	r2, sp, #60	; 0x3c
 8009b8c:	f000 f9d4 	bl	8009f38 <_printf_common>
 8009b90:	3001      	adds	r0, #1
 8009b92:	f040 8090 	bne.w	8009cb6 <_printf_float+0x1d6>
 8009b96:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9a:	b011      	add	sp, #68	; 0x44
 8009b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba0:	4642      	mov	r2, r8
 8009ba2:	4653      	mov	r3, sl
 8009ba4:	4640      	mov	r0, r8
 8009ba6:	4651      	mov	r1, sl
 8009ba8:	f7f6 ff48 	bl	8000a3c <__aeabi_dcmpun>
 8009bac:	b148      	cbz	r0, 8009bc2 <_printf_float+0xe2>
 8009bae:	f1ba 0f00 	cmp.w	sl, #0
 8009bb2:	bfb8      	it	lt
 8009bb4:	232d      	movlt	r3, #45	; 0x2d
 8009bb6:	4880      	ldr	r0, [pc, #512]	; (8009db8 <_printf_float+0x2d8>)
 8009bb8:	bfb8      	it	lt
 8009bba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009bbe:	4b7f      	ldr	r3, [pc, #508]	; (8009dbc <_printf_float+0x2dc>)
 8009bc0:	e7d3      	b.n	8009b6a <_printf_float+0x8a>
 8009bc2:	6863      	ldr	r3, [r4, #4]
 8009bc4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009bc8:	1c5a      	adds	r2, r3, #1
 8009bca:	d142      	bne.n	8009c52 <_printf_float+0x172>
 8009bcc:	2306      	movs	r3, #6
 8009bce:	6063      	str	r3, [r4, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	9206      	str	r2, [sp, #24]
 8009bd4:	aa0e      	add	r2, sp, #56	; 0x38
 8009bd6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009bda:	aa0d      	add	r2, sp, #52	; 0x34
 8009bdc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009be0:	9203      	str	r2, [sp, #12]
 8009be2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009be6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009bea:	6023      	str	r3, [r4, #0]
 8009bec:	6863      	ldr	r3, [r4, #4]
 8009bee:	4642      	mov	r2, r8
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	4653      	mov	r3, sl
 8009bf6:	910b      	str	r1, [sp, #44]	; 0x2c
 8009bf8:	f7ff fed4 	bl	80099a4 <__cvt>
 8009bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bfe:	4680      	mov	r8, r0
 8009c00:	2947      	cmp	r1, #71	; 0x47
 8009c02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c04:	d108      	bne.n	8009c18 <_printf_float+0x138>
 8009c06:	1cc8      	adds	r0, r1, #3
 8009c08:	db02      	blt.n	8009c10 <_printf_float+0x130>
 8009c0a:	6863      	ldr	r3, [r4, #4]
 8009c0c:	4299      	cmp	r1, r3
 8009c0e:	dd40      	ble.n	8009c92 <_printf_float+0x1b2>
 8009c10:	f1a9 0902 	sub.w	r9, r9, #2
 8009c14:	fa5f f989 	uxtb.w	r9, r9
 8009c18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009c1c:	d81f      	bhi.n	8009c5e <_printf_float+0x17e>
 8009c1e:	464a      	mov	r2, r9
 8009c20:	3901      	subs	r1, #1
 8009c22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c26:	910d      	str	r1, [sp, #52]	; 0x34
 8009c28:	f7ff ff1b 	bl	8009a62 <__exponent>
 8009c2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c2e:	4682      	mov	sl, r0
 8009c30:	1813      	adds	r3, r2, r0
 8009c32:	2a01      	cmp	r2, #1
 8009c34:	6123      	str	r3, [r4, #16]
 8009c36:	dc02      	bgt.n	8009c3e <_printf_float+0x15e>
 8009c38:	6822      	ldr	r2, [r4, #0]
 8009c3a:	07d2      	lsls	r2, r2, #31
 8009c3c:	d501      	bpl.n	8009c42 <_printf_float+0x162>
 8009c3e:	3301      	adds	r3, #1
 8009c40:	6123      	str	r3, [r4, #16]
 8009c42:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d09b      	beq.n	8009b82 <_printf_float+0xa2>
 8009c4a:	232d      	movs	r3, #45	; 0x2d
 8009c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c50:	e797      	b.n	8009b82 <_printf_float+0xa2>
 8009c52:	2947      	cmp	r1, #71	; 0x47
 8009c54:	d1bc      	bne.n	8009bd0 <_printf_float+0xf0>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1ba      	bne.n	8009bd0 <_printf_float+0xf0>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e7b7      	b.n	8009bce <_printf_float+0xee>
 8009c5e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009c62:	d118      	bne.n	8009c96 <_printf_float+0x1b6>
 8009c64:	2900      	cmp	r1, #0
 8009c66:	6863      	ldr	r3, [r4, #4]
 8009c68:	dd0b      	ble.n	8009c82 <_printf_float+0x1a2>
 8009c6a:	6121      	str	r1, [r4, #16]
 8009c6c:	b913      	cbnz	r3, 8009c74 <_printf_float+0x194>
 8009c6e:	6822      	ldr	r2, [r4, #0]
 8009c70:	07d0      	lsls	r0, r2, #31
 8009c72:	d502      	bpl.n	8009c7a <_printf_float+0x19a>
 8009c74:	3301      	adds	r3, #1
 8009c76:	440b      	add	r3, r1
 8009c78:	6123      	str	r3, [r4, #16]
 8009c7a:	f04f 0a00 	mov.w	sl, #0
 8009c7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c80:	e7df      	b.n	8009c42 <_printf_float+0x162>
 8009c82:	b913      	cbnz	r3, 8009c8a <_printf_float+0x1aa>
 8009c84:	6822      	ldr	r2, [r4, #0]
 8009c86:	07d2      	lsls	r2, r2, #31
 8009c88:	d501      	bpl.n	8009c8e <_printf_float+0x1ae>
 8009c8a:	3302      	adds	r3, #2
 8009c8c:	e7f4      	b.n	8009c78 <_printf_float+0x198>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e7f2      	b.n	8009c78 <_printf_float+0x198>
 8009c92:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c98:	4299      	cmp	r1, r3
 8009c9a:	db05      	blt.n	8009ca8 <_printf_float+0x1c8>
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	6121      	str	r1, [r4, #16]
 8009ca0:	07d8      	lsls	r0, r3, #31
 8009ca2:	d5ea      	bpl.n	8009c7a <_printf_float+0x19a>
 8009ca4:	1c4b      	adds	r3, r1, #1
 8009ca6:	e7e7      	b.n	8009c78 <_printf_float+0x198>
 8009ca8:	2900      	cmp	r1, #0
 8009caa:	bfcc      	ite	gt
 8009cac:	2201      	movgt	r2, #1
 8009cae:	f1c1 0202 	rsble	r2, r1, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	e7e0      	b.n	8009c78 <_printf_float+0x198>
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	055a      	lsls	r2, r3, #21
 8009cba:	d407      	bmi.n	8009ccc <_printf_float+0x1ec>
 8009cbc:	6923      	ldr	r3, [r4, #16]
 8009cbe:	4642      	mov	r2, r8
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	47b8      	blx	r7
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	d12b      	bne.n	8009d22 <_printf_float+0x242>
 8009cca:	e764      	b.n	8009b96 <_printf_float+0xb6>
 8009ccc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009cd0:	f240 80dd 	bls.w	8009e8e <_printf_float+0x3ae>
 8009cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f7f6 fe7c 	bl	80009d8 <__aeabi_dcmpeq>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d033      	beq.n	8009d4c <_printf_float+0x26c>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	4a35      	ldr	r2, [pc, #212]	; (8009dc0 <_printf_float+0x2e0>)
 8009cec:	47b8      	blx	r7
 8009cee:	3001      	adds	r0, #1
 8009cf0:	f43f af51 	beq.w	8009b96 <_printf_float+0xb6>
 8009cf4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	db02      	blt.n	8009d02 <_printf_float+0x222>
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	07d8      	lsls	r0, r3, #31
 8009d00:	d50f      	bpl.n	8009d22 <_printf_float+0x242>
 8009d02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d06:	4631      	mov	r1, r6
 8009d08:	4628      	mov	r0, r5
 8009d0a:	47b8      	blx	r7
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	f43f af42 	beq.w	8009b96 <_printf_float+0xb6>
 8009d12:	f04f 0800 	mov.w	r8, #0
 8009d16:	f104 091a 	add.w	r9, r4, #26
 8009d1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	4543      	cmp	r3, r8
 8009d20:	dc09      	bgt.n	8009d36 <_printf_float+0x256>
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	079b      	lsls	r3, r3, #30
 8009d26:	f100 8102 	bmi.w	8009f2e <_printf_float+0x44e>
 8009d2a:	68e0      	ldr	r0, [r4, #12]
 8009d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d2e:	4298      	cmp	r0, r3
 8009d30:	bfb8      	it	lt
 8009d32:	4618      	movlt	r0, r3
 8009d34:	e731      	b.n	8009b9a <_printf_float+0xba>
 8009d36:	2301      	movs	r3, #1
 8009d38:	464a      	mov	r2, r9
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	47b8      	blx	r7
 8009d40:	3001      	adds	r0, #1
 8009d42:	f43f af28 	beq.w	8009b96 <_printf_float+0xb6>
 8009d46:	f108 0801 	add.w	r8, r8, #1
 8009d4a:	e7e6      	b.n	8009d1a <_printf_float+0x23a>
 8009d4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	dc38      	bgt.n	8009dc4 <_printf_float+0x2e4>
 8009d52:	2301      	movs	r3, #1
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	4a19      	ldr	r2, [pc, #100]	; (8009dc0 <_printf_float+0x2e0>)
 8009d5a:	47b8      	blx	r7
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	f43f af1a 	beq.w	8009b96 <_printf_float+0xb6>
 8009d62:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009d66:	4313      	orrs	r3, r2
 8009d68:	d102      	bne.n	8009d70 <_printf_float+0x290>
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	07d9      	lsls	r1, r3, #31
 8009d6e:	d5d8      	bpl.n	8009d22 <_printf_float+0x242>
 8009d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d74:	4631      	mov	r1, r6
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b8      	blx	r7
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	f43f af0b 	beq.w	8009b96 <_printf_float+0xb6>
 8009d80:	f04f 0900 	mov.w	r9, #0
 8009d84:	f104 0a1a 	add.w	sl, r4, #26
 8009d88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d8a:	425b      	negs	r3, r3
 8009d8c:	454b      	cmp	r3, r9
 8009d8e:	dc01      	bgt.n	8009d94 <_printf_float+0x2b4>
 8009d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d92:	e794      	b.n	8009cbe <_printf_float+0x1de>
 8009d94:	2301      	movs	r3, #1
 8009d96:	4652      	mov	r2, sl
 8009d98:	4631      	mov	r1, r6
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	47b8      	blx	r7
 8009d9e:	3001      	adds	r0, #1
 8009da0:	f43f aef9 	beq.w	8009b96 <_printf_float+0xb6>
 8009da4:	f109 0901 	add.w	r9, r9, #1
 8009da8:	e7ee      	b.n	8009d88 <_printf_float+0x2a8>
 8009daa:	bf00      	nop
 8009dac:	7fefffff 	.word	0x7fefffff
 8009db0:	0800c8e8 	.word	0x0800c8e8
 8009db4:	0800c8ec 	.word	0x0800c8ec
 8009db8:	0800c8f4 	.word	0x0800c8f4
 8009dbc:	0800c8f0 	.word	0x0800c8f0
 8009dc0:	0800c8f8 	.word	0x0800c8f8
 8009dc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	bfa8      	it	ge
 8009dcc:	461a      	movge	r2, r3
 8009dce:	2a00      	cmp	r2, #0
 8009dd0:	4691      	mov	r9, r2
 8009dd2:	dc37      	bgt.n	8009e44 <_printf_float+0x364>
 8009dd4:	f04f 0b00 	mov.w	fp, #0
 8009dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ddc:	f104 021a 	add.w	r2, r4, #26
 8009de0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009de4:	ebaa 0309 	sub.w	r3, sl, r9
 8009de8:	455b      	cmp	r3, fp
 8009dea:	dc33      	bgt.n	8009e54 <_printf_float+0x374>
 8009dec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009df0:	429a      	cmp	r2, r3
 8009df2:	db3b      	blt.n	8009e6c <_printf_float+0x38c>
 8009df4:	6823      	ldr	r3, [r4, #0]
 8009df6:	07da      	lsls	r2, r3, #31
 8009df8:	d438      	bmi.n	8009e6c <_printf_float+0x38c>
 8009dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dfc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009dfe:	eba3 020a 	sub.w	r2, r3, sl
 8009e02:	eba3 0901 	sub.w	r9, r3, r1
 8009e06:	4591      	cmp	r9, r2
 8009e08:	bfa8      	it	ge
 8009e0a:	4691      	movge	r9, r2
 8009e0c:	f1b9 0f00 	cmp.w	r9, #0
 8009e10:	dc34      	bgt.n	8009e7c <_printf_float+0x39c>
 8009e12:	f04f 0800 	mov.w	r8, #0
 8009e16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e1a:	f104 0a1a 	add.w	sl, r4, #26
 8009e1e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009e22:	1a9b      	subs	r3, r3, r2
 8009e24:	eba3 0309 	sub.w	r3, r3, r9
 8009e28:	4543      	cmp	r3, r8
 8009e2a:	f77f af7a 	ble.w	8009d22 <_printf_float+0x242>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	4652      	mov	r2, sl
 8009e32:	4631      	mov	r1, r6
 8009e34:	4628      	mov	r0, r5
 8009e36:	47b8      	blx	r7
 8009e38:	3001      	adds	r0, #1
 8009e3a:	f43f aeac 	beq.w	8009b96 <_printf_float+0xb6>
 8009e3e:	f108 0801 	add.w	r8, r8, #1
 8009e42:	e7ec      	b.n	8009e1e <_printf_float+0x33e>
 8009e44:	4613      	mov	r3, r2
 8009e46:	4631      	mov	r1, r6
 8009e48:	4642      	mov	r2, r8
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	47b8      	blx	r7
 8009e4e:	3001      	adds	r0, #1
 8009e50:	d1c0      	bne.n	8009dd4 <_printf_float+0x2f4>
 8009e52:	e6a0      	b.n	8009b96 <_printf_float+0xb6>
 8009e54:	2301      	movs	r3, #1
 8009e56:	4631      	mov	r1, r6
 8009e58:	4628      	mov	r0, r5
 8009e5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e5c:	47b8      	blx	r7
 8009e5e:	3001      	adds	r0, #1
 8009e60:	f43f ae99 	beq.w	8009b96 <_printf_float+0xb6>
 8009e64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e66:	f10b 0b01 	add.w	fp, fp, #1
 8009e6a:	e7b9      	b.n	8009de0 <_printf_float+0x300>
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e72:	4628      	mov	r0, r5
 8009e74:	47b8      	blx	r7
 8009e76:	3001      	adds	r0, #1
 8009e78:	d1bf      	bne.n	8009dfa <_printf_float+0x31a>
 8009e7a:	e68c      	b.n	8009b96 <_printf_float+0xb6>
 8009e7c:	464b      	mov	r3, r9
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4628      	mov	r0, r5
 8009e82:	eb08 020a 	add.w	r2, r8, sl
 8009e86:	47b8      	blx	r7
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d1c2      	bne.n	8009e12 <_printf_float+0x332>
 8009e8c:	e683      	b.n	8009b96 <_printf_float+0xb6>
 8009e8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e90:	2a01      	cmp	r2, #1
 8009e92:	dc01      	bgt.n	8009e98 <_printf_float+0x3b8>
 8009e94:	07db      	lsls	r3, r3, #31
 8009e96:	d537      	bpl.n	8009f08 <_printf_float+0x428>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	4642      	mov	r2, r8
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	47b8      	blx	r7
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	f43f ae77 	beq.w	8009b96 <_printf_float+0xb6>
 8009ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009eac:	4631      	mov	r1, r6
 8009eae:	4628      	mov	r0, r5
 8009eb0:	47b8      	blx	r7
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	f43f ae6f 	beq.w	8009b96 <_printf_float+0xb6>
 8009eb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f7f6 fd8a 	bl	80009d8 <__aeabi_dcmpeq>
 8009ec4:	b9d8      	cbnz	r0, 8009efe <_printf_float+0x41e>
 8009ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ec8:	f108 0201 	add.w	r2, r8, #1
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	4631      	mov	r1, r6
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	47b8      	blx	r7
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	d10e      	bne.n	8009ef6 <_printf_float+0x416>
 8009ed8:	e65d      	b.n	8009b96 <_printf_float+0xb6>
 8009eda:	2301      	movs	r3, #1
 8009edc:	464a      	mov	r2, r9
 8009ede:	4631      	mov	r1, r6
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b8      	blx	r7
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	f43f ae56 	beq.w	8009b96 <_printf_float+0xb6>
 8009eea:	f108 0801 	add.w	r8, r8, #1
 8009eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	4543      	cmp	r3, r8
 8009ef4:	dcf1      	bgt.n	8009eda <_printf_float+0x3fa>
 8009ef6:	4653      	mov	r3, sl
 8009ef8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009efc:	e6e0      	b.n	8009cc0 <_printf_float+0x1e0>
 8009efe:	f04f 0800 	mov.w	r8, #0
 8009f02:	f104 091a 	add.w	r9, r4, #26
 8009f06:	e7f2      	b.n	8009eee <_printf_float+0x40e>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	4642      	mov	r2, r8
 8009f0c:	e7df      	b.n	8009ece <_printf_float+0x3ee>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	464a      	mov	r2, r9
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	f43f ae3c 	beq.w	8009b96 <_printf_float+0xb6>
 8009f1e:	f108 0801 	add.w	r8, r8, #1
 8009f22:	68e3      	ldr	r3, [r4, #12]
 8009f24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f26:	1a5b      	subs	r3, r3, r1
 8009f28:	4543      	cmp	r3, r8
 8009f2a:	dcf0      	bgt.n	8009f0e <_printf_float+0x42e>
 8009f2c:	e6fd      	b.n	8009d2a <_printf_float+0x24a>
 8009f2e:	f04f 0800 	mov.w	r8, #0
 8009f32:	f104 0919 	add.w	r9, r4, #25
 8009f36:	e7f4      	b.n	8009f22 <_printf_float+0x442>

08009f38 <_printf_common>:
 8009f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f3c:	4616      	mov	r6, r2
 8009f3e:	4699      	mov	r9, r3
 8009f40:	688a      	ldr	r2, [r1, #8]
 8009f42:	690b      	ldr	r3, [r1, #16]
 8009f44:	4607      	mov	r7, r0
 8009f46:	4293      	cmp	r3, r2
 8009f48:	bfb8      	it	lt
 8009f4a:	4613      	movlt	r3, r2
 8009f4c:	6033      	str	r3, [r6, #0]
 8009f4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f52:	460c      	mov	r4, r1
 8009f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f58:	b10a      	cbz	r2, 8009f5e <_printf_common+0x26>
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	6033      	str	r3, [r6, #0]
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	0699      	lsls	r1, r3, #26
 8009f62:	bf42      	ittt	mi
 8009f64:	6833      	ldrmi	r3, [r6, #0]
 8009f66:	3302      	addmi	r3, #2
 8009f68:	6033      	strmi	r3, [r6, #0]
 8009f6a:	6825      	ldr	r5, [r4, #0]
 8009f6c:	f015 0506 	ands.w	r5, r5, #6
 8009f70:	d106      	bne.n	8009f80 <_printf_common+0x48>
 8009f72:	f104 0a19 	add.w	sl, r4, #25
 8009f76:	68e3      	ldr	r3, [r4, #12]
 8009f78:	6832      	ldr	r2, [r6, #0]
 8009f7a:	1a9b      	subs	r3, r3, r2
 8009f7c:	42ab      	cmp	r3, r5
 8009f7e:	dc28      	bgt.n	8009fd2 <_printf_common+0x9a>
 8009f80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f84:	1e13      	subs	r3, r2, #0
 8009f86:	6822      	ldr	r2, [r4, #0]
 8009f88:	bf18      	it	ne
 8009f8a:	2301      	movne	r3, #1
 8009f8c:	0692      	lsls	r2, r2, #26
 8009f8e:	d42d      	bmi.n	8009fec <_printf_common+0xb4>
 8009f90:	4649      	mov	r1, r9
 8009f92:	4638      	mov	r0, r7
 8009f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f98:	47c0      	blx	r8
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	d020      	beq.n	8009fe0 <_printf_common+0xa8>
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	68e5      	ldr	r5, [r4, #12]
 8009fa2:	f003 0306 	and.w	r3, r3, #6
 8009fa6:	2b04      	cmp	r3, #4
 8009fa8:	bf18      	it	ne
 8009faa:	2500      	movne	r5, #0
 8009fac:	6832      	ldr	r2, [r6, #0]
 8009fae:	f04f 0600 	mov.w	r6, #0
 8009fb2:	68a3      	ldr	r3, [r4, #8]
 8009fb4:	bf08      	it	eq
 8009fb6:	1aad      	subeq	r5, r5, r2
 8009fb8:	6922      	ldr	r2, [r4, #16]
 8009fba:	bf08      	it	eq
 8009fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	bfc4      	itt	gt
 8009fc4:	1a9b      	subgt	r3, r3, r2
 8009fc6:	18ed      	addgt	r5, r5, r3
 8009fc8:	341a      	adds	r4, #26
 8009fca:	42b5      	cmp	r5, r6
 8009fcc:	d11a      	bne.n	800a004 <_printf_common+0xcc>
 8009fce:	2000      	movs	r0, #0
 8009fd0:	e008      	b.n	8009fe4 <_printf_common+0xac>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	4649      	mov	r1, r9
 8009fd8:	4638      	mov	r0, r7
 8009fda:	47c0      	blx	r8
 8009fdc:	3001      	adds	r0, #1
 8009fde:	d103      	bne.n	8009fe8 <_printf_common+0xb0>
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe8:	3501      	adds	r5, #1
 8009fea:	e7c4      	b.n	8009f76 <_printf_common+0x3e>
 8009fec:	2030      	movs	r0, #48	; 0x30
 8009fee:	18e1      	adds	r1, r4, r3
 8009ff0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ff4:	1c5a      	adds	r2, r3, #1
 8009ff6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ffa:	4422      	add	r2, r4
 8009ffc:	3302      	adds	r3, #2
 8009ffe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a002:	e7c5      	b.n	8009f90 <_printf_common+0x58>
 800a004:	2301      	movs	r3, #1
 800a006:	4622      	mov	r2, r4
 800a008:	4649      	mov	r1, r9
 800a00a:	4638      	mov	r0, r7
 800a00c:	47c0      	blx	r8
 800a00e:	3001      	adds	r0, #1
 800a010:	d0e6      	beq.n	8009fe0 <_printf_common+0xa8>
 800a012:	3601      	adds	r6, #1
 800a014:	e7d9      	b.n	8009fca <_printf_common+0x92>
	...

0800a018 <_printf_i>:
 800a018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a01c:	7e0f      	ldrb	r7, [r1, #24]
 800a01e:	4691      	mov	r9, r2
 800a020:	2f78      	cmp	r7, #120	; 0x78
 800a022:	4680      	mov	r8, r0
 800a024:	460c      	mov	r4, r1
 800a026:	469a      	mov	sl, r3
 800a028:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a02a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a02e:	d807      	bhi.n	800a040 <_printf_i+0x28>
 800a030:	2f62      	cmp	r7, #98	; 0x62
 800a032:	d80a      	bhi.n	800a04a <_printf_i+0x32>
 800a034:	2f00      	cmp	r7, #0
 800a036:	f000 80d9 	beq.w	800a1ec <_printf_i+0x1d4>
 800a03a:	2f58      	cmp	r7, #88	; 0x58
 800a03c:	f000 80a4 	beq.w	800a188 <_printf_i+0x170>
 800a040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a048:	e03a      	b.n	800a0c0 <_printf_i+0xa8>
 800a04a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a04e:	2b15      	cmp	r3, #21
 800a050:	d8f6      	bhi.n	800a040 <_printf_i+0x28>
 800a052:	a101      	add	r1, pc, #4	; (adr r1, 800a058 <_printf_i+0x40>)
 800a054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a058:	0800a0b1 	.word	0x0800a0b1
 800a05c:	0800a0c5 	.word	0x0800a0c5
 800a060:	0800a041 	.word	0x0800a041
 800a064:	0800a041 	.word	0x0800a041
 800a068:	0800a041 	.word	0x0800a041
 800a06c:	0800a041 	.word	0x0800a041
 800a070:	0800a0c5 	.word	0x0800a0c5
 800a074:	0800a041 	.word	0x0800a041
 800a078:	0800a041 	.word	0x0800a041
 800a07c:	0800a041 	.word	0x0800a041
 800a080:	0800a041 	.word	0x0800a041
 800a084:	0800a1d3 	.word	0x0800a1d3
 800a088:	0800a0f5 	.word	0x0800a0f5
 800a08c:	0800a1b5 	.word	0x0800a1b5
 800a090:	0800a041 	.word	0x0800a041
 800a094:	0800a041 	.word	0x0800a041
 800a098:	0800a1f5 	.word	0x0800a1f5
 800a09c:	0800a041 	.word	0x0800a041
 800a0a0:	0800a0f5 	.word	0x0800a0f5
 800a0a4:	0800a041 	.word	0x0800a041
 800a0a8:	0800a041 	.word	0x0800a041
 800a0ac:	0800a1bd 	.word	0x0800a1bd
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	1d1a      	adds	r2, r3, #4
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	602a      	str	r2, [r5, #0]
 800a0b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e0a4      	b.n	800a20e <_printf_i+0x1f6>
 800a0c4:	6820      	ldr	r0, [r4, #0]
 800a0c6:	6829      	ldr	r1, [r5, #0]
 800a0c8:	0606      	lsls	r6, r0, #24
 800a0ca:	f101 0304 	add.w	r3, r1, #4
 800a0ce:	d50a      	bpl.n	800a0e6 <_printf_i+0xce>
 800a0d0:	680e      	ldr	r6, [r1, #0]
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	2e00      	cmp	r6, #0
 800a0d6:	da03      	bge.n	800a0e0 <_printf_i+0xc8>
 800a0d8:	232d      	movs	r3, #45	; 0x2d
 800a0da:	4276      	negs	r6, r6
 800a0dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0e0:	230a      	movs	r3, #10
 800a0e2:	485e      	ldr	r0, [pc, #376]	; (800a25c <_printf_i+0x244>)
 800a0e4:	e019      	b.n	800a11a <_printf_i+0x102>
 800a0e6:	680e      	ldr	r6, [r1, #0]
 800a0e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0ec:	602b      	str	r3, [r5, #0]
 800a0ee:	bf18      	it	ne
 800a0f0:	b236      	sxthne	r6, r6
 800a0f2:	e7ef      	b.n	800a0d4 <_printf_i+0xbc>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	6820      	ldr	r0, [r4, #0]
 800a0f8:	1d19      	adds	r1, r3, #4
 800a0fa:	6029      	str	r1, [r5, #0]
 800a0fc:	0601      	lsls	r1, r0, #24
 800a0fe:	d501      	bpl.n	800a104 <_printf_i+0xec>
 800a100:	681e      	ldr	r6, [r3, #0]
 800a102:	e002      	b.n	800a10a <_printf_i+0xf2>
 800a104:	0646      	lsls	r6, r0, #25
 800a106:	d5fb      	bpl.n	800a100 <_printf_i+0xe8>
 800a108:	881e      	ldrh	r6, [r3, #0]
 800a10a:	2f6f      	cmp	r7, #111	; 0x6f
 800a10c:	bf0c      	ite	eq
 800a10e:	2308      	moveq	r3, #8
 800a110:	230a      	movne	r3, #10
 800a112:	4852      	ldr	r0, [pc, #328]	; (800a25c <_printf_i+0x244>)
 800a114:	2100      	movs	r1, #0
 800a116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a11a:	6865      	ldr	r5, [r4, #4]
 800a11c:	2d00      	cmp	r5, #0
 800a11e:	bfa8      	it	ge
 800a120:	6821      	ldrge	r1, [r4, #0]
 800a122:	60a5      	str	r5, [r4, #8]
 800a124:	bfa4      	itt	ge
 800a126:	f021 0104 	bicge.w	r1, r1, #4
 800a12a:	6021      	strge	r1, [r4, #0]
 800a12c:	b90e      	cbnz	r6, 800a132 <_printf_i+0x11a>
 800a12e:	2d00      	cmp	r5, #0
 800a130:	d04d      	beq.n	800a1ce <_printf_i+0x1b6>
 800a132:	4615      	mov	r5, r2
 800a134:	fbb6 f1f3 	udiv	r1, r6, r3
 800a138:	fb03 6711 	mls	r7, r3, r1, r6
 800a13c:	5dc7      	ldrb	r7, [r0, r7]
 800a13e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a142:	4637      	mov	r7, r6
 800a144:	42bb      	cmp	r3, r7
 800a146:	460e      	mov	r6, r1
 800a148:	d9f4      	bls.n	800a134 <_printf_i+0x11c>
 800a14a:	2b08      	cmp	r3, #8
 800a14c:	d10b      	bne.n	800a166 <_printf_i+0x14e>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	07de      	lsls	r6, r3, #31
 800a152:	d508      	bpl.n	800a166 <_printf_i+0x14e>
 800a154:	6923      	ldr	r3, [r4, #16]
 800a156:	6861      	ldr	r1, [r4, #4]
 800a158:	4299      	cmp	r1, r3
 800a15a:	bfde      	ittt	le
 800a15c:	2330      	movle	r3, #48	; 0x30
 800a15e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a162:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a166:	1b52      	subs	r2, r2, r5
 800a168:	6122      	str	r2, [r4, #16]
 800a16a:	464b      	mov	r3, r9
 800a16c:	4621      	mov	r1, r4
 800a16e:	4640      	mov	r0, r8
 800a170:	f8cd a000 	str.w	sl, [sp]
 800a174:	aa03      	add	r2, sp, #12
 800a176:	f7ff fedf 	bl	8009f38 <_printf_common>
 800a17a:	3001      	adds	r0, #1
 800a17c:	d14c      	bne.n	800a218 <_printf_i+0x200>
 800a17e:	f04f 30ff 	mov.w	r0, #4294967295
 800a182:	b004      	add	sp, #16
 800a184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a188:	4834      	ldr	r0, [pc, #208]	; (800a25c <_printf_i+0x244>)
 800a18a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a18e:	6829      	ldr	r1, [r5, #0]
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	f851 6b04 	ldr.w	r6, [r1], #4
 800a196:	6029      	str	r1, [r5, #0]
 800a198:	061d      	lsls	r5, r3, #24
 800a19a:	d514      	bpl.n	800a1c6 <_printf_i+0x1ae>
 800a19c:	07df      	lsls	r7, r3, #31
 800a19e:	bf44      	itt	mi
 800a1a0:	f043 0320 	orrmi.w	r3, r3, #32
 800a1a4:	6023      	strmi	r3, [r4, #0]
 800a1a6:	b91e      	cbnz	r6, 800a1b0 <_printf_i+0x198>
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	f023 0320 	bic.w	r3, r3, #32
 800a1ae:	6023      	str	r3, [r4, #0]
 800a1b0:	2310      	movs	r3, #16
 800a1b2:	e7af      	b.n	800a114 <_printf_i+0xfc>
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	f043 0320 	orr.w	r3, r3, #32
 800a1ba:	6023      	str	r3, [r4, #0]
 800a1bc:	2378      	movs	r3, #120	; 0x78
 800a1be:	4828      	ldr	r0, [pc, #160]	; (800a260 <_printf_i+0x248>)
 800a1c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1c4:	e7e3      	b.n	800a18e <_printf_i+0x176>
 800a1c6:	0659      	lsls	r1, r3, #25
 800a1c8:	bf48      	it	mi
 800a1ca:	b2b6      	uxthmi	r6, r6
 800a1cc:	e7e6      	b.n	800a19c <_printf_i+0x184>
 800a1ce:	4615      	mov	r5, r2
 800a1d0:	e7bb      	b.n	800a14a <_printf_i+0x132>
 800a1d2:	682b      	ldr	r3, [r5, #0]
 800a1d4:	6826      	ldr	r6, [r4, #0]
 800a1d6:	1d18      	adds	r0, r3, #4
 800a1d8:	6961      	ldr	r1, [r4, #20]
 800a1da:	6028      	str	r0, [r5, #0]
 800a1dc:	0635      	lsls	r5, r6, #24
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	d501      	bpl.n	800a1e6 <_printf_i+0x1ce>
 800a1e2:	6019      	str	r1, [r3, #0]
 800a1e4:	e002      	b.n	800a1ec <_printf_i+0x1d4>
 800a1e6:	0670      	lsls	r0, r6, #25
 800a1e8:	d5fb      	bpl.n	800a1e2 <_printf_i+0x1ca>
 800a1ea:	8019      	strh	r1, [r3, #0]
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4615      	mov	r5, r2
 800a1f0:	6123      	str	r3, [r4, #16]
 800a1f2:	e7ba      	b.n	800a16a <_printf_i+0x152>
 800a1f4:	682b      	ldr	r3, [r5, #0]
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	1d1a      	adds	r2, r3, #4
 800a1fa:	602a      	str	r2, [r5, #0]
 800a1fc:	681d      	ldr	r5, [r3, #0]
 800a1fe:	6862      	ldr	r2, [r4, #4]
 800a200:	4628      	mov	r0, r5
 800a202:	f000 feeb 	bl	800afdc <memchr>
 800a206:	b108      	cbz	r0, 800a20c <_printf_i+0x1f4>
 800a208:	1b40      	subs	r0, r0, r5
 800a20a:	6060      	str	r0, [r4, #4]
 800a20c:	6863      	ldr	r3, [r4, #4]
 800a20e:	6123      	str	r3, [r4, #16]
 800a210:	2300      	movs	r3, #0
 800a212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a216:	e7a8      	b.n	800a16a <_printf_i+0x152>
 800a218:	462a      	mov	r2, r5
 800a21a:	4649      	mov	r1, r9
 800a21c:	4640      	mov	r0, r8
 800a21e:	6923      	ldr	r3, [r4, #16]
 800a220:	47d0      	blx	sl
 800a222:	3001      	adds	r0, #1
 800a224:	d0ab      	beq.n	800a17e <_printf_i+0x166>
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	079b      	lsls	r3, r3, #30
 800a22a:	d413      	bmi.n	800a254 <_printf_i+0x23c>
 800a22c:	68e0      	ldr	r0, [r4, #12]
 800a22e:	9b03      	ldr	r3, [sp, #12]
 800a230:	4298      	cmp	r0, r3
 800a232:	bfb8      	it	lt
 800a234:	4618      	movlt	r0, r3
 800a236:	e7a4      	b.n	800a182 <_printf_i+0x16a>
 800a238:	2301      	movs	r3, #1
 800a23a:	4632      	mov	r2, r6
 800a23c:	4649      	mov	r1, r9
 800a23e:	4640      	mov	r0, r8
 800a240:	47d0      	blx	sl
 800a242:	3001      	adds	r0, #1
 800a244:	d09b      	beq.n	800a17e <_printf_i+0x166>
 800a246:	3501      	adds	r5, #1
 800a248:	68e3      	ldr	r3, [r4, #12]
 800a24a:	9903      	ldr	r1, [sp, #12]
 800a24c:	1a5b      	subs	r3, r3, r1
 800a24e:	42ab      	cmp	r3, r5
 800a250:	dcf2      	bgt.n	800a238 <_printf_i+0x220>
 800a252:	e7eb      	b.n	800a22c <_printf_i+0x214>
 800a254:	2500      	movs	r5, #0
 800a256:	f104 0619 	add.w	r6, r4, #25
 800a25a:	e7f5      	b.n	800a248 <_printf_i+0x230>
 800a25c:	0800c8fa 	.word	0x0800c8fa
 800a260:	0800c90b 	.word	0x0800c90b

0800a264 <sniprintf>:
 800a264:	b40c      	push	{r2, r3}
 800a266:	b530      	push	{r4, r5, lr}
 800a268:	4b17      	ldr	r3, [pc, #92]	; (800a2c8 <sniprintf+0x64>)
 800a26a:	1e0c      	subs	r4, r1, #0
 800a26c:	681d      	ldr	r5, [r3, #0]
 800a26e:	b09d      	sub	sp, #116	; 0x74
 800a270:	da08      	bge.n	800a284 <sniprintf+0x20>
 800a272:	238b      	movs	r3, #139	; 0x8b
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	602b      	str	r3, [r5, #0]
 800a27a:	b01d      	add	sp, #116	; 0x74
 800a27c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a280:	b002      	add	sp, #8
 800a282:	4770      	bx	lr
 800a284:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a288:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a28c:	bf0c      	ite	eq
 800a28e:	4623      	moveq	r3, r4
 800a290:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a294:	9304      	str	r3, [sp, #16]
 800a296:	9307      	str	r3, [sp, #28]
 800a298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a29c:	9002      	str	r0, [sp, #8]
 800a29e:	9006      	str	r0, [sp, #24]
 800a2a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	ab21      	add	r3, sp, #132	; 0x84
 800a2a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a2aa:	a902      	add	r1, sp, #8
 800a2ac:	9301      	str	r3, [sp, #4]
 800a2ae:	f001 fb71 	bl	800b994 <_svfiprintf_r>
 800a2b2:	1c43      	adds	r3, r0, #1
 800a2b4:	bfbc      	itt	lt
 800a2b6:	238b      	movlt	r3, #139	; 0x8b
 800a2b8:	602b      	strlt	r3, [r5, #0]
 800a2ba:	2c00      	cmp	r4, #0
 800a2bc:	d0dd      	beq.n	800a27a <sniprintf+0x16>
 800a2be:	2200      	movs	r2, #0
 800a2c0:	9b02      	ldr	r3, [sp, #8]
 800a2c2:	701a      	strb	r2, [r3, #0]
 800a2c4:	e7d9      	b.n	800a27a <sniprintf+0x16>
 800a2c6:	bf00      	nop
 800a2c8:	2000018c 	.word	0x2000018c

0800a2cc <quorem>:
 800a2cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d0:	6903      	ldr	r3, [r0, #16]
 800a2d2:	690c      	ldr	r4, [r1, #16]
 800a2d4:	4607      	mov	r7, r0
 800a2d6:	42a3      	cmp	r3, r4
 800a2d8:	f2c0 8082 	blt.w	800a3e0 <quorem+0x114>
 800a2dc:	3c01      	subs	r4, #1
 800a2de:	f100 0514 	add.w	r5, r0, #20
 800a2e2:	f101 0814 	add.w	r8, r1, #20
 800a2e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2ea:	9301      	str	r3, [sp, #4]
 800a2ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a300:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a304:	d331      	bcc.n	800a36a <quorem+0x9e>
 800a306:	f04f 0e00 	mov.w	lr, #0
 800a30a:	4640      	mov	r0, r8
 800a30c:	46ac      	mov	ip, r5
 800a30e:	46f2      	mov	sl, lr
 800a310:	f850 2b04 	ldr.w	r2, [r0], #4
 800a314:	b293      	uxth	r3, r2
 800a316:	fb06 e303 	mla	r3, r6, r3, lr
 800a31a:	0c12      	lsrs	r2, r2, #16
 800a31c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a320:	b29b      	uxth	r3, r3
 800a322:	fb06 e202 	mla	r2, r6, r2, lr
 800a326:	ebaa 0303 	sub.w	r3, sl, r3
 800a32a:	f8dc a000 	ldr.w	sl, [ip]
 800a32e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a332:	fa1f fa8a 	uxth.w	sl, sl
 800a336:	4453      	add	r3, sl
 800a338:	f8dc a000 	ldr.w	sl, [ip]
 800a33c:	b292      	uxth	r2, r2
 800a33e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a342:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a346:	b29b      	uxth	r3, r3
 800a348:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a34c:	4581      	cmp	r9, r0
 800a34e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a352:	f84c 3b04 	str.w	r3, [ip], #4
 800a356:	d2db      	bcs.n	800a310 <quorem+0x44>
 800a358:	f855 300b 	ldr.w	r3, [r5, fp]
 800a35c:	b92b      	cbnz	r3, 800a36a <quorem+0x9e>
 800a35e:	9b01      	ldr	r3, [sp, #4]
 800a360:	3b04      	subs	r3, #4
 800a362:	429d      	cmp	r5, r3
 800a364:	461a      	mov	r2, r3
 800a366:	d32f      	bcc.n	800a3c8 <quorem+0xfc>
 800a368:	613c      	str	r4, [r7, #16]
 800a36a:	4638      	mov	r0, r7
 800a36c:	f001 f8c2 	bl	800b4f4 <__mcmp>
 800a370:	2800      	cmp	r0, #0
 800a372:	db25      	blt.n	800a3c0 <quorem+0xf4>
 800a374:	4628      	mov	r0, r5
 800a376:	f04f 0c00 	mov.w	ip, #0
 800a37a:	3601      	adds	r6, #1
 800a37c:	f858 1b04 	ldr.w	r1, [r8], #4
 800a380:	f8d0 e000 	ldr.w	lr, [r0]
 800a384:	b28b      	uxth	r3, r1
 800a386:	ebac 0303 	sub.w	r3, ip, r3
 800a38a:	fa1f f28e 	uxth.w	r2, lr
 800a38e:	4413      	add	r3, r2
 800a390:	0c0a      	lsrs	r2, r1, #16
 800a392:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a396:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3a0:	45c1      	cmp	r9, r8
 800a3a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3a6:	f840 3b04 	str.w	r3, [r0], #4
 800a3aa:	d2e7      	bcs.n	800a37c <quorem+0xb0>
 800a3ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3b4:	b922      	cbnz	r2, 800a3c0 <quorem+0xf4>
 800a3b6:	3b04      	subs	r3, #4
 800a3b8:	429d      	cmp	r5, r3
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	d30a      	bcc.n	800a3d4 <quorem+0x108>
 800a3be:	613c      	str	r4, [r7, #16]
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	b003      	add	sp, #12
 800a3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c8:	6812      	ldr	r2, [r2, #0]
 800a3ca:	3b04      	subs	r3, #4
 800a3cc:	2a00      	cmp	r2, #0
 800a3ce:	d1cb      	bne.n	800a368 <quorem+0x9c>
 800a3d0:	3c01      	subs	r4, #1
 800a3d2:	e7c6      	b.n	800a362 <quorem+0x96>
 800a3d4:	6812      	ldr	r2, [r2, #0]
 800a3d6:	3b04      	subs	r3, #4
 800a3d8:	2a00      	cmp	r2, #0
 800a3da:	d1f0      	bne.n	800a3be <quorem+0xf2>
 800a3dc:	3c01      	subs	r4, #1
 800a3de:	e7eb      	b.n	800a3b8 <quorem+0xec>
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	e7ee      	b.n	800a3c2 <quorem+0xf6>
 800a3e4:	0000      	movs	r0, r0
	...

0800a3e8 <_dtoa_r>:
 800a3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ec:	4616      	mov	r6, r2
 800a3ee:	461f      	mov	r7, r3
 800a3f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a3f2:	b099      	sub	sp, #100	; 0x64
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a3fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a3fe:	b974      	cbnz	r4, 800a41e <_dtoa_r+0x36>
 800a400:	2010      	movs	r0, #16
 800a402:	f000 fde3 	bl	800afcc <malloc>
 800a406:	4602      	mov	r2, r0
 800a408:	6268      	str	r0, [r5, #36]	; 0x24
 800a40a:	b920      	cbnz	r0, 800a416 <_dtoa_r+0x2e>
 800a40c:	21ea      	movs	r1, #234	; 0xea
 800a40e:	4ba8      	ldr	r3, [pc, #672]	; (800a6b0 <_dtoa_r+0x2c8>)
 800a410:	48a8      	ldr	r0, [pc, #672]	; (800a6b4 <_dtoa_r+0x2cc>)
 800a412:	f001 fbcf 	bl	800bbb4 <__assert_func>
 800a416:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a41a:	6004      	str	r4, [r0, #0]
 800a41c:	60c4      	str	r4, [r0, #12]
 800a41e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a420:	6819      	ldr	r1, [r3, #0]
 800a422:	b151      	cbz	r1, 800a43a <_dtoa_r+0x52>
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	2301      	movs	r3, #1
 800a428:	4093      	lsls	r3, r2
 800a42a:	604a      	str	r2, [r1, #4]
 800a42c:	608b      	str	r3, [r1, #8]
 800a42e:	4628      	mov	r0, r5
 800a430:	f000 fe22 	bl	800b078 <_Bfree>
 800a434:	2200      	movs	r2, #0
 800a436:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	1e3b      	subs	r3, r7, #0
 800a43c:	bfaf      	iteee	ge
 800a43e:	2300      	movge	r3, #0
 800a440:	2201      	movlt	r2, #1
 800a442:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a446:	9305      	strlt	r3, [sp, #20]
 800a448:	bfa8      	it	ge
 800a44a:	f8c8 3000 	strge.w	r3, [r8]
 800a44e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a452:	4b99      	ldr	r3, [pc, #612]	; (800a6b8 <_dtoa_r+0x2d0>)
 800a454:	bfb8      	it	lt
 800a456:	f8c8 2000 	strlt.w	r2, [r8]
 800a45a:	ea33 0309 	bics.w	r3, r3, r9
 800a45e:	d119      	bne.n	800a494 <_dtoa_r+0xac>
 800a460:	f242 730f 	movw	r3, #9999	; 0x270f
 800a464:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a466:	6013      	str	r3, [r2, #0]
 800a468:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a46c:	4333      	orrs	r3, r6
 800a46e:	f000 857f 	beq.w	800af70 <_dtoa_r+0xb88>
 800a472:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a474:	b953      	cbnz	r3, 800a48c <_dtoa_r+0xa4>
 800a476:	4b91      	ldr	r3, [pc, #580]	; (800a6bc <_dtoa_r+0x2d4>)
 800a478:	e022      	b.n	800a4c0 <_dtoa_r+0xd8>
 800a47a:	4b91      	ldr	r3, [pc, #580]	; (800a6c0 <_dtoa_r+0x2d8>)
 800a47c:	9303      	str	r3, [sp, #12]
 800a47e:	3308      	adds	r3, #8
 800a480:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a482:	6013      	str	r3, [r2, #0]
 800a484:	9803      	ldr	r0, [sp, #12]
 800a486:	b019      	add	sp, #100	; 0x64
 800a488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48c:	4b8b      	ldr	r3, [pc, #556]	; (800a6bc <_dtoa_r+0x2d4>)
 800a48e:	9303      	str	r3, [sp, #12]
 800a490:	3303      	adds	r3, #3
 800a492:	e7f5      	b.n	800a480 <_dtoa_r+0x98>
 800a494:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a498:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a49c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f7f6 fa98 	bl	80009d8 <__aeabi_dcmpeq>
 800a4a8:	4680      	mov	r8, r0
 800a4aa:	b158      	cbz	r0, 800a4c4 <_dtoa_r+0xdc>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 8558 	beq.w	800af6a <_dtoa_r+0xb82>
 800a4ba:	4882      	ldr	r0, [pc, #520]	; (800a6c4 <_dtoa_r+0x2dc>)
 800a4bc:	6018      	str	r0, [r3, #0]
 800a4be:	1e43      	subs	r3, r0, #1
 800a4c0:	9303      	str	r3, [sp, #12]
 800a4c2:	e7df      	b.n	800a484 <_dtoa_r+0x9c>
 800a4c4:	ab16      	add	r3, sp, #88	; 0x58
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	ab17      	add	r3, sp, #92	; 0x5c
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a4d2:	f001 f8b7 	bl	800b644 <__d2b>
 800a4d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a4da:	4683      	mov	fp, r0
 800a4dc:	2c00      	cmp	r4, #0
 800a4de:	d07f      	beq.n	800a5e0 <_dtoa_r+0x1f8>
 800a4e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a4ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a4f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a4f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	4b72      	ldr	r3, [pc, #456]	; (800a6c8 <_dtoa_r+0x2e0>)
 800a4fe:	f7f5 fe4b 	bl	8000198 <__aeabi_dsub>
 800a502:	a365      	add	r3, pc, #404	; (adr r3, 800a698 <_dtoa_r+0x2b0>)
 800a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a508:	f7f5 fffe 	bl	8000508 <__aeabi_dmul>
 800a50c:	a364      	add	r3, pc, #400	; (adr r3, 800a6a0 <_dtoa_r+0x2b8>)
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	f7f5 fe43 	bl	800019c <__adddf3>
 800a516:	4606      	mov	r6, r0
 800a518:	4620      	mov	r0, r4
 800a51a:	460f      	mov	r7, r1
 800a51c:	f7f5 ff8a 	bl	8000434 <__aeabi_i2d>
 800a520:	a361      	add	r3, pc, #388	; (adr r3, 800a6a8 <_dtoa_r+0x2c0>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f7f5 ffef 	bl	8000508 <__aeabi_dmul>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	4630      	mov	r0, r6
 800a530:	4639      	mov	r1, r7
 800a532:	f7f5 fe33 	bl	800019c <__adddf3>
 800a536:	4606      	mov	r6, r0
 800a538:	460f      	mov	r7, r1
 800a53a:	f7f6 fa95 	bl	8000a68 <__aeabi_d2iz>
 800a53e:	2200      	movs	r2, #0
 800a540:	4682      	mov	sl, r0
 800a542:	2300      	movs	r3, #0
 800a544:	4630      	mov	r0, r6
 800a546:	4639      	mov	r1, r7
 800a548:	f7f6 fa50 	bl	80009ec <__aeabi_dcmplt>
 800a54c:	b148      	cbz	r0, 800a562 <_dtoa_r+0x17a>
 800a54e:	4650      	mov	r0, sl
 800a550:	f7f5 ff70 	bl	8000434 <__aeabi_i2d>
 800a554:	4632      	mov	r2, r6
 800a556:	463b      	mov	r3, r7
 800a558:	f7f6 fa3e 	bl	80009d8 <__aeabi_dcmpeq>
 800a55c:	b908      	cbnz	r0, 800a562 <_dtoa_r+0x17a>
 800a55e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a562:	f1ba 0f16 	cmp.w	sl, #22
 800a566:	d858      	bhi.n	800a61a <_dtoa_r+0x232>
 800a568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a56c:	4b57      	ldr	r3, [pc, #348]	; (800a6cc <_dtoa_r+0x2e4>)
 800a56e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	f7f6 fa39 	bl	80009ec <__aeabi_dcmplt>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d04f      	beq.n	800a61e <_dtoa_r+0x236>
 800a57e:	2300      	movs	r3, #0
 800a580:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a584:	930f      	str	r3, [sp, #60]	; 0x3c
 800a586:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a588:	1b1c      	subs	r4, r3, r4
 800a58a:	1e63      	subs	r3, r4, #1
 800a58c:	9309      	str	r3, [sp, #36]	; 0x24
 800a58e:	bf49      	itett	mi
 800a590:	f1c4 0301 	rsbmi	r3, r4, #1
 800a594:	2300      	movpl	r3, #0
 800a596:	9306      	strmi	r3, [sp, #24]
 800a598:	2300      	movmi	r3, #0
 800a59a:	bf54      	ite	pl
 800a59c:	9306      	strpl	r3, [sp, #24]
 800a59e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a5a0:	f1ba 0f00 	cmp.w	sl, #0
 800a5a4:	db3d      	blt.n	800a622 <_dtoa_r+0x23a>
 800a5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a5ac:	4453      	add	r3, sl
 800a5ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5b6:	2b09      	cmp	r3, #9
 800a5b8:	f200 808c 	bhi.w	800a6d4 <_dtoa_r+0x2ec>
 800a5bc:	2b05      	cmp	r3, #5
 800a5be:	bfc4      	itt	gt
 800a5c0:	3b04      	subgt	r3, #4
 800a5c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a5c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5c6:	bfc8      	it	gt
 800a5c8:	2400      	movgt	r4, #0
 800a5ca:	f1a3 0302 	sub.w	r3, r3, #2
 800a5ce:	bfd8      	it	le
 800a5d0:	2401      	movle	r4, #1
 800a5d2:	2b03      	cmp	r3, #3
 800a5d4:	f200 808a 	bhi.w	800a6ec <_dtoa_r+0x304>
 800a5d8:	e8df f003 	tbb	[pc, r3]
 800a5dc:	5b4d4f2d 	.word	0x5b4d4f2d
 800a5e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a5e4:	441c      	add	r4, r3
 800a5e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a5ea:	2b20      	cmp	r3, #32
 800a5ec:	bfc3      	ittte	gt
 800a5ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a5f6:	fa09 f303 	lslgt.w	r3, r9, r3
 800a5fa:	f1c3 0320 	rsble	r3, r3, #32
 800a5fe:	bfc6      	itte	gt
 800a600:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a604:	4318      	orrgt	r0, r3
 800a606:	fa06 f003 	lslle.w	r0, r6, r3
 800a60a:	f7f5 ff03 	bl	8000414 <__aeabi_ui2d>
 800a60e:	2301      	movs	r3, #1
 800a610:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a614:	3c01      	subs	r4, #1
 800a616:	9313      	str	r3, [sp, #76]	; 0x4c
 800a618:	e76f      	b.n	800a4fa <_dtoa_r+0x112>
 800a61a:	2301      	movs	r3, #1
 800a61c:	e7b2      	b.n	800a584 <_dtoa_r+0x19c>
 800a61e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a620:	e7b1      	b.n	800a586 <_dtoa_r+0x19e>
 800a622:	9b06      	ldr	r3, [sp, #24]
 800a624:	eba3 030a 	sub.w	r3, r3, sl
 800a628:	9306      	str	r3, [sp, #24]
 800a62a:	f1ca 0300 	rsb	r3, sl, #0
 800a62e:	930a      	str	r3, [sp, #40]	; 0x28
 800a630:	2300      	movs	r3, #0
 800a632:	930e      	str	r3, [sp, #56]	; 0x38
 800a634:	e7be      	b.n	800a5b4 <_dtoa_r+0x1cc>
 800a636:	2300      	movs	r3, #0
 800a638:	930b      	str	r3, [sp, #44]	; 0x2c
 800a63a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	dc58      	bgt.n	800a6f2 <_dtoa_r+0x30a>
 800a640:	f04f 0901 	mov.w	r9, #1
 800a644:	464b      	mov	r3, r9
 800a646:	f8cd 9020 	str.w	r9, [sp, #32]
 800a64a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a64e:	2200      	movs	r2, #0
 800a650:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a652:	6042      	str	r2, [r0, #4]
 800a654:	2204      	movs	r2, #4
 800a656:	f102 0614 	add.w	r6, r2, #20
 800a65a:	429e      	cmp	r6, r3
 800a65c:	6841      	ldr	r1, [r0, #4]
 800a65e:	d94e      	bls.n	800a6fe <_dtoa_r+0x316>
 800a660:	4628      	mov	r0, r5
 800a662:	f000 fcc9 	bl	800aff8 <_Balloc>
 800a666:	9003      	str	r0, [sp, #12]
 800a668:	2800      	cmp	r0, #0
 800a66a:	d14c      	bne.n	800a706 <_dtoa_r+0x31e>
 800a66c:	4602      	mov	r2, r0
 800a66e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a672:	4b17      	ldr	r3, [pc, #92]	; (800a6d0 <_dtoa_r+0x2e8>)
 800a674:	e6cc      	b.n	800a410 <_dtoa_r+0x28>
 800a676:	2301      	movs	r3, #1
 800a678:	e7de      	b.n	800a638 <_dtoa_r+0x250>
 800a67a:	2300      	movs	r3, #0
 800a67c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a67e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a680:	eb0a 0903 	add.w	r9, sl, r3
 800a684:	f109 0301 	add.w	r3, r9, #1
 800a688:	2b01      	cmp	r3, #1
 800a68a:	9308      	str	r3, [sp, #32]
 800a68c:	bfb8      	it	lt
 800a68e:	2301      	movlt	r3, #1
 800a690:	e7dd      	b.n	800a64e <_dtoa_r+0x266>
 800a692:	2301      	movs	r3, #1
 800a694:	e7f2      	b.n	800a67c <_dtoa_r+0x294>
 800a696:	bf00      	nop
 800a698:	636f4361 	.word	0x636f4361
 800a69c:	3fd287a7 	.word	0x3fd287a7
 800a6a0:	8b60c8b3 	.word	0x8b60c8b3
 800a6a4:	3fc68a28 	.word	0x3fc68a28
 800a6a8:	509f79fb 	.word	0x509f79fb
 800a6ac:	3fd34413 	.word	0x3fd34413
 800a6b0:	0800c929 	.word	0x0800c929
 800a6b4:	0800c940 	.word	0x0800c940
 800a6b8:	7ff00000 	.word	0x7ff00000
 800a6bc:	0800c925 	.word	0x0800c925
 800a6c0:	0800c91c 	.word	0x0800c91c
 800a6c4:	0800c8f9 	.word	0x0800c8f9
 800a6c8:	3ff80000 	.word	0x3ff80000
 800a6cc:	0800ca30 	.word	0x0800ca30
 800a6d0:	0800c99b 	.word	0x0800c99b
 800a6d4:	2401      	movs	r4, #1
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a6da:	9322      	str	r3, [sp, #136]	; 0x88
 800a6dc:	f04f 39ff 	mov.w	r9, #4294967295
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	2312      	movs	r3, #18
 800a6e4:	f8cd 9020 	str.w	r9, [sp, #32]
 800a6e8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a6ea:	e7b0      	b.n	800a64e <_dtoa_r+0x266>
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6f0:	e7f4      	b.n	800a6dc <_dtoa_r+0x2f4>
 800a6f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a6f6:	464b      	mov	r3, r9
 800a6f8:	f8cd 9020 	str.w	r9, [sp, #32]
 800a6fc:	e7a7      	b.n	800a64e <_dtoa_r+0x266>
 800a6fe:	3101      	adds	r1, #1
 800a700:	6041      	str	r1, [r0, #4]
 800a702:	0052      	lsls	r2, r2, #1
 800a704:	e7a7      	b.n	800a656 <_dtoa_r+0x26e>
 800a706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a708:	9a03      	ldr	r2, [sp, #12]
 800a70a:	601a      	str	r2, [r3, #0]
 800a70c:	9b08      	ldr	r3, [sp, #32]
 800a70e:	2b0e      	cmp	r3, #14
 800a710:	f200 80a8 	bhi.w	800a864 <_dtoa_r+0x47c>
 800a714:	2c00      	cmp	r4, #0
 800a716:	f000 80a5 	beq.w	800a864 <_dtoa_r+0x47c>
 800a71a:	f1ba 0f00 	cmp.w	sl, #0
 800a71e:	dd34      	ble.n	800a78a <_dtoa_r+0x3a2>
 800a720:	4a9a      	ldr	r2, [pc, #616]	; (800a98c <_dtoa_r+0x5a4>)
 800a722:	f00a 030f 	and.w	r3, sl, #15
 800a726:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a72a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a72e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a732:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a736:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a73a:	d016      	beq.n	800a76a <_dtoa_r+0x382>
 800a73c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a740:	4b93      	ldr	r3, [pc, #588]	; (800a990 <_dtoa_r+0x5a8>)
 800a742:	2703      	movs	r7, #3
 800a744:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a748:	f7f6 f808 	bl	800075c <__aeabi_ddiv>
 800a74c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a750:	f004 040f 	and.w	r4, r4, #15
 800a754:	4e8e      	ldr	r6, [pc, #568]	; (800a990 <_dtoa_r+0x5a8>)
 800a756:	b954      	cbnz	r4, 800a76e <_dtoa_r+0x386>
 800a758:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a75c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a760:	f7f5 fffc 	bl	800075c <__aeabi_ddiv>
 800a764:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a768:	e029      	b.n	800a7be <_dtoa_r+0x3d6>
 800a76a:	2702      	movs	r7, #2
 800a76c:	e7f2      	b.n	800a754 <_dtoa_r+0x36c>
 800a76e:	07e1      	lsls	r1, r4, #31
 800a770:	d508      	bpl.n	800a784 <_dtoa_r+0x39c>
 800a772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a776:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a77a:	f7f5 fec5 	bl	8000508 <__aeabi_dmul>
 800a77e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a782:	3701      	adds	r7, #1
 800a784:	1064      	asrs	r4, r4, #1
 800a786:	3608      	adds	r6, #8
 800a788:	e7e5      	b.n	800a756 <_dtoa_r+0x36e>
 800a78a:	f000 80a5 	beq.w	800a8d8 <_dtoa_r+0x4f0>
 800a78e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a792:	f1ca 0400 	rsb	r4, sl, #0
 800a796:	4b7d      	ldr	r3, [pc, #500]	; (800a98c <_dtoa_r+0x5a4>)
 800a798:	f004 020f 	and.w	r2, r4, #15
 800a79c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f7f5 feb0 	bl	8000508 <__aeabi_dmul>
 800a7a8:	2702      	movs	r7, #2
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7b0:	4e77      	ldr	r6, [pc, #476]	; (800a990 <_dtoa_r+0x5a8>)
 800a7b2:	1124      	asrs	r4, r4, #4
 800a7b4:	2c00      	cmp	r4, #0
 800a7b6:	f040 8084 	bne.w	800a8c2 <_dtoa_r+0x4da>
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1d2      	bne.n	800a764 <_dtoa_r+0x37c>
 800a7be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 808b 	beq.w	800a8dc <_dtoa_r+0x4f4>
 800a7c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a7ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a7ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	4b6f      	ldr	r3, [pc, #444]	; (800a994 <_dtoa_r+0x5ac>)
 800a7d6:	f7f6 f909 	bl	80009ec <__aeabi_dcmplt>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d07e      	beq.n	800a8dc <_dtoa_r+0x4f4>
 800a7de:	9b08      	ldr	r3, [sp, #32]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d07b      	beq.n	800a8dc <_dtoa_r+0x4f4>
 800a7e4:	f1b9 0f00 	cmp.w	r9, #0
 800a7e8:	dd38      	ble.n	800a85c <_dtoa_r+0x474>
 800a7ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	4b69      	ldr	r3, [pc, #420]	; (800a998 <_dtoa_r+0x5b0>)
 800a7f2:	f7f5 fe89 	bl	8000508 <__aeabi_dmul>
 800a7f6:	464c      	mov	r4, r9
 800a7f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7fc:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a800:	3701      	adds	r7, #1
 800a802:	4638      	mov	r0, r7
 800a804:	f7f5 fe16 	bl	8000434 <__aeabi_i2d>
 800a808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a80c:	f7f5 fe7c 	bl	8000508 <__aeabi_dmul>
 800a810:	2200      	movs	r2, #0
 800a812:	4b62      	ldr	r3, [pc, #392]	; (800a99c <_dtoa_r+0x5b4>)
 800a814:	f7f5 fcc2 	bl	800019c <__adddf3>
 800a818:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a81c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a820:	9611      	str	r6, [sp, #68]	; 0x44
 800a822:	2c00      	cmp	r4, #0
 800a824:	d15d      	bne.n	800a8e2 <_dtoa_r+0x4fa>
 800a826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a82a:	2200      	movs	r2, #0
 800a82c:	4b5c      	ldr	r3, [pc, #368]	; (800a9a0 <_dtoa_r+0x5b8>)
 800a82e:	f7f5 fcb3 	bl	8000198 <__aeabi_dsub>
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a83a:	4633      	mov	r3, r6
 800a83c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a83e:	f7f6 f8f3 	bl	8000a28 <__aeabi_dcmpgt>
 800a842:	2800      	cmp	r0, #0
 800a844:	f040 829c 	bne.w	800ad80 <_dtoa_r+0x998>
 800a848:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a84c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a84e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a852:	f7f6 f8cb 	bl	80009ec <__aeabi_dcmplt>
 800a856:	2800      	cmp	r0, #0
 800a858:	f040 8290 	bne.w	800ad7c <_dtoa_r+0x994>
 800a85c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a860:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a864:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a866:	2b00      	cmp	r3, #0
 800a868:	f2c0 8152 	blt.w	800ab10 <_dtoa_r+0x728>
 800a86c:	f1ba 0f0e 	cmp.w	sl, #14
 800a870:	f300 814e 	bgt.w	800ab10 <_dtoa_r+0x728>
 800a874:	4b45      	ldr	r3, [pc, #276]	; (800a98c <_dtoa_r+0x5a4>)
 800a876:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a87a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a87e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a882:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a884:	2b00      	cmp	r3, #0
 800a886:	f280 80db 	bge.w	800aa40 <_dtoa_r+0x658>
 800a88a:	9b08      	ldr	r3, [sp, #32]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f300 80d7 	bgt.w	800aa40 <_dtoa_r+0x658>
 800a892:	f040 8272 	bne.w	800ad7a <_dtoa_r+0x992>
 800a896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a89a:	2200      	movs	r2, #0
 800a89c:	4b40      	ldr	r3, [pc, #256]	; (800a9a0 <_dtoa_r+0x5b8>)
 800a89e:	f7f5 fe33 	bl	8000508 <__aeabi_dmul>
 800a8a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8a6:	f7f6 f8b5 	bl	8000a14 <__aeabi_dcmpge>
 800a8aa:	9c08      	ldr	r4, [sp, #32]
 800a8ac:	4626      	mov	r6, r4
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f040 8248 	bne.w	800ad44 <_dtoa_r+0x95c>
 800a8b4:	2331      	movs	r3, #49	; 0x31
 800a8b6:	9f03      	ldr	r7, [sp, #12]
 800a8b8:	f10a 0a01 	add.w	sl, sl, #1
 800a8bc:	f807 3b01 	strb.w	r3, [r7], #1
 800a8c0:	e244      	b.n	800ad4c <_dtoa_r+0x964>
 800a8c2:	07e2      	lsls	r2, r4, #31
 800a8c4:	d505      	bpl.n	800a8d2 <_dtoa_r+0x4ea>
 800a8c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8ca:	f7f5 fe1d 	bl	8000508 <__aeabi_dmul>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	3701      	adds	r7, #1
 800a8d2:	1064      	asrs	r4, r4, #1
 800a8d4:	3608      	adds	r6, #8
 800a8d6:	e76d      	b.n	800a7b4 <_dtoa_r+0x3cc>
 800a8d8:	2702      	movs	r7, #2
 800a8da:	e770      	b.n	800a7be <_dtoa_r+0x3d6>
 800a8dc:	46d0      	mov	r8, sl
 800a8de:	9c08      	ldr	r4, [sp, #32]
 800a8e0:	e78f      	b.n	800a802 <_dtoa_r+0x41a>
 800a8e2:	9903      	ldr	r1, [sp, #12]
 800a8e4:	4b29      	ldr	r3, [pc, #164]	; (800a98c <_dtoa_r+0x5a4>)
 800a8e6:	4421      	add	r1, r4
 800a8e8:	9112      	str	r1, [sp, #72]	; 0x48
 800a8ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a8f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8f8:	2900      	cmp	r1, #0
 800a8fa:	d055      	beq.n	800a9a8 <_dtoa_r+0x5c0>
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	4929      	ldr	r1, [pc, #164]	; (800a9a4 <_dtoa_r+0x5bc>)
 800a900:	f7f5 ff2c 	bl	800075c <__aeabi_ddiv>
 800a904:	463b      	mov	r3, r7
 800a906:	4632      	mov	r2, r6
 800a908:	f7f5 fc46 	bl	8000198 <__aeabi_dsub>
 800a90c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a910:	9f03      	ldr	r7, [sp, #12]
 800a912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a916:	f7f6 f8a7 	bl	8000a68 <__aeabi_d2iz>
 800a91a:	4604      	mov	r4, r0
 800a91c:	f7f5 fd8a 	bl	8000434 <__aeabi_i2d>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a928:	f7f5 fc36 	bl	8000198 <__aeabi_dsub>
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	3430      	adds	r4, #48	; 0x30
 800a932:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a936:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a93a:	f807 4b01 	strb.w	r4, [r7], #1
 800a93e:	f7f6 f855 	bl	80009ec <__aeabi_dcmplt>
 800a942:	2800      	cmp	r0, #0
 800a944:	d174      	bne.n	800aa30 <_dtoa_r+0x648>
 800a946:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a94a:	2000      	movs	r0, #0
 800a94c:	4911      	ldr	r1, [pc, #68]	; (800a994 <_dtoa_r+0x5ac>)
 800a94e:	f7f5 fc23 	bl	8000198 <__aeabi_dsub>
 800a952:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a956:	f7f6 f849 	bl	80009ec <__aeabi_dcmplt>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	f040 80b7 	bne.w	800aace <_dtoa_r+0x6e6>
 800a960:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a962:	429f      	cmp	r7, r3
 800a964:	f43f af7a 	beq.w	800a85c <_dtoa_r+0x474>
 800a968:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a96c:	2200      	movs	r2, #0
 800a96e:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <_dtoa_r+0x5b0>)
 800a970:	f7f5 fdca 	bl	8000508 <__aeabi_dmul>
 800a974:	2200      	movs	r2, #0
 800a976:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a97a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a97e:	4b06      	ldr	r3, [pc, #24]	; (800a998 <_dtoa_r+0x5b0>)
 800a980:	f7f5 fdc2 	bl	8000508 <__aeabi_dmul>
 800a984:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a988:	e7c3      	b.n	800a912 <_dtoa_r+0x52a>
 800a98a:	bf00      	nop
 800a98c:	0800ca30 	.word	0x0800ca30
 800a990:	0800ca08 	.word	0x0800ca08
 800a994:	3ff00000 	.word	0x3ff00000
 800a998:	40240000 	.word	0x40240000
 800a99c:	401c0000 	.word	0x401c0000
 800a9a0:	40140000 	.word	0x40140000
 800a9a4:	3fe00000 	.word	0x3fe00000
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	4639      	mov	r1, r7
 800a9ac:	f7f5 fdac 	bl	8000508 <__aeabi_dmul>
 800a9b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9b6:	9c03      	ldr	r4, [sp, #12]
 800a9b8:	9314      	str	r3, [sp, #80]	; 0x50
 800a9ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9be:	f7f6 f853 	bl	8000a68 <__aeabi_d2iz>
 800a9c2:	9015      	str	r0, [sp, #84]	; 0x54
 800a9c4:	f7f5 fd36 	bl	8000434 <__aeabi_i2d>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9d0:	f7f5 fbe2 	bl	8000198 <__aeabi_dsub>
 800a9d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	3330      	adds	r3, #48	; 0x30
 800a9da:	f804 3b01 	strb.w	r3, [r4], #1
 800a9de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9e0:	460f      	mov	r7, r1
 800a9e2:	429c      	cmp	r4, r3
 800a9e4:	f04f 0200 	mov.w	r2, #0
 800a9e8:	d124      	bne.n	800aa34 <_dtoa_r+0x64c>
 800a9ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9ee:	4bb0      	ldr	r3, [pc, #704]	; (800acb0 <_dtoa_r+0x8c8>)
 800a9f0:	f7f5 fbd4 	bl	800019c <__adddf3>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	f7f6 f814 	bl	8000a28 <__aeabi_dcmpgt>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d163      	bne.n	800aacc <_dtoa_r+0x6e4>
 800aa04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa08:	2000      	movs	r0, #0
 800aa0a:	49a9      	ldr	r1, [pc, #676]	; (800acb0 <_dtoa_r+0x8c8>)
 800aa0c:	f7f5 fbc4 	bl	8000198 <__aeabi_dsub>
 800aa10:	4602      	mov	r2, r0
 800aa12:	460b      	mov	r3, r1
 800aa14:	4630      	mov	r0, r6
 800aa16:	4639      	mov	r1, r7
 800aa18:	f7f5 ffe8 	bl	80009ec <__aeabi_dcmplt>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	f43f af1d 	beq.w	800a85c <_dtoa_r+0x474>
 800aa22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aa24:	1e7b      	subs	r3, r7, #1
 800aa26:	9314      	str	r3, [sp, #80]	; 0x50
 800aa28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800aa2c:	2b30      	cmp	r3, #48	; 0x30
 800aa2e:	d0f8      	beq.n	800aa22 <_dtoa_r+0x63a>
 800aa30:	46c2      	mov	sl, r8
 800aa32:	e03b      	b.n	800aaac <_dtoa_r+0x6c4>
 800aa34:	4b9f      	ldr	r3, [pc, #636]	; (800acb4 <_dtoa_r+0x8cc>)
 800aa36:	f7f5 fd67 	bl	8000508 <__aeabi_dmul>
 800aa3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa3e:	e7bc      	b.n	800a9ba <_dtoa_r+0x5d2>
 800aa40:	9f03      	ldr	r7, [sp, #12]
 800aa42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800aa46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	f7f5 fe85 	bl	800075c <__aeabi_ddiv>
 800aa52:	f7f6 f809 	bl	8000a68 <__aeabi_d2iz>
 800aa56:	4604      	mov	r4, r0
 800aa58:	f7f5 fcec 	bl	8000434 <__aeabi_i2d>
 800aa5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa60:	f7f5 fd52 	bl	8000508 <__aeabi_dmul>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	4640      	mov	r0, r8
 800aa6a:	4649      	mov	r1, r9
 800aa6c:	f7f5 fb94 	bl	8000198 <__aeabi_dsub>
 800aa70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800aa74:	f807 6b01 	strb.w	r6, [r7], #1
 800aa78:	9e03      	ldr	r6, [sp, #12]
 800aa7a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800aa7e:	1bbe      	subs	r6, r7, r6
 800aa80:	45b4      	cmp	ip, r6
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	d136      	bne.n	800aaf6 <_dtoa_r+0x70e>
 800aa88:	f7f5 fb88 	bl	800019c <__adddf3>
 800aa8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa90:	4680      	mov	r8, r0
 800aa92:	4689      	mov	r9, r1
 800aa94:	f7f5 ffc8 	bl	8000a28 <__aeabi_dcmpgt>
 800aa98:	bb58      	cbnz	r0, 800aaf2 <_dtoa_r+0x70a>
 800aa9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa9e:	4640      	mov	r0, r8
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	f7f5 ff99 	bl	80009d8 <__aeabi_dcmpeq>
 800aaa6:	b108      	cbz	r0, 800aaac <_dtoa_r+0x6c4>
 800aaa8:	07e1      	lsls	r1, r4, #31
 800aaaa:	d422      	bmi.n	800aaf2 <_dtoa_r+0x70a>
 800aaac:	4628      	mov	r0, r5
 800aaae:	4659      	mov	r1, fp
 800aab0:	f000 fae2 	bl	800b078 <_Bfree>
 800aab4:	2300      	movs	r3, #0
 800aab6:	703b      	strb	r3, [r7, #0]
 800aab8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aaba:	f10a 0001 	add.w	r0, sl, #1
 800aabe:	6018      	str	r0, [r3, #0]
 800aac0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f43f acde 	beq.w	800a484 <_dtoa_r+0x9c>
 800aac8:	601f      	str	r7, [r3, #0]
 800aaca:	e4db      	b.n	800a484 <_dtoa_r+0x9c>
 800aacc:	4627      	mov	r7, r4
 800aace:	463b      	mov	r3, r7
 800aad0:	461f      	mov	r7, r3
 800aad2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aad6:	2a39      	cmp	r2, #57	; 0x39
 800aad8:	d107      	bne.n	800aaea <_dtoa_r+0x702>
 800aada:	9a03      	ldr	r2, [sp, #12]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d1f7      	bne.n	800aad0 <_dtoa_r+0x6e8>
 800aae0:	2230      	movs	r2, #48	; 0x30
 800aae2:	9903      	ldr	r1, [sp, #12]
 800aae4:	f108 0801 	add.w	r8, r8, #1
 800aae8:	700a      	strb	r2, [r1, #0]
 800aaea:	781a      	ldrb	r2, [r3, #0]
 800aaec:	3201      	adds	r2, #1
 800aaee:	701a      	strb	r2, [r3, #0]
 800aaf0:	e79e      	b.n	800aa30 <_dtoa_r+0x648>
 800aaf2:	46d0      	mov	r8, sl
 800aaf4:	e7eb      	b.n	800aace <_dtoa_r+0x6e6>
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	4b6e      	ldr	r3, [pc, #440]	; (800acb4 <_dtoa_r+0x8cc>)
 800aafa:	f7f5 fd05 	bl	8000508 <__aeabi_dmul>
 800aafe:	2200      	movs	r2, #0
 800ab00:	2300      	movs	r3, #0
 800ab02:	4680      	mov	r8, r0
 800ab04:	4689      	mov	r9, r1
 800ab06:	f7f5 ff67 	bl	80009d8 <__aeabi_dcmpeq>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d09b      	beq.n	800aa46 <_dtoa_r+0x65e>
 800ab0e:	e7cd      	b.n	800aaac <_dtoa_r+0x6c4>
 800ab10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab12:	2a00      	cmp	r2, #0
 800ab14:	f000 80d0 	beq.w	800acb8 <_dtoa_r+0x8d0>
 800ab18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ab1a:	2a01      	cmp	r2, #1
 800ab1c:	f300 80ae 	bgt.w	800ac7c <_dtoa_r+0x894>
 800ab20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab22:	2a00      	cmp	r2, #0
 800ab24:	f000 80a6 	beq.w	800ac74 <_dtoa_r+0x88c>
 800ab28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab2e:	9f06      	ldr	r7, [sp, #24]
 800ab30:	9a06      	ldr	r2, [sp, #24]
 800ab32:	2101      	movs	r1, #1
 800ab34:	441a      	add	r2, r3
 800ab36:	9206      	str	r2, [sp, #24]
 800ab38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	441a      	add	r2, r3
 800ab3e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab40:	f000 fb50 	bl	800b1e4 <__i2b>
 800ab44:	4606      	mov	r6, r0
 800ab46:	2f00      	cmp	r7, #0
 800ab48:	dd0c      	ble.n	800ab64 <_dtoa_r+0x77c>
 800ab4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	dd09      	ble.n	800ab64 <_dtoa_r+0x77c>
 800ab50:	42bb      	cmp	r3, r7
 800ab52:	bfa8      	it	ge
 800ab54:	463b      	movge	r3, r7
 800ab56:	9a06      	ldr	r2, [sp, #24]
 800ab58:	1aff      	subs	r7, r7, r3
 800ab5a:	1ad2      	subs	r2, r2, r3
 800ab5c:	9206      	str	r2, [sp, #24]
 800ab5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	9309      	str	r3, [sp, #36]	; 0x24
 800ab64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab66:	b1f3      	cbz	r3, 800aba6 <_dtoa_r+0x7be>
 800ab68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f000 80a8 	beq.w	800acc0 <_dtoa_r+0x8d8>
 800ab70:	2c00      	cmp	r4, #0
 800ab72:	dd10      	ble.n	800ab96 <_dtoa_r+0x7ae>
 800ab74:	4631      	mov	r1, r6
 800ab76:	4622      	mov	r2, r4
 800ab78:	4628      	mov	r0, r5
 800ab7a:	f000 fbf1 	bl	800b360 <__pow5mult>
 800ab7e:	465a      	mov	r2, fp
 800ab80:	4601      	mov	r1, r0
 800ab82:	4606      	mov	r6, r0
 800ab84:	4628      	mov	r0, r5
 800ab86:	f000 fb43 	bl	800b210 <__multiply>
 800ab8a:	4680      	mov	r8, r0
 800ab8c:	4659      	mov	r1, fp
 800ab8e:	4628      	mov	r0, r5
 800ab90:	f000 fa72 	bl	800b078 <_Bfree>
 800ab94:	46c3      	mov	fp, r8
 800ab96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab98:	1b1a      	subs	r2, r3, r4
 800ab9a:	d004      	beq.n	800aba6 <_dtoa_r+0x7be>
 800ab9c:	4659      	mov	r1, fp
 800ab9e:	4628      	mov	r0, r5
 800aba0:	f000 fbde 	bl	800b360 <__pow5mult>
 800aba4:	4683      	mov	fp, r0
 800aba6:	2101      	movs	r1, #1
 800aba8:	4628      	mov	r0, r5
 800abaa:	f000 fb1b 	bl	800b1e4 <__i2b>
 800abae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abb0:	4604      	mov	r4, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f340 8086 	ble.w	800acc4 <_dtoa_r+0x8dc>
 800abb8:	461a      	mov	r2, r3
 800abba:	4601      	mov	r1, r0
 800abbc:	4628      	mov	r0, r5
 800abbe:	f000 fbcf 	bl	800b360 <__pow5mult>
 800abc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abc4:	4604      	mov	r4, r0
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	dd7f      	ble.n	800acca <_dtoa_r+0x8e2>
 800abca:	f04f 0800 	mov.w	r8, #0
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abd4:	6918      	ldr	r0, [r3, #16]
 800abd6:	f000 fab7 	bl	800b148 <__hi0bits>
 800abda:	f1c0 0020 	rsb	r0, r0, #32
 800abde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe0:	4418      	add	r0, r3
 800abe2:	f010 001f 	ands.w	r0, r0, #31
 800abe6:	f000 8092 	beq.w	800ad0e <_dtoa_r+0x926>
 800abea:	f1c0 0320 	rsb	r3, r0, #32
 800abee:	2b04      	cmp	r3, #4
 800abf0:	f340 808a 	ble.w	800ad08 <_dtoa_r+0x920>
 800abf4:	f1c0 001c 	rsb	r0, r0, #28
 800abf8:	9b06      	ldr	r3, [sp, #24]
 800abfa:	4407      	add	r7, r0
 800abfc:	4403      	add	r3, r0
 800abfe:	9306      	str	r3, [sp, #24]
 800ac00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac02:	4403      	add	r3, r0
 800ac04:	9309      	str	r3, [sp, #36]	; 0x24
 800ac06:	9b06      	ldr	r3, [sp, #24]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	dd05      	ble.n	800ac18 <_dtoa_r+0x830>
 800ac0c:	4659      	mov	r1, fp
 800ac0e:	461a      	mov	r2, r3
 800ac10:	4628      	mov	r0, r5
 800ac12:	f000 fbff 	bl	800b414 <__lshift>
 800ac16:	4683      	mov	fp, r0
 800ac18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	dd05      	ble.n	800ac2a <_dtoa_r+0x842>
 800ac1e:	4621      	mov	r1, r4
 800ac20:	461a      	mov	r2, r3
 800ac22:	4628      	mov	r0, r5
 800ac24:	f000 fbf6 	bl	800b414 <__lshift>
 800ac28:	4604      	mov	r4, r0
 800ac2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d070      	beq.n	800ad12 <_dtoa_r+0x92a>
 800ac30:	4621      	mov	r1, r4
 800ac32:	4658      	mov	r0, fp
 800ac34:	f000 fc5e 	bl	800b4f4 <__mcmp>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	da6a      	bge.n	800ad12 <_dtoa_r+0x92a>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	4659      	mov	r1, fp
 800ac40:	220a      	movs	r2, #10
 800ac42:	4628      	mov	r0, r5
 800ac44:	f000 fa3a 	bl	800b0bc <__multadd>
 800ac48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac4a:	4683      	mov	fp, r0
 800ac4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f000 8194 	beq.w	800af7e <_dtoa_r+0xb96>
 800ac56:	4631      	mov	r1, r6
 800ac58:	2300      	movs	r3, #0
 800ac5a:	220a      	movs	r2, #10
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	f000 fa2d 	bl	800b0bc <__multadd>
 800ac62:	f1b9 0f00 	cmp.w	r9, #0
 800ac66:	4606      	mov	r6, r0
 800ac68:	f300 8093 	bgt.w	800ad92 <_dtoa_r+0x9aa>
 800ac6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	dc57      	bgt.n	800ad22 <_dtoa_r+0x93a>
 800ac72:	e08e      	b.n	800ad92 <_dtoa_r+0x9aa>
 800ac74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac7a:	e757      	b.n	800ab2c <_dtoa_r+0x744>
 800ac7c:	9b08      	ldr	r3, [sp, #32]
 800ac7e:	1e5c      	subs	r4, r3, #1
 800ac80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac82:	42a3      	cmp	r3, r4
 800ac84:	bfb7      	itett	lt
 800ac86:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ac88:	1b1c      	subge	r4, r3, r4
 800ac8a:	1ae2      	sublt	r2, r4, r3
 800ac8c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ac8e:	bfbe      	ittt	lt
 800ac90:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ac92:	189b      	addlt	r3, r3, r2
 800ac94:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ac96:	9b08      	ldr	r3, [sp, #32]
 800ac98:	bfb8      	it	lt
 800ac9a:	2400      	movlt	r4, #0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	bfbb      	ittet	lt
 800aca0:	9b06      	ldrlt	r3, [sp, #24]
 800aca2:	9a08      	ldrlt	r2, [sp, #32]
 800aca4:	9f06      	ldrge	r7, [sp, #24]
 800aca6:	1a9f      	sublt	r7, r3, r2
 800aca8:	bfac      	ite	ge
 800acaa:	9b08      	ldrge	r3, [sp, #32]
 800acac:	2300      	movlt	r3, #0
 800acae:	e73f      	b.n	800ab30 <_dtoa_r+0x748>
 800acb0:	3fe00000 	.word	0x3fe00000
 800acb4:	40240000 	.word	0x40240000
 800acb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800acba:	9f06      	ldr	r7, [sp, #24]
 800acbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800acbe:	e742      	b.n	800ab46 <_dtoa_r+0x75e>
 800acc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acc2:	e76b      	b.n	800ab9c <_dtoa_r+0x7b4>
 800acc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	dc19      	bgt.n	800acfe <_dtoa_r+0x916>
 800acca:	9b04      	ldr	r3, [sp, #16]
 800accc:	b9bb      	cbnz	r3, 800acfe <_dtoa_r+0x916>
 800acce:	9b05      	ldr	r3, [sp, #20]
 800acd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acd4:	b99b      	cbnz	r3, 800acfe <_dtoa_r+0x916>
 800acd6:	9b05      	ldr	r3, [sp, #20]
 800acd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acdc:	0d1b      	lsrs	r3, r3, #20
 800acde:	051b      	lsls	r3, r3, #20
 800ace0:	b183      	cbz	r3, 800ad04 <_dtoa_r+0x91c>
 800ace2:	f04f 0801 	mov.w	r8, #1
 800ace6:	9b06      	ldr	r3, [sp, #24]
 800ace8:	3301      	adds	r3, #1
 800acea:	9306      	str	r3, [sp, #24]
 800acec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acee:	3301      	adds	r3, #1
 800acf0:	9309      	str	r3, [sp, #36]	; 0x24
 800acf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f47f af6a 	bne.w	800abce <_dtoa_r+0x7e6>
 800acfa:	2001      	movs	r0, #1
 800acfc:	e76f      	b.n	800abde <_dtoa_r+0x7f6>
 800acfe:	f04f 0800 	mov.w	r8, #0
 800ad02:	e7f6      	b.n	800acf2 <_dtoa_r+0x90a>
 800ad04:	4698      	mov	r8, r3
 800ad06:	e7f4      	b.n	800acf2 <_dtoa_r+0x90a>
 800ad08:	f43f af7d 	beq.w	800ac06 <_dtoa_r+0x81e>
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	301c      	adds	r0, #28
 800ad10:	e772      	b.n	800abf8 <_dtoa_r+0x810>
 800ad12:	9b08      	ldr	r3, [sp, #32]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	dc36      	bgt.n	800ad86 <_dtoa_r+0x99e>
 800ad18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	dd33      	ble.n	800ad86 <_dtoa_r+0x99e>
 800ad1e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad22:	f1b9 0f00 	cmp.w	r9, #0
 800ad26:	d10d      	bne.n	800ad44 <_dtoa_r+0x95c>
 800ad28:	4621      	mov	r1, r4
 800ad2a:	464b      	mov	r3, r9
 800ad2c:	2205      	movs	r2, #5
 800ad2e:	4628      	mov	r0, r5
 800ad30:	f000 f9c4 	bl	800b0bc <__multadd>
 800ad34:	4601      	mov	r1, r0
 800ad36:	4604      	mov	r4, r0
 800ad38:	4658      	mov	r0, fp
 800ad3a:	f000 fbdb 	bl	800b4f4 <__mcmp>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	f73f adb8 	bgt.w	800a8b4 <_dtoa_r+0x4cc>
 800ad44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad46:	9f03      	ldr	r7, [sp, #12]
 800ad48:	ea6f 0a03 	mvn.w	sl, r3
 800ad4c:	f04f 0800 	mov.w	r8, #0
 800ad50:	4621      	mov	r1, r4
 800ad52:	4628      	mov	r0, r5
 800ad54:	f000 f990 	bl	800b078 <_Bfree>
 800ad58:	2e00      	cmp	r6, #0
 800ad5a:	f43f aea7 	beq.w	800aaac <_dtoa_r+0x6c4>
 800ad5e:	f1b8 0f00 	cmp.w	r8, #0
 800ad62:	d005      	beq.n	800ad70 <_dtoa_r+0x988>
 800ad64:	45b0      	cmp	r8, r6
 800ad66:	d003      	beq.n	800ad70 <_dtoa_r+0x988>
 800ad68:	4641      	mov	r1, r8
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	f000 f984 	bl	800b078 <_Bfree>
 800ad70:	4631      	mov	r1, r6
 800ad72:	4628      	mov	r0, r5
 800ad74:	f000 f980 	bl	800b078 <_Bfree>
 800ad78:	e698      	b.n	800aaac <_dtoa_r+0x6c4>
 800ad7a:	2400      	movs	r4, #0
 800ad7c:	4626      	mov	r6, r4
 800ad7e:	e7e1      	b.n	800ad44 <_dtoa_r+0x95c>
 800ad80:	46c2      	mov	sl, r8
 800ad82:	4626      	mov	r6, r4
 800ad84:	e596      	b.n	800a8b4 <_dtoa_r+0x4cc>
 800ad86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f000 80fd 	beq.w	800af8c <_dtoa_r+0xba4>
 800ad92:	2f00      	cmp	r7, #0
 800ad94:	dd05      	ble.n	800ada2 <_dtoa_r+0x9ba>
 800ad96:	4631      	mov	r1, r6
 800ad98:	463a      	mov	r2, r7
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	f000 fb3a 	bl	800b414 <__lshift>
 800ada0:	4606      	mov	r6, r0
 800ada2:	f1b8 0f00 	cmp.w	r8, #0
 800ada6:	d05c      	beq.n	800ae62 <_dtoa_r+0xa7a>
 800ada8:	4628      	mov	r0, r5
 800adaa:	6871      	ldr	r1, [r6, #4]
 800adac:	f000 f924 	bl	800aff8 <_Balloc>
 800adb0:	4607      	mov	r7, r0
 800adb2:	b928      	cbnz	r0, 800adc0 <_dtoa_r+0x9d8>
 800adb4:	4602      	mov	r2, r0
 800adb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800adba:	4b7f      	ldr	r3, [pc, #508]	; (800afb8 <_dtoa_r+0xbd0>)
 800adbc:	f7ff bb28 	b.w	800a410 <_dtoa_r+0x28>
 800adc0:	6932      	ldr	r2, [r6, #16]
 800adc2:	f106 010c 	add.w	r1, r6, #12
 800adc6:	3202      	adds	r2, #2
 800adc8:	0092      	lsls	r2, r2, #2
 800adca:	300c      	adds	r0, #12
 800adcc:	f7fe fdd4 	bl	8009978 <memcpy>
 800add0:	2201      	movs	r2, #1
 800add2:	4639      	mov	r1, r7
 800add4:	4628      	mov	r0, r5
 800add6:	f000 fb1d 	bl	800b414 <__lshift>
 800adda:	46b0      	mov	r8, r6
 800addc:	4606      	mov	r6, r0
 800adde:	9b03      	ldr	r3, [sp, #12]
 800ade0:	3301      	adds	r3, #1
 800ade2:	9308      	str	r3, [sp, #32]
 800ade4:	9b03      	ldr	r3, [sp, #12]
 800ade6:	444b      	add	r3, r9
 800ade8:	930a      	str	r3, [sp, #40]	; 0x28
 800adea:	9b04      	ldr	r3, [sp, #16]
 800adec:	f003 0301 	and.w	r3, r3, #1
 800adf0:	9309      	str	r3, [sp, #36]	; 0x24
 800adf2:	9b08      	ldr	r3, [sp, #32]
 800adf4:	4621      	mov	r1, r4
 800adf6:	3b01      	subs	r3, #1
 800adf8:	4658      	mov	r0, fp
 800adfa:	9304      	str	r3, [sp, #16]
 800adfc:	f7ff fa66 	bl	800a2cc <quorem>
 800ae00:	4603      	mov	r3, r0
 800ae02:	4641      	mov	r1, r8
 800ae04:	3330      	adds	r3, #48	; 0x30
 800ae06:	9006      	str	r0, [sp, #24]
 800ae08:	4658      	mov	r0, fp
 800ae0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae0c:	f000 fb72 	bl	800b4f4 <__mcmp>
 800ae10:	4632      	mov	r2, r6
 800ae12:	4681      	mov	r9, r0
 800ae14:	4621      	mov	r1, r4
 800ae16:	4628      	mov	r0, r5
 800ae18:	f000 fb88 	bl	800b52c <__mdiff>
 800ae1c:	68c2      	ldr	r2, [r0, #12]
 800ae1e:	4607      	mov	r7, r0
 800ae20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae22:	bb02      	cbnz	r2, 800ae66 <_dtoa_r+0xa7e>
 800ae24:	4601      	mov	r1, r0
 800ae26:	4658      	mov	r0, fp
 800ae28:	f000 fb64 	bl	800b4f4 <__mcmp>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae30:	4639      	mov	r1, r7
 800ae32:	4628      	mov	r0, r5
 800ae34:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ae38:	f000 f91e 	bl	800b078 <_Bfree>
 800ae3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae40:	9f08      	ldr	r7, [sp, #32]
 800ae42:	ea43 0102 	orr.w	r1, r3, r2
 800ae46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae48:	430b      	orrs	r3, r1
 800ae4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae4c:	d10d      	bne.n	800ae6a <_dtoa_r+0xa82>
 800ae4e:	2b39      	cmp	r3, #57	; 0x39
 800ae50:	d029      	beq.n	800aea6 <_dtoa_r+0xabe>
 800ae52:	f1b9 0f00 	cmp.w	r9, #0
 800ae56:	dd01      	ble.n	800ae5c <_dtoa_r+0xa74>
 800ae58:	9b06      	ldr	r3, [sp, #24]
 800ae5a:	3331      	adds	r3, #49	; 0x31
 800ae5c:	9a04      	ldr	r2, [sp, #16]
 800ae5e:	7013      	strb	r3, [r2, #0]
 800ae60:	e776      	b.n	800ad50 <_dtoa_r+0x968>
 800ae62:	4630      	mov	r0, r6
 800ae64:	e7b9      	b.n	800adda <_dtoa_r+0x9f2>
 800ae66:	2201      	movs	r2, #1
 800ae68:	e7e2      	b.n	800ae30 <_dtoa_r+0xa48>
 800ae6a:	f1b9 0f00 	cmp.w	r9, #0
 800ae6e:	db06      	blt.n	800ae7e <_dtoa_r+0xa96>
 800ae70:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ae72:	ea41 0909 	orr.w	r9, r1, r9
 800ae76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae78:	ea59 0101 	orrs.w	r1, r9, r1
 800ae7c:	d120      	bne.n	800aec0 <_dtoa_r+0xad8>
 800ae7e:	2a00      	cmp	r2, #0
 800ae80:	ddec      	ble.n	800ae5c <_dtoa_r+0xa74>
 800ae82:	4659      	mov	r1, fp
 800ae84:	2201      	movs	r2, #1
 800ae86:	4628      	mov	r0, r5
 800ae88:	9308      	str	r3, [sp, #32]
 800ae8a:	f000 fac3 	bl	800b414 <__lshift>
 800ae8e:	4621      	mov	r1, r4
 800ae90:	4683      	mov	fp, r0
 800ae92:	f000 fb2f 	bl	800b4f4 <__mcmp>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	9b08      	ldr	r3, [sp, #32]
 800ae9a:	dc02      	bgt.n	800aea2 <_dtoa_r+0xaba>
 800ae9c:	d1de      	bne.n	800ae5c <_dtoa_r+0xa74>
 800ae9e:	07da      	lsls	r2, r3, #31
 800aea0:	d5dc      	bpl.n	800ae5c <_dtoa_r+0xa74>
 800aea2:	2b39      	cmp	r3, #57	; 0x39
 800aea4:	d1d8      	bne.n	800ae58 <_dtoa_r+0xa70>
 800aea6:	2339      	movs	r3, #57	; 0x39
 800aea8:	9a04      	ldr	r2, [sp, #16]
 800aeaa:	7013      	strb	r3, [r2, #0]
 800aeac:	463b      	mov	r3, r7
 800aeae:	461f      	mov	r7, r3
 800aeb0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	2a39      	cmp	r2, #57	; 0x39
 800aeb8:	d050      	beq.n	800af5c <_dtoa_r+0xb74>
 800aeba:	3201      	adds	r2, #1
 800aebc:	701a      	strb	r2, [r3, #0]
 800aebe:	e747      	b.n	800ad50 <_dtoa_r+0x968>
 800aec0:	2a00      	cmp	r2, #0
 800aec2:	dd03      	ble.n	800aecc <_dtoa_r+0xae4>
 800aec4:	2b39      	cmp	r3, #57	; 0x39
 800aec6:	d0ee      	beq.n	800aea6 <_dtoa_r+0xabe>
 800aec8:	3301      	adds	r3, #1
 800aeca:	e7c7      	b.n	800ae5c <_dtoa_r+0xa74>
 800aecc:	9a08      	ldr	r2, [sp, #32]
 800aece:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aed0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aed4:	428a      	cmp	r2, r1
 800aed6:	d02a      	beq.n	800af2e <_dtoa_r+0xb46>
 800aed8:	4659      	mov	r1, fp
 800aeda:	2300      	movs	r3, #0
 800aedc:	220a      	movs	r2, #10
 800aede:	4628      	mov	r0, r5
 800aee0:	f000 f8ec 	bl	800b0bc <__multadd>
 800aee4:	45b0      	cmp	r8, r6
 800aee6:	4683      	mov	fp, r0
 800aee8:	f04f 0300 	mov.w	r3, #0
 800aeec:	f04f 020a 	mov.w	r2, #10
 800aef0:	4641      	mov	r1, r8
 800aef2:	4628      	mov	r0, r5
 800aef4:	d107      	bne.n	800af06 <_dtoa_r+0xb1e>
 800aef6:	f000 f8e1 	bl	800b0bc <__multadd>
 800aefa:	4680      	mov	r8, r0
 800aefc:	4606      	mov	r6, r0
 800aefe:	9b08      	ldr	r3, [sp, #32]
 800af00:	3301      	adds	r3, #1
 800af02:	9308      	str	r3, [sp, #32]
 800af04:	e775      	b.n	800adf2 <_dtoa_r+0xa0a>
 800af06:	f000 f8d9 	bl	800b0bc <__multadd>
 800af0a:	4631      	mov	r1, r6
 800af0c:	4680      	mov	r8, r0
 800af0e:	2300      	movs	r3, #0
 800af10:	220a      	movs	r2, #10
 800af12:	4628      	mov	r0, r5
 800af14:	f000 f8d2 	bl	800b0bc <__multadd>
 800af18:	4606      	mov	r6, r0
 800af1a:	e7f0      	b.n	800aefe <_dtoa_r+0xb16>
 800af1c:	f1b9 0f00 	cmp.w	r9, #0
 800af20:	bfcc      	ite	gt
 800af22:	464f      	movgt	r7, r9
 800af24:	2701      	movle	r7, #1
 800af26:	f04f 0800 	mov.w	r8, #0
 800af2a:	9a03      	ldr	r2, [sp, #12]
 800af2c:	4417      	add	r7, r2
 800af2e:	4659      	mov	r1, fp
 800af30:	2201      	movs	r2, #1
 800af32:	4628      	mov	r0, r5
 800af34:	9308      	str	r3, [sp, #32]
 800af36:	f000 fa6d 	bl	800b414 <__lshift>
 800af3a:	4621      	mov	r1, r4
 800af3c:	4683      	mov	fp, r0
 800af3e:	f000 fad9 	bl	800b4f4 <__mcmp>
 800af42:	2800      	cmp	r0, #0
 800af44:	dcb2      	bgt.n	800aeac <_dtoa_r+0xac4>
 800af46:	d102      	bne.n	800af4e <_dtoa_r+0xb66>
 800af48:	9b08      	ldr	r3, [sp, #32]
 800af4a:	07db      	lsls	r3, r3, #31
 800af4c:	d4ae      	bmi.n	800aeac <_dtoa_r+0xac4>
 800af4e:	463b      	mov	r3, r7
 800af50:	461f      	mov	r7, r3
 800af52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af56:	2a30      	cmp	r2, #48	; 0x30
 800af58:	d0fa      	beq.n	800af50 <_dtoa_r+0xb68>
 800af5a:	e6f9      	b.n	800ad50 <_dtoa_r+0x968>
 800af5c:	9a03      	ldr	r2, [sp, #12]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d1a5      	bne.n	800aeae <_dtoa_r+0xac6>
 800af62:	2331      	movs	r3, #49	; 0x31
 800af64:	f10a 0a01 	add.w	sl, sl, #1
 800af68:	e779      	b.n	800ae5e <_dtoa_r+0xa76>
 800af6a:	4b14      	ldr	r3, [pc, #80]	; (800afbc <_dtoa_r+0xbd4>)
 800af6c:	f7ff baa8 	b.w	800a4c0 <_dtoa_r+0xd8>
 800af70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af72:	2b00      	cmp	r3, #0
 800af74:	f47f aa81 	bne.w	800a47a <_dtoa_r+0x92>
 800af78:	4b11      	ldr	r3, [pc, #68]	; (800afc0 <_dtoa_r+0xbd8>)
 800af7a:	f7ff baa1 	b.w	800a4c0 <_dtoa_r+0xd8>
 800af7e:	f1b9 0f00 	cmp.w	r9, #0
 800af82:	dc03      	bgt.n	800af8c <_dtoa_r+0xba4>
 800af84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af86:	2b02      	cmp	r3, #2
 800af88:	f73f aecb 	bgt.w	800ad22 <_dtoa_r+0x93a>
 800af8c:	9f03      	ldr	r7, [sp, #12]
 800af8e:	4621      	mov	r1, r4
 800af90:	4658      	mov	r0, fp
 800af92:	f7ff f99b 	bl	800a2cc <quorem>
 800af96:	9a03      	ldr	r2, [sp, #12]
 800af98:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800af9c:	f807 3b01 	strb.w	r3, [r7], #1
 800afa0:	1aba      	subs	r2, r7, r2
 800afa2:	4591      	cmp	r9, r2
 800afa4:	ddba      	ble.n	800af1c <_dtoa_r+0xb34>
 800afa6:	4659      	mov	r1, fp
 800afa8:	2300      	movs	r3, #0
 800afaa:	220a      	movs	r2, #10
 800afac:	4628      	mov	r0, r5
 800afae:	f000 f885 	bl	800b0bc <__multadd>
 800afb2:	4683      	mov	fp, r0
 800afb4:	e7eb      	b.n	800af8e <_dtoa_r+0xba6>
 800afb6:	bf00      	nop
 800afb8:	0800c99b 	.word	0x0800c99b
 800afbc:	0800c8f8 	.word	0x0800c8f8
 800afc0:	0800c91c 	.word	0x0800c91c

0800afc4 <_localeconv_r>:
 800afc4:	4800      	ldr	r0, [pc, #0]	; (800afc8 <_localeconv_r+0x4>)
 800afc6:	4770      	bx	lr
 800afc8:	200002e0 	.word	0x200002e0

0800afcc <malloc>:
 800afcc:	4b02      	ldr	r3, [pc, #8]	; (800afd8 <malloc+0xc>)
 800afce:	4601      	mov	r1, r0
 800afd0:	6818      	ldr	r0, [r3, #0]
 800afd2:	f000 bc0f 	b.w	800b7f4 <_malloc_r>
 800afd6:	bf00      	nop
 800afd8:	2000018c 	.word	0x2000018c

0800afdc <memchr>:
 800afdc:	4603      	mov	r3, r0
 800afde:	b510      	push	{r4, lr}
 800afe0:	b2c9      	uxtb	r1, r1
 800afe2:	4402      	add	r2, r0
 800afe4:	4293      	cmp	r3, r2
 800afe6:	4618      	mov	r0, r3
 800afe8:	d101      	bne.n	800afee <memchr+0x12>
 800afea:	2000      	movs	r0, #0
 800afec:	e003      	b.n	800aff6 <memchr+0x1a>
 800afee:	7804      	ldrb	r4, [r0, #0]
 800aff0:	3301      	adds	r3, #1
 800aff2:	428c      	cmp	r4, r1
 800aff4:	d1f6      	bne.n	800afe4 <memchr+0x8>
 800aff6:	bd10      	pop	{r4, pc}

0800aff8 <_Balloc>:
 800aff8:	b570      	push	{r4, r5, r6, lr}
 800affa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800affc:	4604      	mov	r4, r0
 800affe:	460d      	mov	r5, r1
 800b000:	b976      	cbnz	r6, 800b020 <_Balloc+0x28>
 800b002:	2010      	movs	r0, #16
 800b004:	f7ff ffe2 	bl	800afcc <malloc>
 800b008:	4602      	mov	r2, r0
 800b00a:	6260      	str	r0, [r4, #36]	; 0x24
 800b00c:	b920      	cbnz	r0, 800b018 <_Balloc+0x20>
 800b00e:	2166      	movs	r1, #102	; 0x66
 800b010:	4b17      	ldr	r3, [pc, #92]	; (800b070 <_Balloc+0x78>)
 800b012:	4818      	ldr	r0, [pc, #96]	; (800b074 <_Balloc+0x7c>)
 800b014:	f000 fdce 	bl	800bbb4 <__assert_func>
 800b018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b01c:	6006      	str	r6, [r0, #0]
 800b01e:	60c6      	str	r6, [r0, #12]
 800b020:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b022:	68f3      	ldr	r3, [r6, #12]
 800b024:	b183      	cbz	r3, 800b048 <_Balloc+0x50>
 800b026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b02e:	b9b8      	cbnz	r0, 800b060 <_Balloc+0x68>
 800b030:	2101      	movs	r1, #1
 800b032:	fa01 f605 	lsl.w	r6, r1, r5
 800b036:	1d72      	adds	r2, r6, #5
 800b038:	4620      	mov	r0, r4
 800b03a:	0092      	lsls	r2, r2, #2
 800b03c:	f000 fb5e 	bl	800b6fc <_calloc_r>
 800b040:	b160      	cbz	r0, 800b05c <_Balloc+0x64>
 800b042:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b046:	e00e      	b.n	800b066 <_Balloc+0x6e>
 800b048:	2221      	movs	r2, #33	; 0x21
 800b04a:	2104      	movs	r1, #4
 800b04c:	4620      	mov	r0, r4
 800b04e:	f000 fb55 	bl	800b6fc <_calloc_r>
 800b052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b054:	60f0      	str	r0, [r6, #12]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1e4      	bne.n	800b026 <_Balloc+0x2e>
 800b05c:	2000      	movs	r0, #0
 800b05e:	bd70      	pop	{r4, r5, r6, pc}
 800b060:	6802      	ldr	r2, [r0, #0]
 800b062:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b066:	2300      	movs	r3, #0
 800b068:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b06c:	e7f7      	b.n	800b05e <_Balloc+0x66>
 800b06e:	bf00      	nop
 800b070:	0800c929 	.word	0x0800c929
 800b074:	0800c9ac 	.word	0x0800c9ac

0800b078 <_Bfree>:
 800b078:	b570      	push	{r4, r5, r6, lr}
 800b07a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b07c:	4605      	mov	r5, r0
 800b07e:	460c      	mov	r4, r1
 800b080:	b976      	cbnz	r6, 800b0a0 <_Bfree+0x28>
 800b082:	2010      	movs	r0, #16
 800b084:	f7ff ffa2 	bl	800afcc <malloc>
 800b088:	4602      	mov	r2, r0
 800b08a:	6268      	str	r0, [r5, #36]	; 0x24
 800b08c:	b920      	cbnz	r0, 800b098 <_Bfree+0x20>
 800b08e:	218a      	movs	r1, #138	; 0x8a
 800b090:	4b08      	ldr	r3, [pc, #32]	; (800b0b4 <_Bfree+0x3c>)
 800b092:	4809      	ldr	r0, [pc, #36]	; (800b0b8 <_Bfree+0x40>)
 800b094:	f000 fd8e 	bl	800bbb4 <__assert_func>
 800b098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b09c:	6006      	str	r6, [r0, #0]
 800b09e:	60c6      	str	r6, [r0, #12]
 800b0a0:	b13c      	cbz	r4, 800b0b2 <_Bfree+0x3a>
 800b0a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0a4:	6862      	ldr	r2, [r4, #4]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0ac:	6021      	str	r1, [r4, #0]
 800b0ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0b2:	bd70      	pop	{r4, r5, r6, pc}
 800b0b4:	0800c929 	.word	0x0800c929
 800b0b8:	0800c9ac 	.word	0x0800c9ac

0800b0bc <__multadd>:
 800b0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	461e      	mov	r6, r3
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	690d      	ldr	r5, [r1, #16]
 800b0ca:	f101 0c14 	add.w	ip, r1, #20
 800b0ce:	f8dc 3000 	ldr.w	r3, [ip]
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	b299      	uxth	r1, r3
 800b0d6:	fb02 6101 	mla	r1, r2, r1, r6
 800b0da:	0c1e      	lsrs	r6, r3, #16
 800b0dc:	0c0b      	lsrs	r3, r1, #16
 800b0de:	fb02 3306 	mla	r3, r2, r6, r3
 800b0e2:	b289      	uxth	r1, r1
 800b0e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0e8:	4285      	cmp	r5, r0
 800b0ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0ee:	f84c 1b04 	str.w	r1, [ip], #4
 800b0f2:	dcec      	bgt.n	800b0ce <__multadd+0x12>
 800b0f4:	b30e      	cbz	r6, 800b13a <__multadd+0x7e>
 800b0f6:	68a3      	ldr	r3, [r4, #8]
 800b0f8:	42ab      	cmp	r3, r5
 800b0fa:	dc19      	bgt.n	800b130 <__multadd+0x74>
 800b0fc:	6861      	ldr	r1, [r4, #4]
 800b0fe:	4638      	mov	r0, r7
 800b100:	3101      	adds	r1, #1
 800b102:	f7ff ff79 	bl	800aff8 <_Balloc>
 800b106:	4680      	mov	r8, r0
 800b108:	b928      	cbnz	r0, 800b116 <__multadd+0x5a>
 800b10a:	4602      	mov	r2, r0
 800b10c:	21b5      	movs	r1, #181	; 0xb5
 800b10e:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <__multadd+0x84>)
 800b110:	480c      	ldr	r0, [pc, #48]	; (800b144 <__multadd+0x88>)
 800b112:	f000 fd4f 	bl	800bbb4 <__assert_func>
 800b116:	6922      	ldr	r2, [r4, #16]
 800b118:	f104 010c 	add.w	r1, r4, #12
 800b11c:	3202      	adds	r2, #2
 800b11e:	0092      	lsls	r2, r2, #2
 800b120:	300c      	adds	r0, #12
 800b122:	f7fe fc29 	bl	8009978 <memcpy>
 800b126:	4621      	mov	r1, r4
 800b128:	4638      	mov	r0, r7
 800b12a:	f7ff ffa5 	bl	800b078 <_Bfree>
 800b12e:	4644      	mov	r4, r8
 800b130:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b134:	3501      	adds	r5, #1
 800b136:	615e      	str	r6, [r3, #20]
 800b138:	6125      	str	r5, [r4, #16]
 800b13a:	4620      	mov	r0, r4
 800b13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b140:	0800c99b 	.word	0x0800c99b
 800b144:	0800c9ac 	.word	0x0800c9ac

0800b148 <__hi0bits>:
 800b148:	0c02      	lsrs	r2, r0, #16
 800b14a:	0412      	lsls	r2, r2, #16
 800b14c:	4603      	mov	r3, r0
 800b14e:	b9ca      	cbnz	r2, 800b184 <__hi0bits+0x3c>
 800b150:	0403      	lsls	r3, r0, #16
 800b152:	2010      	movs	r0, #16
 800b154:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b158:	bf04      	itt	eq
 800b15a:	021b      	lsleq	r3, r3, #8
 800b15c:	3008      	addeq	r0, #8
 800b15e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b162:	bf04      	itt	eq
 800b164:	011b      	lsleq	r3, r3, #4
 800b166:	3004      	addeq	r0, #4
 800b168:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b16c:	bf04      	itt	eq
 800b16e:	009b      	lsleq	r3, r3, #2
 800b170:	3002      	addeq	r0, #2
 800b172:	2b00      	cmp	r3, #0
 800b174:	db05      	blt.n	800b182 <__hi0bits+0x3a>
 800b176:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b17a:	f100 0001 	add.w	r0, r0, #1
 800b17e:	bf08      	it	eq
 800b180:	2020      	moveq	r0, #32
 800b182:	4770      	bx	lr
 800b184:	2000      	movs	r0, #0
 800b186:	e7e5      	b.n	800b154 <__hi0bits+0xc>

0800b188 <__lo0bits>:
 800b188:	6803      	ldr	r3, [r0, #0]
 800b18a:	4602      	mov	r2, r0
 800b18c:	f013 0007 	ands.w	r0, r3, #7
 800b190:	d00b      	beq.n	800b1aa <__lo0bits+0x22>
 800b192:	07d9      	lsls	r1, r3, #31
 800b194:	d421      	bmi.n	800b1da <__lo0bits+0x52>
 800b196:	0798      	lsls	r0, r3, #30
 800b198:	bf49      	itett	mi
 800b19a:	085b      	lsrmi	r3, r3, #1
 800b19c:	089b      	lsrpl	r3, r3, #2
 800b19e:	2001      	movmi	r0, #1
 800b1a0:	6013      	strmi	r3, [r2, #0]
 800b1a2:	bf5c      	itt	pl
 800b1a4:	2002      	movpl	r0, #2
 800b1a6:	6013      	strpl	r3, [r2, #0]
 800b1a8:	4770      	bx	lr
 800b1aa:	b299      	uxth	r1, r3
 800b1ac:	b909      	cbnz	r1, 800b1b2 <__lo0bits+0x2a>
 800b1ae:	2010      	movs	r0, #16
 800b1b0:	0c1b      	lsrs	r3, r3, #16
 800b1b2:	b2d9      	uxtb	r1, r3
 800b1b4:	b909      	cbnz	r1, 800b1ba <__lo0bits+0x32>
 800b1b6:	3008      	adds	r0, #8
 800b1b8:	0a1b      	lsrs	r3, r3, #8
 800b1ba:	0719      	lsls	r1, r3, #28
 800b1bc:	bf04      	itt	eq
 800b1be:	091b      	lsreq	r3, r3, #4
 800b1c0:	3004      	addeq	r0, #4
 800b1c2:	0799      	lsls	r1, r3, #30
 800b1c4:	bf04      	itt	eq
 800b1c6:	089b      	lsreq	r3, r3, #2
 800b1c8:	3002      	addeq	r0, #2
 800b1ca:	07d9      	lsls	r1, r3, #31
 800b1cc:	d403      	bmi.n	800b1d6 <__lo0bits+0x4e>
 800b1ce:	085b      	lsrs	r3, r3, #1
 800b1d0:	f100 0001 	add.w	r0, r0, #1
 800b1d4:	d003      	beq.n	800b1de <__lo0bits+0x56>
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	4770      	bx	lr
 800b1da:	2000      	movs	r0, #0
 800b1dc:	4770      	bx	lr
 800b1de:	2020      	movs	r0, #32
 800b1e0:	4770      	bx	lr
	...

0800b1e4 <__i2b>:
 800b1e4:	b510      	push	{r4, lr}
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	f7ff ff05 	bl	800aff8 <_Balloc>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	b928      	cbnz	r0, 800b1fe <__i2b+0x1a>
 800b1f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b1f6:	4b04      	ldr	r3, [pc, #16]	; (800b208 <__i2b+0x24>)
 800b1f8:	4804      	ldr	r0, [pc, #16]	; (800b20c <__i2b+0x28>)
 800b1fa:	f000 fcdb 	bl	800bbb4 <__assert_func>
 800b1fe:	2301      	movs	r3, #1
 800b200:	6144      	str	r4, [r0, #20]
 800b202:	6103      	str	r3, [r0, #16]
 800b204:	bd10      	pop	{r4, pc}
 800b206:	bf00      	nop
 800b208:	0800c99b 	.word	0x0800c99b
 800b20c:	0800c9ac 	.word	0x0800c9ac

0800b210 <__multiply>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	4691      	mov	r9, r2
 800b216:	690a      	ldr	r2, [r1, #16]
 800b218:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b21c:	460c      	mov	r4, r1
 800b21e:	429a      	cmp	r2, r3
 800b220:	bfbe      	ittt	lt
 800b222:	460b      	movlt	r3, r1
 800b224:	464c      	movlt	r4, r9
 800b226:	4699      	movlt	r9, r3
 800b228:	6927      	ldr	r7, [r4, #16]
 800b22a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b22e:	68a3      	ldr	r3, [r4, #8]
 800b230:	6861      	ldr	r1, [r4, #4]
 800b232:	eb07 060a 	add.w	r6, r7, sl
 800b236:	42b3      	cmp	r3, r6
 800b238:	b085      	sub	sp, #20
 800b23a:	bfb8      	it	lt
 800b23c:	3101      	addlt	r1, #1
 800b23e:	f7ff fedb 	bl	800aff8 <_Balloc>
 800b242:	b930      	cbnz	r0, 800b252 <__multiply+0x42>
 800b244:	4602      	mov	r2, r0
 800b246:	f240 115d 	movw	r1, #349	; 0x15d
 800b24a:	4b43      	ldr	r3, [pc, #268]	; (800b358 <__multiply+0x148>)
 800b24c:	4843      	ldr	r0, [pc, #268]	; (800b35c <__multiply+0x14c>)
 800b24e:	f000 fcb1 	bl	800bbb4 <__assert_func>
 800b252:	f100 0514 	add.w	r5, r0, #20
 800b256:	462b      	mov	r3, r5
 800b258:	2200      	movs	r2, #0
 800b25a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b25e:	4543      	cmp	r3, r8
 800b260:	d321      	bcc.n	800b2a6 <__multiply+0x96>
 800b262:	f104 0314 	add.w	r3, r4, #20
 800b266:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b26a:	f109 0314 	add.w	r3, r9, #20
 800b26e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b272:	9202      	str	r2, [sp, #8]
 800b274:	1b3a      	subs	r2, r7, r4
 800b276:	3a15      	subs	r2, #21
 800b278:	f022 0203 	bic.w	r2, r2, #3
 800b27c:	3204      	adds	r2, #4
 800b27e:	f104 0115 	add.w	r1, r4, #21
 800b282:	428f      	cmp	r7, r1
 800b284:	bf38      	it	cc
 800b286:	2204      	movcc	r2, #4
 800b288:	9201      	str	r2, [sp, #4]
 800b28a:	9a02      	ldr	r2, [sp, #8]
 800b28c:	9303      	str	r3, [sp, #12]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d80c      	bhi.n	800b2ac <__multiply+0x9c>
 800b292:	2e00      	cmp	r6, #0
 800b294:	dd03      	ble.n	800b29e <__multiply+0x8e>
 800b296:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d059      	beq.n	800b352 <__multiply+0x142>
 800b29e:	6106      	str	r6, [r0, #16]
 800b2a0:	b005      	add	sp, #20
 800b2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a6:	f843 2b04 	str.w	r2, [r3], #4
 800b2aa:	e7d8      	b.n	800b25e <__multiply+0x4e>
 800b2ac:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2b0:	f1ba 0f00 	cmp.w	sl, #0
 800b2b4:	d023      	beq.n	800b2fe <__multiply+0xee>
 800b2b6:	46a9      	mov	r9, r5
 800b2b8:	f04f 0c00 	mov.w	ip, #0
 800b2bc:	f104 0e14 	add.w	lr, r4, #20
 800b2c0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b2c4:	f8d9 1000 	ldr.w	r1, [r9]
 800b2c8:	fa1f fb82 	uxth.w	fp, r2
 800b2cc:	b289      	uxth	r1, r1
 800b2ce:	fb0a 110b 	mla	r1, sl, fp, r1
 800b2d2:	4461      	add	r1, ip
 800b2d4:	f8d9 c000 	ldr.w	ip, [r9]
 800b2d8:	0c12      	lsrs	r2, r2, #16
 800b2da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b2de:	fb0a c202 	mla	r2, sl, r2, ip
 800b2e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2e6:	b289      	uxth	r1, r1
 800b2e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2ec:	4577      	cmp	r7, lr
 800b2ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2f2:	f849 1b04 	str.w	r1, [r9], #4
 800b2f6:	d8e3      	bhi.n	800b2c0 <__multiply+0xb0>
 800b2f8:	9a01      	ldr	r2, [sp, #4]
 800b2fa:	f845 c002 	str.w	ip, [r5, r2]
 800b2fe:	9a03      	ldr	r2, [sp, #12]
 800b300:	3304      	adds	r3, #4
 800b302:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b306:	f1b9 0f00 	cmp.w	r9, #0
 800b30a:	d020      	beq.n	800b34e <__multiply+0x13e>
 800b30c:	46ae      	mov	lr, r5
 800b30e:	f04f 0a00 	mov.w	sl, #0
 800b312:	6829      	ldr	r1, [r5, #0]
 800b314:	f104 0c14 	add.w	ip, r4, #20
 800b318:	f8bc b000 	ldrh.w	fp, [ip]
 800b31c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b320:	b289      	uxth	r1, r1
 800b322:	fb09 220b 	mla	r2, r9, fp, r2
 800b326:	4492      	add	sl, r2
 800b328:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b32c:	f84e 1b04 	str.w	r1, [lr], #4
 800b330:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b334:	f8be 1000 	ldrh.w	r1, [lr]
 800b338:	0c12      	lsrs	r2, r2, #16
 800b33a:	fb09 1102 	mla	r1, r9, r2, r1
 800b33e:	4567      	cmp	r7, ip
 800b340:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b344:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b348:	d8e6      	bhi.n	800b318 <__multiply+0x108>
 800b34a:	9a01      	ldr	r2, [sp, #4]
 800b34c:	50a9      	str	r1, [r5, r2]
 800b34e:	3504      	adds	r5, #4
 800b350:	e79b      	b.n	800b28a <__multiply+0x7a>
 800b352:	3e01      	subs	r6, #1
 800b354:	e79d      	b.n	800b292 <__multiply+0x82>
 800b356:	bf00      	nop
 800b358:	0800c99b 	.word	0x0800c99b
 800b35c:	0800c9ac 	.word	0x0800c9ac

0800b360 <__pow5mult>:
 800b360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b364:	4615      	mov	r5, r2
 800b366:	f012 0203 	ands.w	r2, r2, #3
 800b36a:	4606      	mov	r6, r0
 800b36c:	460f      	mov	r7, r1
 800b36e:	d007      	beq.n	800b380 <__pow5mult+0x20>
 800b370:	4c25      	ldr	r4, [pc, #148]	; (800b408 <__pow5mult+0xa8>)
 800b372:	3a01      	subs	r2, #1
 800b374:	2300      	movs	r3, #0
 800b376:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b37a:	f7ff fe9f 	bl	800b0bc <__multadd>
 800b37e:	4607      	mov	r7, r0
 800b380:	10ad      	asrs	r5, r5, #2
 800b382:	d03d      	beq.n	800b400 <__pow5mult+0xa0>
 800b384:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b386:	b97c      	cbnz	r4, 800b3a8 <__pow5mult+0x48>
 800b388:	2010      	movs	r0, #16
 800b38a:	f7ff fe1f 	bl	800afcc <malloc>
 800b38e:	4602      	mov	r2, r0
 800b390:	6270      	str	r0, [r6, #36]	; 0x24
 800b392:	b928      	cbnz	r0, 800b3a0 <__pow5mult+0x40>
 800b394:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b398:	4b1c      	ldr	r3, [pc, #112]	; (800b40c <__pow5mult+0xac>)
 800b39a:	481d      	ldr	r0, [pc, #116]	; (800b410 <__pow5mult+0xb0>)
 800b39c:	f000 fc0a 	bl	800bbb4 <__assert_func>
 800b3a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3a4:	6004      	str	r4, [r0, #0]
 800b3a6:	60c4      	str	r4, [r0, #12]
 800b3a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3b0:	b94c      	cbnz	r4, 800b3c6 <__pow5mult+0x66>
 800b3b2:	f240 2171 	movw	r1, #625	; 0x271
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	f7ff ff14 	bl	800b1e4 <__i2b>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	4604      	mov	r4, r0
 800b3c0:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3c4:	6003      	str	r3, [r0, #0]
 800b3c6:	f04f 0900 	mov.w	r9, #0
 800b3ca:	07eb      	lsls	r3, r5, #31
 800b3cc:	d50a      	bpl.n	800b3e4 <__pow5mult+0x84>
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	f7ff ff1c 	bl	800b210 <__multiply>
 800b3d8:	4680      	mov	r8, r0
 800b3da:	4639      	mov	r1, r7
 800b3dc:	4630      	mov	r0, r6
 800b3de:	f7ff fe4b 	bl	800b078 <_Bfree>
 800b3e2:	4647      	mov	r7, r8
 800b3e4:	106d      	asrs	r5, r5, #1
 800b3e6:	d00b      	beq.n	800b400 <__pow5mult+0xa0>
 800b3e8:	6820      	ldr	r0, [r4, #0]
 800b3ea:	b938      	cbnz	r0, 800b3fc <__pow5mult+0x9c>
 800b3ec:	4622      	mov	r2, r4
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f7ff ff0d 	bl	800b210 <__multiply>
 800b3f6:	6020      	str	r0, [r4, #0]
 800b3f8:	f8c0 9000 	str.w	r9, [r0]
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	e7e4      	b.n	800b3ca <__pow5mult+0x6a>
 800b400:	4638      	mov	r0, r7
 800b402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b406:	bf00      	nop
 800b408:	0800caf8 	.word	0x0800caf8
 800b40c:	0800c929 	.word	0x0800c929
 800b410:	0800c9ac 	.word	0x0800c9ac

0800b414 <__lshift>:
 800b414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b418:	460c      	mov	r4, r1
 800b41a:	4607      	mov	r7, r0
 800b41c:	4691      	mov	r9, r2
 800b41e:	6923      	ldr	r3, [r4, #16]
 800b420:	6849      	ldr	r1, [r1, #4]
 800b422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b426:	68a3      	ldr	r3, [r4, #8]
 800b428:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b42c:	f108 0601 	add.w	r6, r8, #1
 800b430:	42b3      	cmp	r3, r6
 800b432:	db0b      	blt.n	800b44c <__lshift+0x38>
 800b434:	4638      	mov	r0, r7
 800b436:	f7ff fddf 	bl	800aff8 <_Balloc>
 800b43a:	4605      	mov	r5, r0
 800b43c:	b948      	cbnz	r0, 800b452 <__lshift+0x3e>
 800b43e:	4602      	mov	r2, r0
 800b440:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b444:	4b29      	ldr	r3, [pc, #164]	; (800b4ec <__lshift+0xd8>)
 800b446:	482a      	ldr	r0, [pc, #168]	; (800b4f0 <__lshift+0xdc>)
 800b448:	f000 fbb4 	bl	800bbb4 <__assert_func>
 800b44c:	3101      	adds	r1, #1
 800b44e:	005b      	lsls	r3, r3, #1
 800b450:	e7ee      	b.n	800b430 <__lshift+0x1c>
 800b452:	2300      	movs	r3, #0
 800b454:	f100 0114 	add.w	r1, r0, #20
 800b458:	f100 0210 	add.w	r2, r0, #16
 800b45c:	4618      	mov	r0, r3
 800b45e:	4553      	cmp	r3, sl
 800b460:	db37      	blt.n	800b4d2 <__lshift+0xbe>
 800b462:	6920      	ldr	r0, [r4, #16]
 800b464:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b468:	f104 0314 	add.w	r3, r4, #20
 800b46c:	f019 091f 	ands.w	r9, r9, #31
 800b470:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b474:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b478:	d02f      	beq.n	800b4da <__lshift+0xc6>
 800b47a:	468a      	mov	sl, r1
 800b47c:	f04f 0c00 	mov.w	ip, #0
 800b480:	f1c9 0e20 	rsb	lr, r9, #32
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	fa02 f209 	lsl.w	r2, r2, r9
 800b48a:	ea42 020c 	orr.w	r2, r2, ip
 800b48e:	f84a 2b04 	str.w	r2, [sl], #4
 800b492:	f853 2b04 	ldr.w	r2, [r3], #4
 800b496:	4298      	cmp	r0, r3
 800b498:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b49c:	d8f2      	bhi.n	800b484 <__lshift+0x70>
 800b49e:	1b03      	subs	r3, r0, r4
 800b4a0:	3b15      	subs	r3, #21
 800b4a2:	f023 0303 	bic.w	r3, r3, #3
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	f104 0215 	add.w	r2, r4, #21
 800b4ac:	4290      	cmp	r0, r2
 800b4ae:	bf38      	it	cc
 800b4b0:	2304      	movcc	r3, #4
 800b4b2:	f841 c003 	str.w	ip, [r1, r3]
 800b4b6:	f1bc 0f00 	cmp.w	ip, #0
 800b4ba:	d001      	beq.n	800b4c0 <__lshift+0xac>
 800b4bc:	f108 0602 	add.w	r6, r8, #2
 800b4c0:	3e01      	subs	r6, #1
 800b4c2:	4638      	mov	r0, r7
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	612e      	str	r6, [r5, #16]
 800b4c8:	f7ff fdd6 	bl	800b078 <_Bfree>
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	e7c1      	b.n	800b45e <__lshift+0x4a>
 800b4da:	3904      	subs	r1, #4
 800b4dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4e0:	4298      	cmp	r0, r3
 800b4e2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4e6:	d8f9      	bhi.n	800b4dc <__lshift+0xc8>
 800b4e8:	e7ea      	b.n	800b4c0 <__lshift+0xac>
 800b4ea:	bf00      	nop
 800b4ec:	0800c99b 	.word	0x0800c99b
 800b4f0:	0800c9ac 	.word	0x0800c9ac

0800b4f4 <__mcmp>:
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	690a      	ldr	r2, [r1, #16]
 800b4f8:	6900      	ldr	r0, [r0, #16]
 800b4fa:	b530      	push	{r4, r5, lr}
 800b4fc:	1a80      	subs	r0, r0, r2
 800b4fe:	d10d      	bne.n	800b51c <__mcmp+0x28>
 800b500:	3314      	adds	r3, #20
 800b502:	3114      	adds	r1, #20
 800b504:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b508:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b50c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b510:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b514:	4295      	cmp	r5, r2
 800b516:	d002      	beq.n	800b51e <__mcmp+0x2a>
 800b518:	d304      	bcc.n	800b524 <__mcmp+0x30>
 800b51a:	2001      	movs	r0, #1
 800b51c:	bd30      	pop	{r4, r5, pc}
 800b51e:	42a3      	cmp	r3, r4
 800b520:	d3f4      	bcc.n	800b50c <__mcmp+0x18>
 800b522:	e7fb      	b.n	800b51c <__mcmp+0x28>
 800b524:	f04f 30ff 	mov.w	r0, #4294967295
 800b528:	e7f8      	b.n	800b51c <__mcmp+0x28>
	...

0800b52c <__mdiff>:
 800b52c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b530:	460d      	mov	r5, r1
 800b532:	4607      	mov	r7, r0
 800b534:	4611      	mov	r1, r2
 800b536:	4628      	mov	r0, r5
 800b538:	4614      	mov	r4, r2
 800b53a:	f7ff ffdb 	bl	800b4f4 <__mcmp>
 800b53e:	1e06      	subs	r6, r0, #0
 800b540:	d111      	bne.n	800b566 <__mdiff+0x3a>
 800b542:	4631      	mov	r1, r6
 800b544:	4638      	mov	r0, r7
 800b546:	f7ff fd57 	bl	800aff8 <_Balloc>
 800b54a:	4602      	mov	r2, r0
 800b54c:	b928      	cbnz	r0, 800b55a <__mdiff+0x2e>
 800b54e:	f240 2132 	movw	r1, #562	; 0x232
 800b552:	4b3a      	ldr	r3, [pc, #232]	; (800b63c <__mdiff+0x110>)
 800b554:	483a      	ldr	r0, [pc, #232]	; (800b640 <__mdiff+0x114>)
 800b556:	f000 fb2d 	bl	800bbb4 <__assert_func>
 800b55a:	2301      	movs	r3, #1
 800b55c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b560:	4610      	mov	r0, r2
 800b562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b566:	bfa4      	itt	ge
 800b568:	4623      	movge	r3, r4
 800b56a:	462c      	movge	r4, r5
 800b56c:	4638      	mov	r0, r7
 800b56e:	6861      	ldr	r1, [r4, #4]
 800b570:	bfa6      	itte	ge
 800b572:	461d      	movge	r5, r3
 800b574:	2600      	movge	r6, #0
 800b576:	2601      	movlt	r6, #1
 800b578:	f7ff fd3e 	bl	800aff8 <_Balloc>
 800b57c:	4602      	mov	r2, r0
 800b57e:	b918      	cbnz	r0, 800b588 <__mdiff+0x5c>
 800b580:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b584:	4b2d      	ldr	r3, [pc, #180]	; (800b63c <__mdiff+0x110>)
 800b586:	e7e5      	b.n	800b554 <__mdiff+0x28>
 800b588:	f102 0814 	add.w	r8, r2, #20
 800b58c:	46c2      	mov	sl, r8
 800b58e:	f04f 0c00 	mov.w	ip, #0
 800b592:	6927      	ldr	r7, [r4, #16]
 800b594:	60c6      	str	r6, [r0, #12]
 800b596:	692e      	ldr	r6, [r5, #16]
 800b598:	f104 0014 	add.w	r0, r4, #20
 800b59c:	f105 0914 	add.w	r9, r5, #20
 800b5a0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b5a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b5a8:	3410      	adds	r4, #16
 800b5aa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b5ae:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5b2:	fa1f f18b 	uxth.w	r1, fp
 800b5b6:	448c      	add	ip, r1
 800b5b8:	b299      	uxth	r1, r3
 800b5ba:	0c1b      	lsrs	r3, r3, #16
 800b5bc:	ebac 0101 	sub.w	r1, ip, r1
 800b5c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b5c8:	b289      	uxth	r1, r1
 800b5ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b5ce:	454e      	cmp	r6, r9
 800b5d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b5d4:	f84a 3b04 	str.w	r3, [sl], #4
 800b5d8:	d8e7      	bhi.n	800b5aa <__mdiff+0x7e>
 800b5da:	1b73      	subs	r3, r6, r5
 800b5dc:	3b15      	subs	r3, #21
 800b5de:	f023 0303 	bic.w	r3, r3, #3
 800b5e2:	3515      	adds	r5, #21
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	42ae      	cmp	r6, r5
 800b5e8:	bf38      	it	cc
 800b5ea:	2304      	movcc	r3, #4
 800b5ec:	4418      	add	r0, r3
 800b5ee:	4443      	add	r3, r8
 800b5f0:	461e      	mov	r6, r3
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	4575      	cmp	r5, lr
 800b5f6:	d30e      	bcc.n	800b616 <__mdiff+0xea>
 800b5f8:	f10e 0103 	add.w	r1, lr, #3
 800b5fc:	1a09      	subs	r1, r1, r0
 800b5fe:	f021 0103 	bic.w	r1, r1, #3
 800b602:	3803      	subs	r0, #3
 800b604:	4586      	cmp	lr, r0
 800b606:	bf38      	it	cc
 800b608:	2100      	movcc	r1, #0
 800b60a:	4419      	add	r1, r3
 800b60c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b610:	b18b      	cbz	r3, 800b636 <__mdiff+0x10a>
 800b612:	6117      	str	r7, [r2, #16]
 800b614:	e7a4      	b.n	800b560 <__mdiff+0x34>
 800b616:	f855 8b04 	ldr.w	r8, [r5], #4
 800b61a:	fa1f f188 	uxth.w	r1, r8
 800b61e:	4461      	add	r1, ip
 800b620:	140c      	asrs	r4, r1, #16
 800b622:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b626:	b289      	uxth	r1, r1
 800b628:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b62c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b630:	f846 1b04 	str.w	r1, [r6], #4
 800b634:	e7de      	b.n	800b5f4 <__mdiff+0xc8>
 800b636:	3f01      	subs	r7, #1
 800b638:	e7e8      	b.n	800b60c <__mdiff+0xe0>
 800b63a:	bf00      	nop
 800b63c:	0800c99b 	.word	0x0800c99b
 800b640:	0800c9ac 	.word	0x0800c9ac

0800b644 <__d2b>:
 800b644:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b648:	2101      	movs	r1, #1
 800b64a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b64e:	4690      	mov	r8, r2
 800b650:	461d      	mov	r5, r3
 800b652:	f7ff fcd1 	bl	800aff8 <_Balloc>
 800b656:	4604      	mov	r4, r0
 800b658:	b930      	cbnz	r0, 800b668 <__d2b+0x24>
 800b65a:	4602      	mov	r2, r0
 800b65c:	f240 310a 	movw	r1, #778	; 0x30a
 800b660:	4b24      	ldr	r3, [pc, #144]	; (800b6f4 <__d2b+0xb0>)
 800b662:	4825      	ldr	r0, [pc, #148]	; (800b6f8 <__d2b+0xb4>)
 800b664:	f000 faa6 	bl	800bbb4 <__assert_func>
 800b668:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b66c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b670:	bb2d      	cbnz	r5, 800b6be <__d2b+0x7a>
 800b672:	9301      	str	r3, [sp, #4]
 800b674:	f1b8 0300 	subs.w	r3, r8, #0
 800b678:	d026      	beq.n	800b6c8 <__d2b+0x84>
 800b67a:	4668      	mov	r0, sp
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	f7ff fd83 	bl	800b188 <__lo0bits>
 800b682:	9900      	ldr	r1, [sp, #0]
 800b684:	b1f0      	cbz	r0, 800b6c4 <__d2b+0x80>
 800b686:	9a01      	ldr	r2, [sp, #4]
 800b688:	f1c0 0320 	rsb	r3, r0, #32
 800b68c:	fa02 f303 	lsl.w	r3, r2, r3
 800b690:	430b      	orrs	r3, r1
 800b692:	40c2      	lsrs	r2, r0
 800b694:	6163      	str	r3, [r4, #20]
 800b696:	9201      	str	r2, [sp, #4]
 800b698:	9b01      	ldr	r3, [sp, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	bf14      	ite	ne
 800b69e:	2102      	movne	r1, #2
 800b6a0:	2101      	moveq	r1, #1
 800b6a2:	61a3      	str	r3, [r4, #24]
 800b6a4:	6121      	str	r1, [r4, #16]
 800b6a6:	b1c5      	cbz	r5, 800b6da <__d2b+0x96>
 800b6a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6ac:	4405      	add	r5, r0
 800b6ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6b2:	603d      	str	r5, [r7, #0]
 800b6b4:	6030      	str	r0, [r6, #0]
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	b002      	add	sp, #8
 800b6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6c2:	e7d6      	b.n	800b672 <__d2b+0x2e>
 800b6c4:	6161      	str	r1, [r4, #20]
 800b6c6:	e7e7      	b.n	800b698 <__d2b+0x54>
 800b6c8:	a801      	add	r0, sp, #4
 800b6ca:	f7ff fd5d 	bl	800b188 <__lo0bits>
 800b6ce:	2101      	movs	r1, #1
 800b6d0:	9b01      	ldr	r3, [sp, #4]
 800b6d2:	6121      	str	r1, [r4, #16]
 800b6d4:	6163      	str	r3, [r4, #20]
 800b6d6:	3020      	adds	r0, #32
 800b6d8:	e7e5      	b.n	800b6a6 <__d2b+0x62>
 800b6da:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b6de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6e2:	6038      	str	r0, [r7, #0]
 800b6e4:	6918      	ldr	r0, [r3, #16]
 800b6e6:	f7ff fd2f 	bl	800b148 <__hi0bits>
 800b6ea:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b6ee:	6031      	str	r1, [r6, #0]
 800b6f0:	e7e1      	b.n	800b6b6 <__d2b+0x72>
 800b6f2:	bf00      	nop
 800b6f4:	0800c99b 	.word	0x0800c99b
 800b6f8:	0800c9ac 	.word	0x0800c9ac

0800b6fc <_calloc_r>:
 800b6fc:	b570      	push	{r4, r5, r6, lr}
 800b6fe:	fba1 5402 	umull	r5, r4, r1, r2
 800b702:	b934      	cbnz	r4, 800b712 <_calloc_r+0x16>
 800b704:	4629      	mov	r1, r5
 800b706:	f000 f875 	bl	800b7f4 <_malloc_r>
 800b70a:	4606      	mov	r6, r0
 800b70c:	b928      	cbnz	r0, 800b71a <_calloc_r+0x1e>
 800b70e:	4630      	mov	r0, r6
 800b710:	bd70      	pop	{r4, r5, r6, pc}
 800b712:	220c      	movs	r2, #12
 800b714:	2600      	movs	r6, #0
 800b716:	6002      	str	r2, [r0, #0]
 800b718:	e7f9      	b.n	800b70e <_calloc_r+0x12>
 800b71a:	462a      	mov	r2, r5
 800b71c:	4621      	mov	r1, r4
 800b71e:	f7fe f939 	bl	8009994 <memset>
 800b722:	e7f4      	b.n	800b70e <_calloc_r+0x12>

0800b724 <_free_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4605      	mov	r5, r0
 800b728:	2900      	cmp	r1, #0
 800b72a:	d040      	beq.n	800b7ae <_free_r+0x8a>
 800b72c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b730:	1f0c      	subs	r4, r1, #4
 800b732:	2b00      	cmp	r3, #0
 800b734:	bfb8      	it	lt
 800b736:	18e4      	addlt	r4, r4, r3
 800b738:	f000 fa98 	bl	800bc6c <__malloc_lock>
 800b73c:	4a1c      	ldr	r2, [pc, #112]	; (800b7b0 <_free_r+0x8c>)
 800b73e:	6813      	ldr	r3, [r2, #0]
 800b740:	b933      	cbnz	r3, 800b750 <_free_r+0x2c>
 800b742:	6063      	str	r3, [r4, #4]
 800b744:	6014      	str	r4, [r2, #0]
 800b746:	4628      	mov	r0, r5
 800b748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b74c:	f000 ba94 	b.w	800bc78 <__malloc_unlock>
 800b750:	42a3      	cmp	r3, r4
 800b752:	d908      	bls.n	800b766 <_free_r+0x42>
 800b754:	6820      	ldr	r0, [r4, #0]
 800b756:	1821      	adds	r1, r4, r0
 800b758:	428b      	cmp	r3, r1
 800b75a:	bf01      	itttt	eq
 800b75c:	6819      	ldreq	r1, [r3, #0]
 800b75e:	685b      	ldreq	r3, [r3, #4]
 800b760:	1809      	addeq	r1, r1, r0
 800b762:	6021      	streq	r1, [r4, #0]
 800b764:	e7ed      	b.n	800b742 <_free_r+0x1e>
 800b766:	461a      	mov	r2, r3
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	b10b      	cbz	r3, 800b770 <_free_r+0x4c>
 800b76c:	42a3      	cmp	r3, r4
 800b76e:	d9fa      	bls.n	800b766 <_free_r+0x42>
 800b770:	6811      	ldr	r1, [r2, #0]
 800b772:	1850      	adds	r0, r2, r1
 800b774:	42a0      	cmp	r0, r4
 800b776:	d10b      	bne.n	800b790 <_free_r+0x6c>
 800b778:	6820      	ldr	r0, [r4, #0]
 800b77a:	4401      	add	r1, r0
 800b77c:	1850      	adds	r0, r2, r1
 800b77e:	4283      	cmp	r3, r0
 800b780:	6011      	str	r1, [r2, #0]
 800b782:	d1e0      	bne.n	800b746 <_free_r+0x22>
 800b784:	6818      	ldr	r0, [r3, #0]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	4401      	add	r1, r0
 800b78a:	6011      	str	r1, [r2, #0]
 800b78c:	6053      	str	r3, [r2, #4]
 800b78e:	e7da      	b.n	800b746 <_free_r+0x22>
 800b790:	d902      	bls.n	800b798 <_free_r+0x74>
 800b792:	230c      	movs	r3, #12
 800b794:	602b      	str	r3, [r5, #0]
 800b796:	e7d6      	b.n	800b746 <_free_r+0x22>
 800b798:	6820      	ldr	r0, [r4, #0]
 800b79a:	1821      	adds	r1, r4, r0
 800b79c:	428b      	cmp	r3, r1
 800b79e:	bf01      	itttt	eq
 800b7a0:	6819      	ldreq	r1, [r3, #0]
 800b7a2:	685b      	ldreq	r3, [r3, #4]
 800b7a4:	1809      	addeq	r1, r1, r0
 800b7a6:	6021      	streq	r1, [r4, #0]
 800b7a8:	6063      	str	r3, [r4, #4]
 800b7aa:	6054      	str	r4, [r2, #4]
 800b7ac:	e7cb      	b.n	800b746 <_free_r+0x22>
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	200019ac 	.word	0x200019ac

0800b7b4 <sbrk_aligned>:
 800b7b4:	b570      	push	{r4, r5, r6, lr}
 800b7b6:	4e0e      	ldr	r6, [pc, #56]	; (800b7f0 <sbrk_aligned+0x3c>)
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	6831      	ldr	r1, [r6, #0]
 800b7bc:	4605      	mov	r5, r0
 800b7be:	b911      	cbnz	r1, 800b7c6 <sbrk_aligned+0x12>
 800b7c0:	f000 f9e8 	bl	800bb94 <_sbrk_r>
 800b7c4:	6030      	str	r0, [r6, #0]
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	f000 f9e3 	bl	800bb94 <_sbrk_r>
 800b7ce:	1c43      	adds	r3, r0, #1
 800b7d0:	d00a      	beq.n	800b7e8 <sbrk_aligned+0x34>
 800b7d2:	1cc4      	adds	r4, r0, #3
 800b7d4:	f024 0403 	bic.w	r4, r4, #3
 800b7d8:	42a0      	cmp	r0, r4
 800b7da:	d007      	beq.n	800b7ec <sbrk_aligned+0x38>
 800b7dc:	1a21      	subs	r1, r4, r0
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f000 f9d8 	bl	800bb94 <_sbrk_r>
 800b7e4:	3001      	adds	r0, #1
 800b7e6:	d101      	bne.n	800b7ec <sbrk_aligned+0x38>
 800b7e8:	f04f 34ff 	mov.w	r4, #4294967295
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	200019b0 	.word	0x200019b0

0800b7f4 <_malloc_r>:
 800b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f8:	1ccd      	adds	r5, r1, #3
 800b7fa:	f025 0503 	bic.w	r5, r5, #3
 800b7fe:	3508      	adds	r5, #8
 800b800:	2d0c      	cmp	r5, #12
 800b802:	bf38      	it	cc
 800b804:	250c      	movcc	r5, #12
 800b806:	2d00      	cmp	r5, #0
 800b808:	4607      	mov	r7, r0
 800b80a:	db01      	blt.n	800b810 <_malloc_r+0x1c>
 800b80c:	42a9      	cmp	r1, r5
 800b80e:	d905      	bls.n	800b81c <_malloc_r+0x28>
 800b810:	230c      	movs	r3, #12
 800b812:	2600      	movs	r6, #0
 800b814:	603b      	str	r3, [r7, #0]
 800b816:	4630      	mov	r0, r6
 800b818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b81c:	4e2e      	ldr	r6, [pc, #184]	; (800b8d8 <_malloc_r+0xe4>)
 800b81e:	f000 fa25 	bl	800bc6c <__malloc_lock>
 800b822:	6833      	ldr	r3, [r6, #0]
 800b824:	461c      	mov	r4, r3
 800b826:	bb34      	cbnz	r4, 800b876 <_malloc_r+0x82>
 800b828:	4629      	mov	r1, r5
 800b82a:	4638      	mov	r0, r7
 800b82c:	f7ff ffc2 	bl	800b7b4 <sbrk_aligned>
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	4604      	mov	r4, r0
 800b834:	d14d      	bne.n	800b8d2 <_malloc_r+0xde>
 800b836:	6834      	ldr	r4, [r6, #0]
 800b838:	4626      	mov	r6, r4
 800b83a:	2e00      	cmp	r6, #0
 800b83c:	d140      	bne.n	800b8c0 <_malloc_r+0xcc>
 800b83e:	6823      	ldr	r3, [r4, #0]
 800b840:	4631      	mov	r1, r6
 800b842:	4638      	mov	r0, r7
 800b844:	eb04 0803 	add.w	r8, r4, r3
 800b848:	f000 f9a4 	bl	800bb94 <_sbrk_r>
 800b84c:	4580      	cmp	r8, r0
 800b84e:	d13a      	bne.n	800b8c6 <_malloc_r+0xd2>
 800b850:	6821      	ldr	r1, [r4, #0]
 800b852:	3503      	adds	r5, #3
 800b854:	1a6d      	subs	r5, r5, r1
 800b856:	f025 0503 	bic.w	r5, r5, #3
 800b85a:	3508      	adds	r5, #8
 800b85c:	2d0c      	cmp	r5, #12
 800b85e:	bf38      	it	cc
 800b860:	250c      	movcc	r5, #12
 800b862:	4638      	mov	r0, r7
 800b864:	4629      	mov	r1, r5
 800b866:	f7ff ffa5 	bl	800b7b4 <sbrk_aligned>
 800b86a:	3001      	adds	r0, #1
 800b86c:	d02b      	beq.n	800b8c6 <_malloc_r+0xd2>
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	442b      	add	r3, r5
 800b872:	6023      	str	r3, [r4, #0]
 800b874:	e00e      	b.n	800b894 <_malloc_r+0xa0>
 800b876:	6822      	ldr	r2, [r4, #0]
 800b878:	1b52      	subs	r2, r2, r5
 800b87a:	d41e      	bmi.n	800b8ba <_malloc_r+0xc6>
 800b87c:	2a0b      	cmp	r2, #11
 800b87e:	d916      	bls.n	800b8ae <_malloc_r+0xba>
 800b880:	1961      	adds	r1, r4, r5
 800b882:	42a3      	cmp	r3, r4
 800b884:	6025      	str	r5, [r4, #0]
 800b886:	bf18      	it	ne
 800b888:	6059      	strne	r1, [r3, #4]
 800b88a:	6863      	ldr	r3, [r4, #4]
 800b88c:	bf08      	it	eq
 800b88e:	6031      	streq	r1, [r6, #0]
 800b890:	5162      	str	r2, [r4, r5]
 800b892:	604b      	str	r3, [r1, #4]
 800b894:	4638      	mov	r0, r7
 800b896:	f104 060b 	add.w	r6, r4, #11
 800b89a:	f000 f9ed 	bl	800bc78 <__malloc_unlock>
 800b89e:	f026 0607 	bic.w	r6, r6, #7
 800b8a2:	1d23      	adds	r3, r4, #4
 800b8a4:	1af2      	subs	r2, r6, r3
 800b8a6:	d0b6      	beq.n	800b816 <_malloc_r+0x22>
 800b8a8:	1b9b      	subs	r3, r3, r6
 800b8aa:	50a3      	str	r3, [r4, r2]
 800b8ac:	e7b3      	b.n	800b816 <_malloc_r+0x22>
 800b8ae:	6862      	ldr	r2, [r4, #4]
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	bf0c      	ite	eq
 800b8b4:	6032      	streq	r2, [r6, #0]
 800b8b6:	605a      	strne	r2, [r3, #4]
 800b8b8:	e7ec      	b.n	800b894 <_malloc_r+0xa0>
 800b8ba:	4623      	mov	r3, r4
 800b8bc:	6864      	ldr	r4, [r4, #4]
 800b8be:	e7b2      	b.n	800b826 <_malloc_r+0x32>
 800b8c0:	4634      	mov	r4, r6
 800b8c2:	6876      	ldr	r6, [r6, #4]
 800b8c4:	e7b9      	b.n	800b83a <_malloc_r+0x46>
 800b8c6:	230c      	movs	r3, #12
 800b8c8:	4638      	mov	r0, r7
 800b8ca:	603b      	str	r3, [r7, #0]
 800b8cc:	f000 f9d4 	bl	800bc78 <__malloc_unlock>
 800b8d0:	e7a1      	b.n	800b816 <_malloc_r+0x22>
 800b8d2:	6025      	str	r5, [r4, #0]
 800b8d4:	e7de      	b.n	800b894 <_malloc_r+0xa0>
 800b8d6:	bf00      	nop
 800b8d8:	200019ac 	.word	0x200019ac

0800b8dc <__ssputs_r>:
 800b8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e0:	688e      	ldr	r6, [r1, #8]
 800b8e2:	4682      	mov	sl, r0
 800b8e4:	429e      	cmp	r6, r3
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	4690      	mov	r8, r2
 800b8ea:	461f      	mov	r7, r3
 800b8ec:	d838      	bhi.n	800b960 <__ssputs_r+0x84>
 800b8ee:	898a      	ldrh	r2, [r1, #12]
 800b8f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8f4:	d032      	beq.n	800b95c <__ssputs_r+0x80>
 800b8f6:	6825      	ldr	r5, [r4, #0]
 800b8f8:	6909      	ldr	r1, [r1, #16]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	eba5 0901 	sub.w	r9, r5, r1
 800b900:	6965      	ldr	r5, [r4, #20]
 800b902:	444b      	add	r3, r9
 800b904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b908:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b90c:	106d      	asrs	r5, r5, #1
 800b90e:	429d      	cmp	r5, r3
 800b910:	bf38      	it	cc
 800b912:	461d      	movcc	r5, r3
 800b914:	0553      	lsls	r3, r2, #21
 800b916:	d531      	bpl.n	800b97c <__ssputs_r+0xa0>
 800b918:	4629      	mov	r1, r5
 800b91a:	f7ff ff6b 	bl	800b7f4 <_malloc_r>
 800b91e:	4606      	mov	r6, r0
 800b920:	b950      	cbnz	r0, 800b938 <__ssputs_r+0x5c>
 800b922:	230c      	movs	r3, #12
 800b924:	f04f 30ff 	mov.w	r0, #4294967295
 800b928:	f8ca 3000 	str.w	r3, [sl]
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b932:	81a3      	strh	r3, [r4, #12]
 800b934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b938:	464a      	mov	r2, r9
 800b93a:	6921      	ldr	r1, [r4, #16]
 800b93c:	f7fe f81c 	bl	8009978 <memcpy>
 800b940:	89a3      	ldrh	r3, [r4, #12]
 800b942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b94a:	81a3      	strh	r3, [r4, #12]
 800b94c:	6126      	str	r6, [r4, #16]
 800b94e:	444e      	add	r6, r9
 800b950:	6026      	str	r6, [r4, #0]
 800b952:	463e      	mov	r6, r7
 800b954:	6165      	str	r5, [r4, #20]
 800b956:	eba5 0509 	sub.w	r5, r5, r9
 800b95a:	60a5      	str	r5, [r4, #8]
 800b95c:	42be      	cmp	r6, r7
 800b95e:	d900      	bls.n	800b962 <__ssputs_r+0x86>
 800b960:	463e      	mov	r6, r7
 800b962:	4632      	mov	r2, r6
 800b964:	4641      	mov	r1, r8
 800b966:	6820      	ldr	r0, [r4, #0]
 800b968:	f000 f966 	bl	800bc38 <memmove>
 800b96c:	68a3      	ldr	r3, [r4, #8]
 800b96e:	2000      	movs	r0, #0
 800b970:	1b9b      	subs	r3, r3, r6
 800b972:	60a3      	str	r3, [r4, #8]
 800b974:	6823      	ldr	r3, [r4, #0]
 800b976:	4433      	add	r3, r6
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	e7db      	b.n	800b934 <__ssputs_r+0x58>
 800b97c:	462a      	mov	r2, r5
 800b97e:	f000 f981 	bl	800bc84 <_realloc_r>
 800b982:	4606      	mov	r6, r0
 800b984:	2800      	cmp	r0, #0
 800b986:	d1e1      	bne.n	800b94c <__ssputs_r+0x70>
 800b988:	4650      	mov	r0, sl
 800b98a:	6921      	ldr	r1, [r4, #16]
 800b98c:	f7ff feca 	bl	800b724 <_free_r>
 800b990:	e7c7      	b.n	800b922 <__ssputs_r+0x46>
	...

0800b994 <_svfiprintf_r>:
 800b994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	4698      	mov	r8, r3
 800b99a:	898b      	ldrh	r3, [r1, #12]
 800b99c:	4607      	mov	r7, r0
 800b99e:	061b      	lsls	r3, r3, #24
 800b9a0:	460d      	mov	r5, r1
 800b9a2:	4614      	mov	r4, r2
 800b9a4:	b09d      	sub	sp, #116	; 0x74
 800b9a6:	d50e      	bpl.n	800b9c6 <_svfiprintf_r+0x32>
 800b9a8:	690b      	ldr	r3, [r1, #16]
 800b9aa:	b963      	cbnz	r3, 800b9c6 <_svfiprintf_r+0x32>
 800b9ac:	2140      	movs	r1, #64	; 0x40
 800b9ae:	f7ff ff21 	bl	800b7f4 <_malloc_r>
 800b9b2:	6028      	str	r0, [r5, #0]
 800b9b4:	6128      	str	r0, [r5, #16]
 800b9b6:	b920      	cbnz	r0, 800b9c2 <_svfiprintf_r+0x2e>
 800b9b8:	230c      	movs	r3, #12
 800b9ba:	603b      	str	r3, [r7, #0]
 800b9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c0:	e0d1      	b.n	800bb66 <_svfiprintf_r+0x1d2>
 800b9c2:	2340      	movs	r3, #64	; 0x40
 800b9c4:	616b      	str	r3, [r5, #20]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ca:	2320      	movs	r3, #32
 800b9cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9d0:	2330      	movs	r3, #48	; 0x30
 800b9d2:	f04f 0901 	mov.w	r9, #1
 800b9d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bb80 <_svfiprintf_r+0x1ec>
 800b9de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9e2:	4623      	mov	r3, r4
 800b9e4:	469a      	mov	sl, r3
 800b9e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9ea:	b10a      	cbz	r2, 800b9f0 <_svfiprintf_r+0x5c>
 800b9ec:	2a25      	cmp	r2, #37	; 0x25
 800b9ee:	d1f9      	bne.n	800b9e4 <_svfiprintf_r+0x50>
 800b9f0:	ebba 0b04 	subs.w	fp, sl, r4
 800b9f4:	d00b      	beq.n	800ba0e <_svfiprintf_r+0x7a>
 800b9f6:	465b      	mov	r3, fp
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	4638      	mov	r0, r7
 800b9fe:	f7ff ff6d 	bl	800b8dc <__ssputs_r>
 800ba02:	3001      	adds	r0, #1
 800ba04:	f000 80aa 	beq.w	800bb5c <_svfiprintf_r+0x1c8>
 800ba08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba0a:	445a      	add	r2, fp
 800ba0c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f000 80a2 	beq.w	800bb5c <_svfiprintf_r+0x1c8>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba22:	f10a 0a01 	add.w	sl, sl, #1
 800ba26:	9304      	str	r3, [sp, #16]
 800ba28:	9307      	str	r3, [sp, #28]
 800ba2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba2e:	931a      	str	r3, [sp, #104]	; 0x68
 800ba30:	4654      	mov	r4, sl
 800ba32:	2205      	movs	r2, #5
 800ba34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba38:	4851      	ldr	r0, [pc, #324]	; (800bb80 <_svfiprintf_r+0x1ec>)
 800ba3a:	f7ff facf 	bl	800afdc <memchr>
 800ba3e:	9a04      	ldr	r2, [sp, #16]
 800ba40:	b9d8      	cbnz	r0, 800ba7a <_svfiprintf_r+0xe6>
 800ba42:	06d0      	lsls	r0, r2, #27
 800ba44:	bf44      	itt	mi
 800ba46:	2320      	movmi	r3, #32
 800ba48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba4c:	0711      	lsls	r1, r2, #28
 800ba4e:	bf44      	itt	mi
 800ba50:	232b      	movmi	r3, #43	; 0x2b
 800ba52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba56:	f89a 3000 	ldrb.w	r3, [sl]
 800ba5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba5c:	d015      	beq.n	800ba8a <_svfiprintf_r+0xf6>
 800ba5e:	4654      	mov	r4, sl
 800ba60:	2000      	movs	r0, #0
 800ba62:	f04f 0c0a 	mov.w	ip, #10
 800ba66:	9a07      	ldr	r2, [sp, #28]
 800ba68:	4621      	mov	r1, r4
 800ba6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba6e:	3b30      	subs	r3, #48	; 0x30
 800ba70:	2b09      	cmp	r3, #9
 800ba72:	d94e      	bls.n	800bb12 <_svfiprintf_r+0x17e>
 800ba74:	b1b0      	cbz	r0, 800baa4 <_svfiprintf_r+0x110>
 800ba76:	9207      	str	r2, [sp, #28]
 800ba78:	e014      	b.n	800baa4 <_svfiprintf_r+0x110>
 800ba7a:	eba0 0308 	sub.w	r3, r0, r8
 800ba7e:	fa09 f303 	lsl.w	r3, r9, r3
 800ba82:	4313      	orrs	r3, r2
 800ba84:	46a2      	mov	sl, r4
 800ba86:	9304      	str	r3, [sp, #16]
 800ba88:	e7d2      	b.n	800ba30 <_svfiprintf_r+0x9c>
 800ba8a:	9b03      	ldr	r3, [sp, #12]
 800ba8c:	1d19      	adds	r1, r3, #4
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	9103      	str	r1, [sp, #12]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	bfbb      	ittet	lt
 800ba96:	425b      	neglt	r3, r3
 800ba98:	f042 0202 	orrlt.w	r2, r2, #2
 800ba9c:	9307      	strge	r3, [sp, #28]
 800ba9e:	9307      	strlt	r3, [sp, #28]
 800baa0:	bfb8      	it	lt
 800baa2:	9204      	strlt	r2, [sp, #16]
 800baa4:	7823      	ldrb	r3, [r4, #0]
 800baa6:	2b2e      	cmp	r3, #46	; 0x2e
 800baa8:	d10c      	bne.n	800bac4 <_svfiprintf_r+0x130>
 800baaa:	7863      	ldrb	r3, [r4, #1]
 800baac:	2b2a      	cmp	r3, #42	; 0x2a
 800baae:	d135      	bne.n	800bb1c <_svfiprintf_r+0x188>
 800bab0:	9b03      	ldr	r3, [sp, #12]
 800bab2:	3402      	adds	r4, #2
 800bab4:	1d1a      	adds	r2, r3, #4
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	9203      	str	r2, [sp, #12]
 800baba:	2b00      	cmp	r3, #0
 800babc:	bfb8      	it	lt
 800babe:	f04f 33ff 	movlt.w	r3, #4294967295
 800bac2:	9305      	str	r3, [sp, #20]
 800bac4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bb84 <_svfiprintf_r+0x1f0>
 800bac8:	2203      	movs	r2, #3
 800baca:	4650      	mov	r0, sl
 800bacc:	7821      	ldrb	r1, [r4, #0]
 800bace:	f7ff fa85 	bl	800afdc <memchr>
 800bad2:	b140      	cbz	r0, 800bae6 <_svfiprintf_r+0x152>
 800bad4:	2340      	movs	r3, #64	; 0x40
 800bad6:	eba0 000a 	sub.w	r0, r0, sl
 800bada:	fa03 f000 	lsl.w	r0, r3, r0
 800bade:	9b04      	ldr	r3, [sp, #16]
 800bae0:	3401      	adds	r4, #1
 800bae2:	4303      	orrs	r3, r0
 800bae4:	9304      	str	r3, [sp, #16]
 800bae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baea:	2206      	movs	r2, #6
 800baec:	4826      	ldr	r0, [pc, #152]	; (800bb88 <_svfiprintf_r+0x1f4>)
 800baee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baf2:	f7ff fa73 	bl	800afdc <memchr>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d038      	beq.n	800bb6c <_svfiprintf_r+0x1d8>
 800bafa:	4b24      	ldr	r3, [pc, #144]	; (800bb8c <_svfiprintf_r+0x1f8>)
 800bafc:	bb1b      	cbnz	r3, 800bb46 <_svfiprintf_r+0x1b2>
 800bafe:	9b03      	ldr	r3, [sp, #12]
 800bb00:	3307      	adds	r3, #7
 800bb02:	f023 0307 	bic.w	r3, r3, #7
 800bb06:	3308      	adds	r3, #8
 800bb08:	9303      	str	r3, [sp, #12]
 800bb0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb0c:	4433      	add	r3, r6
 800bb0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb10:	e767      	b.n	800b9e2 <_svfiprintf_r+0x4e>
 800bb12:	460c      	mov	r4, r1
 800bb14:	2001      	movs	r0, #1
 800bb16:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb1a:	e7a5      	b.n	800ba68 <_svfiprintf_r+0xd4>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f04f 0c0a 	mov.w	ip, #10
 800bb22:	4619      	mov	r1, r3
 800bb24:	3401      	adds	r4, #1
 800bb26:	9305      	str	r3, [sp, #20]
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb2e:	3a30      	subs	r2, #48	; 0x30
 800bb30:	2a09      	cmp	r2, #9
 800bb32:	d903      	bls.n	800bb3c <_svfiprintf_r+0x1a8>
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d0c5      	beq.n	800bac4 <_svfiprintf_r+0x130>
 800bb38:	9105      	str	r1, [sp, #20]
 800bb3a:	e7c3      	b.n	800bac4 <_svfiprintf_r+0x130>
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	2301      	movs	r3, #1
 800bb40:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb44:	e7f0      	b.n	800bb28 <_svfiprintf_r+0x194>
 800bb46:	ab03      	add	r3, sp, #12
 800bb48:	9300      	str	r3, [sp, #0]
 800bb4a:	462a      	mov	r2, r5
 800bb4c:	4638      	mov	r0, r7
 800bb4e:	4b10      	ldr	r3, [pc, #64]	; (800bb90 <_svfiprintf_r+0x1fc>)
 800bb50:	a904      	add	r1, sp, #16
 800bb52:	f7fd ffc5 	bl	8009ae0 <_printf_float>
 800bb56:	1c42      	adds	r2, r0, #1
 800bb58:	4606      	mov	r6, r0
 800bb5a:	d1d6      	bne.n	800bb0a <_svfiprintf_r+0x176>
 800bb5c:	89ab      	ldrh	r3, [r5, #12]
 800bb5e:	065b      	lsls	r3, r3, #25
 800bb60:	f53f af2c 	bmi.w	800b9bc <_svfiprintf_r+0x28>
 800bb64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb66:	b01d      	add	sp, #116	; 0x74
 800bb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb6c:	ab03      	add	r3, sp, #12
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	462a      	mov	r2, r5
 800bb72:	4638      	mov	r0, r7
 800bb74:	4b06      	ldr	r3, [pc, #24]	; (800bb90 <_svfiprintf_r+0x1fc>)
 800bb76:	a904      	add	r1, sp, #16
 800bb78:	f7fe fa4e 	bl	800a018 <_printf_i>
 800bb7c:	e7eb      	b.n	800bb56 <_svfiprintf_r+0x1c2>
 800bb7e:	bf00      	nop
 800bb80:	0800cb04 	.word	0x0800cb04
 800bb84:	0800cb0a 	.word	0x0800cb0a
 800bb88:	0800cb0e 	.word	0x0800cb0e
 800bb8c:	08009ae1 	.word	0x08009ae1
 800bb90:	0800b8dd 	.word	0x0800b8dd

0800bb94 <_sbrk_r>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	2300      	movs	r3, #0
 800bb98:	4d05      	ldr	r5, [pc, #20]	; (800bbb0 <_sbrk_r+0x1c>)
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	4608      	mov	r0, r1
 800bb9e:	602b      	str	r3, [r5, #0]
 800bba0:	f7f8 fd8c 	bl	80046bc <_sbrk>
 800bba4:	1c43      	adds	r3, r0, #1
 800bba6:	d102      	bne.n	800bbae <_sbrk_r+0x1a>
 800bba8:	682b      	ldr	r3, [r5, #0]
 800bbaa:	b103      	cbz	r3, 800bbae <_sbrk_r+0x1a>
 800bbac:	6023      	str	r3, [r4, #0]
 800bbae:	bd38      	pop	{r3, r4, r5, pc}
 800bbb0:	200019b4 	.word	0x200019b4

0800bbb4 <__assert_func>:
 800bbb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbb6:	4614      	mov	r4, r2
 800bbb8:	461a      	mov	r2, r3
 800bbba:	4b09      	ldr	r3, [pc, #36]	; (800bbe0 <__assert_func+0x2c>)
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68d8      	ldr	r0, [r3, #12]
 800bbc2:	b14c      	cbz	r4, 800bbd8 <__assert_func+0x24>
 800bbc4:	4b07      	ldr	r3, [pc, #28]	; (800bbe4 <__assert_func+0x30>)
 800bbc6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbca:	9100      	str	r1, [sp, #0]
 800bbcc:	462b      	mov	r3, r5
 800bbce:	4906      	ldr	r1, [pc, #24]	; (800bbe8 <__assert_func+0x34>)
 800bbd0:	f000 f80e 	bl	800bbf0 <fiprintf>
 800bbd4:	f000 faaa 	bl	800c12c <abort>
 800bbd8:	4b04      	ldr	r3, [pc, #16]	; (800bbec <__assert_func+0x38>)
 800bbda:	461c      	mov	r4, r3
 800bbdc:	e7f3      	b.n	800bbc6 <__assert_func+0x12>
 800bbde:	bf00      	nop
 800bbe0:	2000018c 	.word	0x2000018c
 800bbe4:	0800cb15 	.word	0x0800cb15
 800bbe8:	0800cb22 	.word	0x0800cb22
 800bbec:	0800cb50 	.word	0x0800cb50

0800bbf0 <fiprintf>:
 800bbf0:	b40e      	push	{r1, r2, r3}
 800bbf2:	b503      	push	{r0, r1, lr}
 800bbf4:	4601      	mov	r1, r0
 800bbf6:	ab03      	add	r3, sp, #12
 800bbf8:	4805      	ldr	r0, [pc, #20]	; (800bc10 <fiprintf+0x20>)
 800bbfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbfe:	6800      	ldr	r0, [r0, #0]
 800bc00:	9301      	str	r3, [sp, #4]
 800bc02:	f000 f895 	bl	800bd30 <_vfiprintf_r>
 800bc06:	b002      	add	sp, #8
 800bc08:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc0c:	b003      	add	sp, #12
 800bc0e:	4770      	bx	lr
 800bc10:	2000018c 	.word	0x2000018c

0800bc14 <__ascii_mbtowc>:
 800bc14:	b082      	sub	sp, #8
 800bc16:	b901      	cbnz	r1, 800bc1a <__ascii_mbtowc+0x6>
 800bc18:	a901      	add	r1, sp, #4
 800bc1a:	b142      	cbz	r2, 800bc2e <__ascii_mbtowc+0x1a>
 800bc1c:	b14b      	cbz	r3, 800bc32 <__ascii_mbtowc+0x1e>
 800bc1e:	7813      	ldrb	r3, [r2, #0]
 800bc20:	600b      	str	r3, [r1, #0]
 800bc22:	7812      	ldrb	r2, [r2, #0]
 800bc24:	1e10      	subs	r0, r2, #0
 800bc26:	bf18      	it	ne
 800bc28:	2001      	movne	r0, #1
 800bc2a:	b002      	add	sp, #8
 800bc2c:	4770      	bx	lr
 800bc2e:	4610      	mov	r0, r2
 800bc30:	e7fb      	b.n	800bc2a <__ascii_mbtowc+0x16>
 800bc32:	f06f 0001 	mvn.w	r0, #1
 800bc36:	e7f8      	b.n	800bc2a <__ascii_mbtowc+0x16>

0800bc38 <memmove>:
 800bc38:	4288      	cmp	r0, r1
 800bc3a:	b510      	push	{r4, lr}
 800bc3c:	eb01 0402 	add.w	r4, r1, r2
 800bc40:	d902      	bls.n	800bc48 <memmove+0x10>
 800bc42:	4284      	cmp	r4, r0
 800bc44:	4623      	mov	r3, r4
 800bc46:	d807      	bhi.n	800bc58 <memmove+0x20>
 800bc48:	1e43      	subs	r3, r0, #1
 800bc4a:	42a1      	cmp	r1, r4
 800bc4c:	d008      	beq.n	800bc60 <memmove+0x28>
 800bc4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc56:	e7f8      	b.n	800bc4a <memmove+0x12>
 800bc58:	4601      	mov	r1, r0
 800bc5a:	4402      	add	r2, r0
 800bc5c:	428a      	cmp	r2, r1
 800bc5e:	d100      	bne.n	800bc62 <memmove+0x2a>
 800bc60:	bd10      	pop	{r4, pc}
 800bc62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc6a:	e7f7      	b.n	800bc5c <memmove+0x24>

0800bc6c <__malloc_lock>:
 800bc6c:	4801      	ldr	r0, [pc, #4]	; (800bc74 <__malloc_lock+0x8>)
 800bc6e:	f000 bc19 	b.w	800c4a4 <__retarget_lock_acquire_recursive>
 800bc72:	bf00      	nop
 800bc74:	200019b8 	.word	0x200019b8

0800bc78 <__malloc_unlock>:
 800bc78:	4801      	ldr	r0, [pc, #4]	; (800bc80 <__malloc_unlock+0x8>)
 800bc7a:	f000 bc14 	b.w	800c4a6 <__retarget_lock_release_recursive>
 800bc7e:	bf00      	nop
 800bc80:	200019b8 	.word	0x200019b8

0800bc84 <_realloc_r>:
 800bc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc88:	4680      	mov	r8, r0
 800bc8a:	4614      	mov	r4, r2
 800bc8c:	460e      	mov	r6, r1
 800bc8e:	b921      	cbnz	r1, 800bc9a <_realloc_r+0x16>
 800bc90:	4611      	mov	r1, r2
 800bc92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc96:	f7ff bdad 	b.w	800b7f4 <_malloc_r>
 800bc9a:	b92a      	cbnz	r2, 800bca8 <_realloc_r+0x24>
 800bc9c:	f7ff fd42 	bl	800b724 <_free_r>
 800bca0:	4625      	mov	r5, r4
 800bca2:	4628      	mov	r0, r5
 800bca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca8:	f000 fc64 	bl	800c574 <_malloc_usable_size_r>
 800bcac:	4284      	cmp	r4, r0
 800bcae:	4607      	mov	r7, r0
 800bcb0:	d802      	bhi.n	800bcb8 <_realloc_r+0x34>
 800bcb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bcb6:	d812      	bhi.n	800bcde <_realloc_r+0x5a>
 800bcb8:	4621      	mov	r1, r4
 800bcba:	4640      	mov	r0, r8
 800bcbc:	f7ff fd9a 	bl	800b7f4 <_malloc_r>
 800bcc0:	4605      	mov	r5, r0
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d0ed      	beq.n	800bca2 <_realloc_r+0x1e>
 800bcc6:	42bc      	cmp	r4, r7
 800bcc8:	4622      	mov	r2, r4
 800bcca:	4631      	mov	r1, r6
 800bccc:	bf28      	it	cs
 800bcce:	463a      	movcs	r2, r7
 800bcd0:	f7fd fe52 	bl	8009978 <memcpy>
 800bcd4:	4631      	mov	r1, r6
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	f7ff fd24 	bl	800b724 <_free_r>
 800bcdc:	e7e1      	b.n	800bca2 <_realloc_r+0x1e>
 800bcde:	4635      	mov	r5, r6
 800bce0:	e7df      	b.n	800bca2 <_realloc_r+0x1e>

0800bce2 <__sfputc_r>:
 800bce2:	6893      	ldr	r3, [r2, #8]
 800bce4:	b410      	push	{r4}
 800bce6:	3b01      	subs	r3, #1
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	6093      	str	r3, [r2, #8]
 800bcec:	da07      	bge.n	800bcfe <__sfputc_r+0x1c>
 800bcee:	6994      	ldr	r4, [r2, #24]
 800bcf0:	42a3      	cmp	r3, r4
 800bcf2:	db01      	blt.n	800bcf8 <__sfputc_r+0x16>
 800bcf4:	290a      	cmp	r1, #10
 800bcf6:	d102      	bne.n	800bcfe <__sfputc_r+0x1c>
 800bcf8:	bc10      	pop	{r4}
 800bcfa:	f000 b949 	b.w	800bf90 <__swbuf_r>
 800bcfe:	6813      	ldr	r3, [r2, #0]
 800bd00:	1c58      	adds	r0, r3, #1
 800bd02:	6010      	str	r0, [r2, #0]
 800bd04:	7019      	strb	r1, [r3, #0]
 800bd06:	4608      	mov	r0, r1
 800bd08:	bc10      	pop	{r4}
 800bd0a:	4770      	bx	lr

0800bd0c <__sfputs_r>:
 800bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0e:	4606      	mov	r6, r0
 800bd10:	460f      	mov	r7, r1
 800bd12:	4614      	mov	r4, r2
 800bd14:	18d5      	adds	r5, r2, r3
 800bd16:	42ac      	cmp	r4, r5
 800bd18:	d101      	bne.n	800bd1e <__sfputs_r+0x12>
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	e007      	b.n	800bd2e <__sfputs_r+0x22>
 800bd1e:	463a      	mov	r2, r7
 800bd20:	4630      	mov	r0, r6
 800bd22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd26:	f7ff ffdc 	bl	800bce2 <__sfputc_r>
 800bd2a:	1c43      	adds	r3, r0, #1
 800bd2c:	d1f3      	bne.n	800bd16 <__sfputs_r+0xa>
 800bd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd30 <_vfiprintf_r>:
 800bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd34:	460d      	mov	r5, r1
 800bd36:	4614      	mov	r4, r2
 800bd38:	4698      	mov	r8, r3
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	b09d      	sub	sp, #116	; 0x74
 800bd3e:	b118      	cbz	r0, 800bd48 <_vfiprintf_r+0x18>
 800bd40:	6983      	ldr	r3, [r0, #24]
 800bd42:	b90b      	cbnz	r3, 800bd48 <_vfiprintf_r+0x18>
 800bd44:	f000 fb10 	bl	800c368 <__sinit>
 800bd48:	4b89      	ldr	r3, [pc, #548]	; (800bf70 <_vfiprintf_r+0x240>)
 800bd4a:	429d      	cmp	r5, r3
 800bd4c:	d11b      	bne.n	800bd86 <_vfiprintf_r+0x56>
 800bd4e:	6875      	ldr	r5, [r6, #4]
 800bd50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd52:	07d9      	lsls	r1, r3, #31
 800bd54:	d405      	bmi.n	800bd62 <_vfiprintf_r+0x32>
 800bd56:	89ab      	ldrh	r3, [r5, #12]
 800bd58:	059a      	lsls	r2, r3, #22
 800bd5a:	d402      	bmi.n	800bd62 <_vfiprintf_r+0x32>
 800bd5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd5e:	f000 fba1 	bl	800c4a4 <__retarget_lock_acquire_recursive>
 800bd62:	89ab      	ldrh	r3, [r5, #12]
 800bd64:	071b      	lsls	r3, r3, #28
 800bd66:	d501      	bpl.n	800bd6c <_vfiprintf_r+0x3c>
 800bd68:	692b      	ldr	r3, [r5, #16]
 800bd6a:	b9eb      	cbnz	r3, 800bda8 <_vfiprintf_r+0x78>
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	4630      	mov	r0, r6
 800bd70:	f000 f96e 	bl	800c050 <__swsetup_r>
 800bd74:	b1c0      	cbz	r0, 800bda8 <_vfiprintf_r+0x78>
 800bd76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd78:	07dc      	lsls	r4, r3, #31
 800bd7a:	d50e      	bpl.n	800bd9a <_vfiprintf_r+0x6a>
 800bd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd80:	b01d      	add	sp, #116	; 0x74
 800bd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd86:	4b7b      	ldr	r3, [pc, #492]	; (800bf74 <_vfiprintf_r+0x244>)
 800bd88:	429d      	cmp	r5, r3
 800bd8a:	d101      	bne.n	800bd90 <_vfiprintf_r+0x60>
 800bd8c:	68b5      	ldr	r5, [r6, #8]
 800bd8e:	e7df      	b.n	800bd50 <_vfiprintf_r+0x20>
 800bd90:	4b79      	ldr	r3, [pc, #484]	; (800bf78 <_vfiprintf_r+0x248>)
 800bd92:	429d      	cmp	r5, r3
 800bd94:	bf08      	it	eq
 800bd96:	68f5      	ldreq	r5, [r6, #12]
 800bd98:	e7da      	b.n	800bd50 <_vfiprintf_r+0x20>
 800bd9a:	89ab      	ldrh	r3, [r5, #12]
 800bd9c:	0598      	lsls	r0, r3, #22
 800bd9e:	d4ed      	bmi.n	800bd7c <_vfiprintf_r+0x4c>
 800bda0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bda2:	f000 fb80 	bl	800c4a6 <__retarget_lock_release_recursive>
 800bda6:	e7e9      	b.n	800bd7c <_vfiprintf_r+0x4c>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	9309      	str	r3, [sp, #36]	; 0x24
 800bdac:	2320      	movs	r3, #32
 800bdae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdb2:	2330      	movs	r3, #48	; 0x30
 800bdb4:	f04f 0901 	mov.w	r9, #1
 800bdb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdbc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bf7c <_vfiprintf_r+0x24c>
 800bdc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdc4:	4623      	mov	r3, r4
 800bdc6:	469a      	mov	sl, r3
 800bdc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdcc:	b10a      	cbz	r2, 800bdd2 <_vfiprintf_r+0xa2>
 800bdce:	2a25      	cmp	r2, #37	; 0x25
 800bdd0:	d1f9      	bne.n	800bdc6 <_vfiprintf_r+0x96>
 800bdd2:	ebba 0b04 	subs.w	fp, sl, r4
 800bdd6:	d00b      	beq.n	800bdf0 <_vfiprintf_r+0xc0>
 800bdd8:	465b      	mov	r3, fp
 800bdda:	4622      	mov	r2, r4
 800bddc:	4629      	mov	r1, r5
 800bdde:	4630      	mov	r0, r6
 800bde0:	f7ff ff94 	bl	800bd0c <__sfputs_r>
 800bde4:	3001      	adds	r0, #1
 800bde6:	f000 80aa 	beq.w	800bf3e <_vfiprintf_r+0x20e>
 800bdea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdec:	445a      	add	r2, fp
 800bdee:	9209      	str	r2, [sp, #36]	; 0x24
 800bdf0:	f89a 3000 	ldrb.w	r3, [sl]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 80a2 	beq.w	800bf3e <_vfiprintf_r+0x20e>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f04f 32ff 	mov.w	r2, #4294967295
 800be00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be04:	f10a 0a01 	add.w	sl, sl, #1
 800be08:	9304      	str	r3, [sp, #16]
 800be0a:	9307      	str	r3, [sp, #28]
 800be0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be10:	931a      	str	r3, [sp, #104]	; 0x68
 800be12:	4654      	mov	r4, sl
 800be14:	2205      	movs	r2, #5
 800be16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be1a:	4858      	ldr	r0, [pc, #352]	; (800bf7c <_vfiprintf_r+0x24c>)
 800be1c:	f7ff f8de 	bl	800afdc <memchr>
 800be20:	9a04      	ldr	r2, [sp, #16]
 800be22:	b9d8      	cbnz	r0, 800be5c <_vfiprintf_r+0x12c>
 800be24:	06d1      	lsls	r1, r2, #27
 800be26:	bf44      	itt	mi
 800be28:	2320      	movmi	r3, #32
 800be2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be2e:	0713      	lsls	r3, r2, #28
 800be30:	bf44      	itt	mi
 800be32:	232b      	movmi	r3, #43	; 0x2b
 800be34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be38:	f89a 3000 	ldrb.w	r3, [sl]
 800be3c:	2b2a      	cmp	r3, #42	; 0x2a
 800be3e:	d015      	beq.n	800be6c <_vfiprintf_r+0x13c>
 800be40:	4654      	mov	r4, sl
 800be42:	2000      	movs	r0, #0
 800be44:	f04f 0c0a 	mov.w	ip, #10
 800be48:	9a07      	ldr	r2, [sp, #28]
 800be4a:	4621      	mov	r1, r4
 800be4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be50:	3b30      	subs	r3, #48	; 0x30
 800be52:	2b09      	cmp	r3, #9
 800be54:	d94e      	bls.n	800bef4 <_vfiprintf_r+0x1c4>
 800be56:	b1b0      	cbz	r0, 800be86 <_vfiprintf_r+0x156>
 800be58:	9207      	str	r2, [sp, #28]
 800be5a:	e014      	b.n	800be86 <_vfiprintf_r+0x156>
 800be5c:	eba0 0308 	sub.w	r3, r0, r8
 800be60:	fa09 f303 	lsl.w	r3, r9, r3
 800be64:	4313      	orrs	r3, r2
 800be66:	46a2      	mov	sl, r4
 800be68:	9304      	str	r3, [sp, #16]
 800be6a:	e7d2      	b.n	800be12 <_vfiprintf_r+0xe2>
 800be6c:	9b03      	ldr	r3, [sp, #12]
 800be6e:	1d19      	adds	r1, r3, #4
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	9103      	str	r1, [sp, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	bfbb      	ittet	lt
 800be78:	425b      	neglt	r3, r3
 800be7a:	f042 0202 	orrlt.w	r2, r2, #2
 800be7e:	9307      	strge	r3, [sp, #28]
 800be80:	9307      	strlt	r3, [sp, #28]
 800be82:	bfb8      	it	lt
 800be84:	9204      	strlt	r2, [sp, #16]
 800be86:	7823      	ldrb	r3, [r4, #0]
 800be88:	2b2e      	cmp	r3, #46	; 0x2e
 800be8a:	d10c      	bne.n	800bea6 <_vfiprintf_r+0x176>
 800be8c:	7863      	ldrb	r3, [r4, #1]
 800be8e:	2b2a      	cmp	r3, #42	; 0x2a
 800be90:	d135      	bne.n	800befe <_vfiprintf_r+0x1ce>
 800be92:	9b03      	ldr	r3, [sp, #12]
 800be94:	3402      	adds	r4, #2
 800be96:	1d1a      	adds	r2, r3, #4
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	9203      	str	r2, [sp, #12]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	bfb8      	it	lt
 800bea0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bea4:	9305      	str	r3, [sp, #20]
 800bea6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bf80 <_vfiprintf_r+0x250>
 800beaa:	2203      	movs	r2, #3
 800beac:	4650      	mov	r0, sl
 800beae:	7821      	ldrb	r1, [r4, #0]
 800beb0:	f7ff f894 	bl	800afdc <memchr>
 800beb4:	b140      	cbz	r0, 800bec8 <_vfiprintf_r+0x198>
 800beb6:	2340      	movs	r3, #64	; 0x40
 800beb8:	eba0 000a 	sub.w	r0, r0, sl
 800bebc:	fa03 f000 	lsl.w	r0, r3, r0
 800bec0:	9b04      	ldr	r3, [sp, #16]
 800bec2:	3401      	adds	r4, #1
 800bec4:	4303      	orrs	r3, r0
 800bec6:	9304      	str	r3, [sp, #16]
 800bec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800becc:	2206      	movs	r2, #6
 800bece:	482d      	ldr	r0, [pc, #180]	; (800bf84 <_vfiprintf_r+0x254>)
 800bed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bed4:	f7ff f882 	bl	800afdc <memchr>
 800bed8:	2800      	cmp	r0, #0
 800beda:	d03f      	beq.n	800bf5c <_vfiprintf_r+0x22c>
 800bedc:	4b2a      	ldr	r3, [pc, #168]	; (800bf88 <_vfiprintf_r+0x258>)
 800bede:	bb1b      	cbnz	r3, 800bf28 <_vfiprintf_r+0x1f8>
 800bee0:	9b03      	ldr	r3, [sp, #12]
 800bee2:	3307      	adds	r3, #7
 800bee4:	f023 0307 	bic.w	r3, r3, #7
 800bee8:	3308      	adds	r3, #8
 800beea:	9303      	str	r3, [sp, #12]
 800beec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beee:	443b      	add	r3, r7
 800bef0:	9309      	str	r3, [sp, #36]	; 0x24
 800bef2:	e767      	b.n	800bdc4 <_vfiprintf_r+0x94>
 800bef4:	460c      	mov	r4, r1
 800bef6:	2001      	movs	r0, #1
 800bef8:	fb0c 3202 	mla	r2, ip, r2, r3
 800befc:	e7a5      	b.n	800be4a <_vfiprintf_r+0x11a>
 800befe:	2300      	movs	r3, #0
 800bf00:	f04f 0c0a 	mov.w	ip, #10
 800bf04:	4619      	mov	r1, r3
 800bf06:	3401      	adds	r4, #1
 800bf08:	9305      	str	r3, [sp, #20]
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf10:	3a30      	subs	r2, #48	; 0x30
 800bf12:	2a09      	cmp	r2, #9
 800bf14:	d903      	bls.n	800bf1e <_vfiprintf_r+0x1ee>
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d0c5      	beq.n	800bea6 <_vfiprintf_r+0x176>
 800bf1a:	9105      	str	r1, [sp, #20]
 800bf1c:	e7c3      	b.n	800bea6 <_vfiprintf_r+0x176>
 800bf1e:	4604      	mov	r4, r0
 800bf20:	2301      	movs	r3, #1
 800bf22:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf26:	e7f0      	b.n	800bf0a <_vfiprintf_r+0x1da>
 800bf28:	ab03      	add	r3, sp, #12
 800bf2a:	9300      	str	r3, [sp, #0]
 800bf2c:	462a      	mov	r2, r5
 800bf2e:	4630      	mov	r0, r6
 800bf30:	4b16      	ldr	r3, [pc, #88]	; (800bf8c <_vfiprintf_r+0x25c>)
 800bf32:	a904      	add	r1, sp, #16
 800bf34:	f7fd fdd4 	bl	8009ae0 <_printf_float>
 800bf38:	4607      	mov	r7, r0
 800bf3a:	1c78      	adds	r0, r7, #1
 800bf3c:	d1d6      	bne.n	800beec <_vfiprintf_r+0x1bc>
 800bf3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf40:	07d9      	lsls	r1, r3, #31
 800bf42:	d405      	bmi.n	800bf50 <_vfiprintf_r+0x220>
 800bf44:	89ab      	ldrh	r3, [r5, #12]
 800bf46:	059a      	lsls	r2, r3, #22
 800bf48:	d402      	bmi.n	800bf50 <_vfiprintf_r+0x220>
 800bf4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf4c:	f000 faab 	bl	800c4a6 <__retarget_lock_release_recursive>
 800bf50:	89ab      	ldrh	r3, [r5, #12]
 800bf52:	065b      	lsls	r3, r3, #25
 800bf54:	f53f af12 	bmi.w	800bd7c <_vfiprintf_r+0x4c>
 800bf58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf5a:	e711      	b.n	800bd80 <_vfiprintf_r+0x50>
 800bf5c:	ab03      	add	r3, sp, #12
 800bf5e:	9300      	str	r3, [sp, #0]
 800bf60:	462a      	mov	r2, r5
 800bf62:	4630      	mov	r0, r6
 800bf64:	4b09      	ldr	r3, [pc, #36]	; (800bf8c <_vfiprintf_r+0x25c>)
 800bf66:	a904      	add	r1, sp, #16
 800bf68:	f7fe f856 	bl	800a018 <_printf_i>
 800bf6c:	e7e4      	b.n	800bf38 <_vfiprintf_r+0x208>
 800bf6e:	bf00      	nop
 800bf70:	0800cc7c 	.word	0x0800cc7c
 800bf74:	0800cc9c 	.word	0x0800cc9c
 800bf78:	0800cc5c 	.word	0x0800cc5c
 800bf7c:	0800cb04 	.word	0x0800cb04
 800bf80:	0800cb0a 	.word	0x0800cb0a
 800bf84:	0800cb0e 	.word	0x0800cb0e
 800bf88:	08009ae1 	.word	0x08009ae1
 800bf8c:	0800bd0d 	.word	0x0800bd0d

0800bf90 <__swbuf_r>:
 800bf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf92:	460e      	mov	r6, r1
 800bf94:	4614      	mov	r4, r2
 800bf96:	4605      	mov	r5, r0
 800bf98:	b118      	cbz	r0, 800bfa2 <__swbuf_r+0x12>
 800bf9a:	6983      	ldr	r3, [r0, #24]
 800bf9c:	b90b      	cbnz	r3, 800bfa2 <__swbuf_r+0x12>
 800bf9e:	f000 f9e3 	bl	800c368 <__sinit>
 800bfa2:	4b21      	ldr	r3, [pc, #132]	; (800c028 <__swbuf_r+0x98>)
 800bfa4:	429c      	cmp	r4, r3
 800bfa6:	d12b      	bne.n	800c000 <__swbuf_r+0x70>
 800bfa8:	686c      	ldr	r4, [r5, #4]
 800bfaa:	69a3      	ldr	r3, [r4, #24]
 800bfac:	60a3      	str	r3, [r4, #8]
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	071a      	lsls	r2, r3, #28
 800bfb2:	d52f      	bpl.n	800c014 <__swbuf_r+0x84>
 800bfb4:	6923      	ldr	r3, [r4, #16]
 800bfb6:	b36b      	cbz	r3, 800c014 <__swbuf_r+0x84>
 800bfb8:	6923      	ldr	r3, [r4, #16]
 800bfba:	6820      	ldr	r0, [r4, #0]
 800bfbc:	b2f6      	uxtb	r6, r6
 800bfbe:	1ac0      	subs	r0, r0, r3
 800bfc0:	6963      	ldr	r3, [r4, #20]
 800bfc2:	4637      	mov	r7, r6
 800bfc4:	4283      	cmp	r3, r0
 800bfc6:	dc04      	bgt.n	800bfd2 <__swbuf_r+0x42>
 800bfc8:	4621      	mov	r1, r4
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f000 f938 	bl	800c240 <_fflush_r>
 800bfd0:	bb30      	cbnz	r0, 800c020 <__swbuf_r+0x90>
 800bfd2:	68a3      	ldr	r3, [r4, #8]
 800bfd4:	3001      	adds	r0, #1
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	60a3      	str	r3, [r4, #8]
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	1c5a      	adds	r2, r3, #1
 800bfde:	6022      	str	r2, [r4, #0]
 800bfe0:	701e      	strb	r6, [r3, #0]
 800bfe2:	6963      	ldr	r3, [r4, #20]
 800bfe4:	4283      	cmp	r3, r0
 800bfe6:	d004      	beq.n	800bff2 <__swbuf_r+0x62>
 800bfe8:	89a3      	ldrh	r3, [r4, #12]
 800bfea:	07db      	lsls	r3, r3, #31
 800bfec:	d506      	bpl.n	800bffc <__swbuf_r+0x6c>
 800bfee:	2e0a      	cmp	r6, #10
 800bff0:	d104      	bne.n	800bffc <__swbuf_r+0x6c>
 800bff2:	4621      	mov	r1, r4
 800bff4:	4628      	mov	r0, r5
 800bff6:	f000 f923 	bl	800c240 <_fflush_r>
 800bffa:	b988      	cbnz	r0, 800c020 <__swbuf_r+0x90>
 800bffc:	4638      	mov	r0, r7
 800bffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c000:	4b0a      	ldr	r3, [pc, #40]	; (800c02c <__swbuf_r+0x9c>)
 800c002:	429c      	cmp	r4, r3
 800c004:	d101      	bne.n	800c00a <__swbuf_r+0x7a>
 800c006:	68ac      	ldr	r4, [r5, #8]
 800c008:	e7cf      	b.n	800bfaa <__swbuf_r+0x1a>
 800c00a:	4b09      	ldr	r3, [pc, #36]	; (800c030 <__swbuf_r+0xa0>)
 800c00c:	429c      	cmp	r4, r3
 800c00e:	bf08      	it	eq
 800c010:	68ec      	ldreq	r4, [r5, #12]
 800c012:	e7ca      	b.n	800bfaa <__swbuf_r+0x1a>
 800c014:	4621      	mov	r1, r4
 800c016:	4628      	mov	r0, r5
 800c018:	f000 f81a 	bl	800c050 <__swsetup_r>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d0cb      	beq.n	800bfb8 <__swbuf_r+0x28>
 800c020:	f04f 37ff 	mov.w	r7, #4294967295
 800c024:	e7ea      	b.n	800bffc <__swbuf_r+0x6c>
 800c026:	bf00      	nop
 800c028:	0800cc7c 	.word	0x0800cc7c
 800c02c:	0800cc9c 	.word	0x0800cc9c
 800c030:	0800cc5c 	.word	0x0800cc5c

0800c034 <__ascii_wctomb>:
 800c034:	4603      	mov	r3, r0
 800c036:	4608      	mov	r0, r1
 800c038:	b141      	cbz	r1, 800c04c <__ascii_wctomb+0x18>
 800c03a:	2aff      	cmp	r2, #255	; 0xff
 800c03c:	d904      	bls.n	800c048 <__ascii_wctomb+0x14>
 800c03e:	228a      	movs	r2, #138	; 0x8a
 800c040:	f04f 30ff 	mov.w	r0, #4294967295
 800c044:	601a      	str	r2, [r3, #0]
 800c046:	4770      	bx	lr
 800c048:	2001      	movs	r0, #1
 800c04a:	700a      	strb	r2, [r1, #0]
 800c04c:	4770      	bx	lr
	...

0800c050 <__swsetup_r>:
 800c050:	4b32      	ldr	r3, [pc, #200]	; (800c11c <__swsetup_r+0xcc>)
 800c052:	b570      	push	{r4, r5, r6, lr}
 800c054:	681d      	ldr	r5, [r3, #0]
 800c056:	4606      	mov	r6, r0
 800c058:	460c      	mov	r4, r1
 800c05a:	b125      	cbz	r5, 800c066 <__swsetup_r+0x16>
 800c05c:	69ab      	ldr	r3, [r5, #24]
 800c05e:	b913      	cbnz	r3, 800c066 <__swsetup_r+0x16>
 800c060:	4628      	mov	r0, r5
 800c062:	f000 f981 	bl	800c368 <__sinit>
 800c066:	4b2e      	ldr	r3, [pc, #184]	; (800c120 <__swsetup_r+0xd0>)
 800c068:	429c      	cmp	r4, r3
 800c06a:	d10f      	bne.n	800c08c <__swsetup_r+0x3c>
 800c06c:	686c      	ldr	r4, [r5, #4]
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c074:	0719      	lsls	r1, r3, #28
 800c076:	d42c      	bmi.n	800c0d2 <__swsetup_r+0x82>
 800c078:	06dd      	lsls	r5, r3, #27
 800c07a:	d411      	bmi.n	800c0a0 <__swsetup_r+0x50>
 800c07c:	2309      	movs	r3, #9
 800c07e:	6033      	str	r3, [r6, #0]
 800c080:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c084:	f04f 30ff 	mov.w	r0, #4294967295
 800c088:	81a3      	strh	r3, [r4, #12]
 800c08a:	e03e      	b.n	800c10a <__swsetup_r+0xba>
 800c08c:	4b25      	ldr	r3, [pc, #148]	; (800c124 <__swsetup_r+0xd4>)
 800c08e:	429c      	cmp	r4, r3
 800c090:	d101      	bne.n	800c096 <__swsetup_r+0x46>
 800c092:	68ac      	ldr	r4, [r5, #8]
 800c094:	e7eb      	b.n	800c06e <__swsetup_r+0x1e>
 800c096:	4b24      	ldr	r3, [pc, #144]	; (800c128 <__swsetup_r+0xd8>)
 800c098:	429c      	cmp	r4, r3
 800c09a:	bf08      	it	eq
 800c09c:	68ec      	ldreq	r4, [r5, #12]
 800c09e:	e7e6      	b.n	800c06e <__swsetup_r+0x1e>
 800c0a0:	0758      	lsls	r0, r3, #29
 800c0a2:	d512      	bpl.n	800c0ca <__swsetup_r+0x7a>
 800c0a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0a6:	b141      	cbz	r1, 800c0ba <__swsetup_r+0x6a>
 800c0a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0ac:	4299      	cmp	r1, r3
 800c0ae:	d002      	beq.n	800c0b6 <__swsetup_r+0x66>
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	f7ff fb37 	bl	800b724 <_free_r>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	6363      	str	r3, [r4, #52]	; 0x34
 800c0ba:	89a3      	ldrh	r3, [r4, #12]
 800c0bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0c0:	81a3      	strh	r3, [r4, #12]
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	6063      	str	r3, [r4, #4]
 800c0c6:	6923      	ldr	r3, [r4, #16]
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	89a3      	ldrh	r3, [r4, #12]
 800c0cc:	f043 0308 	orr.w	r3, r3, #8
 800c0d0:	81a3      	strh	r3, [r4, #12]
 800c0d2:	6923      	ldr	r3, [r4, #16]
 800c0d4:	b94b      	cbnz	r3, 800c0ea <__swsetup_r+0x9a>
 800c0d6:	89a3      	ldrh	r3, [r4, #12]
 800c0d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0e0:	d003      	beq.n	800c0ea <__swsetup_r+0x9a>
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	f000 fa05 	bl	800c4f4 <__smakebuf_r>
 800c0ea:	89a0      	ldrh	r0, [r4, #12]
 800c0ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0f0:	f010 0301 	ands.w	r3, r0, #1
 800c0f4:	d00a      	beq.n	800c10c <__swsetup_r+0xbc>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	60a3      	str	r3, [r4, #8]
 800c0fa:	6963      	ldr	r3, [r4, #20]
 800c0fc:	425b      	negs	r3, r3
 800c0fe:	61a3      	str	r3, [r4, #24]
 800c100:	6923      	ldr	r3, [r4, #16]
 800c102:	b943      	cbnz	r3, 800c116 <__swsetup_r+0xc6>
 800c104:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c108:	d1ba      	bne.n	800c080 <__swsetup_r+0x30>
 800c10a:	bd70      	pop	{r4, r5, r6, pc}
 800c10c:	0781      	lsls	r1, r0, #30
 800c10e:	bf58      	it	pl
 800c110:	6963      	ldrpl	r3, [r4, #20]
 800c112:	60a3      	str	r3, [r4, #8]
 800c114:	e7f4      	b.n	800c100 <__swsetup_r+0xb0>
 800c116:	2000      	movs	r0, #0
 800c118:	e7f7      	b.n	800c10a <__swsetup_r+0xba>
 800c11a:	bf00      	nop
 800c11c:	2000018c 	.word	0x2000018c
 800c120:	0800cc7c 	.word	0x0800cc7c
 800c124:	0800cc9c 	.word	0x0800cc9c
 800c128:	0800cc5c 	.word	0x0800cc5c

0800c12c <abort>:
 800c12c:	2006      	movs	r0, #6
 800c12e:	b508      	push	{r3, lr}
 800c130:	f000 fa50 	bl	800c5d4 <raise>
 800c134:	2001      	movs	r0, #1
 800c136:	f7f8 fa91 	bl	800465c <_exit>
	...

0800c13c <__sflush_r>:
 800c13c:	898a      	ldrh	r2, [r1, #12]
 800c13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c140:	4605      	mov	r5, r0
 800c142:	0710      	lsls	r0, r2, #28
 800c144:	460c      	mov	r4, r1
 800c146:	d457      	bmi.n	800c1f8 <__sflush_r+0xbc>
 800c148:	684b      	ldr	r3, [r1, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	dc04      	bgt.n	800c158 <__sflush_r+0x1c>
 800c14e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c150:	2b00      	cmp	r3, #0
 800c152:	dc01      	bgt.n	800c158 <__sflush_r+0x1c>
 800c154:	2000      	movs	r0, #0
 800c156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c15a:	2e00      	cmp	r6, #0
 800c15c:	d0fa      	beq.n	800c154 <__sflush_r+0x18>
 800c15e:	2300      	movs	r3, #0
 800c160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c164:	682f      	ldr	r7, [r5, #0]
 800c166:	602b      	str	r3, [r5, #0]
 800c168:	d032      	beq.n	800c1d0 <__sflush_r+0x94>
 800c16a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	075a      	lsls	r2, r3, #29
 800c170:	d505      	bpl.n	800c17e <__sflush_r+0x42>
 800c172:	6863      	ldr	r3, [r4, #4]
 800c174:	1ac0      	subs	r0, r0, r3
 800c176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c178:	b10b      	cbz	r3, 800c17e <__sflush_r+0x42>
 800c17a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c17c:	1ac0      	subs	r0, r0, r3
 800c17e:	2300      	movs	r3, #0
 800c180:	4602      	mov	r2, r0
 800c182:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c184:	4628      	mov	r0, r5
 800c186:	6a21      	ldr	r1, [r4, #32]
 800c188:	47b0      	blx	r6
 800c18a:	1c43      	adds	r3, r0, #1
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	d106      	bne.n	800c19e <__sflush_r+0x62>
 800c190:	6829      	ldr	r1, [r5, #0]
 800c192:	291d      	cmp	r1, #29
 800c194:	d82c      	bhi.n	800c1f0 <__sflush_r+0xb4>
 800c196:	4a29      	ldr	r2, [pc, #164]	; (800c23c <__sflush_r+0x100>)
 800c198:	40ca      	lsrs	r2, r1
 800c19a:	07d6      	lsls	r6, r2, #31
 800c19c:	d528      	bpl.n	800c1f0 <__sflush_r+0xb4>
 800c19e:	2200      	movs	r2, #0
 800c1a0:	6062      	str	r2, [r4, #4]
 800c1a2:	6922      	ldr	r2, [r4, #16]
 800c1a4:	04d9      	lsls	r1, r3, #19
 800c1a6:	6022      	str	r2, [r4, #0]
 800c1a8:	d504      	bpl.n	800c1b4 <__sflush_r+0x78>
 800c1aa:	1c42      	adds	r2, r0, #1
 800c1ac:	d101      	bne.n	800c1b2 <__sflush_r+0x76>
 800c1ae:	682b      	ldr	r3, [r5, #0]
 800c1b0:	b903      	cbnz	r3, 800c1b4 <__sflush_r+0x78>
 800c1b2:	6560      	str	r0, [r4, #84]	; 0x54
 800c1b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1b6:	602f      	str	r7, [r5, #0]
 800c1b8:	2900      	cmp	r1, #0
 800c1ba:	d0cb      	beq.n	800c154 <__sflush_r+0x18>
 800c1bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1c0:	4299      	cmp	r1, r3
 800c1c2:	d002      	beq.n	800c1ca <__sflush_r+0x8e>
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	f7ff faad 	bl	800b724 <_free_r>
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	6360      	str	r0, [r4, #52]	; 0x34
 800c1ce:	e7c2      	b.n	800c156 <__sflush_r+0x1a>
 800c1d0:	6a21      	ldr	r1, [r4, #32]
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	47b0      	blx	r6
 800c1d8:	1c41      	adds	r1, r0, #1
 800c1da:	d1c7      	bne.n	800c16c <__sflush_r+0x30>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d0c4      	beq.n	800c16c <__sflush_r+0x30>
 800c1e2:	2b1d      	cmp	r3, #29
 800c1e4:	d001      	beq.n	800c1ea <__sflush_r+0xae>
 800c1e6:	2b16      	cmp	r3, #22
 800c1e8:	d101      	bne.n	800c1ee <__sflush_r+0xb2>
 800c1ea:	602f      	str	r7, [r5, #0]
 800c1ec:	e7b2      	b.n	800c154 <__sflush_r+0x18>
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1f4:	81a3      	strh	r3, [r4, #12]
 800c1f6:	e7ae      	b.n	800c156 <__sflush_r+0x1a>
 800c1f8:	690f      	ldr	r7, [r1, #16]
 800c1fa:	2f00      	cmp	r7, #0
 800c1fc:	d0aa      	beq.n	800c154 <__sflush_r+0x18>
 800c1fe:	0793      	lsls	r3, r2, #30
 800c200:	bf18      	it	ne
 800c202:	2300      	movne	r3, #0
 800c204:	680e      	ldr	r6, [r1, #0]
 800c206:	bf08      	it	eq
 800c208:	694b      	ldreq	r3, [r1, #20]
 800c20a:	1bf6      	subs	r6, r6, r7
 800c20c:	600f      	str	r7, [r1, #0]
 800c20e:	608b      	str	r3, [r1, #8]
 800c210:	2e00      	cmp	r6, #0
 800c212:	dd9f      	ble.n	800c154 <__sflush_r+0x18>
 800c214:	4633      	mov	r3, r6
 800c216:	463a      	mov	r2, r7
 800c218:	4628      	mov	r0, r5
 800c21a:	6a21      	ldr	r1, [r4, #32]
 800c21c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c220:	47e0      	blx	ip
 800c222:	2800      	cmp	r0, #0
 800c224:	dc06      	bgt.n	800c234 <__sflush_r+0xf8>
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	f04f 30ff 	mov.w	r0, #4294967295
 800c22c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c230:	81a3      	strh	r3, [r4, #12]
 800c232:	e790      	b.n	800c156 <__sflush_r+0x1a>
 800c234:	4407      	add	r7, r0
 800c236:	1a36      	subs	r6, r6, r0
 800c238:	e7ea      	b.n	800c210 <__sflush_r+0xd4>
 800c23a:	bf00      	nop
 800c23c:	20400001 	.word	0x20400001

0800c240 <_fflush_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	690b      	ldr	r3, [r1, #16]
 800c244:	4605      	mov	r5, r0
 800c246:	460c      	mov	r4, r1
 800c248:	b913      	cbnz	r3, 800c250 <_fflush_r+0x10>
 800c24a:	2500      	movs	r5, #0
 800c24c:	4628      	mov	r0, r5
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	b118      	cbz	r0, 800c25a <_fflush_r+0x1a>
 800c252:	6983      	ldr	r3, [r0, #24]
 800c254:	b90b      	cbnz	r3, 800c25a <_fflush_r+0x1a>
 800c256:	f000 f887 	bl	800c368 <__sinit>
 800c25a:	4b14      	ldr	r3, [pc, #80]	; (800c2ac <_fflush_r+0x6c>)
 800c25c:	429c      	cmp	r4, r3
 800c25e:	d11b      	bne.n	800c298 <_fflush_r+0x58>
 800c260:	686c      	ldr	r4, [r5, #4]
 800c262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d0ef      	beq.n	800c24a <_fflush_r+0xa>
 800c26a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c26c:	07d0      	lsls	r0, r2, #31
 800c26e:	d404      	bmi.n	800c27a <_fflush_r+0x3a>
 800c270:	0599      	lsls	r1, r3, #22
 800c272:	d402      	bmi.n	800c27a <_fflush_r+0x3a>
 800c274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c276:	f000 f915 	bl	800c4a4 <__retarget_lock_acquire_recursive>
 800c27a:	4628      	mov	r0, r5
 800c27c:	4621      	mov	r1, r4
 800c27e:	f7ff ff5d 	bl	800c13c <__sflush_r>
 800c282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c284:	4605      	mov	r5, r0
 800c286:	07da      	lsls	r2, r3, #31
 800c288:	d4e0      	bmi.n	800c24c <_fflush_r+0xc>
 800c28a:	89a3      	ldrh	r3, [r4, #12]
 800c28c:	059b      	lsls	r3, r3, #22
 800c28e:	d4dd      	bmi.n	800c24c <_fflush_r+0xc>
 800c290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c292:	f000 f908 	bl	800c4a6 <__retarget_lock_release_recursive>
 800c296:	e7d9      	b.n	800c24c <_fflush_r+0xc>
 800c298:	4b05      	ldr	r3, [pc, #20]	; (800c2b0 <_fflush_r+0x70>)
 800c29a:	429c      	cmp	r4, r3
 800c29c:	d101      	bne.n	800c2a2 <_fflush_r+0x62>
 800c29e:	68ac      	ldr	r4, [r5, #8]
 800c2a0:	e7df      	b.n	800c262 <_fflush_r+0x22>
 800c2a2:	4b04      	ldr	r3, [pc, #16]	; (800c2b4 <_fflush_r+0x74>)
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	bf08      	it	eq
 800c2a8:	68ec      	ldreq	r4, [r5, #12]
 800c2aa:	e7da      	b.n	800c262 <_fflush_r+0x22>
 800c2ac:	0800cc7c 	.word	0x0800cc7c
 800c2b0:	0800cc9c 	.word	0x0800cc9c
 800c2b4:	0800cc5c 	.word	0x0800cc5c

0800c2b8 <std>:
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	b510      	push	{r4, lr}
 800c2bc:	4604      	mov	r4, r0
 800c2be:	e9c0 3300 	strd	r3, r3, [r0]
 800c2c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2c6:	6083      	str	r3, [r0, #8]
 800c2c8:	8181      	strh	r1, [r0, #12]
 800c2ca:	6643      	str	r3, [r0, #100]	; 0x64
 800c2cc:	81c2      	strh	r2, [r0, #14]
 800c2ce:	6183      	str	r3, [r0, #24]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	2208      	movs	r2, #8
 800c2d4:	305c      	adds	r0, #92	; 0x5c
 800c2d6:	f7fd fb5d 	bl	8009994 <memset>
 800c2da:	4b05      	ldr	r3, [pc, #20]	; (800c2f0 <std+0x38>)
 800c2dc:	6224      	str	r4, [r4, #32]
 800c2de:	6263      	str	r3, [r4, #36]	; 0x24
 800c2e0:	4b04      	ldr	r3, [pc, #16]	; (800c2f4 <std+0x3c>)
 800c2e2:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2e4:	4b04      	ldr	r3, [pc, #16]	; (800c2f8 <std+0x40>)
 800c2e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2e8:	4b04      	ldr	r3, [pc, #16]	; (800c2fc <std+0x44>)
 800c2ea:	6323      	str	r3, [r4, #48]	; 0x30
 800c2ec:	bd10      	pop	{r4, pc}
 800c2ee:	bf00      	nop
 800c2f0:	0800c60d 	.word	0x0800c60d
 800c2f4:	0800c62f 	.word	0x0800c62f
 800c2f8:	0800c667 	.word	0x0800c667
 800c2fc:	0800c68b 	.word	0x0800c68b

0800c300 <_cleanup_r>:
 800c300:	4901      	ldr	r1, [pc, #4]	; (800c308 <_cleanup_r+0x8>)
 800c302:	f000 b8af 	b.w	800c464 <_fwalk_reent>
 800c306:	bf00      	nop
 800c308:	0800c241 	.word	0x0800c241

0800c30c <__sfmoreglue>:
 800c30c:	2268      	movs	r2, #104	; 0x68
 800c30e:	b570      	push	{r4, r5, r6, lr}
 800c310:	1e4d      	subs	r5, r1, #1
 800c312:	4355      	muls	r5, r2
 800c314:	460e      	mov	r6, r1
 800c316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c31a:	f7ff fa6b 	bl	800b7f4 <_malloc_r>
 800c31e:	4604      	mov	r4, r0
 800c320:	b140      	cbz	r0, 800c334 <__sfmoreglue+0x28>
 800c322:	2100      	movs	r1, #0
 800c324:	e9c0 1600 	strd	r1, r6, [r0]
 800c328:	300c      	adds	r0, #12
 800c32a:	60a0      	str	r0, [r4, #8]
 800c32c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c330:	f7fd fb30 	bl	8009994 <memset>
 800c334:	4620      	mov	r0, r4
 800c336:	bd70      	pop	{r4, r5, r6, pc}

0800c338 <__sfp_lock_acquire>:
 800c338:	4801      	ldr	r0, [pc, #4]	; (800c340 <__sfp_lock_acquire+0x8>)
 800c33a:	f000 b8b3 	b.w	800c4a4 <__retarget_lock_acquire_recursive>
 800c33e:	bf00      	nop
 800c340:	200019b9 	.word	0x200019b9

0800c344 <__sfp_lock_release>:
 800c344:	4801      	ldr	r0, [pc, #4]	; (800c34c <__sfp_lock_release+0x8>)
 800c346:	f000 b8ae 	b.w	800c4a6 <__retarget_lock_release_recursive>
 800c34a:	bf00      	nop
 800c34c:	200019b9 	.word	0x200019b9

0800c350 <__sinit_lock_acquire>:
 800c350:	4801      	ldr	r0, [pc, #4]	; (800c358 <__sinit_lock_acquire+0x8>)
 800c352:	f000 b8a7 	b.w	800c4a4 <__retarget_lock_acquire_recursive>
 800c356:	bf00      	nop
 800c358:	200019ba 	.word	0x200019ba

0800c35c <__sinit_lock_release>:
 800c35c:	4801      	ldr	r0, [pc, #4]	; (800c364 <__sinit_lock_release+0x8>)
 800c35e:	f000 b8a2 	b.w	800c4a6 <__retarget_lock_release_recursive>
 800c362:	bf00      	nop
 800c364:	200019ba 	.word	0x200019ba

0800c368 <__sinit>:
 800c368:	b510      	push	{r4, lr}
 800c36a:	4604      	mov	r4, r0
 800c36c:	f7ff fff0 	bl	800c350 <__sinit_lock_acquire>
 800c370:	69a3      	ldr	r3, [r4, #24]
 800c372:	b11b      	cbz	r3, 800c37c <__sinit+0x14>
 800c374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c378:	f7ff bff0 	b.w	800c35c <__sinit_lock_release>
 800c37c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c380:	6523      	str	r3, [r4, #80]	; 0x50
 800c382:	4b13      	ldr	r3, [pc, #76]	; (800c3d0 <__sinit+0x68>)
 800c384:	4a13      	ldr	r2, [pc, #76]	; (800c3d4 <__sinit+0x6c>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	62a2      	str	r2, [r4, #40]	; 0x28
 800c38a:	42a3      	cmp	r3, r4
 800c38c:	bf08      	it	eq
 800c38e:	2301      	moveq	r3, #1
 800c390:	4620      	mov	r0, r4
 800c392:	bf08      	it	eq
 800c394:	61a3      	streq	r3, [r4, #24]
 800c396:	f000 f81f 	bl	800c3d8 <__sfp>
 800c39a:	6060      	str	r0, [r4, #4]
 800c39c:	4620      	mov	r0, r4
 800c39e:	f000 f81b 	bl	800c3d8 <__sfp>
 800c3a2:	60a0      	str	r0, [r4, #8]
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f000 f817 	bl	800c3d8 <__sfp>
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	2104      	movs	r1, #4
 800c3ae:	60e0      	str	r0, [r4, #12]
 800c3b0:	6860      	ldr	r0, [r4, #4]
 800c3b2:	f7ff ff81 	bl	800c2b8 <std>
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	2109      	movs	r1, #9
 800c3ba:	68a0      	ldr	r0, [r4, #8]
 800c3bc:	f7ff ff7c 	bl	800c2b8 <std>
 800c3c0:	2202      	movs	r2, #2
 800c3c2:	2112      	movs	r1, #18
 800c3c4:	68e0      	ldr	r0, [r4, #12]
 800c3c6:	f7ff ff77 	bl	800c2b8 <std>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	61a3      	str	r3, [r4, #24]
 800c3ce:	e7d1      	b.n	800c374 <__sinit+0xc>
 800c3d0:	0800c8e4 	.word	0x0800c8e4
 800c3d4:	0800c301 	.word	0x0800c301

0800c3d8 <__sfp>:
 800c3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3da:	4607      	mov	r7, r0
 800c3dc:	f7ff ffac 	bl	800c338 <__sfp_lock_acquire>
 800c3e0:	4b1e      	ldr	r3, [pc, #120]	; (800c45c <__sfp+0x84>)
 800c3e2:	681e      	ldr	r6, [r3, #0]
 800c3e4:	69b3      	ldr	r3, [r6, #24]
 800c3e6:	b913      	cbnz	r3, 800c3ee <__sfp+0x16>
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	f7ff ffbd 	bl	800c368 <__sinit>
 800c3ee:	3648      	adds	r6, #72	; 0x48
 800c3f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	d503      	bpl.n	800c400 <__sfp+0x28>
 800c3f8:	6833      	ldr	r3, [r6, #0]
 800c3fa:	b30b      	cbz	r3, 800c440 <__sfp+0x68>
 800c3fc:	6836      	ldr	r6, [r6, #0]
 800c3fe:	e7f7      	b.n	800c3f0 <__sfp+0x18>
 800c400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c404:	b9d5      	cbnz	r5, 800c43c <__sfp+0x64>
 800c406:	4b16      	ldr	r3, [pc, #88]	; (800c460 <__sfp+0x88>)
 800c408:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c40c:	60e3      	str	r3, [r4, #12]
 800c40e:	6665      	str	r5, [r4, #100]	; 0x64
 800c410:	f000 f847 	bl	800c4a2 <__retarget_lock_init_recursive>
 800c414:	f7ff ff96 	bl	800c344 <__sfp_lock_release>
 800c418:	2208      	movs	r2, #8
 800c41a:	4629      	mov	r1, r5
 800c41c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c420:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c424:	6025      	str	r5, [r4, #0]
 800c426:	61a5      	str	r5, [r4, #24]
 800c428:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c42c:	f7fd fab2 	bl	8009994 <memset>
 800c430:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c434:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c438:	4620      	mov	r0, r4
 800c43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c43c:	3468      	adds	r4, #104	; 0x68
 800c43e:	e7d9      	b.n	800c3f4 <__sfp+0x1c>
 800c440:	2104      	movs	r1, #4
 800c442:	4638      	mov	r0, r7
 800c444:	f7ff ff62 	bl	800c30c <__sfmoreglue>
 800c448:	4604      	mov	r4, r0
 800c44a:	6030      	str	r0, [r6, #0]
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d1d5      	bne.n	800c3fc <__sfp+0x24>
 800c450:	f7ff ff78 	bl	800c344 <__sfp_lock_release>
 800c454:	230c      	movs	r3, #12
 800c456:	603b      	str	r3, [r7, #0]
 800c458:	e7ee      	b.n	800c438 <__sfp+0x60>
 800c45a:	bf00      	nop
 800c45c:	0800c8e4 	.word	0x0800c8e4
 800c460:	ffff0001 	.word	0xffff0001

0800c464 <_fwalk_reent>:
 800c464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c468:	4606      	mov	r6, r0
 800c46a:	4688      	mov	r8, r1
 800c46c:	2700      	movs	r7, #0
 800c46e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c472:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c476:	f1b9 0901 	subs.w	r9, r9, #1
 800c47a:	d505      	bpl.n	800c488 <_fwalk_reent+0x24>
 800c47c:	6824      	ldr	r4, [r4, #0]
 800c47e:	2c00      	cmp	r4, #0
 800c480:	d1f7      	bne.n	800c472 <_fwalk_reent+0xe>
 800c482:	4638      	mov	r0, r7
 800c484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c488:	89ab      	ldrh	r3, [r5, #12]
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d907      	bls.n	800c49e <_fwalk_reent+0x3a>
 800c48e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c492:	3301      	adds	r3, #1
 800c494:	d003      	beq.n	800c49e <_fwalk_reent+0x3a>
 800c496:	4629      	mov	r1, r5
 800c498:	4630      	mov	r0, r6
 800c49a:	47c0      	blx	r8
 800c49c:	4307      	orrs	r7, r0
 800c49e:	3568      	adds	r5, #104	; 0x68
 800c4a0:	e7e9      	b.n	800c476 <_fwalk_reent+0x12>

0800c4a2 <__retarget_lock_init_recursive>:
 800c4a2:	4770      	bx	lr

0800c4a4 <__retarget_lock_acquire_recursive>:
 800c4a4:	4770      	bx	lr

0800c4a6 <__retarget_lock_release_recursive>:
 800c4a6:	4770      	bx	lr

0800c4a8 <__swhatbuf_r>:
 800c4a8:	b570      	push	{r4, r5, r6, lr}
 800c4aa:	460e      	mov	r6, r1
 800c4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4b0:	4614      	mov	r4, r2
 800c4b2:	2900      	cmp	r1, #0
 800c4b4:	461d      	mov	r5, r3
 800c4b6:	b096      	sub	sp, #88	; 0x58
 800c4b8:	da08      	bge.n	800c4cc <__swhatbuf_r+0x24>
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c4c0:	602a      	str	r2, [r5, #0]
 800c4c2:	061a      	lsls	r2, r3, #24
 800c4c4:	d410      	bmi.n	800c4e8 <__swhatbuf_r+0x40>
 800c4c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4ca:	e00e      	b.n	800c4ea <__swhatbuf_r+0x42>
 800c4cc:	466a      	mov	r2, sp
 800c4ce:	f000 f903 	bl	800c6d8 <_fstat_r>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	dbf1      	blt.n	800c4ba <__swhatbuf_r+0x12>
 800c4d6:	9a01      	ldr	r2, [sp, #4]
 800c4d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c4dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4e0:	425a      	negs	r2, r3
 800c4e2:	415a      	adcs	r2, r3
 800c4e4:	602a      	str	r2, [r5, #0]
 800c4e6:	e7ee      	b.n	800c4c6 <__swhatbuf_r+0x1e>
 800c4e8:	2340      	movs	r3, #64	; 0x40
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	6023      	str	r3, [r4, #0]
 800c4ee:	b016      	add	sp, #88	; 0x58
 800c4f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c4f4 <__smakebuf_r>:
 800c4f4:	898b      	ldrh	r3, [r1, #12]
 800c4f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4f8:	079d      	lsls	r5, r3, #30
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	460c      	mov	r4, r1
 800c4fe:	d507      	bpl.n	800c510 <__smakebuf_r+0x1c>
 800c500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	6123      	str	r3, [r4, #16]
 800c508:	2301      	movs	r3, #1
 800c50a:	6163      	str	r3, [r4, #20]
 800c50c:	b002      	add	sp, #8
 800c50e:	bd70      	pop	{r4, r5, r6, pc}
 800c510:	466a      	mov	r2, sp
 800c512:	ab01      	add	r3, sp, #4
 800c514:	f7ff ffc8 	bl	800c4a8 <__swhatbuf_r>
 800c518:	9900      	ldr	r1, [sp, #0]
 800c51a:	4605      	mov	r5, r0
 800c51c:	4630      	mov	r0, r6
 800c51e:	f7ff f969 	bl	800b7f4 <_malloc_r>
 800c522:	b948      	cbnz	r0, 800c538 <__smakebuf_r+0x44>
 800c524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c528:	059a      	lsls	r2, r3, #22
 800c52a:	d4ef      	bmi.n	800c50c <__smakebuf_r+0x18>
 800c52c:	f023 0303 	bic.w	r3, r3, #3
 800c530:	f043 0302 	orr.w	r3, r3, #2
 800c534:	81a3      	strh	r3, [r4, #12]
 800c536:	e7e3      	b.n	800c500 <__smakebuf_r+0xc>
 800c538:	4b0d      	ldr	r3, [pc, #52]	; (800c570 <__smakebuf_r+0x7c>)
 800c53a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c53c:	89a3      	ldrh	r3, [r4, #12]
 800c53e:	6020      	str	r0, [r4, #0]
 800c540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c544:	81a3      	strh	r3, [r4, #12]
 800c546:	9b00      	ldr	r3, [sp, #0]
 800c548:	6120      	str	r0, [r4, #16]
 800c54a:	6163      	str	r3, [r4, #20]
 800c54c:	9b01      	ldr	r3, [sp, #4]
 800c54e:	b15b      	cbz	r3, 800c568 <__smakebuf_r+0x74>
 800c550:	4630      	mov	r0, r6
 800c552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c556:	f000 f8d1 	bl	800c6fc <_isatty_r>
 800c55a:	b128      	cbz	r0, 800c568 <__smakebuf_r+0x74>
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	f023 0303 	bic.w	r3, r3, #3
 800c562:	f043 0301 	orr.w	r3, r3, #1
 800c566:	81a3      	strh	r3, [r4, #12]
 800c568:	89a0      	ldrh	r0, [r4, #12]
 800c56a:	4305      	orrs	r5, r0
 800c56c:	81a5      	strh	r5, [r4, #12]
 800c56e:	e7cd      	b.n	800c50c <__smakebuf_r+0x18>
 800c570:	0800c301 	.word	0x0800c301

0800c574 <_malloc_usable_size_r>:
 800c574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c578:	1f18      	subs	r0, r3, #4
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	bfbc      	itt	lt
 800c57e:	580b      	ldrlt	r3, [r1, r0]
 800c580:	18c0      	addlt	r0, r0, r3
 800c582:	4770      	bx	lr

0800c584 <_raise_r>:
 800c584:	291f      	cmp	r1, #31
 800c586:	b538      	push	{r3, r4, r5, lr}
 800c588:	4604      	mov	r4, r0
 800c58a:	460d      	mov	r5, r1
 800c58c:	d904      	bls.n	800c598 <_raise_r+0x14>
 800c58e:	2316      	movs	r3, #22
 800c590:	6003      	str	r3, [r0, #0]
 800c592:	f04f 30ff 	mov.w	r0, #4294967295
 800c596:	bd38      	pop	{r3, r4, r5, pc}
 800c598:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c59a:	b112      	cbz	r2, 800c5a2 <_raise_r+0x1e>
 800c59c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5a0:	b94b      	cbnz	r3, 800c5b6 <_raise_r+0x32>
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f000 f830 	bl	800c608 <_getpid_r>
 800c5a8:	462a      	mov	r2, r5
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5b2:	f000 b817 	b.w	800c5e4 <_kill_r>
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d00a      	beq.n	800c5d0 <_raise_r+0x4c>
 800c5ba:	1c59      	adds	r1, r3, #1
 800c5bc:	d103      	bne.n	800c5c6 <_raise_r+0x42>
 800c5be:	2316      	movs	r3, #22
 800c5c0:	6003      	str	r3, [r0, #0]
 800c5c2:	2001      	movs	r0, #1
 800c5c4:	e7e7      	b.n	800c596 <_raise_r+0x12>
 800c5c6:	2400      	movs	r4, #0
 800c5c8:	4628      	mov	r0, r5
 800c5ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5ce:	4798      	blx	r3
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	e7e0      	b.n	800c596 <_raise_r+0x12>

0800c5d4 <raise>:
 800c5d4:	4b02      	ldr	r3, [pc, #8]	; (800c5e0 <raise+0xc>)
 800c5d6:	4601      	mov	r1, r0
 800c5d8:	6818      	ldr	r0, [r3, #0]
 800c5da:	f7ff bfd3 	b.w	800c584 <_raise_r>
 800c5de:	bf00      	nop
 800c5e0:	2000018c 	.word	0x2000018c

0800c5e4 <_kill_r>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	4d06      	ldr	r5, [pc, #24]	; (800c604 <_kill_r+0x20>)
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	4608      	mov	r0, r1
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	602b      	str	r3, [r5, #0]
 800c5f2:	f7f8 f829 	bl	8004648 <_kill>
 800c5f6:	1c43      	adds	r3, r0, #1
 800c5f8:	d102      	bne.n	800c600 <_kill_r+0x1c>
 800c5fa:	682b      	ldr	r3, [r5, #0]
 800c5fc:	b103      	cbz	r3, 800c600 <_kill_r+0x1c>
 800c5fe:	6023      	str	r3, [r4, #0]
 800c600:	bd38      	pop	{r3, r4, r5, pc}
 800c602:	bf00      	nop
 800c604:	200019b4 	.word	0x200019b4

0800c608 <_getpid_r>:
 800c608:	f7f8 b81c 	b.w	8004644 <_getpid>

0800c60c <__sread>:
 800c60c:	b510      	push	{r4, lr}
 800c60e:	460c      	mov	r4, r1
 800c610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c614:	f000 f894 	bl	800c740 <_read_r>
 800c618:	2800      	cmp	r0, #0
 800c61a:	bfab      	itete	ge
 800c61c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c61e:	89a3      	ldrhlt	r3, [r4, #12]
 800c620:	181b      	addge	r3, r3, r0
 800c622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c626:	bfac      	ite	ge
 800c628:	6563      	strge	r3, [r4, #84]	; 0x54
 800c62a:	81a3      	strhlt	r3, [r4, #12]
 800c62c:	bd10      	pop	{r4, pc}

0800c62e <__swrite>:
 800c62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c632:	461f      	mov	r7, r3
 800c634:	898b      	ldrh	r3, [r1, #12]
 800c636:	4605      	mov	r5, r0
 800c638:	05db      	lsls	r3, r3, #23
 800c63a:	460c      	mov	r4, r1
 800c63c:	4616      	mov	r6, r2
 800c63e:	d505      	bpl.n	800c64c <__swrite+0x1e>
 800c640:	2302      	movs	r3, #2
 800c642:	2200      	movs	r2, #0
 800c644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c648:	f000 f868 	bl	800c71c <_lseek_r>
 800c64c:	89a3      	ldrh	r3, [r4, #12]
 800c64e:	4632      	mov	r2, r6
 800c650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c654:	81a3      	strh	r3, [r4, #12]
 800c656:	4628      	mov	r0, r5
 800c658:	463b      	mov	r3, r7
 800c65a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c65e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c662:	f000 b817 	b.w	800c694 <_write_r>

0800c666 <__sseek>:
 800c666:	b510      	push	{r4, lr}
 800c668:	460c      	mov	r4, r1
 800c66a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c66e:	f000 f855 	bl	800c71c <_lseek_r>
 800c672:	1c43      	adds	r3, r0, #1
 800c674:	89a3      	ldrh	r3, [r4, #12]
 800c676:	bf15      	itete	ne
 800c678:	6560      	strne	r0, [r4, #84]	; 0x54
 800c67a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c67e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c682:	81a3      	strheq	r3, [r4, #12]
 800c684:	bf18      	it	ne
 800c686:	81a3      	strhne	r3, [r4, #12]
 800c688:	bd10      	pop	{r4, pc}

0800c68a <__sclose>:
 800c68a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c68e:	f000 b813 	b.w	800c6b8 <_close_r>
	...

0800c694 <_write_r>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	4604      	mov	r4, r0
 800c698:	4608      	mov	r0, r1
 800c69a:	4611      	mov	r1, r2
 800c69c:	2200      	movs	r2, #0
 800c69e:	4d05      	ldr	r5, [pc, #20]	; (800c6b4 <_write_r+0x20>)
 800c6a0:	602a      	str	r2, [r5, #0]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	f7f7 ffee 	bl	8004684 <_write>
 800c6a8:	1c43      	adds	r3, r0, #1
 800c6aa:	d102      	bne.n	800c6b2 <_write_r+0x1e>
 800c6ac:	682b      	ldr	r3, [r5, #0]
 800c6ae:	b103      	cbz	r3, 800c6b2 <_write_r+0x1e>
 800c6b0:	6023      	str	r3, [r4, #0]
 800c6b2:	bd38      	pop	{r3, r4, r5, pc}
 800c6b4:	200019b4 	.word	0x200019b4

0800c6b8 <_close_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	4d05      	ldr	r5, [pc, #20]	; (800c6d4 <_close_r+0x1c>)
 800c6be:	4604      	mov	r4, r0
 800c6c0:	4608      	mov	r0, r1
 800c6c2:	602b      	str	r3, [r5, #0]
 800c6c4:	f7f7 ffec 	bl	80046a0 <_close>
 800c6c8:	1c43      	adds	r3, r0, #1
 800c6ca:	d102      	bne.n	800c6d2 <_close_r+0x1a>
 800c6cc:	682b      	ldr	r3, [r5, #0]
 800c6ce:	b103      	cbz	r3, 800c6d2 <_close_r+0x1a>
 800c6d0:	6023      	str	r3, [r4, #0]
 800c6d2:	bd38      	pop	{r3, r4, r5, pc}
 800c6d4:	200019b4 	.word	0x200019b4

0800c6d8 <_fstat_r>:
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	2300      	movs	r3, #0
 800c6dc:	4d06      	ldr	r5, [pc, #24]	; (800c6f8 <_fstat_r+0x20>)
 800c6de:	4604      	mov	r4, r0
 800c6e0:	4608      	mov	r0, r1
 800c6e2:	4611      	mov	r1, r2
 800c6e4:	602b      	str	r3, [r5, #0]
 800c6e6:	f7f7 ffdf 	bl	80046a8 <_fstat>
 800c6ea:	1c43      	adds	r3, r0, #1
 800c6ec:	d102      	bne.n	800c6f4 <_fstat_r+0x1c>
 800c6ee:	682b      	ldr	r3, [r5, #0]
 800c6f0:	b103      	cbz	r3, 800c6f4 <_fstat_r+0x1c>
 800c6f2:	6023      	str	r3, [r4, #0]
 800c6f4:	bd38      	pop	{r3, r4, r5, pc}
 800c6f6:	bf00      	nop
 800c6f8:	200019b4 	.word	0x200019b4

0800c6fc <_isatty_r>:
 800c6fc:	b538      	push	{r3, r4, r5, lr}
 800c6fe:	2300      	movs	r3, #0
 800c700:	4d05      	ldr	r5, [pc, #20]	; (800c718 <_isatty_r+0x1c>)
 800c702:	4604      	mov	r4, r0
 800c704:	4608      	mov	r0, r1
 800c706:	602b      	str	r3, [r5, #0]
 800c708:	f7f7 ffd4 	bl	80046b4 <_isatty>
 800c70c:	1c43      	adds	r3, r0, #1
 800c70e:	d102      	bne.n	800c716 <_isatty_r+0x1a>
 800c710:	682b      	ldr	r3, [r5, #0]
 800c712:	b103      	cbz	r3, 800c716 <_isatty_r+0x1a>
 800c714:	6023      	str	r3, [r4, #0]
 800c716:	bd38      	pop	{r3, r4, r5, pc}
 800c718:	200019b4 	.word	0x200019b4

0800c71c <_lseek_r>:
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4604      	mov	r4, r0
 800c720:	4608      	mov	r0, r1
 800c722:	4611      	mov	r1, r2
 800c724:	2200      	movs	r2, #0
 800c726:	4d05      	ldr	r5, [pc, #20]	; (800c73c <_lseek_r+0x20>)
 800c728:	602a      	str	r2, [r5, #0]
 800c72a:	461a      	mov	r2, r3
 800c72c:	f7f7 ffc4 	bl	80046b8 <_lseek>
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d102      	bne.n	800c73a <_lseek_r+0x1e>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	b103      	cbz	r3, 800c73a <_lseek_r+0x1e>
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	200019b4 	.word	0x200019b4

0800c740 <_read_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4604      	mov	r4, r0
 800c744:	4608      	mov	r0, r1
 800c746:	4611      	mov	r1, r2
 800c748:	2200      	movs	r2, #0
 800c74a:	4d05      	ldr	r5, [pc, #20]	; (800c760 <_read_r+0x20>)
 800c74c:	602a      	str	r2, [r5, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	f7f7 ff8a 	bl	8004668 <_read>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_read_r+0x1e>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_read_r+0x1e>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	200019b4 	.word	0x200019b4

0800c764 <_init>:
 800c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c766:	bf00      	nop
 800c768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c76a:	bc08      	pop	{r3}
 800c76c:	469e      	mov	lr, r3
 800c76e:	4770      	bx	lr

0800c770 <_fini>:
 800c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c772:	bf00      	nop
 800c774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c776:	bc08      	pop	{r3}
 800c778:	469e      	mov	lr, r3
 800c77a:	4770      	bx	lr
