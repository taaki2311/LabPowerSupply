
MainBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0a4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800f1e8  0800f1e8  0001f1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f724  0800f724  00020360  2**0
                  CONTENTS
  4 .ARM          00000008  0800f724  0800f724  0001f724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f72c  0800f72c  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f72c  0800f72c  0001f72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f730  0800f730  0001f730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0800f734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001664  20000360  0800fa94  00020360  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  200019c4  0800fa94  000219c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b9c1  00000000  00000000  00020389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052ad  00000000  00000000  0004bd4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00020c73  00000000  00000000  00050ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  00071c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000068e0  00000000  00000000  00072fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f59  00000000  00000000  000798b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030da8  00000000  00000000  00093809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090507  00000000  00000000  000c45b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00154ab8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005358  00000000  00000000  00154b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000360 	.word	0x20000360
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f1cc 	.word	0x0800f1cc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000364 	.word	0x20000364
 800017c:	0800f1cc 	.word	0x0800f1cc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__gesf2>:
 8000f74:	f04f 3cff 	mov.w	ip, #4294967295
 8000f78:	e006      	b.n	8000f88 <__cmpsf2+0x4>
 8000f7a:	bf00      	nop

08000f7c <__lesf2>:
 8000f7c:	f04f 0c01 	mov.w	ip, #1
 8000f80:	e002      	b.n	8000f88 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__cmpsf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	bf18      	it	ne
 8000f9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9e:	d011      	beq.n	8000fc4 <__cmpsf2+0x40>
 8000fa0:	b001      	add	sp, #4
 8000fa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa6:	bf18      	it	ne
 8000fa8:	ea90 0f01 	teqne	r0, r1
 8000fac:	bf58      	it	pl
 8000fae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fb2:	bf88      	it	hi
 8000fb4:	17c8      	asrhi	r0, r1, #31
 8000fb6:	bf38      	it	cc
 8000fb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fbc:	bf18      	it	ne
 8000fbe:	f040 0001 	orrne.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	d102      	bne.n	8000fd0 <__cmpsf2+0x4c>
 8000fca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fce:	d105      	bne.n	8000fdc <__cmpsf2+0x58>
 8000fd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd4:	d1e4      	bne.n	8000fa0 <__cmpsf2+0x1c>
 8000fd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fda:	d0e1      	beq.n	8000fa0 <__cmpsf2+0x1c>
 8000fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_cfrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4661      	mov	r1, ip
 8000fea:	e7ff      	b.n	8000fec <__aeabi_cfcmpeq>

08000fec <__aeabi_cfcmpeq>:
 8000fec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fee:	f7ff ffc9 	bl	8000f84 <__cmpsf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	bf48      	it	mi
 8000ff6:	f110 0f00 	cmnmi.w	r0, #0
 8000ffa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ffc <__aeabi_fcmpeq>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff fff4 	bl	8000fec <__aeabi_cfcmpeq>
 8001004:	bf0c      	ite	eq
 8001006:	2001      	moveq	r0, #1
 8001008:	2000      	movne	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmplt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffea 	bl	8000fec <__aeabi_cfcmpeq>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmple>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffe0 	bl	8000fec <__aeabi_cfcmpeq>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpge>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffd2 	bl	8000fe4 <__aeabi_cfrcmple>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpgt>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffc8 	bl	8000fe4 <__aeabi_cfrcmple>
 8001054:	bf34      	ite	cc
 8001056:	2001      	movcc	r0, #1
 8001058:	2000      	movcs	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_f2iz>:
 8001060:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001064:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001068:	d30f      	bcc.n	800108a <__aeabi_f2iz+0x2a>
 800106a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001072:	d90d      	bls.n	8001090 <__aeabi_f2iz+0x30>
 8001074:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800107c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001080:	fa23 f002 	lsr.w	r0, r3, r2
 8001084:	bf18      	it	ne
 8001086:	4240      	negne	r0, r0
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr
 8001090:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001094:	d101      	bne.n	800109a <__aeabi_f2iz+0x3a>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	d105      	bne.n	80010a6 <__aeabi_f2iz+0x46>
 800109a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800109e:	bf08      	it	eq
 80010a0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010a4:	4770      	bx	lr
 80010a6:	f04f 0000 	mov.w	r0, #0
 80010aa:	4770      	bx	lr

080010ac <__aeabi_f2uiz>:
 80010ac:	0042      	lsls	r2, r0, #1
 80010ae:	d20e      	bcs.n	80010ce <__aeabi_f2uiz+0x22>
 80010b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b4:	d30b      	bcc.n	80010ce <__aeabi_f2uiz+0x22>
 80010b6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010be:	d409      	bmi.n	80010d4 <__aeabi_f2uiz+0x28>
 80010c0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c8:	fa23 f002 	lsr.w	r0, r3, r2
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr
 80010d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d8:	d101      	bne.n	80010de <__aeabi_f2uiz+0x32>
 80010da:	0242      	lsls	r2, r0, #9
 80010dc:	d102      	bne.n	80010e4 <__aeabi_f2uiz+0x38>
 80010de:	f04f 30ff 	mov.w	r0, #4294967295
 80010e2:	4770      	bx	lr
 80010e4:	f04f 0000 	mov.w	r0, #0
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <__aeabi_uldivmod>:
 80010ec:	b953      	cbnz	r3, 8001104 <__aeabi_uldivmod+0x18>
 80010ee:	b94a      	cbnz	r2, 8001104 <__aeabi_uldivmod+0x18>
 80010f0:	2900      	cmp	r1, #0
 80010f2:	bf08      	it	eq
 80010f4:	2800      	cmpeq	r0, #0
 80010f6:	bf1c      	itt	ne
 80010f8:	f04f 31ff 	movne.w	r1, #4294967295
 80010fc:	f04f 30ff 	movne.w	r0, #4294967295
 8001100:	f000 b976 	b.w	80013f0 <__aeabi_idiv0>
 8001104:	f1ad 0c08 	sub.w	ip, sp, #8
 8001108:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800110c:	f000 f806 	bl	800111c <__udivmoddi4>
 8001110:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001118:	b004      	add	sp, #16
 800111a:	4770      	bx	lr

0800111c <__udivmoddi4>:
 800111c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001120:	9e08      	ldr	r6, [sp, #32]
 8001122:	460d      	mov	r5, r1
 8001124:	4604      	mov	r4, r0
 8001126:	4688      	mov	r8, r1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d14d      	bne.n	80011c8 <__udivmoddi4+0xac>
 800112c:	428a      	cmp	r2, r1
 800112e:	4694      	mov	ip, r2
 8001130:	d968      	bls.n	8001204 <__udivmoddi4+0xe8>
 8001132:	fab2 f282 	clz	r2, r2
 8001136:	b152      	cbz	r2, 800114e <__udivmoddi4+0x32>
 8001138:	fa01 f302 	lsl.w	r3, r1, r2
 800113c:	f1c2 0120 	rsb	r1, r2, #32
 8001140:	fa20 f101 	lsr.w	r1, r0, r1
 8001144:	fa0c fc02 	lsl.w	ip, ip, r2
 8001148:	ea41 0803 	orr.w	r8, r1, r3
 800114c:	4094      	lsls	r4, r2
 800114e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001152:	fbb8 f7f1 	udiv	r7, r8, r1
 8001156:	fa1f fe8c 	uxth.w	lr, ip
 800115a:	fb01 8817 	mls	r8, r1, r7, r8
 800115e:	fb07 f00e 	mul.w	r0, r7, lr
 8001162:	0c23      	lsrs	r3, r4, #16
 8001164:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001168:	4298      	cmp	r0, r3
 800116a:	d90a      	bls.n	8001182 <__udivmoddi4+0x66>
 800116c:	eb1c 0303 	adds.w	r3, ip, r3
 8001170:	f107 35ff 	add.w	r5, r7, #4294967295
 8001174:	f080 811e 	bcs.w	80013b4 <__udivmoddi4+0x298>
 8001178:	4298      	cmp	r0, r3
 800117a:	f240 811b 	bls.w	80013b4 <__udivmoddi4+0x298>
 800117e:	3f02      	subs	r7, #2
 8001180:	4463      	add	r3, ip
 8001182:	1a1b      	subs	r3, r3, r0
 8001184:	fbb3 f0f1 	udiv	r0, r3, r1
 8001188:	fb01 3310 	mls	r3, r1, r0, r3
 800118c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001190:	b2a4      	uxth	r4, r4
 8001192:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001196:	45a6      	cmp	lr, r4
 8001198:	d90a      	bls.n	80011b0 <__udivmoddi4+0x94>
 800119a:	eb1c 0404 	adds.w	r4, ip, r4
 800119e:	f100 33ff 	add.w	r3, r0, #4294967295
 80011a2:	f080 8109 	bcs.w	80013b8 <__udivmoddi4+0x29c>
 80011a6:	45a6      	cmp	lr, r4
 80011a8:	f240 8106 	bls.w	80013b8 <__udivmoddi4+0x29c>
 80011ac:	4464      	add	r4, ip
 80011ae:	3802      	subs	r0, #2
 80011b0:	2100      	movs	r1, #0
 80011b2:	eba4 040e 	sub.w	r4, r4, lr
 80011b6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80011ba:	b11e      	cbz	r6, 80011c4 <__udivmoddi4+0xa8>
 80011bc:	2300      	movs	r3, #0
 80011be:	40d4      	lsrs	r4, r2
 80011c0:	e9c6 4300 	strd	r4, r3, [r6]
 80011c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011c8:	428b      	cmp	r3, r1
 80011ca:	d908      	bls.n	80011de <__udivmoddi4+0xc2>
 80011cc:	2e00      	cmp	r6, #0
 80011ce:	f000 80ee 	beq.w	80013ae <__udivmoddi4+0x292>
 80011d2:	2100      	movs	r1, #0
 80011d4:	e9c6 0500 	strd	r0, r5, [r6]
 80011d8:	4608      	mov	r0, r1
 80011da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011de:	fab3 f183 	clz	r1, r3
 80011e2:	2900      	cmp	r1, #0
 80011e4:	d14a      	bne.n	800127c <__udivmoddi4+0x160>
 80011e6:	42ab      	cmp	r3, r5
 80011e8:	d302      	bcc.n	80011f0 <__udivmoddi4+0xd4>
 80011ea:	4282      	cmp	r2, r0
 80011ec:	f200 80fc 	bhi.w	80013e8 <__udivmoddi4+0x2cc>
 80011f0:	1a84      	subs	r4, r0, r2
 80011f2:	eb65 0303 	sbc.w	r3, r5, r3
 80011f6:	2001      	movs	r0, #1
 80011f8:	4698      	mov	r8, r3
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d0e2      	beq.n	80011c4 <__udivmoddi4+0xa8>
 80011fe:	e9c6 4800 	strd	r4, r8, [r6]
 8001202:	e7df      	b.n	80011c4 <__udivmoddi4+0xa8>
 8001204:	b902      	cbnz	r2, 8001208 <__udivmoddi4+0xec>
 8001206:	deff      	udf	#255	; 0xff
 8001208:	fab2 f282 	clz	r2, r2
 800120c:	2a00      	cmp	r2, #0
 800120e:	f040 8091 	bne.w	8001334 <__udivmoddi4+0x218>
 8001212:	eba1 000c 	sub.w	r0, r1, ip
 8001216:	2101      	movs	r1, #1
 8001218:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800121c:	fa1f fe8c 	uxth.w	lr, ip
 8001220:	fbb0 f3f7 	udiv	r3, r0, r7
 8001224:	fb07 0013 	mls	r0, r7, r3, r0
 8001228:	0c25      	lsrs	r5, r4, #16
 800122a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800122e:	fb0e f003 	mul.w	r0, lr, r3
 8001232:	42a8      	cmp	r0, r5
 8001234:	d908      	bls.n	8001248 <__udivmoddi4+0x12c>
 8001236:	eb1c 0505 	adds.w	r5, ip, r5
 800123a:	f103 38ff 	add.w	r8, r3, #4294967295
 800123e:	d202      	bcs.n	8001246 <__udivmoddi4+0x12a>
 8001240:	42a8      	cmp	r0, r5
 8001242:	f200 80ce 	bhi.w	80013e2 <__udivmoddi4+0x2c6>
 8001246:	4643      	mov	r3, r8
 8001248:	1a2d      	subs	r5, r5, r0
 800124a:	fbb5 f0f7 	udiv	r0, r5, r7
 800124e:	fb07 5510 	mls	r5, r7, r0, r5
 8001252:	fb0e fe00 	mul.w	lr, lr, r0
 8001256:	b2a4      	uxth	r4, r4
 8001258:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800125c:	45a6      	cmp	lr, r4
 800125e:	d908      	bls.n	8001272 <__udivmoddi4+0x156>
 8001260:	eb1c 0404 	adds.w	r4, ip, r4
 8001264:	f100 35ff 	add.w	r5, r0, #4294967295
 8001268:	d202      	bcs.n	8001270 <__udivmoddi4+0x154>
 800126a:	45a6      	cmp	lr, r4
 800126c:	f200 80b6 	bhi.w	80013dc <__udivmoddi4+0x2c0>
 8001270:	4628      	mov	r0, r5
 8001272:	eba4 040e 	sub.w	r4, r4, lr
 8001276:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800127a:	e79e      	b.n	80011ba <__udivmoddi4+0x9e>
 800127c:	f1c1 0720 	rsb	r7, r1, #32
 8001280:	408b      	lsls	r3, r1
 8001282:	fa22 fc07 	lsr.w	ip, r2, r7
 8001286:	ea4c 0c03 	orr.w	ip, ip, r3
 800128a:	fa25 fa07 	lsr.w	sl, r5, r7
 800128e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001292:	fbba f8f9 	udiv	r8, sl, r9
 8001296:	fa20 f307 	lsr.w	r3, r0, r7
 800129a:	fb09 aa18 	mls	sl, r9, r8, sl
 800129e:	408d      	lsls	r5, r1
 80012a0:	fa1f fe8c 	uxth.w	lr, ip
 80012a4:	431d      	orrs	r5, r3
 80012a6:	fa00 f301 	lsl.w	r3, r0, r1
 80012aa:	fb08 f00e 	mul.w	r0, r8, lr
 80012ae:	0c2c      	lsrs	r4, r5, #16
 80012b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012b4:	42a0      	cmp	r0, r4
 80012b6:	fa02 f201 	lsl.w	r2, r2, r1
 80012ba:	d90b      	bls.n	80012d4 <__udivmoddi4+0x1b8>
 80012bc:	eb1c 0404 	adds.w	r4, ip, r4
 80012c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80012c4:	f080 8088 	bcs.w	80013d8 <__udivmoddi4+0x2bc>
 80012c8:	42a0      	cmp	r0, r4
 80012ca:	f240 8085 	bls.w	80013d8 <__udivmoddi4+0x2bc>
 80012ce:	f1a8 0802 	sub.w	r8, r8, #2
 80012d2:	4464      	add	r4, ip
 80012d4:	1a24      	subs	r4, r4, r0
 80012d6:	fbb4 f0f9 	udiv	r0, r4, r9
 80012da:	fb09 4410 	mls	r4, r9, r0, r4
 80012de:	fb00 fe0e 	mul.w	lr, r0, lr
 80012e2:	b2ad      	uxth	r5, r5
 80012e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012e8:	45a6      	cmp	lr, r4
 80012ea:	d908      	bls.n	80012fe <__udivmoddi4+0x1e2>
 80012ec:	eb1c 0404 	adds.w	r4, ip, r4
 80012f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80012f4:	d26c      	bcs.n	80013d0 <__udivmoddi4+0x2b4>
 80012f6:	45a6      	cmp	lr, r4
 80012f8:	d96a      	bls.n	80013d0 <__udivmoddi4+0x2b4>
 80012fa:	3802      	subs	r0, #2
 80012fc:	4464      	add	r4, ip
 80012fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001302:	fba0 9502 	umull	r9, r5, r0, r2
 8001306:	eba4 040e 	sub.w	r4, r4, lr
 800130a:	42ac      	cmp	r4, r5
 800130c:	46c8      	mov	r8, r9
 800130e:	46ae      	mov	lr, r5
 8001310:	d356      	bcc.n	80013c0 <__udivmoddi4+0x2a4>
 8001312:	d053      	beq.n	80013bc <__udivmoddi4+0x2a0>
 8001314:	2e00      	cmp	r6, #0
 8001316:	d069      	beq.n	80013ec <__udivmoddi4+0x2d0>
 8001318:	ebb3 0208 	subs.w	r2, r3, r8
 800131c:	eb64 040e 	sbc.w	r4, r4, lr
 8001320:	fa22 f301 	lsr.w	r3, r2, r1
 8001324:	fa04 f707 	lsl.w	r7, r4, r7
 8001328:	431f      	orrs	r7, r3
 800132a:	40cc      	lsrs	r4, r1
 800132c:	e9c6 7400 	strd	r7, r4, [r6]
 8001330:	2100      	movs	r1, #0
 8001332:	e747      	b.n	80011c4 <__udivmoddi4+0xa8>
 8001334:	fa0c fc02 	lsl.w	ip, ip, r2
 8001338:	f1c2 0120 	rsb	r1, r2, #32
 800133c:	fa25 f301 	lsr.w	r3, r5, r1
 8001340:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001344:	fa20 f101 	lsr.w	r1, r0, r1
 8001348:	4095      	lsls	r5, r2
 800134a:	430d      	orrs	r5, r1
 800134c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001350:	fb07 3311 	mls	r3, r7, r1, r3
 8001354:	fa1f fe8c 	uxth.w	lr, ip
 8001358:	0c28      	lsrs	r0, r5, #16
 800135a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800135e:	fb01 f30e 	mul.w	r3, r1, lr
 8001362:	4283      	cmp	r3, r0
 8001364:	fa04 f402 	lsl.w	r4, r4, r2
 8001368:	d908      	bls.n	800137c <__udivmoddi4+0x260>
 800136a:	eb1c 0000 	adds.w	r0, ip, r0
 800136e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001372:	d22f      	bcs.n	80013d4 <__udivmoddi4+0x2b8>
 8001374:	4283      	cmp	r3, r0
 8001376:	d92d      	bls.n	80013d4 <__udivmoddi4+0x2b8>
 8001378:	3902      	subs	r1, #2
 800137a:	4460      	add	r0, ip
 800137c:	1ac0      	subs	r0, r0, r3
 800137e:	fbb0 f3f7 	udiv	r3, r0, r7
 8001382:	fb07 0013 	mls	r0, r7, r3, r0
 8001386:	b2ad      	uxth	r5, r5
 8001388:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800138c:	fb03 f00e 	mul.w	r0, r3, lr
 8001390:	42a8      	cmp	r0, r5
 8001392:	d908      	bls.n	80013a6 <__udivmoddi4+0x28a>
 8001394:	eb1c 0505 	adds.w	r5, ip, r5
 8001398:	f103 38ff 	add.w	r8, r3, #4294967295
 800139c:	d216      	bcs.n	80013cc <__udivmoddi4+0x2b0>
 800139e:	42a8      	cmp	r0, r5
 80013a0:	d914      	bls.n	80013cc <__udivmoddi4+0x2b0>
 80013a2:	3b02      	subs	r3, #2
 80013a4:	4465      	add	r5, ip
 80013a6:	1a28      	subs	r0, r5, r0
 80013a8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80013ac:	e738      	b.n	8001220 <__udivmoddi4+0x104>
 80013ae:	4631      	mov	r1, r6
 80013b0:	4630      	mov	r0, r6
 80013b2:	e707      	b.n	80011c4 <__udivmoddi4+0xa8>
 80013b4:	462f      	mov	r7, r5
 80013b6:	e6e4      	b.n	8001182 <__udivmoddi4+0x66>
 80013b8:	4618      	mov	r0, r3
 80013ba:	e6f9      	b.n	80011b0 <__udivmoddi4+0x94>
 80013bc:	454b      	cmp	r3, r9
 80013be:	d2a9      	bcs.n	8001314 <__udivmoddi4+0x1f8>
 80013c0:	ebb9 0802 	subs.w	r8, r9, r2
 80013c4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80013c8:	3801      	subs	r0, #1
 80013ca:	e7a3      	b.n	8001314 <__udivmoddi4+0x1f8>
 80013cc:	4643      	mov	r3, r8
 80013ce:	e7ea      	b.n	80013a6 <__udivmoddi4+0x28a>
 80013d0:	4628      	mov	r0, r5
 80013d2:	e794      	b.n	80012fe <__udivmoddi4+0x1e2>
 80013d4:	4641      	mov	r1, r8
 80013d6:	e7d1      	b.n	800137c <__udivmoddi4+0x260>
 80013d8:	46d0      	mov	r8, sl
 80013da:	e77b      	b.n	80012d4 <__udivmoddi4+0x1b8>
 80013dc:	4464      	add	r4, ip
 80013de:	3802      	subs	r0, #2
 80013e0:	e747      	b.n	8001272 <__udivmoddi4+0x156>
 80013e2:	3b02      	subs	r3, #2
 80013e4:	4465      	add	r5, ip
 80013e6:	e72f      	b.n	8001248 <__udivmoddi4+0x12c>
 80013e8:	4608      	mov	r0, r1
 80013ea:	e706      	b.n	80011fa <__udivmoddi4+0xde>
 80013ec:	4631      	mov	r1, r6
 80013ee:	e6e9      	b.n	80011c4 <__udivmoddi4+0xa8>

080013f0 <__aeabi_idiv0>:
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop

080013f4 <MX_ADC_Init>:

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80013f4:	2300      	movs	r3, #0
{
 80013f6:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80013f8:	4c3f      	ldr	r4, [pc, #252]	; (80014f8 <MX_ADC_Init+0x104>)
{
 80013fa:	b08a      	sub	sp, #40	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fc:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001400:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001404:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001408:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800140c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001410:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001414:	9304      	str	r3, [sp, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001416:	9300      	str	r3, [sp, #0]
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 6;
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001418:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141c:	63a3      	str	r3, [r4, #56]	; 0x38
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800141e:	9309      	str	r3, [sp, #36]	; 0x24
  hadc.Instance = ADC1;
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <MX_ADC_Init+0x108>)
  hadc.Init.ContinuousConvMode = ENABLE;
 8001422:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001424:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001428:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc.Init.NbrOfConversion = 6;
 800142c:	2606      	movs	r6, #6
  hadc.Instance = ADC1;
 800142e:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001430:	2310      	movs	r3, #16
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001432:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001434:	6061      	str	r1, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001436:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001438:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc.Init.NbrOfConversion = 6;
 800143c:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 800143e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001442:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001444:	f005 fe56 	bl	80070f4 <HAL_ADC_Init>
 8001448:	b108      	cbz	r0, 800144e <MX_ADC_Init+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	e7fe      	b.n	800144c <MX_ADC_Init+0x58>
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800144e:	2302      	movs	r3, #2
 8001450:	4a2b      	ldr	r2, [pc, #172]	; (8001500 <MX_ADC_Init+0x10c>)
  AnalogWDGConfig.LowThreshold = 0;
 8001452:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8001456:	a904      	add	r1, sp, #16
 8001458:	4620      	mov	r0, r4
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800145a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  AnalogWDGConfig.ITMode = ENABLE;
 800145e:	f88d 5018 	strb.w	r5, [sp, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8001462:	f006 f94d 	bl	8007700 <HAL_ADC_AnalogWDGConfig>
 8001466:	b108      	cbz	r0, 800146c <MX_ADC_Init+0x78>
 8001468:	b672      	cpsid	i
  while (1)
 800146a:	e7fe      	b.n	800146a <MX_ADC_Init+0x76>
  sConfig.Channel = ADC_CHANNEL_0;
 800146c:	2200      	movs	r2, #0
 800146e:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001470:	4669      	mov	r1, sp
 8001472:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8001474:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8001478:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800147a:	f006 f875 	bl	8007568 <HAL_ADC_ConfigChannel>
 800147e:	b108      	cbz	r0, 8001484 <MX_ADC_Init+0x90>
 8001480:	b672      	cpsid	i
  while (1)
 8001482:	e7fe      	b.n	8001482 <MX_ADC_Init+0x8e>
  sConfig.Channel = ADC_CHANNEL_1;
 8001484:	2201      	movs	r2, #1
 8001486:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001488:	4669      	mov	r1, sp
 800148a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 800148c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001490:	f006 f86a 	bl	8007568 <HAL_ADC_ConfigChannel>
 8001494:	b108      	cbz	r0, 800149a <MX_ADC_Init+0xa6>
 8001496:	b672      	cpsid	i
  while (1)
 8001498:	e7fe      	b.n	8001498 <MX_ADC_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_2;
 800149a:	2202      	movs	r2, #2
 800149c:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800149e:	4669      	mov	r1, sp
 80014a0:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80014a2:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014a6:	f006 f85f 	bl	8007568 <HAL_ADC_ConfigChannel>
 80014aa:	b108      	cbz	r0, 80014b0 <MX_ADC_Init+0xbc>
 80014ac:	b672      	cpsid	i
  while (1)
 80014ae:	e7fe      	b.n	80014ae <MX_ADC_Init+0xba>
  sConfig.Channel = ADC_CHANNEL_3;
 80014b0:	2203      	movs	r2, #3
 80014b2:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014b4:	4669      	mov	r1, sp
 80014b6:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80014b8:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014bc:	f006 f854 	bl	8007568 <HAL_ADC_ConfigChannel>
 80014c0:	b108      	cbz	r0, 80014c6 <MX_ADC_Init+0xd2>
 80014c2:	b672      	cpsid	i
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MX_ADC_Init+0xd0>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014c6:	2211      	movs	r2, #17
 80014c8:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014ca:	4669      	mov	r1, sp
 80014cc:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014ce:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014d2:	f006 f849 	bl	8007568 <HAL_ADC_ConfigChannel>
 80014d6:	b108      	cbz	r0, 80014dc <MX_ADC_Init+0xe8>
 80014d8:	b672      	cpsid	i
  while (1)
 80014da:	e7fe      	b.n	80014da <MX_ADC_Init+0xe6>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014dc:	2210      	movs	r2, #16
 80014de:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014e0:	4669      	mov	r1, sp
 80014e2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014e4:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014e8:	f006 f83e 	bl	8007568 <HAL_ADC_ConfigChannel>
 80014ec:	b108      	cbz	r0, 80014f2 <MX_ADC_Init+0xfe>
 80014ee:	b672      	cpsid	i
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MX_ADC_Init+0xfc>
}
 80014f2:	b00a      	add	sp, #40	; 0x28
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
 80014f6:	bf00      	nop
 80014f8:	200003b0 	.word	0x200003b0
 80014fc:	40012400 	.word	0x40012400
 8001500:	00800200 	.word	0x00800200

08001504 <update_keypad.part.0>:
	else if(num == '.'){
 8001504:	282e      	cmp	r0, #46	; 0x2e
 8001506:	d00e      	beq.n	8001526 <update_keypad.part.0+0x22>
	else if(num >= '0' && num <= '9'){
 8001508:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800150c:	2b09      	cmp	r3, #9
 800150e:	d809      	bhi.n	8001524 <update_keypad.part.0+0x20>
		if(kpenum == V1 || kpenum == V2){
 8001510:	4b59      	ldr	r3, [pc, #356]	; (8001678 <update_keypad.part.0+0x174>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8001518:	2a01      	cmp	r2, #1
 800151a:	d05f      	beq.n	80015dc <update_keypad.part.0+0xd8>
		else if(kpenum == A1 || kpenum == A2){
 800151c:	2b02      	cmp	r3, #2
 800151e:	d02e      	beq.n	800157e <update_keypad.part.0+0x7a>
 8001520:	2b04      	cmp	r3, #4
 8001522:	d02c      	beq.n	800157e <update_keypad.part.0+0x7a>
}
 8001524:	4770      	bx	lr
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8001526:	4a55      	ldr	r2, [pc, #340]	; (800167c <update_keypad.part.0+0x178>)
 8001528:	7813      	ldrb	r3, [r2, #0]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	2b01      	cmp	r3, #1
 800152e:	ddf9      	ble.n	8001524 <update_keypad.part.0+0x20>
 8001530:	4953      	ldr	r1, [pc, #332]	; (8001680 <update_keypad.part.0+0x17c>)
 8001532:	780b      	ldrb	r3, [r1, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f5      	bne.n	8001524 <update_keypad.part.0+0x20>
				keypadarr[i-1] = keypadarr[i];
 8001538:	4b52      	ldr	r3, [pc, #328]	; (8001684 <update_keypad.part.0+0x180>)
 800153a:	f893 c001 	ldrb.w	ip, [r3, #1]
 800153e:	fa5f fc8c 	uxtb.w	ip, ip
 8001542:	f883 c000 	strb.w	ip, [r3]
 8001546:	f893 c002 	ldrb.w	ip, [r3, #2]
 800154a:	fa5f fc8c 	uxtb.w	ip, ip
 800154e:	f883 c001 	strb.w	ip, [r3, #1]
 8001552:	f893 c003 	ldrb.w	ip, [r3, #3]
 8001556:	fa5f fc8c 	uxtb.w	ip, ip
 800155a:	f883 c002 	strb.w	ip, [r3, #2]
 800155e:	f893 c004 	ldrb.w	ip, [r3, #4]
 8001562:	fa5f fc8c 	uxtb.w	ip, ip
 8001566:	f883 c003 	strb.w	ip, [r3, #3]
			keypaddecimal = 1;
 800156a:	f04f 0c01 	mov.w	ip, #1
			keypadarr[keypadlength-1] = num;
 800156e:	7118      	strb	r0, [r3, #4]
			keypaddecimal = 1;
 8001570:	f881 c000 	strb.w	ip, [r1]
			keypaditerator--;
 8001574:	7813      	ldrb	r3, [r2, #0]
 8001576:	3b01      	subs	r3, #1
 8001578:	b25b      	sxtb	r3, r3
 800157a:	7013      	strb	r3, [r2, #0]
 800157c:	4770      	bx	lr
			if(keypaditerator > 3){
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <update_keypad.part.0+0x178>)
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	b252      	sxtb	r2, r2
 8001584:	2a03      	cmp	r2, #3
 8001586:	dc16      	bgt.n	80015b6 <update_keypad.part.0+0xb2>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	2a03      	cmp	r2, #3
 800158c:	d05b      	beq.n	8001646 <update_keypad.part.0+0x142>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	2a02      	cmp	r2, #2
 8001592:	d05d      	beq.n	8001650 <update_keypad.part.0+0x14c>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	2a01      	cmp	r2, #1
 8001598:	d05f      	beq.n	800165a <update_keypad.part.0+0x156>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	2a02      	cmp	r2, #2
 800159e:	d061      	beq.n	8001664 <update_keypad.part.0+0x160>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	2a01      	cmp	r2, #1
 80015a4:	d063      	beq.n	800166e <update_keypad.part.0+0x16a>
			else if(keypaditerator == 0 && keypadarr[2] == '.'){
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d1bb      	bne.n	8001524 <update_keypad.part.0+0x20>
 80015ac:	4a35      	ldr	r2, [pc, #212]	; (8001684 <update_keypad.part.0+0x180>)
 80015ae:	7891      	ldrb	r1, [r2, #2]
 80015b0:	292e      	cmp	r1, #46	; 0x2e
 80015b2:	d1b7      	bne.n	8001524 <update_keypad.part.0+0x20>
 80015b4:	e000      	b.n	80015b8 <update_keypad.part.0+0xb4>
					keypadarr[i-1] = keypadarr[i];
 80015b6:	4a33      	ldr	r2, [pc, #204]	; (8001684 <update_keypad.part.0+0x180>)
					keypadarr[i-1] = keypadarr[i];
 80015b8:	7851      	ldrb	r1, [r2, #1]
 80015ba:	b2c9      	uxtb	r1, r1
 80015bc:	7011      	strb	r1, [r2, #0]
 80015be:	7891      	ldrb	r1, [r2, #2]
 80015c0:	b2c9      	uxtb	r1, r1
 80015c2:	7051      	strb	r1, [r2, #1]
 80015c4:	78d1      	ldrb	r1, [r2, #3]
 80015c6:	b2c9      	uxtb	r1, r1
 80015c8:	7091      	strb	r1, [r2, #2]
 80015ca:	7911      	ldrb	r1, [r2, #4]
 80015cc:	b2c9      	uxtb	r1, r1
 80015ce:	70d1      	strb	r1, [r2, #3]
				keypadarr[keypadlength-1] = num;
 80015d0:	7110      	strb	r0, [r2, #4]
				keypaditerator--;
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	3a01      	subs	r2, #1
 80015d6:	b252      	sxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]
}
 80015da:	4770      	bx	lr
			if(keypaditerator > 2){
 80015dc:	4b27      	ldr	r3, [pc, #156]	; (800167c <update_keypad.part.0+0x178>)
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	b252      	sxtb	r2, r2
 80015e2:	2a02      	cmp	r2, #2
 80015e4:	dce7      	bgt.n	80015b6 <update_keypad.part.0+0xb2>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	2a03      	cmp	r2, #3
 80015ea:	d022      	beq.n	8001632 <update_keypad.part.0+0x12e>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	2a02      	cmp	r2, #2
 80015f0:	d024      	beq.n	800163c <update_keypad.part.0+0x138>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	2a02      	cmp	r2, #2
 80015f6:	d00d      	beq.n	8001614 <update_keypad.part.0+0x110>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80015f8:	781a      	ldrb	r2, [r3, #0]
 80015fa:	2a01      	cmp	r2, #1
 80015fc:	d00f      	beq.n	800161e <update_keypad.part.0+0x11a>
			else if(keypaditerator == 1 && keypadarr[4] == '.'){
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	2a01      	cmp	r2, #1
 8001602:	d011      	beq.n	8001628 <update_keypad.part.0+0x124>
			else if(keypaditerator == 0 && keypadarr[3] == '.'){
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	2a00      	cmp	r2, #0
 8001608:	d18c      	bne.n	8001524 <update_keypad.part.0+0x20>
 800160a:	4a1e      	ldr	r2, [pc, #120]	; (8001684 <update_keypad.part.0+0x180>)
 800160c:	78d1      	ldrb	r1, [r2, #3]
 800160e:	292e      	cmp	r1, #46	; 0x2e
 8001610:	d188      	bne.n	8001524 <update_keypad.part.0+0x20>
 8001612:	e7d1      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <update_keypad.part.0+0x180>)
 8001616:	7911      	ldrb	r1, [r2, #4]
 8001618:	292e      	cmp	r1, #46	; 0x2e
 800161a:	d1ed      	bne.n	80015f8 <update_keypad.part.0+0xf4>
 800161c:	e7cc      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 800161e:	4a19      	ldr	r2, [pc, #100]	; (8001684 <update_keypad.part.0+0x180>)
 8001620:	78d1      	ldrb	r1, [r2, #3]
 8001622:	292e      	cmp	r1, #46	; 0x2e
 8001624:	d1eb      	bne.n	80015fe <update_keypad.part.0+0xfa>
 8001626:	e7c7      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 1 && keypadarr[4] == '.'){
 8001628:	4a16      	ldr	r2, [pc, #88]	; (8001684 <update_keypad.part.0+0x180>)
 800162a:	7911      	ldrb	r1, [r2, #4]
 800162c:	292e      	cmp	r1, #46	; 0x2e
 800162e:	d1e9      	bne.n	8001604 <update_keypad.part.0+0x100>
 8001630:	e7c2      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 8001632:	4a14      	ldr	r2, [pc, #80]	; (8001684 <update_keypad.part.0+0x180>)
 8001634:	7911      	ldrb	r1, [r2, #4]
 8001636:	292e      	cmp	r1, #46	; 0x2e
 8001638:	d1d8      	bne.n	80015ec <update_keypad.part.0+0xe8>
 800163a:	e7bd      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 800163c:	4a11      	ldr	r2, [pc, #68]	; (8001684 <update_keypad.part.0+0x180>)
 800163e:	78d1      	ldrb	r1, [r2, #3]
 8001640:	292e      	cmp	r1, #46	; 0x2e
 8001642:	d1d6      	bne.n	80015f2 <update_keypad.part.0+0xee>
 8001644:	e7b8      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <update_keypad.part.0+0x180>)
 8001648:	7911      	ldrb	r1, [r2, #4]
 800164a:	292e      	cmp	r1, #46	; 0x2e
 800164c:	d19f      	bne.n	800158e <update_keypad.part.0+0x8a>
 800164e:	e7b3      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <update_keypad.part.0+0x180>)
 8001652:	78d1      	ldrb	r1, [r2, #3]
 8001654:	292e      	cmp	r1, #46	; 0x2e
 8001656:	d19d      	bne.n	8001594 <update_keypad.part.0+0x90>
 8001658:	e7ae      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <update_keypad.part.0+0x180>)
 800165c:	7891      	ldrb	r1, [r2, #2]
 800165e:	292e      	cmp	r1, #46	; 0x2e
 8001660:	d19b      	bne.n	800159a <update_keypad.part.0+0x96>
 8001662:	e7a9      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <update_keypad.part.0+0x180>)
 8001666:	7911      	ldrb	r1, [r2, #4]
 8001668:	292e      	cmp	r1, #46	; 0x2e
 800166a:	d199      	bne.n	80015a0 <update_keypad.part.0+0x9c>
 800166c:	e7a4      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <update_keypad.part.0+0x180>)
 8001670:	78d1      	ldrb	r1, [r2, #3]
 8001672:	292e      	cmp	r1, #46	; 0x2e
 8001674:	d197      	bne.n	80015a6 <update_keypad.part.0+0xa2>
 8001676:	e79f      	b.n	80015b8 <update_keypad.part.0+0xb4>
 8001678:	200006c5 	.word	0x200006c5
 800167c:	20000005 	.word	0x20000005
 8001680:	200006c4 	.word	0x200006c4
 8001684:	20000000 	.word	0x20000000

08001688 <update_keypad.constprop.0>:
		if(keypaditerator < keypadlength-1){
 8001688:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <update_keypad.constprop.0+0x40>)
 800168a:	7813      	ldrb	r3, [r2, #0]
 800168c:	b25b      	sxtb	r3, r3
 800168e:	2b03      	cmp	r3, #3
 8001690:	dc15      	bgt.n	80016be <update_keypad.constprop.0+0x36>
			if(keypadarr[4] == '.'){
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <update_keypad.constprop.0+0x44>)
 8001694:	7919      	ldrb	r1, [r3, #4]
 8001696:	292e      	cmp	r1, #46	; 0x2e
 8001698:	d012      	beq.n	80016c0 <update_keypad.constprop.0+0x38>
			keypadarr[0] = num;
 800169a:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 800169c:	78d9      	ldrb	r1, [r3, #3]
 800169e:	b2c9      	uxtb	r1, r1
 80016a0:	7119      	strb	r1, [r3, #4]
 80016a2:	7899      	ldrb	r1, [r3, #2]
 80016a4:	b2c9      	uxtb	r1, r1
 80016a6:	70d9      	strb	r1, [r3, #3]
 80016a8:	7859      	ldrb	r1, [r3, #1]
 80016aa:	b2c9      	uxtb	r1, r1
 80016ac:	7099      	strb	r1, [r3, #2]
 80016ae:	7819      	ldrb	r1, [r3, #0]
 80016b0:	b2c9      	uxtb	r1, r1
 80016b2:	7059      	strb	r1, [r3, #1]
			keypadarr[0] = num;
 80016b4:	7018      	strb	r0, [r3, #0]
			keypaditerator++;
 80016b6:	7813      	ldrb	r3, [r2, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	7013      	strb	r3, [r2, #0]
}
 80016be:	4770      	bx	lr
				keypaddecimal = 0;
 80016c0:	2000      	movs	r0, #0
 80016c2:	4903      	ldr	r1, [pc, #12]	; (80016d0 <update_keypad.constprop.0+0x48>)
 80016c4:	7008      	strb	r0, [r1, #0]
 80016c6:	e7e8      	b.n	800169a <update_keypad.constprop.0+0x12>
 80016c8:	20000005 	.word	0x20000005
 80016cc:	20000000 	.word	0x20000000
 80016d0:	200006c4 	.word	0x200006c4

080016d4 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d4:	2300      	movs	r3, #0
{
 80016d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016da:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80016de:	2403      	movs	r4, #3
 80016e0:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e2:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e4:	f04f 0810 	mov.w	r8, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e8:	f04f 0e02 	mov.w	lr, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80016ec:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80016f0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
{
 80016f4:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80016fa:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 80016fe:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001702:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001706:	e9cd 3303 	strd	r3, r3, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800170a:	4a16      	ldr	r2, [pc, #88]	; (8001764 <SystemClock_Config+0x90>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170e:	9300      	str	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001712:	a806      	add	r0, sp, #24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001718:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800171c:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800171e:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001722:	e9cd ec0f 	strd	lr, ip, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001726:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800172a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172e:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	f007 fed6 	bl	80094e0 <HAL_RCC_OscConfig>
 8001734:	b108      	cbz	r0, 800173a <SystemClock_Config+0x66>
 8001736:	b672      	cpsid	i
  while (1)
 8001738:	e7fe      	b.n	8001738 <SystemClock_Config+0x64>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800173a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173c:	240f      	movs	r4, #15
 800173e:	2503      	movs	r5, #3
 8001740:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001742:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001744:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001746:	4631      	mov	r1, r6
 8001748:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174a:	e9cd 4500 	strd	r4, r5, [sp]
 800174e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001752:	f008 f925 	bl	80099a0 <HAL_RCC_ClockConfig>
 8001756:	b108      	cbz	r0, 800175c <SystemClock_Config+0x88>
 8001758:	b672      	cpsid	i
  while (1)
 800175a:	e7fe      	b.n	800175a <SystemClock_Config+0x86>
}
 800175c:	b014      	add	sp, #80	; 0x50
 800175e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001762:	bf00      	nop
 8001764:	40007000 	.word	0x40007000

08001768 <EXTI1_IRQHandler>:
{
 8001768:	b410      	push	{r4}
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 800176a:	2407      	movs	r4, #7
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <EXTI1_IRQHandler+0x14>)
	memset (usbbuffer, '\0', 128); // clear the buffer
 800176e:	2280      	movs	r2, #128	; 0x80
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 8001770:	615c      	str	r4, [r3, #20]
	memset (usbbuffer, '\0', 128); // clear the buffer
 8001772:	2100      	movs	r1, #0
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <EXTI1_IRQHandler+0x18>)
}
 8001776:	bc10      	pop	{r4}
	memset (usbbuffer, '\0', 128); // clear the buffer
 8001778:	f00a be40 	b.w	800c3fc <memset>
 800177c:	40010400 	.word	0x40010400
 8001780:	200007a0 	.word	0x200007a0

08001784 <update_ADC_watchdog>:
void update_ADC_watchdog(float val){
 8001784:	b570      	push	{r4, r5, r6, lr}
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <update_ADC_watchdog+0x78>)
void update_ADC_watchdog(float val){
 8001788:	b082      	sub	sp, #8
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800178a:	491d      	ldr	r1, [pc, #116]	; (8001800 <update_ADC_watchdog+0x7c>)
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800178c:	891e      	ldrh	r6, [r3, #8]
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800178e:	f7ff faa1 	bl	8000cd4 <__aeabi_fmul>
 8001792:	491c      	ldr	r1, [pc, #112]	; (8001804 <update_ADC_watchdog+0x80>)
 8001794:	f7ff fa9e 	bl	8000cd4 <__aeabi_fmul>
 8001798:	491b      	ldr	r1, [pc, #108]	; (8001808 <update_ADC_watchdog+0x84>)
 800179a:	f7ff fa9b 	bl	8000cd4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <update_ADC_watchdog+0x88>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80017a0:	4604      	mov	r4, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 80017a2:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80017a4:	b2b6      	uxth	r6, r6
 80017a6:	8818      	ldrh	r0, [r3, #0]
 80017a8:	f7ff fa3c 	bl	8000c24 <__aeabi_ui2f>
 80017ac:	4605      	mov	r5, r0
 80017ae:	4630      	mov	r0, r6
 80017b0:	f7ff fa38 	bl	8000c24 <__aeabi_ui2f>
 80017b4:	4601      	mov	r1, r0
 80017b6:	4628      	mov	r0, r5
 80017b8:	f7ff fb40 	bl	8000e3c <__aeabi_fdiv>
 80017bc:	4914      	ldr	r1, [pc, #80]	; (8001810 <update_ADC_watchdog+0x8c>)
 80017be:	f7ff fa89 	bl	8000cd4 <__aeabi_fmul>
 80017c2:	4601      	mov	r1, r0
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80017c4:	4620      	mov	r0, r4
 80017c6:	f7ff fb39 	bl	8000e3c <__aeabi_fdiv>
 80017ca:	f7ff fc6f 	bl	80010ac <__aeabi_f2uiz>
	if(amp >= 4095){
 80017ce:	f640 72fe 	movw	r2, #4094	; 0xffe
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80017d2:	b280      	uxth	r0, r0
 80017d4:	f8ad 0006 	strh.w	r0, [sp, #6]
	if(amp >= 4095){
 80017d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	4293      	cmp	r3, r2
 80017e0:	d905      	bls.n	80017ee <update_ADC_watchdog+0x6a>
		ADC1->HTR = 4095;
 80017e2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <update_ADC_watchdog+0x90>)
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017ea:	b002      	add	sp, #8
 80017ec:	bd70      	pop	{r4, r5, r6, pc}
		ADC1->HTR = amp;
 80017ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <update_ADC_watchdog+0x90>)
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80017f8:	b002      	add	sp, #8
 80017fa:	bd70      	pop	{r4, r5, r6, pc}
 80017fc:	20000388 	.word	0x20000388
 8001800:	3e19999a 	.word	0x3e19999a
 8001804:	41a00000 	.word	0x41a00000
 8001808:	457ff000 	.word	0x457ff000
 800180c:	20000010 	.word	0x20000010
 8001810:	40400000 	.word	0x40400000
 8001814:	40012400 	.word	0x40012400

08001818 <lcd_createChar>:
{
 8001818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800181c:	2564      	movs	r5, #100	; 0x64
 800181e:	482d      	ldr	r0, [pc, #180]	; (80018d4 <lcd_createChar+0xbc>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001820:	492d      	ldr	r1, [pc, #180]	; (80018d8 <lcd_createChar+0xc0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001822:	4607      	mov	r7, r0
{
 8001824:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001826:	2304      	movs	r3, #4
 8001828:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800182a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800182c:	9500      	str	r5, [sp, #0]
 800182e:	214e      	movs	r1, #78	; 0x4e
 8001830:	f006 fd62 	bl	80082f8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001834:	2001      	movs	r0, #1
 8001836:	f005 fc4b 	bl	80070d0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800183c:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800183e:	9303      	str	r3, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001840:	4638      	mov	r0, r7
 8001842:	2304      	movs	r3, #4
 8001844:	4c26      	ldr	r4, [pc, #152]	; (80018e0 <lcd_createChar+0xc8>)
 8001846:	9500      	str	r5, [sp, #0]
 8001848:	aa03      	add	r2, sp, #12
 800184a:	f006 fd55 	bl	80082f8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8001854:	f005 fc3c 	bl	80070d0 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001858:	2304      	movs	r3, #4
		lcd_send_data(customChar[i]);
 800185a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800185e:	4638      	mov	r0, r7
	data_l = ((data<<4)&0xf0);
 8001860:	fa02 f103 	lsl.w	r1, r2, r3
 8001864:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8001866:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800186a:	f042 0c09 	orr.w	ip, r2, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800186e:	f041 0e09 	orr.w	lr, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001872:	f042 090d 	orr.w	r9, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001876:	f041 080d 	orr.w	r8, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800187a:	aa03      	add	r2, sp, #12
 800187c:	214e      	movs	r1, #78	; 0x4e
 800187e:	9500      	str	r5, [sp, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001880:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001884:	f88d e00f 	strb.w	lr, [sp, #15]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001888:	f88d 900c 	strb.w	r9, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800188c:	f88d 800e 	strb.w	r8, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001890:	f006 fd32 	bl	80082f8 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8001894:	2001      	movs	r0, #1
 8001896:	f005 fc1b 	bl	80070d0 <HAL_Delay>
	for(int i = 0; i <= 63 ; i++){
 800189a:	42a6      	cmp	r6, r4
 800189c:	d1dc      	bne.n	8001858 <lcd_createChar+0x40>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800189e:	490f      	ldr	r1, [pc, #60]	; (80018dc <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018a0:	aa03      	add	r2, sp, #12
 80018a2:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018a4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018a6:	9500      	str	r5, [sp, #0]
 80018a8:	214e      	movs	r1, #78	; 0x4e
 80018aa:	480a      	ldr	r0, [pc, #40]	; (80018d4 <lcd_createChar+0xbc>)
 80018ac:	f006 fd24 	bl	80082f8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80018b0:	2001      	movs	r0, #1
 80018b2:	f005 fc0d 	bl	80070d0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018b6:	480b      	ldr	r0, [pc, #44]	; (80018e4 <lcd_createChar+0xcc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018b8:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018ba:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018bc:	214e      	movs	r1, #78	; 0x4e
 80018be:	aa03      	add	r2, sp, #12
 80018c0:	9500      	str	r5, [sp, #0]
 80018c2:	4804      	ldr	r0, [pc, #16]	; (80018d4 <lcd_createChar+0xbc>)
 80018c4:	f006 fd18 	bl	80082f8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80018c8:	2001      	movs	r0, #1
}
 80018ca:	b005      	add	sp, #20
 80018cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 80018d0:	f005 bbfe 	b.w	80070d0 <HAL_Delay>
 80018d4:	200004ec 	.word	0x200004ec
 80018d8:	080c484c 	.word	0x080c484c
 80018dc:	080c080c 	.word	0x080c080c
 80018e0:	0800f283 	.word	0x0800f283
 80018e4:	282c080c 	.word	0x282c080c

080018e8 <lcd_init>:
{
 80018e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 80018ea:	2064      	movs	r0, #100	; 0x64
{
 80018ec:	b085      	sub	sp, #20
	HAL_Delay(100);
 80018ee:	f005 fbef 	bl	80070d0 <HAL_Delay>
 80018f2:	2403      	movs	r4, #3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018f4:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018f6:	4f2e      	ldr	r7, [pc, #184]	; (80019b0 <lcd_init+0xc8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018f8:	4e2e      	ldr	r6, [pc, #184]	; (80019b4 <lcd_init+0xcc>)
 80018fa:	2304      	movs	r3, #4
 80018fc:	214e      	movs	r1, #78	; 0x4e
 80018fe:	aa03      	add	r2, sp, #12
 8001900:	4630      	mov	r0, r6
 8001902:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001904:	9703      	str	r7, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001906:	f006 fcf7 	bl	80082f8 <HAL_I2C_Master_Transmit>
		HAL_Delay(45);
 800190a:	202d      	movs	r0, #45	; 0x2d
 800190c:	f005 fbe0 	bl	80070d0 <HAL_Delay>
	for(i=0;i<3;i++){//sending 3 times: select 4-bit mode
 8001910:	1e63      	subs	r3, r4, #1
 8001912:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001916:	d1f0      	bne.n	80018fa <lcd_init+0x12>
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001918:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800191a:	4927      	ldr	r1, [pc, #156]	; (80019b8 <lcd_init+0xd0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800191c:	2304      	movs	r3, #4
 800191e:	aa03      	add	r2, sp, #12
 8001920:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001922:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001924:	4823      	ldr	r0, [pc, #140]	; (80019b4 <lcd_init+0xcc>)
 8001926:	214e      	movs	r1, #78	; 0x4e
 8001928:	f006 fce6 	bl	80082f8 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 800192c:	4620      	mov	r0, r4
 800192e:	f005 fbcf 	bl	80070d0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001932:	4a22      	ldr	r2, [pc, #136]	; (80019bc <lcd_init+0xd4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001934:	2304      	movs	r3, #4
 8001936:	214e      	movs	r1, #78	; 0x4e
 8001938:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800193a:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800193c:	481d      	ldr	r0, [pc, #116]	; (80019b4 <lcd_init+0xcc>)
 800193e:	aa03      	add	r2, sp, #12
 8001940:	f006 fcda 	bl	80082f8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001944:	2001      	movs	r0, #1
 8001946:	f005 fbc3 	bl	80070d0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800194a:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <lcd_init+0xd8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800194c:	2304      	movs	r3, #4
 800194e:	214e      	movs	r1, #78	; 0x4e
 8001950:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001952:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001954:	4817      	ldr	r0, [pc, #92]	; (80019b4 <lcd_init+0xcc>)
 8001956:	aa03      	add	r2, sp, #12
 8001958:	f006 fcce 	bl	80082f8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800195c:	2001      	movs	r0, #1
 800195e:	f005 fbb7 	bl	80070d0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001962:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <lcd_init+0xdc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001964:	2304      	movs	r3, #4
 8001966:	214e      	movs	r1, #78	; 0x4e
 8001968:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800196a:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800196c:	4811      	ldr	r0, [pc, #68]	; (80019b4 <lcd_init+0xcc>)
 800196e:	aa03      	add	r2, sp, #12
 8001970:	f006 fcc2 	bl	80082f8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f005 fbab 	bl	80070d0 <HAL_Delay>
	lcd_createChar();
 800197a:	f7ff ff4d 	bl	8001818 <lcd_createChar>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <lcd_init+0xe0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001980:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001982:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001984:	2304      	movs	r3, #4
 8001986:	214e      	movs	r1, #78	; 0x4e
 8001988:	480a      	ldr	r0, [pc, #40]	; (80019b4 <lcd_init+0xcc>)
 800198a:	aa03      	add	r2, sp, #12
 800198c:	f006 fcb4 	bl	80082f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001990:	4627      	mov	r7, r4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001992:	4e0e      	ldr	r6, [pc, #56]	; (80019cc <lcd_init+0xe4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001994:	4d07      	ldr	r5, [pc, #28]	; (80019b4 <lcd_init+0xcc>)
 8001996:	2304      	movs	r3, #4
 8001998:	214e      	movs	r1, #78	; 0x4e
 800199a:	4628      	mov	r0, r5
 800199c:	aa03      	add	r2, sp, #12
 800199e:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019a0:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019a2:	f006 fca9 	bl	80082f8 <HAL_I2C_Master_Transmit>
	for (int i=0; i<100; i++)
 80019a6:	3c01      	subs	r4, #1
 80019a8:	d1f5      	bne.n	8001996 <lcd_init+0xae>
}
 80019aa:	b005      	add	sp, #20
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	383c080c 	.word	0x383c080c
 80019b4:	200004ec 	.word	0x200004ec
 80019b8:	282c080c 	.word	0x282c080c
 80019bc:	888c282c 	.word	0x888c282c
 80019c0:	c8cc080c 	.word	0xc8cc080c
 80019c4:	080c888c 	.word	0x080c888c
 80019c8:	080c080c 	.word	0x080c080c
 80019cc:	090d292d 	.word	0x090d292d

080019d0 <lcd_psu_init>:
void lcd_psu_init(void){
 80019d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019d4:	2664      	movs	r6, #100	; 0x64
void lcd_psu_init(void){
 80019d6:	b084      	sub	sp, #16
	lcd_init();
 80019d8:	f7ff ff86 	bl	80018e8 <lcd_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019dc:	49c7      	ldr	r1, [pc, #796]	; (8001cfc <lcd_psu_init+0x32c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019de:	48c8      	ldr	r0, [pc, #800]	; (8001d00 <lcd_psu_init+0x330>)
 80019e0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019e2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019e4:	aa03      	add	r2, sp, #12
 80019e6:	214e      	movs	r1, #78	; 0x4e
 80019e8:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019ea:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019ec:	f006 fc84 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80019f0:	2356      	movs	r3, #86	; 0x56
 80019f2:	4dc4      	ldr	r5, [pc, #784]	; (8001d04 <lcd_psu_init+0x334>)
	data_l = ((data<<4)&0xf0);
 80019f4:	011a      	lsls	r2, r3, #4
 80019f6:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80019f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80019fc:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a00:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a04:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a08:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	214e      	movs	r1, #78	; 0x4e
 8001a10:	4638      	mov	r0, r7
 8001a12:	aa03      	add	r2, sp, #12
 8001a14:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a16:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a1a:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a1e:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a22:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a26:	f006 fc67 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001a2a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1e0      	bne.n	80019f4 <lcd_psu_init+0x24>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a32:	49b5      	ldr	r1, [pc, #724]	; (8001d08 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a34:	2304      	movs	r3, #4
 8001a36:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a38:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a3a:	48b1      	ldr	r0, [pc, #708]	; (8001d00 <lcd_psu_init+0x330>)
 8001a3c:	214e      	movs	r1, #78	; 0x4e
 8001a3e:	aa03      	add	r2, sp, #12
 8001a40:	f006 fc5a 	bl	80082f8 <HAL_I2C_Master_Transmit>
 8001a44:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001a46:	2356      	movs	r3, #86	; 0x56
 8001a48:	4db0      	ldr	r5, [pc, #704]	; (8001d0c <lcd_psu_init+0x33c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a4a:	4fad      	ldr	r7, [pc, #692]	; (8001d00 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001a4c:	011a      	lsls	r2, r3, #4
 8001a4e:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a54:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a58:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a5c:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a60:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a64:	2304      	movs	r3, #4
 8001a66:	214e      	movs	r1, #78	; 0x4e
 8001a68:	4638      	mov	r0, r7
 8001a6a:	aa03      	add	r2, sp, #12
 8001a6c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a6e:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a72:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a76:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a7a:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a7e:	f006 fc3b 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001a82:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1e0      	bne.n	8001a4c <lcd_psu_init+0x7c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a8a:	49a1      	ldr	r1, [pc, #644]	; (8001d10 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a90:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a92:	489b      	ldr	r0, [pc, #620]	; (8001d00 <lcd_psu_init+0x330>)
 8001a94:	214e      	movs	r1, #78	; 0x4e
 8001a96:	aa03      	add	r2, sp, #12
 8001a98:	f006 fc2e 	bl	80082f8 <HAL_I2C_Master_Transmit>
 8001a9c:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001a9e:	233a      	movs	r3, #58	; 0x3a
 8001aa0:	4d9c      	ldr	r5, [pc, #624]	; (8001d14 <lcd_psu_init+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001aa2:	4f97      	ldr	r7, [pc, #604]	; (8001d00 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001aa4:	011a      	lsls	r2, r3, #4
 8001aa6:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001aac:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001ab0:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001ab4:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001ab8:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001abc:	2304      	movs	r3, #4
 8001abe:	214e      	movs	r1, #78	; 0x4e
 8001ac0:	4638      	mov	r0, r7
 8001ac2:	aa03      	add	r2, sp, #12
 8001ac4:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001ac6:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001aca:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001ace:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001ad2:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ad6:	f006 fc0f 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001ada:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1e0      	bne.n	8001aa4 <lcd_psu_init+0xd4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ae2:	498d      	ldr	r1, [pc, #564]	; (8001d18 <lcd_psu_init+0x348>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ae8:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001aea:	4885      	ldr	r0, [pc, #532]	; (8001d00 <lcd_psu_init+0x330>)
 8001aec:	214e      	movs	r1, #78	; 0x4e
 8001aee:	aa03      	add	r2, sp, #12
 8001af0:	f006 fc02 	bl	80082f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001af4:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001af6:	2341      	movs	r3, #65	; 0x41
 8001af8:	4d88      	ldr	r5, [pc, #544]	; (8001d1c <lcd_psu_init+0x34c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001afa:	4f81      	ldr	r7, [pc, #516]	; (8001d00 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001afc:	011a      	lsls	r2, r3, #4
 8001afe:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b04:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b08:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b0c:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b10:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b14:	2304      	movs	r3, #4
 8001b16:	214e      	movs	r1, #78	; 0x4e
 8001b18:	4638      	mov	r0, r7
 8001b1a:	aa03      	add	r2, sp, #12
 8001b1c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b1e:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b22:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b26:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b2a:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b2e:	f006 fbe3 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001b32:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1e0      	bne.n	8001afc <lcd_psu_init+0x12c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b3a:	4973      	ldr	r1, [pc, #460]	; (8001d08 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b40:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b42:	486f      	ldr	r0, [pc, #444]	; (8001d00 <lcd_psu_init+0x330>)
 8001b44:	214e      	movs	r1, #78	; 0x4e
 8001b46:	aa03      	add	r2, sp, #12
 8001b48:	f006 fbd6 	bl	80082f8 <HAL_I2C_Master_Transmit>
 8001b4c:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001b4e:	2341      	movs	r3, #65	; 0x41
 8001b50:	4d73      	ldr	r5, [pc, #460]	; (8001d20 <lcd_psu_init+0x350>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b52:	4f6b      	ldr	r7, [pc, #428]	; (8001d00 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001b54:	011a      	lsls	r2, r3, #4
 8001b56:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b5c:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b60:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b64:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b68:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	214e      	movs	r1, #78	; 0x4e
 8001b70:	4638      	mov	r0, r7
 8001b72:	aa03      	add	r2, sp, #12
 8001b74:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b76:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b7a:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b7e:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b82:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b86:	f006 fbb7 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001b8a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1e0      	bne.n	8001b54 <lcd_psu_init+0x184>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b92:	495f      	ldr	r1, [pc, #380]	; (8001d10 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b94:	2304      	movs	r3, #4
 8001b96:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b98:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b9a:	4859      	ldr	r0, [pc, #356]	; (8001d00 <lcd_psu_init+0x330>)
 8001b9c:	214e      	movs	r1, #78	; 0x4e
 8001b9e:	aa03      	add	r2, sp, #12
 8001ba0:	f006 fbaa 	bl	80082f8 <HAL_I2C_Master_Transmit>
 8001ba4:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001ba6:	233a      	movs	r3, #58	; 0x3a
 8001ba8:	4d5e      	ldr	r5, [pc, #376]	; (8001d24 <lcd_psu_init+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001baa:	4f55      	ldr	r7, [pc, #340]	; (8001d00 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001bac:	011a      	lsls	r2, r3, #4
 8001bae:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001bb4:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001bb8:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001bbc:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001bc0:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	214e      	movs	r1, #78	; 0x4e
 8001bc8:	4638      	mov	r0, r7
 8001bca:	aa03      	add	r2, sp, #12
 8001bcc:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001bce:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001bd2:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001bd6:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001bda:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bde:	f006 fb8b 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001be2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1e0      	bne.n	8001bac <lcd_psu_init+0x1dc>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001bea:	494f      	ldr	r1, [pc, #316]	; (8001d28 <lcd_psu_init+0x358>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bec:	2304      	movs	r3, #4
 8001bee:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001bf0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bf2:	4843      	ldr	r0, [pc, #268]	; (8001d00 <lcd_psu_init+0x330>)
 8001bf4:	214e      	movs	r1, #78	; 0x4e
 8001bf6:	aa03      	add	r2, sp, #12
 8001bf8:	f006 fb7e 	bl	80082f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bfc:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001bfe:	2356      	movs	r3, #86	; 0x56
 8001c00:	4d4a      	ldr	r5, [pc, #296]	; (8001d2c <lcd_psu_init+0x35c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c02:	4f3f      	ldr	r7, [pc, #252]	; (8001d00 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001c04:	011a      	lsls	r2, r3, #4
 8001c06:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001c0c:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001c10:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c14:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001c18:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	214e      	movs	r1, #78	; 0x4e
 8001c20:	4638      	mov	r0, r7
 8001c22:	aa03      	add	r2, sp, #12
 8001c24:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c26:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001c2a:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001c2e:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001c32:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c36:	f006 fb5f 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001c3a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1e0      	bne.n	8001c04 <lcd_psu_init+0x234>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c42:	4931      	ldr	r1, [pc, #196]	; (8001d08 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c44:	2304      	movs	r3, #4
 8001c46:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c48:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c4a:	482d      	ldr	r0, [pc, #180]	; (8001d00 <lcd_psu_init+0x330>)
 8001c4c:	214e      	movs	r1, #78	; 0x4e
 8001c4e:	aa03      	add	r2, sp, #12
 8001c50:	f006 fb52 	bl	80082f8 <HAL_I2C_Master_Transmit>
 8001c54:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001c56:	2356      	movs	r3, #86	; 0x56
 8001c58:	4d35      	ldr	r5, [pc, #212]	; (8001d30 <lcd_psu_init+0x360>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c5a:	4f29      	ldr	r7, [pc, #164]	; (8001d00 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001c5c:	011a      	lsls	r2, r3, #4
 8001c5e:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001c64:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001c68:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c6c:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001c70:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c74:	2304      	movs	r3, #4
 8001c76:	214e      	movs	r1, #78	; 0x4e
 8001c78:	4638      	mov	r0, r7
 8001c7a:	aa03      	add	r2, sp, #12
 8001c7c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c7e:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001c82:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001c86:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001c8a:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c8e:	f006 fb33 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001c92:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1e0      	bne.n	8001c5c <lcd_psu_init+0x28c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c9a:	491d      	ldr	r1, [pc, #116]	; (8001d10 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001ca0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ca2:	4817      	ldr	r0, [pc, #92]	; (8001d00 <lcd_psu_init+0x330>)
 8001ca4:	214e      	movs	r1, #78	; 0x4e
 8001ca6:	aa03      	add	r2, sp, #12
 8001ca8:	f006 fb26 	bl	80082f8 <HAL_I2C_Master_Transmit>
 8001cac:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001cae:	233a      	movs	r3, #58	; 0x3a
 8001cb0:	4d18      	ldr	r5, [pc, #96]	; (8001d14 <lcd_psu_init+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cb2:	4f13      	ldr	r7, [pc, #76]	; (8001d00 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001cb4:	011a      	lsls	r2, r3, #4
 8001cb6:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001cbc:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001cc0:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001cc4:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001cc8:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ccc:	2304      	movs	r3, #4
 8001cce:	214e      	movs	r1, #78	; 0x4e
 8001cd0:	4638      	mov	r0, r7
 8001cd2:	aa03      	add	r2, sp, #12
 8001cd4:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001cd6:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001cda:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001cde:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001ce2:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ce6:	f006 fb07 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001cea:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1e0      	bne.n	8001cb4 <lcd_psu_init+0x2e4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001cf2:	4910      	ldr	r1, [pc, #64]	; (8001d34 <lcd_psu_init+0x364>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	9600      	str	r6, [sp, #0]
 8001cf8:	e01e      	b.n	8001d38 <lcd_psu_init+0x368>
 8001cfa:	bf00      	nop
 8001cfc:	080c888c 	.word	0x080c888c
 8001d00:	200004ec 	.word	0x200004ec
 8001d04:	0800f1e8 	.word	0x0800f1e8
 8001d08:	191d090d 	.word	0x191d090d
 8001d0c:	0800f1f4 	.word	0x0800f1f4
 8001d10:	090d090d 	.word	0x090d090d
 8001d14:	0800f1f8 	.word	0x0800f1f8
 8001d18:	080cc8cc 	.word	0x080cc8cc
 8001d1c:	0800f200 	.word	0x0800f200
 8001d20:	0800f20c 	.word	0x0800f20c
 8001d24:	0800f210 	.word	0x0800f210
 8001d28:	484c989c 	.word	0x484c989c
 8001d2c:	0800f218 	.word	0x0800f218
 8001d30:	0800f224 	.word	0x0800f224
 8001d34:	484cd8dc 	.word	0x484cd8dc
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d38:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d3a:	4841      	ldr	r0, [pc, #260]	; (8001e40 <lcd_psu_init+0x470>)
 8001d3c:	214e      	movs	r1, #78	; 0x4e
 8001d3e:	aa03      	add	r2, sp, #12
 8001d40:	f006 fada 	bl	80082f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d44:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001d46:	2341      	movs	r3, #65	; 0x41
 8001d48:	4d3e      	ldr	r5, [pc, #248]	; (8001e44 <lcd_psu_init+0x474>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d4a:	4f3d      	ldr	r7, [pc, #244]	; (8001e40 <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001d4c:	011a      	lsls	r2, r3, #4
 8001d4e:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d54:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d58:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d5c:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d60:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d64:	2304      	movs	r3, #4
 8001d66:	214e      	movs	r1, #78	; 0x4e
 8001d68:	4638      	mov	r0, r7
 8001d6a:	aa03      	add	r2, sp, #12
 8001d6c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d6e:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d72:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d76:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d7a:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d7e:	f006 fabb 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d82:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1e0      	bne.n	8001d4c <lcd_psu_init+0x37c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d8a:	492f      	ldr	r1, [pc, #188]	; (8001e48 <lcd_psu_init+0x478>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d90:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d92:	482b      	ldr	r0, [pc, #172]	; (8001e40 <lcd_psu_init+0x470>)
 8001d94:	214e      	movs	r1, #78	; 0x4e
 8001d96:	aa03      	add	r2, sp, #12
 8001d98:	f006 faae 	bl	80082f8 <HAL_I2C_Master_Transmit>
 8001d9c:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001d9e:	2341      	movs	r3, #65	; 0x41
 8001da0:	4d2a      	ldr	r5, [pc, #168]	; (8001e4c <lcd_psu_init+0x47c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001da2:	4f27      	ldr	r7, [pc, #156]	; (8001e40 <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001da4:	011a      	lsls	r2, r3, #4
 8001da6:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001dac:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001db0:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001db4:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001db8:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	214e      	movs	r1, #78	; 0x4e
 8001dc0:	4638      	mov	r0, r7
 8001dc2:	aa03      	add	r2, sp, #12
 8001dc4:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001dc6:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001dca:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001dce:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001dd2:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001dd6:	f006 fa8f 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001dda:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e0      	bne.n	8001da4 <lcd_psu_init+0x3d4>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001de2:	491b      	ldr	r1, [pc, #108]	; (8001e50 <lcd_psu_init+0x480>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001de4:	2304      	movs	r3, #4
 8001de6:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001de8:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001dea:	4815      	ldr	r0, [pc, #84]	; (8001e40 <lcd_psu_init+0x470>)
 8001dec:	214e      	movs	r1, #78	; 0x4e
 8001dee:	aa03      	add	r2, sp, #12
 8001df0:	f006 fa82 	bl	80082f8 <HAL_I2C_Master_Transmit>
 8001df4:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001df6:	233a      	movs	r3, #58	; 0x3a
 8001df8:	4c16      	ldr	r4, [pc, #88]	; (8001e54 <lcd_psu_init+0x484>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001dfa:	4d11      	ldr	r5, [pc, #68]	; (8001e40 <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001dfc:	011a      	lsls	r2, r3, #4
 8001dfe:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001e04:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001e08:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001e0c:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001e10:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e14:	2304      	movs	r3, #4
 8001e16:	214e      	movs	r1, #78	; 0x4e
 8001e18:	4628      	mov	r0, r5
 8001e1a:	aa03      	add	r2, sp, #12
 8001e1c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001e1e:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001e22:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001e26:	f88d 700e 	strb.w	r7, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001e2a:	f88d e00f 	strb.w	lr, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e2e:	f006 fa63 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001e32:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1e0      	bne.n	8001dfc <lcd_psu_init+0x42c>
}
 8001e3a:	b004      	add	sp, #16
 8001e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e40:	200004ec 	.word	0x200004ec
 8001e44:	0800f228 	.word	0x0800f228
 8001e48:	191d090d 	.word	0x191d090d
 8001e4c:	0800f234 	.word	0x0800f234
 8001e50:	090d090d 	.word	0x090d090d
 8001e54:	0800f210 	.word	0x0800f210

08001e58 <ourInit>:
void ourInit(void){
 8001e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_ADC_DeInit(&hadc);
 8001e5c:	4c55      	ldr	r4, [pc, #340]	; (8001fb4 <ourInit+0x15c>)
void ourInit(void){
 8001e5e:	b08d      	sub	sp, #52	; 0x34
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001e60:	2201      	movs	r2, #1
 8001e62:	2140      	movs	r1, #64	; 0x40
 8001e64:	4854      	ldr	r0, [pc, #336]	; (8001fb8 <ourInit+0x160>)
 8001e66:	f006 f965 	bl	8008134 <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f005 fa12 	bl	8007294 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 8001e70:	4852      	ldr	r0, [pc, #328]	; (8001fbc <ourInit+0x164>)
 8001e72:	f005 fe61 	bl	8007b38 <HAL_DMA_DeInit>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e76:	4b52      	ldr	r3, [pc, #328]	; (8001fc0 <ourInit+0x168>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001e78:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e7a:	69d8      	ldr	r0, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001e7c:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e7e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8001e82:	61d8      	str	r0, [r3, #28]
 8001e84:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001e86:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	9307      	str	r3, [sp, #28]
 8001e8e:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001e90:	f005 fd1c 	bl	80078cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e94:	200b      	movs	r0, #11
 8001e96:	f005 fd57 	bl	8007948 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 4, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	200e      	movs	r0, #14
 8001ea0:	f005 fd14 	bl	80078cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ea4:	200e      	movs	r0, #14
 8001ea6:	f005 fd4f 	bl	8007948 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2105      	movs	r1, #5
 8001eae:	200f      	movs	r0, #15
 8001eb0:	f005 fd0c 	bl	80078cc <HAL_NVIC_SetPriority>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001eb4:	4d43      	ldr	r5, [pc, #268]	; (8001fc4 <ourInit+0x16c>)
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001eb6:	200f      	movs	r0, #15
 8001eb8:	f005 fd46 	bl	8007948 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 8001ebc:	f7ff fa9a 	bl	80013f4 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_values, 6);// start the adc in dma mode
 8001ec0:	2206      	movs	r2, #6
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	4940      	ldr	r1, [pc, #256]	; (8001fc8 <ourInit+0x170>)
 8001ec6:	f005 fc8f 	bl	80077e8 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4628      	mov	r0, r5
 8001ece:	f005 fd8b 	bl	80079e8 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001ed2:	2110      	movs	r1, #16
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	f005 fd87 	bl	80079e8 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001eda:	2300      	movs	r3, #0
 8001edc:	4628      	mov	r0, r5
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f005 fdb1 	bl	8007a48 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	4628      	mov	r0, r5
 8001eea:	461a      	mov	r2, r3
 8001eec:	2110      	movs	r1, #16
 8001eee:	f005 fdab 	bl	8007a48 <HAL_DAC_SetValue>
	ExtiConfig.Line = EXTI_LINE_1;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	4a35      	ldr	r2, [pc, #212]	; (8001fcc <ourInit+0x174>)
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001ef6:	a908      	add	r1, sp, #32
	ExtiConfig.Line = EXTI_LINE_1;
 8001ef8:	e9cd 2308 	strd	r2, r3, [sp, #32]
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001efc:	2303      	movs	r3, #3
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001efe:	4834      	ldr	r0, [pc, #208]	; (8001fd0 <ourInit+0x178>)
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001f00:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001f02:	f005 ff2f 	bl	8007d64 <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001f08:	2440      	movs	r4, #64	; 0x40
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	2007      	movs	r0, #7
 8001f0e:	f005 fcdd 	bl	80078cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f12:	2007      	movs	r0, #7
 8001f14:	f005 fd18 	bl	8007948 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001f1e:	482d      	ldr	r0, [pc, #180]	; (8001fd4 <ourInit+0x17c>)
 8001f20:	f006 f908 	bl	8008134 <HAL_GPIO_WritePin>
	lcd_psu_init();
 8001f24:	f7ff fd54 	bl	80019d0 <lcd_psu_init>
	HAL_TIM_Base_Start_IT(&htim3);
 8001f28:	482b      	ldr	r0, [pc, #172]	; (8001fd8 <ourInit+0x180>)
 8001f2a:	f007 fec7 	bl	8009cbc <HAL_TIM_Base_Start_IT>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001f2e:	4e2b      	ldr	r6, [pc, #172]	; (8001fdc <ourInit+0x184>)
	HAL_TIM_Base_Start_IT(&htim11);
 8001f30:	482b      	ldr	r0, [pc, #172]	; (8001fe0 <ourInit+0x188>)
 8001f32:	f007 fec3 	bl	8009cbc <HAL_TIM_Base_Start_IT>
	memset (usbbuffer, '\0', 128);  // clear the buffer
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	2100      	movs	r1, #0
 8001f3a:	482a      	ldr	r0, [pc, #168]	; (8001fe4 <ourInit+0x18c>)
 8001f3c:	f00a fa5e 	bl	800c3fc <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001f40:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001fe8 <ourInit+0x190>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001f44:	4622      	mov	r2, r4
 8001f46:	2100      	movs	r1, #0
 8001f48:	4630      	mov	r0, r6
 8001f4a:	f00a fa57 	bl	800c3fc <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001f4e:	4f27      	ldr	r7, [pc, #156]	; (8001fec <ourInit+0x194>)
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001f50:	4622      	mov	r2, r4
 8001f52:	2100      	movs	r1, #0
 8001f54:	4826      	ldr	r0, [pc, #152]	; (8001ff0 <ourInit+0x198>)
 8001f56:	f00a fa51 	bl	800c3fc <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001f5a:	4622      	mov	r2, r4
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4640      	mov	r0, r8
 8001f60:	f00a fa4c 	bl	800c3fc <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001f64:	4622      	mov	r2, r4
 8001f66:	4641      	mov	r1, r8
 8001f68:	4638      	mov	r0, r7
 8001f6a:	f008 f91b 	bl	800a1a4 <HAL_UART_Receive_DMA>
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001f6e:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <ourInit+0x19c>)
 8001f70:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <ourInit+0x1a0>)
 8001f72:	6815      	ldr	r5, [r2, #0]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <ourInit+0x1a4>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b25b      	sxtb	r3, r3
 8001f7c:	9304      	str	r3, [sp, #16]
 8001f7e:	f7fe fa6b 	bl	8000458 <__aeabi_f2d>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4628      	mov	r0, r5
 8001f88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f8c:	f7fe fa64 	bl	8000458 <__aeabi_f2d>
 8001f90:	4680      	mov	r8, r0
 8001f92:	4689      	mov	r9, r1
 8001f94:	4630      	mov	r0, r6
 8001f96:	2120      	movs	r1, #32
 8001f98:	e9cd 8900 	strd	r8, r9, [sp]
 8001f9c:	4a18      	ldr	r2, [pc, #96]	; (8002000 <ourInit+0x1a8>)
 8001f9e:	f00a fe95 	bl	800cccc <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	4631      	mov	r1, r6
 8001fa6:	4638      	mov	r0, r7
}
 8001fa8:	b00d      	add	sp, #52	; 0x34
 8001faa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001fae:	f008 b8bd 	b.w	800a12c <HAL_UART_Transmit_DMA>
 8001fb2:	bf00      	nop
 8001fb4:	200003b0 	.word	0x200003b0
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	20000418 	.word	0x20000418
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	20000404 	.word	0x20000404
 8001fc8:	2000037c 	.word	0x2000037c
 8001fcc:	06000001 	.word	0x06000001
 8001fd0:	200004e4 	.word	0x200004e4
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	20000600 	.word	0x20000600
 8001fdc:	20000720 	.word	0x20000720
 8001fe0:	20000580 	.word	0x20000580
 8001fe4:	200007a0 	.word	0x200007a0
 8001fe8:	200006d8 	.word	0x200006d8
 8001fec:	20000680 	.word	0x20000680
 8001ff0:	20000760 	.word	0x20000760
 8001ff4:	20000824 	.word	0x20000824
 8001ff8:	20000394 	.word	0x20000394
 8001ffc:	200003a2 	.word	0x200003a2
 8002000:	0800f238 	.word	0x0800f238

08002004 <main>:
{
 8002004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	2500      	movs	r5, #0
{
 800200a:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 800200c:	f005 f83e 	bl	800708c <HAL_Init>
  SystemClock_Config();
 8002010:	f7ff fb60 	bl	80016d4 <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8002014:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002016:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
 800201a:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800201e:	4cad      	ldr	r4, [pc, #692]	; (80022d4 <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	9512      	str	r5, [sp, #72]	; 0x48
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002022:	69e3      	ldr	r3, [r4, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8002024:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002026:	f043 0320 	orr.w	r3, r3, #32
 800202a:	61e3      	str	r3, [r4, #28]
 800202c:	69e3      	ldr	r3, [r4, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 800202e:	48aa      	ldr	r0, [pc, #680]	; (80022d8 <main+0x2d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	9308      	str	r3, [sp, #32]
 8002036:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	69e3      	ldr	r3, [r4, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800203a:	4691      	mov	r9, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	4313      	orrs	r3, r2
 800203e:	61e3      	str	r3, [r4, #28]
 8002040:	69e3      	ldr	r3, [r4, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8002042:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	4013      	ands	r3, r2
 8002046:	9309      	str	r3, [sp, #36]	; 0x24
 8002048:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204a:	69e3      	ldr	r3, [r4, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 800204c:	2700      	movs	r7, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	61e3      	str	r3, [r4, #28]
 8002054:	69e3      	ldr	r3, [r4, #28]
  hdac.Instance = DAC;
 8002056:	f8df 8284 	ldr.w	r8, [pc, #644]	; 80022dc <main+0x2d8>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	930a      	str	r3, [sp, #40]	; 0x28
 8002060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	69e3      	ldr	r3, [r4, #28]
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	61e3      	str	r3, [r4, #28]
 800206a:	69e3      	ldr	r3, [r4, #28]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	930b      	str	r3, [sp, #44]	; 0x2c
 8002072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8002074:	f006 f85e 	bl	8008134 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8002078:	462a      	mov	r2, r5
 800207a:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800207e:	4898      	ldr	r0, [pc, #608]	; (80022e0 <main+0x2dc>)
 8002080:	f006 f858 	bl	8008134 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8002084:	2240      	movs	r2, #64	; 0x40
 8002086:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8002088:	4893      	ldr	r0, [pc, #588]	; (80022d8 <main+0x2d4>)
 800208a:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 800208c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002090:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8002094:	f005 fecc 	bl	8007e30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8002098:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800209c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209e:	4890      	ldr	r0, [pc, #576]	; (80022e0 <main+0x2dc>)
 80020a0:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 80020a2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80020a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020aa:	f005 fec1 	bl	8007e30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 80020ae:	f647 4205 	movw	r2, #31749	; 0x7c05
 80020b2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	488b      	ldr	r0, [pc, #556]	; (80022e4 <main+0x2e0>)
 80020b8:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 80020ba:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020be:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c2:	f005 feb5 	bl	8007e30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 80020c6:	2300      	movs	r3, #0
 80020c8:	2202      	movs	r2, #2
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 80020ca:	4886      	ldr	r0, [pc, #536]	; (80022e4 <main+0x2e0>)
 80020cc:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 80020ce:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f005 feab 	bl	8007e30 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 11, 0);
 80020da:	462a      	mov	r2, r5
 80020dc:	210b      	movs	r1, #11
 80020de:	2006      	movs	r0, #6
 80020e0:	f005 fbf4 	bl	80078cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020e4:	2006      	movs	r0, #6
 80020e6:	f005 fc2f 	bl	8007948 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 9, 0);
 80020ea:	462a      	mov	r2, r5
 80020ec:	2109      	movs	r1, #9
 80020ee:	2008      	movs	r0, #8
 80020f0:	f005 fbec 	bl	80078cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80020f4:	2008      	movs	r0, #8
 80020f6:	f005 fc27 	bl	8007948 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 80020fa:	462a      	mov	r2, r5
 80020fc:	2107      	movs	r1, #7
 80020fe:	2028      	movs	r0, #40	; 0x28
 8002100:	f005 fbe4 	bl	80078cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002104:	2028      	movs	r0, #40	; 0x28
 8002106:	f005 fc1f 	bl	8007948 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800210a:	69e3      	ldr	r3, [r4, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800210c:	4649      	mov	r1, r9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002112:	61e3      	str	r3, [r4, #28]
 8002114:	69e3      	ldr	r3, [r4, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002116:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800211c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800211e:	9307      	str	r3, [sp, #28]
 8002120:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002122:	f005 fbd3 	bl	80078cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002126:	200b      	movs	r0, #11
 8002128:	f005 fc0e 	bl	8007948 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 4, 0);
 800212c:	462a      	mov	r2, r5
 800212e:	2104      	movs	r1, #4
 8002130:	200e      	movs	r0, #14
 8002132:	f005 fbcb 	bl	80078cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002136:	200e      	movs	r0, #14
 8002138:	f005 fc06 	bl	8007948 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800213c:	462a      	mov	r2, r5
 800213e:	2105      	movs	r1, #5
 8002140:	200f      	movs	r0, #15
 8002142:	f005 fbc3 	bl	80078cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002146:	200f      	movs	r0, #15
 8002148:	f005 fbfe 	bl	8007948 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 800214c:	f7ff f952 	bl	80013f4 <MX_ADC_Init>
  hdac.Instance = DAC;
 8002150:	4b65      	ldr	r3, [pc, #404]	; (80022e8 <main+0x2e4>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002152:	4640      	mov	r0, r8
  DAC_ChannelConfTypeDef sConfig = {0};
 8002154:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
  hdac.Instance = DAC;
 8002158:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800215c:	f005 fc2e 	bl	80079bc <HAL_DAC_Init>
 8002160:	b108      	cbz	r0, 8002166 <main+0x162>
 8002162:	b672      	cpsid	i
  while (1)
 8002164:	e7fe      	b.n	8002164 <main+0x160>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002166:	4602      	mov	r2, r0
 8002168:	a90e      	add	r1, sp, #56	; 0x38
 800216a:	4640      	mov	r0, r8
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800216c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002170:	f005 fc80 	bl	8007a74 <HAL_DAC_ConfigChannel>
 8002174:	b108      	cbz	r0, 800217a <main+0x176>
 8002176:	b672      	cpsid	i
  while (1)
 8002178:	e7fe      	b.n	8002178 <main+0x174>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800217a:	2210      	movs	r2, #16
 800217c:	4640      	mov	r0, r8
 800217e:	a90e      	add	r1, sp, #56	; 0x38
 8002180:	f005 fc78 	bl	8007a74 <HAL_DAC_ConfigChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	b108      	cbz	r0, 800218c <main+0x188>
 8002188:	b672      	cpsid	i
  while (1)
 800218a:	e7fe      	b.n	800218a <main+0x186>
  hi2c1.Instance = I2C1;
 800218c:	4857      	ldr	r0, [pc, #348]	; (80022ec <main+0x2e8>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800218e:	219c      	movs	r1, #156	; 0x9c
  hi2c1.Init.OwnAddress2 = 0;
 8002190:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002194:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002198:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800219a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 800219e:	4c54      	ldr	r4, [pc, #336]	; (80022f0 <main+0x2ec>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021a0:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hi2c1.Init.ClockSpeed = 100000;
 80021a4:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <main+0x2f0>)
 80021a6:	e9c0 4300 	strd	r4, r3, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021aa:	f005 ffdd 	bl	8008168 <HAL_I2C_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	b9b8      	cbnz	r0, 80021e2 <main+0x1de>
  huart1.Instance = USART1;
 80021b2:	4851      	ldr	r0, [pc, #324]	; (80022f8 <main+0x2f4>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80021b4:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021bc:	60c3      	str	r3, [r0, #12]
  huart1.Init.BaudRate = 9600;
 80021be:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80021c2:	6043      	str	r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_ODD;
 80021c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021c8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ca:	230c      	movs	r3, #12
 80021cc:	6143      	str	r3, [r0, #20]
  huart1.Instance = USART1;
 80021ce:	4b4b      	ldr	r3, [pc, #300]	; (80022fc <main+0x2f8>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80021d0:	f8c0 8008 	str.w	r8, [r0, #8]
  huart1.Instance = USART1;
 80021d4:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021d6:	f007 ff1f 	bl	800a018 <HAL_UART_Init>
 80021da:	4604      	mov	r4, r0
 80021dc:	b118      	cbz	r0, 80021e6 <main+0x1e2>
 80021de:	b672      	cpsid	i
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <main+0x1dc>
 80021e2:	b672      	cpsid	i
 80021e4:	e7fe      	b.n	80021e4 <main+0x1e0>
  MX_USB_DEVICE_Init();
 80021e6:	f009 fe41 	bl	800be6c <MX_USB_DEVICE_Init>
  htim2.Init.Prescaler = 32000;
 80021ea:	f44f 49fa 	mov.w	r9, #32000	; 0x7d00
  htim2.Instance = TIM2;
 80021ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 10;
 80021f2:	230a      	movs	r3, #10
  htim2.Instance = TIM2;
 80021f4:	4d42      	ldr	r5, [pc, #264]	; (8002300 <main+0x2fc>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f6:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021fa:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021fc:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002200:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002204:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002208:	60ac      	str	r4, [r5, #8]
  htim2.Instance = TIM2;
 800220a:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = 10;
 800220c:	60eb      	str	r3, [r5, #12]
  htim2.Init.Prescaler = 32000;
 800220e:	f8c5 9004 	str.w	r9, [r5, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002212:	f007 fd03 	bl	8009c1c <HAL_TIM_Base_Init>
 8002216:	b108      	cbz	r0, 800221c <main+0x218>
 8002218:	b672      	cpsid	i
  while (1)
 800221a:	e7fe      	b.n	800221a <main+0x216>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800221c:	4628      	mov	r0, r5
 800221e:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002220:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002224:	f007 fd8c 	bl	8009d40 <HAL_TIM_ConfigClockSource>
 8002228:	b108      	cbz	r0, 800222e <main+0x22a>
 800222a:	b672      	cpsid	i
  while (1)
 800222c:	e7fe      	b.n	800222c <main+0x228>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800222e:	4628      	mov	r0, r5
 8002230:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002232:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002236:	f007 febd 	bl	8009fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800223a:	b108      	cbz	r0, 8002240 <main+0x23c>
 800223c:	b672      	cpsid	i
  while (1)
 800223e:	e7fe      	b.n	800223e <main+0x23a>
  htim3.Init.Period = 400;
 8002240:	f44f 72c8 	mov.w	r2, #400	; 0x190
  htim3.Instance = TIM3;
 8002244:	4c2f      	ldr	r4, [pc, #188]	; (8002304 <main+0x300>)
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <main+0x304>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002248:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 800224c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002250:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002254:	e9c4 9001 	strd	r9, r0, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002258:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800225c:	4620      	mov	r0, r4
  htim3.Init.Period = 400;
 800225e:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 8002260:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002262:	f007 fcdb 	bl	8009c1c <HAL_TIM_Base_Init>
 8002266:	b108      	cbz	r0, 800226c <main+0x268>
 8002268:	b672      	cpsid	i
  while (1)
 800226a:	e7fe      	b.n	800226a <main+0x266>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800226c:	4620      	mov	r0, r4
 800226e:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002270:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002274:	f007 fd64 	bl	8009d40 <HAL_TIM_ConfigClockSource>
 8002278:	b108      	cbz	r0, 800227e <main+0x27a>
 800227a:	b672      	cpsid	i
  while (1)
 800227c:	e7fe      	b.n	800227c <main+0x278>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800227e:	2400      	movs	r4, #0
 8002280:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002282:	4820      	ldr	r0, [pc, #128]	; (8002304 <main+0x300>)
 8002284:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002286:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800228a:	f007 fe93 	bl	8009fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800228e:	b108      	cbz	r0, 8002294 <main+0x290>
 8002290:	b672      	cpsid	i
  while (1)
 8002292:	e7fe      	b.n	8002292 <main+0x28e>
  htim11.Init.Prescaler = 32000;
 8002294:	f44f 46fa 	mov.w	r6, #32000	; 0x7d00
  htim11.Init.Period = 100;
 8002298:	2264      	movs	r2, #100	; 0x64
  htim11.Instance = TIM11;
 800229a:	4f1c      	ldr	r7, [pc, #112]	; (800230c <main+0x308>)
 800229c:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <main+0x30c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80022a2:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a6:	e9c7 0004 	strd	r0, r0, [r7, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022aa:	60b8      	str	r0, [r7, #8]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80022ac:	4638      	mov	r0, r7
  htim11.Init.Period = 100;
 80022ae:	60fa      	str	r2, [r7, #12]
  htim11.Init.Prescaler = 32000;
 80022b0:	607e      	str	r6, [r7, #4]
  htim11.Instance = TIM11;
 80022b2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80022b4:	f007 fcb2 	bl	8009c1c <HAL_TIM_Base_Init>
 80022b8:	b108      	cbz	r0, 80022be <main+0x2ba>
 80022ba:	b672      	cpsid	i
  while (1)
 80022bc:	e7fe      	b.n	80022bc <main+0x2b8>
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 80022be:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 80022c4:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c6:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 80022c8:	f007 fd3a 	bl	8009d40 <HAL_TIM_ConfigClockSource>
 80022cc:	b310      	cbz	r0, 8002314 <main+0x310>
 80022ce:	b672      	cpsid	i
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <main+0x2cc>
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020000 	.word	0x40020000
 80022dc:	20000404 	.word	0x20000404
 80022e0:	40020800 	.word	0x40020800
 80022e4:	40020400 	.word	0x40020400
 80022e8:	40007400 	.word	0x40007400
 80022ec:	200004ec 	.word	0x200004ec
 80022f0:	40005400 	.word	0x40005400
 80022f4:	000186a0 	.word	0x000186a0
 80022f8:	20000680 	.word	0x20000680
 80022fc:	40013800 	.word	0x40013800
 8002300:	200005c0 	.word	0x200005c0
 8002304:	20000600 	.word	0x20000600
 8002308:	40000400 	.word	0x40000400
 800230c:	20000580 	.word	0x20000580
 8002310:	40011000 	.word	0x40011000
  htim9.Init.Period = 200;
 8002314:	22c8      	movs	r2, #200	; 0xc8
  htim9.Instance = TIM9;
 8002316:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80023bc <main+0x3b8>
 800231a:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <main+0x3bc>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231c:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002320:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002324:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002328:	e9c8 6001 	strd	r6, r0, [r8, #4]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232c:	e9c8 0004 	strd	r0, r0, [r8, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002330:	4640      	mov	r0, r8
  htim9.Init.Period = 200;
 8002332:	f8c8 200c 	str.w	r2, [r8, #12]
  htim9.Instance = TIM9;
 8002336:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800233a:	f007 fc6f 	bl	8009c1c <HAL_TIM_Base_Init>
 800233e:	b108      	cbz	r0, 8002344 <main+0x340>
 8002340:	b672      	cpsid	i
  while (1)
 8002342:	e7fe      	b.n	8002342 <main+0x33e>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002344:	4640      	mov	r0, r8
 8002346:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002348:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800234a:	f007 fcf9 	bl	8009d40 <HAL_TIM_ConfigClockSource>
 800234e:	b108      	cbz	r0, 8002354 <main+0x350>
 8002350:	b672      	cpsid	i
  while (1)
 8002352:	e7fe      	b.n	8002352 <main+0x34e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8002354:	4640      	mov	r0, r8
 8002356:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002358:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 800235c:	f007 fe2a 	bl	8009fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8002360:	b108      	cbz	r0, 8002366 <main+0x362>
 8002362:	b672      	cpsid	i
  while (1)
 8002364:	e7fe      	b.n	8002364 <main+0x360>
  htim10.Init.Period = 20;
 8002366:	2214      	movs	r2, #20
  htim10.Instance = TIM10;
 8002368:	4c16      	ldr	r4, [pc, #88]	; (80023c4 <main+0x3c0>)
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <main+0x3c4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236c:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002370:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002374:	e9c4 0004 	strd	r0, r0, [r4, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002378:	60a0      	str	r0, [r4, #8]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800237a:	4620      	mov	r0, r4
  htim10.Init.Prescaler = 32000;
 800237c:	6066      	str	r6, [r4, #4]
  htim10.Instance = TIM10;
 800237e:	6023      	str	r3, [r4, #0]
  htim10.Init.Period = 20;
 8002380:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002382:	f007 fc4b 	bl	8009c1c <HAL_TIM_Base_Init>
 8002386:	b108      	cbz	r0, 800238c <main+0x388>
 8002388:	b672      	cpsid	i
  while (1)
 800238a:	e7fe      	b.n	800238a <main+0x386>
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 800238c:	4620      	mov	r0, r4
 800238e:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002390:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002392:	f007 fcd5 	bl	8009d40 <HAL_TIM_ConfigClockSource>
 8002396:	b108      	cbz	r0, 800239c <main+0x398>
 8002398:	b672      	cpsid	i
  while (1)
 800239a:	e7fe      	b.n	800239a <main+0x396>
  volatile float error = 0;
 800239c:	2500      	movs	r5, #0
  ourInit();
 800239e:	f7ff fd5b 	bl	8001e58 <ourInit>
  volatile float error = 0;
 80023a2:	4e0a      	ldr	r6, [pc, #40]	; (80023cc <main+0x3c8>)
 80023a4:	9503      	str	r5, [sp, #12]
  volatile float derivative = 0;
 80023a6:	4c0a      	ldr	r4, [pc, #40]	; (80023d0 <main+0x3cc>)
 80023a8:	9504      	str	r5, [sp, #16]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80023aa:	f8df a028 	ldr.w	sl, [pc, #40]	; 80023d4 <main+0x3d0>
  volatile float integral = 0;
 80023ae:	9505      	str	r5, [sp, #20]
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 80023b0:	f8df 8024 	ldr.w	r8, [pc, #36]	; 80023d8 <main+0x3d4>
  volatile float error_previous = 0;
 80023b4:	9506      	str	r5, [sp, #24]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80023b6:	4f09      	ldr	r7, [pc, #36]	; (80023dc <main+0x3d8>)
  volatile float correction = 0;
 80023b8:	950c      	str	r5, [sp, #48]	; 0x30
 80023ba:	e056      	b.n	800246a <main+0x466>
 80023bc:	20000640 	.word	0x20000640
 80023c0:	40010800 	.word	0x40010800
 80023c4:	20000540 	.word	0x20000540
 80023c8:	40010c00 	.word	0x40010c00
 80023cc:	20000388 	.word	0x20000388
 80023d0:	20000820 	.word	0x20000820
 80023d4:	40400000 	.word	0x40400000
 80023d8:	457ff000 	.word	0x457ff000
 80023dc:	20000404 	.word	0x20000404
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 80023e0:	8833      	ldrh	r3, [r6, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	f240 81ac 	bls.w	8002742 <main+0x73e>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2140      	movs	r1, #64	; 0x40
 80023ee:	48a6      	ldr	r0, [pc, #664]	; (8002688 <main+0x684>)
 80023f0:	f005 fea0 	bl	8008134 <HAL_GPIO_WritePin>
	  update_ADC_watchdog(amp_set_main);
 80023f4:	4ba5      	ldr	r3, [pc, #660]	; (800268c <main+0x688>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80023f6:	49a6      	ldr	r1, [pc, #664]	; (8002690 <main+0x68c>)
	  update_ADC_watchdog(amp_set_main);
 80023f8:	6818      	ldr	r0, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80023fa:	8933      	ldrh	r3, [r6, #8]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	9300      	str	r3, [sp, #0]
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002400:	f7fe fc68 	bl	8000cd4 <__aeabi_fmul>
 8002404:	49a3      	ldr	r1, [pc, #652]	; (8002694 <main+0x690>)
 8002406:	f7fe fc65 	bl	8000cd4 <__aeabi_fmul>
 800240a:	4641      	mov	r1, r8
 800240c:	f7fe fc62 	bl	8000cd4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8002410:	4ba1      	ldr	r3, [pc, #644]	; (8002698 <main+0x694>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002412:	4681      	mov	r9, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8002414:	681a      	ldr	r2, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002416:	8810      	ldrh	r0, [r2, #0]
 8002418:	f7fe fc04 	bl	8000c24 <__aeabi_ui2f>
 800241c:	9b00      	ldr	r3, [sp, #0]
 800241e:	4683      	mov	fp, r0
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fbff 	bl	8000c24 <__aeabi_ui2f>
 8002426:	4601      	mov	r1, r0
 8002428:	4658      	mov	r0, fp
 800242a:	f7fe fd07 	bl	8000e3c <__aeabi_fdiv>
 800242e:	4651      	mov	r1, sl
 8002430:	f7fe fc50 	bl	8000cd4 <__aeabi_fmul>
 8002434:	4601      	mov	r1, r0
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002436:	4648      	mov	r0, r9
 8002438:	f7fe fd00 	bl	8000e3c <__aeabi_fdiv>
 800243c:	f7fe fe36 	bl	80010ac <__aeabi_f2uiz>
	if(amp >= 4095){
 8002440:	f640 72fe 	movw	r2, #4094	; 0xffe
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002444:	b283      	uxth	r3, r0
 8002446:	f8ad 300a 	strh.w	r3, [sp, #10]
	if(amp >= 4095){
 800244a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
	  HAL_Delay(1);
 800244e:	2001      	movs	r0, #1
	if(amp >= 4095){
 8002450:	b29b      	uxth	r3, r3
 8002452:	4293      	cmp	r3, r2
		ADC1->HTR = 4095;
 8002454:	bf8c      	ite	hi
 8002456:	f640 73ff 	movwhi	r3, #4095	; 0xfff
		ADC1->HTR = amp;
 800245a:	f8bd 300a 	ldrhls.w	r3, [sp, #10]
 800245e:	4a8f      	ldr	r2, [pc, #572]	; (800269c <main+0x698>)
 8002460:	bf98      	it	ls
 8002462:	b29b      	uxthls	r3, r3
 8002464:	6293      	str	r3, [r2, #40]	; 0x28
	  HAL_Delay(1);
 8002466:	f004 fe33 	bl	80070d0 <HAL_Delay>
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 800246a:	4b8b      	ldr	r3, [pc, #556]	; (8002698 <main+0x694>)
 800246c:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800246e:	8818      	ldrh	r0, [r3, #0]
 8002470:	f7fe fbd8 	bl	8000c24 <__aeabi_ui2f>
 8002474:	4681      	mov	r9, r0
 8002476:	8930      	ldrh	r0, [r6, #8]
 8002478:	b280      	uxth	r0, r0
 800247a:	f7fe fbd3 	bl	8000c24 <__aeabi_ui2f>
 800247e:	4601      	mov	r1, r0
 8002480:	4648      	mov	r0, r9
 8002482:	f7fe fcdb 	bl	8000e3c <__aeabi_fdiv>
 8002486:	4651      	mov	r1, sl
 8002488:	f7fe fc24 	bl	8000cd4 <__aeabi_fmul>
 800248c:	4683      	mov	fp, r0
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 800248e:	88b0      	ldrh	r0, [r6, #4]
 8002490:	8932      	ldrh	r2, [r6, #8]
 8002492:	b280      	uxth	r0, r0
 8002494:	b292      	uxth	r2, r2
 8002496:	9200      	str	r2, [sp, #0]
 8002498:	f7fe fbc4 	bl	8000c24 <__aeabi_ui2f>
 800249c:	4651      	mov	r1, sl
 800249e:	f7fe fc19 	bl	8000cd4 <__aeabi_fmul>
 80024a2:	4649      	mov	r1, r9
 80024a4:	f7fe fc16 	bl	8000cd4 <__aeabi_fmul>
 80024a8:	4603      	mov	r3, r0
 80024aa:	9a00      	ldr	r2, [sp, #0]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4610      	mov	r0, r2
 80024b0:	f7fe fbb8 	bl	8000c24 <__aeabi_ui2f>
 80024b4:	4641      	mov	r1, r8
 80024b6:	f7fe fc0d 	bl	8000cd4 <__aeabi_fmul>
 80024ba:	9b00      	ldr	r3, [sp, #0]
 80024bc:	4601      	mov	r1, r0
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fcbc 	bl	8000e3c <__aeabi_fdiv>
 80024c4:	4973      	ldr	r1, [pc, #460]	; (8002694 <main+0x690>)
 80024c6:	f7fe fcb9 	bl	8000e3c <__aeabi_fdiv>
 80024ca:	4971      	ldr	r1, [pc, #452]	; (8002690 <main+0x68c>)
 80024cc:	f7fe fcb6 	bl	8000e3c <__aeabi_fdiv>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80024d0:	4629      	mov	r1, r5
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 80024d2:	9000      	str	r0, [sp, #0]
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80024d4:	f7fe fdb0 	bl	8001038 <__aeabi_fcmpge>
 80024d8:	9b00      	ldr	r3, [sp, #0]
 80024da:	b900      	cbnz	r0, 80024de <main+0x4da>
 80024dc:	462b      	mov	r3, r5
 80024de:	4a70      	ldr	r2, [pc, #448]	; (80026a0 <main+0x69c>)
 80024e0:	6013      	str	r3, [r2, #0]
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80024e2:	8830      	ldrh	r0, [r6, #0]
 80024e4:	8932      	ldrh	r2, [r6, #8]
 80024e6:	b280      	uxth	r0, r0
 80024e8:	b292      	uxth	r2, r2
 80024ea:	9200      	str	r2, [sp, #0]
 80024ec:	f7fe fb9a 	bl	8000c24 <__aeabi_ui2f>
 80024f0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80024f4:	f7fe fbee 	bl	8000cd4 <__aeabi_fmul>
 80024f8:	4651      	mov	r1, sl
 80024fa:	f7fe fbeb 	bl	8000cd4 <__aeabi_fmul>
 80024fe:	4649      	mov	r1, r9
 8002500:	f7fe fbe8 	bl	8000cd4 <__aeabi_fmul>
 8002504:	4603      	mov	r3, r0
 8002506:	9a00      	ldr	r2, [sp, #0]
 8002508:	4610      	mov	r0, r2
 800250a:	4a65      	ldr	r2, [pc, #404]	; (80026a0 <main+0x69c>)
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	e9cd 3200 	strd	r3, r2, [sp]
 8002512:	f7fe fb87 	bl	8000c24 <__aeabi_ui2f>
 8002516:	4641      	mov	r1, r8
 8002518:	f7fe fbdc 	bl	8000cd4 <__aeabi_fmul>
 800251c:	9b00      	ldr	r3, [sp, #0]
 800251e:	4601      	mov	r1, r0
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe fc8b 	bl	8000e3c <__aeabi_fdiv>
 8002526:	4603      	mov	r3, r0
 8002528:	9a01      	ldr	r2, [sp, #4]
 800252a:	495e      	ldr	r1, [pc, #376]	; (80026a4 <main+0x6a0>)
 800252c:	4610      	mov	r0, r2
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	f7fe fbd0 	bl	8000cd4 <__aeabi_fmul>
 8002534:	9b00      	ldr	r3, [sp, #0]
 8002536:	4601      	mov	r1, r0
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe fac1 	bl	8000ac0 <__aeabi_fsub>
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 800253e:	4629      	mov	r1, r5
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8002540:	9000      	str	r0, [sp, #0]
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 8002542:	f7fe fd79 	bl	8001038 <__aeabi_fcmpge>
 8002546:	9b00      	ldr	r3, [sp, #0]
 8002548:	b900      	cbnz	r0, 800254c <main+0x548>
 800254a:	462b      	mov	r3, r5
 800254c:	4a56      	ldr	r2, [pc, #344]	; (80026a8 <main+0x6a4>)
 800254e:	6013      	str	r3, [r2, #0]
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8002550:	8870      	ldrh	r0, [r6, #2]
 8002552:	8932      	ldrh	r2, [r6, #8]
 8002554:	b280      	uxth	r0, r0
 8002556:	b292      	uxth	r2, r2
 8002558:	9200      	str	r2, [sp, #0]
 800255a:	f7fe fb63 	bl	8000c24 <__aeabi_ui2f>
 800255e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002562:	f7fe fbb7 	bl	8000cd4 <__aeabi_fmul>
 8002566:	4651      	mov	r1, sl
 8002568:	f7fe fbb4 	bl	8000cd4 <__aeabi_fmul>
 800256c:	4649      	mov	r1, r9
 800256e:	f7fe fbb1 	bl	8000cd4 <__aeabi_fmul>
 8002572:	4603      	mov	r3, r0
 8002574:	9a00      	ldr	r2, [sp, #0]
 8002576:	4610      	mov	r0, r2
 8002578:	4a49      	ldr	r2, [pc, #292]	; (80026a0 <main+0x69c>)
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	e9cd 3200 	strd	r3, r2, [sp]
 8002580:	f7fe fb50 	bl	8000c24 <__aeabi_ui2f>
 8002584:	4641      	mov	r1, r8
 8002586:	f7fe fba5 	bl	8000cd4 <__aeabi_fmul>
 800258a:	9b00      	ldr	r3, [sp, #0]
 800258c:	4601      	mov	r1, r0
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fc54 	bl	8000e3c <__aeabi_fdiv>
 8002594:	4603      	mov	r3, r0
 8002596:	9a01      	ldr	r2, [sp, #4]
 8002598:	4942      	ldr	r1, [pc, #264]	; (80026a4 <main+0x6a0>)
 800259a:	4610      	mov	r0, r2
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	f7fe fb99 	bl	8000cd4 <__aeabi_fmul>
 80025a2:	9b00      	ldr	r3, [sp, #0]
 80025a4:	4601      	mov	r1, r0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fa8a 	bl	8000ac0 <__aeabi_fsub>
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 80025ac:	4629      	mov	r1, r5
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80025ae:	9000      	str	r0, [sp, #0]
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 80025b0:	f7fe fd42 	bl	8001038 <__aeabi_fcmpge>
 80025b4:	9b00      	ldr	r3, [sp, #0]
 80025b6:	b900      	cbnz	r0, 80025ba <main+0x5b6>
 80025b8:	462b      	mov	r3, r5
 80025ba:	4a3c      	ldr	r2, [pc, #240]	; (80026ac <main+0x6a8>)
 80025bc:	6013      	str	r3, [r2, #0]
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 80025be:	88f0      	ldrh	r0, [r6, #6]
 80025c0:	8933      	ldrh	r3, [r6, #8]
 80025c2:	b280      	uxth	r0, r0
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f7fe fb2c 	bl	8000c24 <__aeabi_ui2f>
 80025cc:	4938      	ldr	r1, [pc, #224]	; (80026b0 <main+0x6ac>)
 80025ce:	f7fe fb81 	bl	8000cd4 <__aeabi_fmul>
 80025d2:	4651      	mov	r1, sl
 80025d4:	f7fe fb7e 	bl	8000cd4 <__aeabi_fmul>
 80025d8:	4649      	mov	r1, r9
 80025da:	f7fe fb7b 	bl	8000cd4 <__aeabi_fmul>
 80025de:	9b00      	ldr	r3, [sp, #0]
 80025e0:	4681      	mov	r9, r0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fb1e 	bl	8000c24 <__aeabi_ui2f>
 80025e8:	4641      	mov	r1, r8
 80025ea:	f7fe fb73 	bl	8000cd4 <__aeabi_fmul>
 80025ee:	4601      	mov	r1, r0
 80025f0:	4648      	mov	r0, r9
 80025f2:	f7fe fc23 	bl	8000e3c <__aeabi_fdiv>
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 80025f6:	4629      	mov	r1, r5
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 80025f8:	4681      	mov	r9, r0
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 80025fa:	f7fe fd1d 	bl	8001038 <__aeabi_fcmpge>
 80025fe:	b900      	cbnz	r0, 8002602 <main+0x5fe>
 8002600:	46a9      	mov	r9, r5
 8002602:	4b2c      	ldr	r3, [pc, #176]	; (80026b4 <main+0x6b0>)
		  if(lin_num > volt_set_main + margin){
 8002604:	492c      	ldr	r1, [pc, #176]	; (80026b8 <main+0x6b4>)
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 8002606:	f8c3 9000 	str.w	r9, [r3]
	  if(chstat_main == 1){
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <main+0x6b8>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b01      	cmp	r3, #1
		  if(lin_num > volt_set_main + margin){
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <main+0x6bc>)
 8002612:	6818      	ldr	r0, [r3, #0]
	  if(chstat_main == 1){
 8002614:	f000 80c6 	beq.w	80027a4 <main+0x7a0>
		  if(op_num > volt_set_main + margin){
 8002618:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <main+0x6a4>)
 800261a:	f8d3 9000 	ldr.w	r9, [r3]
 800261e:	f7fe fa51 	bl	8000ac4 <__addsf3>
 8002622:	4649      	mov	r1, r9
 8002624:	f7fe fcf4 	bl	8001010 <__aeabi_fcmplt>
 8002628:	2800      	cmp	r0, #0
 800262a:	f040 8090 	bne.w	800274e <main+0x74a>
		  else if(op_num < volt_set_main - margin){
 800262e:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <main+0x6bc>)
 8002630:	4921      	ldr	r1, [pc, #132]	; (80026b8 <main+0x6b4>)
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <main+0x6a4>)
 8002636:	f8d3 9000 	ldr.w	r9, [r3]
 800263a:	f7fe fa41 	bl	8000ac0 <__aeabi_fsub>
 800263e:	4649      	mov	r1, r9
 8002640:	f7fe fd04 	bl	800104c <__aeabi_fcmpgt>
 8002644:	b180      	cbz	r0, 8002668 <main+0x664>
			  if(v1 <= 4094){
 8002646:	f640 72fe 	movw	r2, #4094	; 0xffe
 800264a:	8823      	ldrh	r3, [r4, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	4293      	cmp	r3, r2
 8002650:	d803      	bhi.n	800265a <main+0x656>
				  v1++;
 8002652:	8823      	ldrh	r3, [r4, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	b29b      	uxth	r3, r3
 8002658:	8023      	strh	r3, [r4, #0]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 800265a:	2200      	movs	r2, #0
 800265c:	8823      	ldrh	r3, [r4, #0]
 800265e:	4638      	mov	r0, r7
 8002660:	4611      	mov	r1, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	f005 f9f0 	bl	8007a48 <HAL_DAC_SetValue>
	  volatile float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)0.5))) * (float)4095 / (float)vddcalc);
 8002668:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <main+0x6bc>)
 800266a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	f7fe fa28 	bl	8000ac4 <__addsf3>
 8002674:	4913      	ldr	r1, [pc, #76]	; (80026c4 <main+0x6c0>)
 8002676:	f7fe fb2d 	bl	8000cd4 <__aeabi_fmul>
 800267a:	4601      	mov	r1, r0
 800267c:	4812      	ldr	r0, [pc, #72]	; (80026c8 <main+0x6c4>)
 800267e:	f7fe fa1f 	bl	8000ac0 <__aeabi_fsub>
 8002682:	4641      	mov	r1, r8
 8002684:	e022      	b.n	80026cc <main+0x6c8>
 8002686:	bf00      	nop
 8002688:	40020000 	.word	0x40020000
 800268c:	20000398 	.word	0x20000398
 8002690:	3e19999a 	.word	0x3e19999a
 8002694:	41a00000 	.word	0x41a00000
 8002698:	20000010 	.word	0x20000010
 800269c:	40012400 	.word	0x40012400
 80026a0:	200003a4 	.word	0x200003a4
 80026a4:	3eb33333 	.word	0x3eb33333
 80026a8:	200006d0 	.word	0x200006d0
 80026ac:	200006c8 	.word	0x200006c8
 80026b0:	40a00000 	.word	0x40a00000
 80026b4:	20000718 	.word	0x20000718
 80026b8:	3b03126f 	.word	0x3b03126f
 80026bc:	200003a3 	.word	0x200003a3
 80026c0:	20000828 	.word	0x20000828
 80026c4:	3e75c28f 	.word	0x3e75c28f
 80026c8:	40800b78 	.word	0x40800b78
 80026cc:	f7fe fb02 	bl	8000cd4 <__aeabi_fmul>
 80026d0:	4659      	mov	r1, fp
 80026d2:	f7fe fbb3 	bl	8000e3c <__aeabi_fdiv>
 80026d6:	900e      	str	r0, [sp, #56]	; 0x38
	  if(temp <= 0){
 80026d8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80026da:	4629      	mov	r1, r5
 80026dc:	f7fe fca2 	bl	8001024 <__aeabi_fcmple>
 80026e0:	2800      	cmp	r0, #0
 80026e2:	d15b      	bne.n	800279c <main+0x798>
	  else if(temp >= 4095){
 80026e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80026e6:	4641      	mov	r1, r8
 80026e8:	f7fe fca6 	bl	8001038 <__aeabi_fcmpge>
 80026ec:	2800      	cmp	r0, #0
 80026ee:	d04e      	beq.n	800278e <main+0x78a>
		  v2 = 4095;
 80026f0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80026f4:	4a33      	ldr	r2, [pc, #204]	; (80027c4 <main+0x7c0>)
 80026f6:	8013      	strh	r3, [r2, #0]
	  if(volt_set_main > volt_set_main_old){
 80026f8:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <main+0x7c4>)
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	4b33      	ldr	r3, [pc, #204]	; (80027cc <main+0x7c8>)
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	f7fe fca4 	bl	800104c <__aeabi_fcmpgt>
 8002704:	4683      	mov	fp, r0
 8002706:	2800      	cmp	r0, #0
 8002708:	d131      	bne.n	800276e <main+0x76a>
	  else if(volt_set_main < volt_set_main_old){
 800270a:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <main+0x7c4>)
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <main+0x7c8>)
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	f7fe fc7d 	bl	8001010 <__aeabi_fcmplt>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002716:	8823      	ldrh	r3, [r4, #0]
	  else if(volt_set_main < volt_set_main_old){
 8002718:	4681      	mov	r9, r0
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 800271a:	b29b      	uxth	r3, r3
	  else if(volt_set_main < volt_set_main_old){
 800271c:	b300      	cbz	r0, 8002760 <main+0x75c>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 800271e:	465a      	mov	r2, fp
 8002720:	4659      	mov	r1, fp
 8002722:	4638      	mov	r0, r7
 8002724:	f005 f990 	bl	8007a48 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 8002728:	465a      	mov	r2, fp
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 800272a:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <main+0x7c0>)
 800272c:	2110      	movs	r1, #16
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	4638      	mov	r0, r7
 8002732:	b29b      	uxth	r3, r3
 8002734:	f005 f988 	bl	8007a48 <HAL_DAC_SetValue>
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 8002738:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <main+0x7cc>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	f43f ae4f 	beq.w	80023e0 <main+0x3dc>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8002742:	2201      	movs	r2, #1
 8002744:	2140      	movs	r1, #64	; 0x40
 8002746:	4823      	ldr	r0, [pc, #140]	; (80027d4 <main+0x7d0>)
 8002748:	f005 fcf4 	bl	8008134 <HAL_GPIO_WritePin>
 800274c:	e652      	b.n	80023f4 <main+0x3f0>
			  if(v1 >= 1){
 800274e:	8823      	ldrh	r3, [r4, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d081      	beq.n	800265a <main+0x656>
				  v1--;
 8002756:	8823      	ldrh	r3, [r4, #0]
 8002758:	3b01      	subs	r3, #1
 800275a:	b29b      	uxth	r3, r3
 800275c:	8023      	strh	r3, [r4, #0]
 800275e:	e77c      	b.n	800265a <main+0x656>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002760:	4602      	mov	r2, r0
 8002762:	4601      	mov	r1, r0
 8002764:	4638      	mov	r0, r7
 8002766:	f005 f96f 	bl	8007a48 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 800276a:	464a      	mov	r2, r9
 800276c:	e7dd      	b.n	800272a <main+0x726>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <main+0x7c0>)
 8002770:	2200      	movs	r2, #0
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	2110      	movs	r1, #16
 8002776:	4638      	mov	r0, r7
 8002778:	b29b      	uxth	r3, r3
 800277a:	f005 f965 	bl	8007a48 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 800277e:	2200      	movs	r2, #0
 8002780:	8823      	ldrh	r3, [r4, #0]
 8002782:	4638      	mov	r0, r7
 8002784:	4611      	mov	r1, r2
 8002786:	b29b      	uxth	r3, r3
 8002788:	f005 f95e 	bl	8007a48 <HAL_DAC_SetValue>
 800278c:	e7d4      	b.n	8002738 <main+0x734>
		  v2 = (uint16_t)temp;
 800278e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002790:	f7fe fc8c 	bl	80010ac <__aeabi_f2uiz>
 8002794:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <main+0x7c0>)
 8002796:	b283      	uxth	r3, r0
 8002798:	8013      	strh	r3, [r2, #0]
 800279a:	e7ad      	b.n	80026f8 <main+0x6f4>
		  v2 = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <main+0x7c0>)
 80027a0:	8013      	strh	r3, [r2, #0]
 80027a2:	e7a9      	b.n	80026f8 <main+0x6f4>
		  if(lin_num > volt_set_main + margin){
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <main+0x7d4>)
 80027a6:	f8d3 9000 	ldr.w	r9, [r3]
 80027aa:	f7fe f98b 	bl	8000ac4 <__addsf3>
 80027ae:	4649      	mov	r1, r9
 80027b0:	f7fe fc2e 	bl	8001010 <__aeabi_fcmplt>
 80027b4:	2800      	cmp	r0, #0
 80027b6:	d1ca      	bne.n	800274e <main+0x74a>
		  else if(lin_num < volt_set_main - margin){
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <main+0x7c4>)
 80027ba:	4908      	ldr	r1, [pc, #32]	; (80027dc <main+0x7d8>)
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <main+0x7d4>)
 80027c0:	e739      	b.n	8002636 <main+0x632>
 80027c2:	bf00      	nop
 80027c4:	20000822 	.word	0x20000822
 80027c8:	20000828 	.word	0x20000828
 80027cc:	2000082c 	.word	0x2000082c
 80027d0:	200003a3 	.word	0x200003a3
 80027d4:	40020000 	.word	0x40020000
 80027d8:	200006c8 	.word	0x200006c8
 80027dc:	3b03126f 	.word	0x3b03126f

080027e0 <lcd_update_voltage>:
void lcd_update_voltage(uint8_t channel, float num){
 80027e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e2:	4605      	mov	r5, r0
 80027e4:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.2f", num);
 80027e6:	4608      	mov	r0, r1
 80027e8:	f7fd fe36 	bl	8000458 <__aeabi_f2d>
 80027ec:	4606      	mov	r6, r0
 80027ee:	460f      	mov	r7, r1
 80027f0:	4a9a      	ldr	r2, [pc, #616]	; (8002a5c <lcd_update_voltage+0x27c>)
 80027f2:	2106      	movs	r1, #6
 80027f4:	e9cd 6700 	strd	r6, r7, [sp]
 80027f8:	a804      	add	r0, sp, #16
 80027fa:	f00a fa67 	bl	800cccc <sniprintf>
	if(channel == 1){
 80027fe:	2d01      	cmp	r5, #1
 8002800:	d009      	beq.n	8002816 <lcd_update_voltage+0x36>
	else if(channel == 2){
 8002802:	2d02      	cmp	r5, #2
 8002804:	f000 80cb 	beq.w	800299e <lcd_update_voltage+0x1be>
	else if(channel == 3){
 8002808:	2d03      	cmp	r5, #3
 800280a:	f000 8135 	beq.w	8002a78 <lcd_update_voltage+0x298>
	else if(channel == 4){
 800280e:	2d04      	cmp	r5, #4
 8002810:	d068      	beq.n	80028e4 <lcd_update_voltage+0x104>
}
 8002812:	b007      	add	sp, #28
 8002814:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002816:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002818:	4a91      	ldr	r2, [pc, #580]	; (8002a60 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800281a:	4892      	ldr	r0, [pc, #584]	; (8002a64 <lcd_update_voltage+0x284>)
 800281c:	ac03      	add	r4, sp, #12
 800281e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002820:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002822:	214e      	movs	r1, #78	; 0x4e
 8002824:	4622      	mov	r2, r4
 8002826:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002828:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800282a:	f005 fd65 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800282e:	2320      	movs	r3, #32
 8002830:	4d8d      	ldr	r5, [pc, #564]	; (8002a68 <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002832:	011a      	lsls	r2, r3, #4
 8002834:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800283a:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800283e:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002842:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002846:	f043 0309 	orr.w	r3, r3, #9
 800284a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800284e:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002852:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002854:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002858:	4622      	mov	r2, r4
 800285a:	214e      	movs	r1, #78	; 0x4e
 800285c:	4638      	mov	r0, r7
 800285e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002860:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002864:	f005 fd48 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002868:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e0      	bne.n	8002832 <lcd_update_voltage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002870:	4a7b      	ldr	r2, [pc, #492]	; (8002a60 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002872:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002874:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002876:	214e      	movs	r1, #78	; 0x4e
 8002878:	4622      	mov	r2, r4
 800287a:	487a      	ldr	r0, [pc, #488]	; (8002a64 <lcd_update_voltage+0x284>)
 800287c:	9600      	str	r6, [sp, #0]
 800287e:	f005 fd3b 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002882:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002886:	b30b      	cbz	r3, 80028cc <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002888:	2764      	movs	r7, #100	; 0x64
 800288a:	4e76      	ldr	r6, [pc, #472]	; (8002a64 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 800288c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800288e:	011a      	lsls	r2, r3, #4
 8002890:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002896:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800289a:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800289e:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80028a2:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028a6:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80028a8:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80028ac:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028b0:	4622      	mov	r2, r4
 80028b2:	214e      	movs	r1, #78	; 0x4e
 80028b4:	4630      	mov	r0, r6
 80028b6:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028b8:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80028bc:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028c0:	f005 fd1a 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80028c4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e0      	bne.n	800288e <lcd_update_voltage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028cc:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028ce:	4867      	ldr	r0, [pc, #412]	; (8002a6c <lcd_update_voltage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028d0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028d2:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028d4:	4622      	mov	r2, r4
 80028d6:	214e      	movs	r1, #78	; 0x4e
 80028d8:	9500      	str	r5, [sp, #0]
 80028da:	4862      	ldr	r0, [pc, #392]	; (8002a64 <lcd_update_voltage+0x284>)
 80028dc:	f005 fd0c 	bl	80082f8 <HAL_I2C_Master_Transmit>
}
 80028e0:	b007      	add	sp, #28
 80028e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028e4:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80028e6:	4a62      	ldr	r2, [pc, #392]	; (8002a70 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028e8:	485e      	ldr	r0, [pc, #376]	; (8002a64 <lcd_update_voltage+0x284>)
 80028ea:	ac03      	add	r4, sp, #12
 80028ec:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80028ee:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028f0:	214e      	movs	r1, #78	; 0x4e
 80028f2:	4622      	mov	r2, r4
 80028f4:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028f6:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028f8:	f005 fcfe 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80028fc:	2320      	movs	r3, #32
 80028fe:	4d5a      	ldr	r5, [pc, #360]	; (8002a68 <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002900:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002906:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800290a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800290c:	f043 0309 	orr.w	r3, r3, #9
 8002910:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002914:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002918:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800291c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002920:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002924:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002928:	2304      	movs	r3, #4
 800292a:	4622      	mov	r2, r4
 800292c:	214e      	movs	r1, #78	; 0x4e
 800292e:	4638      	mov	r0, r7
 8002930:	9600      	str	r6, [sp, #0]
 8002932:	f005 fce1 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002936:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1e0      	bne.n	8002900 <lcd_update_voltage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800293e:	4a4c      	ldr	r2, [pc, #304]	; (8002a70 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002940:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002942:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002944:	214e      	movs	r1, #78	; 0x4e
 8002946:	4622      	mov	r2, r4
 8002948:	4846      	ldr	r0, [pc, #280]	; (8002a64 <lcd_update_voltage+0x284>)
 800294a:	9600      	str	r6, [sp, #0]
 800294c:	f005 fcd4 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002950:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0b9      	beq.n	80028cc <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002958:	2764      	movs	r7, #100	; 0x64
 800295a:	4e42      	ldr	r6, [pc, #264]	; (8002a64 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 800295c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800295e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002964:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002968:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800296a:	f043 0309 	orr.w	r3, r3, #9
 800296e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002972:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002976:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800297a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800297e:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002982:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002986:	2304      	movs	r3, #4
 8002988:	4622      	mov	r2, r4
 800298a:	214e      	movs	r1, #78	; 0x4e
 800298c:	4630      	mov	r0, r6
 800298e:	9700      	str	r7, [sp, #0]
 8002990:	f005 fcb2 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002994:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e0      	bne.n	800295e <lcd_update_voltage+0x17e>
 800299c:	e796      	b.n	80028cc <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800299e:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029a0:	4a34      	ldr	r2, [pc, #208]	; (8002a74 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029a2:	4830      	ldr	r0, [pc, #192]	; (8002a64 <lcd_update_voltage+0x284>)
 80029a4:	ac03      	add	r4, sp, #12
 80029a6:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029a8:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029aa:	214e      	movs	r1, #78	; 0x4e
 80029ac:	4622      	mov	r2, r4
 80029ae:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029b0:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029b2:	f005 fca1 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80029b6:	2320      	movs	r3, #32
 80029b8:	4d2b      	ldr	r5, [pc, #172]	; (8002a68 <lcd_update_voltage+0x288>)
	data_u = (data&0xf0);
 80029ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80029c2:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80029c6:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80029ca:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80029ce:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80029d2:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80029d6:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80029da:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029de:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80029e0:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029e4:	214e      	movs	r1, #78	; 0x4e
 80029e6:	4622      	mov	r2, r4
 80029e8:	4638      	mov	r0, r7
 80029ea:	9600      	str	r6, [sp, #0]
 80029ec:	f005 fc84 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80029f0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1e0      	bne.n	80029ba <lcd_update_voltage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029f8:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029fa:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029fc:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029fe:	214e      	movs	r1, #78	; 0x4e
 8002a00:	4622      	mov	r2, r4
 8002a02:	4818      	ldr	r0, [pc, #96]	; (8002a64 <lcd_update_voltage+0x284>)
 8002a04:	9600      	str	r6, [sp, #0]
 8002a06:	f005 fc77 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a0a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f43f af5c 	beq.w	80028cc <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a14:	2764      	movs	r7, #100	; 0x64
 8002a16:	4e13      	ldr	r6, [pc, #76]	; (8002a64 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002a18:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002a1a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002a20:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a22:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a26:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a2a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a2e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a32:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a36:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a3a:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a3e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a40:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a44:	4622      	mov	r2, r4
 8002a46:	214e      	movs	r1, #78	; 0x4e
 8002a48:	4630      	mov	r0, r6
 8002a4a:	9700      	str	r7, [sp, #0]
 8002a4c:	f005 fc54 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a50:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e0      	bne.n	8002a1a <lcd_update_voltage+0x23a>
 8002a58:	e738      	b.n	80028cc <lcd_update_voltage+0xec>
 8002a5a:	bf00      	nop
 8002a5c:	0800f25c 	.word	0x0800f25c
 8002a60:	383c888c 	.word	0x383c888c
 8002a64:	200004ec 	.word	0x200004ec
 8002a68:	0800f254 	.word	0x0800f254
 8002a6c:	696d595d 	.word	0x696d595d
 8002a70:	282ca8ac 	.word	0x282ca8ac
 8002a74:	e8ec888c 	.word	0xe8ec888c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a78:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a7a:	4a2e      	ldr	r2, [pc, #184]	; (8002b34 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a7c:	482e      	ldr	r0, [pc, #184]	; (8002b38 <lcd_update_voltage+0x358>)
 8002a7e:	ac03      	add	r4, sp, #12
 8002a80:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a82:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a84:	214e      	movs	r1, #78	; 0x4e
 8002a86:	4622      	mov	r2, r4
 8002a88:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a8a:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a8c:	f005 fc34 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a90:	2320      	movs	r3, #32
 8002a92:	4d2a      	ldr	r5, [pc, #168]	; (8002b3c <lcd_update_voltage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8002a94:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a9a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002a9e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002aa0:	f043 0309 	orr.w	r3, r3, #9
 8002aa4:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002aa8:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002aac:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ab0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ab4:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ab8:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002abc:	2304      	movs	r3, #4
 8002abe:	4622      	mov	r2, r4
 8002ac0:	214e      	movs	r1, #78	; 0x4e
 8002ac2:	4638      	mov	r0, r7
 8002ac4:	9600      	str	r6, [sp, #0]
 8002ac6:	f005 fc17 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002aca:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1e0      	bne.n	8002a94 <lcd_update_voltage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ad2:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ad4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ad6:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ad8:	214e      	movs	r1, #78	; 0x4e
 8002ada:	4622      	mov	r2, r4
 8002adc:	4816      	ldr	r0, [pc, #88]	; (8002b38 <lcd_update_voltage+0x358>)
 8002ade:	9600      	str	r6, [sp, #0]
 8002ae0:	f005 fc0a 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002ae4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f43f aeef 	beq.w	80028cc <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002aee:	2764      	movs	r7, #100	; 0x64
 8002af0:	4e11      	ldr	r6, [pc, #68]	; (8002b38 <lcd_update_voltage+0x358>)
	while (*str) lcd_send_data (*str++);
 8002af2:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 8002af4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002afc:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002b00:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b04:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002b08:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b0c:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b10:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b14:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b18:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b1a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b1e:	214e      	movs	r1, #78	; 0x4e
 8002b20:	4622      	mov	r2, r4
 8002b22:	4630      	mov	r0, r6
 8002b24:	9700      	str	r7, [sp, #0]
 8002b26:	f005 fbe7 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b2a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1e0      	bne.n	8002af4 <lcd_update_voltage+0x314>
 8002b32:	e6cb      	b.n	80028cc <lcd_update_voltage+0xec>
 8002b34:	787c989c 	.word	0x787c989c
 8002b38:	200004ec 	.word	0x200004ec
 8002b3c:	0800f254 	.word	0x0800f254

08002b40 <lcd_update_amperage>:
void lcd_update_amperage(uint8_t channel, float num){
 8002b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b42:	4605      	mov	r5, r0
 8002b44:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.3f", num);
 8002b46:	4608      	mov	r0, r1
 8002b48:	f7fd fc86 	bl	8000458 <__aeabi_f2d>
 8002b4c:	4606      	mov	r6, r0
 8002b4e:	460f      	mov	r7, r1
 8002b50:	4a9a      	ldr	r2, [pc, #616]	; (8002dbc <lcd_update_amperage+0x27c>)
 8002b52:	2106      	movs	r1, #6
 8002b54:	e9cd 6700 	strd	r6, r7, [sp]
 8002b58:	a804      	add	r0, sp, #16
 8002b5a:	f00a f8b7 	bl	800cccc <sniprintf>
	if(channel == 1){
 8002b5e:	2d01      	cmp	r5, #1
 8002b60:	d009      	beq.n	8002b76 <lcd_update_amperage+0x36>
	else if(channel == 2){
 8002b62:	2d02      	cmp	r5, #2
 8002b64:	f000 80cb 	beq.w	8002cfe <lcd_update_amperage+0x1be>
	else if(channel == 3){
 8002b68:	2d03      	cmp	r5, #3
 8002b6a:	f000 8135 	beq.w	8002dd8 <lcd_update_amperage+0x298>
	else if(channel == 4){
 8002b6e:	2d04      	cmp	r5, #4
 8002b70:	d068      	beq.n	8002c44 <lcd_update_amperage+0x104>
}
 8002b72:	b007      	add	sp, #28
 8002b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b76:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b78:	4a91      	ldr	r2, [pc, #580]	; (8002dc0 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b7a:	4892      	ldr	r0, [pc, #584]	; (8002dc4 <lcd_update_amperage+0x284>)
 8002b7c:	ac03      	add	r4, sp, #12
 8002b7e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b80:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b82:	214e      	movs	r1, #78	; 0x4e
 8002b84:	4622      	mov	r2, r4
 8002b86:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b88:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b8a:	f005 fbb5 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b8e:	2320      	movs	r3, #32
 8002b90:	4d8d      	ldr	r5, [pc, #564]	; (8002dc8 <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002b92:	011a      	lsls	r2, r3, #4
 8002b94:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b9a:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b9e:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ba2:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ba6:	f043 0309 	orr.w	r3, r3, #9
 8002baa:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002bae:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bb2:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002bb4:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bb8:	4622      	mov	r2, r4
 8002bba:	214e      	movs	r1, #78	; 0x4e
 8002bbc:	4638      	mov	r0, r7
 8002bbe:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002bc0:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bc4:	f005 fb98 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002bc8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e0      	bne.n	8002b92 <lcd_update_amperage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002bd0:	4a7b      	ldr	r2, [pc, #492]	; (8002dc0 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bd2:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002bd4:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bd6:	214e      	movs	r1, #78	; 0x4e
 8002bd8:	4622      	mov	r2, r4
 8002bda:	487a      	ldr	r0, [pc, #488]	; (8002dc4 <lcd_update_amperage+0x284>)
 8002bdc:	9600      	str	r6, [sp, #0]
 8002bde:	f005 fb8b 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002be2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002be6:	b30b      	cbz	r3, 8002c2c <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002be8:	2764      	movs	r7, #100	; 0x64
 8002bea:	4e76      	ldr	r6, [pc, #472]	; (8002dc4 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002bec:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002bee:	011a      	lsls	r2, r3, #4
 8002bf0:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002bf6:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002bfa:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002bfe:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c02:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c06:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c08:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c0c:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c10:	4622      	mov	r2, r4
 8002c12:	214e      	movs	r1, #78	; 0x4e
 8002c14:	4630      	mov	r0, r6
 8002c16:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c18:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c1c:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c20:	f005 fb6a 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c24:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e0      	bne.n	8002bee <lcd_update_amperage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c2c:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c2e:	4867      	ldr	r0, [pc, #412]	; (8002dcc <lcd_update_amperage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c30:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c32:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c34:	4622      	mov	r2, r4
 8002c36:	214e      	movs	r1, #78	; 0x4e
 8002c38:	9500      	str	r5, [sp, #0]
 8002c3a:	4862      	ldr	r0, [pc, #392]	; (8002dc4 <lcd_update_amperage+0x284>)
 8002c3c:	f005 fb5c 	bl	80082f8 <HAL_I2C_Master_Transmit>
}
 8002c40:	b007      	add	sp, #28
 8002c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c44:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c46:	4a62      	ldr	r2, [pc, #392]	; (8002dd0 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c48:	485e      	ldr	r0, [pc, #376]	; (8002dc4 <lcd_update_amperage+0x284>)
 8002c4a:	ac03      	add	r4, sp, #12
 8002c4c:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c4e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c50:	214e      	movs	r1, #78	; 0x4e
 8002c52:	4622      	mov	r2, r4
 8002c54:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c56:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c58:	f005 fb4e 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	4d5a      	ldr	r5, [pc, #360]	; (8002dc8 <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002c60:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c66:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002c6a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c6c:	f043 0309 	orr.w	r3, r3, #9
 8002c70:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c74:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c78:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c7c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c80:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c84:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c88:	2304      	movs	r3, #4
 8002c8a:	4622      	mov	r2, r4
 8002c8c:	214e      	movs	r1, #78	; 0x4e
 8002c8e:	4638      	mov	r0, r7
 8002c90:	9600      	str	r6, [sp, #0]
 8002c92:	f005 fb31 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c96:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e0      	bne.n	8002c60 <lcd_update_amperage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c9e:	4a4c      	ldr	r2, [pc, #304]	; (8002dd0 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ca0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ca2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ca4:	214e      	movs	r1, #78	; 0x4e
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	4846      	ldr	r0, [pc, #280]	; (8002dc4 <lcd_update_amperage+0x284>)
 8002caa:	9600      	str	r6, [sp, #0]
 8002cac:	f005 fb24 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002cb0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0b9      	beq.n	8002c2c <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cb8:	2764      	movs	r7, #100	; 0x64
 8002cba:	4e42      	ldr	r6, [pc, #264]	; (8002dc4 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002cbc:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002cbe:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cc4:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002cc8:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002cca:	f043 0309 	orr.w	r3, r3, #9
 8002cce:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002cd2:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002cd6:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cda:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002cde:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ce2:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	4622      	mov	r2, r4
 8002cea:	214e      	movs	r1, #78	; 0x4e
 8002cec:	4630      	mov	r0, r6
 8002cee:	9700      	str	r7, [sp, #0]
 8002cf0:	f005 fb02 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002cf4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e0      	bne.n	8002cbe <lcd_update_amperage+0x17e>
 8002cfc:	e796      	b.n	8002c2c <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cfe:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d00:	4a34      	ldr	r2, [pc, #208]	; (8002dd4 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d02:	4830      	ldr	r0, [pc, #192]	; (8002dc4 <lcd_update_amperage+0x284>)
 8002d04:	ac03      	add	r4, sp, #12
 8002d06:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d08:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d0a:	214e      	movs	r1, #78	; 0x4e
 8002d0c:	4622      	mov	r2, r4
 8002d0e:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d10:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d12:	f005 faf1 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d16:	2320      	movs	r3, #32
 8002d18:	4d2b      	ldr	r5, [pc, #172]	; (8002dc8 <lcd_update_amperage+0x288>)
	data_u = (data&0xf0);
 8002d1a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d22:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d26:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d2a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d2e:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d32:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d36:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d3a:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d3e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d40:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d44:	214e      	movs	r1, #78	; 0x4e
 8002d46:	4622      	mov	r2, r4
 8002d48:	4638      	mov	r0, r7
 8002d4a:	9600      	str	r6, [sp, #0]
 8002d4c:	f005 fad4 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d50:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e0      	bne.n	8002d1a <lcd_update_amperage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d58:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d5a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d5c:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d5e:	214e      	movs	r1, #78	; 0x4e
 8002d60:	4622      	mov	r2, r4
 8002d62:	4818      	ldr	r0, [pc, #96]	; (8002dc4 <lcd_update_amperage+0x284>)
 8002d64:	9600      	str	r6, [sp, #0]
 8002d66:	f005 fac7 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d6a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f43f af5c 	beq.w	8002c2c <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d74:	2764      	movs	r7, #100	; 0x64
 8002d76:	4e13      	ldr	r6, [pc, #76]	; (8002dc4 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002d78:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002d7a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002d80:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d82:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d86:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d8a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d8e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d92:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d96:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d9a:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d9e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002da0:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002da4:	4622      	mov	r2, r4
 8002da6:	214e      	movs	r1, #78	; 0x4e
 8002da8:	4630      	mov	r0, r6
 8002daa:	9700      	str	r7, [sp, #0]
 8002dac:	f005 faa4 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002db0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e0      	bne.n	8002d7a <lcd_update_amperage+0x23a>
 8002db8:	e738      	b.n	8002c2c <lcd_update_amperage+0xec>
 8002dba:	bf00      	nop
 8002dbc:	0800f264 	.word	0x0800f264
 8002dc0:	383cc8cc 	.word	0x383cc8cc
 8002dc4:	200004ec 	.word	0x200004ec
 8002dc8:	0800f254 	.word	0x0800f254
 8002dcc:	191d494d 	.word	0x191d494d
 8002dd0:	282ce8ec 	.word	0x282ce8ec
 8002dd4:	e8ecc8cc 	.word	0xe8ecc8cc
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dd8:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002dda:	4a2e      	ldr	r2, [pc, #184]	; (8002e94 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ddc:	482e      	ldr	r0, [pc, #184]	; (8002e98 <lcd_update_amperage+0x358>)
 8002dde:	ac03      	add	r4, sp, #12
 8002de0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002de2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002de4:	214e      	movs	r1, #78	; 0x4e
 8002de6:	4622      	mov	r2, r4
 8002de8:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dea:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dec:	f005 fa84 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002df0:	2320      	movs	r3, #32
 8002df2:	4d2a      	ldr	r5, [pc, #168]	; (8002e9c <lcd_update_amperage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8002df4:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dfa:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002dfe:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e00:	f043 0309 	orr.w	r3, r3, #9
 8002e04:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e08:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e0c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e10:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e14:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e18:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	4622      	mov	r2, r4
 8002e20:	214e      	movs	r1, #78	; 0x4e
 8002e22:	4638      	mov	r0, r7
 8002e24:	9600      	str	r6, [sp, #0]
 8002e26:	f005 fa67 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e2a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e0      	bne.n	8002df4 <lcd_update_amperage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e32:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e34:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e36:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e38:	214e      	movs	r1, #78	; 0x4e
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	4816      	ldr	r0, [pc, #88]	; (8002e98 <lcd_update_amperage+0x358>)
 8002e3e:	9600      	str	r6, [sp, #0]
 8002e40:	f005 fa5a 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e44:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f43f aeef 	beq.w	8002c2c <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e4e:	2764      	movs	r7, #100	; 0x64
 8002e50:	4e11      	ldr	r6, [pc, #68]	; (8002e98 <lcd_update_amperage+0x358>)
	while (*str) lcd_send_data (*str++);
 8002e52:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 8002e54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e5c:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e60:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e64:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e68:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e6c:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e70:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e74:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e78:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e7a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e7e:	214e      	movs	r1, #78	; 0x4e
 8002e80:	4622      	mov	r2, r4
 8002e82:	4630      	mov	r0, r6
 8002e84:	9700      	str	r7, [sp, #0]
 8002e86:	f005 fa37 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e8a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e0      	bne.n	8002e54 <lcd_update_amperage+0x314>
 8002e92:	e6cb      	b.n	8002c2c <lcd_update_amperage+0xec>
 8002e94:	787cd8dc 	.word	0x787cd8dc
 8002e98:	200004ec 	.word	0x200004ec
 8002e9c:	0800f254 	.word	0x0800f254

08002ea0 <lcd_psu_update>:
void lcd_psu_update(void){
 8002ea0:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ea2:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ea4:	49a7      	ldr	r1, [pc, #668]	; (8003144 <lcd_psu_update+0x2a4>)
void lcd_psu_update(void){
 8002ea6:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ea8:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002eaa:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eac:	48a6      	ldr	r0, [pc, #664]	; (8003148 <lcd_psu_update+0x2a8>)
 8002eae:	214e      	movs	r1, #78	; 0x4e
 8002eb0:	aa03      	add	r2, sp, #12
 8002eb2:	9400      	str	r4, [sp, #0]
 8002eb4:	f005 fa20 	bl	80082f8 <HAL_I2C_Master_Transmit>
	if(kpenum == WAIT){
 8002eb8:	4ba4      	ldr	r3, [pc, #656]	; (800314c <lcd_psu_update+0x2ac>)
 8002eba:	781d      	ldrb	r5, [r3, #0]
 8002ebc:	b165      	cbz	r5, 8002ed8 <lcd_psu_update+0x38>
	else if(kpenum == V1){
 8002ebe:	2d01      	cmp	r5, #1
 8002ec0:	f000 8162 	beq.w	8003188 <lcd_psu_update+0x2e8>
	else if(kpenum == V2){
 8002ec4:	2d03      	cmp	r5, #3
 8002ec6:	d032      	beq.n	8002f2e <lcd_psu_update+0x8e>
	else if(kpenum == A1){
 8002ec8:	2d02      	cmp	r5, #2
 8002eca:	f000 82a1 	beq.w	8003410 <lcd_psu_update+0x570>
	else if(kpenum == A2){
 8002ece:	2d04      	cmp	r5, #4
 8002ed0:	f000 831e 	beq.w	8003510 <lcd_psu_update+0x670>
}
 8002ed4:	b004      	add	sp, #16
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
		lcd_update_voltage(1,volt_set_aux);
 8002ed8:	4b9d      	ldr	r3, [pc, #628]	; (8003150 <lcd_psu_update+0x2b0>)
 8002eda:	2001      	movs	r0, #1
 8002edc:	6819      	ldr	r1, [r3, #0]
 8002ede:	f7ff fc7f 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8002ee2:	4b9c      	ldr	r3, [pc, #624]	; (8003154 <lcd_psu_update+0x2b4>)
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	6819      	ldr	r1, [r3, #0]
 8002ee8:	f7ff fe2a 	bl	8002b40 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8002eec:	4b9a      	ldr	r3, [pc, #616]	; (8003158 <lcd_psu_update+0x2b8>)
 8002eee:	2002      	movs	r0, #2
 8002ef0:	6819      	ldr	r1, [r3, #0]
 8002ef2:	f7ff fc75 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8002ef6:	4b99      	ldr	r3, [pc, #612]	; (800315c <lcd_psu_update+0x2bc>)
 8002ef8:	2002      	movs	r0, #2
 8002efa:	6819      	ldr	r1, [r3, #0]
 8002efc:	f7ff fe20 	bl	8002b40 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8002f00:	4b97      	ldr	r3, [pc, #604]	; (8003160 <lcd_psu_update+0x2c0>)
 8002f02:	2003      	movs	r0, #3
 8002f04:	6819      	ldr	r1, [r3, #0]
 8002f06:	f7ff fc6b 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8002f0a:	4b96      	ldr	r3, [pc, #600]	; (8003164 <lcd_psu_update+0x2c4>)
 8002f0c:	2003      	movs	r0, #3
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	f7ff fe16 	bl	8002b40 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8002f14:	4b94      	ldr	r3, [pc, #592]	; (8003168 <lcd_psu_update+0x2c8>)
 8002f16:	2004      	movs	r0, #4
 8002f18:	6819      	ldr	r1, [r3, #0]
 8002f1a:	f7ff fc61 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002f1e:	2004      	movs	r0, #4
 8002f20:	4b92      	ldr	r3, [pc, #584]	; (800316c <lcd_psu_update+0x2cc>)
 8002f22:	6819      	ldr	r1, [r3, #0]
}
 8002f24:	b004      	add	sp, #16
 8002f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lcd_update_amperage(4,cur_num);
 8002f2a:	f7ff be09 	b.w	8002b40 <lcd_update_amperage>
		lcd_update_voltage(1,volt_set_aux);
 8002f2e:	4b88      	ldr	r3, [pc, #544]	; (8003150 <lcd_psu_update+0x2b0>)
 8002f30:	2001      	movs	r0, #1
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	f7ff fc54 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8002f38:	4b86      	ldr	r3, [pc, #536]	; (8003154 <lcd_psu_update+0x2b4>)
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	6819      	ldr	r1, [r3, #0]
 8002f3e:	f7ff fdff 	bl	8002b40 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8002f42:	4b85      	ldr	r3, [pc, #532]	; (8003158 <lcd_psu_update+0x2b8>)
 8002f44:	2002      	movs	r0, #2
 8002f46:	6819      	ldr	r1, [r3, #0]
 8002f48:	f7ff fc4a 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8002f4c:	4b83      	ldr	r3, [pc, #524]	; (800315c <lcd_psu_update+0x2bc>)
 8002f4e:	2002      	movs	r0, #2
 8002f50:	6819      	ldr	r1, [r3, #0]
 8002f52:	f7ff fdf5 	bl	8002b40 <lcd_update_amperage>
		lcd_update_amperage(3,amp_set_main);
 8002f56:	4b83      	ldr	r3, [pc, #524]	; (8003164 <lcd_psu_update+0x2c4>)
 8002f58:	4628      	mov	r0, r5
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	f7ff fdf0 	bl	8002b40 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8002f60:	4b81      	ldr	r3, [pc, #516]	; (8003168 <lcd_psu_update+0x2c8>)
 8002f62:	2004      	movs	r0, #4
 8002f64:	6819      	ldr	r1, [r3, #0]
 8002f66:	f7ff fc3b 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002f6a:	4b80      	ldr	r3, [pc, #512]	; (800316c <lcd_psu_update+0x2cc>)
 8002f6c:	2004      	movs	r0, #4
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	f7ff fde6 	bl	8002b40 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f74:	497e      	ldr	r1, [pc, #504]	; (8003170 <lcd_psu_update+0x2d0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f76:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f78:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f7a:	4873      	ldr	r0, [pc, #460]	; (8003148 <lcd_psu_update+0x2a8>)
 8002f7c:	214e      	movs	r1, #78	; 0x4e
 8002f7e:	aa03      	add	r2, sp, #12
 8002f80:	9400      	str	r4, [sp, #0]
 8002f82:	f005 f9b9 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002f86:	2320      	movs	r3, #32
 8002f88:	4d7a      	ldr	r5, [pc, #488]	; (8003174 <lcd_psu_update+0x2d4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f8a:	4e6f      	ldr	r6, [pc, #444]	; (8003148 <lcd_psu_update+0x2a8>)
	data_l = ((data<<4)&0xf0);
 8002f8c:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f92:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002f96:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f98:	f043 0309 	orr.w	r3, r3, #9
 8002f9c:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fa0:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fa4:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fa8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fac:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fb0:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	214e      	movs	r1, #78	; 0x4e
 8002fb8:	4630      	mov	r0, r6
 8002fba:	9400      	str	r4, [sp, #0]
 8002fbc:	aa03      	add	r2, sp, #12
 8002fbe:	f005 f99b 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002fc2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e0      	bne.n	8002f8c <lcd_psu_update+0xec>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fca:	4969      	ldr	r1, [pc, #420]	; (8003170 <lcd_psu_update+0x2d0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fcc:	2304      	movs	r3, #4
 8002fce:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fd0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fd2:	485d      	ldr	r0, [pc, #372]	; (8003148 <lcd_psu_update+0x2a8>)
 8002fd4:	214e      	movs	r1, #78	; 0x4e
 8002fd6:	9400      	str	r4, [sp, #0]
 8002fd8:	f005 f98e 	bl	80082f8 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fdc:	4966      	ldr	r1, [pc, #408]	; (8003178 <lcd_psu_update+0x2d8>)
		if(keypadarr[0] != 'z'){
 8002fde:	4d67      	ldr	r5, [pc, #412]	; (800317c <lcd_psu_update+0x2dc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fe0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fe2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fe4:	4858      	ldr	r0, [pc, #352]	; (8003148 <lcd_psu_update+0x2a8>)
 8002fe6:	214e      	movs	r1, #78	; 0x4e
 8002fe8:	aa03      	add	r2, sp, #12
 8002fea:	9400      	str	r4, [sp, #0]
 8002fec:	f005 f984 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8002ff0:	782b      	ldrb	r3, [r5, #0]
 8002ff2:	2b7a      	cmp	r3, #122	; 0x7a
 8002ff4:	d01b      	beq.n	800302e <lcd_psu_update+0x18e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ff6:	9400      	str	r4, [sp, #0]
			lcd_send_data(keypadarr[0]);
 8002ff8:	782b      	ldrb	r3, [r5, #0]
	data_l = ((data<<4)&0xf0);
 8002ffa:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003000:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003002:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003006:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800300a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800300e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003012:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003016:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800301a:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800301e:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003022:	2304      	movs	r3, #4
 8003024:	214e      	movs	r1, #78	; 0x4e
 8003026:	4848      	ldr	r0, [pc, #288]	; (8003148 <lcd_psu_update+0x2a8>)
 8003028:	aa03      	add	r2, sp, #12
 800302a:	f005 f965 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 800302e:	786b      	ldrb	r3, [r5, #1]
 8003030:	2b7a      	cmp	r3, #122	; 0x7a
 8003032:	d01c      	beq.n	800306e <lcd_psu_update+0x1ce>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003034:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[1]);
 8003036:	786b      	ldrb	r3, [r5, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003038:	4843      	ldr	r0, [pc, #268]	; (8003148 <lcd_psu_update+0x2a8>)
	data_l = ((data<<4)&0xf0);
 800303a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800303c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003040:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003044:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003046:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800304a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800304e:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003052:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003056:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800305a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800305e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003062:	2304      	movs	r3, #4
 8003064:	214e      	movs	r1, #78	; 0x4e
 8003066:	aa03      	add	r2, sp, #12
 8003068:	9400      	str	r4, [sp, #0]
 800306a:	f005 f945 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 800306e:	78ab      	ldrb	r3, [r5, #2]
 8003070:	2b7a      	cmp	r3, #122	; 0x7a
 8003072:	d01c      	beq.n	80030ae <lcd_psu_update+0x20e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003074:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[2]);
 8003076:	78ab      	ldrb	r3, [r5, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003078:	4833      	ldr	r0, [pc, #204]	; (8003148 <lcd_psu_update+0x2a8>)
	data_l = ((data<<4)&0xf0);
 800307a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800307c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003080:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003084:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003086:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800308a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800308e:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003092:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003096:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800309a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800309e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030a2:	2304      	movs	r3, #4
 80030a4:	214e      	movs	r1, #78	; 0x4e
 80030a6:	aa03      	add	r2, sp, #12
 80030a8:	9400      	str	r4, [sp, #0]
 80030aa:	f005 f925 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 80030ae:	78eb      	ldrb	r3, [r5, #3]
 80030b0:	2b7a      	cmp	r3, #122	; 0x7a
 80030b2:	d01c      	beq.n	80030ee <lcd_psu_update+0x24e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030b4:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[3]);
 80030b6:	78eb      	ldrb	r3, [r5, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030b8:	4823      	ldr	r0, [pc, #140]	; (8003148 <lcd_psu_update+0x2a8>)
	data_l = ((data<<4)&0xf0);
 80030ba:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80030bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030c0:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80030c4:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030c6:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030ca:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030ce:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030d2:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030d6:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030da:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030de:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030e2:	2304      	movs	r3, #4
 80030e4:	214e      	movs	r1, #78	; 0x4e
 80030e6:	aa03      	add	r2, sp, #12
 80030e8:	9400      	str	r4, [sp, #0]
 80030ea:	f005 f905 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 80030ee:	792b      	ldrb	r3, [r5, #4]
 80030f0:	2b7a      	cmp	r3, #122	; 0x7a
 80030f2:	d01c      	beq.n	800312e <lcd_psu_update+0x28e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030f4:	2064      	movs	r0, #100	; 0x64
			lcd_send_data(keypadarr[4]);
 80030f6:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030f8:	9000      	str	r0, [sp, #0]
	data_l = ((data<<4)&0xf0);
 80030fa:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80030fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003100:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003102:	f043 010d 	orr.w	r1, r3, #13
 8003106:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800310a:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800310e:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003112:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003116:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800311a:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800311e:	2304      	movs	r3, #4
 8003120:	214e      	movs	r1, #78	; 0x4e
 8003122:	4809      	ldr	r0, [pc, #36]	; (8003148 <lcd_psu_update+0x2a8>)
 8003124:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003126:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800312a:	f005 f8e5 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(encmode){
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <lcd_psu_update+0x2e0>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f43f aece 	beq.w	8002ed4 <lcd_psu_update+0x34>
			lcd_put_cur(2, 3 + encpos);
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <lcd_psu_update+0x2e4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800313a:	aa03      	add	r2, sp, #12
			lcd_put_cur(2, 3 + encpos);
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	b25b      	sxtb	r3, r3
            col += 0x94;	//0x80|0x14 for row 3 col 2
 8003140:	3397      	adds	r3, #151	; 0x97
	data_u = (cmd&0xf0);
 8003142:	e12b      	b.n	800339c <lcd_psu_update+0x4fc>
 8003144:	c8cc080c 	.word	0xc8cc080c
 8003148:	200004ec 	.word	0x200004ec
 800314c:	200006c5 	.word	0x200006c5
 8003150:	20000824 	.word	0x20000824
 8003154:	20000394 	.word	0x20000394
 8003158:	200006cc 	.word	0x200006cc
 800315c:	200003a8 	.word	0x200003a8
 8003160:	20000828 	.word	0x20000828
 8003164:	20000398 	.word	0x20000398
 8003168:	200006c8 	.word	0x200006c8
 800316c:	200003a4 	.word	0x200003a4
 8003170:	787c989c 	.word	0x787c989c
 8003174:	0800f254 	.word	0x0800f254
 8003178:	f8fc080c 	.word	0xf8fc080c
 800317c:	20000000 	.word	0x20000000
 8003180:	200003ac 	.word	0x200003ac
 8003184:	200003ad 	.word	0x200003ad
		lcd_update_amperage(1,amp_set_aux);
 8003188:	4b93      	ldr	r3, [pc, #588]	; (80033d8 <lcd_psu_update+0x538>)
 800318a:	4628      	mov	r0, r5
 800318c:	6819      	ldr	r1, [r3, #0]
 800318e:	f7ff fcd7 	bl	8002b40 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003192:	4b92      	ldr	r3, [pc, #584]	; (80033dc <lcd_psu_update+0x53c>)
 8003194:	2002      	movs	r0, #2
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	f7ff fb22 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 800319c:	4b90      	ldr	r3, [pc, #576]	; (80033e0 <lcd_psu_update+0x540>)
 800319e:	2002      	movs	r0, #2
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	f7ff fccd 	bl	8002b40 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 80031a6:	4b8f      	ldr	r3, [pc, #572]	; (80033e4 <lcd_psu_update+0x544>)
 80031a8:	2003      	movs	r0, #3
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	f7ff fb18 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 80031b0:	4b8d      	ldr	r3, [pc, #564]	; (80033e8 <lcd_psu_update+0x548>)
 80031b2:	2003      	movs	r0, #3
 80031b4:	6819      	ldr	r1, [r3, #0]
 80031b6:	f7ff fcc3 	bl	8002b40 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 80031ba:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <lcd_psu_update+0x54c>)
 80031bc:	2004      	movs	r0, #4
 80031be:	6819      	ldr	r1, [r3, #0]
 80031c0:	f7ff fb0e 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 80031c4:	4b8a      	ldr	r3, [pc, #552]	; (80033f0 <lcd_psu_update+0x550>)
 80031c6:	2004      	movs	r0, #4
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	f7ff fcb9 	bl	8002b40 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031ce:	4989      	ldr	r1, [pc, #548]	; (80033f4 <lcd_psu_update+0x554>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031d0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031d2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031d4:	4888      	ldr	r0, [pc, #544]	; (80033f8 <lcd_psu_update+0x558>)
 80031d6:	214e      	movs	r1, #78	; 0x4e
 80031d8:	aa03      	add	r2, sp, #12
 80031da:	9400      	str	r4, [sp, #0]
 80031dc:	f005 f88c 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80031e0:	2320      	movs	r3, #32
 80031e2:	4d86      	ldr	r5, [pc, #536]	; (80033fc <lcd_psu_update+0x55c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031e4:	4e84      	ldr	r6, [pc, #528]	; (80033f8 <lcd_psu_update+0x558>)
	data_u = (data&0xf0);
 80031e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80031ee:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80031f2:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80031f6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80031fa:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80031fe:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003202:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003206:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800320a:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800320c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003210:	214e      	movs	r1, #78	; 0x4e
 8003212:	4630      	mov	r0, r6
 8003214:	9400      	str	r4, [sp, #0]
 8003216:	aa03      	add	r2, sp, #12
 8003218:	f005 f86e 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800321c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e0      	bne.n	80031e6 <lcd_psu_update+0x346>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003224:	4973      	ldr	r1, [pc, #460]	; (80033f4 <lcd_psu_update+0x554>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003226:	2304      	movs	r3, #4
 8003228:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800322a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800322c:	4872      	ldr	r0, [pc, #456]	; (80033f8 <lcd_psu_update+0x558>)
 800322e:	214e      	movs	r1, #78	; 0x4e
 8003230:	9400      	str	r4, [sp, #0]
 8003232:	f005 f861 	bl	80082f8 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003236:	4972      	ldr	r1, [pc, #456]	; (8003400 <lcd_psu_update+0x560>)
		if(keypadarr[0] != 'z'){
 8003238:	4d72      	ldr	r5, [pc, #456]	; (8003404 <lcd_psu_update+0x564>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800323a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800323c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800323e:	486e      	ldr	r0, [pc, #440]	; (80033f8 <lcd_psu_update+0x558>)
 8003240:	214e      	movs	r1, #78	; 0x4e
 8003242:	aa03      	add	r2, sp, #12
 8003244:	9400      	str	r4, [sp, #0]
 8003246:	f005 f857 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 800324a:	782b      	ldrb	r3, [r5, #0]
 800324c:	2b7a      	cmp	r3, #122	; 0x7a
 800324e:	d01b      	beq.n	8003288 <lcd_psu_update+0x3e8>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003250:	9400      	str	r4, [sp, #0]
			lcd_send_data(keypadarr[0]);
 8003252:	782b      	ldrb	r3, [r5, #0]
	data_l = ((data<<4)&0xf0);
 8003254:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800325a:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800325c:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003260:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003264:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003268:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800326c:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003270:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003274:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003278:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800327c:	2304      	movs	r3, #4
 800327e:	214e      	movs	r1, #78	; 0x4e
 8003280:	485d      	ldr	r0, [pc, #372]	; (80033f8 <lcd_psu_update+0x558>)
 8003282:	aa03      	add	r2, sp, #12
 8003284:	f005 f838 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 8003288:	786b      	ldrb	r3, [r5, #1]
 800328a:	2b7a      	cmp	r3, #122	; 0x7a
 800328c:	d01c      	beq.n	80032c8 <lcd_psu_update+0x428>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800328e:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[1]);
 8003290:	786b      	ldrb	r3, [r5, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003292:	4859      	ldr	r0, [pc, #356]	; (80033f8 <lcd_psu_update+0x558>)
	data_l = ((data<<4)&0xf0);
 8003294:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800329a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800329e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032a0:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032a4:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032a8:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032ac:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032b0:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032b4:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032b8:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032bc:	2304      	movs	r3, #4
 80032be:	214e      	movs	r1, #78	; 0x4e
 80032c0:	aa03      	add	r2, sp, #12
 80032c2:	9400      	str	r4, [sp, #0]
 80032c4:	f005 f818 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 80032c8:	78ab      	ldrb	r3, [r5, #2]
 80032ca:	2b7a      	cmp	r3, #122	; 0x7a
 80032cc:	d01c      	beq.n	8003308 <lcd_psu_update+0x468>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032ce:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[2]);
 80032d0:	78ab      	ldrb	r3, [r5, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032d2:	4849      	ldr	r0, [pc, #292]	; (80033f8 <lcd_psu_update+0x558>)
	data_l = ((data<<4)&0xf0);
 80032d4:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80032d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032da:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80032de:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032e0:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032e4:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032e8:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032ec:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032f0:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032f4:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032f8:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032fc:	2304      	movs	r3, #4
 80032fe:	214e      	movs	r1, #78	; 0x4e
 8003300:	aa03      	add	r2, sp, #12
 8003302:	9400      	str	r4, [sp, #0]
 8003304:	f004 fff8 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 8003308:	78eb      	ldrb	r3, [r5, #3]
 800330a:	2b7a      	cmp	r3, #122	; 0x7a
 800330c:	d01c      	beq.n	8003348 <lcd_psu_update+0x4a8>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800330e:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[3]);
 8003310:	78eb      	ldrb	r3, [r5, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003312:	4839      	ldr	r0, [pc, #228]	; (80033f8 <lcd_psu_update+0x558>)
	data_l = ((data<<4)&0xf0);
 8003314:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800331a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800331e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003320:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003324:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003328:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800332c:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003330:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003334:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003338:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800333c:	2304      	movs	r3, #4
 800333e:	214e      	movs	r1, #78	; 0x4e
 8003340:	aa03      	add	r2, sp, #12
 8003342:	9400      	str	r4, [sp, #0]
 8003344:	f004 ffd8 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 8003348:	792b      	ldrb	r3, [r5, #4]
 800334a:	2b7a      	cmp	r3, #122	; 0x7a
 800334c:	d01c      	beq.n	8003388 <lcd_psu_update+0x4e8>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800334e:	2064      	movs	r0, #100	; 0x64
			lcd_send_data(keypadarr[4]);
 8003350:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003352:	9000      	str	r0, [sp, #0]
	data_l = ((data<<4)&0xf0);
 8003354:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800335a:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800335c:	f043 010d 	orr.w	r1, r3, #13
 8003360:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003364:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003368:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800336c:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003370:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003374:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003378:	2304      	movs	r3, #4
 800337a:	214e      	movs	r1, #78	; 0x4e
 800337c:	481e      	ldr	r0, [pc, #120]	; (80033f8 <lcd_psu_update+0x558>)
 800337e:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003380:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003384:	f004 ffb8 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(encmode){
 8003388:	4b1f      	ldr	r3, [pc, #124]	; (8003408 <lcd_psu_update+0x568>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f43f ada1 	beq.w	8002ed4 <lcd_psu_update+0x34>
			lcd_put_cur(0, 3 + encpos);
 8003392:	4b1e      	ldr	r3, [pc, #120]	; (800340c <lcd_psu_update+0x56c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003394:	aa03      	add	r2, sp, #12
			lcd_put_cur(0, 3 + encpos);
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	b25b      	sxtb	r3, r3
            col += 0x80;
 800339a:	3383      	adds	r3, #131	; 0x83
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800339c:	2464      	movs	r4, #100	; 0x64
	data_l = ((cmd<<4)&0xf0);
 800339e:	0119      	lsls	r1, r3, #4
	data_u = (cmd&0xf0);
 80033a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 80033a4:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80033a8:	f043 000c 	orr.w	r0, r3, #12
 80033ac:	f88d 000c 	strb.w	r0, [sp, #12]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80033b0:	f043 0308 	orr.w	r3, r3, #8
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80033b4:	f041 0008 	orr.w	r0, r1, #8
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80033b8:	f041 050c 	orr.w	r5, r1, #12
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80033bc:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80033c0:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033c4:	2304      	movs	r3, #4
 80033c6:	214e      	movs	r1, #78	; 0x4e
 80033c8:	9400      	str	r4, [sp, #0]
 80033ca:	480b      	ldr	r0, [pc, #44]	; (80033f8 <lcd_psu_update+0x558>)
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80033cc:	f88d 500e 	strb.w	r5, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033d0:	f004 ff92 	bl	80082f8 <HAL_I2C_Master_Transmit>
}
 80033d4:	b004      	add	sp, #16
 80033d6:	bd70      	pop	{r4, r5, r6, pc}
 80033d8:	20000394 	.word	0x20000394
 80033dc:	200006cc 	.word	0x200006cc
 80033e0:	200003a8 	.word	0x200003a8
 80033e4:	20000828 	.word	0x20000828
 80033e8:	20000398 	.word	0x20000398
 80033ec:	200006c8 	.word	0x200006c8
 80033f0:	200003a4 	.word	0x200003a4
 80033f4:	383c888c 	.word	0x383c888c
 80033f8:	200004ec 	.word	0x200004ec
 80033fc:	0800f254 	.word	0x0800f254
 8003400:	f8fc080c 	.word	0xf8fc080c
 8003404:	20000000 	.word	0x20000000
 8003408:	200003ac 	.word	0x200003ac
 800340c:	200003ad 	.word	0x200003ad
		lcd_update_voltage(1,volt_set_aux);
 8003410:	4bac      	ldr	r3, [pc, #688]	; (80036c4 <lcd_psu_update+0x824>)
 8003412:	2001      	movs	r0, #1
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	f7ff f9e3 	bl	80027e0 <lcd_update_voltage>
		lcd_update_voltage(2,lin_num_aux);
 800341a:	4bab      	ldr	r3, [pc, #684]	; (80036c8 <lcd_psu_update+0x828>)
 800341c:	4628      	mov	r0, r5
 800341e:	6819      	ldr	r1, [r3, #0]
 8003420:	f7ff f9de 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003424:	4ba9      	ldr	r3, [pc, #676]	; (80036cc <lcd_psu_update+0x82c>)
 8003426:	4628      	mov	r0, r5
 8003428:	6819      	ldr	r1, [r3, #0]
 800342a:	f7ff fb89 	bl	8002b40 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 800342e:	4ba8      	ldr	r3, [pc, #672]	; (80036d0 <lcd_psu_update+0x830>)
 8003430:	2003      	movs	r0, #3
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	f7ff f9d4 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8003438:	4ba6      	ldr	r3, [pc, #664]	; (80036d4 <lcd_psu_update+0x834>)
 800343a:	2003      	movs	r0, #3
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	f7ff fb7f 	bl	8002b40 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003442:	4ba5      	ldr	r3, [pc, #660]	; (80036d8 <lcd_psu_update+0x838>)
 8003444:	2004      	movs	r0, #4
 8003446:	6819      	ldr	r1, [r3, #0]
 8003448:	f7ff f9ca 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 800344c:	4ba3      	ldr	r3, [pc, #652]	; (80036dc <lcd_psu_update+0x83c>)
 800344e:	2004      	movs	r0, #4
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	f7ff fb75 	bl	8002b40 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003456:	49a2      	ldr	r1, [pc, #648]	; (80036e0 <lcd_psu_update+0x840>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003458:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800345a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800345c:	48a1      	ldr	r0, [pc, #644]	; (80036e4 <lcd_psu_update+0x844>)
 800345e:	214e      	movs	r1, #78	; 0x4e
 8003460:	aa03      	add	r2, sp, #12
 8003462:	9400      	str	r4, [sp, #0]
 8003464:	f004 ff48 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003468:	2320      	movs	r3, #32
 800346a:	4d9f      	ldr	r5, [pc, #636]	; (80036e8 <lcd_psu_update+0x848>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800346c:	4e9d      	ldr	r6, [pc, #628]	; (80036e4 <lcd_psu_update+0x844>)
	data_l = ((data<<4)&0xf0);
 800346e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003474:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003478:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800347a:	f043 0309 	orr.w	r3, r3, #9
 800347e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003482:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003486:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800348a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800348e:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003492:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003496:	2304      	movs	r3, #4
 8003498:	214e      	movs	r1, #78	; 0x4e
 800349a:	4630      	mov	r0, r6
 800349c:	9400      	str	r4, [sp, #0]
 800349e:	aa03      	add	r2, sp, #12
 80034a0:	f004 ff2a 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80034a4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e0      	bne.n	800346e <lcd_psu_update+0x5ce>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80034ac:	498c      	ldr	r1, [pc, #560]	; (80036e0 <lcd_psu_update+0x840>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034ae:	2304      	movs	r3, #4
 80034b0:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80034b2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034b4:	488b      	ldr	r0, [pc, #556]	; (80036e4 <lcd_psu_update+0x844>)
 80034b6:	214e      	movs	r1, #78	; 0x4e
 80034b8:	9400      	str	r4, [sp, #0]
 80034ba:	f004 ff1d 	bl	80082f8 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80034be:	498b      	ldr	r1, [pc, #556]	; (80036ec <lcd_psu_update+0x84c>)
		if(keypadarr[0] != 'z'){
 80034c0:	4d8b      	ldr	r5, [pc, #556]	; (80036f0 <lcd_psu_update+0x850>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034c2:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80034c4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034c6:	4887      	ldr	r0, [pc, #540]	; (80036e4 <lcd_psu_update+0x844>)
 80034c8:	214e      	movs	r1, #78	; 0x4e
 80034ca:	aa03      	add	r2, sp, #12
 80034cc:	9400      	str	r4, [sp, #0]
 80034ce:	f004 ff13 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 80034d2:	782b      	ldrb	r3, [r5, #0]
 80034d4:	2b7a      	cmp	r3, #122	; 0x7a
 80034d6:	f040 8133 	bne.w	8003740 <lcd_psu_update+0x8a0>
		if(keypadarr[1] != 'z'){
 80034da:	786b      	ldrb	r3, [r5, #1]
 80034dc:	2b7a      	cmp	r3, #122	; 0x7a
 80034de:	f040 8111 	bne.w	8003704 <lcd_psu_update+0x864>
		if(keypadarr[2] != 'z'){
 80034e2:	78ab      	ldrb	r3, [r5, #2]
 80034e4:	2b7a      	cmp	r3, #122	; 0x7a
 80034e6:	f040 80cf 	bne.w	8003688 <lcd_psu_update+0x7e8>
		if(keypadarr[3] != 'z'){
 80034ea:	78eb      	ldrb	r3, [r5, #3]
 80034ec:	2b7a      	cmp	r3, #122	; 0x7a
 80034ee:	f040 80ad 	bne.w	800364c <lcd_psu_update+0x7ac>
		if(keypadarr[4] != 'z'){
 80034f2:	792b      	ldrb	r3, [r5, #4]
 80034f4:	2b7a      	cmp	r3, #122	; 0x7a
 80034f6:	f040 808b 	bne.w	8003610 <lcd_psu_update+0x770>
		if(encmode){
 80034fa:	4b7e      	ldr	r3, [pc, #504]	; (80036f4 <lcd_psu_update+0x854>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f43f ace8 	beq.w	8002ed4 <lcd_psu_update+0x34>
			lcd_put_cur(1, 3 + encpos);
 8003504:	4b7c      	ldr	r3, [pc, #496]	; (80036f8 <lcd_psu_update+0x858>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003506:	aa03      	add	r2, sp, #12
			lcd_put_cur(1, 3 + encpos);
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	b25b      	sxtb	r3, r3
            col += 0xC0;  //C0
 800350c:	33c3      	adds	r3, #195	; 0xc3
	data_u = (cmd&0xf0);
 800350e:	e745      	b.n	800339c <lcd_psu_update+0x4fc>
		lcd_update_voltage(1,volt_set_aux);
 8003510:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <lcd_psu_update+0x824>)
 8003512:	2001      	movs	r0, #1
 8003514:	6819      	ldr	r1, [r3, #0]
 8003516:	f7ff f963 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 800351a:	4b78      	ldr	r3, [pc, #480]	; (80036fc <lcd_psu_update+0x85c>)
 800351c:	2001      	movs	r0, #1
 800351e:	6819      	ldr	r1, [r3, #0]
 8003520:	f7ff fb0e 	bl	8002b40 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003524:	4b68      	ldr	r3, [pc, #416]	; (80036c8 <lcd_psu_update+0x828>)
 8003526:	2002      	movs	r0, #2
 8003528:	6819      	ldr	r1, [r3, #0]
 800352a:	f7ff f959 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 800352e:	4b67      	ldr	r3, [pc, #412]	; (80036cc <lcd_psu_update+0x82c>)
 8003530:	2002      	movs	r0, #2
 8003532:	6819      	ldr	r1, [r3, #0]
 8003534:	f7ff fb04 	bl	8002b40 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003538:	4b65      	ldr	r3, [pc, #404]	; (80036d0 <lcd_psu_update+0x830>)
 800353a:	2003      	movs	r0, #3
 800353c:	6819      	ldr	r1, [r3, #0]
 800353e:	f7ff f94f 	bl	80027e0 <lcd_update_voltage>
		lcd_update_voltage(4,lin_num);
 8003542:	4b65      	ldr	r3, [pc, #404]	; (80036d8 <lcd_psu_update+0x838>)
 8003544:	4628      	mov	r0, r5
 8003546:	6819      	ldr	r1, [r3, #0]
 8003548:	f7ff f94a 	bl	80027e0 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 800354c:	4b63      	ldr	r3, [pc, #396]	; (80036dc <lcd_psu_update+0x83c>)
 800354e:	4628      	mov	r0, r5
 8003550:	6819      	ldr	r1, [r3, #0]
 8003552:	f7ff faf5 	bl	8002b40 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003556:	496a      	ldr	r1, [pc, #424]	; (8003700 <lcd_psu_update+0x860>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003558:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800355a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800355c:	4861      	ldr	r0, [pc, #388]	; (80036e4 <lcd_psu_update+0x844>)
 800355e:	214e      	movs	r1, #78	; 0x4e
 8003560:	aa03      	add	r2, sp, #12
 8003562:	9400      	str	r4, [sp, #0]
 8003564:	f004 fec8 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003568:	2320      	movs	r3, #32
 800356a:	4d5f      	ldr	r5, [pc, #380]	; (80036e8 <lcd_psu_update+0x848>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800356c:	4e5d      	ldr	r6, [pc, #372]	; (80036e4 <lcd_psu_update+0x844>)
	data_l = ((data<<4)&0xf0);
 800356e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003574:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003578:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800357a:	f043 0309 	orr.w	r3, r3, #9
 800357e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003582:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003586:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800358a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800358e:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003592:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003596:	2304      	movs	r3, #4
 8003598:	214e      	movs	r1, #78	; 0x4e
 800359a:	4630      	mov	r0, r6
 800359c:	9400      	str	r4, [sp, #0]
 800359e:	aa03      	add	r2, sp, #12
 80035a0:	f004 feaa 	bl	80082f8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80035a4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1e0      	bne.n	800356e <lcd_psu_update+0x6ce>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035ac:	4954      	ldr	r1, [pc, #336]	; (8003700 <lcd_psu_update+0x860>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035ae:	2304      	movs	r3, #4
 80035b0:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035b2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035b4:	484b      	ldr	r0, [pc, #300]	; (80036e4 <lcd_psu_update+0x844>)
 80035b6:	214e      	movs	r1, #78	; 0x4e
 80035b8:	9400      	str	r4, [sp, #0]
 80035ba:	f004 fe9d 	bl	80082f8 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035be:	494b      	ldr	r1, [pc, #300]	; (80036ec <lcd_psu_update+0x84c>)
		if(keypadarr[0] != 'z'){
 80035c0:	4d4b      	ldr	r5, [pc, #300]	; (80036f0 <lcd_psu_update+0x850>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035c2:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035c4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035c6:	4847      	ldr	r0, [pc, #284]	; (80036e4 <lcd_psu_update+0x844>)
 80035c8:	214e      	movs	r1, #78	; 0x4e
 80035ca:	aa03      	add	r2, sp, #12
 80035cc:	9400      	str	r4, [sp, #0]
 80035ce:	f004 fe93 	bl	80082f8 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 80035d2:	782b      	ldrb	r3, [r5, #0]
 80035d4:	2b7a      	cmp	r3, #122	; 0x7a
 80035d6:	f040 80ee 	bne.w	80037b6 <lcd_psu_update+0x916>
		if(keypadarr[1] != 'z'){
 80035da:	786b      	ldrb	r3, [r5, #1]
 80035dc:	2b7a      	cmp	r3, #122	; 0x7a
 80035de:	f040 80cc 	bne.w	800377a <lcd_psu_update+0x8da>
		if(keypadarr[2] != 'z'){
 80035e2:	78ab      	ldrb	r3, [r5, #2]
 80035e4:	2b7a      	cmp	r3, #122	; 0x7a
 80035e6:	f040 813f 	bne.w	8003868 <lcd_psu_update+0x9c8>
		if(keypadarr[3] != 'z'){
 80035ea:	78eb      	ldrb	r3, [r5, #3]
 80035ec:	2b7a      	cmp	r3, #122	; 0x7a
 80035ee:	f040 811d 	bne.w	800382c <lcd_psu_update+0x98c>
		if(keypadarr[4] != 'z'){
 80035f2:	792b      	ldrb	r3, [r5, #4]
 80035f4:	2b7a      	cmp	r3, #122	; 0x7a
 80035f6:	f040 80fb 	bne.w	80037f0 <lcd_psu_update+0x950>
		if(encmode){
 80035fa:	4b3e      	ldr	r3, [pc, #248]	; (80036f4 <lcd_psu_update+0x854>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f43f ac68 	beq.w	8002ed4 <lcd_psu_update+0x34>
			lcd_put_cur(3, 3 + encpos);
 8003604:	4b3c      	ldr	r3, [pc, #240]	; (80036f8 <lcd_psu_update+0x858>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003606:	aa03      	add	r2, sp, #12
			lcd_put_cur(3, 3 + encpos);
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b25b      	sxtb	r3, r3
            col += 0xD4;
 800360c:	33d7      	adds	r3, #215	; 0xd7
 800360e:	e6c5      	b.n	800339c <lcd_psu_update+0x4fc>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003610:	2064      	movs	r0, #100	; 0x64
			lcd_send_data(keypadarr[4]);
 8003612:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003614:	9000      	str	r0, [sp, #0]
	data_l = ((data<<4)&0xf0);
 8003616:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800361c:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800361e:	f043 010d 	orr.w	r1, r3, #13
 8003622:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003626:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800362a:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800362e:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003632:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003636:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800363a:	2304      	movs	r3, #4
 800363c:	214e      	movs	r1, #78	; 0x4e
 800363e:	aa03      	add	r2, sp, #12
 8003640:	4828      	ldr	r0, [pc, #160]	; (80036e4 <lcd_psu_update+0x844>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003642:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003646:	f004 fe57 	bl	80082f8 <HAL_I2C_Master_Transmit>
}
 800364a:	e756      	b.n	80034fa <lcd_psu_update+0x65a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800364c:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[3]);
 800364e:	78eb      	ldrb	r3, [r5, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003650:	4824      	ldr	r0, [pc, #144]	; (80036e4 <lcd_psu_update+0x844>)
	data_l = ((data<<4)&0xf0);
 8003652:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003658:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800365c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800365e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003662:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003666:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800366a:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800366e:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003672:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003676:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800367a:	2304      	movs	r3, #4
 800367c:	214e      	movs	r1, #78	; 0x4e
 800367e:	aa03      	add	r2, sp, #12
 8003680:	9400      	str	r4, [sp, #0]
 8003682:	f004 fe39 	bl	80082f8 <HAL_I2C_Master_Transmit>
}
 8003686:	e734      	b.n	80034f2 <lcd_psu_update+0x652>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003688:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[2]);
 800368a:	78ab      	ldrb	r3, [r5, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800368c:	4815      	ldr	r0, [pc, #84]	; (80036e4 <lcd_psu_update+0x844>)
	data_l = ((data<<4)&0xf0);
 800368e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003694:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003698:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800369a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800369e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036a2:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036a6:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036aa:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80036ae:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036b2:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036b6:	2304      	movs	r3, #4
 80036b8:	214e      	movs	r1, #78	; 0x4e
 80036ba:	aa03      	add	r2, sp, #12
 80036bc:	9400      	str	r4, [sp, #0]
 80036be:	f004 fe1b 	bl	80082f8 <HAL_I2C_Master_Transmit>
}
 80036c2:	e712      	b.n	80034ea <lcd_psu_update+0x64a>
 80036c4:	20000824 	.word	0x20000824
 80036c8:	200006cc 	.word	0x200006cc
 80036cc:	200003a8 	.word	0x200003a8
 80036d0:	20000828 	.word	0x20000828
 80036d4:	20000398 	.word	0x20000398
 80036d8:	200006c8 	.word	0x200006c8
 80036dc:	200003a4 	.word	0x200003a4
 80036e0:	383cc8cc 	.word	0x383cc8cc
 80036e4:	200004ec 	.word	0x200004ec
 80036e8:	0800f254 	.word	0x0800f254
 80036ec:	f8fc080c 	.word	0xf8fc080c
 80036f0:	20000000 	.word	0x20000000
 80036f4:	200003ac 	.word	0x200003ac
 80036f8:	200003ad 	.word	0x200003ad
 80036fc:	20000394 	.word	0x20000394
 8003700:	787cd8dc 	.word	0x787cd8dc
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003704:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[1]);
 8003706:	786b      	ldrb	r3, [r5, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003708:	4866      	ldr	r0, [pc, #408]	; (80038a4 <lcd_psu_update+0xa04>)
	data_l = ((data<<4)&0xf0);
 800370a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800370c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003710:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003714:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003716:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800371a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800371e:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003722:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003726:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800372a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800372e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003732:	2304      	movs	r3, #4
 8003734:	214e      	movs	r1, #78	; 0x4e
 8003736:	aa03      	add	r2, sp, #12
 8003738:	9400      	str	r4, [sp, #0]
 800373a:	f004 fddd 	bl	80082f8 <HAL_I2C_Master_Transmit>
}
 800373e:	e6d0      	b.n	80034e2 <lcd_psu_update+0x642>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003740:	9400      	str	r4, [sp, #0]
			lcd_send_data(keypadarr[0]);
 8003742:	782b      	ldrb	r3, [r5, #0]
	data_l = ((data<<4)&0xf0);
 8003744:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800374a:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800374c:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003750:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003754:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003758:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800375c:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003760:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003764:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003768:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800376c:	2304      	movs	r3, #4
 800376e:	214e      	movs	r1, #78	; 0x4e
 8003770:	aa03      	add	r2, sp, #12
 8003772:	484c      	ldr	r0, [pc, #304]	; (80038a4 <lcd_psu_update+0xa04>)
 8003774:	f004 fdc0 	bl	80082f8 <HAL_I2C_Master_Transmit>
}
 8003778:	e6af      	b.n	80034da <lcd_psu_update+0x63a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800377a:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[1]);
 800377c:	786b      	ldrb	r3, [r5, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800377e:	4849      	ldr	r0, [pc, #292]	; (80038a4 <lcd_psu_update+0xa04>)
	data_l = ((data<<4)&0xf0);
 8003780:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003786:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800378a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800378c:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003790:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003794:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003798:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800379c:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80037a0:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80037a4:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037a8:	2304      	movs	r3, #4
 80037aa:	214e      	movs	r1, #78	; 0x4e
 80037ac:	aa03      	add	r2, sp, #12
 80037ae:	9400      	str	r4, [sp, #0]
 80037b0:	f004 fda2 	bl	80082f8 <HAL_I2C_Master_Transmit>
}
 80037b4:	e715      	b.n	80035e2 <lcd_psu_update+0x742>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037b6:	9400      	str	r4, [sp, #0]
			lcd_send_data(keypadarr[0]);
 80037b8:	782b      	ldrb	r3, [r5, #0]
	data_l = ((data<<4)&0xf0);
 80037ba:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80037bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80037c0:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80037c2:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80037c6:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80037ca:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80037ce:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80037d2:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80037d6:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80037da:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80037de:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037e2:	2304      	movs	r3, #4
 80037e4:	214e      	movs	r1, #78	; 0x4e
 80037e6:	aa03      	add	r2, sp, #12
 80037e8:	482e      	ldr	r0, [pc, #184]	; (80038a4 <lcd_psu_update+0xa04>)
 80037ea:	f004 fd85 	bl	80082f8 <HAL_I2C_Master_Transmit>
}
 80037ee:	e6f4      	b.n	80035da <lcd_psu_update+0x73a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037f0:	2064      	movs	r0, #100	; 0x64
			lcd_send_data(keypadarr[4]);
 80037f2:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037f4:	9000      	str	r0, [sp, #0]
	data_l = ((data<<4)&0xf0);
 80037f6:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80037f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80037fc:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80037fe:	f043 010d 	orr.w	r1, r3, #13
 8003802:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003806:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800380a:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800380e:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003812:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003816:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800381a:	2304      	movs	r3, #4
 800381c:	214e      	movs	r1, #78	; 0x4e
 800381e:	aa03      	add	r2, sp, #12
 8003820:	4820      	ldr	r0, [pc, #128]	; (80038a4 <lcd_psu_update+0xa04>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003822:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003826:	f004 fd67 	bl	80082f8 <HAL_I2C_Master_Transmit>
}
 800382a:	e6e6      	b.n	80035fa <lcd_psu_update+0x75a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800382c:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[3]);
 800382e:	78eb      	ldrb	r3, [r5, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003830:	481c      	ldr	r0, [pc, #112]	; (80038a4 <lcd_psu_update+0xa04>)
	data_l = ((data<<4)&0xf0);
 8003832:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003838:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800383c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800383e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003842:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003846:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800384a:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800384e:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003852:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003856:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800385a:	2304      	movs	r3, #4
 800385c:	214e      	movs	r1, #78	; 0x4e
 800385e:	aa03      	add	r2, sp, #12
 8003860:	9400      	str	r4, [sp, #0]
 8003862:	f004 fd49 	bl	80082f8 <HAL_I2C_Master_Transmit>
}
 8003866:	e6c4      	b.n	80035f2 <lcd_psu_update+0x752>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003868:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[2]);
 800386a:	78ab      	ldrb	r3, [r5, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800386c:	480d      	ldr	r0, [pc, #52]	; (80038a4 <lcd_psu_update+0xa04>)
	data_l = ((data<<4)&0xf0);
 800386e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003874:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003878:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800387a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800387e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003882:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003886:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800388a:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800388e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003892:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003896:	2304      	movs	r3, #4
 8003898:	214e      	movs	r1, #78	; 0x4e
 800389a:	aa03      	add	r2, sp, #12
 800389c:	9400      	str	r4, [sp, #0]
 800389e:	f004 fd2b 	bl	80082f8 <HAL_I2C_Master_Transmit>
}
 80038a2:	e6a2      	b.n	80035ea <lcd_psu_update+0x74a>
 80038a4:	200004ec 	.word	0x200004ec

080038a8 <translate_keypad>:
float translate_keypad(void){
 80038a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if(keypadarr[i] == '.'){
 80038ac:	4ca6      	ldr	r4, [pc, #664]	; (8003b48 <translate_keypad+0x2a0>)
 80038ae:	7823      	ldrb	r3, [r4, #0]
 80038b0:	7861      	ldrb	r1, [r4, #1]
 80038b2:	3b2e      	subs	r3, #46	; 0x2e
 80038b4:	78a2      	ldrb	r2, [r4, #2]
 80038b6:	bf18      	it	ne
 80038b8:	f04f 33ff 	movne.w	r3, #4294967295
	for(int i = 0; i < keypadlength; i++){
 80038bc:	292e      	cmp	r1, #46	; 0x2e
 80038be:	bf08      	it	eq
 80038c0:	2301      	moveq	r3, #1
		if(keypadarr[i] == '.'){
 80038c2:	2a2e      	cmp	r2, #46	; 0x2e
 80038c4:	f000 8103 	beq.w	8003ace <translate_keypad+0x226>
 80038c8:	78e2      	ldrb	r2, [r4, #3]
 80038ca:	2a2e      	cmp	r2, #46	; 0x2e
 80038cc:	d018      	beq.n	8003900 <translate_keypad+0x58>
 80038ce:	7922      	ldrb	r2, [r4, #4]
 80038d0:	2a2e      	cmp	r2, #46	; 0x2e
 80038d2:	f000 816b 	beq.w	8003bac <translate_keypad+0x304>
	if(decimallocation == -1){
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	f040 816a 	bne.w	8003bb0 <translate_keypad+0x308>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80038dc:	7923      	ldrb	r3, [r4, #4]
 80038de:	2b2f      	cmp	r3, #47	; 0x2f
 80038e0:	f240 80a5 	bls.w	8003a2e <translate_keypad+0x186>
 80038e4:	7923      	ldrb	r3, [r4, #4]
 80038e6:	2b39      	cmp	r3, #57	; 0x39
 80038e8:	f200 80a1 	bhi.w	8003a2e <translate_keypad+0x186>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80038ec:	7920      	ldrb	r0, [r4, #4]
				count = count * 10;
 80038ee:	260a      	movs	r6, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80038f0:	3830      	subs	r0, #48	; 0x30
 80038f2:	f7fd f99b 	bl	8000c2c <__aeabi_i2f>
 80038f6:	2100      	movs	r1, #0
 80038f8:	f7fd f8e4 	bl	8000ac4 <__addsf3>
 80038fc:	4605      	mov	r5, r0
				count = count * 10;
 80038fe:	e098      	b.n	8003a32 <translate_keypad+0x18a>
		if(keypadarr[i] == '.'){
 8003900:	7923      	ldrb	r3, [r4, #4]
	for(int i = 0; i < keypadlength; i++){
 8003902:	2b2e      	cmp	r3, #46	; 0x2e
 8003904:	bf0c      	ite	eq
 8003906:	2704      	moveq	r7, #4
 8003908:	2703      	movne	r7, #3
		for(int i = decimallocation-1; i >=0; i--){
 800390a:	1e7e      	subs	r6, r7, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800390c:	5da3      	ldrb	r3, [r4, r6]
 800390e:	2b2f      	cmp	r3, #47	; 0x2f
 8003910:	d903      	bls.n	800391a <translate_keypad+0x72>
 8003912:	5da3      	ldrb	r3, [r4, r6]
 8003914:	2b39      	cmp	r3, #57	; 0x39
 8003916:	f240 80fb 	bls.w	8003b10 <translate_keypad+0x268>
		int count = 1;
 800391a:	f04f 0801 	mov.w	r8, #1
	float num = 0;
 800391e:	2500      	movs	r5, #0
		for(int i = decimallocation-1; i >=0; i--){
 8003920:	1e73      	subs	r3, r6, #1
 8003922:	2e00      	cmp	r6, #0
 8003924:	f000 80e2 	beq.w	8003aec <translate_keypad+0x244>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003928:	5ce2      	ldrb	r2, [r4, r3]
 800392a:	2a2f      	cmp	r2, #47	; 0x2f
 800392c:	d903      	bls.n	8003936 <translate_keypad+0x8e>
 800392e:	5ce2      	ldrb	r2, [r4, r3]
 8003930:	2a39      	cmp	r2, #57	; 0x39
 8003932:	f240 80f8 	bls.w	8003b26 <translate_keypad+0x27e>
		for(int i = decimallocation-1; i >=0; i--){
 8003936:	2e01      	cmp	r6, #1
 8003938:	f1a6 0902 	sub.w	r9, r6, #2
 800393c:	f000 80d6 	beq.w	8003aec <translate_keypad+0x244>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003940:	f814 3009 	ldrb.w	r3, [r4, r9]
 8003944:	2b2f      	cmp	r3, #47	; 0x2f
 8003946:	d913      	bls.n	8003970 <translate_keypad+0xc8>
 8003948:	f814 3009 	ldrb.w	r3, [r4, r9]
 800394c:	2b39      	cmp	r3, #57	; 0x39
 800394e:	d80f      	bhi.n	8003970 <translate_keypad+0xc8>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003950:	f814 0009 	ldrb.w	r0, [r4, r9]
 8003954:	3830      	subs	r0, #48	; 0x30
 8003956:	fb08 f000 	mul.w	r0, r8, r0
 800395a:	f7fd f967 	bl	8000c2c <__aeabi_i2f>
 800395e:	4601      	mov	r1, r0
 8003960:	4628      	mov	r0, r5
 8003962:	f7fd f8af 	bl	8000ac4 <__addsf3>
 8003966:	4605      	mov	r5, r0
				count = count * 10;
 8003968:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 800396c:	ea4f 0848 	mov.w	r8, r8, lsl #1
		for(int i = decimallocation-1; i >=0; i--){
 8003970:	f1b9 0f00 	cmp.w	r9, #0
 8003974:	f000 80ba 	beq.w	8003aec <translate_keypad+0x244>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003978:	7823      	ldrb	r3, [r4, #0]
 800397a:	2b2f      	cmp	r3, #47	; 0x2f
 800397c:	f200 80b8 	bhi.w	8003af0 <translate_keypad+0x248>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003980:	2f04      	cmp	r7, #4
 8003982:	f107 0601 	add.w	r6, r7, #1
 8003986:	d04f      	beq.n	8003a28 <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003988:	5da3      	ldrb	r3, [r4, r6]
 800398a:	2b2f      	cmp	r3, #47	; 0x2f
 800398c:	d903      	bls.n	8003996 <translate_keypad+0xee>
 800398e:	5da3      	ldrb	r3, [r4, r6]
 8003990:	2b39      	cmp	r3, #57	; 0x39
 8003992:	f240 80fa 	bls.w	8003b8a <translate_keypad+0x2e2>
 8003996:	f04f 080a 	mov.w	r8, #10
		for(int i = decimallocation+1; i < keypadlength; i++){
 800399a:	2e04      	cmp	r6, #4
 800399c:	f106 0701 	add.w	r7, r6, #1
 80039a0:	d042      	beq.n	8003a28 <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80039a2:	5de3      	ldrb	r3, [r4, r7]
 80039a4:	2b2f      	cmp	r3, #47	; 0x2f
 80039a6:	d903      	bls.n	80039b0 <translate_keypad+0x108>
 80039a8:	5de3      	ldrb	r3, [r4, r7]
 80039aa:	2b39      	cmp	r3, #57	; 0x39
 80039ac:	f240 80d0 	bls.w	8003b50 <translate_keypad+0x2a8>
		for(int i = decimallocation+1; i < keypadlength; i++){
 80039b0:	2f04      	cmp	r7, #4
 80039b2:	f107 0601 	add.w	r6, r7, #1
 80039b6:	d037      	beq.n	8003a28 <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80039b8:	5da3      	ldrb	r3, [r4, r6]
 80039ba:	2b2f      	cmp	r3, #47	; 0x2f
 80039bc:	d919      	bls.n	80039f2 <translate_keypad+0x14a>
 80039be:	5da3      	ldrb	r3, [r4, r6]
 80039c0:	2b39      	cmp	r3, #57	; 0x39
 80039c2:	d816      	bhi.n	80039f2 <translate_keypad+0x14a>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80039c4:	5da0      	ldrb	r0, [r4, r6]
 80039c6:	f7fd f931 	bl	8000c2c <__aeabi_i2f>
 80039ca:	4960      	ldr	r1, [pc, #384]	; (8003b4c <translate_keypad+0x2a4>)
 80039cc:	f7fd f878 	bl	8000ac0 <__aeabi_fsub>
 80039d0:	4607      	mov	r7, r0
 80039d2:	4640      	mov	r0, r8
 80039d4:	f7fd f92a 	bl	8000c2c <__aeabi_i2f>
 80039d8:	4601      	mov	r1, r0
 80039da:	4638      	mov	r0, r7
 80039dc:	f7fd fa2e 	bl	8000e3c <__aeabi_fdiv>
 80039e0:	4601      	mov	r1, r0
 80039e2:	4628      	mov	r0, r5
 80039e4:	f7fd f86e 	bl	8000ac4 <__addsf3>
 80039e8:	4605      	mov	r5, r0
				count = count * 10;
 80039ea:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80039ee:	ea4f 0848 	mov.w	r8, r8, lsl #1
		for(int i = decimallocation+1; i < keypadlength; i++){
 80039f2:	2e03      	cmp	r6, #3
 80039f4:	d118      	bne.n	8003a28 <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80039f6:	7923      	ldrb	r3, [r4, #4]
 80039f8:	2b2f      	cmp	r3, #47	; 0x2f
 80039fa:	d915      	bls.n	8003a28 <translate_keypad+0x180>
 80039fc:	7923      	ldrb	r3, [r4, #4]
 80039fe:	2b39      	cmp	r3, #57	; 0x39
 8003a00:	d812      	bhi.n	8003a28 <translate_keypad+0x180>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003a02:	7920      	ldrb	r0, [r4, #4]
 8003a04:	f7fd f912 	bl	8000c2c <__aeabi_i2f>
 8003a08:	4950      	ldr	r1, [pc, #320]	; (8003b4c <translate_keypad+0x2a4>)
 8003a0a:	f7fd f859 	bl	8000ac0 <__aeabi_fsub>
 8003a0e:	4604      	mov	r4, r0
 8003a10:	4640      	mov	r0, r8
 8003a12:	f7fd f90b 	bl	8000c2c <__aeabi_i2f>
 8003a16:	4601      	mov	r1, r0
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f7fd fa0f 	bl	8000e3c <__aeabi_fdiv>
 8003a1e:	4601      	mov	r1, r0
 8003a20:	4628      	mov	r0, r5
 8003a22:	f7fd f84f 	bl	8000ac4 <__addsf3>
 8003a26:	4605      	mov	r5, r0
}
 8003a28:	4628      	mov	r0, r5
 8003a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		int count = 1;
 8003a2e:	2601      	movs	r6, #1
	float num = 0;
 8003a30:	2500      	movs	r5, #0
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003a32:	78e3      	ldrb	r3, [r4, #3]
 8003a34:	2b2f      	cmp	r3, #47	; 0x2f
 8003a36:	d910      	bls.n	8003a5a <translate_keypad+0x1b2>
 8003a38:	78e3      	ldrb	r3, [r4, #3]
 8003a3a:	2b39      	cmp	r3, #57	; 0x39
 8003a3c:	d80d      	bhi.n	8003a5a <translate_keypad+0x1b2>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003a3e:	78e0      	ldrb	r0, [r4, #3]
 8003a40:	3830      	subs	r0, #48	; 0x30
 8003a42:	fb06 f000 	mul.w	r0, r6, r0
 8003a46:	f7fd f8f1 	bl	8000c2c <__aeabi_i2f>
 8003a4a:	4601      	mov	r1, r0
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	f7fd f839 	bl	8000ac4 <__addsf3>
 8003a52:	4605      	mov	r5, r0
				count = count * 10;
 8003a54:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003a58:	0076      	lsls	r6, r6, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003a5a:	78a3      	ldrb	r3, [r4, #2]
 8003a5c:	2b2f      	cmp	r3, #47	; 0x2f
 8003a5e:	d910      	bls.n	8003a82 <translate_keypad+0x1da>
 8003a60:	78a3      	ldrb	r3, [r4, #2]
 8003a62:	2b39      	cmp	r3, #57	; 0x39
 8003a64:	d80d      	bhi.n	8003a82 <translate_keypad+0x1da>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003a66:	78a0      	ldrb	r0, [r4, #2]
 8003a68:	3830      	subs	r0, #48	; 0x30
 8003a6a:	fb06 f000 	mul.w	r0, r6, r0
 8003a6e:	f7fd f8dd 	bl	8000c2c <__aeabi_i2f>
 8003a72:	4601      	mov	r1, r0
 8003a74:	4628      	mov	r0, r5
 8003a76:	f7fd f825 	bl	8000ac4 <__addsf3>
 8003a7a:	4605      	mov	r5, r0
				count = count * 10;
 8003a7c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003a80:	0076      	lsls	r6, r6, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003a82:	7863      	ldrb	r3, [r4, #1]
 8003a84:	2b2f      	cmp	r3, #47	; 0x2f
 8003a86:	d910      	bls.n	8003aaa <translate_keypad+0x202>
 8003a88:	7863      	ldrb	r3, [r4, #1]
 8003a8a:	2b39      	cmp	r3, #57	; 0x39
 8003a8c:	d80d      	bhi.n	8003aaa <translate_keypad+0x202>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003a8e:	7860      	ldrb	r0, [r4, #1]
 8003a90:	3830      	subs	r0, #48	; 0x30
 8003a92:	fb06 f000 	mul.w	r0, r6, r0
 8003a96:	f7fd f8c9 	bl	8000c2c <__aeabi_i2f>
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	f7fd f811 	bl	8000ac4 <__addsf3>
 8003aa2:	4605      	mov	r5, r0
				count = count * 10;
 8003aa4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003aa8:	0076      	lsls	r6, r6, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003aaa:	7823      	ldrb	r3, [r4, #0]
 8003aac:	2b2f      	cmp	r3, #47	; 0x2f
 8003aae:	d9bb      	bls.n	8003a28 <translate_keypad+0x180>
 8003ab0:	7823      	ldrb	r3, [r4, #0]
 8003ab2:	2b39      	cmp	r3, #57	; 0x39
 8003ab4:	d8b8      	bhi.n	8003a28 <translate_keypad+0x180>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003ab6:	7820      	ldrb	r0, [r4, #0]
 8003ab8:	3830      	subs	r0, #48	; 0x30
 8003aba:	fb06 f000 	mul.w	r0, r6, r0
 8003abe:	f7fd f8b5 	bl	8000c2c <__aeabi_i2f>
 8003ac2:	4601      	mov	r1, r0
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	f7fc fffd 	bl	8000ac4 <__addsf3>
 8003aca:	4605      	mov	r5, r0
		for(int i = keypadlength-1; i >=0; i--){
 8003acc:	e7ac      	b.n	8003a28 <translate_keypad+0x180>
		if(keypadarr[i] == '.'){
 8003ace:	78e3      	ldrb	r3, [r4, #3]
 8003ad0:	2b2e      	cmp	r3, #46	; 0x2e
 8003ad2:	f43f af15 	beq.w	8003900 <translate_keypad+0x58>
 8003ad6:	7923      	ldrb	r3, [r4, #4]
	for(int i = 0; i < keypadlength; i++){
 8003ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8003ada:	bf0c      	ite	eq
 8003adc:	2704      	moveq	r7, #4
 8003ade:	2702      	movne	r7, #2
 8003ae0:	e713      	b.n	800390a <translate_keypad+0x62>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003ae2:	7823      	ldrb	r3, [r4, #0]
 8003ae4:	2b2f      	cmp	r3, #47	; 0x2f
 8003ae6:	d87a      	bhi.n	8003bde <translate_keypad+0x336>
 8003ae8:	2701      	movs	r7, #1
	float num = 0;
 8003aea:	2500      	movs	r5, #0
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003aec:	1c7e      	adds	r6, r7, #1
 8003aee:	e74b      	b.n	8003988 <translate_keypad+0xe0>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003af0:	7823      	ldrb	r3, [r4, #0]
 8003af2:	2b39      	cmp	r3, #57	; 0x39
 8003af4:	f63f af44 	bhi.w	8003980 <translate_keypad+0xd8>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003af8:	7820      	ldrb	r0, [r4, #0]
 8003afa:	3830      	subs	r0, #48	; 0x30
 8003afc:	fb08 f000 	mul.w	r0, r8, r0
 8003b00:	f7fd f894 	bl	8000c2c <__aeabi_i2f>
 8003b04:	4601      	mov	r1, r0
 8003b06:	4628      	mov	r0, r5
 8003b08:	f7fc ffdc 	bl	8000ac4 <__addsf3>
 8003b0c:	4605      	mov	r5, r0
				count = count * 10;
 8003b0e:	e737      	b.n	8003980 <translate_keypad+0xd8>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003b10:	5da0      	ldrb	r0, [r4, r6]
				count = count * 10;
 8003b12:	f04f 080a 	mov.w	r8, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003b16:	3830      	subs	r0, #48	; 0x30
 8003b18:	f7fd f888 	bl	8000c2c <__aeabi_i2f>
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	f7fc ffd1 	bl	8000ac4 <__addsf3>
 8003b22:	4605      	mov	r5, r0
				count = count * 10;
 8003b24:	e6fc      	b.n	8003920 <translate_keypad+0x78>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003b26:	5ce0      	ldrb	r0, [r4, r3]
 8003b28:	3830      	subs	r0, #48	; 0x30
 8003b2a:	fb08 f000 	mul.w	r0, r8, r0
 8003b2e:	f7fd f87d 	bl	8000c2c <__aeabi_i2f>
 8003b32:	4601      	mov	r1, r0
 8003b34:	4628      	mov	r0, r5
 8003b36:	f7fc ffc5 	bl	8000ac4 <__addsf3>
				count = count * 10;
 8003b3a:	eb08 0888 	add.w	r8, r8, r8, lsl #2
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003b3e:	4605      	mov	r5, r0
				count = count * 10;
 8003b40:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8003b44:	e6f7      	b.n	8003936 <translate_keypad+0x8e>
 8003b46:	bf00      	nop
 8003b48:	20000000 	.word	0x20000000
 8003b4c:	42400000 	.word	0x42400000
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003b50:	5de0      	ldrb	r0, [r4, r7]
 8003b52:	f7fd f86b 	bl	8000c2c <__aeabi_i2f>
 8003b56:	4923      	ldr	r1, [pc, #140]	; (8003be4 <translate_keypad+0x33c>)
 8003b58:	f7fc ffb2 	bl	8000ac0 <__aeabi_fsub>
 8003b5c:	4606      	mov	r6, r0
 8003b5e:	4640      	mov	r0, r8
 8003b60:	f7fd f864 	bl	8000c2c <__aeabi_i2f>
 8003b64:	4601      	mov	r1, r0
 8003b66:	4630      	mov	r0, r6
 8003b68:	f7fd f968 	bl	8000e3c <__aeabi_fdiv>
 8003b6c:	4601      	mov	r1, r0
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f7fc ffa8 	bl	8000ac4 <__addsf3>
				count = count * 10;
 8003b74:	eb08 0888 	add.w	r8, r8, r8, lsl #2
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003b78:	4605      	mov	r5, r0
				count = count * 10;
 8003b7a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8003b7e:	e717      	b.n	80039b0 <translate_keypad+0x108>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003b80:	7863      	ldrb	r3, [r4, #1]
 8003b82:	2b39      	cmp	r3, #57	; 0x39
 8003b84:	d821      	bhi.n	8003bca <translate_keypad+0x322>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003b86:	2601      	movs	r6, #1
	float num = 0;
 8003b88:	2500      	movs	r5, #0
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003b8a:	5da0      	ldrb	r0, [r4, r6]
 8003b8c:	f7fd f84e 	bl	8000c2c <__aeabi_i2f>
 8003b90:	4914      	ldr	r1, [pc, #80]	; (8003be4 <translate_keypad+0x33c>)
 8003b92:	f7fc ff95 	bl	8000ac0 <__aeabi_fsub>
 8003b96:	4914      	ldr	r1, [pc, #80]	; (8003be8 <translate_keypad+0x340>)
 8003b98:	f7fd f950 	bl	8000e3c <__aeabi_fdiv>
 8003b9c:	4601      	mov	r1, r0
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f7fc ff90 	bl	8000ac4 <__addsf3>
				count = count * 10;
 8003ba4:	f04f 0864 	mov.w	r8, #100	; 0x64
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003ba8:	4605      	mov	r5, r0
				count = count * 10;
 8003baa:	e6f6      	b.n	800399a <translate_keypad+0xf2>
	for(int i = 0; i < keypadlength; i++){
 8003bac:	2704      	movs	r7, #4
 8003bae:	e6ac      	b.n	800390a <translate_keypad+0x62>
		for(int i = decimallocation-1; i >=0; i--){
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d196      	bne.n	8003ae2 <translate_keypad+0x23a>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003bb4:	7863      	ldrb	r3, [r4, #1]
 8003bb6:	2b2f      	cmp	r3, #47	; 0x2f
 8003bb8:	d8e2      	bhi.n	8003b80 <translate_keypad+0x2d8>
 8003bba:	78a3      	ldrb	r3, [r4, #2]
 8003bbc:	2b2f      	cmp	r3, #47	; 0x2f
 8003bbe:	d909      	bls.n	8003bd4 <translate_keypad+0x32c>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003bc0:	2702      	movs	r7, #2
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003bc2:	f04f 080a 	mov.w	r8, #10
	float num = 0;
 8003bc6:	2500      	movs	r5, #0
 8003bc8:	e6ee      	b.n	80039a8 <translate_keypad+0x100>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003bca:	2702      	movs	r7, #2
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003bcc:	f04f 080a 	mov.w	r8, #10
	float num = 0;
 8003bd0:	2500      	movs	r5, #0
 8003bd2:	e6e6      	b.n	80039a2 <translate_keypad+0xfa>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003bd4:	2603      	movs	r6, #3
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003bd6:	f04f 080a 	mov.w	r8, #10
	float num = 0;
 8003bda:	2500      	movs	r5, #0
 8003bdc:	e6ec      	b.n	80039b8 <translate_keypad+0x110>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003bde:	2600      	movs	r6, #0
 8003be0:	2701      	movs	r7, #1
 8003be2:	e696      	b.n	8003912 <translate_keypad+0x6a>
 8003be4:	42400000 	.word	0x42400000
 8003be8:	41200000 	.word	0x41200000
 8003bec:	00000000 	.word	0x00000000

08003bf0 <fill_keypad>:
void fill_keypad(uint8_t va, float num){
 8003bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
				keypaddecimal = 0;
 8003bf2:	f04f 0c00 	mov.w	ip, #0
			keypadarr[0] = num;
 8003bf6:	277a      	movs	r7, #122	; 0x7a
void fill_keypad(uint8_t va, float num){
 8003bf8:	460e      	mov	r6, r1
 8003bfa:	4c85      	ldr	r4, [pc, #532]	; (8003e10 <fill_keypad+0x220>)
			if(keypadarr[4] == '.'){
 8003bfc:	4b85      	ldr	r3, [pc, #532]	; (8003e14 <fill_keypad+0x224>)
				keypaddecimal = 0;
 8003bfe:	4d86      	ldr	r5, [pc, #536]	; (8003e18 <fill_keypad+0x228>)
void fill_keypad(uint8_t va, float num){
 8003c00:	b083      	sub	sp, #12
	while(keypaditerator < 4){
 8003c02:	7822      	ldrb	r2, [r4, #0]
 8003c04:	b252      	sxtb	r2, r2
 8003c06:	2a03      	cmp	r2, #3
 8003c08:	dc1d      	bgt.n	8003c46 <fill_keypad+0x56>
		if(keypaditerator < keypadlength-1){
 8003c0a:	7822      	ldrb	r2, [r4, #0]
 8003c0c:	b252      	sxtb	r2, r2
 8003c0e:	2a03      	cmp	r2, #3
 8003c10:	dcf7      	bgt.n	8003c02 <fill_keypad+0x12>
			if(keypadarr[4] == '.'){
 8003c12:	791a      	ldrb	r2, [r3, #4]
 8003c14:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8003c16:	bf08      	it	eq
 8003c18:	f885 c000 	strbeq.w	ip, [r5]
				keypadarr[i+1] = keypadarr[i];
 8003c1c:	78da      	ldrb	r2, [r3, #3]
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	711a      	strb	r2, [r3, #4]
 8003c22:	789a      	ldrb	r2, [r3, #2]
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	70da      	strb	r2, [r3, #3]
 8003c28:	785a      	ldrb	r2, [r3, #1]
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	709a      	strb	r2, [r3, #2]
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	705a      	strb	r2, [r3, #1]
			keypadarr[0] = num;
 8003c34:	701f      	strb	r7, [r3, #0]
			keypaditerator++;
 8003c36:	7822      	ldrb	r2, [r4, #0]
 8003c38:	3201      	adds	r2, #1
 8003c3a:	b252      	sxtb	r2, r2
 8003c3c:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8003c3e:	7822      	ldrb	r2, [r4, #0]
 8003c40:	b252      	sxtb	r2, r2
 8003c42:	2a03      	cmp	r2, #3
 8003c44:	dde1      	ble.n	8003c0a <fill_keypad+0x1a>
	if(va){
 8003c46:	2800      	cmp	r0, #0
 8003c48:	d054      	beq.n	8003cf4 <fill_keypad+0x104>
		volatile int temp = (int)(num * 1000);
 8003c4a:	4974      	ldr	r1, [pc, #464]	; (8003e1c <fill_keypad+0x22c>)
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	f7fd f841 	bl	8000cd4 <__aeabi_fmul>
 8003c52:	f7fd fa05 	bl	8001060 <__aeabi_f2iz>
 8003c56:	4603      	mov	r3, r0
		if(num <= 0.0001){
 8003c58:	4630      	mov	r0, r6
		volatile int temp = (int)(num * 1000);
 8003c5a:	9300      	str	r3, [sp, #0]
		if(num <= 0.0001){
 8003c5c:	f7fc fbfc 	bl	8000458 <__aeabi_f2d>
 8003c60:	a363      	add	r3, pc, #396	; (adr r3, 8003df0 <fill_keypad+0x200>)
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	4606      	mov	r6, r0
 8003c68:	460f      	mov	r7, r1
 8003c6a:	f7fc fec9 	bl	8000a00 <__aeabi_dcmple>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	f040 809e 	bne.w	8003db0 <fill_keypad+0x1c0>
					keypadarr[keypaditerator] = '.';
 8003c74:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8003c78:	4969      	ldr	r1, [pc, #420]	; (8003e20 <fill_keypad+0x230>)
 8003c7a:	4866      	ldr	r0, [pc, #408]	; (8003e14 <fill_keypad+0x224>)
 8003c7c:	e020      	b.n	8003cc0 <fill_keypad+0xd0>
			while(temp != 0 && keypaditerator >= 0){
 8003c7e:	7823      	ldrb	r3, [r4, #0]
 8003c80:	061b      	lsls	r3, r3, #24
 8003c82:	d420      	bmi.n	8003cc6 <fill_keypad+0xd6>
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8003c84:	9b00      	ldr	r3, [sp, #0]
 8003c86:	7825      	ldrb	r5, [r4, #0]
 8003c88:	fb81 2e03 	smull	r2, lr, r1, r3
 8003c8c:	17da      	asrs	r2, r3, #31
 8003c8e:	ebc2 02ae 	rsb	r2, r2, lr, asr #2
 8003c92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003c96:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8003c9a:	3330      	adds	r3, #48	; 0x30
 8003c9c:	b26d      	sxtb	r5, r5
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	5543      	strb	r3, [r0, r5]
				temp = temp / 10;
 8003ca2:	9b00      	ldr	r3, [sp, #0]
 8003ca4:	fb81 5203 	smull	r5, r2, r1, r3
 8003ca8:	17db      	asrs	r3, r3, #31
 8003caa:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8003cae:	9300      	str	r3, [sp, #0]
				keypaditerator--;
 8003cb0:	7823      	ldrb	r3, [r4, #0]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b25b      	sxtb	r3, r3
 8003cb6:	7023      	strb	r3, [r4, #0]
				if(keypaditerator == 1){
 8003cb8:	7823      	ldrb	r3, [r4, #0]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	f000 8084 	beq.w	8003dc8 <fill_keypad+0x1d8>
			while(temp != 0 && keypaditerator >= 0){
 8003cc0:	9b00      	ldr	r3, [sp, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1db      	bne.n	8003c7e <fill_keypad+0x8e>
			if(keypaditerator >= 0 && num <= 0.999999){
 8003cc6:	7823      	ldrb	r3, [r4, #0]
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	d46f      	bmi.n	8003dac <fill_keypad+0x1bc>
 8003ccc:	a34a      	add	r3, pc, #296	; (adr r3, 8003df8 <fill_keypad+0x208>)
 8003cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	4639      	mov	r1, r7
 8003cd6:	f7fc fe93 	bl	8000a00 <__aeabi_dcmple>
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	d066      	beq.n	8003dac <fill_keypad+0x1bc>
				keypadarr[keypaditerator] = '0';
 8003cde:	2130      	movs	r1, #48	; 0x30
 8003ce0:	7823      	ldrb	r3, [r4, #0]
 8003ce2:	4a4c      	ldr	r2, [pc, #304]	; (8003e14 <fill_keypad+0x224>)
 8003ce4:	b25b      	sxtb	r3, r3
 8003ce6:	54d1      	strb	r1, [r2, r3]
				keypaditerator--;
 8003ce8:	7823      	ldrb	r3, [r4, #0]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b25b      	sxtb	r3, r3
 8003cee:	7023      	strb	r3, [r4, #0]
}
 8003cf0:	b003      	add	sp, #12
 8003cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		volatile int temp = (int)(num * 100);
 8003cf4:	494b      	ldr	r1, [pc, #300]	; (8003e24 <fill_keypad+0x234>)
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f7fc ffec 	bl	8000cd4 <__aeabi_fmul>
 8003cfc:	f7fd f9b0 	bl	8001060 <__aeabi_f2iz>
 8003d00:	4603      	mov	r3, r0
		if(num <= 0.001){
 8003d02:	4630      	mov	r0, r6
		volatile int temp = (int)(num * 100);
 8003d04:	9301      	str	r3, [sp, #4]
		if(num <= 0.001){
 8003d06:	f7fc fba7 	bl	8000458 <__aeabi_f2d>
 8003d0a:	a33d      	add	r3, pc, #244	; (adr r3, 8003e00 <fill_keypad+0x210>)
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	4606      	mov	r6, r0
 8003d12:	460f      	mov	r7, r1
 8003d14:	f7fc fe74 	bl	8000a00 <__aeabi_dcmple>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	d13d      	bne.n	8003d98 <fill_keypad+0x1a8>
					keypadarr[keypaditerator] = '.';
 8003d1c:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8003d20:	493f      	ldr	r1, [pc, #252]	; (8003e20 <fill_keypad+0x230>)
 8003d22:	483c      	ldr	r0, [pc, #240]	; (8003e14 <fill_keypad+0x224>)
 8003d24:	e01f      	b.n	8003d66 <fill_keypad+0x176>
			while(temp != 0 && keypaditerator >= 0){
 8003d26:	7823      	ldrb	r3, [r4, #0]
 8003d28:	061d      	lsls	r5, r3, #24
 8003d2a:	d41f      	bmi.n	8003d6c <fill_keypad+0x17c>
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8003d2c:	9b01      	ldr	r3, [sp, #4]
 8003d2e:	7825      	ldrb	r5, [r4, #0]
 8003d30:	fb81 2e03 	smull	r2, lr, r1, r3
 8003d34:	17da      	asrs	r2, r3, #31
 8003d36:	ebc2 02ae 	rsb	r2, r2, lr, asr #2
 8003d3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003d3e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8003d42:	3330      	adds	r3, #48	; 0x30
 8003d44:	b26d      	sxtb	r5, r5
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	5543      	strb	r3, [r0, r5]
				temp = temp / 10;
 8003d4a:	9b01      	ldr	r3, [sp, #4]
 8003d4c:	fb81 5203 	smull	r5, r2, r1, r3
 8003d50:	17db      	asrs	r3, r3, #31
 8003d52:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8003d56:	9301      	str	r3, [sp, #4]
				keypaditerator--;
 8003d58:	7823      	ldrb	r3, [r4, #0]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b25b      	sxtb	r3, r3
 8003d5e:	7023      	strb	r3, [r4, #0]
				if(keypaditerator == 2){
 8003d60:	7823      	ldrb	r3, [r4, #0]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d039      	beq.n	8003dda <fill_keypad+0x1ea>
			while(temp != 0 && keypaditerator >= 0){
 8003d66:	9b01      	ldr	r3, [sp, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1dc      	bne.n	8003d26 <fill_keypad+0x136>
			if(keypaditerator >= 0 && num <= 9.999999){
 8003d6c:	7823      	ldrb	r3, [r4, #0]
 8003d6e:	061a      	lsls	r2, r3, #24
 8003d70:	d4a9      	bmi.n	8003cc6 <fill_keypad+0xd6>
 8003d72:	a325      	add	r3, pc, #148	; (adr r3, 8003e08 <fill_keypad+0x218>)
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	4630      	mov	r0, r6
 8003d7a:	4639      	mov	r1, r7
 8003d7c:	f7fc fe40 	bl	8000a00 <__aeabi_dcmple>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d0a0      	beq.n	8003cc6 <fill_keypad+0xd6>
				keypadarr[keypaditerator] = '0';
 8003d84:	2130      	movs	r1, #48	; 0x30
 8003d86:	7823      	ldrb	r3, [r4, #0]
 8003d88:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <fill_keypad+0x224>)
 8003d8a:	b25b      	sxtb	r3, r3
 8003d8c:	54d1      	strb	r1, [r2, r3]
				keypaditerator--;
 8003d8e:	7823      	ldrb	r3, [r4, #0]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b25b      	sxtb	r3, r3
 8003d94:	7023      	strb	r3, [r4, #0]
 8003d96:	e796      	b.n	8003cc6 <fill_keypad+0xd6>
			keypadarr[0] = '0';
 8003d98:	2230      	movs	r2, #48	; 0x30
			keypadarr[2] = '.';
 8003d9a:	202e      	movs	r0, #46	; 0x2e
			keypaditerator = -1;
 8003d9c:	21ff      	movs	r1, #255	; 0xff
			keypadarr[0] = '0';
 8003d9e:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <fill_keypad+0x224>)
 8003da0:	701a      	strb	r2, [r3, #0]
			keypadarr[1] = '0';
 8003da2:	705a      	strb	r2, [r3, #1]
			keypadarr[2] = '.';
 8003da4:	7098      	strb	r0, [r3, #2]
			keypadarr[3] = '0';
 8003da6:	70da      	strb	r2, [r3, #3]
			keypadarr[4] = '0';
 8003da8:	711a      	strb	r2, [r3, #4]
			keypaditerator = -1;
 8003daa:	7021      	strb	r1, [r4, #0]
}
 8003dac:	b003      	add	sp, #12
 8003dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			keypadarr[0] = '0';
 8003db0:	2230      	movs	r2, #48	; 0x30
			keypadarr[1] = '.';
 8003db2:	202e      	movs	r0, #46	; 0x2e
			keypaditerator = -1;
 8003db4:	21ff      	movs	r1, #255	; 0xff
			keypadarr[0] = '0';
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <fill_keypad+0x224>)
 8003db8:	701a      	strb	r2, [r3, #0]
			keypadarr[1] = '.';
 8003dba:	7058      	strb	r0, [r3, #1]
			keypadarr[2] = '0';
 8003dbc:	709a      	strb	r2, [r3, #2]
			keypadarr[3] = '0';
 8003dbe:	70da      	strb	r2, [r3, #3]
			keypadarr[4] = '0';
 8003dc0:	711a      	strb	r2, [r3, #4]
			keypaditerator = -1;
 8003dc2:	7021      	strb	r1, [r4, #0]
}
 8003dc4:	b003      	add	sp, #12
 8003dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					keypadarr[keypaditerator] = '.';
 8003dc8:	7823      	ldrb	r3, [r4, #0]
 8003dca:	b25b      	sxtb	r3, r3
 8003dcc:	f800 c003 	strb.w	ip, [r0, r3]
					keypaditerator--;
 8003dd0:	7823      	ldrb	r3, [r4, #0]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b25b      	sxtb	r3, r3
 8003dd6:	7023      	strb	r3, [r4, #0]
 8003dd8:	e772      	b.n	8003cc0 <fill_keypad+0xd0>
					keypadarr[keypaditerator] = '.';
 8003dda:	7823      	ldrb	r3, [r4, #0]
 8003ddc:	b25b      	sxtb	r3, r3
 8003dde:	f800 c003 	strb.w	ip, [r0, r3]
					keypaditerator--;
 8003de2:	7823      	ldrb	r3, [r4, #0]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b25b      	sxtb	r3, r3
 8003de8:	7023      	strb	r3, [r4, #0]
 8003dea:	e7bc      	b.n	8003d66 <fill_keypad+0x176>
 8003dec:	f3af 8000 	nop.w
 8003df0:	eb1c432d 	.word	0xeb1c432d
 8003df4:	3f1a36e2 	.word	0x3f1a36e2
 8003df8:	e7210be9 	.word	0xe7210be9
 8003dfc:	3feffffd 	.word	0x3feffffd
 8003e00:	d2f1a9fc 	.word	0xd2f1a9fc
 8003e04:	3f50624d 	.word	0x3f50624d
 8003e08:	de7210bf 	.word	0xde7210bf
 8003e0c:	4023ffff 	.word	0x4023ffff
 8003e10:	20000005 	.word	0x20000005
 8003e14:	20000000 	.word	0x20000000
 8003e18:	200006c4 	.word	0x200006c4
 8003e1c:	447a0000 	.word	0x447a0000
 8003e20:	66666667 	.word	0x66666667
 8003e24:	42c80000 	.word	0x42c80000

08003e28 <inc_arr_v>:
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8003e28:	4603      	mov	r3, r0
void inc_arr_v(int8_t pos){
 8003e2a:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8003e2c:	bb70      	cbnz	r0, 8003e8c <inc_arr_v+0x64>
 8003e2e:	4c59      	ldr	r4, [pc, #356]	; (8003f94 <inc_arr_v+0x16c>)
 8003e30:	7822      	ldrb	r2, [r4, #0]
 8003e32:	2a31      	cmp	r2, #49	; 0x31
 8003e34:	d06a      	beq.n	8003f0c <inc_arr_v+0xe4>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8003e36:	7822      	ldrb	r2, [r4, #0]
 8003e38:	2a30      	cmp	r2, #48	; 0x30
 8003e3a:	f000 8081 	beq.w	8003f40 <inc_arr_v+0x118>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8003e3e:	7822      	ldrb	r2, [r4, #0]
 8003e40:	2a30      	cmp	r2, #48	; 0x30
 8003e42:	f000 8089 	beq.w	8003f58 <inc_arr_v+0x130>
			if(keypadarr[pos] < '9'){
 8003e46:	5ce2      	ldrb	r2, [r4, r3]
 8003e48:	2a38      	cmp	r2, #56	; 0x38
 8003e4a:	f200 808a 	bhi.w	8003f62 <inc_arr_v+0x13a>
				keypadarr[pos]++;
 8003e4e:	5ce2      	ldrb	r2, [r4, r3]
 8003e50:	3201      	adds	r2, #1
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	54e2      	strb	r2, [r4, r3]
		if(keypadarr[i] != 'z'){
 8003e56:	7823      	ldrb	r3, [r4, #0]
 8003e58:	2b7a      	cmp	r3, #122	; 0x7a
 8003e5a:	d111      	bne.n	8003e80 <inc_arr_v+0x58>
 8003e5c:	7863      	ldrb	r3, [r4, #1]
 8003e5e:	2b7a      	cmp	r3, #122	; 0x7a
 8003e60:	f040 8090 	bne.w	8003f84 <inc_arr_v+0x15c>
 8003e64:	78a3      	ldrb	r3, [r4, #2]
 8003e66:	2b7a      	cmp	r3, #122	; 0x7a
 8003e68:	f040 808e 	bne.w	8003f88 <inc_arr_v+0x160>
 8003e6c:	78e3      	ldrb	r3, [r4, #3]
 8003e6e:	2b7a      	cmp	r3, #122	; 0x7a
 8003e70:	f040 808c 	bne.w	8003f8c <inc_arr_v+0x164>
 8003e74:	7923      	ldrb	r3, [r4, #4]
 8003e76:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8003e78:	bf18      	it	ne
 8003e7a:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8003e7c:	d101      	bne.n	8003e82 <inc_arr_v+0x5a>
}
 8003e7e:	bd10      	pop	{r4, pc}
	for(int i = 0; i < keypadlength; i++){
 8003e80:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8003e82:	4a45      	ldr	r2, [pc, #276]	; (8003f98 <inc_arr_v+0x170>)
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b25b      	sxtb	r3, r3
 8003e88:	7013      	strb	r3, [r2, #0]
}
 8003e8a:	bd10      	pop	{r4, pc}
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8003e8c:	2801      	cmp	r0, #1
 8003e8e:	d119      	bne.n	8003ec4 <inc_arr_v+0x9c>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8003e90:	4c40      	ldr	r4, [pc, #256]	; (8003f94 <inc_arr_v+0x16c>)
 8003e92:	7822      	ldrb	r2, [r4, #0]
 8003e94:	2a31      	cmp	r2, #49	; 0x31
 8003e96:	d06b      	beq.n	8003f70 <inc_arr_v+0x148>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8003e98:	7822      	ldrb	r2, [r4, #0]
 8003e9a:	2a31      	cmp	r2, #49	; 0x31
 8003e9c:	d1d3      	bne.n	8003e46 <inc_arr_v+0x1e>
 8003e9e:	7862      	ldrb	r2, [r4, #1]
 8003ea0:	2a31      	cmp	r2, #49	; 0x31
 8003ea2:	d1d0      	bne.n	8003e46 <inc_arr_v+0x1e>
 8003ea4:	78e2      	ldrb	r2, [r4, #3]
 8003ea6:	2a30      	cmp	r2, #48	; 0x30
 8003ea8:	d802      	bhi.n	8003eb0 <inc_arr_v+0x88>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 8003eaa:	7922      	ldrb	r2, [r4, #4]
 8003eac:	2a30      	cmp	r2, #48	; 0x30
 8003eae:	d9ca      	bls.n	8003e46 <inc_arr_v+0x1e>
		keypadarr[3] = '0';
 8003eb0:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '1';
 8003eb2:	2031      	movs	r0, #49	; 0x31
		keypadarr[1] = '2';
 8003eb4:	2132      	movs	r1, #50	; 0x32
		keypadarr[2] = '.';
 8003eb6:	222e      	movs	r2, #46	; 0x2e
		keypadarr[0] = '1';
 8003eb8:	7020      	strb	r0, [r4, #0]
		keypadarr[1] = '2';
 8003eba:	7061      	strb	r1, [r4, #1]
		keypadarr[2] = '.';
 8003ebc:	70a2      	strb	r2, [r4, #2]
		keypadarr[3] = '0';
 8003ebe:	70e3      	strb	r3, [r4, #3]
		keypadarr[4] = '0';
 8003ec0:	7123      	strb	r3, [r4, #4]
 8003ec2:	e7c8      	b.n	8003e56 <inc_arr_v+0x2e>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8003ec4:	2803      	cmp	r0, #3
 8003ec6:	d10d      	bne.n	8003ee4 <inc_arr_v+0xbc>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8003ec8:	4c32      	ldr	r4, [pc, #200]	; (8003f94 <inc_arr_v+0x16c>)
 8003eca:	7822      	ldrb	r2, [r4, #0]
 8003ecc:	2a31      	cmp	r2, #49	; 0x31
 8003ece:	d027      	beq.n	8003f20 <inc_arr_v+0xf8>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 8003ed0:	7822      	ldrb	r2, [r4, #0]
 8003ed2:	2a31      	cmp	r2, #49	; 0x31
 8003ed4:	d1b7      	bne.n	8003e46 <inc_arr_v+0x1e>
 8003ed6:	7862      	ldrb	r2, [r4, #1]
 8003ed8:	2a31      	cmp	r2, #49	; 0x31
 8003eda:	d1b4      	bne.n	8003e46 <inc_arr_v+0x1e>
 8003edc:	78e2      	ldrb	r2, [r4, #3]
 8003ede:	2a39      	cmp	r2, #57	; 0x39
 8003ee0:	d1b1      	bne.n	8003e46 <inc_arr_v+0x1e>
 8003ee2:	e7e2      	b.n	8003eaa <inc_arr_v+0x82>
 8003ee4:	2804      	cmp	r0, #4
 8003ee6:	d10d      	bne.n	8003f04 <inc_arr_v+0xdc>
		!(pos == 4 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 8003ee8:	4c2a      	ldr	r4, [pc, #168]	; (8003f94 <inc_arr_v+0x16c>)
 8003eea:	7822      	ldrb	r2, [r4, #0]
 8003eec:	2a31      	cmp	r2, #49	; 0x31
 8003eee:	d1aa      	bne.n	8003e46 <inc_arr_v+0x1e>
 8003ef0:	7862      	ldrb	r2, [r4, #1]
 8003ef2:	2a32      	cmp	r2, #50	; 0x32
 8003ef4:	d1a7      	bne.n	8003e46 <inc_arr_v+0x1e>
 8003ef6:	78e2      	ldrb	r2, [r4, #3]
 8003ef8:	2a30      	cmp	r2, #48	; 0x30
 8003efa:	d1a4      	bne.n	8003e46 <inc_arr_v+0x1e>
 8003efc:	7922      	ldrb	r2, [r4, #4]
 8003efe:	2a30      	cmp	r2, #48	; 0x30
 8003f00:	d1a1      	bne.n	8003e46 <inc_arr_v+0x1e>
 8003f02:	e7d5      	b.n	8003eb0 <inc_arr_v+0x88>
		if(pos >= 0 && pos != 2){
 8003f04:	2800      	cmp	r0, #0
 8003f06:	da15      	bge.n	8003f34 <inc_arr_v+0x10c>
 8003f08:	4c22      	ldr	r4, [pc, #136]	; (8003f94 <inc_arr_v+0x16c>)
 8003f0a:	e7a4      	b.n	8003e56 <inc_arr_v+0x2e>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8003f0c:	7862      	ldrb	r2, [r4, #1]
 8003f0e:	2a2f      	cmp	r2, #47	; 0x2f
 8003f10:	d991      	bls.n	8003e36 <inc_arr_v+0xe>
 8003f12:	78e2      	ldrb	r2, [r4, #3]
 8003f14:	2a2f      	cmp	r2, #47	; 0x2f
 8003f16:	d98e      	bls.n	8003e36 <inc_arr_v+0xe>
 8003f18:	7922      	ldrb	r2, [r4, #4]
 8003f1a:	2a2f      	cmp	r2, #47	; 0x2f
 8003f1c:	d8c8      	bhi.n	8003eb0 <inc_arr_v+0x88>
 8003f1e:	e78a      	b.n	8003e36 <inc_arr_v+0xe>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8003f20:	7862      	ldrb	r2, [r4, #1]
 8003f22:	2a32      	cmp	r2, #50	; 0x32
 8003f24:	d1d4      	bne.n	8003ed0 <inc_arr_v+0xa8>
 8003f26:	78e2      	ldrb	r2, [r4, #3]
 8003f28:	2a30      	cmp	r2, #48	; 0x30
 8003f2a:	d1d1      	bne.n	8003ed0 <inc_arr_v+0xa8>
 8003f2c:	7922      	ldrb	r2, [r4, #4]
 8003f2e:	2a2f      	cmp	r2, #47	; 0x2f
 8003f30:	d8be      	bhi.n	8003eb0 <inc_arr_v+0x88>
 8003f32:	e7cd      	b.n	8003ed0 <inc_arr_v+0xa8>
		if(pos >= 0 && pos != 2){
 8003f34:	2802      	cmp	r0, #2
 8003f36:	d12b      	bne.n	8003f90 <inc_arr_v+0x168>
			inc_arr_v(pos-1);
 8003f38:	2001      	movs	r0, #1
 8003f3a:	f7ff ff75 	bl	8003e28 <inc_arr_v>
 8003f3e:	e7e3      	b.n	8003f08 <inc_arr_v+0xe0>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8003f40:	7862      	ldrb	r2, [r4, #1]
 8003f42:	2a32      	cmp	r2, #50	; 0x32
 8003f44:	f67f af7b 	bls.w	8003e3e <inc_arr_v+0x16>
 8003f48:	78e2      	ldrb	r2, [r4, #3]
 8003f4a:	2a2f      	cmp	r2, #47	; 0x2f
 8003f4c:	f67f af77 	bls.w	8003e3e <inc_arr_v+0x16>
 8003f50:	7922      	ldrb	r2, [r4, #4]
 8003f52:	2a2f      	cmp	r2, #47	; 0x2f
 8003f54:	d8ac      	bhi.n	8003eb0 <inc_arr_v+0x88>
 8003f56:	e772      	b.n	8003e3e <inc_arr_v+0x16>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8003f58:	7862      	ldrb	r2, [r4, #1]
 8003f5a:	2a31      	cmp	r2, #49	; 0x31
 8003f5c:	f67f af73 	bls.w	8003e46 <inc_arr_v+0x1e>
 8003f60:	e7a0      	b.n	8003ea4 <inc_arr_v+0x7c>
				keypadarr[pos] = '0';
 8003f62:	2230      	movs	r2, #48	; 0x30
				inc_arr_v(pos-1);
 8003f64:	1e58      	subs	r0, r3, #1
 8003f66:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 8003f68:	54e2      	strb	r2, [r4, r3]
				inc_arr_v(pos-1);
 8003f6a:	f7ff ff5d 	bl	8003e28 <inc_arr_v>
 8003f6e:	e772      	b.n	8003e56 <inc_arr_v+0x2e>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8003f70:	7862      	ldrb	r2, [r4, #1]
 8003f72:	2a32      	cmp	r2, #50	; 0x32
 8003f74:	d190      	bne.n	8003e98 <inc_arr_v+0x70>
 8003f76:	78e2      	ldrb	r2, [r4, #3]
 8003f78:	2a30      	cmp	r2, #48	; 0x30
 8003f7a:	d18d      	bne.n	8003e98 <inc_arr_v+0x70>
 8003f7c:	7922      	ldrb	r2, [r4, #4]
 8003f7e:	2a30      	cmp	r2, #48	; 0x30
 8003f80:	d18a      	bne.n	8003e98 <inc_arr_v+0x70>
 8003f82:	e795      	b.n	8003eb0 <inc_arr_v+0x88>
	for(int i = 0; i < keypadlength; i++){
 8003f84:	2301      	movs	r3, #1
 8003f86:	e77c      	b.n	8003e82 <inc_arr_v+0x5a>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e77a      	b.n	8003e82 <inc_arr_v+0x5a>
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e778      	b.n	8003e82 <inc_arr_v+0x5a>
 8003f90:	4c00      	ldr	r4, [pc, #0]	; (8003f94 <inc_arr_v+0x16c>)
 8003f92:	e758      	b.n	8003e46 <inc_arr_v+0x1e>
 8003f94:	20000000 	.word	0x20000000
 8003f98:	20000005 	.word	0x20000005

08003f9c <inc_arr_a>:
void inc_arr_a(int8_t pos){
 8003f9c:	b510      	push	{r4, lr}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 8003f9e:	b9d0      	cbnz	r0, 8003fd6 <inc_arr_a+0x3a>
 8003fa0:	4c45      	ldr	r4, [pc, #276]	; (80040b8 <inc_arr_a+0x11c>)
		keypadarr[0] = '0';
 8003fa2:	2330      	movs	r3, #48	; 0x30
		keypadarr[1] = '.';
 8003fa4:	212e      	movs	r1, #46	; 0x2e
		keypadarr[2] = '8';
 8003fa6:	2238      	movs	r2, #56	; 0x38
		keypadarr[0] = '0';
 8003fa8:	7023      	strb	r3, [r4, #0]
		keypadarr[1] = '.';
 8003faa:	7061      	strb	r1, [r4, #1]
		keypadarr[2] = '8';
 8003fac:	70a2      	strb	r2, [r4, #2]
		keypadarr[3] = '0';
 8003fae:	70e3      	strb	r3, [r4, #3]
		keypadarr[4] = '0';
 8003fb0:	7123      	strb	r3, [r4, #4]
		if(keypadarr[i] != 'z'){
 8003fb2:	7823      	ldrb	r3, [r4, #0]
 8003fb4:	2b7a      	cmp	r3, #122	; 0x7a
 8003fb6:	d119      	bne.n	8003fec <inc_arr_a+0x50>
 8003fb8:	7863      	ldrb	r3, [r4, #1]
 8003fba:	2b7a      	cmp	r3, #122	; 0x7a
 8003fbc:	d173      	bne.n	80040a6 <inc_arr_a+0x10a>
 8003fbe:	78a3      	ldrb	r3, [r4, #2]
 8003fc0:	2b7a      	cmp	r3, #122	; 0x7a
 8003fc2:	d172      	bne.n	80040aa <inc_arr_a+0x10e>
 8003fc4:	78e3      	ldrb	r3, [r4, #3]
 8003fc6:	2b7a      	cmp	r3, #122	; 0x7a
 8003fc8:	d171      	bne.n	80040ae <inc_arr_a+0x112>
 8003fca:	7923      	ldrb	r3, [r4, #4]
 8003fcc:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8003fce:	bf18      	it	ne
 8003fd0:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8003fd2:	d10c      	bne.n	8003fee <inc_arr_a+0x52>
}
 8003fd4:	bd10      	pop	{r4, pc}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 8003fd6:	2802      	cmp	r0, #2
 8003fd8:	4603      	mov	r3, r0
 8003fda:	d00d      	beq.n	8003ff8 <inc_arr_a+0x5c>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8003fdc:	2803      	cmp	r0, #3
 8003fde:	d020      	beq.n	8004022 <inc_arr_a+0x86>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 8003fe0:	2804      	cmp	r0, #4
 8003fe2:	d02c      	beq.n	800403e <inc_arr_a+0xa2>
		if(pos >= 0 && pos != 1){
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	da16      	bge.n	8004016 <inc_arr_a+0x7a>
 8003fe8:	4c33      	ldr	r4, [pc, #204]	; (80040b8 <inc_arr_a+0x11c>)
 8003fea:	e7e2      	b.n	8003fb2 <inc_arr_a+0x16>
	for(int i = 0; i < keypadlength; i++){
 8003fec:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8003fee:	4a33      	ldr	r2, [pc, #204]	; (80040bc <inc_arr_a+0x120>)
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b25b      	sxtb	r3, r3
 8003ff4:	7013      	strb	r3, [r2, #0]
}
 8003ff6:	bd10      	pop	{r4, pc}
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8003ff8:	4c2f      	ldr	r4, [pc, #188]	; (80040b8 <inc_arr_a+0x11c>)
 8003ffa:	7822      	ldrb	r2, [r4, #0]
 8003ffc:	2a30      	cmp	r2, #48	; 0x30
 8003ffe:	d033      	beq.n	8004068 <inc_arr_a+0xcc>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004000:	7822      	ldrb	r2, [r4, #0]
 8004002:	2a30      	cmp	r2, #48	; 0x30
 8004004:	d03a      	beq.n	800407c <inc_arr_a+0xe0>
			if(keypadarr[pos] < '9'){
 8004006:	5ce2      	ldrb	r2, [r4, r3]
 8004008:	2a38      	cmp	r2, #56	; 0x38
 800400a:	d826      	bhi.n	800405a <inc_arr_a+0xbe>
				keypadarr[pos]++;
 800400c:	5ce2      	ldrb	r2, [r4, r3]
 800400e:	3201      	adds	r2, #1
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	54e2      	strb	r2, [r4, r3]
 8004014:	e7cd      	b.n	8003fb2 <inc_arr_a+0x16>
		if(pos >= 0 && pos != 1){
 8004016:	2801      	cmp	r0, #1
 8004018:	d14b      	bne.n	80040b2 <inc_arr_a+0x116>
			inc_arr_a(pos-1);
 800401a:	2000      	movs	r0, #0
 800401c:	f7ff ffbe 	bl	8003f9c <inc_arr_a>
 8004020:	e7e2      	b.n	8003fe8 <inc_arr_a+0x4c>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004022:	4c25      	ldr	r4, [pc, #148]	; (80040b8 <inc_arr_a+0x11c>)
 8004024:	7822      	ldrb	r2, [r4, #0]
 8004026:	2a30      	cmp	r2, #48	; 0x30
 8004028:	d032      	beq.n	8004090 <inc_arr_a+0xf4>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 800402a:	7822      	ldrb	r2, [r4, #0]
 800402c:	2a30      	cmp	r2, #48	; 0x30
 800402e:	d1ea      	bne.n	8004006 <inc_arr_a+0x6a>
 8004030:	78a2      	ldrb	r2, [r4, #2]
 8004032:	2a37      	cmp	r2, #55	; 0x37
 8004034:	d1e7      	bne.n	8004006 <inc_arr_a+0x6a>
 8004036:	78e2      	ldrb	r2, [r4, #3]
 8004038:	2a39      	cmp	r2, #57	; 0x39
 800403a:	d1e4      	bne.n	8004006 <inc_arr_a+0x6a>
 800403c:	e024      	b.n	8004088 <inc_arr_a+0xec>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 800403e:	4c1e      	ldr	r4, [pc, #120]	; (80040b8 <inc_arr_a+0x11c>)
 8004040:	7822      	ldrb	r2, [r4, #0]
 8004042:	2a30      	cmp	r2, #48	; 0x30
 8004044:	d1df      	bne.n	8004006 <inc_arr_a+0x6a>
 8004046:	78a2      	ldrb	r2, [r4, #2]
 8004048:	2a38      	cmp	r2, #56	; 0x38
 800404a:	d1dc      	bne.n	8004006 <inc_arr_a+0x6a>
 800404c:	78e2      	ldrb	r2, [r4, #3]
 800404e:	2a30      	cmp	r2, #48	; 0x30
 8004050:	d1d9      	bne.n	8004006 <inc_arr_a+0x6a>
 8004052:	7922      	ldrb	r2, [r4, #4]
 8004054:	2a30      	cmp	r2, #48	; 0x30
 8004056:	d1d6      	bne.n	8004006 <inc_arr_a+0x6a>
 8004058:	e7a3      	b.n	8003fa2 <inc_arr_a+0x6>
				keypadarr[pos] = '0';
 800405a:	2230      	movs	r2, #48	; 0x30
				inc_arr_a(pos-1);
 800405c:	1e58      	subs	r0, r3, #1
 800405e:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 8004060:	54e2      	strb	r2, [r4, r3]
				inc_arr_a(pos-1);
 8004062:	f7ff ff9b 	bl	8003f9c <inc_arr_a>
 8004066:	e7a4      	b.n	8003fb2 <inc_arr_a+0x16>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8004068:	78a2      	ldrb	r2, [r4, #2]
 800406a:	2a38      	cmp	r2, #56	; 0x38
 800406c:	d1c8      	bne.n	8004000 <inc_arr_a+0x64>
 800406e:	78e2      	ldrb	r2, [r4, #3]
 8004070:	2a30      	cmp	r2, #48	; 0x30
 8004072:	d1c5      	bne.n	8004000 <inc_arr_a+0x64>
 8004074:	7922      	ldrb	r2, [r4, #4]
 8004076:	2a30      	cmp	r2, #48	; 0x30
 8004078:	d1c2      	bne.n	8004000 <inc_arr_a+0x64>
 800407a:	e792      	b.n	8003fa2 <inc_arr_a+0x6>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800407c:	78a2      	ldrb	r2, [r4, #2]
 800407e:	2a37      	cmp	r2, #55	; 0x37
 8004080:	d1c1      	bne.n	8004006 <inc_arr_a+0x6a>
 8004082:	78e2      	ldrb	r2, [r4, #3]
 8004084:	2a30      	cmp	r2, #48	; 0x30
 8004086:	d88c      	bhi.n	8003fa2 <inc_arr_a+0x6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 8004088:	7922      	ldrb	r2, [r4, #4]
 800408a:	2a30      	cmp	r2, #48	; 0x30
 800408c:	d9bb      	bls.n	8004006 <inc_arr_a+0x6a>
 800408e:	e788      	b.n	8003fa2 <inc_arr_a+0x6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004090:	78a2      	ldrb	r2, [r4, #2]
 8004092:	2a38      	cmp	r2, #56	; 0x38
 8004094:	d1c9      	bne.n	800402a <inc_arr_a+0x8e>
 8004096:	78e2      	ldrb	r2, [r4, #3]
 8004098:	2a30      	cmp	r2, #48	; 0x30
 800409a:	d1c6      	bne.n	800402a <inc_arr_a+0x8e>
 800409c:	7922      	ldrb	r2, [r4, #4]
 800409e:	2a2f      	cmp	r2, #47	; 0x2f
 80040a0:	f63f af7f 	bhi.w	8003fa2 <inc_arr_a+0x6>
 80040a4:	e7c1      	b.n	800402a <inc_arr_a+0x8e>
	for(int i = 0; i < keypadlength; i++){
 80040a6:	2301      	movs	r3, #1
 80040a8:	e7a1      	b.n	8003fee <inc_arr_a+0x52>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e79f      	b.n	8003fee <inc_arr_a+0x52>
 80040ae:	2303      	movs	r3, #3
 80040b0:	e79d      	b.n	8003fee <inc_arr_a+0x52>
 80040b2:	4c01      	ldr	r4, [pc, #4]	; (80040b8 <inc_arr_a+0x11c>)
 80040b4:	e7a7      	b.n	8004006 <inc_arr_a+0x6a>
 80040b6:	bf00      	nop
 80040b8:	20000000 	.word	0x20000000
 80040bc:	20000005 	.word	0x20000005

080040c0 <dec_arr_v>:
void dec_arr_v(int8_t pos){
 80040c0:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 80040c2:	4603      	mov	r3, r0
 80040c4:	4c4b      	ldr	r4, [pc, #300]	; (80041f4 <dec_arr_v+0x134>)
 80040c6:	b9d8      	cbnz	r0, 8004100 <dec_arr_v+0x40>
 80040c8:	7822      	ldrb	r2, [r4, #0]
 80040ca:	2a30      	cmp	r2, #48	; 0x30
 80040cc:	d020      	beq.n	8004110 <dec_arr_v+0x50>
			if(keypadarr[pos] > '0'){
 80040ce:	5ce2      	ldrb	r2, [r4, r3]
 80040d0:	2a30      	cmp	r2, #48	; 0x30
 80040d2:	d969      	bls.n	80041a8 <dec_arr_v+0xe8>
				keypadarr[pos]--;
 80040d4:	5ce2      	ldrb	r2, [r4, r3]
 80040d6:	3a01      	subs	r2, #1
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	54e2      	strb	r2, [r4, r3]
		if(keypadarr[i] != 'z'){
 80040dc:	7823      	ldrb	r3, [r4, #0]
 80040de:	2b7a      	cmp	r3, #122	; 0x7a
 80040e0:	d15c      	bne.n	800419c <dec_arr_v+0xdc>
 80040e2:	7863      	ldrb	r3, [r4, #1]
 80040e4:	2b7a      	cmp	r3, #122	; 0x7a
 80040e6:	d166      	bne.n	80041b6 <dec_arr_v+0xf6>
 80040e8:	78a3      	ldrb	r3, [r4, #2]
 80040ea:	2b7a      	cmp	r3, #122	; 0x7a
 80040ec:	d165      	bne.n	80041ba <dec_arr_v+0xfa>
 80040ee:	78e3      	ldrb	r3, [r4, #3]
 80040f0:	2b7a      	cmp	r3, #122	; 0x7a
 80040f2:	d164      	bne.n	80041be <dec_arr_v+0xfe>
 80040f4:	7923      	ldrb	r3, [r4, #4]
 80040f6:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 80040f8:	bf18      	it	ne
 80040fa:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 80040fc:	d14f      	bne.n	800419e <dec_arr_v+0xde>
}
 80040fe:	bd10      	pop	{r4, pc}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004100:	2801      	cmp	r0, #1
 8004102:	d10d      	bne.n	8004120 <dec_arr_v+0x60>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004104:	7822      	ldrb	r2, [r4, #0]
 8004106:	2a30      	cmp	r2, #48	; 0x30
 8004108:	d1e1      	bne.n	80040ce <dec_arr_v+0xe>
 800410a:	7862      	ldrb	r2, [r4, #1]
 800410c:	2a30      	cmp	r2, #48	; 0x30
 800410e:	d1de      	bne.n	80040ce <dec_arr_v+0xe>
		keypadarr[0] = '0';
 8004110:	2330      	movs	r3, #48	; 0x30
		keypadarr[2] = '.';
 8004112:	222e      	movs	r2, #46	; 0x2e
		keypadarr[0] = '0';
 8004114:	7023      	strb	r3, [r4, #0]
		keypadarr[1] = '0';
 8004116:	7063      	strb	r3, [r4, #1]
		keypadarr[2] = '.';
 8004118:	70a2      	strb	r2, [r4, #2]
		keypadarr[3] = '0';
 800411a:	70e3      	strb	r3, [r4, #3]
		keypadarr[4] = '0';
 800411c:	7123      	strb	r3, [r4, #4]
 800411e:	e7dd      	b.n	80040dc <dec_arr_v+0x1c>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004120:	2803      	cmp	r0, #3
 8004122:	d031      	beq.n	8004188 <dec_arr_v+0xc8>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 8004124:	2804      	cmp	r0, #4
 8004126:	d10c      	bne.n	8004142 <dec_arr_v+0x82>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 8004128:	7822      	ldrb	r2, [r4, #0]
 800412a:	2a30      	cmp	r2, #48	; 0x30
 800412c:	d1cf      	bne.n	80040ce <dec_arr_v+0xe>
 800412e:	7862      	ldrb	r2, [r4, #1]
 8004130:	2a30      	cmp	r2, #48	; 0x30
 8004132:	d1cc      	bne.n	80040ce <dec_arr_v+0xe>
 8004134:	78e2      	ldrb	r2, [r4, #3]
 8004136:	2a30      	cmp	r2, #48	; 0x30
 8004138:	d1c9      	bne.n	80040ce <dec_arr_v+0xe>
 800413a:	7922      	ldrb	r2, [r4, #4]
 800413c:	2a30      	cmp	r2, #48	; 0x30
 800413e:	d1c6      	bne.n	80040ce <dec_arr_v+0xe>
 8004140:	e7e6      	b.n	8004110 <dec_arr_v+0x50>
		if(pos <= 4 && pos != 2){
 8004142:	dccb      	bgt.n	80040dc <dec_arr_v+0x1c>
 8004144:	2802      	cmp	r0, #2
 8004146:	d1c2      	bne.n	80040ce <dec_arr_v+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004148:	7823      	ldrb	r3, [r4, #0]
 800414a:	2b30      	cmp	r3, #48	; 0x30
 800414c:	d039      	beq.n	80041c2 <dec_arr_v+0x102>
			if(keypadarr[pos] > '0'){
 800414e:	7863      	ldrb	r3, [r4, #1]
 8004150:	2b30      	cmp	r3, #48	; 0x30
 8004152:	d941      	bls.n	80041d8 <dec_arr_v+0x118>
				keypadarr[pos]--;
 8004154:	7863      	ldrb	r3, [r4, #1]
 8004156:	3b01      	subs	r3, #1
 8004158:	b2db      	uxtb	r3, r3
 800415a:	7063      	strb	r3, [r4, #1]
		if(keypadarr[i] != 'z'){
 800415c:	7823      	ldrb	r3, [r4, #0]
 800415e:	2b7a      	cmp	r3, #122	; 0x7a
 8004160:	d140      	bne.n	80041e4 <dec_arr_v+0x124>
 8004162:	7863      	ldrb	r3, [r4, #1]
 8004164:	2b7a      	cmp	r3, #122	; 0x7a
 8004166:	d13f      	bne.n	80041e8 <dec_arr_v+0x128>
 8004168:	78a3      	ldrb	r3, [r4, #2]
 800416a:	2b7a      	cmp	r3, #122	; 0x7a
 800416c:	d13e      	bne.n	80041ec <dec_arr_v+0x12c>
 800416e:	78e3      	ldrb	r3, [r4, #3]
 8004170:	2b7a      	cmp	r3, #122	; 0x7a
 8004172:	d13d      	bne.n	80041f0 <dec_arr_v+0x130>
 8004174:	7923      	ldrb	r3, [r4, #4]
 8004176:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004178:	bf18      	it	ne
 800417a:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 800417c:	d0ae      	beq.n	80040dc <dec_arr_v+0x1c>
			keypaditerator = i - 1;
 800417e:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <dec_arr_v+0x138>)
 8004180:	3b01      	subs	r3, #1
 8004182:	b25b      	sxtb	r3, r3
 8004184:	7013      	strb	r3, [r2, #0]
			break;
 8004186:	e7a9      	b.n	80040dc <dec_arr_v+0x1c>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 8004188:	7822      	ldrb	r2, [r4, #0]
 800418a:	2a30      	cmp	r2, #48	; 0x30
 800418c:	d19f      	bne.n	80040ce <dec_arr_v+0xe>
 800418e:	7862      	ldrb	r2, [r4, #1]
 8004190:	2a30      	cmp	r2, #48	; 0x30
 8004192:	d19c      	bne.n	80040ce <dec_arr_v+0xe>
 8004194:	78e2      	ldrb	r2, [r4, #3]
 8004196:	2a30      	cmp	r2, #48	; 0x30
 8004198:	d199      	bne.n	80040ce <dec_arr_v+0xe>
 800419a:	e7b9      	b.n	8004110 <dec_arr_v+0x50>
	for(int i = 0; i < keypadlength; i++){
 800419c:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 800419e:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <dec_arr_v+0x138>)
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b25b      	sxtb	r3, r3
 80041a4:	7013      	strb	r3, [r2, #0]
}
 80041a6:	bd10      	pop	{r4, pc}
				keypadarr[pos] = '9';
 80041a8:	2239      	movs	r2, #57	; 0x39
				dec_arr_v(pos-1);
 80041aa:	1e58      	subs	r0, r3, #1
 80041ac:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 80041ae:	54e2      	strb	r2, [r4, r3]
				dec_arr_v(pos-1);
 80041b0:	f7ff ff86 	bl	80040c0 <dec_arr_v>
 80041b4:	e792      	b.n	80040dc <dec_arr_v+0x1c>
	for(int i = 0; i < keypadlength; i++){
 80041b6:	2301      	movs	r3, #1
 80041b8:	e7f1      	b.n	800419e <dec_arr_v+0xde>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e7ef      	b.n	800419e <dec_arr_v+0xde>
 80041be:	2303      	movs	r3, #3
 80041c0:	e7ed      	b.n	800419e <dec_arr_v+0xde>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 80041c2:	7863      	ldrb	r3, [r4, #1]
 80041c4:	2b30      	cmp	r3, #48	; 0x30
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	d1c1      	bne.n	800414e <dec_arr_v+0x8e>
		keypadarr[2] = '.';
 80041ca:	232e      	movs	r3, #46	; 0x2e
		keypadarr[0] = '0';
 80041cc:	7022      	strb	r2, [r4, #0]
		keypadarr[1] = '0';
 80041ce:	7062      	strb	r2, [r4, #1]
		keypadarr[2] = '.';
 80041d0:	70a3      	strb	r3, [r4, #2]
		keypadarr[3] = '0';
 80041d2:	70e2      	strb	r2, [r4, #3]
		keypadarr[4] = '0';
 80041d4:	7122      	strb	r2, [r4, #4]
 80041d6:	e7c1      	b.n	800415c <dec_arr_v+0x9c>
				keypadarr[pos] = '9';
 80041d8:	2339      	movs	r3, #57	; 0x39
				dec_arr_v(pos-1);
 80041da:	2000      	movs	r0, #0
				keypadarr[pos] = '9';
 80041dc:	7063      	strb	r3, [r4, #1]
				dec_arr_v(pos-1);
 80041de:	f7ff ff6f 	bl	80040c0 <dec_arr_v>
 80041e2:	e7bb      	b.n	800415c <dec_arr_v+0x9c>
	for(int i = 0; i < keypadlength; i++){
 80041e4:	2300      	movs	r3, #0
 80041e6:	e7ca      	b.n	800417e <dec_arr_v+0xbe>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e7c8      	b.n	800417e <dec_arr_v+0xbe>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e7c6      	b.n	800417e <dec_arr_v+0xbe>
 80041f0:	2303      	movs	r3, #3
 80041f2:	e7c4      	b.n	800417e <dec_arr_v+0xbe>
 80041f4:	20000000 	.word	0x20000000
 80041f8:	20000005 	.word	0x20000005

080041fc <dec_arr_a>:
void dec_arr_a(int8_t pos){
 80041fc:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 80041fe:	4603      	mov	r3, r0
 8004200:	4c4a      	ldr	r4, [pc, #296]	; (800432c <dec_arr_a+0x130>)
 8004202:	b950      	cbnz	r0, 800421a <dec_arr_a+0x1e>
 8004204:	7822      	ldrb	r2, [r4, #0]
 8004206:	2a30      	cmp	r2, #48	; 0x30
 8004208:	d03d      	beq.n	8004286 <dec_arr_a+0x8a>
			if(keypadarr[pos] > '0'){
 800420a:	5ce2      	ldrb	r2, [r4, r3]
 800420c:	2a30      	cmp	r2, #48	; 0x30
 800420e:	d969      	bls.n	80042e4 <dec_arr_a+0xe8>
				keypadarr[pos]--;
 8004210:	5ce2      	ldrb	r2, [r4, r3]
 8004212:	3a01      	subs	r2, #1
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	54e2      	strb	r2, [r4, r3]
 8004218:	e03c      	b.n	8004294 <dec_arr_a+0x98>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 800421a:	2801      	cmp	r0, #1
 800421c:	d123      	bne.n	8004266 <dec_arr_a+0x6a>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 800421e:	7823      	ldrb	r3, [r4, #0]
 8004220:	2b30      	cmp	r3, #48	; 0x30
 8004222:	d05b      	beq.n	80042dc <dec_arr_a+0xe0>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004224:	7823      	ldrb	r3, [r4, #0]
 8004226:	2b30      	cmp	r3, #48	; 0x30
 8004228:	b2da      	uxtb	r2, r3
 800422a:	d06f      	beq.n	800430c <dec_arr_a+0x110>
			if(keypadarr[pos] > '0'){
 800422c:	7823      	ldrb	r3, [r4, #0]
 800422e:	2b30      	cmp	r3, #48	; 0x30
 8004230:	d961      	bls.n	80042f6 <dec_arr_a+0xfa>
				keypadarr[pos]--;
 8004232:	7823      	ldrb	r3, [r4, #0]
 8004234:	3b01      	subs	r3, #1
 8004236:	b2db      	uxtb	r3, r3
 8004238:	7023      	strb	r3, [r4, #0]
		if(keypadarr[i] != 'z'){
 800423a:	7823      	ldrb	r3, [r4, #0]
 800423c:	2b7a      	cmp	r3, #122	; 0x7a
 800423e:	d16e      	bne.n	800431e <dec_arr_a+0x122>
 8004240:	7863      	ldrb	r3, [r4, #1]
 8004242:	2b7a      	cmp	r3, #122	; 0x7a
 8004244:	d169      	bne.n	800431a <dec_arr_a+0x11e>
 8004246:	78a3      	ldrb	r3, [r4, #2]
 8004248:	2b7a      	cmp	r3, #122	; 0x7a
 800424a:	d16a      	bne.n	8004322 <dec_arr_a+0x126>
 800424c:	78e3      	ldrb	r3, [r4, #3]
 800424e:	2b7a      	cmp	r3, #122	; 0x7a
 8004250:	d169      	bne.n	8004326 <dec_arr_a+0x12a>
 8004252:	7923      	ldrb	r3, [r4, #4]
 8004254:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004256:	bf18      	it	ne
 8004258:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 800425a:	d01b      	beq.n	8004294 <dec_arr_a+0x98>
			keypaditerator = i - 1;
 800425c:	4a34      	ldr	r2, [pc, #208]	; (8004330 <dec_arr_a+0x134>)
 800425e:	3b01      	subs	r3, #1
 8004260:	b25b      	sxtb	r3, r3
 8004262:	7013      	strb	r3, [r2, #0]
			break;
 8004264:	e016      	b.n	8004294 <dec_arr_a+0x98>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 8004266:	2803      	cmp	r0, #3
 8004268:	d026      	beq.n	80042b8 <dec_arr_a+0xbc>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 800426a:	2804      	cmp	r0, #4
 800426c:	d134      	bne.n	80042d8 <dec_arr_a+0xdc>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 800426e:	7822      	ldrb	r2, [r4, #0]
 8004270:	2a30      	cmp	r2, #48	; 0x30
 8004272:	d1ca      	bne.n	800420a <dec_arr_a+0xe>
 8004274:	78a2      	ldrb	r2, [r4, #2]
 8004276:	2a30      	cmp	r2, #48	; 0x30
 8004278:	d1c7      	bne.n	800420a <dec_arr_a+0xe>
 800427a:	78e2      	ldrb	r2, [r4, #3]
 800427c:	2a30      	cmp	r2, #48	; 0x30
 800427e:	d1c4      	bne.n	800420a <dec_arr_a+0xe>
 8004280:	7922      	ldrb	r2, [r4, #4]
 8004282:	2a30      	cmp	r2, #48	; 0x30
 8004284:	d1c1      	bne.n	800420a <dec_arr_a+0xe>
		keypadarr[0] = '0';
 8004286:	2330      	movs	r3, #48	; 0x30
		keypadarr[1] = '.';
 8004288:	222e      	movs	r2, #46	; 0x2e
		keypadarr[0] = '0';
 800428a:	7023      	strb	r3, [r4, #0]
		keypadarr[1] = '.';
 800428c:	7062      	strb	r2, [r4, #1]
		keypadarr[2] = '0';
 800428e:	70a3      	strb	r3, [r4, #2]
		keypadarr[3] = '0';
 8004290:	70e3      	strb	r3, [r4, #3]
		keypadarr[4] = '0';
 8004292:	7123      	strb	r3, [r4, #4]
		if(keypadarr[i] != 'z'){
 8004294:	7823      	ldrb	r3, [r4, #0]
 8004296:	2b7a      	cmp	r3, #122	; 0x7a
 8004298:	d118      	bne.n	80042cc <dec_arr_a+0xd0>
 800429a:	7863      	ldrb	r3, [r4, #1]
 800429c:	2b7a      	cmp	r3, #122	; 0x7a
 800429e:	d128      	bne.n	80042f2 <dec_arr_a+0xf6>
 80042a0:	78a3      	ldrb	r3, [r4, #2]
 80042a2:	2b7a      	cmp	r3, #122	; 0x7a
 80042a4:	d12e      	bne.n	8004304 <dec_arr_a+0x108>
 80042a6:	78e3      	ldrb	r3, [r4, #3]
 80042a8:	2b7a      	cmp	r3, #122	; 0x7a
 80042aa:	d12d      	bne.n	8004308 <dec_arr_a+0x10c>
 80042ac:	7923      	ldrb	r3, [r4, #4]
 80042ae:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 80042b0:	bf18      	it	ne
 80042b2:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 80042b4:	d10b      	bne.n	80042ce <dec_arr_a+0xd2>
}
 80042b6:	bd10      	pop	{r4, pc}
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 80042b8:	7822      	ldrb	r2, [r4, #0]
 80042ba:	2a30      	cmp	r2, #48	; 0x30
 80042bc:	d1a5      	bne.n	800420a <dec_arr_a+0xe>
 80042be:	78a2      	ldrb	r2, [r4, #2]
 80042c0:	2a30      	cmp	r2, #48	; 0x30
 80042c2:	d1a2      	bne.n	800420a <dec_arr_a+0xe>
 80042c4:	78e2      	ldrb	r2, [r4, #3]
 80042c6:	2a30      	cmp	r2, #48	; 0x30
 80042c8:	d19f      	bne.n	800420a <dec_arr_a+0xe>
 80042ca:	e7dc      	b.n	8004286 <dec_arr_a+0x8a>
	for(int i = 0; i < keypadlength; i++){
 80042cc:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 80042ce:	4a18      	ldr	r2, [pc, #96]	; (8004330 <dec_arr_a+0x134>)
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b25b      	sxtb	r3, r3
 80042d4:	7013      	strb	r3, [r2, #0]
}
 80042d6:	bd10      	pop	{r4, pc}
		if(pos <= 4 && pos != 1){
 80042d8:	dcdc      	bgt.n	8004294 <dec_arr_a+0x98>
 80042da:	e796      	b.n	800420a <dec_arr_a+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 80042dc:	78a3      	ldrb	r3, [r4, #2]
 80042de:	2b30      	cmp	r3, #48	; 0x30
 80042e0:	d1a0      	bne.n	8004224 <dec_arr_a+0x28>
 80042e2:	e7d0      	b.n	8004286 <dec_arr_a+0x8a>
				keypadarr[pos] = '9';
 80042e4:	2239      	movs	r2, #57	; 0x39
				dec_arr_a(pos-1);
 80042e6:	1e58      	subs	r0, r3, #1
 80042e8:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 80042ea:	54e2      	strb	r2, [r4, r3]
				dec_arr_a(pos-1);
 80042ec:	f7ff ff86 	bl	80041fc <dec_arr_a>
 80042f0:	e7d0      	b.n	8004294 <dec_arr_a+0x98>
	for(int i = 0; i < keypadlength; i++){
 80042f2:	2301      	movs	r3, #1
 80042f4:	e7eb      	b.n	80042ce <dec_arr_a+0xd2>
				keypadarr[pos] = '9';
 80042f6:	2339      	movs	r3, #57	; 0x39
				dec_arr_a(pos-1);
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
				keypadarr[pos] = '9';
 80042fc:	7023      	strb	r3, [r4, #0]
				dec_arr_a(pos-1);
 80042fe:	f7ff ff7d 	bl	80041fc <dec_arr_a>
 8004302:	e79a      	b.n	800423a <dec_arr_a+0x3e>
	for(int i = 0; i < keypadlength; i++){
 8004304:	2302      	movs	r3, #2
 8004306:	e7e2      	b.n	80042ce <dec_arr_a+0xd2>
 8004308:	2303      	movs	r3, #3
 800430a:	e7e0      	b.n	80042ce <dec_arr_a+0xd2>
		keypadarr[1] = '.';
 800430c:	232e      	movs	r3, #46	; 0x2e
		keypadarr[0] = '0';
 800430e:	7022      	strb	r2, [r4, #0]
		keypadarr[1] = '.';
 8004310:	7063      	strb	r3, [r4, #1]
		keypadarr[2] = '0';
 8004312:	70a2      	strb	r2, [r4, #2]
		keypadarr[3] = '0';
 8004314:	70e2      	strb	r2, [r4, #3]
		keypadarr[4] = '0';
 8004316:	7122      	strb	r2, [r4, #4]
 8004318:	e78f      	b.n	800423a <dec_arr_a+0x3e>
	for(int i = 0; i < keypadlength; i++){
 800431a:	2301      	movs	r3, #1
 800431c:	e79e      	b.n	800425c <dec_arr_a+0x60>
 800431e:	2300      	movs	r3, #0
 8004320:	e79c      	b.n	800425c <dec_arr_a+0x60>
 8004322:	2302      	movs	r3, #2
 8004324:	e79a      	b.n	800425c <dec_arr_a+0x60>
 8004326:	2303      	movs	r3, #3
 8004328:	e798      	b.n	800425c <dec_arr_a+0x60>
 800432a:	bf00      	nop
 800432c:	20000000 	.word	0x20000000
 8004330:	20000005 	.word	0x20000005
 8004334:	00000000 	.word	0x00000000

08004338 <keypad_sm>:
void keypad_sm(char num){
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(kpenum == WAIT){
 800433a:	4e9b      	ldr	r6, [pc, #620]	; (80045a8 <keypad_sm+0x270>)
 800433c:	7834      	ldrb	r4, [r6, #0]
 800433e:	b994      	cbnz	r4, 8004366 <keypad_sm+0x2e>
		if(num == 'A'){
 8004340:	2841      	cmp	r0, #65	; 0x41
 8004342:	f000 80a6 	beq.w	8004492 <keypad_sm+0x15a>
		else if(num == 'B'){
 8004346:	2842      	cmp	r0, #66	; 0x42
 8004348:	f000 813c 	beq.w	80045c4 <keypad_sm+0x28c>
		else if(num == 'C'){
 800434c:	2843      	cmp	r0, #67	; 0x43
 800434e:	f000 8101 	beq.w	8004554 <keypad_sm+0x21c>
		else if(num == 'D'){
 8004352:	2844      	cmp	r0, #68	; 0x44
 8004354:	f000 8303 	beq.w	800495e <keypad_sm+0x626>
		else if(num == '*'){
 8004358:	282a      	cmp	r0, #42	; 0x2a
 800435a:	f000 8329 	beq.w	80049b0 <keypad_sm+0x678>
		else if(num == '/'){
 800435e:	282f      	cmp	r0, #47	; 0x2f
 8004360:	f000 82a2 	beq.w	80048a8 <keypad_sm+0x570>
}
 8004364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(kpenum == V1){
 8004366:	2c01      	cmp	r4, #1
 8004368:	d04d      	beq.n	8004406 <keypad_sm+0xce>
	else if(kpenum == A1){
 800436a:	2c02      	cmp	r4, #2
 800436c:	f000 8153 	beq.w	8004616 <keypad_sm+0x2de>
	else if(kpenum == V2){
 8004370:	2c03      	cmp	r4, #3
 8004372:	f000 80b7 	beq.w	80044e4 <keypad_sm+0x1ac>
	else if(kpenum == A2){
 8004376:	2c04      	cmp	r4, #4
 8004378:	d1f4      	bne.n	8004364 <keypad_sm+0x2c>
		if(encmode){
 800437a:	4c8c      	ldr	r4, [pc, #560]	; (80045ac <keypad_sm+0x274>)
 800437c:	7823      	ldrb	r3, [r4, #0]
 800437e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 831c 	beq.w	80049c0 <keypad_sm+0x688>
			if(num == 'A'){
 8004388:	2841      	cmp	r0, #65	; 0x41
 800438a:	f000 8565 	beq.w	8004e58 <keypad_sm+0xb20>
			else if(num == 'B'){
 800438e:	2842      	cmp	r0, #66	; 0x42
 8004390:	f000 8736 	beq.w	8005200 <keypad_sm+0xec8>
			else if(num == 'C'){
 8004394:	2843      	cmp	r0, #67	; 0x43
 8004396:	f001 8018 	beq.w	80053ca <keypad_sm+0x1092>
			else if(num == 'D'){
 800439a:	2844      	cmp	r0, #68	; 0x44
 800439c:	f001 82d0 	beq.w	8005940 <keypad_sm+0x1608>
			else if(num == '.'){
 80043a0:	282e      	cmp	r0, #46	; 0x2e
 80043a2:	f001 81d4 	beq.w	800574e <keypad_sm+0x1416>
			else if(num >= '0' && num <= '9'){
 80043a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80043aa:	2b09      	cmp	r3, #9
 80043ac:	f201 8254 	bhi.w	8005858 <keypad_sm+0x1520>
				keypaddecimal = 0;
 80043b0:	2600      	movs	r6, #0
			keypadarr[0] = num;
 80043b2:	207a      	movs	r0, #122	; 0x7a
 80043b4:	4b7e      	ldr	r3, [pc, #504]	; (80045b0 <keypad_sm+0x278>)
			if(keypadarr[4] == '.'){
 80043b6:	4a7f      	ldr	r2, [pc, #508]	; (80045b4 <keypad_sm+0x27c>)
				keypaddecimal = 0;
 80043b8:	4d7f      	ldr	r5, [pc, #508]	; (80045b8 <keypad_sm+0x280>)
	while(keypaditerator < 4){
 80043ba:	7819      	ldrb	r1, [r3, #0]
 80043bc:	b249      	sxtb	r1, r1
 80043be:	2903      	cmp	r1, #3
 80043c0:	dc1c      	bgt.n	80043fc <keypad_sm+0xc4>
		if(keypaditerator < keypadlength-1){
 80043c2:	7819      	ldrb	r1, [r3, #0]
 80043c4:	b249      	sxtb	r1, r1
 80043c6:	2903      	cmp	r1, #3
 80043c8:	dcf7      	bgt.n	80043ba <keypad_sm+0x82>
			if(keypadarr[4] == '.'){
 80043ca:	7911      	ldrb	r1, [r2, #4]
 80043cc:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80043ce:	bf08      	it	eq
 80043d0:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80043d2:	78d1      	ldrb	r1, [r2, #3]
 80043d4:	b2c9      	uxtb	r1, r1
 80043d6:	7111      	strb	r1, [r2, #4]
 80043d8:	7891      	ldrb	r1, [r2, #2]
 80043da:	b2c9      	uxtb	r1, r1
 80043dc:	70d1      	strb	r1, [r2, #3]
 80043de:	7851      	ldrb	r1, [r2, #1]
 80043e0:	b2c9      	uxtb	r1, r1
 80043e2:	7091      	strb	r1, [r2, #2]
 80043e4:	7811      	ldrb	r1, [r2, #0]
 80043e6:	b2c9      	uxtb	r1, r1
 80043e8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80043ea:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80043ec:	7819      	ldrb	r1, [r3, #0]
 80043ee:	3101      	adds	r1, #1
 80043f0:	b249      	sxtb	r1, r1
 80043f2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80043f4:	7819      	ldrb	r1, [r3, #0]
 80043f6:	b249      	sxtb	r1, r1
 80043f8:	2903      	cmp	r1, #3
 80043fa:	dde2      	ble.n	80043c2 <keypad_sm+0x8a>
				encmode = 0;
 80043fc:	2300      	movs	r3, #0
				encpos = 0;
 80043fe:	4a6f      	ldr	r2, [pc, #444]	; (80045bc <keypad_sm+0x284>)
				encmode = 0;
 8004400:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004402:	7013      	strb	r3, [r2, #0]
}
 8004404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(encmode){
 8004406:	4c69      	ldr	r4, [pc, #420]	; (80045ac <keypad_sm+0x274>)
 8004408:	7823      	ldrb	r3, [r4, #0]
 800440a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 8146 	beq.w	80046a0 <keypad_sm+0x368>
			if(num == 'A'){
 8004414:	2841      	cmp	r0, #65	; 0x41
 8004416:	f000 8304 	beq.w	8004a22 <keypad_sm+0x6ea>
			else if(num == 'B'){
 800441a:	2842      	cmp	r0, #66	; 0x42
 800441c:	f000 81e1 	beq.w	80047e2 <keypad_sm+0x4aa>
			else if(num == 'C'){
 8004420:	2843      	cmp	r0, #67	; 0x43
 8004422:	f000 83b4 	beq.w	8004b8e <keypad_sm+0x856>
			else if(num == 'D'){
 8004426:	2844      	cmp	r0, #68	; 0x44
 8004428:	f000 845c 	beq.w	8004ce4 <keypad_sm+0x9ac>
			else if(num == '.'){
 800442c:	282e      	cmp	r0, #46	; 0x2e
 800442e:	f000 8659 	beq.w	80050e4 <keypad_sm+0xdac>
			else if(num >= '0' && num <= '9'){
 8004432:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004436:	2b09      	cmp	r3, #9
 8004438:	f200 863b 	bhi.w	80050b2 <keypad_sm+0xd7a>
				keypaddecimal = 0;
 800443c:	2600      	movs	r6, #0
			keypadarr[0] = num;
 800443e:	207a      	movs	r0, #122	; 0x7a
 8004440:	4b5b      	ldr	r3, [pc, #364]	; (80045b0 <keypad_sm+0x278>)
			if(keypadarr[4] == '.'){
 8004442:	4a5c      	ldr	r2, [pc, #368]	; (80045b4 <keypad_sm+0x27c>)
				keypaddecimal = 0;
 8004444:	4d5c      	ldr	r5, [pc, #368]	; (80045b8 <keypad_sm+0x280>)
	while(keypaditerator < 4){
 8004446:	7819      	ldrb	r1, [r3, #0]
 8004448:	b249      	sxtb	r1, r1
 800444a:	2903      	cmp	r1, #3
 800444c:	dc1c      	bgt.n	8004488 <keypad_sm+0x150>
		if(keypaditerator < keypadlength-1){
 800444e:	7819      	ldrb	r1, [r3, #0]
 8004450:	b249      	sxtb	r1, r1
 8004452:	2903      	cmp	r1, #3
 8004454:	dcf7      	bgt.n	8004446 <keypad_sm+0x10e>
			if(keypadarr[4] == '.'){
 8004456:	7911      	ldrb	r1, [r2, #4]
 8004458:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800445a:	bf08      	it	eq
 800445c:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800445e:	78d1      	ldrb	r1, [r2, #3]
 8004460:	b2c9      	uxtb	r1, r1
 8004462:	7111      	strb	r1, [r2, #4]
 8004464:	7891      	ldrb	r1, [r2, #2]
 8004466:	b2c9      	uxtb	r1, r1
 8004468:	70d1      	strb	r1, [r2, #3]
 800446a:	7851      	ldrb	r1, [r2, #1]
 800446c:	b2c9      	uxtb	r1, r1
 800446e:	7091      	strb	r1, [r2, #2]
 8004470:	7811      	ldrb	r1, [r2, #0]
 8004472:	b2c9      	uxtb	r1, r1
 8004474:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004476:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004478:	7819      	ldrb	r1, [r3, #0]
 800447a:	3101      	adds	r1, #1
 800447c:	b249      	sxtb	r1, r1
 800447e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004480:	7819      	ldrb	r1, [r3, #0]
 8004482:	b249      	sxtb	r1, r1
 8004484:	2903      	cmp	r1, #3
 8004486:	dde2      	ble.n	800444e <keypad_sm+0x116>
				encmode = 0;
 8004488:	2300      	movs	r3, #0
				encpos = 0;
 800448a:	4a4c      	ldr	r2, [pc, #304]	; (80045bc <keypad_sm+0x284>)
				encmode = 0;
 800448c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800448e:	7013      	strb	r3, [r2, #0]
}
 8004490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			kpenum = V1;
 8004492:	2101      	movs	r1, #1
			keypadarr[0] = num;
 8004494:	207a      	movs	r0, #122	; 0x7a
 8004496:	4b46      	ldr	r3, [pc, #280]	; (80045b0 <keypad_sm+0x278>)
			if(keypadarr[4] == '.'){
 8004498:	4a46      	ldr	r2, [pc, #280]	; (80045b4 <keypad_sm+0x27c>)
				keypaddecimal = 0;
 800449a:	4d47      	ldr	r5, [pc, #284]	; (80045b8 <keypad_sm+0x280>)
			kpenum = V1;
 800449c:	7031      	strb	r1, [r6, #0]
	while(keypaditerator < 4){
 800449e:	7819      	ldrb	r1, [r3, #0]
 80044a0:	b249      	sxtb	r1, r1
 80044a2:	2903      	cmp	r1, #3
 80044a4:	f73f af5e 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80044a8:	7819      	ldrb	r1, [r3, #0]
 80044aa:	b249      	sxtb	r1, r1
 80044ac:	2903      	cmp	r1, #3
 80044ae:	dcf6      	bgt.n	800449e <keypad_sm+0x166>
			if(keypadarr[4] == '.'){
 80044b0:	7911      	ldrb	r1, [r2, #4]
 80044b2:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80044b4:	bf08      	it	eq
 80044b6:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80044b8:	78d1      	ldrb	r1, [r2, #3]
 80044ba:	b2c9      	uxtb	r1, r1
 80044bc:	7111      	strb	r1, [r2, #4]
 80044be:	7891      	ldrb	r1, [r2, #2]
 80044c0:	b2c9      	uxtb	r1, r1
 80044c2:	70d1      	strb	r1, [r2, #3]
 80044c4:	7851      	ldrb	r1, [r2, #1]
 80044c6:	b2c9      	uxtb	r1, r1
 80044c8:	7091      	strb	r1, [r2, #2]
 80044ca:	7811      	ldrb	r1, [r2, #0]
 80044cc:	b2c9      	uxtb	r1, r1
 80044ce:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80044d0:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80044d2:	7819      	ldrb	r1, [r3, #0]
 80044d4:	3101      	adds	r1, #1
 80044d6:	b249      	sxtb	r1, r1
 80044d8:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80044da:	7819      	ldrb	r1, [r3, #0]
 80044dc:	b249      	sxtb	r1, r1
 80044de:	2903      	cmp	r1, #3
 80044e0:	dde2      	ble.n	80044a8 <keypad_sm+0x170>
}
 80044e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(encmode){
 80044e4:	4c31      	ldr	r4, [pc, #196]	; (80045ac <keypad_sm+0x274>)
 80044e6:	7823      	ldrb	r3, [r4, #0]
 80044e8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f040 8139 	bne.w	8004764 <keypad_sm+0x42c>
			if(num == 'A'){
 80044f2:	2841      	cmp	r0, #65	; 0x41
 80044f4:	f000 83a3 	beq.w	8004c3e <keypad_sm+0x906>
			else if(num == 'B'){
 80044f8:	2842      	cmp	r0, #66	; 0x42
 80044fa:	f000 8505 	beq.w	8004f08 <keypad_sm+0xbd0>
			else if(num == 'C'){
 80044fe:	2843      	cmp	r0, #67	; 0x43
 8004500:	f000 87ff 	beq.w	8005502 <keypad_sm+0x11ca>
			else if(num == 'D'){
 8004504:	2844      	cmp	r0, #68	; 0x44
 8004506:	f000 86fe 	beq.w	8005306 <keypad_sm+0xfce>
			else if(num == '.'){
 800450a:	282e      	cmp	r0, #46	; 0x2e
 800450c:	f001 814a 	beq.w	80057a4 <keypad_sm+0x146c>
			else if(num >= '0' && num <= '9'){
 8004510:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004514:	2b09      	cmp	r3, #9
 8004516:	f240 8473 	bls.w	8004e00 <keypad_sm+0xac8>
			else if(num == '#'){
 800451a:	2823      	cmp	r0, #35	; 0x23
 800451c:	f001 81b6 	beq.w	800588c <keypad_sm+0x1554>
			else if(num == '+'){
 8004520:	282b      	cmp	r0, #43	; 0x2b
 8004522:	f001 83d8 	beq.w	8005cd6 <keypad_sm+0x199e>
			else if(num == '-'){
 8004526:	282d      	cmp	r0, #45	; 0x2d
 8004528:	f001 82b9 	beq.w	8005a9e <keypad_sm+0x1766>
			else if(num == 's'){
 800452c:	2873      	cmp	r0, #115	; 0x73
 800452e:	f001 8696 	beq.w	800625e <keypad_sm+0x1f26>
			else if(num == '['){
 8004532:	285b      	cmp	r0, #91	; 0x5b
 8004534:	f001 8600 	beq.w	8006138 <keypad_sm+0x1e00>
			else if(num == ']'){
 8004538:	285d      	cmp	r0, #93	; 0x5d
 800453a:	f47f af13 	bne.w	8004364 <keypad_sm+0x2c>
				fill_keypad(0, volt_set_main);
 800453e:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <keypad_sm+0x288>)
 8004540:	2000      	movs	r0, #0
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	f7ff fb54 	bl	8003bf0 <fill_keypad>
				encmode = 1;
 8004548:	2101      	movs	r1, #1
				encpos = 0;
 800454a:	2200      	movs	r2, #0
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <keypad_sm+0x284>)
				encmode = 1;
 800454e:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8004550:	701a      	strb	r2, [r3, #0]
}
 8004552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			kpenum = V2;
 8004554:	2203      	movs	r2, #3
			keypadarr[0] = num;
 8004556:	207a      	movs	r0, #122	; 0x7a
 8004558:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <keypad_sm+0x278>)
			if(keypadarr[4] == '.'){
 800455a:	4916      	ldr	r1, [pc, #88]	; (80045b4 <keypad_sm+0x27c>)
				keypaddecimal = 0;
 800455c:	4d16      	ldr	r5, [pc, #88]	; (80045b8 <keypad_sm+0x280>)
			kpenum = V2;
 800455e:	7032      	strb	r2, [r6, #0]
	while(keypaditerator < 4){
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	b252      	sxtb	r2, r2
 8004564:	2a03      	cmp	r2, #3
 8004566:	f73f aefd 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800456a:	781a      	ldrb	r2, [r3, #0]
 800456c:	b252      	sxtb	r2, r2
 800456e:	2a03      	cmp	r2, #3
 8004570:	dcf6      	bgt.n	8004560 <keypad_sm+0x228>
			if(keypadarr[4] == '.'){
 8004572:	790a      	ldrb	r2, [r1, #4]
 8004574:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8004576:	bf08      	it	eq
 8004578:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800457a:	78ca      	ldrb	r2, [r1, #3]
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	710a      	strb	r2, [r1, #4]
 8004580:	788a      	ldrb	r2, [r1, #2]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	70ca      	strb	r2, [r1, #3]
 8004586:	784a      	ldrb	r2, [r1, #1]
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	708a      	strb	r2, [r1, #2]
 800458c:	780a      	ldrb	r2, [r1, #0]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8004592:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	3201      	adds	r2, #1
 8004598:	b252      	sxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 800459c:	781a      	ldrb	r2, [r3, #0]
 800459e:	b252      	sxtb	r2, r2
 80045a0:	2a03      	cmp	r2, #3
 80045a2:	dde2      	ble.n	800456a <keypad_sm+0x232>
}
 80045a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045a6:	bf00      	nop
 80045a8:	200006c5 	.word	0x200006c5
 80045ac:	200003ac 	.word	0x200003ac
 80045b0:	20000005 	.word	0x20000005
 80045b4:	20000000 	.word	0x20000000
 80045b8:	200006c4 	.word	0x200006c4
 80045bc:	200003ad 	.word	0x200003ad
 80045c0:	20000828 	.word	0x20000828
			kpenum = A1;
 80045c4:	2202      	movs	r2, #2
			keypadarr[0] = num;
 80045c6:	207a      	movs	r0, #122	; 0x7a
 80045c8:	4b9c      	ldr	r3, [pc, #624]	; (800483c <keypad_sm+0x504>)
			if(keypadarr[4] == '.'){
 80045ca:	499d      	ldr	r1, [pc, #628]	; (8004840 <keypad_sm+0x508>)
				keypaddecimal = 0;
 80045cc:	4d9d      	ldr	r5, [pc, #628]	; (8004844 <keypad_sm+0x50c>)
			kpenum = A1;
 80045ce:	7032      	strb	r2, [r6, #0]
	while(keypaditerator < 4){
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	b252      	sxtb	r2, r2
 80045d4:	2a03      	cmp	r2, #3
 80045d6:	f73f aec5 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80045da:	781a      	ldrb	r2, [r3, #0]
 80045dc:	b252      	sxtb	r2, r2
 80045de:	2a03      	cmp	r2, #3
 80045e0:	dcf6      	bgt.n	80045d0 <keypad_sm+0x298>
			if(keypadarr[4] == '.'){
 80045e2:	790a      	ldrb	r2, [r1, #4]
 80045e4:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 80045e6:	bf08      	it	eq
 80045e8:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80045ea:	78ca      	ldrb	r2, [r1, #3]
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	710a      	strb	r2, [r1, #4]
 80045f0:	788a      	ldrb	r2, [r1, #2]
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	70ca      	strb	r2, [r1, #3]
 80045f6:	784a      	ldrb	r2, [r1, #1]
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	708a      	strb	r2, [r1, #2]
 80045fc:	780a      	ldrb	r2, [r1, #0]
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8004602:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 8004604:	781a      	ldrb	r2, [r3, #0]
 8004606:	3201      	adds	r2, #1
 8004608:	b252      	sxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	b252      	sxtb	r2, r2
 8004610:	2a03      	cmp	r2, #3
 8004612:	dde2      	ble.n	80045da <keypad_sm+0x2a2>
}
 8004614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(encmode){
 8004616:	4c8c      	ldr	r4, [pc, #560]	; (8004848 <keypad_sm+0x510>)
 8004618:	7823      	ldrb	r3, [r4, #0]
 800461a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800461e:	2b00      	cmp	r3, #0
 8004620:	d06f      	beq.n	8004702 <keypad_sm+0x3ca>
			if(num == 'A'){
 8004622:	2841      	cmp	r0, #65	; 0x41
 8004624:	f000 8147 	beq.w	80048b6 <keypad_sm+0x57e>
			else if(num == 'B'){
 8004628:	2842      	cmp	r0, #66	; 0x42
 800462a:	f000 84da 	beq.w	8004fe2 <keypad_sm+0xcaa>
			else if(num == 'C'){
 800462e:	2843      	cmp	r0, #67	; 0x43
 8004630:	f000 8392 	beq.w	8004d58 <keypad_sm+0xa20>
			else if(num == 'D'){
 8004634:	2844      	cmp	r0, #68	; 0x44
 8004636:	f000 8510 	beq.w	800505a <keypad_sm+0xd22>
			else if(num == '.'){
 800463a:	282e      	cmp	r0, #46	; 0x2e
 800463c:	f000 860c 	beq.w	8005258 <keypad_sm+0xf20>
			else if(num >= '0' && num <= '9'){
 8004640:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004644:	2b09      	cmp	r3, #9
 8004646:	f200 8686 	bhi.w	8005356 <keypad_sm+0x101e>
				keypaddecimal = 0;
 800464a:	2600      	movs	r6, #0
			keypadarr[0] = num;
 800464c:	207a      	movs	r0, #122	; 0x7a
 800464e:	4b7b      	ldr	r3, [pc, #492]	; (800483c <keypad_sm+0x504>)
			if(keypadarr[4] == '.'){
 8004650:	4a7b      	ldr	r2, [pc, #492]	; (8004840 <keypad_sm+0x508>)
				keypaddecimal = 0;
 8004652:	4d7c      	ldr	r5, [pc, #496]	; (8004844 <keypad_sm+0x50c>)
	while(keypaditerator < 4){
 8004654:	7819      	ldrb	r1, [r3, #0]
 8004656:	b249      	sxtb	r1, r1
 8004658:	2903      	cmp	r1, #3
 800465a:	dc1c      	bgt.n	8004696 <keypad_sm+0x35e>
		if(keypaditerator < keypadlength-1){
 800465c:	7819      	ldrb	r1, [r3, #0]
 800465e:	b249      	sxtb	r1, r1
 8004660:	2903      	cmp	r1, #3
 8004662:	dcf7      	bgt.n	8004654 <keypad_sm+0x31c>
			if(keypadarr[4] == '.'){
 8004664:	7911      	ldrb	r1, [r2, #4]
 8004666:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004668:	bf08      	it	eq
 800466a:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800466c:	78d1      	ldrb	r1, [r2, #3]
 800466e:	b2c9      	uxtb	r1, r1
 8004670:	7111      	strb	r1, [r2, #4]
 8004672:	7891      	ldrb	r1, [r2, #2]
 8004674:	b2c9      	uxtb	r1, r1
 8004676:	70d1      	strb	r1, [r2, #3]
 8004678:	7851      	ldrb	r1, [r2, #1]
 800467a:	b2c9      	uxtb	r1, r1
 800467c:	7091      	strb	r1, [r2, #2]
 800467e:	7811      	ldrb	r1, [r2, #0]
 8004680:	b2c9      	uxtb	r1, r1
 8004682:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004684:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004686:	7819      	ldrb	r1, [r3, #0]
 8004688:	3101      	adds	r1, #1
 800468a:	b249      	sxtb	r1, r1
 800468c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800468e:	7819      	ldrb	r1, [r3, #0]
 8004690:	b249      	sxtb	r1, r1
 8004692:	2903      	cmp	r1, #3
 8004694:	dde2      	ble.n	800465c <keypad_sm+0x324>
				encmode = 0;
 8004696:	2300      	movs	r3, #0
				encpos = 0;
 8004698:	4a6c      	ldr	r2, [pc, #432]	; (800484c <keypad_sm+0x514>)
				encmode = 0;
 800469a:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800469c:	7013      	strb	r3, [r2, #0]
}
 800469e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(num == 'A'){
 80046a0:	2841      	cmp	r0, #65	; 0x41
 80046a2:	f000 820f 	beq.w	8004ac4 <keypad_sm+0x78c>
			else if(num == 'B'){
 80046a6:	2842      	cmp	r0, #66	; 0x42
 80046a8:	f000 80d6 	beq.w	8004858 <keypad_sm+0x520>
			else if(num == 'C'){
 80046ac:	2843      	cmp	r0, #67	; 0x43
 80046ae:	f000 8246 	beq.w	8004b3e <keypad_sm+0x806>
			else if(num == 'D'){
 80046b2:	2844      	cmp	r0, #68	; 0x44
 80046b4:	f000 82ee 	beq.w	8004c94 <keypad_sm+0x95c>
			else if(num == '.'){
 80046b8:	282e      	cmp	r0, #46	; 0x2e
 80046ba:	f000 8665 	beq.w	8005388 <keypad_sm+0x1050>
			else if(num >= '0' && num <= '9'){
 80046be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80046c2:	2b09      	cmp	r3, #9
 80046c4:	f240 839c 	bls.w	8004e00 <keypad_sm+0xac8>
			else if(num == '#'){
 80046c8:	2823      	cmp	r0, #35	; 0x23
 80046ca:	f000 87e6 	beq.w	800569a <keypad_sm+0x1362>
			else if(num == '+'){
 80046ce:	282b      	cmp	r0, #43	; 0x2b
 80046d0:	f001 8089 	beq.w	80057e6 <keypad_sm+0x14ae>
			else if(num == '-'){
 80046d4:	282d      	cmp	r0, #45	; 0x2d
 80046d6:	f000 87b7 	beq.w	8005648 <keypad_sm+0x1310>
			else if(num == 's'){
 80046da:	2873      	cmp	r0, #115	; 0x73
 80046dc:	f001 8287 	beq.w	8005bee <keypad_sm+0x18b6>
			else if(num == '['){
 80046e0:	285b      	cmp	r0, #91	; 0x5b
 80046e2:	f001 8372 	beq.w	8005dca <keypad_sm+0x1a92>
			else if(num == ']'){
 80046e6:	285d      	cmp	r0, #93	; 0x5d
 80046e8:	f47f ae3c 	bne.w	8004364 <keypad_sm+0x2c>
				fill_keypad(0, volt_set_aux);
 80046ec:	4b58      	ldr	r3, [pc, #352]	; (8004850 <keypad_sm+0x518>)
 80046ee:	2000      	movs	r0, #0
 80046f0:	6819      	ldr	r1, [r3, #0]
 80046f2:	f7ff fa7d 	bl	8003bf0 <fill_keypad>
				encmode = 1;
 80046f6:	2101      	movs	r1, #1
				encpos = 0;
 80046f8:	2200      	movs	r2, #0
 80046fa:	4b54      	ldr	r3, [pc, #336]	; (800484c <keypad_sm+0x514>)
				encmode = 1;
 80046fc:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 80046fe:	701a      	strb	r2, [r3, #0]
}
 8004700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(num == 'A'){
 8004702:	2841      	cmp	r0, #65	; 0x41
 8004704:	f000 8103 	beq.w	800490e <keypad_sm+0x5d6>
			else if(num == 'B'){
 8004708:	2842      	cmp	r0, #66	; 0x42
 800470a:	f000 842d 	beq.w	8004f68 <keypad_sm+0xc30>
			else if(num == 'C'){
 800470e:	2843      	cmp	r0, #67	; 0x43
 8004710:	f000 834e 	beq.w	8004db0 <keypad_sm+0xa78>
			else if(num == 'D'){
 8004714:	2844      	cmp	r0, #68	; 0x44
 8004716:	f000 8510 	beq.w	800513a <keypad_sm+0xe02>
			else if(num == '.'){
 800471a:	282e      	cmp	r0, #46	; 0x2e
 800471c:	f000 8773 	beq.w	8005606 <keypad_sm+0x12ce>
			else if(num >= '0' && num <= '9'){
 8004720:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004724:	2b09      	cmp	r3, #9
 8004726:	f240 836b 	bls.w	8004e00 <keypad_sm+0xac8>
			else if(num == '#'){
 800472a:	2823      	cmp	r0, #35	; 0x23
 800472c:	f001 80db 	beq.w	80058e6 <keypad_sm+0x15ae>
			else if(num == '+'){
 8004730:	282b      	cmp	r0, #43	; 0x2b
 8004732:	f001 821f 	beq.w	8005b74 <keypad_sm+0x183c>
			else if(num == '-'){
 8004736:	282d      	cmp	r0, #45	; 0x2d
 8004738:	f001 80ac 	beq.w	8005894 <keypad_sm+0x155c>
			else if(num == 's'){
 800473c:	2873      	cmp	r0, #115	; 0x73
 800473e:	f001 83a2 	beq.w	8005e86 <keypad_sm+0x1b4e>
			else if(num == '['){
 8004742:	285b      	cmp	r0, #91	; 0x5b
 8004744:	f001 8579 	beq.w	800623a <keypad_sm+0x1f02>
			else if(num == ']'){
 8004748:	285d      	cmp	r0, #93	; 0x5d
 800474a:	f47f ae0b 	bne.w	8004364 <keypad_sm+0x2c>
				fill_keypad(1, amp_set_aux);
 800474e:	4b41      	ldr	r3, [pc, #260]	; (8004854 <keypad_sm+0x51c>)
 8004750:	2001      	movs	r0, #1
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	f7ff fa4c 	bl	8003bf0 <fill_keypad>
				encmode = 1;
 8004758:	2101      	movs	r1, #1
				encpos = 0;
 800475a:	2200      	movs	r2, #0
 800475c:	4b3b      	ldr	r3, [pc, #236]	; (800484c <keypad_sm+0x514>)
				encmode = 1;
 800475e:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8004760:	701a      	strb	r2, [r3, #0]
}
 8004762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(num == 'A'){
 8004764:	2841      	cmp	r0, #65	; 0x41
 8004766:	f000 823e 	beq.w	8004be6 <keypad_sm+0x8ae>
			else if(num == 'B'){
 800476a:	2842      	cmp	r0, #66	; 0x42
 800476c:	f000 83a0 	beq.w	8004eb0 <keypad_sm+0xb78>
			else if(num == 'C'){
 8004770:	2843      	cmp	r0, #67	; 0x43
 8004772:	f000 8687 	beq.w	8005484 <keypad_sm+0x114c>
			else if(num == 'D'){
 8004776:	2844      	cmp	r0, #68	; 0x44
 8004778:	f000 8599 	beq.w	80052ae <keypad_sm+0xf76>
			else if(num == '.'){
 800477c:	282e      	cmp	r0, #46	; 0x2e
 800477e:	f000 8717 	beq.w	80055b0 <keypad_sm+0x1278>
			else if(num >= '0' && num <= '9'){
 8004782:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004786:	2b09      	cmp	r3, #9
 8004788:	f200 86f7 	bhi.w	800557a <keypad_sm+0x1242>
				keypaddecimal = 0;
 800478c:	2600      	movs	r6, #0
			keypadarr[0] = num;
 800478e:	207a      	movs	r0, #122	; 0x7a
 8004790:	4b2a      	ldr	r3, [pc, #168]	; (800483c <keypad_sm+0x504>)
			if(keypadarr[4] == '.'){
 8004792:	4a2b      	ldr	r2, [pc, #172]	; (8004840 <keypad_sm+0x508>)
				keypaddecimal = 0;
 8004794:	4d2b      	ldr	r5, [pc, #172]	; (8004844 <keypad_sm+0x50c>)
	while(keypaditerator < 4){
 8004796:	7819      	ldrb	r1, [r3, #0]
 8004798:	b249      	sxtb	r1, r1
 800479a:	2903      	cmp	r1, #3
 800479c:	dc1c      	bgt.n	80047d8 <keypad_sm+0x4a0>
		if(keypaditerator < keypadlength-1){
 800479e:	7819      	ldrb	r1, [r3, #0]
 80047a0:	b249      	sxtb	r1, r1
 80047a2:	2903      	cmp	r1, #3
 80047a4:	dcf7      	bgt.n	8004796 <keypad_sm+0x45e>
			if(keypadarr[4] == '.'){
 80047a6:	7911      	ldrb	r1, [r2, #4]
 80047a8:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80047aa:	bf08      	it	eq
 80047ac:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80047ae:	78d1      	ldrb	r1, [r2, #3]
 80047b0:	b2c9      	uxtb	r1, r1
 80047b2:	7111      	strb	r1, [r2, #4]
 80047b4:	7891      	ldrb	r1, [r2, #2]
 80047b6:	b2c9      	uxtb	r1, r1
 80047b8:	70d1      	strb	r1, [r2, #3]
 80047ba:	7851      	ldrb	r1, [r2, #1]
 80047bc:	b2c9      	uxtb	r1, r1
 80047be:	7091      	strb	r1, [r2, #2]
 80047c0:	7811      	ldrb	r1, [r2, #0]
 80047c2:	b2c9      	uxtb	r1, r1
 80047c4:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80047c6:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80047c8:	7819      	ldrb	r1, [r3, #0]
 80047ca:	3101      	adds	r1, #1
 80047cc:	b249      	sxtb	r1, r1
 80047ce:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80047d0:	7819      	ldrb	r1, [r3, #0]
 80047d2:	b249      	sxtb	r1, r1
 80047d4:	2903      	cmp	r1, #3
 80047d6:	dde2      	ble.n	800479e <keypad_sm+0x466>
				encmode = 0;
 80047d8:	2300      	movs	r3, #0
				encpos = 0;
 80047da:	4a1c      	ldr	r2, [pc, #112]	; (800484c <keypad_sm+0x514>)
				encmode = 0;
 80047dc:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80047de:	7013      	strb	r3, [r2, #0]
}
 80047e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80047e2:	2500      	movs	r5, #0
			keypadarr[0] = num;
 80047e4:	207a      	movs	r0, #122	; 0x7a
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <keypad_sm+0x504>)
			if(keypadarr[4] == '.'){
 80047e8:	4a15      	ldr	r2, [pc, #84]	; (8004840 <keypad_sm+0x508>)
				keypaddecimal = 0;
 80047ea:	4f16      	ldr	r7, [pc, #88]	; (8004844 <keypad_sm+0x50c>)
				kpenum = WAIT;
 80047ec:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80047ee:	7819      	ldrb	r1, [r3, #0]
 80047f0:	b249      	sxtb	r1, r1
 80047f2:	2903      	cmp	r1, #3
 80047f4:	dc1c      	bgt.n	8004830 <keypad_sm+0x4f8>
		if(keypaditerator < keypadlength-1){
 80047f6:	7819      	ldrb	r1, [r3, #0]
 80047f8:	b249      	sxtb	r1, r1
 80047fa:	2903      	cmp	r1, #3
 80047fc:	dcf7      	bgt.n	80047ee <keypad_sm+0x4b6>
			if(keypadarr[4] == '.'){
 80047fe:	7911      	ldrb	r1, [r2, #4]
 8004800:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004802:	bf08      	it	eq
 8004804:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004806:	78d1      	ldrb	r1, [r2, #3]
 8004808:	b2c9      	uxtb	r1, r1
 800480a:	7111      	strb	r1, [r2, #4]
 800480c:	7891      	ldrb	r1, [r2, #2]
 800480e:	b2c9      	uxtb	r1, r1
 8004810:	70d1      	strb	r1, [r2, #3]
 8004812:	7851      	ldrb	r1, [r2, #1]
 8004814:	b2c9      	uxtb	r1, r1
 8004816:	7091      	strb	r1, [r2, #2]
 8004818:	7811      	ldrb	r1, [r2, #0]
 800481a:	b2c9      	uxtb	r1, r1
 800481c:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800481e:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004820:	7819      	ldrb	r1, [r3, #0]
 8004822:	3101      	adds	r1, #1
 8004824:	b249      	sxtb	r1, r1
 8004826:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004828:	7819      	ldrb	r1, [r3, #0]
 800482a:	b249      	sxtb	r1, r1
 800482c:	2903      	cmp	r1, #3
 800482e:	dde2      	ble.n	80047f6 <keypad_sm+0x4be>
				encmode = 0;
 8004830:	2300      	movs	r3, #0
				encpos = 0;
 8004832:	4a06      	ldr	r2, [pc, #24]	; (800484c <keypad_sm+0x514>)
				encmode = 0;
 8004834:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004836:	7013      	strb	r3, [r2, #0]
}
 8004838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800483a:	bf00      	nop
 800483c:	20000005 	.word	0x20000005
 8004840:	20000000 	.word	0x20000000
 8004844:	200006c4 	.word	0x200006c4
 8004848:	200003ac 	.word	0x200003ac
 800484c:	200003ad 	.word	0x200003ad
 8004850:	20000824 	.word	0x20000824
 8004854:	20000394 	.word	0x20000394
			keypadarr[0] = num;
 8004858:	207a      	movs	r0, #122	; 0x7a
 800485a:	4b90      	ldr	r3, [pc, #576]	; (8004a9c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 800485c:	4a90      	ldr	r2, [pc, #576]	; (8004aa0 <keypad_sm+0x768>)
				keypaddecimal = 0;
 800485e:	4c91      	ldr	r4, [pc, #580]	; (8004aa4 <keypad_sm+0x76c>)
				kpenum = WAIT;
 8004860:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004862:	7819      	ldrb	r1, [r3, #0]
 8004864:	b249      	sxtb	r1, r1
 8004866:	2903      	cmp	r1, #3
 8004868:	f73f ad7c 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800486c:	7819      	ldrb	r1, [r3, #0]
 800486e:	b249      	sxtb	r1, r1
 8004870:	2903      	cmp	r1, #3
 8004872:	dcf6      	bgt.n	8004862 <keypad_sm+0x52a>
			if(keypadarr[4] == '.'){
 8004874:	7911      	ldrb	r1, [r2, #4]
 8004876:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004878:	bf08      	it	eq
 800487a:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 800487c:	78d1      	ldrb	r1, [r2, #3]
 800487e:	b2c9      	uxtb	r1, r1
 8004880:	7111      	strb	r1, [r2, #4]
 8004882:	7891      	ldrb	r1, [r2, #2]
 8004884:	b2c9      	uxtb	r1, r1
 8004886:	70d1      	strb	r1, [r2, #3]
 8004888:	7851      	ldrb	r1, [r2, #1]
 800488a:	b2c9      	uxtb	r1, r1
 800488c:	7091      	strb	r1, [r2, #2]
 800488e:	7811      	ldrb	r1, [r2, #0]
 8004890:	b2c9      	uxtb	r1, r1
 8004892:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004894:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004896:	7819      	ldrb	r1, [r3, #0]
 8004898:	3101      	adds	r1, #1
 800489a:	b249      	sxtb	r1, r1
 800489c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800489e:	7819      	ldrb	r1, [r3, #0]
 80048a0:	b249      	sxtb	r1, r1
 80048a2:	2903      	cmp	r1, #3
 80048a4:	dde2      	ble.n	800486c <keypad_sm+0x534>
}
 80048a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(chstat_main){
 80048a8:	4b7f      	ldr	r3, [pc, #508]	; (8004aa8 <keypad_sm+0x770>)
 80048aa:	781a      	ldrb	r2, [r3, #0]
 80048ac:	2a00      	cmp	r2, #0
 80048ae:	f000 81ee 	beq.w	8004c8e <keypad_sm+0x956>
				chstat_main = 0;
 80048b2:	701c      	strb	r4, [r3, #0]
}
 80048b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80048b6:	2500      	movs	r5, #0
			keypadarr[0] = num;
 80048b8:	207a      	movs	r0, #122	; 0x7a
 80048ba:	4b78      	ldr	r3, [pc, #480]	; (8004a9c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 80048bc:	4a78      	ldr	r2, [pc, #480]	; (8004aa0 <keypad_sm+0x768>)
				keypaddecimal = 0;
 80048be:	4f79      	ldr	r7, [pc, #484]	; (8004aa4 <keypad_sm+0x76c>)
				kpenum = WAIT;
 80048c0:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80048c2:	7819      	ldrb	r1, [r3, #0]
 80048c4:	b249      	sxtb	r1, r1
 80048c6:	2903      	cmp	r1, #3
 80048c8:	dc1c      	bgt.n	8004904 <keypad_sm+0x5cc>
		if(keypaditerator < keypadlength-1){
 80048ca:	7819      	ldrb	r1, [r3, #0]
 80048cc:	b249      	sxtb	r1, r1
 80048ce:	2903      	cmp	r1, #3
 80048d0:	dcf7      	bgt.n	80048c2 <keypad_sm+0x58a>
			if(keypadarr[4] == '.'){
 80048d2:	7911      	ldrb	r1, [r2, #4]
 80048d4:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80048d6:	bf08      	it	eq
 80048d8:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 80048da:	78d1      	ldrb	r1, [r2, #3]
 80048dc:	b2c9      	uxtb	r1, r1
 80048de:	7111      	strb	r1, [r2, #4]
 80048e0:	7891      	ldrb	r1, [r2, #2]
 80048e2:	b2c9      	uxtb	r1, r1
 80048e4:	70d1      	strb	r1, [r2, #3]
 80048e6:	7851      	ldrb	r1, [r2, #1]
 80048e8:	b2c9      	uxtb	r1, r1
 80048ea:	7091      	strb	r1, [r2, #2]
 80048ec:	7811      	ldrb	r1, [r2, #0]
 80048ee:	b2c9      	uxtb	r1, r1
 80048f0:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80048f2:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80048f4:	7819      	ldrb	r1, [r3, #0]
 80048f6:	3101      	adds	r1, #1
 80048f8:	b249      	sxtb	r1, r1
 80048fa:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80048fc:	7819      	ldrb	r1, [r3, #0]
 80048fe:	b249      	sxtb	r1, r1
 8004900:	2903      	cmp	r1, #3
 8004902:	dde2      	ble.n	80048ca <keypad_sm+0x592>
				encmode = 0;
 8004904:	2300      	movs	r3, #0
				encpos = 0;
 8004906:	4a69      	ldr	r2, [pc, #420]	; (8004aac <keypad_sm+0x774>)
				encmode = 0;
 8004908:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800490a:	7013      	strb	r3, [r2, #0]
}
 800490c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 800490e:	207a      	movs	r0, #122	; 0x7a
 8004910:	4b62      	ldr	r3, [pc, #392]	; (8004a9c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 8004912:	4a63      	ldr	r2, [pc, #396]	; (8004aa0 <keypad_sm+0x768>)
				keypaddecimal = 0;
 8004914:	4c63      	ldr	r4, [pc, #396]	; (8004aa4 <keypad_sm+0x76c>)
				kpenum = WAIT;
 8004916:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004918:	7819      	ldrb	r1, [r3, #0]
 800491a:	b249      	sxtb	r1, r1
 800491c:	2903      	cmp	r1, #3
 800491e:	f73f ad21 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004922:	7819      	ldrb	r1, [r3, #0]
 8004924:	b249      	sxtb	r1, r1
 8004926:	2903      	cmp	r1, #3
 8004928:	dcf6      	bgt.n	8004918 <keypad_sm+0x5e0>
			if(keypadarr[4] == '.'){
 800492a:	7911      	ldrb	r1, [r2, #4]
 800492c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800492e:	bf08      	it	eq
 8004930:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004932:	78d1      	ldrb	r1, [r2, #3]
 8004934:	b2c9      	uxtb	r1, r1
 8004936:	7111      	strb	r1, [r2, #4]
 8004938:	7891      	ldrb	r1, [r2, #2]
 800493a:	b2c9      	uxtb	r1, r1
 800493c:	70d1      	strb	r1, [r2, #3]
 800493e:	7851      	ldrb	r1, [r2, #1]
 8004940:	b2c9      	uxtb	r1, r1
 8004942:	7091      	strb	r1, [r2, #2]
 8004944:	7811      	ldrb	r1, [r2, #0]
 8004946:	b2c9      	uxtb	r1, r1
 8004948:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800494a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800494c:	7819      	ldrb	r1, [r3, #0]
 800494e:	3101      	adds	r1, #1
 8004950:	b249      	sxtb	r1, r1
 8004952:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004954:	7819      	ldrb	r1, [r3, #0]
 8004956:	b249      	sxtb	r1, r1
 8004958:	2903      	cmp	r1, #3
 800495a:	dde2      	ble.n	8004922 <keypad_sm+0x5ea>
}
 800495c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			kpenum = A2;
 800495e:	2104      	movs	r1, #4
			keypadarr[0] = num;
 8004960:	207a      	movs	r0, #122	; 0x7a
 8004962:	4b4e      	ldr	r3, [pc, #312]	; (8004a9c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 8004964:	4a4e      	ldr	r2, [pc, #312]	; (8004aa0 <keypad_sm+0x768>)
				keypaddecimal = 0;
 8004966:	4d4f      	ldr	r5, [pc, #316]	; (8004aa4 <keypad_sm+0x76c>)
			kpenum = A2;
 8004968:	7031      	strb	r1, [r6, #0]
	while(keypaditerator < 4){
 800496a:	7819      	ldrb	r1, [r3, #0]
 800496c:	b249      	sxtb	r1, r1
 800496e:	2903      	cmp	r1, #3
 8004970:	f73f acf8 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004974:	7819      	ldrb	r1, [r3, #0]
 8004976:	b249      	sxtb	r1, r1
 8004978:	2903      	cmp	r1, #3
 800497a:	dcf6      	bgt.n	800496a <keypad_sm+0x632>
			if(keypadarr[4] == '.'){
 800497c:	7911      	ldrb	r1, [r2, #4]
 800497e:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004980:	bf08      	it	eq
 8004982:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004984:	78d1      	ldrb	r1, [r2, #3]
 8004986:	b2c9      	uxtb	r1, r1
 8004988:	7111      	strb	r1, [r2, #4]
 800498a:	7891      	ldrb	r1, [r2, #2]
 800498c:	b2c9      	uxtb	r1, r1
 800498e:	70d1      	strb	r1, [r2, #3]
 8004990:	7851      	ldrb	r1, [r2, #1]
 8004992:	b2c9      	uxtb	r1, r1
 8004994:	7091      	strb	r1, [r2, #2]
 8004996:	7811      	ldrb	r1, [r2, #0]
 8004998:	b2c9      	uxtb	r1, r1
 800499a:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800499c:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800499e:	7819      	ldrb	r1, [r3, #0]
 80049a0:	3101      	adds	r1, #1
 80049a2:	b249      	sxtb	r1, r1
 80049a4:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80049a6:	7819      	ldrb	r1, [r3, #0]
 80049a8:	b249      	sxtb	r1, r1
 80049aa:	2903      	cmp	r1, #3
 80049ac:	dde2      	ble.n	8004974 <keypad_sm+0x63c>
}
 80049ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(chstat_aux_rx){
 80049b0:	4b3f      	ldr	r3, [pc, #252]	; (8004ab0 <keypad_sm+0x778>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80be 	beq.w	8004b36 <keypad_sm+0x7fe>
				chstat_aux_tx = 0;
 80049ba:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <keypad_sm+0x77c>)
 80049bc:	701c      	strb	r4, [r3, #0]
}
 80049be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(num == 'A'){
 80049c0:	2841      	cmp	r0, #65	; 0x41
 80049c2:	f000 8221 	beq.w	8004e08 <keypad_sm+0xad0>
			else if(num == 'B'){
 80049c6:	2842      	cmp	r0, #66	; 0x42
 80049c8:	f000 83df 	beq.w	800518a <keypad_sm+0xe52>
			else if(num == 'C'){
 80049cc:	2843      	cmp	r0, #67	; 0x43
 80049ce:	f000 8528 	beq.w	8005422 <keypad_sm+0x10ea>
			else if(num == 'D'){
 80049d2:	2844      	cmp	r0, #68	; 0x44
 80049d4:	f000 87f5 	beq.w	80059c2 <keypad_sm+0x168a>
			else if(num == '.'){
 80049d8:	282e      	cmp	r0, #46	; 0x2e
 80049da:	f000 8211 	beq.w	8004e00 <keypad_sm+0xac8>
			else if(num >= '0' && num <= '9'){
 80049de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80049e2:	2b09      	cmp	r3, #9
 80049e4:	f240 820c 	bls.w	8004e00 <keypad_sm+0xac8>
			else if(num == '#'){
 80049e8:	2823      	cmp	r0, #35	; 0x23
 80049ea:	f000 874f 	beq.w	800588c <keypad_sm+0x1554>
			else if(num == '+'){
 80049ee:	282b      	cmp	r0, #43	; 0x2b
 80049f0:	f001 82e2 	beq.w	8005fb8 <keypad_sm+0x1c80>
			else if(num == '-'){
 80049f4:	282d      	cmp	r0, #45	; 0x2d
 80049f6:	f001 827c 	beq.w	8005ef2 <keypad_sm+0x1bba>
			else if(num == 's'){
 80049fa:	2873      	cmp	r0, #115	; 0x73
 80049fc:	f001 832f 	beq.w	800605e <keypad_sm+0x1d26>
			else if(num == '['){
 8004a00:	285b      	cmp	r0, #91	; 0x5b
 8004a02:	f001 8321 	beq.w	8006048 <keypad_sm+0x1d10>
			else if(num == ']'){
 8004a06:	285d      	cmp	r0, #93	; 0x5d
 8004a08:	f47f acac 	bne.w	8004364 <keypad_sm+0x2c>
				fill_keypad(1, amp_set_main);
 8004a0c:	4b2a      	ldr	r3, [pc, #168]	; (8004ab8 <keypad_sm+0x780>)
 8004a0e:	2001      	movs	r0, #1
 8004a10:	6819      	ldr	r1, [r3, #0]
 8004a12:	f7ff f8ed 	bl	8003bf0 <fill_keypad>
				encmode = 1;
 8004a16:	2101      	movs	r1, #1
				encpos = 0;
 8004a18:	2200      	movs	r2, #0
 8004a1a:	4b24      	ldr	r3, [pc, #144]	; (8004aac <keypad_sm+0x774>)
				encmode = 1;
 8004a1c:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8004a1e:	701a      	strb	r2, [r3, #0]
}
 8004a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8004a22:	f7fe ff41 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004a26:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8004a28:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004a2a:	f7fc fb05 	bl	8001038 <__aeabi_fcmpge>
 8004a2e:	b140      	cbz	r0, 8004a42 <keypad_sm+0x70a>
 8004a30:	4628      	mov	r0, r5
 8004a32:	4922      	ldr	r1, [pc, #136]	; (8004abc <keypad_sm+0x784>)
 8004a34:	f7fc faf6 	bl	8001024 <__aeabi_fcmple>
 8004a38:	b118      	cbz	r0, 8004a42 <keypad_sm+0x70a>
					volt_set_aux = translate_keypad();
 8004a3a:	f7fe ff35 	bl	80038a8 <translate_keypad>
 8004a3e:	4a20      	ldr	r2, [pc, #128]	; (8004ac0 <keypad_sm+0x788>)
 8004a40:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8004a42:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004a44:	207a      	movs	r0, #122	; 0x7a
 8004a46:	4b15      	ldr	r3, [pc, #84]	; (8004a9c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 8004a48:	4a15      	ldr	r2, [pc, #84]	; (8004aa0 <keypad_sm+0x768>)
				keypaddecimal = 0;
 8004a4a:	4f16      	ldr	r7, [pc, #88]	; (8004aa4 <keypad_sm+0x76c>)
				kpenum = WAIT;
 8004a4c:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004a4e:	7819      	ldrb	r1, [r3, #0]
 8004a50:	b249      	sxtb	r1, r1
 8004a52:	2903      	cmp	r1, #3
 8004a54:	dc1c      	bgt.n	8004a90 <keypad_sm+0x758>
		if(keypaditerator < keypadlength-1){
 8004a56:	7819      	ldrb	r1, [r3, #0]
 8004a58:	b249      	sxtb	r1, r1
 8004a5a:	2903      	cmp	r1, #3
 8004a5c:	dcf7      	bgt.n	8004a4e <keypad_sm+0x716>
			if(keypadarr[4] == '.'){
 8004a5e:	7911      	ldrb	r1, [r2, #4]
 8004a60:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004a62:	bf08      	it	eq
 8004a64:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004a66:	78d1      	ldrb	r1, [r2, #3]
 8004a68:	b2c9      	uxtb	r1, r1
 8004a6a:	7111      	strb	r1, [r2, #4]
 8004a6c:	7891      	ldrb	r1, [r2, #2]
 8004a6e:	b2c9      	uxtb	r1, r1
 8004a70:	70d1      	strb	r1, [r2, #3]
 8004a72:	7851      	ldrb	r1, [r2, #1]
 8004a74:	b2c9      	uxtb	r1, r1
 8004a76:	7091      	strb	r1, [r2, #2]
 8004a78:	7811      	ldrb	r1, [r2, #0]
 8004a7a:	b2c9      	uxtb	r1, r1
 8004a7c:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004a7e:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004a80:	7819      	ldrb	r1, [r3, #0]
 8004a82:	3101      	adds	r1, #1
 8004a84:	b249      	sxtb	r1, r1
 8004a86:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004a88:	7819      	ldrb	r1, [r3, #0]
 8004a8a:	b249      	sxtb	r1, r1
 8004a8c:	2903      	cmp	r1, #3
 8004a8e:	dde2      	ble.n	8004a56 <keypad_sm+0x71e>
				encmode = 0;
 8004a90:	2300      	movs	r3, #0
				encpos = 0;
 8004a92:	4a06      	ldr	r2, [pc, #24]	; (8004aac <keypad_sm+0x774>)
				encmode = 0;
 8004a94:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004a96:	7013      	strb	r3, [r2, #0]
}
 8004a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000005 	.word	0x20000005
 8004aa0:	20000000 	.word	0x20000000
 8004aa4:	200006c4 	.word	0x200006c4
 8004aa8:	200003a3 	.word	0x200003a3
 8004aac:	200003ad 	.word	0x200003ad
 8004ab0:	200003a1 	.word	0x200003a1
 8004ab4:	200003a2 	.word	0x200003a2
 8004ab8:	20000398 	.word	0x20000398
 8004abc:	41400000 	.word	0x41400000
 8004ac0:	20000824 	.word	0x20000824
	float temp = translate_keypad();
 8004ac4:	f7fe fef0 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004ac8:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8004aca:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004acc:	f7fc fab4 	bl	8001038 <__aeabi_fcmpge>
 8004ad0:	b140      	cbz	r0, 8004ae4 <keypad_sm+0x7ac>
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	4999      	ldr	r1, [pc, #612]	; (8004d3c <keypad_sm+0xa04>)
 8004ad6:	f7fc faa5 	bl	8001024 <__aeabi_fcmple>
 8004ada:	b118      	cbz	r0, 8004ae4 <keypad_sm+0x7ac>
					volt_set_aux = translate_keypad();
 8004adc:	f7fe fee4 	bl	80038a8 <translate_keypad>
 8004ae0:	4a97      	ldr	r2, [pc, #604]	; (8004d40 <keypad_sm+0xa08>)
 8004ae2:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8004ae4:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8004ae6:	207a      	movs	r0, #122	; 0x7a
 8004ae8:	4b96      	ldr	r3, [pc, #600]	; (8004d44 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004aea:	4a97      	ldr	r2, [pc, #604]	; (8004d48 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004aec:	4d97      	ldr	r5, [pc, #604]	; (8004d4c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004aee:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8004af0:	7819      	ldrb	r1, [r3, #0]
 8004af2:	b249      	sxtb	r1, r1
 8004af4:	2903      	cmp	r1, #3
 8004af6:	f73f ac35 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004afa:	7819      	ldrb	r1, [r3, #0]
 8004afc:	b249      	sxtb	r1, r1
 8004afe:	2903      	cmp	r1, #3
 8004b00:	dcf6      	bgt.n	8004af0 <keypad_sm+0x7b8>
			if(keypadarr[4] == '.'){
 8004b02:	7911      	ldrb	r1, [r2, #4]
 8004b04:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004b06:	bf08      	it	eq
 8004b08:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004b0a:	78d1      	ldrb	r1, [r2, #3]
 8004b0c:	b2c9      	uxtb	r1, r1
 8004b0e:	7111      	strb	r1, [r2, #4]
 8004b10:	7891      	ldrb	r1, [r2, #2]
 8004b12:	b2c9      	uxtb	r1, r1
 8004b14:	70d1      	strb	r1, [r2, #3]
 8004b16:	7851      	ldrb	r1, [r2, #1]
 8004b18:	b2c9      	uxtb	r1, r1
 8004b1a:	7091      	strb	r1, [r2, #2]
 8004b1c:	7811      	ldrb	r1, [r2, #0]
 8004b1e:	b2c9      	uxtb	r1, r1
 8004b20:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004b22:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004b24:	7819      	ldrb	r1, [r3, #0]
 8004b26:	3101      	adds	r1, #1
 8004b28:	b249      	sxtb	r1, r1
 8004b2a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004b2c:	7819      	ldrb	r1, [r3, #0]
 8004b2e:	b249      	sxtb	r1, r1
 8004b30:	2903      	cmp	r1, #3
 8004b32:	dde2      	ble.n	8004afa <keypad_sm+0x7c2>
}
 8004b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				chstat_aux_tx = 1;
 8004b36:	2201      	movs	r2, #1
 8004b38:	4b85      	ldr	r3, [pc, #532]	; (8004d50 <keypad_sm+0xa18>)
 8004b3a:	701a      	strb	r2, [r3, #0]
}
 8004b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004b3e:	207a      	movs	r0, #122	; 0x7a
 8004b40:	4b80      	ldr	r3, [pc, #512]	; (8004d44 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004b42:	4a81      	ldr	r2, [pc, #516]	; (8004d48 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004b44:	4c81      	ldr	r4, [pc, #516]	; (8004d4c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004b46:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004b48:	7819      	ldrb	r1, [r3, #0]
 8004b4a:	b249      	sxtb	r1, r1
 8004b4c:	2903      	cmp	r1, #3
 8004b4e:	f73f ac09 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004b52:	7819      	ldrb	r1, [r3, #0]
 8004b54:	b249      	sxtb	r1, r1
 8004b56:	2903      	cmp	r1, #3
 8004b58:	dcf6      	bgt.n	8004b48 <keypad_sm+0x810>
			if(keypadarr[4] == '.'){
 8004b5a:	7911      	ldrb	r1, [r2, #4]
 8004b5c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004b5e:	bf08      	it	eq
 8004b60:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004b62:	78d1      	ldrb	r1, [r2, #3]
 8004b64:	b2c9      	uxtb	r1, r1
 8004b66:	7111      	strb	r1, [r2, #4]
 8004b68:	7891      	ldrb	r1, [r2, #2]
 8004b6a:	b2c9      	uxtb	r1, r1
 8004b6c:	70d1      	strb	r1, [r2, #3]
 8004b6e:	7851      	ldrb	r1, [r2, #1]
 8004b70:	b2c9      	uxtb	r1, r1
 8004b72:	7091      	strb	r1, [r2, #2]
 8004b74:	7811      	ldrb	r1, [r2, #0]
 8004b76:	b2c9      	uxtb	r1, r1
 8004b78:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004b7a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004b7c:	7819      	ldrb	r1, [r3, #0]
 8004b7e:	3101      	adds	r1, #1
 8004b80:	b249      	sxtb	r1, r1
 8004b82:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004b84:	7819      	ldrb	r1, [r3, #0]
 8004b86:	b249      	sxtb	r1, r1
 8004b88:	2903      	cmp	r1, #3
 8004b8a:	dde2      	ble.n	8004b52 <keypad_sm+0x81a>
}
 8004b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004b8e:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004b90:	207a      	movs	r0, #122	; 0x7a
 8004b92:	4b6c      	ldr	r3, [pc, #432]	; (8004d44 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004b94:	4a6c      	ldr	r2, [pc, #432]	; (8004d48 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004b96:	4f6d      	ldr	r7, [pc, #436]	; (8004d4c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004b98:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004b9a:	7819      	ldrb	r1, [r3, #0]
 8004b9c:	b249      	sxtb	r1, r1
 8004b9e:	2903      	cmp	r1, #3
 8004ba0:	dc1c      	bgt.n	8004bdc <keypad_sm+0x8a4>
		if(keypaditerator < keypadlength-1){
 8004ba2:	7819      	ldrb	r1, [r3, #0]
 8004ba4:	b249      	sxtb	r1, r1
 8004ba6:	2903      	cmp	r1, #3
 8004ba8:	dcf7      	bgt.n	8004b9a <keypad_sm+0x862>
			if(keypadarr[4] == '.'){
 8004baa:	7911      	ldrb	r1, [r2, #4]
 8004bac:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004bae:	bf08      	it	eq
 8004bb0:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004bb2:	78d1      	ldrb	r1, [r2, #3]
 8004bb4:	b2c9      	uxtb	r1, r1
 8004bb6:	7111      	strb	r1, [r2, #4]
 8004bb8:	7891      	ldrb	r1, [r2, #2]
 8004bba:	b2c9      	uxtb	r1, r1
 8004bbc:	70d1      	strb	r1, [r2, #3]
 8004bbe:	7851      	ldrb	r1, [r2, #1]
 8004bc0:	b2c9      	uxtb	r1, r1
 8004bc2:	7091      	strb	r1, [r2, #2]
 8004bc4:	7811      	ldrb	r1, [r2, #0]
 8004bc6:	b2c9      	uxtb	r1, r1
 8004bc8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004bca:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004bcc:	7819      	ldrb	r1, [r3, #0]
 8004bce:	3101      	adds	r1, #1
 8004bd0:	b249      	sxtb	r1, r1
 8004bd2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004bd4:	7819      	ldrb	r1, [r3, #0]
 8004bd6:	b249      	sxtb	r1, r1
 8004bd8:	2903      	cmp	r1, #3
 8004bda:	dde2      	ble.n	8004ba2 <keypad_sm+0x86a>
				encmode = 0;
 8004bdc:	2300      	movs	r3, #0
				encpos = 0;
 8004bde:	4a5d      	ldr	r2, [pc, #372]	; (8004d54 <keypad_sm+0xa1c>)
				encmode = 0;
 8004be0:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004be2:	7013      	strb	r3, [r2, #0]
}
 8004be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004be6:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004be8:	207a      	movs	r0, #122	; 0x7a
 8004bea:	4b56      	ldr	r3, [pc, #344]	; (8004d44 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004bec:	4a56      	ldr	r2, [pc, #344]	; (8004d48 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004bee:	4f57      	ldr	r7, [pc, #348]	; (8004d4c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004bf0:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004bf2:	7819      	ldrb	r1, [r3, #0]
 8004bf4:	b249      	sxtb	r1, r1
 8004bf6:	2903      	cmp	r1, #3
 8004bf8:	dc1c      	bgt.n	8004c34 <keypad_sm+0x8fc>
		if(keypaditerator < keypadlength-1){
 8004bfa:	7819      	ldrb	r1, [r3, #0]
 8004bfc:	b249      	sxtb	r1, r1
 8004bfe:	2903      	cmp	r1, #3
 8004c00:	dcf7      	bgt.n	8004bf2 <keypad_sm+0x8ba>
			if(keypadarr[4] == '.'){
 8004c02:	7911      	ldrb	r1, [r2, #4]
 8004c04:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004c06:	bf08      	it	eq
 8004c08:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004c0a:	78d1      	ldrb	r1, [r2, #3]
 8004c0c:	b2c9      	uxtb	r1, r1
 8004c0e:	7111      	strb	r1, [r2, #4]
 8004c10:	7891      	ldrb	r1, [r2, #2]
 8004c12:	b2c9      	uxtb	r1, r1
 8004c14:	70d1      	strb	r1, [r2, #3]
 8004c16:	7851      	ldrb	r1, [r2, #1]
 8004c18:	b2c9      	uxtb	r1, r1
 8004c1a:	7091      	strb	r1, [r2, #2]
 8004c1c:	7811      	ldrb	r1, [r2, #0]
 8004c1e:	b2c9      	uxtb	r1, r1
 8004c20:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004c22:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004c24:	7819      	ldrb	r1, [r3, #0]
 8004c26:	3101      	adds	r1, #1
 8004c28:	b249      	sxtb	r1, r1
 8004c2a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004c2c:	7819      	ldrb	r1, [r3, #0]
 8004c2e:	b249      	sxtb	r1, r1
 8004c30:	2903      	cmp	r1, #3
 8004c32:	dde2      	ble.n	8004bfa <keypad_sm+0x8c2>
				encmode = 0;
 8004c34:	2300      	movs	r3, #0
				encpos = 0;
 8004c36:	4a47      	ldr	r2, [pc, #284]	; (8004d54 <keypad_sm+0xa1c>)
				encmode = 0;
 8004c38:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004c3a:	7013      	strb	r3, [r2, #0]
}
 8004c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004c3e:	207a      	movs	r0, #122	; 0x7a
 8004c40:	4b40      	ldr	r3, [pc, #256]	; (8004d44 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004c42:	4a41      	ldr	r2, [pc, #260]	; (8004d48 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004c44:	4c41      	ldr	r4, [pc, #260]	; (8004d4c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004c46:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004c48:	7819      	ldrb	r1, [r3, #0]
 8004c4a:	b249      	sxtb	r1, r1
 8004c4c:	2903      	cmp	r1, #3
 8004c4e:	f73f ab89 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004c52:	7819      	ldrb	r1, [r3, #0]
 8004c54:	b249      	sxtb	r1, r1
 8004c56:	2903      	cmp	r1, #3
 8004c58:	dcf6      	bgt.n	8004c48 <keypad_sm+0x910>
			if(keypadarr[4] == '.'){
 8004c5a:	7911      	ldrb	r1, [r2, #4]
 8004c5c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004c5e:	bf08      	it	eq
 8004c60:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004c62:	78d1      	ldrb	r1, [r2, #3]
 8004c64:	b2c9      	uxtb	r1, r1
 8004c66:	7111      	strb	r1, [r2, #4]
 8004c68:	7891      	ldrb	r1, [r2, #2]
 8004c6a:	b2c9      	uxtb	r1, r1
 8004c6c:	70d1      	strb	r1, [r2, #3]
 8004c6e:	7851      	ldrb	r1, [r2, #1]
 8004c70:	b2c9      	uxtb	r1, r1
 8004c72:	7091      	strb	r1, [r2, #2]
 8004c74:	7811      	ldrb	r1, [r2, #0]
 8004c76:	b2c9      	uxtb	r1, r1
 8004c78:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004c7a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004c7c:	7819      	ldrb	r1, [r3, #0]
 8004c7e:	3101      	adds	r1, #1
 8004c80:	b249      	sxtb	r1, r1
 8004c82:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004c84:	7819      	ldrb	r1, [r3, #0]
 8004c86:	b249      	sxtb	r1, r1
 8004c88:	2903      	cmp	r1, #3
 8004c8a:	dde2      	ble.n	8004c52 <keypad_sm+0x91a>
}
 8004c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				chstat_main = 1;
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
}
 8004c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004c94:	207a      	movs	r0, #122	; 0x7a
 8004c96:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004c98:	4a2b      	ldr	r2, [pc, #172]	; (8004d48 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004c9a:	4c2c      	ldr	r4, [pc, #176]	; (8004d4c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004c9c:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004c9e:	7819      	ldrb	r1, [r3, #0]
 8004ca0:	b249      	sxtb	r1, r1
 8004ca2:	2903      	cmp	r1, #3
 8004ca4:	f73f ab5e 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004ca8:	7819      	ldrb	r1, [r3, #0]
 8004caa:	b249      	sxtb	r1, r1
 8004cac:	2903      	cmp	r1, #3
 8004cae:	dcf6      	bgt.n	8004c9e <keypad_sm+0x966>
			if(keypadarr[4] == '.'){
 8004cb0:	7911      	ldrb	r1, [r2, #4]
 8004cb2:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004cb4:	bf08      	it	eq
 8004cb6:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004cb8:	78d1      	ldrb	r1, [r2, #3]
 8004cba:	b2c9      	uxtb	r1, r1
 8004cbc:	7111      	strb	r1, [r2, #4]
 8004cbe:	7891      	ldrb	r1, [r2, #2]
 8004cc0:	b2c9      	uxtb	r1, r1
 8004cc2:	70d1      	strb	r1, [r2, #3]
 8004cc4:	7851      	ldrb	r1, [r2, #1]
 8004cc6:	b2c9      	uxtb	r1, r1
 8004cc8:	7091      	strb	r1, [r2, #2]
 8004cca:	7811      	ldrb	r1, [r2, #0]
 8004ccc:	b2c9      	uxtb	r1, r1
 8004cce:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004cd0:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004cd2:	7819      	ldrb	r1, [r3, #0]
 8004cd4:	3101      	adds	r1, #1
 8004cd6:	b249      	sxtb	r1, r1
 8004cd8:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004cda:	7819      	ldrb	r1, [r3, #0]
 8004cdc:	b249      	sxtb	r1, r1
 8004cde:	2903      	cmp	r1, #3
 8004ce0:	dde2      	ble.n	8004ca8 <keypad_sm+0x970>
}
 8004ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004ce4:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004ce6:	207a      	movs	r0, #122	; 0x7a
 8004ce8:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004cec:	4f17      	ldr	r7, [pc, #92]	; (8004d4c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004cee:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004cf0:	7819      	ldrb	r1, [r3, #0]
 8004cf2:	b249      	sxtb	r1, r1
 8004cf4:	2903      	cmp	r1, #3
 8004cf6:	dc1c      	bgt.n	8004d32 <keypad_sm+0x9fa>
		if(keypaditerator < keypadlength-1){
 8004cf8:	7819      	ldrb	r1, [r3, #0]
 8004cfa:	b249      	sxtb	r1, r1
 8004cfc:	2903      	cmp	r1, #3
 8004cfe:	dcf7      	bgt.n	8004cf0 <keypad_sm+0x9b8>
			if(keypadarr[4] == '.'){
 8004d00:	7911      	ldrb	r1, [r2, #4]
 8004d02:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004d04:	bf08      	it	eq
 8004d06:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004d08:	78d1      	ldrb	r1, [r2, #3]
 8004d0a:	b2c9      	uxtb	r1, r1
 8004d0c:	7111      	strb	r1, [r2, #4]
 8004d0e:	7891      	ldrb	r1, [r2, #2]
 8004d10:	b2c9      	uxtb	r1, r1
 8004d12:	70d1      	strb	r1, [r2, #3]
 8004d14:	7851      	ldrb	r1, [r2, #1]
 8004d16:	b2c9      	uxtb	r1, r1
 8004d18:	7091      	strb	r1, [r2, #2]
 8004d1a:	7811      	ldrb	r1, [r2, #0]
 8004d1c:	b2c9      	uxtb	r1, r1
 8004d1e:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004d20:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004d22:	7819      	ldrb	r1, [r3, #0]
 8004d24:	3101      	adds	r1, #1
 8004d26:	b249      	sxtb	r1, r1
 8004d28:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004d2a:	7819      	ldrb	r1, [r3, #0]
 8004d2c:	b249      	sxtb	r1, r1
 8004d2e:	2903      	cmp	r1, #3
 8004d30:	dde2      	ble.n	8004cf8 <keypad_sm+0x9c0>
				encmode = 0;
 8004d32:	2300      	movs	r3, #0
				encpos = 0;
 8004d34:	4a07      	ldr	r2, [pc, #28]	; (8004d54 <keypad_sm+0xa1c>)
				encmode = 0;
 8004d36:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004d38:	7013      	strb	r3, [r2, #0]
}
 8004d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d3c:	41400000 	.word	0x41400000
 8004d40:	20000824 	.word	0x20000824
 8004d44:	20000005 	.word	0x20000005
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	200006c4 	.word	0x200006c4
 8004d50:	200003a2 	.word	0x200003a2
 8004d54:	200003ad 	.word	0x200003ad
				kpenum = WAIT;
 8004d58:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004d5a:	207a      	movs	r0, #122	; 0x7a
 8004d5c:	4b7e      	ldr	r3, [pc, #504]	; (8004f58 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 8004d5e:	4a7f      	ldr	r2, [pc, #508]	; (8004f5c <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8004d60:	4f7f      	ldr	r7, [pc, #508]	; (8004f60 <keypad_sm+0xc28>)
				kpenum = WAIT;
 8004d62:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004d64:	7819      	ldrb	r1, [r3, #0]
 8004d66:	b249      	sxtb	r1, r1
 8004d68:	2903      	cmp	r1, #3
 8004d6a:	dc1c      	bgt.n	8004da6 <keypad_sm+0xa6e>
		if(keypaditerator < keypadlength-1){
 8004d6c:	7819      	ldrb	r1, [r3, #0]
 8004d6e:	b249      	sxtb	r1, r1
 8004d70:	2903      	cmp	r1, #3
 8004d72:	dcf7      	bgt.n	8004d64 <keypad_sm+0xa2c>
			if(keypadarr[4] == '.'){
 8004d74:	7911      	ldrb	r1, [r2, #4]
 8004d76:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004d78:	bf08      	it	eq
 8004d7a:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004d7c:	78d1      	ldrb	r1, [r2, #3]
 8004d7e:	b2c9      	uxtb	r1, r1
 8004d80:	7111      	strb	r1, [r2, #4]
 8004d82:	7891      	ldrb	r1, [r2, #2]
 8004d84:	b2c9      	uxtb	r1, r1
 8004d86:	70d1      	strb	r1, [r2, #3]
 8004d88:	7851      	ldrb	r1, [r2, #1]
 8004d8a:	b2c9      	uxtb	r1, r1
 8004d8c:	7091      	strb	r1, [r2, #2]
 8004d8e:	7811      	ldrb	r1, [r2, #0]
 8004d90:	b2c9      	uxtb	r1, r1
 8004d92:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004d94:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004d96:	7819      	ldrb	r1, [r3, #0]
 8004d98:	3101      	adds	r1, #1
 8004d9a:	b249      	sxtb	r1, r1
 8004d9c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004d9e:	7819      	ldrb	r1, [r3, #0]
 8004da0:	b249      	sxtb	r1, r1
 8004da2:	2903      	cmp	r1, #3
 8004da4:	dde2      	ble.n	8004d6c <keypad_sm+0xa34>
				encmode = 0;
 8004da6:	2300      	movs	r3, #0
				encpos = 0;
 8004da8:	4a6e      	ldr	r2, [pc, #440]	; (8004f64 <keypad_sm+0xc2c>)
				encmode = 0;
 8004daa:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004dac:	7013      	strb	r3, [r2, #0]
}
 8004dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004db0:	207a      	movs	r0, #122	; 0x7a
 8004db2:	4b69      	ldr	r3, [pc, #420]	; (8004f58 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 8004db4:	4a69      	ldr	r2, [pc, #420]	; (8004f5c <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8004db6:	4c6a      	ldr	r4, [pc, #424]	; (8004f60 <keypad_sm+0xc28>)
				kpenum = WAIT;
 8004db8:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004dba:	7819      	ldrb	r1, [r3, #0]
 8004dbc:	b249      	sxtb	r1, r1
 8004dbe:	2903      	cmp	r1, #3
 8004dc0:	f73f aad0 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004dc4:	7819      	ldrb	r1, [r3, #0]
 8004dc6:	b249      	sxtb	r1, r1
 8004dc8:	2903      	cmp	r1, #3
 8004dca:	dcf6      	bgt.n	8004dba <keypad_sm+0xa82>
			if(keypadarr[4] == '.'){
 8004dcc:	7911      	ldrb	r1, [r2, #4]
 8004dce:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004dd0:	bf08      	it	eq
 8004dd2:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004dd4:	78d1      	ldrb	r1, [r2, #3]
 8004dd6:	b2c9      	uxtb	r1, r1
 8004dd8:	7111      	strb	r1, [r2, #4]
 8004dda:	7891      	ldrb	r1, [r2, #2]
 8004ddc:	b2c9      	uxtb	r1, r1
 8004dde:	70d1      	strb	r1, [r2, #3]
 8004de0:	7851      	ldrb	r1, [r2, #1]
 8004de2:	b2c9      	uxtb	r1, r1
 8004de4:	7091      	strb	r1, [r2, #2]
 8004de6:	7811      	ldrb	r1, [r2, #0]
 8004de8:	b2c9      	uxtb	r1, r1
 8004dea:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004dec:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004dee:	7819      	ldrb	r1, [r3, #0]
 8004df0:	3101      	adds	r1, #1
 8004df2:	b249      	sxtb	r1, r1
 8004df4:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004df6:	7819      	ldrb	r1, [r3, #0]
 8004df8:	b249      	sxtb	r1, r1
 8004dfa:	2903      	cmp	r1, #3
 8004dfc:	dde2      	ble.n	8004dc4 <keypad_sm+0xa8c>
}
 8004dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e04:	f7fc bb7e 	b.w	8001504 <update_keypad.part.0>
			keypadarr[0] = num;
 8004e08:	207a      	movs	r0, #122	; 0x7a
 8004e0a:	4b53      	ldr	r3, [pc, #332]	; (8004f58 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 8004e0c:	4a53      	ldr	r2, [pc, #332]	; (8004f5c <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8004e0e:	4c54      	ldr	r4, [pc, #336]	; (8004f60 <keypad_sm+0xc28>)
				kpenum = WAIT;
 8004e10:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004e12:	7819      	ldrb	r1, [r3, #0]
 8004e14:	b249      	sxtb	r1, r1
 8004e16:	2903      	cmp	r1, #3
 8004e18:	f73f aaa4 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004e1c:	7819      	ldrb	r1, [r3, #0]
 8004e1e:	b249      	sxtb	r1, r1
 8004e20:	2903      	cmp	r1, #3
 8004e22:	dcf6      	bgt.n	8004e12 <keypad_sm+0xada>
			if(keypadarr[4] == '.'){
 8004e24:	7911      	ldrb	r1, [r2, #4]
 8004e26:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004e28:	bf08      	it	eq
 8004e2a:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004e2c:	78d1      	ldrb	r1, [r2, #3]
 8004e2e:	b2c9      	uxtb	r1, r1
 8004e30:	7111      	strb	r1, [r2, #4]
 8004e32:	7891      	ldrb	r1, [r2, #2]
 8004e34:	b2c9      	uxtb	r1, r1
 8004e36:	70d1      	strb	r1, [r2, #3]
 8004e38:	7851      	ldrb	r1, [r2, #1]
 8004e3a:	b2c9      	uxtb	r1, r1
 8004e3c:	7091      	strb	r1, [r2, #2]
 8004e3e:	7811      	ldrb	r1, [r2, #0]
 8004e40:	b2c9      	uxtb	r1, r1
 8004e42:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004e44:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004e46:	7819      	ldrb	r1, [r3, #0]
 8004e48:	3101      	adds	r1, #1
 8004e4a:	b249      	sxtb	r1, r1
 8004e4c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004e4e:	7819      	ldrb	r1, [r3, #0]
 8004e50:	b249      	sxtb	r1, r1
 8004e52:	2903      	cmp	r1, #3
 8004e54:	dde2      	ble.n	8004e1c <keypad_sm+0xae4>
}
 8004e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004e58:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004e5a:	207a      	movs	r0, #122	; 0x7a
 8004e5c:	4b3e      	ldr	r3, [pc, #248]	; (8004f58 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 8004e5e:	4a3f      	ldr	r2, [pc, #252]	; (8004f5c <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8004e60:	4f3f      	ldr	r7, [pc, #252]	; (8004f60 <keypad_sm+0xc28>)
				kpenum = WAIT;
 8004e62:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004e64:	7819      	ldrb	r1, [r3, #0]
 8004e66:	b249      	sxtb	r1, r1
 8004e68:	2903      	cmp	r1, #3
 8004e6a:	dc1c      	bgt.n	8004ea6 <keypad_sm+0xb6e>
		if(keypaditerator < keypadlength-1){
 8004e6c:	7819      	ldrb	r1, [r3, #0]
 8004e6e:	b249      	sxtb	r1, r1
 8004e70:	2903      	cmp	r1, #3
 8004e72:	dcf7      	bgt.n	8004e64 <keypad_sm+0xb2c>
			if(keypadarr[4] == '.'){
 8004e74:	7911      	ldrb	r1, [r2, #4]
 8004e76:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004e78:	bf08      	it	eq
 8004e7a:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004e7c:	78d1      	ldrb	r1, [r2, #3]
 8004e7e:	b2c9      	uxtb	r1, r1
 8004e80:	7111      	strb	r1, [r2, #4]
 8004e82:	7891      	ldrb	r1, [r2, #2]
 8004e84:	b2c9      	uxtb	r1, r1
 8004e86:	70d1      	strb	r1, [r2, #3]
 8004e88:	7851      	ldrb	r1, [r2, #1]
 8004e8a:	b2c9      	uxtb	r1, r1
 8004e8c:	7091      	strb	r1, [r2, #2]
 8004e8e:	7811      	ldrb	r1, [r2, #0]
 8004e90:	b2c9      	uxtb	r1, r1
 8004e92:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004e94:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004e96:	7819      	ldrb	r1, [r3, #0]
 8004e98:	3101      	adds	r1, #1
 8004e9a:	b249      	sxtb	r1, r1
 8004e9c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004e9e:	7819      	ldrb	r1, [r3, #0]
 8004ea0:	b249      	sxtb	r1, r1
 8004ea2:	2903      	cmp	r1, #3
 8004ea4:	dde2      	ble.n	8004e6c <keypad_sm+0xb34>
				encmode = 0;
 8004ea6:	2300      	movs	r3, #0
				encpos = 0;
 8004ea8:	4a2e      	ldr	r2, [pc, #184]	; (8004f64 <keypad_sm+0xc2c>)
				encmode = 0;
 8004eaa:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004eac:	7013      	strb	r3, [r2, #0]
}
 8004eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004eb0:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004eb2:	207a      	movs	r0, #122	; 0x7a
 8004eb4:	4b28      	ldr	r3, [pc, #160]	; (8004f58 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 8004eb6:	4a29      	ldr	r2, [pc, #164]	; (8004f5c <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8004eb8:	4f29      	ldr	r7, [pc, #164]	; (8004f60 <keypad_sm+0xc28>)
				kpenum = WAIT;
 8004eba:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004ebc:	7819      	ldrb	r1, [r3, #0]
 8004ebe:	b249      	sxtb	r1, r1
 8004ec0:	2903      	cmp	r1, #3
 8004ec2:	dc1c      	bgt.n	8004efe <keypad_sm+0xbc6>
		if(keypaditerator < keypadlength-1){
 8004ec4:	7819      	ldrb	r1, [r3, #0]
 8004ec6:	b249      	sxtb	r1, r1
 8004ec8:	2903      	cmp	r1, #3
 8004eca:	dcf7      	bgt.n	8004ebc <keypad_sm+0xb84>
			if(keypadarr[4] == '.'){
 8004ecc:	7911      	ldrb	r1, [r2, #4]
 8004ece:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004ed0:	bf08      	it	eq
 8004ed2:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004ed4:	78d1      	ldrb	r1, [r2, #3]
 8004ed6:	b2c9      	uxtb	r1, r1
 8004ed8:	7111      	strb	r1, [r2, #4]
 8004eda:	7891      	ldrb	r1, [r2, #2]
 8004edc:	b2c9      	uxtb	r1, r1
 8004ede:	70d1      	strb	r1, [r2, #3]
 8004ee0:	7851      	ldrb	r1, [r2, #1]
 8004ee2:	b2c9      	uxtb	r1, r1
 8004ee4:	7091      	strb	r1, [r2, #2]
 8004ee6:	7811      	ldrb	r1, [r2, #0]
 8004ee8:	b2c9      	uxtb	r1, r1
 8004eea:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004eec:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004eee:	7819      	ldrb	r1, [r3, #0]
 8004ef0:	3101      	adds	r1, #1
 8004ef2:	b249      	sxtb	r1, r1
 8004ef4:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004ef6:	7819      	ldrb	r1, [r3, #0]
 8004ef8:	b249      	sxtb	r1, r1
 8004efa:	2903      	cmp	r1, #3
 8004efc:	dde2      	ble.n	8004ec4 <keypad_sm+0xb8c>
				encmode = 0;
 8004efe:	2300      	movs	r3, #0
				encpos = 0;
 8004f00:	4a18      	ldr	r2, [pc, #96]	; (8004f64 <keypad_sm+0xc2c>)
				encmode = 0;
 8004f02:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004f04:	7013      	strb	r3, [r2, #0]
}
 8004f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004f08:	207a      	movs	r0, #122	; 0x7a
 8004f0a:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 8004f0c:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8004f0e:	4c14      	ldr	r4, [pc, #80]	; (8004f60 <keypad_sm+0xc28>)
				kpenum = WAIT;
 8004f10:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004f12:	7819      	ldrb	r1, [r3, #0]
 8004f14:	b249      	sxtb	r1, r1
 8004f16:	2903      	cmp	r1, #3
 8004f18:	f73f aa24 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004f1c:	7819      	ldrb	r1, [r3, #0]
 8004f1e:	b249      	sxtb	r1, r1
 8004f20:	2903      	cmp	r1, #3
 8004f22:	dcf6      	bgt.n	8004f12 <keypad_sm+0xbda>
			if(keypadarr[4] == '.'){
 8004f24:	7911      	ldrb	r1, [r2, #4]
 8004f26:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004f28:	bf08      	it	eq
 8004f2a:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004f2c:	78d1      	ldrb	r1, [r2, #3]
 8004f2e:	b2c9      	uxtb	r1, r1
 8004f30:	7111      	strb	r1, [r2, #4]
 8004f32:	7891      	ldrb	r1, [r2, #2]
 8004f34:	b2c9      	uxtb	r1, r1
 8004f36:	70d1      	strb	r1, [r2, #3]
 8004f38:	7851      	ldrb	r1, [r2, #1]
 8004f3a:	b2c9      	uxtb	r1, r1
 8004f3c:	7091      	strb	r1, [r2, #2]
 8004f3e:	7811      	ldrb	r1, [r2, #0]
 8004f40:	b2c9      	uxtb	r1, r1
 8004f42:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004f44:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004f46:	7819      	ldrb	r1, [r3, #0]
 8004f48:	3101      	adds	r1, #1
 8004f4a:	b249      	sxtb	r1, r1
 8004f4c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004f4e:	7819      	ldrb	r1, [r3, #0]
 8004f50:	b249      	sxtb	r1, r1
 8004f52:	2903      	cmp	r1, #3
 8004f54:	dde2      	ble.n	8004f1c <keypad_sm+0xbe4>
}
 8004f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f58:	20000005 	.word	0x20000005
 8004f5c:	20000000 	.word	0x20000000
 8004f60:	200006c4 	.word	0x200006c4
 8004f64:	200003ad 	.word	0x200003ad
	float temp = translate_keypad();
 8004f68:	f7fe fc9e 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004f6c:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8004f6e:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004f70:	f7fc f862 	bl	8001038 <__aeabi_fcmpge>
 8004f74:	b160      	cbz	r0, 8004f90 <keypad_sm+0xc58>
 8004f76:	4620      	mov	r0, r4
 8004f78:	f7fb fa6e 	bl	8000458 <__aeabi_f2d>
 8004f7c:	a398      	add	r3, pc, #608	; (adr r3, 80051e0 <keypad_sm+0xea8>)
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f7fb fd3d 	bl	8000a00 <__aeabi_dcmple>
 8004f86:	b118      	cbz	r0, 8004f90 <keypad_sm+0xc58>
					amp_set_aux = translate_keypad();
 8004f88:	f7fe fc8e 	bl	80038a8 <translate_keypad>
 8004f8c:	4a96      	ldr	r2, [pc, #600]	; (80051e8 <keypad_sm+0xeb0>)
 8004f8e:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8004f90:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8004f92:	207a      	movs	r0, #122	; 0x7a
 8004f94:	4b95      	ldr	r3, [pc, #596]	; (80051ec <keypad_sm+0xeb4>)
			if(keypadarr[4] == '.'){
 8004f96:	4a96      	ldr	r2, [pc, #600]	; (80051f0 <keypad_sm+0xeb8>)
				keypaddecimal = 0;
 8004f98:	4d96      	ldr	r5, [pc, #600]	; (80051f4 <keypad_sm+0xebc>)
				kpenum = WAIT;
 8004f9a:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8004f9c:	7819      	ldrb	r1, [r3, #0]
 8004f9e:	b249      	sxtb	r1, r1
 8004fa0:	2903      	cmp	r1, #3
 8004fa2:	f73f a9df 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004fa6:	7819      	ldrb	r1, [r3, #0]
 8004fa8:	b249      	sxtb	r1, r1
 8004faa:	2903      	cmp	r1, #3
 8004fac:	dcf6      	bgt.n	8004f9c <keypad_sm+0xc64>
			if(keypadarr[4] == '.'){
 8004fae:	7911      	ldrb	r1, [r2, #4]
 8004fb0:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004fb2:	bf08      	it	eq
 8004fb4:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004fb6:	78d1      	ldrb	r1, [r2, #3]
 8004fb8:	b2c9      	uxtb	r1, r1
 8004fba:	7111      	strb	r1, [r2, #4]
 8004fbc:	7891      	ldrb	r1, [r2, #2]
 8004fbe:	b2c9      	uxtb	r1, r1
 8004fc0:	70d1      	strb	r1, [r2, #3]
 8004fc2:	7851      	ldrb	r1, [r2, #1]
 8004fc4:	b2c9      	uxtb	r1, r1
 8004fc6:	7091      	strb	r1, [r2, #2]
 8004fc8:	7811      	ldrb	r1, [r2, #0]
 8004fca:	b2c9      	uxtb	r1, r1
 8004fcc:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004fce:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004fd0:	7819      	ldrb	r1, [r3, #0]
 8004fd2:	3101      	adds	r1, #1
 8004fd4:	b249      	sxtb	r1, r1
 8004fd6:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004fd8:	7819      	ldrb	r1, [r3, #0]
 8004fda:	b249      	sxtb	r1, r1
 8004fdc:	2903      	cmp	r1, #3
 8004fde:	dde2      	ble.n	8004fa6 <keypad_sm+0xc6e>
}
 8004fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8004fe2:	f7fe fc61 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004fe6:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8004fe8:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004fea:	f7fc f825 	bl	8001038 <__aeabi_fcmpge>
 8004fee:	b140      	cbz	r0, 8005002 <keypad_sm+0xcca>
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	4981      	ldr	r1, [pc, #516]	; (80051f8 <keypad_sm+0xec0>)
 8004ff4:	f7fc f816 	bl	8001024 <__aeabi_fcmple>
 8004ff8:	b118      	cbz	r0, 8005002 <keypad_sm+0xcca>
					amp_set_aux = translate_keypad();
 8004ffa:	f7fe fc55 	bl	80038a8 <translate_keypad>
 8004ffe:	4a7a      	ldr	r2, [pc, #488]	; (80051e8 <keypad_sm+0xeb0>)
 8005000:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005002:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8005004:	207a      	movs	r0, #122	; 0x7a
 8005006:	4b79      	ldr	r3, [pc, #484]	; (80051ec <keypad_sm+0xeb4>)
			if(keypadarr[4] == '.'){
 8005008:	4a79      	ldr	r2, [pc, #484]	; (80051f0 <keypad_sm+0xeb8>)
				keypaddecimal = 0;
 800500a:	4f7a      	ldr	r7, [pc, #488]	; (80051f4 <keypad_sm+0xebc>)
				kpenum = WAIT;
 800500c:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 800500e:	7819      	ldrb	r1, [r3, #0]
 8005010:	b249      	sxtb	r1, r1
 8005012:	2903      	cmp	r1, #3
 8005014:	dc1c      	bgt.n	8005050 <keypad_sm+0xd18>
		if(keypaditerator < keypadlength-1){
 8005016:	7819      	ldrb	r1, [r3, #0]
 8005018:	b249      	sxtb	r1, r1
 800501a:	2903      	cmp	r1, #3
 800501c:	dcf7      	bgt.n	800500e <keypad_sm+0xcd6>
			if(keypadarr[4] == '.'){
 800501e:	7911      	ldrb	r1, [r2, #4]
 8005020:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005022:	bf08      	it	eq
 8005024:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8005026:	78d1      	ldrb	r1, [r2, #3]
 8005028:	b2c9      	uxtb	r1, r1
 800502a:	7111      	strb	r1, [r2, #4]
 800502c:	7891      	ldrb	r1, [r2, #2]
 800502e:	b2c9      	uxtb	r1, r1
 8005030:	70d1      	strb	r1, [r2, #3]
 8005032:	7851      	ldrb	r1, [r2, #1]
 8005034:	b2c9      	uxtb	r1, r1
 8005036:	7091      	strb	r1, [r2, #2]
 8005038:	7811      	ldrb	r1, [r2, #0]
 800503a:	b2c9      	uxtb	r1, r1
 800503c:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800503e:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005040:	7819      	ldrb	r1, [r3, #0]
 8005042:	3101      	adds	r1, #1
 8005044:	b249      	sxtb	r1, r1
 8005046:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005048:	7819      	ldrb	r1, [r3, #0]
 800504a:	b249      	sxtb	r1, r1
 800504c:	2903      	cmp	r1, #3
 800504e:	dde2      	ble.n	8005016 <keypad_sm+0xcde>
				encmode = 0;
 8005050:	2300      	movs	r3, #0
				encpos = 0;
 8005052:	4a6a      	ldr	r2, [pc, #424]	; (80051fc <keypad_sm+0xec4>)
				encmode = 0;
 8005054:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005056:	7013      	strb	r3, [r2, #0]
}
 8005058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 800505a:	2500      	movs	r5, #0
			keypadarr[0] = num;
 800505c:	207a      	movs	r0, #122	; 0x7a
 800505e:	4b63      	ldr	r3, [pc, #396]	; (80051ec <keypad_sm+0xeb4>)
			if(keypadarr[4] == '.'){
 8005060:	4a63      	ldr	r2, [pc, #396]	; (80051f0 <keypad_sm+0xeb8>)
				keypaddecimal = 0;
 8005062:	4f64      	ldr	r7, [pc, #400]	; (80051f4 <keypad_sm+0xebc>)
				kpenum = WAIT;
 8005064:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8005066:	7819      	ldrb	r1, [r3, #0]
 8005068:	b249      	sxtb	r1, r1
 800506a:	2903      	cmp	r1, #3
 800506c:	dc1c      	bgt.n	80050a8 <keypad_sm+0xd70>
		if(keypaditerator < keypadlength-1){
 800506e:	7819      	ldrb	r1, [r3, #0]
 8005070:	b249      	sxtb	r1, r1
 8005072:	2903      	cmp	r1, #3
 8005074:	dcf7      	bgt.n	8005066 <keypad_sm+0xd2e>
			if(keypadarr[4] == '.'){
 8005076:	7911      	ldrb	r1, [r2, #4]
 8005078:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800507a:	bf08      	it	eq
 800507c:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 800507e:	78d1      	ldrb	r1, [r2, #3]
 8005080:	b2c9      	uxtb	r1, r1
 8005082:	7111      	strb	r1, [r2, #4]
 8005084:	7891      	ldrb	r1, [r2, #2]
 8005086:	b2c9      	uxtb	r1, r1
 8005088:	70d1      	strb	r1, [r2, #3]
 800508a:	7851      	ldrb	r1, [r2, #1]
 800508c:	b2c9      	uxtb	r1, r1
 800508e:	7091      	strb	r1, [r2, #2]
 8005090:	7811      	ldrb	r1, [r2, #0]
 8005092:	b2c9      	uxtb	r1, r1
 8005094:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005096:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005098:	7819      	ldrb	r1, [r3, #0]
 800509a:	3101      	adds	r1, #1
 800509c:	b249      	sxtb	r1, r1
 800509e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80050a0:	7819      	ldrb	r1, [r3, #0]
 80050a2:	b249      	sxtb	r1, r1
 80050a4:	2903      	cmp	r1, #3
 80050a6:	dde2      	ble.n	800506e <keypad_sm+0xd36>
				encmode = 0;
 80050a8:	2300      	movs	r3, #0
				encpos = 0;
 80050aa:	4a54      	ldr	r2, [pc, #336]	; (80051fc <keypad_sm+0xec4>)
				encmode = 0;
 80050ac:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80050ae:	7013      	strb	r3, [r2, #0]
}
 80050b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(num == '#'){
 80050b2:	2823      	cmp	r0, #35	; 0x23
 80050b4:	f000 8320 	beq.w	80056f8 <keypad_sm+0x13c0>
			else if(num == '+'){
 80050b8:	282b      	cmp	r0, #43	; 0x2b
 80050ba:	f000 8648 	beq.w	8005d4e <keypad_sm+0x1a16>
			else if(num == '-'){
 80050be:	282d      	cmp	r0, #45	; 0x2d
 80050c0:	f000 8516 	beq.w	8005af0 <keypad_sm+0x17b8>
			else if(num == 's'){
 80050c4:	2873      	cmp	r0, #115	; 0x73
 80050c6:	f000 86cf 	beq.w	8005e68 <keypad_sm+0x1b30>
			else if(num == '['){
 80050ca:	285b      	cmp	r0, #91	; 0x5b
 80050cc:	f001 803f 	beq.w	800614e <keypad_sm+0x1e16>
			else if(num == ']'){
 80050d0:	285d      	cmp	r0, #93	; 0x5d
 80050d2:	f47f a947 	bne.w	8004364 <keypad_sm+0x2c>
				inc_arr_v(encpos);
 80050d6:	4b49      	ldr	r3, [pc, #292]	; (80051fc <keypad_sm+0xec4>)
 80050d8:	7818      	ldrb	r0, [r3, #0]
}
 80050da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				inc_arr_v(encpos);
 80050de:	b240      	sxtb	r0, r0
 80050e0:	f7fe bea2 	b.w	8003e28 <inc_arr_v>
				keypaddecimal = 0;
 80050e4:	2600      	movs	r6, #0
			keypadarr[0] = num;
 80050e6:	207a      	movs	r0, #122	; 0x7a
 80050e8:	4b40      	ldr	r3, [pc, #256]	; (80051ec <keypad_sm+0xeb4>)
			if(keypadarr[4] == '.'){
 80050ea:	4a41      	ldr	r2, [pc, #260]	; (80051f0 <keypad_sm+0xeb8>)
				keypaddecimal = 0;
 80050ec:	4d41      	ldr	r5, [pc, #260]	; (80051f4 <keypad_sm+0xebc>)
	while(keypaditerator < 4){
 80050ee:	7819      	ldrb	r1, [r3, #0]
 80050f0:	b249      	sxtb	r1, r1
 80050f2:	2903      	cmp	r1, #3
 80050f4:	dc1c      	bgt.n	8005130 <keypad_sm+0xdf8>
		if(keypaditerator < keypadlength-1){
 80050f6:	7819      	ldrb	r1, [r3, #0]
 80050f8:	b249      	sxtb	r1, r1
 80050fa:	2903      	cmp	r1, #3
 80050fc:	dcf7      	bgt.n	80050ee <keypad_sm+0xdb6>
			if(keypadarr[4] == '.'){
 80050fe:	7911      	ldrb	r1, [r2, #4]
 8005100:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005102:	bf08      	it	eq
 8005104:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005106:	78d1      	ldrb	r1, [r2, #3]
 8005108:	b2c9      	uxtb	r1, r1
 800510a:	7111      	strb	r1, [r2, #4]
 800510c:	7891      	ldrb	r1, [r2, #2]
 800510e:	b2c9      	uxtb	r1, r1
 8005110:	70d1      	strb	r1, [r2, #3]
 8005112:	7851      	ldrb	r1, [r2, #1]
 8005114:	b2c9      	uxtb	r1, r1
 8005116:	7091      	strb	r1, [r2, #2]
 8005118:	7811      	ldrb	r1, [r2, #0]
 800511a:	b2c9      	uxtb	r1, r1
 800511c:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800511e:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005120:	7819      	ldrb	r1, [r3, #0]
 8005122:	3101      	adds	r1, #1
 8005124:	b249      	sxtb	r1, r1
 8005126:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005128:	7819      	ldrb	r1, [r3, #0]
 800512a:	b249      	sxtb	r1, r1
 800512c:	2903      	cmp	r1, #3
 800512e:	dde2      	ble.n	80050f6 <keypad_sm+0xdbe>
				encmode = 0;
 8005130:	2300      	movs	r3, #0
				encpos = 0;
 8005132:	4a32      	ldr	r2, [pc, #200]	; (80051fc <keypad_sm+0xec4>)
				encmode = 0;
 8005134:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005136:	7013      	strb	r3, [r2, #0]
}
 8005138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 800513a:	207a      	movs	r0, #122	; 0x7a
 800513c:	4b2b      	ldr	r3, [pc, #172]	; (80051ec <keypad_sm+0xeb4>)
			if(keypadarr[4] == '.'){
 800513e:	4a2c      	ldr	r2, [pc, #176]	; (80051f0 <keypad_sm+0xeb8>)
				keypaddecimal = 0;
 8005140:	4c2c      	ldr	r4, [pc, #176]	; (80051f4 <keypad_sm+0xebc>)
				kpenum = WAIT;
 8005142:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8005144:	7819      	ldrb	r1, [r3, #0]
 8005146:	b249      	sxtb	r1, r1
 8005148:	2903      	cmp	r1, #3
 800514a:	f73f a90b 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800514e:	7819      	ldrb	r1, [r3, #0]
 8005150:	b249      	sxtb	r1, r1
 8005152:	2903      	cmp	r1, #3
 8005154:	dcf6      	bgt.n	8005144 <keypad_sm+0xe0c>
			if(keypadarr[4] == '.'){
 8005156:	7911      	ldrb	r1, [r2, #4]
 8005158:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800515a:	bf08      	it	eq
 800515c:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 800515e:	78d1      	ldrb	r1, [r2, #3]
 8005160:	b2c9      	uxtb	r1, r1
 8005162:	7111      	strb	r1, [r2, #4]
 8005164:	7891      	ldrb	r1, [r2, #2]
 8005166:	b2c9      	uxtb	r1, r1
 8005168:	70d1      	strb	r1, [r2, #3]
 800516a:	7851      	ldrb	r1, [r2, #1]
 800516c:	b2c9      	uxtb	r1, r1
 800516e:	7091      	strb	r1, [r2, #2]
 8005170:	7811      	ldrb	r1, [r2, #0]
 8005172:	b2c9      	uxtb	r1, r1
 8005174:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005176:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005178:	7819      	ldrb	r1, [r3, #0]
 800517a:	3101      	adds	r1, #1
 800517c:	b249      	sxtb	r1, r1
 800517e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005180:	7819      	ldrb	r1, [r3, #0]
 8005182:	b249      	sxtb	r1, r1
 8005184:	2903      	cmp	r1, #3
 8005186:	dde2      	ble.n	800514e <keypad_sm+0xe16>
}
 8005188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 800518a:	207a      	movs	r0, #122	; 0x7a
 800518c:	4b17      	ldr	r3, [pc, #92]	; (80051ec <keypad_sm+0xeb4>)
			if(keypadarr[4] == '.'){
 800518e:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <keypad_sm+0xeb8>)
				keypaddecimal = 0;
 8005190:	4c18      	ldr	r4, [pc, #96]	; (80051f4 <keypad_sm+0xebc>)
				kpenum = WAIT;
 8005192:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8005194:	7819      	ldrb	r1, [r3, #0]
 8005196:	b249      	sxtb	r1, r1
 8005198:	2903      	cmp	r1, #3
 800519a:	f73f a8e3 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800519e:	7819      	ldrb	r1, [r3, #0]
 80051a0:	b249      	sxtb	r1, r1
 80051a2:	2903      	cmp	r1, #3
 80051a4:	dcf6      	bgt.n	8005194 <keypad_sm+0xe5c>
			if(keypadarr[4] == '.'){
 80051a6:	7911      	ldrb	r1, [r2, #4]
 80051a8:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80051aa:	bf08      	it	eq
 80051ac:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 80051ae:	78d1      	ldrb	r1, [r2, #3]
 80051b0:	b2c9      	uxtb	r1, r1
 80051b2:	7111      	strb	r1, [r2, #4]
 80051b4:	7891      	ldrb	r1, [r2, #2]
 80051b6:	b2c9      	uxtb	r1, r1
 80051b8:	70d1      	strb	r1, [r2, #3]
 80051ba:	7851      	ldrb	r1, [r2, #1]
 80051bc:	b2c9      	uxtb	r1, r1
 80051be:	7091      	strb	r1, [r2, #2]
 80051c0:	7811      	ldrb	r1, [r2, #0]
 80051c2:	b2c9      	uxtb	r1, r1
 80051c4:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80051c6:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80051c8:	7819      	ldrb	r1, [r3, #0]
 80051ca:	3101      	adds	r1, #1
 80051cc:	b249      	sxtb	r1, r1
 80051ce:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80051d0:	7819      	ldrb	r1, [r3, #0]
 80051d2:	b249      	sxtb	r1, r1
 80051d4:	2903      	cmp	r1, #3
 80051d6:	dde2      	ble.n	800519e <keypad_sm+0xe66>
}
 80051d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051da:	bf00      	nop
 80051dc:	f3af 8000 	nop.w
 80051e0:	50b0f27c 	.word	0x50b0f27c
 80051e4:	3fe99a6b 	.word	0x3fe99a6b
 80051e8:	20000394 	.word	0x20000394
 80051ec:	20000005 	.word	0x20000005
 80051f0:	20000000 	.word	0x20000000
 80051f4:	200006c4 	.word	0x200006c4
 80051f8:	41400000 	.word	0x41400000
 80051fc:	200003ad 	.word	0x200003ad
				kpenum = WAIT;
 8005200:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8005202:	207a      	movs	r0, #122	; 0x7a
 8005204:	4b9b      	ldr	r3, [pc, #620]	; (8005474 <keypad_sm+0x113c>)
			if(keypadarr[4] == '.'){
 8005206:	4a9c      	ldr	r2, [pc, #624]	; (8005478 <keypad_sm+0x1140>)
				keypaddecimal = 0;
 8005208:	4f9c      	ldr	r7, [pc, #624]	; (800547c <keypad_sm+0x1144>)
				kpenum = WAIT;
 800520a:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 800520c:	7819      	ldrb	r1, [r3, #0]
 800520e:	b249      	sxtb	r1, r1
 8005210:	2903      	cmp	r1, #3
 8005212:	dc1c      	bgt.n	800524e <keypad_sm+0xf16>
		if(keypaditerator < keypadlength-1){
 8005214:	7819      	ldrb	r1, [r3, #0]
 8005216:	b249      	sxtb	r1, r1
 8005218:	2903      	cmp	r1, #3
 800521a:	dcf7      	bgt.n	800520c <keypad_sm+0xed4>
			if(keypadarr[4] == '.'){
 800521c:	7911      	ldrb	r1, [r2, #4]
 800521e:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005220:	bf08      	it	eq
 8005222:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8005224:	78d1      	ldrb	r1, [r2, #3]
 8005226:	b2c9      	uxtb	r1, r1
 8005228:	7111      	strb	r1, [r2, #4]
 800522a:	7891      	ldrb	r1, [r2, #2]
 800522c:	b2c9      	uxtb	r1, r1
 800522e:	70d1      	strb	r1, [r2, #3]
 8005230:	7851      	ldrb	r1, [r2, #1]
 8005232:	b2c9      	uxtb	r1, r1
 8005234:	7091      	strb	r1, [r2, #2]
 8005236:	7811      	ldrb	r1, [r2, #0]
 8005238:	b2c9      	uxtb	r1, r1
 800523a:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800523c:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800523e:	7819      	ldrb	r1, [r3, #0]
 8005240:	3101      	adds	r1, #1
 8005242:	b249      	sxtb	r1, r1
 8005244:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005246:	7819      	ldrb	r1, [r3, #0]
 8005248:	b249      	sxtb	r1, r1
 800524a:	2903      	cmp	r1, #3
 800524c:	dde2      	ble.n	8005214 <keypad_sm+0xedc>
				encmode = 0;
 800524e:	2300      	movs	r3, #0
				encpos = 0;
 8005250:	4a8b      	ldr	r2, [pc, #556]	; (8005480 <keypad_sm+0x1148>)
				encmode = 0;
 8005252:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005254:	7013      	strb	r3, [r2, #0]
}
 8005256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 8005258:	2600      	movs	r6, #0
			keypadarr[0] = num;
 800525a:	207a      	movs	r0, #122	; 0x7a
 800525c:	4b85      	ldr	r3, [pc, #532]	; (8005474 <keypad_sm+0x113c>)
			if(keypadarr[4] == '.'){
 800525e:	4a86      	ldr	r2, [pc, #536]	; (8005478 <keypad_sm+0x1140>)
				keypaddecimal = 0;
 8005260:	4d86      	ldr	r5, [pc, #536]	; (800547c <keypad_sm+0x1144>)
	while(keypaditerator < 4){
 8005262:	7819      	ldrb	r1, [r3, #0]
 8005264:	b249      	sxtb	r1, r1
 8005266:	2903      	cmp	r1, #3
 8005268:	dc1c      	bgt.n	80052a4 <keypad_sm+0xf6c>
		if(keypaditerator < keypadlength-1){
 800526a:	7819      	ldrb	r1, [r3, #0]
 800526c:	b249      	sxtb	r1, r1
 800526e:	2903      	cmp	r1, #3
 8005270:	dcf7      	bgt.n	8005262 <keypad_sm+0xf2a>
			if(keypadarr[4] == '.'){
 8005272:	7911      	ldrb	r1, [r2, #4]
 8005274:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005276:	bf08      	it	eq
 8005278:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800527a:	78d1      	ldrb	r1, [r2, #3]
 800527c:	b2c9      	uxtb	r1, r1
 800527e:	7111      	strb	r1, [r2, #4]
 8005280:	7891      	ldrb	r1, [r2, #2]
 8005282:	b2c9      	uxtb	r1, r1
 8005284:	70d1      	strb	r1, [r2, #3]
 8005286:	7851      	ldrb	r1, [r2, #1]
 8005288:	b2c9      	uxtb	r1, r1
 800528a:	7091      	strb	r1, [r2, #2]
 800528c:	7811      	ldrb	r1, [r2, #0]
 800528e:	b2c9      	uxtb	r1, r1
 8005290:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005292:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005294:	7819      	ldrb	r1, [r3, #0]
 8005296:	3101      	adds	r1, #1
 8005298:	b249      	sxtb	r1, r1
 800529a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800529c:	7819      	ldrb	r1, [r3, #0]
 800529e:	b249      	sxtb	r1, r1
 80052a0:	2903      	cmp	r1, #3
 80052a2:	dde2      	ble.n	800526a <keypad_sm+0xf32>
				encmode = 0;
 80052a4:	2300      	movs	r3, #0
				encpos = 0;
 80052a6:	4a76      	ldr	r2, [pc, #472]	; (8005480 <keypad_sm+0x1148>)
				encmode = 0;
 80052a8:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80052aa:	7013      	strb	r3, [r2, #0]
}
 80052ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80052ae:	2500      	movs	r5, #0
			keypadarr[0] = num;
 80052b0:	207a      	movs	r0, #122	; 0x7a
 80052b2:	4b70      	ldr	r3, [pc, #448]	; (8005474 <keypad_sm+0x113c>)
			if(keypadarr[4] == '.'){
 80052b4:	4a70      	ldr	r2, [pc, #448]	; (8005478 <keypad_sm+0x1140>)
				keypaddecimal = 0;
 80052b6:	4f71      	ldr	r7, [pc, #452]	; (800547c <keypad_sm+0x1144>)
				kpenum = WAIT;
 80052b8:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80052ba:	7819      	ldrb	r1, [r3, #0]
 80052bc:	b249      	sxtb	r1, r1
 80052be:	2903      	cmp	r1, #3
 80052c0:	dc1c      	bgt.n	80052fc <keypad_sm+0xfc4>
		if(keypaditerator < keypadlength-1){
 80052c2:	7819      	ldrb	r1, [r3, #0]
 80052c4:	b249      	sxtb	r1, r1
 80052c6:	2903      	cmp	r1, #3
 80052c8:	dcf7      	bgt.n	80052ba <keypad_sm+0xf82>
			if(keypadarr[4] == '.'){
 80052ca:	7911      	ldrb	r1, [r2, #4]
 80052cc:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80052ce:	bf08      	it	eq
 80052d0:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 80052d2:	78d1      	ldrb	r1, [r2, #3]
 80052d4:	b2c9      	uxtb	r1, r1
 80052d6:	7111      	strb	r1, [r2, #4]
 80052d8:	7891      	ldrb	r1, [r2, #2]
 80052da:	b2c9      	uxtb	r1, r1
 80052dc:	70d1      	strb	r1, [r2, #3]
 80052de:	7851      	ldrb	r1, [r2, #1]
 80052e0:	b2c9      	uxtb	r1, r1
 80052e2:	7091      	strb	r1, [r2, #2]
 80052e4:	7811      	ldrb	r1, [r2, #0]
 80052e6:	b2c9      	uxtb	r1, r1
 80052e8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80052ea:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80052ec:	7819      	ldrb	r1, [r3, #0]
 80052ee:	3101      	adds	r1, #1
 80052f0:	b249      	sxtb	r1, r1
 80052f2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80052f4:	7819      	ldrb	r1, [r3, #0]
 80052f6:	b249      	sxtb	r1, r1
 80052f8:	2903      	cmp	r1, #3
 80052fa:	dde2      	ble.n	80052c2 <keypad_sm+0xf8a>
				encmode = 0;
 80052fc:	2300      	movs	r3, #0
				encpos = 0;
 80052fe:	4a60      	ldr	r2, [pc, #384]	; (8005480 <keypad_sm+0x1148>)
				encmode = 0;
 8005300:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005302:	7013      	strb	r3, [r2, #0]
}
 8005304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8005306:	207a      	movs	r0, #122	; 0x7a
 8005308:	4b5a      	ldr	r3, [pc, #360]	; (8005474 <keypad_sm+0x113c>)
			if(keypadarr[4] == '.'){
 800530a:	4a5b      	ldr	r2, [pc, #364]	; (8005478 <keypad_sm+0x1140>)
				keypaddecimal = 0;
 800530c:	4c5b      	ldr	r4, [pc, #364]	; (800547c <keypad_sm+0x1144>)
				kpenum = WAIT;
 800530e:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8005310:	7819      	ldrb	r1, [r3, #0]
 8005312:	b249      	sxtb	r1, r1
 8005314:	2903      	cmp	r1, #3
 8005316:	f73f a825 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800531a:	7819      	ldrb	r1, [r3, #0]
 800531c:	b249      	sxtb	r1, r1
 800531e:	2903      	cmp	r1, #3
 8005320:	dcf6      	bgt.n	8005310 <keypad_sm+0xfd8>
			if(keypadarr[4] == '.'){
 8005322:	7911      	ldrb	r1, [r2, #4]
 8005324:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005326:	bf08      	it	eq
 8005328:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 800532a:	78d1      	ldrb	r1, [r2, #3]
 800532c:	b2c9      	uxtb	r1, r1
 800532e:	7111      	strb	r1, [r2, #4]
 8005330:	7891      	ldrb	r1, [r2, #2]
 8005332:	b2c9      	uxtb	r1, r1
 8005334:	70d1      	strb	r1, [r2, #3]
 8005336:	7851      	ldrb	r1, [r2, #1]
 8005338:	b2c9      	uxtb	r1, r1
 800533a:	7091      	strb	r1, [r2, #2]
 800533c:	7811      	ldrb	r1, [r2, #0]
 800533e:	b2c9      	uxtb	r1, r1
 8005340:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005342:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005344:	7819      	ldrb	r1, [r3, #0]
 8005346:	3101      	adds	r1, #1
 8005348:	b249      	sxtb	r1, r1
 800534a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800534c:	7819      	ldrb	r1, [r3, #0]
 800534e:	b249      	sxtb	r1, r1
 8005350:	2903      	cmp	r1, #3
 8005352:	dde2      	ble.n	800531a <keypad_sm+0xfe2>
}
 8005354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(num == '#'){
 8005356:	2823      	cmp	r0, #35	; 0x23
 8005358:	f000 8376 	beq.w	8005a48 <keypad_sm+0x1710>
			else if(num == '+'){
 800535c:	282b      	cmp	r0, #43	; 0x2b
 800535e:	f000 847c 	beq.w	8005c5a <keypad_sm+0x1922>
			else if(num == '-'){
 8005362:	282d      	cmp	r0, #45	; 0x2d
 8005364:	f000 8552 	beq.w	8005e0c <keypad_sm+0x1ad4>
			else if(num == 's'){
 8005368:	2873      	cmp	r0, #115	; 0x73
 800536a:	f000 8699 	beq.w	80060a0 <keypad_sm+0x1d68>
			else if(num == '['){
 800536e:	285b      	cmp	r0, #91	; 0x5b
 8005370:	f000 876e 	beq.w	8006250 <keypad_sm+0x1f18>
			else if(num == ']'){
 8005374:	285d      	cmp	r0, #93	; 0x5d
 8005376:	f47e aff5 	bne.w	8004364 <keypad_sm+0x2c>
				inc_arr_a(encpos);
 800537a:	4b41      	ldr	r3, [pc, #260]	; (8005480 <keypad_sm+0x1148>)
 800537c:	7818      	ldrb	r0, [r3, #0]
}
 800537e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				inc_arr_a(encpos);
 8005382:	b240      	sxtb	r0, r0
 8005384:	f7fe be0a 	b.w	8003f9c <inc_arr_a>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8005388:	4b3a      	ldr	r3, [pc, #232]	; (8005474 <keypad_sm+0x113c>)
 800538a:	781a      	ldrb	r2, [r3, #0]
 800538c:	b252      	sxtb	r2, r2
 800538e:	2a01      	cmp	r2, #1
 8005390:	f77e afe8 	ble.w	8004364 <keypad_sm+0x2c>
 8005394:	4839      	ldr	r0, [pc, #228]	; (800547c <keypad_sm+0x1144>)
 8005396:	7802      	ldrb	r2, [r0, #0]
 8005398:	2a00      	cmp	r2, #0
 800539a:	f47e afe3 	bne.w	8004364 <keypad_sm+0x2c>
			keypadarr[keypadlength-1] = num;
 800539e:	252e      	movs	r5, #46	; 0x2e
			keypaddecimal = 1;
 80053a0:	2401      	movs	r4, #1
				keypadarr[i-1] = keypadarr[i];
 80053a2:	4a35      	ldr	r2, [pc, #212]	; (8005478 <keypad_sm+0x1140>)
 80053a4:	7851      	ldrb	r1, [r2, #1]
 80053a6:	b2c9      	uxtb	r1, r1
 80053a8:	7011      	strb	r1, [r2, #0]
 80053aa:	7891      	ldrb	r1, [r2, #2]
 80053ac:	b2c9      	uxtb	r1, r1
 80053ae:	7051      	strb	r1, [r2, #1]
 80053b0:	78d1      	ldrb	r1, [r2, #3]
 80053b2:	b2c9      	uxtb	r1, r1
 80053b4:	7091      	strb	r1, [r2, #2]
 80053b6:	7911      	ldrb	r1, [r2, #4]
 80053b8:	b2c9      	uxtb	r1, r1
 80053ba:	70d1      	strb	r1, [r2, #3]
			keypadarr[keypadlength-1] = num;
 80053bc:	7115      	strb	r5, [r2, #4]
			keypaddecimal = 1;
 80053be:	7004      	strb	r4, [r0, #0]
			keypaditerator--;
 80053c0:	781a      	ldrb	r2, [r3, #0]
 80053c2:	3a01      	subs	r2, #1
 80053c4:	b252      	sxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]
}
 80053c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80053ca:	2500      	movs	r5, #0
			keypadarr[0] = num;
 80053cc:	207a      	movs	r0, #122	; 0x7a
 80053ce:	4b29      	ldr	r3, [pc, #164]	; (8005474 <keypad_sm+0x113c>)
			if(keypadarr[4] == '.'){
 80053d0:	4a29      	ldr	r2, [pc, #164]	; (8005478 <keypad_sm+0x1140>)
				keypaddecimal = 0;
 80053d2:	4f2a      	ldr	r7, [pc, #168]	; (800547c <keypad_sm+0x1144>)
				kpenum = WAIT;
 80053d4:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80053d6:	7819      	ldrb	r1, [r3, #0]
 80053d8:	b249      	sxtb	r1, r1
 80053da:	2903      	cmp	r1, #3
 80053dc:	dc1c      	bgt.n	8005418 <keypad_sm+0x10e0>
		if(keypaditerator < keypadlength-1){
 80053de:	7819      	ldrb	r1, [r3, #0]
 80053e0:	b249      	sxtb	r1, r1
 80053e2:	2903      	cmp	r1, #3
 80053e4:	dcf7      	bgt.n	80053d6 <keypad_sm+0x109e>
			if(keypadarr[4] == '.'){
 80053e6:	7911      	ldrb	r1, [r2, #4]
 80053e8:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80053ea:	bf08      	it	eq
 80053ec:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 80053ee:	78d1      	ldrb	r1, [r2, #3]
 80053f0:	b2c9      	uxtb	r1, r1
 80053f2:	7111      	strb	r1, [r2, #4]
 80053f4:	7891      	ldrb	r1, [r2, #2]
 80053f6:	b2c9      	uxtb	r1, r1
 80053f8:	70d1      	strb	r1, [r2, #3]
 80053fa:	7851      	ldrb	r1, [r2, #1]
 80053fc:	b2c9      	uxtb	r1, r1
 80053fe:	7091      	strb	r1, [r2, #2]
 8005400:	7811      	ldrb	r1, [r2, #0]
 8005402:	b2c9      	uxtb	r1, r1
 8005404:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005406:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005408:	7819      	ldrb	r1, [r3, #0]
 800540a:	3101      	adds	r1, #1
 800540c:	b249      	sxtb	r1, r1
 800540e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005410:	7819      	ldrb	r1, [r3, #0]
 8005412:	b249      	sxtb	r1, r1
 8005414:	2903      	cmp	r1, #3
 8005416:	dde2      	ble.n	80053de <keypad_sm+0x10a6>
				encmode = 0;
 8005418:	2300      	movs	r3, #0
				encpos = 0;
 800541a:	4a19      	ldr	r2, [pc, #100]	; (8005480 <keypad_sm+0x1148>)
				encmode = 0;
 800541c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800541e:	7013      	strb	r3, [r2, #0]
}
 8005420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8005422:	207a      	movs	r0, #122	; 0x7a
 8005424:	4b13      	ldr	r3, [pc, #76]	; (8005474 <keypad_sm+0x113c>)
			if(keypadarr[4] == '.'){
 8005426:	4a14      	ldr	r2, [pc, #80]	; (8005478 <keypad_sm+0x1140>)
				keypaddecimal = 0;
 8005428:	4c14      	ldr	r4, [pc, #80]	; (800547c <keypad_sm+0x1144>)
				kpenum = WAIT;
 800542a:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 800542c:	7819      	ldrb	r1, [r3, #0]
 800542e:	b249      	sxtb	r1, r1
 8005430:	2903      	cmp	r1, #3
 8005432:	f73e af97 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005436:	7819      	ldrb	r1, [r3, #0]
 8005438:	b249      	sxtb	r1, r1
 800543a:	2903      	cmp	r1, #3
 800543c:	dcf6      	bgt.n	800542c <keypad_sm+0x10f4>
			if(keypadarr[4] == '.'){
 800543e:	7911      	ldrb	r1, [r2, #4]
 8005440:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005442:	bf08      	it	eq
 8005444:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005446:	78d1      	ldrb	r1, [r2, #3]
 8005448:	b2c9      	uxtb	r1, r1
 800544a:	7111      	strb	r1, [r2, #4]
 800544c:	7891      	ldrb	r1, [r2, #2]
 800544e:	b2c9      	uxtb	r1, r1
 8005450:	70d1      	strb	r1, [r2, #3]
 8005452:	7851      	ldrb	r1, [r2, #1]
 8005454:	b2c9      	uxtb	r1, r1
 8005456:	7091      	strb	r1, [r2, #2]
 8005458:	7811      	ldrb	r1, [r2, #0]
 800545a:	b2c9      	uxtb	r1, r1
 800545c:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800545e:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005460:	7819      	ldrb	r1, [r3, #0]
 8005462:	3101      	adds	r1, #1
 8005464:	b249      	sxtb	r1, r1
 8005466:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005468:	7819      	ldrb	r1, [r3, #0]
 800546a:	b249      	sxtb	r1, r1
 800546c:	2903      	cmp	r1, #3
 800546e:	dde2      	ble.n	8005436 <keypad_sm+0x10fe>
}
 8005470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005472:	bf00      	nop
 8005474:	20000005 	.word	0x20000005
 8005478:	20000000 	.word	0x20000000
 800547c:	200006c4 	.word	0x200006c4
 8005480:	200003ad 	.word	0x200003ad
	float temp = translate_keypad();
 8005484:	f7fe fa10 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005488:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800548a:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800548c:	f7fb fdd4 	bl	8001038 <__aeabi_fcmpge>
 8005490:	b158      	cbz	r0, 80054aa <keypad_sm+0x1172>
 8005492:	4628      	mov	r0, r5
 8005494:	4991      	ldr	r1, [pc, #580]	; (80056dc <keypad_sm+0x13a4>)
 8005496:	f7fb fdc5 	bl	8001024 <__aeabi_fcmple>
 800549a:	b130      	cbz	r0, 80054aa <keypad_sm+0x1172>
					volt_set_main_old = volt_set_main;
 800549c:	4d90      	ldr	r5, [pc, #576]	; (80056e0 <keypad_sm+0x13a8>)
 800549e:	4b91      	ldr	r3, [pc, #580]	; (80056e4 <keypad_sm+0x13ac>)
 80054a0:	682a      	ldr	r2, [r5, #0]
 80054a2:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 80054a4:	f7fe fa00 	bl	80038a8 <translate_keypad>
 80054a8:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 80054aa:	2500      	movs	r5, #0
			keypadarr[0] = num;
 80054ac:	207a      	movs	r0, #122	; 0x7a
 80054ae:	4b8e      	ldr	r3, [pc, #568]	; (80056e8 <keypad_sm+0x13b0>)
			if(keypadarr[4] == '.'){
 80054b0:	498e      	ldr	r1, [pc, #568]	; (80056ec <keypad_sm+0x13b4>)
				keypaddecimal = 0;
 80054b2:	4f8f      	ldr	r7, [pc, #572]	; (80056f0 <keypad_sm+0x13b8>)
				kpenum = WAIT;
 80054b4:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80054b6:	781a      	ldrb	r2, [r3, #0]
 80054b8:	b252      	sxtb	r2, r2
 80054ba:	2a03      	cmp	r2, #3
 80054bc:	dc1c      	bgt.n	80054f8 <keypad_sm+0x11c0>
		if(keypaditerator < keypadlength-1){
 80054be:	781a      	ldrb	r2, [r3, #0]
 80054c0:	b252      	sxtb	r2, r2
 80054c2:	2a03      	cmp	r2, #3
 80054c4:	dcf7      	bgt.n	80054b6 <keypad_sm+0x117e>
			if(keypadarr[4] == '.'){
 80054c6:	790a      	ldrb	r2, [r1, #4]
 80054c8:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 80054ca:	bf08      	it	eq
 80054cc:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 80054ce:	78ca      	ldrb	r2, [r1, #3]
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	710a      	strb	r2, [r1, #4]
 80054d4:	788a      	ldrb	r2, [r1, #2]
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	70ca      	strb	r2, [r1, #3]
 80054da:	784a      	ldrb	r2, [r1, #1]
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	708a      	strb	r2, [r1, #2]
 80054e0:	780a      	ldrb	r2, [r1, #0]
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 80054e6:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 80054e8:	781a      	ldrb	r2, [r3, #0]
 80054ea:	3201      	adds	r2, #1
 80054ec:	b252      	sxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 80054f0:	781a      	ldrb	r2, [r3, #0]
 80054f2:	b252      	sxtb	r2, r2
 80054f4:	2a03      	cmp	r2, #3
 80054f6:	dde2      	ble.n	80054be <keypad_sm+0x1186>
				encmode = 0;
 80054f8:	2300      	movs	r3, #0
				encpos = 0;
 80054fa:	4a7e      	ldr	r2, [pc, #504]	; (80056f4 <keypad_sm+0x13bc>)
				encmode = 0;
 80054fc:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80054fe:	7013      	strb	r3, [r2, #0]
}
 8005500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005502:	f7fe f9d1 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005506:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005508:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800550a:	f7fb fd95 	bl	8001038 <__aeabi_fcmpge>
 800550e:	b158      	cbz	r0, 8005528 <keypad_sm+0x11f0>
 8005510:	4620      	mov	r0, r4
 8005512:	4972      	ldr	r1, [pc, #456]	; (80056dc <keypad_sm+0x13a4>)
 8005514:	f7fb fd86 	bl	8001024 <__aeabi_fcmple>
 8005518:	b130      	cbz	r0, 8005528 <keypad_sm+0x11f0>
					volt_set_main_old = volt_set_main;
 800551a:	4c71      	ldr	r4, [pc, #452]	; (80056e0 <keypad_sm+0x13a8>)
 800551c:	4b71      	ldr	r3, [pc, #452]	; (80056e4 <keypad_sm+0x13ac>)
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005522:	f7fe f9c1 	bl	80038a8 <translate_keypad>
 8005526:	6020      	str	r0, [r4, #0]
				kpenum = WAIT;
 8005528:	2400      	movs	r4, #0
			keypadarr[0] = num;
 800552a:	207a      	movs	r0, #122	; 0x7a
 800552c:	4b6e      	ldr	r3, [pc, #440]	; (80056e8 <keypad_sm+0x13b0>)
			if(keypadarr[4] == '.'){
 800552e:	496f      	ldr	r1, [pc, #444]	; (80056ec <keypad_sm+0x13b4>)
				keypaddecimal = 0;
 8005530:	4d6f      	ldr	r5, [pc, #444]	; (80056f0 <keypad_sm+0x13b8>)
				kpenum = WAIT;
 8005532:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	b252      	sxtb	r2, r2
 8005538:	2a03      	cmp	r2, #3
 800553a:	f73e af13 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800553e:	781a      	ldrb	r2, [r3, #0]
 8005540:	b252      	sxtb	r2, r2
 8005542:	2a03      	cmp	r2, #3
 8005544:	dcf6      	bgt.n	8005534 <keypad_sm+0x11fc>
			if(keypadarr[4] == '.'){
 8005546:	790a      	ldrb	r2, [r1, #4]
 8005548:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 800554a:	bf08      	it	eq
 800554c:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800554e:	78ca      	ldrb	r2, [r1, #3]
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	710a      	strb	r2, [r1, #4]
 8005554:	788a      	ldrb	r2, [r1, #2]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	70ca      	strb	r2, [r1, #3]
 800555a:	784a      	ldrb	r2, [r1, #1]
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	708a      	strb	r2, [r1, #2]
 8005560:	780a      	ldrb	r2, [r1, #0]
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005566:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 8005568:	781a      	ldrb	r2, [r3, #0]
 800556a:	3201      	adds	r2, #1
 800556c:	b252      	sxtb	r2, r2
 800556e:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	b252      	sxtb	r2, r2
 8005574:	2a03      	cmp	r2, #3
 8005576:	dde2      	ble.n	800553e <keypad_sm+0x1206>
}
 8005578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(num == '#'){
 800557a:	2823      	cmp	r0, #35	; 0x23
 800557c:	f000 8342 	beq.w	8005c04 <keypad_sm+0x18cc>
			else if(num == '+'){
 8005580:	282b      	cmp	r0, #43	; 0x2b
 8005582:	f000 85eb 	beq.w	800615c <keypad_sm+0x1e24>
			else if(num == '-'){
 8005586:	282d      	cmp	r0, #45	; 0x2d
 8005588:	f000 8629 	beq.w	80061de <keypad_sm+0x1ea6>
			else if(num == 's'){
 800558c:	2873      	cmp	r0, #115	; 0x73
 800558e:	f47f ad9c 	bne.w	80050ca <keypad_sm+0xd92>
				if(encpos == 1){
 8005592:	4b58      	ldr	r3, [pc, #352]	; (80056f4 <keypad_sm+0x13bc>)
 8005594:	781a      	ldrb	r2, [r3, #0]
 8005596:	2a01      	cmp	r2, #1
					encpos++;
 8005598:	781a      	ldrb	r2, [r3, #0]
				if(encpos == 1){
 800559a:	f000 8675 	beq.w	8006288 <keypad_sm+0x1f50>
				else if(encpos < 4){
 800559e:	b252      	sxtb	r2, r2
 80055a0:	2a03      	cmp	r2, #3
					encpos = 0;
 80055a2:	bfcf      	iteee	gt
 80055a4:	2200      	movgt	r2, #0
					encpos++;
 80055a6:	781a      	ldrble	r2, [r3, #0]
 80055a8:	3201      	addle	r2, #1
 80055aa:	b252      	sxtble	r2, r2
					encpos = 0;
 80055ac:	701a      	strb	r2, [r3, #0]
}
 80055ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 80055b0:	2600      	movs	r6, #0
			keypadarr[0] = num;
 80055b2:	207a      	movs	r0, #122	; 0x7a
 80055b4:	4b4c      	ldr	r3, [pc, #304]	; (80056e8 <keypad_sm+0x13b0>)
			if(keypadarr[4] == '.'){
 80055b6:	4a4d      	ldr	r2, [pc, #308]	; (80056ec <keypad_sm+0x13b4>)
				keypaddecimal = 0;
 80055b8:	4d4d      	ldr	r5, [pc, #308]	; (80056f0 <keypad_sm+0x13b8>)
	while(keypaditerator < 4){
 80055ba:	7819      	ldrb	r1, [r3, #0]
 80055bc:	b249      	sxtb	r1, r1
 80055be:	2903      	cmp	r1, #3
 80055c0:	dc1c      	bgt.n	80055fc <keypad_sm+0x12c4>
		if(keypaditerator < keypadlength-1){
 80055c2:	7819      	ldrb	r1, [r3, #0]
 80055c4:	b249      	sxtb	r1, r1
 80055c6:	2903      	cmp	r1, #3
 80055c8:	dcf7      	bgt.n	80055ba <keypad_sm+0x1282>
			if(keypadarr[4] == '.'){
 80055ca:	7911      	ldrb	r1, [r2, #4]
 80055cc:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80055ce:	bf08      	it	eq
 80055d0:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80055d2:	78d1      	ldrb	r1, [r2, #3]
 80055d4:	b2c9      	uxtb	r1, r1
 80055d6:	7111      	strb	r1, [r2, #4]
 80055d8:	7891      	ldrb	r1, [r2, #2]
 80055da:	b2c9      	uxtb	r1, r1
 80055dc:	70d1      	strb	r1, [r2, #3]
 80055de:	7851      	ldrb	r1, [r2, #1]
 80055e0:	b2c9      	uxtb	r1, r1
 80055e2:	7091      	strb	r1, [r2, #2]
 80055e4:	7811      	ldrb	r1, [r2, #0]
 80055e6:	b2c9      	uxtb	r1, r1
 80055e8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80055ea:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80055ec:	7819      	ldrb	r1, [r3, #0]
 80055ee:	3101      	adds	r1, #1
 80055f0:	b249      	sxtb	r1, r1
 80055f2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80055f4:	7819      	ldrb	r1, [r3, #0]
 80055f6:	b249      	sxtb	r1, r1
 80055f8:	2903      	cmp	r1, #3
 80055fa:	dde2      	ble.n	80055c2 <keypad_sm+0x128a>
				encmode = 0;
 80055fc:	2300      	movs	r3, #0
				encpos = 0;
 80055fe:	4a3d      	ldr	r2, [pc, #244]	; (80056f4 <keypad_sm+0x13bc>)
				encmode = 0;
 8005600:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005602:	7013      	strb	r3, [r2, #0]
}
 8005604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8005606:	4b38      	ldr	r3, [pc, #224]	; (80056e8 <keypad_sm+0x13b0>)
 8005608:	781a      	ldrb	r2, [r3, #0]
 800560a:	b252      	sxtb	r2, r2
 800560c:	2a01      	cmp	r2, #1
 800560e:	f77e aea9 	ble.w	8004364 <keypad_sm+0x2c>
 8005612:	4837      	ldr	r0, [pc, #220]	; (80056f0 <keypad_sm+0x13b8>)
 8005614:	7802      	ldrb	r2, [r0, #0]
 8005616:	2a00      	cmp	r2, #0
 8005618:	f47e aea4 	bne.w	8004364 <keypad_sm+0x2c>
			keypadarr[keypadlength-1] = num;
 800561c:	252e      	movs	r5, #46	; 0x2e
			keypaddecimal = 1;
 800561e:	2401      	movs	r4, #1
				keypadarr[i-1] = keypadarr[i];
 8005620:	4a32      	ldr	r2, [pc, #200]	; (80056ec <keypad_sm+0x13b4>)
 8005622:	7851      	ldrb	r1, [r2, #1]
 8005624:	b2c9      	uxtb	r1, r1
 8005626:	7011      	strb	r1, [r2, #0]
 8005628:	7891      	ldrb	r1, [r2, #2]
 800562a:	b2c9      	uxtb	r1, r1
 800562c:	7051      	strb	r1, [r2, #1]
 800562e:	78d1      	ldrb	r1, [r2, #3]
 8005630:	b2c9      	uxtb	r1, r1
 8005632:	7091      	strb	r1, [r2, #2]
 8005634:	7911      	ldrb	r1, [r2, #4]
 8005636:	b2c9      	uxtb	r1, r1
 8005638:	70d1      	strb	r1, [r2, #3]
			keypadarr[keypadlength-1] = num;
 800563a:	7115      	strb	r5, [r2, #4]
			keypaddecimal = 1;
 800563c:	7004      	strb	r4, [r0, #0]
			keypaditerator--;
 800563e:	781a      	ldrb	r2, [r3, #0]
 8005640:	3a01      	subs	r2, #1
 8005642:	b252      	sxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]
}
 8005646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005648:	2000      	movs	r0, #0
			keypadarr[0] = num;
 800564a:	247a      	movs	r4, #122	; 0x7a
 800564c:	4b26      	ldr	r3, [pc, #152]	; (80056e8 <keypad_sm+0x13b0>)
			if(keypadarr[4] == '.'){
 800564e:	4927      	ldr	r1, [pc, #156]	; (80056ec <keypad_sm+0x13b4>)
				keypaddecimal = 0;
 8005650:	4d27      	ldr	r5, [pc, #156]	; (80056f0 <keypad_sm+0x13b8>)
				kpenum = WAIT;
 8005652:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005654:	781a      	ldrb	r2, [r3, #0]
 8005656:	b252      	sxtb	r2, r2
 8005658:	2a03      	cmp	r2, #3
 800565a:	f73e ae83 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800565e:	781a      	ldrb	r2, [r3, #0]
 8005660:	b252      	sxtb	r2, r2
 8005662:	2a03      	cmp	r2, #3
 8005664:	dcf6      	bgt.n	8005654 <keypad_sm+0x131c>
			if(keypadarr[4] == '.'){
 8005666:	790a      	ldrb	r2, [r1, #4]
 8005668:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 800566a:	bf08      	it	eq
 800566c:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800566e:	78ca      	ldrb	r2, [r1, #3]
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	710a      	strb	r2, [r1, #4]
 8005674:	788a      	ldrb	r2, [r1, #2]
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	70ca      	strb	r2, [r1, #3]
 800567a:	784a      	ldrb	r2, [r1, #1]
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	708a      	strb	r2, [r1, #2]
 8005680:	780a      	ldrb	r2, [r1, #0]
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005686:	700c      	strb	r4, [r1, #0]
			keypaditerator++;
 8005688:	781a      	ldrb	r2, [r3, #0]
 800568a:	3201      	adds	r2, #1
 800568c:	b252      	sxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005690:	781a      	ldrb	r2, [r3, #0]
 8005692:	b252      	sxtb	r2, r2
 8005694:	2a03      	cmp	r2, #3
 8005696:	dde2      	ble.n	800565e <keypad_sm+0x1326>
}
 8005698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(keypaditerator < keypadlength-1){
 800569a:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <keypad_sm+0x13b0>)
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	b252      	sxtb	r2, r2
 80056a0:	2a03      	cmp	r2, #3
 80056a2:	f73e ae5f 	bgt.w	8004364 <keypad_sm+0x2c>
			if(keypadarr[4] == '.'){
 80056a6:	4a11      	ldr	r2, [pc, #68]	; (80056ec <keypad_sm+0x13b4>)
 80056a8:	7911      	ldrb	r1, [r2, #4]
 80056aa:	292e      	cmp	r1, #46	; 0x2e
 80056ac:	d102      	bne.n	80056b4 <keypad_sm+0x137c>
				keypaddecimal = 0;
 80056ae:	2000      	movs	r0, #0
 80056b0:	490f      	ldr	r1, [pc, #60]	; (80056f0 <keypad_sm+0x13b8>)
 80056b2:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 80056b4:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 80056b6:	78d1      	ldrb	r1, [r2, #3]
 80056b8:	b2c9      	uxtb	r1, r1
 80056ba:	7111      	strb	r1, [r2, #4]
 80056bc:	7891      	ldrb	r1, [r2, #2]
 80056be:	b2c9      	uxtb	r1, r1
 80056c0:	70d1      	strb	r1, [r2, #3]
 80056c2:	7851      	ldrb	r1, [r2, #1]
 80056c4:	b2c9      	uxtb	r1, r1
 80056c6:	7091      	strb	r1, [r2, #2]
 80056c8:	7811      	ldrb	r1, [r2, #0]
 80056ca:	b2c9      	uxtb	r1, r1
 80056cc:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80056ce:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	3201      	adds	r2, #1
 80056d4:	b252      	sxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
}
 80056d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056da:	bf00      	nop
 80056dc:	41400000 	.word	0x41400000
 80056e0:	20000828 	.word	0x20000828
 80056e4:	2000082c 	.word	0x2000082c
 80056e8:	20000005 	.word	0x20000005
 80056ec:	20000000 	.word	0x20000000
 80056f0:	200006c4 	.word	0x200006c4
 80056f4:	200003ad 	.word	0x200003ad
				keypaddecimal = 0;
 80056f8:	2600      	movs	r6, #0
			keypadarr[0] = num;
 80056fa:	207a      	movs	r0, #122	; 0x7a
 80056fc:	4b8a      	ldr	r3, [pc, #552]	; (8005928 <keypad_sm+0x15f0>)
			if(keypadarr[4] == '.'){
 80056fe:	4a8b      	ldr	r2, [pc, #556]	; (800592c <keypad_sm+0x15f4>)
				keypaddecimal = 0;
 8005700:	4d8b      	ldr	r5, [pc, #556]	; (8005930 <keypad_sm+0x15f8>)
	while(keypaditerator < 4){
 8005702:	7819      	ldrb	r1, [r3, #0]
 8005704:	b249      	sxtb	r1, r1
 8005706:	2903      	cmp	r1, #3
 8005708:	dc1c      	bgt.n	8005744 <keypad_sm+0x140c>
		if(keypaditerator < keypadlength-1){
 800570a:	7819      	ldrb	r1, [r3, #0]
 800570c:	b249      	sxtb	r1, r1
 800570e:	2903      	cmp	r1, #3
 8005710:	dcf7      	bgt.n	8005702 <keypad_sm+0x13ca>
			if(keypadarr[4] == '.'){
 8005712:	7911      	ldrb	r1, [r2, #4]
 8005714:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005716:	bf08      	it	eq
 8005718:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800571a:	78d1      	ldrb	r1, [r2, #3]
 800571c:	b2c9      	uxtb	r1, r1
 800571e:	7111      	strb	r1, [r2, #4]
 8005720:	7891      	ldrb	r1, [r2, #2]
 8005722:	b2c9      	uxtb	r1, r1
 8005724:	70d1      	strb	r1, [r2, #3]
 8005726:	7851      	ldrb	r1, [r2, #1]
 8005728:	b2c9      	uxtb	r1, r1
 800572a:	7091      	strb	r1, [r2, #2]
 800572c:	7811      	ldrb	r1, [r2, #0]
 800572e:	b2c9      	uxtb	r1, r1
 8005730:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005732:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005734:	7819      	ldrb	r1, [r3, #0]
 8005736:	3101      	adds	r1, #1
 8005738:	b249      	sxtb	r1, r1
 800573a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800573c:	7819      	ldrb	r1, [r3, #0]
 800573e:	b249      	sxtb	r1, r1
 8005740:	2903      	cmp	r1, #3
 8005742:	dde2      	ble.n	800570a <keypad_sm+0x13d2>
				encmode = 0;
 8005744:	2300      	movs	r3, #0
				encpos = 0;
 8005746:	4a7b      	ldr	r2, [pc, #492]	; (8005934 <keypad_sm+0x15fc>)
				encmode = 0;
 8005748:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800574a:	7013      	strb	r3, [r2, #0]
}
 800574c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 800574e:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8005750:	207a      	movs	r0, #122	; 0x7a
 8005752:	4b75      	ldr	r3, [pc, #468]	; (8005928 <keypad_sm+0x15f0>)
			if(keypadarr[4] == '.'){
 8005754:	4a75      	ldr	r2, [pc, #468]	; (800592c <keypad_sm+0x15f4>)
				keypaddecimal = 0;
 8005756:	4d76      	ldr	r5, [pc, #472]	; (8005930 <keypad_sm+0x15f8>)
	while(keypaditerator < 4){
 8005758:	7819      	ldrb	r1, [r3, #0]
 800575a:	b249      	sxtb	r1, r1
 800575c:	2903      	cmp	r1, #3
 800575e:	dc1c      	bgt.n	800579a <keypad_sm+0x1462>
		if(keypaditerator < keypadlength-1){
 8005760:	7819      	ldrb	r1, [r3, #0]
 8005762:	b249      	sxtb	r1, r1
 8005764:	2903      	cmp	r1, #3
 8005766:	dcf7      	bgt.n	8005758 <keypad_sm+0x1420>
			if(keypadarr[4] == '.'){
 8005768:	7911      	ldrb	r1, [r2, #4]
 800576a:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800576c:	bf08      	it	eq
 800576e:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005770:	78d1      	ldrb	r1, [r2, #3]
 8005772:	b2c9      	uxtb	r1, r1
 8005774:	7111      	strb	r1, [r2, #4]
 8005776:	7891      	ldrb	r1, [r2, #2]
 8005778:	b2c9      	uxtb	r1, r1
 800577a:	70d1      	strb	r1, [r2, #3]
 800577c:	7851      	ldrb	r1, [r2, #1]
 800577e:	b2c9      	uxtb	r1, r1
 8005780:	7091      	strb	r1, [r2, #2]
 8005782:	7811      	ldrb	r1, [r2, #0]
 8005784:	b2c9      	uxtb	r1, r1
 8005786:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005788:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800578a:	7819      	ldrb	r1, [r3, #0]
 800578c:	3101      	adds	r1, #1
 800578e:	b249      	sxtb	r1, r1
 8005790:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005792:	7819      	ldrb	r1, [r3, #0]
 8005794:	b249      	sxtb	r1, r1
 8005796:	2903      	cmp	r1, #3
 8005798:	dde2      	ble.n	8005760 <keypad_sm+0x1428>
				encmode = 0;
 800579a:	2300      	movs	r3, #0
				encpos = 0;
 800579c:	4a65      	ldr	r2, [pc, #404]	; (8005934 <keypad_sm+0x15fc>)
				encmode = 0;
 800579e:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80057a0:	7013      	strb	r3, [r2, #0]
}
 80057a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 80057a4:	4a60      	ldr	r2, [pc, #384]	; (8005928 <keypad_sm+0x15f0>)
 80057a6:	7813      	ldrb	r3, [r2, #0]
 80057a8:	b25b      	sxtb	r3, r3
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	f77e adda 	ble.w	8004364 <keypad_sm+0x2c>
 80057b0:	485f      	ldr	r0, [pc, #380]	; (8005930 <keypad_sm+0x15f8>)
 80057b2:	7803      	ldrb	r3, [r0, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f47e add5 	bne.w	8004364 <keypad_sm+0x2c>
			keypadarr[keypadlength-1] = num;
 80057ba:	252e      	movs	r5, #46	; 0x2e
			keypaddecimal = 1;
 80057bc:	2401      	movs	r4, #1
				keypadarr[i-1] = keypadarr[i];
 80057be:	4b5b      	ldr	r3, [pc, #364]	; (800592c <keypad_sm+0x15f4>)
 80057c0:	7859      	ldrb	r1, [r3, #1]
 80057c2:	b2c9      	uxtb	r1, r1
 80057c4:	7019      	strb	r1, [r3, #0]
 80057c6:	7899      	ldrb	r1, [r3, #2]
 80057c8:	b2c9      	uxtb	r1, r1
 80057ca:	7059      	strb	r1, [r3, #1]
 80057cc:	78d9      	ldrb	r1, [r3, #3]
 80057ce:	b2c9      	uxtb	r1, r1
 80057d0:	7099      	strb	r1, [r3, #2]
 80057d2:	7919      	ldrb	r1, [r3, #4]
 80057d4:	b2c9      	uxtb	r1, r1
 80057d6:	70d9      	strb	r1, [r3, #3]
			keypadarr[keypadlength-1] = num;
 80057d8:	711d      	strb	r5, [r3, #4]
			keypaddecimal = 1;
 80057da:	7004      	strb	r4, [r0, #0]
			keypaditerator--;
 80057dc:	7813      	ldrb	r3, [r2, #0]
 80057de:	3b01      	subs	r3, #1
 80057e0:	b25b      	sxtb	r3, r3
 80057e2:	7013      	strb	r3, [r2, #0]
}
 80057e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 80057e6:	f7fe f85f 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80057ea:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80057ec:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80057ee:	f7fb fc23 	bl	8001038 <__aeabi_fcmpge>
 80057f2:	b140      	cbz	r0, 8005806 <keypad_sm+0x14ce>
 80057f4:	4620      	mov	r0, r4
 80057f6:	4950      	ldr	r1, [pc, #320]	; (8005938 <keypad_sm+0x1600>)
 80057f8:	f7fb fc14 	bl	8001024 <__aeabi_fcmple>
 80057fc:	b118      	cbz	r0, 8005806 <keypad_sm+0x14ce>
					volt_set_aux = translate_keypad();
 80057fe:	f7fe f853 	bl	80038a8 <translate_keypad>
 8005802:	4a4e      	ldr	r2, [pc, #312]	; (800593c <keypad_sm+0x1604>)
 8005804:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005806:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005808:	247a      	movs	r4, #122	; 0x7a
 800580a:	4b47      	ldr	r3, [pc, #284]	; (8005928 <keypad_sm+0x15f0>)
			if(keypadarr[4] == '.'){
 800580c:	4a47      	ldr	r2, [pc, #284]	; (800592c <keypad_sm+0x15f4>)
				keypaddecimal = 0;
 800580e:	4d48      	ldr	r5, [pc, #288]	; (8005930 <keypad_sm+0x15f8>)
				kpenum = WAIT;
 8005810:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005812:	7819      	ldrb	r1, [r3, #0]
 8005814:	b249      	sxtb	r1, r1
 8005816:	2903      	cmp	r1, #3
 8005818:	f73e ada4 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800581c:	7819      	ldrb	r1, [r3, #0]
 800581e:	b249      	sxtb	r1, r1
 8005820:	2903      	cmp	r1, #3
 8005822:	dcf6      	bgt.n	8005812 <keypad_sm+0x14da>
			if(keypadarr[4] == '.'){
 8005824:	7911      	ldrb	r1, [r2, #4]
 8005826:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005828:	bf08      	it	eq
 800582a:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800582c:	78d1      	ldrb	r1, [r2, #3]
 800582e:	b2c9      	uxtb	r1, r1
 8005830:	7111      	strb	r1, [r2, #4]
 8005832:	7891      	ldrb	r1, [r2, #2]
 8005834:	b2c9      	uxtb	r1, r1
 8005836:	70d1      	strb	r1, [r2, #3]
 8005838:	7851      	ldrb	r1, [r2, #1]
 800583a:	b2c9      	uxtb	r1, r1
 800583c:	7091      	strb	r1, [r2, #2]
 800583e:	7811      	ldrb	r1, [r2, #0]
 8005840:	b2c9      	uxtb	r1, r1
 8005842:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005844:	7014      	strb	r4, [r2, #0]
			keypaditerator++;
 8005846:	7819      	ldrb	r1, [r3, #0]
 8005848:	3101      	adds	r1, #1
 800584a:	b249      	sxtb	r1, r1
 800584c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800584e:	7819      	ldrb	r1, [r3, #0]
 8005850:	b249      	sxtb	r1, r1
 8005852:	2903      	cmp	r1, #3
 8005854:	dde2      	ble.n	800581c <keypad_sm+0x14e4>
}
 8005856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(num == '#'){
 8005858:	2823      	cmp	r0, #35	; 0x23
 800585a:	f000 831f 	beq.w	8005e9c <keypad_sm+0x1b64>
			else if(num == '+'){
 800585e:	282b      	cmp	r0, #43	; 0x2b
 8005860:	f000 8370 	beq.w	8005f44 <keypad_sm+0x1c0c>
			else if(num == '-'){
 8005864:	282d      	cmp	r0, #45	; 0x2d
 8005866:	f000 8439 	beq.w	80060dc <keypad_sm+0x1da4>
			else if(num == 's'){
 800586a:	2873      	cmp	r0, #115	; 0x73
 800586c:	f47f ad7f 	bne.w	800536e <keypad_sm+0x1036>
				if(encpos == 0){
 8005870:	4b30      	ldr	r3, [pc, #192]	; (8005934 <keypad_sm+0x15fc>)
 8005872:	781a      	ldrb	r2, [r3, #0]
 8005874:	2a00      	cmp	r2, #0
 8005876:	f040 84fd 	bne.w	8006274 <keypad_sm+0x1f3c>
					encpos++;
 800587a:	781a      	ldrb	r2, [r3, #0]
 800587c:	3201      	adds	r2, #1
 800587e:	b252      	sxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]
					encpos++;
 8005882:	781a      	ldrb	r2, [r3, #0]
 8005884:	3201      	adds	r2, #1
 8005886:	b252      	sxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
}
 800588a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800588c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				update_keypad('z');
 8005890:	f7fb befa 	b.w	8001688 <update_keypad.constprop.0>
				kpenum = WAIT;
 8005894:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005896:	257a      	movs	r5, #122	; 0x7a
 8005898:	4b23      	ldr	r3, [pc, #140]	; (8005928 <keypad_sm+0x15f0>)
			if(keypadarr[4] == '.'){
 800589a:	4924      	ldr	r1, [pc, #144]	; (800592c <keypad_sm+0x15f4>)
				keypaddecimal = 0;
 800589c:	4c24      	ldr	r4, [pc, #144]	; (8005930 <keypad_sm+0x15f8>)
				kpenum = WAIT;
 800589e:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80058a0:	781a      	ldrb	r2, [r3, #0]
 80058a2:	b252      	sxtb	r2, r2
 80058a4:	2a03      	cmp	r2, #3
 80058a6:	f73e ad5d 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80058aa:	781a      	ldrb	r2, [r3, #0]
 80058ac:	b252      	sxtb	r2, r2
 80058ae:	2a03      	cmp	r2, #3
 80058b0:	dcf6      	bgt.n	80058a0 <keypad_sm+0x1568>
			if(keypadarr[4] == '.'){
 80058b2:	790a      	ldrb	r2, [r1, #4]
 80058b4:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 80058b6:	bf08      	it	eq
 80058b8:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 80058ba:	78ca      	ldrb	r2, [r1, #3]
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	710a      	strb	r2, [r1, #4]
 80058c0:	788a      	ldrb	r2, [r1, #2]
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	70ca      	strb	r2, [r1, #3]
 80058c6:	784a      	ldrb	r2, [r1, #1]
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	708a      	strb	r2, [r1, #2]
 80058cc:	780a      	ldrb	r2, [r1, #0]
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 80058d2:	700d      	strb	r5, [r1, #0]
			keypaditerator++;
 80058d4:	781a      	ldrb	r2, [r3, #0]
 80058d6:	3201      	adds	r2, #1
 80058d8:	b252      	sxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 80058dc:	781a      	ldrb	r2, [r3, #0]
 80058de:	b252      	sxtb	r2, r2
 80058e0:	2a03      	cmp	r2, #3
 80058e2:	dde2      	ble.n	80058aa <keypad_sm+0x1572>
}
 80058e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(keypaditerator < keypadlength-1){
 80058e6:	4b10      	ldr	r3, [pc, #64]	; (8005928 <keypad_sm+0x15f0>)
 80058e8:	781a      	ldrb	r2, [r3, #0]
 80058ea:	b252      	sxtb	r2, r2
 80058ec:	2a03      	cmp	r2, #3
 80058ee:	f73e ad39 	bgt.w	8004364 <keypad_sm+0x2c>
			if(keypadarr[4] == '.'){
 80058f2:	4a0e      	ldr	r2, [pc, #56]	; (800592c <keypad_sm+0x15f4>)
 80058f4:	7911      	ldrb	r1, [r2, #4]
 80058f6:	292e      	cmp	r1, #46	; 0x2e
 80058f8:	d102      	bne.n	8005900 <keypad_sm+0x15c8>
				keypaddecimal = 0;
 80058fa:	2000      	movs	r0, #0
 80058fc:	490c      	ldr	r1, [pc, #48]	; (8005930 <keypad_sm+0x15f8>)
 80058fe:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 8005900:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8005902:	78d1      	ldrb	r1, [r2, #3]
 8005904:	b2c9      	uxtb	r1, r1
 8005906:	7111      	strb	r1, [r2, #4]
 8005908:	7891      	ldrb	r1, [r2, #2]
 800590a:	b2c9      	uxtb	r1, r1
 800590c:	70d1      	strb	r1, [r2, #3]
 800590e:	7851      	ldrb	r1, [r2, #1]
 8005910:	b2c9      	uxtb	r1, r1
 8005912:	7091      	strb	r1, [r2, #2]
 8005914:	7811      	ldrb	r1, [r2, #0]
 8005916:	b2c9      	uxtb	r1, r1
 8005918:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800591a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800591c:	781a      	ldrb	r2, [r3, #0]
 800591e:	3201      	adds	r2, #1
 8005920:	b252      	sxtb	r2, r2
 8005922:	701a      	strb	r2, [r3, #0]
}
 8005924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005926:	bf00      	nop
 8005928:	20000005 	.word	0x20000005
 800592c:	20000000 	.word	0x20000000
 8005930:	200006c4 	.word	0x200006c4
 8005934:	200003ad 	.word	0x200003ad
 8005938:	41400000 	.word	0x41400000
 800593c:	20000824 	.word	0x20000824
	float temp = translate_keypad();
 8005940:	f7fd ffb2 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005944:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005946:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005948:	f7fb fb76 	bl	8001038 <__aeabi_fcmpge>
 800594c:	b158      	cbz	r0, 8005966 <keypad_sm+0x162e>
 800594e:	4628      	mov	r0, r5
 8005950:	4981      	ldr	r1, [pc, #516]	; (8005b58 <keypad_sm+0x1820>)
 8005952:	f7fb fb67 	bl	8001024 <__aeabi_fcmple>
 8005956:	b130      	cbz	r0, 8005966 <keypad_sm+0x162e>
					amp_set_main_old = amp_set_main;
 8005958:	4d80      	ldr	r5, [pc, #512]	; (8005b5c <keypad_sm+0x1824>)
 800595a:	4b81      	ldr	r3, [pc, #516]	; (8005b60 <keypad_sm+0x1828>)
 800595c:	682a      	ldr	r2, [r5, #0]
 800595e:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8005960:	f7fd ffa2 	bl	80038a8 <translate_keypad>
 8005964:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8005966:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005968:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 800596c:	4b7d      	ldr	r3, [pc, #500]	; (8005b64 <keypad_sm+0x182c>)
			if(keypadarr[4] == '.'){
 800596e:	497e      	ldr	r1, [pc, #504]	; (8005b68 <keypad_sm+0x1830>)
				keypaddecimal = 0;
 8005970:	4d7e      	ldr	r5, [pc, #504]	; (8005b6c <keypad_sm+0x1834>)
				kpenum = WAIT;
 8005972:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005974:	781a      	ldrb	r2, [r3, #0]
 8005976:	b252      	sxtb	r2, r2
 8005978:	2a03      	cmp	r2, #3
 800597a:	dc1d      	bgt.n	80059b8 <keypad_sm+0x1680>
		if(keypaditerator < keypadlength-1){
 800597c:	781a      	ldrb	r2, [r3, #0]
 800597e:	b252      	sxtb	r2, r2
 8005980:	2a03      	cmp	r2, #3
 8005982:	dcf7      	bgt.n	8005974 <keypad_sm+0x163c>
			if(keypadarr[4] == '.'){
 8005984:	790a      	ldrb	r2, [r1, #4]
 8005986:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8005988:	bf08      	it	eq
 800598a:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800598c:	78ca      	ldrb	r2, [r1, #3]
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	710a      	strb	r2, [r1, #4]
 8005992:	788a      	ldrb	r2, [r1, #2]
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	70ca      	strb	r2, [r1, #3]
 8005998:	784a      	ldrb	r2, [r1, #1]
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	708a      	strb	r2, [r1, #2]
 800599e:	780a      	ldrb	r2, [r1, #0]
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 80059a4:	f881 c000 	strb.w	ip, [r1]
			keypaditerator++;
 80059a8:	781a      	ldrb	r2, [r3, #0]
 80059aa:	3201      	adds	r2, #1
 80059ac:	b252      	sxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	b252      	sxtb	r2, r2
 80059b4:	2a03      	cmp	r2, #3
 80059b6:	dde1      	ble.n	800597c <keypad_sm+0x1644>
				encmode = 0;
 80059b8:	2300      	movs	r3, #0
				encpos = 0;
 80059ba:	4a6d      	ldr	r2, [pc, #436]	; (8005b70 <keypad_sm+0x1838>)
				encmode = 0;
 80059bc:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80059be:	7013      	strb	r3, [r2, #0]
}
 80059c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 80059c2:	f7fd ff71 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80059c6:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80059c8:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80059ca:	f7fb fb35 	bl	8001038 <__aeabi_fcmpge>
 80059ce:	b190      	cbz	r0, 80059f6 <keypad_sm+0x16be>
 80059d0:	4620      	mov	r0, r4
 80059d2:	f7fa fd41 	bl	8000458 <__aeabi_f2d>
 80059d6:	a35e      	add	r3, pc, #376	; (adr r3, 8005b50 <keypad_sm+0x1818>)
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	f7fb f810 	bl	8000a00 <__aeabi_dcmple>
 80059e0:	b148      	cbz	r0, 80059f6 <keypad_sm+0x16be>
					amp_set_main_old = amp_set_main;
 80059e2:	4c5e      	ldr	r4, [pc, #376]	; (8005b5c <keypad_sm+0x1824>)
 80059e4:	4b5e      	ldr	r3, [pc, #376]	; (8005b60 <keypad_sm+0x1828>)
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 80059ea:	f7fd ff5d 	bl	80038a8 <translate_keypad>
 80059ee:	6020      	str	r0, [r4, #0]
					update_ADC_watchdog(amp_set_main);
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	f7fb fec7 	bl	8001784 <update_ADC_watchdog>
				kpenum = WAIT;
 80059f6:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80059f8:	257a      	movs	r5, #122	; 0x7a
 80059fa:	4b5a      	ldr	r3, [pc, #360]	; (8005b64 <keypad_sm+0x182c>)
			if(keypadarr[4] == '.'){
 80059fc:	495a      	ldr	r1, [pc, #360]	; (8005b68 <keypad_sm+0x1830>)
				keypaddecimal = 0;
 80059fe:	4c5b      	ldr	r4, [pc, #364]	; (8005b6c <keypad_sm+0x1834>)
				kpenum = WAIT;
 8005a00:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	b252      	sxtb	r2, r2
 8005a06:	2a03      	cmp	r2, #3
 8005a08:	f73e acac 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005a0c:	781a      	ldrb	r2, [r3, #0]
 8005a0e:	b252      	sxtb	r2, r2
 8005a10:	2a03      	cmp	r2, #3
 8005a12:	dcf6      	bgt.n	8005a02 <keypad_sm+0x16ca>
			if(keypadarr[4] == '.'){
 8005a14:	790a      	ldrb	r2, [r1, #4]
 8005a16:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8005a18:	bf08      	it	eq
 8005a1a:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005a1c:	78ca      	ldrb	r2, [r1, #3]
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	710a      	strb	r2, [r1, #4]
 8005a22:	788a      	ldrb	r2, [r1, #2]
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	70ca      	strb	r2, [r1, #3]
 8005a28:	784a      	ldrb	r2, [r1, #1]
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	708a      	strb	r2, [r1, #2]
 8005a2e:	780a      	ldrb	r2, [r1, #0]
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005a34:	700d      	strb	r5, [r1, #0]
			keypaditerator++;
 8005a36:	781a      	ldrb	r2, [r3, #0]
 8005a38:	3201      	adds	r2, #1
 8005a3a:	b252      	sxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005a3e:	781a      	ldrb	r2, [r3, #0]
 8005a40:	b252      	sxtb	r2, r2
 8005a42:	2a03      	cmp	r2, #3
 8005a44:	dde2      	ble.n	8005a0c <keypad_sm+0x16d4>
}
 8005a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 8005a48:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8005a4a:	257a      	movs	r5, #122	; 0x7a
 8005a4c:	4b45      	ldr	r3, [pc, #276]	; (8005b64 <keypad_sm+0x182c>)
			if(keypadarr[4] == '.'){
 8005a4e:	4946      	ldr	r1, [pc, #280]	; (8005b68 <keypad_sm+0x1830>)
				keypaddecimal = 0;
 8005a50:	4846      	ldr	r0, [pc, #280]	; (8005b6c <keypad_sm+0x1834>)
	while(keypaditerator < 4){
 8005a52:	781a      	ldrb	r2, [r3, #0]
 8005a54:	b252      	sxtb	r2, r2
 8005a56:	2a03      	cmp	r2, #3
 8005a58:	dc1c      	bgt.n	8005a94 <keypad_sm+0x175c>
		if(keypaditerator < keypadlength-1){
 8005a5a:	781a      	ldrb	r2, [r3, #0]
 8005a5c:	b252      	sxtb	r2, r2
 8005a5e:	2a03      	cmp	r2, #3
 8005a60:	dcf7      	bgt.n	8005a52 <keypad_sm+0x171a>
			if(keypadarr[4] == '.'){
 8005a62:	790a      	ldrb	r2, [r1, #4]
 8005a64:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8005a66:	bf08      	it	eq
 8005a68:	7006      	strbeq	r6, [r0, #0]
				keypadarr[i+1] = keypadarr[i];
 8005a6a:	78ca      	ldrb	r2, [r1, #3]
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	710a      	strb	r2, [r1, #4]
 8005a70:	788a      	ldrb	r2, [r1, #2]
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	70ca      	strb	r2, [r1, #3]
 8005a76:	784a      	ldrb	r2, [r1, #1]
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	708a      	strb	r2, [r1, #2]
 8005a7c:	780a      	ldrb	r2, [r1, #0]
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005a82:	700d      	strb	r5, [r1, #0]
			keypaditerator++;
 8005a84:	781a      	ldrb	r2, [r3, #0]
 8005a86:	3201      	adds	r2, #1
 8005a88:	b252      	sxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005a8c:	781a      	ldrb	r2, [r3, #0]
 8005a8e:	b252      	sxtb	r2, r2
 8005a90:	2a03      	cmp	r2, #3
 8005a92:	dde2      	ble.n	8005a5a <keypad_sm+0x1722>
				encmode = 0;
 8005a94:	2300      	movs	r3, #0
				encpos = 0;
 8005a96:	4a36      	ldr	r2, [pc, #216]	; (8005b70 <keypad_sm+0x1838>)
				encmode = 0;
 8005a98:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005a9a:	7013      	strb	r3, [r2, #0]
}
 8005a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005a9e:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005aa0:	257a      	movs	r5, #122	; 0x7a
 8005aa2:	4b30      	ldr	r3, [pc, #192]	; (8005b64 <keypad_sm+0x182c>)
			if(keypadarr[4] == '.'){
 8005aa4:	4a30      	ldr	r2, [pc, #192]	; (8005b68 <keypad_sm+0x1830>)
				keypaddecimal = 0;
 8005aa6:	4c31      	ldr	r4, [pc, #196]	; (8005b6c <keypad_sm+0x1834>)
				kpenum = WAIT;
 8005aa8:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005aaa:	7819      	ldrb	r1, [r3, #0]
 8005aac:	b249      	sxtb	r1, r1
 8005aae:	2903      	cmp	r1, #3
 8005ab0:	f73e ac58 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005ab4:	7819      	ldrb	r1, [r3, #0]
 8005ab6:	b249      	sxtb	r1, r1
 8005ab8:	2903      	cmp	r1, #3
 8005aba:	dcf6      	bgt.n	8005aaa <keypad_sm+0x1772>
			if(keypadarr[4] == '.'){
 8005abc:	7911      	ldrb	r1, [r2, #4]
 8005abe:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005ac0:	bf08      	it	eq
 8005ac2:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005ac4:	78d1      	ldrb	r1, [r2, #3]
 8005ac6:	b2c9      	uxtb	r1, r1
 8005ac8:	7111      	strb	r1, [r2, #4]
 8005aca:	7891      	ldrb	r1, [r2, #2]
 8005acc:	b2c9      	uxtb	r1, r1
 8005ace:	70d1      	strb	r1, [r2, #3]
 8005ad0:	7851      	ldrb	r1, [r2, #1]
 8005ad2:	b2c9      	uxtb	r1, r1
 8005ad4:	7091      	strb	r1, [r2, #2]
 8005ad6:	7811      	ldrb	r1, [r2, #0]
 8005ad8:	b2c9      	uxtb	r1, r1
 8005ada:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005adc:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005ade:	7819      	ldrb	r1, [r3, #0]
 8005ae0:	3101      	adds	r1, #1
 8005ae2:	b249      	sxtb	r1, r1
 8005ae4:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005ae6:	7819      	ldrb	r1, [r3, #0]
 8005ae8:	b249      	sxtb	r1, r1
 8005aea:	2903      	cmp	r1, #3
 8005aec:	dde2      	ble.n	8005ab4 <keypad_sm+0x177c>
}
 8005aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005af0:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005af2:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005af6:	4b1b      	ldr	r3, [pc, #108]	; (8005b64 <keypad_sm+0x182c>)
			if(keypadarr[4] == '.'){
 8005af8:	491b      	ldr	r1, [pc, #108]	; (8005b68 <keypad_sm+0x1830>)
				keypaddecimal = 0;
 8005afa:	4d1c      	ldr	r5, [pc, #112]	; (8005b6c <keypad_sm+0x1834>)
				kpenum = WAIT;
 8005afc:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005afe:	781a      	ldrb	r2, [r3, #0]
 8005b00:	b252      	sxtb	r2, r2
 8005b02:	2a03      	cmp	r2, #3
 8005b04:	dc1d      	bgt.n	8005b42 <keypad_sm+0x180a>
		if(keypaditerator < keypadlength-1){
 8005b06:	781a      	ldrb	r2, [r3, #0]
 8005b08:	b252      	sxtb	r2, r2
 8005b0a:	2a03      	cmp	r2, #3
 8005b0c:	dcf7      	bgt.n	8005afe <keypad_sm+0x17c6>
			if(keypadarr[4] == '.'){
 8005b0e:	790a      	ldrb	r2, [r1, #4]
 8005b10:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8005b12:	bf08      	it	eq
 8005b14:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005b16:	78ca      	ldrb	r2, [r1, #3]
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	710a      	strb	r2, [r1, #4]
 8005b1c:	788a      	ldrb	r2, [r1, #2]
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	70ca      	strb	r2, [r1, #3]
 8005b22:	784a      	ldrb	r2, [r1, #1]
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	708a      	strb	r2, [r1, #2]
 8005b28:	780a      	ldrb	r2, [r1, #0]
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005b2e:	f881 c000 	strb.w	ip, [r1]
			keypaditerator++;
 8005b32:	781a      	ldrb	r2, [r3, #0]
 8005b34:	3201      	adds	r2, #1
 8005b36:	b252      	sxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005b3a:	781a      	ldrb	r2, [r3, #0]
 8005b3c:	b252      	sxtb	r2, r2
 8005b3e:	2a03      	cmp	r2, #3
 8005b40:	dde1      	ble.n	8005b06 <keypad_sm+0x17ce>
				encmode = 0;
 8005b42:	2300      	movs	r3, #0
				encpos = 0;
 8005b44:	4a0a      	ldr	r2, [pc, #40]	; (8005b70 <keypad_sm+0x1838>)
				encmode = 0;
 8005b46:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005b48:	7013      	strb	r3, [r2, #0]
}
 8005b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b4c:	f3af 8000 	nop.w
 8005b50:	50b0f27c 	.word	0x50b0f27c
 8005b54:	3fe99a6b 	.word	0x3fe99a6b
 8005b58:	41400000 	.word	0x41400000
 8005b5c:	20000398 	.word	0x20000398
 8005b60:	2000039c 	.word	0x2000039c
 8005b64:	20000005 	.word	0x20000005
 8005b68:	20000000 	.word	0x20000000
 8005b6c:	200006c4 	.word	0x200006c4
 8005b70:	200003ad 	.word	0x200003ad
	float temp = translate_keypad();
 8005b74:	f7fd fe98 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005b78:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005b7a:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005b7c:	f7fb fa5c 	bl	8001038 <__aeabi_fcmpge>
 8005b80:	b160      	cbz	r0, 8005b9c <keypad_sm+0x1864>
 8005b82:	4620      	mov	r0, r4
 8005b84:	f7fa fc68 	bl	8000458 <__aeabi_f2d>
 8005b88:	a395      	add	r3, pc, #596	; (adr r3, 8005de0 <keypad_sm+0x1aa8>)
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f7fa ff37 	bl	8000a00 <__aeabi_dcmple>
 8005b92:	b118      	cbz	r0, 8005b9c <keypad_sm+0x1864>
					amp_set_aux = translate_keypad();
 8005b94:	f7fd fe88 	bl	80038a8 <translate_keypad>
 8005b98:	4a93      	ldr	r2, [pc, #588]	; (8005de8 <keypad_sm+0x1ab0>)
 8005b9a:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005b9c:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005b9e:	257a      	movs	r5, #122	; 0x7a
 8005ba0:	4b92      	ldr	r3, [pc, #584]	; (8005dec <keypad_sm+0x1ab4>)
			if(keypadarr[4] == '.'){
 8005ba2:	4a93      	ldr	r2, [pc, #588]	; (8005df0 <keypad_sm+0x1ab8>)
				keypaddecimal = 0;
 8005ba4:	4c93      	ldr	r4, [pc, #588]	; (8005df4 <keypad_sm+0x1abc>)
				kpenum = WAIT;
 8005ba6:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005ba8:	7819      	ldrb	r1, [r3, #0]
 8005baa:	b249      	sxtb	r1, r1
 8005bac:	2903      	cmp	r1, #3
 8005bae:	f73e abd9 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005bb2:	7819      	ldrb	r1, [r3, #0]
 8005bb4:	b249      	sxtb	r1, r1
 8005bb6:	2903      	cmp	r1, #3
 8005bb8:	dcf6      	bgt.n	8005ba8 <keypad_sm+0x1870>
			if(keypadarr[4] == '.'){
 8005bba:	7911      	ldrb	r1, [r2, #4]
 8005bbc:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005bbe:	bf08      	it	eq
 8005bc0:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005bc2:	78d1      	ldrb	r1, [r2, #3]
 8005bc4:	b2c9      	uxtb	r1, r1
 8005bc6:	7111      	strb	r1, [r2, #4]
 8005bc8:	7891      	ldrb	r1, [r2, #2]
 8005bca:	b2c9      	uxtb	r1, r1
 8005bcc:	70d1      	strb	r1, [r2, #3]
 8005bce:	7851      	ldrb	r1, [r2, #1]
 8005bd0:	b2c9      	uxtb	r1, r1
 8005bd2:	7091      	strb	r1, [r2, #2]
 8005bd4:	7811      	ldrb	r1, [r2, #0]
 8005bd6:	b2c9      	uxtb	r1, r1
 8005bd8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005bda:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005bdc:	7819      	ldrb	r1, [r3, #0]
 8005bde:	3101      	adds	r1, #1
 8005be0:	b249      	sxtb	r1, r1
 8005be2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005be4:	7819      	ldrb	r1, [r3, #0]
 8005be6:	b249      	sxtb	r1, r1
 8005be8:	2903      	cmp	r1, #3
 8005bea:	dde2      	ble.n	8005bb2 <keypad_sm+0x187a>
}
 8005bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(0, volt_set_aux);
 8005bee:	4b82      	ldr	r3, [pc, #520]	; (8005df8 <keypad_sm+0x1ac0>)
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	6819      	ldr	r1, [r3, #0]
 8005bf4:	f7fd fffc 	bl	8003bf0 <fill_keypad>
				encmode = 1;
 8005bf8:	2101      	movs	r1, #1
				encpos = 0;
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	4b7f      	ldr	r3, [pc, #508]	; (8005dfc <keypad_sm+0x1ac4>)
				encmode = 1;
 8005bfe:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8005c00:	701a      	strb	r2, [r3, #0]
}
 8005c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 8005c04:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8005c06:	257a      	movs	r5, #122	; 0x7a
 8005c08:	4b78      	ldr	r3, [pc, #480]	; (8005dec <keypad_sm+0x1ab4>)
			if(keypadarr[4] == '.'){
 8005c0a:	4a79      	ldr	r2, [pc, #484]	; (8005df0 <keypad_sm+0x1ab8>)
				keypaddecimal = 0;
 8005c0c:	4879      	ldr	r0, [pc, #484]	; (8005df4 <keypad_sm+0x1abc>)
	while(keypaditerator < 4){
 8005c0e:	7819      	ldrb	r1, [r3, #0]
 8005c10:	b249      	sxtb	r1, r1
 8005c12:	2903      	cmp	r1, #3
 8005c14:	dc1c      	bgt.n	8005c50 <keypad_sm+0x1918>
		if(keypaditerator < keypadlength-1){
 8005c16:	7819      	ldrb	r1, [r3, #0]
 8005c18:	b249      	sxtb	r1, r1
 8005c1a:	2903      	cmp	r1, #3
 8005c1c:	dcf7      	bgt.n	8005c0e <keypad_sm+0x18d6>
			if(keypadarr[4] == '.'){
 8005c1e:	7911      	ldrb	r1, [r2, #4]
 8005c20:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005c22:	bf08      	it	eq
 8005c24:	7006      	strbeq	r6, [r0, #0]
				keypadarr[i+1] = keypadarr[i];
 8005c26:	78d1      	ldrb	r1, [r2, #3]
 8005c28:	b2c9      	uxtb	r1, r1
 8005c2a:	7111      	strb	r1, [r2, #4]
 8005c2c:	7891      	ldrb	r1, [r2, #2]
 8005c2e:	b2c9      	uxtb	r1, r1
 8005c30:	70d1      	strb	r1, [r2, #3]
 8005c32:	7851      	ldrb	r1, [r2, #1]
 8005c34:	b2c9      	uxtb	r1, r1
 8005c36:	7091      	strb	r1, [r2, #2]
 8005c38:	7811      	ldrb	r1, [r2, #0]
 8005c3a:	b2c9      	uxtb	r1, r1
 8005c3c:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005c3e:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005c40:	7819      	ldrb	r1, [r3, #0]
 8005c42:	3101      	adds	r1, #1
 8005c44:	b249      	sxtb	r1, r1
 8005c46:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005c48:	7819      	ldrb	r1, [r3, #0]
 8005c4a:	b249      	sxtb	r1, r1
 8005c4c:	2903      	cmp	r1, #3
 8005c4e:	dde2      	ble.n	8005c16 <keypad_sm+0x18de>
				encmode = 0;
 8005c50:	2300      	movs	r3, #0
				encpos = 0;
 8005c52:	4a6a      	ldr	r2, [pc, #424]	; (8005dfc <keypad_sm+0x1ac4>)
				encmode = 0;
 8005c54:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005c56:	7013      	strb	r3, [r2, #0]
}
 8005c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005c5a:	f7fd fe25 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005c5e:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005c60:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005c62:	f7fb f9e9 	bl	8001038 <__aeabi_fcmpge>
 8005c66:	b140      	cbz	r0, 8005c7a <keypad_sm+0x1942>
 8005c68:	4628      	mov	r0, r5
 8005c6a:	4965      	ldr	r1, [pc, #404]	; (8005e00 <keypad_sm+0x1ac8>)
 8005c6c:	f7fb f9da 	bl	8001024 <__aeabi_fcmple>
 8005c70:	b118      	cbz	r0, 8005c7a <keypad_sm+0x1942>
					amp_set_aux = translate_keypad();
 8005c72:	f7fd fe19 	bl	80038a8 <translate_keypad>
 8005c76:	4a5c      	ldr	r2, [pc, #368]	; (8005de8 <keypad_sm+0x1ab0>)
 8005c78:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005c7a:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005c7c:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005c80:	4b5a      	ldr	r3, [pc, #360]	; (8005dec <keypad_sm+0x1ab4>)
			if(keypadarr[4] == '.'){
 8005c82:	4a5b      	ldr	r2, [pc, #364]	; (8005df0 <keypad_sm+0x1ab8>)
				keypaddecimal = 0;
 8005c84:	4d5b      	ldr	r5, [pc, #364]	; (8005df4 <keypad_sm+0x1abc>)
				kpenum = WAIT;
 8005c86:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005c88:	7819      	ldrb	r1, [r3, #0]
 8005c8a:	b249      	sxtb	r1, r1
 8005c8c:	2903      	cmp	r1, #3
 8005c8e:	dc1d      	bgt.n	8005ccc <keypad_sm+0x1994>
		if(keypaditerator < keypadlength-1){
 8005c90:	7819      	ldrb	r1, [r3, #0]
 8005c92:	b249      	sxtb	r1, r1
 8005c94:	2903      	cmp	r1, #3
 8005c96:	dcf7      	bgt.n	8005c88 <keypad_sm+0x1950>
			if(keypadarr[4] == '.'){
 8005c98:	7911      	ldrb	r1, [r2, #4]
 8005c9a:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005c9c:	bf08      	it	eq
 8005c9e:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005ca0:	78d1      	ldrb	r1, [r2, #3]
 8005ca2:	b2c9      	uxtb	r1, r1
 8005ca4:	7111      	strb	r1, [r2, #4]
 8005ca6:	7891      	ldrb	r1, [r2, #2]
 8005ca8:	b2c9      	uxtb	r1, r1
 8005caa:	70d1      	strb	r1, [r2, #3]
 8005cac:	7851      	ldrb	r1, [r2, #1]
 8005cae:	b2c9      	uxtb	r1, r1
 8005cb0:	7091      	strb	r1, [r2, #2]
 8005cb2:	7811      	ldrb	r1, [r2, #0]
 8005cb4:	b2c9      	uxtb	r1, r1
 8005cb6:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005cb8:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8005cbc:	7819      	ldrb	r1, [r3, #0]
 8005cbe:	3101      	adds	r1, #1
 8005cc0:	b249      	sxtb	r1, r1
 8005cc2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005cc4:	7819      	ldrb	r1, [r3, #0]
 8005cc6:	b249      	sxtb	r1, r1
 8005cc8:	2903      	cmp	r1, #3
 8005cca:	dde1      	ble.n	8005c90 <keypad_sm+0x1958>
				encmode = 0;
 8005ccc:	2300      	movs	r3, #0
				encpos = 0;
 8005cce:	4a4b      	ldr	r2, [pc, #300]	; (8005dfc <keypad_sm+0x1ac4>)
				encmode = 0;
 8005cd0:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005cd2:	7013      	strb	r3, [r2, #0]
}
 8005cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005cd6:	f7fd fde7 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005cda:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005cdc:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005cde:	f7fb f9ab 	bl	8001038 <__aeabi_fcmpge>
 8005ce2:	b158      	cbz	r0, 8005cfc <keypad_sm+0x19c4>
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	4946      	ldr	r1, [pc, #280]	; (8005e00 <keypad_sm+0x1ac8>)
 8005ce8:	f7fb f99c 	bl	8001024 <__aeabi_fcmple>
 8005cec:	b130      	cbz	r0, 8005cfc <keypad_sm+0x19c4>
					volt_set_main_old = volt_set_main;
 8005cee:	4c45      	ldr	r4, [pc, #276]	; (8005e04 <keypad_sm+0x1acc>)
 8005cf0:	4b45      	ldr	r3, [pc, #276]	; (8005e08 <keypad_sm+0x1ad0>)
 8005cf2:	6822      	ldr	r2, [r4, #0]
 8005cf4:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005cf6:	f7fd fdd7 	bl	80038a8 <translate_keypad>
 8005cfa:	6020      	str	r0, [r4, #0]
				kpenum = WAIT;
 8005cfc:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005cfe:	257a      	movs	r5, #122	; 0x7a
 8005d00:	4b3a      	ldr	r3, [pc, #232]	; (8005dec <keypad_sm+0x1ab4>)
			if(keypadarr[4] == '.'){
 8005d02:	4a3b      	ldr	r2, [pc, #236]	; (8005df0 <keypad_sm+0x1ab8>)
				keypaddecimal = 0;
 8005d04:	4c3b      	ldr	r4, [pc, #236]	; (8005df4 <keypad_sm+0x1abc>)
				kpenum = WAIT;
 8005d06:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005d08:	7819      	ldrb	r1, [r3, #0]
 8005d0a:	b249      	sxtb	r1, r1
 8005d0c:	2903      	cmp	r1, #3
 8005d0e:	f73e ab29 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005d12:	7819      	ldrb	r1, [r3, #0]
 8005d14:	b249      	sxtb	r1, r1
 8005d16:	2903      	cmp	r1, #3
 8005d18:	dcf6      	bgt.n	8005d08 <keypad_sm+0x19d0>
			if(keypadarr[4] == '.'){
 8005d1a:	7911      	ldrb	r1, [r2, #4]
 8005d1c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005d1e:	bf08      	it	eq
 8005d20:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005d22:	78d1      	ldrb	r1, [r2, #3]
 8005d24:	b2c9      	uxtb	r1, r1
 8005d26:	7111      	strb	r1, [r2, #4]
 8005d28:	7891      	ldrb	r1, [r2, #2]
 8005d2a:	b2c9      	uxtb	r1, r1
 8005d2c:	70d1      	strb	r1, [r2, #3]
 8005d2e:	7851      	ldrb	r1, [r2, #1]
 8005d30:	b2c9      	uxtb	r1, r1
 8005d32:	7091      	strb	r1, [r2, #2]
 8005d34:	7811      	ldrb	r1, [r2, #0]
 8005d36:	b2c9      	uxtb	r1, r1
 8005d38:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005d3a:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005d3c:	7819      	ldrb	r1, [r3, #0]
 8005d3e:	3101      	adds	r1, #1
 8005d40:	b249      	sxtb	r1, r1
 8005d42:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005d44:	7819      	ldrb	r1, [r3, #0]
 8005d46:	b249      	sxtb	r1, r1
 8005d48:	2903      	cmp	r1, #3
 8005d4a:	dde2      	ble.n	8005d12 <keypad_sm+0x19da>
}
 8005d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005d4e:	f7fd fdab 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d52:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005d54:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d56:	f7fb f96f 	bl	8001038 <__aeabi_fcmpge>
 8005d5a:	b140      	cbz	r0, 8005d6e <keypad_sm+0x1a36>
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	4928      	ldr	r1, [pc, #160]	; (8005e00 <keypad_sm+0x1ac8>)
 8005d60:	f7fb f960 	bl	8001024 <__aeabi_fcmple>
 8005d64:	b118      	cbz	r0, 8005d6e <keypad_sm+0x1a36>
					volt_set_aux = translate_keypad();
 8005d66:	f7fd fd9f 	bl	80038a8 <translate_keypad>
 8005d6a:	4a23      	ldr	r2, [pc, #140]	; (8005df8 <keypad_sm+0x1ac0>)
 8005d6c:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005d6e:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005d70:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005d74:	4b1d      	ldr	r3, [pc, #116]	; (8005dec <keypad_sm+0x1ab4>)
			if(keypadarr[4] == '.'){
 8005d76:	4a1e      	ldr	r2, [pc, #120]	; (8005df0 <keypad_sm+0x1ab8>)
				keypaddecimal = 0;
 8005d78:	4d1e      	ldr	r5, [pc, #120]	; (8005df4 <keypad_sm+0x1abc>)
				kpenum = WAIT;
 8005d7a:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005d7c:	7819      	ldrb	r1, [r3, #0]
 8005d7e:	b249      	sxtb	r1, r1
 8005d80:	2903      	cmp	r1, #3
 8005d82:	dc1d      	bgt.n	8005dc0 <keypad_sm+0x1a88>
		if(keypaditerator < keypadlength-1){
 8005d84:	7819      	ldrb	r1, [r3, #0]
 8005d86:	b249      	sxtb	r1, r1
 8005d88:	2903      	cmp	r1, #3
 8005d8a:	dcf7      	bgt.n	8005d7c <keypad_sm+0x1a44>
			if(keypadarr[4] == '.'){
 8005d8c:	7911      	ldrb	r1, [r2, #4]
 8005d8e:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005d90:	bf08      	it	eq
 8005d92:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005d94:	78d1      	ldrb	r1, [r2, #3]
 8005d96:	b2c9      	uxtb	r1, r1
 8005d98:	7111      	strb	r1, [r2, #4]
 8005d9a:	7891      	ldrb	r1, [r2, #2]
 8005d9c:	b2c9      	uxtb	r1, r1
 8005d9e:	70d1      	strb	r1, [r2, #3]
 8005da0:	7851      	ldrb	r1, [r2, #1]
 8005da2:	b2c9      	uxtb	r1, r1
 8005da4:	7091      	strb	r1, [r2, #2]
 8005da6:	7811      	ldrb	r1, [r2, #0]
 8005da8:	b2c9      	uxtb	r1, r1
 8005daa:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005dac:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8005db0:	7819      	ldrb	r1, [r3, #0]
 8005db2:	3101      	adds	r1, #1
 8005db4:	b249      	sxtb	r1, r1
 8005db6:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005db8:	7819      	ldrb	r1, [r3, #0]
 8005dba:	b249      	sxtb	r1, r1
 8005dbc:	2903      	cmp	r1, #3
 8005dbe:	dde1      	ble.n	8005d84 <keypad_sm+0x1a4c>
				encmode = 0;
 8005dc0:	2300      	movs	r3, #0
				encpos = 0;
 8005dc2:	4a0e      	ldr	r2, [pc, #56]	; (8005dfc <keypad_sm+0x1ac4>)
				encmode = 0;
 8005dc4:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005dc6:	7013      	strb	r3, [r2, #0]
}
 8005dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(0, volt_set_aux);
 8005dca:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <keypad_sm+0x1ac0>)
 8005dcc:	2000      	movs	r0, #0
 8005dce:	6819      	ldr	r1, [r3, #0]
 8005dd0:	f7fd ff0e 	bl	8003bf0 <fill_keypad>
				encmode = 1;
 8005dd4:	2101      	movs	r1, #1
				encpos = 0;
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	4b08      	ldr	r3, [pc, #32]	; (8005dfc <keypad_sm+0x1ac4>)
				encmode = 1;
 8005dda:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8005ddc:	701a      	strb	r2, [r3, #0]
}
 8005dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005de0:	50b0f27c 	.word	0x50b0f27c
 8005de4:	3fe99a6b 	.word	0x3fe99a6b
 8005de8:	20000394 	.word	0x20000394
 8005dec:	20000005 	.word	0x20000005
 8005df0:	20000000 	.word	0x20000000
 8005df4:	200006c4 	.word	0x200006c4
 8005df8:	20000824 	.word	0x20000824
 8005dfc:	200003ad 	.word	0x200003ad
 8005e00:	41400000 	.word	0x41400000
 8005e04:	20000828 	.word	0x20000828
 8005e08:	2000082c 	.word	0x2000082c
				kpenum = WAIT;
 8005e0c:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005e0e:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005e12:	4b9b      	ldr	r3, [pc, #620]	; (8006080 <keypad_sm+0x1d48>)
			if(keypadarr[4] == '.'){
 8005e14:	4a9b      	ldr	r2, [pc, #620]	; (8006084 <keypad_sm+0x1d4c>)
				keypaddecimal = 0;
 8005e16:	4d9c      	ldr	r5, [pc, #624]	; (8006088 <keypad_sm+0x1d50>)
				kpenum = WAIT;
 8005e18:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005e1a:	7819      	ldrb	r1, [r3, #0]
 8005e1c:	b249      	sxtb	r1, r1
 8005e1e:	2903      	cmp	r1, #3
 8005e20:	dc1d      	bgt.n	8005e5e <keypad_sm+0x1b26>
		if(keypaditerator < keypadlength-1){
 8005e22:	7819      	ldrb	r1, [r3, #0]
 8005e24:	b249      	sxtb	r1, r1
 8005e26:	2903      	cmp	r1, #3
 8005e28:	dcf7      	bgt.n	8005e1a <keypad_sm+0x1ae2>
			if(keypadarr[4] == '.'){
 8005e2a:	7911      	ldrb	r1, [r2, #4]
 8005e2c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005e2e:	bf08      	it	eq
 8005e30:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005e32:	78d1      	ldrb	r1, [r2, #3]
 8005e34:	b2c9      	uxtb	r1, r1
 8005e36:	7111      	strb	r1, [r2, #4]
 8005e38:	7891      	ldrb	r1, [r2, #2]
 8005e3a:	b2c9      	uxtb	r1, r1
 8005e3c:	70d1      	strb	r1, [r2, #3]
 8005e3e:	7851      	ldrb	r1, [r2, #1]
 8005e40:	b2c9      	uxtb	r1, r1
 8005e42:	7091      	strb	r1, [r2, #2]
 8005e44:	7811      	ldrb	r1, [r2, #0]
 8005e46:	b2c9      	uxtb	r1, r1
 8005e48:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005e4a:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8005e4e:	7819      	ldrb	r1, [r3, #0]
 8005e50:	3101      	adds	r1, #1
 8005e52:	b249      	sxtb	r1, r1
 8005e54:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005e56:	7819      	ldrb	r1, [r3, #0]
 8005e58:	b249      	sxtb	r1, r1
 8005e5a:	2903      	cmp	r1, #3
 8005e5c:	dde1      	ble.n	8005e22 <keypad_sm+0x1aea>
				encmode = 0;
 8005e5e:	2300      	movs	r3, #0
				encpos = 0;
 8005e60:	4a8a      	ldr	r2, [pc, #552]	; (800608c <keypad_sm+0x1d54>)
				encmode = 0;
 8005e62:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005e64:	7013      	strb	r3, [r2, #0]
}
 8005e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if(encpos == 1){
 8005e68:	4b88      	ldr	r3, [pc, #544]	; (800608c <keypad_sm+0x1d54>)
 8005e6a:	781a      	ldrb	r2, [r3, #0]
 8005e6c:	2a01      	cmp	r2, #1
					encpos++;
 8005e6e:	781a      	ldrb	r2, [r3, #0]
				if(encpos == 1){
 8005e70:	f000 8122 	beq.w	80060b8 <keypad_sm+0x1d80>
				else if(encpos < 4){
 8005e74:	b252      	sxtb	r2, r2
 8005e76:	2a03      	cmp	r2, #3
					encpos = 0;
 8005e78:	bfcf      	iteee	gt
 8005e7a:	2200      	movgt	r2, #0
					encpos++;
 8005e7c:	781a      	ldrble	r2, [r3, #0]
 8005e7e:	3201      	addle	r2, #1
 8005e80:	b252      	sxtble	r2, r2
					encpos = 0;
 8005e82:	701a      	strb	r2, [r3, #0]
}
 8005e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(1, amp_set_aux);
 8005e86:	4b82      	ldr	r3, [pc, #520]	; (8006090 <keypad_sm+0x1d58>)
 8005e88:	2001      	movs	r0, #1
 8005e8a:	6819      	ldr	r1, [r3, #0]
 8005e8c:	f7fd feb0 	bl	8003bf0 <fill_keypad>
				encmode = 1;
 8005e90:	2101      	movs	r1, #1
				encpos = 0;
 8005e92:	2200      	movs	r2, #0
 8005e94:	4b7d      	ldr	r3, [pc, #500]	; (800608c <keypad_sm+0x1d54>)
				encmode = 1;
 8005e96:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8005e98:	701a      	strb	r2, [r3, #0]
}
 8005e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 8005e9c:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8005e9e:	257a      	movs	r5, #122	; 0x7a
 8005ea0:	4b77      	ldr	r3, [pc, #476]	; (8006080 <keypad_sm+0x1d48>)
			if(keypadarr[4] == '.'){
 8005ea2:	4a78      	ldr	r2, [pc, #480]	; (8006084 <keypad_sm+0x1d4c>)
				keypaddecimal = 0;
 8005ea4:	4878      	ldr	r0, [pc, #480]	; (8006088 <keypad_sm+0x1d50>)
	while(keypaditerator < 4){
 8005ea6:	7819      	ldrb	r1, [r3, #0]
 8005ea8:	b249      	sxtb	r1, r1
 8005eaa:	2903      	cmp	r1, #3
 8005eac:	dc1c      	bgt.n	8005ee8 <keypad_sm+0x1bb0>
		if(keypaditerator < keypadlength-1){
 8005eae:	7819      	ldrb	r1, [r3, #0]
 8005eb0:	b249      	sxtb	r1, r1
 8005eb2:	2903      	cmp	r1, #3
 8005eb4:	dcf7      	bgt.n	8005ea6 <keypad_sm+0x1b6e>
			if(keypadarr[4] == '.'){
 8005eb6:	7911      	ldrb	r1, [r2, #4]
 8005eb8:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005eba:	bf08      	it	eq
 8005ebc:	7006      	strbeq	r6, [r0, #0]
				keypadarr[i+1] = keypadarr[i];
 8005ebe:	78d1      	ldrb	r1, [r2, #3]
 8005ec0:	b2c9      	uxtb	r1, r1
 8005ec2:	7111      	strb	r1, [r2, #4]
 8005ec4:	7891      	ldrb	r1, [r2, #2]
 8005ec6:	b2c9      	uxtb	r1, r1
 8005ec8:	70d1      	strb	r1, [r2, #3]
 8005eca:	7851      	ldrb	r1, [r2, #1]
 8005ecc:	b2c9      	uxtb	r1, r1
 8005ece:	7091      	strb	r1, [r2, #2]
 8005ed0:	7811      	ldrb	r1, [r2, #0]
 8005ed2:	b2c9      	uxtb	r1, r1
 8005ed4:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005ed6:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005ed8:	7819      	ldrb	r1, [r3, #0]
 8005eda:	3101      	adds	r1, #1
 8005edc:	b249      	sxtb	r1, r1
 8005ede:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005ee0:	7819      	ldrb	r1, [r3, #0]
 8005ee2:	b249      	sxtb	r1, r1
 8005ee4:	2903      	cmp	r1, #3
 8005ee6:	dde2      	ble.n	8005eae <keypad_sm+0x1b76>
				encmode = 0;
 8005ee8:	2300      	movs	r3, #0
				encpos = 0;
 8005eea:	4a68      	ldr	r2, [pc, #416]	; (800608c <keypad_sm+0x1d54>)
				encmode = 0;
 8005eec:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005eee:	7013      	strb	r3, [r2, #0]
}
 8005ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005ef2:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005ef4:	257a      	movs	r5, #122	; 0x7a
 8005ef6:	4b62      	ldr	r3, [pc, #392]	; (8006080 <keypad_sm+0x1d48>)
			if(keypadarr[4] == '.'){
 8005ef8:	4a62      	ldr	r2, [pc, #392]	; (8006084 <keypad_sm+0x1d4c>)
				keypaddecimal = 0;
 8005efa:	4c63      	ldr	r4, [pc, #396]	; (8006088 <keypad_sm+0x1d50>)
				kpenum = WAIT;
 8005efc:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005efe:	7819      	ldrb	r1, [r3, #0]
 8005f00:	b249      	sxtb	r1, r1
 8005f02:	2903      	cmp	r1, #3
 8005f04:	f73e aa2e 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005f08:	7819      	ldrb	r1, [r3, #0]
 8005f0a:	b249      	sxtb	r1, r1
 8005f0c:	2903      	cmp	r1, #3
 8005f0e:	dcf6      	bgt.n	8005efe <keypad_sm+0x1bc6>
			if(keypadarr[4] == '.'){
 8005f10:	7911      	ldrb	r1, [r2, #4]
 8005f12:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005f14:	bf08      	it	eq
 8005f16:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005f18:	78d1      	ldrb	r1, [r2, #3]
 8005f1a:	b2c9      	uxtb	r1, r1
 8005f1c:	7111      	strb	r1, [r2, #4]
 8005f1e:	7891      	ldrb	r1, [r2, #2]
 8005f20:	b2c9      	uxtb	r1, r1
 8005f22:	70d1      	strb	r1, [r2, #3]
 8005f24:	7851      	ldrb	r1, [r2, #1]
 8005f26:	b2c9      	uxtb	r1, r1
 8005f28:	7091      	strb	r1, [r2, #2]
 8005f2a:	7811      	ldrb	r1, [r2, #0]
 8005f2c:	b2c9      	uxtb	r1, r1
 8005f2e:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005f30:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005f32:	7819      	ldrb	r1, [r3, #0]
 8005f34:	3101      	adds	r1, #1
 8005f36:	b249      	sxtb	r1, r1
 8005f38:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005f3a:	7819      	ldrb	r1, [r3, #0]
 8005f3c:	b249      	sxtb	r1, r1
 8005f3e:	2903      	cmp	r1, #3
 8005f40:	dde2      	ble.n	8005f08 <keypad_sm+0x1bd0>
}
 8005f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005f44:	f7fd fcb0 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005f48:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005f4a:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005f4c:	f7fb f874 	bl	8001038 <__aeabi_fcmpge>
 8005f50:	b160      	cbz	r0, 8005f6c <keypad_sm+0x1c34>
 8005f52:	4628      	mov	r0, r5
 8005f54:	494f      	ldr	r1, [pc, #316]	; (8006094 <keypad_sm+0x1d5c>)
 8005f56:	f7fb f865 	bl	8001024 <__aeabi_fcmple>
 8005f5a:	b138      	cbz	r0, 8005f6c <keypad_sm+0x1c34>
					amp_set_main_old = amp_set_main;
 8005f5c:	4a4e      	ldr	r2, [pc, #312]	; (8006098 <keypad_sm+0x1d60>)
 8005f5e:	4b4f      	ldr	r3, [pc, #316]	; (800609c <keypad_sm+0x1d64>)
 8005f60:	6812      	ldr	r2, [r2, #0]
 8005f62:	601a      	str	r2, [r3, #0]
					amp_set_aux = translate_keypad();
 8005f64:	f7fd fca0 	bl	80038a8 <translate_keypad>
 8005f68:	4a49      	ldr	r2, [pc, #292]	; (8006090 <keypad_sm+0x1d58>)
 8005f6a:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005f6c:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005f6e:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005f72:	4b43      	ldr	r3, [pc, #268]	; (8006080 <keypad_sm+0x1d48>)
			if(keypadarr[4] == '.'){
 8005f74:	4a43      	ldr	r2, [pc, #268]	; (8006084 <keypad_sm+0x1d4c>)
				keypaddecimal = 0;
 8005f76:	4d44      	ldr	r5, [pc, #272]	; (8006088 <keypad_sm+0x1d50>)
				kpenum = WAIT;
 8005f78:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005f7a:	7819      	ldrb	r1, [r3, #0]
 8005f7c:	b249      	sxtb	r1, r1
 8005f7e:	2903      	cmp	r1, #3
 8005f80:	dc5d      	bgt.n	800603e <keypad_sm+0x1d06>
		if(keypaditerator < keypadlength-1){
 8005f82:	7819      	ldrb	r1, [r3, #0]
 8005f84:	b249      	sxtb	r1, r1
 8005f86:	2903      	cmp	r1, #3
 8005f88:	dcf7      	bgt.n	8005f7a <keypad_sm+0x1c42>
			if(keypadarr[4] == '.'){
 8005f8a:	7911      	ldrb	r1, [r2, #4]
 8005f8c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005f8e:	bf08      	it	eq
 8005f90:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005f92:	78d1      	ldrb	r1, [r2, #3]
 8005f94:	b2c9      	uxtb	r1, r1
 8005f96:	7111      	strb	r1, [r2, #4]
 8005f98:	7891      	ldrb	r1, [r2, #2]
 8005f9a:	b2c9      	uxtb	r1, r1
 8005f9c:	70d1      	strb	r1, [r2, #3]
 8005f9e:	7851      	ldrb	r1, [r2, #1]
 8005fa0:	b2c9      	uxtb	r1, r1
 8005fa2:	7091      	strb	r1, [r2, #2]
 8005fa4:	7811      	ldrb	r1, [r2, #0]
 8005fa6:	b2c9      	uxtb	r1, r1
 8005fa8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005faa:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8005fae:	7819      	ldrb	r1, [r3, #0]
 8005fb0:	3101      	adds	r1, #1
 8005fb2:	b249      	sxtb	r1, r1
 8005fb4:	7019      	strb	r1, [r3, #0]
 8005fb6:	e7e0      	b.n	8005f7a <keypad_sm+0x1c42>
	float temp = translate_keypad();
 8005fb8:	f7fd fc76 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005fbc:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005fbe:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005fc0:	f7fb f83a 	bl	8001038 <__aeabi_fcmpge>
 8005fc4:	b190      	cbz	r0, 8005fec <keypad_sm+0x1cb4>
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f7fa fa46 	bl	8000458 <__aeabi_f2d>
 8005fcc:	a32a      	add	r3, pc, #168	; (adr r3, 8006078 <keypad_sm+0x1d40>)
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f7fa fd15 	bl	8000a00 <__aeabi_dcmple>
 8005fd6:	b148      	cbz	r0, 8005fec <keypad_sm+0x1cb4>
					amp_set_main_old = amp_set_main;
 8005fd8:	4c2f      	ldr	r4, [pc, #188]	; (8006098 <keypad_sm+0x1d60>)
 8005fda:	4b30      	ldr	r3, [pc, #192]	; (800609c <keypad_sm+0x1d64>)
 8005fdc:	6822      	ldr	r2, [r4, #0]
 8005fde:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8005fe0:	f7fd fc62 	bl	80038a8 <translate_keypad>
 8005fe4:	6020      	str	r0, [r4, #0]
					update_ADC_watchdog(amp_set_main);
 8005fe6:	6820      	ldr	r0, [r4, #0]
 8005fe8:	f7fb fbcc 	bl	8001784 <update_ADC_watchdog>
				kpenum = WAIT;
 8005fec:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005fee:	257a      	movs	r5, #122	; 0x7a
 8005ff0:	4b23      	ldr	r3, [pc, #140]	; (8006080 <keypad_sm+0x1d48>)
			if(keypadarr[4] == '.'){
 8005ff2:	4a24      	ldr	r2, [pc, #144]	; (8006084 <keypad_sm+0x1d4c>)
				keypaddecimal = 0;
 8005ff4:	4c24      	ldr	r4, [pc, #144]	; (8006088 <keypad_sm+0x1d50>)
				kpenum = WAIT;
 8005ff6:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005ff8:	7819      	ldrb	r1, [r3, #0]
 8005ffa:	b249      	sxtb	r1, r1
 8005ffc:	2903      	cmp	r1, #3
 8005ffe:	f73e a9b1 	bgt.w	8004364 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8006002:	7819      	ldrb	r1, [r3, #0]
 8006004:	b249      	sxtb	r1, r1
 8006006:	2903      	cmp	r1, #3
 8006008:	dcf6      	bgt.n	8005ff8 <keypad_sm+0x1cc0>
			if(keypadarr[4] == '.'){
 800600a:	7911      	ldrb	r1, [r2, #4]
 800600c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800600e:	bf08      	it	eq
 8006010:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8006012:	78d1      	ldrb	r1, [r2, #3]
 8006014:	b2c9      	uxtb	r1, r1
 8006016:	7111      	strb	r1, [r2, #4]
 8006018:	7891      	ldrb	r1, [r2, #2]
 800601a:	b2c9      	uxtb	r1, r1
 800601c:	70d1      	strb	r1, [r2, #3]
 800601e:	7851      	ldrb	r1, [r2, #1]
 8006020:	b2c9      	uxtb	r1, r1
 8006022:	7091      	strb	r1, [r2, #2]
 8006024:	7811      	ldrb	r1, [r2, #0]
 8006026:	b2c9      	uxtb	r1, r1
 8006028:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800602a:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 800602c:	7819      	ldrb	r1, [r3, #0]
 800602e:	3101      	adds	r1, #1
 8006030:	b249      	sxtb	r1, r1
 8006032:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8006034:	7819      	ldrb	r1, [r3, #0]
 8006036:	b249      	sxtb	r1, r1
 8006038:	2903      	cmp	r1, #3
 800603a:	dde2      	ble.n	8006002 <keypad_sm+0x1cca>
}
 800603c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				encmode = 0;
 800603e:	2300      	movs	r3, #0
				encpos = 0;
 8006040:	4a12      	ldr	r2, [pc, #72]	; (800608c <keypad_sm+0x1d54>)
				encmode = 0;
 8006042:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8006044:	7013      	strb	r3, [r2, #0]
}
 8006046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(1, amp_set_main);
 8006048:	4b13      	ldr	r3, [pc, #76]	; (8006098 <keypad_sm+0x1d60>)
 800604a:	2001      	movs	r0, #1
 800604c:	6819      	ldr	r1, [r3, #0]
 800604e:	f7fd fdcf 	bl	8003bf0 <fill_keypad>
				encmode = 1;
 8006052:	2101      	movs	r1, #1
				encpos = 0;
 8006054:	2200      	movs	r2, #0
 8006056:	4b0d      	ldr	r3, [pc, #52]	; (800608c <keypad_sm+0x1d54>)
				encmode = 1;
 8006058:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 800605a:	701a      	strb	r2, [r3, #0]
}
 800605c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(1, amp_set_main);
 800605e:	4b0e      	ldr	r3, [pc, #56]	; (8006098 <keypad_sm+0x1d60>)
 8006060:	2001      	movs	r0, #1
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	f7fd fdc4 	bl	8003bf0 <fill_keypad>
				encmode = 1;
 8006068:	2101      	movs	r1, #1
				encpos = 0;
 800606a:	2200      	movs	r2, #0
 800606c:	4b07      	ldr	r3, [pc, #28]	; (800608c <keypad_sm+0x1d54>)
				encmode = 1;
 800606e:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8006070:	701a      	strb	r2, [r3, #0]
}
 8006072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006074:	f3af 8000 	nop.w
 8006078:	50b0f27c 	.word	0x50b0f27c
 800607c:	3fe99a6b 	.word	0x3fe99a6b
 8006080:	20000005 	.word	0x20000005
 8006084:	20000000 	.word	0x20000000
 8006088:	200006c4 	.word	0x200006c4
 800608c:	200003ad 	.word	0x200003ad
 8006090:	20000394 	.word	0x20000394
 8006094:	41400000 	.word	0x41400000
 8006098:	20000398 	.word	0x20000398
 800609c:	2000039c 	.word	0x2000039c
				if(encpos == 0){
 80060a0:	4b7d      	ldr	r3, [pc, #500]	; (8006298 <keypad_sm+0x1f60>)
 80060a2:	781a      	ldrb	r2, [r3, #0]
 80060a4:	b982      	cbnz	r2, 80060c8 <keypad_sm+0x1d90>
					encpos++;
 80060a6:	781a      	ldrb	r2, [r3, #0]
 80060a8:	3201      	adds	r2, #1
 80060aa:	b252      	sxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
					encpos++;
 80060ae:	781a      	ldrb	r2, [r3, #0]
 80060b0:	3201      	adds	r2, #1
 80060b2:	b252      	sxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]
}
 80060b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					encpos++;
 80060b8:	3201      	adds	r2, #1
 80060ba:	b252      	sxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
					encpos++;
 80060be:	781a      	ldrb	r2, [r3, #0]
 80060c0:	3201      	adds	r2, #1
 80060c2:	b252      	sxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]
}
 80060c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				else if(encpos < 4){
 80060c8:	781a      	ldrb	r2, [r3, #0]
 80060ca:	b252      	sxtb	r2, r2
 80060cc:	2a03      	cmp	r2, #3
					encpos = 0;
 80060ce:	bfcf      	iteee	gt
 80060d0:	2200      	movgt	r2, #0
					encpos++;
 80060d2:	781a      	ldrble	r2, [r3, #0]
 80060d4:	3201      	addle	r2, #1
 80060d6:	b252      	sxtble	r2, r2
					encpos = 0;
 80060d8:	701a      	strb	r2, [r3, #0]
}
 80060da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80060dc:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80060de:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 80060e2:	4b6e      	ldr	r3, [pc, #440]	; (800629c <keypad_sm+0x1f64>)
			if(keypadarr[4] == '.'){
 80060e4:	4a6e      	ldr	r2, [pc, #440]	; (80062a0 <keypad_sm+0x1f68>)
				keypaddecimal = 0;
 80060e6:	4d6f      	ldr	r5, [pc, #444]	; (80062a4 <keypad_sm+0x1f6c>)
				kpenum = WAIT;
 80060e8:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80060ea:	7819      	ldrb	r1, [r3, #0]
 80060ec:	b249      	sxtb	r1, r1
 80060ee:	2903      	cmp	r1, #3
 80060f0:	dc1d      	bgt.n	800612e <keypad_sm+0x1df6>
		if(keypaditerator < keypadlength-1){
 80060f2:	7819      	ldrb	r1, [r3, #0]
 80060f4:	b249      	sxtb	r1, r1
 80060f6:	2903      	cmp	r1, #3
 80060f8:	dcf7      	bgt.n	80060ea <keypad_sm+0x1db2>
			if(keypadarr[4] == '.'){
 80060fa:	7911      	ldrb	r1, [r2, #4]
 80060fc:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80060fe:	bf08      	it	eq
 8006100:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8006102:	78d1      	ldrb	r1, [r2, #3]
 8006104:	b2c9      	uxtb	r1, r1
 8006106:	7111      	strb	r1, [r2, #4]
 8006108:	7891      	ldrb	r1, [r2, #2]
 800610a:	b2c9      	uxtb	r1, r1
 800610c:	70d1      	strb	r1, [r2, #3]
 800610e:	7851      	ldrb	r1, [r2, #1]
 8006110:	b2c9      	uxtb	r1, r1
 8006112:	7091      	strb	r1, [r2, #2]
 8006114:	7811      	ldrb	r1, [r2, #0]
 8006116:	b2c9      	uxtb	r1, r1
 8006118:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800611a:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 800611e:	7819      	ldrb	r1, [r3, #0]
 8006120:	3101      	adds	r1, #1
 8006122:	b249      	sxtb	r1, r1
 8006124:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8006126:	7819      	ldrb	r1, [r3, #0]
 8006128:	b249      	sxtb	r1, r1
 800612a:	2903      	cmp	r1, #3
 800612c:	dde1      	ble.n	80060f2 <keypad_sm+0x1dba>
				encmode = 0;
 800612e:	2300      	movs	r3, #0
				encpos = 0;
 8006130:	4a59      	ldr	r2, [pc, #356]	; (8006298 <keypad_sm+0x1f60>)
				encmode = 0;
 8006132:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8006134:	7013      	strb	r3, [r2, #0]
}
 8006136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(0, volt_set_main);
 8006138:	4b5b      	ldr	r3, [pc, #364]	; (80062a8 <keypad_sm+0x1f70>)
 800613a:	2000      	movs	r0, #0
 800613c:	6819      	ldr	r1, [r3, #0]
 800613e:	f7fd fd57 	bl	8003bf0 <fill_keypad>
				encmode = 1;
 8006142:	2101      	movs	r1, #1
				encpos = 0;
 8006144:	2200      	movs	r2, #0
 8006146:	4b54      	ldr	r3, [pc, #336]	; (8006298 <keypad_sm+0x1f60>)
				encmode = 1;
 8006148:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 800614a:	701a      	strb	r2, [r3, #0]
}
 800614c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				dec_arr_v(encpos);
 800614e:	4b52      	ldr	r3, [pc, #328]	; (8006298 <keypad_sm+0x1f60>)
 8006150:	7818      	ldrb	r0, [r3, #0]
}
 8006152:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				dec_arr_v(encpos);
 8006156:	b240      	sxtb	r0, r0
 8006158:	f7fd bfb2 	b.w	80040c0 <dec_arr_v>
	float temp = translate_keypad();
 800615c:	f7fd fba4 	bl	80038a8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006160:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006162:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006164:	f7fa ff68 	bl	8001038 <__aeabi_fcmpge>
 8006168:	b158      	cbz	r0, 8006182 <keypad_sm+0x1e4a>
 800616a:	4628      	mov	r0, r5
 800616c:	494f      	ldr	r1, [pc, #316]	; (80062ac <keypad_sm+0x1f74>)
 800616e:	f7fa ff59 	bl	8001024 <__aeabi_fcmple>
 8006172:	b130      	cbz	r0, 8006182 <keypad_sm+0x1e4a>
					volt_set_main_old = volt_set_main;
 8006174:	4d4c      	ldr	r5, [pc, #304]	; (80062a8 <keypad_sm+0x1f70>)
 8006176:	4b4e      	ldr	r3, [pc, #312]	; (80062b0 <keypad_sm+0x1f78>)
 8006178:	682a      	ldr	r2, [r5, #0]
 800617a:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 800617c:	f7fd fb94 	bl	80038a8 <translate_keypad>
 8006180:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8006182:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8006184:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8006188:	4b44      	ldr	r3, [pc, #272]	; (800629c <keypad_sm+0x1f64>)
			if(keypadarr[4] == '.'){
 800618a:	4a45      	ldr	r2, [pc, #276]	; (80062a0 <keypad_sm+0x1f68>)
				keypaddecimal = 0;
 800618c:	4d45      	ldr	r5, [pc, #276]	; (80062a4 <keypad_sm+0x1f6c>)
				kpenum = WAIT;
 800618e:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8006190:	7819      	ldrb	r1, [r3, #0]
 8006192:	b249      	sxtb	r1, r1
 8006194:	2903      	cmp	r1, #3
 8006196:	dc1d      	bgt.n	80061d4 <keypad_sm+0x1e9c>
		if(keypaditerator < keypadlength-1){
 8006198:	7819      	ldrb	r1, [r3, #0]
 800619a:	b249      	sxtb	r1, r1
 800619c:	2903      	cmp	r1, #3
 800619e:	dcf7      	bgt.n	8006190 <keypad_sm+0x1e58>
			if(keypadarr[4] == '.'){
 80061a0:	7911      	ldrb	r1, [r2, #4]
 80061a2:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80061a4:	bf08      	it	eq
 80061a6:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80061a8:	78d1      	ldrb	r1, [r2, #3]
 80061aa:	b2c9      	uxtb	r1, r1
 80061ac:	7111      	strb	r1, [r2, #4]
 80061ae:	7891      	ldrb	r1, [r2, #2]
 80061b0:	b2c9      	uxtb	r1, r1
 80061b2:	70d1      	strb	r1, [r2, #3]
 80061b4:	7851      	ldrb	r1, [r2, #1]
 80061b6:	b2c9      	uxtb	r1, r1
 80061b8:	7091      	strb	r1, [r2, #2]
 80061ba:	7811      	ldrb	r1, [r2, #0]
 80061bc:	b2c9      	uxtb	r1, r1
 80061be:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80061c0:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 80061c4:	7819      	ldrb	r1, [r3, #0]
 80061c6:	3101      	adds	r1, #1
 80061c8:	b249      	sxtb	r1, r1
 80061ca:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80061cc:	7819      	ldrb	r1, [r3, #0]
 80061ce:	b249      	sxtb	r1, r1
 80061d0:	2903      	cmp	r1, #3
 80061d2:	dde1      	ble.n	8006198 <keypad_sm+0x1e60>
				encmode = 0;
 80061d4:	2300      	movs	r3, #0
				encpos = 0;
 80061d6:	4a30      	ldr	r2, [pc, #192]	; (8006298 <keypad_sm+0x1f60>)
				encmode = 0;
 80061d8:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80061da:	7013      	strb	r3, [r2, #0]
}
 80061dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80061de:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80061e0:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 80061e4:	4b2d      	ldr	r3, [pc, #180]	; (800629c <keypad_sm+0x1f64>)
			if(keypadarr[4] == '.'){
 80061e6:	4a2e      	ldr	r2, [pc, #184]	; (80062a0 <keypad_sm+0x1f68>)
				keypaddecimal = 0;
 80061e8:	4d2e      	ldr	r5, [pc, #184]	; (80062a4 <keypad_sm+0x1f6c>)
				kpenum = WAIT;
 80061ea:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80061ec:	7819      	ldrb	r1, [r3, #0]
 80061ee:	b249      	sxtb	r1, r1
 80061f0:	2903      	cmp	r1, #3
 80061f2:	dc1d      	bgt.n	8006230 <keypad_sm+0x1ef8>
		if(keypaditerator < keypadlength-1){
 80061f4:	7819      	ldrb	r1, [r3, #0]
 80061f6:	b249      	sxtb	r1, r1
 80061f8:	2903      	cmp	r1, #3
 80061fa:	dcf7      	bgt.n	80061ec <keypad_sm+0x1eb4>
			if(keypadarr[4] == '.'){
 80061fc:	7911      	ldrb	r1, [r2, #4]
 80061fe:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8006200:	bf08      	it	eq
 8006202:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8006204:	78d1      	ldrb	r1, [r2, #3]
 8006206:	b2c9      	uxtb	r1, r1
 8006208:	7111      	strb	r1, [r2, #4]
 800620a:	7891      	ldrb	r1, [r2, #2]
 800620c:	b2c9      	uxtb	r1, r1
 800620e:	70d1      	strb	r1, [r2, #3]
 8006210:	7851      	ldrb	r1, [r2, #1]
 8006212:	b2c9      	uxtb	r1, r1
 8006214:	7091      	strb	r1, [r2, #2]
 8006216:	7811      	ldrb	r1, [r2, #0]
 8006218:	b2c9      	uxtb	r1, r1
 800621a:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800621c:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8006220:	7819      	ldrb	r1, [r3, #0]
 8006222:	3101      	adds	r1, #1
 8006224:	b249      	sxtb	r1, r1
 8006226:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8006228:	7819      	ldrb	r1, [r3, #0]
 800622a:	b249      	sxtb	r1, r1
 800622c:	2903      	cmp	r1, #3
 800622e:	dde1      	ble.n	80061f4 <keypad_sm+0x1ebc>
				encmode = 0;
 8006230:	2300      	movs	r3, #0
				encpos = 0;
 8006232:	4a19      	ldr	r2, [pc, #100]	; (8006298 <keypad_sm+0x1f60>)
				encmode = 0;
 8006234:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8006236:	7013      	strb	r3, [r2, #0]
}
 8006238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(1, amp_set_aux);
 800623a:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <keypad_sm+0x1f7c>)
 800623c:	2001      	movs	r0, #1
 800623e:	6819      	ldr	r1, [r3, #0]
 8006240:	f7fd fcd6 	bl	8003bf0 <fill_keypad>
				encmode = 1;
 8006244:	2101      	movs	r1, #1
				encpos = 0;
 8006246:	2200      	movs	r2, #0
 8006248:	4b13      	ldr	r3, [pc, #76]	; (8006298 <keypad_sm+0x1f60>)
				encmode = 1;
 800624a:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 800624c:	701a      	strb	r2, [r3, #0]
}
 800624e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				dec_arr_a(encpos);
 8006250:	4b11      	ldr	r3, [pc, #68]	; (8006298 <keypad_sm+0x1f60>)
 8006252:	7818      	ldrb	r0, [r3, #0]
}
 8006254:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				dec_arr_a(encpos);
 8006258:	b240      	sxtb	r0, r0
 800625a:	f7fd bfcf 	b.w	80041fc <dec_arr_a>
				fill_keypad(0, volt_set_main);
 800625e:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <keypad_sm+0x1f70>)
 8006260:	2000      	movs	r0, #0
 8006262:	6819      	ldr	r1, [r3, #0]
 8006264:	f7fd fcc4 	bl	8003bf0 <fill_keypad>
				encmode = 1;
 8006268:	2101      	movs	r1, #1
				encpos = 0;
 800626a:	2200      	movs	r2, #0
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <keypad_sm+0x1f60>)
				encmode = 1;
 800626e:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8006270:	701a      	strb	r2, [r3, #0]
}
 8006272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				else if(encpos < 4){
 8006274:	781a      	ldrb	r2, [r3, #0]
 8006276:	b252      	sxtb	r2, r2
 8006278:	2a03      	cmp	r2, #3
					encpos = 0;
 800627a:	bfcf      	iteee	gt
 800627c:	2200      	movgt	r2, #0
					encpos++;
 800627e:	781a      	ldrble	r2, [r3, #0]
 8006280:	3201      	addle	r2, #1
 8006282:	b252      	sxtble	r2, r2
					encpos = 0;
 8006284:	701a      	strb	r2, [r3, #0]
}
 8006286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					encpos++;
 8006288:	3201      	adds	r2, #1
 800628a:	b252      	sxtb	r2, r2
 800628c:	701a      	strb	r2, [r3, #0]
					encpos++;
 800628e:	781a      	ldrb	r2, [r3, #0]
 8006290:	3201      	adds	r2, #1
 8006292:	b252      	sxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
}
 8006296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006298:	200003ad 	.word	0x200003ad
 800629c:	20000005 	.word	0x20000005
 80062a0:	20000000 	.word	0x20000000
 80062a4:	200006c4 	.word	0x200006c4
 80062a8:	20000828 	.word	0x20000828
 80062ac:	41400000 	.word	0x41400000
 80062b0:	2000082c 	.word	0x2000082c
 80062b4:	20000394 	.word	0x20000394

080062b8 <row_input>:
void row_input(void){
 80062b8:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062ba:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80062bc:	4e30      	ldr	r6, [pc, #192]	; (8006380 <row_input+0xc8>)
void row_input(void){
 80062be:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80062c0:	4630      	mov	r0, r6
 80062c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062c6:	e9cd 4400 	strd	r4, r4, [sp]
 80062ca:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80062ce:	9404      	str	r4, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80062d0:	f001 fe98 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 80062d4:	4630      	mov	r0, r6
 80062d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062da:	f001 fe93 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80062de:	4630      	mov	r0, r6
 80062e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80062e4:	4d27      	ldr	r5, [pc, #156]	; (8006384 <row_input+0xcc>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80062e6:	f001 fe8d 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 80062ea:	4630      	mov	r0, r6
 80062ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062f0:	f001 fe88 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 80062f4:	4630      	mov	r0, r6
 80062f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062fa:	f001 fe83 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80062fe:	4628      	mov	r0, r5
 8006300:	2140      	movs	r1, #64	; 0x40
 8006302:	f001 fe7f 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 8006306:	4628      	mov	r0, r5
 8006308:	2180      	movs	r1, #128	; 0x80
 800630a:	f001 fe7b 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 800630e:	4628      	mov	r0, r5
 8006310:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006314:	f001 fe76 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 8006318:	4628      	mov	r0, r5
 800631a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800631e:	f001 fe71 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8006322:	4622      	mov	r2, r4
 8006324:	4628      	mov	r0, r5
 8006326:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800632a:	f001 ff03 	bl	8008134 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 800632e:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8006332:	2301      	movs	r3, #1
 8006334:	e9cd 2300 	strd	r2, r3, [sp]
 8006338:	2200      	movs	r2, #0
 800633a:	2300      	movs	r3, #0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800633c:	4669      	mov	r1, sp
 800633e:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8006340:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8006344:	f001 fd74 	bl	8007e30 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8006348:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 800634c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006350:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006354:	2301      	movs	r3, #1
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8006356:	4669      	mov	r1, sp
 8006358:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800635a:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 800635c:	f001 fd68 	bl	8007e30 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8006360:	4622      	mov	r2, r4
 8006362:	4628      	mov	r0, r5
 8006364:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8006368:	f001 fee4 	bl	8008134 <HAL_GPIO_WritePin>
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 7, 0);
 800636c:	4622      	mov	r2, r4
 800636e:	2107      	movs	r1, #7
 8006370:	2028      	movs	r0, #40	; 0x28
 8006372:	f001 faab 	bl	80078cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Row_1_EXTI_IRQn);
 8006376:	2028      	movs	r0, #40	; 0x28
 8006378:	f001 fae6 	bl	8007948 <HAL_NVIC_EnableIRQ>
}
 800637c:	b006      	add	sp, #24
 800637e:	bd70      	pop	{r4, r5, r6, pc}
 8006380:	40020400 	.word	0x40020400
 8006384:	40020800 	.word	0x40020800

08006388 <column_input>:
void column_input(void){
 8006388:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800638a:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 800638c:	4d2d      	ldr	r5, [pc, #180]	; (8006444 <column_input+0xbc>)
void column_input(void){
 800638e:	b086      	sub	sp, #24
	HAL_NVIC_DisableIRQ(Row_1_EXTI_IRQn);
 8006390:	2028      	movs	r0, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006392:	e9cd 4400 	strd	r4, r4, [sp]
 8006396:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800639a:	9404      	str	r4, [sp, #16]
	HAL_NVIC_DisableIRQ(Row_1_EXTI_IRQn);
 800639c:	f001 fae2 	bl	8007964 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80063a0:	4628      	mov	r0, r5
 80063a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063a6:	f001 fe2d 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 80063aa:	4628      	mov	r0, r5
 80063ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063b0:	f001 fe28 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80063b4:	4628      	mov	r0, r5
 80063b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80063ba:	4e23      	ldr	r6, [pc, #140]	; (8006448 <column_input+0xc0>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80063bc:	f001 fe22 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 80063c0:	4628      	mov	r0, r5
 80063c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063c6:	f001 fe1d 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 80063ca:	4628      	mov	r0, r5
 80063cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80063d0:	f001 fe18 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80063d4:	4630      	mov	r0, r6
 80063d6:	2140      	movs	r1, #64	; 0x40
 80063d8:	f001 fe14 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 80063dc:	4630      	mov	r0, r6
 80063de:	2180      	movs	r1, #128	; 0x80
 80063e0:	f001 fe10 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 80063e4:	4630      	mov	r0, r6
 80063e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063ea:	f001 fe0b 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 80063ee:	4630      	mov	r0, r6
 80063f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063f4:	f001 fe06 	bl	8008004 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 80063f8:	4622      	mov	r2, r4
 80063fa:	4628      	mov	r0, r5
 80063fc:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8006400:	f001 fe98 	bl	8008134 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8006404:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 8006408:	2301      	movs	r3, #1
 800640a:	e9cd 2300 	strd	r2, r3, [sp]
 800640e:	2200      	movs	r2, #0
 8006410:	2300      	movs	r3, #0
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8006412:	4628      	mov	r0, r5
 8006414:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8006416:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 800641a:	f001 fd09 	bl	8007e30 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800641e:	2001      	movs	r0, #1
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8006420:	2300      	movs	r3, #0
 8006422:	f44f 7270 	mov.w	r2, #960	; 0x3c0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8006426:	4669      	mov	r1, sp
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006428:	9002      	str	r0, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800642a:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 800642c:	e9cd 2300 	strd	r2, r3, [sp]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8006430:	f001 fcfe 	bl	8007e30 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 8006434:	4622      	mov	r2, r4
 8006436:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 800643a:	4630      	mov	r0, r6
 800643c:	f001 fe7a 	bl	8008134 <HAL_GPIO_WritePin>
}
 8006440:	b006      	add	sp, #24
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	40020400 	.word	0x40020400
 8006448:	40020800 	.word	0x40020800

0800644c <HAL_GPIO_EXTI_Callback>:
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 800644c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4604      	mov	r4, r0
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 8006454:	d010      	beq.n	8006478 <HAL_GPIO_EXTI_Callback+0x2c>
 8006456:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800645a:	d00d      	beq.n	8006478 <HAL_GPIO_EXTI_Callback+0x2c>
 800645c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006460:	d00a      	beq.n	8006478 <HAL_GPIO_EXTI_Callback+0x2c>
 8006462:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8006466:	d007      	beq.n	8006478 <HAL_GPIO_EXTI_Callback+0x2c>
 8006468:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800646c:	d004      	beq.n	8006478 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == Rot_SW_Pin){
 800646e:	2804      	cmp	r0, #4
 8006470:	d036      	beq.n	80064e0 <HAL_GPIO_EXTI_Callback+0x94>
	else if(GPIO_Pin == Rot_CLK_Pin){
 8006472:	2801      	cmp	r0, #1
 8006474:	d019      	beq.n	80064aa <HAL_GPIO_EXTI_Callback+0x5e>
}
 8006476:	bd38      	pop	{r3, r4, r5, pc}
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, GPIO_Pin) == 0){
 8006478:	4621      	mov	r1, r4
 800647a:	4825      	ldr	r0, [pc, #148]	; (8006510 <HAL_GPIO_EXTI_Callback+0xc4>)
 800647c:	f001 fe54 	bl	8008128 <HAL_GPIO_ReadPin>
 8006480:	4603      	mov	r3, r0
 8006482:	b130      	cbz	r0, 8006492 <HAL_GPIO_EXTI_Callback+0x46>
			if(kpedge != 1){
 8006484:	4b23      	ldr	r3, [pc, #140]	; (8006514 <HAL_GPIO_EXTI_Callback+0xc8>)
 8006486:	781a      	ldrb	r2, [r3, #0]
 8006488:	2a01      	cmp	r2, #1
 800648a:	d0f4      	beq.n	8006476 <HAL_GPIO_EXTI_Callback+0x2a>
				swedge = 1;
 800648c:	2201      	movs	r2, #1
 800648e:	701a      	strb	r2, [r3, #0]
}
 8006490:	bd38      	pop	{r3, r4, r5, pc}
			if(kpedge != 0){
 8006492:	4a20      	ldr	r2, [pc, #128]	; (8006514 <HAL_GPIO_EXTI_Callback+0xc8>)
 8006494:	7811      	ldrb	r1, [r2, #0]
 8006496:	2900      	cmp	r1, #0
 8006498:	d0ed      	beq.n	8006476 <HAL_GPIO_EXTI_Callback+0x2a>
				rowpin = GPIO_Pin;
 800649a:	491f      	ldr	r1, [pc, #124]	; (8006518 <HAL_GPIO_EXTI_Callback+0xcc>)
				kpedge = 0;
 800649c:	7013      	strb	r3, [r2, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 800649e:	481f      	ldr	r0, [pc, #124]	; (800651c <HAL_GPIO_EXTI_Callback+0xd0>)
				rowpin = GPIO_Pin;
 80064a0:	600c      	str	r4, [r1, #0]
}
 80064a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_TIM_Base_Start_IT(&htim2);
 80064a6:	f003 bc09 	b.w	8009cbc <HAL_TIM_Base_Start_IT>
		if (rotenum == NOTURN) {
 80064aa:	4d1d      	ldr	r5, [pc, #116]	; (8006520 <HAL_GPIO_EXTI_Callback+0xd4>)
 80064ac:	782b      	ldrb	r3, [r5, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e1      	bne.n	8006476 <HAL_GPIO_EXTI_Callback+0x2a>
			HAL_NVIC_DisableIRQ(Rot_CLK_EXTI_IRQn);
 80064b2:	2006      	movs	r0, #6
 80064b4:	f001 fa56 	bl	8007964 <HAL_NVIC_DisableIRQ>
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 80064b8:	4621      	mov	r1, r4
 80064ba:	4815      	ldr	r0, [pc, #84]	; (8006510 <HAL_GPIO_EXTI_Callback+0xc4>)
 80064bc:	f001 fe34 	bl	8008128 <HAL_GPIO_ReadPin>
 80064c0:	2102      	movs	r1, #2
 80064c2:	4604      	mov	r4, r0
 80064c4:	4812      	ldr	r0, [pc, #72]	; (8006510 <HAL_GPIO_EXTI_Callback+0xc4>)
 80064c6:	f001 fe2f 	bl	8008128 <HAL_GPIO_ReadPin>
 80064ca:	4603      	mov	r3, r0
 80064cc:	429c      	cmp	r4, r3
 80064ce:	bf0c      	ite	eq
 80064d0:	2401      	moveq	r4, #1
 80064d2:	2402      	movne	r4, #2
			HAL_TIM_Base_Start_IT(&htim10);
 80064d4:	4813      	ldr	r0, [pc, #76]	; (8006524 <HAL_GPIO_EXTI_Callback+0xd8>)
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 80064d6:	702c      	strb	r4, [r5, #0]
}
 80064d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_TIM_Base_Start_IT(&htim10);
 80064dc:	f003 bbee 	b.w	8009cbc <HAL_TIM_Base_Start_IT>
		if(HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin) == 0){
 80064e0:	4601      	mov	r1, r0
 80064e2:	480b      	ldr	r0, [pc, #44]	; (8006510 <HAL_GPIO_EXTI_Callback+0xc4>)
 80064e4:	f001 fe20 	bl	8008128 <HAL_GPIO_ReadPin>
 80064e8:	4603      	mov	r3, r0
 80064ea:	b960      	cbnz	r0, 8006506 <HAL_GPIO_EXTI_Callback+0xba>
			if(swedge != 0){
 80064ec:	4a0e      	ldr	r2, [pc, #56]	; (8006528 <HAL_GPIO_EXTI_Callback+0xdc>)
 80064ee:	7811      	ldrb	r1, [r2, #0]
 80064f0:	2900      	cmp	r1, #0
 80064f2:	d0c0      	beq.n	8006476 <HAL_GPIO_EXTI_Callback+0x2a>
				HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 80064f4:	2008      	movs	r0, #8
				swedge = 0;
 80064f6:	7013      	strb	r3, [r2, #0]
				HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 80064f8:	f001 fa34 	bl	8007964 <HAL_NVIC_DisableIRQ>
}
 80064fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_TIM_Base_Start_IT(&htim9);
 8006500:	480a      	ldr	r0, [pc, #40]	; (800652c <HAL_GPIO_EXTI_Callback+0xe0>)
 8006502:	f003 bbdb 	b.w	8009cbc <HAL_TIM_Base_Start_IT>
			if(swedge != 1){
 8006506:	4b08      	ldr	r3, [pc, #32]	; (8006528 <HAL_GPIO_EXTI_Callback+0xdc>)
 8006508:	781a      	ldrb	r2, [r3, #0]
 800650a:	2a01      	cmp	r2, #1
 800650c:	d1be      	bne.n	800648c <HAL_GPIO_EXTI_Callback+0x40>
}
 800650e:	bd38      	pop	{r3, r4, r5, pc}
 8006510:	40020400 	.word	0x40020400
 8006514:	20000006 	.word	0x20000006
 8006518:	20000008 	.word	0x20000008
 800651c:	200005c0 	.word	0x200005c0
 8006520:	200006d4 	.word	0x200006d4
 8006524:	20000540 	.word	0x20000540
 8006528:	2000000c 	.word	0x2000000c
 800652c:	20000640 	.word	0x20000640

08006530 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim2){
 8006530:	4b6d      	ldr	r3, [pc, #436]	; (80066e8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
{
 8006532:	b570      	push	{r4, r5, r6, lr}
	if(htim == &htim2){
 8006534:	4298      	cmp	r0, r3
 8006536:	d022      	beq.n	800657e <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if(htim == &htim3){
 8006538:	4b6c      	ldr	r3, [pc, #432]	; (80066ec <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800653a:	4604      	mov	r4, r0
 800653c:	4298      	cmp	r0, r3
 800653e:	d034      	beq.n	80065aa <HAL_TIM_PeriodElapsedCallback+0x7a>
	else if(htim == &htim9){
 8006540:	4b6b      	ldr	r3, [pc, #428]	; (80066f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8006542:	4298      	cmp	r0, r3
 8006544:	d03a      	beq.n	80065bc <HAL_TIM_PeriodElapsedCallback+0x8c>
	else if(htim == &htim10){
 8006546:	4b6b      	ldr	r3, [pc, #428]	; (80066f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8006548:	4298      	cmp	r0, r3
 800654a:	d003      	beq.n	8006554 <HAL_TIM_PeriodElapsedCallback+0x24>
	else if(htim == &htim11){
 800654c:	4b6a      	ldr	r3, [pc, #424]	; (80066f8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800654e:	4298      	cmp	r0, r3
 8006550:	d043      	beq.n	80065da <HAL_TIM_PeriodElapsedCallback+0xaa>
}
 8006552:	bd70      	pop	{r4, r5, r6, pc}
		if(rotenum == CWTURN){
 8006554:	4c69      	ldr	r4, [pc, #420]	; (80066fc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
		HAL_TIM_Base_Stop_IT(&htim10);
 8006556:	f003 fbdd 	bl	8009d14 <HAL_TIM_Base_Stop_IT>
		if(rotenum == CWTURN){
 800655a:	7823      	ldrb	r3, [r4, #0]
 800655c:	2b01      	cmp	r3, #1
 800655e:	f000 8091 	beq.w	8006684 <HAL_TIM_PeriodElapsedCallback+0x154>
		else if(rotenum == CCWTURN){
 8006562:	2b02      	cmp	r3, #2
 8006564:	f000 809b 	beq.w	800669e <HAL_TIM_PeriodElapsedCallback+0x16e>
		rotenum = NOTURN;
 8006568:	2200      	movs	r2, #0
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 11, 0);
 800656a:	2006      	movs	r0, #6
 800656c:	210b      	movs	r1, #11
		rotenum = NOTURN;
 800656e:	7022      	strb	r2, [r4, #0]
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 11, 0);
 8006570:	f001 f9ac 	bl	80078cc <HAL_NVIC_SetPriority>
}
 8006574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_NVIC_EnableIRQ(Rot_CLK_EXTI_IRQn);
 8006578:	2006      	movs	r0, #6
 800657a:	f001 b9e5 	b.w	8007948 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim2);
 800657e:	f003 fbc9 	bl	8009d14 <HAL_TIM_Base_Stop_IT>
		for(int i = 0; i < 4; i++){
 8006582:	2400      	movs	r4, #0
		column_input();
 8006584:	f7ff ff00 	bl	8006388 <column_input>
		for(int i = 0; i < 4; i++){
 8006588:	4e5d      	ldr	r6, [pc, #372]	; (8006700 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800658a:	4d5e      	ldr	r5, [pc, #376]	; (8006704 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
			if(HAL_GPIO_ReadPin(col_ports[i], col_pins[i]) == 0){
 800658c:	f835 1b02 	ldrh.w	r1, [r5], #2
 8006590:	f856 0b04 	ldr.w	r0, [r6], #4
 8006594:	f001 fdc8 	bl	8008128 <HAL_GPIO_ReadPin>
 8006598:	2800      	cmp	r0, #0
 800659a:	d052      	beq.n	8006642 <HAL_TIM_PeriodElapsedCallback+0x112>
		for(int i = 0; i < 4; i++){
 800659c:	3401      	adds	r4, #1
 800659e:	2c04      	cmp	r4, #4
 80065a0:	d1f4      	bne.n	800658c <HAL_TIM_PeriodElapsedCallback+0x5c>
}
 80065a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		row_input();
 80065a6:	f7ff be87 	b.w	80062b8 <row_input>
		HAL_TIM_Base_Stop_IT(&htim3);
 80065aa:	f003 fbb3 	bl	8009d14 <HAL_TIM_Base_Stop_IT>
		lcd_psu_update();
 80065ae:	f7fc fc77 	bl	8002ea0 <lcd_psu_update>
		HAL_TIM_Base_Start_IT(&htim3);
 80065b2:	4620      	mov	r0, r4
}
 80065b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(&htim3);
 80065b8:	f003 bb80 	b.w	8009cbc <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim9);
 80065bc:	f003 fbaa 	bl	8009d14 <HAL_TIM_Base_Stop_IT>
		keypad_sm('s');//s for switch
 80065c0:	2073      	movs	r0, #115	; 0x73
 80065c2:	f7fd feb9 	bl	8004338 <keypad_sm>
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 9, 0);
 80065c6:	2008      	movs	r0, #8
 80065c8:	2200      	movs	r2, #0
 80065ca:	2109      	movs	r1, #9
 80065cc:	f001 f97e 	bl	80078cc <HAL_NVIC_SetPriority>
}
 80065d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_NVIC_EnableIRQ(Rot_SW_EXTI_IRQn);
 80065d4:	2008      	movs	r0, #8
 80065d6:	f001 b9b7 	b.w	8007948 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim11);
 80065da:	f003 fb9b 	bl	8009d14 <HAL_TIM_Base_Stop_IT>
		if(chstat_main == 0){
 80065de:	4b4a      	ldr	r3, [pc, #296]	; (8006708 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	b1b2      	cbz	r2, 8006612 <HAL_TIM_PeriodElapsedCallback+0xe2>
		else if(chstat_main == 1){
 80065e4:	7819      	ldrb	r1, [r3, #0]
 80065e6:	2901      	cmp	r1, #1
 80065e8:	b24a      	sxtb	r2, r1
 80065ea:	d04f      	beq.n	800668c <HAL_TIM_PeriodElapsedCallback+0x15c>
		else if(chstat_main == 2){
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d059      	beq.n	80066a6 <HAL_TIM_PeriodElapsedCallback+0x176>
		if(chstat_aux_rx == 0){
 80065f2:	4b46      	ldr	r3, [pc, #280]	; (800670c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80065f4:	7819      	ldrb	r1, [r3, #0]
 80065f6:	b24a      	sxtb	r2, r1
 80065f8:	b1f1      	cbz	r1, 8006638 <HAL_TIM_PeriodElapsedCallback+0x108>
		else if(chstat_aux_rx == 1){
 80065fa:	7819      	ldrb	r1, [r3, #0]
 80065fc:	2901      	cmp	r1, #1
 80065fe:	b24a      	sxtb	r2, r1
 8006600:	d01a      	beq.n	8006638 <HAL_TIM_PeriodElapsedCallback+0x108>
		else if(chstat_aux_rx == 2){
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d05e      	beq.n	80066c6 <HAL_TIM_PeriodElapsedCallback+0x196>
}
 8006608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(&htim11);
 800660c:	483a      	ldr	r0, [pc, #232]	; (80066f8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800660e:	f003 bb55 	b.w	8009cbc <HAL_TIM_Base_Start_IT>
			if(!timercounter){
 8006612:	4c3f      	ldr	r4, [pc, #252]	; (8006710 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8006614:	7823      	ldrb	r3, [r4, #0]
 8006616:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800661a:	2b00      	cmp	r3, #0
 800661c:	d03a      	beq.n	8006694 <HAL_TIM_PeriodElapsedCallback+0x164>
			timercounter++;
 800661e:	7823      	ldrb	r3, [r4, #0]
			blink = 0;
 8006620:	2200      	movs	r2, #0
			timercounter++;
 8006622:	3301      	adds	r3, #1
 8006624:	b2db      	uxtb	r3, r3
 8006626:	7023      	strb	r3, [r4, #0]
			if(timercounter >= 7){
 8006628:	7823      	ldrb	r3, [r4, #0]
 800662a:	2b06      	cmp	r3, #6
				timercounter = 0;
 800662c:	bf84      	itt	hi
 800662e:	2300      	movhi	r3, #0
 8006630:	7023      	strbhi	r3, [r4, #0]
			blink = 0;
 8006632:	4b38      	ldr	r3, [pc, #224]	; (8006714 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	e7dc      	b.n	80065f2 <HAL_TIM_PeriodElapsedCallback+0xc2>
			HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_SET);
 8006638:	2110      	movs	r1, #16
 800663a:	4837      	ldr	r0, [pc, #220]	; (8006718 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800663c:	f001 fd7a 	bl	8008134 <HAL_GPIO_WritePin>
 8006640:	e7e2      	b.n	8006608 <HAL_TIM_PeriodElapsedCallback+0xd8>
					if(rowpin == row_pins[j]){
 8006642:	4d36      	ldr	r5, [pc, #216]	; (800671c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664a:	d011      	beq.n	8006670 <HAL_TIM_PeriodElapsedCallback+0x140>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006652:	d042      	beq.n	80066da <HAL_TIM_PeriodElapsedCallback+0x1aa>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665a:	d042      	beq.n	80066e2 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006662:	d03c      	beq.n	80066de <HAL_TIM_PeriodElapsedCallback+0x1ae>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
				for(int j = 0; j < 5; j++){
 800666a:	bf08      	it	eq
 800666c:	2004      	moveq	r0, #4
					if(rowpin == row_pins[j]){
 800666e:	d198      	bne.n	80065a2 <HAL_TIM_PeriodElapsedCallback+0x72>
						keypad_sm(keypad_labels[j][i]);
 8006670:	4b2b      	ldr	r3, [pc, #172]	; (8006720 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8006672:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006676:	5d00      	ldrb	r0, [r0, r4]
 8006678:	f7fd fe5e 	bl	8004338 <keypad_sm>
						rowpin = -1;
 800667c:	f04f 33ff 	mov.w	r3, #4294967295
 8006680:	602b      	str	r3, [r5, #0]
						break;
 8006682:	e78e      	b.n	80065a2 <HAL_TIM_PeriodElapsedCallback+0x72>
			keypad_sm(']');//right bracket for CW
 8006684:	205d      	movs	r0, #93	; 0x5d
 8006686:	f7fd fe57 	bl	8004338 <keypad_sm>
 800668a:	e76d      	b.n	8006568 <HAL_TIM_PeriodElapsedCallback+0x38>
			if(!timercounter){
 800668c:	4c20      	ldr	r4, [pc, #128]	; (8006710 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800668e:	7823      	ldrb	r3, [r4, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1c4      	bne.n	800661e <HAL_TIM_PeriodElapsedCallback+0xee>
				HAL_GPIO_WritePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_SET);
 8006694:	2120      	movs	r1, #32
 8006696:	4820      	ldr	r0, [pc, #128]	; (8006718 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8006698:	f001 fd4c 	bl	8008134 <HAL_GPIO_WritePin>
 800669c:	e7bf      	b.n	800661e <HAL_TIM_PeriodElapsedCallback+0xee>
			keypad_sm('[');//left bracket for CCW
 800669e:	205b      	movs	r0, #91	; 0x5b
 80066a0:	f7fd fe4a 	bl	8004338 <keypad_sm>
 80066a4:	e760      	b.n	8006568 <HAL_TIM_PeriodElapsedCallback+0x38>
			if(blink){
 80066a6:	4c1b      	ldr	r4, [pc, #108]	; (8006714 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80066a8:	7823      	ldrb	r3, [r4, #0]
 80066aa:	b98b      	cbnz	r3, 80066d0 <HAL_TIM_PeriodElapsedCallback+0x1a0>
			timercounter++;
 80066ac:	4a18      	ldr	r2, [pc, #96]	; (8006710 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80066ae:	7813      	ldrb	r3, [r2, #0]
 80066b0:	3301      	adds	r3, #1
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	7013      	strb	r3, [r2, #0]
			if(timercounter >= 7){
 80066b6:	7813      	ldrb	r3, [r2, #0]
 80066b8:	2b06      	cmp	r3, #6
 80066ba:	d99a      	bls.n	80065f2 <HAL_TIM_PeriodElapsedCallback+0xc2>
				timercounter = 0;
 80066bc:	2100      	movs	r1, #0
				blink = 1;
 80066be:	2301      	movs	r3, #1
				timercounter = 0;
 80066c0:	7011      	strb	r1, [r2, #0]
				blink = 1;
 80066c2:	7023      	strb	r3, [r4, #0]
 80066c4:	e795      	b.n	80065f2 <HAL_TIM_PeriodElapsedCallback+0xc2>
			HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 80066c6:	2110      	movs	r1, #16
 80066c8:	4813      	ldr	r0, [pc, #76]	; (8006718 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80066ca:	f001 fd37 	bl	800813c <HAL_GPIO_TogglePin>
 80066ce:	e79b      	b.n	8006608 <HAL_TIM_PeriodElapsedCallback+0xd8>
				HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 80066d0:	2120      	movs	r1, #32
 80066d2:	4811      	ldr	r0, [pc, #68]	; (8006718 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80066d4:	f001 fd32 	bl	800813c <HAL_GPIO_TogglePin>
 80066d8:	e7e8      	b.n	80066ac <HAL_TIM_PeriodElapsedCallback+0x17c>
				for(int j = 0; j < 5; j++){
 80066da:	2001      	movs	r0, #1
 80066dc:	e7c8      	b.n	8006670 <HAL_TIM_PeriodElapsedCallback+0x140>
 80066de:	2003      	movs	r0, #3
 80066e0:	e7c6      	b.n	8006670 <HAL_TIM_PeriodElapsedCallback+0x140>
 80066e2:	2002      	movs	r0, #2
 80066e4:	e7c4      	b.n	8006670 <HAL_TIM_PeriodElapsedCallback+0x140>
 80066e6:	bf00      	nop
 80066e8:	200005c0 	.word	0x200005c0
 80066ec:	20000600 	.word	0x20000600
 80066f0:	20000640 	.word	0x20000640
 80066f4:	20000540 	.word	0x20000540
 80066f8:	20000580 	.word	0x20000580
 80066fc:	200006d4 	.word	0x200006d4
 8006700:	0800f274 	.word	0x0800f274
 8006704:	0800f26c 	.word	0x0800f26c
 8006708:	200003a3 	.word	0x200003a3
 800670c:	200003a1 	.word	0x200003a1
 8006710:	2000071c 	.word	0x2000071c
 8006714:	200003a0 	.word	0x200003a0
 8006718:	40020800 	.word	0x40020800
 800671c:	20000008 	.word	0x20000008
 8006720:	0800f2c4 	.word	0x0800f2c4

08006724 <HAL_ADC_ConvHalfCpltCallback>:
	adc_values_cpy[0] = adc_values[0];
 8006724:	4a05      	ldr	r2, [pc, #20]	; (800673c <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8006728:	8811      	ldrh	r1, [r2, #0]
 800672a:	b289      	uxth	r1, r1
 800672c:	8019      	strh	r1, [r3, #0]
	adc_values_cpy[1] = adc_values[1];
 800672e:	8851      	ldrh	r1, [r2, #2]
 8006730:	b289      	uxth	r1, r1
 8006732:	8059      	strh	r1, [r3, #2]
	adc_values_cpy[2] = adc_values[2];
 8006734:	8892      	ldrh	r2, [r2, #4]
 8006736:	b292      	uxth	r2, r2
 8006738:	809a      	strh	r2, [r3, #4]
}
 800673a:	4770      	bx	lr
 800673c:	2000037c 	.word	0x2000037c
 8006740:	20000388 	.word	0x20000388

08006744 <HAL_ADC_ConvCpltCallback>:
	adc_values_cpy[3] = adc_values[3];
 8006744:	4a05      	ldr	r2, [pc, #20]	; (800675c <HAL_ADC_ConvCpltCallback+0x18>)
 8006746:	4b06      	ldr	r3, [pc, #24]	; (8006760 <HAL_ADC_ConvCpltCallback+0x1c>)
 8006748:	88d1      	ldrh	r1, [r2, #6]
 800674a:	b289      	uxth	r1, r1
 800674c:	80d9      	strh	r1, [r3, #6]
	adc_values_cpy[4] = adc_values[4];
 800674e:	8911      	ldrh	r1, [r2, #8]
 8006750:	b289      	uxth	r1, r1
 8006752:	8119      	strh	r1, [r3, #8]
	adc_values_cpy[5] = adc_values[5];
 8006754:	8952      	ldrh	r2, [r2, #10]
 8006756:	b292      	uxth	r2, r2
 8006758:	815a      	strh	r2, [r3, #10]
}
 800675a:	4770      	bx	lr
 800675c:	2000037c 	.word	0x2000037c
 8006760:	20000388 	.word	0x20000388

08006764 <HAL_ADC_LevelOutOfWindowCallback>:
{
 8006764:	b510      	push	{r4, lr}
	if(chstat_main == 1){
 8006766:	4c06      	ldr	r4, [pc, #24]	; (8006780 <HAL_ADC_LevelOutOfWindowCallback+0x1c>)
 8006768:	7823      	ldrb	r3, [r4, #0]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d000      	beq.n	8006770 <HAL_ADC_LevelOutOfWindowCallback+0xc>
}
 800676e:	bd10      	pop	{r4, pc}
 8006770:	b25a      	sxtb	r2, r3
		HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8006772:	2140      	movs	r1, #64	; 0x40
 8006774:	4803      	ldr	r0, [pc, #12]	; (8006784 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 8006776:	f001 fcdd 	bl	8008134 <HAL_GPIO_WritePin>
		chstat_main = 2;
 800677a:	2302      	movs	r3, #2
 800677c:	7023      	strb	r3, [r4, #0]
}
 800677e:	bd10      	pop	{r4, pc}
 8006780:	200003a3 	.word	0x200003a3
 8006784:	40020000 	.word	0x40020000

08006788 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	4e84      	ldr	r6, [pc, #528]	; (80069a0 <HAL_UART_RxCpltCallback+0x218>)
	for(int i = 0; i < 64; i++){
 800678e:	2400      	movs	r4, #0
 8006790:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006792:	b089      	sub	sp, #36	; 0x24
 8006794:	e003      	b.n	800679e <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 8006796:	3401      	adds	r4, #1
 8006798:	2c40      	cmp	r4, #64	; 0x40
 800679a:	f000 80fd 	beq.w	8006998 <HAL_UART_RxCpltCallback+0x210>
		if(rxbuffer[i] == '*'){
 800679e:	f813 5b01 	ldrb.w	r5, [r3], #1
 80067a2:	2d2a      	cmp	r5, #42	; 0x2a
 80067a4:	d1f7      	bne.n	8006796 <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 80067a6:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 80067a8:	2220      	movs	r2, #32
 80067aa:	2100      	movs	r1, #0
 80067ac:	4668      	mov	r0, sp
 80067ae:	f005 fe25 	bl	800c3fc <memset>
	for(int i = 0; i < 25; i++){
 80067b2:	f10d 33ff 	add.w	r3, sp, #4294967295
 80067b6:	aa06      	add	r2, sp, #24
 80067b8:	e000      	b.n	80067bc <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 80067ba:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 80067bc:	3401      	adds	r4, #1
 80067be:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 80067c0:	2c40      	cmp	r4, #64	; 0x40
		rxbuffercpy[i] = rxbuffer[rxiter];
 80067c2:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 80067c6:	bf28      	it	cs
 80067c8:	2400      	movcs	r4, #0
	for(int i = 0; i < 25; i++){
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d1f5      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x32>
	if( //Check start condition
 80067ce:	f89d 3000 	ldrb.w	r3, [sp]
 80067d2:	2b2a      	cmp	r3, #42	; 0x2a
 80067d4:	d00c      	beq.n	80067f0 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 80067d6:	2240      	movs	r2, #64	; 0x40
 80067d8:	2100      	movs	r1, #0
 80067da:	4871      	ldr	r0, [pc, #452]	; (80069a0 <HAL_UART_RxCpltCallback+0x218>)
 80067dc:	f005 fe0e 	bl	800c3fc <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 80067e0:	2240      	movs	r2, #64	; 0x40
 80067e2:	496f      	ldr	r1, [pc, #444]	; (80069a0 <HAL_UART_RxCpltCallback+0x218>)
 80067e4:	486f      	ldr	r0, [pc, #444]	; (80069a4 <HAL_UART_RxCpltCallback+0x21c>)
}
 80067e6:	b009      	add	sp, #36	; 0x24
 80067e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 80067ec:	f003 bcda 	b.w	800a1a4 <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 80067f0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80067f4:	2b53      	cmp	r3, #83	; 0x53
 80067f6:	d1ee      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
 80067f8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80067fc:	2b54      	cmp	r3, #84	; 0x54
 80067fe:	d1ea      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
 8006800:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006804:	2b52      	cmp	r3, #82	; 0x52
 8006806:	d1e6      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
 8006808:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800680c:	2b54      	cmp	r3, #84	; 0x54
 800680e:	d1e2      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
 8006810:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006814:	2b46      	cmp	r3, #70	; 0x46
 8006816:	d1de      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 8006818:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800681c:	2b4e      	cmp	r3, #78	; 0x4e
 800681e:	d1da      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
 8006820:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006824:	2b53      	cmp	r3, #83	; 0x53
 8006826:	d1d6      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
 8006828:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800682c:	2b48      	cmp	r3, #72	; 0x48
 800682e:	d1d2      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
 8006830:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006834:	2b21      	cmp	r3, #33	; 0x21
 8006836:	d1ce      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
 8006838:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800683c:	2b2c      	cmp	r3, #44	; 0x2c
 800683e:	d1ca      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8006840:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006844:	2b2c      	cmp	r3, #44	; 0x2c
 8006846:	d1c6      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
 8006848:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800684c:	2b2c      	cmp	r3, #44	; 0x2c
 800684e:	d1c2      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
 8006850:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006854:	2b2c      	cmp	r3, #44	; 0x2c
 8006856:	d1be      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8006858:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800685c:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 800685e:	b2c3      	uxtb	r3, r0
 8006860:	2b09      	cmp	r3, #9
 8006862:	d8b8      	bhi.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8006864:	f89d b007 	ldrb.w	fp, [sp, #7]
 8006868:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 800686c:	fa5f f38b 	uxtb.w	r3, fp
 8006870:	2b09      	cmp	r3, #9
 8006872:	d8b0      	bhi.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
 8006874:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006878:	2b2e      	cmp	r3, #46	; 0x2e
 800687a:	d1ac      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 800687c:	f89d a009 	ldrb.w	sl, [sp, #9]
 8006880:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8006884:	fa5f f38a 	uxtb.w	r3, sl
 8006888:	2b09      	cmp	r3, #9
 800688a:	d8a4      	bhi.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 800688c:	f89d 900a 	ldrb.w	r9, [sp, #10]
 8006890:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8006894:	fa5f f389 	uxtb.w	r3, r9
 8006898:	2b09      	cmp	r3, #9
 800689a:	d89c      	bhi.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 800689c:	f89d 800c 	ldrb.w	r8, [sp, #12]
 80068a0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 80068a4:	fa5f f388 	uxtb.w	r3, r8
 80068a8:	2b09      	cmp	r3, #9
 80068aa:	d894      	bhi.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 80068ac:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80068b0:	2b2e      	cmp	r3, #46	; 0x2e
 80068b2:	d190      	bne.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
 80068b4:	f89d 700e 	ldrb.w	r7, [sp, #14]
 80068b8:	3f30      	subs	r7, #48	; 0x30
 80068ba:	b2fb      	uxtb	r3, r7
 80068bc:	2b09      	cmp	r3, #9
 80068be:	d88a      	bhi.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80068c0:	f89d 600f 	ldrb.w	r6, [sp, #15]
 80068c4:	3e30      	subs	r6, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 80068c6:	b2f3      	uxtb	r3, r6
 80068c8:	2b09      	cmp	r3, #9
 80068ca:	d884      	bhi.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80068cc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80068d0:	3d30      	subs	r5, #48	; 0x30
 80068d2:	b2eb      	uxtb	r3, r5
 80068d4:	2b09      	cmp	r3, #9
 80068d6:	f63f af7e 	bhi.w	80067d6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 80068da:	f89d 4012 	ldrb.w	r4, [sp, #18]
 80068de:	3c30      	subs	r4, #48	; 0x30
 80068e0:	b2e4      	uxtb	r4, r4
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80068e2:	2c02      	cmp	r4, #2
 80068e4:	f63f af77 	bhi.w	80067d6 <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 80068e8:	f7fa f9a0 	bl	8000c2c <__aeabi_i2f>
 80068ec:	492e      	ldr	r1, [pc, #184]	; (80069a8 <HAL_UART_RxCpltCallback+0x220>)
 80068ee:	f7fa f9f1 	bl	8000cd4 <__aeabi_fmul>
 80068f2:	2100      	movs	r1, #0
 80068f4:	f7fa f8e6 	bl	8000ac4 <__addsf3>
 80068f8:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80068fa:	4658      	mov	r0, fp
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 80068fc:	469b      	mov	fp, r3
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80068fe:	f7fa f995 	bl	8000c2c <__aeabi_i2f>
 8006902:	4659      	mov	r1, fp
 8006904:	f7fa f8de 	bl	8000ac4 <__addsf3>
 8006908:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 800690a:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 800690c:	469a      	mov	sl, r3
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 800690e:	f7fa f98d 	bl	8000c2c <__aeabi_i2f>
 8006912:	4925      	ldr	r1, [pc, #148]	; (80069a8 <HAL_UART_RxCpltCallback+0x220>)
 8006914:	f7fa fa92 	bl	8000e3c <__aeabi_fdiv>
 8006918:	4651      	mov	r1, sl
 800691a:	f7fa f8d3 	bl	8000ac4 <__addsf3>
 800691e:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8006920:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8006922:	4699      	mov	r9, r3
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8006924:	f7fa f982 	bl	8000c2c <__aeabi_i2f>
 8006928:	4920      	ldr	r1, [pc, #128]	; (80069ac <HAL_UART_RxCpltCallback+0x224>)
 800692a:	f7fa fa87 	bl	8000e3c <__aeabi_fdiv>
 800692e:	4649      	mov	r1, r9
 8006930:	f7fa f8c8 	bl	8000ac4 <__addsf3>
 8006934:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8006936:	4640      	mov	r0, r8
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8006938:	4698      	mov	r8, r3
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 800693a:	f7fa f977 	bl	8000c2c <__aeabi_i2f>
 800693e:	2100      	movs	r1, #0
 8006940:	f7fa f8c0 	bl	8000ac4 <__addsf3>
 8006944:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8006946:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8006948:	461f      	mov	r7, r3
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 800694a:	f7fa f96f 	bl	8000c2c <__aeabi_i2f>
 800694e:	4916      	ldr	r1, [pc, #88]	; (80069a8 <HAL_UART_RxCpltCallback+0x220>)
 8006950:	f7fa fa74 	bl	8000e3c <__aeabi_fdiv>
 8006954:	4639      	mov	r1, r7
 8006956:	f7fa f8b5 	bl	8000ac4 <__addsf3>
 800695a:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 800695c:	4630      	mov	r0, r6
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 800695e:	461e      	mov	r6, r3
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8006960:	f7fa f964 	bl	8000c2c <__aeabi_i2f>
 8006964:	4911      	ldr	r1, [pc, #68]	; (80069ac <HAL_UART_RxCpltCallback+0x224>)
 8006966:	f7fa fa69 	bl	8000e3c <__aeabi_fdiv>
 800696a:	4631      	mov	r1, r6
 800696c:	f7fa f8aa 	bl	8000ac4 <__addsf3>
 8006970:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8006972:	4628      	mov	r0, r5
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8006974:	461d      	mov	r5, r3
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8006976:	f7fa f959 	bl	8000c2c <__aeabi_i2f>
 800697a:	490d      	ldr	r1, [pc, #52]	; (80069b0 <HAL_UART_RxCpltCallback+0x228>)
 800697c:	f7fa fa5e 	bl	8000e3c <__aeabi_fdiv>
 8006980:	4629      	mov	r1, r5
 8006982:	f7fa f89f 	bl	8000ac4 <__addsf3>
		lin_num_aux = tempv2;
 8006986:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <HAL_UART_RxCpltCallback+0x22c>)
		cur_num_aux = tempa2;
 8006988:	490b      	ldr	r1, [pc, #44]	; (80069b8 <HAL_UART_RxCpltCallback+0x230>)
		chstat_aux_rx = rxbuffercpy[18]-48;
 800698a:	4a0c      	ldr	r2, [pc, #48]	; (80069bc <HAL_UART_RxCpltCallback+0x234>)
 800698c:	b264      	sxtb	r4, r4
		lin_num_aux = tempv2;
 800698e:	f8c3 8000 	str.w	r8, [r3]
		cur_num_aux = tempa2;
 8006992:	6008      	str	r0, [r1, #0]
		chstat_aux_rx = rxbuffercpy[18]-48;
 8006994:	7014      	strb	r4, [r2, #0]
 8006996:	e71e      	b.n	80067d6 <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 8006998:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 800699a:	7835      	ldrb	r5, [r6, #0]
 800699c:	e704      	b.n	80067a8 <HAL_UART_RxCpltCallback+0x20>
 800699e:	bf00      	nop
 80069a0:	200006d8 	.word	0x200006d8
 80069a4:	20000680 	.word	0x20000680
 80069a8:	41200000 	.word	0x41200000
 80069ac:	42c80000 	.word	0x42c80000
 80069b0:	447a0000 	.word	0x447a0000
 80069b4:	200006cc 	.word	0x200006cc
 80069b8:	200003a8 	.word	0x200003a8
 80069bc:	200003a1 	.word	0x200003a1

080069c0 <HAL_UART_ErrorCallback>:
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64); //Try again!
 80069c0:	2240      	movs	r2, #64	; 0x40
 80069c2:	4902      	ldr	r1, [pc, #8]	; (80069cc <HAL_UART_ErrorCallback+0xc>)
 80069c4:	4802      	ldr	r0, [pc, #8]	; (80069d0 <HAL_UART_ErrorCallback+0x10>)
 80069c6:	f003 bbed 	b.w	800a1a4 <HAL_UART_Receive_DMA>
 80069ca:	bf00      	nop
 80069cc:	200006d8 	.word	0x200006d8
 80069d0:	20000680 	.word	0x20000680

080069d4 <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 80069d4:	b430      	push	{r4, r5}
	memcpy(txbuffer, txbuffer_cpy, 64);  // copy the data to the buffer
 80069d6:	4c07      	ldr	r4, [pc, #28]	; (80069f4 <HAL_UART_TxHalfCpltCallback+0x20>)
 80069d8:	4d07      	ldr	r5, [pc, #28]	; (80069f8 <HAL_UART_TxHalfCpltCallback+0x24>)
 80069da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80069ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80069ee:	bc30      	pop	{r4, r5}
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000720 	.word	0x20000720
 80069f8:	20000760 	.word	0x20000760

080069fc <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80069fc:	b5d0      	push	{r4, r6, r7, lr}
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 80069fe:	4c11      	ldr	r4, [pc, #68]	; (8006a44 <HAL_UART_TxCpltCallback+0x48>)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8006a00:	b086      	sub	sp, #24
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8006a02:	2240      	movs	r2, #64	; 0x40
 8006a04:	2100      	movs	r1, #0
 8006a06:	4620      	mov	r0, r4
 8006a08:	f005 fcf8 	bl	800c3fc <memset>
	snprintf((char*)txbuffer_cpy, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8006a0c:	4a0e      	ldr	r2, [pc, #56]	; (8006a48 <HAL_UART_TxCpltCallback+0x4c>)
 8006a0e:	490f      	ldr	r1, [pc, #60]	; (8006a4c <HAL_UART_TxCpltCallback+0x50>)
 8006a10:	4b0f      	ldr	r3, [pc, #60]	; (8006a50 <HAL_UART_TxCpltCallback+0x54>)
 8006a12:	680e      	ldr	r6, [r1, #0]
 8006a14:	6810      	ldr	r0, [r2, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	b25b      	sxtb	r3, r3
 8006a1a:	9304      	str	r3, [sp, #16]
 8006a1c:	f7f9 fd1c 	bl	8000458 <__aeabi_f2d>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4630      	mov	r0, r6
 8006a26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a2a:	f7f9 fd15 	bl	8000458 <__aeabi_f2d>
 8006a2e:	4606      	mov	r6, r0
 8006a30:	460f      	mov	r7, r1
 8006a32:	4620      	mov	r0, r4
 8006a34:	2120      	movs	r1, #32
 8006a36:	e9cd 6700 	strd	r6, r7, [sp]
 8006a3a:	4a06      	ldr	r2, [pc, #24]	; (8006a54 <HAL_UART_TxCpltCallback+0x58>)
 8006a3c:	f006 f946 	bl	800cccc <sniprintf>
}
 8006a40:	b006      	add	sp, #24
 8006a42:	bdd0      	pop	{r4, r6, r7, pc}
 8006a44:	20000760 	.word	0x20000760
 8006a48:	20000394 	.word	0x20000394
 8006a4c:	20000824 	.word	0x20000824
 8006a50:	200003a2 	.word	0x200003a2
 8006a54:	0800f238 	.word	0x0800f238

08006a58 <Error_Handler>:
 8006a58:	b672      	cpsid	i
  while (1)
 8006a5a:	e7fe      	b.n	8006a5a <Error_Handler+0x2>

08006a5c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8006a5c:	4b0f      	ldr	r3, [pc, #60]	; (8006a9c <HAL_MspInit+0x40>)
{
 8006a5e:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8006a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a66:	625a      	str	r2, [r3, #36]	; 0x24
 8006a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a6a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006a6e:	9201      	str	r2, [sp, #4]
 8006a70:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a72:	6a1a      	ldr	r2, [r3, #32]
 8006a74:	f042 0201 	orr.w	r2, r2, #1
 8006a78:	621a      	str	r2, [r3, #32]
 8006a7a:	6a1a      	ldr	r2, [r3, #32]
 8006a7c:	f002 0201 	and.w	r2, r2, #1
 8006a80:	9202      	str	r2, [sp, #8]
 8006a82:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a8a:	625a      	str	r2, [r3, #36]	; 0x24
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a92:	9303      	str	r3, [sp, #12]
 8006a94:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a96:	b004      	add	sp, #16
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40023800 	.word	0x40023800

08006aa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006aa0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aa2:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8006aa4:	4b25      	ldr	r3, [pc, #148]	; (8006b3c <HAL_ADC_MspInit+0x9c>)
 8006aa6:	6802      	ldr	r2, [r0, #0]
{
 8006aa8:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8006aaa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aac:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006ab0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006ab4:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8006ab6:	d001      	beq.n	8006abc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006ab8:	b008      	add	sp, #32
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006abc:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8006ac0:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ac2:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ac8:	621a      	str	r2, [r3, #32]
 8006aca:	6a1a      	ldr	r2, [r3, #32]
 8006acc:	4605      	mov	r5, r0
 8006ace:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006ad2:	9200      	str	r2, [sp, #0]
 8006ad4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ad6:	69da      	ldr	r2, [r3, #28]
    hdma_adc.Instance = DMA1_Channel1;
 8006ad8:	4e19      	ldr	r6, [pc, #100]	; (8006b40 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ada:	f042 0201 	orr.w	r2, r2, #1
 8006ade:	61da      	str	r2, [r3, #28]
 8006ae0:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006ae2:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006aea:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aec:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aee:	4815      	ldr	r0, [pc, #84]	; (8006b44 <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006af0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006af4:	f001 f99c 	bl	8007e30 <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8006af8:	2380      	movs	r3, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8006afa:	4913      	ldr	r1, [pc, #76]	; (8006b48 <HAL_ADC_MspInit+0xa8>)
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006afc:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b00:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8006b04:	60f3      	str	r3, [r6, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8006b0a:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8006b0c:	4630      	mov	r0, r6
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b0e:	60b4      	str	r4, [r6, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8006b10:	61f4      	str	r4, [r6, #28]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006b12:	6171      	str	r1, [r6, #20]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006b14:	6132      	str	r2, [r6, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8006b16:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8006b18:	f000 ffd6 	bl	8007ac8 <HAL_DMA_Init>
 8006b1c:	b958      	cbnz	r0, 8006b36 <HAL_ADC_MspInit+0x96>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2012      	movs	r0, #18
 8006b22:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8006b24:	646e      	str	r6, [r5, #68]	; 0x44
 8006b26:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8006b28:	f000 fed0 	bl	80078cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8006b2c:	2012      	movs	r0, #18
 8006b2e:	f000 ff0b 	bl	8007948 <HAL_NVIC_EnableIRQ>
}
 8006b32:	b008      	add	sp, #32
 8006b34:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8006b36:	f7ff ff8f 	bl	8006a58 <Error_Handler>
 8006b3a:	e7f0      	b.n	8006b1e <HAL_ADC_MspInit+0x7e>
 8006b3c:	40012400 	.word	0x40012400
 8006b40:	20000418 	.word	0x20000418
 8006b44:	40020000 	.word	0x40020000
 8006b48:	40026008 	.word	0x40026008

08006b4c <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <HAL_ADC_MspDeInit+0x30>)
 8006b4e:	6802      	ldr	r2, [r0, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d000      	beq.n	8006b56 <HAL_ADC_MspDeInit+0xa>
 8006b54:	4770      	bx	lr
{
 8006b56:	b510      	push	{r4, lr}
 8006b58:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8006b5a:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <HAL_ADC_MspDeInit+0x34>)
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8006b5c:	210f      	movs	r1, #15
    __HAL_RCC_ADC1_CLK_DISABLE();
 8006b5e:	6a13      	ldr	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8006b60:	4808      	ldr	r0, [pc, #32]	; (8006b84 <HAL_ADC_MspDeInit+0x38>)
    __HAL_RCC_ADC1_CLK_DISABLE();
 8006b62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b66:	6213      	str	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8006b68:	f001 fa4c 	bl	8008004 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8006b6c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006b6e:	f000 ffe3 	bl	8007b38 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8006b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8006b76:	2012      	movs	r0, #18
 8006b78:	f000 bef4 	b.w	8007964 <HAL_NVIC_DisableIRQ>
 8006b7c:	40012400 	.word	0x40012400
 8006b80:	40023800 	.word	0x40023800
 8006b84:	40020000 	.word	0x40020000

08006b88 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b88:	2300      	movs	r3, #0
{
 8006b8a:	b530      	push	{r4, r5, lr}
  if(hdac->Instance==DAC)
 8006b8c:	4a14      	ldr	r2, [pc, #80]	; (8006be0 <HAL_DAC_MspInit+0x58>)
 8006b8e:	6801      	ldr	r1, [r0, #0]
{
 8006b90:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 8006b92:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b94:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b98:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006b9c:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8006b9e:	d001      	beq.n	8006ba4 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8006ba0:	b009      	add	sp, #36	; 0x24
 8006ba2:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006ba4:	2430      	movs	r4, #48	; 0x30
 8006ba6:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8006ba8:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <HAL_DAC_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006baa:	480f      	ldr	r0, [pc, #60]	; (8006be8 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8006bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bae:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC_CLK_ENABLE();
 8006bb0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24
 8006bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bb8:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8006bbc:	9200      	str	r2, [sp, #0]
 8006bbe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bc0:	69da      	ldr	r2, [r3, #28]
 8006bc2:	f042 0201 	orr.w	r2, r2, #1
 8006bc6:	61da      	str	r2, [r3, #28]
 8006bc8:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006bca:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bd6:	f001 f92b 	bl	8007e30 <HAL_GPIO_Init>
}
 8006bda:	b009      	add	sp, #36	; 0x24
 8006bdc:	bd30      	pop	{r4, r5, pc}
 8006bde:	bf00      	nop
 8006be0:	40007400 	.word	0x40007400
 8006be4:	40023800 	.word	0x40023800
 8006be8:	40020000 	.word	0x40020000

08006bec <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bec:	2300      	movs	r3, #0
{
 8006bee:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8006bf0:	4a16      	ldr	r2, [pc, #88]	; (8006c4c <HAL_I2C_MspInit+0x60>)
 8006bf2:	6801      	ldr	r1, [r0, #0]
{
 8006bf4:	b088      	sub	sp, #32
  if(hi2c->Instance==I2C1)
 8006bf6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bf8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006bfc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006c00:	9306      	str	r3, [sp, #24]
  if(hi2c->Instance==I2C1)
 8006c02:	d001      	beq.n	8006c08 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006c04:	b008      	add	sp, #32
 8006c06:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c08:	2003      	movs	r0, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c0a:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c0c:	26c0      	movs	r6, #192	; 0xc0
 8006c0e:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c10:	4c0f      	ldr	r4, [pc, #60]	; (8006c50 <HAL_I2C_MspInit+0x64>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c12:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c14:	69e3      	ldr	r3, [r4, #28]
 8006c16:	f043 0302 	orr.w	r3, r3, #2
 8006c1a:	61e3      	str	r3, [r4, #28]
 8006c1c:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c1e:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c26:	480b      	ldr	r0, [pc, #44]	; (8006c54 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c28:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c2a:	e9cd 6702 	strd	r6, r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c2e:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c30:	f001 f8fe 	bl	8007e30 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c3a:	6263      	str	r3, [r4, #36]	; 0x24
 8006c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c42:	9301      	str	r3, [sp, #4]
 8006c44:	9b01      	ldr	r3, [sp, #4]
}
 8006c46:	b008      	add	sp, #32
 8006c48:	bdd0      	pop	{r4, r6, r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	40005400 	.word	0x40005400
 8006c50:	40023800 	.word	0x40023800
 8006c54:	40020400 	.word	0x40020400

08006c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c58:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8006c5a:	6803      	ldr	r3, [r0, #0]
{
 8006c5c:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 8006c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c62:	d023      	beq.n	8006cac <HAL_TIM_Base_MspInit+0x54>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8006c64:	4a3a      	ldr	r2, [pc, #232]	; (8006d50 <HAL_TIM_Base_MspInit+0xf8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d036      	beq.n	8006cd8 <HAL_TIM_Base_MspInit+0x80>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 8006c6a:	4a3a      	ldr	r2, [pc, #232]	; (8006d54 <HAL_TIM_Base_MspInit+0xfc>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d048      	beq.n	8006d02 <HAL_TIM_Base_MspInit+0xaa>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8006c70:	4a39      	ldr	r2, [pc, #228]	; (8006d58 <HAL_TIM_Base_MspInit+0x100>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d005      	beq.n	8006c82 <HAL_TIM_Base_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8006c76:	4a39      	ldr	r2, [pc, #228]	; (8006d5c <HAL_TIM_Base_MspInit+0x104>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d057      	beq.n	8006d2c <HAL_TIM_Base_MspInit+0xd4>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8006c7c:	b007      	add	sp, #28
 8006c7e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006c82:	4b37      	ldr	r3, [pc, #220]	; (8006d60 <HAL_TIM_Base_MspInit+0x108>)
    HAL_NVIC_SetPriority(TIM10_IRQn, 10, 0);
 8006c84:	201a      	movs	r0, #26
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006c86:	6a19      	ldr	r1, [r3, #32]
    HAL_NVIC_SetPriority(TIM10_IRQn, 10, 0);
 8006c88:	2200      	movs	r2, #0
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006c8a:	f041 0108 	orr.w	r1, r1, #8
 8006c8e:	6219      	str	r1, [r3, #32]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM10_IRQn, 10, 0);
 8006c92:	210a      	movs	r1, #10
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006c94:	f003 0308 	and.w	r3, r3, #8
 8006c98:	9304      	str	r3, [sp, #16]
 8006c9a:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM10_IRQn, 10, 0);
 8006c9c:	f000 fe16 	bl	80078cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 8006ca0:	201a      	movs	r0, #26
}
 8006ca2:	b007      	add	sp, #28
 8006ca4:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006ca8:	f000 be4e 	b.w	8007948 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006cac:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8006cb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8006cb2:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006cb4:	f041 0101 	orr.w	r1, r1, #1
 8006cb8:	6259      	str	r1, [r3, #36]	; 0x24
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8006cbc:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8006cc4:	2106      	movs	r1, #6
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006cc6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8006cc8:	f000 fe00 	bl	80078cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006ccc:	201c      	movs	r0, #28
}
 8006cce:	b007      	add	sp, #28
 8006cd0:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006cd4:	f000 be38 	b.w	8007948 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006cd8:	4b21      	ldr	r3, [pc, #132]	; (8006d60 <HAL_TIM_Base_MspInit+0x108>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 8006cda:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006cdc:	6a59      	ldr	r1, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 8006cde:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006ce0:	f041 0102 	orr.w	r1, r1, #2
 8006ce4:	6259      	str	r1, [r3, #36]	; 0x24
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 8006ce8:	210d      	movs	r1, #13
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	9302      	str	r3, [sp, #8]
 8006cf0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 8006cf2:	f000 fdeb 	bl	80078cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006cf6:	201d      	movs	r0, #29
}
 8006cf8:	b007      	add	sp, #28
 8006cfa:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006cfe:	f000 be23 	b.w	8007948 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006d02:	4b17      	ldr	r3, [pc, #92]	; (8006d60 <HAL_TIM_Base_MspInit+0x108>)
    HAL_NVIC_SetPriority(TIM9_IRQn, 8, 0);
 8006d04:	2019      	movs	r0, #25
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006d06:	6a19      	ldr	r1, [r3, #32]
    HAL_NVIC_SetPriority(TIM9_IRQn, 8, 0);
 8006d08:	2200      	movs	r2, #0
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006d0a:	f041 0104 	orr.w	r1, r1, #4
 8006d0e:	6219      	str	r1, [r3, #32]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM9_IRQn, 8, 0);
 8006d12:	2108      	movs	r1, #8
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	9303      	str	r3, [sp, #12]
 8006d1a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM9_IRQn, 8, 0);
 8006d1c:	f000 fdd6 	bl	80078cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8006d20:	2019      	movs	r0, #25
}
 8006d22:	b007      	add	sp, #28
 8006d24:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006d28:	f000 be0e 	b.w	8007948 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <HAL_TIM_Base_MspInit+0x108>)
    HAL_NVIC_SetPriority(TIM11_IRQn, 12, 0);
 8006d2e:	201b      	movs	r0, #27
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006d30:	6a19      	ldr	r1, [r3, #32]
    HAL_NVIC_SetPriority(TIM11_IRQn, 12, 0);
 8006d32:	2200      	movs	r2, #0
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006d34:	f041 0110 	orr.w	r1, r1, #16
 8006d38:	6219      	str	r1, [r3, #32]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM11_IRQn, 12, 0);
 8006d3c:	210c      	movs	r1, #12
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006d3e:	f003 0310 	and.w	r3, r3, #16
 8006d42:	9305      	str	r3, [sp, #20]
 8006d44:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM11_IRQn, 12, 0);
 8006d46:	f000 fdc1 	bl	80078cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006d4a:	201b      	movs	r0, #27
 8006d4c:	e7a9      	b.n	8006ca2 <HAL_TIM_Base_MspInit+0x4a>
 8006d4e:	bf00      	nop
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40010800 	.word	0x40010800
 8006d58:	40010c00 	.word	0x40010c00
 8006d5c:	40011000 	.word	0x40011000
 8006d60:	40023800 	.word	0x40023800

08006d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d64:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d66:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8006d68:	4b31      	ldr	r3, [pc, #196]	; (8006e30 <HAL_UART_MspInit+0xcc>)
 8006d6a:	6802      	ldr	r2, [r0, #0]
{
 8006d6c:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8006d6e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d70:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006d74:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006d78:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8006d7a:	d001      	beq.n	8006d80 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006d7c:	b008      	add	sp, #32
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d80:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006d84:	6a1a      	ldr	r2, [r3, #32]
 8006d86:	4605      	mov	r5, r0
 8006d88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d8c:	621a      	str	r2, [r3, #32]
 8006d8e:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d90:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d92:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006d96:	9200      	str	r2, [sp, #0]
 8006d98:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d9a:	69da      	ldr	r2, [r3, #28]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006d9c:	4e25      	ldr	r6, [pc, #148]	; (8006e34 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	61da      	str	r2, [r3, #28]
 8006da4:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006da6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006db0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006db2:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006db4:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006db6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006dba:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dbc:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dbe:	481e      	ldr	r0, [pc, #120]	; (8006e38 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006dc0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dc2:	f001 f835 	bl	8007e30 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006dc6:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006dc8:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <HAL_UART_MspInit+0xd8>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006dca:	4630      	mov	r0, r6
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006dcc:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dd0:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006dd4:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dd8:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006dda:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006ddc:	f000 fe74 	bl	8007ac8 <HAL_DMA_Init>
 8006de0:	b9f8      	cbnz	r0, 8006e22 <HAL_UART_MspInit+0xbe>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006de2:	2210      	movs	r2, #16
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006de4:	4c16      	ldr	r4, [pc, #88]	; (8006e40 <HAL_UART_MspInit+0xdc>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006de6:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006de8:	2180      	movs	r1, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006dea:	6062      	str	r2, [r4, #4]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8006dec:	2220      	movs	r2, #32
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006dee:	e9c4 3102 	strd	r3, r1, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006df2:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006df6:	61e3      	str	r3, [r4, #28]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006df8:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <HAL_UART_MspInit+0xe0>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006dfa:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006dfc:	63ae      	str	r6, [r5, #56]	; 0x38
 8006dfe:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006e00:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8006e02:	61a2      	str	r2, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006e04:	f000 fe60 	bl	8007ac8 <HAL_DMA_Init>
 8006e08:	b970      	cbnz	r0, 8006e28 <HAL_UART_MspInit+0xc4>
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2103      	movs	r1, #3
 8006e0e:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006e10:	636c      	str	r4, [r5, #52]	; 0x34
 8006e12:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8006e14:	f000 fd5a 	bl	80078cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006e18:	2025      	movs	r0, #37	; 0x25
 8006e1a:	f000 fd95 	bl	8007948 <HAL_NVIC_EnableIRQ>
}
 8006e1e:	b008      	add	sp, #32
 8006e20:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8006e22:	f7ff fe19 	bl	8006a58 <Error_Handler>
 8006e26:	e7dc      	b.n	8006de2 <HAL_UART_MspInit+0x7e>
      Error_Handler();
 8006e28:	f7ff fe16 	bl	8006a58 <Error_Handler>
 8006e2c:	e7ed      	b.n	8006e0a <HAL_UART_MspInit+0xa6>
 8006e2e:	bf00      	nop
 8006e30:	40013800 	.word	0x40013800
 8006e34:	2000045c 	.word	0x2000045c
 8006e38:	40020000 	.word	0x40020000
 8006e3c:	40026058 	.word	0x40026058
 8006e40:	200004a0 	.word	0x200004a0
 8006e44:	40026044 	.word	0x40026044

08006e48 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006e48:	e7fe      	b.n	8006e48 <NMI_Handler>
 8006e4a:	bf00      	nop

08006e4c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e4c:	e7fe      	b.n	8006e4c <HardFault_Handler>
 8006e4e:	bf00      	nop

08006e50 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e50:	e7fe      	b.n	8006e50 <MemManage_Handler>
 8006e52:	bf00      	nop

08006e54 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e54:	e7fe      	b.n	8006e54 <BusFault_Handler>
 8006e56:	bf00      	nop

08006e58 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e58:	e7fe      	b.n	8006e58 <UsageFault_Handler>
 8006e5a:	bf00      	nop

08006e5c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop

08006e60 <DebugMon_Handler>:
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop

08006e64 <PendSV_Handler>:
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop

08006e68 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e68:	f000 b920 	b.w	80070ac <HAL_IncTick>

08006e6c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_CLK_Pin);
 8006e6c:	2001      	movs	r0, #1
 8006e6e:	f001 b96f 	b.w	8008150 <HAL_GPIO_EXTI_IRQHandler>
 8006e72:	bf00      	nop

08006e74 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_SW_Pin);
 8006e74:	2004      	movs	r0, #4
 8006e76:	f001 b96b 	b.w	8008150 <HAL_GPIO_EXTI_IRQHandler>
 8006e7a:	bf00      	nop

08006e7c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8006e7c:	4801      	ldr	r0, [pc, #4]	; (8006e84 <DMA1_Channel1_IRQHandler+0x8>)
 8006e7e:	f000 bf23 	b.w	8007cc8 <HAL_DMA_IRQHandler>
 8006e82:	bf00      	nop
 8006e84:	20000418 	.word	0x20000418

08006e88 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006e88:	4801      	ldr	r0, [pc, #4]	; (8006e90 <DMA1_Channel4_IRQHandler+0x8>)
 8006e8a:	f000 bf1d 	b.w	8007cc8 <HAL_DMA_IRQHandler>
 8006e8e:	bf00      	nop
 8006e90:	200004a0 	.word	0x200004a0

08006e94 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006e94:	4801      	ldr	r0, [pc, #4]	; (8006e9c <DMA1_Channel5_IRQHandler+0x8>)
 8006e96:	f000 bf17 	b.w	8007cc8 <HAL_DMA_IRQHandler>
 8006e9a:	bf00      	nop
 8006e9c:	2000045c 	.word	0x2000045c

08006ea0 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8006ea0:	4801      	ldr	r0, [pc, #4]	; (8006ea8 <ADC1_IRQHandler+0x8>)
 8006ea2:	f000 bacb 	b.w	800743c <HAL_ADC_IRQHandler>
 8006ea6:	bf00      	nop
 8006ea8:	200003b0 	.word	0x200003b0

08006eac <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006eac:	4801      	ldr	r0, [pc, #4]	; (8006eb4 <USB_LP_IRQHandler+0x8>)
 8006eae:	f001 bc35 	b.w	800871c <HAL_PCD_IRQHandler>
 8006eb2:	bf00      	nop
 8006eb4:	200014a8 	.word	0x200014a8

08006eb8 <TIM9_IRQHandler>:
void TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM9_IRQn 0 */

  /* USER CODE END TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8006eb8:	4801      	ldr	r0, [pc, #4]	; (8006ec0 <TIM9_IRQHandler+0x8>)
 8006eba:	f002 bfef 	b.w	8009e9c <HAL_TIM_IRQHandler>
 8006ebe:	bf00      	nop
 8006ec0:	20000640 	.word	0x20000640

08006ec4 <TIM10_IRQHandler>:
void TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006ec4:	4801      	ldr	r0, [pc, #4]	; (8006ecc <TIM10_IRQHandler+0x8>)
 8006ec6:	f002 bfe9 	b.w	8009e9c <HAL_TIM_IRQHandler>
 8006eca:	bf00      	nop
 8006ecc:	20000540 	.word	0x20000540

08006ed0 <TIM11_IRQHandler>:
void TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8006ed0:	4801      	ldr	r0, [pc, #4]	; (8006ed8 <TIM11_IRQHandler+0x8>)
 8006ed2:	f002 bfe3 	b.w	8009e9c <HAL_TIM_IRQHandler>
 8006ed6:	bf00      	nop
 8006ed8:	20000580 	.word	0x20000580

08006edc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006edc:	4801      	ldr	r0, [pc, #4]	; (8006ee4 <TIM2_IRQHandler+0x8>)
 8006ede:	f002 bfdd 	b.w	8009e9c <HAL_TIM_IRQHandler>
 8006ee2:	bf00      	nop
 8006ee4:	200005c0 	.word	0x200005c0

08006ee8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <TIM3_IRQHandler+0x8>)
 8006eea:	f002 bfd7 	b.w	8009e9c <HAL_TIM_IRQHandler>
 8006eee:	bf00      	nop
 8006ef0:	20000600 	.word	0x20000600

08006ef4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006ef4:	4801      	ldr	r0, [pc, #4]	; (8006efc <USART1_IRQHandler+0x8>)
 8006ef6:	f003 ba9f 	b.w	800a438 <HAL_UART_IRQHandler>
 8006efa:	bf00      	nop
 8006efc:	20000680 	.word	0x20000680

08006f00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006f00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Row_1_Pin);
 8006f02:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006f06:	f001 f923 	bl	8008150 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_2_Pin);
 8006f0a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f0e:	f001 f91f 	bl	8008150 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_3_Pin);
 8006f12:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006f16:	f001 f91b 	bl	8008150 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_4_Pin);
 8006f1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006f1e:	f001 f917 	bl	8008150 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006f22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
 8006f26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006f2a:	f001 b911 	b.w	8008150 <HAL_GPIO_EXTI_IRQHandler>
 8006f2e:	bf00      	nop

08006f30 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8006f30:	2001      	movs	r0, #1
 8006f32:	4770      	bx	lr

08006f34 <_kill>:

int _kill(int pid, int sig)
{
 8006f34:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006f36:	f005 fa29 	bl	800c38c <__errno>
 8006f3a:	2216      	movs	r2, #22
 8006f3c:	4603      	mov	r3, r0
	return -1;
}
 8006f3e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8006f42:	601a      	str	r2, [r3, #0]
}
 8006f44:	bd08      	pop	{r3, pc}
 8006f46:	bf00      	nop

08006f48 <_exit>:

void _exit (int status)
{
 8006f48:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006f4a:	f005 fa1f 	bl	800c38c <__errno>
 8006f4e:	2316      	movs	r3, #22
 8006f50:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8006f52:	e7fe      	b.n	8006f52 <_exit+0xa>

08006f54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006f54:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f56:	1e16      	subs	r6, r2, #0
 8006f58:	dd07      	ble.n	8006f6a <_read+0x16>
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8006f5e:	f3af 8000 	nop.w
 8006f62:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f66:	42a5      	cmp	r5, r4
 8006f68:	d1f9      	bne.n	8006f5e <_read+0xa>
	}

return len;
}
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	bd70      	pop	{r4, r5, r6, pc}
 8006f6e:	bf00      	nop

08006f70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006f70:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f72:	1e16      	subs	r6, r2, #0
 8006f74:	dd07      	ble.n	8006f86 <_write+0x16>
 8006f76:	460c      	mov	r4, r1
 8006f78:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8006f7a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006f7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f82:	42ac      	cmp	r4, r5
 8006f84:	d1f9      	bne.n	8006f7a <_write+0xa>
	}
	return len;
}
 8006f86:	4630      	mov	r0, r6
 8006f88:	bd70      	pop	{r4, r5, r6, pc}
 8006f8a:	bf00      	nop

08006f8c <_close>:

int _close(int file)
{
	return -1;
}
 8006f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop

08006f94 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8006f98:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8006f9a:	604b      	str	r3, [r1, #4]
}
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop

08006fa0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006fa0:	2001      	movs	r0, #1
 8006fa2:	4770      	bx	lr

08006fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	4770      	bx	lr

08006fa8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006fa8:	490d      	ldr	r1, [pc, #52]	; (8006fe0 <_sbrk+0x38>)
{
 8006faa:	4603      	mov	r3, r0
 8006fac:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006fae:	4a0d      	ldr	r2, [pc, #52]	; (8006fe4 <_sbrk+0x3c>)
 8006fb0:	4c0d      	ldr	r4, [pc, #52]	; (8006fe8 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8006fb2:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006fb4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8006fb6:	b120      	cbz	r0, 8006fc2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006fb8:	4403      	add	r3, r0
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d807      	bhi.n	8006fce <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006fbe:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8006fc0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006fc2:	4c0a      	ldr	r4, [pc, #40]	; (8006fec <_sbrk+0x44>)
 8006fc4:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8006fc6:	4403      	add	r3, r0
 8006fc8:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8006fca:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8006fcc:	d9f7      	bls.n	8006fbe <_sbrk+0x16>
    errno = ENOMEM;
 8006fce:	f005 f9dd 	bl	800c38c <__errno>
 8006fd2:	220c      	movs	r2, #12
 8006fd4:	4603      	mov	r3, r0
    return (void *)-1;
 8006fd6:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8006fda:	601a      	str	r2, [r3, #0]
}
 8006fdc:	bd10      	pop	{r4, pc}
 8006fde:	bf00      	nop
 8006fe0:	20000830 	.word	0x20000830
 8006fe4:	20008000 	.word	0x20008000
 8006fe8:	00002000 	.word	0x00002000
 8006fec:	200019c8 	.word	0x200019c8

08006ff0 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop

08006ff4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ff4:	480c      	ldr	r0, [pc, #48]	; (8007028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006ff6:	490d      	ldr	r1, [pc, #52]	; (800702c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006ff8:	4a0d      	ldr	r2, [pc, #52]	; (8007030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ffc:	e002      	b.n	8007004 <LoopCopyDataInit>

08006ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007002:	3304      	adds	r3, #4

08007004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007008:	d3f9      	bcc.n	8006ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800700a:	4a0a      	ldr	r2, [pc, #40]	; (8007034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800700c:	4c0a      	ldr	r4, [pc, #40]	; (8007038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800700e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007010:	e001      	b.n	8007016 <LoopFillZerobss>

08007012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007014:	3204      	adds	r2, #4

08007016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007018:	d3fb      	bcc.n	8007012 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800701a:	f7ff ffe9 	bl	8006ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800701e:	f005 f9bb 	bl	800c398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007022:	f7fa ffef 	bl	8002004 <main>
  bx lr
 8007026:	4770      	bx	lr
  ldr r0, =_sdata
 8007028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800702c:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8007030:	0800f734 	.word	0x0800f734
  ldr r2, =_sbss
 8007034:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8007038:	200019c4 	.word	0x200019c4

0800703c <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800703c:	e7fe      	b.n	800703c <COMP_IRQHandler>
	...

08007040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007040:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8007042:	4b0f      	ldr	r3, [pc, #60]	; (8007080 <HAL_InitTick+0x40>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	b90b      	cbnz	r3, 800704c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8007048:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800704a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800704c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007050:	fbb2 f3f3 	udiv	r3, r2, r3
 8007054:	490b      	ldr	r1, [pc, #44]	; (8007084 <HAL_InitTick+0x44>)
 8007056:	4605      	mov	r5, r0
 8007058:	6808      	ldr	r0, [r1, #0]
 800705a:	fbb0 f0f3 	udiv	r0, r0, r3
 800705e:	f000 fc95 	bl	800798c <HAL_SYSTICK_Config>
 8007062:	4604      	mov	r4, r0
 8007064:	2800      	cmp	r0, #0
 8007066:	d1ef      	bne.n	8007048 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007068:	2d0f      	cmp	r5, #15
 800706a:	d8ed      	bhi.n	8007048 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800706c:	4602      	mov	r2, r0
 800706e:	4629      	mov	r1, r5
 8007070:	f04f 30ff 	mov.w	r0, #4294967295
 8007074:	f000 fc2a 	bl	80078cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007078:	4b03      	ldr	r3, [pc, #12]	; (8007088 <HAL_InitTick+0x48>)
 800707a:	4620      	mov	r0, r4
 800707c:	601d      	str	r5, [r3, #0]
}
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	20000018 	.word	0x20000018
 8007084:	20000014 	.word	0x20000014
 8007088:	2000001c 	.word	0x2000001c

0800708c <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800708c:	2003      	movs	r0, #3
{
 800708e:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007090:	f000 fc0a 	bl	80078a8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007094:	200f      	movs	r0, #15
 8007096:	f7ff ffd3 	bl	8007040 <HAL_InitTick>
 800709a:	b110      	cbz	r0, 80070a2 <HAL_Init+0x16>
    status = HAL_ERROR;
 800709c:	2401      	movs	r4, #1
}
 800709e:	4620      	mov	r0, r4
 80070a0:	bd10      	pop	{r4, pc}
 80070a2:	4604      	mov	r4, r0
    HAL_MspInit();
 80070a4:	f7ff fcda 	bl	8006a5c <HAL_MspInit>
}
 80070a8:	4620      	mov	r0, r4
 80070aa:	bd10      	pop	{r4, pc}

080070ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80070ac:	4a03      	ldr	r2, [pc, #12]	; (80070bc <HAL_IncTick+0x10>)
 80070ae:	4904      	ldr	r1, [pc, #16]	; (80070c0 <HAL_IncTick+0x14>)
 80070b0:	6813      	ldr	r3, [r2, #0]
 80070b2:	6809      	ldr	r1, [r1, #0]
 80070b4:	440b      	add	r3, r1
 80070b6:	6013      	str	r3, [r2, #0]
}
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	20000834 	.word	0x20000834
 80070c0:	20000018 	.word	0x20000018

080070c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80070c4:	4b01      	ldr	r3, [pc, #4]	; (80070cc <HAL_GetTick+0x8>)
 80070c6:	6818      	ldr	r0, [r3, #0]
}
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	20000834 	.word	0x20000834

080070d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80070d4:	f7ff fff6 	bl	80070c4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070d8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80070da:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80070dc:	d002      	beq.n	80070e4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80070de:	4b04      	ldr	r3, [pc, #16]	; (80070f0 <HAL_Delay+0x20>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80070e4:	f7ff ffee 	bl	80070c4 <HAL_GetTick>
 80070e8:	1b40      	subs	r0, r0, r5
 80070ea:	42a0      	cmp	r0, r4
 80070ec:	d3fa      	bcc.n	80070e4 <HAL_Delay+0x14>
  {
  }
}
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
 80070f0:	20000018 	.word	0x20000018

080070f4 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80070f4:	2800      	cmp	r0, #0
 80070f6:	f000 80a9 	beq.w	800724c <HAL_ADC_Init+0x158>
{
 80070fa:	b530      	push	{r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80070fc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80070fe:	4604      	mov	r4, r0
{
 8007100:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007102:	2b00      	cmp	r3, #0
 8007104:	d078      	beq.n	80071f8 <HAL_ADC_Init+0x104>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007106:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007108:	06d8      	lsls	r0, r3, #27
 800710a:	d453      	bmi.n	80071b4 <HAL_ADC_Init+0xc0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800710c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800710e:	4a5c      	ldr	r2, [pc, #368]	; (8007280 <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 8007110:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007114:	f023 0302 	bic.w	r3, r3, #2
 8007118:	f043 0302 	orr.w	r3, r3, #2
 800711c:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800711e:	6853      	ldr	r3, [r2, #4]
 8007120:	6861      	ldr	r1, [r4, #4]
 8007122:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007126:	430b      	orrs	r3, r1
 8007128:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800712a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800712e:	fa91 f1a1 	rbit	r1, r1
 8007132:	2302      	movs	r3, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007134:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8007138:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800713c:	fa93 f3a3 	rbit	r3, r3
 8007140:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007144:	6965      	ldr	r5, [r4, #20]
 8007146:	68e2      	ldr	r2, [r4, #12]
 8007148:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 800714c:	432a      	orrs	r2, r5
 800714e:	6a25      	ldr	r5, [r4, #32]
 8007150:	fa0c f101 	lsl.w	r1, ip, r1
 8007154:	432a      	orrs	r2, r5
 8007156:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007158:	6b61      	ldr	r1, [r4, #52]	; 0x34
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800715a:	fa00 f303 	lsl.w	r3, r0, r3
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800715e:	2910      	cmp	r1, #16
                hadc->Init.ChannelsBank                                        |
 8007160:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007164:	d002      	beq.n	800716c <HAL_ADC_Init+0x78>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8007166:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007168:	4311      	orrs	r1, r2
 800716a:	430b      	orrs	r3, r1
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800716c:	6822      	ldr	r2, [r4, #0]
 800716e:	6811      	ldr	r1, [r2, #0]
 8007170:	0649      	lsls	r1, r1, #25
 8007172:	d551      	bpl.n	8007218 <HAL_ADC_Init+0x124>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8007174:	6925      	ldr	r5, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8007176:	6890      	ldr	r0, [r2, #8]
 8007178:	4942      	ldr	r1, [pc, #264]	; (8007284 <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800717a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 800717e:	ea01 0100 	and.w	r1, r1, r0
 8007182:	ea41 0103 	orr.w	r1, r1, r3
 8007186:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007188:	d017      	beq.n	80071ba <HAL_ADC_Init+0xc6>
 800718a:	2d01      	cmp	r5, #1
 800718c:	d015      	beq.n	80071ba <HAL_ADC_Init+0xc6>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800718e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007190:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 8007194:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8007196:	6891      	ldr	r1, [r2, #8]
 8007198:	4a3b      	ldr	r2, [pc, #236]	; (8007288 <HAL_ADC_Init+0x194>)
 800719a:	400a      	ands	r2, r1
 800719c:	429a      	cmp	r2, r3
 800719e:	d11f      	bne.n	80071e0 <HAL_ADC_Init+0xec>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80071a0:	2000      	movs	r0, #0
 80071a2:	6520      	str	r0, [r4, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80071a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80071a6:	f023 0303 	bic.w	r3, r3, #3
 80071aa:	f043 0301 	orr.w	r3, r3, #1
 80071ae:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80071b0:	b003      	add	sp, #12
 80071b2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80071b4:	2001      	movs	r0, #1
}
 80071b6:	b003      	add	sp, #12
 80071b8:	bd30      	pop	{r4, r5, pc}
 80071ba:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80071be:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80071c0:	fa91 f1a1 	rbit	r1, r1
 80071c4:	fab1 f081 	clz	r0, r1
 80071c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80071ca:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 80071ce:	3901      	subs	r1, #1
 80071d0:	4081      	lsls	r1, r0
 80071d2:	4329      	orrs	r1, r5
 80071d4:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80071d6:	6891      	ldr	r1, [r2, #8]
 80071d8:	4a2b      	ldr	r2, [pc, #172]	; (8007288 <HAL_ADC_Init+0x194>)
 80071da:	400a      	ands	r2, r1
 80071dc:	429a      	cmp	r2, r3
 80071de:	d0df      	beq.n	80071a0 <HAL_ADC_Init+0xac>
      tmp_hal_status = HAL_ERROR;
 80071e0:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80071e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80071e4:	f023 0312 	bic.w	r3, r3, #18
 80071e8:	f043 0310 	orr.w	r3, r3, #16
 80071ec:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80071f0:	4303      	orrs	r3, r0
 80071f2:	6523      	str	r3, [r4, #80]	; 0x50
}
 80071f4:	b003      	add	sp, #12
 80071f6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071f8:	4a24      	ldr	r2, [pc, #144]	; (800728c <HAL_ADC_Init+0x198>)
    ADC_CLEAR_ERRORCODE(hadc);
 80071fa:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 80071fc:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007200:	6a13      	ldr	r3, [r2, #32]
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	6213      	str	r3, [r2, #32]
 8007208:	6a13      	ldr	r3, [r2, #32]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	9301      	str	r3, [sp, #4]
 8007210:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8007212:	f7ff fc45 	bl	8006aa0 <HAL_ADC_MspInit>
 8007216:	e776      	b.n	8007106 <HAL_ADC_Init+0x12>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8007218:	69a1      	ldr	r1, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800721a:	68a5      	ldr	r5, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800721c:	430b      	orrs	r3, r1
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800721e:	69e1      	ldr	r1, [r4, #28]
 8007220:	ea45 0c01 	orr.w	ip, r5, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8007224:	6925      	ldr	r5, [r4, #16]
 8007226:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800722a:	d00c      	beq.n	8007246 <HAL_ADC_Init+0x152>
 800722c:	2d01      	cmp	r5, #1
 800722e:	d00a      	beq.n	8007246 <HAL_ADC_Init+0x152>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007230:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8007234:	2901      	cmp	r1, #1
 8007236:	d00b      	beq.n	8007250 <HAL_ADC_Init+0x15c>
        MODIFY_REG(hadc->Instance->CR1,
 8007238:	6850      	ldr	r0, [r2, #4]
 800723a:	4915      	ldr	r1, [pc, #84]	; (8007290 <HAL_ADC_Init+0x19c>)
 800723c:	4001      	ands	r1, r0
 800723e:	ea41 010c 	orr.w	r1, r1, ip
 8007242:	6051      	str	r1, [r2, #4]
 8007244:	e797      	b.n	8007176 <HAL_ADC_Init+0x82>
                  hadc->Init.LowPowerAutoPowerOff           |
 8007246:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 800724a:	e7f1      	b.n	8007230 <HAL_ADC_Init+0x13c>
    return HAL_ERROR;
 800724c:	2001      	movs	r0, #1
}
 800724e:	4770      	bx	lr
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8007250:	b968      	cbnz	r0, 800726e <HAL_ADC_Init+0x17a>
 8007252:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8007256:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800725a:	fab1 f081 	clz	r0, r1
 800725e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007260:	3901      	subs	r1, #1
 8007262:	4081      	lsls	r1, r0
 8007264:	ea41 010c 	orr.w	r1, r1, ip
 8007268:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 800726c:	e7e4      	b.n	8007238 <HAL_ADC_Init+0x144>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800726e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007270:	f041 0120 	orr.w	r1, r1, #32
 8007274:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007276:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007278:	f041 0101 	orr.w	r1, r1, #1
 800727c:	6521      	str	r1, [r4, #80]	; 0x50
 800727e:	e7db      	b.n	8007238 <HAL_ADC_Init+0x144>
 8007280:	40012700 	.word	0x40012700
 8007284:	c0fff18d 	.word	0xc0fff18d
 8007288:	bf80fffe 	.word	0xbf80fffe
 800728c:	40023800 	.word	0x40023800
 8007290:	fcfc16ff 	.word	0xfcfc16ff

08007294 <HAL_ADC_DeInit>:
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007294:	2800      	cmp	r0, #0
 8007296:	d075      	beq.n	8007384 <HAL_ADC_DeInit+0xf0>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8007298:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 800729a:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800729c:	f042 0202 	orr.w	r2, r2, #2
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80072a0:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80072a2:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (ADC_IS_ENABLE(hadc) != RESET)
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4604      	mov	r4, r0
 80072a8:	0655      	lsls	r5, r2, #25
 80072aa:	d453      	bmi.n	8007354 <HAL_ADC_DeInit+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 80072ac:	f06f 001f 	mvn.w	r0, #31
 80072b0:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80072b2:	6858      	ldr	r0, [r3, #4]
 80072b4:	4939      	ldr	r1, [pc, #228]	; (800739c <HAL_ADC_DeInit+0x108>)
    ADC_CR2_CLEAR(hadc);
 80072b6:	4a3a      	ldr	r2, [pc, #232]	; (80073a0 <HAL_ADC_DeInit+0x10c>)
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80072b8:	4001      	ands	r1, r0
 80072ba:	6059      	str	r1, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 80072bc:	6899      	ldr	r1, [r3, #8]
 80072be:	400a      	ands	r2, r1
 80072c0:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 80072c2:	bf00      	nop
    ADC_SMPR1_CLEAR(hadc);
 80072c4:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80072c6:	4a37      	ldr	r2, [pc, #220]	; (80073a4 <HAL_ADC_DeInit+0x110>)
    ADC_SMPR1_CLEAR(hadc);
 80072c8:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 80072ca:	4837      	ldr	r0, [pc, #220]	; (80073a8 <HAL_ADC_DeInit+0x114>)
    ADC_SMPR1_CLEAR(hadc);
 80072cc:	0d49      	lsrs	r1, r1, #21
 80072ce:	0549      	lsls	r1, r1, #21
 80072d0:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 80072d2:	6919      	ldr	r1, [r3, #16]
 80072d4:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80072d8:	6119      	str	r1, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 80072da:	6959      	ldr	r1, [r3, #20]
 80072dc:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80072e0:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80072e2:	6999      	ldr	r1, [r3, #24]
 80072e4:	4011      	ands	r1, r2
 80072e6:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 80072e8:	69d9      	ldr	r1, [r3, #28]
 80072ea:	4011      	ands	r1, r2
 80072ec:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 80072ee:	6a19      	ldr	r1, [r3, #32]
 80072f0:	4011      	ands	r1, r2
 80072f2:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 80072f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80072f6:	4011      	ands	r1, r2
 80072f8:	6259      	str	r1, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 80072fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80072fc:	4011      	ands	r1, r2
 80072fe:	6299      	str	r1, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8007300:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007302:	400a      	ands	r2, r1
 8007304:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8007306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8007308:	4928      	ldr	r1, [pc, #160]	; (80073ac <HAL_ADC_DeInit+0x118>)
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 800730a:	4010      	ands	r0, r2
 800730c:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 800730e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_ADC_MspDeInit(hadc);
 8007310:	4620      	mov	r0, r4
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8007312:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8007316:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8007318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800731a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800731e:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 8007320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007322:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8007326:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 8007328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800732a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800732e:	641a      	str	r2, [r3, #64]	; 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 8007330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007332:	0d92      	lsrs	r2, r2, #22
 8007334:	0592      	lsls	r2, r2, #22
 8007336:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8007338:	684b      	ldr	r3, [r1, #4]
 800733a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800733e:	604b      	str	r3, [r1, #4]
    HAL_ADC_MspDeInit(hadc);
 8007340:	f7ff fc04 	bl	8006b4c <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8007344:	2300      	movs	r3, #0
    hadc->State = HAL_ADC_STATE_RESET;
 8007346:	4618      	mov	r0, r3
    ADC_CLEAR_ERRORCODE(hadc);
 8007348:	6523      	str	r3, [r4, #80]	; 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 800734a:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 800734c:	2300      	movs	r3, #0
 800734e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 8007352:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007354:	689a      	ldr	r2, [r3, #8]
 8007356:	f022 0201 	bic.w	r2, r2, #1
 800735a:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800735c:	f7ff feb2 	bl	80070c4 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007360:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8007362:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	0650      	lsls	r0, r2, #25
 8007368:	d5a0      	bpl.n	80072ac <HAL_ADC_DeInit+0x18>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800736a:	f7ff feab 	bl	80070c4 <HAL_GetTick>
 800736e:	1b40      	subs	r0, r0, r5
 8007370:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007372:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8007374:	d902      	bls.n	800737c <HAL_ADC_DeInit+0xe8>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	0651      	lsls	r1, r2, #25
 800737a:	d405      	bmi.n	8007388 <HAL_ADC_DeInit+0xf4>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	0652      	lsls	r2, r2, #25
 8007380:	d4f3      	bmi.n	800736a <HAL_ADC_DeInit+0xd6>
 8007382:	e793      	b.n	80072ac <HAL_ADC_DeInit+0x18>
    return HAL_ERROR;
 8007384:	2001      	movs	r0, #1
}
 8007386:	4770      	bx	lr
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007388:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800738a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800738c:	f043 0310 	orr.w	r3, r3, #16
 8007390:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007392:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007394:	4303      	orrs	r3, r0
 8007396:	6523      	str	r3, [r4, #80]	; 0x50
  if (tmp_hal_status == HAL_OK)
 8007398:	e7d8      	b.n	800734c <HAL_ADC_DeInit+0xb8>
 800739a:	bf00      	nop
 800739c:	f83c0000 	.word	0xf83c0000
 80073a0:	8080f08c 	.word	0x8080f08c
 80073a4:	fffff000 	.word	0xfffff000
 80073a8:	fe0f8000 	.word	0xfe0f8000
 80073ac:	40012700 	.word	0x40012700

080073b0 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80073b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80073b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073b4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80073b8:	d126      	bne.n	8007408 <ADC_DMAConvCplt+0x58>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80073bc:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 80073c2:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073c4:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80073c6:	688a      	ldr	r2, [r1, #8]
 80073c8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80073cc:	d118      	bne.n	8007400 <ADC_DMAConvCplt+0x50>
 80073ce:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80073d2:	b9aa      	cbnz	r2, 8007400 <ADC_DMAConvCplt+0x50>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80073d4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80073d6:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 80073da:	d002      	beq.n	80073e2 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80073dc:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80073de:	0550      	lsls	r0, r2, #21
 80073e0:	d40e      	bmi.n	8007400 <ADC_DMAConvCplt+0x50>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80073e2:	684a      	ldr	r2, [r1, #4]
 80073e4:	f022 0220 	bic.w	r2, r2, #32
 80073e8:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80073ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073f0:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80073f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073f4:	04d2      	lsls	r2, r2, #19
 80073f6:	d403      	bmi.n	8007400 <ADC_DMAConvCplt+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073fa:	f042 0201 	orr.w	r2, r2, #1
 80073fe:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007400:	4618      	mov	r0, r3
 8007402:	f7ff f99f 	bl	8006744 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8007406:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8007408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	4718      	bx	r3
 800740e:	bf00      	nop

08007410 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007410:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007412:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007414:	f7ff f986 	bl	8006724 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007418:	bd08      	pop	{r3, pc}
 800741a:	bf00      	nop

0800741c <HAL_ADC_ErrorCallback>:
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop

08007420 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007420:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8007422:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007424:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800742a:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800742c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800742e:	f043 0304 	orr.w	r3, r3, #4
 8007432:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007434:	f7ff fff2 	bl	800741c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007438:	bd08      	pop	{r3, pc}
 800743a:	bf00      	nop

0800743c <HAL_ADC_IRQHandler>:
{
 800743c:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800743e:	6803      	ldr	r3, [r0, #0]
{
 8007440:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	0691      	lsls	r1, r2, #26
 8007446:	d502      	bpl.n	800744e <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	0792      	lsls	r2, r2, #30
 800744c:	d445      	bmi.n	80074da <HAL_ADC_IRQHandler+0x9e>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	0612      	lsls	r2, r2, #24
 8007452:	d502      	bpl.n	800745a <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	0755      	lsls	r5, r2, #29
 8007458:	d40c      	bmi.n	8007474 <HAL_ADC_IRQHandler+0x38>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	0655      	lsls	r5, r2, #25
 800745e:	d502      	bpl.n	8007466 <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	07d0      	lsls	r0, r2, #31
 8007464:	d46f      	bmi.n	8007546 <HAL_ADC_IRQHandler+0x10a>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	0151      	lsls	r1, r2, #5
 800746a:	d502      	bpl.n	8007472 <HAL_ADC_IRQHandler+0x36>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	0692      	lsls	r2, r2, #26
 8007470:	d45c      	bmi.n	800752c <HAL_ADC_IRQHandler+0xf0>
}
 8007472:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007474:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007476:	06d0      	lsls	r0, r2, #27
 8007478:	d403      	bmi.n	8007482 <HAL_ADC_IRQHandler+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800747a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800747c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007480:	64e2      	str	r2, [r4, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8007488:	d11f      	bne.n	80074ca <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800748a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800748c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8007490:	d002      	beq.n	8007498 <HAL_ADC_IRQHandler+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8007492:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007494:	0551      	lsls	r1, r2, #21
 8007496:	d418      	bmi.n	80074ca <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007498:	685a      	ldr	r2, [r3, #4]
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800749a:	0552      	lsls	r2, r2, #21
 800749c:	d415      	bmi.n	80074ca <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800749e:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80074a0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80074a4:	d111      	bne.n	80074ca <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80074a6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80074aa:	b972      	cbnz	r2, 80074ca <HAL_ADC_IRQHandler+0x8e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074b2:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80074b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80074b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ba:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80074bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80074be:	05db      	lsls	r3, r3, #23
 80074c0:	d403      	bmi.n	80074ca <HAL_ADC_IRQHandler+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80074c4:	f043 0301 	orr.w	r3, r3, #1
 80074c8:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 f9ea 	bl	80078a4 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80074d0:	f06f 020c 	mvn.w	r2, #12
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e7bf      	b.n	800745a <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80074da:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80074dc:	06d5      	lsls	r5, r2, #27
 80074de:	d403      	bmi.n	80074e8 <HAL_ADC_IRQHandler+0xac>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80074e0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80074e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e6:	64c2      	str	r2, [r0, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80074ee:	d115      	bne.n	800751c <HAL_ADC_IRQHandler+0xe0>
 80074f0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80074f4:	b992      	cbnz	r2, 800751c <HAL_ADC_IRQHandler+0xe0>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80074f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074f8:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 80074fc:	d12f      	bne.n	800755e <HAL_ADC_IRQHandler+0x122>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	f022 0220 	bic.w	r2, r2, #32
 8007504:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007506:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800750c:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800750e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007510:	04d9      	lsls	r1, r3, #19
 8007512:	d403      	bmi.n	800751c <HAL_ADC_IRQHandler+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007514:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007516:	f043 0301 	orr.w	r3, r3, #1
 800751a:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_ConvCpltCallback(hadc);
 800751c:	4620      	mov	r0, r4
 800751e:	f7ff f911 	bl	8006744 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007522:	f06f 0212 	mvn.w	r2, #18
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	e790      	b.n	800744e <HAL_ADC_IRQHandler+0x12>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800752c:	f06f 0520 	mvn.w	r5, #32
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007530:	6d22      	ldr	r2, [r4, #80]	; 0x50
      HAL_ADC_ErrorCallback(hadc);
 8007532:	4620      	mov	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007534:	f042 0202 	orr.w	r2, r2, #2
 8007538:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800753a:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800753c:	f7ff ff6e 	bl	800741c <HAL_ADC_ErrorCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	601d      	str	r5, [r3, #0]
}
 8007544:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007546:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007548:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800754a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800754e:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007550:	f7ff f908 	bl	8006764 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007554:	f06f 0201 	mvn.w	r2, #1
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e783      	b.n	8007466 <HAL_ADC_IRQHandler+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800755e:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007560:	0550      	lsls	r0, r2, #21
 8007562:	d4db      	bmi.n	800751c <HAL_ADC_IRQHandler+0xe0>
 8007564:	e7cb      	b.n	80074fe <HAL_ADC_IRQHandler+0xc2>
 8007566:	bf00      	nop

08007568 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8007568:	2300      	movs	r3, #0
{
 800756a:	b530      	push	{r4, r5, lr}
 800756c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800756e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8007570:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8007574:	2b01      	cmp	r3, #1
 8007576:	f000 80aa 	beq.w	80076ce <HAL_ADC_ConfigChannel+0x166>
 800757a:	2301      	movs	r3, #1
 800757c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 8007580:	684b      	ldr	r3, [r1, #4]
 8007582:	4602      	mov	r2, r0
 8007584:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR5,
 8007586:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7)
 8007588:	d924      	bls.n	80075d4 <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13)
 800758a:	2b0c      	cmp	r3, #12
 800758c:	d866      	bhi.n	800765c <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SQR4,
 800758e:	f04f 0c1f 	mov.w	ip, #31
 8007592:	680c      	ldr	r4, [r1, #0]
 8007594:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007598:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800759a:	3b23      	subs	r3, #35	; 0x23
 800759c:	fa04 fe03 	lsl.w	lr, r4, r3
 80075a0:	fa0c f303 	lsl.w	r3, ip, r3
 80075a4:	ea25 0303 	bic.w	r3, r5, r3
 80075a8:	ea43 030e 	orr.w	r3, r3, lr
 80075ac:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel < ADC_CHANNEL_10)
 80075ae:	2c09      	cmp	r4, #9
 80075b0:	d822      	bhi.n	80075f8 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR3,
 80075b2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80075b6:	2407      	movs	r4, #7
 80075b8:	6943      	ldr	r3, [r0, #20]
 80075ba:	6889      	ldr	r1, [r1, #8]
 80075bc:	40ac      	lsls	r4, r5
 80075be:	40a9      	lsls	r1, r5
 80075c0:	ea23 0404 	bic.w	r4, r3, r4
 80075c4:	430c      	orrs	r4, r1
 80075c6:	6144      	str	r4, [r0, #20]
  __HAL_UNLOCK(hadc);
 80075c8:	2300      	movs	r3, #0
  return tmp_hal_status;
 80075ca:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 80075cc:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
}
 80075d0:	b003      	add	sp, #12
 80075d2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR5,
 80075d4:	f04f 0c1f 	mov.w	ip, #31
 80075d8:	680c      	ldr	r4, [r1, #0]
 80075da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80075de:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80075e0:	3b05      	subs	r3, #5
 80075e2:	fa04 fe03 	lsl.w	lr, r4, r3
 80075e6:	fa0c f303 	lsl.w	r3, ip, r3
 80075ea:	ea25 0303 	bic.w	r3, r5, r3
 80075ee:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel < ADC_CHANNEL_10)
 80075f2:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SQR5,
 80075f4:	6403      	str	r3, [r0, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 80075f6:	d9dc      	bls.n	80075b2 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80075f8:	2c13      	cmp	r4, #19
 80075fa:	d844      	bhi.n	8007686 <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 80075fc:	f04f 0c07 	mov.w	ip, #7
 8007600:	688d      	ldr	r5, [r1, #8]
 8007602:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8007606:	6903      	ldr	r3, [r0, #16]
 8007608:	391e      	subs	r1, #30
 800760a:	408d      	lsls	r5, r1
 800760c:	fa0c f101 	lsl.w	r1, ip, r1
 8007610:	ea23 0301 	bic.w	r3, r3, r1
 8007614:	432b      	orrs	r3, r5
 8007616:	6103      	str	r3, [r0, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007618:	f1a4 0310 	sub.w	r3, r4, #16
 800761c:	2b01      	cmp	r3, #1
 800761e:	d8d3      	bhi.n	80075c8 <HAL_ADC_ConfigChannel+0x60>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8007620:	4b34      	ldr	r3, [pc, #208]	; (80076f4 <HAL_ADC_ConfigChannel+0x18c>)
 8007622:	6859      	ldr	r1, [r3, #4]
 8007624:	0209      	lsls	r1, r1, #8
 8007626:	d4cf      	bmi.n	80075c8 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8007628:	6859      	ldr	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800762a:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800762c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007630:	6059      	str	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007632:	d1c9      	bne.n	80075c8 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007634:	4b30      	ldr	r3, [pc, #192]	; (80076f8 <HAL_ADC_ConfigChannel+0x190>)
 8007636:	4931      	ldr	r1, [pc, #196]	; (80076fc <HAL_ADC_ConfigChannel+0x194>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	fba1 1303 	umull	r1, r3, r1, r3
 800763e:	0c9b      	lsrs	r3, r3, #18
 8007640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8007648:	9b01      	ldr	r3, [sp, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0bc      	beq.n	80075c8 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800764e:	9b01      	ldr	r3, [sp, #4]
 8007650:	3b01      	subs	r3, #1
 8007652:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8007654:	9b01      	ldr	r3, [sp, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f9      	bne.n	800764e <HAL_ADC_ConfigChannel+0xe6>
 800765a:	e7b5      	b.n	80075c8 <HAL_ADC_ConfigChannel+0x60>
  else if (sConfig->Rank < 19)
 800765c:	2b12      	cmp	r3, #18
 800765e:	d925      	bls.n	80076ac <HAL_ADC_ConfigChannel+0x144>
  else if (sConfig->Rank < 25)
 8007660:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 8007662:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 8007666:	d835      	bhi.n	80076d4 <HAL_ADC_ConfigChannel+0x16c>
    MODIFY_REG(hadc->Instance->SQR2,
 8007668:	f04f 0c1f 	mov.w	ip, #31
 800766c:	680c      	ldr	r4, [r1, #0]
 800766e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007670:	3b5f      	subs	r3, #95	; 0x5f
 8007672:	fa04 fe03 	lsl.w	lr, r4, r3
 8007676:	fa0c f303 	lsl.w	r3, ip, r3
 800767a:	ea25 0303 	bic.w	r3, r5, r3
 800767e:	ea43 030e 	orr.w	r3, r3, lr
 8007682:	6343      	str	r3, [r0, #52]	; 0x34
 8007684:	e793      	b.n	80075ae <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8007686:	2c1a      	cmp	r4, #26
 8007688:	d80d      	bhi.n	80076a6 <HAL_ADC_ConfigChannel+0x13e>
    MODIFY_REG(hadc->Instance->SMPR1,
 800768a:	2507      	movs	r5, #7
 800768c:	6889      	ldr	r1, [r1, #8]
 800768e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8007692:	68c3      	ldr	r3, [r0, #12]
 8007694:	3c3c      	subs	r4, #60	; 0x3c
 8007696:	40a1      	lsls	r1, r4
 8007698:	fa05 f404 	lsl.w	r4, r5, r4
 800769c:	ea23 0304 	bic.w	r3, r3, r4
 80076a0:	430b      	orrs	r3, r1
 80076a2:	60c3      	str	r3, [r0, #12]
 80076a4:	e790      	b.n	80075c8 <HAL_ADC_ConfigChannel+0x60>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80076a6:	bf00      	nop
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80076a8:	680c      	ldr	r4, [r1, #0]
 80076aa:	e7b5      	b.n	8007618 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR3,
 80076ac:	f04f 0c1f 	mov.w	ip, #31
 80076b0:	680c      	ldr	r4, [r1, #0]
 80076b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80076b6:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80076b8:	3b41      	subs	r3, #65	; 0x41
 80076ba:	fa04 fe03 	lsl.w	lr, r4, r3
 80076be:	fa0c f303 	lsl.w	r3, ip, r3
 80076c2:	ea25 0303 	bic.w	r3, r5, r3
 80076c6:	ea43 030e 	orr.w	r3, r3, lr
 80076ca:	6383      	str	r3, [r0, #56]	; 0x38
 80076cc:	e76f      	b.n	80075ae <HAL_ADC_ConfigChannel+0x46>
  __HAL_LOCK(hadc);
 80076ce:	2002      	movs	r0, #2
}
 80076d0:	b003      	add	sp, #12
 80076d2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR1,
 80076d4:	f04f 0c1f 	mov.w	ip, #31
 80076d8:	680c      	ldr	r4, [r1, #0]
 80076da:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80076dc:	3b7d      	subs	r3, #125	; 0x7d
 80076de:	fa04 fe03 	lsl.w	lr, r4, r3
 80076e2:	fa0c f303 	lsl.w	r3, ip, r3
 80076e6:	ea25 0303 	bic.w	r3, r5, r3
 80076ea:	ea43 030e 	orr.w	r3, r3, lr
 80076ee:	6303      	str	r3, [r0, #48]	; 0x30
 80076f0:	e75d      	b.n	80075ae <HAL_ADC_ConfigChannel+0x46>
 80076f2:	bf00      	nop
 80076f4:	40012700 	.word	0x40012700
 80076f8:	20000014 	.word	0x20000014
 80076fc:	431bde83 	.word	0x431bde83

08007700 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8007700:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007704:	680a      	ldr	r2, [r1, #0]
  __HAL_LOCK(hadc);
 8007706:	2b01      	cmp	r3, #1
 8007708:	d024      	beq.n	8007754 <HAL_ADC_AnalogWDGConfig+0x54>
 800770a:	2301      	movs	r3, #1
{
 800770c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800770e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if(AnalogWDGConfig->ITMode == ENABLE)
 8007712:	7a0b      	ldrb	r3, [r1, #8]
 8007714:	4686      	mov	lr, r0
 8007716:	2b01      	cmp	r3, #1
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8007718:	6803      	ldr	r3, [r0, #0]
  if(AnalogWDGConfig->ITMode == ENABLE)
 800771a:	d016      	beq.n	800774a <HAL_ADC_AnalogWDGConfig+0x4a>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800771c:	685c      	ldr	r4, [r3, #4]
 800771e:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8007722:	605c      	str	r4, [r3, #4]
  __HAL_UNLOCK(hadc);
 8007724:	f04f 0c00 	mov.w	ip, #0
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8007728:	6858      	ldr	r0, [r3, #4]
 800772a:	4c0b      	ldr	r4, [pc, #44]	; (8007758 <HAL_ADC_AnalogWDGConfig+0x58>)
 800772c:	4004      	ands	r4, r0
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 800772e:	6848      	ldr	r0, [r1, #4]
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8007730:	605c      	str	r4, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 8007732:	4302      	orrs	r2, r0
 8007734:	6858      	ldr	r0, [r3, #4]
 8007736:	4302      	orrs	r2, r0
 8007738:	605a      	str	r2, [r3, #4]
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800773a:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 800773e:	6298      	str	r0, [r3, #40]	; 0x28
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8007740:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_UNLOCK(hadc);
 8007742:	f88e c048 	strb.w	ip, [lr, #72]	; 0x48
  return HAL_OK;
 8007746:	4660      	mov	r0, ip
}
 8007748:	bd10      	pop	{r4, pc}
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800774a:	6858      	ldr	r0, [r3, #4]
 800774c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8007750:	6058      	str	r0, [r3, #4]
 8007752:	e7e7      	b.n	8007724 <HAL_ADC_AnalogWDGConfig+0x24>
  __HAL_LOCK(hadc);
 8007754:	2002      	movs	r0, #2
}
 8007756:	4770      	bx	lr
 8007758:	ff3ffde0 	.word	0xff3ffde0

0800775c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800775c:	2300      	movs	r3, #0
{
 800775e:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007760:	6802      	ldr	r2, [r0, #0]
{
 8007762:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8007764:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007766:	6813      	ldr	r3, [r2, #0]
 8007768:	0659      	lsls	r1, r3, #25
 800776a:	d429      	bmi.n	80077c0 <ADC_Enable+0x64>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800776c:	4b1c      	ldr	r3, [pc, #112]	; (80077e0 <ADC_Enable+0x84>)
 800776e:	4604      	mov	r4, r0
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	481c      	ldr	r0, [pc, #112]	; (80077e4 <ADC_Enable+0x88>)
    __HAL_ADC_ENABLE(hadc);
 8007774:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007776:	fba0 0303 	umull	r0, r3, r0, r3
 800777a:	0c9b      	lsrs	r3, r3, #18
 800777c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8007780:	f041 0101 	orr.w	r1, r1, #1
 8007784:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007786:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8007788:	9b01      	ldr	r3, [sp, #4]
 800778a:	b12b      	cbz	r3, 8007798 <ADC_Enable+0x3c>
      wait_loop_index--;
 800778c:	9b01      	ldr	r3, [sp, #4]
 800778e:	3b01      	subs	r3, #1
 8007790:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8007792:	9b01      	ldr	r3, [sp, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1f9      	bne.n	800778c <ADC_Enable+0x30>
    tickstart = HAL_GetTick();    
 8007798:	f7ff fc94 	bl	80070c4 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800779c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();    
 800779e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	065a      	lsls	r2, r3, #25
 80077a4:	d40c      	bmi.n	80077c0 <ADC_Enable+0x64>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80077a6:	f7ff fc8d 	bl	80070c4 <HAL_GetTick>
 80077aa:	1b43      	subs	r3, r0, r5
 80077ac:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 80077ae:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80077b0:	d903      	bls.n	80077ba <ADC_Enable+0x5e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80077b8:	d005      	beq.n	80077c6 <ADC_Enable+0x6a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	065b      	lsls	r3, r3, #25
 80077be:	d5f2      	bpl.n	80077a6 <ADC_Enable+0x4a>
  return HAL_OK;
 80077c0:	2000      	movs	r0, #0
}
 80077c2:	b003      	add	sp, #12
 80077c4:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 80077c6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 80077ca:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077ce:	f043 0310 	orr.w	r3, r3, #16
 80077d2:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80077d6:	4303      	orrs	r3, r0
 80077d8:	6523      	str	r3, [r4, #80]	; 0x50
}
 80077da:	b003      	add	sp, #12
 80077dc:	bd30      	pop	{r4, r5, pc}
 80077de:	bf00      	nop
 80077e0:	20000014 	.word	0x20000014
 80077e4:	431bde83 	.word	0x431bde83

080077e8 <HAL_ADC_Start_DMA>:
{
 80077e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 80077ec:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 80077f0:	2d01      	cmp	r5, #1
 80077f2:	d04c      	beq.n	800788e <HAL_ADC_Start_DMA+0xa6>
 80077f4:	2301      	movs	r3, #1
 80077f6:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 80077fa:	4604      	mov	r4, r0
 80077fc:	4688      	mov	r8, r1
 80077fe:	4617      	mov	r7, r2
 8007800:	f7ff ffac 	bl	800775c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8007804:	4605      	mov	r5, r0
 8007806:	2800      	cmp	r0, #0
 8007808:	d13e      	bne.n	8007888 <HAL_ADC_Start_DMA+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 800780a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800780c:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800780e:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8007812:	f020 0001 	bic.w	r0, r0, #1
 8007816:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800781a:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800781c:	6873      	ldr	r3, [r6, #4]
 800781e:	055b      	lsls	r3, r3, #21
 8007820:	d505      	bpl.n	800782e <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007822:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007824:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800782c:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 800782e:	2100      	movs	r1, #0
 8007830:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007834:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007838:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800783a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800783c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007840:	bf18      	it	ne
 8007842:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007844:	4642      	mov	r2, r8
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007846:	bf18      	it	ne
 8007848:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800784c:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800784e:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007850:	4f11      	ldr	r7, [pc, #68]	; (8007898 <HAL_ADC_Start_DMA+0xb0>)
 8007852:	6287      	str	r7, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007854:	4f11      	ldr	r7, [pc, #68]	; (800789c <HAL_ADC_Start_DMA+0xb4>)
 8007856:	62c7      	str	r7, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007858:	4f11      	ldr	r7, [pc, #68]	; (80078a0 <HAL_ADC_Start_DMA+0xb8>)
 800785a:	6307      	str	r7, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800785c:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800785e:	6871      	ldr	r1, [r6, #4]
 8007860:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8007864:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007866:	68b1      	ldr	r1, [r6, #8]
 8007868:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800786c:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800786e:	f106 0158 	add.w	r1, r6, #88	; 0x58
 8007872:	f000 f98f 	bl	8007b94 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800787e:	d103      	bne.n	8007888 <HAL_ADC_Start_DMA+0xa0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8007880:	689a      	ldr	r2, [r3, #8]
 8007882:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007886:	609a      	str	r2, [r3, #8]
}
 8007888:	4628      	mov	r0, r5
 800788a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 800788e:	2502      	movs	r5, #2
}
 8007890:	4628      	mov	r0, r5
 8007892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007896:	bf00      	nop
 8007898:	080073b1 	.word	0x080073b1
 800789c:	08007411 	.word	0x08007411
 80078a0:	08007421 	.word	0x08007421

080078a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop

080078a8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078a8:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078ac:	4906      	ldr	r1, [pc, #24]	; (80078c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80078ae:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078b0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80078b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078b6:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80078c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80078c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80078c6:	4770      	bx	lr
 80078c8:	e000ed00 	.word	0xe000ed00

080078cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078cc:	4b1c      	ldr	r3, [pc, #112]	; (8007940 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078ce:	b500      	push	{lr}
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078d6:	f1c3 0e07 	rsb	lr, r3, #7
 80078da:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078de:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078e2:	bf28      	it	cs
 80078e4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078e8:	f1bc 0f06 	cmp.w	ip, #6
 80078ec:	d91b      	bls.n	8007926 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078ee:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078f2:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078f4:	fa0c fc03 	lsl.w	ip, ip, r3
 80078f8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078fc:	f04f 3cff 	mov.w	ip, #4294967295
 8007900:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007904:	ea21 010c 	bic.w	r1, r1, ip
 8007908:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800790a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800790c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8007910:	db0c      	blt.n	800792c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007912:	0109      	lsls	r1, r1, #4
 8007914:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8007918:	b2c9      	uxtb	r1, r1
 800791a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800791e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007922:	f85d fb04 	ldr.w	pc, [sp], #4
 8007926:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007928:	4613      	mov	r3, r2
 800792a:	e7e7      	b.n	80078fc <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800792c:	4b05      	ldr	r3, [pc, #20]	; (8007944 <HAL_NVIC_SetPriority+0x78>)
 800792e:	f000 000f 	and.w	r0, r0, #15
 8007932:	0109      	lsls	r1, r1, #4
 8007934:	b2c9      	uxtb	r1, r1
 8007936:	4403      	add	r3, r0
 8007938:	7619      	strb	r1, [r3, #24]
 800793a:	f85d fb04 	ldr.w	pc, [sp], #4
 800793e:	bf00      	nop
 8007940:	e000ed00 	.word	0xe000ed00
 8007944:	e000ecfc 	.word	0xe000ecfc

08007948 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007948:	2800      	cmp	r0, #0
 800794a:	db07      	blt.n	800795c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800794c:	2301      	movs	r3, #1
 800794e:	f000 011f 	and.w	r1, r0, #31
 8007952:	4a03      	ldr	r2, [pc, #12]	; (8007960 <HAL_NVIC_EnableIRQ+0x18>)
 8007954:	0940      	lsrs	r0, r0, #5
 8007956:	408b      	lsls	r3, r1
 8007958:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	e000e100 	.word	0xe000e100

08007964 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007964:	2800      	cmp	r0, #0
 8007966:	db0d      	blt.n	8007984 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007968:	2201      	movs	r2, #1
 800796a:	4907      	ldr	r1, [pc, #28]	; (8007988 <HAL_NVIC_DisableIRQ+0x24>)
 800796c:	0943      	lsrs	r3, r0, #5
 800796e:	f000 001f 	and.w	r0, r0, #31
 8007972:	3320      	adds	r3, #32
 8007974:	fa02 f000 	lsl.w	r0, r2, r0
 8007978:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800797c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007980:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	e000e100 	.word	0xe000e100

0800798c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800798c:	3801      	subs	r0, #1
 800798e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007992:	d20f      	bcs.n	80079b4 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007994:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007998:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800799c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800799e:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079a0:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a2:	4c05      	ldr	r4, [pc, #20]	; (80079b8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80079a4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079aa:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079ac:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80079ae:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079b0:	6119      	str	r1, [r3, #16]
 80079b2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80079b4:	2001      	movs	r0, #1
 80079b6:	4770      	bx	lr
 80079b8:	e000ed00 	.word	0xe000ed00

080079bc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80079bc:	b188      	cbz	r0, 80079e2 <HAL_DAC_Init+0x26>
{
 80079be:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80079c0:	7903      	ldrb	r3, [r0, #4]
 80079c2:	4604      	mov	r4, r0
 80079c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80079c8:	b13b      	cbz	r3, 80079da <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80079ca:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80079cc:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80079ce:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80079d0:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80079d2:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80079d4:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80079d6:	4618      	mov	r0, r3
}
 80079d8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80079da:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80079dc:	f7ff f8d4 	bl	8006b88 <HAL_DAC_MspInit>
 80079e0:	e7f3      	b.n	80079ca <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80079e2:	2001      	movs	r0, #1
}
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop

080079e8 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80079e8:	7942      	ldrb	r2, [r0, #5]
 80079ea:	2a01      	cmp	r2, #1
 80079ec:	d02a      	beq.n	8007a44 <HAL_DAC_Start+0x5c>
{
 80079ee:	b410      	push	{r4}
 80079f0:	4603      	mov	r3, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80079f2:	2402      	movs	r4, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80079f4:	2201      	movs	r2, #1
 80079f6:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80079f8:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80079fa:	6804      	ldr	r4, [r0, #0]
 80079fc:	f001 0c10 	and.w	ip, r1, #16
 8007a00:	fa02 f20c 	lsl.w	r2, r2, ip
 8007a04:	4322      	orrs	r2, r4
 8007a06:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 8007a08:	b979      	cbnz	r1, 8007a2a <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007a0a:	6802      	ldr	r2, [r0, #0]
 8007a0c:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8007a10:	2a3c      	cmp	r2, #60	; 0x3c
 8007a12:	d103      	bne.n	8007a1c <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007a14:	6842      	ldr	r2, [r0, #4]
 8007a16:	f042 0201 	orr.w	r2, r2, #1
 8007a1a:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007a1c:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8007a1e:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8007a20:	715a      	strb	r2, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8007a22:	7119      	strb	r1, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007a24:	4610      	mov	r0, r2
}
 8007a26:	bc10      	pop	{r4}
 8007a28:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007a2a:	223c      	movs	r2, #60	; 0x3c
 8007a2c:	6801      	ldr	r1, [r0, #0]
 8007a2e:	fa02 fc0c 	lsl.w	ip, r2, ip
 8007a32:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8007a36:	4561      	cmp	r1, ip
 8007a38:	d1f0      	bne.n	8007a1c <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007a3a:	6842      	ldr	r2, [r0, #4]
 8007a3c:	f042 0202 	orr.w	r2, r2, #2
 8007a40:	6042      	str	r2, [r0, #4]
 8007a42:	e7eb      	b.n	8007a1c <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 8007a44:	2002      	movs	r0, #2
}
 8007a46:	4770      	bx	lr

08007a48 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007a48:	b410      	push	{r4}
  __IO uint32_t tmp = 0UL;
 8007a4a:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007a4c:	6800      	ldr	r0, [r0, #0]
{
 8007a4e:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8007a50:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8007a52:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8007a54:	b949      	cbnz	r1, 8007a6a <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007a56:	9901      	ldr	r1, [sp, #4]
 8007a58:	3108      	adds	r1, #8
 8007a5a:	440a      	add	r2, r1
 8007a5c:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
}
 8007a5e:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8007a60:	9a01      	ldr	r2, [sp, #4]
 8007a62:	6013      	str	r3, [r2, #0]
}
 8007a64:	b003      	add	sp, #12
 8007a66:	bc10      	pop	{r4}
 8007a68:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007a6a:	9901      	ldr	r1, [sp, #4]
 8007a6c:	3114      	adds	r1, #20
 8007a6e:	440a      	add	r2, r1
 8007a70:	9201      	str	r2, [sp, #4]
 8007a72:	e7f4      	b.n	8007a5e <HAL_DAC_SetValue+0x16>

08007a74 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007a74:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007a76:	7940      	ldrb	r0, [r0, #5]
 8007a78:	2801      	cmp	r0, #1
 8007a7a:	d022      	beq.n	8007ac2 <HAL_DAC_ConfigChannel+0x4e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a7c:	2002      	movs	r0, #2
{
 8007a7e:	b570      	push	{r4, r5, r6, lr}
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007a80:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007a84:	f640 76fe 	movw	r6, #4094	; 0xffe

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007a88:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 8007a8c:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a8e:	7118      	strb	r0, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8007a90:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007a92:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007a96:	f002 0210 	and.w	r2, r2, #16
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007a9a:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007a9c:	4096      	lsls	r6, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007a9e:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007aa2:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 = hdac->Instance->CR;
 8007aa6:	6821      	ldr	r1, [r4, #0]

  /* Return function status */
  return HAL_OK;
 8007aa8:	4670      	mov	r0, lr
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007aaa:	ea21 0106 	bic.w	r1, r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007aae:	430a      	orrs	r2, r1
  hdac->Instance->CR = tmpreg1;
 8007ab0:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007ab2:	6822      	ldr	r2, [r4, #0]
 8007ab4:	ea22 020c 	bic.w	r2, r2, ip
 8007ab8:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8007aba:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8007abc:	f883 e005 	strb.w	lr, [r3, #5]
}
 8007ac0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 8007ac2:	2002      	movs	r0, #2
}
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop

08007ac8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007ac8:	b370      	cbz	r0, 8007b28 <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007aca:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007acc:	2202      	movs	r2, #2
{
 8007ace:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007ad0:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ad4:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007ad6:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8007adc:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ade:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8007ae0:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
  tmp |=  hdma->Init.Direction        |
 8007ae4:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8007ae8:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007aea:	4910      	ldr	r1, [pc, #64]	; (8007b2c <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007aec:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007aee:	4d10      	ldr	r5, [pc, #64]	; (8007b30 <HAL_DMA_Init+0x68>)
 8007af0:	4401      	add	r1, r0
 8007af2:	fba5 5101 	umull	r5, r1, r5, r1
 8007af6:	0909      	lsrs	r1, r1, #4
 8007af8:	0089      	lsls	r1, r1, #2
 8007afa:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007afc:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8007afe:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b02:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b04:	6959      	ldr	r1, [r3, #20]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	6999      	ldr	r1, [r3, #24]
 8007b0a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b0c:	69d9      	ldr	r1, [r3, #28]
 8007b0e:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8007b10:	4908      	ldr	r1, [pc, #32]	; (8007b34 <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 8007b12:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 8007b16:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8007b18:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b1a:	639c      	str	r4, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b1c:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8007b20:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 8007b24:	4620      	mov	r0, r4
}
 8007b26:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007b28:	2001      	movs	r0, #1
}
 8007b2a:	4770      	bx	lr
 8007b2c:	bffd9ff8 	.word	0xbffd9ff8
 8007b30:	cccccccd 	.word	0xcccccccd
 8007b34:	40026000 	.word	0x40026000

08007b38 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8007b38:	b320      	cbz	r0, 8007b84 <HAL_DMA_DeInit+0x4c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8007b3a:	4603      	mov	r3, r0

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b3c:	2101      	movs	r1, #1
{
 8007b3e:	b430      	push	{r4, r5}
  hdma->Instance->CCR = 0U;
 8007b40:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8007b42:	6805      	ldr	r5, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007b44:	4810      	ldr	r0, [pc, #64]	; (8007b88 <HAL_DMA_DeInit+0x50>)
  __HAL_DMA_DISABLE(hdma);
 8007b46:	682a      	ldr	r2, [r5, #0]
 8007b48:	f022 0201 	bic.w	r2, r2, #1
 8007b4c:	602a      	str	r2, [r5, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007b4e:	4a0f      	ldr	r2, [pc, #60]	; (8007b8c <HAL_DMA_DeInit+0x54>)
 8007b50:	442a      	add	r2, r5
 8007b52:	fba0 0202 	umull	r0, r2, r0, r2
 8007b56:	0912      	lsrs	r2, r2, #4
 8007b58:	0092      	lsls	r2, r2, #2
 8007b5a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b5c:	f002 021c 	and.w	r2, r2, #28
 8007b60:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8007b64:	490a      	ldr	r1, [pc, #40]	; (8007b90 <HAL_DMA_DeInit+0x58>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8007b66:	4620      	mov	r0, r4
  hdma->DmaBaseAddress = DMA1;
 8007b68:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = 0U;
 8007b6a:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b6c:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b6e:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdma);
 8007b70:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 8007b74:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 8007b78:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8007b7c:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
}
 8007b80:	bc30      	pop	{r4, r5}
 8007b82:	4770      	bx	lr
    return HAL_ERROR;
 8007b84:	2001      	movs	r0, #1
}
 8007b86:	4770      	bx	lr
 8007b88:	cccccccd 	.word	0xcccccccd
 8007b8c:	bffd9ff8 	.word	0xbffd9ff8
 8007b90:	40026000 	.word	0x40026000

08007b94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b94:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b96:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007b9a:	2801      	cmp	r0, #1
 8007b9c:	d042      	beq.n	8007c24 <HAL_DMA_Start_IT+0x90>
{
 8007b9e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8007ba0:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8007ba2:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8007ba6:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8007baa:	42a0      	cmp	r0, r4
 8007bac:	fa5f fe80 	uxtb.w	lr, r0
 8007bb0:	d004      	beq.n	8007bbc <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007bb8:	2002      	movs	r0, #2
  }
  return status;
}
 8007bba:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8007bbc:	2002      	movs	r0, #2
 8007bbe:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bc2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8007bc4:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bc8:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8007bcc:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007bce:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8007bd2:	f025 0501 	bic.w	r5, r5, #1
 8007bd6:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007bd8:	f000 001c 	and.w	r0, r0, #28
 8007bdc:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8007be0:	fa0e f000 	lsl.w	r0, lr, r0
 8007be4:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007be6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007be8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007bec:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8007bee:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007bf2:	bf0b      	itete	eq
 8007bf4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8007bf6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007bf8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007bfa:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8007bfc:	b14b      	cbz	r3, 8007c12 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	f043 030e 	orr.w	r3, r3, #14
 8007c04:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8007c06:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c08:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8007c0a:	f043 0301 	orr.w	r3, r3, #1
 8007c0e:	6023      	str	r3, [r4, #0]
}
 8007c10:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	f023 0304 	bic.w	r3, r3, #4
 8007c18:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	f043 030a 	orr.w	r3, r3, #10
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	e7f0      	b.n	8007c06 <HAL_DMA_Start_IT+0x72>
  __HAL_LOCK(hdma);
 8007c24:	2002      	movs	r0, #2
}
 8007c26:	4770      	bx	lr

08007c28 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c28:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8007c2c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c2e:	2a02      	cmp	r2, #2
 8007c30:	d006      	beq.n	8007c40 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c32:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8007c34:	2200      	movs	r2, #0
    return HAL_ERROR;
 8007c36:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c38:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8007c3a:	f883 2020 	strb.w	r2, [r3, #32]
}
 8007c3e:	4770      	bx	lr
{
 8007c40:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c42:	f04f 0e01 	mov.w	lr, #1
    __HAL_UNLOCK(hdma);
 8007c46:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c4a:	6802      	ldr	r2, [r0, #0]
 8007c4c:	6811      	ldr	r1, [r2, #0]
 8007c4e:	f021 010e 	bic.w	r1, r1, #14
 8007c52:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007c54:	6811      	ldr	r1, [r2, #0]
 8007c56:	f021 0101 	bic.w	r1, r1, #1
 8007c5a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c5c:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8007c60:	f002 021c 	and.w	r2, r2, #28
 8007c64:	fa0e f202 	lsl.w	r2, lr, r2
 8007c68:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007c6a:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8007c6e:	f883 c020 	strb.w	ip, [r3, #32]
    return status;
 8007c72:	4660      	mov	r0, ip
}
 8007c74:	f85d fb04 	ldr.w	pc, [sp], #4

08007c78 <HAL_DMA_Abort_IT>:
{
 8007c78:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007c7a:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8007c7e:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007c80:	2a02      	cmp	r2, #2
 8007c82:	d003      	beq.n	8007c8c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c84:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8007c86:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c88:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c8c:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c8e:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c92:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c94:	6c02      	ldr	r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c96:	f024 040e 	bic.w	r4, r4, #14
 8007c9a:	600c      	str	r4, [r1, #0]
    __HAL_UNLOCK(hdma);
 8007c9c:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8007c9e:	680d      	ldr	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007ca0:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 8007ca4:	f025 0501 	bic.w	r5, r5, #1
 8007ca8:	600d      	str	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007caa:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8007cac:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007cae:	fa0c f202 	lsl.w	r2, ip, r2
 8007cb2:	606a      	str	r2, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007cb4:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8007cb8:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8007cbc:	b111      	cbz	r1, 8007cc4 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8007cbe:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8007cc0:	4620      	mov	r0, r4
}
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8007cc4:	4608      	mov	r0, r1
}
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}

08007cc8 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007cc8:	2204      	movs	r2, #4
{
 8007cca:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007ccc:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007cce:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007cd0:	f003 031c 	and.w	r3, r3, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007cd4:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8007cd6:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007cd8:	409a      	lsls	r2, r3
 8007cda:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8007cdc:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007cde:	d00e      	beq.n	8007cfe <HAL_DMA_IRQHandler+0x36>
 8007ce0:	f014 0f04 	tst.w	r4, #4
 8007ce4:	d00b      	beq.n	8007cfe <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ce6:	682b      	ldr	r3, [r5, #0]
 8007ce8:	069b      	lsls	r3, r3, #26
 8007cea:	d403      	bmi.n	8007cf4 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	f023 0304 	bic.w	r3, r3, #4
 8007cf2:	602b      	str	r3, [r5, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8007cf4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007cf6:	6072      	str	r2, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8007cf8:	b1cb      	cbz	r3, 8007d2e <HAL_DMA_IRQHandler+0x66>
}
 8007cfa:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8007cfc:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007cfe:	2202      	movs	r2, #2
 8007d00:	409a      	lsls	r2, r3
 8007d02:	420a      	tst	r2, r1
 8007d04:	d015      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x6a>
 8007d06:	f014 0f02 	tst.w	r4, #2
 8007d0a:	d012      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	0699      	lsls	r1, r3, #26
 8007d10:	d406      	bmi.n	8007d20 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d12:	682b      	ldr	r3, [r5, #0]
 8007d14:	f023 030a 	bic.w	r3, r3, #10
 8007d18:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8007d20:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 8007d22:	6a83      	ldr	r3, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d24:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8007d26:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e5      	bne.n	8007cfa <HAL_DMA_IRQHandler+0x32>
}
 8007d2e:	bc70      	pop	{r4, r5, r6}
 8007d30:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007d32:	2208      	movs	r2, #8
 8007d34:	409a      	lsls	r2, r3
 8007d36:	420a      	tst	r2, r1
 8007d38:	d0f9      	beq.n	8007d2e <HAL_DMA_IRQHandler+0x66>
 8007d3a:	0722      	lsls	r2, r4, #28
 8007d3c:	d5f7      	bpl.n	8007d2e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d3e:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 8007d40:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d42:	f022 020e 	bic.w	r2, r2, #14
 8007d46:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d48:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8007d4a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d50:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d52:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8007d54:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 8007d58:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	d0e6      	beq.n	8007d2e <HAL_DMA_IRQHandler+0x66>
}
 8007d60:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8007d62:	4708      	bx	r1

08007d64 <HAL_EXTI_SetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d041      	beq.n	8007dec <HAL_EXTI_SetConfigLine+0x88>
 8007d68:	2900      	cmp	r1, #0
 8007d6a:	d03f      	beq.n	8007dec <HAL_EXTI_SetConfigLine+0x88>
  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
  maskline = (1uL << linepos);
 8007d6c:	f04f 0c01 	mov.w	ip, #1
  hexti->Line = pExtiConfig->Line;
 8007d70:	680b      	ldr	r3, [r1, #0]
{
 8007d72:	b430      	push	{r4, r5}
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8007d74:	f003 021f 	and.w	r2, r3, #31
  hexti->Line = pExtiConfig->Line;
 8007d78:	6003      	str	r3, [r0, #0]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8007d7a:	0198      	lsls	r0, r3, #6
  maskline = (1uL << linepos);
 8007d7c:	fa0c fc02 	lsl.w	ip, ip, r2
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8007d80:	d519      	bpl.n	8007db6 <HAL_EXTI_SetConfigLine+0x52>

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
    {
      EXTI->RTSR |= maskline;
 8007d82:	4d25      	ldr	r5, [pc, #148]	; (8007e18 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8007d84:	6888      	ldr	r0, [r1, #8]
      EXTI->RTSR |= maskline;
 8007d86:	68ac      	ldr	r4, [r5, #8]
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8007d88:	f010 0f01 	tst.w	r0, #1
      EXTI->RTSR |= maskline;
 8007d8c:	bf14      	ite	ne
 8007d8e:	ea44 040c 	orrne.w	r4, r4, ip
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8007d92:	ea24 040c 	biceq.w	r4, r4, ip
 8007d96:	60ac      	str	r4, [r5, #8]

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
    {
      EXTI->FTSR |= maskline;
 8007d98:	4c1f      	ldr	r4, [pc, #124]	; (8007e18 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8007d9a:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR |= maskline;
 8007d9e:	68e0      	ldr	r0, [r4, #12]
 8007da0:	bf14      	ite	ne
 8007da2:	ea40 000c 	orrne.w	r0, r0, ip
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8007da6:	ea20 000c 	biceq.w	r0, r0, ip
 8007daa:	60e0      	str	r0, [r4, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8007dac:	f003 60c0 	and.w	r0, r3, #100663296	; 0x6000000
 8007db0:	f1b0 6fc0 	cmp.w	r0, #100663296	; 0x6000000
 8007db4:	d01c      	beq.n	8007df0 <HAL_EXTI_SetConfigLine+0x8c>

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
  {
    EXTI->IMR |= maskline;
 8007db6:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8007db8:	6848      	ldr	r0, [r1, #4]
    EXTI->IMR |= maskline;
 8007dba:	6813      	ldr	r3, [r2, #0]
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8007dbc:	07c1      	lsls	r1, r0, #31
    EXTI->IMR |= maskline;
 8007dbe:	bf4c      	ite	mi
 8007dc0:	ea43 030c 	orrmi.w	r3, r3, ip
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8007dc4:	ea23 030c 	bicpl.w	r3, r3, ip
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8007dc8:	f010 0002 	ands.w	r0, r0, #2
    EXTI->IMR &= ~maskline;
 8007dcc:	6013      	str	r3, [r2, #0]
  {
    EXTI->EMR |= maskline;
 8007dce:	4a12      	ldr	r2, [pc, #72]	; (8007e18 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8007dd0:	d105      	bne.n	8007dde <HAL_EXTI_SetConfigLine+0x7a>
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
}
 8007dd2:	bc30      	pop	{r4, r5}
    EXTI->EMR &= ~maskline;
 8007dd4:	6853      	ldr	r3, [r2, #4]
 8007dd6:	ea23 030c 	bic.w	r3, r3, ip
 8007dda:	6053      	str	r3, [r2, #4]
}
 8007ddc:	4770      	bx	lr
    EXTI->EMR |= maskline;
 8007dde:	6853      	ldr	r3, [r2, #4]
  return HAL_OK;
 8007de0:	2000      	movs	r0, #0
}
 8007de2:	bc30      	pop	{r4, r5}
    EXTI->EMR |= maskline;
 8007de4:	ea43 030c 	orr.w	r3, r3, ip
 8007de8:	6053      	str	r3, [r2, #4]
}
 8007dea:	4770      	bx	lr
    return HAL_ERROR;
 8007dec:	2001      	movs	r0, #1
}
 8007dee:	4770      	bx	lr
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007df0:	250f      	movs	r5, #15
 8007df2:	f002 021c 	and.w	r2, r2, #28
 8007df6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007dfa:	68c8      	ldr	r0, [r1, #12]
 8007dfc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007e00:	f003 0303 	and.w	r3, r3, #3
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8007e04:	6894      	ldr	r4, [r2, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007e06:	009b      	lsls	r3, r3, #2
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007e08:	4098      	lsls	r0, r3
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007e0a:	fa05 f303 	lsl.w	r3, r5, r3
 8007e0e:	ea24 0303 	bic.w	r3, r4, r3
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007e12:	4318      	orrs	r0, r3
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8007e14:	6090      	str	r0, [r2, #8]
 8007e16:	e7ce      	b.n	8007db6 <HAL_EXTI_SetConfigLine+0x52>
 8007e18:	40010400 	.word	0x40010400

08007e1c <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	6802      	ldr	r2, [r0, #0]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8007e20:	4902      	ldr	r1, [pc, #8]	; (8007e2c <HAL_EXTI_GenerateSWI+0x10>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007e22:	f002 021f 	and.w	r2, r2, #31
 8007e26:	4093      	lsls	r3, r2
  EXTI->SWIER = maskline;
 8007e28:	610b      	str	r3, [r1, #16]
}
 8007e2a:	4770      	bx	lr
 8007e2c:	40010400 	.word	0x40010400

08007e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007e34:	680c      	ldr	r4, [r1, #0]
{
 8007e36:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8007e38:	2c00      	cmp	r4, #0
 8007e3a:	d07c      	beq.n	8007f36 <HAL_GPIO_Init+0x106>
 8007e3c:	f04f 0e00 	mov.w	lr, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007e40:	f04f 0b01 	mov.w	fp, #1
  uint32_t position = 0x00;
 8007e44:	4673      	mov	r3, lr
 8007e46:	468c      	mov	ip, r1
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007e48:	fa0b f503 	lsl.w	r5, fp, r3

    if (iocurrent)
 8007e4c:	ea15 0a04 	ands.w	sl, r5, r4
 8007e50:	d06b      	beq.n	8007f2a <HAL_GPIO_Init+0xfa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007e52:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007e56:	f001 0203 	and.w	r2, r1, #3
 8007e5a:	1e57      	subs	r7, r2, #1
 8007e5c:	2f01      	cmp	r7, #1
 8007e5e:	d96d      	bls.n	8007f3c <HAL_GPIO_Init+0x10c>
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e60:	2a03      	cmp	r2, #3
 8007e62:	f040 80ae 	bne.w	8007fc2 <HAL_GPIO_Init+0x192>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007e66:	fa02 f20e 	lsl.w	r2, r2, lr
 8007e6a:	43d7      	mvns	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e6c:	6805      	ldr	r5, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e6e:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8007e72:	ea07 0705 	and.w	r7, r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007e76:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 8007e7a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e7c:	d055      	beq.n	8007f2a <HAL_GPIO_Init+0xfa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8007e7e:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e80:	4d5a      	ldr	r5, [pc, #360]	; (8007fec <HAL_GPIO_Init+0x1bc>)
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8007e82:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e86:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8007e88:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e8a:	f042 0201 	orr.w	r2, r2, #1
 8007e8e:	622a      	str	r2, [r5, #32]
 8007e90:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8007e92:	fa06 f807 	lsl.w	r8, r6, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e96:	f002 0201 	and.w	r2, r2, #1
 8007e9a:	9203      	str	r2, [sp, #12]
 8007e9c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8007e9e:	f023 0203 	bic.w	r2, r3, #3
 8007ea2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007ea6:	4e52      	ldr	r6, [pc, #328]	; (8007ff0 <HAL_GPIO_Init+0x1c0>)
 8007ea8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2];
 8007eac:	6895      	ldr	r5, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007eae:	42b0      	cmp	r0, r6
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8007eb0:	ea25 0508 	bic.w	r5, r5, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007eb4:	d015      	beq.n	8007ee2 <HAL_GPIO_Init+0xb2>
 8007eb6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007eba:	42b0      	cmp	r0, r6
 8007ebc:	f000 808c 	beq.w	8007fd8 <HAL_GPIO_Init+0x1a8>
 8007ec0:	4e4c      	ldr	r6, [pc, #304]	; (8007ff4 <HAL_GPIO_Init+0x1c4>)
 8007ec2:	42b0      	cmp	r0, r6
 8007ec4:	f000 808c 	beq.w	8007fe0 <HAL_GPIO_Init+0x1b0>
 8007ec8:	4e4b      	ldr	r6, [pc, #300]	; (8007ff8 <HAL_GPIO_Init+0x1c8>)
 8007eca:	42b0      	cmp	r0, r6
 8007ecc:	d07e      	beq.n	8007fcc <HAL_GPIO_Init+0x19c>
 8007ece:	4e4b      	ldr	r6, [pc, #300]	; (8007ffc <HAL_GPIO_Init+0x1cc>)
 8007ed0:	42b0      	cmp	r0, r6
 8007ed2:	bf0c      	ite	eq
 8007ed4:	f04f 0804 	moveq.w	r8, #4
 8007ed8:	f04f 0805 	movne.w	r8, #5
 8007edc:	fa08 f707 	lsl.w	r7, r8, r7
 8007ee0:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007ee2:	ea6f 070a 	mvn.w	r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8007ee6:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8007ee8:	4a45      	ldr	r2, [pc, #276]	; (8008000 <HAL_GPIO_Init+0x1d0>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007eea:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 8007eec:	6812      	ldr	r2, [r2, #0]
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->IMR = temp;
 8007eee:	4d44      	ldr	r5, [pc, #272]	; (8008000 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007ef0:	bf54      	ite	pl
 8007ef2:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8007ef4:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 8007ef8:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 8007efa:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007efc:	038a      	lsls	r2, r1, #14
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->EMR = temp;
 8007efe:	4a40      	ldr	r2, [pc, #256]	; (8008000 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007f00:	bf54      	ite	pl
 8007f02:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8007f04:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR = temp;
 8007f08:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f0a:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f0c:	02ce      	lsls	r6, r1, #11
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->RTSR = temp;
 8007f0e:	4a3c      	ldr	r2, [pc, #240]	; (8008000 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007f10:	bf54      	ite	pl
 8007f12:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8007f14:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR = temp;
 8007f18:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8007f1a:	68d2      	ldr	r2, [r2, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f1c:	0289      	lsls	r1, r1, #10
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->FTSR = temp;
 8007f1e:	4938      	ldr	r1, [pc, #224]	; (8008000 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007f20:	bf54      	ite	pl
 8007f22:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8007f24:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 8007f28:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 8007f2a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8007f2c:	fa34 f203 	lsrs.w	r2, r4, r3
 8007f30:	f10e 0e02 	add.w	lr, lr, #2
 8007f34:	d188      	bne.n	8007e48 <HAL_GPIO_Init+0x18>
  }
}
 8007f36:	b005      	add	sp, #20
 8007f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007f3c:	f04f 0903 	mov.w	r9, #3
        temp = GPIOx->OSPEEDR;
 8007f40:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8007f42:	f8dc 700c 	ldr.w	r7, [ip, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007f46:	fa09 f90e 	lsl.w	r9, r9, lr
 8007f4a:	ea26 0609 	bic.w	r6, r6, r9
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8007f4e:	fa07 f70e 	lsl.w	r7, r7, lr
 8007f52:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 8007f54:	6087      	str	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007f56:	ea6f 0709 	mvn.w	r7, r9
        temp = GPIOx->OTYPER;
 8007f5a:	f8d0 9004 	ldr.w	r9, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f5e:	f3c1 1800 	ubfx	r8, r1, #4, #1
 8007f62:	fa08 f803 	lsl.w	r8, r8, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8007f66:	ea29 0505 	bic.w	r5, r9, r5
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f6a:	ea48 0505 	orr.w	r5, r8, r5
        GPIOx->OTYPER = temp;
 8007f6e:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8007f70:	68c5      	ldr	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f72:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8007f74:	ea05 0807 	and.w	r8, r5, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8007f78:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8007f7c:	fa02 f20e 	lsl.w	r2, r2, lr
 8007f80:	fa05 f50e 	lsl.w	r5, r5, lr
 8007f84:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->PUPDR = temp;
 8007f88:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f8a:	f47f af6f 	bne.w	8007e6c <HAL_GPIO_Init+0x3c>
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8007f8e:	f8dc 5010 	ldr.w	r5, [ip, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8007f92:	f003 0807 	and.w	r8, r3, #7
 8007f96:	ea4f 0888 	mov.w	r8, r8, lsl #2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8007f9a:	fa05 f508 	lsl.w	r5, r5, r8
 8007f9e:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8007fa0:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3];
 8007fa2:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8007fa6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8007faa:	f8d9 6020 	ldr.w	r6, [r9, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8007fae:	fa05 f808 	lsl.w	r8, r5, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8007fb2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8007fb4:	ea26 0808 	bic.w	r8, r6, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8007fb8:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->AFR[position >> 3] = temp;
 8007fbc:	f8c9 5020 	str.w	r5, [r9, #32]
 8007fc0:	e754      	b.n	8007e6c <HAL_GPIO_Init+0x3c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007fc2:	2703      	movs	r7, #3
 8007fc4:	fa07 f70e 	lsl.w	r7, r7, lr
 8007fc8:	43ff      	mvns	r7, r7
 8007fca:	e7d1      	b.n	8007f70 <HAL_GPIO_Init+0x140>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007fcc:	f04f 0803 	mov.w	r8, #3
 8007fd0:	fa08 f707 	lsl.w	r7, r8, r7
 8007fd4:	433d      	orrs	r5, r7
 8007fd6:	e784      	b.n	8007ee2 <HAL_GPIO_Init+0xb2>
 8007fd8:	fa0b f707 	lsl.w	r7, fp, r7
 8007fdc:	433d      	orrs	r5, r7
 8007fde:	e780      	b.n	8007ee2 <HAL_GPIO_Init+0xb2>
 8007fe0:	f04f 0802 	mov.w	r8, #2
 8007fe4:	fa08 f707 	lsl.w	r7, r8, r7
 8007fe8:	433d      	orrs	r5, r7
 8007fea:	e77a      	b.n	8007ee2 <HAL_GPIO_Init+0xb2>
 8007fec:	40023800 	.word	0x40023800
 8007ff0:	40020000 	.word	0x40020000
 8007ff4:	40020800 	.word	0x40020800
 8007ff8:	40020c00 	.word	0x40020c00
 8007ffc:	40021000 	.word	0x40021000
 8008000:	40010400 	.word	0x40010400

08008004 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8008004:	2900      	cmp	r1, #0
 8008006:	f000 8083 	beq.w	8008110 <HAL_GPIO_DeInit+0x10c>
{
 800800a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 800800e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8008010:	2701      	movs	r7, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8008012:	f04f 090f 	mov.w	r9, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008016:	f04f 0a03 	mov.w	sl, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800801a:	4e3e      	ldr	r6, [pc, #248]	; (8008114 <HAL_GPIO_DeInit+0x110>)
 800801c:	e051      	b.n	80080c2 <HAL_GPIO_DeInit+0xbe>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800801e:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8008022:	4558      	cmp	r0, fp
 8008024:	d069      	beq.n	80080fa <HAL_GPIO_DeInit+0xf6>
 8008026:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8008118 <HAL_GPIO_DeInit+0x114>
 800802a:	4558      	cmp	r0, fp
 800802c:	d068      	beq.n	8008100 <HAL_GPIO_DeInit+0xfc>
 800802e:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 800811c <HAL_GPIO_DeInit+0x118>
 8008032:	4558      	cmp	r0, fp
 8008034:	d069      	beq.n	800810a <HAL_GPIO_DeInit+0x106>
 8008036:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8008120 <HAL_GPIO_DeInit+0x11c>
 800803a:	4558      	cmp	r0, fp
 800803c:	bf14      	ite	ne
 800803e:	f04f 0b05 	movne.w	fp, #5
 8008042:	f04f 0b04 	moveq.w	fp, #4
 8008046:	fa0b f404 	lsl.w	r4, fp, r4
 800804a:	45a4      	cmp	ip, r4
 800804c:	d113      	bne.n	8008076 <HAL_GPIO_DeInit+0x72>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800804e:	6834      	ldr	r4, [r6, #0]
 8008050:	ea24 040e 	bic.w	r4, r4, lr
 8008054:	6034      	str	r4, [r6, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008056:	6874      	ldr	r4, [r6, #4]
 8008058:	ea24 040e 	bic.w	r4, r4, lr
 800805c:	6074      	str	r4, [r6, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800805e:	68b4      	ldr	r4, [r6, #8]
 8008060:	ea24 040e 	bic.w	r4, r4, lr
 8008064:	60b4      	str	r4, [r6, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008066:	68f4      	ldr	r4, [r6, #12]
 8008068:	ea24 040e 	bic.w	r4, r4, lr
 800806c:	60f4      	str	r4, [r6, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 800806e:	68ac      	ldr	r4, [r5, #8]
 8008070:	ea24 0408 	bic.w	r4, r4, r8
 8008074:	60ac      	str	r4, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008076:	6805      	ldr	r5, [r0, #0]
 8008078:	005c      	lsls	r4, r3, #1
 800807a:	fa0a f404 	lsl.w	r4, sl, r4
 800807e:	ea25 0504 	bic.w	r5, r5, r4

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8008082:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008086:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8008088:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800808c:	f003 0507 	and.w	r5, r3, #7
 8008090:	f8dc e020 	ldr.w	lr, [ip, #32]
 8008094:	00ad      	lsls	r5, r5, #2
 8008096:	fa09 f505 	lsl.w	r5, r9, r5
 800809a:	ea2e 0505 	bic.w	r5, lr, r5
 800809e:	f8cc 5020 	str.w	r5, [ip, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80080a2:	68c5      	ldr	r5, [r0, #12]
 80080a4:	ea25 0504 	bic.w	r5, r5, r4
 80080a8:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80080aa:	6845      	ldr	r5, [r0, #4]
 80080ac:	ea25 0202 	bic.w	r2, r5, r2
 80080b0:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80080b2:	6882      	ldr	r2, [r0, #8]
 80080b4:	ea22 0404 	bic.w	r4, r2, r4
 80080b8:	6084      	str	r4, [r0, #8]
    }

    position++;
 80080ba:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 80080bc:	fa31 f203 	lsrs.w	r2, r1, r3
 80080c0:	d019      	beq.n	80080f6 <HAL_GPIO_DeInit+0xf2>
    iocurrent = (GPIO_Pin) & (1U << position);
 80080c2:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 80080c6:	ea12 0e01 	ands.w	lr, r2, r1
 80080ca:	d0f6      	beq.n	80080ba <HAL_GPIO_DeInit+0xb6>
      tmp = SYSCFG->EXTICR[position >> 2];
 80080cc:	f023 0503 	bic.w	r5, r3, #3
 80080d0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80080d4:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8008124 <HAL_GPIO_DeInit+0x120>
 80080d8:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80080dc:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 80080e0:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80080e4:	00a4      	lsls	r4, r4, #2
 80080e6:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80080ea:	4558      	cmp	r0, fp
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80080ec:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80080f0:	d195      	bne.n	800801e <HAL_GPIO_DeInit+0x1a>
 80080f2:	2400      	movs	r4, #0
 80080f4:	e7a9      	b.n	800804a <HAL_GPIO_DeInit+0x46>
  }
}
 80080f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80080fa:	fa07 f404 	lsl.w	r4, r7, r4
 80080fe:	e7a4      	b.n	800804a <HAL_GPIO_DeInit+0x46>
 8008100:	f04f 0b02 	mov.w	fp, #2
 8008104:	fa0b f404 	lsl.w	r4, fp, r4
 8008108:	e79f      	b.n	800804a <HAL_GPIO_DeInit+0x46>
 800810a:	fa0a f404 	lsl.w	r4, sl, r4
 800810e:	e79c      	b.n	800804a <HAL_GPIO_DeInit+0x46>
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	40010400 	.word	0x40010400
 8008118:	40020800 	.word	0x40020800
 800811c:	40020c00 	.word	0x40020c00
 8008120:	40021000 	.word	0x40021000
 8008124:	40020000 	.word	0x40020000

08008128 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008128:	6903      	ldr	r3, [r0, #16]
 800812a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800812c:	bf14      	ite	ne
 800812e:	2001      	movne	r0, #1
 8008130:	2000      	moveq	r0, #0
 8008132:	4770      	bx	lr

08008134 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008134:	b902      	cbnz	r2, 8008138 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8008136:	0409      	lsls	r1, r1, #16
 8008138:	6181      	str	r1, [r0, #24]
  }
}
 800813a:	4770      	bx	lr

0800813c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800813c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800813e:	ea01 0203 	and.w	r2, r1, r3
 8008142:	ea21 0103 	bic.w	r1, r1, r3
 8008146:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800814a:	6181      	str	r1, [r0, #24]
}
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop

08008150 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008150:	4a04      	ldr	r2, [pc, #16]	; (8008164 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8008152:	6951      	ldr	r1, [r2, #20]
 8008154:	4201      	tst	r1, r0
 8008156:	d100      	bne.n	800815a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8008158:	4770      	bx	lr
{
 800815a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800815c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800815e:	f7fe f975 	bl	800644c <HAL_GPIO_EXTI_Callback>
  }
}
 8008162:	bd08      	pop	{r3, pc}
 8008164:	40010400 	.word	0x40010400

08008168 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008168:	2800      	cmp	r0, #0
 800816a:	f000 80b9 	beq.w	80082e0 <HAL_I2C_Init+0x178>
{
 800816e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008170:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008174:	4604      	mov	r4, r0
 8008176:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 8098 	beq.w	80082b0 <HAL_I2C_Init+0x148>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008180:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008182:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008184:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	f022 0201 	bic.w	r2, r2, #1
 800818e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800819e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80081a0:	f001 fd1c 	bl	8009bdc <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80081a4:	6863      	ldr	r3, [r4, #4]
 80081a6:	494f      	ldr	r1, [pc, #316]	; (80082e4 <HAL_I2C_Init+0x17c>)
 80081a8:	428b      	cmp	r3, r1
 80081aa:	d84f      	bhi.n	800824c <HAL_I2C_Init+0xe4>
 80081ac:	4a4e      	ldr	r2, [pc, #312]	; (80082e8 <HAL_I2C_Init+0x180>)
 80081ae:	4290      	cmp	r0, r2
 80081b0:	d97c      	bls.n	80082ac <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80081b2:	4d4e      	ldr	r5, [pc, #312]	; (80082ec <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081b4:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 80081b6:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081ba:	1e43      	subs	r3, r0, #1
 80081bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80081c0:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081c4:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80081c6:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081c8:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081ca:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081ce:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80081d2:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 80081d6:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081d8:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081da:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081dc:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80081e0:	ea41 010c 	orr.w	r1, r1, ip
 80081e4:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081e6:	69d1      	ldr	r1, [r2, #28]
 80081e8:	ea13 0f0e 	tst.w	r3, lr
 80081ec:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80081f0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80081f4:	d161      	bne.n	80082ba <HAL_I2C_Init+0x152>
 80081f6:	2304      	movs	r3, #4
 80081f8:	430b      	orrs	r3, r1
 80081fa:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80081fc:	6811      	ldr	r1, [r2, #0]
 80081fe:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8008202:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8008206:	4303      	orrs	r3, r0
 8008208:	430b      	orrs	r3, r1
 800820a:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800820c:	6891      	ldr	r1, [r2, #8]
 800820e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8008212:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8008216:	4303      	orrs	r3, r0
 8008218:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800821c:	430b      	orrs	r3, r1
 800821e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008220:	68d0      	ldr	r0, [r2, #12]
 8008222:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8008226:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800822a:	430b      	orrs	r3, r1
 800822c:	4303      	orrs	r3, r0
 800822e:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008230:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008232:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8008234:	f043 0301 	orr.w	r3, r3, #1
 8008238:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800823a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800823c:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800823e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008242:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008244:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e

  return HAL_OK;
 8008248:	4608      	mov	r0, r1
}
 800824a:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800824c:	4a28      	ldr	r2, [pc, #160]	; (80082f0 <HAL_I2C_Init+0x188>)
 800824e:	4290      	cmp	r0, r2
 8008250:	d92c      	bls.n	80082ac <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8008252:	4d26      	ldr	r5, [pc, #152]	; (80082ec <HAL_I2C_Init+0x184>)
 8008254:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008258:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800825c:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008260:	fb02 f101 	mul.w	r1, r2, r1
 8008264:	4d23      	ldr	r5, [pc, #140]	; (80082f4 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008266:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008268:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800826c:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800826e:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008270:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008274:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8008278:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800827a:	6a15      	ldr	r5, [r2, #32]
 800827c:	3101      	adds	r1, #1
 800827e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008282:	4329      	orrs	r1, r5
 8008284:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008286:	69d1      	ldr	r1, [r2, #28]
 8008288:	68a5      	ldr	r5, [r4, #8]
 800828a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800828e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008292:	b9ad      	cbnz	r5, 80082c0 <HAL_I2C_Init+0x158>
 8008294:	3801      	subs	r0, #1
 8008296:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800829a:	fbb0 f3f3 	udiv	r3, r0, r3
 800829e:	3301      	adds	r3, #1
 80082a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082a4:	b1d3      	cbz	r3, 80082dc <HAL_I2C_Init+0x174>
 80082a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082aa:	e7a5      	b.n	80081f8 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80082ac:	2001      	movs	r0, #1
}
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80082b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80082b4:	f7fe fc9a 	bl	8006bec <HAL_I2C_MspInit>
 80082b8:	e762      	b.n	8008180 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80082ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082be:	e79b      	b.n	80081f8 <HAL_I2C_Init+0x90>
 80082c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80082c4:	3801      	subs	r0, #1
 80082c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80082ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80082ce:	3301      	adds	r3, #1
 80082d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082d4:	b113      	cbz	r3, 80082dc <HAL_I2C_Init+0x174>
 80082d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082da:	e78d      	b.n	80081f8 <HAL_I2C_Init+0x90>
 80082dc:	2301      	movs	r3, #1
 80082de:	e78b      	b.n	80081f8 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80082e0:	2001      	movs	r0, #1
}
 80082e2:	4770      	bx	lr
 80082e4:	000186a0 	.word	0x000186a0
 80082e8:	001e847f 	.word	0x001e847f
 80082ec:	431bde83 	.word	0x431bde83
 80082f0:	003d08ff 	.word	0x003d08ff
 80082f4:	10624dd3 	.word	0x10624dd3

080082f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	4605      	mov	r5, r0
 80082fe:	b083      	sub	sp, #12
 8008300:	4699      	mov	r9, r3
 8008302:	4688      	mov	r8, r1
 8008304:	4692      	mov	sl, r2
 8008306:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008308:	f7fe fedc 	bl	80070c4 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800830c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8008310:	2b20      	cmp	r3, #32
 8008312:	d003      	beq.n	800831c <HAL_I2C_Master_Transmit+0x24>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8008314:	2002      	movs	r0, #2
  }
}
 8008316:	b003      	add	sp, #12
 8008318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831c:	4606      	mov	r6, r0
 800831e:	e005      	b.n	800832c <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008320:	f7fe fed0 	bl	80070c4 <HAL_GetTick>
 8008324:	1b80      	subs	r0, r0, r6
 8008326:	2819      	cmp	r0, #25
 8008328:	f200 80f8 	bhi.w	800851c <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800832c:	682c      	ldr	r4, [r5, #0]
 800832e:	69a3      	ldr	r3, [r4, #24]
 8008330:	ea6f 0c03 	mvn.w	ip, r3
 8008334:	f01c 0b02 	ands.w	fp, ip, #2
 8008338:	d0f2      	beq.n	8008320 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 800833a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800833e:	2b01      	cmp	r3, #1
 8008340:	d0e8      	beq.n	8008314 <HAL_I2C_Master_Transmit+0x1c>
 8008342:	2301      	movs	r3, #1
 8008344:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	07d9      	lsls	r1, r3, #31
 800834c:	d571      	bpl.n	8008432 <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800834e:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008350:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008352:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800835a:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800835c:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008360:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008364:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8008366:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800836a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800836c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8008370:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8008372:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008374:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8008376:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800837a:	2b08      	cmp	r3, #8
 800837c:	d006      	beq.n	800838c <HAL_I2C_Master_Transmit+0x94>
 800837e:	2b01      	cmp	r3, #1
 8008380:	d004      	beq.n	800838c <HAL_I2C_Master_Transmit+0x94>
 8008382:	4293      	cmp	r3, r2
 8008384:	d002      	beq.n	800838c <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008386:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008388:	2b12      	cmp	r3, #18
 800838a:	d103      	bne.n	8008394 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	1c7b      	adds	r3, r7, #1
 8008396:	d13e      	bne.n	8008416 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008398:	6963      	ldr	r3, [r4, #20]
 800839a:	07d8      	lsls	r0, r3, #31
 800839c:	d5fc      	bpl.n	8008398 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800839e:	692b      	ldr	r3, [r5, #16]
 80083a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083a4:	d14a      	bne.n	800843c <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083a6:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 80083aa:	6121      	str	r1, [r4, #16]
 80083ac:	1c78      	adds	r0, r7, #1
 80083ae:	d004      	beq.n	80083ba <HAL_I2C_Master_Transmit+0xc2>
 80083b0:	e0dd      	b.n	800856e <HAL_I2C_Master_Transmit+0x276>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083b2:	6963      	ldr	r3, [r4, #20]
 80083b4:	055a      	lsls	r2, r3, #21
 80083b6:	f100 80c2 	bmi.w	800853e <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083ba:	6963      	ldr	r3, [r4, #20]
 80083bc:	0799      	lsls	r1, r3, #30
 80083be:	d5f8      	bpl.n	80083b2 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083c0:	2200      	movs	r2, #0
 80083c2:	9201      	str	r2, [sp, #4]
 80083c4:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 80083c6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083c8:	9201      	str	r2, [sp, #4]
 80083ca:	69a2      	ldr	r2, [r4, #24]
 80083cc:	9201      	str	r2, [sp, #4]
 80083ce:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d075      	beq.n	80084c0 <HAL_I2C_Master_Transmit+0x1c8>
 80083d4:	1c79      	adds	r1, r7, #1
 80083d6:	f040 8081 	bne.w	80084dc <HAL_I2C_Master_Transmit+0x1e4>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083da:	6963      	ldr	r3, [r4, #20]
 80083dc:	061a      	lsls	r2, r3, #24
 80083de:	d441      	bmi.n	8008464 <HAL_I2C_Master_Transmit+0x16c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083e0:	6963      	ldr	r3, [r4, #20]
 80083e2:	055b      	lsls	r3, r3, #21
 80083e4:	d5f9      	bpl.n	80083da <HAL_I2C_Master_Transmit+0xe2>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80083e6:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80083e8:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083ea:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80083ee:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80083f0:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80083f2:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083f6:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083fa:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083fc:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008400:	f043 0304 	orr.w	r3, r3, #4
 8008404:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008406:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8008408:	2b04      	cmp	r3, #4
 800840a:	f000 80e6 	beq.w	80085da <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 800840e:	2001      	movs	r0, #1
}
 8008410:	b003      	add	sp, #12
 8008412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008416:	6963      	ldr	r3, [r4, #20]
 8008418:	07d9      	lsls	r1, r3, #31
 800841a:	d4c0      	bmi.n	800839e <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800841c:	f7fe fe52 	bl	80070c4 <HAL_GetTick>
 8008420:	1b80      	subs	r0, r0, r6
 8008422:	4287      	cmp	r7, r0
 8008424:	f0c0 80b3 	bcc.w	800858e <HAL_I2C_Master_Transmit+0x296>
 8008428:	2f00      	cmp	r7, #0
 800842a:	f000 80b0 	beq.w	800858e <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800842e:	682c      	ldr	r4, [r5, #0]
 8008430:	e7b0      	b.n	8008394 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	f043 0301 	orr.w	r3, r3, #1
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	e788      	b.n	800834e <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800843c:	ea4f 13e8 	mov.w	r3, r8, asr #7
 8008440:	f003 0306 	and.w	r3, r3, #6
 8008444:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8008448:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800844a:	1c7b      	adds	r3, r7, #1
 800844c:	d003      	beq.n	8008456 <HAL_I2C_Master_Transmit+0x15e>
 800844e:	e0b5      	b.n	80085bc <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008450:	6963      	ldr	r3, [r4, #20]
 8008452:	0559      	lsls	r1, r3, #21
 8008454:	d473      	bmi.n	800853e <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008456:	6963      	ldr	r3, [r4, #20]
 8008458:	0718      	lsls	r0, r3, #28
 800845a:	d5f9      	bpl.n	8008450 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800845c:	fa5f f388 	uxtb.w	r3, r8
 8008460:	6123      	str	r3, [r4, #16]
 8008462:	e7a3      	b.n	80083ac <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008464:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8008466:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800846a:	4601      	mov	r1, r0
 800846c:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 8008470:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008474:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8008476:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8008478:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800847a:	3b01      	subs	r3, #1
 800847c:	b29b      	uxth	r3, r3
 800847e:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008480:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 8008482:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008484:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8008486:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008488:	d50c      	bpl.n	80084a4 <HAL_I2C_Master_Transmit+0x1ac>
 800848a:	b15a      	cbz	r2, 80084a4 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800848c:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 800848e:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008492:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8008494:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8008496:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8008498:	3b01      	subs	r3, #1
 800849a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800849c:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 80084a0:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 80084a2:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 80084a4:	1c78      	adds	r0, r7, #1
 80084a6:	d129      	bne.n	80084fc <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084a8:	6963      	ldr	r3, [r4, #20]
 80084aa:	0759      	lsls	r1, r3, #29
 80084ac:	d405      	bmi.n	80084ba <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084ae:	6963      	ldr	r3, [r4, #20]
 80084b0:	055a      	lsls	r2, r3, #21
 80084b2:	d498      	bmi.n	80083e6 <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084b4:	6963      	ldr	r3, [r4, #20]
 80084b6:	0759      	lsls	r1, r3, #29
 80084b8:	d5f9      	bpl.n	80084ae <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 80084ba:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d189      	bne.n	80083d4 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084c0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80084c2:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084c4:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80084c6:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084cc:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80084ce:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80084d2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084d6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 80084da:	e71c      	b.n	8008316 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084dc:	6963      	ldr	r3, [r4, #20]
 80084de:	0618      	lsls	r0, r3, #24
 80084e0:	d4c0      	bmi.n	8008464 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084e2:	6963      	ldr	r3, [r4, #20]
 80084e4:	0558      	lsls	r0, r3, #21
 80084e6:	f53f af7e 	bmi.w	80083e6 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ea:	f7fe fdeb 	bl	80070c4 <HAL_GetTick>
 80084ee:	1b80      	subs	r0, r0, r6
 80084f0:	4287      	cmp	r7, r0
 80084f2:	d379      	bcc.n	80085e8 <HAL_I2C_Master_Transmit+0x2f0>
 80084f4:	2f00      	cmp	r7, #0
 80084f6:	d077      	beq.n	80085e8 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084f8:	682c      	ldr	r4, [r5, #0]
 80084fa:	e76b      	b.n	80083d4 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084fc:	6963      	ldr	r3, [r4, #20]
 80084fe:	075b      	lsls	r3, r3, #29
 8008500:	d4db      	bmi.n	80084ba <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008502:	6963      	ldr	r3, [r4, #20]
 8008504:	055b      	lsls	r3, r3, #21
 8008506:	f53f af6e 	bmi.w	80083e6 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800850a:	f7fe fddb 	bl	80070c4 <HAL_GetTick>
 800850e:	1b80      	subs	r0, r0, r6
 8008510:	4287      	cmp	r7, r0
 8008512:	d369      	bcc.n	80085e8 <HAL_I2C_Master_Transmit+0x2f0>
 8008514:	2f00      	cmp	r7, #0
 8008516:	d067      	beq.n	80085e8 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008518:	682c      	ldr	r4, [r5, #0]
 800851a:	e7c3      	b.n	80084a4 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 800851c:	2320      	movs	r3, #32
      return HAL_BUSY;
 800851e:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008520:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008524:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008528:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800852c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800852e:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008532:	f043 0320 	orr.w	r3, r3, #32
 8008536:	642b      	str	r3, [r5, #64]	; 0x40
}
 8008538:	b003      	add	sp, #12
 800853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 800853e:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008540:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8008544:	2120      	movs	r1, #32
      return HAL_ERROR;
 8008546:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800854e:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008550:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008552:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008554:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008558:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800855c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800855e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008562:	f043 0304 	orr.w	r3, r3, #4
 8008566:	642b      	str	r3, [r5, #64]	; 0x40
}
 8008568:	b003      	add	sp, #12
 800856a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800856e:	6963      	ldr	r3, [r4, #20]
 8008570:	079b      	lsls	r3, r3, #30
 8008572:	f53f af25 	bmi.w	80083c0 <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008576:	6963      	ldr	r3, [r4, #20]
 8008578:	055b      	lsls	r3, r3, #21
 800857a:	d4e0      	bmi.n	800853e <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800857c:	f7fe fda2 	bl	80070c4 <HAL_GetTick>
 8008580:	1b80      	subs	r0, r0, r6
 8008582:	4287      	cmp	r7, r0
 8008584:	d33e      	bcc.n	8008604 <HAL_I2C_Master_Transmit+0x30c>
 8008586:	2f00      	cmp	r7, #0
 8008588:	d03c      	beq.n	8008604 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800858a:	682c      	ldr	r4, [r5, #0]
 800858c:	e70e      	b.n	80083ac <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800858e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008590:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008592:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008594:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008598:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800859c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800859e:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80085a0:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80085a4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80085a8:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085aa:	680b      	ldr	r3, [r1, #0]
 80085ac:	05da      	lsls	r2, r3, #23
 80085ae:	f57f af2e 	bpl.w	800840e <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085b2:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 80085b6:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085b8:	642b      	str	r3, [r5, #64]	; 0x40
 80085ba:	e6ac      	b.n	8008316 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085bc:	6963      	ldr	r3, [r4, #20]
 80085be:	071a      	lsls	r2, r3, #28
 80085c0:	f53f af4c 	bmi.w	800845c <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085c4:	6963      	ldr	r3, [r4, #20]
 80085c6:	055a      	lsls	r2, r3, #21
 80085c8:	d4b9      	bmi.n	800853e <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ca:	f7fe fd7b 	bl	80070c4 <HAL_GetTick>
 80085ce:	1b83      	subs	r3, r0, r6
 80085d0:	429f      	cmp	r7, r3
 80085d2:	d317      	bcc.n	8008604 <HAL_I2C_Master_Transmit+0x30c>
 80085d4:	b1b7      	cbz	r7, 8008604 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085d6:	682c      	ldr	r4, [r5, #0]
 80085d8:	e737      	b.n	800844a <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085da:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 80085dc:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085de:	6813      	ldr	r3, [r2, #0]
 80085e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	e696      	b.n	8008316 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80085e8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80085ea:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80085ec:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80085ee:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80085f2:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80085f6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80085f8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80085fc:	f043 0320 	orr.w	r3, r3, #32
 8008600:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8008602:	e700      	b.n	8008406 <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008604:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8008606:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008608:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800860a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800860e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008612:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8008614:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008616:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800861a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800861e:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8008620:	e679      	b.n	8008316 <HAL_I2C_Master_Transmit+0x1e>
 8008622:	bf00      	nop

08008624 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008624:	2800      	cmp	r0, #0
 8008626:	d05d      	beq.n	80086e4 <HAL_PCD_Init+0xc0>
{
 8008628:	b570      	push	{r4, r5, r6, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800862a:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800862e:	4604      	mov	r4, r0
{
 8008630:	b086      	sub	sp, #24
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008632:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008636:	2b00      	cmp	r3, #0
 8008638:	d04f      	beq.n	80086da <HAL_PCD_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800863a:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800863c:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 800863e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8008642:	f002 f831 	bl	800a6a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008646:	6860      	ldr	r0, [r4, #4]
 8008648:	b368      	cbz	r0, 80086a6 <HAL_PCD_Init+0x82>
 800864a:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800864c:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008650:	4611      	mov	r1, r2
    hpcd->IN_ep[i].is_in = 1U;
 8008652:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8008656:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800865a:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 800865e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008662:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008664:	fa5f f28c 	uxtb.w	r2, ip
 8008668:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 800866a:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 800866e:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008672:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8008676:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008678:	d3eb      	bcc.n	8008652 <HAL_PCD_Init+0x2e>
 800867a:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800867c:	4611      	mov	r1, r2
 800867e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8008682:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008686:	f102 0c01 	add.w	ip, r2, #1
    hpcd->OUT_ep[i].num = i;
 800868a:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800868e:	fa5f f28c 	uxtb.w	r2, ip
 8008692:	4282      	cmp	r2, r0
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008694:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8008698:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800869c:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80086a0:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086a4:	d3eb      	bcc.n	800867e <HAL_PCD_Init+0x5a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80086a6:	46a4      	mov	ip, r4
 80086a8:	46ee      	mov	lr, sp
 80086aa:	f85c 6b10 	ldr.w	r6, [ip], #16
 80086ae:	1d25      	adds	r5, r4, #4
 80086b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80086b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80086b8:	f8dc 3000 	ldr.w	r3, [ip]
 80086bc:	4630      	mov	r0, r6
 80086be:	f8ce 3000 	str.w	r3, [lr]
 80086c2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80086c6:	f001 fff9 	bl	800a6bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80086ca:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80086cc:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80086ce:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80086d2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 80086d6:	b006      	add	sp, #24
 80086d8:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80086da:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80086de:	f003 fd1b 	bl	800c118 <HAL_PCD_MspInit>
 80086e2:	e7aa      	b.n	800863a <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 80086e4:	2001      	movs	r0, #1
}
 80086e6:	4770      	bx	lr

080086e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80086e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80086ea:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d012      	beq.n	8008718 <HAL_PCD_Start+0x30>
 80086f2:	4604      	mov	r4, r0
 80086f4:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 80086f6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80086f8:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80086fc:	f001 ffca 	bl	800a694 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8008700:	4629      	mov	r1, r5
 8008702:	4620      	mov	r0, r4
 8008704:	f003 fcfc 	bl	800c100 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8008708:	6820      	ldr	r0, [r4, #0]
 800870a:	f002 fdc7 	bl	800b29c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800870e:	2300      	movs	r3, #0
 8008710:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8

  return HAL_OK;
 8008714:	4618      	mov	r0, r3
}
 8008716:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8008718:	2002      	movs	r0, #2
}
 800871a:	bd38      	pop	{r3, r4, r5, pc}

0800871c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800871c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8008722:	6800      	ldr	r0, [r0, #0]
 8008724:	f002 fdbc 	bl	800b2a0 <USB_ReadInterrupts>
 8008728:	0406      	lsls	r6, r0, #16
 800872a:	d443      	bmi.n	80087b4 <HAL_PCD_IRQHandler+0x98>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800872c:	6820      	ldr	r0, [r4, #0]
 800872e:	f002 fdb7 	bl	800b2a0 <USB_ReadInterrupts>
 8008732:	0545      	lsls	r5, r0, #21
 8008734:	f100 8180 	bmi.w	8008a38 <HAL_PCD_IRQHandler+0x31c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8008738:	6820      	ldr	r0, [r4, #0]
 800873a:	f002 fdb1 	bl	800b2a0 <USB_ReadInterrupts>
 800873e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008742:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8008744:	d007      	beq.n	8008756 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008746:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800874a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800874e:	041b      	lsls	r3, r3, #16
 8008750:	0c1b      	lsrs	r3, r3, #16
 8008752:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8008756:	f002 fda3 	bl	800b2a0 <USB_ReadInterrupts>
 800875a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800875e:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8008760:	d007      	beq.n	8008772 <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008762:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8008766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800876a:	041b      	lsls	r3, r3, #16
 800876c:	0c1b      	lsrs	r3, r3, #16
 800876e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8008772:	f002 fd95 	bl	800b2a0 <USB_ReadInterrupts>
 8008776:	04c0      	lsls	r0, r0, #19
 8008778:	f100 81f6 	bmi.w	8008b68 <HAL_PCD_IRQHandler+0x44c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800877c:	6820      	ldr	r0, [r4, #0]
 800877e:	f002 fd8f 	bl	800b2a0 <USB_ReadInterrupts>
 8008782:	0501      	lsls	r1, r0, #20
 8008784:	f100 81d5 	bmi.w	8008b32 <HAL_PCD_IRQHandler+0x416>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8008788:	6820      	ldr	r0, [r4, #0]
 800878a:	f002 fd89 	bl	800b2a0 <USB_ReadInterrupts>
 800878e:	0582      	lsls	r2, r0, #22
 8008790:	f100 81c2 	bmi.w	8008b18 <HAL_PCD_IRQHandler+0x3fc>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8008794:	6820      	ldr	r0, [r4, #0]
 8008796:	f002 fd83 	bl	800b2a0 <USB_ReadInterrupts>
 800879a:	05c3      	lsls	r3, r0, #23
 800879c:	d508      	bpl.n	80087b0 <HAL_PCD_IRQHandler+0x94>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800879e:	6822      	ldr	r2, [r4, #0]
 80087a0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80087a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087a8:	041b      	lsls	r3, r3, #16
 80087aa:	0c1b      	lsrs	r3, r3, #16
 80087ac:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 80087b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80087ba:	4610      	mov	r0, r2
 80087bc:	041d      	lsls	r5, r3, #16
 80087be:	d5b6      	bpl.n	800872e <HAL_PCD_IRQHandler+0x12>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80087c0:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8008b10 <HAL_PCD_IRQHandler+0x3f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80087c4:	f8df a34c 	ldr.w	sl, [pc, #844]	; 8008b14 <HAL_PCD_IRQHandler+0x3f8>
 80087c8:	e011      	b.n	80087ee <HAL_PCD_IRQHandler+0xd2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80087ca:	f011 0110 	ands.w	r1, r1, #16
 80087ce:	f000 8151 	beq.w	8008a74 <HAL_PCD_IRQHandler+0x358>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80087d2:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80087d4:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80087d8:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80087da:	f040 8176 	bne.w	8008aca <HAL_PCD_IRQHandler+0x3ae>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80087de:	0419      	lsls	r1, r3, #16
 80087e0:	f100 821b 	bmi.w	8008c1a <HAL_PCD_IRQHandler+0x4fe>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80087e4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80087e8:	041e      	lsls	r6, r3, #16
 80087ea:	f140 811f 	bpl.w	8008a2c <HAL_PCD_IRQHandler+0x310>
    wIstr = hpcd->Instance->ISTR;
 80087ee:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 80087f2:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 80087f4:	f015 050f 	ands.w	r5, r5, #15
 80087f8:	d0e7      	beq.n	80087ca <HAL_PCD_IRQHandler+0xae>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80087fa:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80087fe:	00ae      	lsls	r6, r5, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008800:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008802:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008806:	f100 80a0 	bmi.w	800894a <HAL_PCD_IRQHandler+0x22e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800880a:	f018 0f80 	tst.w	r8, #128	; 0x80
 800880e:	d0e9      	beq.n	80087e4 <HAL_PCD_IRQHandler+0xc8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008810:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8008814:	1977      	adds	r7, r6, r5
 8008816:	b29b      	uxth	r3, r3
 8008818:	ea03 0309 	and.w	r3, r3, r9
 800881c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008820:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8008824:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8008828:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800882c:	2b03      	cmp	r3, #3
 800882e:	f000 80d0 	beq.w	80089d2 <HAL_PCD_IRQHandler+0x2b6>
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 80cd 	beq.w	80089d2 <HAL_PCD_IRQHandler+0x2b6>
 8008838:	2b02      	cmp	r3, #2
 800883a:	d103      	bne.n	8008844 <HAL_PCD_IRQHandler+0x128>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800883c:	f418 7f80 	tst.w	r8, #256	; 0x100
 8008840:	f000 80c7 	beq.w	80089d2 <HAL_PCD_IRQHandler+0x2b6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008844:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008848:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800884c:	b29b      	uxth	r3, r3
 800884e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008852:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008856:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800885a:	f000 8255 	beq.w	8008d08 <HAL_PCD_IRQHandler+0x5ec>
    if (ep->xfer_len > TxByteNbre)
 800885e:	eb06 0c05 	add.w	ip, r6, r5
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008862:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 8008866:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 800886a:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800886e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 8008872:	459e      	cmp	lr, r3
 8008874:	f240 834b 	bls.w	8008f0e <HAL_PCD_IRQHandler+0x7f2>
      ep->xfer_len -= TxByteNbre;
 8008878:	ebae 0e03 	sub.w	lr, lr, r3
 800887c:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8008880:	f1be 0f00 	cmp.w	lr, #0
 8008884:	f000 8346 	beq.w	8008f14 <HAL_PCD_IRQHandler+0x7f8>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008888:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 800888c:	d00f      	beq.n	80088ae <HAL_PCD_IRQHandler+0x192>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800888e:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 8008892:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8008896:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800889a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800889e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80088a2:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 80088a6:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80088aa:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80088ae:	eb06 0e05 	add.w	lr, r6, r5
 80088b2:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 80088b6:	f89e c04c 	ldrb.w	ip, [lr, #76]	; 0x4c
 80088ba:	f1bc 0f01 	cmp.w	ip, #1
 80088be:	f040 8316 	bne.w	8008eee <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 80088c2:	f8de 203c 	ldr.w	r2, [lr, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80088c6:	f8de 8038 	ldr.w	r8, [lr, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80088ca:	eb02 0c03 	add.w	ip, r2, r3
        ep->xfer_count += TxByteNbre;
 80088ce:	f8de 2044 	ldr.w	r2, [lr, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80088d2:	f8ce c03c 	str.w	ip, [lr, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80088d6:	441a      	add	r2, r3
 80088d8:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80088dc:	f8de 2048 	ldr.w	r2, [lr, #72]	; 0x48
 80088e0:	4542      	cmp	r2, r8
 80088e2:	f0c0 83e4 	bcc.w	80090ae <HAL_PCD_IRQHandler+0x992>
          ep->xfer_len_db -= len;
 80088e6:	eba2 0208 	sub.w	r2, r2, r8
 80088ea:	f8ce 2048 	str.w	r2, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80088ee:	fa1f f388 	uxth.w	r3, r8
 80088f2:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 80088f6:	f1be 0f00 	cmp.w	lr, #0
 80088fa:	f040 83cb 	bne.w	8009094 <HAL_PCD_IRQHandler+0x978>
 80088fe:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8008902:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008906:	f201 4e04 	addw	lr, r1, #1028	; 0x404
 800890a:	b292      	uxth	r2, r2
 800890c:	eb0e 0102 	add.w	r1, lr, r2
 8008910:	f1b8 0f00 	cmp.w	r8, #0
 8008914:	f040 83f8 	bne.w	8009108 <HAL_PCD_IRQHandler+0x9ec>
 8008918:	f83e 1002 	ldrh.w	r1, [lr, r2]
 800891c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8008920:	0409      	lsls	r1, r1, #16
 8008922:	0c09      	lsrs	r1, r1, #16
 8008924:	f82e 1002 	strh.w	r1, [lr, r2]
 8008928:	f83e 1002 	ldrh.w	r1, [lr, r2]
 800892c:	b289      	uxth	r1, r1
 800892e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008932:	f82e 1002 	strh.w	r1, [lr, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008936:	1972      	adds	r2, r6, r5
 8008938:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800893c:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800893e:	4661      	mov	r1, ip
 8008940:	f002 fcb2 	bl	800b2a8 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008944:	6820      	ldr	r0, [r4, #0]
 8008946:	4602      	mov	r2, r0
 8008948:	e2d1      	b.n	8008eee <HAL_PCD_IRQHandler+0x7d2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800894a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800894e:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8008952:	1971      	adds	r1, r6, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008954:	4013      	ands	r3, r2
 8008956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895a:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800895e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008962:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8008966:	2b00      	cmp	r3, #0
 8008968:	f040 811c 	bne.w	8008ba4 <HAL_PCD_IRQHandler+0x488>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800896c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008970:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8008974:	b29b      	uxth	r3, r3
 8008976:	3306      	adds	r3, #6
 8008978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800897c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008980:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8008984:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8008988:	461f      	mov	r7, r3
          if (count != 0U)
 800898a:	2b00      	cmp	r3, #0
 800898c:	f040 81ac 	bne.w	8008ce8 <HAL_PCD_IRQHandler+0x5cc>
        ep->xfer_count += count;
 8008990:	1971      	adds	r1, r6, r5
 8008992:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8008996:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800899a:	00c9      	lsls	r1, r1, #3
 800899c:	443a      	add	r2, r7
 800899e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80089a2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80089a6:	443a      	add	r2, r7
 80089a8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80089ac:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80089b0:	b122      	cbz	r2, 80089bc <HAL_PCD_IRQHandler+0x2a0>
 80089b2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80089b6:	42bb      	cmp	r3, r7
 80089b8:	f240 819d 	bls.w	8008cf6 <HAL_PCD_IRQHandler+0x5da>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80089bc:	1973      	adds	r3, r6, r5
 80089be:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80089c2:	4620      	mov	r0, r4
 80089c4:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80089c8:	f003 fbce 	bl	800c168 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80089cc:	6820      	ldr	r0, [r4, #0]
 80089ce:	4602      	mov	r2, r0
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80089d0:	e71b      	b.n	800880a <HAL_PCD_IRQHandler+0xee>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80089d2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80089d6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80089da:	b29b      	uxth	r3, r3
 80089dc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          if (ep->xfer_len > TxByteNbre)
 80089e0:	442e      	add	r6, r5
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80089e2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80089e6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
          if (ep->xfer_len > TxByteNbre)
 80089ea:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 80089ee:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80089f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089f4:	429a      	cmp	r2, r3
 80089f6:	f240 8108 	bls.w	8008c0a <HAL_PCD_IRQHandler+0x4ee>
            ep->xfer_len -= TxByteNbre;
 80089fa:	1ad2      	subs	r2, r2, r3
 80089fc:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80089fe:	2a00      	cmp	r2, #0
 8008a00:	f000 8105 	beq.w	8008c0e <HAL_PCD_IRQHandler+0x4f2>
            ep->xfer_buff += TxByteNbre;
 8008a04:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8008a06:	3501      	adds	r5, #1
            ep->xfer_buff += TxByteNbre;
 8008a08:	441a      	add	r2, r3
 8008a0a:	63f2      	str	r2, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8008a0c:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8008a0e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8008a12:	4413      	add	r3, r2
 8008a14:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008a16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008a1a:	f002 f8b7 	bl	800ab8c <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008a1e:	6820      	ldr	r0, [r4, #0]
 8008a20:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8008a24:	4602      	mov	r2, r0
 8008a26:	041e      	lsls	r6, r3, #16
 8008a28:	f53f aee1 	bmi.w	80087ee <HAL_PCD_IRQHandler+0xd2>
 8008a2c:	4610      	mov	r0, r2
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8008a2e:	f002 fc37 	bl	800b2a0 <USB_ReadInterrupts>
 8008a32:	0545      	lsls	r5, r0, #21
 8008a34:	f57f ae80 	bpl.w	8008738 <HAL_PCD_IRQHandler+0x1c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008a38:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8008a3a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008a3c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a44:	041b      	lsls	r3, r3, #16
 8008a46:	0c1b      	lsrs	r3, r3, #16
 8008a48:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8008a4c:	f003 fba4 	bl	800c198 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8008a50:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	f43f ae6f 	beq.w	8008738 <HAL_PCD_IRQHandler+0x1c>
  hpcd->USB_Address = address;
 8008a5a:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8008a5c:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008a5e:	4629      	mov	r1, r5
 8008a60:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008a62:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8008a66:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008a6a:	f002 fc11 	bl	800b290 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008a6e:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8008a72:	e661      	b.n	8008738 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008a74:	8803      	ldrh	r3, [r0, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	ea03 0309 	and.w	r3, r3, r9
 8008a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a80:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008a82:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008a86:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a90:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008a94:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8008a98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a9e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8008aa0:	4413      	add	r3, r2
 8008aa2:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f003 fb69 	bl	800c17c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008aaa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8008aae:	b363      	cbz	r3, 8008b0a <HAL_PCD_IRQHandler+0x3ee>
 8008ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ab2:	bb53      	cbnz	r3, 8008b0a <HAL_PCD_IRQHandler+0x3ee>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008ab4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008ab8:	6820      	ldr	r0, [r4, #0]
 8008aba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008abe:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 8008ac2:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 8008ac4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8008ac8:	e68c      	b.n	80087e4 <HAL_PCD_IRQHandler+0xc8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008aca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008ace:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ad8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008adc:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008ae0:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8008ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008ae8:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008aec:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8008af0:	f002 fbea 	bl	800b2c8 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008af4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008af8:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8008afa:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008afc:	8811      	ldrh	r1, [r2, #0]
 8008afe:	400b      	ands	r3, r1
 8008b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b04:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8008b06:	f003 fb27 	bl	800c158 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008b0a:	6820      	ldr	r0, [r4, #0]
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	e669      	b.n	80087e4 <HAL_PCD_IRQHandler+0xc8>
 8008b10:	ffff8f0f 	.word	0xffff8f0f
 8008b14:	ffff8fbf 	.word	0xffff8fbf
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008b18:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8008b1a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008b1c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b24:	041b      	lsls	r3, r3, #16
 8008b26:	0c1b      	lsrs	r3, r3, #16
 8008b28:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8008b2c:	f003 fb30 	bl	800c190 <HAL_PCD_SOFCallback>
 8008b30:	e630      	b.n	8008794 <HAL_PCD_IRQHandler+0x78>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008b32:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SuspendCallback(hpcd);
 8008b34:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008b36:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	f043 0308 	orr.w	r3, r3, #8
 8008b40:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008b44:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008b48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b4c:	041b      	lsls	r3, r3, #16
 8008b4e:	0c1b      	lsrs	r3, r3, #16
 8008b50:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008b54:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	f043 0304 	orr.w	r3, r3, #4
 8008b5e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8008b62:	f003 fb2b 	bl	800c1bc <HAL_PCD_SuspendCallback>
 8008b66:	e60f      	b.n	8008788 <HAL_PCD_IRQHandler+0x6c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008b68:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8008b6a:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008b6c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008b70:	f023 0304 	bic.w	r3, r3, #4
 8008b74:	041b      	lsls	r3, r3, #16
 8008b76:	0c1b      	lsrs	r3, r3, #16
 8008b78:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008b7c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008b80:	f023 0308 	bic.w	r3, r3, #8
 8008b84:	041b      	lsls	r3, r3, #16
 8008b86:	0c1b      	lsrs	r3, r3, #16
 8008b88:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8008b8c:	f003 fb26 	bl	800c1dc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008b90:	6820      	ldr	r0, [r4, #0]
 8008b92:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8008b96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b9a:	041b      	lsls	r3, r3, #16
 8008b9c:	0c1b      	lsrs	r3, r3, #16
 8008b9e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8008ba2:	e5ec      	b.n	800877e <HAL_PCD_IRQHandler+0x62>
          if (ep->type == EP_TYPE_BULK)
 8008ba4:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	f000 8120 	beq.w	8008dee <HAL_PCD_IRQHandler+0x6d2>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008bae:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8008bb2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bbe:	041b      	lsls	r3, r3, #16
 8008bc0:	0c1b      	lsrs	r3, r3, #16
 8008bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008bce:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8008bd2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008bd6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008bda:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008bde:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008be0:	d06e      	beq.n	8008cc0 <HAL_PCD_IRQHandler+0x5a4>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008be2:	3302      	adds	r3, #2
 8008be4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008be8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008bec:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8008bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8008bf4:	461f      	mov	r7, r3
              if (count != 0U)
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f43f aeca 	beq.w	8008990 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008bfc:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8008c00:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008c04:	f002 fb60 	bl	800b2c8 <USB_ReadPMA>
 8008c08:	e6c2      	b.n	8008990 <HAL_PCD_IRQHandler+0x274>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f003 fab4 	bl	800c17c <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008c14:	6820      	ldr	r0, [r4, #0]
 8008c16:	4602      	mov	r2, r0
 8008c18:	e5e4      	b.n	80087e4 <HAL_PCD_IRQHandler+0xc8>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008c1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008c1e:	8802      	ldrh	r2, [r0, #0]
 8008c20:	4013      	ands	r3, r2
 8008c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c26:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008c28:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008c2c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c36:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008c3a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8008c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c42:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008c46:	b193      	cbz	r3, 8008c6e <HAL_PCD_IRQHandler+0x552>
 8008c48:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8008c4c:	b179      	cbz	r1, 8008c6e <HAL_PCD_IRQHandler+0x552>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008c4e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8008c52:	f002 fb39 	bl	800b2c8 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8008c56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c5a:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008c5e:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8008c60:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008c62:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8008c64:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008c68:	f003 fa7e 	bl	800c168 <HAL_PCD_DataOutStageCallback>
 8008c6c:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8008c6e:	8803      	ldrh	r3, [r0, #0]
 8008c70:	4602      	mov	r2, r0
 8008c72:	051b      	lsls	r3, r3, #20
 8008c74:	f53f adb6 	bmi.w	80087e4 <HAL_PCD_IRQHandler+0xc8>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008c78:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008c7c:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 8008c86:	2900      	cmp	r1, #0
 8008c88:	f040 80a6 	bne.w	8008dd8 <HAL_PCD_IRQHandler+0x6bc>
 8008c8c:	5ae9      	ldrh	r1, [r5, r3]
 8008c8e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8008c92:	0409      	lsls	r1, r1, #16
 8008c94:	0c09      	lsrs	r1, r1, #16
 8008c96:	52e9      	strh	r1, [r5, r3]
 8008c98:	5ae9      	ldrh	r1, [r5, r3]
 8008c9a:	b289      	uxth	r1, r1
 8008c9c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008ca0:	52e9      	strh	r1, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008ca2:	8803      	ldrh	r3, [r0, #0]
 8008ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cac:	041b      	lsls	r3, r3, #16
 8008cae:	0c1b      	lsrs	r3, r3, #16
 8008cb0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cbc:	8003      	strh	r3, [r0, #0]
 8008cbe:	e591      	b.n	80087e4 <HAL_PCD_IRQHandler+0xc8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008cc0:	3306      	adds	r3, #6
 8008cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cc6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008cca:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8008cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8008cd2:	461f      	mov	r7, r3
              if (count != 0U)
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f43f ae5b 	beq.w	8008990 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008cda:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8008cde:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008ce2:	f002 faf1 	bl	800b2c8 <USB_ReadPMA>
 8008ce6:	e653      	b.n	8008990 <HAL_PCD_IRQHandler+0x274>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008ce8:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8008cec:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008cf0:	f002 faea 	bl	800b2c8 <USB_ReadPMA>
 8008cf4:	e64c      	b.n	8008990 <HAL_PCD_IRQHandler+0x274>
        ep = &hpcd->OUT_ep[epindex];
 8008cf6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8008cfa:	6820      	ldr	r0, [r4, #0]
 8008cfc:	4421      	add	r1, r4
 8008cfe:	f001 ff45 	bl	800ab8c <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008d02:	6820      	ldr	r0, [r4, #0]
 8008d04:	4602      	mov	r2, r0
 8008d06:	e580      	b.n	800880a <HAL_PCD_IRQHandler+0xee>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008d08:	f8b3 e40c 	ldrh.w	lr, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 8008d0c:	1973      	adds	r3, r6, r5
 8008d0e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008d12:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008d16:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8008d1a:	45f3      	cmp	fp, lr
 8008d1c:	f0c0 80a5 	bcc.w	8008e6a <HAL_PCD_IRQHandler+0x74e>
      ep->xfer_len -= TxByteNbre;
 8008d20:	ebab 0c0e 	sub.w	ip, fp, lr
 8008d24:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8008d28:	f1bc 0f00 	cmp.w	ip, #0
 8008d2c:	f000 809f 	beq.w	8008e6e <HAL_PCD_IRQHandler+0x752>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008d30:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8008d34:	d10d      	bne.n	8008d52 <HAL_PCD_IRQHandler+0x636>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008d36:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8008d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d42:	041b      	lsls	r3, r3, #16
 8008d44:	0c1b      	lsrs	r3, r3, #16
 8008d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d4e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8008d52:	1973      	adds	r3, r6, r5
 8008d54:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008d58:	f893 c04c 	ldrb.w	ip, [r3, #76]	; 0x4c
 8008d5c:	f1bc 0f01 	cmp.w	ip, #1
 8008d60:	f040 80c5 	bne.w	8008eee <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 8008d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8008d66:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8008d6a:	eb02 0c0e 	add.w	ip, r2, lr
        ep->xfer_count += TxByteNbre;
 8008d6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8008d70:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8008d74:	4472      	add	r2, lr
 8008d76:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8008d78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d7a:	4542      	cmp	r2, r8
 8008d7c:	f0c0 81ab 	bcc.w	80090d6 <HAL_PCD_IRQHandler+0x9ba>
          ep->xfer_len_db -= len;
 8008d80:	eba2 0208 	sub.w	r2, r2, r8
 8008d84:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008d86:	fa1f fe88 	uxth.w	lr, r8
 8008d8a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f040 8194 	bne.w	80090bc <HAL_PCD_IRQHandler+0x9a0>
 8008d94:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8008d98:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008d9c:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8008da0:	b292      	uxth	r2, r2
 8008da2:	188b      	adds	r3, r1, r2
 8008da4:	f1b8 0f00 	cmp.w	r8, #0
 8008da8:	f040 81d0 	bne.w	800914c <HAL_PCD_IRQHandler+0xa30>
 8008dac:	5a8b      	ldrh	r3, [r1, r2]
 8008dae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008db2:	041b      	lsls	r3, r3, #16
 8008db4:	0c1b      	lsrs	r3, r3, #16
 8008db6:	528b      	strh	r3, [r1, r2]
 8008db8:	5a8b      	ldrh	r3, [r1, r2]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dc0:	528b      	strh	r3, [r1, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008dc2:	1972      	adds	r2, r6, r5
 8008dc4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8008dc8:	4673      	mov	r3, lr
 8008dca:	4661      	mov	r1, ip
 8008dcc:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008dce:	f002 fa6b 	bl	800b2a8 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008dd2:	6820      	ldr	r0, [r4, #0]
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	e08a      	b.n	8008eee <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008dd8:	293e      	cmp	r1, #62	; 0x3e
 8008dda:	f200 80cb 	bhi.w	8008f74 <HAL_PCD_IRQHandler+0x858>
 8008dde:	084e      	lsrs	r6, r1, #1
 8008de0:	07cf      	lsls	r7, r1, #31
 8008de2:	bf48      	it	mi
 8008de4:	3601      	addmi	r6, #1
 8008de6:	02b1      	lsls	r1, r6, #10
 8008de8:	b289      	uxth	r1, r1
 8008dea:	52e9      	strh	r1, [r5, r3]
 8008dec:	e759      	b.n	8008ca2 <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008dee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008df2:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008df6:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008df8:	f000 80c7 	beq.w	8008f8a <HAL_PCD_IRQHandler+0x86e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008dfc:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8008e00:	3302      	adds	r3, #2
 8008e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e06:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008e0a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8008e0e:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008e12:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8008e16:	459c      	cmp	ip, r3
 8008e18:	461f      	mov	r7, r3
 8008e1a:	f0c0 8112 	bcc.w	8009042 <HAL_PCD_IRQHandler+0x926>
      ep->xfer_len -= count;
 8008e1e:	ebac 0c03 	sub.w	ip, ip, r3
 8008e22:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8008e26:	f1bc 0f00 	cmp.w	ip, #0
 8008e2a:	f000 810e 	beq.w	800904a <HAL_PCD_IRQHandler+0x92e>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008e2e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008e32:	d00d      	beq.n	8008e50 <HAL_PCD_IRQHandler+0x734>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008e34:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8008e38:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8008e3c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008e40:	0409      	lsls	r1, r1, #16
 8008e42:	0c09      	lsrs	r1, r1, #16
 8008e44:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008e48:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8008e4c:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 80c3 	beq.w	8008fdc <HAL_PCD_IRQHandler+0x8c0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008e56:	1971      	adds	r1, r6, r5
 8008e58:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008e5c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8008e60:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008e64:	f002 fa30 	bl	800b2c8 <USB_ReadPMA>
 8008e68:	e592      	b.n	8008990 <HAL_PCD_IRQHandler+0x274>
 8008e6a:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e6e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f040 80be 	bne.w	8008ff4 <HAL_PCD_IRQHandler+0x8d8>
 8008e78:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8008e7c:	010b      	lsls	r3, r1, #4
 8008e7e:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8008e82:	4406      	add	r6, r0
 8008e84:	b2ad      	uxth	r5, r5
 8008e86:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e8c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008e90:	0412      	lsls	r2, r2, #16
 8008e92:	0c12      	lsrs	r2, r2, #16
 8008e94:	5372      	strh	r2, [r6, r5]
 8008e96:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e98:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e9a:	b292      	uxth	r2, r2
 8008e9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ea0:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008ea2:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8008ea6:	b280      	uxth	r0, r0
 8008ea8:	5a1a      	ldrh	r2, [r3, r0]
 8008eaa:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008eae:	0412      	lsls	r2, r2, #16
 8008eb0:	0c12      	lsrs	r2, r2, #16
 8008eb2:	521a      	strh	r2, [r3, r0]
 8008eb4:	5a1a      	ldrh	r2, [r3, r0]
 8008eb6:	b292      	uxth	r2, r2
 8008eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ebc:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f003 f95c 	bl	800c17c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008ec4:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008ec8:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008eca:	d183      	bne.n	8008dd4 <HAL_PCD_IRQHandler+0x6b8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008ecc:	4602      	mov	r2, r0
 8008ece:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8008ed2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8008ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ede:	041b      	lsls	r3, r3, #16
 8008ee0:	0c1b      	lsrs	r3, r3, #16
 8008ee2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eea:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008eee:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8008ef2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	ea03 030a 	and.w	r3, r3, sl
 8008efc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8008f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f08:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 8008f0c:	e46a      	b.n	80087e4 <HAL_PCD_IRQHandler+0xc8>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f14:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d17f      	bne.n	800901c <HAL_PCD_IRQHandler+0x900>
 8008f1c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8008f20:	010b      	lsls	r3, r1, #4
 8008f22:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8008f26:	4406      	add	r6, r0
 8008f28:	b2ad      	uxth	r5, r5
 8008f2a:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f30:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008f34:	0412      	lsls	r2, r2, #16
 8008f36:	0c12      	lsrs	r2, r2, #16
 8008f38:	5372      	strh	r2, [r6, r5]
 8008f3a:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f3c:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f3e:	b292      	uxth	r2, r2
 8008f40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f44:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f46:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8008f4a:	b280      	uxth	r0, r0
 8008f4c:	5a1a      	ldrh	r2, [r3, r0]
 8008f4e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008f52:	0412      	lsls	r2, r2, #16
 8008f54:	0c12      	lsrs	r2, r2, #16
 8008f56:	521a      	strh	r2, [r3, r0]
 8008f58:	5a1a      	ldrh	r2, [r3, r0]
 8008f5a:	b292      	uxth	r2, r2
 8008f5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f60:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008f62:	4620      	mov	r0, r4
 8008f64:	f003 f90a 	bl	800c17c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008f68:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008f6c:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008f6e:	d1ad      	bne.n	8008ecc <HAL_PCD_IRQHandler+0x7b0>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008f70:	4602      	mov	r2, r0
 8008f72:	e7bc      	b.n	8008eee <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008f74:	094e      	lsrs	r6, r1, #5
 8008f76:	06c9      	lsls	r1, r1, #27
 8008f78:	4989      	ldr	r1, [pc, #548]	; (80091a0 <HAL_PCD_IRQHandler+0xa84>)
 8008f7a:	bf08      	it	eq
 8008f7c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8008f80:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8008f84:	b289      	uxth	r1, r1
 8008f86:	52e9      	strh	r1, [r5, r3]
 8008f88:	e68b      	b.n	8008ca2 <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008f8a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8008f8e:	3306      	adds	r3, #6
 8008f90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f94:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008f98:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8008f9c:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8008fa4:	459e      	cmp	lr, r3
 8008fa6:	461f      	mov	r7, r3
 8008fa8:	d360      	bcc.n	800906c <HAL_PCD_IRQHandler+0x950>
      ep->xfer_len -= count;
 8008faa:	ebae 0e03 	sub.w	lr, lr, r3
 8008fae:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8008fb2:	f1be 0f00 	cmp.w	lr, #0
 8008fb6:	d05b      	beq.n	8009070 <HAL_PCD_IRQHandler+0x954>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008fb8:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008fbc:	d10d      	bne.n	8008fda <HAL_PCD_IRQHandler+0x8be>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008fbe:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8008fc2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8008fc6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008fca:	0409      	lsls	r1, r1, #16
 8008fcc:	0c09      	lsrs	r1, r1, #16
 8008fce:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008fd2:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8008fd6:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8008fda:	b90b      	cbnz	r3, 8008fe0 <HAL_PCD_IRQHandler+0x8c4>
 8008fdc:	461f      	mov	r7, r3
 8008fde:	e4d7      	b.n	8008990 <HAL_PCD_IRQHandler+0x274>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008fe0:	1971      	adds	r1, r6, r5
 8008fe2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008fe6:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8008fea:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008fee:	f002 f96b 	bl	800b2c8 <USB_ReadPMA>
 8008ff2:	e4cd      	b.n	8008990 <HAL_PCD_IRQHandler+0x274>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	f47f af62 	bne.w	8008ebe <HAL_PCD_IRQHandler+0x7a2>
 8008ffa:	2500      	movs	r5, #0
 8008ffc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009000:	010b      	lsls	r3, r1, #4
 8009002:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009006:	b292      	uxth	r2, r2
 8009008:	4406      	add	r6, r0
 800900a:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800900c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009010:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009014:	4403      	add	r3, r0
 8009016:	b292      	uxth	r2, r2
 8009018:	529d      	strh	r5, [r3, r2]
 800901a:	e750      	b.n	8008ebe <HAL_PCD_IRQHandler+0x7a2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800901c:	2b01      	cmp	r3, #1
 800901e:	d1a0      	bne.n	8008f62 <HAL_PCD_IRQHandler+0x846>
 8009020:	2500      	movs	r5, #0
 8009022:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009026:	010b      	lsls	r3, r1, #4
 8009028:	f203 4604 	addw	r6, r3, #1028	; 0x404
 800902c:	b292      	uxth	r2, r2
 800902e:	4406      	add	r6, r0
 8009030:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009032:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800903a:	4403      	add	r3, r0
 800903c:	b292      	uxth	r2, r2
 800903e:	529d      	strh	r5, [r3, r2]
 8009040:	e78f      	b.n	8008f62 <HAL_PCD_IRQHandler+0x846>
 8009042:	f04f 0c00 	mov.w	ip, #0
 8009046:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800904a:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800904e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009052:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009056:	0409      	lsls	r1, r1, #16
 8009058:	0c09      	lsrs	r1, r1, #16
 800905a:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800905e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009062:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009066:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 800906a:	e6e0      	b.n	8008e2e <HAL_PCD_IRQHandler+0x712>
 800906c:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009070:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009074:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009078:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800907c:	0409      	lsls	r1, r1, #16
 800907e:	0c09      	lsrs	r1, r1, #16
 8009080:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8009084:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009088:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800908c:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8009090:	e792      	b.n	8008fb8 <HAL_PCD_IRQHandler+0x89c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009092:	b293      	uxth	r3, r2
 8009094:	f1be 0f01 	cmp.w	lr, #1
 8009098:	f47f ac4d 	bne.w	8008936 <HAL_PCD_IRQHandler+0x21a>
 800909c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80090a0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80090a4:	f201 4104 	addw	r1, r1, #1028	; 0x404
 80090a8:	b292      	uxth	r2, r2
 80090aa:	528b      	strh	r3, [r1, r2]
 80090ac:	e443      	b.n	8008936 <HAL_PCD_IRQHandler+0x21a>
        else if (ep->xfer_len_db == 0U)
 80090ae:	b9ba      	cbnz	r2, 80090e0 <HAL_PCD_IRQHandler+0x9c4>
          ep->xfer_fill_db = 0U;
 80090b0:	4698      	mov	r8, r3
 80090b2:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
 80090b6:	e41c      	b.n	80088f2 <HAL_PCD_IRQHandler+0x1d6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80090b8:	fa1f fe82 	uxth.w	lr, r2
 80090bc:	2b01      	cmp	r3, #1
 80090be:	f47f ae80 	bne.w	8008dc2 <HAL_PCD_IRQHandler+0x6a6>
 80090c2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80090c6:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 80090ca:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	f822 e003 	strh.w	lr, [r2, r3]
 80090d4:	e675      	b.n	8008dc2 <HAL_PCD_IRQHandler+0x6a6>
        else if (ep->xfer_len_db == 0U)
 80090d6:	bb22      	cbnz	r2, 8009122 <HAL_PCD_IRQHandler+0xa06>
          ep->xfer_fill_db = 0U;
 80090d8:	46f0      	mov	r8, lr
 80090da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80090de:	e654      	b.n	8008d8a <HAL_PCD_IRQHandler+0x66e>
          ep->xfer_fill_db = 0U;
 80090e0:	2300      	movs	r3, #0
 80090e2:	f88e 304c 	strb.w	r3, [lr, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80090e6:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80090ea:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 80090ee:	f1be 0f00 	cmp.w	lr, #0
 80090f2:	d1ce      	bne.n	8009092 <HAL_PCD_IRQHandler+0x976>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80090f4:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80090f6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80090fa:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80090fe:	b29b      	uxth	r3, r3
 8009100:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8009104:	4419      	add	r1, r3
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009106:	b293      	uxth	r3, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009108:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 800910c:	d82b      	bhi.n	8009166 <HAL_PCD_IRQHandler+0xa4a>
 800910e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8009112:	f018 0f01 	tst.w	r8, #1
 8009116:	bf18      	it	ne
 8009118:	3201      	addne	r2, #1
 800911a:	0292      	lsls	r2, r2, #10
 800911c:	b292      	uxth	r2, r2
 800911e:	800a      	strh	r2, [r1, #0]
 8009120:	e409      	b.n	8008936 <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_len_db = 0U;
 8009122:	f04f 0e00 	mov.w	lr, #0
 8009126:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800912a:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800912e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1c0      	bne.n	80090b8 <HAL_PCD_IRQHandler+0x99c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009136:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009138:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800913c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009140:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8009144:	b29b      	uxth	r3, r3
 8009146:	440b      	add	r3, r1
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009148:	fa1f fe82 	uxth.w	lr, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800914c:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 8009150:	d818      	bhi.n	8009184 <HAL_PCD_IRQHandler+0xa68>
 8009152:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8009156:	f018 0f01 	tst.w	r8, #1
 800915a:	bf18      	it	ne
 800915c:	3201      	addne	r2, #1
 800915e:	0292      	lsls	r2, r2, #10
 8009160:	b292      	uxth	r2, r2
 8009162:	801a      	strh	r2, [r3, #0]
 8009164:	e62d      	b.n	8008dc2 <HAL_PCD_IRQHandler+0x6a6>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009166:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800916a:	f8df e034 	ldr.w	lr, [pc, #52]	; 80091a0 <HAL_PCD_IRQHandler+0xa84>
 800916e:	f018 0f1f 	tst.w	r8, #31
 8009172:	bf08      	it	eq
 8009174:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8009178:	ea4e 2282 	orr.w	r2, lr, r2, lsl #10
 800917c:	b292      	uxth	r2, r2
 800917e:	800a      	strh	r2, [r1, #0]
 8009180:	f7ff bbd9 	b.w	8008936 <HAL_PCD_IRQHandler+0x21a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009184:	ea4f 1258 	mov.w	r2, r8, lsr #5
 8009188:	4905      	ldr	r1, [pc, #20]	; (80091a0 <HAL_PCD_IRQHandler+0xa84>)
 800918a:	f018 0f1f 	tst.w	r8, #31
 800918e:	bf08      	it	eq
 8009190:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8009194:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 8009198:	b292      	uxth	r2, r2
 800919a:	801a      	strh	r2, [r3, #0]
 800919c:	e611      	b.n	8008dc2 <HAL_PCD_IRQHandler+0x6a6>
 800919e:	bf00      	nop
 80091a0:	ffff8000 	.word	0xffff8000

080091a4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80091a4:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 80091a8:	2a01      	cmp	r2, #1
 80091aa:	d00e      	beq.n	80091ca <HAL_PCD_SetAddress+0x26>
{
 80091ac:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80091ae:	2201      	movs	r2, #1
 80091b0:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80091b2:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 80091b4:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80091b8:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80091bc:	f002 f868 	bl	800b290 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80091c0:	2300      	movs	r3, #0
 80091c2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 80091c6:	4618      	mov	r0, r3
}
 80091c8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80091ca:	2002      	movs	r0, #2
}
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop

080091d0 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 80091d0:	f001 0c07 	and.w	ip, r1, #7
 80091d4:	0609      	lsls	r1, r1, #24
{
 80091d6:	b510      	push	{r4, lr}
 80091d8:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80091da:	d425      	bmi.n	8009228 <HAL_PCD_EP_Open+0x58>
    ep->is_in = 0U;
 80091dc:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091e0:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 80091e4:	00c0      	lsls	r0, r0, #3
 80091e6:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 80091ea:	4420      	add	r0, r4
 80091ec:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091f0:	4421      	add	r1, r4
  ep->maxpacket = ep_mps;
 80091f2:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 80091f4:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091f6:	f881 c000 	strb.w	ip, [r1]
  ep->type = ep_type;
 80091fa:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80091fc:	b10a      	cbz	r2, 8009202 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 80091fe:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8009202:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8009204:	bf04      	itt	eq
 8009206:	2300      	moveq	r3, #0
 8009208:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800920a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800920e:	2b01      	cmp	r3, #1
 8009210:	d019      	beq.n	8009246 <HAL_PCD_EP_Open+0x76>
 8009212:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009214:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009216:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800921a:	f001 fa63 	bl	800a6e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800921e:	2300      	movs	r3, #0
 8009220:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return ret;
 8009224:	4618      	mov	r0, r3
}
 8009226:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009228:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 800922c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009230:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8009234:	2001      	movs	r0, #1
 8009236:	7048      	strb	r0, [r1, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009238:	eb0c 0100 	add.w	r1, ip, r0
 800923c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009240:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8009244:	e7d5      	b.n	80091f2 <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 8009246:	2002      	movs	r0, #2
}
 8009248:	bd10      	pop	{r4, pc}
 800924a:	bf00      	nop

0800924c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800924c:	060b      	lsls	r3, r1, #24
{
 800924e:	b510      	push	{r4, lr}
 8009250:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8009252:	d41b      	bmi.n	800928c <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009254:	f001 0307 	and.w	r3, r1, #7
 8009258:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800925c:	00d2      	lsls	r2, r2, #3
 800925e:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8009262:	4401      	add	r1, r0
    ep->is_in = 0U;
 8009264:	4402      	add	r2, r0
 8009266:	2000      	movs	r0, #0
 8009268:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800926c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800926e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009272:	2b01      	cmp	r3, #1
 8009274:	d019      	beq.n	80092aa <HAL_PCD_EP_Close+0x5e>
 8009276:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009278:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800927a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800927e:	f001 fba5 	bl	800a9cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009282:	2300      	movs	r3, #0
 8009284:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8009288:	4618      	mov	r0, r3
}
 800928a:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800928c:	2001      	movs	r0, #1
 800928e:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009292:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 8009294:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009298:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800929c:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800929e:	7050      	strb	r0, [r2, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 80092a0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80092a2:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d1e5      	bne.n	8009276 <HAL_PCD_EP_Close+0x2a>
 80092aa:	2002      	movs	r0, #2
}
 80092ac:	bd10      	pop	{r4, pc}
 80092ae:	bf00      	nop

080092b0 <HAL_PCD_EP_Receive>:
{
 80092b0:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 80092b2:	2400      	movs	r4, #0
 80092b4:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 80092b8:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 80092bc:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 80092c0:	e9cc 235f 	strd	r2, r3, [ip, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80092c4:	6800      	ldr	r0, [r0, #0]
 80092c6:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
  ep->xfer_count = 0U;
 80092ca:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 80092ce:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80092d2:	f88c e168 	strb.w	lr, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80092d6:	f001 fc59 	bl	800ab8c <USB_EPStartXfer>
}
 80092da:	4620      	mov	r0, r4
 80092dc:	bd10      	pop	{r4, pc}
 80092de:	bf00      	nop

080092e0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80092e0:	f001 0107 	and.w	r1, r1, #7
 80092e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80092e8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80092ec:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop

080092f4 <HAL_PCD_EP_Transmit>:
{
 80092f4:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 80092f6:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 80092f8:	2500      	movs	r5, #0
{
 80092fa:	4604      	mov	r4, r0
 80092fc:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8009300:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009304:	eb0e 0106 	add.w	r1, lr, r6
  ep->xfer_buff = pBuf;
 8009308:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800930c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  ep->xfer_buff = pBuf;
 8009310:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->num = ep_addr & EP_ADDR_MSK;
 8009314:	f88c e028 	strb.w	lr, [ip, #40]	; 0x28
  ep->xfer_len = len;
 8009318:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 800931c:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_fill_db = 1U;
 8009320:	f88c 604c 	strb.w	r6, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 8009324:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
  ep->is_in = 1U;
 8009328:	f88c 6029 	strb.w	r6, [ip, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800932c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009330:	6800      	ldr	r0, [r0, #0]
 8009332:	f001 fc2b 	bl	800ab8c <USB_EPStartXfer>
}
 8009336:	4628      	mov	r0, r5
 8009338:	bd70      	pop	{r4, r5, r6, pc}
 800933a:	bf00      	nop

0800933c <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800933c:	6843      	ldr	r3, [r0, #4]
{
 800933e:	b510      	push	{r4, lr}
 8009340:	4604      	mov	r4, r0
 8009342:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009346:	4298      	cmp	r0, r3
 8009348:	d82d      	bhi.n	80093a6 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 800934a:	060b      	lsls	r3, r1, #24
 800934c:	d41a      	bmi.n	8009384 <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 800934e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009352:	00c9      	lsls	r1, r1, #3
 8009354:	f501 72b4 	add.w	r2, r1, #360	; 0x168
    ep->is_in = 0U;
 8009358:	1863      	adds	r3, r4, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800935a:	18a1      	adds	r1, r4, r2
    ep->is_in = 0U;
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8009362:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009364:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 8009366:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8009368:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800936c:	429a      	cmp	r2, r3
 800936e:	d018      	beq.n	80093a2 <HAL_PCD_EP_SetStall+0x66>
 8009370:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009374:	6820      	ldr	r0, [r4, #0]
 8009376:	f001 ff13 	bl	800b1a0 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800937a:	2300      	movs	r3, #0
 800937c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8009380:	4618      	mov	r0, r3
}
 8009382:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8009384:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009386:	1883      	adds	r3, r0, r2
    ep->is_in = 1U;
 8009388:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800938c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8009390:	705a      	strb	r2, [r3, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009392:	4619      	mov	r1, r3
  ep->is_stall = 1U;
 8009394:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009396:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 8009398:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800939a:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800939e:	429a      	cmp	r2, r3
 80093a0:	d1e6      	bne.n	8009370 <HAL_PCD_EP_SetStall+0x34>
 80093a2:	2002      	movs	r0, #2
}
 80093a4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80093a6:	2001      	movs	r0, #1
}
 80093a8:	bd10      	pop	{r4, pc}
 80093aa:	bf00      	nop

080093ac <HAL_PCD_EP_ClrStall>:
{
 80093ac:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80093ae:	6843      	ldr	r3, [r0, #4]
 80093b0:	f001 020f 	and.w	r2, r1, #15
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d832      	bhi.n	800941e <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 80093b8:	060b      	lsls	r3, r1, #24
 80093ba:	4604      	mov	r4, r0
 80093bc:	d41c      	bmi.n	80093f8 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093be:	f001 0307 	and.w	r3, r1, #7
 80093c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80093c6:	00d2      	lsls	r2, r2, #3
 80093c8:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 80093cc:	4401      	add	r1, r0
    ep->is_in = 0U;
 80093ce:	4402      	add	r2, r0
  ep->is_stall = 0U;
 80093d0:	2500      	movs	r5, #0
    ep->is_in = 0U;
 80093d2:	2000      	movs	r0, #0
 80093d4:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80093d8:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 80093da:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80093dc:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d01a      	beq.n	800941a <HAL_PCD_EP_ClrStall+0x6e>
 80093e4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80093e6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80093e8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80093ec:	f001 ff00 	bl	800b1f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80093f0:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 80093f4:	4628      	mov	r0, r5
}
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80093f8:	2001      	movs	r0, #1
 80093fa:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093fe:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 8009400:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009404:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009408:	4611      	mov	r1, r2
  ep->is_stall = 0U;
 800940a:	2500      	movs	r5, #0
    ep->is_in = 1U;
 800940c:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800940e:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8009410:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8009412:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009416:	2b01      	cmp	r3, #1
 8009418:	d1e4      	bne.n	80093e4 <HAL_PCD_EP_ClrStall+0x38>
 800941a:	2002      	movs	r0, #2
}
 800941c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800941e:	2001      	movs	r0, #1
}
 8009420:	bd38      	pop	{r3, r4, r5, pc}
 8009422:	bf00      	nop

08009424 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8009424:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009428:	d00b      	beq.n	8009442 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800942a:	f001 0107 	and.w	r1, r1, #7
 800942e:	3101      	adds	r1, #1
 8009430:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009434:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009438:	b95a      	cbnz	r2, 8009452 <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800943a:	2000      	movs	r0, #0
    ep->pmaadress = (uint16_t)pmaadress;
 800943c:	80cb      	strh	r3, [r1, #6]
 800943e:	730a      	strb	r2, [r1, #12]
}
 8009440:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8009442:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009446:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800944a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 800944e:	2a00      	cmp	r2, #0
 8009450:	d0f3      	beq.n	800943a <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 8009452:	2201      	movs	r2, #1
}
 8009454:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8009456:	608b      	str	r3, [r1, #8]
 8009458:	730a      	strb	r2, [r1, #12]
}
 800945a:	4770      	bx	lr

0800945c <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800945c:	4b1d      	ldr	r3, [pc, #116]	; (80094d4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 800945e:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009460:	689a      	ldr	r2, [r3, #8]
 8009462:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8009466:	d116      	bne.n	8009496 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800946a:	00d2      	lsls	r2, r2, #3
 800946c:	d420      	bmi.n	80094b0 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800946e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009470:	4919      	ldr	r1, [pc, #100]	; (80094d8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8009472:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009476:	625a      	str	r2, [r3, #36]	; 0x24
 8009478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800947a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800947e:	9201      	str	r2, [sp, #4]
 8009480:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009482:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8009484:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009486:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800948a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800948e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8009492:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8009494:	d013      	beq.n	80094be <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009496:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009498:	4a10      	ldr	r2, [pc, #64]	; (80094dc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800949a:	6813      	ldr	r3, [r2, #0]
 800949c:	f023 0301 	bic.w	r3, r3, #1
 80094a0:	4303      	orrs	r3, r0
 80094a2:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80094a4:	6813      	ldr	r3, [r2, #0]
 80094a6:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80094aa:	4058      	eors	r0, r3
 80094ac:	b002      	add	sp, #8
 80094ae:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80094b0:	4b09      	ldr	r3, [pc, #36]	; (80094d8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80094b8:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80094bc:	d1eb      	bne.n	8009496 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 80094be:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80094c2:	d1e8      	bne.n	8009496 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 80094c4:	4a05      	ldr	r2, [pc, #20]	; (80094dc <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 80094c6:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 80094c8:	6813      	ldr	r3, [r2, #0]
 80094ca:	f043 0304 	orr.w	r3, r3, #4
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	e7e2      	b.n	8009498 <RCC_SetFlashLatencyFromMSIRange+0x3c>
 80094d2:	bf00      	nop
 80094d4:	40023800 	.word	0x40023800
 80094d8:	40007000 	.word	0x40007000
 80094dc:	40023c00 	.word	0x40023c00

080094e0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80094e0:	2800      	cmp	r0, #0
 80094e2:	f000 81f8 	beq.w	80098d6 <HAL_RCC_OscConfig+0x3f6>
{
 80094e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094ea:	4aa2      	ldr	r2, [pc, #648]	; (8009774 <HAL_RCC_OscConfig+0x294>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094ec:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094ee:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80094f0:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094f2:	07d9      	lsls	r1, r3, #31
 80094f4:	4604      	mov	r4, r0
{
 80094f6:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094f8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80094fc:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009500:	d52e      	bpl.n	8009560 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009502:	2d08      	cmp	r5, #8
 8009504:	f000 8128 	beq.w	8009758 <HAL_RCC_OscConfig+0x278>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009508:	2d0c      	cmp	r5, #12
 800950a:	f000 8122 	beq.w	8009752 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800950e:	6863      	ldr	r3, [r4, #4]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d00f      	beq.n	8009534 <HAL_RCC_OscConfig+0x54>
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 8180 	beq.w	800981a <HAL_RCC_OscConfig+0x33a>
 800951a:	2b05      	cmp	r3, #5
 800951c:	4b95      	ldr	r3, [pc, #596]	; (8009774 <HAL_RCC_OscConfig+0x294>)
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	f000 81db 	beq.w	80098da <HAL_RCC_OscConfig+0x3fa>
 8009524:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	e004      	b.n	800953e <HAL_RCC_OscConfig+0x5e>
 8009534:	4a8f      	ldr	r2, [pc, #572]	; (8009774 <HAL_RCC_OscConfig+0x294>)
 8009536:	6813      	ldr	r3, [r2, #0]
 8009538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800953c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800953e:	f7fd fdc1 	bl	80070c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009542:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8009774 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 8009546:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009548:	e005      	b.n	8009556 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800954a:	f7fd fdbb 	bl	80070c4 <HAL_GetTick>
 800954e:	1bc0      	subs	r0, r0, r7
 8009550:	2864      	cmp	r0, #100	; 0x64
 8009552:	f200 815e 	bhi.w	8009812 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009556:	f8d8 3000 	ldr.w	r3, [r8]
 800955a:	039b      	lsls	r3, r3, #14
 800955c:	d5f5      	bpl.n	800954a <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	0799      	lsls	r1, r3, #30
 8009562:	d522      	bpl.n	80095aa <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009564:	2d04      	cmp	r5, #4
 8009566:	f000 8114 	beq.w	8009792 <HAL_RCC_OscConfig+0x2b2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800956a:	2d0c      	cmp	r5, #12
 800956c:	f000 810e 	beq.w	800978c <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009570:	68e3      	ldr	r3, [r4, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 8179 	beq.w	800986a <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 8009578:	2201      	movs	r2, #1
 800957a:	4b7f      	ldr	r3, [pc, #508]	; (8009778 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800957c:	4f7d      	ldr	r7, [pc, #500]	; (8009774 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_ENABLE();
 800957e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009580:	f7fd fda0 	bl	80070c4 <HAL_GetTick>
 8009584:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009586:	e005      	b.n	8009594 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009588:	f7fd fd9c 	bl	80070c4 <HAL_GetTick>
 800958c:	1b80      	subs	r0, r0, r6
 800958e:	2802      	cmp	r0, #2
 8009590:	f200 813f 	bhi.w	8009812 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	079b      	lsls	r3, r3, #30
 8009598:	d5f6      	bpl.n	8009588 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6922      	ldr	r2, [r4, #16]
 800959e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80095a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80095a6:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	06d9      	lsls	r1, r3, #27
 80095ac:	d525      	bpl.n	80095fa <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80095ae:	2d00      	cmp	r5, #0
 80095b0:	f000 8098 	beq.w	80096e4 <HAL_RCC_OscConfig+0x204>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80095b4:	69a3      	ldr	r3, [r4, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 816a 	beq.w	8009890 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_MSI_ENABLE();
 80095bc:	2201      	movs	r2, #1
 80095be:	4b6e      	ldr	r3, [pc, #440]	; (8009778 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80095c0:	4e6c      	ldr	r6, [pc, #432]	; (8009774 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_MSI_ENABLE();
 80095c2:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 80095c4:	f7fd fd7e 	bl	80070c4 <HAL_GetTick>
 80095c8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80095ca:	e005      	b.n	80095d8 <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80095cc:	f7fd fd7a 	bl	80070c4 <HAL_GetTick>
 80095d0:	1bc0      	subs	r0, r0, r7
 80095d2:	2802      	cmp	r0, #2
 80095d4:	f200 811d 	bhi.w	8009812 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80095d8:	6833      	ldr	r3, [r6, #0]
 80095da:	059b      	lsls	r3, r3, #22
 80095dc:	d5f6      	bpl.n	80095cc <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80095de:	6873      	ldr	r3, [r6, #4]
 80095e0:	6a22      	ldr	r2, [r4, #32]
 80095e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80095e6:	4313      	orrs	r3, r2
 80095e8:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80095ea:	6873      	ldr	r3, [r6, #4]
 80095ec:	69e2      	ldr	r2, [r4, #28]
 80095ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80095f6:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	0719      	lsls	r1, r3, #28
 80095fc:	d516      	bpl.n	800962c <HAL_RCC_OscConfig+0x14c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80095fe:	6963      	ldr	r3, [r4, #20]
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 8121 	beq.w	8009848 <HAL_RCC_OscConfig+0x368>
      __HAL_RCC_LSI_ENABLE();
 8009606:	2201      	movs	r2, #1
 8009608:	4b5b      	ldr	r3, [pc, #364]	; (8009778 <HAL_RCC_OscConfig+0x298>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800960a:	4f5a      	ldr	r7, [pc, #360]	; (8009774 <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_LSI_ENABLE();
 800960c:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8009610:	f7fd fd58 	bl	80070c4 <HAL_GetTick>
 8009614:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009616:	e005      	b.n	8009624 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009618:	f7fd fd54 	bl	80070c4 <HAL_GetTick>
 800961c:	1b80      	subs	r0, r0, r6
 800961e:	2802      	cmp	r0, #2
 8009620:	f200 80f7 	bhi.w	8009812 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009626:	079a      	lsls	r2, r3, #30
 8009628:	d5f6      	bpl.n	8009618 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	075e      	lsls	r6, r3, #29
 800962e:	d53b      	bpl.n	80096a8 <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009630:	4b50      	ldr	r3, [pc, #320]	; (8009774 <HAL_RCC_OscConfig+0x294>)
 8009632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009634:	00d0      	lsls	r0, r2, #3
 8009636:	f100 8129 	bmi.w	800988c <HAL_RCC_OscConfig+0x3ac>
      pwrclkchanged = SET;
 800963a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800963c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800963e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009642:	625a      	str	r2, [r3, #36]	; 0x24
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800964a:	9301      	str	r3, [sp, #4]
 800964c:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800964e:	4f4b      	ldr	r7, [pc, #300]	; (800977c <HAL_RCC_OscConfig+0x29c>)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	05d9      	lsls	r1, r3, #23
 8009654:	f140 80cc 	bpl.w	80097f0 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009658:	68a3      	ldr	r3, [r4, #8]
 800965a:	2b01      	cmp	r3, #1
 800965c:	f000 8175 	beq.w	800994a <HAL_RCC_OscConfig+0x46a>
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 80a9 	beq.w	80097b8 <HAL_RCC_OscConfig+0x2d8>
 8009666:	2b05      	cmp	r3, #5
 8009668:	4b42      	ldr	r3, [pc, #264]	; (8009774 <HAL_RCC_OscConfig+0x294>)
 800966a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800966c:	f000 818b 	beq.w	8009986 <HAL_RCC_OscConfig+0x4a6>
 8009670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009674:	635a      	str	r2, [r3, #52]	; 0x34
 8009676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800967c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800967e:	f7fd fd21 	bl	80070c4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009682:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009686:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009688:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8009774 <HAL_RCC_OscConfig+0x294>
 800968c:	e005      	b.n	800969a <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800968e:	f7fd fd19 	bl	80070c4 <HAL_GetTick>
 8009692:	1bc0      	subs	r0, r0, r7
 8009694:	4548      	cmp	r0, r9
 8009696:	f200 80bc 	bhi.w	8009812 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800969a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800969e:	059b      	lsls	r3, r3, #22
 80096a0:	d5f5      	bpl.n	800968e <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 80096a2:	2e00      	cmp	r6, #0
 80096a4:	f040 814b 	bne.w	800993e <HAL_RCC_OscConfig+0x45e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80096a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80096aa:	b1b8      	cbz	r0, 80096dc <HAL_RCC_OscConfig+0x1fc>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80096ac:	2d0c      	cmp	r5, #12
 80096ae:	f000 8152 	beq.w	8009956 <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096b2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80096b4:	f04f 0200 	mov.w	r2, #0
 80096b8:	4b2f      	ldr	r3, [pc, #188]	; (8009778 <HAL_RCC_OscConfig+0x298>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096ba:	f000 8116 	beq.w	80098ea <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_PLL_DISABLE();
 80096be:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80096c0:	f7fd fd00 	bl	80070c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096c4:	4d2b      	ldr	r5, [pc, #172]	; (8009774 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 80096c6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096c8:	e005      	b.n	80096d6 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096ca:	f7fd fcfb 	bl	80070c4 <HAL_GetTick>
 80096ce:	1b00      	subs	r0, r0, r4
 80096d0:	2802      	cmp	r0, #2
 80096d2:	f200 809e 	bhi.w	8009812 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096d6:	682b      	ldr	r3, [r5, #0]
 80096d8:	019b      	lsls	r3, r3, #6
 80096da:	d4f6      	bmi.n	80096ca <HAL_RCC_OscConfig+0x1ea>
  return HAL_OK;
 80096dc:	2000      	movs	r0, #0
}
 80096de:	b003      	add	sp, #12
 80096e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80096e4:	4b23      	ldr	r3, [pc, #140]	; (8009774 <HAL_RCC_OscConfig+0x294>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	059a      	lsls	r2, r3, #22
 80096ea:	d502      	bpl.n	80096f2 <HAL_RCC_OscConfig+0x212>
 80096ec:	69a3      	ldr	r3, [r4, #24]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d03b      	beq.n	800976a <HAL_RCC_OscConfig+0x28a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80096f2:	4e20      	ldr	r6, [pc, #128]	; (8009774 <HAL_RCC_OscConfig+0x294>)
 80096f4:	6a20      	ldr	r0, [r4, #32]
 80096f6:	6873      	ldr	r3, [r6, #4]
 80096f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80096fc:	4298      	cmp	r0, r3
 80096fe:	f240 80d7 	bls.w	80098b0 <HAL_RCC_OscConfig+0x3d0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009702:	f7ff feab 	bl	800945c <RCC_SetFlashLatencyFromMSIRange>
 8009706:	2800      	cmp	r0, #0
 8009708:	d12f      	bne.n	800976a <HAL_RCC_OscConfig+0x28a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800970a:	6872      	ldr	r2, [r6, #4]
 800970c:	6a23      	ldr	r3, [r4, #32]
 800970e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009712:	431a      	orrs	r2, r3
 8009714:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009716:	6872      	ldr	r2, [r6, #4]
 8009718:	69e1      	ldr	r1, [r4, #28]
 800971a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800971e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009722:	6072      	str	r2, [r6, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009724:	4a13      	ldr	r2, [pc, #76]	; (8009774 <HAL_RCC_OscConfig+0x294>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009726:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009728:	6891      	ldr	r1, [r2, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800972a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800972e:	3301      	adds	r3, #1
 8009730:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009734:	4a12      	ldr	r2, [pc, #72]	; (8009780 <HAL_RCC_OscConfig+0x2a0>)
 8009736:	f3c1 1103 	ubfx	r1, r1, #4, #4
 800973a:	5c52      	ldrb	r2, [r2, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800973c:	4811      	ldr	r0, [pc, #68]	; (8009784 <HAL_RCC_OscConfig+0x2a4>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800973e:	40d3      	lsrs	r3, r2
        status = HAL_InitTick(uwTickPrio);
 8009740:	4a11      	ldr	r2, [pc, #68]	; (8009788 <HAL_RCC_OscConfig+0x2a8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009742:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick(uwTickPrio);
 8009744:	6810      	ldr	r0, [r2, #0]
 8009746:	f7fd fc7b 	bl	8007040 <HAL_InitTick>
        if(status != HAL_OK)
 800974a:	2800      	cmp	r0, #0
 800974c:	d1c7      	bne.n	80096de <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	e753      	b.n	80095fa <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009752:	2e00      	cmp	r6, #0
 8009754:	f43f aedb 	beq.w	800950e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009758:	4a06      	ldr	r2, [pc, #24]	; (8009774 <HAL_RCC_OscConfig+0x294>)
 800975a:	6812      	ldr	r2, [r2, #0]
 800975c:	0392      	lsls	r2, r2, #14
 800975e:	f57f aeff 	bpl.w	8009560 <HAL_RCC_OscConfig+0x80>
 8009762:	6862      	ldr	r2, [r4, #4]
 8009764:	2a00      	cmp	r2, #0
 8009766:	f47f aefb 	bne.w	8009560 <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 800976a:	2001      	movs	r0, #1
}
 800976c:	b003      	add	sp, #12
 800976e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009772:	bf00      	nop
 8009774:	40023800 	.word	0x40023800
 8009778:	42470000 	.word	0x42470000
 800977c:	40007000 	.word	0x40007000
 8009780:	0800f2d8 	.word	0x0800f2d8
 8009784:	20000014 	.word	0x20000014
 8009788:	2000001c 	.word	0x2000001c
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800978c:	2e00      	cmp	r6, #0
 800978e:	f47f aeef 	bne.w	8009570 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009792:	4a81      	ldr	r2, [pc, #516]	; (8009998 <HAL_RCC_OscConfig+0x4b8>)
 8009794:	6812      	ldr	r2, [r2, #0]
 8009796:	0792      	lsls	r2, r2, #30
 8009798:	d502      	bpl.n	80097a0 <HAL_RCC_OscConfig+0x2c0>
 800979a:	68e2      	ldr	r2, [r4, #12]
 800979c:	2a01      	cmp	r2, #1
 800979e:	d1e4      	bne.n	800976a <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097a0:	497d      	ldr	r1, [pc, #500]	; (8009998 <HAL_RCC_OscConfig+0x4b8>)
 80097a2:	6920      	ldr	r0, [r4, #16]
 80097a4:	684a      	ldr	r2, [r1, #4]
 80097a6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80097aa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80097ae:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80097b0:	06d9      	lsls	r1, r3, #27
 80097b2:	f57f af22 	bpl.w	80095fa <HAL_RCC_OscConfig+0x11a>
 80097b6:	e6fa      	b.n	80095ae <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097b8:	4f77      	ldr	r7, [pc, #476]	; (8009998 <HAL_RCC_OscConfig+0x4b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097ba:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097c4:	637b      	str	r3, [r7, #52]	; 0x34
 80097c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097cc:	637b      	str	r3, [r7, #52]	; 0x34
      tickstart = HAL_GetTick();
 80097ce:	f7fd fc79 	bl	80070c4 <HAL_GetTick>
 80097d2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80097d4:	e005      	b.n	80097e2 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097d6:	f7fd fc75 	bl	80070c4 <HAL_GetTick>
 80097da:	eba0 0008 	sub.w	r0, r0, r8
 80097de:	4548      	cmp	r0, r9
 80097e0:	d817      	bhi.n	8009812 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80097e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e4:	0598      	lsls	r0, r3, #22
 80097e6:	d4f6      	bmi.n	80097d6 <HAL_RCC_OscConfig+0x2f6>
    if(pwrclkchanged == SET)
 80097e8:	2e00      	cmp	r6, #0
 80097ea:	f43f af5d 	beq.w	80096a8 <HAL_RCC_OscConfig+0x1c8>
 80097ee:	e0a6      	b.n	800993e <HAL_RCC_OscConfig+0x45e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097f6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80097f8:	f7fd fc64 	bl	80070c4 <HAL_GetTick>
 80097fc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	05da      	lsls	r2, r3, #23
 8009802:	f53f af29 	bmi.w	8009658 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009806:	f7fd fc5d 	bl	80070c4 <HAL_GetTick>
 800980a:	eba0 0008 	sub.w	r0, r0, r8
 800980e:	2864      	cmp	r0, #100	; 0x64
 8009810:	d9f5      	bls.n	80097fe <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 8009812:	2003      	movs	r0, #3
}
 8009814:	b003      	add	sp, #12
 8009816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800981a:	4f5f      	ldr	r7, [pc, #380]	; (8009998 <HAL_RCC_OscConfig+0x4b8>)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009822:	603b      	str	r3, [r7, #0]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800982a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800982c:	f7fd fc4a 	bl	80070c4 <HAL_GetTick>
 8009830:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009832:	e005      	b.n	8009840 <HAL_RCC_OscConfig+0x360>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009834:	f7fd fc46 	bl	80070c4 <HAL_GetTick>
 8009838:	eba0 0008 	sub.w	r0, r0, r8
 800983c:	2864      	cmp	r0, #100	; 0x64
 800983e:	d8e8      	bhi.n	8009812 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	0398      	lsls	r0, r3, #14
 8009844:	d4f6      	bmi.n	8009834 <HAL_RCC_OscConfig+0x354>
 8009846:	e68a      	b.n	800955e <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 8009848:	4a54      	ldr	r2, [pc, #336]	; (800999c <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800984a:	4f53      	ldr	r7, [pc, #332]	; (8009998 <HAL_RCC_OscConfig+0x4b8>)
      __HAL_RCC_LSI_DISABLE();
 800984c:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8009850:	f7fd fc38 	bl	80070c4 <HAL_GetTick>
 8009854:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009856:	e004      	b.n	8009862 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009858:	f7fd fc34 	bl	80070c4 <HAL_GetTick>
 800985c:	1b80      	subs	r0, r0, r6
 800985e:	2802      	cmp	r0, #2
 8009860:	d8d7      	bhi.n	8009812 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009864:	079b      	lsls	r3, r3, #30
 8009866:	d4f7      	bmi.n	8009858 <HAL_RCC_OscConfig+0x378>
 8009868:	e6df      	b.n	800962a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 800986a:	4a4c      	ldr	r2, [pc, #304]	; (800999c <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800986c:	4f4a      	ldr	r7, [pc, #296]	; (8009998 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_HSI_DISABLE();
 800986e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009870:	f7fd fc28 	bl	80070c4 <HAL_GetTick>
 8009874:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009876:	e004      	b.n	8009882 <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009878:	f7fd fc24 	bl	80070c4 <HAL_GetTick>
 800987c:	1b80      	subs	r0, r0, r6
 800987e:	2802      	cmp	r0, #2
 8009880:	d8c7      	bhi.n	8009812 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	0798      	lsls	r0, r3, #30
 8009886:	d4f7      	bmi.n	8009878 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	e68e      	b.n	80095aa <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 800988c:	2600      	movs	r6, #0
 800988e:	e6de      	b.n	800964e <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_MSI_DISABLE();
 8009890:	4a42      	ldr	r2, [pc, #264]	; (800999c <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009892:	4f41      	ldr	r7, [pc, #260]	; (8009998 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_MSI_DISABLE();
 8009894:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8009896:	f7fd fc15 	bl	80070c4 <HAL_GetTick>
 800989a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800989c:	e004      	b.n	80098a8 <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800989e:	f7fd fc11 	bl	80070c4 <HAL_GetTick>
 80098a2:	1b80      	subs	r0, r0, r6
 80098a4:	2802      	cmp	r0, #2
 80098a6:	d8b4      	bhi.n	8009812 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	0598      	lsls	r0, r3, #22
 80098ac:	d4f7      	bmi.n	800989e <HAL_RCC_OscConfig+0x3be>
 80098ae:	e74e      	b.n	800974e <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80098b0:	6873      	ldr	r3, [r6, #4]
 80098b2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80098b6:	4303      	orrs	r3, r0
 80098b8:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80098ba:	6873      	ldr	r3, [r6, #4]
 80098bc:	69e2      	ldr	r2, [r4, #28]
 80098be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80098c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80098c6:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80098c8:	f7ff fdc8 	bl	800945c <RCC_SetFlashLatencyFromMSIRange>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	f47f af4c 	bne.w	800976a <HAL_RCC_OscConfig+0x28a>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80098d2:	6a23      	ldr	r3, [r4, #32]
 80098d4:	e726      	b.n	8009724 <HAL_RCC_OscConfig+0x244>
    return HAL_ERROR;
 80098d6:	2001      	movs	r0, #1
}
 80098d8:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	e629      	b.n	800953e <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 80098ea:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80098ec:	f7fd fbea 	bl	80070c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098f0:	4e29      	ldr	r6, [pc, #164]	; (8009998 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 80098f2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098f4:	e004      	b.n	8009900 <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098f6:	f7fd fbe5 	bl	80070c4 <HAL_GetTick>
 80098fa:	1b40      	subs	r0, r0, r5
 80098fc:	2802      	cmp	r0, #2
 80098fe:	d888      	bhi.n	8009812 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009900:	6833      	ldr	r3, [r6, #0]
 8009902:	0199      	lsls	r1, r3, #6
 8009904:	d4f7      	bmi.n	80098f6 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009906:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 800990a:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 800990c:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800990e:	68b2      	ldr	r2, [r6, #8]
 8009910:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009912:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8009916:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8009918:	4a20      	ldr	r2, [pc, #128]	; (800999c <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800991a:	4303      	orrs	r3, r0
 800991c:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 800991e:	6611      	str	r1, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8009920:	f7fd fbd0 	bl	80070c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009924:	4d1c      	ldr	r5, [pc, #112]	; (8009998 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8009926:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009928:	e005      	b.n	8009936 <HAL_RCC_OscConfig+0x456>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800992a:	f7fd fbcb 	bl	80070c4 <HAL_GetTick>
 800992e:	1b00      	subs	r0, r0, r4
 8009930:	2802      	cmp	r0, #2
 8009932:	f63f af6e 	bhi.w	8009812 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009936:	682b      	ldr	r3, [r5, #0]
 8009938:	019a      	lsls	r2, r3, #6
 800993a:	d5f6      	bpl.n	800992a <HAL_RCC_OscConfig+0x44a>
 800993c:	e6ce      	b.n	80096dc <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800993e:	4a16      	ldr	r2, [pc, #88]	; (8009998 <HAL_RCC_OscConfig+0x4b8>)
 8009940:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8009942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009946:	6253      	str	r3, [r2, #36]	; 0x24
 8009948:	e6ae      	b.n	80096a8 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800994a:	4a13      	ldr	r2, [pc, #76]	; (8009998 <HAL_RCC_OscConfig+0x4b8>)
 800994c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800994e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009952:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009954:	e693      	b.n	800967e <HAL_RCC_OscConfig+0x19e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009956:	2801      	cmp	r0, #1
 8009958:	f43f aec1 	beq.w	80096de <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 800995c:	4b0e      	ldr	r3, [pc, #56]	; (8009998 <HAL_RCC_OscConfig+0x4b8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800995e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 8009960:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009962:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8009966:	4291      	cmp	r1, r2
 8009968:	f47f aeff 	bne.w	800976a <HAL_RCC_OscConfig+0x28a>
 800996c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800996e:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009972:	4291      	cmp	r1, r2
 8009974:	f47f aef9 	bne.w	800976a <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009978:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800997a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 800997e:	1a18      	subs	r0, r3, r0
 8009980:	bf18      	it	ne
 8009982:	2001      	movne	r0, #1
 8009984:	e6ab      	b.n	80096de <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009986:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800998a:	635a      	str	r2, [r3, #52]	; 0x34
 800998c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800998e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009992:	635a      	str	r2, [r3, #52]	; 0x34
 8009994:	e673      	b.n	800967e <HAL_RCC_OscConfig+0x19e>
 8009996:	bf00      	nop
 8009998:	40023800 	.word	0x40023800
 800999c:	42470000 	.word	0x42470000

080099a0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80099a0:	2800      	cmp	r0, #0
 80099a2:	f000 80c2 	beq.w	8009b2a <HAL_RCC_ClockConfig+0x18a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80099a6:	4a85      	ldr	r2, [pc, #532]	; (8009bbc <HAL_RCC_ClockConfig+0x21c>)
{
 80099a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80099ac:	6813      	ldr	r3, [r2, #0]
 80099ae:	4604      	mov	r4, r0
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	428b      	cmp	r3, r1
 80099b6:	460d      	mov	r5, r1
 80099b8:	d213      	bcs.n	80099e2 <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099ba:	2901      	cmp	r1, #1
 80099bc:	d103      	bne.n	80099c6 <HAL_RCC_ClockConfig+0x26>
 80099be:	6813      	ldr	r3, [r2, #0]
 80099c0:	f043 0304 	orr.w	r3, r3, #4
 80099c4:	6013      	str	r3, [r2, #0]
 80099c6:	4a7d      	ldr	r2, [pc, #500]	; (8009bbc <HAL_RCC_ClockConfig+0x21c>)
 80099c8:	6813      	ldr	r3, [r2, #0]
 80099ca:	f023 0301 	bic.w	r3, r3, #1
 80099ce:	432b      	orrs	r3, r5
 80099d0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099d2:	6813      	ldr	r3, [r2, #0]
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	42ab      	cmp	r3, r5
 80099da:	d002      	beq.n	80099e2 <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 80099dc:	2001      	movs	r0, #1
}
 80099de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	0799      	lsls	r1, r3, #30
 80099e6:	d506      	bpl.n	80099f6 <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099e8:	4975      	ldr	r1, [pc, #468]	; (8009bc0 <HAL_RCC_ClockConfig+0x220>)
 80099ea:	68a0      	ldr	r0, [r4, #8]
 80099ec:	688a      	ldr	r2, [r1, #8]
 80099ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80099f2:	4302      	orrs	r2, r0
 80099f4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099f6:	07da      	lsls	r2, r3, #31
 80099f8:	d529      	bpl.n	8009a4e <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099fa:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099fc:	4b70      	ldr	r3, [pc, #448]	; (8009bc0 <HAL_RCC_ClockConfig+0x220>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099fe:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a00:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a02:	f000 808e 	beq.w	8009b22 <HAL_RCC_ClockConfig+0x182>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a06:	2a03      	cmp	r2, #3
 8009a08:	f000 8085 	beq.w	8009b16 <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009a0c:	2a01      	cmp	r2, #1
 8009a0e:	f000 80d1 	beq.w	8009bb4 <HAL_RCC_ClockConfig+0x214>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009a12:	0598      	lsls	r0, r3, #22
 8009a14:	d5e2      	bpl.n	80099dc <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a16:	4e6a      	ldr	r6, [pc, #424]	; (8009bc0 <HAL_RCC_ClockConfig+0x220>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a18:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a1c:	68b3      	ldr	r3, [r6, #8]
 8009a1e:	f023 0303 	bic.w	r3, r3, #3
 8009a22:	4313      	orrs	r3, r2
 8009a24:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8009a26:	f7fd fb4d 	bl	80070c4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a2a:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8009a2c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d055      	beq.n	8009ade <HAL_RCC_ClockConfig+0x13e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d05e      	beq.n	8009af4 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d105      	bne.n	8009a46 <HAL_RCC_ClockConfig+0xa6>
 8009a3a:	e066      	b.n	8009b0a <HAL_RCC_ClockConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a3c:	f7fd fb42 	bl	80070c4 <HAL_GetTick>
 8009a40:	1bc0      	subs	r0, r0, r7
 8009a42:	4540      	cmp	r0, r8
 8009a44:	d873      	bhi.n	8009b2e <HAL_RCC_ClockConfig+0x18e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009a46:	68b3      	ldr	r3, [r6, #8]
 8009a48:	f013 0f0c 	tst.w	r3, #12
 8009a4c:	d1f6      	bne.n	8009a3c <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009a4e:	4a5b      	ldr	r2, [pc, #364]	; (8009bbc <HAL_RCC_ClockConfig+0x21c>)
 8009a50:	6813      	ldr	r3, [r2, #0]
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	42ab      	cmp	r3, r5
 8009a58:	d906      	bls.n	8009a68 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a5a:	6813      	ldr	r3, [r2, #0]
 8009a5c:	f023 0301 	bic.w	r3, r3, #1
 8009a60:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a62:	6813      	ldr	r3, [r2, #0]
 8009a64:	07da      	lsls	r2, r3, #31
 8009a66:	d4b9      	bmi.n	80099dc <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	0759      	lsls	r1, r3, #29
 8009a6c:	d506      	bpl.n	8009a7c <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a6e:	4954      	ldr	r1, [pc, #336]	; (8009bc0 <HAL_RCC_ClockConfig+0x220>)
 8009a70:	68e0      	ldr	r0, [r4, #12]
 8009a72:	688a      	ldr	r2, [r1, #8]
 8009a74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009a78:	4302      	orrs	r2, r0
 8009a7a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a7c:	071b      	lsls	r3, r3, #28
 8009a7e:	d420      	bmi.n	8009ac2 <HAL_RCC_ClockConfig+0x122>
  tmpreg = RCC->CFGR;
 8009a80:	494f      	ldr	r1, [pc, #316]	; (8009bc0 <HAL_RCC_ClockConfig+0x220>)
 8009a82:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8009a84:	f002 030c 	and.w	r3, r2, #12
 8009a88:	2b08      	cmp	r3, #8
 8009a8a:	d079      	beq.n	8009b80 <HAL_RCC_ClockConfig+0x1e0>
 8009a8c:	2b0c      	cmp	r3, #12
 8009a8e:	d050      	beq.n	8009b32 <HAL_RCC_ClockConfig+0x192>
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	d044      	beq.n	8009b1e <HAL_RCC_ClockConfig+0x17e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8009a94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8009a98:	684b      	ldr	r3, [r1, #4]
 8009a9a:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009aa2:	4b47      	ldr	r3, [pc, #284]	; (8009bc0 <HAL_RCC_ClockConfig+0x220>)
 8009aa4:	4a47      	ldr	r2, [pc, #284]	; (8009bc4 <HAL_RCC_ClockConfig+0x224>)
 8009aa6:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 8009aa8:	4947      	ldr	r1, [pc, #284]	; (8009bc8 <HAL_RCC_ClockConfig+0x228>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009aaa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009aae:	5cd3      	ldrb	r3, [r2, r3]
 8009ab0:	4a46      	ldr	r2, [pc, #280]	; (8009bcc <HAL_RCC_ClockConfig+0x22c>)
 8009ab2:	fa20 f303 	lsr.w	r3, r0, r3
}
 8009ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8009aba:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009abc:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 8009abe:	f7fd babf 	b.w	8007040 <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009ac2:	4a3f      	ldr	r2, [pc, #252]	; (8009bc0 <HAL_RCC_ClockConfig+0x220>)
 8009ac4:	6921      	ldr	r1, [r4, #16]
 8009ac6:	6893      	ldr	r3, [r2, #8]
 8009ac8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8009acc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009ad0:	6093      	str	r3, [r2, #8]
 8009ad2:	e7d5      	b.n	8009a80 <HAL_RCC_ClockConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ad4:	f7fd faf6 	bl	80070c4 <HAL_GetTick>
 8009ad8:	1bc3      	subs	r3, r0, r7
 8009ada:	4543      	cmp	r3, r8
 8009adc:	d827      	bhi.n	8009b2e <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ade:	68b3      	ldr	r3, [r6, #8]
 8009ae0:	f003 030c 	and.w	r3, r3, #12
 8009ae4:	2b08      	cmp	r3, #8
 8009ae6:	d1f5      	bne.n	8009ad4 <HAL_RCC_ClockConfig+0x134>
 8009ae8:	e7b1      	b.n	8009a4e <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009aea:	f7fd faeb 	bl	80070c4 <HAL_GetTick>
 8009aee:	1bc0      	subs	r0, r0, r7
 8009af0:	4540      	cmp	r0, r8
 8009af2:	d81c      	bhi.n	8009b2e <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009af4:	68b3      	ldr	r3, [r6, #8]
 8009af6:	f003 030c 	and.w	r3, r3, #12
 8009afa:	2b0c      	cmp	r3, #12
 8009afc:	d1f5      	bne.n	8009aea <HAL_RCC_ClockConfig+0x14a>
 8009afe:	e7a6      	b.n	8009a4e <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b00:	f7fd fae0 	bl	80070c4 <HAL_GetTick>
 8009b04:	1bc0      	subs	r0, r0, r7
 8009b06:	4540      	cmp	r0, r8
 8009b08:	d811      	bhi.n	8009b2e <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009b0a:	68b3      	ldr	r3, [r6, #8]
 8009b0c:	f003 030c 	and.w	r3, r3, #12
 8009b10:	2b04      	cmp	r3, #4
 8009b12:	d1f5      	bne.n	8009b00 <HAL_RCC_ClockConfig+0x160>
 8009b14:	e79b      	b.n	8009a4e <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b16:	019f      	lsls	r7, r3, #6
 8009b18:	f53f af7d 	bmi.w	8009a16 <HAL_RCC_ClockConfig+0x76>
 8009b1c:	e75e      	b.n	80099dc <HAL_RCC_ClockConfig+0x3c>
      sysclockfreq = HSI_VALUE;
 8009b1e:	482c      	ldr	r0, [pc, #176]	; (8009bd0 <HAL_RCC_ClockConfig+0x230>)
 8009b20:	e7bf      	b.n	8009aa2 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b22:	039b      	lsls	r3, r3, #14
 8009b24:	f53f af77 	bmi.w	8009a16 <HAL_RCC_ClockConfig+0x76>
 8009b28:	e758      	b.n	80099dc <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 8009b2a:	2001      	movs	r0, #1
}
 8009b2c:	4770      	bx	lr
          return HAL_TIMEOUT;
 8009b2e:	2003      	movs	r0, #3
 8009b30:	e755      	b.n	80099de <HAL_RCC_ClockConfig+0x3e>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009b32:	4828      	ldr	r0, [pc, #160]	; (8009bd4 <HAL_RCC_ClockConfig+0x234>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b34:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009b36:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8009b3a:	5c44      	ldrb	r4, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009b3c:	f3c2 5281 	ubfx	r2, r2, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b40:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009b44:	f102 0201 	add.w	r2, r2, #1
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009b48:	ea4f 1144 	mov.w	r1, r4, lsl #5
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b4c:	d01a      	beq.n	8009b84 <HAL_RCC_ClockConfig+0x1e4>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009b4e:	1b09      	subs	r1, r1, r4
 8009b50:	eb65 0505 	sbc.w	r5, r5, r5
 8009b54:	01ab      	lsls	r3, r5, #6
 8009b56:	0188      	lsls	r0, r1, #6
 8009b58:	1a40      	subs	r0, r0, r1
 8009b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009b5e:	eb63 0305 	sbc.w	r3, r3, r5
 8009b62:	00c1      	lsls	r1, r0, #3
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	190c      	adds	r4, r1, r4
 8009b68:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009b6c:	f143 0300 	adc.w	r3, r3, #0
 8009b70:	0259      	lsls	r1, r3, #9
 8009b72:	0260      	lsls	r0, r4, #9
 8009b74:	2300      	movs	r3, #0
 8009b76:	ea41 51d4 	orr.w	r1, r1, r4, lsr #23
 8009b7a:	f7f7 fab7 	bl	80010ec <__aeabi_uldivmod>
 8009b7e:	e790      	b.n	8009aa2 <HAL_RCC_ClockConfig+0x102>
  switch (tmpreg & RCC_CFGR_SWS)
 8009b80:	4815      	ldr	r0, [pc, #84]	; (8009bd8 <HAL_RCC_ClockConfig+0x238>)
 8009b82:	e78e      	b.n	8009aa2 <HAL_RCC_ClockConfig+0x102>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009b84:	1b0d      	subs	r5, r1, r4
 8009b86:	eb66 0606 	sbc.w	r6, r6, r6
 8009b8a:	01b0      	lsls	r0, r6, #6
 8009b8c:	01a9      	lsls	r1, r5, #6
 8009b8e:	1b49      	subs	r1, r1, r5
 8009b90:	ea40 6095 	orr.w	r0, r0, r5, lsr #26
 8009b94:	eb60 0006 	sbc.w	r0, r0, r6
 8009b98:	00c0      	lsls	r0, r0, #3
 8009b9a:	ea40 7051 	orr.w	r0, r0, r1, lsr #29
 8009b9e:	00c9      	lsls	r1, r1, #3
 8009ba0:	190c      	adds	r4, r1, r4
 8009ba2:	f140 0000 	adc.w	r0, r0, #0
 8009ba6:	0281      	lsls	r1, r0, #10
 8009ba8:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 8009bac:	02a0      	lsls	r0, r4, #10
 8009bae:	f7f7 fa9d 	bl	80010ec <__aeabi_uldivmod>
 8009bb2:	e776      	b.n	8009aa2 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bb4:	079e      	lsls	r6, r3, #30
 8009bb6:	f53f af2e 	bmi.w	8009a16 <HAL_RCC_ClockConfig+0x76>
 8009bba:	e70f      	b.n	80099dc <HAL_RCC_ClockConfig+0x3c>
 8009bbc:	40023c00 	.word	0x40023c00
 8009bc0:	40023800 	.word	0x40023800
 8009bc4:	0800f2d8 	.word	0x0800f2d8
 8009bc8:	2000001c 	.word	0x2000001c
 8009bcc:	20000014 	.word	0x20000014
 8009bd0:	00f42400 	.word	0x00f42400
 8009bd4:	0800f2f0 	.word	0x0800f2f0
 8009bd8:	007a1200 	.word	0x007a1200

08009bdc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009bdc:	4b04      	ldr	r3, [pc, #16]	; (8009bf0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8009bde:	4a05      	ldr	r2, [pc, #20]	; (8009bf4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	4905      	ldr	r1, [pc, #20]	; (8009bf8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009be4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009be8:	5ccb      	ldrb	r3, [r1, r3]
 8009bea:	6810      	ldr	r0, [r2, #0]
}
 8009bec:	40d8      	lsrs	r0, r3
 8009bee:	4770      	bx	lr
 8009bf0:	40023800 	.word	0x40023800
 8009bf4:	20000014 	.word	0x20000014
 8009bf8:	0800f2e8 	.word	0x0800f2e8

08009bfc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009bfc:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8009bfe:	4a05      	ldr	r2, [pc, #20]	; (8009c14 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	4905      	ldr	r1, [pc, #20]	; (8009c18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009c04:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009c08:	5ccb      	ldrb	r3, [r1, r3]
 8009c0a:	6810      	ldr	r0, [r2, #0]
}
 8009c0c:	40d8      	lsrs	r0, r3
 8009c0e:	4770      	bx	lr
 8009c10:	40023800 	.word	0x40023800
 8009c14:	20000014 	.word	0x20000014
 8009c18:	0800f2e8 	.word	0x0800f2e8

08009c1c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d049      	beq.n	8009cb4 <HAL_TIM_Base_Init+0x98>
{
 8009c20:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009c26:	4604      	mov	r4, r0
 8009c28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d03c      	beq.n	8009caa <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c30:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c32:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009c34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c38:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8009c3c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c3e:	d013      	beq.n	8009c68 <HAL_TIM_Base_Init+0x4c>
 8009c40:	491d      	ldr	r1, [pc, #116]	; (8009cb8 <HAL_TIM_Base_Init+0x9c>)
 8009c42:	428a      	cmp	r2, r1
 8009c44:	d010      	beq.n	8009c68 <HAL_TIM_Base_Init+0x4c>
 8009c46:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009c4a:	428a      	cmp	r2, r1
 8009c4c:	d00c      	beq.n	8009c68 <HAL_TIM_Base_Init+0x4c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c4e:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8009c52:	428a      	cmp	r2, r1
 8009c54:	d00c      	beq.n	8009c70 <HAL_TIM_Base_Init+0x54>
 8009c56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009c5a:	428a      	cmp	r2, r1
 8009c5c:	d008      	beq.n	8009c70 <HAL_TIM_Base_Init+0x54>
 8009c5e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009c62:	428a      	cmp	r2, r1
 8009c64:	d108      	bne.n	8009c78 <HAL_TIM_Base_Init+0x5c>
 8009c66:	e003      	b.n	8009c70 <HAL_TIM_Base_Init+0x54>
    tmpcr1 |= Structure->CounterMode;
 8009c68:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c6e:	430b      	orrs	r3, r1
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c70:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c76:	430b      	orrs	r3, r1
  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c78:	2101      	movs	r1, #1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c7a:	6960      	ldr	r0, [r4, #20]
 8009c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c80:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c82:	68e0      	ldr	r0, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8009c84:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8009c86:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c88:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009c8a:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8009c8c:	6151      	str	r1, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c8e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c92:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 8009c96:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 8009c9a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 8009c9e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 8009ca2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  return HAL_OK;
 8009ca6:	2000      	movs	r0, #0
}
 8009ca8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009caa:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8009cae:	f7fc ffd3 	bl	8006c58 <HAL_TIM_Base_MspInit>
 8009cb2:	e7bd      	b.n	8009c30 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8009cb4:	2001      	movs	r0, #1
}
 8009cb6:	4770      	bx	lr
 8009cb8:	40000400 	.word	0x40000400

08009cbc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009cbc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d120      	bne.n	8009d06 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8009cc4:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cc6:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009cc8:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ccc:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cd2:	f042 0201 	orr.w	r2, r2, #1
 8009cd6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cd8:	d00a      	beq.n	8009cf0 <HAL_TIM_Base_Start_IT+0x34>
 8009cda:	4a0d      	ldr	r2, [pc, #52]	; (8009d10 <HAL_TIM_Base_Start_IT+0x54>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d007      	beq.n	8009cf0 <HAL_TIM_Base_Start_IT+0x34>
 8009ce0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d003      	beq.n	8009cf0 <HAL_TIM_Base_Start_IT+0x34>
 8009ce8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d104      	bne.n	8009cfa <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cf0:	689a      	ldr	r2, [r3, #8]
 8009cf2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cf6:	2a06      	cmp	r2, #6
 8009cf8:	d007      	beq.n	8009d0a <HAL_TIM_Base_Start_IT+0x4e>
    __HAL_TIM_ENABLE(htim);
 8009cfa:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8009cfc:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8009cfe:	f042 0201 	orr.w	r2, r2, #1
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	4770      	bx	lr
    return HAL_ERROR;
 8009d06:	2001      	movs	r0, #1
 8009d08:	4770      	bx	lr
  return HAL_OK;
 8009d0a:	2000      	movs	r0, #0
}
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	40000400 	.word	0x40000400

08009d14 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 8009d14:	f241 1c11 	movw	ip, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009d18:	6802      	ldr	r2, [r0, #0]
{
 8009d1a:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009d1c:	68d1      	ldr	r1, [r2, #12]
 8009d1e:	f021 0101 	bic.w	r1, r1, #1
 8009d22:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8009d24:	6a11      	ldr	r1, [r2, #32]
 8009d26:	ea11 0f0c 	tst.w	r1, ip
 8009d2a:	d103      	bne.n	8009d34 <HAL_TIM_Base_Stop_IT+0x20>
 8009d2c:	6811      	ldr	r1, [r2, #0]
 8009d2e:	f021 0101 	bic.w	r1, r1, #1
 8009d32:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8009d34:	2201      	movs	r2, #1
}
 8009d36:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8009d38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop

08009d40 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8009d40:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8009d44:	2a01      	cmp	r2, #1
 8009d46:	d075      	beq.n	8009e34 <HAL_TIM_ConfigClockSource+0xf4>
{
 8009d48:	b430      	push	{r4, r5}
 8009d4a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8009d4c:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8009d4e:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8009d50:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8009d52:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8009d56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8009d5a:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8009d5c:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d5e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8009d62:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8009d66:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8009d68:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8009d6a:	d065      	beq.n	8009e38 <HAL_TIM_ConfigClockSource+0xf8>
 8009d6c:	d831      	bhi.n	8009dd2 <HAL_TIM_ConfigClockSource+0x92>
 8009d6e:	2a40      	cmp	r2, #64	; 0x40
 8009d70:	d048      	beq.n	8009e04 <HAL_TIM_ConfigClockSource+0xc4>
 8009d72:	d921      	bls.n	8009db8 <HAL_TIM_ConfigClockSource+0x78>
 8009d74:	2a50      	cmp	r2, #80	; 0x50
 8009d76:	d116      	bne.n	8009da6 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d78:	684c      	ldr	r4, [r1, #4]
 8009d7a:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d7c:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d7e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8009d82:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d84:	6a04      	ldr	r4, [r0, #32]
 8009d86:	f024 0401 	bic.w	r4, r4, #1
 8009d8a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d8c:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d8e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d92:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d96:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009d98:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d9a:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009da0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009da4:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 8009da6:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8009da8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8009daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8009dae:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  return HAL_OK;
 8009db2:	4610      	mov	r0, r2
}
 8009db4:	bc30      	pop	{r4, r5}
 8009db6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8009db8:	2a20      	cmp	r2, #32
 8009dba:	d002      	beq.n	8009dc2 <HAL_TIM_ConfigClockSource+0x82>
 8009dbc:	d91e      	bls.n	8009dfc <HAL_TIM_ConfigClockSource+0xbc>
 8009dbe:	2a30      	cmp	r2, #48	; 0x30
 8009dc0:	d1f1      	bne.n	8009da6 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 8009dc2:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dc4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8009dce:	6082      	str	r2, [r0, #8]
}
 8009dd0:	e7e9      	b.n	8009da6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8009dd2:	2a70      	cmp	r2, #112	; 0x70
 8009dd4:	d049      	beq.n	8009e6a <HAL_TIM_ConfigClockSource+0x12a>
 8009dd6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009dda:	d1e4      	bne.n	8009da6 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ddc:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8009de0:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009de2:	432a      	orrs	r2, r5
 8009de4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009de6:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8009dee:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009df0:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009df2:	6882      	ldr	r2, [r0, #8]
 8009df4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009df8:	6082      	str	r2, [r0, #8]
      break;
 8009dfa:	e7d4      	b.n	8009da6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8009dfc:	f032 0110 	bics.w	r1, r2, #16
 8009e00:	d1d1      	bne.n	8009da6 <HAL_TIM_ConfigClockSource+0x66>
 8009e02:	e7de      	b.n	8009dc2 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e04:	684c      	ldr	r4, [r1, #4]
 8009e06:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8009e08:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e0a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8009e0e:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e10:	6a04      	ldr	r4, [r0, #32]
 8009e12:	f024 0401 	bic.w	r4, r4, #1
 8009e16:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e18:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e1a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e1e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8009e22:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009e24:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8009e26:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e2c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8009e30:	6082      	str	r2, [r0, #8]
}
 8009e32:	e7b8      	b.n	8009da6 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8009e34:	2002      	movs	r0, #2
}
 8009e36:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e38:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e3a:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e3c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e40:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e42:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e44:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e46:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e4a:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 8009e4e:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8009e50:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e56:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8009e5a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8009e5c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e62:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8009e66:	6082      	str	r2, [r0, #8]
}
 8009e68:	e79d      	b.n	8009da6 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e6a:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8009e6e:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e70:	432a      	orrs	r2, r5
 8009e72:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e74:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e78:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8009e7c:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8009e7e:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8009e80:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e82:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8009e86:	6082      	str	r2, [r0, #8]
      break;
 8009e88:	e78d      	b.n	8009da6 <HAL_TIM_ConfigClockSource+0x66>
 8009e8a:	bf00      	nop

08009e8c <HAL_TIM_OC_DelayElapsedCallback>:
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop

08009e90 <HAL_TIM_IC_CaptureCallback>:
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop

08009e94 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop

08009e98 <HAL_TIM_TriggerCallback>:
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop

08009e9c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e9c:	6803      	ldr	r3, [r0, #0]
{
 8009e9e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ea0:	691a      	ldr	r2, [r3, #16]
{
 8009ea2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ea4:	0791      	lsls	r1, r2, #30
 8009ea6:	d502      	bpl.n	8009eae <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ea8:	68da      	ldr	r2, [r3, #12]
 8009eaa:	0792      	lsls	r2, r2, #30
 8009eac:	d450      	bmi.n	8009f50 <HAL_TIM_IRQHandler+0xb4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009eae:	691a      	ldr	r2, [r3, #16]
 8009eb0:	0752      	lsls	r2, r2, #29
 8009eb2:	d502      	bpl.n	8009eba <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009eb4:	68da      	ldr	r2, [r3, #12]
 8009eb6:	0750      	lsls	r0, r2, #29
 8009eb8:	d437      	bmi.n	8009f2a <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009eba:	691a      	ldr	r2, [r3, #16]
 8009ebc:	0711      	lsls	r1, r2, #28
 8009ebe:	d502      	bpl.n	8009ec6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ec0:	68da      	ldr	r2, [r3, #12]
 8009ec2:	0712      	lsls	r2, r2, #28
 8009ec4:	d422      	bmi.n	8009f0c <HAL_TIM_IRQHandler+0x70>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ec6:	691a      	ldr	r2, [r3, #16]
 8009ec8:	06d0      	lsls	r0, r2, #27
 8009eca:	d502      	bpl.n	8009ed2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ecc:	68da      	ldr	r2, [r3, #12]
 8009ece:	06d1      	lsls	r1, r2, #27
 8009ed0:	d40c      	bmi.n	8009eec <HAL_TIM_IRQHandler+0x50>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ed2:	691a      	ldr	r2, [r3, #16]
 8009ed4:	07d2      	lsls	r2, r2, #31
 8009ed6:	d502      	bpl.n	8009ede <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	07d0      	lsls	r0, r2, #31
 8009edc:	d450      	bmi.n	8009f80 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ede:	691a      	ldr	r2, [r3, #16]
 8009ee0:	0651      	lsls	r1, r2, #25
 8009ee2:	d502      	bpl.n	8009eea <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ee4:	68da      	ldr	r2, [r3, #12]
 8009ee6:	0652      	lsls	r2, r2, #25
 8009ee8:	d443      	bmi.n	8009f72 <HAL_TIM_IRQHandler+0xd6>
}
 8009eea:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009eec:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ef0:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ef2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ef4:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ef6:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009efa:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009efe:	d047      	beq.n	8009f90 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8009f00:	f7ff ffc6 	bl	8009e90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f04:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f06:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f08:	7622      	strb	r2, [r4, #24]
 8009f0a:	e7e2      	b.n	8009ed2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f0c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f10:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f12:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f14:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f16:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8009f18:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f1a:	079b      	lsls	r3, r3, #30
 8009f1c:	d044      	beq.n	8009fa8 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 8009f1e:	f7ff ffb7 	bl	8009e90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f22:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f24:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f26:	7622      	strb	r2, [r4, #24]
 8009f28:	e7cd      	b.n	8009ec6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f2a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f2e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f30:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f32:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f34:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8009f36:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f38:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009f3c:	d131      	bne.n	8009fa2 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f3e:	f7ff ffa5 	bl	8009e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f42:	4620      	mov	r0, r4
 8009f44:	f7ff ffa6 	bl	8009e94 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f48:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f4a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f4c:	7622      	strb	r2, [r4, #24]
 8009f4e:	e7b4      	b.n	8009eba <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f50:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f54:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f56:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f58:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	0799      	lsls	r1, r3, #30
 8009f5e:	d11d      	bne.n	8009f9c <HAL_TIM_IRQHandler+0x100>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f60:	f7ff ff94 	bl	8009e8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f64:	4620      	mov	r0, r4
 8009f66:	f7ff ff95 	bl	8009e94 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f6a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f6c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f6e:	7622      	strb	r2, [r4, #24]
 8009f70:	e79d      	b.n	8009eae <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f72:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8009f76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f78:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009f7a:	f7ff ff8d 	bl	8009e98 <HAL_TIM_TriggerCallback>
}
 8009f7e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f80:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f84:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f86:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f88:	f7fc fad2 	bl	8006530 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f8c:	6823      	ldr	r3, [r4, #0]
 8009f8e:	e7a6      	b.n	8009ede <HAL_TIM_IRQHandler+0x42>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f90:	f7ff ff7c 	bl	8009e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f94:	4620      	mov	r0, r4
 8009f96:	f7ff ff7d 	bl	8009e94 <HAL_TIM_PWM_PulseFinishedCallback>
 8009f9a:	e7b3      	b.n	8009f04 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_IC_CaptureCallback(htim);
 8009f9c:	f7ff ff78 	bl	8009e90 <HAL_TIM_IC_CaptureCallback>
 8009fa0:	e7e3      	b.n	8009f6a <HAL_TIM_IRQHandler+0xce>
        HAL_TIM_IC_CaptureCallback(htim);
 8009fa2:	f7ff ff75 	bl	8009e90 <HAL_TIM_IC_CaptureCallback>
 8009fa6:	e7cf      	b.n	8009f48 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fa8:	f7ff ff70 	bl	8009e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fac:	4620      	mov	r0, r4
 8009fae:	f7ff ff71 	bl	8009e94 <HAL_TIM_PWM_PulseFinishedCallback>
 8009fb2:	e7b6      	b.n	8009f22 <HAL_TIM_IRQHandler+0x86>

08009fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fb4:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8009fb8:	2a01      	cmp	r2, #1
 8009fba:	d028      	beq.n	800a00e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8009fbc:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fbe:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fc0:	681a      	ldr	r2, [r3, #0]
{
 8009fc2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc4:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 8009fc8:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fca:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fcc:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fd0:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fd2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 8009fd6:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8009fd8:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fda:	d00a      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8009fdc:	480d      	ldr	r0, [pc, #52]	; (800a014 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8009fde:	4282      	cmp	r2, r0
 8009fe0:	d007      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8009fe2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009fe6:	4282      	cmp	r2, r0
 8009fe8:	d003      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8009fea:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8009fee:	4282      	cmp	r2, r0
 8009ff0:	d104      	bne.n	8009ffc <HAL_TIMEx_MasterConfigSynchronization+0x48>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ff2:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ff4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ff8:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ffa:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8009ffc:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8009ffe:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800a000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800a004:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39

  return HAL_OK;
 800a008:	4610      	mov	r0, r2
}
 800a00a:	bc30      	pop	{r4, r5}
 800a00c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a00e:	2002      	movs	r0, #2
}
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	40000400 	.word	0x40000400

0800a018 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a018:	2800      	cmp	r0, #0
 800a01a:	f000 8081 	beq.w	800a120 <HAL_UART_Init+0x108>
{
 800a01e:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a020:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a024:	4604      	mov	r4, r0
 800a026:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d070      	beq.n	800a110 <HAL_UART_Init+0xf8>
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a02e:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800a032:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a034:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800a036:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a038:	4302      	orrs	r2, r0
 800a03a:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 800a03c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a040:	4302      	orrs	r2, r0
 800a042:	69e0      	ldr	r0, [r4, #28]
 800a044:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 800a046:	68d8      	ldr	r0, [r3, #12]
 800a048:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 800a04c:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a04e:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a050:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a052:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800a056:	4329      	orrs	r1, r5
 800a058:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800a05a:	68d9      	ldr	r1, [r3, #12]
 800a05c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800a060:	f021 010c 	bic.w	r1, r1, #12
 800a064:	430a      	orrs	r2, r1
 800a066:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a068:	695a      	ldr	r2, [r3, #20]


  if((huart->Instance == USART1))
 800a06a:	492e      	ldr	r1, [pc, #184]	; (800a124 <HAL_UART_Init+0x10c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a06c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a070:	4302      	orrs	r2, r0
  if((huart->Instance == USART1))
 800a072:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a074:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1))
 800a076:	d050      	beq.n	800a11a <HAL_UART_Init+0x102>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a078:	f7ff fdb0 	bl	8009bdc <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a07c:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a07e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a086:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a08a:	6863      	ldr	r3, [r4, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a08c:	d027      	beq.n	800a0de <HAL_UART_Init+0xc6>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	fbb0 f3f3 	udiv	r3, r0, r3
 800a094:	2564      	movs	r5, #100	; 0x64
 800a096:	4824      	ldr	r0, [pc, #144]	; (800a128 <HAL_UART_Init+0x110>)
 800a098:	6822      	ldr	r2, [r4, #0]
 800a09a:	fba0 6103 	umull	r6, r1, r0, r3
 800a09e:	0949      	lsrs	r1, r1, #5
 800a0a0:	fb05 3311 	mls	r3, r5, r1, r3
 800a0a4:	011b      	lsls	r3, r3, #4
 800a0a6:	3332      	adds	r3, #50	; 0x32
 800a0a8:	fba0 0303 	umull	r0, r3, r0, r3
 800a0ac:	0109      	lsls	r1, r1, #4
 800a0ae:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800a0b2:	6093      	str	r3, [r2, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b4:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800a0b6:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0b8:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800a0ba:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0bc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a0c0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0c2:	6953      	ldr	r3, [r2, #20]
 800a0c4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a0c8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800a0ca:	68d3      	ldr	r3, [r2, #12]
 800a0cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a0d0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0d2:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a0d4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a0d8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 800a0dc:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a0de:	005b      	lsls	r3, r3, #1
 800a0e0:	fbb0 f0f3 	udiv	r0, r0, r3
 800a0e4:	2364      	movs	r3, #100	; 0x64
 800a0e6:	4e10      	ldr	r6, [pc, #64]	; (800a128 <HAL_UART_Init+0x110>)
 800a0e8:	6822      	ldr	r2, [r4, #0]
 800a0ea:	fba6 5100 	umull	r5, r1, r6, r0
 800a0ee:	094d      	lsrs	r5, r1, #5
 800a0f0:	fb03 0315 	mls	r3, r3, r5, r0
 800a0f4:	00db      	lsls	r3, r3, #3
 800a0f6:	3332      	adds	r3, #50	; 0x32
 800a0f8:	fba6 1303 	umull	r1, r3, r6, r3
 800a0fc:	f3c3 1142 	ubfx	r1, r3, #5, #3
 800a100:	091b      	lsrs	r3, r3, #4
 800a102:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800a106:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a10a:	440b      	add	r3, r1
 800a10c:	6093      	str	r3, [r2, #8]
 800a10e:	e7d1      	b.n	800a0b4 <HAL_UART_Init+0x9c>
    huart->Lock = HAL_UNLOCKED;
 800a110:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800a114:	f7fc fe26 	bl	8006d64 <HAL_UART_MspInit>
 800a118:	e789      	b.n	800a02e <HAL_UART_Init+0x16>
    pclk = HAL_RCC_GetPCLK2Freq();
 800a11a:	f7ff fd6f 	bl	8009bfc <HAL_RCC_GetPCLK2Freq>
 800a11e:	e7ad      	b.n	800a07c <HAL_UART_Init+0x64>
    return HAL_ERROR;
 800a120:	2001      	movs	r0, #1
}
 800a122:	4770      	bx	lr
 800a124:	40013800 	.word	0x40013800
 800a128:	51eb851f 	.word	0x51eb851f

0800a12c <HAL_UART_Transmit_DMA>:
{
 800a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800a130:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800a134:	2820      	cmp	r0, #32
 800a136:	d12d      	bne.n	800a194 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 800a138:	b351      	cbz	r1, 800a190 <HAL_UART_Transmit_DMA+0x64>
 800a13a:	b34a      	cbz	r2, 800a190 <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 800a13c:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800a140:	2801      	cmp	r0, #1
 800a142:	d027      	beq.n	800a194 <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a144:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800a146:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a14a:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a14e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a150:	4f11      	ldr	r7, [pc, #68]	; (800a198 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a152:	4e12      	ldr	r6, [pc, #72]	; (800a19c <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 800a154:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 800a156:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a158:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 800a15a:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 800a15c:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a160:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a164:	4613      	mov	r3, r2
 800a166:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a168:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a16c:	4e0c      	ldr	r6, [pc, #48]	; (800a1a0 <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a16e:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 800a170:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a172:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a174:	f7fd fd0e 	bl	8007b94 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a17c:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800a17e:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a180:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800a182:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a186:	695a      	ldr	r2, [r3, #20]
 800a188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a18c:	615a      	str	r2, [r3, #20]
}
 800a18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a190:	2001      	movs	r0, #1
}
 800a192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800a194:	2002      	movs	r0, #2
}
 800a196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a198:	0800a245 	.word	0x0800a245
 800a19c:	0800a271 	.word	0x0800a271
 800a1a0:	0800a281 	.word	0x0800a281

0800a1a4 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1a4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800a1a8:	2b20      	cmp	r3, #32
 800a1aa:	d13f      	bne.n	800a22c <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800a1ac:	2900      	cmp	r1, #0
 800a1ae:	d03b      	beq.n	800a228 <HAL_UART_Receive_DMA+0x84>
 800a1b0:	2a00      	cmp	r2, #0
 800a1b2:	d039      	beq.n	800a228 <HAL_UART_Receive_DMA+0x84>
{
 800a1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 800a1b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	2b01      	cmp	r3, #1
{
 800a1be:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 800a1c0:	d036      	beq.n	800a230 <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c2:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800a1c4:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1c8:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 800a1cc:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800a1ce:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a1d0:	4f19      	ldr	r7, [pc, #100]	; (800a238 <HAL_UART_Receive_DMA+0x94>)
 800a1d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a1d4:	4e19      	ldr	r6, [pc, #100]	; (800a23c <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 800a1d8:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1dc:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a1de:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1e0:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a1e4:	460a      	mov	r2, r1
 800a1e6:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a1e8:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a1ec:	4e14      	ldr	r6, [pc, #80]	; (800a240 <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a1ee:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 800a1f0:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a1f2:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a1f4:	f7fd fcce 	bl	8007b94 <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 800a1f8:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	9501      	str	r5, [sp, #4]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	9201      	str	r2, [sp, #4]
 800a202:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 800a204:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a208:	9201      	str	r2, [sp, #4]
 800a20a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a20c:	68da      	ldr	r2, [r3, #12]
 800a20e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a212:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a214:	695a      	ldr	r2, [r3, #20]
 800a216:	f042 0201 	orr.w	r2, r2, #1
 800a21a:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a21c:	695a      	ldr	r2, [r3, #20]
 800a21e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a222:	615a      	str	r2, [r3, #20]
}
 800a224:	b003      	add	sp, #12
 800a226:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a228:	2001      	movs	r0, #1
}
 800a22a:	4770      	bx	lr
    return HAL_BUSY;
 800a22c:	2002      	movs	r0, #2
 800a22e:	4770      	bx	lr
 800a230:	2002      	movs	r0, #2
}
 800a232:	b003      	add	sp, #12
 800a234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a236:	bf00      	nop
 800a238:	0800a32d 	.word	0x0800a32d
 800a23c:	0800a311 	.word	0x0800a311
 800a240:	0800a281 	.word	0x0800a281

0800a244 <UART_DMATransmitCplt>:
{
 800a244:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a246:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a248:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f013 0320 	ands.w	r3, r3, #32
 800a250:	d10a      	bne.n	800a268 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a252:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 800a254:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a256:	6953      	ldr	r3, [r2, #20]
 800a258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a25c:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a25e:	68d3      	ldr	r3, [r2, #12]
 800a260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a264:	60d3      	str	r3, [r2, #12]
}
 800a266:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800a268:	f7fc fbc8 	bl	80069fc <HAL_UART_TxCpltCallback>
}
 800a26c:	bd08      	pop	{r3, pc}
 800a26e:	bf00      	nop

0800a270 <UART_DMATxHalfCplt>:
{
 800a270:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800a272:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a274:	f7fc fbae 	bl	80069d4 <HAL_UART_TxHalfCpltCallback>
}
 800a278:	bd08      	pop	{r3, pc}
 800a27a:	bf00      	nop

0800a27c <HAL_UART_RxHalfCpltCallback>:
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop

0800a280 <UART_DMAError>:
{
 800a280:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a282:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a284:	6803      	ldr	r3, [r0, #0]
 800a286:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a288:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800a28c:	2a21      	cmp	r2, #33	; 0x21
 800a28e:	d00b      	beq.n	800a2a8 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a290:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a292:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800a296:	2a22      	cmp	r2, #34	; 0x22
 800a298:	d016      	beq.n	800a2c8 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a29a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a29c:	f043 0310 	orr.w	r3, r3, #16
 800a2a0:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 800a2a2:	f7fc fb8d 	bl	80069c0 <HAL_UART_ErrorCallback>
}
 800a2a6:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a2a8:	0609      	lsls	r1, r1, #24
 800a2aa:	d5f1      	bpl.n	800a290 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800a2ac:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 800a2ae:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 800a2b0:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a2b2:	68da      	ldr	r2, [r3, #12]
 800a2b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a2b8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800a2ba:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a2be:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a2c0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800a2c4:	2a22      	cmp	r2, #34	; 0x22
 800a2c6:	d1e8      	bne.n	800a29a <UART_DMAError+0x1a>
 800a2c8:	064a      	lsls	r2, r1, #25
 800a2ca:	d5e6      	bpl.n	800a29a <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2d0:	68da      	ldr	r2, [r3, #12]
 800a2d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a2d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d8:	695a      	ldr	r2, [r3, #20]
 800a2da:	f022 0201 	bic.w	r2, r2, #1
 800a2de:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800a2e2:	2a01      	cmp	r2, #1
 800a2e4:	d103      	bne.n	800a2ee <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2e6:	68da      	ldr	r2, [r3, #12]
 800a2e8:	f022 0210 	bic.w	r2, r2, #16
 800a2ec:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 800a2ee:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2f0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a2f2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2f6:	6303      	str	r3, [r0, #48]	; 0x30
}
 800a2f8:	e7cf      	b.n	800a29a <UART_DMAError+0x1a>
 800a2fa:	bf00      	nop

0800a2fc <UART_DMAAbortOnError>:
{
 800a2fc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800a2fe:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a300:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800a302:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a304:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800a306:	f7fc fb5b 	bl	80069c0 <HAL_UART_ErrorCallback>
}
 800a30a:	bd08      	pop	{r3, pc}

0800a30c <HAL_UARTEx_RxEventCallback>:
}
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop

0800a310 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a310:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800a312:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a314:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a316:	2b01      	cmp	r3, #1
 800a318:	d002      	beq.n	800a320 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800a31a:	f7ff ffaf 	bl	800a27c <HAL_UART_RxHalfCpltCallback>
}
 800a31e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a320:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800a322:	0849      	lsrs	r1, r1, #1
 800a324:	f7ff fff2 	bl	800a30c <HAL_UARTEx_RxEventCallback>
}
 800a328:	bd08      	pop	{r3, pc}
 800a32a:	bf00      	nop

0800a32c <UART_DMAReceiveCplt>:
{
 800a32c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a32e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a330:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f013 0320 	ands.w	r3, r3, #32
 800a338:	d113      	bne.n	800a362 <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 800a33a:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a33c:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 800a33e:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a340:	68d3      	ldr	r3, [r2, #12]
 800a342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a346:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a348:	6953      	ldr	r3, [r2, #20]
 800a34a:	f023 0301 	bic.w	r3, r3, #1
 800a34e:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a350:	6953      	ldr	r3, [r2, #20]
 800a352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a356:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800a358:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a35c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d009      	beq.n	800a376 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a362:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a364:	2b01      	cmp	r3, #1
 800a366:	d002      	beq.n	800a36e <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 800a368:	f7fc fa0e 	bl	8006788 <HAL_UART_RxCpltCallback>
}
 800a36c:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a36e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800a370:	f7ff ffcc 	bl	800a30c <HAL_UARTEx_RxEventCallback>
}
 800a374:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a376:	68d3      	ldr	r3, [r2, #12]
 800a378:	f023 0310 	bic.w	r3, r3, #16
 800a37c:	60d3      	str	r3, [r2, #12]
 800a37e:	e7f0      	b.n	800a362 <UART_DMAReceiveCplt+0x36>

0800a380 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a380:	6883      	ldr	r3, [r0, #8]
 800a382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a386:	d03b      	beq.n	800a400 <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a388:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d030      	beq.n	800a3f0 <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a38e:	6803      	ldr	r3, [r0, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a396:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800a398:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a39a:	3301      	adds	r3, #1
 800a39c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800a39e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800a3a6:	bb53      	cbnz	r3, 800a3fe <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 800a3a8:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a3ac:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800a3ae:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a3b0:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800a3b2:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a3b4:	f021 0120 	bic.w	r1, r1, #32
 800a3b8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a3ba:	68d1      	ldr	r1, [r2, #12]
 800a3bc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a3c0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a3c2:	6951      	ldr	r1, [r2, #20]
 800a3c4:	f021 0101 	bic.w	r1, r1, #1
 800a3c8:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800a3ca:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ce:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a3d0:	2901      	cmp	r1, #1
 800a3d2:	d120      	bne.n	800a416 <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3d4:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d6:	68d1      	ldr	r1, [r2, #12]
 800a3d8:	f021 0110 	bic.w	r1, r1, #16
 800a3dc:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a3de:	6811      	ldr	r1, [r2, #0]
 800a3e0:	06c9      	lsls	r1, r1, #27
 800a3e2:	d422      	bmi.n	800a42a <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3e4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800a3e6:	f7ff ff91 	bl	800a30c <HAL_UARTEx_RxEventCallback>
}
 800a3ea:	b003      	add	sp, #12
 800a3ec:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3f0:	6903      	ldr	r3, [r0, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1cb      	bne.n	800a38e <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3f6:	6803      	ldr	r3, [r0, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	7013      	strb	r3, [r2, #0]
 800a3fc:	e7cc      	b.n	800a398 <UART_Receive_IT.part.0.isra.0+0x18>
 800a3fe:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a400:	6903      	ldr	r3, [r0, #16]
 800a402:	b96b      	cbnz	r3, 800a420 <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a404:	6802      	ldr	r2, [r0, #0]
 800a406:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a408:	6852      	ldr	r2, [r2, #4]
 800a40a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a40e:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800a412:	6283      	str	r3, [r0, #40]	; 0x28
 800a414:	e7c3      	b.n	800a39e <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 800a416:	f7fc f9b7 	bl	8006788 <HAL_UART_RxCpltCallback>
}
 800a41a:	b003      	add	sp, #12
 800a41c:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a420:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a422:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	7013      	strb	r3, [r2, #0]
 800a428:	e7b6      	b.n	800a398 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a42a:	9301      	str	r3, [sp, #4]
 800a42c:	6813      	ldr	r3, [r2, #0]
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	6853      	ldr	r3, [r2, #4]
 800a432:	9301      	str	r3, [sp, #4]
 800a434:	9b01      	ldr	r3, [sp, #4]
 800a436:	e7d5      	b.n	800a3e4 <UART_Receive_IT.part.0.isra.0+0x64>

0800a438 <HAL_UART_IRQHandler>:
{
 800a438:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a43a:	6803      	ldr	r3, [r0, #0]
{
 800a43c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a43e:	681a      	ldr	r2, [r3, #0]
{
 800a440:	b083      	sub	sp, #12
  if (errorflags == RESET)
 800a442:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a446:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a448:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800a44a:	d14e      	bne.n	800a4ea <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a44c:	0695      	lsls	r5, r2, #26
 800a44e:	d502      	bpl.n	800a456 <HAL_UART_IRQHandler+0x1e>
 800a450:	068d      	lsls	r5, r1, #26
 800a452:	f100 8090 	bmi.w	800a576 <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a456:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a458:	2801      	cmp	r0, #1
 800a45a:	d00b      	beq.n	800a474 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a45c:	0610      	lsls	r0, r2, #24
 800a45e:	d502      	bpl.n	800a466 <HAL_UART_IRQHandler+0x2e>
 800a460:	060d      	lsls	r5, r1, #24
 800a462:	f100 8092 	bmi.w	800a58a <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a466:	0650      	lsls	r0, r2, #25
 800a468:	d502      	bpl.n	800a470 <HAL_UART_IRQHandler+0x38>
 800a46a:	064a      	lsls	r2, r1, #25
 800a46c:	f100 80ab 	bmi.w	800a5c6 <HAL_UART_IRQHandler+0x18e>
}
 800a470:	b003      	add	sp, #12
 800a472:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a474:	06d0      	lsls	r0, r2, #27
 800a476:	d5f1      	bpl.n	800a45c <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a478:	06cd      	lsls	r5, r1, #27
 800a47a:	d5ef      	bpl.n	800a45c <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a47c:	2100      	movs	r1, #0
 800a47e:	9101      	str	r1, [sp, #4]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	9201      	str	r2, [sp, #4]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	9201      	str	r2, [sp, #4]
 800a488:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a48a:	695a      	ldr	r2, [r3, #20]
 800a48c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800a490:	f000 80d2 	beq.w	800a638 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a494:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a496:	6802      	ldr	r2, [r0, #0]
 800a498:	6852      	ldr	r2, [r2, #4]
 800a49a:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800a49c:	2a00      	cmp	r2, #0
 800a49e:	d0e7      	beq.n	800a470 <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a4a0:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800a4a2:	4295      	cmp	r5, r2
 800a4a4:	d9e4      	bls.n	800a470 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800a4a6:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a4a8:	6982      	ldr	r2, [r0, #24]
 800a4aa:	2a20      	cmp	r2, #32
 800a4ac:	d016      	beq.n	800a4dc <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4b4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4b6:	695a      	ldr	r2, [r3, #20]
 800a4b8:	f022 0201 	bic.w	r2, r2, #1
 800a4bc:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4be:	695a      	ldr	r2, [r3, #20]
 800a4c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4c4:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4cc:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4ce:	68da      	ldr	r2, [r3, #12]
 800a4d0:	f022 0210 	bic.w	r2, r2, #16
 800a4d4:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4d6:	f7fd fba7 	bl	8007c28 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4da:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800a4dc:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800a4de:	4620      	mov	r0, r4
 800a4e0:	1a69      	subs	r1, r5, r1
 800a4e2:	b289      	uxth	r1, r1
 800a4e4:	f7ff ff12 	bl	800a30c <HAL_UARTEx_RxEventCallback>
 800a4e8:	e7c2      	b.n	800a470 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a4ea:	f005 0501 	and.w	r5, r5, #1
 800a4ee:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800a4f2:	4328      	orrs	r0, r5
 800a4f4:	d0af      	beq.n	800a456 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a4f6:	07d0      	lsls	r0, r2, #31
 800a4f8:	d505      	bpl.n	800a506 <HAL_UART_IRQHandler+0xce>
 800a4fa:	05c8      	lsls	r0, r1, #23
 800a4fc:	d503      	bpl.n	800a506 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a500:	f040 0001 	orr.w	r0, r0, #1
 800a504:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a506:	0750      	lsls	r0, r2, #29
 800a508:	d530      	bpl.n	800a56c <HAL_UART_IRQHandler+0x134>
 800a50a:	b14d      	cbz	r5, 800a520 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a50c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a50e:	f040 0002 	orr.w	r0, r0, #2
 800a512:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a514:	0790      	lsls	r0, r2, #30
 800a516:	d503      	bpl.n	800a520 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a518:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a51a:	f040 0004 	orr.w	r0, r0, #4
 800a51e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a520:	0710      	lsls	r0, r2, #28
 800a522:	d507      	bpl.n	800a534 <HAL_UART_IRQHandler+0xfc>
 800a524:	f001 0020 	and.w	r0, r1, #32
 800a528:	4328      	orrs	r0, r5
 800a52a:	d003      	beq.n	800a534 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a52c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a52e:	f040 0008 	orr.w	r0, r0, #8
 800a532:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a534:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a536:	2800      	cmp	r0, #0
 800a538:	d09a      	beq.n	800a470 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a53a:	0690      	lsls	r0, r2, #26
 800a53c:	d509      	bpl.n	800a552 <HAL_UART_IRQHandler+0x11a>
 800a53e:	068a      	lsls	r2, r1, #26
 800a540:	d507      	bpl.n	800a552 <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a542:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800a546:	2a22      	cmp	r2, #34	; 0x22
 800a548:	d103      	bne.n	800a552 <HAL_UART_IRQHandler+0x11a>
 800a54a:	4620      	mov	r0, r4
 800a54c:	f7ff ff18 	bl	800a380 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a554:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a556:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a55a:	f005 0508 	and.w	r5, r5, #8
 800a55e:	4315      	orrs	r5, r2
 800a560:	d13c      	bne.n	800a5dc <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 800a562:	4620      	mov	r0, r4
 800a564:	f7fc fa2c 	bl	80069c0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a568:	6425      	str	r5, [r4, #64]	; 0x40
 800a56a:	e781      	b.n	800a470 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a56c:	0790      	lsls	r0, r2, #30
 800a56e:	d5d7      	bpl.n	800a520 <HAL_UART_IRQHandler+0xe8>
 800a570:	2d00      	cmp	r5, #0
 800a572:	d1d1      	bne.n	800a518 <HAL_UART_IRQHandler+0xe0>
 800a574:	e7d4      	b.n	800a520 <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a576:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800a57a:	2b22      	cmp	r3, #34	; 0x22
 800a57c:	f47f af78 	bne.w	800a470 <HAL_UART_IRQHandler+0x38>
}
 800a580:	b003      	add	sp, #12
 800a582:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a586:	f7ff befb 	b.w	800a380 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a58a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800a58e:	2a21      	cmp	r2, #33	; 0x21
 800a590:	f47f af6e 	bne.w	800a470 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a594:	68a2      	ldr	r2, [r4, #8]
 800a596:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a59a:	d06e      	beq.n	800a67a <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a59c:	6a22      	ldr	r2, [r4, #32]
 800a59e:	1c51      	adds	r1, r2, #1
 800a5a0:	6221      	str	r1, [r4, #32]
 800a5a2:	7812      	ldrb	r2, [r2, #0]
 800a5a4:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800a5a6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800a5a8:	3a01      	subs	r2, #1
 800a5aa:	b292      	uxth	r2, r2
 800a5ac:	84e2      	strh	r2, [r4, #38]	; 0x26
 800a5ae:	2a00      	cmp	r2, #0
 800a5b0:	f47f af5e 	bne.w	800a470 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a5b4:	68da      	ldr	r2, [r3, #12]
 800a5b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5ba:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a5bc:	68da      	ldr	r2, [r3, #12]
 800a5be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5c2:	60da      	str	r2, [r3, #12]
 800a5c4:	e754      	b.n	800a470 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 800a5c6:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5c8:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800a5ca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5d0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800a5d2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800a5d6:	f7fc fa11 	bl	80069fc <HAL_UART_TxCpltCallback>
    return;
 800a5da:	e749      	b.n	800a470 <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5dc:	68da      	ldr	r2, [r3, #12]
 800a5de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a5e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e4:	695a      	ldr	r2, [r3, #20]
 800a5e6:	f022 0201 	bic.w	r2, r2, #1
 800a5ea:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a5ee:	2a01      	cmp	r2, #1
 800a5f0:	d103      	bne.n	800a5fa <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5f2:	68da      	ldr	r2, [r3, #12]
 800a5f4:	f022 0210 	bic.w	r2, r2, #16
 800a5f8:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5fa:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a5fc:	2120      	movs	r1, #32
 800a5fe:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a602:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a604:	695a      	ldr	r2, [r3, #20]
 800a606:	0655      	lsls	r5, r2, #25
 800a608:	d512      	bpl.n	800a630 <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a60a:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800a60c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a60e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a612:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800a614:	b160      	cbz	r0, 800a630 <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a616:	4b1e      	ldr	r3, [pc, #120]	; (800a690 <HAL_UART_IRQHandler+0x258>)
 800a618:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a61a:	f7fd fb2d 	bl	8007c78 <HAL_DMA_Abort_IT>
 800a61e:	2800      	cmp	r0, #0
 800a620:	f43f af26 	beq.w	800a470 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a624:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a626:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800a628:	b003      	add	sp, #12
 800a62a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a62e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800a630:	4620      	mov	r0, r4
 800a632:	f7fc f9c5 	bl	80069c0 <HAL_UART_ErrorCallback>
 800a636:	e71b      	b.n	800a470 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a638:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 800a63a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a63c:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800a63e:	b289      	uxth	r1, r1
 800a640:	2900      	cmp	r1, #0
 800a642:	f43f af15 	beq.w	800a470 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a646:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800a648:	1a08      	subs	r0, r1, r0
 800a64a:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800a64c:	2900      	cmp	r1, #0
 800a64e:	f43f af0f 	beq.w	800a470 <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 800a652:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a654:	68d8      	ldr	r0, [r3, #12]
 800a656:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800a65a:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a65c:	6958      	ldr	r0, [r3, #20]
 800a65e:	f020 0001 	bic.w	r0, r0, #1
 800a662:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800a664:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a668:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a66a:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a66c:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a66e:	f022 0210 	bic.w	r2, r2, #16
 800a672:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a674:	f7ff fe4a 	bl	800a30c <HAL_UARTEx_RxEventCallback>
 800a678:	e6fa      	b.n	800a470 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a67a:	6922      	ldr	r2, [r4, #16]
 800a67c:	2a00      	cmp	r2, #0
 800a67e:	d18d      	bne.n	800a59c <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a680:	6a22      	ldr	r2, [r4, #32]
 800a682:	f832 1b02 	ldrh.w	r1, [r2], #2
 800a686:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800a68a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a68c:	6222      	str	r2, [r4, #32]
 800a68e:	e78a      	b.n	800a5a6 <HAL_UART_IRQHandler+0x16e>
 800a690:	0800a2fd 	.word	0x0800a2fd

0800a694 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a694:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a696:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a698:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800a69c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 800a6a0:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 800a6a2:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800a6a6:	4770      	bx	lr

0800a6a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a6a8:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a6aa:	f244 02ff 	movw	r2, #16639	; 0x40ff
 800a6ae:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40

  return HAL_OK;
}
 800a6b2:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a6b4:	400a      	ands	r2, r1
 800a6b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800a6ba:	4770      	bx	lr

0800a6bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a6bc:	b084      	sub	sp, #16
 800a6be:	f10d 0c04 	add.w	ip, sp, #4
 800a6c2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800a6c6:	4603      	mov	r3, r0
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a6c8:	2200      	movs	r2, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a6ca:	2101      	movs	r1, #1

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 800a6cc:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a6ce:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800a6d2:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 800a6d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 800a6d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800a6dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop

0800a6e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a6e6:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800a6e8:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a6ec:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
{
 800a6f0:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a6f2:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 800a6f6:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800a6fa:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800a6fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  switch (ep->type)
 800a702:	f1be 0f03 	cmp.w	lr, #3
 800a706:	f200 815a 	bhi.w	800a9be <USB_ActivateEndpoint+0x2da>
 800a70a:	e8df f00e 	tbb	[pc, lr]
 800a70e:	4e52      	.short	0x4e52
 800a710:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a712:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800a716:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a718:	f248 0580 	movw	r5, #32896	; 0x8080
 800a71c:	ea4c 0c05 	orr.w	ip, ip, r5
 800a720:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a724:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800a728:	4ca6      	ldr	r4, [pc, #664]	; (800a9c4 <USB_ActivateEndpoint+0x2e0>)
 800a72a:	fa1f fc8c 	uxth.w	ip, ip
 800a72e:	ea0c 0c04 	and.w	ip, ip, r4
 800a732:	ea4c 0c02 	orr.w	ip, ip, r2
 800a736:	ea45 050c 	orr.w	r5, r5, ip
 800a73a:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800a73e:	7b0d      	ldrb	r5, [r1, #12]
 800a740:	2d00      	cmp	r5, #0
 800a742:	d17e      	bne.n	800a842 <USB_ActivateEndpoint+0x15e>
  {
    if (ep->is_in != 0U)
 800a744:	784d      	ldrb	r5, [r1, #1]
 800a746:	2d00      	cmp	r5, #0
 800a748:	f000 80dd 	beq.w	800a906 <USB_ActivateEndpoint+0x222>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a74c:	88c9      	ldrh	r1, [r1, #6]
 800a74e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800a752:	0849      	lsrs	r1, r1, #1
 800a754:	eb03 1602 	add.w	r6, r3, r2, lsl #4
 800a758:	0049      	lsls	r1, r1, #1
 800a75a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a75e:	b2ad      	uxth	r5, r5
 800a760:	5371      	strh	r1, [r6, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a762:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a766:	064e      	lsls	r6, r1, #25
 800a768:	d509      	bpl.n	800a77e <USB_ActivateEndpoint+0x9a>
 800a76a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a76e:	b289      	uxth	r1, r1
 800a770:	400c      	ands	r4, r1
 800a772:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800a776:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800a77a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a77e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800a782:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a786:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800a78a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800a78e:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800a792:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 800a796:	d04d      	beq.n	800a834 <USB_ActivateEndpoint+0x150>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a798:	f081 0120 	eor.w	r1, r1, #32
 800a79c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a7a0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a7a4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800a7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef ret = HAL_OK;
 800a7aa:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a7ac:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
      break;
 800a7b0:	e7b2      	b.n	800a718 <USB_ActivateEndpoint+0x34>
  HAL_StatusTypeDef ret = HAL_OK;
 800a7b2:	4670      	mov	r0, lr
      wEpRegVal |= USB_EP_CONTROL;
 800a7b4:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 800a7b8:	e7ae      	b.n	800a718 <USB_ActivateEndpoint+0x34>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a7ba:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a7be:	044d      	lsls	r5, r1, #17
 800a7c0:	d509      	bpl.n	800a7d6 <USB_ActivateEndpoint+0xf2>
 800a7c2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a7c6:	b289      	uxth	r1, r1
 800a7c8:	400c      	ands	r4, r1
 800a7ca:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800a7ce:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800a7d2:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a7d6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a7da:	0649      	lsls	r1, r1, #25
 800a7dc:	d50d      	bpl.n	800a7fa <USB_ActivateEndpoint+0x116>
 800a7de:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a7e2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800a7e6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a7ea:	0409      	lsls	r1, r1, #16
 800a7ec:	0c09      	lsrs	r1, r1, #16
 800a7ee:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a7f2:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800a7f6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a7fa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800a7fe:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a802:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800a806:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800a80a:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800a80e:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800a812:	bf18      	it	ne
 800a814:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a818:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a81c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a820:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a824:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a828:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800a82c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a830:	0409      	lsls	r1, r1, #16
 800a832:	0c09      	lsrs	r1, r1, #16
 800a834:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a838:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a83c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800a840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF(USBx, ep->num);
 800a842:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800a846:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800a84a:	fa1f fc8c 	uxth.w	ip, ip
 800a84e:	ea0c 0c04 	and.w	ip, ip, r4
 800a852:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 800a856:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800a85a:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a85e:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 800a862:	890e      	ldrh	r6, [r1, #8]
 800a864:	fa1f fc8c 	uxth.w	ip, ip
 800a868:	0876      	lsrs	r6, r6, #1
 800a86a:	44bc      	add	ip, r7
 800a86c:	0076      	lsls	r6, r6, #1
 800a86e:	f8ac 6400 	strh.w	r6, [ip, #1024]	; 0x400
 800a872:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800a876:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800a87a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a87e:	b2ad      	uxth	r5, r5
 800a880:	443d      	add	r5, r7
 800a882:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800a886:	f8a5 c408 	strh.w	ip, [r5, #1032]	; 0x408
    if (ep->is_in == 0U)
 800a88a:	7849      	ldrb	r1, [r1, #1]
 800a88c:	2900      	cmp	r1, #0
 800a88e:	d194      	bne.n	800a7ba <USB_ActivateEndpoint+0xd6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a890:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a894:	044f      	lsls	r7, r1, #17
 800a896:	d509      	bpl.n	800a8ac <USB_ActivateEndpoint+0x1c8>
 800a898:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a89c:	b289      	uxth	r1, r1
 800a89e:	400c      	ands	r4, r1
 800a8a0:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800a8a4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800a8a8:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a8ac:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a8b0:	064e      	lsls	r6, r1, #25
 800a8b2:	d50d      	bpl.n	800a8d0 <USB_ActivateEndpoint+0x1ec>
 800a8b4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a8b8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800a8bc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a8c0:	0409      	lsls	r1, r1, #16
 800a8c2:	0c09      	lsrs	r1, r1, #16
 800a8c4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a8c8:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800a8cc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a8d0:	f248 0480 	movw	r4, #32896	; 0x8080
 800a8d4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a8d8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800a8dc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a8e0:	0409      	lsls	r1, r1, #16
 800a8e2:	0c09      	lsrs	r1, r1, #16
 800a8e4:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800a8e8:	4321      	orrs	r1, r4
 800a8ea:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8ee:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a8f2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800a8f6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800a8fa:	0409      	lsls	r1, r1, #16
 800a8fc:	0c09      	lsrs	r1, r1, #16
 800a8fe:	4321      	orrs	r1, r4
 800a900:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800a904:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a906:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800a90a:	88cd      	ldrh	r5, [r1, #6]
 800a90c:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800a910:	b2a4      	uxth	r4, r4
 800a912:	086d      	lsrs	r5, r5, #1
 800a914:	006d      	lsls	r5, r5, #1
 800a916:	443c      	add	r4, r7
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a918:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a91a:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a91e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800a922:	b289      	uxth	r1, r1
 800a924:	4439      	add	r1, r7
 800a926:	b366      	cbz	r6, 800a982 <USB_ActivateEndpoint+0x29e>
 800a928:	2e3e      	cmp	r6, #62	; 0x3e
 800a92a:	d83c      	bhi.n	800a9a6 <USB_ActivateEndpoint+0x2c2>
 800a92c:	0874      	lsrs	r4, r6, #1
 800a92e:	07f5      	lsls	r5, r6, #31
 800a930:	bf48      	it	mi
 800a932:	3401      	addmi	r4, #1
 800a934:	02a4      	lsls	r4, r4, #10
 800a936:	b2a4      	uxth	r4, r4
 800a938:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a93c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a940:	0449      	lsls	r1, r1, #17
 800a942:	d50d      	bpl.n	800a960 <USB_ActivateEndpoint+0x27c>
 800a944:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a948:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800a94c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a950:	0409      	lsls	r1, r1, #16
 800a952:	0c09      	lsrs	r1, r1, #16
 800a954:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800a958:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a95c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a960:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a964:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800a968:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a96c:	0409      	lsls	r1, r1, #16
 800a96e:	0c09      	lsrs	r1, r1, #16
 800a970:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800a974:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a978:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a97c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800a980:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a982:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800a986:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800a98a:	0424      	lsls	r4, r4, #16
 800a98c:	0c24      	lsrs	r4, r4, #16
 800a98e:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800a992:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800a996:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800a99a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800a99e:	b2a4      	uxth	r4, r4
 800a9a0:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800a9a4:	e7ca      	b.n	800a93c <USB_ActivateEndpoint+0x258>
 800a9a6:	0975      	lsrs	r5, r6, #5
 800a9a8:	06f4      	lsls	r4, r6, #27
 800a9aa:	4c07      	ldr	r4, [pc, #28]	; (800a9c8 <USB_ActivateEndpoint+0x2e4>)
 800a9ac:	bf08      	it	eq
 800a9ae:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800a9b2:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800a9b6:	b2a4      	uxth	r4, r4
 800a9b8:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800a9bc:	e7be      	b.n	800a93c <USB_ActivateEndpoint+0x258>
  switch (ep->type)
 800a9be:	2001      	movs	r0, #1
 800a9c0:	e6aa      	b.n	800a718 <USB_ActivateEndpoint+0x34>
 800a9c2:	bf00      	nop
 800a9c4:	ffff8f8f 	.word	0xffff8f8f
 800a9c8:	ffff8000 	.word	0xffff8000

0800a9cc <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800a9cc:	7b0b      	ldrb	r3, [r1, #12]
 800a9ce:	b9cb      	cbnz	r3, 800aa04 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 800a9d0:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9d2:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f000 80b1 	beq.w	800ab3c <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a9de:	0659      	lsls	r1, r3, #25
 800a9e0:	f100 80c5 	bmi.w	800ab6e <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a9e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a9e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a9f0:	041b      	lsls	r3, r3, #16
 800a9f2:	0c1b      	lsrs	r3, r3, #16
 800a9f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9fc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800aa00:	2000      	movs	r0, #0
 800aa02:	4770      	bx	lr
    if (ep->is_in == 0U)
 800aa04:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa06:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d14b      	bne.n	800aaa4 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa10:	0459      	lsls	r1, r3, #17
 800aa12:	d50d      	bpl.n	800aa30 <USB_DeactivateEndpoint+0x64>
 800aa14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa20:	041b      	lsls	r3, r3, #16
 800aa22:	0c1b      	lsrs	r3, r3, #16
 800aa24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa2c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa34:	065b      	lsls	r3, r3, #25
 800aa36:	d50d      	bpl.n	800aa54 <USB_DeactivateEndpoint+0x88>
 800aa38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa44:	041b      	lsls	r3, r3, #16
 800aa46:	0c1b      	lsrs	r3, r3, #16
 800aa48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa54:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 800aa58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa64:	041b      	lsls	r3, r3, #16
 800aa66:	0c1b      	lsrs	r3, r3, #16
 800aa68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa70:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa80:	041b      	lsls	r3, r3, #16
 800aa82:	0c1b      	lsrs	r3, r3, #16
 800aa84:	430b      	orrs	r3, r1
 800aa86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa96:	041b      	lsls	r3, r3, #16
 800aa98:	0c1b      	lsrs	r3, r3, #16
 800aa9a:	430b      	orrs	r3, r1
 800aa9c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aaa4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aaa8:	0459      	lsls	r1, r3, #17
 800aaaa:	d50d      	bpl.n	800aac8 <USB_DeactivateEndpoint+0xfc>
 800aaac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab8:	041b      	lsls	r3, r3, #16
 800aaba:	0c1b      	lsrs	r3, r3, #16
 800aabc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aac8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aacc:	065b      	lsls	r3, r3, #25
 800aace:	d50d      	bpl.n	800aaec <USB_DeactivateEndpoint+0x120>
 800aad0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aadc:	041b      	lsls	r3, r3, #16
 800aade:	0c1b      	lsrs	r3, r3, #16
 800aae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aae4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aae8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aaec:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800aaf0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aaf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aafc:	041b      	lsls	r3, r3, #16
 800aafe:	0c1b      	lsrs	r3, r3, #16
 800ab00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab08:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ab0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ab10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab18:	041b      	lsls	r3, r3, #16
 800ab1a:	0c1b      	lsrs	r3, r3, #16
 800ab1c:	430b      	orrs	r3, r1
 800ab1e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ab22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ab26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab2e:	041b      	lsls	r3, r3, #16
 800ab30:	0c1b      	lsrs	r3, r3, #16
 800ab32:	430b      	orrs	r3, r1
 800ab34:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800ab38:	2000      	movs	r0, #0
 800ab3a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ab40:	045b      	lsls	r3, r3, #17
 800ab42:	d50d      	bpl.n	800ab60 <USB_DeactivateEndpoint+0x194>
 800ab44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ab48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab50:	041b      	lsls	r3, r3, #16
 800ab52:	0c1b      	lsrs	r3, r3, #16
 800ab54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab5c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ab60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ab64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab6c:	e740      	b.n	800a9f0 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ab72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab7a:	041b      	lsls	r3, r3, #16
 800ab7c:	0c1b      	lsrs	r3, r3, #16
 800ab7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800ab8a:	e72b      	b.n	800a9e4 <USB_DeactivateEndpoint+0x18>

0800ab8c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab90:	784b      	ldrb	r3, [r1, #1]
{
 800ab92:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d06b      	beq.n	800ac70 <USB_EPStartXfer+0xe4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ab98:	7b08      	ldrb	r0, [r1, #12]
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d037      	beq.n	800ac0e <USB_EPStartXfer+0x82>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ab9e:	78c8      	ldrb	r0, [r1, #3]
 800aba0:	2802      	cmp	r0, #2
 800aba2:	f000 812d 	beq.w	800ae00 <USB_EPStartXfer+0x274>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aba6:	2801      	cmp	r0, #1
 800aba8:	f040 810a 	bne.w	800adc0 <USB_EPStartXfer+0x234>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800abac:	6988      	ldr	r0, [r1, #24]
 800abae:	690c      	ldr	r4, [r1, #16]
 800abb0:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 800abb2:	bf94      	ite	ls
 800abb4:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 800abb6:	1b05      	subhi	r5, r0, r4
 800abb8:	618d      	str	r5, [r1, #24]
 800abba:	bf88      	it	hi
 800abbc:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f040 811b 	bne.w	800adfa <USB_EPStartXfer+0x26e>
 800abc4:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800abc8:	780b      	ldrb	r3, [r1, #0]
 800abca:	b2a4      	uxth	r4, r4
 800abcc:	f202 4504 	addw	r5, r2, #1028	; 0x404
 800abd0:	011b      	lsls	r3, r3, #4
 800abd2:	442c      	add	r4, r5
 800abd4:	2800      	cmp	r0, #0
 800abd6:	f000 8251 	beq.w	800b07c <USB_EPStartXfer+0x4f0>
 800abda:	283e      	cmp	r0, #62	; 0x3e
 800abdc:	f200 80f3 	bhi.w	800adc6 <USB_EPStartXfer+0x23a>
 800abe0:	0845      	lsrs	r5, r0, #1
 800abe2:	462e      	mov	r6, r5
 800abe4:	f010 0001 	ands.w	r0, r0, #1
 800abe8:	bf18      	it	ne
 800abea:	1c6e      	addne	r6, r5, #1
 800abec:	02b6      	lsls	r6, r6, #10
 800abee:	b2b6      	uxth	r6, r6
 800abf0:	52e6      	strh	r6, [r4, r3]
 800abf2:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800abf6:	b2a6      	uxth	r6, r4
 800abf8:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800abfc:	4434      	add	r4, r6
 800abfe:	b100      	cbz	r0, 800ac02 <USB_EPStartXfer+0x76>
 800ac00:	3501      	adds	r5, #1
 800ac02:	02ad      	lsls	r5, r5, #10
 800ac04:	b2a8      	uxth	r0, r5
 800ac06:	52e0      	strh	r0, [r4, r3]
 800ac08:	f891 c000 	ldrb.w	ip, [r1]
 800ac0c:	e01d      	b.n	800ac4a <USB_EPStartXfer+0xbe>
      if (ep->xfer_len > ep->maxpacket)
 800ac0e:	698c      	ldr	r4, [r1, #24]
 800ac10:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ac12:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 800ac14:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 800ac16:	bf84      	itt	hi
 800ac18:	1ae0      	subhi	r0, r4, r3
 800ac1a:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ac1c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800ac20:	6188      	str	r0, [r1, #24]
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800ac28:	012d      	lsls	r5, r5, #4
 800ac2a:	4403      	add	r3, r0
 800ac2c:	2c00      	cmp	r4, #0
 800ac2e:	f000 80b7 	beq.w	800ada0 <USB_EPStartXfer+0x214>
 800ac32:	2c3e      	cmp	r4, #62	; 0x3e
 800ac34:	f200 8129 	bhi.w	800ae8a <USB_EPStartXfer+0x2fe>
 800ac38:	0860      	lsrs	r0, r4, #1
 800ac3a:	07e4      	lsls	r4, r4, #31
 800ac3c:	bf48      	it	mi
 800ac3e:	3001      	addmi	r0, #1
 800ac40:	0280      	lsls	r0, r0, #10
 800ac42:	b280      	uxth	r0, r0
 800ac44:	52e8      	strh	r0, [r5, r3]
 800ac46:	f891 c000 	ldrb.w	ip, [r1]
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac4a:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
  }

  return HAL_OK;
 800ac4e:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac58:	041b      	lsls	r3, r3, #16
 800ac5a:	0c1b      	lsrs	r3, r3, #16
 800ac5c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800ac60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac68:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
}
 800ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 800ac70:	690d      	ldr	r5, [r1, #16]
 800ac72:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 800ac74:	7b0b      	ldrb	r3, [r1, #12]
 800ac76:	42a8      	cmp	r0, r5
 800ac78:	bf28      	it	cs
 800ac7a:	4628      	movcs	r0, r5
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d05d      	beq.n	800ad3c <USB_EPStartXfer+0x1b0>
      if (ep->type == EP_TYPE_BULK)
 800ac80:	78cb      	ldrb	r3, [r1, #3]
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	f000 810e 	beq.w	800aea4 <USB_EPStartXfer+0x318>
        PCD_SET_EP_DBUF(USBx, ep->num);
 800ac88:	f891 8000 	ldrb.w	r8, [r1]
        ep->xfer_len_db -= len;
 800ac8c:	6a0b      	ldr	r3, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 800ac8e:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800ac92:	1a1b      	subs	r3, r3, r0
        PCD_SET_EP_DBUF(USBx, ep->num);
 800ac94:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 800ac98:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800ac9c:	0424      	lsls	r4, r4, #16
 800ac9e:	0c24      	lsrs	r4, r4, #16
 800aca0:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800aca4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800aca8:	f822 4028 	strh.w	r4, [r2, r8, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800acac:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800acb0:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800acb2:	f014 0f40 	tst.w	r4, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800acb6:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800acba:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800acbe:	b2a6      	uxth	r6, r4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800acc0:	f000 814a 	beq.w	800af58 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800acc4:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800acc8:	4434      	add	r4, r6
 800acca:	b286      	uxth	r6, r0
 800accc:	f824 6008 	strh.w	r6, [r4, r8]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800acd0:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800acd2:	3601      	adds	r6, #1
 800acd4:	f502 6780 	add.w	r7, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800acd8:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800acda:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800acde:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 800ace2:	d008      	beq.n	800acf6 <USB_EPStartXfer+0x16a>
  uint8_t *pBuf = pbUsrBuf;
 800ace4:	46cc      	mov	ip, r9
 800ace6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  {
    temp1 = *pBuf;
 800acea:	f83c eb02 	ldrh.w	lr, [ip], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 800acee:	f824 eb04 	strh.w	lr, [r4], #4
  for (i = n; i != 0U; i--)
 800acf2:	42a6      	cmp	r6, r4
 800acf4:	d1f9      	bne.n	800acea <USB_EPStartXfer+0x15e>
          ep->xfer_buff += len;
 800acf6:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800acfa:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800acfc:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800acfe:	f0c0 81b7 	bcc.w	800b070 <USB_EPStartXfer+0x4e4>
            ep->xfer_len_db = 0U;
 800ad02:	2500      	movs	r5, #0
 800ad04:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d036      	beq.n	800ad78 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad0a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800ad0e:	b285      	uxth	r5, r0
 800ad10:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800ad14:	4428      	add	r0, r5
 800ad16:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ad18:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad1a:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad1e:	8908      	ldrh	r0, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ad20:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800ad22:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad24:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800ad28:	d026      	beq.n	800ad78 <USB_EPStartXfer+0x1ec>
 800ad2a:	eb00 0583 	add.w	r5, r0, r3, lsl #2
    temp1 = *pBuf;
 800ad2e:	f834 3b02 	ldrh.w	r3, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800ad32:	f820 3b04 	strh.w	r3, [r0], #4
  for (i = n; i != 0U; i--)
 800ad36:	4285      	cmp	r5, r0
 800ad38:	d1f9      	bne.n	800ad2e <USB_EPStartXfer+0x1a2>
 800ad3a:	e01d      	b.n	800ad78 <USB_EPStartXfer+0x1ec>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ad3c:	b284      	uxth	r4, r0
 800ad3e:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad40:	88cd      	ldrh	r5, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ad42:	f104 0e01 	add.w	lr, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad46:	f502 6080 	add.w	r0, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800ad4a:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad4e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (i = n; i != 0U; i--)
 800ad52:	bf18      	it	ne
 800ad54:	eb03 0e4e 	addne.w	lr, r3, lr, lsl #1
 800ad58:	d005      	beq.n	800ad66 <USB_EPStartXfer+0x1da>
    temp1 = *pBuf;
 800ad5a:	f833 cb02 	ldrh.w	ip, [r3], #2
  for (i = n; i != 0U; i--)
 800ad5e:	4573      	cmp	r3, lr
    *pdwVal = (uint16_t)temp2;
 800ad60:	f820 cb04 	strh.w	ip, [r0], #4
  for (i = n; i != 0U; i--)
 800ad64:	d1f9      	bne.n	800ad5a <USB_EPStartXfer+0x1ce>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ad66:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800ad6a:	7808      	ldrb	r0, [r1, #0]
 800ad6c:	b29d      	uxth	r5, r3
 800ad6e:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800ad72:	0100      	lsls	r0, r0, #4
 800ad74:	442b      	add	r3, r5
 800ad76:	52c4      	strh	r4, [r0, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ad78:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 800ad7a:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ad7c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800ad80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad88:	041b      	lsls	r3, r3, #16
 800ad8a:	0c1b      	lsrs	r3, r3, #16
 800ad8c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800ad90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad98:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 800ad9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ada0:	5ae8      	ldrh	r0, [r5, r3]
 800ada2:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800ada6:	0400      	lsls	r0, r0, #16
 800ada8:	0c00      	lsrs	r0, r0, #16
 800adaa:	52e8      	strh	r0, [r5, r3]
 800adac:	5ae8      	ldrh	r0, [r5, r3]
 800adae:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800adb2:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800adb6:	b280      	uxth	r0, r0
 800adb8:	52e8      	strh	r0, [r5, r3]
 800adba:	f891 c000 	ldrb.w	ip, [r1]
 800adbe:	e744      	b.n	800ac4a <USB_EPStartXfer+0xbe>
        return HAL_ERROR;
 800adc0:	2001      	movs	r0, #1
}
 800adc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800adc6:	0945      	lsrs	r5, r0, #5
 800adc8:	462f      	mov	r7, r5
 800adca:	f010 001f 	ands.w	r0, r0, #31
 800adce:	bf08      	it	eq
 800add0:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800add4:	462e      	mov	r6, r5
 800add6:	4dbb      	ldr	r5, [pc, #748]	; (800b0c4 <USB_EPStartXfer+0x538>)
 800add8:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800addc:	b2ad      	uxth	r5, r5
 800adde:	52e5      	strh	r5, [r4, r3]
 800ade0:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800ade4:	b2a5      	uxth	r5, r4
 800ade6:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800adea:	442c      	add	r4, r5
 800adec:	b900      	cbnz	r0, 800adf0 <USB_EPStartXfer+0x264>
 800adee:	3e01      	subs	r6, #1
 800adf0:	48b4      	ldr	r0, [pc, #720]	; (800b0c4 <USB_EPStartXfer+0x538>)
 800adf2:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800adf6:	b280      	uxth	r0, r0
 800adf8:	52e0      	strh	r0, [r4, r3]
 800adfa:	f891 c000 	ldrb.w	ip, [r1]
 800adfe:	e724      	b.n	800ac4a <USB_EPStartXfer+0xbe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ae00:	bb13      	cbnz	r3, 800ae48 <USB_EPStartXfer+0x2bc>
 800ae02:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800ae06:	780b      	ldrb	r3, [r1, #0]
 800ae08:	b284      	uxth	r4, r0
 800ae0a:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800ae0e:	4420      	add	r0, r4
 800ae10:	690c      	ldr	r4, [r1, #16]
 800ae12:	011b      	lsls	r3, r3, #4
 800ae14:	2c00      	cmp	r4, #0
 800ae16:	f000 8109 	beq.w	800b02c <USB_EPStartXfer+0x4a0>
 800ae1a:	2c3e      	cmp	r4, #62	; 0x3e
 800ae1c:	f200 818e 	bhi.w	800b13c <USB_EPStartXfer+0x5b0>
 800ae20:	0865      	lsrs	r5, r4, #1
 800ae22:	462e      	mov	r6, r5
 800ae24:	f014 0401 	ands.w	r4, r4, #1
 800ae28:	bf18      	it	ne
 800ae2a:	1c6e      	addne	r6, r5, #1
 800ae2c:	02b6      	lsls	r6, r6, #10
 800ae2e:	b2b6      	uxth	r6, r6
 800ae30:	52c6      	strh	r6, [r0, r3]
 800ae32:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800ae36:	f202 460c 	addw	r6, r2, #1036	; 0x40c
 800ae3a:	b280      	uxth	r0, r0
 800ae3c:	4406      	add	r6, r0
 800ae3e:	b104      	cbz	r4, 800ae42 <USB_EPStartXfer+0x2b6>
 800ae40:	3501      	adds	r5, #1
 800ae42:	02ad      	lsls	r5, r5, #10
 800ae44:	b2a8      	uxth	r0, r5
 800ae46:	52f0      	strh	r0, [r6, r3]
        if (ep->xfer_count != 0U)
 800ae48:	69cb      	ldr	r3, [r1, #28]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d0d5      	beq.n	800adfa <USB_EPStartXfer+0x26e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ae4e:	f244 0340 	movw	r3, #16448	; 0x4040
 800ae52:	f891 c000 	ldrb.w	ip, [r1]
 800ae56:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ae5a:	ea03 0400 	and.w	r4, r3, r0
 800ae5e:	4383      	bics	r3, r0
 800ae60:	d002      	beq.n	800ae68 <USB_EPStartXfer+0x2dc>
 800ae62:	2c00      	cmp	r4, #0
 800ae64:	f47f aef1 	bne.w	800ac4a <USB_EPStartXfer+0xbe>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800ae68:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800ae6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae74:	041b      	lsls	r3, r3, #16
 800ae76:	0c1b      	lsrs	r3, r3, #16
 800ae78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae80:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 800ae84:	f891 c000 	ldrb.w	ip, [r1]
 800ae88:	e6df      	b.n	800ac4a <USB_EPStartXfer+0xbe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ae8a:	0966      	lsrs	r6, r4, #5
 800ae8c:	06e0      	lsls	r0, r4, #27
 800ae8e:	488d      	ldr	r0, [pc, #564]	; (800b0c4 <USB_EPStartXfer+0x538>)
 800ae90:	bf08      	it	eq
 800ae92:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800ae96:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800ae9a:	b280      	uxth	r0, r0
 800ae9c:	52e8      	strh	r0, [r5, r3]
 800ae9e:	f891 c000 	ldrb.w	ip, [r1]
 800aea2:	e6d2      	b.n	800ac4a <USB_EPStartXfer+0xbe>
        if (ep->xfer_len_db > ep->maxpacket)
 800aea4:	6a0c      	ldr	r4, [r1, #32]
 800aea6:	42a5      	cmp	r5, r4
 800aea8:	f080 8094 	bcs.w	800afd4 <USB_EPStartXfer+0x448>
          PCD_SET_EP_DBUF(USBx, ep->num);
 800aeac:	780e      	ldrb	r6, [r1, #0]
          ep->xfer_len_db -= len;
 800aeae:	1a24      	subs	r4, r4, r0
          PCD_SET_EP_DBUF(USBx, ep->num);
 800aeb0:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aeb4:	ea4f 1906 	mov.w	r9, r6, lsl #4
          PCD_SET_EP_DBUF(USBx, ep->num);
 800aeb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aec0:	041b      	lsls	r3, r3, #16
 800aec2:	0c1b      	lsrs	r3, r3, #16
 800aec4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800aec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aecc:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aed0:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
          ep->xfer_len_db -= len;
 800aed4:	620c      	str	r4, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aed6:	f013 0f40 	tst.w	r3, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aeda:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800aede:	b29e      	uxth	r6, r3
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aee0:	f000 80f2 	beq.w	800b0c8 <USB_EPStartXfer+0x53c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aee4:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800aee8:	4433      	add	r3, r6
 800aeea:	fa1f fa80 	uxth.w	sl, r0
 800aeee:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aef2:	894e      	ldrh	r6, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aef4:	f10a 0801 	add.w	r8, sl, #1
 800aef8:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800aefc:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af00:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af02:	eb03 0646 	add.w	r6, r3, r6, lsl #1
  for (i = n; i != 0U; i--)
 800af06:	d008      	beq.n	800af1a <USB_EPStartXfer+0x38e>
  uint8_t *pBuf = pbUsrBuf;
 800af08:	46bc      	mov	ip, r7
 800af0a:	eb06 0b88 	add.w	fp, r6, r8, lsl #2
    temp1 = *pBuf;
 800af0e:	f83c eb02 	ldrh.w	lr, [ip], #2
    *pdwVal = (uint16_t)temp2;
 800af12:	f826 eb04 	strh.w	lr, [r6], #4
  for (i = n; i != 0U; i--)
 800af16:	45b3      	cmp	fp, r6
 800af18:	d1f9      	bne.n	800af0e <USB_EPStartXfer+0x382>
            ep->xfer_buff += len;
 800af1a:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800af1c:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800af1e:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800af20:	f080 8127 	bcs.w	800b172 <USB_EPStartXfer+0x5e6>
              ep->xfer_len_db -= len;
 800af24:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af26:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800af2a:	620c      	str	r4, [r1, #32]
 800af2c:	b284      	uxth	r4, r0
 800af2e:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800af32:	4420      	add	r0, r4
 800af34:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af38:	8908      	ldrh	r0, [r1, #8]
 800af3a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800af3e:	f1b8 0f00 	cmp.w	r8, #0
 800af42:	f43f af19 	beq.w	800ad78 <USB_EPStartXfer+0x1ec>
 800af46:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800af4a:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800af4e:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800af52:	429c      	cmp	r4, r3
 800af54:	d1f9      	bne.n	800af4a <USB_EPStartXfer+0x3be>
 800af56:	e70f      	b.n	800ad78 <USB_EPStartXfer+0x1ec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af58:	f202 4404 	addw	r4, r2, #1028	; 0x404
 800af5c:	4434      	add	r4, r6
 800af5e:	b286      	uxth	r6, r0
 800af60:	f824 6008 	strh.w	r6, [r4, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af64:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800af68:	3601      	adds	r6, #1
 800af6a:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800af6e:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af70:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af74:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
  for (i = n; i != 0U; i--)
 800af78:	d008      	beq.n	800af8c <USB_EPStartXfer+0x400>
  uint8_t *pBuf = pbUsrBuf;
 800af7a:	464c      	mov	r4, r9
 800af7c:	eb09 0646 	add.w	r6, r9, r6, lsl #1
    temp1 = *pBuf;
 800af80:	f834 eb02 	ldrh.w	lr, [r4], #2
  for (i = n; i != 0U; i--)
 800af84:	42b4      	cmp	r4, r6
    *pdwVal = (uint16_t)temp2;
 800af86:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800af8a:	d1f9      	bne.n	800af80 <USB_EPStartXfer+0x3f4>
          ep->xfer_buff += len;
 800af8c:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800af90:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800af92:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800af94:	d36f      	bcc.n	800b076 <USB_EPStartXfer+0x4ea>
            ep->xfer_len_db = 0U;
 800af96:	2500      	movs	r5, #0
 800af98:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f43f aeec 	beq.w	800ad78 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800afa0:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800afa4:	b285      	uxth	r5, r0
 800afa6:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800afaa:	4428      	add	r0, r5
 800afac:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800afae:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800afb0:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800afb4:	8948      	ldrh	r0, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800afb6:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800afb8:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800afba:	eb07 0740 	add.w	r7, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800afbe:	f43f aedb 	beq.w	800ad78 <USB_EPStartXfer+0x1ec>
 800afc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    temp1 = *pBuf;
 800afc6:	f834 0b02 	ldrh.w	r0, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800afca:	f827 0b04 	strh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 800afce:	429f      	cmp	r7, r3
 800afd0:	d1f9      	bne.n	800afc6 <USB_EPStartXfer+0x43a>
 800afd2:	e6d1      	b.n	800ad78 <USB_EPStartXfer+0x1ec>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800afd4:	7808      	ldrb	r0, [r1, #0]
 800afd6:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 800afda:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800afde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afe2:	041b      	lsls	r3, r3, #16
 800afe4:	0c1b      	lsrs	r3, r3, #16
 800afe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afee:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aff2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800aff6:	0100      	lsls	r0, r0, #4
 800aff8:	b29d      	uxth	r5, r3
 800affa:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800affe:	442b      	add	r3, r5
 800b000:	b2a5      	uxth	r5, r4
 800b002:	521d      	strh	r5, [r3, r0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b004:	b2a0      	uxth	r0, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b006:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b008:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b00a:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b00e:	0840      	lsrs	r0, r0, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b010:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b012:	eb03 0345 	add.w	r3, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 800b016:	f43f aeaf 	beq.w	800ad78 <USB_EPStartXfer+0x1ec>
 800b01a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    temp1 = *pBuf;
 800b01e:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800b022:	f823 5b04 	strh.w	r5, [r3], #4
  for (i = n; i != 0U; i--)
 800b026:	4298      	cmp	r0, r3
 800b028:	d1f9      	bne.n	800b01e <USB_EPStartXfer+0x492>
 800b02a:	e6a5      	b.n	800ad78 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b02c:	5ac4      	ldrh	r4, [r0, r3]
 800b02e:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b032:	0424      	lsls	r4, r4, #16
 800b034:	0c24      	lsrs	r4, r4, #16
 800b036:	52c4      	strh	r4, [r0, r3]
 800b038:	5ac5      	ldrh	r5, [r0, r3]
 800b03a:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800b03e:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800b042:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800b046:	b2ad      	uxth	r5, r5
 800b048:	52c5      	strh	r5, [r0, r3]
 800b04a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b04e:	b285      	uxth	r5, r0
 800b050:	4620      	mov	r0, r4
 800b052:	4428      	add	r0, r5
 800b054:	5ac4      	ldrh	r4, [r0, r3]
 800b056:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b05a:	0424      	lsls	r4, r4, #16
 800b05c:	0c24      	lsrs	r4, r4, #16
 800b05e:	52c4      	strh	r4, [r0, r3]
 800b060:	5ac4      	ldrh	r4, [r0, r3]
 800b062:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800b066:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800b06a:	b2a4      	uxth	r4, r4
 800b06c:	52c4      	strh	r4, [r0, r3]
 800b06e:	e6eb      	b.n	800ae48 <USB_EPStartXfer+0x2bc>
            ep->xfer_len_db -= len;
 800b070:	1a1d      	subs	r5, r3, r0
 800b072:	4603      	mov	r3, r0
 800b074:	e646      	b.n	800ad04 <USB_EPStartXfer+0x178>
            ep->xfer_len_db -= len;
 800b076:	1a1d      	subs	r5, r3, r0
 800b078:	4603      	mov	r3, r0
 800b07a:	e78d      	b.n	800af98 <USB_EPStartXfer+0x40c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b07c:	5ae0      	ldrh	r0, [r4, r3]
 800b07e:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800b082:	0400      	lsls	r0, r0, #16
 800b084:	0c00      	lsrs	r0, r0, #16
 800b086:	52e0      	strh	r0, [r4, r3]
 800b088:	5ae5      	ldrh	r5, [r4, r3]
 800b08a:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800b08e:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800b092:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800b096:	b2ad      	uxth	r5, r5
 800b098:	52e5      	strh	r5, [r4, r3]
 800b09a:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800b09e:	b2a4      	uxth	r4, r4
 800b0a0:	4420      	add	r0, r4
 800b0a2:	5ac4      	ldrh	r4, [r0, r3]
 800b0a4:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b0a8:	0424      	lsls	r4, r4, #16
 800b0aa:	0c24      	lsrs	r4, r4, #16
 800b0ac:	52c4      	strh	r4, [r0, r3]
 800b0ae:	5ac4      	ldrh	r4, [r0, r3]
 800b0b0:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800b0b4:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800b0b8:	b2a4      	uxth	r4, r4
 800b0ba:	52c4      	strh	r4, [r0, r3]
 800b0bc:	f891 c000 	ldrb.w	ip, [r1]
 800b0c0:	e5c3      	b.n	800ac4a <USB_EPStartXfer+0xbe>
 800b0c2:	bf00      	nop
 800b0c4:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b0c8:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800b0cc:	4433      	add	r3, r6
 800b0ce:	fa1f fa80 	uxth.w	sl, r0
 800b0d2:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0d6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b0da:	f10a 0801 	add.w	r8, sl, #1
 800b0de:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b0e2:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b0e6:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0e8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
  for (i = n; i != 0U; i--)
 800b0ec:	d008      	beq.n	800b100 <USB_EPStartXfer+0x574>
  uint8_t *pBuf = pbUsrBuf;
 800b0ee:	463e      	mov	r6, r7
 800b0f0:	eb07 0b48 	add.w	fp, r7, r8, lsl #1
    temp1 = *pBuf;
 800b0f4:	f836 eb02 	ldrh.w	lr, [r6], #2
  for (i = n; i != 0U; i--)
 800b0f8:	45b3      	cmp	fp, r6
    *pdwVal = (uint16_t)temp2;
 800b0fa:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800b0fe:	d1f9      	bne.n	800b0f4 <USB_EPStartXfer+0x568>
            ep->xfer_buff += len;
 800b100:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800b102:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800b104:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800b106:	d23e      	bcs.n	800b186 <USB_EPStartXfer+0x5fa>
              ep->xfer_len_db -= len;
 800b108:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b10a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b10e:	620c      	str	r4, [r1, #32]
 800b110:	b284      	uxth	r4, r0
 800b112:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800b116:	4420      	add	r0, r4
 800b118:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b11c:	8948      	ldrh	r0, [r1, #10]
 800b11e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800b122:	f1b8 0f00 	cmp.w	r8, #0
 800b126:	f43f ae27 	beq.w	800ad78 <USB_EPStartXfer+0x1ec>
 800b12a:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800b12e:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800b132:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800b136:	429c      	cmp	r4, r3
 800b138:	d1f9      	bne.n	800b12e <USB_EPStartXfer+0x5a2>
 800b13a:	e61d      	b.n	800ad78 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b13c:	0965      	lsrs	r5, r4, #5
 800b13e:	462f      	mov	r7, r5
 800b140:	f014 041f 	ands.w	r4, r4, #31
 800b144:	bf08      	it	eq
 800b146:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800b14a:	462e      	mov	r6, r5
 800b14c:	4d13      	ldr	r5, [pc, #76]	; (800b19c <USB_EPStartXfer+0x610>)
 800b14e:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800b152:	b2ad      	uxth	r5, r5
 800b154:	52c5      	strh	r5, [r0, r3]
 800b156:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b15a:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 800b15e:	b280      	uxth	r0, r0
 800b160:	4405      	add	r5, r0
 800b162:	b904      	cbnz	r4, 800b166 <USB_EPStartXfer+0x5da>
 800b164:	3e01      	subs	r6, #1
 800b166:	480d      	ldr	r0, [pc, #52]	; (800b19c <USB_EPStartXfer+0x610>)
 800b168:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800b16c:	b280      	uxth	r0, r0
 800b16e:	52e8      	strh	r0, [r5, r3]
 800b170:	e66a      	b.n	800ae48 <USB_EPStartXfer+0x2bc>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b172:	fa1f f884 	uxth.w	r8, r4
 800b176:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b17a:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b17e:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800b182:	2400      	movs	r4, #0
 800b184:	e6cf      	b.n	800af26 <USB_EPStartXfer+0x39a>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b186:	fa1f f884 	uxth.w	r8, r4
 800b18a:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b18e:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b192:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800b196:	2400      	movs	r4, #0
 800b198:	e7b7      	b.n	800b10a <USB_EPStartXfer+0x57e>
 800b19a:	bf00      	nop
 800b19c:	ffff8000 	.word	0xffff8000

0800b1a0 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 800b1a0:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b1a2:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800b1a4:	b18b      	cbz	r3, 800b1ca <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b1a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1b2:	041b      	lsls	r3, r3, #16
 800b1b4:	0c1b      	lsrs	r3, r3, #16
 800b1b6:	f083 0310 	eor.w	r3, r3, #16
 800b1ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b1ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1d6:	041b      	lsls	r3, r3, #16
 800b1d8:	0c1b      	lsrs	r3, r3, #16
 800b1da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b1de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop

0800b1f0 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 800b1f0:	7b0b      	ldrb	r3, [r1, #12]
 800b1f2:	bb3b      	cbnz	r3, 800b244 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 800b1f4:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1f6:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800b1f8:	b333      	cbz	r3, 800b248 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1fe:	065b      	lsls	r3, r3, #25
 800b200:	d50d      	bpl.n	800b21e <USB_EPClearStall+0x2e>
 800b202:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b20a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b20e:	041b      	lsls	r3, r3, #16
 800b210:	0c1b      	lsrs	r3, r3, #16
 800b212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b216:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b21a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800b21e:	78cb      	ldrb	r3, [r1, #3]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d00f      	beq.n	800b244 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b224:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b22c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b230:	041b      	lsls	r3, r3, #16
 800b232:	0c1b      	lsrs	r3, r3, #16
 800b234:	f083 0320 	eor.w	r3, r3, #32
 800b238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b23c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b240:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b244:	2000      	movs	r0, #0
 800b246:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b248:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b24c:	045b      	lsls	r3, r3, #17
 800b24e:	d50d      	bpl.n	800b26c <USB_EPClearStall+0x7c>
 800b250:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b25c:	041b      	lsls	r3, r3, #16
 800b25e:	0c1b      	lsrs	r3, r3, #16
 800b260:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b268:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b26c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b270:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b278:	041b      	lsls	r3, r3, #16
 800b27a:	0c1b      	lsrs	r3, r3, #16
 800b27c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800b280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b288:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b28c:	2000      	movs	r0, #0
 800b28e:	4770      	bx	lr

0800b290 <USB_SetDevAddress>:
  if (address == 0U)
 800b290:	b911      	cbnz	r1, 800b298 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b292:	2380      	movs	r3, #128	; 0x80
 800b294:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800b298:	2000      	movs	r0, #0
 800b29a:	4770      	bx	lr

0800b29c <USB_DevConnect>:
}
 800b29c:	2000      	movs	r0, #0
 800b29e:	4770      	bx	lr

0800b2a0 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 800b2a0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 800b2a4:	b280      	uxth	r0, r0
 800b2a6:	4770      	bx	lr

0800b2a8 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b2a8:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2aa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 800b2ae:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b2b4:	d007      	beq.n	800b2c6 <USB_WritePMA+0x1e>
 800b2b6:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b2ba:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800b2be:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 800b2c2:	4282      	cmp	r2, r0
 800b2c4:	d1f9      	bne.n	800b2ba <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800b2c6:	4770      	bx	lr

0800b2c8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b2c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2ca:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 800b2ce:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2d0:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b2d4:	d012      	beq.n	800b2fc <USB_ReadPMA+0x34>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2d6:	46ae      	mov	lr, r5
  for (i = n; i != 0U; i--)
 800b2d8:	46b4      	mov	ip, r6
 800b2da:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b2dc:	f83e 2b04 	ldrh.w	r2, [lr], #4
  for (i = n; i != 0U; i--)
 800b2e0:	3002      	adds	r0, #2
    temp = *(__IO uint16_t *)pdwVal;
 800b2e2:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b2e4:	0a14      	lsrs	r4, r2, #8
  for (i = n; i != 0U; i--)
 800b2e6:	f1bc 0c01 	subs.w	ip, ip, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b2ea:	f800 2c04 	strb.w	r2, [r0, #-4]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b2ee:	f800 4c03 	strb.w	r4, [r0, #-3]
  for (i = n; i != 0U; i--)
 800b2f2:	d1f3      	bne.n	800b2dc <USB_ReadPMA+0x14>
    pBuf++;
 800b2f4:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 800b2f8:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b2fc:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800b2fe:	bf44      	itt	mi
 800b300:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b302:	700b      	strbmi	r3, [r1, #0]
  }
}
 800b304:	bd70      	pop	{r4, r5, r6, pc}
 800b306:	bf00      	nop

0800b308 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b308:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800b30c:	b183      	cbz	r3, 800b330 <USBD_CDC_EP0_RxReady+0x28>
{
 800b30e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b310:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b314:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800b318:	28ff      	cmp	r0, #255	; 0xff
 800b31a:	d007      	beq.n	800b32c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	4621      	mov	r1, r4
 800b320:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800b324:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 800b326:	23ff      	movs	r3, #255	; 0xff
 800b328:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800b32c:	2000      	movs	r0, #0
 800b32e:	bd10      	pop	{r4, pc}
 800b330:	2000      	movs	r0, #0
 800b332:	4770      	bx	lr

0800b334 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800b334:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b336:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgFSDesc;
}
 800b338:	4801      	ldr	r0, [pc, #4]	; (800b340 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b33a:	801a      	strh	r2, [r3, #0]
}
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	20000058 	.word	0x20000058

0800b344 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800b344:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b346:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgHSDesc;
}
 800b348:	4801      	ldr	r0, [pc, #4]	; (800b350 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b34a:	801a      	strh	r2, [r3, #0]
}
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	2000009c 	.word	0x2000009c

0800b354 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800b354:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b356:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800b358:	4801      	ldr	r0, [pc, #4]	; (800b360 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b35a:	801a      	strh	r2, [r3, #0]
}
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	200000ec 	.word	0x200000ec

0800b364 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800b364:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b366:	220a      	movs	r2, #10
  return USBD_CDC_DeviceQualifierDesc;
}
 800b368:	4801      	ldr	r0, [pc, #4]	; (800b370 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b36a:	801a      	strh	r2, [r3, #0]
}
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	200000e0 	.word	0x200000e0

0800b374 <USBD_CDC_DataOut>:
{
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b378:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b37c:	f000 fffc 	bl	800c378 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800b380:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b384:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800b388:	b14b      	cbz	r3, 800b39e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b38a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800b38e:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800b398:	4798      	blx	r3
    return USBD_OK;
 800b39a:	2000      	movs	r0, #0
}
 800b39c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b39e:	2002      	movs	r0, #2
}
 800b3a0:	bd38      	pop	{r3, r4, r5, pc}
 800b3a2:	bf00      	nop

0800b3a4 <USBD_CDC_DataIn>:
{
 800b3a4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800b3a6:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 800b3aa:	b1ed      	cbz	r5, 800b3e8 <USBD_CDC_DataIn+0x44>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b3ac:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800b3b0:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 800b3b4:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800b3b8:	b14a      	cbz	r2, 800b3ce <USBD_CDC_DataIn+0x2a>
 800b3ba:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 800b3be:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800b3c2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800b3c4:	fbb2 f3f4 	udiv	r3, r2, r4
 800b3c8:	fb04 2413 	mls	r4, r4, r3, r2
 800b3cc:	b124      	cbz	r4, 800b3d8 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800b3ce:	2300      	movs	r3, #0
    return USBD_OK;
 800b3d0:	4618      	mov	r0, r3
      hcdc->TxState = 0U;
 800b3d2:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
}
 800b3d6:	bd38      	pop	{r3, r4, r5, pc}
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800b3d8:	4623      	mov	r3, r4
 800b3da:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 800b3dc:	f8cc 401c 	str.w	r4, [ip, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800b3e0:	f000 ffae 	bl	800c340 <USBD_LL_Transmit>
    return USBD_OK;
 800b3e4:	4620      	mov	r0, r4
}
 800b3e6:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b3e8:	2002      	movs	r0, #2
}
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}

0800b3ec <USBD_CDC_Setup>:
{
 800b3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 800b3f0:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3f2:	780b      	ldrb	r3, [r1, #0]
{
 800b3f4:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3f6:	f013 0660 	ands.w	r6, r3, #96	; 0x60
{
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b3fe:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800b402:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800b406:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b40a:	d013      	beq.n	800b434 <USBD_CDC_Setup+0x48>
 800b40c:	2e20      	cmp	r6, #32
 800b40e:	d117      	bne.n	800b440 <USBD_CDC_Setup+0x54>
    if (req->wLength)
 800b410:	88ce      	ldrh	r6, [r1, #6]
 800b412:	b1f6      	cbz	r6, 800b452 <USBD_CDC_Setup+0x66>
      if (req->bmRequest & 0x80U)
 800b414:	061b      	lsls	r3, r3, #24
 800b416:	d53f      	bpl.n	800b498 <USBD_CDC_Setup+0xac>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b418:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800b41c:	4632      	mov	r2, r6
 800b41e:	4641      	mov	r1, r8
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	7860      	ldrb	r0, [r4, #1]
 800b424:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b426:	4641      	mov	r1, r8
 800b428:	4628      	mov	r0, r5
 800b42a:	88e2      	ldrh	r2, [r4, #6]
  uint8_t ret = USBD_OK;
 800b42c:	463e      	mov	r6, r7
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b42e:	f000 fcd5 	bl	800bddc <USBD_CtlSendData>
 800b432:	e00a      	b.n	800b44a <USBD_CDC_Setup+0x5e>
    switch (req->bRequest)
 800b434:	784b      	ldrb	r3, [r1, #1]
 800b436:	2b0a      	cmp	r3, #10
 800b438:	d01f      	beq.n	800b47a <USBD_CDC_Setup+0x8e>
 800b43a:	2b0b      	cmp	r3, #11
 800b43c:	d027      	beq.n	800b48e <USBD_CDC_Setup+0xa2>
 800b43e:	b193      	cbz	r3, 800b466 <USBD_CDC_Setup+0x7a>
      USBD_CtlError (pdev, req);
 800b440:	4621      	mov	r1, r4
 800b442:	4628      	mov	r0, r5
 800b444:	f000 fc94 	bl	800bd70 <USBD_CtlError>
      ret = USBD_FAIL;
 800b448:	2602      	movs	r6, #2
}
 800b44a:	4630      	mov	r0, r6
 800b44c:	b002      	add	sp, #8
 800b44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b452:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800b456:	4632      	mov	r2, r6
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	7848      	ldrb	r0, [r1, #1]
 800b45c:	4798      	blx	r3
}
 800b45e:	4630      	mov	r0, r6
 800b460:	b002      	add	sp, #8
 800b462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b466:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b46a:	2b03      	cmp	r3, #3
 800b46c:	d1e8      	bne.n	800b440 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800b46e:	2202      	movs	r2, #2
 800b470:	f10d 0106 	add.w	r1, sp, #6
 800b474:	f000 fcb2 	bl	800bddc <USBD_CtlSendData>
 800b478:	e7e7      	b.n	800b44a <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b47a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b47e:	2b03      	cmp	r3, #3
 800b480:	d1de      	bne.n	800b440 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800b482:	2201      	movs	r2, #1
 800b484:	f10d 0105 	add.w	r1, sp, #5
 800b488:	f000 fca8 	bl	800bddc <USBD_CtlSendData>
 800b48c:	e7dd      	b.n	800b44a <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b48e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b492:	2b03      	cmp	r3, #3
 800b494:	d0d9      	beq.n	800b44a <USBD_CDC_Setup+0x5e>
 800b496:	e7d3      	b.n	800b440 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 800b498:	784b      	ldrb	r3, [r1, #1]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b49a:	4632      	mov	r2, r6
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b49c:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b4a0:	4641      	mov	r1, r8
        hcdc->CmdOpCode = req->bRequest;
 800b4a2:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b4a6:	f000 fcb1 	bl	800be0c <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800b4aa:	463e      	mov	r6, r7
 800b4ac:	e7cd      	b.n	800b44a <USBD_CDC_Setup+0x5e>
 800b4ae:	bf00      	nop

0800b4b0 <USBD_CDC_DeInit>:
{
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b4b4:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b4b6:	2181      	movs	r1, #129	; 0x81
 800b4b8:	f000 fef6 	bl	800c2a8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b4bc:	2101      	movs	r1, #1
 800b4be:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b4c0:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b4c2:	f000 fef1 	bl	800c2a8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b4c6:	2182      	movs	r1, #130	; 0x82
 800b4c8:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b4ca:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b4ce:	f000 feeb 	bl	800c2a8 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800b4d2:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b4d6:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 800b4d8:	b14b      	cbz	r3, 800b4ee <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b4da:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b4e2:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800b4e6:	f000 ff4f 	bl	800c388 <USBD_static_free>
    pdev->pClassData = NULL;
 800b4ea:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	bd38      	pop	{r3, r4, r5, pc}
 800b4f2:	bf00      	nop

0800b4f4 <USBD_CDC_Init>:
{
 800b4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b4f8:	7c03      	ldrb	r3, [r0, #16]
{
 800b4fa:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b4fc:	bbbb      	cbnz	r3, 800b56e <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b4fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b502:	2202      	movs	r2, #2
 800b504:	2181      	movs	r1, #129	; 0x81
 800b506:	f000 febf 	bl	800c288 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b50a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b50c:	f44f 7300 	mov.w	r3, #512	; 0x200
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b510:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b512:	4629      	mov	r1, r5
 800b514:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b516:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b518:	4620      	mov	r0, r4
 800b51a:	f000 feb5 	bl	800c288 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b51e:	2308      	movs	r3, #8
 800b520:	2203      	movs	r2, #3
 800b522:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b524:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b528:	4620      	mov	r0, r4
 800b52a:	f000 fead 	bl	800c288 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b52e:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b532:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b534:	f000 ff24 	bl	800c380 <USBD_static_malloc>
 800b538:	4605      	mov	r5, r0
 800b53a:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800b53e:	b348      	cbz	r0, 800b594 <USBD_CDC_Init+0xa0>
    hcdc->TxState = 0U;
 800b540:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b544:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4798      	blx	r3
    hcdc->TxState = 0U;
 800b54c:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800b550:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b554:	7c26      	ldrb	r6, [r4, #16]
 800b556:	b196      	cbz	r6, 800b57e <USBD_CDC_Init+0x8a>
  uint8_t ret = 0U;
 800b558:	4646      	mov	r6, r8
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b55a:	2340      	movs	r3, #64	; 0x40
 800b55c:	4639      	mov	r1, r7
 800b55e:	4620      	mov	r0, r4
 800b560:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b564:	f000 fefa 	bl	800c35c <USBD_LL_PrepareReceive>
}
 800b568:	4630      	mov	r0, r6
 800b56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b56e:	2340      	movs	r3, #64	; 0x40
 800b570:	2202      	movs	r2, #2
 800b572:	2181      	movs	r1, #129	; 0x81
 800b574:	f000 fe88 	bl	800c288 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b578:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b57a:	2340      	movs	r3, #64	; 0x40
 800b57c:	e7c8      	b.n	800b510 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b57e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b582:	4639      	mov	r1, r7
 800b584:	4620      	mov	r0, r4
 800b586:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b58a:	f000 fee7 	bl	800c35c <USBD_LL_PrepareReceive>
}
 800b58e:	4630      	mov	r0, r6
 800b590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 800b594:	463e      	mov	r6, r7
}
 800b596:	4630      	mov	r0, r6
 800b598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b59c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800b59c:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 800b59e:	b119      	cbz	r1, 800b5a8 <USBD_CDC_RegisterInterface+0xc>
  {
    pdev->pUserData= fops;
    ret = USBD_OK;
 800b5a0:	2000      	movs	r0, #0
    pdev->pUserData= fops;
 800b5a2:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
    ret = USBD_OK;
 800b5a6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800b5a8:	2002      	movs	r0, #2
  }

  return ret;
}
 800b5aa:	4770      	bx	lr

0800b5ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800b5ac:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b5ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800b5b2:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800b5b4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b5b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop

0800b5c0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800b5c0:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800b5c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  return USBD_OK;
}
 800b5c6:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800b5c8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop

0800b5d0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b5d0:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 800b5d4:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800b5d6:	b19a      	cbz	r2, 800b600 <USBD_CDC_ReceivePacket+0x30>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800b5d8:	7c04      	ldrb	r4, [r0, #16]
 800b5da:	b144      	cbz	r4, 800b5ee <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b5dc:	2400      	movs	r4, #0
      USBD_LL_PrepareReceive(pdev,
 800b5de:	2340      	movs	r3, #64	; 0x40
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800b5e6:	f000 feb9 	bl	800c35c <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800b5ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5f2:	2101      	movs	r1, #1
 800b5f4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800b5f8:	f000 feb0 	bl	800c35c <USBD_LL_PrepareReceive>
}
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800b600:	2402      	movs	r4, #2
}
 800b602:	4620      	mov	r0, r4
 800b604:	bd10      	pop	{r4, pc}
 800b606:	bf00      	nop

0800b608 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800b608:	b188      	cbz	r0, 800b62e <USBD_Init+0x26>
{
 800b60a:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800b60c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b610:	b113      	cbz	r3, 800b618 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800b612:	2300      	movs	r3, #0
 800b614:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800b618:	b109      	cbz	r1, 800b61e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800b61a:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b61e:	2301      	movs	r3, #1
  pdev->id = id;
 800b620:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b622:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b626:	f000 fddd 	bl	800c1e4 <USBD_LL_Init>

  return USBD_OK;
 800b62a:	2000      	movs	r0, #0
}
 800b62c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800b62e:	2002      	movs	r0, #2
}
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop

0800b634 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b634:	4603      	mov	r3, r0
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800b636:	b119      	cbz	r1, 800b640 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 800b638:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 800b63a:	f8c3 128c 	str.w	r1, [r3, #652]	; 0x28c
    status = USBD_OK;
 800b63e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b640:	2002      	movs	r0, #2
  }

  return status;
}
 800b642:	4770      	bx	lr

0800b644 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800b644:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b646:	f000 fe11 	bl	800c26c <USBD_LL_Start>

  return USBD_OK;
}
 800b64a:	2000      	movs	r0, #0
 800b64c:	bd08      	pop	{r3, pc}
 800b64e:	bf00      	nop

0800b650 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b650:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800b652:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b656:	b11b      	cbz	r3, 800b660 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4798      	blx	r3
 800b65c:	b900      	cbnz	r0, 800b660 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800b65e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800b660:	2002      	movs	r0, #2
}
 800b662:	bd08      	pop	{r3, pc}

0800b664 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b664:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b666:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	4798      	blx	r3
  return USBD_OK;
}
 800b66e:	2000      	movs	r0, #0
 800b670:	bd08      	pop	{r3, pc}
 800b672:	bf00      	nop

0800b674 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b678:	f500 7520 	add.w	r5, r0, #640	; 0x280
 800b67c:	4628      	mov	r0, r5
 800b67e:	f000 fb63 	bl	800bd48 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b682:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 800b684:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286

  switch (pdev->request.bmRequest & 0x1FU)
 800b688:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 800b68c:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
 800b690:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 800b694:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 800b696:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 800b69a:	d009      	beq.n	800b6b0 <USBD_LL_SetupStage+0x3c>
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d013      	beq.n	800b6c8 <USBD_LL_SetupStage+0x54>
 800b6a0:	b163      	cbz	r3, 800b6bc <USBD_LL_SetupStage+0x48>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b6a8:	f000 fe0c 	bl	800c2c4 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f000 fa78 	bl	800bba8 <USBD_StdItfReq>
}
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 800b6bc:	4629      	mov	r1, r5
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f000 f8f8 	bl	800b8b4 <USBD_StdDevReq>
}
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f000 faa0 	bl	800bc10 <USBD_StdEPReq>
}
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}

0800b6d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800b6d8:	b969      	cbnz	r1, 800b6f6 <USBD_LL_DataOutStage+0x22>
 800b6da:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b6dc:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800b6e0:	2a03      	cmp	r2, #3
 800b6e2:	d015      	beq.n	800b710 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b6e4:	2a05      	cmp	r2, #5
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	d10e      	bne.n	800b708 <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b6ea:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800b6ee:	f000 fde9 	bl	800c2c4 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800b6f2:	4620      	mov	r0, r4
}
 800b6f4:	bd38      	pop	{r3, r4, r5, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 800b6f6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	b133      	cbz	r3, 800b70c <USBD_LL_DataOutStage+0x38>
 800b6fe:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800b702:	2a03      	cmp	r2, #3
 800b704:	d102      	bne.n	800b70c <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 800b706:	4798      	blx	r3
  return USBD_OK;
 800b708:	2000      	movs	r0, #0
}
 800b70a:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b70c:	2002      	movs	r0, #2
}
 800b70e:	bd38      	pop	{r3, r4, r5, pc}
      if(pep->rem_length > pep->maxpacket)
 800b710:	e9d0 1253 	ldrd	r1, r2, [r0, #332]	; 0x14c
 800b714:	4291      	cmp	r1, r2
 800b716:	d90c      	bls.n	800b732 <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -=  pep->maxpacket;
 800b718:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx (pdev,
 800b71a:	428a      	cmp	r2, r1
 800b71c:	bf88      	it	hi
 800b71e:	b28a      	uxthhi	r2, r1
        pep->rem_length -=  pep->maxpacket;
 800b720:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800b724:	bf98      	it	ls
 800b726:	b292      	uxthls	r2, r2
 800b728:	4619      	mov	r1, r3
 800b72a:	f000 fb7d 	bl	800be28 <USBD_CtlContinueRx>
  return USBD_OK;
 800b72e:	2000      	movs	r0, #0
}
 800b730:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b732:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b736:	691b      	ldr	r3, [r3, #16]
 800b738:	b11b      	cbz	r3, 800b742 <USBD_LL_DataOutStage+0x6e>
 800b73a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800b73e:	2a03      	cmp	r2, #3
 800b740:	d004      	beq.n	800b74c <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 800b742:	4628      	mov	r0, r5
 800b744:	f000 fb7a 	bl	800be3c <USBD_CtlSendStatus>
  return USBD_OK;
 800b748:	2000      	movs	r0, #0
}
 800b74a:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 800b74c:	4798      	blx	r3
 800b74e:	e7f8      	b.n	800b742 <USBD_LL_DataOutStage+0x6e>

0800b750 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800b754:	b961      	cbnz	r1, 800b770 <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800b756:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	d015      	beq.n	800b78a <USBD_LL_DataInStage+0x3a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b75e:	f033 0304 	bics.w	r3, r3, #4
 800b762:	d02e      	beq.n	800b7c2 <USBD_LL_DataInStage+0x72>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b764:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d031      	beq.n	800b7d0 <USBD_LL_DataInStage+0x80>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800b76c:	2000      	movs	r0, #0
}
 800b76e:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 800b770:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b774:	695b      	ldr	r3, [r3, #20]
 800b776:	b133      	cbz	r3, 800b786 <USBD_LL_DataInStage+0x36>
 800b778:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800b77c:	2a03      	cmp	r2, #3
 800b77e:	d102      	bne.n	800b786 <USBD_LL_DataInStage+0x36>
    pdev->pClass->DataIn(pdev, epnum);
 800b780:	4798      	blx	r3
  return USBD_OK;
 800b782:	2000      	movs	r0, #0
}
 800b784:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800b786:	2002      	movs	r0, #2
}
 800b788:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 800b78a:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800b78e:	429e      	cmp	r6, r3
 800b790:	d833      	bhi.n	800b7fa <USBD_LL_DataInStage+0xaa>
        if((pep->total_length % pep->maxpacket == 0U) &&
 800b792:	69c2      	ldr	r2, [r0, #28]
 800b794:	fbb2 f5f3 	udiv	r5, r2, r3
 800b798:	fb03 2515 	mls	r5, r3, r5, r2
 800b79c:	b9ed      	cbnz	r5, 800b7da <USBD_LL_DataInStage+0x8a>
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d81b      	bhi.n	800b7da <USBD_LL_DataInStage+0x8a>
           (pep->total_length >= pep->maxpacket) &&
 800b7a2:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d217      	bcs.n	800b7da <USBD_LL_DataInStage+0x8a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b7aa:	462a      	mov	r2, r5
 800b7ac:	f000 fb24 	bl	800bdf8 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b7b0:	462b      	mov	r3, r5
 800b7b2:	462a      	mov	r2, r5
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800b7b8:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b7bc:	f000 fdce 	bl	800c35c <USBD_LL_PrepareReceive>
 800b7c0:	e7d0      	b.n	800b764 <USBD_LL_DataInStage+0x14>
        USBD_LL_StallEP(pdev, 0x80U);
 800b7c2:	2180      	movs	r1, #128	; 0x80
 800b7c4:	f000 fd7e 	bl	800c2c4 <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 800b7c8:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d1cd      	bne.n	800b76c <USBD_LL_DataInStage+0x1c>
      pdev->dev_test_mode = 0U;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
  return USBD_OK;
 800b7d6:	4618      	mov	r0, r3
}
 800b7d8:	bd70      	pop	{r4, r5, r6, pc}
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b7da:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	b11b      	cbz	r3, 800b7ea <USBD_LL_DataInStage+0x9a>
 800b7e2:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800b7e6:	2a03      	cmp	r2, #3
 800b7e8:	d015      	beq.n	800b816 <USBD_LL_DataInStage+0xc6>
          USBD_LL_StallEP(pdev, 0x80U);
 800b7ea:	2180      	movs	r1, #128	; 0x80
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 fd69 	bl	800c2c4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	f000 fb2e 	bl	800be54 <USBD_CtlReceiveStatus>
 800b7f8:	e7b4      	b.n	800b764 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800b7fa:	460d      	mov	r5, r1
 800b7fc:	1af3      	subs	r3, r6, r3
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800b7fe:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800b800:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800b802:	b29a      	uxth	r2, r3
 800b804:	f000 faf8 	bl	800bdf8 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b808:	462b      	mov	r3, r5
 800b80a:	462a      	mov	r2, r5
 800b80c:	4629      	mov	r1, r5
 800b80e:	4620      	mov	r0, r4
 800b810:	f000 fda4 	bl	800c35c <USBD_LL_PrepareReceive>
 800b814:	e7a6      	b.n	800b764 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 800b816:	4620      	mov	r0, r4
 800b818:	4798      	blx	r3
 800b81a:	e7e6      	b.n	800b7ea <USBD_LL_DataInStage+0x9a>

0800b81c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800b81c:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b81e:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b820:	2640      	movs	r6, #64	; 0x40
{
 800b822:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b824:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b826:	4611      	mov	r1, r2
 800b828:	4633      	mov	r3, r6
 800b82a:	f000 fd2d 	bl	800c288 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b82e:	4633      	mov	r3, r6
 800b830:	2180      	movs	r1, #128	; 0x80
 800b832:	2200      	movs	r2, #0
 800b834:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b836:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b83a:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b83e:	f000 fd23 	bl	800c288 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800b842:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800b844:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b848:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b84a:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b84c:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800b850:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800b854:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800b856:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 800b85a:	b123      	cbz	r3, 800b866 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b85c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800b860:	4620      	mov	r0, r4
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	4798      	blx	r3
  }

  return USBD_OK;
}
 800b866:	2000      	movs	r0, #0
 800b868:	bd70      	pop	{r4, r5, r6, pc}
 800b86a:	bf00      	nop

0800b86c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800b86c:	4603      	mov	r3, r0
  pdev->dev_speed = speed;
  return USBD_OK;
}
 800b86e:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800b870:	7419      	strb	r1, [r3, #16]
}
 800b872:	4770      	bx	lr

0800b874 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800b874:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b876:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 800b878:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
}
 800b87c:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b87e:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
  pdev->dev_old_state =  pdev->dev_state;
 800b882:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
}
 800b886:	4770      	bx	lr

0800b888 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800b888:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
 800b88a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
  return USBD_OK;
}
 800b88e:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 800b890:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop

0800b898 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800b898:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800b89c:	2a03      	cmp	r2, #3
 800b89e:	d001      	beq.n	800b8a4 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	4770      	bx	lr
{
 800b8a4:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 800b8a6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b8aa:	69db      	ldr	r3, [r3, #28]
 800b8ac:	b103      	cbz	r3, 800b8b0 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800b8ae:	4798      	blx	r3
}
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	bd08      	pop	{r3, pc}

0800b8b4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800b8b4:	b530      	push	{r4, r5, lr}
 800b8b6:	780b      	ldrb	r3, [r1, #0]
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8be:	2b20      	cmp	r3, #32
{
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8c4:	d00d      	beq.n	800b8e2 <USBD_StdDevReq+0x2e>
 800b8c6:	2b40      	cmp	r3, #64	; 0x40
 800b8c8:	d00b      	beq.n	800b8e2 <USBD_StdDevReq+0x2e>
 800b8ca:	b19b      	cbz	r3, 800b8f4 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800b8cc:	2180      	movs	r1, #128	; 0x80
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 fcf8 	bl	800c2c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f000 fcf4 	bl	800c2c4 <USBD_LL_StallEP>
}
 800b8dc:	2000      	movs	r0, #0
 800b8de:	b003      	add	sp, #12
 800b8e0:	bd30      	pop	{r4, r5, pc}
    pdev->pClass->Setup(pdev, req);
 800b8e2:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	4798      	blx	r3
}
 800b8ee:	2000      	movs	r0, #0
 800b8f0:	b003      	add	sp, #12
 800b8f2:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 800b8f4:	784b      	ldrb	r3, [r1, #1]
 800b8f6:	2b09      	cmp	r3, #9
 800b8f8:	d8e8      	bhi.n	800b8cc <USBD_StdDevReq+0x18>
 800b8fa:	a201      	add	r2, pc, #4	; (adr r2, 800b900 <USBD_StdDevReq+0x4c>)
 800b8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b900:	0800b95b 	.word	0x0800b95b
 800b904:	0800b987 	.word	0x0800b987
 800b908:	0800b8cd 	.word	0x0800b8cd
 800b90c:	0800b9a5 	.word	0x0800b9a5
 800b910:	0800b8cd 	.word	0x0800b8cd
 800b914:	0800b9ad 	.word	0x0800b9ad
 800b918:	0800b9e5 	.word	0x0800b9e5
 800b91c:	0800b8cd 	.word	0x0800b8cd
 800b920:	0800ba15 	.word	0x0800ba15
 800b924:	0800b929 	.word	0x0800b929
  cfgidx = (uint8_t)(req->wValue);
 800b928:	7889      	ldrb	r1, [r1, #2]
 800b92a:	4d9e      	ldr	r5, [pc, #632]	; (800bba4 <USBD_StdDevReq+0x2f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b92c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800b92e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b930:	d8cc      	bhi.n	800b8cc <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800b932:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b936:	2b02      	cmp	r3, #2
 800b938:	f000 8111 	beq.w	800bb5e <USBD_StdDevReq+0x2aa>
 800b93c:	2b03      	cmp	r3, #3
 800b93e:	f000 80ff 	beq.w	800bb40 <USBD_StdDevReq+0x28c>
  USBD_LL_StallEP(pdev , 0x80U);
 800b942:	2180      	movs	r1, #128	; 0x80
 800b944:	f000 fcbe 	bl	800c2c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800b948:	2100      	movs	r1, #0
 800b94a:	4620      	mov	r0, r4
 800b94c:	f000 fcba 	bl	800c2c4 <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 800b950:	4620      	mov	r0, r4
 800b952:	7829      	ldrb	r1, [r5, #0]
 800b954:	f7ff fe86 	bl	800b664 <USBD_ClrClassConfig>
      break;
 800b958:	e7c0      	b.n	800b8dc <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800b95a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b95e:	3b01      	subs	r3, #1
 800b960:	2b02      	cmp	r3, #2
 800b962:	d8b3      	bhi.n	800b8cc <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 800b964:	88cb      	ldrh	r3, [r1, #6]
 800b966:	2b02      	cmp	r3, #2
 800b968:	d1b0      	bne.n	800b8cc <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b96a:	2201      	movs	r2, #1
    if (pdev->dev_remote_wakeup)
 800b96c:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b970:	60c2      	str	r2, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800b972:	b10b      	cbz	r3, 800b978 <USBD_StdDevReq+0xc4>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b974:	2303      	movs	r3, #3
 800b976:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b978:	2202      	movs	r2, #2
 800b97a:	4620      	mov	r0, r4
 800b97c:	f104 010c 	add.w	r1, r4, #12
 800b980:	f000 fa2c 	bl	800bddc <USBD_CtlSendData>
    break;
 800b984:	e7aa      	b.n	800b8dc <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800b986:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b98a:	3b01      	subs	r3, #1
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d89d      	bhi.n	800b8cc <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b990:	884b      	ldrh	r3, [r1, #2]
 800b992:	2b01      	cmp	r3, #1
 800b994:	d1a2      	bne.n	800b8dc <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 800b996:	2300      	movs	r3, #0
      USBD_CtlSendStatus(pdev);
 800b998:	4620      	mov	r0, r4
      pdev->dev_remote_wakeup = 0U;
 800b99a:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800b99e:	f000 fa4d 	bl	800be3c <USBD_CtlSendStatus>
 800b9a2:	e79b      	b.n	800b8dc <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9a4:	884b      	ldrh	r3, [r1, #2]
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d198      	bne.n	800b8dc <USBD_StdDevReq+0x28>
 800b9aa:	e7f5      	b.n	800b998 <USBD_StdDevReq+0xe4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b9ac:	888b      	ldrh	r3, [r1, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d18c      	bne.n	800b8cc <USBD_StdDevReq+0x18>
 800b9b2:	88cb      	ldrh	r3, [r1, #6]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d189      	bne.n	800b8cc <USBD_StdDevReq+0x18>
 800b9b8:	884d      	ldrh	r5, [r1, #2]
 800b9ba:	2d7f      	cmp	r5, #127	; 0x7f
 800b9bc:	d886      	bhi.n	800b8cc <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9be:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b9c2:	2b03      	cmp	r3, #3
 800b9c4:	d082      	beq.n	800b8cc <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9c6:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800b9c8:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9cc:	f000 fcaa 	bl	800c324 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f000 fa33 	bl	800be3c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800b9d6:	2d00      	cmp	r5, #0
 800b9d8:	f000 80df 	beq.w	800bb9a <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9dc:	2302      	movs	r3, #2
 800b9de:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800b9e2:	e77b      	b.n	800b8dc <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 800b9e4:	884a      	ldrh	r2, [r1, #2]
 800b9e6:	0a13      	lsrs	r3, r2, #8
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	2b06      	cmp	r3, #6
 800b9ec:	f63f af6e 	bhi.w	800b8cc <USBD_StdDevReq+0x18>
 800b9f0:	a101      	add	r1, pc, #4	; (adr r1, 800b9f8 <USBD_StdDevReq+0x144>)
 800b9f2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9f6:	bf00      	nop
 800b9f8:	0800baa7 	.word	0x0800baa7
 800b9fc:	0800ba8f 	.word	0x0800ba8f
 800ba00:	0800ba7d 	.word	0x0800ba7d
 800ba04:	0800b8cd 	.word	0x0800b8cd
 800ba08:	0800b8cd 	.word	0x0800b8cd
 800ba0c:	0800ba67 	.word	0x0800ba67
 800ba10:	0800ba39 	.word	0x0800ba39
  if (req->wLength != 1U)
 800ba14:	88ca      	ldrh	r2, [r1, #6]
 800ba16:	2a01      	cmp	r2, #1
 800ba18:	f47f af58 	bne.w	800b8cc <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800ba1c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800ba20:	2b02      	cmp	r3, #2
 800ba22:	d878      	bhi.n	800bb16 <USBD_StdDevReq+0x262>
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f43f af51 	beq.w	800b8cc <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 800ba2a:	4601      	mov	r1, r0
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ba32:	f000 f9d3 	bl	800bddc <USBD_CtlSendData>
      break;
 800ba36:	e751      	b.n	800b8dc <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ba38:	7c03      	ldrb	r3, [r0, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f47f af46 	bne.w	800b8cc <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ba40:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800ba44:	f10d 0006 	add.w	r0, sp, #6
 800ba48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba4a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba4c:	2307      	movs	r3, #7
 800ba4e:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 800ba50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ba54:	2a00      	cmp	r2, #0
 800ba56:	d06e      	beq.n	800bb36 <USBD_StdDevReq+0x282>
 800ba58:	88eb      	ldrh	r3, [r5, #6]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d162      	bne.n	800bb24 <USBD_StdDevReq+0x270>
        USBD_CtlSendStatus(pdev);
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f000 f9ec 	bl	800be3c <USBD_CtlSendStatus>
 800ba64:	e73a      	b.n	800b8dc <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ba66:	7c03      	ldrb	r3, [r0, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f47f af2f 	bne.w	800b8cc <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ba6e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800ba72:	f10d 0006 	add.w	r0, sp, #6
 800ba76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba78:	4798      	blx	r3
      break;
 800ba7a:	e7e9      	b.n	800ba50 <USBD_StdDevReq+0x19c>
    switch ((uint8_t)(req->wValue))
 800ba7c:	b2d2      	uxtb	r2, r2
 800ba7e:	2a05      	cmp	r2, #5
 800ba80:	f63f af24 	bhi.w	800b8cc <USBD_StdDevReq+0x18>
 800ba84:	e8df f002 	tbb	[pc, r2]
 800ba88:	272f373f 	.word	0x272f373f
 800ba8c:	171f      	.short	0x171f
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800ba8e:	7c03      	ldrb	r3, [r0, #16]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d172      	bne.n	800bb7a <USBD_StdDevReq+0x2c6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ba94:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800ba98:	f10d 0006 	add.w	r0, sp, #6
 800ba9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800baa0:	2302      	movs	r3, #2
 800baa2:	7043      	strb	r3, [r0, #1]
 800baa4:	e7d4      	b.n	800ba50 <USBD_StdDevReq+0x19c>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800baa6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800baaa:	f10d 0106 	add.w	r1, sp, #6
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	7c00      	ldrb	r0, [r0, #16]
 800bab2:	4798      	blx	r3
    break;
 800bab4:	e7cc      	b.n	800ba50 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bab6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800baba:	f10d 0106 	add.w	r1, sp, #6
 800babe:	699b      	ldr	r3, [r3, #24]
 800bac0:	7c00      	ldrb	r0, [r0, #16]
 800bac2:	4798      	blx	r3
      break;
 800bac4:	e7c4      	b.n	800ba50 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bac6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800baca:	f10d 0106 	add.w	r1, sp, #6
 800bace:	695b      	ldr	r3, [r3, #20]
 800bad0:	7c00      	ldrb	r0, [r0, #16]
 800bad2:	4798      	blx	r3
      break;
 800bad4:	e7bc      	b.n	800ba50 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bad6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800bada:	f10d 0106 	add.w	r1, sp, #6
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	7c00      	ldrb	r0, [r0, #16]
 800bae2:	4798      	blx	r3
      break;
 800bae4:	e7b4      	b.n	800ba50 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bae6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800baea:	f10d 0106 	add.w	r1, sp, #6
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	7c00      	ldrb	r0, [r0, #16]
 800baf2:	4798      	blx	r3
      break;
 800baf4:	e7ac      	b.n	800ba50 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800baf6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800bafa:	f10d 0106 	add.w	r1, sp, #6
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	7c00      	ldrb	r0, [r0, #16]
 800bb02:	4798      	blx	r3
      break;
 800bb04:	e7a4      	b.n	800ba50 <USBD_StdDevReq+0x19c>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bb06:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800bb0a:	f10d 0106 	add.w	r1, sp, #6
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	7c00      	ldrb	r0, [r0, #16]
 800bb12:	4798      	blx	r3
      break;
 800bb14:	e79c      	b.n	800ba50 <USBD_StdDevReq+0x19c>
    switch (pdev->dev_state)
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	f47f aed8 	bne.w	800b8cc <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bb1c:	1d01      	adds	r1, r0, #4
 800bb1e:	f000 f95d 	bl	800bddc <USBD_CtlSendData>
      break;
 800bb22:	e6db      	b.n	800b8dc <USBD_StdDevReq+0x28>
    len = MIN(len, req->wLength);
 800bb24:	429a      	cmp	r2, r3
 800bb26:	bf28      	it	cs
 800bb28:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 800bb2a:	4601      	mov	r1, r0
 800bb2c:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 800bb2e:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800bb32:	f000 f953 	bl	800bddc <USBD_CtlSendData>
  if(req->wLength == 0U)
 800bb36:	88eb      	ldrh	r3, [r5, #6]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f47f aecf 	bne.w	800b8dc <USBD_StdDevReq+0x28>
 800bb3e:	e78e      	b.n	800ba5e <USBD_StdDevReq+0x1aa>
      if (cfgidx == 0U)
 800bb40:	b321      	cbz	r1, 800bb8c <USBD_StdDevReq+0x2d8>
      else if (cfgidx != pdev->dev_config)
 800bb42:	6841      	ldr	r1, [r0, #4]
 800bb44:	2901      	cmp	r1, #1
 800bb46:	d08a      	beq.n	800ba5e <USBD_StdDevReq+0x1aa>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb48:	b2c9      	uxtb	r1, r1
 800bb4a:	f7ff fd8b 	bl	800b664 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb4e:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb50:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 800bb52:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb54:	f7ff fd7c 	bl	800b650 <USBD_SetClassConfig>
 800bb58:	2802      	cmp	r0, #2
 800bb5a:	d180      	bne.n	800ba5e <USBD_StdDevReq+0x1aa>
 800bb5c:	e6b6      	b.n	800b8cc <USBD_StdDevReq+0x18>
      if (cfgidx)
 800bb5e:	2900      	cmp	r1, #0
 800bb60:	f43f af7d 	beq.w	800ba5e <USBD_StdDevReq+0x1aa>
        pdev->dev_config = cfgidx;
 800bb64:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb66:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800bb68:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb6a:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb6e:	f7ff fd6f 	bl	800b650 <USBD_SetClassConfig>
 800bb72:	2802      	cmp	r0, #2
 800bb74:	f47f af73 	bne.w	800ba5e <USBD_StdDevReq+0x1aa>
 800bb78:	e6a8      	b.n	800b8cc <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bb7a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800bb7e:	f10d 0006 	add.w	r0, sp, #6
 800bb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb84:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb86:	2302      	movs	r3, #2
 800bb88:	7043      	strb	r3, [r0, #1]
 800bb8a:	e761      	b.n	800ba50 <USBD_StdDevReq+0x19c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb8c:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800bb8e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb90:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 800bb94:	f7ff fd66 	bl	800b664 <USBD_ClrClassConfig>
 800bb98:	e761      	b.n	800ba5e <USBD_StdDevReq+0x1aa>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800bba0:	e69c      	b.n	800b8dc <USBD_StdDevReq+0x28>
 800bba2:	bf00      	nop
 800bba4:	20000838 	.word	0x20000838

0800bba8 <USBD_StdItfReq>:
{
 800bba8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbaa:	780b      	ldrb	r3, [r1, #0]
{
 800bbac:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbae:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800bbb2:	2a40      	cmp	r2, #64	; 0x40
{
 800bbb4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbb6:	d00a      	beq.n	800bbce <USBD_StdItfReq+0x26>
 800bbb8:	065b      	lsls	r3, r3, #25
 800bbba:	d508      	bpl.n	800bbce <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 800bbbc:	2180      	movs	r1, #128	; 0x80
 800bbbe:	f000 fb81 	bl	800c2c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f000 fb7d 	bl	800c2c4 <USBD_LL_StallEP>
}
 800bbca:	2000      	movs	r0, #0
 800bbcc:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 800bbce:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d811      	bhi.n	800bbfc <USBD_StdItfReq+0x54>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bbd8:	792b      	ldrb	r3, [r5, #4]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d80e      	bhi.n	800bbfc <USBD_StdItfReq+0x54>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800bbde:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800bbea:	88eb      	ldrh	r3, [r5, #6]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1ec      	bne.n	800bbca <USBD_StdItfReq+0x22>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d1ea      	bne.n	800bbca <USBD_StdItfReq+0x22>
          USBD_CtlSendStatus(pdev);
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f000 f921 	bl	800be3c <USBD_CtlSendStatus>
 800bbfa:	e7e6      	b.n	800bbca <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev , 0x80U);
 800bbfc:	2180      	movs	r1, #128	; 0x80
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f000 fb60 	bl	800c2c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800bc04:	2100      	movs	r1, #0
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 fb5c 	bl	800c2c4 <USBD_LL_StallEP>
}
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	bd38      	pop	{r3, r4, r5, pc}

0800bc10 <USBD_StdEPReq>:
{
 800bc10:	b538      	push	{r3, r4, r5, lr}
 800bc12:	780b      	ldrb	r3, [r1, #0]
 800bc14:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc1a:	2b20      	cmp	r3, #32
 800bc1c:	d00c      	beq.n	800bc38 <USBD_StdEPReq+0x28>
 800bc1e:	2b40      	cmp	r3, #64	; 0x40
 800bc20:	d00a      	beq.n	800bc38 <USBD_StdEPReq+0x28>
 800bc22:	b183      	cbz	r3, 800bc46 <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 800bc24:	2180      	movs	r1, #128	; 0x80
 800bc26:	4620      	mov	r0, r4
 800bc28:	f000 fb4c 	bl	800c2c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 fb48 	bl	800c2c4 <USBD_LL_StallEP>
}
 800bc34:	2000      	movs	r0, #0
 800bc36:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->Setup (pdev, req);
 800bc38:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	4798      	blx	r3
}
 800bc42:	2000      	movs	r0, #0
 800bc44:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 800bc46:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800bc48:	888a      	ldrh	r2, [r1, #4]
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	fa5f fc82 	uxtb.w	ip, r2
    switch (req->bRequest)
 800bc50:	d03e      	beq.n	800bcd0 <USBD_StdEPReq+0xc0>
 800bc52:	2b03      	cmp	r3, #3
 800bc54:	d02a      	beq.n	800bcac <USBD_StdEPReq+0x9c>
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1e4      	bne.n	800bc24 <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 800bc5a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d051      	beq.n	800bd06 <USBD_StdEPReq+0xf6>
 800bc62:	2b03      	cmp	r3, #3
 800bc64:	d1de      	bne.n	800bc24 <USBD_StdEPReq+0x14>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc66:	f00c 030f 	and.w	r3, ip, #15
 800bc6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800bc6e:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc70:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800bc74:	d456      	bmi.n	800bd24 <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc76:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d0d2      	beq.n	800bc24 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bc7e:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800bc82:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800bc86:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800bc8a:	f505 75a0 	add.w	r5, r5, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc8e:	b133      	cbz	r3, 800bc9e <USBD_StdEPReq+0x8e>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800bc90:	4661      	mov	r1, ip
 800bc92:	4620      	mov	r0, r4
 800bc94:	f000 fb32 	bl	800c2fc <USBD_LL_IsStallEP>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d04f      	beq.n	800bd3c <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bca0:	2202      	movs	r2, #2
 800bca2:	4629      	mov	r1, r5
 800bca4:	4620      	mov	r0, r4
 800bca6:	f000 f899 	bl	800bddc <USBD_CtlSendData>
          break;
 800bcaa:	e7c3      	b.n	800bc34 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800bcac:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d01d      	beq.n	800bcf0 <USBD_StdEPReq+0xe0>
 800bcb4:	2b03      	cmp	r3, #3
 800bcb6:	d1b5      	bne.n	800bc24 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bcb8:	884b      	ldrh	r3, [r1, #2]
 800bcba:	b92b      	cbnz	r3, 800bcc8 <USBD_StdEPReq+0xb8>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bcbc:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800bcc0:	d002      	beq.n	800bcc8 <USBD_StdEPReq+0xb8>
 800bcc2:	88cb      	ldrh	r3, [r1, #6]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d03b      	beq.n	800bd40 <USBD_StdEPReq+0x130>
        USBD_CtlSendStatus(pdev);
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f000 f8b7 	bl	800be3c <USBD_CtlSendStatus>
        break;
 800bcce:	e7b1      	b.n	800bc34 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800bcd0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d00b      	beq.n	800bcf0 <USBD_StdEPReq+0xe0>
 800bcd8:	2b03      	cmp	r3, #3
 800bcda:	d1a3      	bne.n	800bc24 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bcdc:	884b      	ldrh	r3, [r1, #2]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1a8      	bne.n	800bc34 <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 800bce2:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800bce6:	d0ef      	beq.n	800bcc8 <USBD_StdEPReq+0xb8>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800bce8:	4661      	mov	r1, ip
 800bcea:	f000 faf9 	bl	800c2e0 <USBD_LL_ClearStallEP>
 800bcee:	e7eb      	b.n	800bcc8 <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcf0:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800bcf4:	d096      	beq.n	800bc24 <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 800bcf6:	4661      	mov	r1, ip
 800bcf8:	f000 fae4 	bl	800c2c4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800bcfc:	2180      	movs	r1, #128	; 0x80
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f000 fae0 	bl	800c2c4 <USBD_LL_StallEP>
 800bd04:	e796      	b.n	800bc34 <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd06:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800bd0a:	d18b      	bne.n	800bc24 <USBD_StdEPReq+0x14>
          pep->status = 0x0000U;
 800bd0c:	2300      	movs	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bd0e:	0611      	lsls	r1, r2, #24
 800bd10:	bf4c      	ite	mi
 800bd12:	f100 0114 	addmi.w	r1, r0, #20
 800bd16:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bd1a:	2202      	movs	r2, #2
          pep->status = 0x0000U;
 800bd1c:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bd1e:	f000 f85d 	bl	800bddc <USBD_CtlSendData>
          break;
 800bd22:	e787      	b.n	800bc34 <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f43f af7c 	beq.w	800bc24 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bd2c:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800bd30:	1c5d      	adds	r5, r3, #1
 800bd32:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800bd36:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800bd3a:	e7a8      	b.n	800bc8e <USBD_StdEPReq+0x7e>
            pep->status = 0x0000U;
 800bd3c:	6028      	str	r0, [r5, #0]
 800bd3e:	e7af      	b.n	800bca0 <USBD_StdEPReq+0x90>
            USBD_LL_StallEP(pdev, ep_addr);
 800bd40:	4661      	mov	r1, ip
 800bd42:	f000 fabf 	bl	800c2c4 <USBD_LL_StallEP>
 800bd46:	e7bf      	b.n	800bcc8 <USBD_StdEPReq+0xb8>

0800bd48 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800bd48:	780b      	ldrb	r3, [r1, #0]
 800bd4a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800bd4c:	784b      	ldrb	r3, [r1, #1]
 800bd4e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800bd50:	78ca      	ldrb	r2, [r1, #3]
 800bd52:	788b      	ldrb	r3, [r1, #2]
 800bd54:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bd58:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800bd5a:	794a      	ldrb	r2, [r1, #5]
 800bd5c:	790b      	ldrb	r3, [r1, #4]
 800bd5e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bd62:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800bd64:	79ca      	ldrb	r2, [r1, #7]
 800bd66:	798b      	ldrb	r3, [r1, #6]
 800bd68:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bd6c:	80c3      	strh	r3, [r0, #6]
}
 800bd6e:	4770      	bx	lr

0800bd70 <USBD_CtlError>:
{
 800bd70:	b510      	push	{r4, lr}
 800bd72:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800bd74:	2180      	movs	r1, #128	; 0x80
 800bd76:	f000 faa5 	bl	800c2c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800bd7a:	4620      	mov	r0, r4
}
 800bd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800bd80:	2100      	movs	r1, #0
 800bd82:	f000 ba9f 	b.w	800c2c4 <USBD_LL_StallEP>
 800bd86:	bf00      	nop

0800bd88 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800bd88:	b318      	cbz	r0, 800bdd2 <USBD_GetString+0x4a>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800bd8a:	7803      	ldrb	r3, [r0, #0]
{
 800bd8c:	b430      	push	{r4, r5}
    while (*buf != '\0')
 800bd8e:	b30b      	cbz	r3, 800bdd4 <USBD_GetString+0x4c>
 800bd90:	4604      	mov	r4, r0
 800bd92:	f1c0 0c01 	rsb	ip, r0, #1
    {
        len++;
 800bd96:	eb04 030c 	add.w	r3, r4, ip
    while (*buf != '\0')
 800bd9a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2d00      	cmp	r5, #0
 800bda2:	d1f8      	bne.n	800bd96 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bda4:	3301      	adds	r3, #1
 800bda6:	005b      	lsls	r3, r3, #1
 800bda8:	b2dc      	uxtb	r4, r3
 800bdaa:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bdac:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bdae:	700c      	strb	r4, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bdb0:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 800bdb2:	7804      	ldrb	r4, [r0, #0]
 800bdb4:	b15c      	cbz	r4, 800bdce <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bdb6:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800bdb8:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800bdba:	1c5a      	adds	r2, r3, #1
 800bdbc:	b2d2      	uxtb	r2, r2
 800bdbe:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800bdc0:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800bdc2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 800bdc6:	3302      	adds	r3, #2
 800bdc8:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 800bdca:	2c00      	cmp	r4, #0
 800bdcc:	d1f5      	bne.n	800bdba <USBD_GetString+0x32>
}
 800bdce:	bc30      	pop	{r4, r5}
 800bdd0:	4770      	bx	lr
 800bdd2:	4770      	bx	lr
    while (*buf != '\0')
 800bdd4:	2402      	movs	r4, #2
 800bdd6:	4623      	mov	r3, r4
 800bdd8:	e7e7      	b.n	800bdaa <USBD_GetString+0x22>
 800bdda:	bf00      	nop

0800bddc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800bddc:	b510      	push	{r4, lr}
 800bdde:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bde0:	2402      	movs	r4, #2
{
 800bde2:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800bde4:	e9c0 3307 	strd	r3, r3, [r0, #28]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800bde8:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bdea:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800bdee:	f000 faa7 	bl	800c340 <USBD_LL_Transmit>

  return USBD_OK;
}
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	bd10      	pop	{r4, pc}
 800bdf6:	bf00      	nop

0800bdf8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800bdf8:	468c      	mov	ip, r1
 800bdfa:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800bdfc:	2100      	movs	r1, #0
{
 800bdfe:	4613      	mov	r3, r2
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800be00:	4662      	mov	r2, ip
 800be02:	f000 fa9d 	bl	800c340 <USBD_LL_Transmit>

  return USBD_OK;
}
 800be06:	2000      	movs	r0, #0
 800be08:	bd08      	pop	{r3, pc}
 800be0a:	bf00      	nop

0800be0c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800be0c:	b510      	push	{r4, lr}
 800be0e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be10:	2403      	movs	r4, #3
{
 800be12:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800be14:	e9c0 3352 	strd	r3, r3, [r0, #328]	; 0x148

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800be18:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be1a:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800be1e:	f000 fa9d 	bl	800c35c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800be22:	2000      	movs	r0, #0
 800be24:	bd10      	pop	{r4, pc}
 800be26:	bf00      	nop

0800be28 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800be28:	468c      	mov	ip, r1
 800be2a:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be2c:	2100      	movs	r1, #0
{
 800be2e:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be30:	4662      	mov	r2, ip
 800be32:	f000 fa93 	bl	800c35c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800be36:	2000      	movs	r0, #0
 800be38:	bd08      	pop	{r3, pc}
 800be3a:	bf00      	nop

0800be3c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800be3c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be3e:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be40:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be42:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be46:	461a      	mov	r2, r3
 800be48:	4619      	mov	r1, r3
 800be4a:	f000 fa79 	bl	800c340 <USBD_LL_Transmit>

  return USBD_OK;
}
 800be4e:	2000      	movs	r0, #0
 800be50:	bd08      	pop	{r3, pc}
 800be52:	bf00      	nop

0800be54 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800be54:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be56:	2105      	movs	r1, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800be58:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be5a:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800be5e:	461a      	mov	r2, r3
 800be60:	4619      	mov	r1, r3
 800be62:	f000 fa7b 	bl	800c35c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800be66:	2000      	movs	r0, #0
 800be68:	bd08      	pop	{r3, pc}
 800be6a:	bf00      	nop

0800be6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be6e:	2200      	movs	r2, #0
 800be70:	4917      	ldr	r1, [pc, #92]	; (800bed0 <MX_USB_DEVICE_Init+0x64>)
 800be72:	4818      	ldr	r0, [pc, #96]	; (800bed4 <MX_USB_DEVICE_Init+0x68>)
 800be74:	f7ff fbc8 	bl	800b608 <USBD_Init>
 800be78:	b970      	cbnz	r0, 800be98 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be7a:	4917      	ldr	r1, [pc, #92]	; (800bed8 <MX_USB_DEVICE_Init+0x6c>)
 800be7c:	4815      	ldr	r0, [pc, #84]	; (800bed4 <MX_USB_DEVICE_Init+0x68>)
 800be7e:	f7ff fbd9 	bl	800b634 <USBD_RegisterClass>
 800be82:	b988      	cbnz	r0, 800bea8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800be84:	4915      	ldr	r1, [pc, #84]	; (800bedc <MX_USB_DEVICE_Init+0x70>)
 800be86:	4813      	ldr	r0, [pc, #76]	; (800bed4 <MX_USB_DEVICE_Init+0x68>)
 800be88:	f7ff fb88 	bl	800b59c <USBD_CDC_RegisterInterface>
 800be8c:	b9a0      	cbnz	r0, 800beb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800be8e:	4811      	ldr	r0, [pc, #68]	; (800bed4 <MX_USB_DEVICE_Init+0x68>)
 800be90:	f7ff fbd8 	bl	800b644 <USBD_Start>
 800be94:	b9b8      	cbnz	r0, 800bec6 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800be96:	bd08      	pop	{r3, pc}
    Error_Handler();
 800be98:	f7fa fdde 	bl	8006a58 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be9c:	490e      	ldr	r1, [pc, #56]	; (800bed8 <MX_USB_DEVICE_Init+0x6c>)
 800be9e:	480d      	ldr	r0, [pc, #52]	; (800bed4 <MX_USB_DEVICE_Init+0x68>)
 800bea0:	f7ff fbc8 	bl	800b634 <USBD_RegisterClass>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	d0ed      	beq.n	800be84 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800bea8:	f7fa fdd6 	bl	8006a58 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800beac:	490b      	ldr	r1, [pc, #44]	; (800bedc <MX_USB_DEVICE_Init+0x70>)
 800beae:	4809      	ldr	r0, [pc, #36]	; (800bed4 <MX_USB_DEVICE_Init+0x68>)
 800beb0:	f7ff fb74 	bl	800b59c <USBD_CDC_RegisterInterface>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d0ea      	beq.n	800be8e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800beb8:	f7fa fdce 	bl	8006a58 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bebc:	4805      	ldr	r0, [pc, #20]	; (800bed4 <MX_USB_DEVICE_Init+0x68>)
 800bebe:	f7ff fbc1 	bl	800b644 <USBD_Start>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d0e7      	beq.n	800be96 <MX_USB_DEVICE_Init+0x2a>
}
 800bec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800beca:	f7fa bdc5 	b.w	8006a58 <Error_Handler>
 800bece:	bf00      	nop
 800bed0:	20000140 	.word	0x20000140
 800bed4:	2000083c 	.word	0x2000083c
 800bed8:	20000020 	.word	0x20000020
 800bedc:	20000130 	.word	0x20000130

0800bee0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800bee0:	2000      	movs	r0, #0
 800bee2:	4770      	bx	lr

0800bee4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800bee4:	2000      	movs	r0, #0
 800bee6:	4770      	bx	lr

0800bee8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beea:	4604      	mov	r4, r0
 800beec:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800beee:	4f0f      	ldr	r7, [pc, #60]	; (800bf2c <CDC_Receive_FS+0x44>)
 800bef0:	4621      	mov	r1, r4
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);

	memset (usbbuffer, '\0', 128);  // clear the buffer
 800bef2:	4e0f      	ldr	r6, [pc, #60]	; (800bf30 <CDC_Receive_FS+0x48>)
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bef4:	4638      	mov	r0, r7
 800bef6:	f7ff fb63 	bl	800b5c0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800befa:	4638      	mov	r0, r7
 800befc:	f7ff fb68 	bl	800b5d0 <USBD_CDC_ReceivePacket>
	memset (usbbuffer, '\0', 128);  // clear the buffer
 800bf00:	2280      	movs	r2, #128	; 0x80
 800bf02:	2100      	movs	r1, #0
 800bf04:	4630      	mov	r0, r6
 800bf06:	f000 fa79 	bl	800c3fc <memset>
	uint8_t len = (uint8_t)*Len;
	memcpy(usbbuffer, Buf, len);  // copy the data to the buffer
 800bf0a:	782d      	ldrb	r5, [r5, #0]
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	462a      	mov	r2, r5
 800bf10:	4630      	mov	r0, r6
 800bf12:	f000 fa65 	bl	800c3e0 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800bf16:	462a      	mov	r2, r5
 800bf18:	2100      	movs	r1, #0
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f000 fa6e 	bl	800c3fc <memset>

	HAL_EXTI_GenerateSWI(&hexti1);
 800bf20:	4804      	ldr	r0, [pc, #16]	; (800bf34 <CDC_Receive_FS+0x4c>)
 800bf22:	f7fb ff7b 	bl	8007e1c <HAL_EXTI_GenerateSWI>

	return (USBD_OK);
  /* USER CODE END 6 */
}
 800bf26:	2000      	movs	r0, #0
 800bf28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	2000083c 	.word	0x2000083c
 800bf30:	200007a0 	.word	0x200007a0
 800bf34:	200004e4 	.word	0x200004e4

0800bf38 <CDC_Init_FS>:
{
 800bf38:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bf3a:	4c06      	ldr	r4, [pc, #24]	; (800bf54 <CDC_Init_FS+0x1c>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	4620      	mov	r0, r4
 800bf40:	4905      	ldr	r1, [pc, #20]	; (800bf58 <CDC_Init_FS+0x20>)
 800bf42:	f7ff fb33 	bl	800b5ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf46:	4620      	mov	r0, r4
 800bf48:	4904      	ldr	r1, [pc, #16]	; (800bf5c <CDC_Init_FS+0x24>)
 800bf4a:	f7ff fb39 	bl	800b5c0 <USBD_CDC_SetRxBuffer>
}
 800bf4e:	2000      	movs	r0, #0
 800bf50:	bd10      	pop	{r4, pc}
 800bf52:	bf00      	nop
 800bf54:	2000083c 	.word	0x2000083c
 800bf58:	20000ec0 	.word	0x20000ec0
 800bf5c:	20000ad8 	.word	0x20000ad8

0800bf60 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bf60:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800bf62:	4801      	ldr	r0, [pc, #4]	; (800bf68 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800bf64:	800b      	strh	r3, [r1, #0]
}
 800bf66:	4770      	bx	lr
 800bf68:	2000015c 	.word	0x2000015c

0800bf6c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bf6c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800bf6e:	4801      	ldr	r0, [pc, #4]	; (800bf74 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800bf70:	800b      	strh	r3, [r1, #0]
}
 800bf72:	4770      	bx	lr
 800bf74:	20000170 	.word	0x20000170

0800bf78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf78:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf7a:	4c04      	ldr	r4, [pc, #16]	; (800bf8c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800bf7c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf7e:	4804      	ldr	r0, [pc, #16]	; (800bf90 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800bf80:	4621      	mov	r1, r4
 800bf82:	f7ff ff01 	bl	800bd88 <USBD_GetString>
  return USBD_StrDesc;
}
 800bf86:	4620      	mov	r0, r4
 800bf88:	bd10      	pop	{r4, pc}
 800bf8a:	bf00      	nop
 800bf8c:	200012a8 	.word	0x200012a8
 800bf90:	0800f2fc 	.word	0x0800f2fc

0800bf94 <USBD_FS_ProductStrDescriptor>:
{
 800bf94:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf96:	4c04      	ldr	r4, [pc, #16]	; (800bfa8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800bf98:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf9a:	4804      	ldr	r0, [pc, #16]	; (800bfac <USBD_FS_ProductStrDescriptor+0x18>)
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	f7ff fef3 	bl	800bd88 <USBD_GetString>
}
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	bd10      	pop	{r4, pc}
 800bfa6:	bf00      	nop
 800bfa8:	200012a8 	.word	0x200012a8
 800bfac:	0800f310 	.word	0x0800f310

0800bfb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfb0:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bfb2:	4c04      	ldr	r4, [pc, #16]	; (800bfc4 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800bfb4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bfb6:	4804      	ldr	r0, [pc, #16]	; (800bfc8 <USBD_FS_ConfigStrDescriptor+0x18>)
 800bfb8:	4621      	mov	r1, r4
 800bfba:	f7ff fee5 	bl	800bd88 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	bd10      	pop	{r4, pc}
 800bfc2:	bf00      	nop
 800bfc4:	200012a8 	.word	0x200012a8
 800bfc8:	0800f328 	.word	0x0800f328

0800bfcc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfcc:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfce:	4c04      	ldr	r4, [pc, #16]	; (800bfe0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800bfd0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfd2:	4804      	ldr	r0, [pc, #16]	; (800bfe4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	f7ff fed7 	bl	800bd88 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800bfda:	4620      	mov	r0, r4
 800bfdc:	bd10      	pop	{r4, pc}
 800bfde:	bf00      	nop
 800bfe0:	200012a8 	.word	0x200012a8
 800bfe4:	0800f334 	.word	0x0800f334

0800bfe8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800bfe8:	f04f 0c1a 	mov.w	ip, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfec:	4a42      	ldr	r2, [pc, #264]	; (800c0f8 <USBD_FS_SerialStrDescriptor+0x110>)
 800bfee:	6d10      	ldr	r0, [r2, #80]	; 0x50
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800bff0:	6d93      	ldr	r3, [r2, #88]	; 0x58
  *length = USB_SIZ_STRING_SERIAL;
 800bff2:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800bff6:	18c3      	adds	r3, r0, r3
 800bff8:	d101      	bne.n	800bffe <USBD_FS_SerialStrDescriptor+0x16>
}
 800bffa:	4840      	ldr	r0, [pc, #256]	; (800c0fc <USBD_FS_SerialStrDescriptor+0x114>)
 800bffc:	4770      	bx	lr
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800bffe:	f04f 0c00 	mov.w	ip, #0
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c002:	6d51      	ldr	r1, [r2, #84]	; 0x54
    if (((value >> 28)) < 0xA)
 800c004:	0f18      	lsrs	r0, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800c006:	4a3d      	ldr	r2, [pc, #244]	; (800c0fc <USBD_FS_SerialStrDescriptor+0x114>)
    if (((value >> 28)) < 0xA)
 800c008:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c00c:	bf2c      	ite	cs
 800c00e:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c010:	3030      	addcc	r0, #48	; 0x30
 800c012:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800c014:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800c018:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c01a:	bf8c      	ite	hi
 800c01c:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c01e:	3030      	addls	r0, #48	; 0x30
 800c020:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800c022:	f3c3 5003 	ubfx	r0, r3, #20, #4
 800c026:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c028:	bf8c      	ite	hi
 800c02a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c02c:	3030      	addls	r0, #48	; 0x30
 800c02e:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800c030:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800c034:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c036:	bf8c      	ite	hi
 800c038:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c03a:	3030      	addls	r0, #48	; 0x30
 800c03c:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800c03e:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800c042:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c044:	bf8c      	ite	hi
 800c046:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c048:	3030      	addls	r0, #48	; 0x30
 800c04a:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800c04c:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800c050:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c052:	bf8c      	ite	hi
 800c054:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c056:	3030      	addls	r0, #48	; 0x30
 800c058:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800c05a:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800c05e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c060:	bf8c      	ite	hi
 800c062:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c064:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800c066:	f882 c003 	strb.w	ip, [r2, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 800c06a:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800c06c:	f04f 0c00 	mov.w	ip, #0
 800c070:	2000      	movs	r0, #0
 800c072:	f882 c005 	strb.w	ip, [r2, #5]
 800c076:	73d0      	strb	r0, [r2, #15]
 800c078:	f04f 0c00 	mov.w	ip, #0
 800c07c:	2000      	movs	r0, #0
 800c07e:	f882 c007 	strb.w	ip, [r2, #7]
 800c082:	7450      	strb	r0, [r2, #17]
 800c084:	f04f 0c00 	mov.w	ip, #0
 800c088:	2000      	movs	r0, #0
 800c08a:	f882 c009 	strb.w	ip, [r2, #9]
 800c08e:	74d0      	strb	r0, [r2, #19]
 800c090:	f04f 0c00 	mov.w	ip, #0
 800c094:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800c096:	f003 030f 	and.w	r3, r3, #15
 800c09a:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800c09c:	bf94      	ite	ls
 800c09e:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0a0:	3337      	addhi	r3, #55	; 0x37
 800c0a2:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800c0a4:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 800c0a8:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0ac:	bf2c      	ite	cs
 800c0ae:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c0b0:	3330      	addcc	r3, #48	; 0x30
 800c0b2:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800c0b4:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800c0b8:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0ba:	bf8c      	ite	hi
 800c0bc:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c0be:	3330      	addls	r3, #48	; 0x30
 800c0c0:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800c0c2:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800c0c6:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0c8:	bf8c      	ite	hi
 800c0ca:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c0cc:	3330      	addls	r3, #48	; 0x30
 800c0ce:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800c0d0:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800c0d4:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800c0d6:	bf94      	ite	ls
 800c0d8:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0da:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 800c0dc:	f882 c00b 	strb.w	ip, [r2, #11]
 800c0e0:	7550      	strb	r0, [r2, #21]
 800c0e2:	f04f 0c00 	mov.w	ip, #0
 800c0e6:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0e8:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	75d0      	strb	r0, [r2, #23]
 800c0ee:	f882 c00d 	strb.w	ip, [r2, #13]
}
 800c0f2:	4802      	ldr	r0, [pc, #8]	; (800c0fc <USBD_FS_SerialStrDescriptor+0x114>)
    pbuf[2 * idx + 1] = 0;
 800c0f4:	7653      	strb	r3, [r2, #25]
}
 800c0f6:	4770      	bx	lr
 800c0f8:	1ff80000 	.word	0x1ff80000
 800c0fc:	20000174 	.word	0x20000174

0800c100 <HAL_PCDEx_SetConnectionState>:
{
  /* USER CODE BEGIN 6 */
  if (state == 1)
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800c100:	4a04      	ldr	r2, [pc, #16]	; (800c114 <HAL_PCDEx_SetConnectionState+0x14>)
  if (state == 1)
 800c102:	2901      	cmp	r1, #1
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800c104:	6853      	ldr	r3, [r2, #4]
 800c106:	bf0c      	ite	eq
 800c108:	f043 0301 	orreq.w	r3, r3, #1
  }
  else
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800c10c:	f023 0301 	bicne.w	r3, r3, #1
 800c110:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END 6 */
}
 800c112:	4770      	bx	lr
 800c114:	40010000 	.word	0x40010000

0800c118 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 800c118:	4b0e      	ldr	r3, [pc, #56]	; (800c154 <HAL_PCD_MspInit+0x3c>)
 800c11a:	6802      	ldr	r2, [r0, #0]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d000      	beq.n	800c122 <HAL_PCD_MspInit+0xa>
 800c120:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c122:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 800c126:	6a59      	ldr	r1, [r3, #36]	; 0x24
{
 800c128:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 800c12a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800c12e:	6259      	str	r1, [r3, #36]	; 0x24
 800c130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 800c132:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800c134:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c138:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 2, 0);
 800c13a:	2014      	movs	r0, #20
 800c13c:	2200      	movs	r2, #0
 800c13e:	2102      	movs	r1, #2
    __HAL_RCC_USB_CLK_ENABLE();
 800c140:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 2, 0);
 800c142:	f7fb fbc3 	bl	80078cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c146:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c148:	b003      	add	sp, #12
 800c14a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c14e:	f7fb bbfb 	b.w	8007948 <HAL_NVIC_EnableIRQ>
 800c152:	bf00      	nop
 800c154:	40005c00 	.word	0x40005c00

0800c158 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c158:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c15a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c15e:	f501 712c 	add.w	r1, r1, #688	; 0x2b0
 800c162:	f7ff ba87 	b.w	800b674 <USBD_LL_SetupStage>
 800c166:	bf00      	nop

0800c168 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c168:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c16c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c170:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800c174:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c178:	f7ff baac 	b.w	800b6d4 <USBD_LL_DataOutStage>

0800c17c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c17c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c180:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c186:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c18a:	f7ff bae1 	b.w	800b750 <USBD_LL_DataInStage>
 800c18e:	bf00      	nop

0800c190 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c190:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c194:	f7ff bb80 	b.w	800b898 <USBD_LL_SOF>

0800c198 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c198:	6883      	ldr	r3, [r0, #8]
{
 800c19a:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c19c:	2b02      	cmp	r3, #2
{
 800c19e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c1a0:	d001      	beq.n	800c1a6 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800c1a2:	f7fa fc59 	bl	8006a58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1a6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800c1aa:	2101      	movs	r1, #1
 800c1ac:	f7ff fb5e 	bl	800b86c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1b0:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800c1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1b8:	f7ff bb30 	b.w	800b81c <USBD_LL_Reset>

0800c1bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1bc:	b510      	push	{r4, lr}
 800c1be:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1c0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c1c4:	f7ff fb56 	bl	800b874 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1c8:	69a3      	ldr	r3, [r4, #24]
 800c1ca:	b123      	cbz	r3, 800c1d6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1cc:	4a02      	ldr	r2, [pc, #8]	; (800c1d8 <HAL_PCD_SuspendCallback+0x1c>)
 800c1ce:	6913      	ldr	r3, [r2, #16]
 800c1d0:	f043 0306 	orr.w	r3, r3, #6
 800c1d4:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1d6:	bd10      	pop	{r4, pc}
 800c1d8:	e000ed00 	.word	0xe000ed00

0800c1dc <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1dc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c1e0:	f7ff bb52 	b.w	800b888 <USBD_LL_Resume>

0800c1e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1e4:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c1e6:	2408      	movs	r4, #8
  hpcd_USB_FS.pData = pdev;
 800c1e8:	4b1e      	ldr	r3, [pc, #120]	; (800c264 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c1ea:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c1ec:	605c      	str	r4, [r3, #4]
{
 800c1ee:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c1f0:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c1f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c1f4:	621a      	str	r2, [r3, #32]
  hpcd_USB_FS.Instance = USB;
 800c1f6:	4a1c      	ldr	r2, [pc, #112]	; (800c268 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 800c1f8:	f8c3 42e8 	str.w	r4, [r3, #744]	; 0x2e8
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c1fc:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 800c1fe:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c202:	6099      	str	r1, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c204:	6119      	str	r1, [r3, #16]
  hpcd_USB_FS.Instance = USB;
 800c206:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c208:	f7fc fa0c 	bl	8008624 <HAL_PCD_Init>
 800c20c:	bb30      	cbnz	r0, 800c25c <USBD_LL_Init+0x78>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c20e:	2200      	movs	r2, #0
 800c210:	2318      	movs	r3, #24
 800c212:	4611      	mov	r1, r2
 800c214:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c218:	f7fd f904 	bl	8009424 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c21c:	2358      	movs	r3, #88	; 0x58
 800c21e:	2200      	movs	r2, #0
 800c220:	2180      	movs	r1, #128	; 0x80
 800c222:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c226:	f7fd f8fd 	bl	8009424 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c22a:	23c0      	movs	r3, #192	; 0xc0
 800c22c:	2200      	movs	r2, #0
 800c22e:	2181      	movs	r1, #129	; 0x81
 800c230:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c234:	f7fd f8f6 	bl	8009424 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c238:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c23c:	2200      	movs	r2, #0
 800c23e:	2101      	movs	r1, #1
 800c240:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c244:	f7fd f8ee 	bl	8009424 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c24c:	2200      	movs	r2, #0
 800c24e:	2182      	movs	r1, #130	; 0x82
 800c250:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c254:	f7fd f8e6 	bl	8009424 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800c258:	2000      	movs	r0, #0
 800c25a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800c25c:	f7fa fbfc 	bl	8006a58 <Error_Handler>
 800c260:	e7d5      	b.n	800c20e <USBD_LL_Init+0x2a>
 800c262:	bf00      	nop
 800c264:	200014a8 	.word	0x200014a8
 800c268:	40005c00 	.word	0x40005c00

0800c26c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c26c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800c26e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c272:	f7fc fa39 	bl	80086e8 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800c276:	2803      	cmp	r0, #3
 800c278:	bf96      	itet	ls
 800c27a:	4b02      	ldrls	r3, [pc, #8]	; (800c284 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 800c27c:	2002      	movhi	r0, #2
 800c27e:	5c18      	ldrbls	r0, [r3, r0]
}
 800c280:	bd08      	pop	{r3, pc}
 800c282:	bf00      	nop
 800c284:	0800f344 	.word	0x0800f344

0800c288 <USBD_LL_OpenEP>:
{
 800c288:	4694      	mov	ip, r2
 800c28a:	b508      	push	{r3, lr}
 800c28c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c28e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c292:	4663      	mov	r3, ip
 800c294:	f7fc ff9c 	bl	80091d0 <HAL_PCD_EP_Open>
  switch (hal_status)
 800c298:	2803      	cmp	r0, #3
 800c29a:	bf96      	itet	ls
 800c29c:	4b01      	ldrls	r3, [pc, #4]	; (800c2a4 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c29e:	2002      	movhi	r0, #2
 800c2a0:	5c18      	ldrbls	r0, [r3, r0]
}
 800c2a2:	bd08      	pop	{r3, pc}
 800c2a4:	0800f344 	.word	0x0800f344

0800c2a8 <USBD_LL_CloseEP>:
{
 800c2a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2aa:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c2ae:	f7fc ffcd 	bl	800924c <HAL_PCD_EP_Close>
  switch (hal_status)
 800c2b2:	2803      	cmp	r0, #3
 800c2b4:	bf96      	itet	ls
 800c2b6:	4b02      	ldrls	r3, [pc, #8]	; (800c2c0 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2b8:	2002      	movhi	r0, #2
 800c2ba:	5c18      	ldrbls	r0, [r3, r0]
}
 800c2bc:	bd08      	pop	{r3, pc}
 800c2be:	bf00      	nop
 800c2c0:	0800f344 	.word	0x0800f344

0800c2c4 <USBD_LL_StallEP>:
{
 800c2c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2c6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c2ca:	f7fd f837 	bl	800933c <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800c2ce:	2803      	cmp	r0, #3
 800c2d0:	bf96      	itet	ls
 800c2d2:	4b02      	ldrls	r3, [pc, #8]	; (800c2dc <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2d4:	2002      	movhi	r0, #2
 800c2d6:	5c18      	ldrbls	r0, [r3, r0]
}
 800c2d8:	bd08      	pop	{r3, pc}
 800c2da:	bf00      	nop
 800c2dc:	0800f344 	.word	0x0800f344

0800c2e0 <USBD_LL_ClearStallEP>:
{
 800c2e0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2e2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c2e6:	f7fd f861 	bl	80093ac <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800c2ea:	2803      	cmp	r0, #3
 800c2ec:	bf96      	itet	ls
 800c2ee:	4b02      	ldrls	r3, [pc, #8]	; (800c2f8 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2f0:	2002      	movhi	r0, #2
 800c2f2:	5c18      	ldrbls	r0, [r3, r0]
}
 800c2f4:	bd08      	pop	{r3, pc}
 800c2f6:	bf00      	nop
 800c2f8:	0800f344 	.word	0x0800f344

0800c2fc <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800c2fc:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2fe:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 800c302:	d406      	bmi.n	800c312 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c304:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c308:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c30c:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800c310:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c312:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800c316:	3101      	adds	r1, #1
 800c318:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c31c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c320:	7888      	ldrb	r0, [r1, #2]
 800c322:	4770      	bx	lr

0800c324 <USBD_LL_SetUSBAddress>:
{
 800c324:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c326:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c32a:	f7fc ff3b 	bl	80091a4 <HAL_PCD_SetAddress>
  switch (hal_status)
 800c32e:	2803      	cmp	r0, #3
 800c330:	bf96      	itet	ls
 800c332:	4b02      	ldrls	r3, [pc, #8]	; (800c33c <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c334:	2002      	movhi	r0, #2
 800c336:	5c18      	ldrbls	r0, [r3, r0]
}
 800c338:	bd08      	pop	{r3, pc}
 800c33a:	bf00      	nop
 800c33c:	0800f344 	.word	0x0800f344

0800c340 <USBD_LL_Transmit>:
{
 800c340:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c342:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c346:	f7fc ffd5 	bl	80092f4 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800c34a:	2803      	cmp	r0, #3
 800c34c:	bf96      	itet	ls
 800c34e:	4b02      	ldrls	r3, [pc, #8]	; (800c358 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c350:	2002      	movhi	r0, #2
 800c352:	5c18      	ldrbls	r0, [r3, r0]
}
 800c354:	bd08      	pop	{r3, pc}
 800c356:	bf00      	nop
 800c358:	0800f344 	.word	0x0800f344

0800c35c <USBD_LL_PrepareReceive>:
{
 800c35c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c35e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c362:	f7fc ffa5 	bl	80092b0 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800c366:	2803      	cmp	r0, #3
 800c368:	bf96      	itet	ls
 800c36a:	4b02      	ldrls	r3, [pc, #8]	; (800c374 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c36c:	2002      	movhi	r0, #2
 800c36e:	5c18      	ldrbls	r0, [r3, r0]
}
 800c370:	bd08      	pop	{r3, pc}
 800c372:	bf00      	nop
 800c374:	0800f344 	.word	0x0800f344

0800c378 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c378:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c37c:	f7fc bfb0 	b.w	80092e0 <HAL_PCD_EP_GetRxCount>

0800c380 <USBD_static_malloc>:
}
 800c380:	4800      	ldr	r0, [pc, #0]	; (800c384 <USBD_static_malloc+0x4>)
 800c382:	4770      	bx	lr
 800c384:	20001794 	.word	0x20001794

0800c388 <USBD_static_free>:
}
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop

0800c38c <__errno>:
 800c38c:	4b01      	ldr	r3, [pc, #4]	; (800c394 <__errno+0x8>)
 800c38e:	6818      	ldr	r0, [r3, #0]
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	20000190 	.word	0x20000190

0800c398 <__libc_init_array>:
 800c398:	b570      	push	{r4, r5, r6, lr}
 800c39a:	2600      	movs	r6, #0
 800c39c:	4d0c      	ldr	r5, [pc, #48]	; (800c3d0 <__libc_init_array+0x38>)
 800c39e:	4c0d      	ldr	r4, [pc, #52]	; (800c3d4 <__libc_init_array+0x3c>)
 800c3a0:	1b64      	subs	r4, r4, r5
 800c3a2:	10a4      	asrs	r4, r4, #2
 800c3a4:	42a6      	cmp	r6, r4
 800c3a6:	d109      	bne.n	800c3bc <__libc_init_array+0x24>
 800c3a8:	f002 ff10 	bl	800f1cc <_init>
 800c3ac:	2600      	movs	r6, #0
 800c3ae:	4d0a      	ldr	r5, [pc, #40]	; (800c3d8 <__libc_init_array+0x40>)
 800c3b0:	4c0a      	ldr	r4, [pc, #40]	; (800c3dc <__libc_init_array+0x44>)
 800c3b2:	1b64      	subs	r4, r4, r5
 800c3b4:	10a4      	asrs	r4, r4, #2
 800c3b6:	42a6      	cmp	r6, r4
 800c3b8:	d105      	bne.n	800c3c6 <__libc_init_array+0x2e>
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}
 800c3bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3c0:	4798      	blx	r3
 800c3c2:	3601      	adds	r6, #1
 800c3c4:	e7ee      	b.n	800c3a4 <__libc_init_array+0xc>
 800c3c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3ca:	4798      	blx	r3
 800c3cc:	3601      	adds	r6, #1
 800c3ce:	e7f2      	b.n	800c3b6 <__libc_init_array+0x1e>
 800c3d0:	0800f72c 	.word	0x0800f72c
 800c3d4:	0800f72c 	.word	0x0800f72c
 800c3d8:	0800f72c 	.word	0x0800f72c
 800c3dc:	0800f730 	.word	0x0800f730

0800c3e0 <memcpy>:
 800c3e0:	440a      	add	r2, r1
 800c3e2:	4291      	cmp	r1, r2
 800c3e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3e8:	d100      	bne.n	800c3ec <memcpy+0xc>
 800c3ea:	4770      	bx	lr
 800c3ec:	b510      	push	{r4, lr}
 800c3ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3f2:	4291      	cmp	r1, r2
 800c3f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3f8:	d1f9      	bne.n	800c3ee <memcpy+0xe>
 800c3fa:	bd10      	pop	{r4, pc}

0800c3fc <memset>:
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	4402      	add	r2, r0
 800c400:	4293      	cmp	r3, r2
 800c402:	d100      	bne.n	800c406 <memset+0xa>
 800c404:	4770      	bx	lr
 800c406:	f803 1b01 	strb.w	r1, [r3], #1
 800c40a:	e7f9      	b.n	800c400 <memset+0x4>

0800c40c <__cvt>:
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c412:	461f      	mov	r7, r3
 800c414:	bfbb      	ittet	lt
 800c416:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800c41a:	461f      	movlt	r7, r3
 800c41c:	2300      	movge	r3, #0
 800c41e:	232d      	movlt	r3, #45	; 0x2d
 800c420:	b088      	sub	sp, #32
 800c422:	4614      	mov	r4, r2
 800c424:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c426:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c428:	7013      	strb	r3, [r2, #0]
 800c42a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c42c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800c430:	f023 0820 	bic.w	r8, r3, #32
 800c434:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c438:	d005      	beq.n	800c446 <__cvt+0x3a>
 800c43a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c43e:	d100      	bne.n	800c442 <__cvt+0x36>
 800c440:	3501      	adds	r5, #1
 800c442:	2302      	movs	r3, #2
 800c444:	e000      	b.n	800c448 <__cvt+0x3c>
 800c446:	2303      	movs	r3, #3
 800c448:	aa07      	add	r2, sp, #28
 800c44a:	9204      	str	r2, [sp, #16]
 800c44c:	aa06      	add	r2, sp, #24
 800c44e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c452:	e9cd 3500 	strd	r3, r5, [sp]
 800c456:	4622      	mov	r2, r4
 800c458:	463b      	mov	r3, r7
 800c45a:	f000 fcf9 	bl	800ce50 <_dtoa_r>
 800c45e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c462:	4606      	mov	r6, r0
 800c464:	d102      	bne.n	800c46c <__cvt+0x60>
 800c466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c468:	07db      	lsls	r3, r3, #31
 800c46a:	d522      	bpl.n	800c4b2 <__cvt+0xa6>
 800c46c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c470:	eb06 0905 	add.w	r9, r6, r5
 800c474:	d110      	bne.n	800c498 <__cvt+0x8c>
 800c476:	7833      	ldrb	r3, [r6, #0]
 800c478:	2b30      	cmp	r3, #48	; 0x30
 800c47a:	d10a      	bne.n	800c492 <__cvt+0x86>
 800c47c:	2200      	movs	r2, #0
 800c47e:	2300      	movs	r3, #0
 800c480:	4620      	mov	r0, r4
 800c482:	4639      	mov	r1, r7
 800c484:	f7f4 faa8 	bl	80009d8 <__aeabi_dcmpeq>
 800c488:	b918      	cbnz	r0, 800c492 <__cvt+0x86>
 800c48a:	f1c5 0501 	rsb	r5, r5, #1
 800c48e:	f8ca 5000 	str.w	r5, [sl]
 800c492:	f8da 3000 	ldr.w	r3, [sl]
 800c496:	4499      	add	r9, r3
 800c498:	2200      	movs	r2, #0
 800c49a:	2300      	movs	r3, #0
 800c49c:	4620      	mov	r0, r4
 800c49e:	4639      	mov	r1, r7
 800c4a0:	f7f4 fa9a 	bl	80009d8 <__aeabi_dcmpeq>
 800c4a4:	b108      	cbz	r0, 800c4aa <__cvt+0x9e>
 800c4a6:	f8cd 901c 	str.w	r9, [sp, #28]
 800c4aa:	2230      	movs	r2, #48	; 0x30
 800c4ac:	9b07      	ldr	r3, [sp, #28]
 800c4ae:	454b      	cmp	r3, r9
 800c4b0:	d307      	bcc.n	800c4c2 <__cvt+0xb6>
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	9b07      	ldr	r3, [sp, #28]
 800c4b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c4b8:	1b9b      	subs	r3, r3, r6
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	b008      	add	sp, #32
 800c4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c2:	1c59      	adds	r1, r3, #1
 800c4c4:	9107      	str	r1, [sp, #28]
 800c4c6:	701a      	strb	r2, [r3, #0]
 800c4c8:	e7f0      	b.n	800c4ac <__cvt+0xa0>

0800c4ca <__exponent>:
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4ce:	2900      	cmp	r1, #0
 800c4d0:	f803 2b02 	strb.w	r2, [r3], #2
 800c4d4:	bfb6      	itet	lt
 800c4d6:	222d      	movlt	r2, #45	; 0x2d
 800c4d8:	222b      	movge	r2, #43	; 0x2b
 800c4da:	4249      	neglt	r1, r1
 800c4dc:	2909      	cmp	r1, #9
 800c4de:	7042      	strb	r2, [r0, #1]
 800c4e0:	dd2b      	ble.n	800c53a <__exponent+0x70>
 800c4e2:	f10d 0407 	add.w	r4, sp, #7
 800c4e6:	46a4      	mov	ip, r4
 800c4e8:	270a      	movs	r7, #10
 800c4ea:	fb91 f6f7 	sdiv	r6, r1, r7
 800c4ee:	460a      	mov	r2, r1
 800c4f0:	46a6      	mov	lr, r4
 800c4f2:	fb07 1516 	mls	r5, r7, r6, r1
 800c4f6:	2a63      	cmp	r2, #99	; 0x63
 800c4f8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800c4fc:	4631      	mov	r1, r6
 800c4fe:	f104 34ff 	add.w	r4, r4, #4294967295
 800c502:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c506:	dcf0      	bgt.n	800c4ea <__exponent+0x20>
 800c508:	3130      	adds	r1, #48	; 0x30
 800c50a:	f1ae 0502 	sub.w	r5, lr, #2
 800c50e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c512:	4629      	mov	r1, r5
 800c514:	1c44      	adds	r4, r0, #1
 800c516:	4561      	cmp	r1, ip
 800c518:	d30a      	bcc.n	800c530 <__exponent+0x66>
 800c51a:	f10d 0209 	add.w	r2, sp, #9
 800c51e:	eba2 020e 	sub.w	r2, r2, lr
 800c522:	4565      	cmp	r5, ip
 800c524:	bf88      	it	hi
 800c526:	2200      	movhi	r2, #0
 800c528:	4413      	add	r3, r2
 800c52a:	1a18      	subs	r0, r3, r0
 800c52c:	b003      	add	sp, #12
 800c52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c530:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c534:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c538:	e7ed      	b.n	800c516 <__exponent+0x4c>
 800c53a:	2330      	movs	r3, #48	; 0x30
 800c53c:	3130      	adds	r1, #48	; 0x30
 800c53e:	7083      	strb	r3, [r0, #2]
 800c540:	70c1      	strb	r1, [r0, #3]
 800c542:	1d03      	adds	r3, r0, #4
 800c544:	e7f1      	b.n	800c52a <__exponent+0x60>
	...

0800c548 <_printf_float>:
 800c548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54c:	b091      	sub	sp, #68	; 0x44
 800c54e:	460c      	mov	r4, r1
 800c550:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c554:	4616      	mov	r6, r2
 800c556:	461f      	mov	r7, r3
 800c558:	4605      	mov	r5, r0
 800c55a:	f001 fa67 	bl	800da2c <_localeconv_r>
 800c55e:	6803      	ldr	r3, [r0, #0]
 800c560:	4618      	mov	r0, r3
 800c562:	9309      	str	r3, [sp, #36]	; 0x24
 800c564:	f7f3 fe0c 	bl	8000180 <strlen>
 800c568:	2300      	movs	r3, #0
 800c56a:	930e      	str	r3, [sp, #56]	; 0x38
 800c56c:	f8d8 3000 	ldr.w	r3, [r8]
 800c570:	900a      	str	r0, [sp, #40]	; 0x28
 800c572:	3307      	adds	r3, #7
 800c574:	f023 0307 	bic.w	r3, r3, #7
 800c578:	f103 0208 	add.w	r2, r3, #8
 800c57c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c580:	f8d4 b000 	ldr.w	fp, [r4]
 800c584:	f8c8 2000 	str.w	r2, [r8]
 800c588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c590:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800c594:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c598:	930b      	str	r3, [sp, #44]	; 0x2c
 800c59a:	f04f 32ff 	mov.w	r2, #4294967295
 800c59e:	4640      	mov	r0, r8
 800c5a0:	4b9c      	ldr	r3, [pc, #624]	; (800c814 <_printf_float+0x2cc>)
 800c5a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c5a4:	f7f4 fa4a 	bl	8000a3c <__aeabi_dcmpun>
 800c5a8:	bb70      	cbnz	r0, 800c608 <_printf_float+0xc0>
 800c5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ae:	4640      	mov	r0, r8
 800c5b0:	4b98      	ldr	r3, [pc, #608]	; (800c814 <_printf_float+0x2cc>)
 800c5b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c5b4:	f7f4 fa24 	bl	8000a00 <__aeabi_dcmple>
 800c5b8:	bb30      	cbnz	r0, 800c608 <_printf_float+0xc0>
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	2300      	movs	r3, #0
 800c5be:	4640      	mov	r0, r8
 800c5c0:	4651      	mov	r1, sl
 800c5c2:	f7f4 fa13 	bl	80009ec <__aeabi_dcmplt>
 800c5c6:	b110      	cbz	r0, 800c5ce <_printf_float+0x86>
 800c5c8:	232d      	movs	r3, #45	; 0x2d
 800c5ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5ce:	4b92      	ldr	r3, [pc, #584]	; (800c818 <_printf_float+0x2d0>)
 800c5d0:	4892      	ldr	r0, [pc, #584]	; (800c81c <_printf_float+0x2d4>)
 800c5d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c5d6:	bf94      	ite	ls
 800c5d8:	4698      	movls	r8, r3
 800c5da:	4680      	movhi	r8, r0
 800c5dc:	2303      	movs	r3, #3
 800c5de:	f04f 0a00 	mov.w	sl, #0
 800c5e2:	6123      	str	r3, [r4, #16]
 800c5e4:	f02b 0304 	bic.w	r3, fp, #4
 800c5e8:	6023      	str	r3, [r4, #0]
 800c5ea:	4633      	mov	r3, r6
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	9700      	str	r7, [sp, #0]
 800c5f2:	aa0f      	add	r2, sp, #60	; 0x3c
 800c5f4:	f000 f9d4 	bl	800c9a0 <_printf_common>
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	f040 8090 	bne.w	800c71e <_printf_float+0x1d6>
 800c5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c602:	b011      	add	sp, #68	; 0x44
 800c604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c608:	4642      	mov	r2, r8
 800c60a:	4653      	mov	r3, sl
 800c60c:	4640      	mov	r0, r8
 800c60e:	4651      	mov	r1, sl
 800c610:	f7f4 fa14 	bl	8000a3c <__aeabi_dcmpun>
 800c614:	b148      	cbz	r0, 800c62a <_printf_float+0xe2>
 800c616:	f1ba 0f00 	cmp.w	sl, #0
 800c61a:	bfb8      	it	lt
 800c61c:	232d      	movlt	r3, #45	; 0x2d
 800c61e:	4880      	ldr	r0, [pc, #512]	; (800c820 <_printf_float+0x2d8>)
 800c620:	bfb8      	it	lt
 800c622:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c626:	4b7f      	ldr	r3, [pc, #508]	; (800c824 <_printf_float+0x2dc>)
 800c628:	e7d3      	b.n	800c5d2 <_printf_float+0x8a>
 800c62a:	6863      	ldr	r3, [r4, #4]
 800c62c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	d142      	bne.n	800c6ba <_printf_float+0x172>
 800c634:	2306      	movs	r3, #6
 800c636:	6063      	str	r3, [r4, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	9206      	str	r2, [sp, #24]
 800c63c:	aa0e      	add	r2, sp, #56	; 0x38
 800c63e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800c642:	aa0d      	add	r2, sp, #52	; 0x34
 800c644:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800c648:	9203      	str	r2, [sp, #12]
 800c64a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c64e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c652:	6023      	str	r3, [r4, #0]
 800c654:	6863      	ldr	r3, [r4, #4]
 800c656:	4642      	mov	r2, r8
 800c658:	9300      	str	r3, [sp, #0]
 800c65a:	4628      	mov	r0, r5
 800c65c:	4653      	mov	r3, sl
 800c65e:	910b      	str	r1, [sp, #44]	; 0x2c
 800c660:	f7ff fed4 	bl	800c40c <__cvt>
 800c664:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c666:	4680      	mov	r8, r0
 800c668:	2947      	cmp	r1, #71	; 0x47
 800c66a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c66c:	d108      	bne.n	800c680 <_printf_float+0x138>
 800c66e:	1cc8      	adds	r0, r1, #3
 800c670:	db02      	blt.n	800c678 <_printf_float+0x130>
 800c672:	6863      	ldr	r3, [r4, #4]
 800c674:	4299      	cmp	r1, r3
 800c676:	dd40      	ble.n	800c6fa <_printf_float+0x1b2>
 800c678:	f1a9 0902 	sub.w	r9, r9, #2
 800c67c:	fa5f f989 	uxtb.w	r9, r9
 800c680:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c684:	d81f      	bhi.n	800c6c6 <_printf_float+0x17e>
 800c686:	464a      	mov	r2, r9
 800c688:	3901      	subs	r1, #1
 800c68a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c68e:	910d      	str	r1, [sp, #52]	; 0x34
 800c690:	f7ff ff1b 	bl	800c4ca <__exponent>
 800c694:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c696:	4682      	mov	sl, r0
 800c698:	1813      	adds	r3, r2, r0
 800c69a:	2a01      	cmp	r2, #1
 800c69c:	6123      	str	r3, [r4, #16]
 800c69e:	dc02      	bgt.n	800c6a6 <_printf_float+0x15e>
 800c6a0:	6822      	ldr	r2, [r4, #0]
 800c6a2:	07d2      	lsls	r2, r2, #31
 800c6a4:	d501      	bpl.n	800c6aa <_printf_float+0x162>
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	6123      	str	r3, [r4, #16]
 800c6aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d09b      	beq.n	800c5ea <_printf_float+0xa2>
 800c6b2:	232d      	movs	r3, #45	; 0x2d
 800c6b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6b8:	e797      	b.n	800c5ea <_printf_float+0xa2>
 800c6ba:	2947      	cmp	r1, #71	; 0x47
 800c6bc:	d1bc      	bne.n	800c638 <_printf_float+0xf0>
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d1ba      	bne.n	800c638 <_printf_float+0xf0>
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e7b7      	b.n	800c636 <_printf_float+0xee>
 800c6c6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c6ca:	d118      	bne.n	800c6fe <_printf_float+0x1b6>
 800c6cc:	2900      	cmp	r1, #0
 800c6ce:	6863      	ldr	r3, [r4, #4]
 800c6d0:	dd0b      	ble.n	800c6ea <_printf_float+0x1a2>
 800c6d2:	6121      	str	r1, [r4, #16]
 800c6d4:	b913      	cbnz	r3, 800c6dc <_printf_float+0x194>
 800c6d6:	6822      	ldr	r2, [r4, #0]
 800c6d8:	07d0      	lsls	r0, r2, #31
 800c6da:	d502      	bpl.n	800c6e2 <_printf_float+0x19a>
 800c6dc:	3301      	adds	r3, #1
 800c6de:	440b      	add	r3, r1
 800c6e0:	6123      	str	r3, [r4, #16]
 800c6e2:	f04f 0a00 	mov.w	sl, #0
 800c6e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c6e8:	e7df      	b.n	800c6aa <_printf_float+0x162>
 800c6ea:	b913      	cbnz	r3, 800c6f2 <_printf_float+0x1aa>
 800c6ec:	6822      	ldr	r2, [r4, #0]
 800c6ee:	07d2      	lsls	r2, r2, #31
 800c6f0:	d501      	bpl.n	800c6f6 <_printf_float+0x1ae>
 800c6f2:	3302      	adds	r3, #2
 800c6f4:	e7f4      	b.n	800c6e0 <_printf_float+0x198>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e7f2      	b.n	800c6e0 <_printf_float+0x198>
 800c6fa:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c6fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c700:	4299      	cmp	r1, r3
 800c702:	db05      	blt.n	800c710 <_printf_float+0x1c8>
 800c704:	6823      	ldr	r3, [r4, #0]
 800c706:	6121      	str	r1, [r4, #16]
 800c708:	07d8      	lsls	r0, r3, #31
 800c70a:	d5ea      	bpl.n	800c6e2 <_printf_float+0x19a>
 800c70c:	1c4b      	adds	r3, r1, #1
 800c70e:	e7e7      	b.n	800c6e0 <_printf_float+0x198>
 800c710:	2900      	cmp	r1, #0
 800c712:	bfcc      	ite	gt
 800c714:	2201      	movgt	r2, #1
 800c716:	f1c1 0202 	rsble	r2, r1, #2
 800c71a:	4413      	add	r3, r2
 800c71c:	e7e0      	b.n	800c6e0 <_printf_float+0x198>
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	055a      	lsls	r2, r3, #21
 800c722:	d407      	bmi.n	800c734 <_printf_float+0x1ec>
 800c724:	6923      	ldr	r3, [r4, #16]
 800c726:	4642      	mov	r2, r8
 800c728:	4631      	mov	r1, r6
 800c72a:	4628      	mov	r0, r5
 800c72c:	47b8      	blx	r7
 800c72e:	3001      	adds	r0, #1
 800c730:	d12b      	bne.n	800c78a <_printf_float+0x242>
 800c732:	e764      	b.n	800c5fe <_printf_float+0xb6>
 800c734:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c738:	f240 80dd 	bls.w	800c8f6 <_printf_float+0x3ae>
 800c73c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c740:	2200      	movs	r2, #0
 800c742:	2300      	movs	r3, #0
 800c744:	f7f4 f948 	bl	80009d8 <__aeabi_dcmpeq>
 800c748:	2800      	cmp	r0, #0
 800c74a:	d033      	beq.n	800c7b4 <_printf_float+0x26c>
 800c74c:	2301      	movs	r3, #1
 800c74e:	4631      	mov	r1, r6
 800c750:	4628      	mov	r0, r5
 800c752:	4a35      	ldr	r2, [pc, #212]	; (800c828 <_printf_float+0x2e0>)
 800c754:	47b8      	blx	r7
 800c756:	3001      	adds	r0, #1
 800c758:	f43f af51 	beq.w	800c5fe <_printf_float+0xb6>
 800c75c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c760:	429a      	cmp	r2, r3
 800c762:	db02      	blt.n	800c76a <_printf_float+0x222>
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	07d8      	lsls	r0, r3, #31
 800c768:	d50f      	bpl.n	800c78a <_printf_float+0x242>
 800c76a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c76e:	4631      	mov	r1, r6
 800c770:	4628      	mov	r0, r5
 800c772:	47b8      	blx	r7
 800c774:	3001      	adds	r0, #1
 800c776:	f43f af42 	beq.w	800c5fe <_printf_float+0xb6>
 800c77a:	f04f 0800 	mov.w	r8, #0
 800c77e:	f104 091a 	add.w	r9, r4, #26
 800c782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c784:	3b01      	subs	r3, #1
 800c786:	4543      	cmp	r3, r8
 800c788:	dc09      	bgt.n	800c79e <_printf_float+0x256>
 800c78a:	6823      	ldr	r3, [r4, #0]
 800c78c:	079b      	lsls	r3, r3, #30
 800c78e:	f100 8102 	bmi.w	800c996 <_printf_float+0x44e>
 800c792:	68e0      	ldr	r0, [r4, #12]
 800c794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c796:	4298      	cmp	r0, r3
 800c798:	bfb8      	it	lt
 800c79a:	4618      	movlt	r0, r3
 800c79c:	e731      	b.n	800c602 <_printf_float+0xba>
 800c79e:	2301      	movs	r3, #1
 800c7a0:	464a      	mov	r2, r9
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	47b8      	blx	r7
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	f43f af28 	beq.w	800c5fe <_printf_float+0xb6>
 800c7ae:	f108 0801 	add.w	r8, r8, #1
 800c7b2:	e7e6      	b.n	800c782 <_printf_float+0x23a>
 800c7b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	dc38      	bgt.n	800c82c <_printf_float+0x2e4>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	4631      	mov	r1, r6
 800c7be:	4628      	mov	r0, r5
 800c7c0:	4a19      	ldr	r2, [pc, #100]	; (800c828 <_printf_float+0x2e0>)
 800c7c2:	47b8      	blx	r7
 800c7c4:	3001      	adds	r0, #1
 800c7c6:	f43f af1a 	beq.w	800c5fe <_printf_float+0xb6>
 800c7ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	d102      	bne.n	800c7d8 <_printf_float+0x290>
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	07d9      	lsls	r1, r3, #31
 800c7d6:	d5d8      	bpl.n	800c78a <_printf_float+0x242>
 800c7d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4628      	mov	r0, r5
 800c7e0:	47b8      	blx	r7
 800c7e2:	3001      	adds	r0, #1
 800c7e4:	f43f af0b 	beq.w	800c5fe <_printf_float+0xb6>
 800c7e8:	f04f 0900 	mov.w	r9, #0
 800c7ec:	f104 0a1a 	add.w	sl, r4, #26
 800c7f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7f2:	425b      	negs	r3, r3
 800c7f4:	454b      	cmp	r3, r9
 800c7f6:	dc01      	bgt.n	800c7fc <_printf_float+0x2b4>
 800c7f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7fa:	e794      	b.n	800c726 <_printf_float+0x1de>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	4652      	mov	r2, sl
 800c800:	4631      	mov	r1, r6
 800c802:	4628      	mov	r0, r5
 800c804:	47b8      	blx	r7
 800c806:	3001      	adds	r0, #1
 800c808:	f43f aef9 	beq.w	800c5fe <_printf_float+0xb6>
 800c80c:	f109 0901 	add.w	r9, r9, #1
 800c810:	e7ee      	b.n	800c7f0 <_printf_float+0x2a8>
 800c812:	bf00      	nop
 800c814:	7fefffff 	.word	0x7fefffff
 800c818:	0800f34c 	.word	0x0800f34c
 800c81c:	0800f350 	.word	0x0800f350
 800c820:	0800f358 	.word	0x0800f358
 800c824:	0800f354 	.word	0x0800f354
 800c828:	0800f35c 	.word	0x0800f35c
 800c82c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c82e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c830:	429a      	cmp	r2, r3
 800c832:	bfa8      	it	ge
 800c834:	461a      	movge	r2, r3
 800c836:	2a00      	cmp	r2, #0
 800c838:	4691      	mov	r9, r2
 800c83a:	dc37      	bgt.n	800c8ac <_printf_float+0x364>
 800c83c:	f04f 0b00 	mov.w	fp, #0
 800c840:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c844:	f104 021a 	add.w	r2, r4, #26
 800c848:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c84c:	ebaa 0309 	sub.w	r3, sl, r9
 800c850:	455b      	cmp	r3, fp
 800c852:	dc33      	bgt.n	800c8bc <_printf_float+0x374>
 800c854:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c858:	429a      	cmp	r2, r3
 800c85a:	db3b      	blt.n	800c8d4 <_printf_float+0x38c>
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	07da      	lsls	r2, r3, #31
 800c860:	d438      	bmi.n	800c8d4 <_printf_float+0x38c>
 800c862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c864:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c866:	eba3 020a 	sub.w	r2, r3, sl
 800c86a:	eba3 0901 	sub.w	r9, r3, r1
 800c86e:	4591      	cmp	r9, r2
 800c870:	bfa8      	it	ge
 800c872:	4691      	movge	r9, r2
 800c874:	f1b9 0f00 	cmp.w	r9, #0
 800c878:	dc34      	bgt.n	800c8e4 <_printf_float+0x39c>
 800c87a:	f04f 0800 	mov.w	r8, #0
 800c87e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c882:	f104 0a1a 	add.w	sl, r4, #26
 800c886:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c88a:	1a9b      	subs	r3, r3, r2
 800c88c:	eba3 0309 	sub.w	r3, r3, r9
 800c890:	4543      	cmp	r3, r8
 800c892:	f77f af7a 	ble.w	800c78a <_printf_float+0x242>
 800c896:	2301      	movs	r3, #1
 800c898:	4652      	mov	r2, sl
 800c89a:	4631      	mov	r1, r6
 800c89c:	4628      	mov	r0, r5
 800c89e:	47b8      	blx	r7
 800c8a0:	3001      	adds	r0, #1
 800c8a2:	f43f aeac 	beq.w	800c5fe <_printf_float+0xb6>
 800c8a6:	f108 0801 	add.w	r8, r8, #1
 800c8aa:	e7ec      	b.n	800c886 <_printf_float+0x33e>
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	4631      	mov	r1, r6
 800c8b0:	4642      	mov	r2, r8
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	47b8      	blx	r7
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	d1c0      	bne.n	800c83c <_printf_float+0x2f4>
 800c8ba:	e6a0      	b.n	800c5fe <_printf_float+0xb6>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	4631      	mov	r1, r6
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	920b      	str	r2, [sp, #44]	; 0x2c
 800c8c4:	47b8      	blx	r7
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	f43f ae99 	beq.w	800c5fe <_printf_float+0xb6>
 800c8cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8ce:	f10b 0b01 	add.w	fp, fp, #1
 800c8d2:	e7b9      	b.n	800c848 <_printf_float+0x300>
 800c8d4:	4631      	mov	r1, r6
 800c8d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8da:	4628      	mov	r0, r5
 800c8dc:	47b8      	blx	r7
 800c8de:	3001      	adds	r0, #1
 800c8e0:	d1bf      	bne.n	800c862 <_printf_float+0x31a>
 800c8e2:	e68c      	b.n	800c5fe <_printf_float+0xb6>
 800c8e4:	464b      	mov	r3, r9
 800c8e6:	4631      	mov	r1, r6
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	eb08 020a 	add.w	r2, r8, sl
 800c8ee:	47b8      	blx	r7
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	d1c2      	bne.n	800c87a <_printf_float+0x332>
 800c8f4:	e683      	b.n	800c5fe <_printf_float+0xb6>
 800c8f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8f8:	2a01      	cmp	r2, #1
 800c8fa:	dc01      	bgt.n	800c900 <_printf_float+0x3b8>
 800c8fc:	07db      	lsls	r3, r3, #31
 800c8fe:	d537      	bpl.n	800c970 <_printf_float+0x428>
 800c900:	2301      	movs	r3, #1
 800c902:	4642      	mov	r2, r8
 800c904:	4631      	mov	r1, r6
 800c906:	4628      	mov	r0, r5
 800c908:	47b8      	blx	r7
 800c90a:	3001      	adds	r0, #1
 800c90c:	f43f ae77 	beq.w	800c5fe <_printf_float+0xb6>
 800c910:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c914:	4631      	mov	r1, r6
 800c916:	4628      	mov	r0, r5
 800c918:	47b8      	blx	r7
 800c91a:	3001      	adds	r0, #1
 800c91c:	f43f ae6f 	beq.w	800c5fe <_printf_float+0xb6>
 800c920:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c924:	2200      	movs	r2, #0
 800c926:	2300      	movs	r3, #0
 800c928:	f7f4 f856 	bl	80009d8 <__aeabi_dcmpeq>
 800c92c:	b9d8      	cbnz	r0, 800c966 <_printf_float+0x41e>
 800c92e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c930:	f108 0201 	add.w	r2, r8, #1
 800c934:	3b01      	subs	r3, #1
 800c936:	4631      	mov	r1, r6
 800c938:	4628      	mov	r0, r5
 800c93a:	47b8      	blx	r7
 800c93c:	3001      	adds	r0, #1
 800c93e:	d10e      	bne.n	800c95e <_printf_float+0x416>
 800c940:	e65d      	b.n	800c5fe <_printf_float+0xb6>
 800c942:	2301      	movs	r3, #1
 800c944:	464a      	mov	r2, r9
 800c946:	4631      	mov	r1, r6
 800c948:	4628      	mov	r0, r5
 800c94a:	47b8      	blx	r7
 800c94c:	3001      	adds	r0, #1
 800c94e:	f43f ae56 	beq.w	800c5fe <_printf_float+0xb6>
 800c952:	f108 0801 	add.w	r8, r8, #1
 800c956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c958:	3b01      	subs	r3, #1
 800c95a:	4543      	cmp	r3, r8
 800c95c:	dcf1      	bgt.n	800c942 <_printf_float+0x3fa>
 800c95e:	4653      	mov	r3, sl
 800c960:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c964:	e6e0      	b.n	800c728 <_printf_float+0x1e0>
 800c966:	f04f 0800 	mov.w	r8, #0
 800c96a:	f104 091a 	add.w	r9, r4, #26
 800c96e:	e7f2      	b.n	800c956 <_printf_float+0x40e>
 800c970:	2301      	movs	r3, #1
 800c972:	4642      	mov	r2, r8
 800c974:	e7df      	b.n	800c936 <_printf_float+0x3ee>
 800c976:	2301      	movs	r3, #1
 800c978:	464a      	mov	r2, r9
 800c97a:	4631      	mov	r1, r6
 800c97c:	4628      	mov	r0, r5
 800c97e:	47b8      	blx	r7
 800c980:	3001      	adds	r0, #1
 800c982:	f43f ae3c 	beq.w	800c5fe <_printf_float+0xb6>
 800c986:	f108 0801 	add.w	r8, r8, #1
 800c98a:	68e3      	ldr	r3, [r4, #12]
 800c98c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c98e:	1a5b      	subs	r3, r3, r1
 800c990:	4543      	cmp	r3, r8
 800c992:	dcf0      	bgt.n	800c976 <_printf_float+0x42e>
 800c994:	e6fd      	b.n	800c792 <_printf_float+0x24a>
 800c996:	f04f 0800 	mov.w	r8, #0
 800c99a:	f104 0919 	add.w	r9, r4, #25
 800c99e:	e7f4      	b.n	800c98a <_printf_float+0x442>

0800c9a0 <_printf_common>:
 800c9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a4:	4616      	mov	r6, r2
 800c9a6:	4699      	mov	r9, r3
 800c9a8:	688a      	ldr	r2, [r1, #8]
 800c9aa:	690b      	ldr	r3, [r1, #16]
 800c9ac:	4607      	mov	r7, r0
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	bfb8      	it	lt
 800c9b2:	4613      	movlt	r3, r2
 800c9b4:	6033      	str	r3, [r6, #0]
 800c9b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9ba:	460c      	mov	r4, r1
 800c9bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9c0:	b10a      	cbz	r2, 800c9c6 <_printf_common+0x26>
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	6033      	str	r3, [r6, #0]
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	0699      	lsls	r1, r3, #26
 800c9ca:	bf42      	ittt	mi
 800c9cc:	6833      	ldrmi	r3, [r6, #0]
 800c9ce:	3302      	addmi	r3, #2
 800c9d0:	6033      	strmi	r3, [r6, #0]
 800c9d2:	6825      	ldr	r5, [r4, #0]
 800c9d4:	f015 0506 	ands.w	r5, r5, #6
 800c9d8:	d106      	bne.n	800c9e8 <_printf_common+0x48>
 800c9da:	f104 0a19 	add.w	sl, r4, #25
 800c9de:	68e3      	ldr	r3, [r4, #12]
 800c9e0:	6832      	ldr	r2, [r6, #0]
 800c9e2:	1a9b      	subs	r3, r3, r2
 800c9e4:	42ab      	cmp	r3, r5
 800c9e6:	dc28      	bgt.n	800ca3a <_printf_common+0x9a>
 800c9e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9ec:	1e13      	subs	r3, r2, #0
 800c9ee:	6822      	ldr	r2, [r4, #0]
 800c9f0:	bf18      	it	ne
 800c9f2:	2301      	movne	r3, #1
 800c9f4:	0692      	lsls	r2, r2, #26
 800c9f6:	d42d      	bmi.n	800ca54 <_printf_common+0xb4>
 800c9f8:	4649      	mov	r1, r9
 800c9fa:	4638      	mov	r0, r7
 800c9fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca00:	47c0      	blx	r8
 800ca02:	3001      	adds	r0, #1
 800ca04:	d020      	beq.n	800ca48 <_printf_common+0xa8>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	68e5      	ldr	r5, [r4, #12]
 800ca0a:	f003 0306 	and.w	r3, r3, #6
 800ca0e:	2b04      	cmp	r3, #4
 800ca10:	bf18      	it	ne
 800ca12:	2500      	movne	r5, #0
 800ca14:	6832      	ldr	r2, [r6, #0]
 800ca16:	f04f 0600 	mov.w	r6, #0
 800ca1a:	68a3      	ldr	r3, [r4, #8]
 800ca1c:	bf08      	it	eq
 800ca1e:	1aad      	subeq	r5, r5, r2
 800ca20:	6922      	ldr	r2, [r4, #16]
 800ca22:	bf08      	it	eq
 800ca24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	bfc4      	itt	gt
 800ca2c:	1a9b      	subgt	r3, r3, r2
 800ca2e:	18ed      	addgt	r5, r5, r3
 800ca30:	341a      	adds	r4, #26
 800ca32:	42b5      	cmp	r5, r6
 800ca34:	d11a      	bne.n	800ca6c <_printf_common+0xcc>
 800ca36:	2000      	movs	r0, #0
 800ca38:	e008      	b.n	800ca4c <_printf_common+0xac>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	4652      	mov	r2, sl
 800ca3e:	4649      	mov	r1, r9
 800ca40:	4638      	mov	r0, r7
 800ca42:	47c0      	blx	r8
 800ca44:	3001      	adds	r0, #1
 800ca46:	d103      	bne.n	800ca50 <_printf_common+0xb0>
 800ca48:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca50:	3501      	adds	r5, #1
 800ca52:	e7c4      	b.n	800c9de <_printf_common+0x3e>
 800ca54:	2030      	movs	r0, #48	; 0x30
 800ca56:	18e1      	adds	r1, r4, r3
 800ca58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca5c:	1c5a      	adds	r2, r3, #1
 800ca5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca62:	4422      	add	r2, r4
 800ca64:	3302      	adds	r3, #2
 800ca66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca6a:	e7c5      	b.n	800c9f8 <_printf_common+0x58>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	4622      	mov	r2, r4
 800ca70:	4649      	mov	r1, r9
 800ca72:	4638      	mov	r0, r7
 800ca74:	47c0      	blx	r8
 800ca76:	3001      	adds	r0, #1
 800ca78:	d0e6      	beq.n	800ca48 <_printf_common+0xa8>
 800ca7a:	3601      	adds	r6, #1
 800ca7c:	e7d9      	b.n	800ca32 <_printf_common+0x92>
	...

0800ca80 <_printf_i>:
 800ca80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca84:	7e0f      	ldrb	r7, [r1, #24]
 800ca86:	4691      	mov	r9, r2
 800ca88:	2f78      	cmp	r7, #120	; 0x78
 800ca8a:	4680      	mov	r8, r0
 800ca8c:	460c      	mov	r4, r1
 800ca8e:	469a      	mov	sl, r3
 800ca90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca96:	d807      	bhi.n	800caa8 <_printf_i+0x28>
 800ca98:	2f62      	cmp	r7, #98	; 0x62
 800ca9a:	d80a      	bhi.n	800cab2 <_printf_i+0x32>
 800ca9c:	2f00      	cmp	r7, #0
 800ca9e:	f000 80d9 	beq.w	800cc54 <_printf_i+0x1d4>
 800caa2:	2f58      	cmp	r7, #88	; 0x58
 800caa4:	f000 80a4 	beq.w	800cbf0 <_printf_i+0x170>
 800caa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cab0:	e03a      	b.n	800cb28 <_printf_i+0xa8>
 800cab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cab6:	2b15      	cmp	r3, #21
 800cab8:	d8f6      	bhi.n	800caa8 <_printf_i+0x28>
 800caba:	a101      	add	r1, pc, #4	; (adr r1, 800cac0 <_printf_i+0x40>)
 800cabc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cac0:	0800cb19 	.word	0x0800cb19
 800cac4:	0800cb2d 	.word	0x0800cb2d
 800cac8:	0800caa9 	.word	0x0800caa9
 800cacc:	0800caa9 	.word	0x0800caa9
 800cad0:	0800caa9 	.word	0x0800caa9
 800cad4:	0800caa9 	.word	0x0800caa9
 800cad8:	0800cb2d 	.word	0x0800cb2d
 800cadc:	0800caa9 	.word	0x0800caa9
 800cae0:	0800caa9 	.word	0x0800caa9
 800cae4:	0800caa9 	.word	0x0800caa9
 800cae8:	0800caa9 	.word	0x0800caa9
 800caec:	0800cc3b 	.word	0x0800cc3b
 800caf0:	0800cb5d 	.word	0x0800cb5d
 800caf4:	0800cc1d 	.word	0x0800cc1d
 800caf8:	0800caa9 	.word	0x0800caa9
 800cafc:	0800caa9 	.word	0x0800caa9
 800cb00:	0800cc5d 	.word	0x0800cc5d
 800cb04:	0800caa9 	.word	0x0800caa9
 800cb08:	0800cb5d 	.word	0x0800cb5d
 800cb0c:	0800caa9 	.word	0x0800caa9
 800cb10:	0800caa9 	.word	0x0800caa9
 800cb14:	0800cc25 	.word	0x0800cc25
 800cb18:	682b      	ldr	r3, [r5, #0]
 800cb1a:	1d1a      	adds	r2, r3, #4
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	602a      	str	r2, [r5, #0]
 800cb20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb28:	2301      	movs	r3, #1
 800cb2a:	e0a4      	b.n	800cc76 <_printf_i+0x1f6>
 800cb2c:	6820      	ldr	r0, [r4, #0]
 800cb2e:	6829      	ldr	r1, [r5, #0]
 800cb30:	0606      	lsls	r6, r0, #24
 800cb32:	f101 0304 	add.w	r3, r1, #4
 800cb36:	d50a      	bpl.n	800cb4e <_printf_i+0xce>
 800cb38:	680e      	ldr	r6, [r1, #0]
 800cb3a:	602b      	str	r3, [r5, #0]
 800cb3c:	2e00      	cmp	r6, #0
 800cb3e:	da03      	bge.n	800cb48 <_printf_i+0xc8>
 800cb40:	232d      	movs	r3, #45	; 0x2d
 800cb42:	4276      	negs	r6, r6
 800cb44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb48:	230a      	movs	r3, #10
 800cb4a:	485e      	ldr	r0, [pc, #376]	; (800ccc4 <_printf_i+0x244>)
 800cb4c:	e019      	b.n	800cb82 <_printf_i+0x102>
 800cb4e:	680e      	ldr	r6, [r1, #0]
 800cb50:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb54:	602b      	str	r3, [r5, #0]
 800cb56:	bf18      	it	ne
 800cb58:	b236      	sxthne	r6, r6
 800cb5a:	e7ef      	b.n	800cb3c <_printf_i+0xbc>
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	6820      	ldr	r0, [r4, #0]
 800cb60:	1d19      	adds	r1, r3, #4
 800cb62:	6029      	str	r1, [r5, #0]
 800cb64:	0601      	lsls	r1, r0, #24
 800cb66:	d501      	bpl.n	800cb6c <_printf_i+0xec>
 800cb68:	681e      	ldr	r6, [r3, #0]
 800cb6a:	e002      	b.n	800cb72 <_printf_i+0xf2>
 800cb6c:	0646      	lsls	r6, r0, #25
 800cb6e:	d5fb      	bpl.n	800cb68 <_printf_i+0xe8>
 800cb70:	881e      	ldrh	r6, [r3, #0]
 800cb72:	2f6f      	cmp	r7, #111	; 0x6f
 800cb74:	bf0c      	ite	eq
 800cb76:	2308      	moveq	r3, #8
 800cb78:	230a      	movne	r3, #10
 800cb7a:	4852      	ldr	r0, [pc, #328]	; (800ccc4 <_printf_i+0x244>)
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb82:	6865      	ldr	r5, [r4, #4]
 800cb84:	2d00      	cmp	r5, #0
 800cb86:	bfa8      	it	ge
 800cb88:	6821      	ldrge	r1, [r4, #0]
 800cb8a:	60a5      	str	r5, [r4, #8]
 800cb8c:	bfa4      	itt	ge
 800cb8e:	f021 0104 	bicge.w	r1, r1, #4
 800cb92:	6021      	strge	r1, [r4, #0]
 800cb94:	b90e      	cbnz	r6, 800cb9a <_printf_i+0x11a>
 800cb96:	2d00      	cmp	r5, #0
 800cb98:	d04d      	beq.n	800cc36 <_printf_i+0x1b6>
 800cb9a:	4615      	mov	r5, r2
 800cb9c:	fbb6 f1f3 	udiv	r1, r6, r3
 800cba0:	fb03 6711 	mls	r7, r3, r1, r6
 800cba4:	5dc7      	ldrb	r7, [r0, r7]
 800cba6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbaa:	4637      	mov	r7, r6
 800cbac:	42bb      	cmp	r3, r7
 800cbae:	460e      	mov	r6, r1
 800cbb0:	d9f4      	bls.n	800cb9c <_printf_i+0x11c>
 800cbb2:	2b08      	cmp	r3, #8
 800cbb4:	d10b      	bne.n	800cbce <_printf_i+0x14e>
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	07de      	lsls	r6, r3, #31
 800cbba:	d508      	bpl.n	800cbce <_printf_i+0x14e>
 800cbbc:	6923      	ldr	r3, [r4, #16]
 800cbbe:	6861      	ldr	r1, [r4, #4]
 800cbc0:	4299      	cmp	r1, r3
 800cbc2:	bfde      	ittt	le
 800cbc4:	2330      	movle	r3, #48	; 0x30
 800cbc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbca:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbce:	1b52      	subs	r2, r2, r5
 800cbd0:	6122      	str	r2, [r4, #16]
 800cbd2:	464b      	mov	r3, r9
 800cbd4:	4621      	mov	r1, r4
 800cbd6:	4640      	mov	r0, r8
 800cbd8:	f8cd a000 	str.w	sl, [sp]
 800cbdc:	aa03      	add	r2, sp, #12
 800cbde:	f7ff fedf 	bl	800c9a0 <_printf_common>
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	d14c      	bne.n	800cc80 <_printf_i+0x200>
 800cbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbea:	b004      	add	sp, #16
 800cbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf0:	4834      	ldr	r0, [pc, #208]	; (800ccc4 <_printf_i+0x244>)
 800cbf2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cbf6:	6829      	ldr	r1, [r5, #0]
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbfe:	6029      	str	r1, [r5, #0]
 800cc00:	061d      	lsls	r5, r3, #24
 800cc02:	d514      	bpl.n	800cc2e <_printf_i+0x1ae>
 800cc04:	07df      	lsls	r7, r3, #31
 800cc06:	bf44      	itt	mi
 800cc08:	f043 0320 	orrmi.w	r3, r3, #32
 800cc0c:	6023      	strmi	r3, [r4, #0]
 800cc0e:	b91e      	cbnz	r6, 800cc18 <_printf_i+0x198>
 800cc10:	6823      	ldr	r3, [r4, #0]
 800cc12:	f023 0320 	bic.w	r3, r3, #32
 800cc16:	6023      	str	r3, [r4, #0]
 800cc18:	2310      	movs	r3, #16
 800cc1a:	e7af      	b.n	800cb7c <_printf_i+0xfc>
 800cc1c:	6823      	ldr	r3, [r4, #0]
 800cc1e:	f043 0320 	orr.w	r3, r3, #32
 800cc22:	6023      	str	r3, [r4, #0]
 800cc24:	2378      	movs	r3, #120	; 0x78
 800cc26:	4828      	ldr	r0, [pc, #160]	; (800ccc8 <_printf_i+0x248>)
 800cc28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc2c:	e7e3      	b.n	800cbf6 <_printf_i+0x176>
 800cc2e:	0659      	lsls	r1, r3, #25
 800cc30:	bf48      	it	mi
 800cc32:	b2b6      	uxthmi	r6, r6
 800cc34:	e7e6      	b.n	800cc04 <_printf_i+0x184>
 800cc36:	4615      	mov	r5, r2
 800cc38:	e7bb      	b.n	800cbb2 <_printf_i+0x132>
 800cc3a:	682b      	ldr	r3, [r5, #0]
 800cc3c:	6826      	ldr	r6, [r4, #0]
 800cc3e:	1d18      	adds	r0, r3, #4
 800cc40:	6961      	ldr	r1, [r4, #20]
 800cc42:	6028      	str	r0, [r5, #0]
 800cc44:	0635      	lsls	r5, r6, #24
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	d501      	bpl.n	800cc4e <_printf_i+0x1ce>
 800cc4a:	6019      	str	r1, [r3, #0]
 800cc4c:	e002      	b.n	800cc54 <_printf_i+0x1d4>
 800cc4e:	0670      	lsls	r0, r6, #25
 800cc50:	d5fb      	bpl.n	800cc4a <_printf_i+0x1ca>
 800cc52:	8019      	strh	r1, [r3, #0]
 800cc54:	2300      	movs	r3, #0
 800cc56:	4615      	mov	r5, r2
 800cc58:	6123      	str	r3, [r4, #16]
 800cc5a:	e7ba      	b.n	800cbd2 <_printf_i+0x152>
 800cc5c:	682b      	ldr	r3, [r5, #0]
 800cc5e:	2100      	movs	r1, #0
 800cc60:	1d1a      	adds	r2, r3, #4
 800cc62:	602a      	str	r2, [r5, #0]
 800cc64:	681d      	ldr	r5, [r3, #0]
 800cc66:	6862      	ldr	r2, [r4, #4]
 800cc68:	4628      	mov	r0, r5
 800cc6a:	f000 feeb 	bl	800da44 <memchr>
 800cc6e:	b108      	cbz	r0, 800cc74 <_printf_i+0x1f4>
 800cc70:	1b40      	subs	r0, r0, r5
 800cc72:	6060      	str	r0, [r4, #4]
 800cc74:	6863      	ldr	r3, [r4, #4]
 800cc76:	6123      	str	r3, [r4, #16]
 800cc78:	2300      	movs	r3, #0
 800cc7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc7e:	e7a8      	b.n	800cbd2 <_printf_i+0x152>
 800cc80:	462a      	mov	r2, r5
 800cc82:	4649      	mov	r1, r9
 800cc84:	4640      	mov	r0, r8
 800cc86:	6923      	ldr	r3, [r4, #16]
 800cc88:	47d0      	blx	sl
 800cc8a:	3001      	adds	r0, #1
 800cc8c:	d0ab      	beq.n	800cbe6 <_printf_i+0x166>
 800cc8e:	6823      	ldr	r3, [r4, #0]
 800cc90:	079b      	lsls	r3, r3, #30
 800cc92:	d413      	bmi.n	800ccbc <_printf_i+0x23c>
 800cc94:	68e0      	ldr	r0, [r4, #12]
 800cc96:	9b03      	ldr	r3, [sp, #12]
 800cc98:	4298      	cmp	r0, r3
 800cc9a:	bfb8      	it	lt
 800cc9c:	4618      	movlt	r0, r3
 800cc9e:	e7a4      	b.n	800cbea <_printf_i+0x16a>
 800cca0:	2301      	movs	r3, #1
 800cca2:	4632      	mov	r2, r6
 800cca4:	4649      	mov	r1, r9
 800cca6:	4640      	mov	r0, r8
 800cca8:	47d0      	blx	sl
 800ccaa:	3001      	adds	r0, #1
 800ccac:	d09b      	beq.n	800cbe6 <_printf_i+0x166>
 800ccae:	3501      	adds	r5, #1
 800ccb0:	68e3      	ldr	r3, [r4, #12]
 800ccb2:	9903      	ldr	r1, [sp, #12]
 800ccb4:	1a5b      	subs	r3, r3, r1
 800ccb6:	42ab      	cmp	r3, r5
 800ccb8:	dcf2      	bgt.n	800cca0 <_printf_i+0x220>
 800ccba:	e7eb      	b.n	800cc94 <_printf_i+0x214>
 800ccbc:	2500      	movs	r5, #0
 800ccbe:	f104 0619 	add.w	r6, r4, #25
 800ccc2:	e7f5      	b.n	800ccb0 <_printf_i+0x230>
 800ccc4:	0800f35e 	.word	0x0800f35e
 800ccc8:	0800f36f 	.word	0x0800f36f

0800cccc <sniprintf>:
 800cccc:	b40c      	push	{r2, r3}
 800ccce:	b530      	push	{r4, r5, lr}
 800ccd0:	4b17      	ldr	r3, [pc, #92]	; (800cd30 <sniprintf+0x64>)
 800ccd2:	1e0c      	subs	r4, r1, #0
 800ccd4:	681d      	ldr	r5, [r3, #0]
 800ccd6:	b09d      	sub	sp, #116	; 0x74
 800ccd8:	da08      	bge.n	800ccec <sniprintf+0x20>
 800ccda:	238b      	movs	r3, #139	; 0x8b
 800ccdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cce0:	602b      	str	r3, [r5, #0]
 800cce2:	b01d      	add	sp, #116	; 0x74
 800cce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cce8:	b002      	add	sp, #8
 800ccea:	4770      	bx	lr
 800ccec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ccf0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ccf4:	bf0c      	ite	eq
 800ccf6:	4623      	moveq	r3, r4
 800ccf8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ccfc:	9304      	str	r3, [sp, #16]
 800ccfe:	9307      	str	r3, [sp, #28]
 800cd00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd04:	9002      	str	r0, [sp, #8]
 800cd06:	9006      	str	r0, [sp, #24]
 800cd08:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	ab21      	add	r3, sp, #132	; 0x84
 800cd10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cd12:	a902      	add	r1, sp, #8
 800cd14:	9301      	str	r3, [sp, #4]
 800cd16:	f001 fb71 	bl	800e3fc <_svfiprintf_r>
 800cd1a:	1c43      	adds	r3, r0, #1
 800cd1c:	bfbc      	itt	lt
 800cd1e:	238b      	movlt	r3, #139	; 0x8b
 800cd20:	602b      	strlt	r3, [r5, #0]
 800cd22:	2c00      	cmp	r4, #0
 800cd24:	d0dd      	beq.n	800cce2 <sniprintf+0x16>
 800cd26:	2200      	movs	r2, #0
 800cd28:	9b02      	ldr	r3, [sp, #8]
 800cd2a:	701a      	strb	r2, [r3, #0]
 800cd2c:	e7d9      	b.n	800cce2 <sniprintf+0x16>
 800cd2e:	bf00      	nop
 800cd30:	20000190 	.word	0x20000190

0800cd34 <quorem>:
 800cd34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd38:	6903      	ldr	r3, [r0, #16]
 800cd3a:	690c      	ldr	r4, [r1, #16]
 800cd3c:	4607      	mov	r7, r0
 800cd3e:	42a3      	cmp	r3, r4
 800cd40:	f2c0 8082 	blt.w	800ce48 <quorem+0x114>
 800cd44:	3c01      	subs	r4, #1
 800cd46:	f100 0514 	add.w	r5, r0, #20
 800cd4a:	f101 0814 	add.w	r8, r1, #20
 800cd4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd52:	9301      	str	r3, [sp, #4]
 800cd54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	fbb2 f6f3 	udiv	r6, r2, r3
 800cd64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cd68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd6c:	d331      	bcc.n	800cdd2 <quorem+0x9e>
 800cd6e:	f04f 0e00 	mov.w	lr, #0
 800cd72:	4640      	mov	r0, r8
 800cd74:	46ac      	mov	ip, r5
 800cd76:	46f2      	mov	sl, lr
 800cd78:	f850 2b04 	ldr.w	r2, [r0], #4
 800cd7c:	b293      	uxth	r3, r2
 800cd7e:	fb06 e303 	mla	r3, r6, r3, lr
 800cd82:	0c12      	lsrs	r2, r2, #16
 800cd84:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	fb06 e202 	mla	r2, r6, r2, lr
 800cd8e:	ebaa 0303 	sub.w	r3, sl, r3
 800cd92:	f8dc a000 	ldr.w	sl, [ip]
 800cd96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cd9a:	fa1f fa8a 	uxth.w	sl, sl
 800cd9e:	4453      	add	r3, sl
 800cda0:	f8dc a000 	ldr.w	sl, [ip]
 800cda4:	b292      	uxth	r2, r2
 800cda6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cdaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdb4:	4581      	cmp	r9, r0
 800cdb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cdba:	f84c 3b04 	str.w	r3, [ip], #4
 800cdbe:	d2db      	bcs.n	800cd78 <quorem+0x44>
 800cdc0:	f855 300b 	ldr.w	r3, [r5, fp]
 800cdc4:	b92b      	cbnz	r3, 800cdd2 <quorem+0x9e>
 800cdc6:	9b01      	ldr	r3, [sp, #4]
 800cdc8:	3b04      	subs	r3, #4
 800cdca:	429d      	cmp	r5, r3
 800cdcc:	461a      	mov	r2, r3
 800cdce:	d32f      	bcc.n	800ce30 <quorem+0xfc>
 800cdd0:	613c      	str	r4, [r7, #16]
 800cdd2:	4638      	mov	r0, r7
 800cdd4:	f001 f8c2 	bl	800df5c <__mcmp>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	db25      	blt.n	800ce28 <quorem+0xf4>
 800cddc:	4628      	mov	r0, r5
 800cdde:	f04f 0c00 	mov.w	ip, #0
 800cde2:	3601      	adds	r6, #1
 800cde4:	f858 1b04 	ldr.w	r1, [r8], #4
 800cde8:	f8d0 e000 	ldr.w	lr, [r0]
 800cdec:	b28b      	uxth	r3, r1
 800cdee:	ebac 0303 	sub.w	r3, ip, r3
 800cdf2:	fa1f f28e 	uxth.w	r2, lr
 800cdf6:	4413      	add	r3, r2
 800cdf8:	0c0a      	lsrs	r2, r1, #16
 800cdfa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cdfe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce08:	45c1      	cmp	r9, r8
 800ce0a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ce0e:	f840 3b04 	str.w	r3, [r0], #4
 800ce12:	d2e7      	bcs.n	800cde4 <quorem+0xb0>
 800ce14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce1c:	b922      	cbnz	r2, 800ce28 <quorem+0xf4>
 800ce1e:	3b04      	subs	r3, #4
 800ce20:	429d      	cmp	r5, r3
 800ce22:	461a      	mov	r2, r3
 800ce24:	d30a      	bcc.n	800ce3c <quorem+0x108>
 800ce26:	613c      	str	r4, [r7, #16]
 800ce28:	4630      	mov	r0, r6
 800ce2a:	b003      	add	sp, #12
 800ce2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce30:	6812      	ldr	r2, [r2, #0]
 800ce32:	3b04      	subs	r3, #4
 800ce34:	2a00      	cmp	r2, #0
 800ce36:	d1cb      	bne.n	800cdd0 <quorem+0x9c>
 800ce38:	3c01      	subs	r4, #1
 800ce3a:	e7c6      	b.n	800cdca <quorem+0x96>
 800ce3c:	6812      	ldr	r2, [r2, #0]
 800ce3e:	3b04      	subs	r3, #4
 800ce40:	2a00      	cmp	r2, #0
 800ce42:	d1f0      	bne.n	800ce26 <quorem+0xf2>
 800ce44:	3c01      	subs	r4, #1
 800ce46:	e7eb      	b.n	800ce20 <quorem+0xec>
 800ce48:	2000      	movs	r0, #0
 800ce4a:	e7ee      	b.n	800ce2a <quorem+0xf6>
 800ce4c:	0000      	movs	r0, r0
	...

0800ce50 <_dtoa_r>:
 800ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce54:	4616      	mov	r6, r2
 800ce56:	461f      	mov	r7, r3
 800ce58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ce5a:	b099      	sub	sp, #100	; 0x64
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ce62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ce66:	b974      	cbnz	r4, 800ce86 <_dtoa_r+0x36>
 800ce68:	2010      	movs	r0, #16
 800ce6a:	f000 fde3 	bl	800da34 <malloc>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	6268      	str	r0, [r5, #36]	; 0x24
 800ce72:	b920      	cbnz	r0, 800ce7e <_dtoa_r+0x2e>
 800ce74:	21ea      	movs	r1, #234	; 0xea
 800ce76:	4ba8      	ldr	r3, [pc, #672]	; (800d118 <_dtoa_r+0x2c8>)
 800ce78:	48a8      	ldr	r0, [pc, #672]	; (800d11c <_dtoa_r+0x2cc>)
 800ce7a:	f001 fbcf 	bl	800e61c <__assert_func>
 800ce7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce82:	6004      	str	r4, [r0, #0]
 800ce84:	60c4      	str	r4, [r0, #12]
 800ce86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce88:	6819      	ldr	r1, [r3, #0]
 800ce8a:	b151      	cbz	r1, 800cea2 <_dtoa_r+0x52>
 800ce8c:	685a      	ldr	r2, [r3, #4]
 800ce8e:	2301      	movs	r3, #1
 800ce90:	4093      	lsls	r3, r2
 800ce92:	604a      	str	r2, [r1, #4]
 800ce94:	608b      	str	r3, [r1, #8]
 800ce96:	4628      	mov	r0, r5
 800ce98:	f000 fe22 	bl	800dae0 <_Bfree>
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cea0:	601a      	str	r2, [r3, #0]
 800cea2:	1e3b      	subs	r3, r7, #0
 800cea4:	bfaf      	iteee	ge
 800cea6:	2300      	movge	r3, #0
 800cea8:	2201      	movlt	r2, #1
 800ceaa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ceae:	9305      	strlt	r3, [sp, #20]
 800ceb0:	bfa8      	it	ge
 800ceb2:	f8c8 3000 	strge.w	r3, [r8]
 800ceb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ceba:	4b99      	ldr	r3, [pc, #612]	; (800d120 <_dtoa_r+0x2d0>)
 800cebc:	bfb8      	it	lt
 800cebe:	f8c8 2000 	strlt.w	r2, [r8]
 800cec2:	ea33 0309 	bics.w	r3, r3, r9
 800cec6:	d119      	bne.n	800cefc <_dtoa_r+0xac>
 800cec8:	f242 730f 	movw	r3, #9999	; 0x270f
 800cecc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cece:	6013      	str	r3, [r2, #0]
 800ced0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ced4:	4333      	orrs	r3, r6
 800ced6:	f000 857f 	beq.w	800d9d8 <_dtoa_r+0xb88>
 800ceda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cedc:	b953      	cbnz	r3, 800cef4 <_dtoa_r+0xa4>
 800cede:	4b91      	ldr	r3, [pc, #580]	; (800d124 <_dtoa_r+0x2d4>)
 800cee0:	e022      	b.n	800cf28 <_dtoa_r+0xd8>
 800cee2:	4b91      	ldr	r3, [pc, #580]	; (800d128 <_dtoa_r+0x2d8>)
 800cee4:	9303      	str	r3, [sp, #12]
 800cee6:	3308      	adds	r3, #8
 800cee8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ceea:	6013      	str	r3, [r2, #0]
 800ceec:	9803      	ldr	r0, [sp, #12]
 800ceee:	b019      	add	sp, #100	; 0x64
 800cef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef4:	4b8b      	ldr	r3, [pc, #556]	; (800d124 <_dtoa_r+0x2d4>)
 800cef6:	9303      	str	r3, [sp, #12]
 800cef8:	3303      	adds	r3, #3
 800cefa:	e7f5      	b.n	800cee8 <_dtoa_r+0x98>
 800cefc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cf00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800cf04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf08:	2200      	movs	r2, #0
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f7f3 fd64 	bl	80009d8 <__aeabi_dcmpeq>
 800cf10:	4680      	mov	r8, r0
 800cf12:	b158      	cbz	r0, 800cf2c <_dtoa_r+0xdc>
 800cf14:	2301      	movs	r3, #1
 800cf16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cf18:	6013      	str	r3, [r2, #0]
 800cf1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f000 8558 	beq.w	800d9d2 <_dtoa_r+0xb82>
 800cf22:	4882      	ldr	r0, [pc, #520]	; (800d12c <_dtoa_r+0x2dc>)
 800cf24:	6018      	str	r0, [r3, #0]
 800cf26:	1e43      	subs	r3, r0, #1
 800cf28:	9303      	str	r3, [sp, #12]
 800cf2a:	e7df      	b.n	800ceec <_dtoa_r+0x9c>
 800cf2c:	ab16      	add	r3, sp, #88	; 0x58
 800cf2e:	9301      	str	r3, [sp, #4]
 800cf30:	ab17      	add	r3, sp, #92	; 0x5c
 800cf32:	9300      	str	r3, [sp, #0]
 800cf34:	4628      	mov	r0, r5
 800cf36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cf3a:	f001 f8b7 	bl	800e0ac <__d2b>
 800cf3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cf42:	4683      	mov	fp, r0
 800cf44:	2c00      	cmp	r4, #0
 800cf46:	d07f      	beq.n	800d048 <_dtoa_r+0x1f8>
 800cf48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cf52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800cf5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cf5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800cf62:	2200      	movs	r2, #0
 800cf64:	4b72      	ldr	r3, [pc, #456]	; (800d130 <_dtoa_r+0x2e0>)
 800cf66:	f7f3 f917 	bl	8000198 <__aeabi_dsub>
 800cf6a:	a365      	add	r3, pc, #404	; (adr r3, 800d100 <_dtoa_r+0x2b0>)
 800cf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf70:	f7f3 faca 	bl	8000508 <__aeabi_dmul>
 800cf74:	a364      	add	r3, pc, #400	; (adr r3, 800d108 <_dtoa_r+0x2b8>)
 800cf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7a:	f7f3 f90f 	bl	800019c <__adddf3>
 800cf7e:	4606      	mov	r6, r0
 800cf80:	4620      	mov	r0, r4
 800cf82:	460f      	mov	r7, r1
 800cf84:	f7f3 fa56 	bl	8000434 <__aeabi_i2d>
 800cf88:	a361      	add	r3, pc, #388	; (adr r3, 800d110 <_dtoa_r+0x2c0>)
 800cf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8e:	f7f3 fabb 	bl	8000508 <__aeabi_dmul>
 800cf92:	4602      	mov	r2, r0
 800cf94:	460b      	mov	r3, r1
 800cf96:	4630      	mov	r0, r6
 800cf98:	4639      	mov	r1, r7
 800cf9a:	f7f3 f8ff 	bl	800019c <__adddf3>
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	460f      	mov	r7, r1
 800cfa2:	f7f3 fd61 	bl	8000a68 <__aeabi_d2iz>
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	4682      	mov	sl, r0
 800cfaa:	2300      	movs	r3, #0
 800cfac:	4630      	mov	r0, r6
 800cfae:	4639      	mov	r1, r7
 800cfb0:	f7f3 fd1c 	bl	80009ec <__aeabi_dcmplt>
 800cfb4:	b148      	cbz	r0, 800cfca <_dtoa_r+0x17a>
 800cfb6:	4650      	mov	r0, sl
 800cfb8:	f7f3 fa3c 	bl	8000434 <__aeabi_i2d>
 800cfbc:	4632      	mov	r2, r6
 800cfbe:	463b      	mov	r3, r7
 800cfc0:	f7f3 fd0a 	bl	80009d8 <__aeabi_dcmpeq>
 800cfc4:	b908      	cbnz	r0, 800cfca <_dtoa_r+0x17a>
 800cfc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfca:	f1ba 0f16 	cmp.w	sl, #22
 800cfce:	d858      	bhi.n	800d082 <_dtoa_r+0x232>
 800cfd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cfd4:	4b57      	ldr	r3, [pc, #348]	; (800d134 <_dtoa_r+0x2e4>)
 800cfd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfde:	f7f3 fd05 	bl	80009ec <__aeabi_dcmplt>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	d04f      	beq.n	800d086 <_dtoa_r+0x236>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfec:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cff0:	1b1c      	subs	r4, r3, r4
 800cff2:	1e63      	subs	r3, r4, #1
 800cff4:	9309      	str	r3, [sp, #36]	; 0x24
 800cff6:	bf49      	itett	mi
 800cff8:	f1c4 0301 	rsbmi	r3, r4, #1
 800cffc:	2300      	movpl	r3, #0
 800cffe:	9306      	strmi	r3, [sp, #24]
 800d000:	2300      	movmi	r3, #0
 800d002:	bf54      	ite	pl
 800d004:	9306      	strpl	r3, [sp, #24]
 800d006:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d008:	f1ba 0f00 	cmp.w	sl, #0
 800d00c:	db3d      	blt.n	800d08a <_dtoa_r+0x23a>
 800d00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d010:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d014:	4453      	add	r3, sl
 800d016:	9309      	str	r3, [sp, #36]	; 0x24
 800d018:	2300      	movs	r3, #0
 800d01a:	930a      	str	r3, [sp, #40]	; 0x28
 800d01c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d01e:	2b09      	cmp	r3, #9
 800d020:	f200 808c 	bhi.w	800d13c <_dtoa_r+0x2ec>
 800d024:	2b05      	cmp	r3, #5
 800d026:	bfc4      	itt	gt
 800d028:	3b04      	subgt	r3, #4
 800d02a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d02c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d02e:	bfc8      	it	gt
 800d030:	2400      	movgt	r4, #0
 800d032:	f1a3 0302 	sub.w	r3, r3, #2
 800d036:	bfd8      	it	le
 800d038:	2401      	movle	r4, #1
 800d03a:	2b03      	cmp	r3, #3
 800d03c:	f200 808a 	bhi.w	800d154 <_dtoa_r+0x304>
 800d040:	e8df f003 	tbb	[pc, r3]
 800d044:	5b4d4f2d 	.word	0x5b4d4f2d
 800d048:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d04c:	441c      	add	r4, r3
 800d04e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d052:	2b20      	cmp	r3, #32
 800d054:	bfc3      	ittte	gt
 800d056:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d05a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800d05e:	fa09 f303 	lslgt.w	r3, r9, r3
 800d062:	f1c3 0320 	rsble	r3, r3, #32
 800d066:	bfc6      	itte	gt
 800d068:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d06c:	4318      	orrgt	r0, r3
 800d06e:	fa06 f003 	lslle.w	r0, r6, r3
 800d072:	f7f3 f9cf 	bl	8000414 <__aeabi_ui2d>
 800d076:	2301      	movs	r3, #1
 800d078:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d07c:	3c01      	subs	r4, #1
 800d07e:	9313      	str	r3, [sp, #76]	; 0x4c
 800d080:	e76f      	b.n	800cf62 <_dtoa_r+0x112>
 800d082:	2301      	movs	r3, #1
 800d084:	e7b2      	b.n	800cfec <_dtoa_r+0x19c>
 800d086:	900f      	str	r0, [sp, #60]	; 0x3c
 800d088:	e7b1      	b.n	800cfee <_dtoa_r+0x19e>
 800d08a:	9b06      	ldr	r3, [sp, #24]
 800d08c:	eba3 030a 	sub.w	r3, r3, sl
 800d090:	9306      	str	r3, [sp, #24]
 800d092:	f1ca 0300 	rsb	r3, sl, #0
 800d096:	930a      	str	r3, [sp, #40]	; 0x28
 800d098:	2300      	movs	r3, #0
 800d09a:	930e      	str	r3, [sp, #56]	; 0x38
 800d09c:	e7be      	b.n	800d01c <_dtoa_r+0x1cc>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	dc58      	bgt.n	800d15a <_dtoa_r+0x30a>
 800d0a8:	f04f 0901 	mov.w	r9, #1
 800d0ac:	464b      	mov	r3, r9
 800d0ae:	f8cd 9020 	str.w	r9, [sp, #32]
 800d0b2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d0ba:	6042      	str	r2, [r0, #4]
 800d0bc:	2204      	movs	r2, #4
 800d0be:	f102 0614 	add.w	r6, r2, #20
 800d0c2:	429e      	cmp	r6, r3
 800d0c4:	6841      	ldr	r1, [r0, #4]
 800d0c6:	d94e      	bls.n	800d166 <_dtoa_r+0x316>
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	f000 fcc9 	bl	800da60 <_Balloc>
 800d0ce:	9003      	str	r0, [sp, #12]
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d14c      	bne.n	800d16e <_dtoa_r+0x31e>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d0da:	4b17      	ldr	r3, [pc, #92]	; (800d138 <_dtoa_r+0x2e8>)
 800d0dc:	e6cc      	b.n	800ce78 <_dtoa_r+0x28>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e7de      	b.n	800d0a0 <_dtoa_r+0x250>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d0e8:	eb0a 0903 	add.w	r9, sl, r3
 800d0ec:	f109 0301 	add.w	r3, r9, #1
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	9308      	str	r3, [sp, #32]
 800d0f4:	bfb8      	it	lt
 800d0f6:	2301      	movlt	r3, #1
 800d0f8:	e7dd      	b.n	800d0b6 <_dtoa_r+0x266>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e7f2      	b.n	800d0e4 <_dtoa_r+0x294>
 800d0fe:	bf00      	nop
 800d100:	636f4361 	.word	0x636f4361
 800d104:	3fd287a7 	.word	0x3fd287a7
 800d108:	8b60c8b3 	.word	0x8b60c8b3
 800d10c:	3fc68a28 	.word	0x3fc68a28
 800d110:	509f79fb 	.word	0x509f79fb
 800d114:	3fd34413 	.word	0x3fd34413
 800d118:	0800f38d 	.word	0x0800f38d
 800d11c:	0800f3a4 	.word	0x0800f3a4
 800d120:	7ff00000 	.word	0x7ff00000
 800d124:	0800f389 	.word	0x0800f389
 800d128:	0800f380 	.word	0x0800f380
 800d12c:	0800f35d 	.word	0x0800f35d
 800d130:	3ff80000 	.word	0x3ff80000
 800d134:	0800f498 	.word	0x0800f498
 800d138:	0800f3ff 	.word	0x0800f3ff
 800d13c:	2401      	movs	r4, #1
 800d13e:	2300      	movs	r3, #0
 800d140:	940b      	str	r4, [sp, #44]	; 0x2c
 800d142:	9322      	str	r3, [sp, #136]	; 0x88
 800d144:	f04f 39ff 	mov.w	r9, #4294967295
 800d148:	2200      	movs	r2, #0
 800d14a:	2312      	movs	r3, #18
 800d14c:	f8cd 9020 	str.w	r9, [sp, #32]
 800d150:	9223      	str	r2, [sp, #140]	; 0x8c
 800d152:	e7b0      	b.n	800d0b6 <_dtoa_r+0x266>
 800d154:	2301      	movs	r3, #1
 800d156:	930b      	str	r3, [sp, #44]	; 0x2c
 800d158:	e7f4      	b.n	800d144 <_dtoa_r+0x2f4>
 800d15a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800d15e:	464b      	mov	r3, r9
 800d160:	f8cd 9020 	str.w	r9, [sp, #32]
 800d164:	e7a7      	b.n	800d0b6 <_dtoa_r+0x266>
 800d166:	3101      	adds	r1, #1
 800d168:	6041      	str	r1, [r0, #4]
 800d16a:	0052      	lsls	r2, r2, #1
 800d16c:	e7a7      	b.n	800d0be <_dtoa_r+0x26e>
 800d16e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d170:	9a03      	ldr	r2, [sp, #12]
 800d172:	601a      	str	r2, [r3, #0]
 800d174:	9b08      	ldr	r3, [sp, #32]
 800d176:	2b0e      	cmp	r3, #14
 800d178:	f200 80a8 	bhi.w	800d2cc <_dtoa_r+0x47c>
 800d17c:	2c00      	cmp	r4, #0
 800d17e:	f000 80a5 	beq.w	800d2cc <_dtoa_r+0x47c>
 800d182:	f1ba 0f00 	cmp.w	sl, #0
 800d186:	dd34      	ble.n	800d1f2 <_dtoa_r+0x3a2>
 800d188:	4a9a      	ldr	r2, [pc, #616]	; (800d3f4 <_dtoa_r+0x5a4>)
 800d18a:	f00a 030f 	and.w	r3, sl, #15
 800d18e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d192:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d196:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d19a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d19e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800d1a2:	d016      	beq.n	800d1d2 <_dtoa_r+0x382>
 800d1a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d1a8:	4b93      	ldr	r3, [pc, #588]	; (800d3f8 <_dtoa_r+0x5a8>)
 800d1aa:	2703      	movs	r7, #3
 800d1ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d1b0:	f7f3 fad4 	bl	800075c <__aeabi_ddiv>
 800d1b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1b8:	f004 040f 	and.w	r4, r4, #15
 800d1bc:	4e8e      	ldr	r6, [pc, #568]	; (800d3f8 <_dtoa_r+0x5a8>)
 800d1be:	b954      	cbnz	r4, 800d1d6 <_dtoa_r+0x386>
 800d1c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d1c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1c8:	f7f3 fac8 	bl	800075c <__aeabi_ddiv>
 800d1cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1d0:	e029      	b.n	800d226 <_dtoa_r+0x3d6>
 800d1d2:	2702      	movs	r7, #2
 800d1d4:	e7f2      	b.n	800d1bc <_dtoa_r+0x36c>
 800d1d6:	07e1      	lsls	r1, r4, #31
 800d1d8:	d508      	bpl.n	800d1ec <_dtoa_r+0x39c>
 800d1da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d1de:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d1e2:	f7f3 f991 	bl	8000508 <__aeabi_dmul>
 800d1e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d1ea:	3701      	adds	r7, #1
 800d1ec:	1064      	asrs	r4, r4, #1
 800d1ee:	3608      	adds	r6, #8
 800d1f0:	e7e5      	b.n	800d1be <_dtoa_r+0x36e>
 800d1f2:	f000 80a5 	beq.w	800d340 <_dtoa_r+0x4f0>
 800d1f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d1fa:	f1ca 0400 	rsb	r4, sl, #0
 800d1fe:	4b7d      	ldr	r3, [pc, #500]	; (800d3f4 <_dtoa_r+0x5a4>)
 800d200:	f004 020f 	and.w	r2, r4, #15
 800d204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20c:	f7f3 f97c 	bl	8000508 <__aeabi_dmul>
 800d210:	2702      	movs	r7, #2
 800d212:	2300      	movs	r3, #0
 800d214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d218:	4e77      	ldr	r6, [pc, #476]	; (800d3f8 <_dtoa_r+0x5a8>)
 800d21a:	1124      	asrs	r4, r4, #4
 800d21c:	2c00      	cmp	r4, #0
 800d21e:	f040 8084 	bne.w	800d32a <_dtoa_r+0x4da>
 800d222:	2b00      	cmp	r3, #0
 800d224:	d1d2      	bne.n	800d1cc <_dtoa_r+0x37c>
 800d226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f000 808b 	beq.w	800d344 <_dtoa_r+0x4f4>
 800d22e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d232:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d236:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d23a:	2200      	movs	r2, #0
 800d23c:	4b6f      	ldr	r3, [pc, #444]	; (800d3fc <_dtoa_r+0x5ac>)
 800d23e:	f7f3 fbd5 	bl	80009ec <__aeabi_dcmplt>
 800d242:	2800      	cmp	r0, #0
 800d244:	d07e      	beq.n	800d344 <_dtoa_r+0x4f4>
 800d246:	9b08      	ldr	r3, [sp, #32]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d07b      	beq.n	800d344 <_dtoa_r+0x4f4>
 800d24c:	f1b9 0f00 	cmp.w	r9, #0
 800d250:	dd38      	ble.n	800d2c4 <_dtoa_r+0x474>
 800d252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d256:	2200      	movs	r2, #0
 800d258:	4b69      	ldr	r3, [pc, #420]	; (800d400 <_dtoa_r+0x5b0>)
 800d25a:	f7f3 f955 	bl	8000508 <__aeabi_dmul>
 800d25e:	464c      	mov	r4, r9
 800d260:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d264:	f10a 38ff 	add.w	r8, sl, #4294967295
 800d268:	3701      	adds	r7, #1
 800d26a:	4638      	mov	r0, r7
 800d26c:	f7f3 f8e2 	bl	8000434 <__aeabi_i2d>
 800d270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d274:	f7f3 f948 	bl	8000508 <__aeabi_dmul>
 800d278:	2200      	movs	r2, #0
 800d27a:	4b62      	ldr	r3, [pc, #392]	; (800d404 <_dtoa_r+0x5b4>)
 800d27c:	f7f2 ff8e 	bl	800019c <__adddf3>
 800d280:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d284:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d288:	9611      	str	r6, [sp, #68]	; 0x44
 800d28a:	2c00      	cmp	r4, #0
 800d28c:	d15d      	bne.n	800d34a <_dtoa_r+0x4fa>
 800d28e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d292:	2200      	movs	r2, #0
 800d294:	4b5c      	ldr	r3, [pc, #368]	; (800d408 <_dtoa_r+0x5b8>)
 800d296:	f7f2 ff7f 	bl	8000198 <__aeabi_dsub>
 800d29a:	4602      	mov	r2, r0
 800d29c:	460b      	mov	r3, r1
 800d29e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d2a2:	4633      	mov	r3, r6
 800d2a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d2a6:	f7f3 fbbf 	bl	8000a28 <__aeabi_dcmpgt>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	f040 829c 	bne.w	800d7e8 <_dtoa_r+0x998>
 800d2b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d2b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d2ba:	f7f3 fb97 	bl	80009ec <__aeabi_dcmplt>
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	f040 8290 	bne.w	800d7e4 <_dtoa_r+0x994>
 800d2c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800d2c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d2cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	f2c0 8152 	blt.w	800d578 <_dtoa_r+0x728>
 800d2d4:	f1ba 0f0e 	cmp.w	sl, #14
 800d2d8:	f300 814e 	bgt.w	800d578 <_dtoa_r+0x728>
 800d2dc:	4b45      	ldr	r3, [pc, #276]	; (800d3f4 <_dtoa_r+0x5a4>)
 800d2de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d2e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d2e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d2ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f280 80db 	bge.w	800d4a8 <_dtoa_r+0x658>
 800d2f2:	9b08      	ldr	r3, [sp, #32]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f300 80d7 	bgt.w	800d4a8 <_dtoa_r+0x658>
 800d2fa:	f040 8272 	bne.w	800d7e2 <_dtoa_r+0x992>
 800d2fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d302:	2200      	movs	r2, #0
 800d304:	4b40      	ldr	r3, [pc, #256]	; (800d408 <_dtoa_r+0x5b8>)
 800d306:	f7f3 f8ff 	bl	8000508 <__aeabi_dmul>
 800d30a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d30e:	f7f3 fb81 	bl	8000a14 <__aeabi_dcmpge>
 800d312:	9c08      	ldr	r4, [sp, #32]
 800d314:	4626      	mov	r6, r4
 800d316:	2800      	cmp	r0, #0
 800d318:	f040 8248 	bne.w	800d7ac <_dtoa_r+0x95c>
 800d31c:	2331      	movs	r3, #49	; 0x31
 800d31e:	9f03      	ldr	r7, [sp, #12]
 800d320:	f10a 0a01 	add.w	sl, sl, #1
 800d324:	f807 3b01 	strb.w	r3, [r7], #1
 800d328:	e244      	b.n	800d7b4 <_dtoa_r+0x964>
 800d32a:	07e2      	lsls	r2, r4, #31
 800d32c:	d505      	bpl.n	800d33a <_dtoa_r+0x4ea>
 800d32e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d332:	f7f3 f8e9 	bl	8000508 <__aeabi_dmul>
 800d336:	2301      	movs	r3, #1
 800d338:	3701      	adds	r7, #1
 800d33a:	1064      	asrs	r4, r4, #1
 800d33c:	3608      	adds	r6, #8
 800d33e:	e76d      	b.n	800d21c <_dtoa_r+0x3cc>
 800d340:	2702      	movs	r7, #2
 800d342:	e770      	b.n	800d226 <_dtoa_r+0x3d6>
 800d344:	46d0      	mov	r8, sl
 800d346:	9c08      	ldr	r4, [sp, #32]
 800d348:	e78f      	b.n	800d26a <_dtoa_r+0x41a>
 800d34a:	9903      	ldr	r1, [sp, #12]
 800d34c:	4b29      	ldr	r3, [pc, #164]	; (800d3f4 <_dtoa_r+0x5a4>)
 800d34e:	4421      	add	r1, r4
 800d350:	9112      	str	r1, [sp, #72]	; 0x48
 800d352:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d354:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d358:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d35c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d360:	2900      	cmp	r1, #0
 800d362:	d055      	beq.n	800d410 <_dtoa_r+0x5c0>
 800d364:	2000      	movs	r0, #0
 800d366:	4929      	ldr	r1, [pc, #164]	; (800d40c <_dtoa_r+0x5bc>)
 800d368:	f7f3 f9f8 	bl	800075c <__aeabi_ddiv>
 800d36c:	463b      	mov	r3, r7
 800d36e:	4632      	mov	r2, r6
 800d370:	f7f2 ff12 	bl	8000198 <__aeabi_dsub>
 800d374:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d378:	9f03      	ldr	r7, [sp, #12]
 800d37a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d37e:	f7f3 fb73 	bl	8000a68 <__aeabi_d2iz>
 800d382:	4604      	mov	r4, r0
 800d384:	f7f3 f856 	bl	8000434 <__aeabi_i2d>
 800d388:	4602      	mov	r2, r0
 800d38a:	460b      	mov	r3, r1
 800d38c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d390:	f7f2 ff02 	bl	8000198 <__aeabi_dsub>
 800d394:	4602      	mov	r2, r0
 800d396:	460b      	mov	r3, r1
 800d398:	3430      	adds	r4, #48	; 0x30
 800d39a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d39e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d3a2:	f807 4b01 	strb.w	r4, [r7], #1
 800d3a6:	f7f3 fb21 	bl	80009ec <__aeabi_dcmplt>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d174      	bne.n	800d498 <_dtoa_r+0x648>
 800d3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3b2:	2000      	movs	r0, #0
 800d3b4:	4911      	ldr	r1, [pc, #68]	; (800d3fc <_dtoa_r+0x5ac>)
 800d3b6:	f7f2 feef 	bl	8000198 <__aeabi_dsub>
 800d3ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d3be:	f7f3 fb15 	bl	80009ec <__aeabi_dcmplt>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	f040 80b7 	bne.w	800d536 <_dtoa_r+0x6e6>
 800d3c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3ca:	429f      	cmp	r7, r3
 800d3cc:	f43f af7a 	beq.w	800d2c4 <_dtoa_r+0x474>
 800d3d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	4b0a      	ldr	r3, [pc, #40]	; (800d400 <_dtoa_r+0x5b0>)
 800d3d8:	f7f3 f896 	bl	8000508 <__aeabi_dmul>
 800d3dc:	2200      	movs	r2, #0
 800d3de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d3e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3e6:	4b06      	ldr	r3, [pc, #24]	; (800d400 <_dtoa_r+0x5b0>)
 800d3e8:	f7f3 f88e 	bl	8000508 <__aeabi_dmul>
 800d3ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3f0:	e7c3      	b.n	800d37a <_dtoa_r+0x52a>
 800d3f2:	bf00      	nop
 800d3f4:	0800f498 	.word	0x0800f498
 800d3f8:	0800f470 	.word	0x0800f470
 800d3fc:	3ff00000 	.word	0x3ff00000
 800d400:	40240000 	.word	0x40240000
 800d404:	401c0000 	.word	0x401c0000
 800d408:	40140000 	.word	0x40140000
 800d40c:	3fe00000 	.word	0x3fe00000
 800d410:	4630      	mov	r0, r6
 800d412:	4639      	mov	r1, r7
 800d414:	f7f3 f878 	bl	8000508 <__aeabi_dmul>
 800d418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d41a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d41e:	9c03      	ldr	r4, [sp, #12]
 800d420:	9314      	str	r3, [sp, #80]	; 0x50
 800d422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d426:	f7f3 fb1f 	bl	8000a68 <__aeabi_d2iz>
 800d42a:	9015      	str	r0, [sp, #84]	; 0x54
 800d42c:	f7f3 f802 	bl	8000434 <__aeabi_i2d>
 800d430:	4602      	mov	r2, r0
 800d432:	460b      	mov	r3, r1
 800d434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d438:	f7f2 feae 	bl	8000198 <__aeabi_dsub>
 800d43c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d43e:	4606      	mov	r6, r0
 800d440:	3330      	adds	r3, #48	; 0x30
 800d442:	f804 3b01 	strb.w	r3, [r4], #1
 800d446:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d448:	460f      	mov	r7, r1
 800d44a:	429c      	cmp	r4, r3
 800d44c:	f04f 0200 	mov.w	r2, #0
 800d450:	d124      	bne.n	800d49c <_dtoa_r+0x64c>
 800d452:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d456:	4bb0      	ldr	r3, [pc, #704]	; (800d718 <_dtoa_r+0x8c8>)
 800d458:	f7f2 fea0 	bl	800019c <__adddf3>
 800d45c:	4602      	mov	r2, r0
 800d45e:	460b      	mov	r3, r1
 800d460:	4630      	mov	r0, r6
 800d462:	4639      	mov	r1, r7
 800d464:	f7f3 fae0 	bl	8000a28 <__aeabi_dcmpgt>
 800d468:	2800      	cmp	r0, #0
 800d46a:	d163      	bne.n	800d534 <_dtoa_r+0x6e4>
 800d46c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d470:	2000      	movs	r0, #0
 800d472:	49a9      	ldr	r1, [pc, #676]	; (800d718 <_dtoa_r+0x8c8>)
 800d474:	f7f2 fe90 	bl	8000198 <__aeabi_dsub>
 800d478:	4602      	mov	r2, r0
 800d47a:	460b      	mov	r3, r1
 800d47c:	4630      	mov	r0, r6
 800d47e:	4639      	mov	r1, r7
 800d480:	f7f3 fab4 	bl	80009ec <__aeabi_dcmplt>
 800d484:	2800      	cmp	r0, #0
 800d486:	f43f af1d 	beq.w	800d2c4 <_dtoa_r+0x474>
 800d48a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d48c:	1e7b      	subs	r3, r7, #1
 800d48e:	9314      	str	r3, [sp, #80]	; 0x50
 800d490:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d494:	2b30      	cmp	r3, #48	; 0x30
 800d496:	d0f8      	beq.n	800d48a <_dtoa_r+0x63a>
 800d498:	46c2      	mov	sl, r8
 800d49a:	e03b      	b.n	800d514 <_dtoa_r+0x6c4>
 800d49c:	4b9f      	ldr	r3, [pc, #636]	; (800d71c <_dtoa_r+0x8cc>)
 800d49e:	f7f3 f833 	bl	8000508 <__aeabi_dmul>
 800d4a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4a6:	e7bc      	b.n	800d422 <_dtoa_r+0x5d2>
 800d4a8:	9f03      	ldr	r7, [sp, #12]
 800d4aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d4ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4b2:	4640      	mov	r0, r8
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	f7f3 f951 	bl	800075c <__aeabi_ddiv>
 800d4ba:	f7f3 fad5 	bl	8000a68 <__aeabi_d2iz>
 800d4be:	4604      	mov	r4, r0
 800d4c0:	f7f2 ffb8 	bl	8000434 <__aeabi_i2d>
 800d4c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4c8:	f7f3 f81e 	bl	8000508 <__aeabi_dmul>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	4640      	mov	r0, r8
 800d4d2:	4649      	mov	r1, r9
 800d4d4:	f7f2 fe60 	bl	8000198 <__aeabi_dsub>
 800d4d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d4dc:	f807 6b01 	strb.w	r6, [r7], #1
 800d4e0:	9e03      	ldr	r6, [sp, #12]
 800d4e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d4e6:	1bbe      	subs	r6, r7, r6
 800d4e8:	45b4      	cmp	ip, r6
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	d136      	bne.n	800d55e <_dtoa_r+0x70e>
 800d4f0:	f7f2 fe54 	bl	800019c <__adddf3>
 800d4f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4f8:	4680      	mov	r8, r0
 800d4fa:	4689      	mov	r9, r1
 800d4fc:	f7f3 fa94 	bl	8000a28 <__aeabi_dcmpgt>
 800d500:	bb58      	cbnz	r0, 800d55a <_dtoa_r+0x70a>
 800d502:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d506:	4640      	mov	r0, r8
 800d508:	4649      	mov	r1, r9
 800d50a:	f7f3 fa65 	bl	80009d8 <__aeabi_dcmpeq>
 800d50e:	b108      	cbz	r0, 800d514 <_dtoa_r+0x6c4>
 800d510:	07e1      	lsls	r1, r4, #31
 800d512:	d422      	bmi.n	800d55a <_dtoa_r+0x70a>
 800d514:	4628      	mov	r0, r5
 800d516:	4659      	mov	r1, fp
 800d518:	f000 fae2 	bl	800dae0 <_Bfree>
 800d51c:	2300      	movs	r3, #0
 800d51e:	703b      	strb	r3, [r7, #0]
 800d520:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d522:	f10a 0001 	add.w	r0, sl, #1
 800d526:	6018      	str	r0, [r3, #0]
 800d528:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f43f acde 	beq.w	800ceec <_dtoa_r+0x9c>
 800d530:	601f      	str	r7, [r3, #0]
 800d532:	e4db      	b.n	800ceec <_dtoa_r+0x9c>
 800d534:	4627      	mov	r7, r4
 800d536:	463b      	mov	r3, r7
 800d538:	461f      	mov	r7, r3
 800d53a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d53e:	2a39      	cmp	r2, #57	; 0x39
 800d540:	d107      	bne.n	800d552 <_dtoa_r+0x702>
 800d542:	9a03      	ldr	r2, [sp, #12]
 800d544:	429a      	cmp	r2, r3
 800d546:	d1f7      	bne.n	800d538 <_dtoa_r+0x6e8>
 800d548:	2230      	movs	r2, #48	; 0x30
 800d54a:	9903      	ldr	r1, [sp, #12]
 800d54c:	f108 0801 	add.w	r8, r8, #1
 800d550:	700a      	strb	r2, [r1, #0]
 800d552:	781a      	ldrb	r2, [r3, #0]
 800d554:	3201      	adds	r2, #1
 800d556:	701a      	strb	r2, [r3, #0]
 800d558:	e79e      	b.n	800d498 <_dtoa_r+0x648>
 800d55a:	46d0      	mov	r8, sl
 800d55c:	e7eb      	b.n	800d536 <_dtoa_r+0x6e6>
 800d55e:	2200      	movs	r2, #0
 800d560:	4b6e      	ldr	r3, [pc, #440]	; (800d71c <_dtoa_r+0x8cc>)
 800d562:	f7f2 ffd1 	bl	8000508 <__aeabi_dmul>
 800d566:	2200      	movs	r2, #0
 800d568:	2300      	movs	r3, #0
 800d56a:	4680      	mov	r8, r0
 800d56c:	4689      	mov	r9, r1
 800d56e:	f7f3 fa33 	bl	80009d8 <__aeabi_dcmpeq>
 800d572:	2800      	cmp	r0, #0
 800d574:	d09b      	beq.n	800d4ae <_dtoa_r+0x65e>
 800d576:	e7cd      	b.n	800d514 <_dtoa_r+0x6c4>
 800d578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d57a:	2a00      	cmp	r2, #0
 800d57c:	f000 80d0 	beq.w	800d720 <_dtoa_r+0x8d0>
 800d580:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d582:	2a01      	cmp	r2, #1
 800d584:	f300 80ae 	bgt.w	800d6e4 <_dtoa_r+0x894>
 800d588:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d58a:	2a00      	cmp	r2, #0
 800d58c:	f000 80a6 	beq.w	800d6dc <_dtoa_r+0x88c>
 800d590:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d594:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d596:	9f06      	ldr	r7, [sp, #24]
 800d598:	9a06      	ldr	r2, [sp, #24]
 800d59a:	2101      	movs	r1, #1
 800d59c:	441a      	add	r2, r3
 800d59e:	9206      	str	r2, [sp, #24]
 800d5a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	441a      	add	r2, r3
 800d5a6:	9209      	str	r2, [sp, #36]	; 0x24
 800d5a8:	f000 fb50 	bl	800dc4c <__i2b>
 800d5ac:	4606      	mov	r6, r0
 800d5ae:	2f00      	cmp	r7, #0
 800d5b0:	dd0c      	ble.n	800d5cc <_dtoa_r+0x77c>
 800d5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	dd09      	ble.n	800d5cc <_dtoa_r+0x77c>
 800d5b8:	42bb      	cmp	r3, r7
 800d5ba:	bfa8      	it	ge
 800d5bc:	463b      	movge	r3, r7
 800d5be:	9a06      	ldr	r2, [sp, #24]
 800d5c0:	1aff      	subs	r7, r7, r3
 800d5c2:	1ad2      	subs	r2, r2, r3
 800d5c4:	9206      	str	r2, [sp, #24]
 800d5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5c8:	1ad3      	subs	r3, r2, r3
 800d5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5ce:	b1f3      	cbz	r3, 800d60e <_dtoa_r+0x7be>
 800d5d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	f000 80a8 	beq.w	800d728 <_dtoa_r+0x8d8>
 800d5d8:	2c00      	cmp	r4, #0
 800d5da:	dd10      	ble.n	800d5fe <_dtoa_r+0x7ae>
 800d5dc:	4631      	mov	r1, r6
 800d5de:	4622      	mov	r2, r4
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	f000 fbf1 	bl	800ddc8 <__pow5mult>
 800d5e6:	465a      	mov	r2, fp
 800d5e8:	4601      	mov	r1, r0
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	f000 fb43 	bl	800dc78 <__multiply>
 800d5f2:	4680      	mov	r8, r0
 800d5f4:	4659      	mov	r1, fp
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f000 fa72 	bl	800dae0 <_Bfree>
 800d5fc:	46c3      	mov	fp, r8
 800d5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d600:	1b1a      	subs	r2, r3, r4
 800d602:	d004      	beq.n	800d60e <_dtoa_r+0x7be>
 800d604:	4659      	mov	r1, fp
 800d606:	4628      	mov	r0, r5
 800d608:	f000 fbde 	bl	800ddc8 <__pow5mult>
 800d60c:	4683      	mov	fp, r0
 800d60e:	2101      	movs	r1, #1
 800d610:	4628      	mov	r0, r5
 800d612:	f000 fb1b 	bl	800dc4c <__i2b>
 800d616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d618:	4604      	mov	r4, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	f340 8086 	ble.w	800d72c <_dtoa_r+0x8dc>
 800d620:	461a      	mov	r2, r3
 800d622:	4601      	mov	r1, r0
 800d624:	4628      	mov	r0, r5
 800d626:	f000 fbcf 	bl	800ddc8 <__pow5mult>
 800d62a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d62c:	4604      	mov	r4, r0
 800d62e:	2b01      	cmp	r3, #1
 800d630:	dd7f      	ble.n	800d732 <_dtoa_r+0x8e2>
 800d632:	f04f 0800 	mov.w	r8, #0
 800d636:	6923      	ldr	r3, [r4, #16]
 800d638:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d63c:	6918      	ldr	r0, [r3, #16]
 800d63e:	f000 fab7 	bl	800dbb0 <__hi0bits>
 800d642:	f1c0 0020 	rsb	r0, r0, #32
 800d646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d648:	4418      	add	r0, r3
 800d64a:	f010 001f 	ands.w	r0, r0, #31
 800d64e:	f000 8092 	beq.w	800d776 <_dtoa_r+0x926>
 800d652:	f1c0 0320 	rsb	r3, r0, #32
 800d656:	2b04      	cmp	r3, #4
 800d658:	f340 808a 	ble.w	800d770 <_dtoa_r+0x920>
 800d65c:	f1c0 001c 	rsb	r0, r0, #28
 800d660:	9b06      	ldr	r3, [sp, #24]
 800d662:	4407      	add	r7, r0
 800d664:	4403      	add	r3, r0
 800d666:	9306      	str	r3, [sp, #24]
 800d668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d66a:	4403      	add	r3, r0
 800d66c:	9309      	str	r3, [sp, #36]	; 0x24
 800d66e:	9b06      	ldr	r3, [sp, #24]
 800d670:	2b00      	cmp	r3, #0
 800d672:	dd05      	ble.n	800d680 <_dtoa_r+0x830>
 800d674:	4659      	mov	r1, fp
 800d676:	461a      	mov	r2, r3
 800d678:	4628      	mov	r0, r5
 800d67a:	f000 fbff 	bl	800de7c <__lshift>
 800d67e:	4683      	mov	fp, r0
 800d680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d682:	2b00      	cmp	r3, #0
 800d684:	dd05      	ble.n	800d692 <_dtoa_r+0x842>
 800d686:	4621      	mov	r1, r4
 800d688:	461a      	mov	r2, r3
 800d68a:	4628      	mov	r0, r5
 800d68c:	f000 fbf6 	bl	800de7c <__lshift>
 800d690:	4604      	mov	r4, r0
 800d692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d694:	2b00      	cmp	r3, #0
 800d696:	d070      	beq.n	800d77a <_dtoa_r+0x92a>
 800d698:	4621      	mov	r1, r4
 800d69a:	4658      	mov	r0, fp
 800d69c:	f000 fc5e 	bl	800df5c <__mcmp>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	da6a      	bge.n	800d77a <_dtoa_r+0x92a>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	4659      	mov	r1, fp
 800d6a8:	220a      	movs	r2, #10
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	f000 fa3a 	bl	800db24 <__multadd>
 800d6b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6b2:	4683      	mov	fp, r0
 800d6b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f000 8194 	beq.w	800d9e6 <_dtoa_r+0xb96>
 800d6be:	4631      	mov	r1, r6
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	220a      	movs	r2, #10
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	f000 fa2d 	bl	800db24 <__multadd>
 800d6ca:	f1b9 0f00 	cmp.w	r9, #0
 800d6ce:	4606      	mov	r6, r0
 800d6d0:	f300 8093 	bgt.w	800d7fa <_dtoa_r+0x9aa>
 800d6d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d6d6:	2b02      	cmp	r3, #2
 800d6d8:	dc57      	bgt.n	800d78a <_dtoa_r+0x93a>
 800d6da:	e08e      	b.n	800d7fa <_dtoa_r+0x9aa>
 800d6dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d6de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d6e2:	e757      	b.n	800d594 <_dtoa_r+0x744>
 800d6e4:	9b08      	ldr	r3, [sp, #32]
 800d6e6:	1e5c      	subs	r4, r3, #1
 800d6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ea:	42a3      	cmp	r3, r4
 800d6ec:	bfb7      	itett	lt
 800d6ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d6f0:	1b1c      	subge	r4, r3, r4
 800d6f2:	1ae2      	sublt	r2, r4, r3
 800d6f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d6f6:	bfbe      	ittt	lt
 800d6f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d6fa:	189b      	addlt	r3, r3, r2
 800d6fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d6fe:	9b08      	ldr	r3, [sp, #32]
 800d700:	bfb8      	it	lt
 800d702:	2400      	movlt	r4, #0
 800d704:	2b00      	cmp	r3, #0
 800d706:	bfbb      	ittet	lt
 800d708:	9b06      	ldrlt	r3, [sp, #24]
 800d70a:	9a08      	ldrlt	r2, [sp, #32]
 800d70c:	9f06      	ldrge	r7, [sp, #24]
 800d70e:	1a9f      	sublt	r7, r3, r2
 800d710:	bfac      	ite	ge
 800d712:	9b08      	ldrge	r3, [sp, #32]
 800d714:	2300      	movlt	r3, #0
 800d716:	e73f      	b.n	800d598 <_dtoa_r+0x748>
 800d718:	3fe00000 	.word	0x3fe00000
 800d71c:	40240000 	.word	0x40240000
 800d720:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d722:	9f06      	ldr	r7, [sp, #24]
 800d724:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d726:	e742      	b.n	800d5ae <_dtoa_r+0x75e>
 800d728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d72a:	e76b      	b.n	800d604 <_dtoa_r+0x7b4>
 800d72c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d72e:	2b01      	cmp	r3, #1
 800d730:	dc19      	bgt.n	800d766 <_dtoa_r+0x916>
 800d732:	9b04      	ldr	r3, [sp, #16]
 800d734:	b9bb      	cbnz	r3, 800d766 <_dtoa_r+0x916>
 800d736:	9b05      	ldr	r3, [sp, #20]
 800d738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d73c:	b99b      	cbnz	r3, 800d766 <_dtoa_r+0x916>
 800d73e:	9b05      	ldr	r3, [sp, #20]
 800d740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d744:	0d1b      	lsrs	r3, r3, #20
 800d746:	051b      	lsls	r3, r3, #20
 800d748:	b183      	cbz	r3, 800d76c <_dtoa_r+0x91c>
 800d74a:	f04f 0801 	mov.w	r8, #1
 800d74e:	9b06      	ldr	r3, [sp, #24]
 800d750:	3301      	adds	r3, #1
 800d752:	9306      	str	r3, [sp, #24]
 800d754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d756:	3301      	adds	r3, #1
 800d758:	9309      	str	r3, [sp, #36]	; 0x24
 800d75a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f47f af6a 	bne.w	800d636 <_dtoa_r+0x7e6>
 800d762:	2001      	movs	r0, #1
 800d764:	e76f      	b.n	800d646 <_dtoa_r+0x7f6>
 800d766:	f04f 0800 	mov.w	r8, #0
 800d76a:	e7f6      	b.n	800d75a <_dtoa_r+0x90a>
 800d76c:	4698      	mov	r8, r3
 800d76e:	e7f4      	b.n	800d75a <_dtoa_r+0x90a>
 800d770:	f43f af7d 	beq.w	800d66e <_dtoa_r+0x81e>
 800d774:	4618      	mov	r0, r3
 800d776:	301c      	adds	r0, #28
 800d778:	e772      	b.n	800d660 <_dtoa_r+0x810>
 800d77a:	9b08      	ldr	r3, [sp, #32]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	dc36      	bgt.n	800d7ee <_dtoa_r+0x99e>
 800d780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d782:	2b02      	cmp	r3, #2
 800d784:	dd33      	ble.n	800d7ee <_dtoa_r+0x99e>
 800d786:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d78a:	f1b9 0f00 	cmp.w	r9, #0
 800d78e:	d10d      	bne.n	800d7ac <_dtoa_r+0x95c>
 800d790:	4621      	mov	r1, r4
 800d792:	464b      	mov	r3, r9
 800d794:	2205      	movs	r2, #5
 800d796:	4628      	mov	r0, r5
 800d798:	f000 f9c4 	bl	800db24 <__multadd>
 800d79c:	4601      	mov	r1, r0
 800d79e:	4604      	mov	r4, r0
 800d7a0:	4658      	mov	r0, fp
 800d7a2:	f000 fbdb 	bl	800df5c <__mcmp>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	f73f adb8 	bgt.w	800d31c <_dtoa_r+0x4cc>
 800d7ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d7ae:	9f03      	ldr	r7, [sp, #12]
 800d7b0:	ea6f 0a03 	mvn.w	sl, r3
 800d7b4:	f04f 0800 	mov.w	r8, #0
 800d7b8:	4621      	mov	r1, r4
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	f000 f990 	bl	800dae0 <_Bfree>
 800d7c0:	2e00      	cmp	r6, #0
 800d7c2:	f43f aea7 	beq.w	800d514 <_dtoa_r+0x6c4>
 800d7c6:	f1b8 0f00 	cmp.w	r8, #0
 800d7ca:	d005      	beq.n	800d7d8 <_dtoa_r+0x988>
 800d7cc:	45b0      	cmp	r8, r6
 800d7ce:	d003      	beq.n	800d7d8 <_dtoa_r+0x988>
 800d7d0:	4641      	mov	r1, r8
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	f000 f984 	bl	800dae0 <_Bfree>
 800d7d8:	4631      	mov	r1, r6
 800d7da:	4628      	mov	r0, r5
 800d7dc:	f000 f980 	bl	800dae0 <_Bfree>
 800d7e0:	e698      	b.n	800d514 <_dtoa_r+0x6c4>
 800d7e2:	2400      	movs	r4, #0
 800d7e4:	4626      	mov	r6, r4
 800d7e6:	e7e1      	b.n	800d7ac <_dtoa_r+0x95c>
 800d7e8:	46c2      	mov	sl, r8
 800d7ea:	4626      	mov	r6, r4
 800d7ec:	e596      	b.n	800d31c <_dtoa_r+0x4cc>
 800d7ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f000 80fd 	beq.w	800d9f4 <_dtoa_r+0xba4>
 800d7fa:	2f00      	cmp	r7, #0
 800d7fc:	dd05      	ble.n	800d80a <_dtoa_r+0x9ba>
 800d7fe:	4631      	mov	r1, r6
 800d800:	463a      	mov	r2, r7
 800d802:	4628      	mov	r0, r5
 800d804:	f000 fb3a 	bl	800de7c <__lshift>
 800d808:	4606      	mov	r6, r0
 800d80a:	f1b8 0f00 	cmp.w	r8, #0
 800d80e:	d05c      	beq.n	800d8ca <_dtoa_r+0xa7a>
 800d810:	4628      	mov	r0, r5
 800d812:	6871      	ldr	r1, [r6, #4]
 800d814:	f000 f924 	bl	800da60 <_Balloc>
 800d818:	4607      	mov	r7, r0
 800d81a:	b928      	cbnz	r0, 800d828 <_dtoa_r+0x9d8>
 800d81c:	4602      	mov	r2, r0
 800d81e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d822:	4b7f      	ldr	r3, [pc, #508]	; (800da20 <_dtoa_r+0xbd0>)
 800d824:	f7ff bb28 	b.w	800ce78 <_dtoa_r+0x28>
 800d828:	6932      	ldr	r2, [r6, #16]
 800d82a:	f106 010c 	add.w	r1, r6, #12
 800d82e:	3202      	adds	r2, #2
 800d830:	0092      	lsls	r2, r2, #2
 800d832:	300c      	adds	r0, #12
 800d834:	f7fe fdd4 	bl	800c3e0 <memcpy>
 800d838:	2201      	movs	r2, #1
 800d83a:	4639      	mov	r1, r7
 800d83c:	4628      	mov	r0, r5
 800d83e:	f000 fb1d 	bl	800de7c <__lshift>
 800d842:	46b0      	mov	r8, r6
 800d844:	4606      	mov	r6, r0
 800d846:	9b03      	ldr	r3, [sp, #12]
 800d848:	3301      	adds	r3, #1
 800d84a:	9308      	str	r3, [sp, #32]
 800d84c:	9b03      	ldr	r3, [sp, #12]
 800d84e:	444b      	add	r3, r9
 800d850:	930a      	str	r3, [sp, #40]	; 0x28
 800d852:	9b04      	ldr	r3, [sp, #16]
 800d854:	f003 0301 	and.w	r3, r3, #1
 800d858:	9309      	str	r3, [sp, #36]	; 0x24
 800d85a:	9b08      	ldr	r3, [sp, #32]
 800d85c:	4621      	mov	r1, r4
 800d85e:	3b01      	subs	r3, #1
 800d860:	4658      	mov	r0, fp
 800d862:	9304      	str	r3, [sp, #16]
 800d864:	f7ff fa66 	bl	800cd34 <quorem>
 800d868:	4603      	mov	r3, r0
 800d86a:	4641      	mov	r1, r8
 800d86c:	3330      	adds	r3, #48	; 0x30
 800d86e:	9006      	str	r0, [sp, #24]
 800d870:	4658      	mov	r0, fp
 800d872:	930b      	str	r3, [sp, #44]	; 0x2c
 800d874:	f000 fb72 	bl	800df5c <__mcmp>
 800d878:	4632      	mov	r2, r6
 800d87a:	4681      	mov	r9, r0
 800d87c:	4621      	mov	r1, r4
 800d87e:	4628      	mov	r0, r5
 800d880:	f000 fb88 	bl	800df94 <__mdiff>
 800d884:	68c2      	ldr	r2, [r0, #12]
 800d886:	4607      	mov	r7, r0
 800d888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d88a:	bb02      	cbnz	r2, 800d8ce <_dtoa_r+0xa7e>
 800d88c:	4601      	mov	r1, r0
 800d88e:	4658      	mov	r0, fp
 800d890:	f000 fb64 	bl	800df5c <__mcmp>
 800d894:	4602      	mov	r2, r0
 800d896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d898:	4639      	mov	r1, r7
 800d89a:	4628      	mov	r0, r5
 800d89c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d8a0:	f000 f91e 	bl	800dae0 <_Bfree>
 800d8a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d8a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d8a8:	9f08      	ldr	r7, [sp, #32]
 800d8aa:	ea43 0102 	orr.w	r1, r3, r2
 800d8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8b0:	430b      	orrs	r3, r1
 800d8b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8b4:	d10d      	bne.n	800d8d2 <_dtoa_r+0xa82>
 800d8b6:	2b39      	cmp	r3, #57	; 0x39
 800d8b8:	d029      	beq.n	800d90e <_dtoa_r+0xabe>
 800d8ba:	f1b9 0f00 	cmp.w	r9, #0
 800d8be:	dd01      	ble.n	800d8c4 <_dtoa_r+0xa74>
 800d8c0:	9b06      	ldr	r3, [sp, #24]
 800d8c2:	3331      	adds	r3, #49	; 0x31
 800d8c4:	9a04      	ldr	r2, [sp, #16]
 800d8c6:	7013      	strb	r3, [r2, #0]
 800d8c8:	e776      	b.n	800d7b8 <_dtoa_r+0x968>
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	e7b9      	b.n	800d842 <_dtoa_r+0x9f2>
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	e7e2      	b.n	800d898 <_dtoa_r+0xa48>
 800d8d2:	f1b9 0f00 	cmp.w	r9, #0
 800d8d6:	db06      	blt.n	800d8e6 <_dtoa_r+0xa96>
 800d8d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d8da:	ea41 0909 	orr.w	r9, r1, r9
 800d8de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8e0:	ea59 0101 	orrs.w	r1, r9, r1
 800d8e4:	d120      	bne.n	800d928 <_dtoa_r+0xad8>
 800d8e6:	2a00      	cmp	r2, #0
 800d8e8:	ddec      	ble.n	800d8c4 <_dtoa_r+0xa74>
 800d8ea:	4659      	mov	r1, fp
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	9308      	str	r3, [sp, #32]
 800d8f2:	f000 fac3 	bl	800de7c <__lshift>
 800d8f6:	4621      	mov	r1, r4
 800d8f8:	4683      	mov	fp, r0
 800d8fa:	f000 fb2f 	bl	800df5c <__mcmp>
 800d8fe:	2800      	cmp	r0, #0
 800d900:	9b08      	ldr	r3, [sp, #32]
 800d902:	dc02      	bgt.n	800d90a <_dtoa_r+0xaba>
 800d904:	d1de      	bne.n	800d8c4 <_dtoa_r+0xa74>
 800d906:	07da      	lsls	r2, r3, #31
 800d908:	d5dc      	bpl.n	800d8c4 <_dtoa_r+0xa74>
 800d90a:	2b39      	cmp	r3, #57	; 0x39
 800d90c:	d1d8      	bne.n	800d8c0 <_dtoa_r+0xa70>
 800d90e:	2339      	movs	r3, #57	; 0x39
 800d910:	9a04      	ldr	r2, [sp, #16]
 800d912:	7013      	strb	r3, [r2, #0]
 800d914:	463b      	mov	r3, r7
 800d916:	461f      	mov	r7, r3
 800d918:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d91c:	3b01      	subs	r3, #1
 800d91e:	2a39      	cmp	r2, #57	; 0x39
 800d920:	d050      	beq.n	800d9c4 <_dtoa_r+0xb74>
 800d922:	3201      	adds	r2, #1
 800d924:	701a      	strb	r2, [r3, #0]
 800d926:	e747      	b.n	800d7b8 <_dtoa_r+0x968>
 800d928:	2a00      	cmp	r2, #0
 800d92a:	dd03      	ble.n	800d934 <_dtoa_r+0xae4>
 800d92c:	2b39      	cmp	r3, #57	; 0x39
 800d92e:	d0ee      	beq.n	800d90e <_dtoa_r+0xabe>
 800d930:	3301      	adds	r3, #1
 800d932:	e7c7      	b.n	800d8c4 <_dtoa_r+0xa74>
 800d934:	9a08      	ldr	r2, [sp, #32]
 800d936:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d938:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d93c:	428a      	cmp	r2, r1
 800d93e:	d02a      	beq.n	800d996 <_dtoa_r+0xb46>
 800d940:	4659      	mov	r1, fp
 800d942:	2300      	movs	r3, #0
 800d944:	220a      	movs	r2, #10
 800d946:	4628      	mov	r0, r5
 800d948:	f000 f8ec 	bl	800db24 <__multadd>
 800d94c:	45b0      	cmp	r8, r6
 800d94e:	4683      	mov	fp, r0
 800d950:	f04f 0300 	mov.w	r3, #0
 800d954:	f04f 020a 	mov.w	r2, #10
 800d958:	4641      	mov	r1, r8
 800d95a:	4628      	mov	r0, r5
 800d95c:	d107      	bne.n	800d96e <_dtoa_r+0xb1e>
 800d95e:	f000 f8e1 	bl	800db24 <__multadd>
 800d962:	4680      	mov	r8, r0
 800d964:	4606      	mov	r6, r0
 800d966:	9b08      	ldr	r3, [sp, #32]
 800d968:	3301      	adds	r3, #1
 800d96a:	9308      	str	r3, [sp, #32]
 800d96c:	e775      	b.n	800d85a <_dtoa_r+0xa0a>
 800d96e:	f000 f8d9 	bl	800db24 <__multadd>
 800d972:	4631      	mov	r1, r6
 800d974:	4680      	mov	r8, r0
 800d976:	2300      	movs	r3, #0
 800d978:	220a      	movs	r2, #10
 800d97a:	4628      	mov	r0, r5
 800d97c:	f000 f8d2 	bl	800db24 <__multadd>
 800d980:	4606      	mov	r6, r0
 800d982:	e7f0      	b.n	800d966 <_dtoa_r+0xb16>
 800d984:	f1b9 0f00 	cmp.w	r9, #0
 800d988:	bfcc      	ite	gt
 800d98a:	464f      	movgt	r7, r9
 800d98c:	2701      	movle	r7, #1
 800d98e:	f04f 0800 	mov.w	r8, #0
 800d992:	9a03      	ldr	r2, [sp, #12]
 800d994:	4417      	add	r7, r2
 800d996:	4659      	mov	r1, fp
 800d998:	2201      	movs	r2, #1
 800d99a:	4628      	mov	r0, r5
 800d99c:	9308      	str	r3, [sp, #32]
 800d99e:	f000 fa6d 	bl	800de7c <__lshift>
 800d9a2:	4621      	mov	r1, r4
 800d9a4:	4683      	mov	fp, r0
 800d9a6:	f000 fad9 	bl	800df5c <__mcmp>
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	dcb2      	bgt.n	800d914 <_dtoa_r+0xac4>
 800d9ae:	d102      	bne.n	800d9b6 <_dtoa_r+0xb66>
 800d9b0:	9b08      	ldr	r3, [sp, #32]
 800d9b2:	07db      	lsls	r3, r3, #31
 800d9b4:	d4ae      	bmi.n	800d914 <_dtoa_r+0xac4>
 800d9b6:	463b      	mov	r3, r7
 800d9b8:	461f      	mov	r7, r3
 800d9ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d9be:	2a30      	cmp	r2, #48	; 0x30
 800d9c0:	d0fa      	beq.n	800d9b8 <_dtoa_r+0xb68>
 800d9c2:	e6f9      	b.n	800d7b8 <_dtoa_r+0x968>
 800d9c4:	9a03      	ldr	r2, [sp, #12]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d1a5      	bne.n	800d916 <_dtoa_r+0xac6>
 800d9ca:	2331      	movs	r3, #49	; 0x31
 800d9cc:	f10a 0a01 	add.w	sl, sl, #1
 800d9d0:	e779      	b.n	800d8c6 <_dtoa_r+0xa76>
 800d9d2:	4b14      	ldr	r3, [pc, #80]	; (800da24 <_dtoa_r+0xbd4>)
 800d9d4:	f7ff baa8 	b.w	800cf28 <_dtoa_r+0xd8>
 800d9d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f47f aa81 	bne.w	800cee2 <_dtoa_r+0x92>
 800d9e0:	4b11      	ldr	r3, [pc, #68]	; (800da28 <_dtoa_r+0xbd8>)
 800d9e2:	f7ff baa1 	b.w	800cf28 <_dtoa_r+0xd8>
 800d9e6:	f1b9 0f00 	cmp.w	r9, #0
 800d9ea:	dc03      	bgt.n	800d9f4 <_dtoa_r+0xba4>
 800d9ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	f73f aecb 	bgt.w	800d78a <_dtoa_r+0x93a>
 800d9f4:	9f03      	ldr	r7, [sp, #12]
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	4658      	mov	r0, fp
 800d9fa:	f7ff f99b 	bl	800cd34 <quorem>
 800d9fe:	9a03      	ldr	r2, [sp, #12]
 800da00:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800da04:	f807 3b01 	strb.w	r3, [r7], #1
 800da08:	1aba      	subs	r2, r7, r2
 800da0a:	4591      	cmp	r9, r2
 800da0c:	ddba      	ble.n	800d984 <_dtoa_r+0xb34>
 800da0e:	4659      	mov	r1, fp
 800da10:	2300      	movs	r3, #0
 800da12:	220a      	movs	r2, #10
 800da14:	4628      	mov	r0, r5
 800da16:	f000 f885 	bl	800db24 <__multadd>
 800da1a:	4683      	mov	fp, r0
 800da1c:	e7eb      	b.n	800d9f6 <_dtoa_r+0xba6>
 800da1e:	bf00      	nop
 800da20:	0800f3ff 	.word	0x0800f3ff
 800da24:	0800f35c 	.word	0x0800f35c
 800da28:	0800f380 	.word	0x0800f380

0800da2c <_localeconv_r>:
 800da2c:	4800      	ldr	r0, [pc, #0]	; (800da30 <_localeconv_r+0x4>)
 800da2e:	4770      	bx	lr
 800da30:	200002e4 	.word	0x200002e4

0800da34 <malloc>:
 800da34:	4b02      	ldr	r3, [pc, #8]	; (800da40 <malloc+0xc>)
 800da36:	4601      	mov	r1, r0
 800da38:	6818      	ldr	r0, [r3, #0]
 800da3a:	f000 bc0f 	b.w	800e25c <_malloc_r>
 800da3e:	bf00      	nop
 800da40:	20000190 	.word	0x20000190

0800da44 <memchr>:
 800da44:	4603      	mov	r3, r0
 800da46:	b510      	push	{r4, lr}
 800da48:	b2c9      	uxtb	r1, r1
 800da4a:	4402      	add	r2, r0
 800da4c:	4293      	cmp	r3, r2
 800da4e:	4618      	mov	r0, r3
 800da50:	d101      	bne.n	800da56 <memchr+0x12>
 800da52:	2000      	movs	r0, #0
 800da54:	e003      	b.n	800da5e <memchr+0x1a>
 800da56:	7804      	ldrb	r4, [r0, #0]
 800da58:	3301      	adds	r3, #1
 800da5a:	428c      	cmp	r4, r1
 800da5c:	d1f6      	bne.n	800da4c <memchr+0x8>
 800da5e:	bd10      	pop	{r4, pc}

0800da60 <_Balloc>:
 800da60:	b570      	push	{r4, r5, r6, lr}
 800da62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da64:	4604      	mov	r4, r0
 800da66:	460d      	mov	r5, r1
 800da68:	b976      	cbnz	r6, 800da88 <_Balloc+0x28>
 800da6a:	2010      	movs	r0, #16
 800da6c:	f7ff ffe2 	bl	800da34 <malloc>
 800da70:	4602      	mov	r2, r0
 800da72:	6260      	str	r0, [r4, #36]	; 0x24
 800da74:	b920      	cbnz	r0, 800da80 <_Balloc+0x20>
 800da76:	2166      	movs	r1, #102	; 0x66
 800da78:	4b17      	ldr	r3, [pc, #92]	; (800dad8 <_Balloc+0x78>)
 800da7a:	4818      	ldr	r0, [pc, #96]	; (800dadc <_Balloc+0x7c>)
 800da7c:	f000 fdce 	bl	800e61c <__assert_func>
 800da80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da84:	6006      	str	r6, [r0, #0]
 800da86:	60c6      	str	r6, [r0, #12]
 800da88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800da8a:	68f3      	ldr	r3, [r6, #12]
 800da8c:	b183      	cbz	r3, 800dab0 <_Balloc+0x50>
 800da8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da96:	b9b8      	cbnz	r0, 800dac8 <_Balloc+0x68>
 800da98:	2101      	movs	r1, #1
 800da9a:	fa01 f605 	lsl.w	r6, r1, r5
 800da9e:	1d72      	adds	r2, r6, #5
 800daa0:	4620      	mov	r0, r4
 800daa2:	0092      	lsls	r2, r2, #2
 800daa4:	f000 fb5e 	bl	800e164 <_calloc_r>
 800daa8:	b160      	cbz	r0, 800dac4 <_Balloc+0x64>
 800daaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800daae:	e00e      	b.n	800dace <_Balloc+0x6e>
 800dab0:	2221      	movs	r2, #33	; 0x21
 800dab2:	2104      	movs	r1, #4
 800dab4:	4620      	mov	r0, r4
 800dab6:	f000 fb55 	bl	800e164 <_calloc_r>
 800daba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dabc:	60f0      	str	r0, [r6, #12]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d1e4      	bne.n	800da8e <_Balloc+0x2e>
 800dac4:	2000      	movs	r0, #0
 800dac6:	bd70      	pop	{r4, r5, r6, pc}
 800dac8:	6802      	ldr	r2, [r0, #0]
 800daca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dace:	2300      	movs	r3, #0
 800dad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dad4:	e7f7      	b.n	800dac6 <_Balloc+0x66>
 800dad6:	bf00      	nop
 800dad8:	0800f38d 	.word	0x0800f38d
 800dadc:	0800f410 	.word	0x0800f410

0800dae0 <_Bfree>:
 800dae0:	b570      	push	{r4, r5, r6, lr}
 800dae2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dae4:	4605      	mov	r5, r0
 800dae6:	460c      	mov	r4, r1
 800dae8:	b976      	cbnz	r6, 800db08 <_Bfree+0x28>
 800daea:	2010      	movs	r0, #16
 800daec:	f7ff ffa2 	bl	800da34 <malloc>
 800daf0:	4602      	mov	r2, r0
 800daf2:	6268      	str	r0, [r5, #36]	; 0x24
 800daf4:	b920      	cbnz	r0, 800db00 <_Bfree+0x20>
 800daf6:	218a      	movs	r1, #138	; 0x8a
 800daf8:	4b08      	ldr	r3, [pc, #32]	; (800db1c <_Bfree+0x3c>)
 800dafa:	4809      	ldr	r0, [pc, #36]	; (800db20 <_Bfree+0x40>)
 800dafc:	f000 fd8e 	bl	800e61c <__assert_func>
 800db00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db04:	6006      	str	r6, [r0, #0]
 800db06:	60c6      	str	r6, [r0, #12]
 800db08:	b13c      	cbz	r4, 800db1a <_Bfree+0x3a>
 800db0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800db0c:	6862      	ldr	r2, [r4, #4]
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db14:	6021      	str	r1, [r4, #0]
 800db16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db1a:	bd70      	pop	{r4, r5, r6, pc}
 800db1c:	0800f38d 	.word	0x0800f38d
 800db20:	0800f410 	.word	0x0800f410

0800db24 <__multadd>:
 800db24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db28:	4607      	mov	r7, r0
 800db2a:	460c      	mov	r4, r1
 800db2c:	461e      	mov	r6, r3
 800db2e:	2000      	movs	r0, #0
 800db30:	690d      	ldr	r5, [r1, #16]
 800db32:	f101 0c14 	add.w	ip, r1, #20
 800db36:	f8dc 3000 	ldr.w	r3, [ip]
 800db3a:	3001      	adds	r0, #1
 800db3c:	b299      	uxth	r1, r3
 800db3e:	fb02 6101 	mla	r1, r2, r1, r6
 800db42:	0c1e      	lsrs	r6, r3, #16
 800db44:	0c0b      	lsrs	r3, r1, #16
 800db46:	fb02 3306 	mla	r3, r2, r6, r3
 800db4a:	b289      	uxth	r1, r1
 800db4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db50:	4285      	cmp	r5, r0
 800db52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db56:	f84c 1b04 	str.w	r1, [ip], #4
 800db5a:	dcec      	bgt.n	800db36 <__multadd+0x12>
 800db5c:	b30e      	cbz	r6, 800dba2 <__multadd+0x7e>
 800db5e:	68a3      	ldr	r3, [r4, #8]
 800db60:	42ab      	cmp	r3, r5
 800db62:	dc19      	bgt.n	800db98 <__multadd+0x74>
 800db64:	6861      	ldr	r1, [r4, #4]
 800db66:	4638      	mov	r0, r7
 800db68:	3101      	adds	r1, #1
 800db6a:	f7ff ff79 	bl	800da60 <_Balloc>
 800db6e:	4680      	mov	r8, r0
 800db70:	b928      	cbnz	r0, 800db7e <__multadd+0x5a>
 800db72:	4602      	mov	r2, r0
 800db74:	21b5      	movs	r1, #181	; 0xb5
 800db76:	4b0c      	ldr	r3, [pc, #48]	; (800dba8 <__multadd+0x84>)
 800db78:	480c      	ldr	r0, [pc, #48]	; (800dbac <__multadd+0x88>)
 800db7a:	f000 fd4f 	bl	800e61c <__assert_func>
 800db7e:	6922      	ldr	r2, [r4, #16]
 800db80:	f104 010c 	add.w	r1, r4, #12
 800db84:	3202      	adds	r2, #2
 800db86:	0092      	lsls	r2, r2, #2
 800db88:	300c      	adds	r0, #12
 800db8a:	f7fe fc29 	bl	800c3e0 <memcpy>
 800db8e:	4621      	mov	r1, r4
 800db90:	4638      	mov	r0, r7
 800db92:	f7ff ffa5 	bl	800dae0 <_Bfree>
 800db96:	4644      	mov	r4, r8
 800db98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db9c:	3501      	adds	r5, #1
 800db9e:	615e      	str	r6, [r3, #20]
 800dba0:	6125      	str	r5, [r4, #16]
 800dba2:	4620      	mov	r0, r4
 800dba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dba8:	0800f3ff 	.word	0x0800f3ff
 800dbac:	0800f410 	.word	0x0800f410

0800dbb0 <__hi0bits>:
 800dbb0:	0c02      	lsrs	r2, r0, #16
 800dbb2:	0412      	lsls	r2, r2, #16
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	b9ca      	cbnz	r2, 800dbec <__hi0bits+0x3c>
 800dbb8:	0403      	lsls	r3, r0, #16
 800dbba:	2010      	movs	r0, #16
 800dbbc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dbc0:	bf04      	itt	eq
 800dbc2:	021b      	lsleq	r3, r3, #8
 800dbc4:	3008      	addeq	r0, #8
 800dbc6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dbca:	bf04      	itt	eq
 800dbcc:	011b      	lsleq	r3, r3, #4
 800dbce:	3004      	addeq	r0, #4
 800dbd0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dbd4:	bf04      	itt	eq
 800dbd6:	009b      	lsleq	r3, r3, #2
 800dbd8:	3002      	addeq	r0, #2
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	db05      	blt.n	800dbea <__hi0bits+0x3a>
 800dbde:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800dbe2:	f100 0001 	add.w	r0, r0, #1
 800dbe6:	bf08      	it	eq
 800dbe8:	2020      	moveq	r0, #32
 800dbea:	4770      	bx	lr
 800dbec:	2000      	movs	r0, #0
 800dbee:	e7e5      	b.n	800dbbc <__hi0bits+0xc>

0800dbf0 <__lo0bits>:
 800dbf0:	6803      	ldr	r3, [r0, #0]
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	f013 0007 	ands.w	r0, r3, #7
 800dbf8:	d00b      	beq.n	800dc12 <__lo0bits+0x22>
 800dbfa:	07d9      	lsls	r1, r3, #31
 800dbfc:	d421      	bmi.n	800dc42 <__lo0bits+0x52>
 800dbfe:	0798      	lsls	r0, r3, #30
 800dc00:	bf49      	itett	mi
 800dc02:	085b      	lsrmi	r3, r3, #1
 800dc04:	089b      	lsrpl	r3, r3, #2
 800dc06:	2001      	movmi	r0, #1
 800dc08:	6013      	strmi	r3, [r2, #0]
 800dc0a:	bf5c      	itt	pl
 800dc0c:	2002      	movpl	r0, #2
 800dc0e:	6013      	strpl	r3, [r2, #0]
 800dc10:	4770      	bx	lr
 800dc12:	b299      	uxth	r1, r3
 800dc14:	b909      	cbnz	r1, 800dc1a <__lo0bits+0x2a>
 800dc16:	2010      	movs	r0, #16
 800dc18:	0c1b      	lsrs	r3, r3, #16
 800dc1a:	b2d9      	uxtb	r1, r3
 800dc1c:	b909      	cbnz	r1, 800dc22 <__lo0bits+0x32>
 800dc1e:	3008      	adds	r0, #8
 800dc20:	0a1b      	lsrs	r3, r3, #8
 800dc22:	0719      	lsls	r1, r3, #28
 800dc24:	bf04      	itt	eq
 800dc26:	091b      	lsreq	r3, r3, #4
 800dc28:	3004      	addeq	r0, #4
 800dc2a:	0799      	lsls	r1, r3, #30
 800dc2c:	bf04      	itt	eq
 800dc2e:	089b      	lsreq	r3, r3, #2
 800dc30:	3002      	addeq	r0, #2
 800dc32:	07d9      	lsls	r1, r3, #31
 800dc34:	d403      	bmi.n	800dc3e <__lo0bits+0x4e>
 800dc36:	085b      	lsrs	r3, r3, #1
 800dc38:	f100 0001 	add.w	r0, r0, #1
 800dc3c:	d003      	beq.n	800dc46 <__lo0bits+0x56>
 800dc3e:	6013      	str	r3, [r2, #0]
 800dc40:	4770      	bx	lr
 800dc42:	2000      	movs	r0, #0
 800dc44:	4770      	bx	lr
 800dc46:	2020      	movs	r0, #32
 800dc48:	4770      	bx	lr
	...

0800dc4c <__i2b>:
 800dc4c:	b510      	push	{r4, lr}
 800dc4e:	460c      	mov	r4, r1
 800dc50:	2101      	movs	r1, #1
 800dc52:	f7ff ff05 	bl	800da60 <_Balloc>
 800dc56:	4602      	mov	r2, r0
 800dc58:	b928      	cbnz	r0, 800dc66 <__i2b+0x1a>
 800dc5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dc5e:	4b04      	ldr	r3, [pc, #16]	; (800dc70 <__i2b+0x24>)
 800dc60:	4804      	ldr	r0, [pc, #16]	; (800dc74 <__i2b+0x28>)
 800dc62:	f000 fcdb 	bl	800e61c <__assert_func>
 800dc66:	2301      	movs	r3, #1
 800dc68:	6144      	str	r4, [r0, #20]
 800dc6a:	6103      	str	r3, [r0, #16]
 800dc6c:	bd10      	pop	{r4, pc}
 800dc6e:	bf00      	nop
 800dc70:	0800f3ff 	.word	0x0800f3ff
 800dc74:	0800f410 	.word	0x0800f410

0800dc78 <__multiply>:
 800dc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7c:	4691      	mov	r9, r2
 800dc7e:	690a      	ldr	r2, [r1, #16]
 800dc80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc84:	460c      	mov	r4, r1
 800dc86:	429a      	cmp	r2, r3
 800dc88:	bfbe      	ittt	lt
 800dc8a:	460b      	movlt	r3, r1
 800dc8c:	464c      	movlt	r4, r9
 800dc8e:	4699      	movlt	r9, r3
 800dc90:	6927      	ldr	r7, [r4, #16]
 800dc92:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc96:	68a3      	ldr	r3, [r4, #8]
 800dc98:	6861      	ldr	r1, [r4, #4]
 800dc9a:	eb07 060a 	add.w	r6, r7, sl
 800dc9e:	42b3      	cmp	r3, r6
 800dca0:	b085      	sub	sp, #20
 800dca2:	bfb8      	it	lt
 800dca4:	3101      	addlt	r1, #1
 800dca6:	f7ff fedb 	bl	800da60 <_Balloc>
 800dcaa:	b930      	cbnz	r0, 800dcba <__multiply+0x42>
 800dcac:	4602      	mov	r2, r0
 800dcae:	f240 115d 	movw	r1, #349	; 0x15d
 800dcb2:	4b43      	ldr	r3, [pc, #268]	; (800ddc0 <__multiply+0x148>)
 800dcb4:	4843      	ldr	r0, [pc, #268]	; (800ddc4 <__multiply+0x14c>)
 800dcb6:	f000 fcb1 	bl	800e61c <__assert_func>
 800dcba:	f100 0514 	add.w	r5, r0, #20
 800dcbe:	462b      	mov	r3, r5
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dcc6:	4543      	cmp	r3, r8
 800dcc8:	d321      	bcc.n	800dd0e <__multiply+0x96>
 800dcca:	f104 0314 	add.w	r3, r4, #20
 800dcce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcd2:	f109 0314 	add.w	r3, r9, #20
 800dcd6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dcda:	9202      	str	r2, [sp, #8]
 800dcdc:	1b3a      	subs	r2, r7, r4
 800dcde:	3a15      	subs	r2, #21
 800dce0:	f022 0203 	bic.w	r2, r2, #3
 800dce4:	3204      	adds	r2, #4
 800dce6:	f104 0115 	add.w	r1, r4, #21
 800dcea:	428f      	cmp	r7, r1
 800dcec:	bf38      	it	cc
 800dcee:	2204      	movcc	r2, #4
 800dcf0:	9201      	str	r2, [sp, #4]
 800dcf2:	9a02      	ldr	r2, [sp, #8]
 800dcf4:	9303      	str	r3, [sp, #12]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d80c      	bhi.n	800dd14 <__multiply+0x9c>
 800dcfa:	2e00      	cmp	r6, #0
 800dcfc:	dd03      	ble.n	800dd06 <__multiply+0x8e>
 800dcfe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d059      	beq.n	800ddba <__multiply+0x142>
 800dd06:	6106      	str	r6, [r0, #16]
 800dd08:	b005      	add	sp, #20
 800dd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0e:	f843 2b04 	str.w	r2, [r3], #4
 800dd12:	e7d8      	b.n	800dcc6 <__multiply+0x4e>
 800dd14:	f8b3 a000 	ldrh.w	sl, [r3]
 800dd18:	f1ba 0f00 	cmp.w	sl, #0
 800dd1c:	d023      	beq.n	800dd66 <__multiply+0xee>
 800dd1e:	46a9      	mov	r9, r5
 800dd20:	f04f 0c00 	mov.w	ip, #0
 800dd24:	f104 0e14 	add.w	lr, r4, #20
 800dd28:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dd2c:	f8d9 1000 	ldr.w	r1, [r9]
 800dd30:	fa1f fb82 	uxth.w	fp, r2
 800dd34:	b289      	uxth	r1, r1
 800dd36:	fb0a 110b 	mla	r1, sl, fp, r1
 800dd3a:	4461      	add	r1, ip
 800dd3c:	f8d9 c000 	ldr.w	ip, [r9]
 800dd40:	0c12      	lsrs	r2, r2, #16
 800dd42:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800dd46:	fb0a c202 	mla	r2, sl, r2, ip
 800dd4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dd4e:	b289      	uxth	r1, r1
 800dd50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd54:	4577      	cmp	r7, lr
 800dd56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd5a:	f849 1b04 	str.w	r1, [r9], #4
 800dd5e:	d8e3      	bhi.n	800dd28 <__multiply+0xb0>
 800dd60:	9a01      	ldr	r2, [sp, #4]
 800dd62:	f845 c002 	str.w	ip, [r5, r2]
 800dd66:	9a03      	ldr	r2, [sp, #12]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd6e:	f1b9 0f00 	cmp.w	r9, #0
 800dd72:	d020      	beq.n	800ddb6 <__multiply+0x13e>
 800dd74:	46ae      	mov	lr, r5
 800dd76:	f04f 0a00 	mov.w	sl, #0
 800dd7a:	6829      	ldr	r1, [r5, #0]
 800dd7c:	f104 0c14 	add.w	ip, r4, #20
 800dd80:	f8bc b000 	ldrh.w	fp, [ip]
 800dd84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd88:	b289      	uxth	r1, r1
 800dd8a:	fb09 220b 	mla	r2, r9, fp, r2
 800dd8e:	4492      	add	sl, r2
 800dd90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dd94:	f84e 1b04 	str.w	r1, [lr], #4
 800dd98:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dd9c:	f8be 1000 	ldrh.w	r1, [lr]
 800dda0:	0c12      	lsrs	r2, r2, #16
 800dda2:	fb09 1102 	mla	r1, r9, r2, r1
 800dda6:	4567      	cmp	r7, ip
 800dda8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ddac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ddb0:	d8e6      	bhi.n	800dd80 <__multiply+0x108>
 800ddb2:	9a01      	ldr	r2, [sp, #4]
 800ddb4:	50a9      	str	r1, [r5, r2]
 800ddb6:	3504      	adds	r5, #4
 800ddb8:	e79b      	b.n	800dcf2 <__multiply+0x7a>
 800ddba:	3e01      	subs	r6, #1
 800ddbc:	e79d      	b.n	800dcfa <__multiply+0x82>
 800ddbe:	bf00      	nop
 800ddc0:	0800f3ff 	.word	0x0800f3ff
 800ddc4:	0800f410 	.word	0x0800f410

0800ddc8 <__pow5mult>:
 800ddc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddcc:	4615      	mov	r5, r2
 800ddce:	f012 0203 	ands.w	r2, r2, #3
 800ddd2:	4606      	mov	r6, r0
 800ddd4:	460f      	mov	r7, r1
 800ddd6:	d007      	beq.n	800dde8 <__pow5mult+0x20>
 800ddd8:	4c25      	ldr	r4, [pc, #148]	; (800de70 <__pow5mult+0xa8>)
 800ddda:	3a01      	subs	r2, #1
 800dddc:	2300      	movs	r3, #0
 800ddde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dde2:	f7ff fe9f 	bl	800db24 <__multadd>
 800dde6:	4607      	mov	r7, r0
 800dde8:	10ad      	asrs	r5, r5, #2
 800ddea:	d03d      	beq.n	800de68 <__pow5mult+0xa0>
 800ddec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ddee:	b97c      	cbnz	r4, 800de10 <__pow5mult+0x48>
 800ddf0:	2010      	movs	r0, #16
 800ddf2:	f7ff fe1f 	bl	800da34 <malloc>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	6270      	str	r0, [r6, #36]	; 0x24
 800ddfa:	b928      	cbnz	r0, 800de08 <__pow5mult+0x40>
 800ddfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800de00:	4b1c      	ldr	r3, [pc, #112]	; (800de74 <__pow5mult+0xac>)
 800de02:	481d      	ldr	r0, [pc, #116]	; (800de78 <__pow5mult+0xb0>)
 800de04:	f000 fc0a 	bl	800e61c <__assert_func>
 800de08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de0c:	6004      	str	r4, [r0, #0]
 800de0e:	60c4      	str	r4, [r0, #12]
 800de10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800de14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de18:	b94c      	cbnz	r4, 800de2e <__pow5mult+0x66>
 800de1a:	f240 2171 	movw	r1, #625	; 0x271
 800de1e:	4630      	mov	r0, r6
 800de20:	f7ff ff14 	bl	800dc4c <__i2b>
 800de24:	2300      	movs	r3, #0
 800de26:	4604      	mov	r4, r0
 800de28:	f8c8 0008 	str.w	r0, [r8, #8]
 800de2c:	6003      	str	r3, [r0, #0]
 800de2e:	f04f 0900 	mov.w	r9, #0
 800de32:	07eb      	lsls	r3, r5, #31
 800de34:	d50a      	bpl.n	800de4c <__pow5mult+0x84>
 800de36:	4639      	mov	r1, r7
 800de38:	4622      	mov	r2, r4
 800de3a:	4630      	mov	r0, r6
 800de3c:	f7ff ff1c 	bl	800dc78 <__multiply>
 800de40:	4680      	mov	r8, r0
 800de42:	4639      	mov	r1, r7
 800de44:	4630      	mov	r0, r6
 800de46:	f7ff fe4b 	bl	800dae0 <_Bfree>
 800de4a:	4647      	mov	r7, r8
 800de4c:	106d      	asrs	r5, r5, #1
 800de4e:	d00b      	beq.n	800de68 <__pow5mult+0xa0>
 800de50:	6820      	ldr	r0, [r4, #0]
 800de52:	b938      	cbnz	r0, 800de64 <__pow5mult+0x9c>
 800de54:	4622      	mov	r2, r4
 800de56:	4621      	mov	r1, r4
 800de58:	4630      	mov	r0, r6
 800de5a:	f7ff ff0d 	bl	800dc78 <__multiply>
 800de5e:	6020      	str	r0, [r4, #0]
 800de60:	f8c0 9000 	str.w	r9, [r0]
 800de64:	4604      	mov	r4, r0
 800de66:	e7e4      	b.n	800de32 <__pow5mult+0x6a>
 800de68:	4638      	mov	r0, r7
 800de6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de6e:	bf00      	nop
 800de70:	0800f560 	.word	0x0800f560
 800de74:	0800f38d 	.word	0x0800f38d
 800de78:	0800f410 	.word	0x0800f410

0800de7c <__lshift>:
 800de7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de80:	460c      	mov	r4, r1
 800de82:	4607      	mov	r7, r0
 800de84:	4691      	mov	r9, r2
 800de86:	6923      	ldr	r3, [r4, #16]
 800de88:	6849      	ldr	r1, [r1, #4]
 800de8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de8e:	68a3      	ldr	r3, [r4, #8]
 800de90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de94:	f108 0601 	add.w	r6, r8, #1
 800de98:	42b3      	cmp	r3, r6
 800de9a:	db0b      	blt.n	800deb4 <__lshift+0x38>
 800de9c:	4638      	mov	r0, r7
 800de9e:	f7ff fddf 	bl	800da60 <_Balloc>
 800dea2:	4605      	mov	r5, r0
 800dea4:	b948      	cbnz	r0, 800deba <__lshift+0x3e>
 800dea6:	4602      	mov	r2, r0
 800dea8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800deac:	4b29      	ldr	r3, [pc, #164]	; (800df54 <__lshift+0xd8>)
 800deae:	482a      	ldr	r0, [pc, #168]	; (800df58 <__lshift+0xdc>)
 800deb0:	f000 fbb4 	bl	800e61c <__assert_func>
 800deb4:	3101      	adds	r1, #1
 800deb6:	005b      	lsls	r3, r3, #1
 800deb8:	e7ee      	b.n	800de98 <__lshift+0x1c>
 800deba:	2300      	movs	r3, #0
 800debc:	f100 0114 	add.w	r1, r0, #20
 800dec0:	f100 0210 	add.w	r2, r0, #16
 800dec4:	4618      	mov	r0, r3
 800dec6:	4553      	cmp	r3, sl
 800dec8:	db37      	blt.n	800df3a <__lshift+0xbe>
 800deca:	6920      	ldr	r0, [r4, #16]
 800decc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ded0:	f104 0314 	add.w	r3, r4, #20
 800ded4:	f019 091f 	ands.w	r9, r9, #31
 800ded8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dedc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dee0:	d02f      	beq.n	800df42 <__lshift+0xc6>
 800dee2:	468a      	mov	sl, r1
 800dee4:	f04f 0c00 	mov.w	ip, #0
 800dee8:	f1c9 0e20 	rsb	lr, r9, #32
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	fa02 f209 	lsl.w	r2, r2, r9
 800def2:	ea42 020c 	orr.w	r2, r2, ip
 800def6:	f84a 2b04 	str.w	r2, [sl], #4
 800defa:	f853 2b04 	ldr.w	r2, [r3], #4
 800defe:	4298      	cmp	r0, r3
 800df00:	fa22 fc0e 	lsr.w	ip, r2, lr
 800df04:	d8f2      	bhi.n	800deec <__lshift+0x70>
 800df06:	1b03      	subs	r3, r0, r4
 800df08:	3b15      	subs	r3, #21
 800df0a:	f023 0303 	bic.w	r3, r3, #3
 800df0e:	3304      	adds	r3, #4
 800df10:	f104 0215 	add.w	r2, r4, #21
 800df14:	4290      	cmp	r0, r2
 800df16:	bf38      	it	cc
 800df18:	2304      	movcc	r3, #4
 800df1a:	f841 c003 	str.w	ip, [r1, r3]
 800df1e:	f1bc 0f00 	cmp.w	ip, #0
 800df22:	d001      	beq.n	800df28 <__lshift+0xac>
 800df24:	f108 0602 	add.w	r6, r8, #2
 800df28:	3e01      	subs	r6, #1
 800df2a:	4638      	mov	r0, r7
 800df2c:	4621      	mov	r1, r4
 800df2e:	612e      	str	r6, [r5, #16]
 800df30:	f7ff fdd6 	bl	800dae0 <_Bfree>
 800df34:	4628      	mov	r0, r5
 800df36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800df3e:	3301      	adds	r3, #1
 800df40:	e7c1      	b.n	800dec6 <__lshift+0x4a>
 800df42:	3904      	subs	r1, #4
 800df44:	f853 2b04 	ldr.w	r2, [r3], #4
 800df48:	4298      	cmp	r0, r3
 800df4a:	f841 2f04 	str.w	r2, [r1, #4]!
 800df4e:	d8f9      	bhi.n	800df44 <__lshift+0xc8>
 800df50:	e7ea      	b.n	800df28 <__lshift+0xac>
 800df52:	bf00      	nop
 800df54:	0800f3ff 	.word	0x0800f3ff
 800df58:	0800f410 	.word	0x0800f410

0800df5c <__mcmp>:
 800df5c:	4603      	mov	r3, r0
 800df5e:	690a      	ldr	r2, [r1, #16]
 800df60:	6900      	ldr	r0, [r0, #16]
 800df62:	b530      	push	{r4, r5, lr}
 800df64:	1a80      	subs	r0, r0, r2
 800df66:	d10d      	bne.n	800df84 <__mcmp+0x28>
 800df68:	3314      	adds	r3, #20
 800df6a:	3114      	adds	r1, #20
 800df6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800df70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800df74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df7c:	4295      	cmp	r5, r2
 800df7e:	d002      	beq.n	800df86 <__mcmp+0x2a>
 800df80:	d304      	bcc.n	800df8c <__mcmp+0x30>
 800df82:	2001      	movs	r0, #1
 800df84:	bd30      	pop	{r4, r5, pc}
 800df86:	42a3      	cmp	r3, r4
 800df88:	d3f4      	bcc.n	800df74 <__mcmp+0x18>
 800df8a:	e7fb      	b.n	800df84 <__mcmp+0x28>
 800df8c:	f04f 30ff 	mov.w	r0, #4294967295
 800df90:	e7f8      	b.n	800df84 <__mcmp+0x28>
	...

0800df94 <__mdiff>:
 800df94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df98:	460d      	mov	r5, r1
 800df9a:	4607      	mov	r7, r0
 800df9c:	4611      	mov	r1, r2
 800df9e:	4628      	mov	r0, r5
 800dfa0:	4614      	mov	r4, r2
 800dfa2:	f7ff ffdb 	bl	800df5c <__mcmp>
 800dfa6:	1e06      	subs	r6, r0, #0
 800dfa8:	d111      	bne.n	800dfce <__mdiff+0x3a>
 800dfaa:	4631      	mov	r1, r6
 800dfac:	4638      	mov	r0, r7
 800dfae:	f7ff fd57 	bl	800da60 <_Balloc>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	b928      	cbnz	r0, 800dfc2 <__mdiff+0x2e>
 800dfb6:	f240 2132 	movw	r1, #562	; 0x232
 800dfba:	4b3a      	ldr	r3, [pc, #232]	; (800e0a4 <__mdiff+0x110>)
 800dfbc:	483a      	ldr	r0, [pc, #232]	; (800e0a8 <__mdiff+0x114>)
 800dfbe:	f000 fb2d 	bl	800e61c <__assert_func>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800dfc8:	4610      	mov	r0, r2
 800dfca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfce:	bfa4      	itt	ge
 800dfd0:	4623      	movge	r3, r4
 800dfd2:	462c      	movge	r4, r5
 800dfd4:	4638      	mov	r0, r7
 800dfd6:	6861      	ldr	r1, [r4, #4]
 800dfd8:	bfa6      	itte	ge
 800dfda:	461d      	movge	r5, r3
 800dfdc:	2600      	movge	r6, #0
 800dfde:	2601      	movlt	r6, #1
 800dfe0:	f7ff fd3e 	bl	800da60 <_Balloc>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	b918      	cbnz	r0, 800dff0 <__mdiff+0x5c>
 800dfe8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dfec:	4b2d      	ldr	r3, [pc, #180]	; (800e0a4 <__mdiff+0x110>)
 800dfee:	e7e5      	b.n	800dfbc <__mdiff+0x28>
 800dff0:	f102 0814 	add.w	r8, r2, #20
 800dff4:	46c2      	mov	sl, r8
 800dff6:	f04f 0c00 	mov.w	ip, #0
 800dffa:	6927      	ldr	r7, [r4, #16]
 800dffc:	60c6      	str	r6, [r0, #12]
 800dffe:	692e      	ldr	r6, [r5, #16]
 800e000:	f104 0014 	add.w	r0, r4, #20
 800e004:	f105 0914 	add.w	r9, r5, #20
 800e008:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800e00c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e010:	3410      	adds	r4, #16
 800e012:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800e016:	f859 3b04 	ldr.w	r3, [r9], #4
 800e01a:	fa1f f18b 	uxth.w	r1, fp
 800e01e:	448c      	add	ip, r1
 800e020:	b299      	uxth	r1, r3
 800e022:	0c1b      	lsrs	r3, r3, #16
 800e024:	ebac 0101 	sub.w	r1, ip, r1
 800e028:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e02c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e030:	b289      	uxth	r1, r1
 800e032:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800e036:	454e      	cmp	r6, r9
 800e038:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e03c:	f84a 3b04 	str.w	r3, [sl], #4
 800e040:	d8e7      	bhi.n	800e012 <__mdiff+0x7e>
 800e042:	1b73      	subs	r3, r6, r5
 800e044:	3b15      	subs	r3, #21
 800e046:	f023 0303 	bic.w	r3, r3, #3
 800e04a:	3515      	adds	r5, #21
 800e04c:	3304      	adds	r3, #4
 800e04e:	42ae      	cmp	r6, r5
 800e050:	bf38      	it	cc
 800e052:	2304      	movcc	r3, #4
 800e054:	4418      	add	r0, r3
 800e056:	4443      	add	r3, r8
 800e058:	461e      	mov	r6, r3
 800e05a:	4605      	mov	r5, r0
 800e05c:	4575      	cmp	r5, lr
 800e05e:	d30e      	bcc.n	800e07e <__mdiff+0xea>
 800e060:	f10e 0103 	add.w	r1, lr, #3
 800e064:	1a09      	subs	r1, r1, r0
 800e066:	f021 0103 	bic.w	r1, r1, #3
 800e06a:	3803      	subs	r0, #3
 800e06c:	4586      	cmp	lr, r0
 800e06e:	bf38      	it	cc
 800e070:	2100      	movcc	r1, #0
 800e072:	4419      	add	r1, r3
 800e074:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e078:	b18b      	cbz	r3, 800e09e <__mdiff+0x10a>
 800e07a:	6117      	str	r7, [r2, #16]
 800e07c:	e7a4      	b.n	800dfc8 <__mdiff+0x34>
 800e07e:	f855 8b04 	ldr.w	r8, [r5], #4
 800e082:	fa1f f188 	uxth.w	r1, r8
 800e086:	4461      	add	r1, ip
 800e088:	140c      	asrs	r4, r1, #16
 800e08a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e08e:	b289      	uxth	r1, r1
 800e090:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e094:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800e098:	f846 1b04 	str.w	r1, [r6], #4
 800e09c:	e7de      	b.n	800e05c <__mdiff+0xc8>
 800e09e:	3f01      	subs	r7, #1
 800e0a0:	e7e8      	b.n	800e074 <__mdiff+0xe0>
 800e0a2:	bf00      	nop
 800e0a4:	0800f3ff 	.word	0x0800f3ff
 800e0a8:	0800f410 	.word	0x0800f410

0800e0ac <__d2b>:
 800e0ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e0b0:	2101      	movs	r1, #1
 800e0b2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800e0b6:	4690      	mov	r8, r2
 800e0b8:	461d      	mov	r5, r3
 800e0ba:	f7ff fcd1 	bl	800da60 <_Balloc>
 800e0be:	4604      	mov	r4, r0
 800e0c0:	b930      	cbnz	r0, 800e0d0 <__d2b+0x24>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	f240 310a 	movw	r1, #778	; 0x30a
 800e0c8:	4b24      	ldr	r3, [pc, #144]	; (800e15c <__d2b+0xb0>)
 800e0ca:	4825      	ldr	r0, [pc, #148]	; (800e160 <__d2b+0xb4>)
 800e0cc:	f000 faa6 	bl	800e61c <__assert_func>
 800e0d0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800e0d4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800e0d8:	bb2d      	cbnz	r5, 800e126 <__d2b+0x7a>
 800e0da:	9301      	str	r3, [sp, #4]
 800e0dc:	f1b8 0300 	subs.w	r3, r8, #0
 800e0e0:	d026      	beq.n	800e130 <__d2b+0x84>
 800e0e2:	4668      	mov	r0, sp
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	f7ff fd83 	bl	800dbf0 <__lo0bits>
 800e0ea:	9900      	ldr	r1, [sp, #0]
 800e0ec:	b1f0      	cbz	r0, 800e12c <__d2b+0x80>
 800e0ee:	9a01      	ldr	r2, [sp, #4]
 800e0f0:	f1c0 0320 	rsb	r3, r0, #32
 800e0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e0f8:	430b      	orrs	r3, r1
 800e0fa:	40c2      	lsrs	r2, r0
 800e0fc:	6163      	str	r3, [r4, #20]
 800e0fe:	9201      	str	r2, [sp, #4]
 800e100:	9b01      	ldr	r3, [sp, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	bf14      	ite	ne
 800e106:	2102      	movne	r1, #2
 800e108:	2101      	moveq	r1, #1
 800e10a:	61a3      	str	r3, [r4, #24]
 800e10c:	6121      	str	r1, [r4, #16]
 800e10e:	b1c5      	cbz	r5, 800e142 <__d2b+0x96>
 800e110:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e114:	4405      	add	r5, r0
 800e116:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e11a:	603d      	str	r5, [r7, #0]
 800e11c:	6030      	str	r0, [r6, #0]
 800e11e:	4620      	mov	r0, r4
 800e120:	b002      	add	sp, #8
 800e122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e12a:	e7d6      	b.n	800e0da <__d2b+0x2e>
 800e12c:	6161      	str	r1, [r4, #20]
 800e12e:	e7e7      	b.n	800e100 <__d2b+0x54>
 800e130:	a801      	add	r0, sp, #4
 800e132:	f7ff fd5d 	bl	800dbf0 <__lo0bits>
 800e136:	2101      	movs	r1, #1
 800e138:	9b01      	ldr	r3, [sp, #4]
 800e13a:	6121      	str	r1, [r4, #16]
 800e13c:	6163      	str	r3, [r4, #20]
 800e13e:	3020      	adds	r0, #32
 800e140:	e7e5      	b.n	800e10e <__d2b+0x62>
 800e142:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800e146:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e14a:	6038      	str	r0, [r7, #0]
 800e14c:	6918      	ldr	r0, [r3, #16]
 800e14e:	f7ff fd2f 	bl	800dbb0 <__hi0bits>
 800e152:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800e156:	6031      	str	r1, [r6, #0]
 800e158:	e7e1      	b.n	800e11e <__d2b+0x72>
 800e15a:	bf00      	nop
 800e15c:	0800f3ff 	.word	0x0800f3ff
 800e160:	0800f410 	.word	0x0800f410

0800e164 <_calloc_r>:
 800e164:	b570      	push	{r4, r5, r6, lr}
 800e166:	fba1 5402 	umull	r5, r4, r1, r2
 800e16a:	b934      	cbnz	r4, 800e17a <_calloc_r+0x16>
 800e16c:	4629      	mov	r1, r5
 800e16e:	f000 f875 	bl	800e25c <_malloc_r>
 800e172:	4606      	mov	r6, r0
 800e174:	b928      	cbnz	r0, 800e182 <_calloc_r+0x1e>
 800e176:	4630      	mov	r0, r6
 800e178:	bd70      	pop	{r4, r5, r6, pc}
 800e17a:	220c      	movs	r2, #12
 800e17c:	2600      	movs	r6, #0
 800e17e:	6002      	str	r2, [r0, #0]
 800e180:	e7f9      	b.n	800e176 <_calloc_r+0x12>
 800e182:	462a      	mov	r2, r5
 800e184:	4621      	mov	r1, r4
 800e186:	f7fe f939 	bl	800c3fc <memset>
 800e18a:	e7f4      	b.n	800e176 <_calloc_r+0x12>

0800e18c <_free_r>:
 800e18c:	b538      	push	{r3, r4, r5, lr}
 800e18e:	4605      	mov	r5, r0
 800e190:	2900      	cmp	r1, #0
 800e192:	d040      	beq.n	800e216 <_free_r+0x8a>
 800e194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e198:	1f0c      	subs	r4, r1, #4
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	bfb8      	it	lt
 800e19e:	18e4      	addlt	r4, r4, r3
 800e1a0:	f000 fa98 	bl	800e6d4 <__malloc_lock>
 800e1a4:	4a1c      	ldr	r2, [pc, #112]	; (800e218 <_free_r+0x8c>)
 800e1a6:	6813      	ldr	r3, [r2, #0]
 800e1a8:	b933      	cbnz	r3, 800e1b8 <_free_r+0x2c>
 800e1aa:	6063      	str	r3, [r4, #4]
 800e1ac:	6014      	str	r4, [r2, #0]
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1b4:	f000 ba94 	b.w	800e6e0 <__malloc_unlock>
 800e1b8:	42a3      	cmp	r3, r4
 800e1ba:	d908      	bls.n	800e1ce <_free_r+0x42>
 800e1bc:	6820      	ldr	r0, [r4, #0]
 800e1be:	1821      	adds	r1, r4, r0
 800e1c0:	428b      	cmp	r3, r1
 800e1c2:	bf01      	itttt	eq
 800e1c4:	6819      	ldreq	r1, [r3, #0]
 800e1c6:	685b      	ldreq	r3, [r3, #4]
 800e1c8:	1809      	addeq	r1, r1, r0
 800e1ca:	6021      	streq	r1, [r4, #0]
 800e1cc:	e7ed      	b.n	800e1aa <_free_r+0x1e>
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	b10b      	cbz	r3, 800e1d8 <_free_r+0x4c>
 800e1d4:	42a3      	cmp	r3, r4
 800e1d6:	d9fa      	bls.n	800e1ce <_free_r+0x42>
 800e1d8:	6811      	ldr	r1, [r2, #0]
 800e1da:	1850      	adds	r0, r2, r1
 800e1dc:	42a0      	cmp	r0, r4
 800e1de:	d10b      	bne.n	800e1f8 <_free_r+0x6c>
 800e1e0:	6820      	ldr	r0, [r4, #0]
 800e1e2:	4401      	add	r1, r0
 800e1e4:	1850      	adds	r0, r2, r1
 800e1e6:	4283      	cmp	r3, r0
 800e1e8:	6011      	str	r1, [r2, #0]
 800e1ea:	d1e0      	bne.n	800e1ae <_free_r+0x22>
 800e1ec:	6818      	ldr	r0, [r3, #0]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	4401      	add	r1, r0
 800e1f2:	6011      	str	r1, [r2, #0]
 800e1f4:	6053      	str	r3, [r2, #4]
 800e1f6:	e7da      	b.n	800e1ae <_free_r+0x22>
 800e1f8:	d902      	bls.n	800e200 <_free_r+0x74>
 800e1fa:	230c      	movs	r3, #12
 800e1fc:	602b      	str	r3, [r5, #0]
 800e1fe:	e7d6      	b.n	800e1ae <_free_r+0x22>
 800e200:	6820      	ldr	r0, [r4, #0]
 800e202:	1821      	adds	r1, r4, r0
 800e204:	428b      	cmp	r3, r1
 800e206:	bf01      	itttt	eq
 800e208:	6819      	ldreq	r1, [r3, #0]
 800e20a:	685b      	ldreq	r3, [r3, #4]
 800e20c:	1809      	addeq	r1, r1, r0
 800e20e:	6021      	streq	r1, [r4, #0]
 800e210:	6063      	str	r3, [r4, #4]
 800e212:	6054      	str	r4, [r2, #4]
 800e214:	e7cb      	b.n	800e1ae <_free_r+0x22>
 800e216:	bd38      	pop	{r3, r4, r5, pc}
 800e218:	200019b4 	.word	0x200019b4

0800e21c <sbrk_aligned>:
 800e21c:	b570      	push	{r4, r5, r6, lr}
 800e21e:	4e0e      	ldr	r6, [pc, #56]	; (800e258 <sbrk_aligned+0x3c>)
 800e220:	460c      	mov	r4, r1
 800e222:	6831      	ldr	r1, [r6, #0]
 800e224:	4605      	mov	r5, r0
 800e226:	b911      	cbnz	r1, 800e22e <sbrk_aligned+0x12>
 800e228:	f000 f9e8 	bl	800e5fc <_sbrk_r>
 800e22c:	6030      	str	r0, [r6, #0]
 800e22e:	4621      	mov	r1, r4
 800e230:	4628      	mov	r0, r5
 800e232:	f000 f9e3 	bl	800e5fc <_sbrk_r>
 800e236:	1c43      	adds	r3, r0, #1
 800e238:	d00a      	beq.n	800e250 <sbrk_aligned+0x34>
 800e23a:	1cc4      	adds	r4, r0, #3
 800e23c:	f024 0403 	bic.w	r4, r4, #3
 800e240:	42a0      	cmp	r0, r4
 800e242:	d007      	beq.n	800e254 <sbrk_aligned+0x38>
 800e244:	1a21      	subs	r1, r4, r0
 800e246:	4628      	mov	r0, r5
 800e248:	f000 f9d8 	bl	800e5fc <_sbrk_r>
 800e24c:	3001      	adds	r0, #1
 800e24e:	d101      	bne.n	800e254 <sbrk_aligned+0x38>
 800e250:	f04f 34ff 	mov.w	r4, #4294967295
 800e254:	4620      	mov	r0, r4
 800e256:	bd70      	pop	{r4, r5, r6, pc}
 800e258:	200019b8 	.word	0x200019b8

0800e25c <_malloc_r>:
 800e25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e260:	1ccd      	adds	r5, r1, #3
 800e262:	f025 0503 	bic.w	r5, r5, #3
 800e266:	3508      	adds	r5, #8
 800e268:	2d0c      	cmp	r5, #12
 800e26a:	bf38      	it	cc
 800e26c:	250c      	movcc	r5, #12
 800e26e:	2d00      	cmp	r5, #0
 800e270:	4607      	mov	r7, r0
 800e272:	db01      	blt.n	800e278 <_malloc_r+0x1c>
 800e274:	42a9      	cmp	r1, r5
 800e276:	d905      	bls.n	800e284 <_malloc_r+0x28>
 800e278:	230c      	movs	r3, #12
 800e27a:	2600      	movs	r6, #0
 800e27c:	603b      	str	r3, [r7, #0]
 800e27e:	4630      	mov	r0, r6
 800e280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e284:	4e2e      	ldr	r6, [pc, #184]	; (800e340 <_malloc_r+0xe4>)
 800e286:	f000 fa25 	bl	800e6d4 <__malloc_lock>
 800e28a:	6833      	ldr	r3, [r6, #0]
 800e28c:	461c      	mov	r4, r3
 800e28e:	bb34      	cbnz	r4, 800e2de <_malloc_r+0x82>
 800e290:	4629      	mov	r1, r5
 800e292:	4638      	mov	r0, r7
 800e294:	f7ff ffc2 	bl	800e21c <sbrk_aligned>
 800e298:	1c43      	adds	r3, r0, #1
 800e29a:	4604      	mov	r4, r0
 800e29c:	d14d      	bne.n	800e33a <_malloc_r+0xde>
 800e29e:	6834      	ldr	r4, [r6, #0]
 800e2a0:	4626      	mov	r6, r4
 800e2a2:	2e00      	cmp	r6, #0
 800e2a4:	d140      	bne.n	800e328 <_malloc_r+0xcc>
 800e2a6:	6823      	ldr	r3, [r4, #0]
 800e2a8:	4631      	mov	r1, r6
 800e2aa:	4638      	mov	r0, r7
 800e2ac:	eb04 0803 	add.w	r8, r4, r3
 800e2b0:	f000 f9a4 	bl	800e5fc <_sbrk_r>
 800e2b4:	4580      	cmp	r8, r0
 800e2b6:	d13a      	bne.n	800e32e <_malloc_r+0xd2>
 800e2b8:	6821      	ldr	r1, [r4, #0]
 800e2ba:	3503      	adds	r5, #3
 800e2bc:	1a6d      	subs	r5, r5, r1
 800e2be:	f025 0503 	bic.w	r5, r5, #3
 800e2c2:	3508      	adds	r5, #8
 800e2c4:	2d0c      	cmp	r5, #12
 800e2c6:	bf38      	it	cc
 800e2c8:	250c      	movcc	r5, #12
 800e2ca:	4638      	mov	r0, r7
 800e2cc:	4629      	mov	r1, r5
 800e2ce:	f7ff ffa5 	bl	800e21c <sbrk_aligned>
 800e2d2:	3001      	adds	r0, #1
 800e2d4:	d02b      	beq.n	800e32e <_malloc_r+0xd2>
 800e2d6:	6823      	ldr	r3, [r4, #0]
 800e2d8:	442b      	add	r3, r5
 800e2da:	6023      	str	r3, [r4, #0]
 800e2dc:	e00e      	b.n	800e2fc <_malloc_r+0xa0>
 800e2de:	6822      	ldr	r2, [r4, #0]
 800e2e0:	1b52      	subs	r2, r2, r5
 800e2e2:	d41e      	bmi.n	800e322 <_malloc_r+0xc6>
 800e2e4:	2a0b      	cmp	r2, #11
 800e2e6:	d916      	bls.n	800e316 <_malloc_r+0xba>
 800e2e8:	1961      	adds	r1, r4, r5
 800e2ea:	42a3      	cmp	r3, r4
 800e2ec:	6025      	str	r5, [r4, #0]
 800e2ee:	bf18      	it	ne
 800e2f0:	6059      	strne	r1, [r3, #4]
 800e2f2:	6863      	ldr	r3, [r4, #4]
 800e2f4:	bf08      	it	eq
 800e2f6:	6031      	streq	r1, [r6, #0]
 800e2f8:	5162      	str	r2, [r4, r5]
 800e2fa:	604b      	str	r3, [r1, #4]
 800e2fc:	4638      	mov	r0, r7
 800e2fe:	f104 060b 	add.w	r6, r4, #11
 800e302:	f000 f9ed 	bl	800e6e0 <__malloc_unlock>
 800e306:	f026 0607 	bic.w	r6, r6, #7
 800e30a:	1d23      	adds	r3, r4, #4
 800e30c:	1af2      	subs	r2, r6, r3
 800e30e:	d0b6      	beq.n	800e27e <_malloc_r+0x22>
 800e310:	1b9b      	subs	r3, r3, r6
 800e312:	50a3      	str	r3, [r4, r2]
 800e314:	e7b3      	b.n	800e27e <_malloc_r+0x22>
 800e316:	6862      	ldr	r2, [r4, #4]
 800e318:	42a3      	cmp	r3, r4
 800e31a:	bf0c      	ite	eq
 800e31c:	6032      	streq	r2, [r6, #0]
 800e31e:	605a      	strne	r2, [r3, #4]
 800e320:	e7ec      	b.n	800e2fc <_malloc_r+0xa0>
 800e322:	4623      	mov	r3, r4
 800e324:	6864      	ldr	r4, [r4, #4]
 800e326:	e7b2      	b.n	800e28e <_malloc_r+0x32>
 800e328:	4634      	mov	r4, r6
 800e32a:	6876      	ldr	r6, [r6, #4]
 800e32c:	e7b9      	b.n	800e2a2 <_malloc_r+0x46>
 800e32e:	230c      	movs	r3, #12
 800e330:	4638      	mov	r0, r7
 800e332:	603b      	str	r3, [r7, #0]
 800e334:	f000 f9d4 	bl	800e6e0 <__malloc_unlock>
 800e338:	e7a1      	b.n	800e27e <_malloc_r+0x22>
 800e33a:	6025      	str	r5, [r4, #0]
 800e33c:	e7de      	b.n	800e2fc <_malloc_r+0xa0>
 800e33e:	bf00      	nop
 800e340:	200019b4 	.word	0x200019b4

0800e344 <__ssputs_r>:
 800e344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e348:	688e      	ldr	r6, [r1, #8]
 800e34a:	4682      	mov	sl, r0
 800e34c:	429e      	cmp	r6, r3
 800e34e:	460c      	mov	r4, r1
 800e350:	4690      	mov	r8, r2
 800e352:	461f      	mov	r7, r3
 800e354:	d838      	bhi.n	800e3c8 <__ssputs_r+0x84>
 800e356:	898a      	ldrh	r2, [r1, #12]
 800e358:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e35c:	d032      	beq.n	800e3c4 <__ssputs_r+0x80>
 800e35e:	6825      	ldr	r5, [r4, #0]
 800e360:	6909      	ldr	r1, [r1, #16]
 800e362:	3301      	adds	r3, #1
 800e364:	eba5 0901 	sub.w	r9, r5, r1
 800e368:	6965      	ldr	r5, [r4, #20]
 800e36a:	444b      	add	r3, r9
 800e36c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e370:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e374:	106d      	asrs	r5, r5, #1
 800e376:	429d      	cmp	r5, r3
 800e378:	bf38      	it	cc
 800e37a:	461d      	movcc	r5, r3
 800e37c:	0553      	lsls	r3, r2, #21
 800e37e:	d531      	bpl.n	800e3e4 <__ssputs_r+0xa0>
 800e380:	4629      	mov	r1, r5
 800e382:	f7ff ff6b 	bl	800e25c <_malloc_r>
 800e386:	4606      	mov	r6, r0
 800e388:	b950      	cbnz	r0, 800e3a0 <__ssputs_r+0x5c>
 800e38a:	230c      	movs	r3, #12
 800e38c:	f04f 30ff 	mov.w	r0, #4294967295
 800e390:	f8ca 3000 	str.w	r3, [sl]
 800e394:	89a3      	ldrh	r3, [r4, #12]
 800e396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e39a:	81a3      	strh	r3, [r4, #12]
 800e39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3a0:	464a      	mov	r2, r9
 800e3a2:	6921      	ldr	r1, [r4, #16]
 800e3a4:	f7fe f81c 	bl	800c3e0 <memcpy>
 800e3a8:	89a3      	ldrh	r3, [r4, #12]
 800e3aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e3ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3b2:	81a3      	strh	r3, [r4, #12]
 800e3b4:	6126      	str	r6, [r4, #16]
 800e3b6:	444e      	add	r6, r9
 800e3b8:	6026      	str	r6, [r4, #0]
 800e3ba:	463e      	mov	r6, r7
 800e3bc:	6165      	str	r5, [r4, #20]
 800e3be:	eba5 0509 	sub.w	r5, r5, r9
 800e3c2:	60a5      	str	r5, [r4, #8]
 800e3c4:	42be      	cmp	r6, r7
 800e3c6:	d900      	bls.n	800e3ca <__ssputs_r+0x86>
 800e3c8:	463e      	mov	r6, r7
 800e3ca:	4632      	mov	r2, r6
 800e3cc:	4641      	mov	r1, r8
 800e3ce:	6820      	ldr	r0, [r4, #0]
 800e3d0:	f000 f966 	bl	800e6a0 <memmove>
 800e3d4:	68a3      	ldr	r3, [r4, #8]
 800e3d6:	2000      	movs	r0, #0
 800e3d8:	1b9b      	subs	r3, r3, r6
 800e3da:	60a3      	str	r3, [r4, #8]
 800e3dc:	6823      	ldr	r3, [r4, #0]
 800e3de:	4433      	add	r3, r6
 800e3e0:	6023      	str	r3, [r4, #0]
 800e3e2:	e7db      	b.n	800e39c <__ssputs_r+0x58>
 800e3e4:	462a      	mov	r2, r5
 800e3e6:	f000 f981 	bl	800e6ec <_realloc_r>
 800e3ea:	4606      	mov	r6, r0
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d1e1      	bne.n	800e3b4 <__ssputs_r+0x70>
 800e3f0:	4650      	mov	r0, sl
 800e3f2:	6921      	ldr	r1, [r4, #16]
 800e3f4:	f7ff feca 	bl	800e18c <_free_r>
 800e3f8:	e7c7      	b.n	800e38a <__ssputs_r+0x46>
	...

0800e3fc <_svfiprintf_r>:
 800e3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e400:	4698      	mov	r8, r3
 800e402:	898b      	ldrh	r3, [r1, #12]
 800e404:	4607      	mov	r7, r0
 800e406:	061b      	lsls	r3, r3, #24
 800e408:	460d      	mov	r5, r1
 800e40a:	4614      	mov	r4, r2
 800e40c:	b09d      	sub	sp, #116	; 0x74
 800e40e:	d50e      	bpl.n	800e42e <_svfiprintf_r+0x32>
 800e410:	690b      	ldr	r3, [r1, #16]
 800e412:	b963      	cbnz	r3, 800e42e <_svfiprintf_r+0x32>
 800e414:	2140      	movs	r1, #64	; 0x40
 800e416:	f7ff ff21 	bl	800e25c <_malloc_r>
 800e41a:	6028      	str	r0, [r5, #0]
 800e41c:	6128      	str	r0, [r5, #16]
 800e41e:	b920      	cbnz	r0, 800e42a <_svfiprintf_r+0x2e>
 800e420:	230c      	movs	r3, #12
 800e422:	603b      	str	r3, [r7, #0]
 800e424:	f04f 30ff 	mov.w	r0, #4294967295
 800e428:	e0d1      	b.n	800e5ce <_svfiprintf_r+0x1d2>
 800e42a:	2340      	movs	r3, #64	; 0x40
 800e42c:	616b      	str	r3, [r5, #20]
 800e42e:	2300      	movs	r3, #0
 800e430:	9309      	str	r3, [sp, #36]	; 0x24
 800e432:	2320      	movs	r3, #32
 800e434:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e438:	2330      	movs	r3, #48	; 0x30
 800e43a:	f04f 0901 	mov.w	r9, #1
 800e43e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e442:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e5e8 <_svfiprintf_r+0x1ec>
 800e446:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e44a:	4623      	mov	r3, r4
 800e44c:	469a      	mov	sl, r3
 800e44e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e452:	b10a      	cbz	r2, 800e458 <_svfiprintf_r+0x5c>
 800e454:	2a25      	cmp	r2, #37	; 0x25
 800e456:	d1f9      	bne.n	800e44c <_svfiprintf_r+0x50>
 800e458:	ebba 0b04 	subs.w	fp, sl, r4
 800e45c:	d00b      	beq.n	800e476 <_svfiprintf_r+0x7a>
 800e45e:	465b      	mov	r3, fp
 800e460:	4622      	mov	r2, r4
 800e462:	4629      	mov	r1, r5
 800e464:	4638      	mov	r0, r7
 800e466:	f7ff ff6d 	bl	800e344 <__ssputs_r>
 800e46a:	3001      	adds	r0, #1
 800e46c:	f000 80aa 	beq.w	800e5c4 <_svfiprintf_r+0x1c8>
 800e470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e472:	445a      	add	r2, fp
 800e474:	9209      	str	r2, [sp, #36]	; 0x24
 800e476:	f89a 3000 	ldrb.w	r3, [sl]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	f000 80a2 	beq.w	800e5c4 <_svfiprintf_r+0x1c8>
 800e480:	2300      	movs	r3, #0
 800e482:	f04f 32ff 	mov.w	r2, #4294967295
 800e486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e48a:	f10a 0a01 	add.w	sl, sl, #1
 800e48e:	9304      	str	r3, [sp, #16]
 800e490:	9307      	str	r3, [sp, #28]
 800e492:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e496:	931a      	str	r3, [sp, #104]	; 0x68
 800e498:	4654      	mov	r4, sl
 800e49a:	2205      	movs	r2, #5
 800e49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a0:	4851      	ldr	r0, [pc, #324]	; (800e5e8 <_svfiprintf_r+0x1ec>)
 800e4a2:	f7ff facf 	bl	800da44 <memchr>
 800e4a6:	9a04      	ldr	r2, [sp, #16]
 800e4a8:	b9d8      	cbnz	r0, 800e4e2 <_svfiprintf_r+0xe6>
 800e4aa:	06d0      	lsls	r0, r2, #27
 800e4ac:	bf44      	itt	mi
 800e4ae:	2320      	movmi	r3, #32
 800e4b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4b4:	0711      	lsls	r1, r2, #28
 800e4b6:	bf44      	itt	mi
 800e4b8:	232b      	movmi	r3, #43	; 0x2b
 800e4ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4be:	f89a 3000 	ldrb.w	r3, [sl]
 800e4c2:	2b2a      	cmp	r3, #42	; 0x2a
 800e4c4:	d015      	beq.n	800e4f2 <_svfiprintf_r+0xf6>
 800e4c6:	4654      	mov	r4, sl
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	f04f 0c0a 	mov.w	ip, #10
 800e4ce:	9a07      	ldr	r2, [sp, #28]
 800e4d0:	4621      	mov	r1, r4
 800e4d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4d6:	3b30      	subs	r3, #48	; 0x30
 800e4d8:	2b09      	cmp	r3, #9
 800e4da:	d94e      	bls.n	800e57a <_svfiprintf_r+0x17e>
 800e4dc:	b1b0      	cbz	r0, 800e50c <_svfiprintf_r+0x110>
 800e4de:	9207      	str	r2, [sp, #28]
 800e4e0:	e014      	b.n	800e50c <_svfiprintf_r+0x110>
 800e4e2:	eba0 0308 	sub.w	r3, r0, r8
 800e4e6:	fa09 f303 	lsl.w	r3, r9, r3
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	46a2      	mov	sl, r4
 800e4ee:	9304      	str	r3, [sp, #16]
 800e4f0:	e7d2      	b.n	800e498 <_svfiprintf_r+0x9c>
 800e4f2:	9b03      	ldr	r3, [sp, #12]
 800e4f4:	1d19      	adds	r1, r3, #4
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	9103      	str	r1, [sp, #12]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	bfbb      	ittet	lt
 800e4fe:	425b      	neglt	r3, r3
 800e500:	f042 0202 	orrlt.w	r2, r2, #2
 800e504:	9307      	strge	r3, [sp, #28]
 800e506:	9307      	strlt	r3, [sp, #28]
 800e508:	bfb8      	it	lt
 800e50a:	9204      	strlt	r2, [sp, #16]
 800e50c:	7823      	ldrb	r3, [r4, #0]
 800e50e:	2b2e      	cmp	r3, #46	; 0x2e
 800e510:	d10c      	bne.n	800e52c <_svfiprintf_r+0x130>
 800e512:	7863      	ldrb	r3, [r4, #1]
 800e514:	2b2a      	cmp	r3, #42	; 0x2a
 800e516:	d135      	bne.n	800e584 <_svfiprintf_r+0x188>
 800e518:	9b03      	ldr	r3, [sp, #12]
 800e51a:	3402      	adds	r4, #2
 800e51c:	1d1a      	adds	r2, r3, #4
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	9203      	str	r2, [sp, #12]
 800e522:	2b00      	cmp	r3, #0
 800e524:	bfb8      	it	lt
 800e526:	f04f 33ff 	movlt.w	r3, #4294967295
 800e52a:	9305      	str	r3, [sp, #20]
 800e52c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800e5ec <_svfiprintf_r+0x1f0>
 800e530:	2203      	movs	r2, #3
 800e532:	4650      	mov	r0, sl
 800e534:	7821      	ldrb	r1, [r4, #0]
 800e536:	f7ff fa85 	bl	800da44 <memchr>
 800e53a:	b140      	cbz	r0, 800e54e <_svfiprintf_r+0x152>
 800e53c:	2340      	movs	r3, #64	; 0x40
 800e53e:	eba0 000a 	sub.w	r0, r0, sl
 800e542:	fa03 f000 	lsl.w	r0, r3, r0
 800e546:	9b04      	ldr	r3, [sp, #16]
 800e548:	3401      	adds	r4, #1
 800e54a:	4303      	orrs	r3, r0
 800e54c:	9304      	str	r3, [sp, #16]
 800e54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e552:	2206      	movs	r2, #6
 800e554:	4826      	ldr	r0, [pc, #152]	; (800e5f0 <_svfiprintf_r+0x1f4>)
 800e556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e55a:	f7ff fa73 	bl	800da44 <memchr>
 800e55e:	2800      	cmp	r0, #0
 800e560:	d038      	beq.n	800e5d4 <_svfiprintf_r+0x1d8>
 800e562:	4b24      	ldr	r3, [pc, #144]	; (800e5f4 <_svfiprintf_r+0x1f8>)
 800e564:	bb1b      	cbnz	r3, 800e5ae <_svfiprintf_r+0x1b2>
 800e566:	9b03      	ldr	r3, [sp, #12]
 800e568:	3307      	adds	r3, #7
 800e56a:	f023 0307 	bic.w	r3, r3, #7
 800e56e:	3308      	adds	r3, #8
 800e570:	9303      	str	r3, [sp, #12]
 800e572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e574:	4433      	add	r3, r6
 800e576:	9309      	str	r3, [sp, #36]	; 0x24
 800e578:	e767      	b.n	800e44a <_svfiprintf_r+0x4e>
 800e57a:	460c      	mov	r4, r1
 800e57c:	2001      	movs	r0, #1
 800e57e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e582:	e7a5      	b.n	800e4d0 <_svfiprintf_r+0xd4>
 800e584:	2300      	movs	r3, #0
 800e586:	f04f 0c0a 	mov.w	ip, #10
 800e58a:	4619      	mov	r1, r3
 800e58c:	3401      	adds	r4, #1
 800e58e:	9305      	str	r3, [sp, #20]
 800e590:	4620      	mov	r0, r4
 800e592:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e596:	3a30      	subs	r2, #48	; 0x30
 800e598:	2a09      	cmp	r2, #9
 800e59a:	d903      	bls.n	800e5a4 <_svfiprintf_r+0x1a8>
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d0c5      	beq.n	800e52c <_svfiprintf_r+0x130>
 800e5a0:	9105      	str	r1, [sp, #20]
 800e5a2:	e7c3      	b.n	800e52c <_svfiprintf_r+0x130>
 800e5a4:	4604      	mov	r4, r0
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5ac:	e7f0      	b.n	800e590 <_svfiprintf_r+0x194>
 800e5ae:	ab03      	add	r3, sp, #12
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	462a      	mov	r2, r5
 800e5b4:	4638      	mov	r0, r7
 800e5b6:	4b10      	ldr	r3, [pc, #64]	; (800e5f8 <_svfiprintf_r+0x1fc>)
 800e5b8:	a904      	add	r1, sp, #16
 800e5ba:	f7fd ffc5 	bl	800c548 <_printf_float>
 800e5be:	1c42      	adds	r2, r0, #1
 800e5c0:	4606      	mov	r6, r0
 800e5c2:	d1d6      	bne.n	800e572 <_svfiprintf_r+0x176>
 800e5c4:	89ab      	ldrh	r3, [r5, #12]
 800e5c6:	065b      	lsls	r3, r3, #25
 800e5c8:	f53f af2c 	bmi.w	800e424 <_svfiprintf_r+0x28>
 800e5cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5ce:	b01d      	add	sp, #116	; 0x74
 800e5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d4:	ab03      	add	r3, sp, #12
 800e5d6:	9300      	str	r3, [sp, #0]
 800e5d8:	462a      	mov	r2, r5
 800e5da:	4638      	mov	r0, r7
 800e5dc:	4b06      	ldr	r3, [pc, #24]	; (800e5f8 <_svfiprintf_r+0x1fc>)
 800e5de:	a904      	add	r1, sp, #16
 800e5e0:	f7fe fa4e 	bl	800ca80 <_printf_i>
 800e5e4:	e7eb      	b.n	800e5be <_svfiprintf_r+0x1c2>
 800e5e6:	bf00      	nop
 800e5e8:	0800f56c 	.word	0x0800f56c
 800e5ec:	0800f572 	.word	0x0800f572
 800e5f0:	0800f576 	.word	0x0800f576
 800e5f4:	0800c549 	.word	0x0800c549
 800e5f8:	0800e345 	.word	0x0800e345

0800e5fc <_sbrk_r>:
 800e5fc:	b538      	push	{r3, r4, r5, lr}
 800e5fe:	2300      	movs	r3, #0
 800e600:	4d05      	ldr	r5, [pc, #20]	; (800e618 <_sbrk_r+0x1c>)
 800e602:	4604      	mov	r4, r0
 800e604:	4608      	mov	r0, r1
 800e606:	602b      	str	r3, [r5, #0]
 800e608:	f7f8 fcce 	bl	8006fa8 <_sbrk>
 800e60c:	1c43      	adds	r3, r0, #1
 800e60e:	d102      	bne.n	800e616 <_sbrk_r+0x1a>
 800e610:	682b      	ldr	r3, [r5, #0]
 800e612:	b103      	cbz	r3, 800e616 <_sbrk_r+0x1a>
 800e614:	6023      	str	r3, [r4, #0]
 800e616:	bd38      	pop	{r3, r4, r5, pc}
 800e618:	200019bc 	.word	0x200019bc

0800e61c <__assert_func>:
 800e61c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e61e:	4614      	mov	r4, r2
 800e620:	461a      	mov	r2, r3
 800e622:	4b09      	ldr	r3, [pc, #36]	; (800e648 <__assert_func+0x2c>)
 800e624:	4605      	mov	r5, r0
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	68d8      	ldr	r0, [r3, #12]
 800e62a:	b14c      	cbz	r4, 800e640 <__assert_func+0x24>
 800e62c:	4b07      	ldr	r3, [pc, #28]	; (800e64c <__assert_func+0x30>)
 800e62e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e632:	9100      	str	r1, [sp, #0]
 800e634:	462b      	mov	r3, r5
 800e636:	4906      	ldr	r1, [pc, #24]	; (800e650 <__assert_func+0x34>)
 800e638:	f000 f80e 	bl	800e658 <fiprintf>
 800e63c:	f000 faaa 	bl	800eb94 <abort>
 800e640:	4b04      	ldr	r3, [pc, #16]	; (800e654 <__assert_func+0x38>)
 800e642:	461c      	mov	r4, r3
 800e644:	e7f3      	b.n	800e62e <__assert_func+0x12>
 800e646:	bf00      	nop
 800e648:	20000190 	.word	0x20000190
 800e64c:	0800f57d 	.word	0x0800f57d
 800e650:	0800f58a 	.word	0x0800f58a
 800e654:	0800f5b8 	.word	0x0800f5b8

0800e658 <fiprintf>:
 800e658:	b40e      	push	{r1, r2, r3}
 800e65a:	b503      	push	{r0, r1, lr}
 800e65c:	4601      	mov	r1, r0
 800e65e:	ab03      	add	r3, sp, #12
 800e660:	4805      	ldr	r0, [pc, #20]	; (800e678 <fiprintf+0x20>)
 800e662:	f853 2b04 	ldr.w	r2, [r3], #4
 800e666:	6800      	ldr	r0, [r0, #0]
 800e668:	9301      	str	r3, [sp, #4]
 800e66a:	f000 f895 	bl	800e798 <_vfiprintf_r>
 800e66e:	b002      	add	sp, #8
 800e670:	f85d eb04 	ldr.w	lr, [sp], #4
 800e674:	b003      	add	sp, #12
 800e676:	4770      	bx	lr
 800e678:	20000190 	.word	0x20000190

0800e67c <__ascii_mbtowc>:
 800e67c:	b082      	sub	sp, #8
 800e67e:	b901      	cbnz	r1, 800e682 <__ascii_mbtowc+0x6>
 800e680:	a901      	add	r1, sp, #4
 800e682:	b142      	cbz	r2, 800e696 <__ascii_mbtowc+0x1a>
 800e684:	b14b      	cbz	r3, 800e69a <__ascii_mbtowc+0x1e>
 800e686:	7813      	ldrb	r3, [r2, #0]
 800e688:	600b      	str	r3, [r1, #0]
 800e68a:	7812      	ldrb	r2, [r2, #0]
 800e68c:	1e10      	subs	r0, r2, #0
 800e68e:	bf18      	it	ne
 800e690:	2001      	movne	r0, #1
 800e692:	b002      	add	sp, #8
 800e694:	4770      	bx	lr
 800e696:	4610      	mov	r0, r2
 800e698:	e7fb      	b.n	800e692 <__ascii_mbtowc+0x16>
 800e69a:	f06f 0001 	mvn.w	r0, #1
 800e69e:	e7f8      	b.n	800e692 <__ascii_mbtowc+0x16>

0800e6a0 <memmove>:
 800e6a0:	4288      	cmp	r0, r1
 800e6a2:	b510      	push	{r4, lr}
 800e6a4:	eb01 0402 	add.w	r4, r1, r2
 800e6a8:	d902      	bls.n	800e6b0 <memmove+0x10>
 800e6aa:	4284      	cmp	r4, r0
 800e6ac:	4623      	mov	r3, r4
 800e6ae:	d807      	bhi.n	800e6c0 <memmove+0x20>
 800e6b0:	1e43      	subs	r3, r0, #1
 800e6b2:	42a1      	cmp	r1, r4
 800e6b4:	d008      	beq.n	800e6c8 <memmove+0x28>
 800e6b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6be:	e7f8      	b.n	800e6b2 <memmove+0x12>
 800e6c0:	4601      	mov	r1, r0
 800e6c2:	4402      	add	r2, r0
 800e6c4:	428a      	cmp	r2, r1
 800e6c6:	d100      	bne.n	800e6ca <memmove+0x2a>
 800e6c8:	bd10      	pop	{r4, pc}
 800e6ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6d2:	e7f7      	b.n	800e6c4 <memmove+0x24>

0800e6d4 <__malloc_lock>:
 800e6d4:	4801      	ldr	r0, [pc, #4]	; (800e6dc <__malloc_lock+0x8>)
 800e6d6:	f000 bc19 	b.w	800ef0c <__retarget_lock_acquire_recursive>
 800e6da:	bf00      	nop
 800e6dc:	200019c0 	.word	0x200019c0

0800e6e0 <__malloc_unlock>:
 800e6e0:	4801      	ldr	r0, [pc, #4]	; (800e6e8 <__malloc_unlock+0x8>)
 800e6e2:	f000 bc14 	b.w	800ef0e <__retarget_lock_release_recursive>
 800e6e6:	bf00      	nop
 800e6e8:	200019c0 	.word	0x200019c0

0800e6ec <_realloc_r>:
 800e6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f0:	4680      	mov	r8, r0
 800e6f2:	4614      	mov	r4, r2
 800e6f4:	460e      	mov	r6, r1
 800e6f6:	b921      	cbnz	r1, 800e702 <_realloc_r+0x16>
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fe:	f7ff bdad 	b.w	800e25c <_malloc_r>
 800e702:	b92a      	cbnz	r2, 800e710 <_realloc_r+0x24>
 800e704:	f7ff fd42 	bl	800e18c <_free_r>
 800e708:	4625      	mov	r5, r4
 800e70a:	4628      	mov	r0, r5
 800e70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e710:	f000 fc64 	bl	800efdc <_malloc_usable_size_r>
 800e714:	4284      	cmp	r4, r0
 800e716:	4607      	mov	r7, r0
 800e718:	d802      	bhi.n	800e720 <_realloc_r+0x34>
 800e71a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e71e:	d812      	bhi.n	800e746 <_realloc_r+0x5a>
 800e720:	4621      	mov	r1, r4
 800e722:	4640      	mov	r0, r8
 800e724:	f7ff fd9a 	bl	800e25c <_malloc_r>
 800e728:	4605      	mov	r5, r0
 800e72a:	2800      	cmp	r0, #0
 800e72c:	d0ed      	beq.n	800e70a <_realloc_r+0x1e>
 800e72e:	42bc      	cmp	r4, r7
 800e730:	4622      	mov	r2, r4
 800e732:	4631      	mov	r1, r6
 800e734:	bf28      	it	cs
 800e736:	463a      	movcs	r2, r7
 800e738:	f7fd fe52 	bl	800c3e0 <memcpy>
 800e73c:	4631      	mov	r1, r6
 800e73e:	4640      	mov	r0, r8
 800e740:	f7ff fd24 	bl	800e18c <_free_r>
 800e744:	e7e1      	b.n	800e70a <_realloc_r+0x1e>
 800e746:	4635      	mov	r5, r6
 800e748:	e7df      	b.n	800e70a <_realloc_r+0x1e>

0800e74a <__sfputc_r>:
 800e74a:	6893      	ldr	r3, [r2, #8]
 800e74c:	b410      	push	{r4}
 800e74e:	3b01      	subs	r3, #1
 800e750:	2b00      	cmp	r3, #0
 800e752:	6093      	str	r3, [r2, #8]
 800e754:	da07      	bge.n	800e766 <__sfputc_r+0x1c>
 800e756:	6994      	ldr	r4, [r2, #24]
 800e758:	42a3      	cmp	r3, r4
 800e75a:	db01      	blt.n	800e760 <__sfputc_r+0x16>
 800e75c:	290a      	cmp	r1, #10
 800e75e:	d102      	bne.n	800e766 <__sfputc_r+0x1c>
 800e760:	bc10      	pop	{r4}
 800e762:	f000 b949 	b.w	800e9f8 <__swbuf_r>
 800e766:	6813      	ldr	r3, [r2, #0]
 800e768:	1c58      	adds	r0, r3, #1
 800e76a:	6010      	str	r0, [r2, #0]
 800e76c:	7019      	strb	r1, [r3, #0]
 800e76e:	4608      	mov	r0, r1
 800e770:	bc10      	pop	{r4}
 800e772:	4770      	bx	lr

0800e774 <__sfputs_r>:
 800e774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e776:	4606      	mov	r6, r0
 800e778:	460f      	mov	r7, r1
 800e77a:	4614      	mov	r4, r2
 800e77c:	18d5      	adds	r5, r2, r3
 800e77e:	42ac      	cmp	r4, r5
 800e780:	d101      	bne.n	800e786 <__sfputs_r+0x12>
 800e782:	2000      	movs	r0, #0
 800e784:	e007      	b.n	800e796 <__sfputs_r+0x22>
 800e786:	463a      	mov	r2, r7
 800e788:	4630      	mov	r0, r6
 800e78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e78e:	f7ff ffdc 	bl	800e74a <__sfputc_r>
 800e792:	1c43      	adds	r3, r0, #1
 800e794:	d1f3      	bne.n	800e77e <__sfputs_r+0xa>
 800e796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e798 <_vfiprintf_r>:
 800e798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79c:	460d      	mov	r5, r1
 800e79e:	4614      	mov	r4, r2
 800e7a0:	4698      	mov	r8, r3
 800e7a2:	4606      	mov	r6, r0
 800e7a4:	b09d      	sub	sp, #116	; 0x74
 800e7a6:	b118      	cbz	r0, 800e7b0 <_vfiprintf_r+0x18>
 800e7a8:	6983      	ldr	r3, [r0, #24]
 800e7aa:	b90b      	cbnz	r3, 800e7b0 <_vfiprintf_r+0x18>
 800e7ac:	f000 fb10 	bl	800edd0 <__sinit>
 800e7b0:	4b89      	ldr	r3, [pc, #548]	; (800e9d8 <_vfiprintf_r+0x240>)
 800e7b2:	429d      	cmp	r5, r3
 800e7b4:	d11b      	bne.n	800e7ee <_vfiprintf_r+0x56>
 800e7b6:	6875      	ldr	r5, [r6, #4]
 800e7b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7ba:	07d9      	lsls	r1, r3, #31
 800e7bc:	d405      	bmi.n	800e7ca <_vfiprintf_r+0x32>
 800e7be:	89ab      	ldrh	r3, [r5, #12]
 800e7c0:	059a      	lsls	r2, r3, #22
 800e7c2:	d402      	bmi.n	800e7ca <_vfiprintf_r+0x32>
 800e7c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7c6:	f000 fba1 	bl	800ef0c <__retarget_lock_acquire_recursive>
 800e7ca:	89ab      	ldrh	r3, [r5, #12]
 800e7cc:	071b      	lsls	r3, r3, #28
 800e7ce:	d501      	bpl.n	800e7d4 <_vfiprintf_r+0x3c>
 800e7d0:	692b      	ldr	r3, [r5, #16]
 800e7d2:	b9eb      	cbnz	r3, 800e810 <_vfiprintf_r+0x78>
 800e7d4:	4629      	mov	r1, r5
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	f000 f96e 	bl	800eab8 <__swsetup_r>
 800e7dc:	b1c0      	cbz	r0, 800e810 <_vfiprintf_r+0x78>
 800e7de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7e0:	07dc      	lsls	r4, r3, #31
 800e7e2:	d50e      	bpl.n	800e802 <_vfiprintf_r+0x6a>
 800e7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e8:	b01d      	add	sp, #116	; 0x74
 800e7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ee:	4b7b      	ldr	r3, [pc, #492]	; (800e9dc <_vfiprintf_r+0x244>)
 800e7f0:	429d      	cmp	r5, r3
 800e7f2:	d101      	bne.n	800e7f8 <_vfiprintf_r+0x60>
 800e7f4:	68b5      	ldr	r5, [r6, #8]
 800e7f6:	e7df      	b.n	800e7b8 <_vfiprintf_r+0x20>
 800e7f8:	4b79      	ldr	r3, [pc, #484]	; (800e9e0 <_vfiprintf_r+0x248>)
 800e7fa:	429d      	cmp	r5, r3
 800e7fc:	bf08      	it	eq
 800e7fe:	68f5      	ldreq	r5, [r6, #12]
 800e800:	e7da      	b.n	800e7b8 <_vfiprintf_r+0x20>
 800e802:	89ab      	ldrh	r3, [r5, #12]
 800e804:	0598      	lsls	r0, r3, #22
 800e806:	d4ed      	bmi.n	800e7e4 <_vfiprintf_r+0x4c>
 800e808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e80a:	f000 fb80 	bl	800ef0e <__retarget_lock_release_recursive>
 800e80e:	e7e9      	b.n	800e7e4 <_vfiprintf_r+0x4c>
 800e810:	2300      	movs	r3, #0
 800e812:	9309      	str	r3, [sp, #36]	; 0x24
 800e814:	2320      	movs	r3, #32
 800e816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e81a:	2330      	movs	r3, #48	; 0x30
 800e81c:	f04f 0901 	mov.w	r9, #1
 800e820:	f8cd 800c 	str.w	r8, [sp, #12]
 800e824:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e9e4 <_vfiprintf_r+0x24c>
 800e828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e82c:	4623      	mov	r3, r4
 800e82e:	469a      	mov	sl, r3
 800e830:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e834:	b10a      	cbz	r2, 800e83a <_vfiprintf_r+0xa2>
 800e836:	2a25      	cmp	r2, #37	; 0x25
 800e838:	d1f9      	bne.n	800e82e <_vfiprintf_r+0x96>
 800e83a:	ebba 0b04 	subs.w	fp, sl, r4
 800e83e:	d00b      	beq.n	800e858 <_vfiprintf_r+0xc0>
 800e840:	465b      	mov	r3, fp
 800e842:	4622      	mov	r2, r4
 800e844:	4629      	mov	r1, r5
 800e846:	4630      	mov	r0, r6
 800e848:	f7ff ff94 	bl	800e774 <__sfputs_r>
 800e84c:	3001      	adds	r0, #1
 800e84e:	f000 80aa 	beq.w	800e9a6 <_vfiprintf_r+0x20e>
 800e852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e854:	445a      	add	r2, fp
 800e856:	9209      	str	r2, [sp, #36]	; 0x24
 800e858:	f89a 3000 	ldrb.w	r3, [sl]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f000 80a2 	beq.w	800e9a6 <_vfiprintf_r+0x20e>
 800e862:	2300      	movs	r3, #0
 800e864:	f04f 32ff 	mov.w	r2, #4294967295
 800e868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e86c:	f10a 0a01 	add.w	sl, sl, #1
 800e870:	9304      	str	r3, [sp, #16]
 800e872:	9307      	str	r3, [sp, #28]
 800e874:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e878:	931a      	str	r3, [sp, #104]	; 0x68
 800e87a:	4654      	mov	r4, sl
 800e87c:	2205      	movs	r2, #5
 800e87e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e882:	4858      	ldr	r0, [pc, #352]	; (800e9e4 <_vfiprintf_r+0x24c>)
 800e884:	f7ff f8de 	bl	800da44 <memchr>
 800e888:	9a04      	ldr	r2, [sp, #16]
 800e88a:	b9d8      	cbnz	r0, 800e8c4 <_vfiprintf_r+0x12c>
 800e88c:	06d1      	lsls	r1, r2, #27
 800e88e:	bf44      	itt	mi
 800e890:	2320      	movmi	r3, #32
 800e892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e896:	0713      	lsls	r3, r2, #28
 800e898:	bf44      	itt	mi
 800e89a:	232b      	movmi	r3, #43	; 0x2b
 800e89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e8a4:	2b2a      	cmp	r3, #42	; 0x2a
 800e8a6:	d015      	beq.n	800e8d4 <_vfiprintf_r+0x13c>
 800e8a8:	4654      	mov	r4, sl
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	f04f 0c0a 	mov.w	ip, #10
 800e8b0:	9a07      	ldr	r2, [sp, #28]
 800e8b2:	4621      	mov	r1, r4
 800e8b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8b8:	3b30      	subs	r3, #48	; 0x30
 800e8ba:	2b09      	cmp	r3, #9
 800e8bc:	d94e      	bls.n	800e95c <_vfiprintf_r+0x1c4>
 800e8be:	b1b0      	cbz	r0, 800e8ee <_vfiprintf_r+0x156>
 800e8c0:	9207      	str	r2, [sp, #28]
 800e8c2:	e014      	b.n	800e8ee <_vfiprintf_r+0x156>
 800e8c4:	eba0 0308 	sub.w	r3, r0, r8
 800e8c8:	fa09 f303 	lsl.w	r3, r9, r3
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	46a2      	mov	sl, r4
 800e8d0:	9304      	str	r3, [sp, #16]
 800e8d2:	e7d2      	b.n	800e87a <_vfiprintf_r+0xe2>
 800e8d4:	9b03      	ldr	r3, [sp, #12]
 800e8d6:	1d19      	adds	r1, r3, #4
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	9103      	str	r1, [sp, #12]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	bfbb      	ittet	lt
 800e8e0:	425b      	neglt	r3, r3
 800e8e2:	f042 0202 	orrlt.w	r2, r2, #2
 800e8e6:	9307      	strge	r3, [sp, #28]
 800e8e8:	9307      	strlt	r3, [sp, #28]
 800e8ea:	bfb8      	it	lt
 800e8ec:	9204      	strlt	r2, [sp, #16]
 800e8ee:	7823      	ldrb	r3, [r4, #0]
 800e8f0:	2b2e      	cmp	r3, #46	; 0x2e
 800e8f2:	d10c      	bne.n	800e90e <_vfiprintf_r+0x176>
 800e8f4:	7863      	ldrb	r3, [r4, #1]
 800e8f6:	2b2a      	cmp	r3, #42	; 0x2a
 800e8f8:	d135      	bne.n	800e966 <_vfiprintf_r+0x1ce>
 800e8fa:	9b03      	ldr	r3, [sp, #12]
 800e8fc:	3402      	adds	r4, #2
 800e8fe:	1d1a      	adds	r2, r3, #4
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	9203      	str	r2, [sp, #12]
 800e904:	2b00      	cmp	r3, #0
 800e906:	bfb8      	it	lt
 800e908:	f04f 33ff 	movlt.w	r3, #4294967295
 800e90c:	9305      	str	r3, [sp, #20]
 800e90e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e9e8 <_vfiprintf_r+0x250>
 800e912:	2203      	movs	r2, #3
 800e914:	4650      	mov	r0, sl
 800e916:	7821      	ldrb	r1, [r4, #0]
 800e918:	f7ff f894 	bl	800da44 <memchr>
 800e91c:	b140      	cbz	r0, 800e930 <_vfiprintf_r+0x198>
 800e91e:	2340      	movs	r3, #64	; 0x40
 800e920:	eba0 000a 	sub.w	r0, r0, sl
 800e924:	fa03 f000 	lsl.w	r0, r3, r0
 800e928:	9b04      	ldr	r3, [sp, #16]
 800e92a:	3401      	adds	r4, #1
 800e92c:	4303      	orrs	r3, r0
 800e92e:	9304      	str	r3, [sp, #16]
 800e930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e934:	2206      	movs	r2, #6
 800e936:	482d      	ldr	r0, [pc, #180]	; (800e9ec <_vfiprintf_r+0x254>)
 800e938:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e93c:	f7ff f882 	bl	800da44 <memchr>
 800e940:	2800      	cmp	r0, #0
 800e942:	d03f      	beq.n	800e9c4 <_vfiprintf_r+0x22c>
 800e944:	4b2a      	ldr	r3, [pc, #168]	; (800e9f0 <_vfiprintf_r+0x258>)
 800e946:	bb1b      	cbnz	r3, 800e990 <_vfiprintf_r+0x1f8>
 800e948:	9b03      	ldr	r3, [sp, #12]
 800e94a:	3307      	adds	r3, #7
 800e94c:	f023 0307 	bic.w	r3, r3, #7
 800e950:	3308      	adds	r3, #8
 800e952:	9303      	str	r3, [sp, #12]
 800e954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e956:	443b      	add	r3, r7
 800e958:	9309      	str	r3, [sp, #36]	; 0x24
 800e95a:	e767      	b.n	800e82c <_vfiprintf_r+0x94>
 800e95c:	460c      	mov	r4, r1
 800e95e:	2001      	movs	r0, #1
 800e960:	fb0c 3202 	mla	r2, ip, r2, r3
 800e964:	e7a5      	b.n	800e8b2 <_vfiprintf_r+0x11a>
 800e966:	2300      	movs	r3, #0
 800e968:	f04f 0c0a 	mov.w	ip, #10
 800e96c:	4619      	mov	r1, r3
 800e96e:	3401      	adds	r4, #1
 800e970:	9305      	str	r3, [sp, #20]
 800e972:	4620      	mov	r0, r4
 800e974:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e978:	3a30      	subs	r2, #48	; 0x30
 800e97a:	2a09      	cmp	r2, #9
 800e97c:	d903      	bls.n	800e986 <_vfiprintf_r+0x1ee>
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d0c5      	beq.n	800e90e <_vfiprintf_r+0x176>
 800e982:	9105      	str	r1, [sp, #20]
 800e984:	e7c3      	b.n	800e90e <_vfiprintf_r+0x176>
 800e986:	4604      	mov	r4, r0
 800e988:	2301      	movs	r3, #1
 800e98a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e98e:	e7f0      	b.n	800e972 <_vfiprintf_r+0x1da>
 800e990:	ab03      	add	r3, sp, #12
 800e992:	9300      	str	r3, [sp, #0]
 800e994:	462a      	mov	r2, r5
 800e996:	4630      	mov	r0, r6
 800e998:	4b16      	ldr	r3, [pc, #88]	; (800e9f4 <_vfiprintf_r+0x25c>)
 800e99a:	a904      	add	r1, sp, #16
 800e99c:	f7fd fdd4 	bl	800c548 <_printf_float>
 800e9a0:	4607      	mov	r7, r0
 800e9a2:	1c78      	adds	r0, r7, #1
 800e9a4:	d1d6      	bne.n	800e954 <_vfiprintf_r+0x1bc>
 800e9a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9a8:	07d9      	lsls	r1, r3, #31
 800e9aa:	d405      	bmi.n	800e9b8 <_vfiprintf_r+0x220>
 800e9ac:	89ab      	ldrh	r3, [r5, #12]
 800e9ae:	059a      	lsls	r2, r3, #22
 800e9b0:	d402      	bmi.n	800e9b8 <_vfiprintf_r+0x220>
 800e9b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9b4:	f000 faab 	bl	800ef0e <__retarget_lock_release_recursive>
 800e9b8:	89ab      	ldrh	r3, [r5, #12]
 800e9ba:	065b      	lsls	r3, r3, #25
 800e9bc:	f53f af12 	bmi.w	800e7e4 <_vfiprintf_r+0x4c>
 800e9c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9c2:	e711      	b.n	800e7e8 <_vfiprintf_r+0x50>
 800e9c4:	ab03      	add	r3, sp, #12
 800e9c6:	9300      	str	r3, [sp, #0]
 800e9c8:	462a      	mov	r2, r5
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	4b09      	ldr	r3, [pc, #36]	; (800e9f4 <_vfiprintf_r+0x25c>)
 800e9ce:	a904      	add	r1, sp, #16
 800e9d0:	f7fe f856 	bl	800ca80 <_printf_i>
 800e9d4:	e7e4      	b.n	800e9a0 <_vfiprintf_r+0x208>
 800e9d6:	bf00      	nop
 800e9d8:	0800f6e4 	.word	0x0800f6e4
 800e9dc:	0800f704 	.word	0x0800f704
 800e9e0:	0800f6c4 	.word	0x0800f6c4
 800e9e4:	0800f56c 	.word	0x0800f56c
 800e9e8:	0800f572 	.word	0x0800f572
 800e9ec:	0800f576 	.word	0x0800f576
 800e9f0:	0800c549 	.word	0x0800c549
 800e9f4:	0800e775 	.word	0x0800e775

0800e9f8 <__swbuf_r>:
 800e9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9fa:	460e      	mov	r6, r1
 800e9fc:	4614      	mov	r4, r2
 800e9fe:	4605      	mov	r5, r0
 800ea00:	b118      	cbz	r0, 800ea0a <__swbuf_r+0x12>
 800ea02:	6983      	ldr	r3, [r0, #24]
 800ea04:	b90b      	cbnz	r3, 800ea0a <__swbuf_r+0x12>
 800ea06:	f000 f9e3 	bl	800edd0 <__sinit>
 800ea0a:	4b21      	ldr	r3, [pc, #132]	; (800ea90 <__swbuf_r+0x98>)
 800ea0c:	429c      	cmp	r4, r3
 800ea0e:	d12b      	bne.n	800ea68 <__swbuf_r+0x70>
 800ea10:	686c      	ldr	r4, [r5, #4]
 800ea12:	69a3      	ldr	r3, [r4, #24]
 800ea14:	60a3      	str	r3, [r4, #8]
 800ea16:	89a3      	ldrh	r3, [r4, #12]
 800ea18:	071a      	lsls	r2, r3, #28
 800ea1a:	d52f      	bpl.n	800ea7c <__swbuf_r+0x84>
 800ea1c:	6923      	ldr	r3, [r4, #16]
 800ea1e:	b36b      	cbz	r3, 800ea7c <__swbuf_r+0x84>
 800ea20:	6923      	ldr	r3, [r4, #16]
 800ea22:	6820      	ldr	r0, [r4, #0]
 800ea24:	b2f6      	uxtb	r6, r6
 800ea26:	1ac0      	subs	r0, r0, r3
 800ea28:	6963      	ldr	r3, [r4, #20]
 800ea2a:	4637      	mov	r7, r6
 800ea2c:	4283      	cmp	r3, r0
 800ea2e:	dc04      	bgt.n	800ea3a <__swbuf_r+0x42>
 800ea30:	4621      	mov	r1, r4
 800ea32:	4628      	mov	r0, r5
 800ea34:	f000 f938 	bl	800eca8 <_fflush_r>
 800ea38:	bb30      	cbnz	r0, 800ea88 <__swbuf_r+0x90>
 800ea3a:	68a3      	ldr	r3, [r4, #8]
 800ea3c:	3001      	adds	r0, #1
 800ea3e:	3b01      	subs	r3, #1
 800ea40:	60a3      	str	r3, [r4, #8]
 800ea42:	6823      	ldr	r3, [r4, #0]
 800ea44:	1c5a      	adds	r2, r3, #1
 800ea46:	6022      	str	r2, [r4, #0]
 800ea48:	701e      	strb	r6, [r3, #0]
 800ea4a:	6963      	ldr	r3, [r4, #20]
 800ea4c:	4283      	cmp	r3, r0
 800ea4e:	d004      	beq.n	800ea5a <__swbuf_r+0x62>
 800ea50:	89a3      	ldrh	r3, [r4, #12]
 800ea52:	07db      	lsls	r3, r3, #31
 800ea54:	d506      	bpl.n	800ea64 <__swbuf_r+0x6c>
 800ea56:	2e0a      	cmp	r6, #10
 800ea58:	d104      	bne.n	800ea64 <__swbuf_r+0x6c>
 800ea5a:	4621      	mov	r1, r4
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	f000 f923 	bl	800eca8 <_fflush_r>
 800ea62:	b988      	cbnz	r0, 800ea88 <__swbuf_r+0x90>
 800ea64:	4638      	mov	r0, r7
 800ea66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea68:	4b0a      	ldr	r3, [pc, #40]	; (800ea94 <__swbuf_r+0x9c>)
 800ea6a:	429c      	cmp	r4, r3
 800ea6c:	d101      	bne.n	800ea72 <__swbuf_r+0x7a>
 800ea6e:	68ac      	ldr	r4, [r5, #8]
 800ea70:	e7cf      	b.n	800ea12 <__swbuf_r+0x1a>
 800ea72:	4b09      	ldr	r3, [pc, #36]	; (800ea98 <__swbuf_r+0xa0>)
 800ea74:	429c      	cmp	r4, r3
 800ea76:	bf08      	it	eq
 800ea78:	68ec      	ldreq	r4, [r5, #12]
 800ea7a:	e7ca      	b.n	800ea12 <__swbuf_r+0x1a>
 800ea7c:	4621      	mov	r1, r4
 800ea7e:	4628      	mov	r0, r5
 800ea80:	f000 f81a 	bl	800eab8 <__swsetup_r>
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d0cb      	beq.n	800ea20 <__swbuf_r+0x28>
 800ea88:	f04f 37ff 	mov.w	r7, #4294967295
 800ea8c:	e7ea      	b.n	800ea64 <__swbuf_r+0x6c>
 800ea8e:	bf00      	nop
 800ea90:	0800f6e4 	.word	0x0800f6e4
 800ea94:	0800f704 	.word	0x0800f704
 800ea98:	0800f6c4 	.word	0x0800f6c4

0800ea9c <__ascii_wctomb>:
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	4608      	mov	r0, r1
 800eaa0:	b141      	cbz	r1, 800eab4 <__ascii_wctomb+0x18>
 800eaa2:	2aff      	cmp	r2, #255	; 0xff
 800eaa4:	d904      	bls.n	800eab0 <__ascii_wctomb+0x14>
 800eaa6:	228a      	movs	r2, #138	; 0x8a
 800eaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800eaac:	601a      	str	r2, [r3, #0]
 800eaae:	4770      	bx	lr
 800eab0:	2001      	movs	r0, #1
 800eab2:	700a      	strb	r2, [r1, #0]
 800eab4:	4770      	bx	lr
	...

0800eab8 <__swsetup_r>:
 800eab8:	4b32      	ldr	r3, [pc, #200]	; (800eb84 <__swsetup_r+0xcc>)
 800eaba:	b570      	push	{r4, r5, r6, lr}
 800eabc:	681d      	ldr	r5, [r3, #0]
 800eabe:	4606      	mov	r6, r0
 800eac0:	460c      	mov	r4, r1
 800eac2:	b125      	cbz	r5, 800eace <__swsetup_r+0x16>
 800eac4:	69ab      	ldr	r3, [r5, #24]
 800eac6:	b913      	cbnz	r3, 800eace <__swsetup_r+0x16>
 800eac8:	4628      	mov	r0, r5
 800eaca:	f000 f981 	bl	800edd0 <__sinit>
 800eace:	4b2e      	ldr	r3, [pc, #184]	; (800eb88 <__swsetup_r+0xd0>)
 800ead0:	429c      	cmp	r4, r3
 800ead2:	d10f      	bne.n	800eaf4 <__swsetup_r+0x3c>
 800ead4:	686c      	ldr	r4, [r5, #4]
 800ead6:	89a3      	ldrh	r3, [r4, #12]
 800ead8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eadc:	0719      	lsls	r1, r3, #28
 800eade:	d42c      	bmi.n	800eb3a <__swsetup_r+0x82>
 800eae0:	06dd      	lsls	r5, r3, #27
 800eae2:	d411      	bmi.n	800eb08 <__swsetup_r+0x50>
 800eae4:	2309      	movs	r3, #9
 800eae6:	6033      	str	r3, [r6, #0]
 800eae8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eaec:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf0:	81a3      	strh	r3, [r4, #12]
 800eaf2:	e03e      	b.n	800eb72 <__swsetup_r+0xba>
 800eaf4:	4b25      	ldr	r3, [pc, #148]	; (800eb8c <__swsetup_r+0xd4>)
 800eaf6:	429c      	cmp	r4, r3
 800eaf8:	d101      	bne.n	800eafe <__swsetup_r+0x46>
 800eafa:	68ac      	ldr	r4, [r5, #8]
 800eafc:	e7eb      	b.n	800ead6 <__swsetup_r+0x1e>
 800eafe:	4b24      	ldr	r3, [pc, #144]	; (800eb90 <__swsetup_r+0xd8>)
 800eb00:	429c      	cmp	r4, r3
 800eb02:	bf08      	it	eq
 800eb04:	68ec      	ldreq	r4, [r5, #12]
 800eb06:	e7e6      	b.n	800ead6 <__swsetup_r+0x1e>
 800eb08:	0758      	lsls	r0, r3, #29
 800eb0a:	d512      	bpl.n	800eb32 <__swsetup_r+0x7a>
 800eb0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb0e:	b141      	cbz	r1, 800eb22 <__swsetup_r+0x6a>
 800eb10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb14:	4299      	cmp	r1, r3
 800eb16:	d002      	beq.n	800eb1e <__swsetup_r+0x66>
 800eb18:	4630      	mov	r0, r6
 800eb1a:	f7ff fb37 	bl	800e18c <_free_r>
 800eb1e:	2300      	movs	r3, #0
 800eb20:	6363      	str	r3, [r4, #52]	; 0x34
 800eb22:	89a3      	ldrh	r3, [r4, #12]
 800eb24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eb28:	81a3      	strh	r3, [r4, #12]
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	6063      	str	r3, [r4, #4]
 800eb2e:	6923      	ldr	r3, [r4, #16]
 800eb30:	6023      	str	r3, [r4, #0]
 800eb32:	89a3      	ldrh	r3, [r4, #12]
 800eb34:	f043 0308 	orr.w	r3, r3, #8
 800eb38:	81a3      	strh	r3, [r4, #12]
 800eb3a:	6923      	ldr	r3, [r4, #16]
 800eb3c:	b94b      	cbnz	r3, 800eb52 <__swsetup_r+0x9a>
 800eb3e:	89a3      	ldrh	r3, [r4, #12]
 800eb40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb48:	d003      	beq.n	800eb52 <__swsetup_r+0x9a>
 800eb4a:	4621      	mov	r1, r4
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	f000 fa05 	bl	800ef5c <__smakebuf_r>
 800eb52:	89a0      	ldrh	r0, [r4, #12]
 800eb54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb58:	f010 0301 	ands.w	r3, r0, #1
 800eb5c:	d00a      	beq.n	800eb74 <__swsetup_r+0xbc>
 800eb5e:	2300      	movs	r3, #0
 800eb60:	60a3      	str	r3, [r4, #8]
 800eb62:	6963      	ldr	r3, [r4, #20]
 800eb64:	425b      	negs	r3, r3
 800eb66:	61a3      	str	r3, [r4, #24]
 800eb68:	6923      	ldr	r3, [r4, #16]
 800eb6a:	b943      	cbnz	r3, 800eb7e <__swsetup_r+0xc6>
 800eb6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eb70:	d1ba      	bne.n	800eae8 <__swsetup_r+0x30>
 800eb72:	bd70      	pop	{r4, r5, r6, pc}
 800eb74:	0781      	lsls	r1, r0, #30
 800eb76:	bf58      	it	pl
 800eb78:	6963      	ldrpl	r3, [r4, #20]
 800eb7a:	60a3      	str	r3, [r4, #8]
 800eb7c:	e7f4      	b.n	800eb68 <__swsetup_r+0xb0>
 800eb7e:	2000      	movs	r0, #0
 800eb80:	e7f7      	b.n	800eb72 <__swsetup_r+0xba>
 800eb82:	bf00      	nop
 800eb84:	20000190 	.word	0x20000190
 800eb88:	0800f6e4 	.word	0x0800f6e4
 800eb8c:	0800f704 	.word	0x0800f704
 800eb90:	0800f6c4 	.word	0x0800f6c4

0800eb94 <abort>:
 800eb94:	2006      	movs	r0, #6
 800eb96:	b508      	push	{r3, lr}
 800eb98:	f000 fa50 	bl	800f03c <raise>
 800eb9c:	2001      	movs	r0, #1
 800eb9e:	f7f8 f9d3 	bl	8006f48 <_exit>
	...

0800eba4 <__sflush_r>:
 800eba4:	898a      	ldrh	r2, [r1, #12]
 800eba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba8:	4605      	mov	r5, r0
 800ebaa:	0710      	lsls	r0, r2, #28
 800ebac:	460c      	mov	r4, r1
 800ebae:	d457      	bmi.n	800ec60 <__sflush_r+0xbc>
 800ebb0:	684b      	ldr	r3, [r1, #4]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	dc04      	bgt.n	800ebc0 <__sflush_r+0x1c>
 800ebb6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	dc01      	bgt.n	800ebc0 <__sflush_r+0x1c>
 800ebbc:	2000      	movs	r0, #0
 800ebbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebc2:	2e00      	cmp	r6, #0
 800ebc4:	d0fa      	beq.n	800ebbc <__sflush_r+0x18>
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebcc:	682f      	ldr	r7, [r5, #0]
 800ebce:	602b      	str	r3, [r5, #0]
 800ebd0:	d032      	beq.n	800ec38 <__sflush_r+0x94>
 800ebd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebd4:	89a3      	ldrh	r3, [r4, #12]
 800ebd6:	075a      	lsls	r2, r3, #29
 800ebd8:	d505      	bpl.n	800ebe6 <__sflush_r+0x42>
 800ebda:	6863      	ldr	r3, [r4, #4]
 800ebdc:	1ac0      	subs	r0, r0, r3
 800ebde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebe0:	b10b      	cbz	r3, 800ebe6 <__sflush_r+0x42>
 800ebe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebe4:	1ac0      	subs	r0, r0, r3
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	4602      	mov	r2, r0
 800ebea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebec:	4628      	mov	r0, r5
 800ebee:	6a21      	ldr	r1, [r4, #32]
 800ebf0:	47b0      	blx	r6
 800ebf2:	1c43      	adds	r3, r0, #1
 800ebf4:	89a3      	ldrh	r3, [r4, #12]
 800ebf6:	d106      	bne.n	800ec06 <__sflush_r+0x62>
 800ebf8:	6829      	ldr	r1, [r5, #0]
 800ebfa:	291d      	cmp	r1, #29
 800ebfc:	d82c      	bhi.n	800ec58 <__sflush_r+0xb4>
 800ebfe:	4a29      	ldr	r2, [pc, #164]	; (800eca4 <__sflush_r+0x100>)
 800ec00:	40ca      	lsrs	r2, r1
 800ec02:	07d6      	lsls	r6, r2, #31
 800ec04:	d528      	bpl.n	800ec58 <__sflush_r+0xb4>
 800ec06:	2200      	movs	r2, #0
 800ec08:	6062      	str	r2, [r4, #4]
 800ec0a:	6922      	ldr	r2, [r4, #16]
 800ec0c:	04d9      	lsls	r1, r3, #19
 800ec0e:	6022      	str	r2, [r4, #0]
 800ec10:	d504      	bpl.n	800ec1c <__sflush_r+0x78>
 800ec12:	1c42      	adds	r2, r0, #1
 800ec14:	d101      	bne.n	800ec1a <__sflush_r+0x76>
 800ec16:	682b      	ldr	r3, [r5, #0]
 800ec18:	b903      	cbnz	r3, 800ec1c <__sflush_r+0x78>
 800ec1a:	6560      	str	r0, [r4, #84]	; 0x54
 800ec1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec1e:	602f      	str	r7, [r5, #0]
 800ec20:	2900      	cmp	r1, #0
 800ec22:	d0cb      	beq.n	800ebbc <__sflush_r+0x18>
 800ec24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec28:	4299      	cmp	r1, r3
 800ec2a:	d002      	beq.n	800ec32 <__sflush_r+0x8e>
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	f7ff faad 	bl	800e18c <_free_r>
 800ec32:	2000      	movs	r0, #0
 800ec34:	6360      	str	r0, [r4, #52]	; 0x34
 800ec36:	e7c2      	b.n	800ebbe <__sflush_r+0x1a>
 800ec38:	6a21      	ldr	r1, [r4, #32]
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	4628      	mov	r0, r5
 800ec3e:	47b0      	blx	r6
 800ec40:	1c41      	adds	r1, r0, #1
 800ec42:	d1c7      	bne.n	800ebd4 <__sflush_r+0x30>
 800ec44:	682b      	ldr	r3, [r5, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d0c4      	beq.n	800ebd4 <__sflush_r+0x30>
 800ec4a:	2b1d      	cmp	r3, #29
 800ec4c:	d001      	beq.n	800ec52 <__sflush_r+0xae>
 800ec4e:	2b16      	cmp	r3, #22
 800ec50:	d101      	bne.n	800ec56 <__sflush_r+0xb2>
 800ec52:	602f      	str	r7, [r5, #0]
 800ec54:	e7b2      	b.n	800ebbc <__sflush_r+0x18>
 800ec56:	89a3      	ldrh	r3, [r4, #12]
 800ec58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec5c:	81a3      	strh	r3, [r4, #12]
 800ec5e:	e7ae      	b.n	800ebbe <__sflush_r+0x1a>
 800ec60:	690f      	ldr	r7, [r1, #16]
 800ec62:	2f00      	cmp	r7, #0
 800ec64:	d0aa      	beq.n	800ebbc <__sflush_r+0x18>
 800ec66:	0793      	lsls	r3, r2, #30
 800ec68:	bf18      	it	ne
 800ec6a:	2300      	movne	r3, #0
 800ec6c:	680e      	ldr	r6, [r1, #0]
 800ec6e:	bf08      	it	eq
 800ec70:	694b      	ldreq	r3, [r1, #20]
 800ec72:	1bf6      	subs	r6, r6, r7
 800ec74:	600f      	str	r7, [r1, #0]
 800ec76:	608b      	str	r3, [r1, #8]
 800ec78:	2e00      	cmp	r6, #0
 800ec7a:	dd9f      	ble.n	800ebbc <__sflush_r+0x18>
 800ec7c:	4633      	mov	r3, r6
 800ec7e:	463a      	mov	r2, r7
 800ec80:	4628      	mov	r0, r5
 800ec82:	6a21      	ldr	r1, [r4, #32]
 800ec84:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ec88:	47e0      	blx	ip
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	dc06      	bgt.n	800ec9c <__sflush_r+0xf8>
 800ec8e:	89a3      	ldrh	r3, [r4, #12]
 800ec90:	f04f 30ff 	mov.w	r0, #4294967295
 800ec94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec98:	81a3      	strh	r3, [r4, #12]
 800ec9a:	e790      	b.n	800ebbe <__sflush_r+0x1a>
 800ec9c:	4407      	add	r7, r0
 800ec9e:	1a36      	subs	r6, r6, r0
 800eca0:	e7ea      	b.n	800ec78 <__sflush_r+0xd4>
 800eca2:	bf00      	nop
 800eca4:	20400001 	.word	0x20400001

0800eca8 <_fflush_r>:
 800eca8:	b538      	push	{r3, r4, r5, lr}
 800ecaa:	690b      	ldr	r3, [r1, #16]
 800ecac:	4605      	mov	r5, r0
 800ecae:	460c      	mov	r4, r1
 800ecb0:	b913      	cbnz	r3, 800ecb8 <_fflush_r+0x10>
 800ecb2:	2500      	movs	r5, #0
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	bd38      	pop	{r3, r4, r5, pc}
 800ecb8:	b118      	cbz	r0, 800ecc2 <_fflush_r+0x1a>
 800ecba:	6983      	ldr	r3, [r0, #24]
 800ecbc:	b90b      	cbnz	r3, 800ecc2 <_fflush_r+0x1a>
 800ecbe:	f000 f887 	bl	800edd0 <__sinit>
 800ecc2:	4b14      	ldr	r3, [pc, #80]	; (800ed14 <_fflush_r+0x6c>)
 800ecc4:	429c      	cmp	r4, r3
 800ecc6:	d11b      	bne.n	800ed00 <_fflush_r+0x58>
 800ecc8:	686c      	ldr	r4, [r5, #4]
 800ecca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d0ef      	beq.n	800ecb2 <_fflush_r+0xa>
 800ecd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ecd4:	07d0      	lsls	r0, r2, #31
 800ecd6:	d404      	bmi.n	800ece2 <_fflush_r+0x3a>
 800ecd8:	0599      	lsls	r1, r3, #22
 800ecda:	d402      	bmi.n	800ece2 <_fflush_r+0x3a>
 800ecdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecde:	f000 f915 	bl	800ef0c <__retarget_lock_acquire_recursive>
 800ece2:	4628      	mov	r0, r5
 800ece4:	4621      	mov	r1, r4
 800ece6:	f7ff ff5d 	bl	800eba4 <__sflush_r>
 800ecea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecec:	4605      	mov	r5, r0
 800ecee:	07da      	lsls	r2, r3, #31
 800ecf0:	d4e0      	bmi.n	800ecb4 <_fflush_r+0xc>
 800ecf2:	89a3      	ldrh	r3, [r4, #12]
 800ecf4:	059b      	lsls	r3, r3, #22
 800ecf6:	d4dd      	bmi.n	800ecb4 <_fflush_r+0xc>
 800ecf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecfa:	f000 f908 	bl	800ef0e <__retarget_lock_release_recursive>
 800ecfe:	e7d9      	b.n	800ecb4 <_fflush_r+0xc>
 800ed00:	4b05      	ldr	r3, [pc, #20]	; (800ed18 <_fflush_r+0x70>)
 800ed02:	429c      	cmp	r4, r3
 800ed04:	d101      	bne.n	800ed0a <_fflush_r+0x62>
 800ed06:	68ac      	ldr	r4, [r5, #8]
 800ed08:	e7df      	b.n	800ecca <_fflush_r+0x22>
 800ed0a:	4b04      	ldr	r3, [pc, #16]	; (800ed1c <_fflush_r+0x74>)
 800ed0c:	429c      	cmp	r4, r3
 800ed0e:	bf08      	it	eq
 800ed10:	68ec      	ldreq	r4, [r5, #12]
 800ed12:	e7da      	b.n	800ecca <_fflush_r+0x22>
 800ed14:	0800f6e4 	.word	0x0800f6e4
 800ed18:	0800f704 	.word	0x0800f704
 800ed1c:	0800f6c4 	.word	0x0800f6c4

0800ed20 <std>:
 800ed20:	2300      	movs	r3, #0
 800ed22:	b510      	push	{r4, lr}
 800ed24:	4604      	mov	r4, r0
 800ed26:	e9c0 3300 	strd	r3, r3, [r0]
 800ed2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed2e:	6083      	str	r3, [r0, #8]
 800ed30:	8181      	strh	r1, [r0, #12]
 800ed32:	6643      	str	r3, [r0, #100]	; 0x64
 800ed34:	81c2      	strh	r2, [r0, #14]
 800ed36:	6183      	str	r3, [r0, #24]
 800ed38:	4619      	mov	r1, r3
 800ed3a:	2208      	movs	r2, #8
 800ed3c:	305c      	adds	r0, #92	; 0x5c
 800ed3e:	f7fd fb5d 	bl	800c3fc <memset>
 800ed42:	4b05      	ldr	r3, [pc, #20]	; (800ed58 <std+0x38>)
 800ed44:	6224      	str	r4, [r4, #32]
 800ed46:	6263      	str	r3, [r4, #36]	; 0x24
 800ed48:	4b04      	ldr	r3, [pc, #16]	; (800ed5c <std+0x3c>)
 800ed4a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed4c:	4b04      	ldr	r3, [pc, #16]	; (800ed60 <std+0x40>)
 800ed4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed50:	4b04      	ldr	r3, [pc, #16]	; (800ed64 <std+0x44>)
 800ed52:	6323      	str	r3, [r4, #48]	; 0x30
 800ed54:	bd10      	pop	{r4, pc}
 800ed56:	bf00      	nop
 800ed58:	0800f075 	.word	0x0800f075
 800ed5c:	0800f097 	.word	0x0800f097
 800ed60:	0800f0cf 	.word	0x0800f0cf
 800ed64:	0800f0f3 	.word	0x0800f0f3

0800ed68 <_cleanup_r>:
 800ed68:	4901      	ldr	r1, [pc, #4]	; (800ed70 <_cleanup_r+0x8>)
 800ed6a:	f000 b8af 	b.w	800eecc <_fwalk_reent>
 800ed6e:	bf00      	nop
 800ed70:	0800eca9 	.word	0x0800eca9

0800ed74 <__sfmoreglue>:
 800ed74:	2268      	movs	r2, #104	; 0x68
 800ed76:	b570      	push	{r4, r5, r6, lr}
 800ed78:	1e4d      	subs	r5, r1, #1
 800ed7a:	4355      	muls	r5, r2
 800ed7c:	460e      	mov	r6, r1
 800ed7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed82:	f7ff fa6b 	bl	800e25c <_malloc_r>
 800ed86:	4604      	mov	r4, r0
 800ed88:	b140      	cbz	r0, 800ed9c <__sfmoreglue+0x28>
 800ed8a:	2100      	movs	r1, #0
 800ed8c:	e9c0 1600 	strd	r1, r6, [r0]
 800ed90:	300c      	adds	r0, #12
 800ed92:	60a0      	str	r0, [r4, #8]
 800ed94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed98:	f7fd fb30 	bl	800c3fc <memset>
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	bd70      	pop	{r4, r5, r6, pc}

0800eda0 <__sfp_lock_acquire>:
 800eda0:	4801      	ldr	r0, [pc, #4]	; (800eda8 <__sfp_lock_acquire+0x8>)
 800eda2:	f000 b8b3 	b.w	800ef0c <__retarget_lock_acquire_recursive>
 800eda6:	bf00      	nop
 800eda8:	200019c1 	.word	0x200019c1

0800edac <__sfp_lock_release>:
 800edac:	4801      	ldr	r0, [pc, #4]	; (800edb4 <__sfp_lock_release+0x8>)
 800edae:	f000 b8ae 	b.w	800ef0e <__retarget_lock_release_recursive>
 800edb2:	bf00      	nop
 800edb4:	200019c1 	.word	0x200019c1

0800edb8 <__sinit_lock_acquire>:
 800edb8:	4801      	ldr	r0, [pc, #4]	; (800edc0 <__sinit_lock_acquire+0x8>)
 800edba:	f000 b8a7 	b.w	800ef0c <__retarget_lock_acquire_recursive>
 800edbe:	bf00      	nop
 800edc0:	200019c2 	.word	0x200019c2

0800edc4 <__sinit_lock_release>:
 800edc4:	4801      	ldr	r0, [pc, #4]	; (800edcc <__sinit_lock_release+0x8>)
 800edc6:	f000 b8a2 	b.w	800ef0e <__retarget_lock_release_recursive>
 800edca:	bf00      	nop
 800edcc:	200019c2 	.word	0x200019c2

0800edd0 <__sinit>:
 800edd0:	b510      	push	{r4, lr}
 800edd2:	4604      	mov	r4, r0
 800edd4:	f7ff fff0 	bl	800edb8 <__sinit_lock_acquire>
 800edd8:	69a3      	ldr	r3, [r4, #24]
 800edda:	b11b      	cbz	r3, 800ede4 <__sinit+0x14>
 800eddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ede0:	f7ff bff0 	b.w	800edc4 <__sinit_lock_release>
 800ede4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ede8:	6523      	str	r3, [r4, #80]	; 0x50
 800edea:	4b13      	ldr	r3, [pc, #76]	; (800ee38 <__sinit+0x68>)
 800edec:	4a13      	ldr	r2, [pc, #76]	; (800ee3c <__sinit+0x6c>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800edf2:	42a3      	cmp	r3, r4
 800edf4:	bf08      	it	eq
 800edf6:	2301      	moveq	r3, #1
 800edf8:	4620      	mov	r0, r4
 800edfa:	bf08      	it	eq
 800edfc:	61a3      	streq	r3, [r4, #24]
 800edfe:	f000 f81f 	bl	800ee40 <__sfp>
 800ee02:	6060      	str	r0, [r4, #4]
 800ee04:	4620      	mov	r0, r4
 800ee06:	f000 f81b 	bl	800ee40 <__sfp>
 800ee0a:	60a0      	str	r0, [r4, #8]
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	f000 f817 	bl	800ee40 <__sfp>
 800ee12:	2200      	movs	r2, #0
 800ee14:	2104      	movs	r1, #4
 800ee16:	60e0      	str	r0, [r4, #12]
 800ee18:	6860      	ldr	r0, [r4, #4]
 800ee1a:	f7ff ff81 	bl	800ed20 <std>
 800ee1e:	2201      	movs	r2, #1
 800ee20:	2109      	movs	r1, #9
 800ee22:	68a0      	ldr	r0, [r4, #8]
 800ee24:	f7ff ff7c 	bl	800ed20 <std>
 800ee28:	2202      	movs	r2, #2
 800ee2a:	2112      	movs	r1, #18
 800ee2c:	68e0      	ldr	r0, [r4, #12]
 800ee2e:	f7ff ff77 	bl	800ed20 <std>
 800ee32:	2301      	movs	r3, #1
 800ee34:	61a3      	str	r3, [r4, #24]
 800ee36:	e7d1      	b.n	800eddc <__sinit+0xc>
 800ee38:	0800f348 	.word	0x0800f348
 800ee3c:	0800ed69 	.word	0x0800ed69

0800ee40 <__sfp>:
 800ee40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee42:	4607      	mov	r7, r0
 800ee44:	f7ff ffac 	bl	800eda0 <__sfp_lock_acquire>
 800ee48:	4b1e      	ldr	r3, [pc, #120]	; (800eec4 <__sfp+0x84>)
 800ee4a:	681e      	ldr	r6, [r3, #0]
 800ee4c:	69b3      	ldr	r3, [r6, #24]
 800ee4e:	b913      	cbnz	r3, 800ee56 <__sfp+0x16>
 800ee50:	4630      	mov	r0, r6
 800ee52:	f7ff ffbd 	bl	800edd0 <__sinit>
 800ee56:	3648      	adds	r6, #72	; 0x48
 800ee58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	d503      	bpl.n	800ee68 <__sfp+0x28>
 800ee60:	6833      	ldr	r3, [r6, #0]
 800ee62:	b30b      	cbz	r3, 800eea8 <__sfp+0x68>
 800ee64:	6836      	ldr	r6, [r6, #0]
 800ee66:	e7f7      	b.n	800ee58 <__sfp+0x18>
 800ee68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee6c:	b9d5      	cbnz	r5, 800eea4 <__sfp+0x64>
 800ee6e:	4b16      	ldr	r3, [pc, #88]	; (800eec8 <__sfp+0x88>)
 800ee70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee74:	60e3      	str	r3, [r4, #12]
 800ee76:	6665      	str	r5, [r4, #100]	; 0x64
 800ee78:	f000 f847 	bl	800ef0a <__retarget_lock_init_recursive>
 800ee7c:	f7ff ff96 	bl	800edac <__sfp_lock_release>
 800ee80:	2208      	movs	r2, #8
 800ee82:	4629      	mov	r1, r5
 800ee84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee8c:	6025      	str	r5, [r4, #0]
 800ee8e:	61a5      	str	r5, [r4, #24]
 800ee90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee94:	f7fd fab2 	bl	800c3fc <memset>
 800ee98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eea0:	4620      	mov	r0, r4
 800eea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eea4:	3468      	adds	r4, #104	; 0x68
 800eea6:	e7d9      	b.n	800ee5c <__sfp+0x1c>
 800eea8:	2104      	movs	r1, #4
 800eeaa:	4638      	mov	r0, r7
 800eeac:	f7ff ff62 	bl	800ed74 <__sfmoreglue>
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	6030      	str	r0, [r6, #0]
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	d1d5      	bne.n	800ee64 <__sfp+0x24>
 800eeb8:	f7ff ff78 	bl	800edac <__sfp_lock_release>
 800eebc:	230c      	movs	r3, #12
 800eebe:	603b      	str	r3, [r7, #0]
 800eec0:	e7ee      	b.n	800eea0 <__sfp+0x60>
 800eec2:	bf00      	nop
 800eec4:	0800f348 	.word	0x0800f348
 800eec8:	ffff0001 	.word	0xffff0001

0800eecc <_fwalk_reent>:
 800eecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eed0:	4606      	mov	r6, r0
 800eed2:	4688      	mov	r8, r1
 800eed4:	2700      	movs	r7, #0
 800eed6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eeda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eede:	f1b9 0901 	subs.w	r9, r9, #1
 800eee2:	d505      	bpl.n	800eef0 <_fwalk_reent+0x24>
 800eee4:	6824      	ldr	r4, [r4, #0]
 800eee6:	2c00      	cmp	r4, #0
 800eee8:	d1f7      	bne.n	800eeda <_fwalk_reent+0xe>
 800eeea:	4638      	mov	r0, r7
 800eeec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eef0:	89ab      	ldrh	r3, [r5, #12]
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d907      	bls.n	800ef06 <_fwalk_reent+0x3a>
 800eef6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eefa:	3301      	adds	r3, #1
 800eefc:	d003      	beq.n	800ef06 <_fwalk_reent+0x3a>
 800eefe:	4629      	mov	r1, r5
 800ef00:	4630      	mov	r0, r6
 800ef02:	47c0      	blx	r8
 800ef04:	4307      	orrs	r7, r0
 800ef06:	3568      	adds	r5, #104	; 0x68
 800ef08:	e7e9      	b.n	800eede <_fwalk_reent+0x12>

0800ef0a <__retarget_lock_init_recursive>:
 800ef0a:	4770      	bx	lr

0800ef0c <__retarget_lock_acquire_recursive>:
 800ef0c:	4770      	bx	lr

0800ef0e <__retarget_lock_release_recursive>:
 800ef0e:	4770      	bx	lr

0800ef10 <__swhatbuf_r>:
 800ef10:	b570      	push	{r4, r5, r6, lr}
 800ef12:	460e      	mov	r6, r1
 800ef14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef18:	4614      	mov	r4, r2
 800ef1a:	2900      	cmp	r1, #0
 800ef1c:	461d      	mov	r5, r3
 800ef1e:	b096      	sub	sp, #88	; 0x58
 800ef20:	da08      	bge.n	800ef34 <__swhatbuf_r+0x24>
 800ef22:	2200      	movs	r2, #0
 800ef24:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef28:	602a      	str	r2, [r5, #0]
 800ef2a:	061a      	lsls	r2, r3, #24
 800ef2c:	d410      	bmi.n	800ef50 <__swhatbuf_r+0x40>
 800ef2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef32:	e00e      	b.n	800ef52 <__swhatbuf_r+0x42>
 800ef34:	466a      	mov	r2, sp
 800ef36:	f000 f903 	bl	800f140 <_fstat_r>
 800ef3a:	2800      	cmp	r0, #0
 800ef3c:	dbf1      	blt.n	800ef22 <__swhatbuf_r+0x12>
 800ef3e:	9a01      	ldr	r2, [sp, #4]
 800ef40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef48:	425a      	negs	r2, r3
 800ef4a:	415a      	adcs	r2, r3
 800ef4c:	602a      	str	r2, [r5, #0]
 800ef4e:	e7ee      	b.n	800ef2e <__swhatbuf_r+0x1e>
 800ef50:	2340      	movs	r3, #64	; 0x40
 800ef52:	2000      	movs	r0, #0
 800ef54:	6023      	str	r3, [r4, #0]
 800ef56:	b016      	add	sp, #88	; 0x58
 800ef58:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef5c <__smakebuf_r>:
 800ef5c:	898b      	ldrh	r3, [r1, #12]
 800ef5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef60:	079d      	lsls	r5, r3, #30
 800ef62:	4606      	mov	r6, r0
 800ef64:	460c      	mov	r4, r1
 800ef66:	d507      	bpl.n	800ef78 <__smakebuf_r+0x1c>
 800ef68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef6c:	6023      	str	r3, [r4, #0]
 800ef6e:	6123      	str	r3, [r4, #16]
 800ef70:	2301      	movs	r3, #1
 800ef72:	6163      	str	r3, [r4, #20]
 800ef74:	b002      	add	sp, #8
 800ef76:	bd70      	pop	{r4, r5, r6, pc}
 800ef78:	466a      	mov	r2, sp
 800ef7a:	ab01      	add	r3, sp, #4
 800ef7c:	f7ff ffc8 	bl	800ef10 <__swhatbuf_r>
 800ef80:	9900      	ldr	r1, [sp, #0]
 800ef82:	4605      	mov	r5, r0
 800ef84:	4630      	mov	r0, r6
 800ef86:	f7ff f969 	bl	800e25c <_malloc_r>
 800ef8a:	b948      	cbnz	r0, 800efa0 <__smakebuf_r+0x44>
 800ef8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef90:	059a      	lsls	r2, r3, #22
 800ef92:	d4ef      	bmi.n	800ef74 <__smakebuf_r+0x18>
 800ef94:	f023 0303 	bic.w	r3, r3, #3
 800ef98:	f043 0302 	orr.w	r3, r3, #2
 800ef9c:	81a3      	strh	r3, [r4, #12]
 800ef9e:	e7e3      	b.n	800ef68 <__smakebuf_r+0xc>
 800efa0:	4b0d      	ldr	r3, [pc, #52]	; (800efd8 <__smakebuf_r+0x7c>)
 800efa2:	62b3      	str	r3, [r6, #40]	; 0x28
 800efa4:	89a3      	ldrh	r3, [r4, #12]
 800efa6:	6020      	str	r0, [r4, #0]
 800efa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efac:	81a3      	strh	r3, [r4, #12]
 800efae:	9b00      	ldr	r3, [sp, #0]
 800efb0:	6120      	str	r0, [r4, #16]
 800efb2:	6163      	str	r3, [r4, #20]
 800efb4:	9b01      	ldr	r3, [sp, #4]
 800efb6:	b15b      	cbz	r3, 800efd0 <__smakebuf_r+0x74>
 800efb8:	4630      	mov	r0, r6
 800efba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efbe:	f000 f8d1 	bl	800f164 <_isatty_r>
 800efc2:	b128      	cbz	r0, 800efd0 <__smakebuf_r+0x74>
 800efc4:	89a3      	ldrh	r3, [r4, #12]
 800efc6:	f023 0303 	bic.w	r3, r3, #3
 800efca:	f043 0301 	orr.w	r3, r3, #1
 800efce:	81a3      	strh	r3, [r4, #12]
 800efd0:	89a0      	ldrh	r0, [r4, #12]
 800efd2:	4305      	orrs	r5, r0
 800efd4:	81a5      	strh	r5, [r4, #12]
 800efd6:	e7cd      	b.n	800ef74 <__smakebuf_r+0x18>
 800efd8:	0800ed69 	.word	0x0800ed69

0800efdc <_malloc_usable_size_r>:
 800efdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efe0:	1f18      	subs	r0, r3, #4
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	bfbc      	itt	lt
 800efe6:	580b      	ldrlt	r3, [r1, r0]
 800efe8:	18c0      	addlt	r0, r0, r3
 800efea:	4770      	bx	lr

0800efec <_raise_r>:
 800efec:	291f      	cmp	r1, #31
 800efee:	b538      	push	{r3, r4, r5, lr}
 800eff0:	4604      	mov	r4, r0
 800eff2:	460d      	mov	r5, r1
 800eff4:	d904      	bls.n	800f000 <_raise_r+0x14>
 800eff6:	2316      	movs	r3, #22
 800eff8:	6003      	str	r3, [r0, #0]
 800effa:	f04f 30ff 	mov.w	r0, #4294967295
 800effe:	bd38      	pop	{r3, r4, r5, pc}
 800f000:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f002:	b112      	cbz	r2, 800f00a <_raise_r+0x1e>
 800f004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f008:	b94b      	cbnz	r3, 800f01e <_raise_r+0x32>
 800f00a:	4620      	mov	r0, r4
 800f00c:	f000 f830 	bl	800f070 <_getpid_r>
 800f010:	462a      	mov	r2, r5
 800f012:	4601      	mov	r1, r0
 800f014:	4620      	mov	r0, r4
 800f016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f01a:	f000 b817 	b.w	800f04c <_kill_r>
 800f01e:	2b01      	cmp	r3, #1
 800f020:	d00a      	beq.n	800f038 <_raise_r+0x4c>
 800f022:	1c59      	adds	r1, r3, #1
 800f024:	d103      	bne.n	800f02e <_raise_r+0x42>
 800f026:	2316      	movs	r3, #22
 800f028:	6003      	str	r3, [r0, #0]
 800f02a:	2001      	movs	r0, #1
 800f02c:	e7e7      	b.n	800effe <_raise_r+0x12>
 800f02e:	2400      	movs	r4, #0
 800f030:	4628      	mov	r0, r5
 800f032:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f036:	4798      	blx	r3
 800f038:	2000      	movs	r0, #0
 800f03a:	e7e0      	b.n	800effe <_raise_r+0x12>

0800f03c <raise>:
 800f03c:	4b02      	ldr	r3, [pc, #8]	; (800f048 <raise+0xc>)
 800f03e:	4601      	mov	r1, r0
 800f040:	6818      	ldr	r0, [r3, #0]
 800f042:	f7ff bfd3 	b.w	800efec <_raise_r>
 800f046:	bf00      	nop
 800f048:	20000190 	.word	0x20000190

0800f04c <_kill_r>:
 800f04c:	b538      	push	{r3, r4, r5, lr}
 800f04e:	2300      	movs	r3, #0
 800f050:	4d06      	ldr	r5, [pc, #24]	; (800f06c <_kill_r+0x20>)
 800f052:	4604      	mov	r4, r0
 800f054:	4608      	mov	r0, r1
 800f056:	4611      	mov	r1, r2
 800f058:	602b      	str	r3, [r5, #0]
 800f05a:	f7f7 ff6b 	bl	8006f34 <_kill>
 800f05e:	1c43      	adds	r3, r0, #1
 800f060:	d102      	bne.n	800f068 <_kill_r+0x1c>
 800f062:	682b      	ldr	r3, [r5, #0]
 800f064:	b103      	cbz	r3, 800f068 <_kill_r+0x1c>
 800f066:	6023      	str	r3, [r4, #0]
 800f068:	bd38      	pop	{r3, r4, r5, pc}
 800f06a:	bf00      	nop
 800f06c:	200019bc 	.word	0x200019bc

0800f070 <_getpid_r>:
 800f070:	f7f7 bf5e 	b.w	8006f30 <_getpid>

0800f074 <__sread>:
 800f074:	b510      	push	{r4, lr}
 800f076:	460c      	mov	r4, r1
 800f078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f07c:	f000 f894 	bl	800f1a8 <_read_r>
 800f080:	2800      	cmp	r0, #0
 800f082:	bfab      	itete	ge
 800f084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f086:	89a3      	ldrhlt	r3, [r4, #12]
 800f088:	181b      	addge	r3, r3, r0
 800f08a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f08e:	bfac      	ite	ge
 800f090:	6563      	strge	r3, [r4, #84]	; 0x54
 800f092:	81a3      	strhlt	r3, [r4, #12]
 800f094:	bd10      	pop	{r4, pc}

0800f096 <__swrite>:
 800f096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f09a:	461f      	mov	r7, r3
 800f09c:	898b      	ldrh	r3, [r1, #12]
 800f09e:	4605      	mov	r5, r0
 800f0a0:	05db      	lsls	r3, r3, #23
 800f0a2:	460c      	mov	r4, r1
 800f0a4:	4616      	mov	r6, r2
 800f0a6:	d505      	bpl.n	800f0b4 <__swrite+0x1e>
 800f0a8:	2302      	movs	r3, #2
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b0:	f000 f868 	bl	800f184 <_lseek_r>
 800f0b4:	89a3      	ldrh	r3, [r4, #12]
 800f0b6:	4632      	mov	r2, r6
 800f0b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0bc:	81a3      	strh	r3, [r4, #12]
 800f0be:	4628      	mov	r0, r5
 800f0c0:	463b      	mov	r3, r7
 800f0c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ca:	f000 b817 	b.w	800f0fc <_write_r>

0800f0ce <__sseek>:
 800f0ce:	b510      	push	{r4, lr}
 800f0d0:	460c      	mov	r4, r1
 800f0d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0d6:	f000 f855 	bl	800f184 <_lseek_r>
 800f0da:	1c43      	adds	r3, r0, #1
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	bf15      	itete	ne
 800f0e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f0e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f0e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f0ea:	81a3      	strheq	r3, [r4, #12]
 800f0ec:	bf18      	it	ne
 800f0ee:	81a3      	strhne	r3, [r4, #12]
 800f0f0:	bd10      	pop	{r4, pc}

0800f0f2 <__sclose>:
 800f0f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0f6:	f000 b813 	b.w	800f120 <_close_r>
	...

0800f0fc <_write_r>:
 800f0fc:	b538      	push	{r3, r4, r5, lr}
 800f0fe:	4604      	mov	r4, r0
 800f100:	4608      	mov	r0, r1
 800f102:	4611      	mov	r1, r2
 800f104:	2200      	movs	r2, #0
 800f106:	4d05      	ldr	r5, [pc, #20]	; (800f11c <_write_r+0x20>)
 800f108:	602a      	str	r2, [r5, #0]
 800f10a:	461a      	mov	r2, r3
 800f10c:	f7f7 ff30 	bl	8006f70 <_write>
 800f110:	1c43      	adds	r3, r0, #1
 800f112:	d102      	bne.n	800f11a <_write_r+0x1e>
 800f114:	682b      	ldr	r3, [r5, #0]
 800f116:	b103      	cbz	r3, 800f11a <_write_r+0x1e>
 800f118:	6023      	str	r3, [r4, #0]
 800f11a:	bd38      	pop	{r3, r4, r5, pc}
 800f11c:	200019bc 	.word	0x200019bc

0800f120 <_close_r>:
 800f120:	b538      	push	{r3, r4, r5, lr}
 800f122:	2300      	movs	r3, #0
 800f124:	4d05      	ldr	r5, [pc, #20]	; (800f13c <_close_r+0x1c>)
 800f126:	4604      	mov	r4, r0
 800f128:	4608      	mov	r0, r1
 800f12a:	602b      	str	r3, [r5, #0]
 800f12c:	f7f7 ff2e 	bl	8006f8c <_close>
 800f130:	1c43      	adds	r3, r0, #1
 800f132:	d102      	bne.n	800f13a <_close_r+0x1a>
 800f134:	682b      	ldr	r3, [r5, #0]
 800f136:	b103      	cbz	r3, 800f13a <_close_r+0x1a>
 800f138:	6023      	str	r3, [r4, #0]
 800f13a:	bd38      	pop	{r3, r4, r5, pc}
 800f13c:	200019bc 	.word	0x200019bc

0800f140 <_fstat_r>:
 800f140:	b538      	push	{r3, r4, r5, lr}
 800f142:	2300      	movs	r3, #0
 800f144:	4d06      	ldr	r5, [pc, #24]	; (800f160 <_fstat_r+0x20>)
 800f146:	4604      	mov	r4, r0
 800f148:	4608      	mov	r0, r1
 800f14a:	4611      	mov	r1, r2
 800f14c:	602b      	str	r3, [r5, #0]
 800f14e:	f7f7 ff21 	bl	8006f94 <_fstat>
 800f152:	1c43      	adds	r3, r0, #1
 800f154:	d102      	bne.n	800f15c <_fstat_r+0x1c>
 800f156:	682b      	ldr	r3, [r5, #0]
 800f158:	b103      	cbz	r3, 800f15c <_fstat_r+0x1c>
 800f15a:	6023      	str	r3, [r4, #0]
 800f15c:	bd38      	pop	{r3, r4, r5, pc}
 800f15e:	bf00      	nop
 800f160:	200019bc 	.word	0x200019bc

0800f164 <_isatty_r>:
 800f164:	b538      	push	{r3, r4, r5, lr}
 800f166:	2300      	movs	r3, #0
 800f168:	4d05      	ldr	r5, [pc, #20]	; (800f180 <_isatty_r+0x1c>)
 800f16a:	4604      	mov	r4, r0
 800f16c:	4608      	mov	r0, r1
 800f16e:	602b      	str	r3, [r5, #0]
 800f170:	f7f7 ff16 	bl	8006fa0 <_isatty>
 800f174:	1c43      	adds	r3, r0, #1
 800f176:	d102      	bne.n	800f17e <_isatty_r+0x1a>
 800f178:	682b      	ldr	r3, [r5, #0]
 800f17a:	b103      	cbz	r3, 800f17e <_isatty_r+0x1a>
 800f17c:	6023      	str	r3, [r4, #0]
 800f17e:	bd38      	pop	{r3, r4, r5, pc}
 800f180:	200019bc 	.word	0x200019bc

0800f184 <_lseek_r>:
 800f184:	b538      	push	{r3, r4, r5, lr}
 800f186:	4604      	mov	r4, r0
 800f188:	4608      	mov	r0, r1
 800f18a:	4611      	mov	r1, r2
 800f18c:	2200      	movs	r2, #0
 800f18e:	4d05      	ldr	r5, [pc, #20]	; (800f1a4 <_lseek_r+0x20>)
 800f190:	602a      	str	r2, [r5, #0]
 800f192:	461a      	mov	r2, r3
 800f194:	f7f7 ff06 	bl	8006fa4 <_lseek>
 800f198:	1c43      	adds	r3, r0, #1
 800f19a:	d102      	bne.n	800f1a2 <_lseek_r+0x1e>
 800f19c:	682b      	ldr	r3, [r5, #0]
 800f19e:	b103      	cbz	r3, 800f1a2 <_lseek_r+0x1e>
 800f1a0:	6023      	str	r3, [r4, #0]
 800f1a2:	bd38      	pop	{r3, r4, r5, pc}
 800f1a4:	200019bc 	.word	0x200019bc

0800f1a8 <_read_r>:
 800f1a8:	b538      	push	{r3, r4, r5, lr}
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	4608      	mov	r0, r1
 800f1ae:	4611      	mov	r1, r2
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	4d05      	ldr	r5, [pc, #20]	; (800f1c8 <_read_r+0x20>)
 800f1b4:	602a      	str	r2, [r5, #0]
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	f7f7 fecc 	bl	8006f54 <_read>
 800f1bc:	1c43      	adds	r3, r0, #1
 800f1be:	d102      	bne.n	800f1c6 <_read_r+0x1e>
 800f1c0:	682b      	ldr	r3, [r5, #0]
 800f1c2:	b103      	cbz	r3, 800f1c6 <_read_r+0x1e>
 800f1c4:	6023      	str	r3, [r4, #0]
 800f1c6:	bd38      	pop	{r3, r4, r5, pc}
 800f1c8:	200019bc 	.word	0x200019bc

0800f1cc <_init>:
 800f1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ce:	bf00      	nop
 800f1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1d2:	bc08      	pop	{r3}
 800f1d4:	469e      	mov	lr, r3
 800f1d6:	4770      	bx	lr

0800f1d8 <_fini>:
 800f1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1da:	bf00      	nop
 800f1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1de:	bc08      	pop	{r3}
 800f1e0:	469e      	mov	lr, r3
 800f1e2:	4770      	bx	lr
