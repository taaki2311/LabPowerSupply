
MainBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f084  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800f1c8  0800f1c8  0001f1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f704  0800f704  00020360  2**0
                  CONTENTS
  4 .ARM          00000008  0800f704  0800f704  0001f704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f70c  0800f70c  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f70c  0800f70c  0001f70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f710  0800f710  0001f710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0800f714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001664  20000360  0800fa74  00020360  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  200019c4  0800fa74  000219c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bb9c  00000000  00000000  00020389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052ad  00000000  00000000  0004bf25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00020a32  00000000  00000000  000511d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  00071c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000068f8  00000000  00000000  00072f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f59  00000000  00000000  00079840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000307ad  00000000  00000000  00093799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090514  00000000  00000000  000c3f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015445a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005334  00000000  00000000  001544ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000360 	.word	0x20000360
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f1ac 	.word	0x0800f1ac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000364 	.word	0x20000364
 800017c:	0800f1ac 	.word	0x0800f1ac

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <__aeabi_f2uiz>:
 800114c:	0042      	lsls	r2, r0, #1
 800114e:	d20e      	bcs.n	800116e <__aeabi_f2uiz+0x22>
 8001150:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001154:	d30b      	bcc.n	800116e <__aeabi_f2uiz+0x22>
 8001156:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800115a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115e:	d409      	bmi.n	8001174 <__aeabi_f2uiz+0x28>
 8001160:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001164:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001168:	fa23 f002 	lsr.w	r0, r3, r2
 800116c:	4770      	bx	lr
 800116e:	f04f 0000 	mov.w	r0, #0
 8001172:	4770      	bx	lr
 8001174:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001178:	d101      	bne.n	800117e <__aeabi_f2uiz+0x32>
 800117a:	0242      	lsls	r2, r0, #9
 800117c:	d102      	bne.n	8001184 <__aeabi_f2uiz+0x38>
 800117e:	f04f 30ff 	mov.w	r0, #4294967295
 8001182:	4770      	bx	lr
 8001184:	f04f 0000 	mov.w	r0, #0
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <__aeabi_uldivmod>:
 800118c:	b953      	cbnz	r3, 80011a4 <__aeabi_uldivmod+0x18>
 800118e:	b94a      	cbnz	r2, 80011a4 <__aeabi_uldivmod+0x18>
 8001190:	2900      	cmp	r1, #0
 8001192:	bf08      	it	eq
 8001194:	2800      	cmpeq	r0, #0
 8001196:	bf1c      	itt	ne
 8001198:	f04f 31ff 	movne.w	r1, #4294967295
 800119c:	f04f 30ff 	movne.w	r0, #4294967295
 80011a0:	f000 b976 	b.w	8001490 <__aeabi_idiv0>
 80011a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ac:	f000 f806 	bl	80011bc <__udivmoddi4>
 80011b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr

080011bc <__udivmoddi4>:
 80011bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c0:	9e08      	ldr	r6, [sp, #32]
 80011c2:	460d      	mov	r5, r1
 80011c4:	4604      	mov	r4, r0
 80011c6:	4688      	mov	r8, r1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d14d      	bne.n	8001268 <__udivmoddi4+0xac>
 80011cc:	428a      	cmp	r2, r1
 80011ce:	4694      	mov	ip, r2
 80011d0:	d968      	bls.n	80012a4 <__udivmoddi4+0xe8>
 80011d2:	fab2 f282 	clz	r2, r2
 80011d6:	b152      	cbz	r2, 80011ee <__udivmoddi4+0x32>
 80011d8:	fa01 f302 	lsl.w	r3, r1, r2
 80011dc:	f1c2 0120 	rsb	r1, r2, #32
 80011e0:	fa20 f101 	lsr.w	r1, r0, r1
 80011e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80011e8:	ea41 0803 	orr.w	r8, r1, r3
 80011ec:	4094      	lsls	r4, r2
 80011ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80011f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80011f6:	fa1f fe8c 	uxth.w	lr, ip
 80011fa:	fb01 8817 	mls	r8, r1, r7, r8
 80011fe:	fb07 f00e 	mul.w	r0, r7, lr
 8001202:	0c23      	lsrs	r3, r4, #16
 8001204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001208:	4298      	cmp	r0, r3
 800120a:	d90a      	bls.n	8001222 <__udivmoddi4+0x66>
 800120c:	eb1c 0303 	adds.w	r3, ip, r3
 8001210:	f107 35ff 	add.w	r5, r7, #4294967295
 8001214:	f080 811e 	bcs.w	8001454 <__udivmoddi4+0x298>
 8001218:	4298      	cmp	r0, r3
 800121a:	f240 811b 	bls.w	8001454 <__udivmoddi4+0x298>
 800121e:	3f02      	subs	r7, #2
 8001220:	4463      	add	r3, ip
 8001222:	1a1b      	subs	r3, r3, r0
 8001224:	fbb3 f0f1 	udiv	r0, r3, r1
 8001228:	fb01 3310 	mls	r3, r1, r0, r3
 800122c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001230:	b2a4      	uxth	r4, r4
 8001232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001236:	45a6      	cmp	lr, r4
 8001238:	d90a      	bls.n	8001250 <__udivmoddi4+0x94>
 800123a:	eb1c 0404 	adds.w	r4, ip, r4
 800123e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001242:	f080 8109 	bcs.w	8001458 <__udivmoddi4+0x29c>
 8001246:	45a6      	cmp	lr, r4
 8001248:	f240 8106 	bls.w	8001458 <__udivmoddi4+0x29c>
 800124c:	4464      	add	r4, ip
 800124e:	3802      	subs	r0, #2
 8001250:	2100      	movs	r1, #0
 8001252:	eba4 040e 	sub.w	r4, r4, lr
 8001256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800125a:	b11e      	cbz	r6, 8001264 <__udivmoddi4+0xa8>
 800125c:	2300      	movs	r3, #0
 800125e:	40d4      	lsrs	r4, r2
 8001260:	e9c6 4300 	strd	r4, r3, [r6]
 8001264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001268:	428b      	cmp	r3, r1
 800126a:	d908      	bls.n	800127e <__udivmoddi4+0xc2>
 800126c:	2e00      	cmp	r6, #0
 800126e:	f000 80ee 	beq.w	800144e <__udivmoddi4+0x292>
 8001272:	2100      	movs	r1, #0
 8001274:	e9c6 0500 	strd	r0, r5, [r6]
 8001278:	4608      	mov	r0, r1
 800127a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800127e:	fab3 f183 	clz	r1, r3
 8001282:	2900      	cmp	r1, #0
 8001284:	d14a      	bne.n	800131c <__udivmoddi4+0x160>
 8001286:	42ab      	cmp	r3, r5
 8001288:	d302      	bcc.n	8001290 <__udivmoddi4+0xd4>
 800128a:	4282      	cmp	r2, r0
 800128c:	f200 80fc 	bhi.w	8001488 <__udivmoddi4+0x2cc>
 8001290:	1a84      	subs	r4, r0, r2
 8001292:	eb65 0303 	sbc.w	r3, r5, r3
 8001296:	2001      	movs	r0, #1
 8001298:	4698      	mov	r8, r3
 800129a:	2e00      	cmp	r6, #0
 800129c:	d0e2      	beq.n	8001264 <__udivmoddi4+0xa8>
 800129e:	e9c6 4800 	strd	r4, r8, [r6]
 80012a2:	e7df      	b.n	8001264 <__udivmoddi4+0xa8>
 80012a4:	b902      	cbnz	r2, 80012a8 <__udivmoddi4+0xec>
 80012a6:	deff      	udf	#255	; 0xff
 80012a8:	fab2 f282 	clz	r2, r2
 80012ac:	2a00      	cmp	r2, #0
 80012ae:	f040 8091 	bne.w	80013d4 <__udivmoddi4+0x218>
 80012b2:	eba1 000c 	sub.w	r0, r1, ip
 80012b6:	2101      	movs	r1, #1
 80012b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012bc:	fa1f fe8c 	uxth.w	lr, ip
 80012c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80012c4:	fb07 0013 	mls	r0, r7, r3, r0
 80012c8:	0c25      	lsrs	r5, r4, #16
 80012ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012ce:	fb0e f003 	mul.w	r0, lr, r3
 80012d2:	42a8      	cmp	r0, r5
 80012d4:	d908      	bls.n	80012e8 <__udivmoddi4+0x12c>
 80012d6:	eb1c 0505 	adds.w	r5, ip, r5
 80012da:	f103 38ff 	add.w	r8, r3, #4294967295
 80012de:	d202      	bcs.n	80012e6 <__udivmoddi4+0x12a>
 80012e0:	42a8      	cmp	r0, r5
 80012e2:	f200 80ce 	bhi.w	8001482 <__udivmoddi4+0x2c6>
 80012e6:	4643      	mov	r3, r8
 80012e8:	1a2d      	subs	r5, r5, r0
 80012ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80012ee:	fb07 5510 	mls	r5, r7, r0, r5
 80012f2:	fb0e fe00 	mul.w	lr, lr, r0
 80012f6:	b2a4      	uxth	r4, r4
 80012f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012fc:	45a6      	cmp	lr, r4
 80012fe:	d908      	bls.n	8001312 <__udivmoddi4+0x156>
 8001300:	eb1c 0404 	adds.w	r4, ip, r4
 8001304:	f100 35ff 	add.w	r5, r0, #4294967295
 8001308:	d202      	bcs.n	8001310 <__udivmoddi4+0x154>
 800130a:	45a6      	cmp	lr, r4
 800130c:	f200 80b6 	bhi.w	800147c <__udivmoddi4+0x2c0>
 8001310:	4628      	mov	r0, r5
 8001312:	eba4 040e 	sub.w	r4, r4, lr
 8001316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800131a:	e79e      	b.n	800125a <__udivmoddi4+0x9e>
 800131c:	f1c1 0720 	rsb	r7, r1, #32
 8001320:	408b      	lsls	r3, r1
 8001322:	fa22 fc07 	lsr.w	ip, r2, r7
 8001326:	ea4c 0c03 	orr.w	ip, ip, r3
 800132a:	fa25 fa07 	lsr.w	sl, r5, r7
 800132e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001332:	fbba f8f9 	udiv	r8, sl, r9
 8001336:	fa20 f307 	lsr.w	r3, r0, r7
 800133a:	fb09 aa18 	mls	sl, r9, r8, sl
 800133e:	408d      	lsls	r5, r1
 8001340:	fa1f fe8c 	uxth.w	lr, ip
 8001344:	431d      	orrs	r5, r3
 8001346:	fa00 f301 	lsl.w	r3, r0, r1
 800134a:	fb08 f00e 	mul.w	r0, r8, lr
 800134e:	0c2c      	lsrs	r4, r5, #16
 8001350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001354:	42a0      	cmp	r0, r4
 8001356:	fa02 f201 	lsl.w	r2, r2, r1
 800135a:	d90b      	bls.n	8001374 <__udivmoddi4+0x1b8>
 800135c:	eb1c 0404 	adds.w	r4, ip, r4
 8001360:	f108 3aff 	add.w	sl, r8, #4294967295
 8001364:	f080 8088 	bcs.w	8001478 <__udivmoddi4+0x2bc>
 8001368:	42a0      	cmp	r0, r4
 800136a:	f240 8085 	bls.w	8001478 <__udivmoddi4+0x2bc>
 800136e:	f1a8 0802 	sub.w	r8, r8, #2
 8001372:	4464      	add	r4, ip
 8001374:	1a24      	subs	r4, r4, r0
 8001376:	fbb4 f0f9 	udiv	r0, r4, r9
 800137a:	fb09 4410 	mls	r4, r9, r0, r4
 800137e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001382:	b2ad      	uxth	r5, r5
 8001384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001388:	45a6      	cmp	lr, r4
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x1e2>
 800138c:	eb1c 0404 	adds.w	r4, ip, r4
 8001390:	f100 35ff 	add.w	r5, r0, #4294967295
 8001394:	d26c      	bcs.n	8001470 <__udivmoddi4+0x2b4>
 8001396:	45a6      	cmp	lr, r4
 8001398:	d96a      	bls.n	8001470 <__udivmoddi4+0x2b4>
 800139a:	3802      	subs	r0, #2
 800139c:	4464      	add	r4, ip
 800139e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80013a2:	fba0 9502 	umull	r9, r5, r0, r2
 80013a6:	eba4 040e 	sub.w	r4, r4, lr
 80013aa:	42ac      	cmp	r4, r5
 80013ac:	46c8      	mov	r8, r9
 80013ae:	46ae      	mov	lr, r5
 80013b0:	d356      	bcc.n	8001460 <__udivmoddi4+0x2a4>
 80013b2:	d053      	beq.n	800145c <__udivmoddi4+0x2a0>
 80013b4:	2e00      	cmp	r6, #0
 80013b6:	d069      	beq.n	800148c <__udivmoddi4+0x2d0>
 80013b8:	ebb3 0208 	subs.w	r2, r3, r8
 80013bc:	eb64 040e 	sbc.w	r4, r4, lr
 80013c0:	fa22 f301 	lsr.w	r3, r2, r1
 80013c4:	fa04 f707 	lsl.w	r7, r4, r7
 80013c8:	431f      	orrs	r7, r3
 80013ca:	40cc      	lsrs	r4, r1
 80013cc:	e9c6 7400 	strd	r7, r4, [r6]
 80013d0:	2100      	movs	r1, #0
 80013d2:	e747      	b.n	8001264 <__udivmoddi4+0xa8>
 80013d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80013d8:	f1c2 0120 	rsb	r1, r2, #32
 80013dc:	fa25 f301 	lsr.w	r3, r5, r1
 80013e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013e4:	fa20 f101 	lsr.w	r1, r0, r1
 80013e8:	4095      	lsls	r5, r2
 80013ea:	430d      	orrs	r5, r1
 80013ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80013f0:	fb07 3311 	mls	r3, r7, r1, r3
 80013f4:	fa1f fe8c 	uxth.w	lr, ip
 80013f8:	0c28      	lsrs	r0, r5, #16
 80013fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013fe:	fb01 f30e 	mul.w	r3, r1, lr
 8001402:	4283      	cmp	r3, r0
 8001404:	fa04 f402 	lsl.w	r4, r4, r2
 8001408:	d908      	bls.n	800141c <__udivmoddi4+0x260>
 800140a:	eb1c 0000 	adds.w	r0, ip, r0
 800140e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001412:	d22f      	bcs.n	8001474 <__udivmoddi4+0x2b8>
 8001414:	4283      	cmp	r3, r0
 8001416:	d92d      	bls.n	8001474 <__udivmoddi4+0x2b8>
 8001418:	3902      	subs	r1, #2
 800141a:	4460      	add	r0, ip
 800141c:	1ac0      	subs	r0, r0, r3
 800141e:	fbb0 f3f7 	udiv	r3, r0, r7
 8001422:	fb07 0013 	mls	r0, r7, r3, r0
 8001426:	b2ad      	uxth	r5, r5
 8001428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800142c:	fb03 f00e 	mul.w	r0, r3, lr
 8001430:	42a8      	cmp	r0, r5
 8001432:	d908      	bls.n	8001446 <__udivmoddi4+0x28a>
 8001434:	eb1c 0505 	adds.w	r5, ip, r5
 8001438:	f103 38ff 	add.w	r8, r3, #4294967295
 800143c:	d216      	bcs.n	800146c <__udivmoddi4+0x2b0>
 800143e:	42a8      	cmp	r0, r5
 8001440:	d914      	bls.n	800146c <__udivmoddi4+0x2b0>
 8001442:	3b02      	subs	r3, #2
 8001444:	4465      	add	r5, ip
 8001446:	1a28      	subs	r0, r5, r0
 8001448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800144c:	e738      	b.n	80012c0 <__udivmoddi4+0x104>
 800144e:	4631      	mov	r1, r6
 8001450:	4630      	mov	r0, r6
 8001452:	e707      	b.n	8001264 <__udivmoddi4+0xa8>
 8001454:	462f      	mov	r7, r5
 8001456:	e6e4      	b.n	8001222 <__udivmoddi4+0x66>
 8001458:	4618      	mov	r0, r3
 800145a:	e6f9      	b.n	8001250 <__udivmoddi4+0x94>
 800145c:	454b      	cmp	r3, r9
 800145e:	d2a9      	bcs.n	80013b4 <__udivmoddi4+0x1f8>
 8001460:	ebb9 0802 	subs.w	r8, r9, r2
 8001464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001468:	3801      	subs	r0, #1
 800146a:	e7a3      	b.n	80013b4 <__udivmoddi4+0x1f8>
 800146c:	4643      	mov	r3, r8
 800146e:	e7ea      	b.n	8001446 <__udivmoddi4+0x28a>
 8001470:	4628      	mov	r0, r5
 8001472:	e794      	b.n	800139e <__udivmoddi4+0x1e2>
 8001474:	4641      	mov	r1, r8
 8001476:	e7d1      	b.n	800141c <__udivmoddi4+0x260>
 8001478:	46d0      	mov	r8, sl
 800147a:	e77b      	b.n	8001374 <__udivmoddi4+0x1b8>
 800147c:	4464      	add	r4, ip
 800147e:	3802      	subs	r0, #2
 8001480:	e747      	b.n	8001312 <__udivmoddi4+0x156>
 8001482:	3b02      	subs	r3, #2
 8001484:	4465      	add	r5, ip
 8001486:	e72f      	b.n	80012e8 <__udivmoddi4+0x12c>
 8001488:	4608      	mov	r0, r1
 800148a:	e706      	b.n	800129a <__udivmoddi4+0xde>
 800148c:	4631      	mov	r1, r6
 800148e:	e6e9      	b.n	8001264 <__udivmoddi4+0xa8>

08001490 <__aeabi_idiv0>:
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <MX_ADC_Init>:

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001494:	2300      	movs	r3, #0
{
 8001496:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001498:	4c3f      	ldr	r4, [pc, #252]	; (8001598 <MX_ADC_Init+0x104>)
{
 800149a:	b08a      	sub	sp, #40	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800149c:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80014a0:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80014a4:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80014a8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80014ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014b0:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80014b4:	9304      	str	r3, [sp, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014b6:	9300      	str	r3, [sp, #0]
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 6;
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014b8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014bc:	63a3      	str	r3, [r4, #56]	; 0x38
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80014be:	9309      	str	r3, [sp, #36]	; 0x24
  hadc.Instance = ADC1;
 80014c0:	4b36      	ldr	r3, [pc, #216]	; (800159c <MX_ADC_Init+0x108>)
  hadc.Init.ContinuousConvMode = ENABLE;
 80014c2:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80014c4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014c8:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc.Init.NbrOfConversion = 6;
 80014cc:	2606      	movs	r6, #6
  hadc.Instance = ADC1;
 80014ce:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d0:	2310      	movs	r3, #16
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014d2:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80014d4:	6061      	str	r1, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014d6:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 80014d8:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc.Init.NbrOfConversion = 6;
 80014dc:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 80014de:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e2:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014e4:	f005 fdf6 	bl	80070d4 <HAL_ADC_Init>
 80014e8:	b108      	cbz	r0, 80014ee <MX_ADC_Init+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ea:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MX_ADC_Init+0x58>
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80014ee:	2302      	movs	r3, #2
 80014f0:	4a2b      	ldr	r2, [pc, #172]	; (80015a0 <MX_ADC_Init+0x10c>)
  AnalogWDGConfig.LowThreshold = 0;
 80014f2:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80014f6:	a904      	add	r1, sp, #16
 80014f8:	4620      	mov	r0, r4
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80014fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  AnalogWDGConfig.ITMode = ENABLE;
 80014fe:	f88d 5018 	strb.w	r5, [sp, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8001502:	f006 f8ed 	bl	80076e0 <HAL_ADC_AnalogWDGConfig>
 8001506:	b108      	cbz	r0, 800150c <MX_ADC_Init+0x78>
 8001508:	b672      	cpsid	i
  while (1)
 800150a:	e7fe      	b.n	800150a <MX_ADC_Init+0x76>
  sConfig.Channel = ADC_CHANNEL_0;
 800150c:	2200      	movs	r2, #0
 800150e:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001510:	4669      	mov	r1, sp
 8001512:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8001514:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8001518:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800151a:	f006 f815 	bl	8007548 <HAL_ADC_ConfigChannel>
 800151e:	b108      	cbz	r0, 8001524 <MX_ADC_Init+0x90>
 8001520:	b672      	cpsid	i
  while (1)
 8001522:	e7fe      	b.n	8001522 <MX_ADC_Init+0x8e>
  sConfig.Channel = ADC_CHANNEL_1;
 8001524:	2201      	movs	r2, #1
 8001526:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001528:	4669      	mov	r1, sp
 800152a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 800152c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001530:	f006 f80a 	bl	8007548 <HAL_ADC_ConfigChannel>
 8001534:	b108      	cbz	r0, 800153a <MX_ADC_Init+0xa6>
 8001536:	b672      	cpsid	i
  while (1)
 8001538:	e7fe      	b.n	8001538 <MX_ADC_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_2;
 800153a:	2202      	movs	r2, #2
 800153c:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800153e:	4669      	mov	r1, sp
 8001540:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8001542:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001546:	f005 ffff 	bl	8007548 <HAL_ADC_ConfigChannel>
 800154a:	b108      	cbz	r0, 8001550 <MX_ADC_Init+0xbc>
 800154c:	b672      	cpsid	i
  while (1)
 800154e:	e7fe      	b.n	800154e <MX_ADC_Init+0xba>
  sConfig.Channel = ADC_CHANNEL_3;
 8001550:	2203      	movs	r2, #3
 8001552:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001554:	4669      	mov	r1, sp
 8001556:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8001558:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800155c:	f005 fff4 	bl	8007548 <HAL_ADC_ConfigChannel>
 8001560:	b108      	cbz	r0, 8001566 <MX_ADC_Init+0xd2>
 8001562:	b672      	cpsid	i
  while (1)
 8001564:	e7fe      	b.n	8001564 <MX_ADC_Init+0xd0>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001566:	2211      	movs	r2, #17
 8001568:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800156a:	4669      	mov	r1, sp
 800156c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800156e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001572:	f005 ffe9 	bl	8007548 <HAL_ADC_ConfigChannel>
 8001576:	b108      	cbz	r0, 800157c <MX_ADC_Init+0xe8>
 8001578:	b672      	cpsid	i
  while (1)
 800157a:	e7fe      	b.n	800157a <MX_ADC_Init+0xe6>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800157c:	2210      	movs	r2, #16
 800157e:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001580:	4669      	mov	r1, sp
 8001582:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001584:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001588:	f005 ffde 	bl	8007548 <HAL_ADC_ConfigChannel>
 800158c:	b108      	cbz	r0, 8001592 <MX_ADC_Init+0xfe>
 800158e:	b672      	cpsid	i
  while (1)
 8001590:	e7fe      	b.n	8001590 <MX_ADC_Init+0xfc>
}
 8001592:	b00a      	add	sp, #40	; 0x28
 8001594:	bd70      	pop	{r4, r5, r6, pc}
 8001596:	bf00      	nop
 8001598:	200003b0 	.word	0x200003b0
 800159c:	40012400 	.word	0x40012400
 80015a0:	00800200 	.word	0x00800200

080015a4 <update_keypad.part.0>:
	else if(num == '.'){
 80015a4:	282e      	cmp	r0, #46	; 0x2e
 80015a6:	d00e      	beq.n	80015c6 <update_keypad.part.0+0x22>
	else if(num >= '0' && num <= '9'){
 80015a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	d809      	bhi.n	80015c4 <update_keypad.part.0+0x20>
		if(kpenum == V1 || kpenum == V2){
 80015b0:	4b59      	ldr	r3, [pc, #356]	; (8001718 <update_keypad.part.0+0x174>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80015b8:	2a01      	cmp	r2, #1
 80015ba:	d05f      	beq.n	800167c <update_keypad.part.0+0xd8>
		else if(kpenum == A1 || kpenum == A2){
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d02e      	beq.n	800161e <update_keypad.part.0+0x7a>
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d02c      	beq.n	800161e <update_keypad.part.0+0x7a>
}
 80015c4:	4770      	bx	lr
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 80015c6:	4a55      	ldr	r2, [pc, #340]	; (800171c <update_keypad.part.0+0x178>)
 80015c8:	7813      	ldrb	r3, [r2, #0]
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	ddf9      	ble.n	80015c4 <update_keypad.part.0+0x20>
 80015d0:	4953      	ldr	r1, [pc, #332]	; (8001720 <update_keypad.part.0+0x17c>)
 80015d2:	780b      	ldrb	r3, [r1, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f5      	bne.n	80015c4 <update_keypad.part.0+0x20>
				keypadarr[i-1] = keypadarr[i];
 80015d8:	4b52      	ldr	r3, [pc, #328]	; (8001724 <update_keypad.part.0+0x180>)
 80015da:	f893 c001 	ldrb.w	ip, [r3, #1]
 80015de:	fa5f fc8c 	uxtb.w	ip, ip
 80015e2:	f883 c000 	strb.w	ip, [r3]
 80015e6:	f893 c002 	ldrb.w	ip, [r3, #2]
 80015ea:	fa5f fc8c 	uxtb.w	ip, ip
 80015ee:	f883 c001 	strb.w	ip, [r3, #1]
 80015f2:	f893 c003 	ldrb.w	ip, [r3, #3]
 80015f6:	fa5f fc8c 	uxtb.w	ip, ip
 80015fa:	f883 c002 	strb.w	ip, [r3, #2]
 80015fe:	f893 c004 	ldrb.w	ip, [r3, #4]
 8001602:	fa5f fc8c 	uxtb.w	ip, ip
 8001606:	f883 c003 	strb.w	ip, [r3, #3]
			keypaddecimal = 1;
 800160a:	f04f 0c01 	mov.w	ip, #1
			keypadarr[keypadlength-1] = num;
 800160e:	7118      	strb	r0, [r3, #4]
			keypaddecimal = 1;
 8001610:	f881 c000 	strb.w	ip, [r1]
			keypaditerator--;
 8001614:	7813      	ldrb	r3, [r2, #0]
 8001616:	3b01      	subs	r3, #1
 8001618:	b25b      	sxtb	r3, r3
 800161a:	7013      	strb	r3, [r2, #0]
 800161c:	4770      	bx	lr
			if(keypaditerator > 3){
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <update_keypad.part.0+0x178>)
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	b252      	sxtb	r2, r2
 8001624:	2a03      	cmp	r2, #3
 8001626:	dc16      	bgt.n	8001656 <update_keypad.part.0+0xb2>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	2a03      	cmp	r2, #3
 800162c:	d05b      	beq.n	80016e6 <update_keypad.part.0+0x142>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	2a02      	cmp	r2, #2
 8001632:	d05d      	beq.n	80016f0 <update_keypad.part.0+0x14c>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 8001634:	781a      	ldrb	r2, [r3, #0]
 8001636:	2a01      	cmp	r2, #1
 8001638:	d05f      	beq.n	80016fa <update_keypad.part.0+0x156>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	2a02      	cmp	r2, #2
 800163e:	d061      	beq.n	8001704 <update_keypad.part.0+0x160>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 8001640:	781a      	ldrb	r2, [r3, #0]
 8001642:	2a01      	cmp	r2, #1
 8001644:	d063      	beq.n	800170e <update_keypad.part.0+0x16a>
			else if(keypaditerator == 0 && keypadarr[2] == '.'){
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	2a00      	cmp	r2, #0
 800164a:	d1bb      	bne.n	80015c4 <update_keypad.part.0+0x20>
 800164c:	4a35      	ldr	r2, [pc, #212]	; (8001724 <update_keypad.part.0+0x180>)
 800164e:	7891      	ldrb	r1, [r2, #2]
 8001650:	292e      	cmp	r1, #46	; 0x2e
 8001652:	d1b7      	bne.n	80015c4 <update_keypad.part.0+0x20>
 8001654:	e000      	b.n	8001658 <update_keypad.part.0+0xb4>
					keypadarr[i-1] = keypadarr[i];
 8001656:	4a33      	ldr	r2, [pc, #204]	; (8001724 <update_keypad.part.0+0x180>)
					keypadarr[i-1] = keypadarr[i];
 8001658:	7851      	ldrb	r1, [r2, #1]
 800165a:	b2c9      	uxtb	r1, r1
 800165c:	7011      	strb	r1, [r2, #0]
 800165e:	7891      	ldrb	r1, [r2, #2]
 8001660:	b2c9      	uxtb	r1, r1
 8001662:	7051      	strb	r1, [r2, #1]
 8001664:	78d1      	ldrb	r1, [r2, #3]
 8001666:	b2c9      	uxtb	r1, r1
 8001668:	7091      	strb	r1, [r2, #2]
 800166a:	7911      	ldrb	r1, [r2, #4]
 800166c:	b2c9      	uxtb	r1, r1
 800166e:	70d1      	strb	r1, [r2, #3]
				keypadarr[keypadlength-1] = num;
 8001670:	7110      	strb	r0, [r2, #4]
				keypaditerator--;
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	3a01      	subs	r2, #1
 8001676:	b252      	sxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]
}
 800167a:	4770      	bx	lr
			if(keypaditerator > 2){
 800167c:	4b27      	ldr	r3, [pc, #156]	; (800171c <update_keypad.part.0+0x178>)
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	b252      	sxtb	r2, r2
 8001682:	2a02      	cmp	r2, #2
 8001684:	dce7      	bgt.n	8001656 <update_keypad.part.0+0xb2>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	2a03      	cmp	r2, #3
 800168a:	d022      	beq.n	80016d2 <update_keypad.part.0+0x12e>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 800168c:	781a      	ldrb	r2, [r3, #0]
 800168e:	2a02      	cmp	r2, #2
 8001690:	d024      	beq.n	80016dc <update_keypad.part.0+0x138>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 8001692:	781a      	ldrb	r2, [r3, #0]
 8001694:	2a02      	cmp	r2, #2
 8001696:	d00d      	beq.n	80016b4 <update_keypad.part.0+0x110>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 8001698:	781a      	ldrb	r2, [r3, #0]
 800169a:	2a01      	cmp	r2, #1
 800169c:	d00f      	beq.n	80016be <update_keypad.part.0+0x11a>
			else if(keypaditerator == 1 && keypadarr[4] == '.'){
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	2a01      	cmp	r2, #1
 80016a2:	d011      	beq.n	80016c8 <update_keypad.part.0+0x124>
			else if(keypaditerator == 0 && keypadarr[3] == '.'){
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	2a00      	cmp	r2, #0
 80016a8:	d18c      	bne.n	80015c4 <update_keypad.part.0+0x20>
 80016aa:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <update_keypad.part.0+0x180>)
 80016ac:	78d1      	ldrb	r1, [r2, #3]
 80016ae:	292e      	cmp	r1, #46	; 0x2e
 80016b0:	d188      	bne.n	80015c4 <update_keypad.part.0+0x20>
 80016b2:	e7d1      	b.n	8001658 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 80016b4:	4a1b      	ldr	r2, [pc, #108]	; (8001724 <update_keypad.part.0+0x180>)
 80016b6:	7911      	ldrb	r1, [r2, #4]
 80016b8:	292e      	cmp	r1, #46	; 0x2e
 80016ba:	d1ed      	bne.n	8001698 <update_keypad.part.0+0xf4>
 80016bc:	e7cc      	b.n	8001658 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80016be:	4a19      	ldr	r2, [pc, #100]	; (8001724 <update_keypad.part.0+0x180>)
 80016c0:	78d1      	ldrb	r1, [r2, #3]
 80016c2:	292e      	cmp	r1, #46	; 0x2e
 80016c4:	d1eb      	bne.n	800169e <update_keypad.part.0+0xfa>
 80016c6:	e7c7      	b.n	8001658 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 1 && keypadarr[4] == '.'){
 80016c8:	4a16      	ldr	r2, [pc, #88]	; (8001724 <update_keypad.part.0+0x180>)
 80016ca:	7911      	ldrb	r1, [r2, #4]
 80016cc:	292e      	cmp	r1, #46	; 0x2e
 80016ce:	d1e9      	bne.n	80016a4 <update_keypad.part.0+0x100>
 80016d0:	e7c2      	b.n	8001658 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 80016d2:	4a14      	ldr	r2, [pc, #80]	; (8001724 <update_keypad.part.0+0x180>)
 80016d4:	7911      	ldrb	r1, [r2, #4]
 80016d6:	292e      	cmp	r1, #46	; 0x2e
 80016d8:	d1d8      	bne.n	800168c <update_keypad.part.0+0xe8>
 80016da:	e7bd      	b.n	8001658 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80016dc:	4a11      	ldr	r2, [pc, #68]	; (8001724 <update_keypad.part.0+0x180>)
 80016de:	78d1      	ldrb	r1, [r2, #3]
 80016e0:	292e      	cmp	r1, #46	; 0x2e
 80016e2:	d1d6      	bne.n	8001692 <update_keypad.part.0+0xee>
 80016e4:	e7b8      	b.n	8001658 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 80016e6:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <update_keypad.part.0+0x180>)
 80016e8:	7911      	ldrb	r1, [r2, #4]
 80016ea:	292e      	cmp	r1, #46	; 0x2e
 80016ec:	d19f      	bne.n	800162e <update_keypad.part.0+0x8a>
 80016ee:	e7b3      	b.n	8001658 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80016f0:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <update_keypad.part.0+0x180>)
 80016f2:	78d1      	ldrb	r1, [r2, #3]
 80016f4:	292e      	cmp	r1, #46	; 0x2e
 80016f6:	d19d      	bne.n	8001634 <update_keypad.part.0+0x90>
 80016f8:	e7ae      	b.n	8001658 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <update_keypad.part.0+0x180>)
 80016fc:	7891      	ldrb	r1, [r2, #2]
 80016fe:	292e      	cmp	r1, #46	; 0x2e
 8001700:	d19b      	bne.n	800163a <update_keypad.part.0+0x96>
 8001702:	e7a9      	b.n	8001658 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <update_keypad.part.0+0x180>)
 8001706:	7911      	ldrb	r1, [r2, #4]
 8001708:	292e      	cmp	r1, #46	; 0x2e
 800170a:	d199      	bne.n	8001640 <update_keypad.part.0+0x9c>
 800170c:	e7a4      	b.n	8001658 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <update_keypad.part.0+0x180>)
 8001710:	78d1      	ldrb	r1, [r2, #3]
 8001712:	292e      	cmp	r1, #46	; 0x2e
 8001714:	d197      	bne.n	8001646 <update_keypad.part.0+0xa2>
 8001716:	e79f      	b.n	8001658 <update_keypad.part.0+0xb4>
 8001718:	200006c5 	.word	0x200006c5
 800171c:	20000005 	.word	0x20000005
 8001720:	200006c4 	.word	0x200006c4
 8001724:	20000000 	.word	0x20000000

08001728 <update_keypad.constprop.0>:
		if(keypaditerator < keypadlength-1){
 8001728:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <update_keypad.constprop.0+0x40>)
 800172a:	7813      	ldrb	r3, [r2, #0]
 800172c:	b25b      	sxtb	r3, r3
 800172e:	2b03      	cmp	r3, #3
 8001730:	dc15      	bgt.n	800175e <update_keypad.constprop.0+0x36>
			if(keypadarr[4] == '.'){
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <update_keypad.constprop.0+0x44>)
 8001734:	7919      	ldrb	r1, [r3, #4]
 8001736:	292e      	cmp	r1, #46	; 0x2e
 8001738:	d012      	beq.n	8001760 <update_keypad.constprop.0+0x38>
			keypadarr[0] = num;
 800173a:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 800173c:	78d9      	ldrb	r1, [r3, #3]
 800173e:	b2c9      	uxtb	r1, r1
 8001740:	7119      	strb	r1, [r3, #4]
 8001742:	7899      	ldrb	r1, [r3, #2]
 8001744:	b2c9      	uxtb	r1, r1
 8001746:	70d9      	strb	r1, [r3, #3]
 8001748:	7859      	ldrb	r1, [r3, #1]
 800174a:	b2c9      	uxtb	r1, r1
 800174c:	7099      	strb	r1, [r3, #2]
 800174e:	7819      	ldrb	r1, [r3, #0]
 8001750:	b2c9      	uxtb	r1, r1
 8001752:	7059      	strb	r1, [r3, #1]
			keypadarr[0] = num;
 8001754:	7018      	strb	r0, [r3, #0]
			keypaditerator++;
 8001756:	7813      	ldrb	r3, [r2, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	b25b      	sxtb	r3, r3
 800175c:	7013      	strb	r3, [r2, #0]
}
 800175e:	4770      	bx	lr
				keypaddecimal = 0;
 8001760:	2000      	movs	r0, #0
 8001762:	4903      	ldr	r1, [pc, #12]	; (8001770 <update_keypad.constprop.0+0x48>)
 8001764:	7008      	strb	r0, [r1, #0]
 8001766:	e7e8      	b.n	800173a <update_keypad.constprop.0+0x12>
 8001768:	20000005 	.word	0x20000005
 800176c:	20000000 	.word	0x20000000
 8001770:	200006c4 	.word	0x200006c4

08001774 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001774:	2300      	movs	r3, #0
{
 8001776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800177a:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800177e:	2403      	movs	r4, #3
 8001780:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001782:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001784:	f04f 0810 	mov.w	r8, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001788:	f04f 0e02 	mov.w	lr, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800178c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001790:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
{
 8001794:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800179a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800179e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80017a6:	e9cd 3303 	strd	r3, r3, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017aa:	4a16      	ldr	r2, [pc, #88]	; (8001804 <SystemClock_Config+0x90>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ac:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ae:	9300      	str	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b0:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b2:	a806      	add	r0, sp, #24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80017b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017bc:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80017be:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c2:	e9cd ec0f 	strd	lr, ip, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80017c6:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ca:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ce:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d0:	f007 fe76 	bl	80094c0 <HAL_RCC_OscConfig>
 80017d4:	b108      	cbz	r0, 80017da <SystemClock_Config+0x66>
 80017d6:	b672      	cpsid	i
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <SystemClock_Config+0x64>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017da:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017dc:	240f      	movs	r4, #15
 80017de:	2503      	movs	r5, #3
 80017e0:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e4:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017e6:	4631      	mov	r1, r6
 80017e8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ea:	e9cd 4500 	strd	r4, r5, [sp]
 80017ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017f2:	f008 f8c5 	bl	8009980 <HAL_RCC_ClockConfig>
 80017f6:	b108      	cbz	r0, 80017fc <SystemClock_Config+0x88>
 80017f8:	b672      	cpsid	i
  while (1)
 80017fa:	e7fe      	b.n	80017fa <SystemClock_Config+0x86>
}
 80017fc:	b014      	add	sp, #80	; 0x50
 80017fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001802:	bf00      	nop
 8001804:	40007000 	.word	0x40007000

08001808 <EXTI1_IRQHandler>:
{
 8001808:	b410      	push	{r4}
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 800180a:	2407      	movs	r4, #7
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <EXTI1_IRQHandler+0x14>)
	memset (usbbuffer, '\0', 128); // clear the buffer
 800180e:	2280      	movs	r2, #128	; 0x80
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 8001810:	615c      	str	r4, [r3, #20]
	memset (usbbuffer, '\0', 128); // clear the buffer
 8001812:	2100      	movs	r1, #0
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <EXTI1_IRQHandler+0x18>)
}
 8001816:	bc10      	pop	{r4}
	memset (usbbuffer, '\0', 128); // clear the buffer
 8001818:	f00a bde0 	b.w	800c3dc <memset>
 800181c:	40010400 	.word	0x40010400
 8001820:	200007a0 	.word	0x200007a0

08001824 <update_ADC_watchdog>:
void update_ADC_watchdog(float val){
 8001824:	b570      	push	{r4, r5, r6, lr}
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <update_ADC_watchdog+0x78>)
void update_ADC_watchdog(float val){
 8001828:	b082      	sub	sp, #8
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800182a:	491d      	ldr	r1, [pc, #116]	; (80018a0 <update_ADC_watchdog+0x7c>)
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800182c:	891e      	ldrh	r6, [r3, #8]
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800182e:	f7ff faa1 	bl	8000d74 <__aeabi_fmul>
 8001832:	491c      	ldr	r1, [pc, #112]	; (80018a4 <update_ADC_watchdog+0x80>)
 8001834:	f7ff fa9e 	bl	8000d74 <__aeabi_fmul>
 8001838:	491b      	ldr	r1, [pc, #108]	; (80018a8 <update_ADC_watchdog+0x84>)
 800183a:	f7ff fa9b 	bl	8000d74 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800183e:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <update_ADC_watchdog+0x88>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001840:	4604      	mov	r4, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001842:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8001844:	b2b6      	uxth	r6, r6
 8001846:	8818      	ldrh	r0, [r3, #0]
 8001848:	f7ff fa3c 	bl	8000cc4 <__aeabi_ui2f>
 800184c:	4605      	mov	r5, r0
 800184e:	4630      	mov	r0, r6
 8001850:	f7ff fa38 	bl	8000cc4 <__aeabi_ui2f>
 8001854:	4601      	mov	r1, r0
 8001856:	4628      	mov	r0, r5
 8001858:	f7ff fb40 	bl	8000edc <__aeabi_fdiv>
 800185c:	4914      	ldr	r1, [pc, #80]	; (80018b0 <update_ADC_watchdog+0x8c>)
 800185e:	f7ff fa89 	bl	8000d74 <__aeabi_fmul>
 8001862:	4601      	mov	r1, r0
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fb39 	bl	8000edc <__aeabi_fdiv>
 800186a:	f7ff fc6f 	bl	800114c <__aeabi_f2uiz>
	if(amp >= 4095){
 800186e:	f640 72fe 	movw	r2, #4094	; 0xffe
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001872:	b280      	uxth	r0, r0
 8001874:	f8ad 0006 	strh.w	r0, [sp, #6]
	if(amp >= 4095){
 8001878:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800187c:	b29b      	uxth	r3, r3
 800187e:	4293      	cmp	r3, r2
 8001880:	d905      	bls.n	800188e <update_ADC_watchdog+0x6a>
		ADC1->HTR = 4095;
 8001882:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <update_ADC_watchdog+0x90>)
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
}
 800188a:	b002      	add	sp, #8
 800188c:	bd70      	pop	{r4, r5, r6, pc}
		ADC1->HTR = amp;
 800188e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <update_ADC_watchdog+0x90>)
 8001894:	b29b      	uxth	r3, r3
 8001896:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001898:	b002      	add	sp, #8
 800189a:	bd70      	pop	{r4, r5, r6, pc}
 800189c:	20000388 	.word	0x20000388
 80018a0:	3e19999a 	.word	0x3e19999a
 80018a4:	41a00000 	.word	0x41a00000
 80018a8:	457ff000 	.word	0x457ff000
 80018ac:	20000010 	.word	0x20000010
 80018b0:	40400000 	.word	0x40400000
 80018b4:	40012400 	.word	0x40012400

080018b8 <lcd_createChar>:
{
 80018b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018bc:	2564      	movs	r5, #100	; 0x64
 80018be:	482d      	ldr	r0, [pc, #180]	; (8001974 <lcd_createChar+0xbc>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018c0:	492d      	ldr	r1, [pc, #180]	; (8001978 <lcd_createChar+0xc0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018c2:	4607      	mov	r7, r0
{
 80018c4:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018c6:	2304      	movs	r3, #4
 80018c8:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018ca:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018cc:	9500      	str	r5, [sp, #0]
 80018ce:	214e      	movs	r1, #78	; 0x4e
 80018d0:	f006 fd02 	bl	80082d8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80018d4:	2001      	movs	r0, #1
 80018d6:	f005 fbeb 	bl	80070b0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018da:	4b28      	ldr	r3, [pc, #160]	; (800197c <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018dc:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018de:	9303      	str	r3, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018e0:	4638      	mov	r0, r7
 80018e2:	2304      	movs	r3, #4
 80018e4:	4c26      	ldr	r4, [pc, #152]	; (8001980 <lcd_createChar+0xc8>)
 80018e6:	9500      	str	r5, [sp, #0]
 80018e8:	aa03      	add	r2, sp, #12
 80018ea:	f006 fcf5 	bl	80082d8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f104 0640 	add.w	r6, r4, #64	; 0x40
 80018f4:	f005 fbdc 	bl	80070b0 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018f8:	2304      	movs	r3, #4
		lcd_send_data(customChar[i]);
 80018fa:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018fe:	4638      	mov	r0, r7
	data_l = ((data<<4)&0xf0);
 8001900:	fa02 f103 	lsl.w	r1, r2, r3
 8001904:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8001906:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800190a:	f042 0c09 	orr.w	ip, r2, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800190e:	f041 0e09 	orr.w	lr, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001912:	f042 090d 	orr.w	r9, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001916:	f041 080d 	orr.w	r8, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800191a:	aa03      	add	r2, sp, #12
 800191c:	214e      	movs	r1, #78	; 0x4e
 800191e:	9500      	str	r5, [sp, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001920:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001924:	f88d e00f 	strb.w	lr, [sp, #15]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001928:	f88d 900c 	strb.w	r9, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800192c:	f88d 800e 	strb.w	r8, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001930:	f006 fcd2 	bl	80082d8 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8001934:	2001      	movs	r0, #1
 8001936:	f005 fbbb 	bl	80070b0 <HAL_Delay>
	for(int i = 0; i <= 63 ; i++){
 800193a:	42a6      	cmp	r6, r4
 800193c:	d1dc      	bne.n	80018f8 <lcd_createChar+0x40>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800193e:	490f      	ldr	r1, [pc, #60]	; (800197c <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001940:	aa03      	add	r2, sp, #12
 8001942:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001944:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001946:	9500      	str	r5, [sp, #0]
 8001948:	214e      	movs	r1, #78	; 0x4e
 800194a:	480a      	ldr	r0, [pc, #40]	; (8001974 <lcd_createChar+0xbc>)
 800194c:	f006 fcc4 	bl	80082d8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001950:	2001      	movs	r0, #1
 8001952:	f005 fbad 	bl	80070b0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001956:	480b      	ldr	r0, [pc, #44]	; (8001984 <lcd_createChar+0xcc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001958:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800195a:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800195c:	214e      	movs	r1, #78	; 0x4e
 800195e:	aa03      	add	r2, sp, #12
 8001960:	9500      	str	r5, [sp, #0]
 8001962:	4804      	ldr	r0, [pc, #16]	; (8001974 <lcd_createChar+0xbc>)
 8001964:	f006 fcb8 	bl	80082d8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001968:	2001      	movs	r0, #1
}
 800196a:	b005      	add	sp, #20
 800196c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 8001970:	f005 bb9e 	b.w	80070b0 <HAL_Delay>
 8001974:	200004ec 	.word	0x200004ec
 8001978:	080c484c 	.word	0x080c484c
 800197c:	080c080c 	.word	0x080c080c
 8001980:	0800f263 	.word	0x0800f263
 8001984:	282c080c 	.word	0x282c080c

08001988 <lcd_init>:
{
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 800198a:	2064      	movs	r0, #100	; 0x64
{
 800198c:	b085      	sub	sp, #20
	HAL_Delay(100);
 800198e:	f005 fb8f 	bl	80070b0 <HAL_Delay>
 8001992:	2403      	movs	r4, #3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001994:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001996:	4f2e      	ldr	r7, [pc, #184]	; (8001a50 <lcd_init+0xc8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001998:	4e2e      	ldr	r6, [pc, #184]	; (8001a54 <lcd_init+0xcc>)
 800199a:	2304      	movs	r3, #4
 800199c:	214e      	movs	r1, #78	; 0x4e
 800199e:	aa03      	add	r2, sp, #12
 80019a0:	4630      	mov	r0, r6
 80019a2:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019a4:	9703      	str	r7, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019a6:	f006 fc97 	bl	80082d8 <HAL_I2C_Master_Transmit>
		HAL_Delay(45);
 80019aa:	202d      	movs	r0, #45	; 0x2d
 80019ac:	f005 fb80 	bl	80070b0 <HAL_Delay>
	for(i=0;i<3;i++){//sending 3 times: select 4-bit mode
 80019b0:	1e63      	subs	r3, r4, #1
 80019b2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80019b6:	d1f0      	bne.n	800199a <lcd_init+0x12>
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80019b8:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019ba:	4927      	ldr	r1, [pc, #156]	; (8001a58 <lcd_init+0xd0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019bc:	2304      	movs	r3, #4
 80019be:	aa03      	add	r2, sp, #12
 80019c0:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019c2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019c4:	4823      	ldr	r0, [pc, #140]	; (8001a54 <lcd_init+0xcc>)
 80019c6:	214e      	movs	r1, #78	; 0x4e
 80019c8:	f006 fc86 	bl	80082d8 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 80019cc:	4620      	mov	r0, r4
 80019ce:	f005 fb6f 	bl	80070b0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019d2:	4a22      	ldr	r2, [pc, #136]	; (8001a5c <lcd_init+0xd4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019d4:	2304      	movs	r3, #4
 80019d6:	214e      	movs	r1, #78	; 0x4e
 80019d8:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019da:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019dc:	481d      	ldr	r0, [pc, #116]	; (8001a54 <lcd_init+0xcc>)
 80019de:	aa03      	add	r2, sp, #12
 80019e0:	f006 fc7a 	bl	80082d8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f005 fb63 	bl	80070b0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019ea:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <lcd_init+0xd8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019ec:	2304      	movs	r3, #4
 80019ee:	214e      	movs	r1, #78	; 0x4e
 80019f0:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019f2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019f4:	4817      	ldr	r0, [pc, #92]	; (8001a54 <lcd_init+0xcc>)
 80019f6:	aa03      	add	r2, sp, #12
 80019f8:	f006 fc6e 	bl	80082d8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f005 fb57 	bl	80070b0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a02:	4a18      	ldr	r2, [pc, #96]	; (8001a64 <lcd_init+0xdc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a04:	2304      	movs	r3, #4
 8001a06:	214e      	movs	r1, #78	; 0x4e
 8001a08:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a0a:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a0c:	4811      	ldr	r0, [pc, #68]	; (8001a54 <lcd_init+0xcc>)
 8001a0e:	aa03      	add	r2, sp, #12
 8001a10:	f006 fc62 	bl	80082d8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001a14:	2001      	movs	r0, #1
 8001a16:	f005 fb4b 	bl	80070b0 <HAL_Delay>
	lcd_createChar();
 8001a1a:	f7ff ff4d 	bl	80018b8 <lcd_createChar>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <lcd_init+0xe0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a20:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a22:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a24:	2304      	movs	r3, #4
 8001a26:	214e      	movs	r1, #78	; 0x4e
 8001a28:	480a      	ldr	r0, [pc, #40]	; (8001a54 <lcd_init+0xcc>)
 8001a2a:	aa03      	add	r2, sp, #12
 8001a2c:	f006 fc54 	bl	80082d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a30:	4627      	mov	r7, r4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a32:	4e0e      	ldr	r6, [pc, #56]	; (8001a6c <lcd_init+0xe4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a34:	4d07      	ldr	r5, [pc, #28]	; (8001a54 <lcd_init+0xcc>)
 8001a36:	2304      	movs	r3, #4
 8001a38:	214e      	movs	r1, #78	; 0x4e
 8001a3a:	4628      	mov	r0, r5
 8001a3c:	aa03      	add	r2, sp, #12
 8001a3e:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a40:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a42:	f006 fc49 	bl	80082d8 <HAL_I2C_Master_Transmit>
	for (int i=0; i<100; i++)
 8001a46:	3c01      	subs	r4, #1
 8001a48:	d1f5      	bne.n	8001a36 <lcd_init+0xae>
}
 8001a4a:	b005      	add	sp, #20
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	383c080c 	.word	0x383c080c
 8001a54:	200004ec 	.word	0x200004ec
 8001a58:	282c080c 	.word	0x282c080c
 8001a5c:	888c282c 	.word	0x888c282c
 8001a60:	c8cc080c 	.word	0xc8cc080c
 8001a64:	080c888c 	.word	0x080c888c
 8001a68:	080c080c 	.word	0x080c080c
 8001a6c:	090d292d 	.word	0x090d292d

08001a70 <lcd_psu_init>:
void lcd_psu_init(void){
 8001a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a74:	2664      	movs	r6, #100	; 0x64
void lcd_psu_init(void){
 8001a76:	b084      	sub	sp, #16
	lcd_init();
 8001a78:	f7ff ff86 	bl	8001988 <lcd_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a7c:	49c7      	ldr	r1, [pc, #796]	; (8001d9c <lcd_psu_init+0x32c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a7e:	48c8      	ldr	r0, [pc, #800]	; (8001da0 <lcd_psu_init+0x330>)
 8001a80:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a82:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a84:	aa03      	add	r2, sp, #12
 8001a86:	214e      	movs	r1, #78	; 0x4e
 8001a88:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a8a:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a8c:	f006 fc24 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001a90:	2356      	movs	r3, #86	; 0x56
 8001a92:	4dc4      	ldr	r5, [pc, #784]	; (8001da4 <lcd_psu_init+0x334>)
	data_l = ((data<<4)&0xf0);
 8001a94:	011a      	lsls	r2, r3, #4
 8001a96:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a9c:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001aa0:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001aa4:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001aa8:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001aac:	2304      	movs	r3, #4
 8001aae:	214e      	movs	r1, #78	; 0x4e
 8001ab0:	4638      	mov	r0, r7
 8001ab2:	aa03      	add	r2, sp, #12
 8001ab4:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001ab6:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001aba:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001abe:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001ac2:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ac6:	f006 fc07 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001aca:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1e0      	bne.n	8001a94 <lcd_psu_init+0x24>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001ad2:	49b5      	ldr	r1, [pc, #724]	; (8001da8 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001ad8:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ada:	48b1      	ldr	r0, [pc, #708]	; (8001da0 <lcd_psu_init+0x330>)
 8001adc:	214e      	movs	r1, #78	; 0x4e
 8001ade:	aa03      	add	r2, sp, #12
 8001ae0:	f006 fbfa 	bl	80082d8 <HAL_I2C_Master_Transmit>
 8001ae4:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001ae6:	2356      	movs	r3, #86	; 0x56
 8001ae8:	4db0      	ldr	r5, [pc, #704]	; (8001dac <lcd_psu_init+0x33c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001aea:	4fad      	ldr	r7, [pc, #692]	; (8001da0 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001aec:	011a      	lsls	r2, r3, #4
 8001aee:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001af4:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001af8:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001afc:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b00:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b04:	2304      	movs	r3, #4
 8001b06:	214e      	movs	r1, #78	; 0x4e
 8001b08:	4638      	mov	r0, r7
 8001b0a:	aa03      	add	r2, sp, #12
 8001b0c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b0e:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b12:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b16:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b1a:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b1e:	f006 fbdb 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001b22:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1e0      	bne.n	8001aec <lcd_psu_init+0x7c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b2a:	49a1      	ldr	r1, [pc, #644]	; (8001db0 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b30:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b32:	489b      	ldr	r0, [pc, #620]	; (8001da0 <lcd_psu_init+0x330>)
 8001b34:	214e      	movs	r1, #78	; 0x4e
 8001b36:	aa03      	add	r2, sp, #12
 8001b38:	f006 fbce 	bl	80082d8 <HAL_I2C_Master_Transmit>
 8001b3c:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001b3e:	233a      	movs	r3, #58	; 0x3a
 8001b40:	4d9c      	ldr	r5, [pc, #624]	; (8001db4 <lcd_psu_init+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b42:	4f97      	ldr	r7, [pc, #604]	; (8001da0 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001b44:	011a      	lsls	r2, r3, #4
 8001b46:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b4c:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b50:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b54:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b58:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	214e      	movs	r1, #78	; 0x4e
 8001b60:	4638      	mov	r0, r7
 8001b62:	aa03      	add	r2, sp, #12
 8001b64:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b66:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b6a:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b6e:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b72:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b76:	f006 fbaf 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001b7a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1e0      	bne.n	8001b44 <lcd_psu_init+0xd4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b82:	498d      	ldr	r1, [pc, #564]	; (8001db8 <lcd_psu_init+0x348>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b84:	2304      	movs	r3, #4
 8001b86:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b88:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b8a:	4885      	ldr	r0, [pc, #532]	; (8001da0 <lcd_psu_init+0x330>)
 8001b8c:	214e      	movs	r1, #78	; 0x4e
 8001b8e:	aa03      	add	r2, sp, #12
 8001b90:	f006 fba2 	bl	80082d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b94:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001b96:	2341      	movs	r3, #65	; 0x41
 8001b98:	4d88      	ldr	r5, [pc, #544]	; (8001dbc <lcd_psu_init+0x34c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b9a:	4f81      	ldr	r7, [pc, #516]	; (8001da0 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001b9c:	011a      	lsls	r2, r3, #4
 8001b9e:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001ba4:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001ba8:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001bac:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001bb0:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	214e      	movs	r1, #78	; 0x4e
 8001bb8:	4638      	mov	r0, r7
 8001bba:	aa03      	add	r2, sp, #12
 8001bbc:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001bbe:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001bc2:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001bc6:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001bca:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bce:	f006 fb83 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001bd2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1e0      	bne.n	8001b9c <lcd_psu_init+0x12c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001bda:	4973      	ldr	r1, [pc, #460]	; (8001da8 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bdc:	2304      	movs	r3, #4
 8001bde:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001be0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001be2:	486f      	ldr	r0, [pc, #444]	; (8001da0 <lcd_psu_init+0x330>)
 8001be4:	214e      	movs	r1, #78	; 0x4e
 8001be6:	aa03      	add	r2, sp, #12
 8001be8:	f006 fb76 	bl	80082d8 <HAL_I2C_Master_Transmit>
 8001bec:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001bee:	2341      	movs	r3, #65	; 0x41
 8001bf0:	4d73      	ldr	r5, [pc, #460]	; (8001dc0 <lcd_psu_init+0x350>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bf2:	4f6b      	ldr	r7, [pc, #428]	; (8001da0 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001bf4:	011a      	lsls	r2, r3, #4
 8001bf6:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001bfc:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001c00:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c04:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001c08:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	214e      	movs	r1, #78	; 0x4e
 8001c10:	4638      	mov	r0, r7
 8001c12:	aa03      	add	r2, sp, #12
 8001c14:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c16:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001c1a:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001c1e:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001c22:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c26:	f006 fb57 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001c2a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1e0      	bne.n	8001bf4 <lcd_psu_init+0x184>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c32:	495f      	ldr	r1, [pc, #380]	; (8001db0 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c34:	2304      	movs	r3, #4
 8001c36:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c38:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c3a:	4859      	ldr	r0, [pc, #356]	; (8001da0 <lcd_psu_init+0x330>)
 8001c3c:	214e      	movs	r1, #78	; 0x4e
 8001c3e:	aa03      	add	r2, sp, #12
 8001c40:	f006 fb4a 	bl	80082d8 <HAL_I2C_Master_Transmit>
 8001c44:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001c46:	233a      	movs	r3, #58	; 0x3a
 8001c48:	4d5e      	ldr	r5, [pc, #376]	; (8001dc4 <lcd_psu_init+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c4a:	4f55      	ldr	r7, [pc, #340]	; (8001da0 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001c4c:	011a      	lsls	r2, r3, #4
 8001c4e:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001c54:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001c58:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c5c:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001c60:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c64:	2304      	movs	r3, #4
 8001c66:	214e      	movs	r1, #78	; 0x4e
 8001c68:	4638      	mov	r0, r7
 8001c6a:	aa03      	add	r2, sp, #12
 8001c6c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c6e:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001c72:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001c76:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001c7a:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c7e:	f006 fb2b 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001c82:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1e0      	bne.n	8001c4c <lcd_psu_init+0x1dc>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001c8a:	494f      	ldr	r1, [pc, #316]	; (8001dc8 <lcd_psu_init+0x358>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001c90:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c92:	4843      	ldr	r0, [pc, #268]	; (8001da0 <lcd_psu_init+0x330>)
 8001c94:	214e      	movs	r1, #78	; 0x4e
 8001c96:	aa03      	add	r2, sp, #12
 8001c98:	f006 fb1e 	bl	80082d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c9c:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001c9e:	2356      	movs	r3, #86	; 0x56
 8001ca0:	4d4a      	ldr	r5, [pc, #296]	; (8001dcc <lcd_psu_init+0x35c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ca2:	4f3f      	ldr	r7, [pc, #252]	; (8001da0 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001ca4:	011a      	lsls	r2, r3, #4
 8001ca6:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001cac:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001cb0:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001cb4:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001cb8:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	214e      	movs	r1, #78	; 0x4e
 8001cc0:	4638      	mov	r0, r7
 8001cc2:	aa03      	add	r2, sp, #12
 8001cc4:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001cc6:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001cca:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001cce:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001cd2:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cd6:	f006 faff 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001cda:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1e0      	bne.n	8001ca4 <lcd_psu_init+0x234>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001ce2:	4931      	ldr	r1, [pc, #196]	; (8001da8 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001ce8:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cea:	482d      	ldr	r0, [pc, #180]	; (8001da0 <lcd_psu_init+0x330>)
 8001cec:	214e      	movs	r1, #78	; 0x4e
 8001cee:	aa03      	add	r2, sp, #12
 8001cf0:	f006 faf2 	bl	80082d8 <HAL_I2C_Master_Transmit>
 8001cf4:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001cf6:	2356      	movs	r3, #86	; 0x56
 8001cf8:	4d35      	ldr	r5, [pc, #212]	; (8001dd0 <lcd_psu_init+0x360>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cfa:	4f29      	ldr	r7, [pc, #164]	; (8001da0 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001cfc:	011a      	lsls	r2, r3, #4
 8001cfe:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d04:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d08:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d0c:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d10:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d14:	2304      	movs	r3, #4
 8001d16:	214e      	movs	r1, #78	; 0x4e
 8001d18:	4638      	mov	r0, r7
 8001d1a:	aa03      	add	r2, sp, #12
 8001d1c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d1e:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d22:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d26:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d2a:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d2e:	f006 fad3 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d32:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1e0      	bne.n	8001cfc <lcd_psu_init+0x28c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d3a:	491d      	ldr	r1, [pc, #116]	; (8001db0 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d40:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d42:	4817      	ldr	r0, [pc, #92]	; (8001da0 <lcd_psu_init+0x330>)
 8001d44:	214e      	movs	r1, #78	; 0x4e
 8001d46:	aa03      	add	r2, sp, #12
 8001d48:	f006 fac6 	bl	80082d8 <HAL_I2C_Master_Transmit>
 8001d4c:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001d4e:	233a      	movs	r3, #58	; 0x3a
 8001d50:	4d18      	ldr	r5, [pc, #96]	; (8001db4 <lcd_psu_init+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d52:	4f13      	ldr	r7, [pc, #76]	; (8001da0 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001d54:	011a      	lsls	r2, r3, #4
 8001d56:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d5c:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d60:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d64:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d68:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	214e      	movs	r1, #78	; 0x4e
 8001d70:	4638      	mov	r0, r7
 8001d72:	aa03      	add	r2, sp, #12
 8001d74:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d76:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d7a:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d7e:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d82:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d86:	f006 faa7 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d8a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1e0      	bne.n	8001d54 <lcd_psu_init+0x2e4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d92:	4910      	ldr	r1, [pc, #64]	; (8001dd4 <lcd_psu_init+0x364>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d94:	2304      	movs	r3, #4
 8001d96:	9600      	str	r6, [sp, #0]
 8001d98:	e01e      	b.n	8001dd8 <lcd_psu_init+0x368>
 8001d9a:	bf00      	nop
 8001d9c:	080c888c 	.word	0x080c888c
 8001da0:	200004ec 	.word	0x200004ec
 8001da4:	0800f1c8 	.word	0x0800f1c8
 8001da8:	191d090d 	.word	0x191d090d
 8001dac:	0800f1d4 	.word	0x0800f1d4
 8001db0:	090d090d 	.word	0x090d090d
 8001db4:	0800f1d8 	.word	0x0800f1d8
 8001db8:	080cc8cc 	.word	0x080cc8cc
 8001dbc:	0800f1e0 	.word	0x0800f1e0
 8001dc0:	0800f1ec 	.word	0x0800f1ec
 8001dc4:	0800f1f0 	.word	0x0800f1f0
 8001dc8:	484c989c 	.word	0x484c989c
 8001dcc:	0800f1f8 	.word	0x0800f1f8
 8001dd0:	0800f204 	.word	0x0800f204
 8001dd4:	484cd8dc 	.word	0x484cd8dc
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001dd8:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001dda:	4841      	ldr	r0, [pc, #260]	; (8001ee0 <lcd_psu_init+0x470>)
 8001ddc:	214e      	movs	r1, #78	; 0x4e
 8001dde:	aa03      	add	r2, sp, #12
 8001de0:	f006 fa7a 	bl	80082d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001de4:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001de6:	2341      	movs	r3, #65	; 0x41
 8001de8:	4d3e      	ldr	r5, [pc, #248]	; (8001ee4 <lcd_psu_init+0x474>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001dea:	4f3d      	ldr	r7, [pc, #244]	; (8001ee0 <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001dec:	011a      	lsls	r2, r3, #4
 8001dee:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001df4:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001df8:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001dfc:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001e00:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e04:	2304      	movs	r3, #4
 8001e06:	214e      	movs	r1, #78	; 0x4e
 8001e08:	4638      	mov	r0, r7
 8001e0a:	aa03      	add	r2, sp, #12
 8001e0c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001e0e:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001e12:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001e16:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001e1a:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e1e:	f006 fa5b 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001e22:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1e0      	bne.n	8001dec <lcd_psu_init+0x37c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001e2a:	492f      	ldr	r1, [pc, #188]	; (8001ee8 <lcd_psu_init+0x478>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001e30:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e32:	482b      	ldr	r0, [pc, #172]	; (8001ee0 <lcd_psu_init+0x470>)
 8001e34:	214e      	movs	r1, #78	; 0x4e
 8001e36:	aa03      	add	r2, sp, #12
 8001e38:	f006 fa4e 	bl	80082d8 <HAL_I2C_Master_Transmit>
 8001e3c:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001e3e:	2341      	movs	r3, #65	; 0x41
 8001e40:	4d2a      	ldr	r5, [pc, #168]	; (8001eec <lcd_psu_init+0x47c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e42:	4f27      	ldr	r7, [pc, #156]	; (8001ee0 <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001e44:	011a      	lsls	r2, r3, #4
 8001e46:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001e4c:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001e50:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001e54:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001e58:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	214e      	movs	r1, #78	; 0x4e
 8001e60:	4638      	mov	r0, r7
 8001e62:	aa03      	add	r2, sp, #12
 8001e64:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001e66:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001e6a:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001e6e:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001e72:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e76:	f006 fa2f 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001e7a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1e0      	bne.n	8001e44 <lcd_psu_init+0x3d4>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001e82:	491b      	ldr	r1, [pc, #108]	; (8001ef0 <lcd_psu_init+0x480>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e84:	2304      	movs	r3, #4
 8001e86:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001e88:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e8a:	4815      	ldr	r0, [pc, #84]	; (8001ee0 <lcd_psu_init+0x470>)
 8001e8c:	214e      	movs	r1, #78	; 0x4e
 8001e8e:	aa03      	add	r2, sp, #12
 8001e90:	f006 fa22 	bl	80082d8 <HAL_I2C_Master_Transmit>
 8001e94:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001e96:	233a      	movs	r3, #58	; 0x3a
 8001e98:	4c16      	ldr	r4, [pc, #88]	; (8001ef4 <lcd_psu_init+0x484>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e9a:	4d11      	ldr	r5, [pc, #68]	; (8001ee0 <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001e9c:	011a      	lsls	r2, r3, #4
 8001e9e:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001ea4:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001ea8:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001eac:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001eb0:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	214e      	movs	r1, #78	; 0x4e
 8001eb8:	4628      	mov	r0, r5
 8001eba:	aa03      	add	r2, sp, #12
 8001ebc:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001ebe:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001ec2:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001ec6:	f88d 700e 	strb.w	r7, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001eca:	f88d e00f 	strb.w	lr, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ece:	f006 fa03 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001ed2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e0      	bne.n	8001e9c <lcd_psu_init+0x42c>
}
 8001eda:	b004      	add	sp, #16
 8001edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ee0:	200004ec 	.word	0x200004ec
 8001ee4:	0800f208 	.word	0x0800f208
 8001ee8:	191d090d 	.word	0x191d090d
 8001eec:	0800f214 	.word	0x0800f214
 8001ef0:	090d090d 	.word	0x090d090d
 8001ef4:	0800f1f0 	.word	0x0800f1f0

08001ef8 <ourInit>:
void ourInit(void){
 8001ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_ADC_DeInit(&hadc);
 8001efc:	4c55      	ldr	r4, [pc, #340]	; (8002054 <ourInit+0x15c>)
void ourInit(void){
 8001efe:	b08d      	sub	sp, #52	; 0x34
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001f00:	2201      	movs	r2, #1
 8001f02:	2140      	movs	r1, #64	; 0x40
 8001f04:	4854      	ldr	r0, [pc, #336]	; (8002058 <ourInit+0x160>)
 8001f06:	f006 f905 	bl	8008114 <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f005 f9b2 	bl	8007274 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 8001f10:	4852      	ldr	r0, [pc, #328]	; (800205c <ourInit+0x164>)
 8001f12:	f005 fe01 	bl	8007b18 <HAL_DMA_DeInit>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f18:	4b51      	ldr	r3, [pc, #324]	; (8002060 <ourInit+0x168>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f1a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f1c:	69d9      	ldr	r1, [r3, #28]
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001f1e:	4d51      	ldr	r5, [pc, #324]	; (8002064 <ourInit+0x16c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f20:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001f24:	61d9      	str	r1, [r3, #28]
 8001f26:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f28:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	9307      	str	r3, [sp, #28]
 8001f30:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f32:	f005 fcbb 	bl	80078ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f36:	200b      	movs	r0, #11
 8001f38:	f005 fcf6 	bl	8007928 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2103      	movs	r1, #3
 8001f40:	200e      	movs	r0, #14
 8001f42:	f005 fcb3 	bl	80078ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f46:	200e      	movs	r0, #14
 8001f48:	f005 fcee 	bl	8007928 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 4, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2104      	movs	r1, #4
 8001f50:	200f      	movs	r0, #15
 8001f52:	f005 fcab 	bl	80078ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f56:	200f      	movs	r0, #15
 8001f58:	f005 fce6 	bl	8007928 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 8001f5c:	f7ff fa9a 	bl	8001494 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_values, 6);// start the adc in dma mode
 8001f60:	2206      	movs	r2, #6
 8001f62:	4620      	mov	r0, r4
 8001f64:	4940      	ldr	r1, [pc, #256]	; (8002068 <ourInit+0x170>)
 8001f66:	f005 fc2f 	bl	80077c8 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	f005 fd2b 	bl	80079c8 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001f72:	2110      	movs	r1, #16
 8001f74:	4628      	mov	r0, r5
 8001f76:	f005 fd27 	bl	80079c8 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4619      	mov	r1, r3
 8001f82:	f005 fd51 	bl	8007a28 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001f86:	2300      	movs	r3, #0
 8001f88:	4628      	mov	r0, r5
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	f005 fd4b 	bl	8007a28 <HAL_DAC_SetValue>
	ExtiConfig.Line = EXTI_LINE_1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	4a35      	ldr	r2, [pc, #212]	; (800206c <ourInit+0x174>)
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001f96:	a908      	add	r1, sp, #32
	ExtiConfig.Line = EXTI_LINE_1;
 8001f98:	e9cd 2308 	strd	r2, r3, [sp, #32]
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001f9c:	2303      	movs	r3, #3
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001f9e:	4834      	ldr	r0, [pc, #208]	; (8002070 <ourInit+0x178>)
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001fa0:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001fa2:	f005 fecf 	bl	8007d44 <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001fa8:	2440      	movs	r4, #64	; 0x40
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001faa:	4611      	mov	r1, r2
 8001fac:	2007      	movs	r0, #7
 8001fae:	f005 fc7d 	bl	80078ac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001fb2:	2007      	movs	r0, #7
 8001fb4:	f005 fcb8 	bl	8007928 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001fbe:	482d      	ldr	r0, [pc, #180]	; (8002074 <ourInit+0x17c>)
 8001fc0:	f006 f8a8 	bl	8008114 <HAL_GPIO_WritePin>
	lcd_psu_init();
 8001fc4:	f7ff fd54 	bl	8001a70 <lcd_psu_init>
	HAL_TIM_Base_Start_IT(&htim3);
 8001fc8:	482b      	ldr	r0, [pc, #172]	; (8002078 <ourInit+0x180>)
 8001fca:	f007 fe67 	bl	8009c9c <HAL_TIM_Base_Start_IT>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001fce:	4e2b      	ldr	r6, [pc, #172]	; (800207c <ourInit+0x184>)
	HAL_TIM_Base_Start_IT(&htim11);
 8001fd0:	482b      	ldr	r0, [pc, #172]	; (8002080 <ourInit+0x188>)
 8001fd2:	f007 fe63 	bl	8009c9c <HAL_TIM_Base_Start_IT>
	memset (usbbuffer, '\0', 128);  // clear the buffer
 8001fd6:	2280      	movs	r2, #128	; 0x80
 8001fd8:	2100      	movs	r1, #0
 8001fda:	482a      	ldr	r0, [pc, #168]	; (8002084 <ourInit+0x18c>)
 8001fdc:	f00a f9fe 	bl	800c3dc <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001fe0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002088 <ourInit+0x190>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001fe4:	4622      	mov	r2, r4
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4630      	mov	r0, r6
 8001fea:	f00a f9f7 	bl	800c3dc <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001fee:	4f27      	ldr	r7, [pc, #156]	; (800208c <ourInit+0x194>)
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001ff0:	4622      	mov	r2, r4
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4826      	ldr	r0, [pc, #152]	; (8002090 <ourInit+0x198>)
 8001ff6:	f00a f9f1 	bl	800c3dc <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001ffa:	4622      	mov	r2, r4
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4640      	mov	r0, r8
 8002000:	f00a f9ec 	bl	800c3dc <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8002004:	4622      	mov	r2, r4
 8002006:	4641      	mov	r1, r8
 8002008:	4638      	mov	r0, r7
 800200a:	f008 f8bb 	bl	800a184 <HAL_UART_Receive_DMA>
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 800200e:	4a21      	ldr	r2, [pc, #132]	; (8002094 <ourInit+0x19c>)
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <ourInit+0x1a0>)
 8002012:	6815      	ldr	r5, [r2, #0]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <ourInit+0x1a4>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b25b      	sxtb	r3, r3
 800201c:	9304      	str	r3, [sp, #16]
 800201e:	f7fe fa1b 	bl	8000458 <__aeabi_f2d>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4628      	mov	r0, r5
 8002028:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800202c:	f7fe fa14 	bl	8000458 <__aeabi_f2d>
 8002030:	4680      	mov	r8, r0
 8002032:	4689      	mov	r9, r1
 8002034:	4630      	mov	r0, r6
 8002036:	2120      	movs	r1, #32
 8002038:	e9cd 8900 	strd	r8, r9, [sp]
 800203c:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <ourInit+0x1a8>)
 800203e:	f00a fe35 	bl	800ccac <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8002042:	4622      	mov	r2, r4
 8002044:	4631      	mov	r1, r6
 8002046:	4638      	mov	r0, r7
}
 8002048:	b00d      	add	sp, #52	; 0x34
 800204a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 800204e:	f008 b85d 	b.w	800a10c <HAL_UART_Transmit_DMA>
 8002052:	bf00      	nop
 8002054:	200003b0 	.word	0x200003b0
 8002058:	40020000 	.word	0x40020000
 800205c:	20000418 	.word	0x20000418
 8002060:	40023800 	.word	0x40023800
 8002064:	20000404 	.word	0x20000404
 8002068:	2000037c 	.word	0x2000037c
 800206c:	06000001 	.word	0x06000001
 8002070:	200004e4 	.word	0x200004e4
 8002074:	40020800 	.word	0x40020800
 8002078:	20000600 	.word	0x20000600
 800207c:	20000720 	.word	0x20000720
 8002080:	20000580 	.word	0x20000580
 8002084:	200007a0 	.word	0x200007a0
 8002088:	200006d8 	.word	0x200006d8
 800208c:	20000680 	.word	0x20000680
 8002090:	20000760 	.word	0x20000760
 8002094:	20000824 	.word	0x20000824
 8002098:	20000394 	.word	0x20000394
 800209c:	200003a2 	.word	0x200003a2
 80020a0:	0800f218 	.word	0x0800f218

080020a4 <main>:
{
 80020a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	2400      	movs	r4, #0
{
 80020aa:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 80020ac:	f004 ffde 	bl	800706c <HAL_Init>
  SystemClock_Config();
 80020b0:	f7ff fb60 	bl	8001774 <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80020b4:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b6:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80020ba:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020be:	4dae      	ldr	r5, [pc, #696]	; (8002378 <main+0x2d4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020c2:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80020c4:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020c6:	f043 0320 	orr.w	r3, r3, #32
 80020ca:	61eb      	str	r3, [r5, #28]
 80020cc:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80020ce:	48ab      	ldr	r0, [pc, #684]	; (800237c <main+0x2d8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	9308      	str	r3, [sp, #32]
 80020d6:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d8:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020da:	4691      	mov	r9, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020dc:	4313      	orrs	r3, r2
 80020de:	61eb      	str	r3, [r5, #28]
 80020e0:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 80020e2:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e4:	4013      	ands	r3, r2
 80020e6:	9309      	str	r3, [sp, #36]	; 0x24
 80020e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 80020ec:	2700      	movs	r7, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	61eb      	str	r3, [r5, #28]
 80020f4:	69eb      	ldr	r3, [r5, #28]
  hdac.Instance = DAC;
 80020f6:	f8df 8288 	ldr.w	r8, [pc, #648]	; 8002380 <main+0x2dc>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	930a      	str	r3, [sp, #40]	; 0x28
 8002100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002102:	69eb      	ldr	r3, [r5, #28]
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	61eb      	str	r3, [r5, #28]
 800210a:	69eb      	ldr	r3, [r5, #28]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	930b      	str	r3, [sp, #44]	; 0x2c
 8002112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8002114:	f005 fffe 	bl	8008114 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8002118:	4622      	mov	r2, r4
 800211a:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800211e:	4899      	ldr	r0, [pc, #612]	; (8002384 <main+0x2e0>)
 8002120:	f005 fff8 	bl	8008114 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8002124:	2240      	movs	r2, #64	; 0x40
 8002126:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8002128:	4894      	ldr	r0, [pc, #592]	; (800237c <main+0x2d8>)
 800212a:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 800212c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002130:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8002134:	f005 fe6c 	bl	8007e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8002138:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800213c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213e:	4891      	ldr	r0, [pc, #580]	; (8002384 <main+0x2e0>)
 8002140:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8002142:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002146:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214a:	f005 fe61 	bl	8007e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 800214e:	f647 4205 	movw	r2, #31749	; 0x7c05
 8002152:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	488c      	ldr	r0, [pc, #560]	; (8002388 <main+0x2e4>)
 8002158:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 800215a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800215e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002162:	f005 fe55 	bl	8007e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8002166:	2300      	movs	r3, #0
 8002168:	2202      	movs	r2, #2
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 800216a:	4887      	ldr	r0, [pc, #540]	; (8002388 <main+0x2e4>)
 800216c:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 800216e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002172:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8002176:	f005 fe4b 	bl	8007e10 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 13, 0);
 800217a:	4622      	mov	r2, r4
 800217c:	210d      	movs	r1, #13
 800217e:	2006      	movs	r0, #6
 8002180:	f005 fb94 	bl	80078ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002184:	2006      	movs	r0, #6
 8002186:	f005 fbcf 	bl	8007928 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 11, 0);
 800218a:	4622      	mov	r2, r4
 800218c:	210b      	movs	r1, #11
 800218e:	2008      	movs	r0, #8
 8002190:	f005 fb8c 	bl	80078ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002194:	2008      	movs	r0, #8
 8002196:	f005 fbc7 	bl	8007928 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 800219a:	4622      	mov	r2, r4
 800219c:	210c      	movs	r1, #12
 800219e:	2028      	movs	r0, #40	; 0x28
 80021a0:	f005 fb84 	bl	80078ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021a4:	2028      	movs	r0, #40	; 0x28
 80021a6:	f005 fbbf 	bl	8007928 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021aa:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021ac:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	61eb      	str	r3, [r5, #28]
 80021b4:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021b6:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021bc:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021be:	9307      	str	r3, [sp, #28]
 80021c0:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021c2:	f005 fb73 	bl	80078ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021c6:	200b      	movs	r0, #11
 80021c8:	f005 fbae 	bl	8007928 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 80021cc:	4622      	mov	r2, r4
 80021ce:	2103      	movs	r1, #3
 80021d0:	200e      	movs	r0, #14
 80021d2:	f005 fb6b 	bl	80078ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80021d6:	200e      	movs	r0, #14
 80021d8:	f005 fba6 	bl	8007928 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 4, 0);
 80021dc:	4622      	mov	r2, r4
 80021de:	2104      	movs	r1, #4
 80021e0:	200f      	movs	r0, #15
 80021e2:	f005 fb63 	bl	80078ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80021e6:	200f      	movs	r0, #15
 80021e8:	f005 fb9e 	bl	8007928 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 80021ec:	f7ff f952 	bl	8001494 <MX_ADC_Init>
  hdac.Instance = DAC;
 80021f0:	4b66      	ldr	r3, [pc, #408]	; (800238c <main+0x2e8>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80021f2:	4640      	mov	r0, r8
  DAC_ChannelConfTypeDef sConfig = {0};
 80021f4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hdac.Instance = DAC;
 80021f8:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80021fc:	f005 fbce 	bl	800799c <HAL_DAC_Init>
 8002200:	b108      	cbz	r0, 8002206 <main+0x162>
 8002202:	b672      	cpsid	i
  while (1)
 8002204:	e7fe      	b.n	8002204 <main+0x160>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002206:	4602      	mov	r2, r0
 8002208:	a90e      	add	r1, sp, #56	; 0x38
 800220a:	4640      	mov	r0, r8
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800220c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002210:	f005 fc20 	bl	8007a54 <HAL_DAC_ConfigChannel>
 8002214:	b108      	cbz	r0, 800221a <main+0x176>
 8002216:	b672      	cpsid	i
  while (1)
 8002218:	e7fe      	b.n	8002218 <main+0x174>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800221a:	2210      	movs	r2, #16
 800221c:	4640      	mov	r0, r8
 800221e:	a90e      	add	r1, sp, #56	; 0x38
 8002220:	f005 fc18 	bl	8007a54 <HAL_DAC_ConfigChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	b108      	cbz	r0, 800222c <main+0x188>
 8002228:	b672      	cpsid	i
  while (1)
 800222a:	e7fe      	b.n	800222a <main+0x186>
  hi2c1.Instance = I2C1;
 800222c:	4858      	ldr	r0, [pc, #352]	; (8002390 <main+0x2ec>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800222e:	219c      	movs	r1, #156	; 0x9c
  hi2c1.Init.OwnAddress2 = 0;
 8002230:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002234:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002238:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800223a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 800223e:	4c55      	ldr	r4, [pc, #340]	; (8002394 <main+0x2f0>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002240:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hi2c1.Init.ClockSpeed = 100000;
 8002244:	4b54      	ldr	r3, [pc, #336]	; (8002398 <main+0x2f4>)
 8002246:	e9c0 4300 	strd	r4, r3, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800224a:	f005 ff7d 	bl	8008148 <HAL_I2C_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	b9b8      	cbnz	r0, 8002282 <main+0x1de>
  huart1.Instance = USART1;
 8002252:	4852      	ldr	r0, [pc, #328]	; (800239c <main+0x2f8>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002254:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002258:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800225c:	60c3      	str	r3, [r0, #12]
  huart1.Init.BaudRate = 9600;
 800225e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002262:	6043      	str	r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_ODD;
 8002264:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002268:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800226a:	230c      	movs	r3, #12
 800226c:	6143      	str	r3, [r0, #20]
  huart1.Instance = USART1;
 800226e:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <main+0x2fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002270:	f8c0 8008 	str.w	r8, [r0, #8]
  huart1.Instance = USART1;
 8002274:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002276:	f007 febf 	bl	8009ff8 <HAL_UART_Init>
 800227a:	4604      	mov	r4, r0
 800227c:	b118      	cbz	r0, 8002286 <main+0x1e2>
 800227e:	b672      	cpsid	i
  while (1)
 8002280:	e7fe      	b.n	8002280 <main+0x1dc>
 8002282:	b672      	cpsid	i
 8002284:	e7fe      	b.n	8002284 <main+0x1e0>
  MX_USB_DEVICE_Init();
 8002286:	f009 fde1 	bl	800be4c <MX_USB_DEVICE_Init>
  htim2.Init.Prescaler = 32000;
 800228a:	f44f 49fa 	mov.w	r9, #32000	; 0x7d00
  htim2.Instance = TIM2;
 800228e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 10;
 8002292:	230a      	movs	r3, #10
  htim2.Instance = TIM2;
 8002294:	4d43      	ldr	r5, [pc, #268]	; (80023a4 <main+0x300>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002296:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800229a:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a4:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a8:	60ac      	str	r4, [r5, #8]
  htim2.Instance = TIM2;
 80022aa:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = 10;
 80022ac:	60eb      	str	r3, [r5, #12]
  htim2.Init.Prescaler = 32000;
 80022ae:	f8c5 9004 	str.w	r9, [r5, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022b2:	f007 fca3 	bl	8009bfc <HAL_TIM_Base_Init>
 80022b6:	b108      	cbz	r0, 80022bc <main+0x218>
 80022b8:	b672      	cpsid	i
  while (1)
 80022ba:	e7fe      	b.n	80022ba <main+0x216>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022bc:	4628      	mov	r0, r5
 80022be:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c0:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022c4:	f007 fd2c 	bl	8009d20 <HAL_TIM_ConfigClockSource>
 80022c8:	b108      	cbz	r0, 80022ce <main+0x22a>
 80022ca:	b672      	cpsid	i
  while (1)
 80022cc:	e7fe      	b.n	80022cc <main+0x228>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ce:	4628      	mov	r0, r5
 80022d0:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d2:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022d6:	f007 fe5d 	bl	8009f94 <HAL_TIMEx_MasterConfigSynchronization>
 80022da:	b108      	cbz	r0, 80022e0 <main+0x23c>
 80022dc:	b672      	cpsid	i
  while (1)
 80022de:	e7fe      	b.n	80022de <main+0x23a>
  htim3.Init.Period = 500;
 80022e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  htim3.Instance = TIM3;
 80022e4:	4c30      	ldr	r4, [pc, #192]	; (80023a8 <main+0x304>)
 80022e6:	4b31      	ldr	r3, [pc, #196]	; (80023ac <main+0x308>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022e8:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80022ec:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f0:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f4:	e9c4 9001 	strd	r9, r0, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f8:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022fc:	4620      	mov	r0, r4
  htim3.Init.Period = 500;
 80022fe:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 8002300:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002302:	f007 fc7b 	bl	8009bfc <HAL_TIM_Base_Init>
 8002306:	b108      	cbz	r0, 800230c <main+0x268>
 8002308:	b672      	cpsid	i
  while (1)
 800230a:	e7fe      	b.n	800230a <main+0x266>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800230c:	4620      	mov	r0, r4
 800230e:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002310:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002314:	f007 fd04 	bl	8009d20 <HAL_TIM_ConfigClockSource>
 8002318:	b108      	cbz	r0, 800231e <main+0x27a>
 800231a:	b672      	cpsid	i
  while (1)
 800231c:	e7fe      	b.n	800231c <main+0x278>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231e:	2400      	movs	r4, #0
 8002320:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002322:	4821      	ldr	r0, [pc, #132]	; (80023a8 <main+0x304>)
 8002324:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002326:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800232a:	f007 fe33 	bl	8009f94 <HAL_TIMEx_MasterConfigSynchronization>
 800232e:	b108      	cbz	r0, 8002334 <main+0x290>
 8002330:	b672      	cpsid	i
  while (1)
 8002332:	e7fe      	b.n	8002332 <main+0x28e>
  htim11.Init.Prescaler = 32000;
 8002334:	f44f 46fa 	mov.w	r6, #32000	; 0x7d00
  htim11.Init.Period = 100;
 8002338:	f04f 0864 	mov.w	r8, #100	; 0x64
  htim11.Instance = TIM11;
 800233c:	4f1c      	ldr	r7, [pc, #112]	; (80023b0 <main+0x30c>)
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <main+0x310>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002340:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002344:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002348:	e9c7 0004 	strd	r0, r0, [r7, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234c:	60b8      	str	r0, [r7, #8]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800234e:	4638      	mov	r0, r7
  htim11.Instance = TIM11;
 8002350:	603b      	str	r3, [r7, #0]
  htim11.Init.Prescaler = 32000;
 8002352:	607e      	str	r6, [r7, #4]
  htim11.Init.Period = 100;
 8002354:	f8c7 800c 	str.w	r8, [r7, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002358:	f007 fc50 	bl	8009bfc <HAL_TIM_Base_Init>
 800235c:	b108      	cbz	r0, 8002362 <main+0x2be>
 800235e:	b672      	cpsid	i
  while (1)
 8002360:	e7fe      	b.n	8002360 <main+0x2bc>
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002362:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002364:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002368:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800236a:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800236c:	f007 fcd8 	bl	8009d20 <HAL_TIM_ConfigClockSource>
 8002370:	b310      	cbz	r0, 80023b8 <main+0x314>
 8002372:	b672      	cpsid	i
  while (1)
 8002374:	e7fe      	b.n	8002374 <main+0x2d0>
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40020000 	.word	0x40020000
 8002380:	20000404 	.word	0x20000404
 8002384:	40020800 	.word	0x40020800
 8002388:	40020400 	.word	0x40020400
 800238c:	40007400 	.word	0x40007400
 8002390:	200004ec 	.word	0x200004ec
 8002394:	40005400 	.word	0x40005400
 8002398:	000186a0 	.word	0x000186a0
 800239c:	20000680 	.word	0x20000680
 80023a0:	40013800 	.word	0x40013800
 80023a4:	200005c0 	.word	0x200005c0
 80023a8:	20000600 	.word	0x20000600
 80023ac:	40000400 	.word	0x40000400
 80023b0:	20000580 	.word	0x20000580
 80023b4:	40011000 	.word	0x40011000
  htim9.Instance = TIM9;
 80023b8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002460 <main+0x3bc>
 80023bc:	4b29      	ldr	r3, [pc, #164]	; (8002464 <main+0x3c0>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023be:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80023c2:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c6:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ca:	e9c9 6001 	strd	r6, r0, [r9, #4]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ce:	e9c9 0004 	strd	r0, r0, [r9, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80023d2:	4648      	mov	r0, r9
  htim9.Init.Period = 100;
 80023d4:	f8c9 800c 	str.w	r8, [r9, #12]
  htim9.Instance = TIM9;
 80023d8:	f8c9 3000 	str.w	r3, [r9]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80023dc:	f007 fc0e 	bl	8009bfc <HAL_TIM_Base_Init>
 80023e0:	b108      	cbz	r0, 80023e6 <main+0x342>
 80023e2:	b672      	cpsid	i
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <main+0x340>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80023e6:	4648      	mov	r0, r9
 80023e8:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ea:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80023ec:	f007 fc98 	bl	8009d20 <HAL_TIM_ConfigClockSource>
 80023f0:	b108      	cbz	r0, 80023f6 <main+0x352>
 80023f2:	b672      	cpsid	i
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <main+0x350>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80023f6:	4648      	mov	r0, r9
 80023f8:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fa:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80023fe:	f007 fdc9 	bl	8009f94 <HAL_TIMEx_MasterConfigSynchronization>
 8002402:	b108      	cbz	r0, 8002408 <main+0x364>
 8002404:	b672      	cpsid	i
  while (1)
 8002406:	e7fe      	b.n	8002406 <main+0x362>
  htim10.Init.Period = 10;
 8002408:	220a      	movs	r2, #10
  htim10.Instance = TIM10;
 800240a:	4c17      	ldr	r4, [pc, #92]	; (8002468 <main+0x3c4>)
 800240c:	4b17      	ldr	r3, [pc, #92]	; (800246c <main+0x3c8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240e:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002412:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002416:	e9c4 0004 	strd	r0, r0, [r4, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241a:	60a0      	str	r0, [r4, #8]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800241c:	4620      	mov	r0, r4
  htim10.Init.Prescaler = 32000;
 800241e:	6066      	str	r6, [r4, #4]
  htim10.Instance = TIM10;
 8002420:	6023      	str	r3, [r4, #0]
  htim10.Init.Period = 10;
 8002422:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002424:	f007 fbea 	bl	8009bfc <HAL_TIM_Base_Init>
 8002428:	b108      	cbz	r0, 800242e <main+0x38a>
 800242a:	b672      	cpsid	i
  while (1)
 800242c:	e7fe      	b.n	800242c <main+0x388>
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 800242e:	4620      	mov	r0, r4
 8002430:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002432:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002434:	f007 fc74 	bl	8009d20 <HAL_TIM_ConfigClockSource>
 8002438:	b108      	cbz	r0, 800243e <main+0x39a>
 800243a:	b672      	cpsid	i
  while (1)
 800243c:	e7fe      	b.n	800243c <main+0x398>
  volatile float error = 0;
 800243e:	2500      	movs	r5, #0
  ourInit();
 8002440:	f7ff fd5a 	bl	8001ef8 <ourInit>
  volatile float error = 0;
 8002444:	4e0a      	ldr	r6, [pc, #40]	; (8002470 <main+0x3cc>)
 8002446:	9503      	str	r5, [sp, #12]
  volatile float derivative = 0;
 8002448:	4c0a      	ldr	r4, [pc, #40]	; (8002474 <main+0x3d0>)
 800244a:	9504      	str	r5, [sp, #16]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800244c:	f8df a028 	ldr.w	sl, [pc, #40]	; 8002478 <main+0x3d4>
  volatile float integral = 0;
 8002450:	9505      	str	r5, [sp, #20]
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8002452:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800247c <main+0x3d8>
  volatile float error_previous = 0;
 8002456:	9506      	str	r5, [sp, #24]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002458:	4f09      	ldr	r7, [pc, #36]	; (8002480 <main+0x3dc>)
  volatile float correction = 0;
 800245a:	950c      	str	r5, [sp, #48]	; 0x30
 800245c:	e057      	b.n	800250e <main+0x46a>
 800245e:	bf00      	nop
 8002460:	20000640 	.word	0x20000640
 8002464:	40010800 	.word	0x40010800
 8002468:	20000540 	.word	0x20000540
 800246c:	40010c00 	.word	0x40010c00
 8002470:	20000388 	.word	0x20000388
 8002474:	20000820 	.word	0x20000820
 8002478:	40400000 	.word	0x40400000
 800247c:	457ff000 	.word	0x457ff000
 8002480:	20000404 	.word	0x20000404
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 8002484:	8833      	ldrh	r3, [r6, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b04      	cmp	r3, #4
 800248a:	f240 81ac 	bls.w	80027e6 <main+0x742>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 800248e:	2200      	movs	r2, #0
 8002490:	2140      	movs	r1, #64	; 0x40
 8002492:	48a6      	ldr	r0, [pc, #664]	; (800272c <main+0x688>)
 8002494:	f005 fe3e 	bl	8008114 <HAL_GPIO_WritePin>
	  update_ADC_watchdog(amp_set_main);
 8002498:	4ba5      	ldr	r3, [pc, #660]	; (8002730 <main+0x68c>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800249a:	49a6      	ldr	r1, [pc, #664]	; (8002734 <main+0x690>)
	  update_ADC_watchdog(amp_set_main);
 800249c:	6818      	ldr	r0, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800249e:	8933      	ldrh	r3, [r6, #8]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	9300      	str	r3, [sp, #0]
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80024a4:	f7fe fc66 	bl	8000d74 <__aeabi_fmul>
 80024a8:	49a3      	ldr	r1, [pc, #652]	; (8002738 <main+0x694>)
 80024aa:	f7fe fc63 	bl	8000d74 <__aeabi_fmul>
 80024ae:	4641      	mov	r1, r8
 80024b0:	f7fe fc60 	bl	8000d74 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 80024b4:	4ba1      	ldr	r3, [pc, #644]	; (800273c <main+0x698>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80024b6:	4681      	mov	r9, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 80024b8:	681a      	ldr	r2, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80024ba:	8810      	ldrh	r0, [r2, #0]
 80024bc:	f7fe fc02 	bl	8000cc4 <__aeabi_ui2f>
 80024c0:	9b00      	ldr	r3, [sp, #0]
 80024c2:	4683      	mov	fp, r0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe fbfd 	bl	8000cc4 <__aeabi_ui2f>
 80024ca:	4601      	mov	r1, r0
 80024cc:	4658      	mov	r0, fp
 80024ce:	f7fe fd05 	bl	8000edc <__aeabi_fdiv>
 80024d2:	4651      	mov	r1, sl
 80024d4:	f7fe fc4e 	bl	8000d74 <__aeabi_fmul>
 80024d8:	4601      	mov	r1, r0
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80024da:	4648      	mov	r0, r9
 80024dc:	f7fe fcfe 	bl	8000edc <__aeabi_fdiv>
 80024e0:	f7fe fe34 	bl	800114c <__aeabi_f2uiz>
	if(amp >= 4095){
 80024e4:	f640 72fe 	movw	r2, #4094	; 0xffe
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80024e8:	b283      	uxth	r3, r0
 80024ea:	f8ad 300a 	strh.w	r3, [sp, #10]
	if(amp >= 4095){
 80024ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
	  HAL_Delay(1);
 80024f2:	2001      	movs	r0, #1
	if(amp >= 4095){
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4293      	cmp	r3, r2
		ADC1->HTR = 4095;
 80024f8:	bf8c      	ite	hi
 80024fa:	f640 73ff 	movwhi	r3, #4095	; 0xfff
		ADC1->HTR = amp;
 80024fe:	f8bd 300a 	ldrhls.w	r3, [sp, #10]
 8002502:	4a8f      	ldr	r2, [pc, #572]	; (8002740 <main+0x69c>)
 8002504:	bf98      	it	ls
 8002506:	b29b      	uxthls	r3, r3
 8002508:	6293      	str	r3, [r2, #40]	; 0x28
	  HAL_Delay(1);
 800250a:	f004 fdd1 	bl	80070b0 <HAL_Delay>
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 800250e:	4b8b      	ldr	r3, [pc, #556]	; (800273c <main+0x698>)
 8002510:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002512:	8818      	ldrh	r0, [r3, #0]
 8002514:	f7fe fbd6 	bl	8000cc4 <__aeabi_ui2f>
 8002518:	4681      	mov	r9, r0
 800251a:	8930      	ldrh	r0, [r6, #8]
 800251c:	b280      	uxth	r0, r0
 800251e:	f7fe fbd1 	bl	8000cc4 <__aeabi_ui2f>
 8002522:	4601      	mov	r1, r0
 8002524:	4648      	mov	r0, r9
 8002526:	f7fe fcd9 	bl	8000edc <__aeabi_fdiv>
 800252a:	4651      	mov	r1, sl
 800252c:	f7fe fc22 	bl	8000d74 <__aeabi_fmul>
 8002530:	4683      	mov	fp, r0
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8002532:	88b0      	ldrh	r0, [r6, #4]
 8002534:	8932      	ldrh	r2, [r6, #8]
 8002536:	b280      	uxth	r0, r0
 8002538:	b292      	uxth	r2, r2
 800253a:	9200      	str	r2, [sp, #0]
 800253c:	f7fe fbc2 	bl	8000cc4 <__aeabi_ui2f>
 8002540:	4651      	mov	r1, sl
 8002542:	f7fe fc17 	bl	8000d74 <__aeabi_fmul>
 8002546:	4649      	mov	r1, r9
 8002548:	f7fe fc14 	bl	8000d74 <__aeabi_fmul>
 800254c:	4603      	mov	r3, r0
 800254e:	9a00      	ldr	r2, [sp, #0]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	4610      	mov	r0, r2
 8002554:	f7fe fbb6 	bl	8000cc4 <__aeabi_ui2f>
 8002558:	4641      	mov	r1, r8
 800255a:	f7fe fc0b 	bl	8000d74 <__aeabi_fmul>
 800255e:	9b00      	ldr	r3, [sp, #0]
 8002560:	4601      	mov	r1, r0
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fcba 	bl	8000edc <__aeabi_fdiv>
 8002568:	4973      	ldr	r1, [pc, #460]	; (8002738 <main+0x694>)
 800256a:	f7fe fcb7 	bl	8000edc <__aeabi_fdiv>
 800256e:	4971      	ldr	r1, [pc, #452]	; (8002734 <main+0x690>)
 8002570:	f7fe fcb4 	bl	8000edc <__aeabi_fdiv>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 8002574:	4629      	mov	r1, r5
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8002576:	9000      	str	r0, [sp, #0]
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 8002578:	f7fe fdae 	bl	80010d8 <__aeabi_fcmpge>
 800257c:	9b00      	ldr	r3, [sp, #0]
 800257e:	b900      	cbnz	r0, 8002582 <main+0x4de>
 8002580:	462b      	mov	r3, r5
 8002582:	4a70      	ldr	r2, [pc, #448]	; (8002744 <main+0x6a0>)
 8002584:	6013      	str	r3, [r2, #0]
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8002586:	8830      	ldrh	r0, [r6, #0]
 8002588:	8932      	ldrh	r2, [r6, #8]
 800258a:	b280      	uxth	r0, r0
 800258c:	b292      	uxth	r2, r2
 800258e:	9200      	str	r2, [sp, #0]
 8002590:	f7fe fb98 	bl	8000cc4 <__aeabi_ui2f>
 8002594:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002598:	f7fe fbec 	bl	8000d74 <__aeabi_fmul>
 800259c:	4651      	mov	r1, sl
 800259e:	f7fe fbe9 	bl	8000d74 <__aeabi_fmul>
 80025a2:	4649      	mov	r1, r9
 80025a4:	f7fe fbe6 	bl	8000d74 <__aeabi_fmul>
 80025a8:	4603      	mov	r3, r0
 80025aa:	9a00      	ldr	r2, [sp, #0]
 80025ac:	4610      	mov	r0, r2
 80025ae:	4a65      	ldr	r2, [pc, #404]	; (8002744 <main+0x6a0>)
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	e9cd 3200 	strd	r3, r2, [sp]
 80025b6:	f7fe fb85 	bl	8000cc4 <__aeabi_ui2f>
 80025ba:	4641      	mov	r1, r8
 80025bc:	f7fe fbda 	bl	8000d74 <__aeabi_fmul>
 80025c0:	9b00      	ldr	r3, [sp, #0]
 80025c2:	4601      	mov	r1, r0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fc89 	bl	8000edc <__aeabi_fdiv>
 80025ca:	4603      	mov	r3, r0
 80025cc:	9a01      	ldr	r2, [sp, #4]
 80025ce:	495e      	ldr	r1, [pc, #376]	; (8002748 <main+0x6a4>)
 80025d0:	4610      	mov	r0, r2
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	f7fe fbce 	bl	8000d74 <__aeabi_fmul>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	4601      	mov	r1, r0
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fabf 	bl	8000b60 <__aeabi_fsub>
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 80025e2:	4629      	mov	r1, r5
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80025e4:	9000      	str	r0, [sp, #0]
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 80025e6:	f7fe fd77 	bl	80010d8 <__aeabi_fcmpge>
 80025ea:	9b00      	ldr	r3, [sp, #0]
 80025ec:	b900      	cbnz	r0, 80025f0 <main+0x54c>
 80025ee:	462b      	mov	r3, r5
 80025f0:	4a56      	ldr	r2, [pc, #344]	; (800274c <main+0x6a8>)
 80025f2:	6013      	str	r3, [r2, #0]
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80025f4:	8870      	ldrh	r0, [r6, #2]
 80025f6:	8932      	ldrh	r2, [r6, #8]
 80025f8:	b280      	uxth	r0, r0
 80025fa:	b292      	uxth	r2, r2
 80025fc:	9200      	str	r2, [sp, #0]
 80025fe:	f7fe fb61 	bl	8000cc4 <__aeabi_ui2f>
 8002602:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002606:	f7fe fbb5 	bl	8000d74 <__aeabi_fmul>
 800260a:	4651      	mov	r1, sl
 800260c:	f7fe fbb2 	bl	8000d74 <__aeabi_fmul>
 8002610:	4649      	mov	r1, r9
 8002612:	f7fe fbaf 	bl	8000d74 <__aeabi_fmul>
 8002616:	4603      	mov	r3, r0
 8002618:	9a00      	ldr	r2, [sp, #0]
 800261a:	4610      	mov	r0, r2
 800261c:	4a49      	ldr	r2, [pc, #292]	; (8002744 <main+0x6a0>)
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	e9cd 3200 	strd	r3, r2, [sp]
 8002624:	f7fe fb4e 	bl	8000cc4 <__aeabi_ui2f>
 8002628:	4641      	mov	r1, r8
 800262a:	f7fe fba3 	bl	8000d74 <__aeabi_fmul>
 800262e:	9b00      	ldr	r3, [sp, #0]
 8002630:	4601      	mov	r1, r0
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fc52 	bl	8000edc <__aeabi_fdiv>
 8002638:	4603      	mov	r3, r0
 800263a:	9a01      	ldr	r2, [sp, #4]
 800263c:	4942      	ldr	r1, [pc, #264]	; (8002748 <main+0x6a4>)
 800263e:	4610      	mov	r0, r2
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	f7fe fb97 	bl	8000d74 <__aeabi_fmul>
 8002646:	9b00      	ldr	r3, [sp, #0]
 8002648:	4601      	mov	r1, r0
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fa88 	bl	8000b60 <__aeabi_fsub>
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 8002650:	4629      	mov	r1, r5
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8002652:	9000      	str	r0, [sp, #0]
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 8002654:	f7fe fd40 	bl	80010d8 <__aeabi_fcmpge>
 8002658:	9b00      	ldr	r3, [sp, #0]
 800265a:	b900      	cbnz	r0, 800265e <main+0x5ba>
 800265c:	462b      	mov	r3, r5
 800265e:	4a3c      	ldr	r2, [pc, #240]	; (8002750 <main+0x6ac>)
 8002660:	6013      	str	r3, [r2, #0]
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 8002662:	88f0      	ldrh	r0, [r6, #6]
 8002664:	8933      	ldrh	r3, [r6, #8]
 8002666:	b280      	uxth	r0, r0
 8002668:	b29b      	uxth	r3, r3
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f7fe fb2a 	bl	8000cc4 <__aeabi_ui2f>
 8002670:	4938      	ldr	r1, [pc, #224]	; (8002754 <main+0x6b0>)
 8002672:	f7fe fb7f 	bl	8000d74 <__aeabi_fmul>
 8002676:	4651      	mov	r1, sl
 8002678:	f7fe fb7c 	bl	8000d74 <__aeabi_fmul>
 800267c:	4649      	mov	r1, r9
 800267e:	f7fe fb79 	bl	8000d74 <__aeabi_fmul>
 8002682:	9b00      	ldr	r3, [sp, #0]
 8002684:	4681      	mov	r9, r0
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fb1c 	bl	8000cc4 <__aeabi_ui2f>
 800268c:	4641      	mov	r1, r8
 800268e:	f7fe fb71 	bl	8000d74 <__aeabi_fmul>
 8002692:	4601      	mov	r1, r0
 8002694:	4648      	mov	r0, r9
 8002696:	f7fe fc21 	bl	8000edc <__aeabi_fdiv>
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 800269a:	4629      	mov	r1, r5
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 800269c:	4681      	mov	r9, r0
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 800269e:	f7fe fd1b 	bl	80010d8 <__aeabi_fcmpge>
 80026a2:	b900      	cbnz	r0, 80026a6 <main+0x602>
 80026a4:	46a9      	mov	r9, r5
 80026a6:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <main+0x6b4>)
		  if(lin_num > volt_set_main + margin){
 80026a8:	492c      	ldr	r1, [pc, #176]	; (800275c <main+0x6b8>)
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 80026aa:	f8c3 9000 	str.w	r9, [r3]
	  if(chstat_main == 1){
 80026ae:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <main+0x6bc>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
		  if(lin_num > volt_set_main + margin){
 80026b4:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <main+0x6c0>)
 80026b6:	6818      	ldr	r0, [r3, #0]
	  if(chstat_main == 1){
 80026b8:	f000 80c6 	beq.w	8002848 <main+0x7a4>
		  if(op_num > volt_set_main + margin){
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <main+0x6a8>)
 80026be:	f8d3 9000 	ldr.w	r9, [r3]
 80026c2:	f7fe fa4f 	bl	8000b64 <__addsf3>
 80026c6:	4649      	mov	r1, r9
 80026c8:	f7fe fcf2 	bl	80010b0 <__aeabi_fcmplt>
 80026cc:	2800      	cmp	r0, #0
 80026ce:	f040 8090 	bne.w	80027f2 <main+0x74e>
		  else if(op_num < volt_set_main - margin){
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <main+0x6c0>)
 80026d4:	4921      	ldr	r1, [pc, #132]	; (800275c <main+0x6b8>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	4b1c      	ldr	r3, [pc, #112]	; (800274c <main+0x6a8>)
 80026da:	f8d3 9000 	ldr.w	r9, [r3]
 80026de:	f7fe fa3f 	bl	8000b60 <__aeabi_fsub>
 80026e2:	4649      	mov	r1, r9
 80026e4:	f7fe fd02 	bl	80010ec <__aeabi_fcmpgt>
 80026e8:	b180      	cbz	r0, 800270c <main+0x668>
			  if(v1 <= 4094){
 80026ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 80026ee:	8823      	ldrh	r3, [r4, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d803      	bhi.n	80026fe <main+0x65a>
				  v1++;
 80026f6:	8823      	ldrh	r3, [r4, #0]
 80026f8:	3301      	adds	r3, #1
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	8023      	strh	r3, [r4, #0]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80026fe:	2200      	movs	r2, #0
 8002700:	8823      	ldrh	r3, [r4, #0]
 8002702:	4638      	mov	r0, r7
 8002704:	4611      	mov	r1, r2
 8002706:	b29b      	uxth	r3, r3
 8002708:	f005 f98e 	bl	8007a28 <HAL_DAC_SetValue>
	  volatile float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)0.5))) * (float)4095 / (float)vddcalc);
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <main+0x6c0>)
 800270e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	f7fe fa26 	bl	8000b64 <__addsf3>
 8002718:	4913      	ldr	r1, [pc, #76]	; (8002768 <main+0x6c4>)
 800271a:	f7fe fb2b 	bl	8000d74 <__aeabi_fmul>
 800271e:	4601      	mov	r1, r0
 8002720:	4812      	ldr	r0, [pc, #72]	; (800276c <main+0x6c8>)
 8002722:	f7fe fa1d 	bl	8000b60 <__aeabi_fsub>
 8002726:	4641      	mov	r1, r8
 8002728:	e022      	b.n	8002770 <main+0x6cc>
 800272a:	bf00      	nop
 800272c:	40020000 	.word	0x40020000
 8002730:	20000398 	.word	0x20000398
 8002734:	3e19999a 	.word	0x3e19999a
 8002738:	41a00000 	.word	0x41a00000
 800273c:	20000010 	.word	0x20000010
 8002740:	40012400 	.word	0x40012400
 8002744:	200003a4 	.word	0x200003a4
 8002748:	3eb33333 	.word	0x3eb33333
 800274c:	200006d0 	.word	0x200006d0
 8002750:	200006c8 	.word	0x200006c8
 8002754:	40a00000 	.word	0x40a00000
 8002758:	20000718 	.word	0x20000718
 800275c:	3b03126f 	.word	0x3b03126f
 8002760:	200003a3 	.word	0x200003a3
 8002764:	20000828 	.word	0x20000828
 8002768:	3e75c28f 	.word	0x3e75c28f
 800276c:	40800b78 	.word	0x40800b78
 8002770:	f7fe fb00 	bl	8000d74 <__aeabi_fmul>
 8002774:	4659      	mov	r1, fp
 8002776:	f7fe fbb1 	bl	8000edc <__aeabi_fdiv>
 800277a:	900e      	str	r0, [sp, #56]	; 0x38
	  if(temp <= 0){
 800277c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800277e:	4629      	mov	r1, r5
 8002780:	f7fe fca0 	bl	80010c4 <__aeabi_fcmple>
 8002784:	2800      	cmp	r0, #0
 8002786:	d15b      	bne.n	8002840 <main+0x79c>
	  else if(temp >= 4095){
 8002788:	980e      	ldr	r0, [sp, #56]	; 0x38
 800278a:	4641      	mov	r1, r8
 800278c:	f7fe fca4 	bl	80010d8 <__aeabi_fcmpge>
 8002790:	2800      	cmp	r0, #0
 8002792:	d04e      	beq.n	8002832 <main+0x78e>
		  v2 = 4095;
 8002794:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002798:	4a33      	ldr	r2, [pc, #204]	; (8002868 <main+0x7c4>)
 800279a:	8013      	strh	r3, [r2, #0]
	  if(volt_set_main > volt_set_main_old){
 800279c:	4b33      	ldr	r3, [pc, #204]	; (800286c <main+0x7c8>)
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	4b33      	ldr	r3, [pc, #204]	; (8002870 <main+0x7cc>)
 80027a2:	6819      	ldr	r1, [r3, #0]
 80027a4:	f7fe fca2 	bl	80010ec <__aeabi_fcmpgt>
 80027a8:	4683      	mov	fp, r0
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d131      	bne.n	8002812 <main+0x76e>
	  else if(volt_set_main < volt_set_main_old){
 80027ae:	4b2f      	ldr	r3, [pc, #188]	; (800286c <main+0x7c8>)
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <main+0x7cc>)
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	f7fe fc7b 	bl	80010b0 <__aeabi_fcmplt>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80027ba:	8823      	ldrh	r3, [r4, #0]
	  else if(volt_set_main < volt_set_main_old){
 80027bc:	4681      	mov	r9, r0
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80027be:	b29b      	uxth	r3, r3
	  else if(volt_set_main < volt_set_main_old){
 80027c0:	b300      	cbz	r0, 8002804 <main+0x760>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80027c2:	465a      	mov	r2, fp
 80027c4:	4659      	mov	r1, fp
 80027c6:	4638      	mov	r0, r7
 80027c8:	f005 f92e 	bl	8007a28 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 80027cc:	465a      	mov	r2, fp
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 80027ce:	4b26      	ldr	r3, [pc, #152]	; (8002868 <main+0x7c4>)
 80027d0:	2110      	movs	r1, #16
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	4638      	mov	r0, r7
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f005 f926 	bl	8007a28 <HAL_DAC_SetValue>
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 80027dc:	4b25      	ldr	r3, [pc, #148]	; (8002874 <main+0x7d0>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	f43f ae4f 	beq.w	8002484 <main+0x3e0>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80027e6:	2201      	movs	r2, #1
 80027e8:	2140      	movs	r1, #64	; 0x40
 80027ea:	4823      	ldr	r0, [pc, #140]	; (8002878 <main+0x7d4>)
 80027ec:	f005 fc92 	bl	8008114 <HAL_GPIO_WritePin>
 80027f0:	e652      	b.n	8002498 <main+0x3f4>
			  if(v1 >= 1){
 80027f2:	8823      	ldrh	r3, [r4, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d081      	beq.n	80026fe <main+0x65a>
				  v1--;
 80027fa:	8823      	ldrh	r3, [r4, #0]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29b      	uxth	r3, r3
 8002800:	8023      	strh	r3, [r4, #0]
 8002802:	e77c      	b.n	80026fe <main+0x65a>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002804:	4602      	mov	r2, r0
 8002806:	4601      	mov	r1, r0
 8002808:	4638      	mov	r0, r7
 800280a:	f005 f90d 	bl	8007a28 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 800280e:	464a      	mov	r2, r9
 8002810:	e7dd      	b.n	80027ce <main+0x72a>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <main+0x7c4>)
 8002814:	2200      	movs	r2, #0
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	2110      	movs	r1, #16
 800281a:	4638      	mov	r0, r7
 800281c:	b29b      	uxth	r3, r3
 800281e:	f005 f903 	bl	8007a28 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002822:	2200      	movs	r2, #0
 8002824:	8823      	ldrh	r3, [r4, #0]
 8002826:	4638      	mov	r0, r7
 8002828:	4611      	mov	r1, r2
 800282a:	b29b      	uxth	r3, r3
 800282c:	f005 f8fc 	bl	8007a28 <HAL_DAC_SetValue>
 8002830:	e7d4      	b.n	80027dc <main+0x738>
		  v2 = (uint16_t)temp;
 8002832:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002834:	f7fe fc8a 	bl	800114c <__aeabi_f2uiz>
 8002838:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <main+0x7c4>)
 800283a:	b283      	uxth	r3, r0
 800283c:	8013      	strh	r3, [r2, #0]
 800283e:	e7ad      	b.n	800279c <main+0x6f8>
		  v2 = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	4a09      	ldr	r2, [pc, #36]	; (8002868 <main+0x7c4>)
 8002844:	8013      	strh	r3, [r2, #0]
 8002846:	e7a9      	b.n	800279c <main+0x6f8>
		  if(lin_num > volt_set_main + margin){
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <main+0x7d8>)
 800284a:	f8d3 9000 	ldr.w	r9, [r3]
 800284e:	f7fe f989 	bl	8000b64 <__addsf3>
 8002852:	4649      	mov	r1, r9
 8002854:	f7fe fc2c 	bl	80010b0 <__aeabi_fcmplt>
 8002858:	2800      	cmp	r0, #0
 800285a:	d1ca      	bne.n	80027f2 <main+0x74e>
		  else if(lin_num < volt_set_main - margin){
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <main+0x7c8>)
 800285e:	4908      	ldr	r1, [pc, #32]	; (8002880 <main+0x7dc>)
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <main+0x7d8>)
 8002864:	e739      	b.n	80026da <main+0x636>
 8002866:	bf00      	nop
 8002868:	20000822 	.word	0x20000822
 800286c:	20000828 	.word	0x20000828
 8002870:	2000082c 	.word	0x2000082c
 8002874:	200003a3 	.word	0x200003a3
 8002878:	40020000 	.word	0x40020000
 800287c:	200006c8 	.word	0x200006c8
 8002880:	3b03126f 	.word	0x3b03126f

08002884 <lcd_update_voltage>:
void lcd_update_voltage(uint8_t channel, float num){
 8002884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002886:	4605      	mov	r5, r0
 8002888:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.2f", num);
 800288a:	4608      	mov	r0, r1
 800288c:	f7fd fde4 	bl	8000458 <__aeabi_f2d>
 8002890:	4606      	mov	r6, r0
 8002892:	460f      	mov	r7, r1
 8002894:	4a9a      	ldr	r2, [pc, #616]	; (8002b00 <lcd_update_voltage+0x27c>)
 8002896:	2106      	movs	r1, #6
 8002898:	e9cd 6700 	strd	r6, r7, [sp]
 800289c:	a804      	add	r0, sp, #16
 800289e:	f00a fa05 	bl	800ccac <sniprintf>
	if(channel == 1){
 80028a2:	2d01      	cmp	r5, #1
 80028a4:	d009      	beq.n	80028ba <lcd_update_voltage+0x36>
	else if(channel == 2){
 80028a6:	2d02      	cmp	r5, #2
 80028a8:	f000 80cb 	beq.w	8002a42 <lcd_update_voltage+0x1be>
	else if(channel == 3){
 80028ac:	2d03      	cmp	r5, #3
 80028ae:	f000 8135 	beq.w	8002b1c <lcd_update_voltage+0x298>
	else if(channel == 4){
 80028b2:	2d04      	cmp	r5, #4
 80028b4:	d068      	beq.n	8002988 <lcd_update_voltage+0x104>
}
 80028b6:	b007      	add	sp, #28
 80028b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028ba:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80028bc:	4a91      	ldr	r2, [pc, #580]	; (8002b04 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028be:	4892      	ldr	r0, [pc, #584]	; (8002b08 <lcd_update_voltage+0x284>)
 80028c0:	ac03      	add	r4, sp, #12
 80028c2:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80028c4:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028c6:	214e      	movs	r1, #78	; 0x4e
 80028c8:	4622      	mov	r2, r4
 80028ca:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028cc:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028ce:	f005 fd03 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80028d2:	2320      	movs	r3, #32
 80028d4:	4d8d      	ldr	r5, [pc, #564]	; (8002b0c <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 80028d6:	011a      	lsls	r2, r3, #4
 80028d8:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80028da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028de:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80028e2:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80028e6:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80028ea:	f043 0309 	orr.w	r3, r3, #9
 80028ee:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80028f2:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028f6:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80028f8:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028fc:	4622      	mov	r2, r4
 80028fe:	214e      	movs	r1, #78	; 0x4e
 8002900:	4638      	mov	r0, r7
 8002902:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002904:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002908:	f005 fce6 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800290c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1e0      	bne.n	80028d6 <lcd_update_voltage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002914:	4a7b      	ldr	r2, [pc, #492]	; (8002b04 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002916:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002918:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800291a:	214e      	movs	r1, #78	; 0x4e
 800291c:	4622      	mov	r2, r4
 800291e:	487a      	ldr	r0, [pc, #488]	; (8002b08 <lcd_update_voltage+0x284>)
 8002920:	9600      	str	r6, [sp, #0]
 8002922:	f005 fcd9 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002926:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800292a:	b30b      	cbz	r3, 8002970 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800292c:	2764      	movs	r7, #100	; 0x64
 800292e:	4e76      	ldr	r6, [pc, #472]	; (8002b08 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002930:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002932:	011a      	lsls	r2, r3, #4
 8002934:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800293a:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800293e:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002942:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002946:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800294a:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800294c:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002950:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002954:	4622      	mov	r2, r4
 8002956:	214e      	movs	r1, #78	; 0x4e
 8002958:	4630      	mov	r0, r6
 800295a:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800295c:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002960:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002964:	f005 fcb8 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002968:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e0      	bne.n	8002932 <lcd_update_voltage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002970:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002972:	4867      	ldr	r0, [pc, #412]	; (8002b10 <lcd_update_voltage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002974:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002976:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002978:	4622      	mov	r2, r4
 800297a:	214e      	movs	r1, #78	; 0x4e
 800297c:	9500      	str	r5, [sp, #0]
 800297e:	4862      	ldr	r0, [pc, #392]	; (8002b08 <lcd_update_voltage+0x284>)
 8002980:	f005 fcaa 	bl	80082d8 <HAL_I2C_Master_Transmit>
}
 8002984:	b007      	add	sp, #28
 8002986:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002988:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800298a:	4a62      	ldr	r2, [pc, #392]	; (8002b14 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800298c:	485e      	ldr	r0, [pc, #376]	; (8002b08 <lcd_update_voltage+0x284>)
 800298e:	ac03      	add	r4, sp, #12
 8002990:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002992:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002994:	214e      	movs	r1, #78	; 0x4e
 8002996:	4622      	mov	r2, r4
 8002998:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800299a:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800299c:	f005 fc9c 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80029a0:	2320      	movs	r3, #32
 80029a2:	4d5a      	ldr	r5, [pc, #360]	; (8002b0c <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 80029a4:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80029a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80029aa:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80029ae:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80029b0:	f043 0309 	orr.w	r3, r3, #9
 80029b4:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80029b8:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80029bc:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80029c0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80029c4:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80029c8:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029cc:	2304      	movs	r3, #4
 80029ce:	4622      	mov	r2, r4
 80029d0:	214e      	movs	r1, #78	; 0x4e
 80029d2:	4638      	mov	r0, r7
 80029d4:	9600      	str	r6, [sp, #0]
 80029d6:	f005 fc7f 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80029da:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e0      	bne.n	80029a4 <lcd_update_voltage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029e2:	4a4c      	ldr	r2, [pc, #304]	; (8002b14 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029e4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029e6:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029e8:	214e      	movs	r1, #78	; 0x4e
 80029ea:	4622      	mov	r2, r4
 80029ec:	4846      	ldr	r0, [pc, #280]	; (8002b08 <lcd_update_voltage+0x284>)
 80029ee:	9600      	str	r6, [sp, #0]
 80029f0:	f005 fc72 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80029f4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0b9      	beq.n	8002970 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029fc:	2764      	movs	r7, #100	; 0x64
 80029fe:	4e42      	ldr	r6, [pc, #264]	; (8002b08 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002a00:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002a02:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a08:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002a0c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a0e:	f043 0309 	orr.w	r3, r3, #9
 8002a12:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a16:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a1a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a1e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a22:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a26:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	4622      	mov	r2, r4
 8002a2e:	214e      	movs	r1, #78	; 0x4e
 8002a30:	4630      	mov	r0, r6
 8002a32:	9700      	str	r7, [sp, #0]
 8002a34:	f005 fc50 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a38:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e0      	bne.n	8002a02 <lcd_update_voltage+0x17e>
 8002a40:	e796      	b.n	8002970 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a42:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a44:	4a34      	ldr	r2, [pc, #208]	; (8002b18 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a46:	4830      	ldr	r0, [pc, #192]	; (8002b08 <lcd_update_voltage+0x284>)
 8002a48:	ac03      	add	r4, sp, #12
 8002a4a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a4c:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a4e:	214e      	movs	r1, #78	; 0x4e
 8002a50:	4622      	mov	r2, r4
 8002a52:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a54:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a56:	f005 fc3f 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	4d2b      	ldr	r5, [pc, #172]	; (8002b0c <lcd_update_voltage+0x288>)
	data_u = (data&0xf0);
 8002a5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a66:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a6a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a6e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a72:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a76:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a7a:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a7e:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a82:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a84:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a88:	214e      	movs	r1, #78	; 0x4e
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	4638      	mov	r0, r7
 8002a8e:	9600      	str	r6, [sp, #0]
 8002a90:	f005 fc22 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a94:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e0      	bne.n	8002a5e <lcd_update_voltage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a9e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002aa0:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002aa2:	214e      	movs	r1, #78	; 0x4e
 8002aa4:	4622      	mov	r2, r4
 8002aa6:	4818      	ldr	r0, [pc, #96]	; (8002b08 <lcd_update_voltage+0x284>)
 8002aa8:	9600      	str	r6, [sp, #0]
 8002aaa:	f005 fc15 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002aae:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f43f af5c 	beq.w	8002970 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ab8:	2764      	movs	r7, #100	; 0x64
 8002aba:	4e13      	ldr	r6, [pc, #76]	; (8002b08 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002abc:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002abe:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002ac4:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ac6:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002aca:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ace:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ad2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ad6:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ada:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ade:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ae2:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ae4:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ae8:	4622      	mov	r2, r4
 8002aea:	214e      	movs	r1, #78	; 0x4e
 8002aec:	4630      	mov	r0, r6
 8002aee:	9700      	str	r7, [sp, #0]
 8002af0:	f005 fbf2 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002af4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e0      	bne.n	8002abe <lcd_update_voltage+0x23a>
 8002afc:	e738      	b.n	8002970 <lcd_update_voltage+0xec>
 8002afe:	bf00      	nop
 8002b00:	0800f23c 	.word	0x0800f23c
 8002b04:	383c888c 	.word	0x383c888c
 8002b08:	200004ec 	.word	0x200004ec
 8002b0c:	0800f234 	.word	0x0800f234
 8002b10:	696d595d 	.word	0x696d595d
 8002b14:	282ca8ac 	.word	0x282ca8ac
 8002b18:	e8ec888c 	.word	0xe8ec888c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b1c:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b1e:	4a2e      	ldr	r2, [pc, #184]	; (8002bd8 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b20:	482e      	ldr	r0, [pc, #184]	; (8002bdc <lcd_update_voltage+0x358>)
 8002b22:	ac03      	add	r4, sp, #12
 8002b24:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b26:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b28:	214e      	movs	r1, #78	; 0x4e
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b2e:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b30:	f005 fbd2 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b34:	2320      	movs	r3, #32
 8002b36:	4d2a      	ldr	r5, [pc, #168]	; (8002be0 <lcd_update_voltage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8002b38:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b3e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002b42:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002b44:	f043 0309 	orr.w	r3, r3, #9
 8002b48:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b4c:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b50:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b54:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b58:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b5c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b60:	2304      	movs	r3, #4
 8002b62:	4622      	mov	r2, r4
 8002b64:	214e      	movs	r1, #78	; 0x4e
 8002b66:	4638      	mov	r0, r7
 8002b68:	9600      	str	r6, [sp, #0]
 8002b6a:	f005 fbb5 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b6e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1e0      	bne.n	8002b38 <lcd_update_voltage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b76:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b78:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b7a:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b7c:	214e      	movs	r1, #78	; 0x4e
 8002b7e:	4622      	mov	r2, r4
 8002b80:	4816      	ldr	r0, [pc, #88]	; (8002bdc <lcd_update_voltage+0x358>)
 8002b82:	9600      	str	r6, [sp, #0]
 8002b84:	f005 fba8 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b88:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f43f aeef 	beq.w	8002970 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b92:	2764      	movs	r7, #100	; 0x64
 8002b94:	4e11      	ldr	r6, [pc, #68]	; (8002bdc <lcd_update_voltage+0x358>)
	while (*str) lcd_send_data (*str++);
 8002b96:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 8002b98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ba0:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ba4:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ba8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002bac:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002bb0:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002bb4:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002bb8:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bbc:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002bbe:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bc2:	214e      	movs	r1, #78	; 0x4e
 8002bc4:	4622      	mov	r2, r4
 8002bc6:	4630      	mov	r0, r6
 8002bc8:	9700      	str	r7, [sp, #0]
 8002bca:	f005 fb85 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002bce:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e0      	bne.n	8002b98 <lcd_update_voltage+0x314>
 8002bd6:	e6cb      	b.n	8002970 <lcd_update_voltage+0xec>
 8002bd8:	787c989c 	.word	0x787c989c
 8002bdc:	200004ec 	.word	0x200004ec
 8002be0:	0800f234 	.word	0x0800f234

08002be4 <lcd_update_amperage>:
void lcd_update_amperage(uint8_t channel, float num){
 8002be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be6:	4605      	mov	r5, r0
 8002be8:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.3f", num);
 8002bea:	4608      	mov	r0, r1
 8002bec:	f7fd fc34 	bl	8000458 <__aeabi_f2d>
 8002bf0:	4606      	mov	r6, r0
 8002bf2:	460f      	mov	r7, r1
 8002bf4:	4a9a      	ldr	r2, [pc, #616]	; (8002e60 <lcd_update_amperage+0x27c>)
 8002bf6:	2106      	movs	r1, #6
 8002bf8:	e9cd 6700 	strd	r6, r7, [sp]
 8002bfc:	a804      	add	r0, sp, #16
 8002bfe:	f00a f855 	bl	800ccac <sniprintf>
	if(channel == 1){
 8002c02:	2d01      	cmp	r5, #1
 8002c04:	d009      	beq.n	8002c1a <lcd_update_amperage+0x36>
	else if(channel == 2){
 8002c06:	2d02      	cmp	r5, #2
 8002c08:	f000 80cb 	beq.w	8002da2 <lcd_update_amperage+0x1be>
	else if(channel == 3){
 8002c0c:	2d03      	cmp	r5, #3
 8002c0e:	f000 8135 	beq.w	8002e7c <lcd_update_amperage+0x298>
	else if(channel == 4){
 8002c12:	2d04      	cmp	r5, #4
 8002c14:	d068      	beq.n	8002ce8 <lcd_update_amperage+0x104>
}
 8002c16:	b007      	add	sp, #28
 8002c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c1a:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c1c:	4a91      	ldr	r2, [pc, #580]	; (8002e64 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c1e:	4892      	ldr	r0, [pc, #584]	; (8002e68 <lcd_update_amperage+0x284>)
 8002c20:	ac03      	add	r4, sp, #12
 8002c22:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c24:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c26:	214e      	movs	r1, #78	; 0x4e
 8002c28:	4622      	mov	r2, r4
 8002c2a:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c2c:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c2e:	f005 fb53 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c32:	2320      	movs	r3, #32
 8002c34:	4d8d      	ldr	r5, [pc, #564]	; (8002e6c <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002c36:	011a      	lsls	r2, r3, #4
 8002c38:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c3e:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c42:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c46:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c4a:	f043 0309 	orr.w	r3, r3, #9
 8002c4e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c52:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c56:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c58:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c5c:	4622      	mov	r2, r4
 8002c5e:	214e      	movs	r1, #78	; 0x4e
 8002c60:	4638      	mov	r0, r7
 8002c62:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c64:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c68:	f005 fb36 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c6c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e0      	bne.n	8002c36 <lcd_update_amperage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c74:	4a7b      	ldr	r2, [pc, #492]	; (8002e64 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c76:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c78:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c7a:	214e      	movs	r1, #78	; 0x4e
 8002c7c:	4622      	mov	r2, r4
 8002c7e:	487a      	ldr	r0, [pc, #488]	; (8002e68 <lcd_update_amperage+0x284>)
 8002c80:	9600      	str	r6, [sp, #0]
 8002c82:	f005 fb29 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c86:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002c8a:	b30b      	cbz	r3, 8002cd0 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c8c:	2764      	movs	r7, #100	; 0x64
 8002c8e:	4e76      	ldr	r6, [pc, #472]	; (8002e68 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002c90:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002c92:	011a      	lsls	r2, r3, #4
 8002c94:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c9a:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c9e:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ca2:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ca6:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002caa:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002cac:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002cb0:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	214e      	movs	r1, #78	; 0x4e
 8002cb8:	4630      	mov	r0, r6
 8002cba:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cbc:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002cc0:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cc4:	f005 fb08 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002cc8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e0      	bne.n	8002c92 <lcd_update_amperage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cd0:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cd2:	4867      	ldr	r0, [pc, #412]	; (8002e70 <lcd_update_amperage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cd4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cd6:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cd8:	4622      	mov	r2, r4
 8002cda:	214e      	movs	r1, #78	; 0x4e
 8002cdc:	9500      	str	r5, [sp, #0]
 8002cde:	4862      	ldr	r0, [pc, #392]	; (8002e68 <lcd_update_amperage+0x284>)
 8002ce0:	f005 fafa 	bl	80082d8 <HAL_I2C_Master_Transmit>
}
 8002ce4:	b007      	add	sp, #28
 8002ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ce8:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002cea:	4a62      	ldr	r2, [pc, #392]	; (8002e74 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cec:	485e      	ldr	r0, [pc, #376]	; (8002e68 <lcd_update_amperage+0x284>)
 8002cee:	ac03      	add	r4, sp, #12
 8002cf0:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002cf2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cf4:	214e      	movs	r1, #78	; 0x4e
 8002cf6:	4622      	mov	r2, r4
 8002cf8:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cfa:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cfc:	f005 faec 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d00:	2320      	movs	r3, #32
 8002d02:	4d5a      	ldr	r5, [pc, #360]	; (8002e6c <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002d04:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d0a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002d0e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d10:	f043 0309 	orr.w	r3, r3, #9
 8002d14:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d18:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d1c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d20:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d24:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d28:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	4622      	mov	r2, r4
 8002d30:	214e      	movs	r1, #78	; 0x4e
 8002d32:	4638      	mov	r0, r7
 8002d34:	9600      	str	r6, [sp, #0]
 8002d36:	f005 facf 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d3a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1e0      	bne.n	8002d04 <lcd_update_amperage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d42:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d44:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d46:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d48:	214e      	movs	r1, #78	; 0x4e
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	4846      	ldr	r0, [pc, #280]	; (8002e68 <lcd_update_amperage+0x284>)
 8002d4e:	9600      	str	r6, [sp, #0]
 8002d50:	f005 fac2 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d54:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0b9      	beq.n	8002cd0 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d5c:	2764      	movs	r7, #100	; 0x64
 8002d5e:	4e42      	ldr	r6, [pc, #264]	; (8002e68 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002d60:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002d62:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d68:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002d6c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d6e:	f043 0309 	orr.w	r3, r3, #9
 8002d72:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d76:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d7a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d7e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d82:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d86:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	4622      	mov	r2, r4
 8002d8e:	214e      	movs	r1, #78	; 0x4e
 8002d90:	4630      	mov	r0, r6
 8002d92:	9700      	str	r7, [sp, #0]
 8002d94:	f005 faa0 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d98:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e0      	bne.n	8002d62 <lcd_update_amperage+0x17e>
 8002da0:	e796      	b.n	8002cd0 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002da2:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002da4:	4a34      	ldr	r2, [pc, #208]	; (8002e78 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002da6:	4830      	ldr	r0, [pc, #192]	; (8002e68 <lcd_update_amperage+0x284>)
 8002da8:	ac03      	add	r4, sp, #12
 8002daa:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002dac:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dae:	214e      	movs	r1, #78	; 0x4e
 8002db0:	4622      	mov	r2, r4
 8002db2:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002db4:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002db6:	f005 fa8f 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002dba:	2320      	movs	r3, #32
 8002dbc:	4d2b      	ldr	r5, [pc, #172]	; (8002e6c <lcd_update_amperage+0x288>)
	data_u = (data&0xf0);
 8002dbe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dc6:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002dca:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dce:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002dd2:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002dd6:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002dda:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002dde:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002de2:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002de4:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002de8:	214e      	movs	r1, #78	; 0x4e
 8002dea:	4622      	mov	r2, r4
 8002dec:	4638      	mov	r0, r7
 8002dee:	9600      	str	r6, [sp, #0]
 8002df0:	f005 fa72 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002df4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e0      	bne.n	8002dbe <lcd_update_amperage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002dfc:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dfe:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e00:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e02:	214e      	movs	r1, #78	; 0x4e
 8002e04:	4622      	mov	r2, r4
 8002e06:	4818      	ldr	r0, [pc, #96]	; (8002e68 <lcd_update_amperage+0x284>)
 8002e08:	9600      	str	r6, [sp, #0]
 8002e0a:	f005 fa65 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e0e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f43f af5c 	beq.w	8002cd0 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e18:	2764      	movs	r7, #100	; 0x64
 8002e1a:	4e13      	ldr	r6, [pc, #76]	; (8002e68 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002e1c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002e1e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002e24:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e26:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e2a:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e2e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e32:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e36:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e3a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e3e:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e42:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e44:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e48:	4622      	mov	r2, r4
 8002e4a:	214e      	movs	r1, #78	; 0x4e
 8002e4c:	4630      	mov	r0, r6
 8002e4e:	9700      	str	r7, [sp, #0]
 8002e50:	f005 fa42 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e54:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e0      	bne.n	8002e1e <lcd_update_amperage+0x23a>
 8002e5c:	e738      	b.n	8002cd0 <lcd_update_amperage+0xec>
 8002e5e:	bf00      	nop
 8002e60:	0800f244 	.word	0x0800f244
 8002e64:	383cc8cc 	.word	0x383cc8cc
 8002e68:	200004ec 	.word	0x200004ec
 8002e6c:	0800f234 	.word	0x0800f234
 8002e70:	191d494d 	.word	0x191d494d
 8002e74:	282ce8ec 	.word	0x282ce8ec
 8002e78:	e8ecc8cc 	.word	0xe8ecc8cc
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e7c:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e7e:	4a2e      	ldr	r2, [pc, #184]	; (8002f38 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e80:	482e      	ldr	r0, [pc, #184]	; (8002f3c <lcd_update_amperage+0x358>)
 8002e82:	ac03      	add	r4, sp, #12
 8002e84:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e86:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e88:	214e      	movs	r1, #78	; 0x4e
 8002e8a:	4622      	mov	r2, r4
 8002e8c:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e8e:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e90:	f005 fa22 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e94:	2320      	movs	r3, #32
 8002e96:	4d2a      	ldr	r5, [pc, #168]	; (8002f40 <lcd_update_amperage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8002e98:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e9e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002ea2:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ea4:	f043 0309 	orr.w	r3, r3, #9
 8002ea8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002eac:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002eb0:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002eb4:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002eb8:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ebc:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	214e      	movs	r1, #78	; 0x4e
 8002ec6:	4638      	mov	r0, r7
 8002ec8:	9600      	str	r6, [sp, #0]
 8002eca:	f005 fa05 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002ece:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1e0      	bne.n	8002e98 <lcd_update_amperage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ed6:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ed8:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002eda:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002edc:	214e      	movs	r1, #78	; 0x4e
 8002ede:	4622      	mov	r2, r4
 8002ee0:	4816      	ldr	r0, [pc, #88]	; (8002f3c <lcd_update_amperage+0x358>)
 8002ee2:	9600      	str	r6, [sp, #0]
 8002ee4:	f005 f9f8 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002ee8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f43f aeef 	beq.w	8002cd0 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ef2:	2764      	movs	r7, #100	; 0x64
 8002ef4:	4e11      	ldr	r6, [pc, #68]	; (8002f3c <lcd_update_amperage+0x358>)
	while (*str) lcd_send_data (*str++);
 8002ef6:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 8002ef8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f00:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f04:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f08:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f0c:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f10:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f14:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f18:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f1c:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f1e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f22:	214e      	movs	r1, #78	; 0x4e
 8002f24:	4622      	mov	r2, r4
 8002f26:	4630      	mov	r0, r6
 8002f28:	9700      	str	r7, [sp, #0]
 8002f2a:	f005 f9d5 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002f2e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1e0      	bne.n	8002ef8 <lcd_update_amperage+0x314>
 8002f36:	e6cb      	b.n	8002cd0 <lcd_update_amperage+0xec>
 8002f38:	787cd8dc 	.word	0x787cd8dc
 8002f3c:	200004ec 	.word	0x200004ec
 8002f40:	0800f234 	.word	0x0800f234

08002f44 <lcd_psu_update>:
void lcd_psu_update(void){
 8002f44:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f46:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f48:	49a7      	ldr	r1, [pc, #668]	; (80031e8 <lcd_psu_update+0x2a4>)
void lcd_psu_update(void){
 8002f4a:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f4c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f4e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f50:	48a6      	ldr	r0, [pc, #664]	; (80031ec <lcd_psu_update+0x2a8>)
 8002f52:	214e      	movs	r1, #78	; 0x4e
 8002f54:	aa03      	add	r2, sp, #12
 8002f56:	9400      	str	r4, [sp, #0]
 8002f58:	f005 f9be 	bl	80082d8 <HAL_I2C_Master_Transmit>
	if(kpenum == WAIT){
 8002f5c:	4ba4      	ldr	r3, [pc, #656]	; (80031f0 <lcd_psu_update+0x2ac>)
 8002f5e:	781d      	ldrb	r5, [r3, #0]
 8002f60:	b165      	cbz	r5, 8002f7c <lcd_psu_update+0x38>
	else if(kpenum == V1){
 8002f62:	2d01      	cmp	r5, #1
 8002f64:	f000 8162 	beq.w	800322c <lcd_psu_update+0x2e8>
	else if(kpenum == V2){
 8002f68:	2d03      	cmp	r5, #3
 8002f6a:	d032      	beq.n	8002fd2 <lcd_psu_update+0x8e>
	else if(kpenum == A1){
 8002f6c:	2d02      	cmp	r5, #2
 8002f6e:	f000 82a1 	beq.w	80034b4 <lcd_psu_update+0x570>
	else if(kpenum == A2){
 8002f72:	2d04      	cmp	r5, #4
 8002f74:	f000 831d 	beq.w	80035b2 <lcd_psu_update+0x66e>
}
 8002f78:	b004      	add	sp, #16
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
		lcd_update_voltage(1,volt_set_aux);
 8002f7c:	4b9d      	ldr	r3, [pc, #628]	; (80031f4 <lcd_psu_update+0x2b0>)
 8002f7e:	2001      	movs	r0, #1
 8002f80:	6819      	ldr	r1, [r3, #0]
 8002f82:	f7ff fc7f 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8002f86:	4b9c      	ldr	r3, [pc, #624]	; (80031f8 <lcd_psu_update+0x2b4>)
 8002f88:	2001      	movs	r0, #1
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	f7ff fe2a 	bl	8002be4 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8002f90:	4b9a      	ldr	r3, [pc, #616]	; (80031fc <lcd_psu_update+0x2b8>)
 8002f92:	2002      	movs	r0, #2
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	f7ff fc75 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8002f9a:	4b99      	ldr	r3, [pc, #612]	; (8003200 <lcd_psu_update+0x2bc>)
 8002f9c:	2002      	movs	r0, #2
 8002f9e:	6819      	ldr	r1, [r3, #0]
 8002fa0:	f7ff fe20 	bl	8002be4 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8002fa4:	4b97      	ldr	r3, [pc, #604]	; (8003204 <lcd_psu_update+0x2c0>)
 8002fa6:	2003      	movs	r0, #3
 8002fa8:	6819      	ldr	r1, [r3, #0]
 8002faa:	f7ff fc6b 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8002fae:	4b96      	ldr	r3, [pc, #600]	; (8003208 <lcd_psu_update+0x2c4>)
 8002fb0:	2003      	movs	r0, #3
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	f7ff fe16 	bl	8002be4 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8002fb8:	4b94      	ldr	r3, [pc, #592]	; (800320c <lcd_psu_update+0x2c8>)
 8002fba:	2004      	movs	r0, #4
 8002fbc:	6819      	ldr	r1, [r3, #0]
 8002fbe:	f7ff fc61 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002fc2:	2004      	movs	r0, #4
 8002fc4:	4b92      	ldr	r3, [pc, #584]	; (8003210 <lcd_psu_update+0x2cc>)
 8002fc6:	6819      	ldr	r1, [r3, #0]
}
 8002fc8:	b004      	add	sp, #16
 8002fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lcd_update_amperage(4,cur_num);
 8002fce:	f7ff be09 	b.w	8002be4 <lcd_update_amperage>
		lcd_update_voltage(1,volt_set_aux);
 8002fd2:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <lcd_psu_update+0x2b0>)
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	f7ff fc54 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8002fdc:	4b86      	ldr	r3, [pc, #536]	; (80031f8 <lcd_psu_update+0x2b4>)
 8002fde:	2001      	movs	r0, #1
 8002fe0:	6819      	ldr	r1, [r3, #0]
 8002fe2:	f7ff fdff 	bl	8002be4 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8002fe6:	4b85      	ldr	r3, [pc, #532]	; (80031fc <lcd_psu_update+0x2b8>)
 8002fe8:	2002      	movs	r0, #2
 8002fea:	6819      	ldr	r1, [r3, #0]
 8002fec:	f7ff fc4a 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8002ff0:	4b83      	ldr	r3, [pc, #524]	; (8003200 <lcd_psu_update+0x2bc>)
 8002ff2:	2002      	movs	r0, #2
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	f7ff fdf5 	bl	8002be4 <lcd_update_amperage>
		lcd_update_amperage(3,amp_set_main);
 8002ffa:	4b83      	ldr	r3, [pc, #524]	; (8003208 <lcd_psu_update+0x2c4>)
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	f7ff fdf0 	bl	8002be4 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003004:	4b81      	ldr	r3, [pc, #516]	; (800320c <lcd_psu_update+0x2c8>)
 8003006:	2004      	movs	r0, #4
 8003008:	6819      	ldr	r1, [r3, #0]
 800300a:	f7ff fc3b 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 800300e:	4b80      	ldr	r3, [pc, #512]	; (8003210 <lcd_psu_update+0x2cc>)
 8003010:	2004      	movs	r0, #4
 8003012:	6819      	ldr	r1, [r3, #0]
 8003014:	f7ff fde6 	bl	8002be4 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003018:	497e      	ldr	r1, [pc, #504]	; (8003214 <lcd_psu_update+0x2d0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800301a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800301c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800301e:	4873      	ldr	r0, [pc, #460]	; (80031ec <lcd_psu_update+0x2a8>)
 8003020:	214e      	movs	r1, #78	; 0x4e
 8003022:	aa03      	add	r2, sp, #12
 8003024:	9400      	str	r4, [sp, #0]
 8003026:	f005 f957 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800302a:	2320      	movs	r3, #32
 800302c:	4d7a      	ldr	r5, [pc, #488]	; (8003218 <lcd_psu_update+0x2d4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800302e:	4e6f      	ldr	r6, [pc, #444]	; (80031ec <lcd_psu_update+0x2a8>)
	data_l = ((data<<4)&0xf0);
 8003030:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003036:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800303a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800303c:	f043 0309 	orr.w	r3, r3, #9
 8003040:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003044:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003048:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800304c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003050:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003054:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003058:	2304      	movs	r3, #4
 800305a:	214e      	movs	r1, #78	; 0x4e
 800305c:	4630      	mov	r0, r6
 800305e:	9400      	str	r4, [sp, #0]
 8003060:	aa03      	add	r2, sp, #12
 8003062:	f005 f939 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003066:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e0      	bne.n	8003030 <lcd_psu_update+0xec>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800306e:	4969      	ldr	r1, [pc, #420]	; (8003214 <lcd_psu_update+0x2d0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003070:	2304      	movs	r3, #4
 8003072:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003074:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003076:	485d      	ldr	r0, [pc, #372]	; (80031ec <lcd_psu_update+0x2a8>)
 8003078:	214e      	movs	r1, #78	; 0x4e
 800307a:	9400      	str	r4, [sp, #0]
 800307c:	f005 f92c 	bl	80082d8 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003080:	4966      	ldr	r1, [pc, #408]	; (800321c <lcd_psu_update+0x2d8>)
		if(keypadarr[0] != 'z'){
 8003082:	4d67      	ldr	r5, [pc, #412]	; (8003220 <lcd_psu_update+0x2dc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003084:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003086:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003088:	4858      	ldr	r0, [pc, #352]	; (80031ec <lcd_psu_update+0x2a8>)
 800308a:	214e      	movs	r1, #78	; 0x4e
 800308c:	aa03      	add	r2, sp, #12
 800308e:	9400      	str	r4, [sp, #0]
 8003090:	f005 f922 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003094:	782b      	ldrb	r3, [r5, #0]
 8003096:	2b7a      	cmp	r3, #122	; 0x7a
 8003098:	d01b      	beq.n	80030d2 <lcd_psu_update+0x18e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800309a:	9400      	str	r4, [sp, #0]
			lcd_send_data(keypadarr[0]);
 800309c:	782b      	ldrb	r3, [r5, #0]
	data_l = ((data<<4)&0xf0);
 800309e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80030a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80030a4:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030a6:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030aa:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030ae:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030b2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030b6:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030ba:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030be:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030c2:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030c6:	2304      	movs	r3, #4
 80030c8:	214e      	movs	r1, #78	; 0x4e
 80030ca:	4848      	ldr	r0, [pc, #288]	; (80031ec <lcd_psu_update+0x2a8>)
 80030cc:	aa03      	add	r2, sp, #12
 80030ce:	f005 f903 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 80030d2:	786b      	ldrb	r3, [r5, #1]
 80030d4:	2b7a      	cmp	r3, #122	; 0x7a
 80030d6:	d01c      	beq.n	8003112 <lcd_psu_update+0x1ce>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030d8:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[1]);
 80030da:	786b      	ldrb	r3, [r5, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030dc:	4843      	ldr	r0, [pc, #268]	; (80031ec <lcd_psu_update+0x2a8>)
	data_l = ((data<<4)&0xf0);
 80030de:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80030e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030e4:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80030e8:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030ea:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030ee:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030f2:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030f6:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030fa:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030fe:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003102:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003106:	2304      	movs	r3, #4
 8003108:	214e      	movs	r1, #78	; 0x4e
 800310a:	aa03      	add	r2, sp, #12
 800310c:	9400      	str	r4, [sp, #0]
 800310e:	f005 f8e3 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 8003112:	78ab      	ldrb	r3, [r5, #2]
 8003114:	2b7a      	cmp	r3, #122	; 0x7a
 8003116:	d01c      	beq.n	8003152 <lcd_psu_update+0x20e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003118:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[2]);
 800311a:	78ab      	ldrb	r3, [r5, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800311c:	4833      	ldr	r0, [pc, #204]	; (80031ec <lcd_psu_update+0x2a8>)
	data_l = ((data<<4)&0xf0);
 800311e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003124:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003128:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800312a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800312e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003132:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003136:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800313a:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800313e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003142:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003146:	2304      	movs	r3, #4
 8003148:	214e      	movs	r1, #78	; 0x4e
 800314a:	aa03      	add	r2, sp, #12
 800314c:	9400      	str	r4, [sp, #0]
 800314e:	f005 f8c3 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 8003152:	78eb      	ldrb	r3, [r5, #3]
 8003154:	2b7a      	cmp	r3, #122	; 0x7a
 8003156:	d01c      	beq.n	8003192 <lcd_psu_update+0x24e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003158:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[3]);
 800315a:	78eb      	ldrb	r3, [r5, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800315c:	4823      	ldr	r0, [pc, #140]	; (80031ec <lcd_psu_update+0x2a8>)
	data_l = ((data<<4)&0xf0);
 800315e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003164:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003168:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800316a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800316e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003172:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003176:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800317a:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800317e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003182:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003186:	2304      	movs	r3, #4
 8003188:	214e      	movs	r1, #78	; 0x4e
 800318a:	aa03      	add	r2, sp, #12
 800318c:	9400      	str	r4, [sp, #0]
 800318e:	f005 f8a3 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 8003192:	792b      	ldrb	r3, [r5, #4]
 8003194:	2b7a      	cmp	r3, #122	; 0x7a
 8003196:	d01c      	beq.n	80031d2 <lcd_psu_update+0x28e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003198:	2064      	movs	r0, #100	; 0x64
			lcd_send_data(keypadarr[4]);
 800319a:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800319c:	9000      	str	r0, [sp, #0]
	data_l = ((data<<4)&0xf0);
 800319e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80031a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80031a4:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80031a6:	f043 010d 	orr.w	r1, r3, #13
 80031aa:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80031ae:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80031b2:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80031b6:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80031ba:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80031be:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031c2:	2304      	movs	r3, #4
 80031c4:	214e      	movs	r1, #78	; 0x4e
 80031c6:	4809      	ldr	r0, [pc, #36]	; (80031ec <lcd_psu_update+0x2a8>)
 80031c8:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80031ca:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031ce:	f005 f883 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(encmode){
 80031d2:	4b14      	ldr	r3, [pc, #80]	; (8003224 <lcd_psu_update+0x2e0>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f43f aece 	beq.w	8002f78 <lcd_psu_update+0x34>
			lcd_put_cur(2, 3 + encpos);
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <lcd_psu_update+0x2e4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031de:	aa03      	add	r2, sp, #12
			lcd_put_cur(2, 3 + encpos);
 80031e0:	781b      	ldrb	r3, [r3, #0]
    lcd_send_cmd (col);
 80031e2:	3b69      	subs	r3, #105	; 0x69
	data_u = (cmd&0xf0);
 80031e4:	e12b      	b.n	800343e <lcd_psu_update+0x4fa>
 80031e6:	bf00      	nop
 80031e8:	c8cc080c 	.word	0xc8cc080c
 80031ec:	200004ec 	.word	0x200004ec
 80031f0:	200006c5 	.word	0x200006c5
 80031f4:	20000824 	.word	0x20000824
 80031f8:	20000394 	.word	0x20000394
 80031fc:	200006cc 	.word	0x200006cc
 8003200:	200003a8 	.word	0x200003a8
 8003204:	20000828 	.word	0x20000828
 8003208:	20000398 	.word	0x20000398
 800320c:	200006c8 	.word	0x200006c8
 8003210:	200003a4 	.word	0x200003a4
 8003214:	787c989c 	.word	0x787c989c
 8003218:	0800f234 	.word	0x0800f234
 800321c:	f8fc080c 	.word	0xf8fc080c
 8003220:	20000000 	.word	0x20000000
 8003224:	200003ac 	.word	0x200003ac
 8003228:	200003ad 	.word	0x200003ad
		lcd_update_amperage(1,amp_set_aux);
 800322c:	4b93      	ldr	r3, [pc, #588]	; (800347c <lcd_psu_update+0x538>)
 800322e:	4628      	mov	r0, r5
 8003230:	6819      	ldr	r1, [r3, #0]
 8003232:	f7ff fcd7 	bl	8002be4 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003236:	4b92      	ldr	r3, [pc, #584]	; (8003480 <lcd_psu_update+0x53c>)
 8003238:	2002      	movs	r0, #2
 800323a:	6819      	ldr	r1, [r3, #0]
 800323c:	f7ff fb22 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003240:	4b90      	ldr	r3, [pc, #576]	; (8003484 <lcd_psu_update+0x540>)
 8003242:	2002      	movs	r0, #2
 8003244:	6819      	ldr	r1, [r3, #0]
 8003246:	f7ff fccd 	bl	8002be4 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 800324a:	4b8f      	ldr	r3, [pc, #572]	; (8003488 <lcd_psu_update+0x544>)
 800324c:	2003      	movs	r0, #3
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	f7ff fb18 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8003254:	4b8d      	ldr	r3, [pc, #564]	; (800348c <lcd_psu_update+0x548>)
 8003256:	2003      	movs	r0, #3
 8003258:	6819      	ldr	r1, [r3, #0]
 800325a:	f7ff fcc3 	bl	8002be4 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 800325e:	4b8c      	ldr	r3, [pc, #560]	; (8003490 <lcd_psu_update+0x54c>)
 8003260:	2004      	movs	r0, #4
 8003262:	6819      	ldr	r1, [r3, #0]
 8003264:	f7ff fb0e 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003268:	4b8a      	ldr	r3, [pc, #552]	; (8003494 <lcd_psu_update+0x550>)
 800326a:	2004      	movs	r0, #4
 800326c:	6819      	ldr	r1, [r3, #0]
 800326e:	f7ff fcb9 	bl	8002be4 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003272:	4989      	ldr	r1, [pc, #548]	; (8003498 <lcd_psu_update+0x554>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003274:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003276:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003278:	4888      	ldr	r0, [pc, #544]	; (800349c <lcd_psu_update+0x558>)
 800327a:	214e      	movs	r1, #78	; 0x4e
 800327c:	aa03      	add	r2, sp, #12
 800327e:	9400      	str	r4, [sp, #0]
 8003280:	f005 f82a 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003284:	2320      	movs	r3, #32
 8003286:	4d86      	ldr	r5, [pc, #536]	; (80034a0 <lcd_psu_update+0x55c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003288:	4e84      	ldr	r6, [pc, #528]	; (800349c <lcd_psu_update+0x558>)
	data_u = (data&0xf0);
 800328a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003292:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003296:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800329a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800329e:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032a2:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032a6:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032aa:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032ae:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032b0:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032b4:	214e      	movs	r1, #78	; 0x4e
 80032b6:	4630      	mov	r0, r6
 80032b8:	9400      	str	r4, [sp, #0]
 80032ba:	aa03      	add	r2, sp, #12
 80032bc:	f005 f80c 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80032c0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e0      	bne.n	800328a <lcd_psu_update+0x346>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032c8:	4973      	ldr	r1, [pc, #460]	; (8003498 <lcd_psu_update+0x554>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032ca:	2304      	movs	r3, #4
 80032cc:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032ce:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032d0:	4872      	ldr	r0, [pc, #456]	; (800349c <lcd_psu_update+0x558>)
 80032d2:	214e      	movs	r1, #78	; 0x4e
 80032d4:	9400      	str	r4, [sp, #0]
 80032d6:	f004 ffff 	bl	80082d8 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032da:	4972      	ldr	r1, [pc, #456]	; (80034a4 <lcd_psu_update+0x560>)
		if(keypadarr[0] != 'z'){
 80032dc:	4d72      	ldr	r5, [pc, #456]	; (80034a8 <lcd_psu_update+0x564>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032de:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032e0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032e2:	486e      	ldr	r0, [pc, #440]	; (800349c <lcd_psu_update+0x558>)
 80032e4:	214e      	movs	r1, #78	; 0x4e
 80032e6:	aa03      	add	r2, sp, #12
 80032e8:	9400      	str	r4, [sp, #0]
 80032ea:	f004 fff5 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 80032ee:	782b      	ldrb	r3, [r5, #0]
 80032f0:	2b7a      	cmp	r3, #122	; 0x7a
 80032f2:	d01b      	beq.n	800332c <lcd_psu_update+0x3e8>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032f4:	9400      	str	r4, [sp, #0]
			lcd_send_data(keypadarr[0]);
 80032f6:	782b      	ldrb	r3, [r5, #0]
	data_l = ((data<<4)&0xf0);
 80032f8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80032fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80032fe:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003300:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003304:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003308:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800330c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003310:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003314:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003318:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800331c:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003320:	2304      	movs	r3, #4
 8003322:	214e      	movs	r1, #78	; 0x4e
 8003324:	485d      	ldr	r0, [pc, #372]	; (800349c <lcd_psu_update+0x558>)
 8003326:	aa03      	add	r2, sp, #12
 8003328:	f004 ffd6 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 800332c:	786b      	ldrb	r3, [r5, #1]
 800332e:	2b7a      	cmp	r3, #122	; 0x7a
 8003330:	d01c      	beq.n	800336c <lcd_psu_update+0x428>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003332:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[1]);
 8003334:	786b      	ldrb	r3, [r5, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003336:	4859      	ldr	r0, [pc, #356]	; (800349c <lcd_psu_update+0x558>)
	data_l = ((data<<4)&0xf0);
 8003338:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800333a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800333e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003342:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003344:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003348:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800334c:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003350:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003354:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003358:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800335c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003360:	2304      	movs	r3, #4
 8003362:	214e      	movs	r1, #78	; 0x4e
 8003364:	aa03      	add	r2, sp, #12
 8003366:	9400      	str	r4, [sp, #0]
 8003368:	f004 ffb6 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 800336c:	78ab      	ldrb	r3, [r5, #2]
 800336e:	2b7a      	cmp	r3, #122	; 0x7a
 8003370:	d01c      	beq.n	80033ac <lcd_psu_update+0x468>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003372:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[2]);
 8003374:	78ab      	ldrb	r3, [r5, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003376:	4849      	ldr	r0, [pc, #292]	; (800349c <lcd_psu_update+0x558>)
	data_l = ((data<<4)&0xf0);
 8003378:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800337a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800337e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003382:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003384:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003388:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800338c:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003390:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003394:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003398:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800339c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033a0:	2304      	movs	r3, #4
 80033a2:	214e      	movs	r1, #78	; 0x4e
 80033a4:	aa03      	add	r2, sp, #12
 80033a6:	9400      	str	r4, [sp, #0]
 80033a8:	f004 ff96 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 80033ac:	78eb      	ldrb	r3, [r5, #3]
 80033ae:	2b7a      	cmp	r3, #122	; 0x7a
 80033b0:	d01c      	beq.n	80033ec <lcd_psu_update+0x4a8>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033b2:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[3]);
 80033b4:	78eb      	ldrb	r3, [r5, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033b6:	4839      	ldr	r0, [pc, #228]	; (800349c <lcd_psu_update+0x558>)
	data_l = ((data<<4)&0xf0);
 80033b8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80033ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80033be:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80033c2:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80033c4:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80033c8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80033cc:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80033d0:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80033d4:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80033d8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80033dc:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033e0:	2304      	movs	r3, #4
 80033e2:	214e      	movs	r1, #78	; 0x4e
 80033e4:	aa03      	add	r2, sp, #12
 80033e6:	9400      	str	r4, [sp, #0]
 80033e8:	f004 ff76 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 80033ec:	792b      	ldrb	r3, [r5, #4]
 80033ee:	2b7a      	cmp	r3, #122	; 0x7a
 80033f0:	d01c      	beq.n	800342c <lcd_psu_update+0x4e8>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033f2:	2064      	movs	r0, #100	; 0x64
			lcd_send_data(keypadarr[4]);
 80033f4:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033f6:	9000      	str	r0, [sp, #0]
	data_l = ((data<<4)&0xf0);
 80033f8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80033fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80033fe:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003400:	f043 010d 	orr.w	r1, r3, #13
 8003404:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003408:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800340c:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003410:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003414:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003418:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800341c:	2304      	movs	r3, #4
 800341e:	214e      	movs	r1, #78	; 0x4e
 8003420:	481e      	ldr	r0, [pc, #120]	; (800349c <lcd_psu_update+0x558>)
 8003422:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003424:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003428:	f004 ff56 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(encmode){
 800342c:	4b1f      	ldr	r3, [pc, #124]	; (80034ac <lcd_psu_update+0x568>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f43f ada1 	beq.w	8002f78 <lcd_psu_update+0x34>
			lcd_put_cur(0, 3 + encpos);
 8003436:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <lcd_psu_update+0x56c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003438:	aa03      	add	r2, sp, #12
			lcd_put_cur(0, 3 + encpos);
 800343a:	781b      	ldrb	r3, [r3, #0]
    lcd_send_cmd (col);
 800343c:	3b7d      	subs	r3, #125	; 0x7d
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800343e:	2464      	movs	r4, #100	; 0x64
	data_l = ((cmd<<4)&0xf0);
 8003440:	0119      	lsls	r1, r3, #4
	data_u = (cmd&0xf0);
 8003442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8003446:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800344a:	f043 000c 	orr.w	r0, r3, #12
 800344e:	f88d 000c 	strb.w	r0, [sp, #12]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003452:	f043 0308 	orr.w	r3, r3, #8
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003456:	f041 0008 	orr.w	r0, r1, #8
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800345a:	f041 050c 	orr.w	r5, r1, #12
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800345e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003462:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003466:	2304      	movs	r3, #4
 8003468:	214e      	movs	r1, #78	; 0x4e
 800346a:	9400      	str	r4, [sp, #0]
 800346c:	480b      	ldr	r0, [pc, #44]	; (800349c <lcd_psu_update+0x558>)
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800346e:	f88d 500e 	strb.w	r5, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003472:	f004 ff31 	bl	80082d8 <HAL_I2C_Master_Transmit>
}
 8003476:	b004      	add	sp, #16
 8003478:	bd70      	pop	{r4, r5, r6, pc}
 800347a:	bf00      	nop
 800347c:	20000394 	.word	0x20000394
 8003480:	200006cc 	.word	0x200006cc
 8003484:	200003a8 	.word	0x200003a8
 8003488:	20000828 	.word	0x20000828
 800348c:	20000398 	.word	0x20000398
 8003490:	200006c8 	.word	0x200006c8
 8003494:	200003a4 	.word	0x200003a4
 8003498:	383c888c 	.word	0x383c888c
 800349c:	200004ec 	.word	0x200004ec
 80034a0:	0800f234 	.word	0x0800f234
 80034a4:	f8fc080c 	.word	0xf8fc080c
 80034a8:	20000000 	.word	0x20000000
 80034ac:	200003ac 	.word	0x200003ac
 80034b0:	200003ad 	.word	0x200003ad
		lcd_update_voltage(1,volt_set_aux);
 80034b4:	4bba      	ldr	r3, [pc, #744]	; (80037a0 <lcd_psu_update+0x85c>)
 80034b6:	2001      	movs	r0, #1
 80034b8:	6819      	ldr	r1, [r3, #0]
 80034ba:	f7ff f9e3 	bl	8002884 <lcd_update_voltage>
		lcd_update_voltage(2,lin_num_aux);
 80034be:	4bb9      	ldr	r3, [pc, #740]	; (80037a4 <lcd_psu_update+0x860>)
 80034c0:	4628      	mov	r0, r5
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	f7ff f9de 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 80034c8:	4bb7      	ldr	r3, [pc, #732]	; (80037a8 <lcd_psu_update+0x864>)
 80034ca:	4628      	mov	r0, r5
 80034cc:	6819      	ldr	r1, [r3, #0]
 80034ce:	f7ff fb89 	bl	8002be4 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 80034d2:	4bb6      	ldr	r3, [pc, #728]	; (80037ac <lcd_psu_update+0x868>)
 80034d4:	2003      	movs	r0, #3
 80034d6:	6819      	ldr	r1, [r3, #0]
 80034d8:	f7ff f9d4 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 80034dc:	4bb4      	ldr	r3, [pc, #720]	; (80037b0 <lcd_psu_update+0x86c>)
 80034de:	2003      	movs	r0, #3
 80034e0:	6819      	ldr	r1, [r3, #0]
 80034e2:	f7ff fb7f 	bl	8002be4 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 80034e6:	4bb3      	ldr	r3, [pc, #716]	; (80037b4 <lcd_psu_update+0x870>)
 80034e8:	2004      	movs	r0, #4
 80034ea:	6819      	ldr	r1, [r3, #0]
 80034ec:	f7ff f9ca 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 80034f0:	4bb1      	ldr	r3, [pc, #708]	; (80037b8 <lcd_psu_update+0x874>)
 80034f2:	2004      	movs	r0, #4
 80034f4:	6819      	ldr	r1, [r3, #0]
 80034f6:	f7ff fb75 	bl	8002be4 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80034fa:	49b0      	ldr	r1, [pc, #704]	; (80037bc <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034fc:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80034fe:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003500:	48af      	ldr	r0, [pc, #700]	; (80037c0 <lcd_psu_update+0x87c>)
 8003502:	214e      	movs	r1, #78	; 0x4e
 8003504:	aa03      	add	r2, sp, #12
 8003506:	9400      	str	r4, [sp, #0]
 8003508:	f004 fee6 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800350c:	2320      	movs	r3, #32
 800350e:	4dad      	ldr	r5, [pc, #692]	; (80037c4 <lcd_psu_update+0x880>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003510:	4eab      	ldr	r6, [pc, #684]	; (80037c0 <lcd_psu_update+0x87c>)
	data_l = ((data<<4)&0xf0);
 8003512:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003518:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800351c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800351e:	f043 0309 	orr.w	r3, r3, #9
 8003522:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003526:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800352a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800352e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003532:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003536:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800353a:	2304      	movs	r3, #4
 800353c:	214e      	movs	r1, #78	; 0x4e
 800353e:	4630      	mov	r0, r6
 8003540:	9400      	str	r4, [sp, #0]
 8003542:	aa03      	add	r2, sp, #12
 8003544:	f004 fec8 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003548:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e0      	bne.n	8003512 <lcd_psu_update+0x5ce>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003550:	499a      	ldr	r1, [pc, #616]	; (80037bc <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003552:	2304      	movs	r3, #4
 8003554:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003556:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003558:	4899      	ldr	r0, [pc, #612]	; (80037c0 <lcd_psu_update+0x87c>)
 800355a:	214e      	movs	r1, #78	; 0x4e
 800355c:	9400      	str	r4, [sp, #0]
 800355e:	f004 febb 	bl	80082d8 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003562:	4999      	ldr	r1, [pc, #612]	; (80037c8 <lcd_psu_update+0x884>)
		if(keypadarr[0] != 'z'){
 8003564:	4d99      	ldr	r5, [pc, #612]	; (80037cc <lcd_psu_update+0x888>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003566:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003568:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800356a:	4895      	ldr	r0, [pc, #596]	; (80037c0 <lcd_psu_update+0x87c>)
 800356c:	214e      	movs	r1, #78	; 0x4e
 800356e:	aa03      	add	r2, sp, #12
 8003570:	9400      	str	r4, [sp, #0]
 8003572:	f004 feb1 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003576:	782b      	ldrb	r3, [r5, #0]
 8003578:	2b7a      	cmp	r3, #122	; 0x7a
 800357a:	f040 8131 	bne.w	80037e0 <lcd_psu_update+0x89c>
		if(keypadarr[1] != 'z'){
 800357e:	786b      	ldrb	r3, [r5, #1]
 8003580:	2b7a      	cmp	r3, #122	; 0x7a
 8003582:	f040 80ef 	bne.w	8003764 <lcd_psu_update+0x820>
		if(keypadarr[2] != 'z'){
 8003586:	78ab      	ldrb	r3, [r5, #2]
 8003588:	2b7a      	cmp	r3, #122	; 0x7a
 800358a:	f040 80cd 	bne.w	8003728 <lcd_psu_update+0x7e4>
		if(keypadarr[3] != 'z'){
 800358e:	78eb      	ldrb	r3, [r5, #3]
 8003590:	2b7a      	cmp	r3, #122	; 0x7a
 8003592:	f040 80ab 	bne.w	80036ec <lcd_psu_update+0x7a8>
		if(keypadarr[4] != 'z'){
 8003596:	792b      	ldrb	r3, [r5, #4]
 8003598:	2b7a      	cmp	r3, #122	; 0x7a
 800359a:	f040 8089 	bne.w	80036b0 <lcd_psu_update+0x76c>
		if(encmode){
 800359e:	4b8c      	ldr	r3, [pc, #560]	; (80037d0 <lcd_psu_update+0x88c>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f43f ace8 	beq.w	8002f78 <lcd_psu_update+0x34>
			lcd_put_cur(1, 3 + encpos);
 80035a8:	4b8a      	ldr	r3, [pc, #552]	; (80037d4 <lcd_psu_update+0x890>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035aa:	aa03      	add	r2, sp, #12
			lcd_put_cur(1, 3 + encpos);
 80035ac:	781b      	ldrb	r3, [r3, #0]
    lcd_send_cmd (col);
 80035ae:	3b3d      	subs	r3, #61	; 0x3d
	data_u = (cmd&0xf0);
 80035b0:	e745      	b.n	800343e <lcd_psu_update+0x4fa>
		lcd_update_voltage(1,volt_set_aux);
 80035b2:	4b7b      	ldr	r3, [pc, #492]	; (80037a0 <lcd_psu_update+0x85c>)
 80035b4:	2001      	movs	r0, #1
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	f7ff f964 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 80035bc:	4b86      	ldr	r3, [pc, #536]	; (80037d8 <lcd_psu_update+0x894>)
 80035be:	2001      	movs	r0, #1
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	f7ff fb0f 	bl	8002be4 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 80035c6:	4b77      	ldr	r3, [pc, #476]	; (80037a4 <lcd_psu_update+0x860>)
 80035c8:	2002      	movs	r0, #2
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	f7ff f95a 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 80035d0:	4b75      	ldr	r3, [pc, #468]	; (80037a8 <lcd_psu_update+0x864>)
 80035d2:	2002      	movs	r0, #2
 80035d4:	6819      	ldr	r1, [r3, #0]
 80035d6:	f7ff fb05 	bl	8002be4 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 80035da:	4b74      	ldr	r3, [pc, #464]	; (80037ac <lcd_psu_update+0x868>)
 80035dc:	2003      	movs	r0, #3
 80035de:	6819      	ldr	r1, [r3, #0]
 80035e0:	f7ff f950 	bl	8002884 <lcd_update_voltage>
		lcd_update_voltage(4,lin_num);
 80035e4:	4b73      	ldr	r3, [pc, #460]	; (80037b4 <lcd_psu_update+0x870>)
 80035e6:	4628      	mov	r0, r5
 80035e8:	6819      	ldr	r1, [r3, #0]
 80035ea:	f7ff f94b 	bl	8002884 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 80035ee:	4b72      	ldr	r3, [pc, #456]	; (80037b8 <lcd_psu_update+0x874>)
 80035f0:	4628      	mov	r0, r5
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	f7ff faf6 	bl	8002be4 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035f8:	4978      	ldr	r1, [pc, #480]	; (80037dc <lcd_psu_update+0x898>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035fa:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035fc:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035fe:	4870      	ldr	r0, [pc, #448]	; (80037c0 <lcd_psu_update+0x87c>)
 8003600:	214e      	movs	r1, #78	; 0x4e
 8003602:	aa03      	add	r2, sp, #12
 8003604:	9400      	str	r4, [sp, #0]
 8003606:	f004 fe67 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800360a:	2320      	movs	r3, #32
 800360c:	4d6d      	ldr	r5, [pc, #436]	; (80037c4 <lcd_psu_update+0x880>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800360e:	4e6c      	ldr	r6, [pc, #432]	; (80037c0 <lcd_psu_update+0x87c>)
	data_l = ((data<<4)&0xf0);
 8003610:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003616:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800361a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800361c:	f043 0309 	orr.w	r3, r3, #9
 8003620:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003624:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003628:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800362c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003630:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003634:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003638:	2304      	movs	r3, #4
 800363a:	214e      	movs	r1, #78	; 0x4e
 800363c:	4630      	mov	r0, r6
 800363e:	9400      	str	r4, [sp, #0]
 8003640:	aa03      	add	r2, sp, #12
 8003642:	f004 fe49 	bl	80082d8 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003646:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1e0      	bne.n	8003610 <lcd_psu_update+0x6cc>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800364e:	4963      	ldr	r1, [pc, #396]	; (80037dc <lcd_psu_update+0x898>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003650:	2304      	movs	r3, #4
 8003652:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003654:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003656:	485a      	ldr	r0, [pc, #360]	; (80037c0 <lcd_psu_update+0x87c>)
 8003658:	214e      	movs	r1, #78	; 0x4e
 800365a:	9400      	str	r4, [sp, #0]
 800365c:	f004 fe3c 	bl	80082d8 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003660:	4959      	ldr	r1, [pc, #356]	; (80037c8 <lcd_psu_update+0x884>)
		if(keypadarr[0] != 'z'){
 8003662:	4d5a      	ldr	r5, [pc, #360]	; (80037cc <lcd_psu_update+0x888>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003664:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003666:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003668:	4855      	ldr	r0, [pc, #340]	; (80037c0 <lcd_psu_update+0x87c>)
 800366a:	214e      	movs	r1, #78	; 0x4e
 800366c:	aa03      	add	r2, sp, #12
 800366e:	9400      	str	r4, [sp, #0]
 8003670:	f004 fe32 	bl	80082d8 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003674:	782b      	ldrb	r3, [r5, #0]
 8003676:	2b7a      	cmp	r3, #122	; 0x7a
 8003678:	f040 80ed 	bne.w	8003856 <lcd_psu_update+0x912>
		if(keypadarr[1] != 'z'){
 800367c:	786b      	ldrb	r3, [r5, #1]
 800367e:	2b7a      	cmp	r3, #122	; 0x7a
 8003680:	f040 80cb 	bne.w	800381a <lcd_psu_update+0x8d6>
		if(keypadarr[2] != 'z'){
 8003684:	78ab      	ldrb	r3, [r5, #2]
 8003686:	2b7a      	cmp	r3, #122	; 0x7a
 8003688:	f040 813e 	bne.w	8003908 <lcd_psu_update+0x9c4>
		if(keypadarr[3] != 'z'){
 800368c:	78eb      	ldrb	r3, [r5, #3]
 800368e:	2b7a      	cmp	r3, #122	; 0x7a
 8003690:	f040 811c 	bne.w	80038cc <lcd_psu_update+0x988>
		if(keypadarr[4] != 'z'){
 8003694:	792b      	ldrb	r3, [r5, #4]
 8003696:	2b7a      	cmp	r3, #122	; 0x7a
 8003698:	f040 80fa 	bne.w	8003890 <lcd_psu_update+0x94c>
		if(encmode){
 800369c:	4b4c      	ldr	r3, [pc, #304]	; (80037d0 <lcd_psu_update+0x88c>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f43f ac69 	beq.w	8002f78 <lcd_psu_update+0x34>
			lcd_put_cur(3, 3 + encpos);
 80036a6:	4b4b      	ldr	r3, [pc, #300]	; (80037d4 <lcd_psu_update+0x890>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036a8:	aa03      	add	r2, sp, #12
			lcd_put_cur(3, 3 + encpos);
 80036aa:	781b      	ldrb	r3, [r3, #0]
    lcd_send_cmd (col);
 80036ac:	3b29      	subs	r3, #41	; 0x29
 80036ae:	e6c6      	b.n	800343e <lcd_psu_update+0x4fa>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036b0:	2064      	movs	r0, #100	; 0x64
			lcd_send_data(keypadarr[4]);
 80036b2:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036b4:	9000      	str	r0, [sp, #0]
	data_l = ((data<<4)&0xf0);
 80036b6:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80036b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80036bc:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80036be:	f043 010d 	orr.w	r1, r3, #13
 80036c2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80036c6:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036ca:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036ce:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80036d2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036d6:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036da:	2304      	movs	r3, #4
 80036dc:	214e      	movs	r1, #78	; 0x4e
 80036de:	aa03      	add	r2, sp, #12
 80036e0:	4837      	ldr	r0, [pc, #220]	; (80037c0 <lcd_psu_update+0x87c>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036e2:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036e6:	f004 fdf7 	bl	80082d8 <HAL_I2C_Master_Transmit>
}
 80036ea:	e758      	b.n	800359e <lcd_psu_update+0x65a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036ec:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[3]);
 80036ee:	78eb      	ldrb	r3, [r5, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036f0:	4833      	ldr	r0, [pc, #204]	; (80037c0 <lcd_psu_update+0x87c>)
	data_l = ((data<<4)&0xf0);
 80036f2:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80036f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80036f8:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80036fc:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80036fe:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003702:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003706:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800370a:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800370e:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003712:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003716:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800371a:	2304      	movs	r3, #4
 800371c:	214e      	movs	r1, #78	; 0x4e
 800371e:	aa03      	add	r2, sp, #12
 8003720:	9400      	str	r4, [sp, #0]
 8003722:	f004 fdd9 	bl	80082d8 <HAL_I2C_Master_Transmit>
}
 8003726:	e736      	b.n	8003596 <lcd_psu_update+0x652>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003728:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[2]);
 800372a:	78ab      	ldrb	r3, [r5, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800372c:	4824      	ldr	r0, [pc, #144]	; (80037c0 <lcd_psu_update+0x87c>)
	data_l = ((data<<4)&0xf0);
 800372e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003734:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003738:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800373a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800373e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003742:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003746:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800374a:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800374e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003752:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003756:	2304      	movs	r3, #4
 8003758:	214e      	movs	r1, #78	; 0x4e
 800375a:	aa03      	add	r2, sp, #12
 800375c:	9400      	str	r4, [sp, #0]
 800375e:	f004 fdbb 	bl	80082d8 <HAL_I2C_Master_Transmit>
}
 8003762:	e714      	b.n	800358e <lcd_psu_update+0x64a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003764:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[1]);
 8003766:	786b      	ldrb	r3, [r5, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003768:	4815      	ldr	r0, [pc, #84]	; (80037c0 <lcd_psu_update+0x87c>)
	data_l = ((data<<4)&0xf0);
 800376a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800376c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003770:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003774:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003776:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800377a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800377e:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003782:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003786:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800378a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800378e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003792:	2304      	movs	r3, #4
 8003794:	214e      	movs	r1, #78	; 0x4e
 8003796:	aa03      	add	r2, sp, #12
 8003798:	9400      	str	r4, [sp, #0]
 800379a:	f004 fd9d 	bl	80082d8 <HAL_I2C_Master_Transmit>
}
 800379e:	e6f2      	b.n	8003586 <lcd_psu_update+0x642>
 80037a0:	20000824 	.word	0x20000824
 80037a4:	200006cc 	.word	0x200006cc
 80037a8:	200003a8 	.word	0x200003a8
 80037ac:	20000828 	.word	0x20000828
 80037b0:	20000398 	.word	0x20000398
 80037b4:	200006c8 	.word	0x200006c8
 80037b8:	200003a4 	.word	0x200003a4
 80037bc:	383cc8cc 	.word	0x383cc8cc
 80037c0:	200004ec 	.word	0x200004ec
 80037c4:	0800f234 	.word	0x0800f234
 80037c8:	f8fc080c 	.word	0xf8fc080c
 80037cc:	20000000 	.word	0x20000000
 80037d0:	200003ac 	.word	0x200003ac
 80037d4:	200003ad 	.word	0x200003ad
 80037d8:	20000394 	.word	0x20000394
 80037dc:	787cd8dc 	.word	0x787cd8dc
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037e0:	9400      	str	r4, [sp, #0]
			lcd_send_data(keypadarr[0]);
 80037e2:	782b      	ldrb	r3, [r5, #0]
	data_l = ((data<<4)&0xf0);
 80037e4:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80037e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80037ea:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80037ec:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80037f0:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80037f4:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80037f8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80037fc:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003800:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003804:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003808:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800380c:	2304      	movs	r3, #4
 800380e:	214e      	movs	r1, #78	; 0x4e
 8003810:	aa03      	add	r2, sp, #12
 8003812:	484c      	ldr	r0, [pc, #304]	; (8003944 <lcd_psu_update+0xa00>)
 8003814:	f004 fd60 	bl	80082d8 <HAL_I2C_Master_Transmit>
}
 8003818:	e6b1      	b.n	800357e <lcd_psu_update+0x63a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800381a:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[1]);
 800381c:	786b      	ldrb	r3, [r5, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800381e:	4849      	ldr	r0, [pc, #292]	; (8003944 <lcd_psu_update+0xa00>)
	data_l = ((data<<4)&0xf0);
 8003820:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003826:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800382a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800382c:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003830:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003834:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003838:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800383c:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003840:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003844:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003848:	2304      	movs	r3, #4
 800384a:	214e      	movs	r1, #78	; 0x4e
 800384c:	aa03      	add	r2, sp, #12
 800384e:	9400      	str	r4, [sp, #0]
 8003850:	f004 fd42 	bl	80082d8 <HAL_I2C_Master_Transmit>
}
 8003854:	e716      	b.n	8003684 <lcd_psu_update+0x740>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003856:	9400      	str	r4, [sp, #0]
			lcd_send_data(keypadarr[0]);
 8003858:	782b      	ldrb	r3, [r5, #0]
	data_l = ((data<<4)&0xf0);
 800385a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800385c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003860:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003862:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003866:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800386a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800386e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003872:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003876:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800387a:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800387e:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003882:	2304      	movs	r3, #4
 8003884:	214e      	movs	r1, #78	; 0x4e
 8003886:	aa03      	add	r2, sp, #12
 8003888:	482e      	ldr	r0, [pc, #184]	; (8003944 <lcd_psu_update+0xa00>)
 800388a:	f004 fd25 	bl	80082d8 <HAL_I2C_Master_Transmit>
}
 800388e:	e6f5      	b.n	800367c <lcd_psu_update+0x738>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003890:	2064      	movs	r0, #100	; 0x64
			lcd_send_data(keypadarr[4]);
 8003892:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003894:	9000      	str	r0, [sp, #0]
	data_l = ((data<<4)&0xf0);
 8003896:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800389c:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800389e:	f043 010d 	orr.w	r1, r3, #13
 80038a2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80038a6:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80038aa:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80038ae:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80038b2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80038b6:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038ba:	2304      	movs	r3, #4
 80038bc:	214e      	movs	r1, #78	; 0x4e
 80038be:	aa03      	add	r2, sp, #12
 80038c0:	4820      	ldr	r0, [pc, #128]	; (8003944 <lcd_psu_update+0xa00>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80038c2:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038c6:	f004 fd07 	bl	80082d8 <HAL_I2C_Master_Transmit>
}
 80038ca:	e6e7      	b.n	800369c <lcd_psu_update+0x758>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038cc:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[3]);
 80038ce:	78eb      	ldrb	r3, [r5, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038d0:	481c      	ldr	r0, [pc, #112]	; (8003944 <lcd_psu_update+0xa00>)
	data_l = ((data<<4)&0xf0);
 80038d2:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80038d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80038d8:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80038dc:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80038de:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80038e2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80038e6:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80038ea:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80038ee:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80038f2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80038f6:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038fa:	2304      	movs	r3, #4
 80038fc:	214e      	movs	r1, #78	; 0x4e
 80038fe:	aa03      	add	r2, sp, #12
 8003900:	9400      	str	r4, [sp, #0]
 8003902:	f004 fce9 	bl	80082d8 <HAL_I2C_Master_Transmit>
}
 8003906:	e6c5      	b.n	8003694 <lcd_psu_update+0x750>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003908:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[2]);
 800390a:	78ab      	ldrb	r3, [r5, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800390c:	480d      	ldr	r0, [pc, #52]	; (8003944 <lcd_psu_update+0xa00>)
	data_l = ((data<<4)&0xf0);
 800390e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003914:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003918:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800391a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800391e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003922:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003926:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800392a:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800392e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003932:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003936:	2304      	movs	r3, #4
 8003938:	214e      	movs	r1, #78	; 0x4e
 800393a:	aa03      	add	r2, sp, #12
 800393c:	9400      	str	r4, [sp, #0]
 800393e:	f004 fccb 	bl	80082d8 <HAL_I2C_Master_Transmit>
}
 8003942:	e6a3      	b.n	800368c <lcd_psu_update+0x748>
 8003944:	200004ec 	.word	0x200004ec

08003948 <translate_keypad>:
float translate_keypad(void){
 8003948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if(keypadarr[i] == '.'){
 800394c:	4ca6      	ldr	r4, [pc, #664]	; (8003be8 <translate_keypad+0x2a0>)
 800394e:	7823      	ldrb	r3, [r4, #0]
 8003950:	7861      	ldrb	r1, [r4, #1]
 8003952:	3b2e      	subs	r3, #46	; 0x2e
 8003954:	78a2      	ldrb	r2, [r4, #2]
 8003956:	bf18      	it	ne
 8003958:	f04f 33ff 	movne.w	r3, #4294967295
	for(int i = 0; i < keypadlength; i++){
 800395c:	292e      	cmp	r1, #46	; 0x2e
 800395e:	bf08      	it	eq
 8003960:	2301      	moveq	r3, #1
		if(keypadarr[i] == '.'){
 8003962:	2a2e      	cmp	r2, #46	; 0x2e
 8003964:	f000 8103 	beq.w	8003b6e <translate_keypad+0x226>
 8003968:	78e2      	ldrb	r2, [r4, #3]
 800396a:	2a2e      	cmp	r2, #46	; 0x2e
 800396c:	d018      	beq.n	80039a0 <translate_keypad+0x58>
 800396e:	7922      	ldrb	r2, [r4, #4]
 8003970:	2a2e      	cmp	r2, #46	; 0x2e
 8003972:	f000 816b 	beq.w	8003c4c <translate_keypad+0x304>
	if(decimallocation == -1){
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	f040 816a 	bne.w	8003c50 <translate_keypad+0x308>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800397c:	7923      	ldrb	r3, [r4, #4]
 800397e:	2b2f      	cmp	r3, #47	; 0x2f
 8003980:	f240 80a5 	bls.w	8003ace <translate_keypad+0x186>
 8003984:	7923      	ldrb	r3, [r4, #4]
 8003986:	2b39      	cmp	r3, #57	; 0x39
 8003988:	f200 80a1 	bhi.w	8003ace <translate_keypad+0x186>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800398c:	7920      	ldrb	r0, [r4, #4]
				count = count * 10;
 800398e:	260a      	movs	r6, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003990:	3830      	subs	r0, #48	; 0x30
 8003992:	f7fd f99b 	bl	8000ccc <__aeabi_i2f>
 8003996:	2100      	movs	r1, #0
 8003998:	f7fd f8e4 	bl	8000b64 <__addsf3>
 800399c:	4605      	mov	r5, r0
				count = count * 10;
 800399e:	e098      	b.n	8003ad2 <translate_keypad+0x18a>
		if(keypadarr[i] == '.'){
 80039a0:	7923      	ldrb	r3, [r4, #4]
	for(int i = 0; i < keypadlength; i++){
 80039a2:	2b2e      	cmp	r3, #46	; 0x2e
 80039a4:	bf0c      	ite	eq
 80039a6:	2704      	moveq	r7, #4
 80039a8:	2703      	movne	r7, #3
		for(int i = decimallocation-1; i >=0; i--){
 80039aa:	1e7e      	subs	r6, r7, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80039ac:	5da3      	ldrb	r3, [r4, r6]
 80039ae:	2b2f      	cmp	r3, #47	; 0x2f
 80039b0:	d903      	bls.n	80039ba <translate_keypad+0x72>
 80039b2:	5da3      	ldrb	r3, [r4, r6]
 80039b4:	2b39      	cmp	r3, #57	; 0x39
 80039b6:	f240 80fb 	bls.w	8003bb0 <translate_keypad+0x268>
		int count = 1;
 80039ba:	f04f 0801 	mov.w	r8, #1
	float num = 0;
 80039be:	2500      	movs	r5, #0
		for(int i = decimallocation-1; i >=0; i--){
 80039c0:	1e73      	subs	r3, r6, #1
 80039c2:	2e00      	cmp	r6, #0
 80039c4:	f000 80e2 	beq.w	8003b8c <translate_keypad+0x244>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80039c8:	5ce2      	ldrb	r2, [r4, r3]
 80039ca:	2a2f      	cmp	r2, #47	; 0x2f
 80039cc:	d903      	bls.n	80039d6 <translate_keypad+0x8e>
 80039ce:	5ce2      	ldrb	r2, [r4, r3]
 80039d0:	2a39      	cmp	r2, #57	; 0x39
 80039d2:	f240 80f8 	bls.w	8003bc6 <translate_keypad+0x27e>
		for(int i = decimallocation-1; i >=0; i--){
 80039d6:	2e01      	cmp	r6, #1
 80039d8:	f1a6 0902 	sub.w	r9, r6, #2
 80039dc:	f000 80d6 	beq.w	8003b8c <translate_keypad+0x244>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80039e0:	f814 3009 	ldrb.w	r3, [r4, r9]
 80039e4:	2b2f      	cmp	r3, #47	; 0x2f
 80039e6:	d913      	bls.n	8003a10 <translate_keypad+0xc8>
 80039e8:	f814 3009 	ldrb.w	r3, [r4, r9]
 80039ec:	2b39      	cmp	r3, #57	; 0x39
 80039ee:	d80f      	bhi.n	8003a10 <translate_keypad+0xc8>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80039f0:	f814 0009 	ldrb.w	r0, [r4, r9]
 80039f4:	3830      	subs	r0, #48	; 0x30
 80039f6:	fb08 f000 	mul.w	r0, r8, r0
 80039fa:	f7fd f967 	bl	8000ccc <__aeabi_i2f>
 80039fe:	4601      	mov	r1, r0
 8003a00:	4628      	mov	r0, r5
 8003a02:	f7fd f8af 	bl	8000b64 <__addsf3>
 8003a06:	4605      	mov	r5, r0
				count = count * 10;
 8003a08:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8003a0c:	ea4f 0848 	mov.w	r8, r8, lsl #1
		for(int i = decimallocation-1; i >=0; i--){
 8003a10:	f1b9 0f00 	cmp.w	r9, #0
 8003a14:	f000 80ba 	beq.w	8003b8c <translate_keypad+0x244>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003a18:	7823      	ldrb	r3, [r4, #0]
 8003a1a:	2b2f      	cmp	r3, #47	; 0x2f
 8003a1c:	f200 80b8 	bhi.w	8003b90 <translate_keypad+0x248>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003a20:	2f04      	cmp	r7, #4
 8003a22:	f107 0601 	add.w	r6, r7, #1
 8003a26:	d04f      	beq.n	8003ac8 <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003a28:	5da3      	ldrb	r3, [r4, r6]
 8003a2a:	2b2f      	cmp	r3, #47	; 0x2f
 8003a2c:	d903      	bls.n	8003a36 <translate_keypad+0xee>
 8003a2e:	5da3      	ldrb	r3, [r4, r6]
 8003a30:	2b39      	cmp	r3, #57	; 0x39
 8003a32:	f240 80fa 	bls.w	8003c2a <translate_keypad+0x2e2>
 8003a36:	f04f 080a 	mov.w	r8, #10
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003a3a:	2e04      	cmp	r6, #4
 8003a3c:	f106 0701 	add.w	r7, r6, #1
 8003a40:	d042      	beq.n	8003ac8 <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003a42:	5de3      	ldrb	r3, [r4, r7]
 8003a44:	2b2f      	cmp	r3, #47	; 0x2f
 8003a46:	d903      	bls.n	8003a50 <translate_keypad+0x108>
 8003a48:	5de3      	ldrb	r3, [r4, r7]
 8003a4a:	2b39      	cmp	r3, #57	; 0x39
 8003a4c:	f240 80d0 	bls.w	8003bf0 <translate_keypad+0x2a8>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003a50:	2f04      	cmp	r7, #4
 8003a52:	f107 0601 	add.w	r6, r7, #1
 8003a56:	d037      	beq.n	8003ac8 <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003a58:	5da3      	ldrb	r3, [r4, r6]
 8003a5a:	2b2f      	cmp	r3, #47	; 0x2f
 8003a5c:	d919      	bls.n	8003a92 <translate_keypad+0x14a>
 8003a5e:	5da3      	ldrb	r3, [r4, r6]
 8003a60:	2b39      	cmp	r3, #57	; 0x39
 8003a62:	d816      	bhi.n	8003a92 <translate_keypad+0x14a>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003a64:	5da0      	ldrb	r0, [r4, r6]
 8003a66:	f7fd f931 	bl	8000ccc <__aeabi_i2f>
 8003a6a:	4960      	ldr	r1, [pc, #384]	; (8003bec <translate_keypad+0x2a4>)
 8003a6c:	f7fd f878 	bl	8000b60 <__aeabi_fsub>
 8003a70:	4607      	mov	r7, r0
 8003a72:	4640      	mov	r0, r8
 8003a74:	f7fd f92a 	bl	8000ccc <__aeabi_i2f>
 8003a78:	4601      	mov	r1, r0
 8003a7a:	4638      	mov	r0, r7
 8003a7c:	f7fd fa2e 	bl	8000edc <__aeabi_fdiv>
 8003a80:	4601      	mov	r1, r0
 8003a82:	4628      	mov	r0, r5
 8003a84:	f7fd f86e 	bl	8000b64 <__addsf3>
 8003a88:	4605      	mov	r5, r0
				count = count * 10;
 8003a8a:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8003a8e:	ea4f 0848 	mov.w	r8, r8, lsl #1
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003a92:	2e03      	cmp	r6, #3
 8003a94:	d118      	bne.n	8003ac8 <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003a96:	7923      	ldrb	r3, [r4, #4]
 8003a98:	2b2f      	cmp	r3, #47	; 0x2f
 8003a9a:	d915      	bls.n	8003ac8 <translate_keypad+0x180>
 8003a9c:	7923      	ldrb	r3, [r4, #4]
 8003a9e:	2b39      	cmp	r3, #57	; 0x39
 8003aa0:	d812      	bhi.n	8003ac8 <translate_keypad+0x180>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003aa2:	7920      	ldrb	r0, [r4, #4]
 8003aa4:	f7fd f912 	bl	8000ccc <__aeabi_i2f>
 8003aa8:	4950      	ldr	r1, [pc, #320]	; (8003bec <translate_keypad+0x2a4>)
 8003aaa:	f7fd f859 	bl	8000b60 <__aeabi_fsub>
 8003aae:	4604      	mov	r4, r0
 8003ab0:	4640      	mov	r0, r8
 8003ab2:	f7fd f90b 	bl	8000ccc <__aeabi_i2f>
 8003ab6:	4601      	mov	r1, r0
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f7fd fa0f 	bl	8000edc <__aeabi_fdiv>
 8003abe:	4601      	mov	r1, r0
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	f7fd f84f 	bl	8000b64 <__addsf3>
 8003ac6:	4605      	mov	r5, r0
}
 8003ac8:	4628      	mov	r0, r5
 8003aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		int count = 1;
 8003ace:	2601      	movs	r6, #1
	float num = 0;
 8003ad0:	2500      	movs	r5, #0
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003ad2:	78e3      	ldrb	r3, [r4, #3]
 8003ad4:	2b2f      	cmp	r3, #47	; 0x2f
 8003ad6:	d910      	bls.n	8003afa <translate_keypad+0x1b2>
 8003ad8:	78e3      	ldrb	r3, [r4, #3]
 8003ada:	2b39      	cmp	r3, #57	; 0x39
 8003adc:	d80d      	bhi.n	8003afa <translate_keypad+0x1b2>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003ade:	78e0      	ldrb	r0, [r4, #3]
 8003ae0:	3830      	subs	r0, #48	; 0x30
 8003ae2:	fb06 f000 	mul.w	r0, r6, r0
 8003ae6:	f7fd f8f1 	bl	8000ccc <__aeabi_i2f>
 8003aea:	4601      	mov	r1, r0
 8003aec:	4628      	mov	r0, r5
 8003aee:	f7fd f839 	bl	8000b64 <__addsf3>
 8003af2:	4605      	mov	r5, r0
				count = count * 10;
 8003af4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003af8:	0076      	lsls	r6, r6, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003afa:	78a3      	ldrb	r3, [r4, #2]
 8003afc:	2b2f      	cmp	r3, #47	; 0x2f
 8003afe:	d910      	bls.n	8003b22 <translate_keypad+0x1da>
 8003b00:	78a3      	ldrb	r3, [r4, #2]
 8003b02:	2b39      	cmp	r3, #57	; 0x39
 8003b04:	d80d      	bhi.n	8003b22 <translate_keypad+0x1da>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003b06:	78a0      	ldrb	r0, [r4, #2]
 8003b08:	3830      	subs	r0, #48	; 0x30
 8003b0a:	fb06 f000 	mul.w	r0, r6, r0
 8003b0e:	f7fd f8dd 	bl	8000ccc <__aeabi_i2f>
 8003b12:	4601      	mov	r1, r0
 8003b14:	4628      	mov	r0, r5
 8003b16:	f7fd f825 	bl	8000b64 <__addsf3>
 8003b1a:	4605      	mov	r5, r0
				count = count * 10;
 8003b1c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003b20:	0076      	lsls	r6, r6, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003b22:	7863      	ldrb	r3, [r4, #1]
 8003b24:	2b2f      	cmp	r3, #47	; 0x2f
 8003b26:	d910      	bls.n	8003b4a <translate_keypad+0x202>
 8003b28:	7863      	ldrb	r3, [r4, #1]
 8003b2a:	2b39      	cmp	r3, #57	; 0x39
 8003b2c:	d80d      	bhi.n	8003b4a <translate_keypad+0x202>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003b2e:	7860      	ldrb	r0, [r4, #1]
 8003b30:	3830      	subs	r0, #48	; 0x30
 8003b32:	fb06 f000 	mul.w	r0, r6, r0
 8003b36:	f7fd f8c9 	bl	8000ccc <__aeabi_i2f>
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f7fd f811 	bl	8000b64 <__addsf3>
 8003b42:	4605      	mov	r5, r0
				count = count * 10;
 8003b44:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003b48:	0076      	lsls	r6, r6, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003b4a:	7823      	ldrb	r3, [r4, #0]
 8003b4c:	2b2f      	cmp	r3, #47	; 0x2f
 8003b4e:	d9bb      	bls.n	8003ac8 <translate_keypad+0x180>
 8003b50:	7823      	ldrb	r3, [r4, #0]
 8003b52:	2b39      	cmp	r3, #57	; 0x39
 8003b54:	d8b8      	bhi.n	8003ac8 <translate_keypad+0x180>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003b56:	7820      	ldrb	r0, [r4, #0]
 8003b58:	3830      	subs	r0, #48	; 0x30
 8003b5a:	fb06 f000 	mul.w	r0, r6, r0
 8003b5e:	f7fd f8b5 	bl	8000ccc <__aeabi_i2f>
 8003b62:	4601      	mov	r1, r0
 8003b64:	4628      	mov	r0, r5
 8003b66:	f7fc fffd 	bl	8000b64 <__addsf3>
 8003b6a:	4605      	mov	r5, r0
		for(int i = keypadlength-1; i >=0; i--){
 8003b6c:	e7ac      	b.n	8003ac8 <translate_keypad+0x180>
		if(keypadarr[i] == '.'){
 8003b6e:	78e3      	ldrb	r3, [r4, #3]
 8003b70:	2b2e      	cmp	r3, #46	; 0x2e
 8003b72:	f43f af15 	beq.w	80039a0 <translate_keypad+0x58>
 8003b76:	7923      	ldrb	r3, [r4, #4]
	for(int i = 0; i < keypadlength; i++){
 8003b78:	2b2e      	cmp	r3, #46	; 0x2e
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2704      	moveq	r7, #4
 8003b7e:	2702      	movne	r7, #2
 8003b80:	e713      	b.n	80039aa <translate_keypad+0x62>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003b82:	7823      	ldrb	r3, [r4, #0]
 8003b84:	2b2f      	cmp	r3, #47	; 0x2f
 8003b86:	d87a      	bhi.n	8003c7e <translate_keypad+0x336>
 8003b88:	2701      	movs	r7, #1
	float num = 0;
 8003b8a:	2500      	movs	r5, #0
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003b8c:	1c7e      	adds	r6, r7, #1
 8003b8e:	e74b      	b.n	8003a28 <translate_keypad+0xe0>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003b90:	7823      	ldrb	r3, [r4, #0]
 8003b92:	2b39      	cmp	r3, #57	; 0x39
 8003b94:	f63f af44 	bhi.w	8003a20 <translate_keypad+0xd8>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003b98:	7820      	ldrb	r0, [r4, #0]
 8003b9a:	3830      	subs	r0, #48	; 0x30
 8003b9c:	fb08 f000 	mul.w	r0, r8, r0
 8003ba0:	f7fd f894 	bl	8000ccc <__aeabi_i2f>
 8003ba4:	4601      	mov	r1, r0
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f7fc ffdc 	bl	8000b64 <__addsf3>
 8003bac:	4605      	mov	r5, r0
				count = count * 10;
 8003bae:	e737      	b.n	8003a20 <translate_keypad+0xd8>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003bb0:	5da0      	ldrb	r0, [r4, r6]
				count = count * 10;
 8003bb2:	f04f 080a 	mov.w	r8, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003bb6:	3830      	subs	r0, #48	; 0x30
 8003bb8:	f7fd f888 	bl	8000ccc <__aeabi_i2f>
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	f7fc ffd1 	bl	8000b64 <__addsf3>
 8003bc2:	4605      	mov	r5, r0
				count = count * 10;
 8003bc4:	e6fc      	b.n	80039c0 <translate_keypad+0x78>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003bc6:	5ce0      	ldrb	r0, [r4, r3]
 8003bc8:	3830      	subs	r0, #48	; 0x30
 8003bca:	fb08 f000 	mul.w	r0, r8, r0
 8003bce:	f7fd f87d 	bl	8000ccc <__aeabi_i2f>
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f7fc ffc5 	bl	8000b64 <__addsf3>
				count = count * 10;
 8003bda:	eb08 0888 	add.w	r8, r8, r8, lsl #2
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003bde:	4605      	mov	r5, r0
				count = count * 10;
 8003be0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8003be4:	e6f7      	b.n	80039d6 <translate_keypad+0x8e>
 8003be6:	bf00      	nop
 8003be8:	20000000 	.word	0x20000000
 8003bec:	42400000 	.word	0x42400000
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003bf0:	5de0      	ldrb	r0, [r4, r7]
 8003bf2:	f7fd f86b 	bl	8000ccc <__aeabi_i2f>
 8003bf6:	4923      	ldr	r1, [pc, #140]	; (8003c84 <translate_keypad+0x33c>)
 8003bf8:	f7fc ffb2 	bl	8000b60 <__aeabi_fsub>
 8003bfc:	4606      	mov	r6, r0
 8003bfe:	4640      	mov	r0, r8
 8003c00:	f7fd f864 	bl	8000ccc <__aeabi_i2f>
 8003c04:	4601      	mov	r1, r0
 8003c06:	4630      	mov	r0, r6
 8003c08:	f7fd f968 	bl	8000edc <__aeabi_fdiv>
 8003c0c:	4601      	mov	r1, r0
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f7fc ffa8 	bl	8000b64 <__addsf3>
				count = count * 10;
 8003c14:	eb08 0888 	add.w	r8, r8, r8, lsl #2
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003c18:	4605      	mov	r5, r0
				count = count * 10;
 8003c1a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8003c1e:	e717      	b.n	8003a50 <translate_keypad+0x108>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003c20:	7863      	ldrb	r3, [r4, #1]
 8003c22:	2b39      	cmp	r3, #57	; 0x39
 8003c24:	d821      	bhi.n	8003c6a <translate_keypad+0x322>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003c26:	2601      	movs	r6, #1
	float num = 0;
 8003c28:	2500      	movs	r5, #0
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003c2a:	5da0      	ldrb	r0, [r4, r6]
 8003c2c:	f7fd f84e 	bl	8000ccc <__aeabi_i2f>
 8003c30:	4914      	ldr	r1, [pc, #80]	; (8003c84 <translate_keypad+0x33c>)
 8003c32:	f7fc ff95 	bl	8000b60 <__aeabi_fsub>
 8003c36:	4914      	ldr	r1, [pc, #80]	; (8003c88 <translate_keypad+0x340>)
 8003c38:	f7fd f950 	bl	8000edc <__aeabi_fdiv>
 8003c3c:	4601      	mov	r1, r0
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f7fc ff90 	bl	8000b64 <__addsf3>
				count = count * 10;
 8003c44:	f04f 0864 	mov.w	r8, #100	; 0x64
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003c48:	4605      	mov	r5, r0
				count = count * 10;
 8003c4a:	e6f6      	b.n	8003a3a <translate_keypad+0xf2>
	for(int i = 0; i < keypadlength; i++){
 8003c4c:	2704      	movs	r7, #4
 8003c4e:	e6ac      	b.n	80039aa <translate_keypad+0x62>
		for(int i = decimallocation-1; i >=0; i--){
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d196      	bne.n	8003b82 <translate_keypad+0x23a>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003c54:	7863      	ldrb	r3, [r4, #1]
 8003c56:	2b2f      	cmp	r3, #47	; 0x2f
 8003c58:	d8e2      	bhi.n	8003c20 <translate_keypad+0x2d8>
 8003c5a:	78a3      	ldrb	r3, [r4, #2]
 8003c5c:	2b2f      	cmp	r3, #47	; 0x2f
 8003c5e:	d909      	bls.n	8003c74 <translate_keypad+0x32c>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003c60:	2702      	movs	r7, #2
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003c62:	f04f 080a 	mov.w	r8, #10
	float num = 0;
 8003c66:	2500      	movs	r5, #0
 8003c68:	e6ee      	b.n	8003a48 <translate_keypad+0x100>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003c6a:	2702      	movs	r7, #2
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003c6c:	f04f 080a 	mov.w	r8, #10
	float num = 0;
 8003c70:	2500      	movs	r5, #0
 8003c72:	e6e6      	b.n	8003a42 <translate_keypad+0xfa>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003c74:	2603      	movs	r6, #3
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003c76:	f04f 080a 	mov.w	r8, #10
	float num = 0;
 8003c7a:	2500      	movs	r5, #0
 8003c7c:	e6ec      	b.n	8003a58 <translate_keypad+0x110>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003c7e:	2600      	movs	r6, #0
 8003c80:	2701      	movs	r7, #1
 8003c82:	e696      	b.n	80039b2 <translate_keypad+0x6a>
 8003c84:	42400000 	.word	0x42400000
 8003c88:	41200000 	.word	0x41200000
 8003c8c:	00000000 	.word	0x00000000

08003c90 <fill_keypad>:
void fill_keypad(uint8_t va, float num){
 8003c90:	b5f0      	push	{r4, r5, r6, r7, lr}
				keypaddecimal = 0;
 8003c92:	f04f 0c00 	mov.w	ip, #0
			keypadarr[0] = num;
 8003c96:	277a      	movs	r7, #122	; 0x7a
void fill_keypad(uint8_t va, float num){
 8003c98:	460e      	mov	r6, r1
 8003c9a:	4c85      	ldr	r4, [pc, #532]	; (8003eb0 <fill_keypad+0x220>)
			if(keypadarr[4] == '.'){
 8003c9c:	4b85      	ldr	r3, [pc, #532]	; (8003eb4 <fill_keypad+0x224>)
				keypaddecimal = 0;
 8003c9e:	4d86      	ldr	r5, [pc, #536]	; (8003eb8 <fill_keypad+0x228>)
void fill_keypad(uint8_t va, float num){
 8003ca0:	b083      	sub	sp, #12
	while(keypaditerator < 4){
 8003ca2:	7822      	ldrb	r2, [r4, #0]
 8003ca4:	b252      	sxtb	r2, r2
 8003ca6:	2a03      	cmp	r2, #3
 8003ca8:	dc1d      	bgt.n	8003ce6 <fill_keypad+0x56>
		if(keypaditerator < keypadlength-1){
 8003caa:	7822      	ldrb	r2, [r4, #0]
 8003cac:	b252      	sxtb	r2, r2
 8003cae:	2a03      	cmp	r2, #3
 8003cb0:	dcf7      	bgt.n	8003ca2 <fill_keypad+0x12>
			if(keypadarr[4] == '.'){
 8003cb2:	791a      	ldrb	r2, [r3, #4]
 8003cb4:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8003cb6:	bf08      	it	eq
 8003cb8:	f885 c000 	strbeq.w	ip, [r5]
				keypadarr[i+1] = keypadarr[i];
 8003cbc:	78da      	ldrb	r2, [r3, #3]
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	711a      	strb	r2, [r3, #4]
 8003cc2:	789a      	ldrb	r2, [r3, #2]
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	70da      	strb	r2, [r3, #3]
 8003cc8:	785a      	ldrb	r2, [r3, #1]
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	709a      	strb	r2, [r3, #2]
 8003cce:	781a      	ldrb	r2, [r3, #0]
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	705a      	strb	r2, [r3, #1]
			keypadarr[0] = num;
 8003cd4:	701f      	strb	r7, [r3, #0]
			keypaditerator++;
 8003cd6:	7822      	ldrb	r2, [r4, #0]
 8003cd8:	3201      	adds	r2, #1
 8003cda:	b252      	sxtb	r2, r2
 8003cdc:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8003cde:	7822      	ldrb	r2, [r4, #0]
 8003ce0:	b252      	sxtb	r2, r2
 8003ce2:	2a03      	cmp	r2, #3
 8003ce4:	dde1      	ble.n	8003caa <fill_keypad+0x1a>
	if(va){
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d054      	beq.n	8003d94 <fill_keypad+0x104>
		volatile int temp = (int)(num * 1000);
 8003cea:	4974      	ldr	r1, [pc, #464]	; (8003ebc <fill_keypad+0x22c>)
 8003cec:	4630      	mov	r0, r6
 8003cee:	f7fd f841 	bl	8000d74 <__aeabi_fmul>
 8003cf2:	f7fd fa05 	bl	8001100 <__aeabi_f2iz>
 8003cf6:	4603      	mov	r3, r0
		if(num <= 0.0001){
 8003cf8:	4630      	mov	r0, r6
		volatile int temp = (int)(num * 1000);
 8003cfa:	9300      	str	r3, [sp, #0]
		if(num <= 0.0001){
 8003cfc:	f7fc fbac 	bl	8000458 <__aeabi_f2d>
 8003d00:	a363      	add	r3, pc, #396	; (adr r3, 8003e90 <fill_keypad+0x200>)
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	4606      	mov	r6, r0
 8003d08:	460f      	mov	r7, r1
 8003d0a:	f7fc fe79 	bl	8000a00 <__aeabi_dcmple>
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	f040 809e 	bne.w	8003e50 <fill_keypad+0x1c0>
					keypadarr[keypaditerator] = '.';
 8003d14:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8003d18:	4969      	ldr	r1, [pc, #420]	; (8003ec0 <fill_keypad+0x230>)
 8003d1a:	4866      	ldr	r0, [pc, #408]	; (8003eb4 <fill_keypad+0x224>)
 8003d1c:	e020      	b.n	8003d60 <fill_keypad+0xd0>
			while(temp != 0 && keypaditerator >= 0){
 8003d1e:	7823      	ldrb	r3, [r4, #0]
 8003d20:	061b      	lsls	r3, r3, #24
 8003d22:	d420      	bmi.n	8003d66 <fill_keypad+0xd6>
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8003d24:	9b00      	ldr	r3, [sp, #0]
 8003d26:	7825      	ldrb	r5, [r4, #0]
 8003d28:	fb81 2e03 	smull	r2, lr, r1, r3
 8003d2c:	17da      	asrs	r2, r3, #31
 8003d2e:	ebc2 02ae 	rsb	r2, r2, lr, asr #2
 8003d32:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003d36:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8003d3a:	3330      	adds	r3, #48	; 0x30
 8003d3c:	b26d      	sxtb	r5, r5
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	5543      	strb	r3, [r0, r5]
				temp = temp / 10;
 8003d42:	9b00      	ldr	r3, [sp, #0]
 8003d44:	fb81 5203 	smull	r5, r2, r1, r3
 8003d48:	17db      	asrs	r3, r3, #31
 8003d4a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8003d4e:	9300      	str	r3, [sp, #0]
				keypaditerator--;
 8003d50:	7823      	ldrb	r3, [r4, #0]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b25b      	sxtb	r3, r3
 8003d56:	7023      	strb	r3, [r4, #0]
				if(keypaditerator == 1){
 8003d58:	7823      	ldrb	r3, [r4, #0]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	f000 8084 	beq.w	8003e68 <fill_keypad+0x1d8>
			while(temp != 0 && keypaditerator >= 0){
 8003d60:	9b00      	ldr	r3, [sp, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1db      	bne.n	8003d1e <fill_keypad+0x8e>
			if(keypaditerator >= 0 && num <= 0.999999){
 8003d66:	7823      	ldrb	r3, [r4, #0]
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	d46f      	bmi.n	8003e4c <fill_keypad+0x1bc>
 8003d6c:	a34a      	add	r3, pc, #296	; (adr r3, 8003e98 <fill_keypad+0x208>)
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	4630      	mov	r0, r6
 8003d74:	4639      	mov	r1, r7
 8003d76:	f7fc fe43 	bl	8000a00 <__aeabi_dcmple>
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d066      	beq.n	8003e4c <fill_keypad+0x1bc>
				keypadarr[keypaditerator] = '0';
 8003d7e:	2130      	movs	r1, #48	; 0x30
 8003d80:	7823      	ldrb	r3, [r4, #0]
 8003d82:	4a4c      	ldr	r2, [pc, #304]	; (8003eb4 <fill_keypad+0x224>)
 8003d84:	b25b      	sxtb	r3, r3
 8003d86:	54d1      	strb	r1, [r2, r3]
				keypaditerator--;
 8003d88:	7823      	ldrb	r3, [r4, #0]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b25b      	sxtb	r3, r3
 8003d8e:	7023      	strb	r3, [r4, #0]
}
 8003d90:	b003      	add	sp, #12
 8003d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		volatile int temp = (int)(num * 100);
 8003d94:	494b      	ldr	r1, [pc, #300]	; (8003ec4 <fill_keypad+0x234>)
 8003d96:	4630      	mov	r0, r6
 8003d98:	f7fc ffec 	bl	8000d74 <__aeabi_fmul>
 8003d9c:	f7fd f9b0 	bl	8001100 <__aeabi_f2iz>
 8003da0:	4603      	mov	r3, r0
		if(num <= 0.001){
 8003da2:	4630      	mov	r0, r6
		volatile int temp = (int)(num * 100);
 8003da4:	9301      	str	r3, [sp, #4]
		if(num <= 0.001){
 8003da6:	f7fc fb57 	bl	8000458 <__aeabi_f2d>
 8003daa:	a33d      	add	r3, pc, #244	; (adr r3, 8003ea0 <fill_keypad+0x210>)
 8003dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db0:	4606      	mov	r6, r0
 8003db2:	460f      	mov	r7, r1
 8003db4:	f7fc fe24 	bl	8000a00 <__aeabi_dcmple>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d13d      	bne.n	8003e38 <fill_keypad+0x1a8>
					keypadarr[keypaditerator] = '.';
 8003dbc:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8003dc0:	493f      	ldr	r1, [pc, #252]	; (8003ec0 <fill_keypad+0x230>)
 8003dc2:	483c      	ldr	r0, [pc, #240]	; (8003eb4 <fill_keypad+0x224>)
 8003dc4:	e01f      	b.n	8003e06 <fill_keypad+0x176>
			while(temp != 0 && keypaditerator >= 0){
 8003dc6:	7823      	ldrb	r3, [r4, #0]
 8003dc8:	061d      	lsls	r5, r3, #24
 8003dca:	d41f      	bmi.n	8003e0c <fill_keypad+0x17c>
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8003dcc:	9b01      	ldr	r3, [sp, #4]
 8003dce:	7825      	ldrb	r5, [r4, #0]
 8003dd0:	fb81 2e03 	smull	r2, lr, r1, r3
 8003dd4:	17da      	asrs	r2, r3, #31
 8003dd6:	ebc2 02ae 	rsb	r2, r2, lr, asr #2
 8003dda:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003dde:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8003de2:	3330      	adds	r3, #48	; 0x30
 8003de4:	b26d      	sxtb	r5, r5
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	5543      	strb	r3, [r0, r5]
				temp = temp / 10;
 8003dea:	9b01      	ldr	r3, [sp, #4]
 8003dec:	fb81 5203 	smull	r5, r2, r1, r3
 8003df0:	17db      	asrs	r3, r3, #31
 8003df2:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8003df6:	9301      	str	r3, [sp, #4]
				keypaditerator--;
 8003df8:	7823      	ldrb	r3, [r4, #0]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b25b      	sxtb	r3, r3
 8003dfe:	7023      	strb	r3, [r4, #0]
				if(keypaditerator == 2){
 8003e00:	7823      	ldrb	r3, [r4, #0]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d039      	beq.n	8003e7a <fill_keypad+0x1ea>
			while(temp != 0 && keypaditerator >= 0){
 8003e06:	9b01      	ldr	r3, [sp, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1dc      	bne.n	8003dc6 <fill_keypad+0x136>
			if(keypaditerator >= 0 && num <= 9.999999){
 8003e0c:	7823      	ldrb	r3, [r4, #0]
 8003e0e:	061a      	lsls	r2, r3, #24
 8003e10:	d4a9      	bmi.n	8003d66 <fill_keypad+0xd6>
 8003e12:	a325      	add	r3, pc, #148	; (adr r3, 8003ea8 <fill_keypad+0x218>)
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	4630      	mov	r0, r6
 8003e1a:	4639      	mov	r1, r7
 8003e1c:	f7fc fdf0 	bl	8000a00 <__aeabi_dcmple>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d0a0      	beq.n	8003d66 <fill_keypad+0xd6>
				keypadarr[keypaditerator] = '0';
 8003e24:	2130      	movs	r1, #48	; 0x30
 8003e26:	7823      	ldrb	r3, [r4, #0]
 8003e28:	4a22      	ldr	r2, [pc, #136]	; (8003eb4 <fill_keypad+0x224>)
 8003e2a:	b25b      	sxtb	r3, r3
 8003e2c:	54d1      	strb	r1, [r2, r3]
				keypaditerator--;
 8003e2e:	7823      	ldrb	r3, [r4, #0]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b25b      	sxtb	r3, r3
 8003e34:	7023      	strb	r3, [r4, #0]
 8003e36:	e796      	b.n	8003d66 <fill_keypad+0xd6>
			keypadarr[0] = '0';
 8003e38:	2230      	movs	r2, #48	; 0x30
			keypadarr[2] = '.';
 8003e3a:	202e      	movs	r0, #46	; 0x2e
			keypaditerator = -1;
 8003e3c:	21ff      	movs	r1, #255	; 0xff
			keypadarr[0] = '0';
 8003e3e:	4b1d      	ldr	r3, [pc, #116]	; (8003eb4 <fill_keypad+0x224>)
 8003e40:	701a      	strb	r2, [r3, #0]
			keypadarr[1] = '0';
 8003e42:	705a      	strb	r2, [r3, #1]
			keypadarr[2] = '.';
 8003e44:	7098      	strb	r0, [r3, #2]
			keypadarr[3] = '0';
 8003e46:	70da      	strb	r2, [r3, #3]
			keypadarr[4] = '0';
 8003e48:	711a      	strb	r2, [r3, #4]
			keypaditerator = -1;
 8003e4a:	7021      	strb	r1, [r4, #0]
}
 8003e4c:	b003      	add	sp, #12
 8003e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			keypadarr[0] = '0';
 8003e50:	2230      	movs	r2, #48	; 0x30
			keypadarr[1] = '.';
 8003e52:	202e      	movs	r0, #46	; 0x2e
			keypaditerator = -1;
 8003e54:	21ff      	movs	r1, #255	; 0xff
			keypadarr[0] = '0';
 8003e56:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <fill_keypad+0x224>)
 8003e58:	701a      	strb	r2, [r3, #0]
			keypadarr[1] = '.';
 8003e5a:	7058      	strb	r0, [r3, #1]
			keypadarr[2] = '0';
 8003e5c:	709a      	strb	r2, [r3, #2]
			keypadarr[3] = '0';
 8003e5e:	70da      	strb	r2, [r3, #3]
			keypadarr[4] = '0';
 8003e60:	711a      	strb	r2, [r3, #4]
			keypaditerator = -1;
 8003e62:	7021      	strb	r1, [r4, #0]
}
 8003e64:	b003      	add	sp, #12
 8003e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
					keypadarr[keypaditerator] = '.';
 8003e68:	7823      	ldrb	r3, [r4, #0]
 8003e6a:	b25b      	sxtb	r3, r3
 8003e6c:	f800 c003 	strb.w	ip, [r0, r3]
					keypaditerator--;
 8003e70:	7823      	ldrb	r3, [r4, #0]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b25b      	sxtb	r3, r3
 8003e76:	7023      	strb	r3, [r4, #0]
 8003e78:	e772      	b.n	8003d60 <fill_keypad+0xd0>
					keypadarr[keypaditerator] = '.';
 8003e7a:	7823      	ldrb	r3, [r4, #0]
 8003e7c:	b25b      	sxtb	r3, r3
 8003e7e:	f800 c003 	strb.w	ip, [r0, r3]
					keypaditerator--;
 8003e82:	7823      	ldrb	r3, [r4, #0]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b25b      	sxtb	r3, r3
 8003e88:	7023      	strb	r3, [r4, #0]
 8003e8a:	e7bc      	b.n	8003e06 <fill_keypad+0x176>
 8003e8c:	f3af 8000 	nop.w
 8003e90:	eb1c432d 	.word	0xeb1c432d
 8003e94:	3f1a36e2 	.word	0x3f1a36e2
 8003e98:	e7210be9 	.word	0xe7210be9
 8003e9c:	3feffffd 	.word	0x3feffffd
 8003ea0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ea4:	3f50624d 	.word	0x3f50624d
 8003ea8:	de7210bf 	.word	0xde7210bf
 8003eac:	4023ffff 	.word	0x4023ffff
 8003eb0:	20000005 	.word	0x20000005
 8003eb4:	20000000 	.word	0x20000000
 8003eb8:	200006c4 	.word	0x200006c4
 8003ebc:	447a0000 	.word	0x447a0000
 8003ec0:	66666667 	.word	0x66666667
 8003ec4:	42c80000 	.word	0x42c80000

08003ec8 <keypad_sm>:
void keypad_sm(char num){
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(kpenum == WAIT){
 8003eca:	4e9b      	ldr	r6, [pc, #620]	; (8004138 <keypad_sm+0x270>)
 8003ecc:	7834      	ldrb	r4, [r6, #0]
 8003ece:	b994      	cbnz	r4, 8003ef6 <keypad_sm+0x2e>
		if(num == 'A'){
 8003ed0:	2841      	cmp	r0, #65	; 0x41
 8003ed2:	f000 80a6 	beq.w	8004022 <keypad_sm+0x15a>
		else if(num == 'B'){
 8003ed6:	2842      	cmp	r0, #66	; 0x42
 8003ed8:	f000 813c 	beq.w	8004154 <keypad_sm+0x28c>
		else if(num == 'C'){
 8003edc:	2843      	cmp	r0, #67	; 0x43
 8003ede:	f000 8101 	beq.w	80040e4 <keypad_sm+0x21c>
		else if(num == 'D'){
 8003ee2:	2844      	cmp	r0, #68	; 0x44
 8003ee4:	f000 8303 	beq.w	80044ee <keypad_sm+0x626>
		else if(num == '*'){
 8003ee8:	282a      	cmp	r0, #42	; 0x2a
 8003eea:	f000 8329 	beq.w	8004540 <keypad_sm+0x678>
		else if(num == '/'){
 8003eee:	282f      	cmp	r0, #47	; 0x2f
 8003ef0:	f000 82a2 	beq.w	8004438 <keypad_sm+0x570>
}
 8003ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(kpenum == V1){
 8003ef6:	2c01      	cmp	r4, #1
 8003ef8:	d04d      	beq.n	8003f96 <keypad_sm+0xce>
	else if(kpenum == A1){
 8003efa:	2c02      	cmp	r4, #2
 8003efc:	f000 8153 	beq.w	80041a6 <keypad_sm+0x2de>
	else if(kpenum == V2){
 8003f00:	2c03      	cmp	r4, #3
 8003f02:	f000 80b7 	beq.w	8004074 <keypad_sm+0x1ac>
	else if(kpenum == A2){
 8003f06:	2c04      	cmp	r4, #4
 8003f08:	d1f4      	bne.n	8003ef4 <keypad_sm+0x2c>
		if(encmode){
 8003f0a:	4c8c      	ldr	r4, [pc, #560]	; (800413c <keypad_sm+0x274>)
 8003f0c:	7823      	ldrb	r3, [r4, #0]
 8003f0e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 831c 	beq.w	8004550 <keypad_sm+0x688>
			if(num == 'A'){
 8003f18:	2841      	cmp	r0, #65	; 0x41
 8003f1a:	f000 8565 	beq.w	80049e8 <keypad_sm+0xb20>
			else if(num == 'B'){
 8003f1e:	2842      	cmp	r0, #66	; 0x42
 8003f20:	f000 8762 	beq.w	8004de8 <keypad_sm+0xf20>
			else if(num == 'C'){
 8003f24:	2843      	cmp	r0, #67	; 0x43
 8003f26:	f001 8061 	beq.w	8004fec <keypad_sm+0x1124>
			else if(num == 'D'){
 8003f2a:	2844      	cmp	r0, #68	; 0x44
 8003f2c:	f001 831c 	beq.w	8005568 <keypad_sm+0x16a0>
			else if(num == '.'){
 8003f30:	282e      	cmp	r0, #46	; 0x2e
 8003f32:	f001 824b 	beq.w	80053cc <keypad_sm+0x1504>
			else if(num >= '0' && num <= '9'){
 8003f36:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003f3a:	2b09      	cmp	r3, #9
 8003f3c:	f201 82bc 	bhi.w	80054b8 <keypad_sm+0x15f0>
				keypaddecimal = 0;
 8003f40:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8003f42:	207a      	movs	r0, #122	; 0x7a
 8003f44:	4b7e      	ldr	r3, [pc, #504]	; (8004140 <keypad_sm+0x278>)
			if(keypadarr[4] == '.'){
 8003f46:	4a7f      	ldr	r2, [pc, #508]	; (8004144 <keypad_sm+0x27c>)
				keypaddecimal = 0;
 8003f48:	4d7f      	ldr	r5, [pc, #508]	; (8004148 <keypad_sm+0x280>)
	while(keypaditerator < 4){
 8003f4a:	7819      	ldrb	r1, [r3, #0]
 8003f4c:	b249      	sxtb	r1, r1
 8003f4e:	2903      	cmp	r1, #3
 8003f50:	dc1c      	bgt.n	8003f8c <keypad_sm+0xc4>
		if(keypaditerator < keypadlength-1){
 8003f52:	7819      	ldrb	r1, [r3, #0]
 8003f54:	b249      	sxtb	r1, r1
 8003f56:	2903      	cmp	r1, #3
 8003f58:	dcf7      	bgt.n	8003f4a <keypad_sm+0x82>
			if(keypadarr[4] == '.'){
 8003f5a:	7911      	ldrb	r1, [r2, #4]
 8003f5c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003f5e:	bf08      	it	eq
 8003f60:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003f62:	78d1      	ldrb	r1, [r2, #3]
 8003f64:	b2c9      	uxtb	r1, r1
 8003f66:	7111      	strb	r1, [r2, #4]
 8003f68:	7891      	ldrb	r1, [r2, #2]
 8003f6a:	b2c9      	uxtb	r1, r1
 8003f6c:	70d1      	strb	r1, [r2, #3]
 8003f6e:	7851      	ldrb	r1, [r2, #1]
 8003f70:	b2c9      	uxtb	r1, r1
 8003f72:	7091      	strb	r1, [r2, #2]
 8003f74:	7811      	ldrb	r1, [r2, #0]
 8003f76:	b2c9      	uxtb	r1, r1
 8003f78:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003f7a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003f7c:	7819      	ldrb	r1, [r3, #0]
 8003f7e:	3101      	adds	r1, #1
 8003f80:	b249      	sxtb	r1, r1
 8003f82:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003f84:	7819      	ldrb	r1, [r3, #0]
 8003f86:	b249      	sxtb	r1, r1
 8003f88:	2903      	cmp	r1, #3
 8003f8a:	dde2      	ble.n	8003f52 <keypad_sm+0x8a>
				encmode = 0;
 8003f8c:	2300      	movs	r3, #0
				encpos = 0;
 8003f8e:	4a6f      	ldr	r2, [pc, #444]	; (800414c <keypad_sm+0x284>)
				encmode = 0;
 8003f90:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8003f92:	7013      	strb	r3, [r2, #0]
}
 8003f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(encmode){
 8003f96:	4c69      	ldr	r4, [pc, #420]	; (800413c <keypad_sm+0x274>)
 8003f98:	7823      	ldrb	r3, [r4, #0]
 8003f9a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8146 	beq.w	8004230 <keypad_sm+0x368>
			if(num == 'A'){
 8003fa4:	2841      	cmp	r0, #65	; 0x41
 8003fa6:	f000 8304 	beq.w	80045b2 <keypad_sm+0x6ea>
			else if(num == 'B'){
 8003faa:	2842      	cmp	r0, #66	; 0x42
 8003fac:	f000 81e1 	beq.w	8004372 <keypad_sm+0x4aa>
			else if(num == 'C'){
 8003fb0:	2843      	cmp	r0, #67	; 0x43
 8003fb2:	f000 83b4 	beq.w	800471e <keypad_sm+0x856>
			else if(num == 'D'){
 8003fb6:	2844      	cmp	r0, #68	; 0x44
 8003fb8:	f000 845c 	beq.w	8004874 <keypad_sm+0x9ac>
			else if(num == '.'){
 8003fbc:	282e      	cmp	r0, #46	; 0x2e
 8003fbe:	f000 8686 	beq.w	8004cce <keypad_sm+0xe06>
			else if(num >= '0' && num <= '9'){
 8003fc2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003fc6:	2b09      	cmp	r3, #9
 8003fc8:	f200 863b 	bhi.w	8004c42 <keypad_sm+0xd7a>
				keypaddecimal = 0;
 8003fcc:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8003fce:	207a      	movs	r0, #122	; 0x7a
 8003fd0:	4b5b      	ldr	r3, [pc, #364]	; (8004140 <keypad_sm+0x278>)
			if(keypadarr[4] == '.'){
 8003fd2:	4a5c      	ldr	r2, [pc, #368]	; (8004144 <keypad_sm+0x27c>)
				keypaddecimal = 0;
 8003fd4:	4d5c      	ldr	r5, [pc, #368]	; (8004148 <keypad_sm+0x280>)
	while(keypaditerator < 4){
 8003fd6:	7819      	ldrb	r1, [r3, #0]
 8003fd8:	b249      	sxtb	r1, r1
 8003fda:	2903      	cmp	r1, #3
 8003fdc:	dc1c      	bgt.n	8004018 <keypad_sm+0x150>
		if(keypaditerator < keypadlength-1){
 8003fde:	7819      	ldrb	r1, [r3, #0]
 8003fe0:	b249      	sxtb	r1, r1
 8003fe2:	2903      	cmp	r1, #3
 8003fe4:	dcf7      	bgt.n	8003fd6 <keypad_sm+0x10e>
			if(keypadarr[4] == '.'){
 8003fe6:	7911      	ldrb	r1, [r2, #4]
 8003fe8:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003fea:	bf08      	it	eq
 8003fec:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003fee:	78d1      	ldrb	r1, [r2, #3]
 8003ff0:	b2c9      	uxtb	r1, r1
 8003ff2:	7111      	strb	r1, [r2, #4]
 8003ff4:	7891      	ldrb	r1, [r2, #2]
 8003ff6:	b2c9      	uxtb	r1, r1
 8003ff8:	70d1      	strb	r1, [r2, #3]
 8003ffa:	7851      	ldrb	r1, [r2, #1]
 8003ffc:	b2c9      	uxtb	r1, r1
 8003ffe:	7091      	strb	r1, [r2, #2]
 8004000:	7811      	ldrb	r1, [r2, #0]
 8004002:	b2c9      	uxtb	r1, r1
 8004004:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004006:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004008:	7819      	ldrb	r1, [r3, #0]
 800400a:	3101      	adds	r1, #1
 800400c:	b249      	sxtb	r1, r1
 800400e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004010:	7819      	ldrb	r1, [r3, #0]
 8004012:	b249      	sxtb	r1, r1
 8004014:	2903      	cmp	r1, #3
 8004016:	dde2      	ble.n	8003fde <keypad_sm+0x116>
				encmode = 0;
 8004018:	2300      	movs	r3, #0
				encpos = 0;
 800401a:	4a4c      	ldr	r2, [pc, #304]	; (800414c <keypad_sm+0x284>)
				encmode = 0;
 800401c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800401e:	7013      	strb	r3, [r2, #0]
}
 8004020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			kpenum = V1;
 8004022:	2101      	movs	r1, #1
			keypadarr[0] = num;
 8004024:	207a      	movs	r0, #122	; 0x7a
 8004026:	4b46      	ldr	r3, [pc, #280]	; (8004140 <keypad_sm+0x278>)
			if(keypadarr[4] == '.'){
 8004028:	4a46      	ldr	r2, [pc, #280]	; (8004144 <keypad_sm+0x27c>)
				keypaddecimal = 0;
 800402a:	4d47      	ldr	r5, [pc, #284]	; (8004148 <keypad_sm+0x280>)
			kpenum = V1;
 800402c:	7031      	strb	r1, [r6, #0]
	while(keypaditerator < 4){
 800402e:	7819      	ldrb	r1, [r3, #0]
 8004030:	b249      	sxtb	r1, r1
 8004032:	2903      	cmp	r1, #3
 8004034:	f73f af5e 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004038:	7819      	ldrb	r1, [r3, #0]
 800403a:	b249      	sxtb	r1, r1
 800403c:	2903      	cmp	r1, #3
 800403e:	dcf6      	bgt.n	800402e <keypad_sm+0x166>
			if(keypadarr[4] == '.'){
 8004040:	7911      	ldrb	r1, [r2, #4]
 8004042:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004044:	bf08      	it	eq
 8004046:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004048:	78d1      	ldrb	r1, [r2, #3]
 800404a:	b2c9      	uxtb	r1, r1
 800404c:	7111      	strb	r1, [r2, #4]
 800404e:	7891      	ldrb	r1, [r2, #2]
 8004050:	b2c9      	uxtb	r1, r1
 8004052:	70d1      	strb	r1, [r2, #3]
 8004054:	7851      	ldrb	r1, [r2, #1]
 8004056:	b2c9      	uxtb	r1, r1
 8004058:	7091      	strb	r1, [r2, #2]
 800405a:	7811      	ldrb	r1, [r2, #0]
 800405c:	b2c9      	uxtb	r1, r1
 800405e:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004060:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004062:	7819      	ldrb	r1, [r3, #0]
 8004064:	3101      	adds	r1, #1
 8004066:	b249      	sxtb	r1, r1
 8004068:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800406a:	7819      	ldrb	r1, [r3, #0]
 800406c:	b249      	sxtb	r1, r1
 800406e:	2903      	cmp	r1, #3
 8004070:	dde2      	ble.n	8004038 <keypad_sm+0x170>
}
 8004072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(encmode){
 8004074:	4c31      	ldr	r4, [pc, #196]	; (800413c <keypad_sm+0x274>)
 8004076:	7823      	ldrb	r3, [r4, #0]
 8004078:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 8139 	bne.w	80042f4 <keypad_sm+0x42c>
			if(num == 'A'){
 8004082:	2841      	cmp	r0, #65	; 0x41
 8004084:	f000 83a3 	beq.w	80047ce <keypad_sm+0x906>
			else if(num == 'B'){
 8004088:	2842      	cmp	r0, #66	; 0x42
 800408a:	f000 8505 	beq.w	8004a98 <keypad_sm+0xbd0>
			else if(num == 'C'){
 800408e:	2843      	cmp	r0, #67	; 0x43
 8004090:	f001 8060 	beq.w	8005154 <keypad_sm+0x128c>
			else if(num == 'D'){
 8004094:	2844      	cmp	r0, #68	; 0x44
 8004096:	f000 872a 	beq.w	8004eee <keypad_sm+0x1026>
			else if(num == '.'){
 800409a:	282e      	cmp	r0, #46	; 0x2e
 800409c:	f001 8243 	beq.w	8005526 <keypad_sm+0x165e>
			else if(num >= '0' && num <= '9'){
 80040a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80040a4:	2b09      	cmp	r3, #9
 80040a6:	f240 8473 	bls.w	8004990 <keypad_sm+0xac8>
			else if(num == '#'){
 80040aa:	2823      	cmp	r0, #35	; 0x23
 80040ac:	f001 829d 	beq.w	80055ea <keypad_sm+0x1722>
			else if(num == '+'){
 80040b0:	282b      	cmp	r0, #43	; 0x2b
 80040b2:	f001 848b 	beq.w	80059cc <keypad_sm+0x1b04>
			else if(num == '-'){
 80040b6:	282d      	cmp	r0, #45	; 0x2d
 80040b8:	f001 840c 	beq.w	80058d4 <keypad_sm+0x1a0c>
			else if(num == 's'){
 80040bc:	2873      	cmp	r0, #115	; 0x73
 80040be:	f001 85bb 	beq.w	8005c38 <keypad_sm+0x1d70>
			else if(num == '['){
 80040c2:	285b      	cmp	r0, #91	; 0x5b
 80040c4:	f001 85ad 	beq.w	8005c22 <keypad_sm+0x1d5a>
			else if(num == ']'){
 80040c8:	285d      	cmp	r0, #93	; 0x5d
 80040ca:	f47f af13 	bne.w	8003ef4 <keypad_sm+0x2c>
				fill_keypad(0, volt_set_main);
 80040ce:	4b20      	ldr	r3, [pc, #128]	; (8004150 <keypad_sm+0x288>)
 80040d0:	2000      	movs	r0, #0
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	f7ff fddc 	bl	8003c90 <fill_keypad>
				encmode = 1;
 80040d8:	2101      	movs	r1, #1
				encpos = 0;
 80040da:	2200      	movs	r2, #0
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <keypad_sm+0x284>)
				encmode = 1;
 80040de:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 80040e0:	701a      	strb	r2, [r3, #0]
}
 80040e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			kpenum = V2;
 80040e4:	2203      	movs	r2, #3
			keypadarr[0] = num;
 80040e6:	207a      	movs	r0, #122	; 0x7a
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <keypad_sm+0x278>)
			if(keypadarr[4] == '.'){
 80040ea:	4916      	ldr	r1, [pc, #88]	; (8004144 <keypad_sm+0x27c>)
				keypaddecimal = 0;
 80040ec:	4d16      	ldr	r5, [pc, #88]	; (8004148 <keypad_sm+0x280>)
			kpenum = V2;
 80040ee:	7032      	strb	r2, [r6, #0]
	while(keypaditerator < 4){
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	b252      	sxtb	r2, r2
 80040f4:	2a03      	cmp	r2, #3
 80040f6:	f73f aefd 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80040fa:	781a      	ldrb	r2, [r3, #0]
 80040fc:	b252      	sxtb	r2, r2
 80040fe:	2a03      	cmp	r2, #3
 8004100:	dcf6      	bgt.n	80040f0 <keypad_sm+0x228>
			if(keypadarr[4] == '.'){
 8004102:	790a      	ldrb	r2, [r1, #4]
 8004104:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8004106:	bf08      	it	eq
 8004108:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800410a:	78ca      	ldrb	r2, [r1, #3]
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	710a      	strb	r2, [r1, #4]
 8004110:	788a      	ldrb	r2, [r1, #2]
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	70ca      	strb	r2, [r1, #3]
 8004116:	784a      	ldrb	r2, [r1, #1]
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	708a      	strb	r2, [r1, #2]
 800411c:	780a      	ldrb	r2, [r1, #0]
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8004122:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	3201      	adds	r2, #1
 8004128:	b252      	sxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	b252      	sxtb	r2, r2
 8004130:	2a03      	cmp	r2, #3
 8004132:	dde2      	ble.n	80040fa <keypad_sm+0x232>
}
 8004134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004136:	bf00      	nop
 8004138:	200006c5 	.word	0x200006c5
 800413c:	200003ac 	.word	0x200003ac
 8004140:	20000005 	.word	0x20000005
 8004144:	20000000 	.word	0x20000000
 8004148:	200006c4 	.word	0x200006c4
 800414c:	200003ad 	.word	0x200003ad
 8004150:	20000828 	.word	0x20000828
			kpenum = A1;
 8004154:	2202      	movs	r2, #2
			keypadarr[0] = num;
 8004156:	207a      	movs	r0, #122	; 0x7a
 8004158:	4b9c      	ldr	r3, [pc, #624]	; (80043cc <keypad_sm+0x504>)
			if(keypadarr[4] == '.'){
 800415a:	499d      	ldr	r1, [pc, #628]	; (80043d0 <keypad_sm+0x508>)
				keypaddecimal = 0;
 800415c:	4d9d      	ldr	r5, [pc, #628]	; (80043d4 <keypad_sm+0x50c>)
			kpenum = A1;
 800415e:	7032      	strb	r2, [r6, #0]
	while(keypaditerator < 4){
 8004160:	781a      	ldrb	r2, [r3, #0]
 8004162:	b252      	sxtb	r2, r2
 8004164:	2a03      	cmp	r2, #3
 8004166:	f73f aec5 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800416a:	781a      	ldrb	r2, [r3, #0]
 800416c:	b252      	sxtb	r2, r2
 800416e:	2a03      	cmp	r2, #3
 8004170:	dcf6      	bgt.n	8004160 <keypad_sm+0x298>
			if(keypadarr[4] == '.'){
 8004172:	790a      	ldrb	r2, [r1, #4]
 8004174:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8004176:	bf08      	it	eq
 8004178:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800417a:	78ca      	ldrb	r2, [r1, #3]
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	710a      	strb	r2, [r1, #4]
 8004180:	788a      	ldrb	r2, [r1, #2]
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	70ca      	strb	r2, [r1, #3]
 8004186:	784a      	ldrb	r2, [r1, #1]
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	708a      	strb	r2, [r1, #2]
 800418c:	780a      	ldrb	r2, [r1, #0]
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8004192:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	3201      	adds	r2, #1
 8004198:	b252      	sxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 800419c:	781a      	ldrb	r2, [r3, #0]
 800419e:	b252      	sxtb	r2, r2
 80041a0:	2a03      	cmp	r2, #3
 80041a2:	dde2      	ble.n	800416a <keypad_sm+0x2a2>
}
 80041a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(encmode){
 80041a6:	4c8c      	ldr	r4, [pc, #560]	; (80043d8 <keypad_sm+0x510>)
 80041a8:	7823      	ldrb	r3, [r4, #0]
 80041aa:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d06f      	beq.n	8004292 <keypad_sm+0x3ca>
			if(num == 'A'){
 80041b2:	2841      	cmp	r0, #65	; 0x41
 80041b4:	f000 8147 	beq.w	8004446 <keypad_sm+0x57e>
			else if(num == 'B'){
 80041b8:	2842      	cmp	r0, #66	; 0x42
 80041ba:	f000 84da 	beq.w	8004b72 <keypad_sm+0xcaa>
			else if(num == 'C'){
 80041be:	2843      	cmp	r0, #67	; 0x43
 80041c0:	f000 8392 	beq.w	80048e8 <keypad_sm+0xa20>
			else if(num == 'D'){
 80041c4:	2844      	cmp	r0, #68	; 0x44
 80041c6:	f000 8510 	beq.w	8004bea <keypad_sm+0xd22>
			else if(num == '.'){
 80041ca:	282e      	cmp	r0, #46	; 0x2e
 80041cc:	f000 8664 	beq.w	8004e98 <keypad_sm+0xfd0>
			else if(num >= '0' && num <= '9'){
 80041d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80041d4:	2b09      	cmp	r3, #9
 80041d6:	f200 86b2 	bhi.w	8004f3e <keypad_sm+0x1076>
				keypaddecimal = 0;
 80041da:	2600      	movs	r6, #0
			keypadarr[0] = num;
 80041dc:	207a      	movs	r0, #122	; 0x7a
 80041de:	4b7b      	ldr	r3, [pc, #492]	; (80043cc <keypad_sm+0x504>)
			if(keypadarr[4] == '.'){
 80041e0:	4a7b      	ldr	r2, [pc, #492]	; (80043d0 <keypad_sm+0x508>)
				keypaddecimal = 0;
 80041e2:	4d7c      	ldr	r5, [pc, #496]	; (80043d4 <keypad_sm+0x50c>)
	while(keypaditerator < 4){
 80041e4:	7819      	ldrb	r1, [r3, #0]
 80041e6:	b249      	sxtb	r1, r1
 80041e8:	2903      	cmp	r1, #3
 80041ea:	dc1c      	bgt.n	8004226 <keypad_sm+0x35e>
		if(keypaditerator < keypadlength-1){
 80041ec:	7819      	ldrb	r1, [r3, #0]
 80041ee:	b249      	sxtb	r1, r1
 80041f0:	2903      	cmp	r1, #3
 80041f2:	dcf7      	bgt.n	80041e4 <keypad_sm+0x31c>
			if(keypadarr[4] == '.'){
 80041f4:	7911      	ldrb	r1, [r2, #4]
 80041f6:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80041f8:	bf08      	it	eq
 80041fa:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80041fc:	78d1      	ldrb	r1, [r2, #3]
 80041fe:	b2c9      	uxtb	r1, r1
 8004200:	7111      	strb	r1, [r2, #4]
 8004202:	7891      	ldrb	r1, [r2, #2]
 8004204:	b2c9      	uxtb	r1, r1
 8004206:	70d1      	strb	r1, [r2, #3]
 8004208:	7851      	ldrb	r1, [r2, #1]
 800420a:	b2c9      	uxtb	r1, r1
 800420c:	7091      	strb	r1, [r2, #2]
 800420e:	7811      	ldrb	r1, [r2, #0]
 8004210:	b2c9      	uxtb	r1, r1
 8004212:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004214:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004216:	7819      	ldrb	r1, [r3, #0]
 8004218:	3101      	adds	r1, #1
 800421a:	b249      	sxtb	r1, r1
 800421c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800421e:	7819      	ldrb	r1, [r3, #0]
 8004220:	b249      	sxtb	r1, r1
 8004222:	2903      	cmp	r1, #3
 8004224:	dde2      	ble.n	80041ec <keypad_sm+0x324>
				encmode = 0;
 8004226:	2300      	movs	r3, #0
				encpos = 0;
 8004228:	4a6c      	ldr	r2, [pc, #432]	; (80043dc <keypad_sm+0x514>)
				encmode = 0;
 800422a:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800422c:	7013      	strb	r3, [r2, #0]
}
 800422e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(num == 'A'){
 8004230:	2841      	cmp	r0, #65	; 0x41
 8004232:	f000 820f 	beq.w	8004654 <keypad_sm+0x78c>
			else if(num == 'B'){
 8004236:	2842      	cmp	r0, #66	; 0x42
 8004238:	f000 80d6 	beq.w	80043e8 <keypad_sm+0x520>
			else if(num == 'C'){
 800423c:	2843      	cmp	r0, #67	; 0x43
 800423e:	f000 8246 	beq.w	80046ce <keypad_sm+0x806>
			else if(num == 'D'){
 8004242:	2844      	cmp	r0, #68	; 0x44
 8004244:	f000 82ee 	beq.w	8004824 <keypad_sm+0x95c>
			else if(num == '.'){
 8004248:	282e      	cmp	r0, #46	; 0x2e
 800424a:	f000 86fb 	beq.w	8005044 <keypad_sm+0x117c>
			else if(num >= '0' && num <= '9'){
 800424e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004252:	2b09      	cmp	r3, #9
 8004254:	f240 839c 	bls.w	8004990 <keypad_sm+0xac8>
			else if(num == '#'){
 8004258:	2823      	cmp	r0, #35	; 0x23
 800425a:	f001 806c 	beq.w	8005336 <keypad_sm+0x146e>
			else if(num == '+'){
 800425e:	282b      	cmp	r0, #43	; 0x2b
 8004260:	f001 80df 	beq.w	8005422 <keypad_sm+0x155a>
			else if(num == '-'){
 8004264:	282d      	cmp	r0, #45	; 0x2d
 8004266:	f001 803d 	beq.w	80052e4 <keypad_sm+0x141c>
			else if(num == 's'){
 800426a:	2873      	cmp	r0, #115	; 0x73
 800426c:	f001 8327 	beq.w	80058be <keypad_sm+0x19f6>
			else if(num == '['){
 8004270:	285b      	cmp	r0, #91	; 0x5b
 8004272:	f001 84c0 	beq.w	8005bf6 <keypad_sm+0x1d2e>
			else if(num == ']'){
 8004276:	285d      	cmp	r0, #93	; 0x5d
 8004278:	f47f ae3c 	bne.w	8003ef4 <keypad_sm+0x2c>
				fill_keypad(0, volt_set_aux);
 800427c:	4b58      	ldr	r3, [pc, #352]	; (80043e0 <keypad_sm+0x518>)
 800427e:	2000      	movs	r0, #0
 8004280:	6819      	ldr	r1, [r3, #0]
 8004282:	f7ff fd05 	bl	8003c90 <fill_keypad>
				encmode = 1;
 8004286:	2101      	movs	r1, #1
				encpos = 0;
 8004288:	2200      	movs	r2, #0
 800428a:	4b54      	ldr	r3, [pc, #336]	; (80043dc <keypad_sm+0x514>)
				encmode = 1;
 800428c:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 800428e:	701a      	strb	r2, [r3, #0]
}
 8004290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(num == 'A'){
 8004292:	2841      	cmp	r0, #65	; 0x41
 8004294:	f000 8103 	beq.w	800449e <keypad_sm+0x5d6>
			else if(num == 'B'){
 8004298:	2842      	cmp	r0, #66	; 0x42
 800429a:	f000 842d 	beq.w	8004af8 <keypad_sm+0xc30>
			else if(num == 'C'){
 800429e:	2843      	cmp	r0, #67	; 0x43
 80042a0:	f000 834e 	beq.w	8004940 <keypad_sm+0xa78>
			else if(num == 'D'){
 80042a4:	2844      	cmp	r0, #68	; 0x44
 80042a6:	f000 853d 	beq.w	8004d24 <keypad_sm+0xe5c>
			else if(num == '.'){
 80042aa:	282e      	cmp	r0, #46	; 0x2e
 80042ac:	f000 878e 	beq.w	80051cc <keypad_sm+0x1304>
			else if(num >= '0' && num <= '9'){
 80042b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80042b4:	2b09      	cmp	r3, #9
 80042b6:	f240 836b 	bls.w	8004990 <keypad_sm+0xac8>
			else if(num == '#'){
 80042ba:	2823      	cmp	r0, #35	; 0x23
 80042bc:	f001 8205 	beq.w	80056ca <keypad_sm+0x1802>
			else if(num == '+'){
 80042c0:	282b      	cmp	r0, #43	; 0x2b
 80042c2:	f001 8266 	beq.w	8005792 <keypad_sm+0x18ca>
			else if(num == '-'){
 80042c6:	282d      	cmp	r0, #45	; 0x2d
 80042c8:	f001 81d6 	beq.w	8005678 <keypad_sm+0x17b0>
			else if(num == 's'){
 80042cc:	2873      	cmp	r0, #115	; 0x73
 80042ce:	f001 844e 	beq.w	8005b6e <keypad_sm+0x1ca6>
			else if(num == '['){
 80042d2:	285b      	cmp	r0, #91	; 0x5b
 80042d4:	f001 849a 	beq.w	8005c0c <keypad_sm+0x1d44>
			else if(num == ']'){
 80042d8:	285d      	cmp	r0, #93	; 0x5d
 80042da:	f47f ae0b 	bne.w	8003ef4 <keypad_sm+0x2c>
				fill_keypad(1, amp_set_aux);
 80042de:	4b41      	ldr	r3, [pc, #260]	; (80043e4 <keypad_sm+0x51c>)
 80042e0:	2001      	movs	r0, #1
 80042e2:	6819      	ldr	r1, [r3, #0]
 80042e4:	f7ff fcd4 	bl	8003c90 <fill_keypad>
				encmode = 1;
 80042e8:	2101      	movs	r1, #1
				encpos = 0;
 80042ea:	2200      	movs	r2, #0
 80042ec:	4b3b      	ldr	r3, [pc, #236]	; (80043dc <keypad_sm+0x514>)
				encmode = 1;
 80042ee:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 80042f0:	701a      	strb	r2, [r3, #0]
}
 80042f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(num == 'A'){
 80042f4:	2841      	cmp	r0, #65	; 0x41
 80042f6:	f000 823e 	beq.w	8004776 <keypad_sm+0x8ae>
			else if(num == 'B'){
 80042fa:	2842      	cmp	r0, #66	; 0x42
 80042fc:	f000 83a0 	beq.w	8004a40 <keypad_sm+0xb78>
			else if(num == 'C'){
 8004300:	2843      	cmp	r0, #67	; 0x43
 8004302:	f000 86e8 	beq.w	80050d6 <keypad_sm+0x120e>
			else if(num == 'D'){
 8004306:	2844      	cmp	r0, #68	; 0x44
 8004308:	f000 859a 	beq.w	8004e40 <keypad_sm+0xf78>
			else if(num == '.'){
 800430c:	282e      	cmp	r0, #46	; 0x2e
 800430e:	f000 87be 	beq.w	800528e <keypad_sm+0x13c6>
			else if(num >= '0' && num <= '9'){
 8004312:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004316:	2b09      	cmp	r3, #9
 8004318:	f200 8788 	bhi.w	800522c <keypad_sm+0x1364>
				keypaddecimal = 0;
 800431c:	2600      	movs	r6, #0
			keypadarr[0] = num;
 800431e:	207a      	movs	r0, #122	; 0x7a
 8004320:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <keypad_sm+0x504>)
			if(keypadarr[4] == '.'){
 8004322:	4a2b      	ldr	r2, [pc, #172]	; (80043d0 <keypad_sm+0x508>)
				keypaddecimal = 0;
 8004324:	4d2b      	ldr	r5, [pc, #172]	; (80043d4 <keypad_sm+0x50c>)
	while(keypaditerator < 4){
 8004326:	7819      	ldrb	r1, [r3, #0]
 8004328:	b249      	sxtb	r1, r1
 800432a:	2903      	cmp	r1, #3
 800432c:	dc1c      	bgt.n	8004368 <keypad_sm+0x4a0>
		if(keypaditerator < keypadlength-1){
 800432e:	7819      	ldrb	r1, [r3, #0]
 8004330:	b249      	sxtb	r1, r1
 8004332:	2903      	cmp	r1, #3
 8004334:	dcf7      	bgt.n	8004326 <keypad_sm+0x45e>
			if(keypadarr[4] == '.'){
 8004336:	7911      	ldrb	r1, [r2, #4]
 8004338:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800433a:	bf08      	it	eq
 800433c:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800433e:	78d1      	ldrb	r1, [r2, #3]
 8004340:	b2c9      	uxtb	r1, r1
 8004342:	7111      	strb	r1, [r2, #4]
 8004344:	7891      	ldrb	r1, [r2, #2]
 8004346:	b2c9      	uxtb	r1, r1
 8004348:	70d1      	strb	r1, [r2, #3]
 800434a:	7851      	ldrb	r1, [r2, #1]
 800434c:	b2c9      	uxtb	r1, r1
 800434e:	7091      	strb	r1, [r2, #2]
 8004350:	7811      	ldrb	r1, [r2, #0]
 8004352:	b2c9      	uxtb	r1, r1
 8004354:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004356:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004358:	7819      	ldrb	r1, [r3, #0]
 800435a:	3101      	adds	r1, #1
 800435c:	b249      	sxtb	r1, r1
 800435e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004360:	7819      	ldrb	r1, [r3, #0]
 8004362:	b249      	sxtb	r1, r1
 8004364:	2903      	cmp	r1, #3
 8004366:	dde2      	ble.n	800432e <keypad_sm+0x466>
				encmode = 0;
 8004368:	2300      	movs	r3, #0
				encpos = 0;
 800436a:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <keypad_sm+0x514>)
				encmode = 0;
 800436c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800436e:	7013      	strb	r3, [r2, #0]
}
 8004370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004372:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004374:	207a      	movs	r0, #122	; 0x7a
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <keypad_sm+0x504>)
			if(keypadarr[4] == '.'){
 8004378:	4a15      	ldr	r2, [pc, #84]	; (80043d0 <keypad_sm+0x508>)
				keypaddecimal = 0;
 800437a:	4f16      	ldr	r7, [pc, #88]	; (80043d4 <keypad_sm+0x50c>)
				kpenum = WAIT;
 800437c:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 800437e:	7819      	ldrb	r1, [r3, #0]
 8004380:	b249      	sxtb	r1, r1
 8004382:	2903      	cmp	r1, #3
 8004384:	dc1c      	bgt.n	80043c0 <keypad_sm+0x4f8>
		if(keypaditerator < keypadlength-1){
 8004386:	7819      	ldrb	r1, [r3, #0]
 8004388:	b249      	sxtb	r1, r1
 800438a:	2903      	cmp	r1, #3
 800438c:	dcf7      	bgt.n	800437e <keypad_sm+0x4b6>
			if(keypadarr[4] == '.'){
 800438e:	7911      	ldrb	r1, [r2, #4]
 8004390:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004392:	bf08      	it	eq
 8004394:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004396:	78d1      	ldrb	r1, [r2, #3]
 8004398:	b2c9      	uxtb	r1, r1
 800439a:	7111      	strb	r1, [r2, #4]
 800439c:	7891      	ldrb	r1, [r2, #2]
 800439e:	b2c9      	uxtb	r1, r1
 80043a0:	70d1      	strb	r1, [r2, #3]
 80043a2:	7851      	ldrb	r1, [r2, #1]
 80043a4:	b2c9      	uxtb	r1, r1
 80043a6:	7091      	strb	r1, [r2, #2]
 80043a8:	7811      	ldrb	r1, [r2, #0]
 80043aa:	b2c9      	uxtb	r1, r1
 80043ac:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80043ae:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80043b0:	7819      	ldrb	r1, [r3, #0]
 80043b2:	3101      	adds	r1, #1
 80043b4:	b249      	sxtb	r1, r1
 80043b6:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80043b8:	7819      	ldrb	r1, [r3, #0]
 80043ba:	b249      	sxtb	r1, r1
 80043bc:	2903      	cmp	r1, #3
 80043be:	dde2      	ble.n	8004386 <keypad_sm+0x4be>
				encmode = 0;
 80043c0:	2300      	movs	r3, #0
				encpos = 0;
 80043c2:	4a06      	ldr	r2, [pc, #24]	; (80043dc <keypad_sm+0x514>)
				encmode = 0;
 80043c4:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80043c6:	7013      	strb	r3, [r2, #0]
}
 80043c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000005 	.word	0x20000005
 80043d0:	20000000 	.word	0x20000000
 80043d4:	200006c4 	.word	0x200006c4
 80043d8:	200003ac 	.word	0x200003ac
 80043dc:	200003ad 	.word	0x200003ad
 80043e0:	20000824 	.word	0x20000824
 80043e4:	20000394 	.word	0x20000394
			keypadarr[0] = num;
 80043e8:	207a      	movs	r0, #122	; 0x7a
 80043ea:	4b90      	ldr	r3, [pc, #576]	; (800462c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 80043ec:	4a90      	ldr	r2, [pc, #576]	; (8004630 <keypad_sm+0x768>)
				keypaddecimal = 0;
 80043ee:	4c91      	ldr	r4, [pc, #580]	; (8004634 <keypad_sm+0x76c>)
				kpenum = WAIT;
 80043f0:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80043f2:	7819      	ldrb	r1, [r3, #0]
 80043f4:	b249      	sxtb	r1, r1
 80043f6:	2903      	cmp	r1, #3
 80043f8:	f73f ad7c 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80043fc:	7819      	ldrb	r1, [r3, #0]
 80043fe:	b249      	sxtb	r1, r1
 8004400:	2903      	cmp	r1, #3
 8004402:	dcf6      	bgt.n	80043f2 <keypad_sm+0x52a>
			if(keypadarr[4] == '.'){
 8004404:	7911      	ldrb	r1, [r2, #4]
 8004406:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004408:	bf08      	it	eq
 800440a:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 800440c:	78d1      	ldrb	r1, [r2, #3]
 800440e:	b2c9      	uxtb	r1, r1
 8004410:	7111      	strb	r1, [r2, #4]
 8004412:	7891      	ldrb	r1, [r2, #2]
 8004414:	b2c9      	uxtb	r1, r1
 8004416:	70d1      	strb	r1, [r2, #3]
 8004418:	7851      	ldrb	r1, [r2, #1]
 800441a:	b2c9      	uxtb	r1, r1
 800441c:	7091      	strb	r1, [r2, #2]
 800441e:	7811      	ldrb	r1, [r2, #0]
 8004420:	b2c9      	uxtb	r1, r1
 8004422:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004424:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004426:	7819      	ldrb	r1, [r3, #0]
 8004428:	3101      	adds	r1, #1
 800442a:	b249      	sxtb	r1, r1
 800442c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800442e:	7819      	ldrb	r1, [r3, #0]
 8004430:	b249      	sxtb	r1, r1
 8004432:	2903      	cmp	r1, #3
 8004434:	dde2      	ble.n	80043fc <keypad_sm+0x534>
}
 8004436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(chstat_main){
 8004438:	4b7f      	ldr	r3, [pc, #508]	; (8004638 <keypad_sm+0x770>)
 800443a:	781a      	ldrb	r2, [r3, #0]
 800443c:	2a00      	cmp	r2, #0
 800443e:	f000 81ee 	beq.w	800481e <keypad_sm+0x956>
				chstat_main = 0;
 8004442:	701c      	strb	r4, [r3, #0]
}
 8004444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004446:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004448:	207a      	movs	r0, #122	; 0x7a
 800444a:	4b78      	ldr	r3, [pc, #480]	; (800462c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 800444c:	4a78      	ldr	r2, [pc, #480]	; (8004630 <keypad_sm+0x768>)
				keypaddecimal = 0;
 800444e:	4f79      	ldr	r7, [pc, #484]	; (8004634 <keypad_sm+0x76c>)
				kpenum = WAIT;
 8004450:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004452:	7819      	ldrb	r1, [r3, #0]
 8004454:	b249      	sxtb	r1, r1
 8004456:	2903      	cmp	r1, #3
 8004458:	dc1c      	bgt.n	8004494 <keypad_sm+0x5cc>
		if(keypaditerator < keypadlength-1){
 800445a:	7819      	ldrb	r1, [r3, #0]
 800445c:	b249      	sxtb	r1, r1
 800445e:	2903      	cmp	r1, #3
 8004460:	dcf7      	bgt.n	8004452 <keypad_sm+0x58a>
			if(keypadarr[4] == '.'){
 8004462:	7911      	ldrb	r1, [r2, #4]
 8004464:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004466:	bf08      	it	eq
 8004468:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 800446a:	78d1      	ldrb	r1, [r2, #3]
 800446c:	b2c9      	uxtb	r1, r1
 800446e:	7111      	strb	r1, [r2, #4]
 8004470:	7891      	ldrb	r1, [r2, #2]
 8004472:	b2c9      	uxtb	r1, r1
 8004474:	70d1      	strb	r1, [r2, #3]
 8004476:	7851      	ldrb	r1, [r2, #1]
 8004478:	b2c9      	uxtb	r1, r1
 800447a:	7091      	strb	r1, [r2, #2]
 800447c:	7811      	ldrb	r1, [r2, #0]
 800447e:	b2c9      	uxtb	r1, r1
 8004480:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004482:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004484:	7819      	ldrb	r1, [r3, #0]
 8004486:	3101      	adds	r1, #1
 8004488:	b249      	sxtb	r1, r1
 800448a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800448c:	7819      	ldrb	r1, [r3, #0]
 800448e:	b249      	sxtb	r1, r1
 8004490:	2903      	cmp	r1, #3
 8004492:	dde2      	ble.n	800445a <keypad_sm+0x592>
				encmode = 0;
 8004494:	2300      	movs	r3, #0
				encpos = 0;
 8004496:	4a69      	ldr	r2, [pc, #420]	; (800463c <keypad_sm+0x774>)
				encmode = 0;
 8004498:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800449a:	7013      	strb	r3, [r2, #0]
}
 800449c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 800449e:	207a      	movs	r0, #122	; 0x7a
 80044a0:	4b62      	ldr	r3, [pc, #392]	; (800462c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 80044a2:	4a63      	ldr	r2, [pc, #396]	; (8004630 <keypad_sm+0x768>)
				keypaddecimal = 0;
 80044a4:	4c63      	ldr	r4, [pc, #396]	; (8004634 <keypad_sm+0x76c>)
				kpenum = WAIT;
 80044a6:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80044a8:	7819      	ldrb	r1, [r3, #0]
 80044aa:	b249      	sxtb	r1, r1
 80044ac:	2903      	cmp	r1, #3
 80044ae:	f73f ad21 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80044b2:	7819      	ldrb	r1, [r3, #0]
 80044b4:	b249      	sxtb	r1, r1
 80044b6:	2903      	cmp	r1, #3
 80044b8:	dcf6      	bgt.n	80044a8 <keypad_sm+0x5e0>
			if(keypadarr[4] == '.'){
 80044ba:	7911      	ldrb	r1, [r2, #4]
 80044bc:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80044be:	bf08      	it	eq
 80044c0:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 80044c2:	78d1      	ldrb	r1, [r2, #3]
 80044c4:	b2c9      	uxtb	r1, r1
 80044c6:	7111      	strb	r1, [r2, #4]
 80044c8:	7891      	ldrb	r1, [r2, #2]
 80044ca:	b2c9      	uxtb	r1, r1
 80044cc:	70d1      	strb	r1, [r2, #3]
 80044ce:	7851      	ldrb	r1, [r2, #1]
 80044d0:	b2c9      	uxtb	r1, r1
 80044d2:	7091      	strb	r1, [r2, #2]
 80044d4:	7811      	ldrb	r1, [r2, #0]
 80044d6:	b2c9      	uxtb	r1, r1
 80044d8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80044da:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80044dc:	7819      	ldrb	r1, [r3, #0]
 80044de:	3101      	adds	r1, #1
 80044e0:	b249      	sxtb	r1, r1
 80044e2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80044e4:	7819      	ldrb	r1, [r3, #0]
 80044e6:	b249      	sxtb	r1, r1
 80044e8:	2903      	cmp	r1, #3
 80044ea:	dde2      	ble.n	80044b2 <keypad_sm+0x5ea>
}
 80044ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			kpenum = A2;
 80044ee:	2104      	movs	r1, #4
			keypadarr[0] = num;
 80044f0:	207a      	movs	r0, #122	; 0x7a
 80044f2:	4b4e      	ldr	r3, [pc, #312]	; (800462c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 80044f4:	4a4e      	ldr	r2, [pc, #312]	; (8004630 <keypad_sm+0x768>)
				keypaddecimal = 0;
 80044f6:	4d4f      	ldr	r5, [pc, #316]	; (8004634 <keypad_sm+0x76c>)
			kpenum = A2;
 80044f8:	7031      	strb	r1, [r6, #0]
	while(keypaditerator < 4){
 80044fa:	7819      	ldrb	r1, [r3, #0]
 80044fc:	b249      	sxtb	r1, r1
 80044fe:	2903      	cmp	r1, #3
 8004500:	f73f acf8 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004504:	7819      	ldrb	r1, [r3, #0]
 8004506:	b249      	sxtb	r1, r1
 8004508:	2903      	cmp	r1, #3
 800450a:	dcf6      	bgt.n	80044fa <keypad_sm+0x632>
			if(keypadarr[4] == '.'){
 800450c:	7911      	ldrb	r1, [r2, #4]
 800450e:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004510:	bf08      	it	eq
 8004512:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004514:	78d1      	ldrb	r1, [r2, #3]
 8004516:	b2c9      	uxtb	r1, r1
 8004518:	7111      	strb	r1, [r2, #4]
 800451a:	7891      	ldrb	r1, [r2, #2]
 800451c:	b2c9      	uxtb	r1, r1
 800451e:	70d1      	strb	r1, [r2, #3]
 8004520:	7851      	ldrb	r1, [r2, #1]
 8004522:	b2c9      	uxtb	r1, r1
 8004524:	7091      	strb	r1, [r2, #2]
 8004526:	7811      	ldrb	r1, [r2, #0]
 8004528:	b2c9      	uxtb	r1, r1
 800452a:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800452c:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800452e:	7819      	ldrb	r1, [r3, #0]
 8004530:	3101      	adds	r1, #1
 8004532:	b249      	sxtb	r1, r1
 8004534:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004536:	7819      	ldrb	r1, [r3, #0]
 8004538:	b249      	sxtb	r1, r1
 800453a:	2903      	cmp	r1, #3
 800453c:	dde2      	ble.n	8004504 <keypad_sm+0x63c>
}
 800453e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(chstat_aux_rx){
 8004540:	4b3f      	ldr	r3, [pc, #252]	; (8004640 <keypad_sm+0x778>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80be 	beq.w	80046c6 <keypad_sm+0x7fe>
				chstat_aux_tx = 0;
 800454a:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <keypad_sm+0x77c>)
 800454c:	701c      	strb	r4, [r3, #0]
}
 800454e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(num == 'A'){
 8004550:	2841      	cmp	r0, #65	; 0x41
 8004552:	f000 8221 	beq.w	8004998 <keypad_sm+0xad0>
			else if(num == 'B'){
 8004556:	2842      	cmp	r0, #66	; 0x42
 8004558:	f000 841e 	beq.w	8004d98 <keypad_sm+0xed0>
			else if(num == 'C'){
 800455c:	2843      	cmp	r0, #67	; 0x43
 800455e:	f000 8592 	beq.w	8005086 <keypad_sm+0x11be>
			else if(num == 'D'){
 8004562:	2844      	cmp	r0, #68	; 0x44
 8004564:	f001 8045 	beq.w	80055f2 <keypad_sm+0x172a>
			else if(num == '.'){
 8004568:	282e      	cmp	r0, #46	; 0x2e
 800456a:	f000 8211 	beq.w	8004990 <keypad_sm+0xac8>
			else if(num >= '0' && num <= '9'){
 800456e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004572:	2b09      	cmp	r3, #9
 8004574:	f240 820c 	bls.w	8004990 <keypad_sm+0xac8>
			else if(num == '#'){
 8004578:	2823      	cmp	r0, #35	; 0x23
 800457a:	f001 8036 	beq.w	80055ea <keypad_sm+0x1722>
			else if(num == '+'){
 800457e:	282b      	cmp	r0, #43	; 0x2b
 8004580:	f001 83f4 	beq.w	8005d6c <keypad_sm+0x1ea4>
			else if(num == '-'){
 8004584:	282d      	cmp	r0, #45	; 0x2d
 8004586:	f001 828b 	beq.w	8005aa0 <keypad_sm+0x1bd8>
			else if(num == 's'){
 800458a:	2873      	cmp	r0, #115	; 0x73
 800458c:	f001 83e3 	beq.w	8005d56 <keypad_sm+0x1e8e>
			else if(num == '['){
 8004590:	285b      	cmp	r0, #91	; 0x5b
 8004592:	f001 83d5 	beq.w	8005d40 <keypad_sm+0x1e78>
			else if(num == ']'){
 8004596:	285d      	cmp	r0, #93	; 0x5d
 8004598:	f47f acac 	bne.w	8003ef4 <keypad_sm+0x2c>
				fill_keypad(1, amp_set_main);
 800459c:	4b2a      	ldr	r3, [pc, #168]	; (8004648 <keypad_sm+0x780>)
 800459e:	2001      	movs	r0, #1
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	f7ff fb75 	bl	8003c90 <fill_keypad>
				encmode = 1;
 80045a6:	2101      	movs	r1, #1
				encpos = 0;
 80045a8:	2200      	movs	r2, #0
 80045aa:	4b24      	ldr	r3, [pc, #144]	; (800463c <keypad_sm+0x774>)
				encmode = 1;
 80045ac:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 80045ae:	701a      	strb	r2, [r3, #0]
}
 80045b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 80045b2:	f7ff f9c9 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80045b6:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80045b8:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80045ba:	f7fc fd8d 	bl	80010d8 <__aeabi_fcmpge>
 80045be:	b140      	cbz	r0, 80045d2 <keypad_sm+0x70a>
 80045c0:	4628      	mov	r0, r5
 80045c2:	4922      	ldr	r1, [pc, #136]	; (800464c <keypad_sm+0x784>)
 80045c4:	f7fc fd7e 	bl	80010c4 <__aeabi_fcmple>
 80045c8:	b118      	cbz	r0, 80045d2 <keypad_sm+0x70a>
					volt_set_aux = translate_keypad();
 80045ca:	f7ff f9bd 	bl	8003948 <translate_keypad>
 80045ce:	4a20      	ldr	r2, [pc, #128]	; (8004650 <keypad_sm+0x788>)
 80045d0:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 80045d2:	2500      	movs	r5, #0
			keypadarr[0] = num;
 80045d4:	207a      	movs	r0, #122	; 0x7a
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 80045d8:	4a15      	ldr	r2, [pc, #84]	; (8004630 <keypad_sm+0x768>)
				keypaddecimal = 0;
 80045da:	4f16      	ldr	r7, [pc, #88]	; (8004634 <keypad_sm+0x76c>)
				kpenum = WAIT;
 80045dc:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80045de:	7819      	ldrb	r1, [r3, #0]
 80045e0:	b249      	sxtb	r1, r1
 80045e2:	2903      	cmp	r1, #3
 80045e4:	dc1c      	bgt.n	8004620 <keypad_sm+0x758>
		if(keypaditerator < keypadlength-1){
 80045e6:	7819      	ldrb	r1, [r3, #0]
 80045e8:	b249      	sxtb	r1, r1
 80045ea:	2903      	cmp	r1, #3
 80045ec:	dcf7      	bgt.n	80045de <keypad_sm+0x716>
			if(keypadarr[4] == '.'){
 80045ee:	7911      	ldrb	r1, [r2, #4]
 80045f0:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80045f2:	bf08      	it	eq
 80045f4:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 80045f6:	78d1      	ldrb	r1, [r2, #3]
 80045f8:	b2c9      	uxtb	r1, r1
 80045fa:	7111      	strb	r1, [r2, #4]
 80045fc:	7891      	ldrb	r1, [r2, #2]
 80045fe:	b2c9      	uxtb	r1, r1
 8004600:	70d1      	strb	r1, [r2, #3]
 8004602:	7851      	ldrb	r1, [r2, #1]
 8004604:	b2c9      	uxtb	r1, r1
 8004606:	7091      	strb	r1, [r2, #2]
 8004608:	7811      	ldrb	r1, [r2, #0]
 800460a:	b2c9      	uxtb	r1, r1
 800460c:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800460e:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004610:	7819      	ldrb	r1, [r3, #0]
 8004612:	3101      	adds	r1, #1
 8004614:	b249      	sxtb	r1, r1
 8004616:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004618:	7819      	ldrb	r1, [r3, #0]
 800461a:	b249      	sxtb	r1, r1
 800461c:	2903      	cmp	r1, #3
 800461e:	dde2      	ble.n	80045e6 <keypad_sm+0x71e>
				encmode = 0;
 8004620:	2300      	movs	r3, #0
				encpos = 0;
 8004622:	4a06      	ldr	r2, [pc, #24]	; (800463c <keypad_sm+0x774>)
				encmode = 0;
 8004624:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004626:	7013      	strb	r3, [r2, #0]
}
 8004628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800462a:	bf00      	nop
 800462c:	20000005 	.word	0x20000005
 8004630:	20000000 	.word	0x20000000
 8004634:	200006c4 	.word	0x200006c4
 8004638:	200003a3 	.word	0x200003a3
 800463c:	200003ad 	.word	0x200003ad
 8004640:	200003a1 	.word	0x200003a1
 8004644:	200003a2 	.word	0x200003a2
 8004648:	20000398 	.word	0x20000398
 800464c:	41400000 	.word	0x41400000
 8004650:	20000824 	.word	0x20000824
	float temp = translate_keypad();
 8004654:	f7ff f978 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004658:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800465a:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800465c:	f7fc fd3c 	bl	80010d8 <__aeabi_fcmpge>
 8004660:	b140      	cbz	r0, 8004674 <keypad_sm+0x7ac>
 8004662:	4620      	mov	r0, r4
 8004664:	4999      	ldr	r1, [pc, #612]	; (80048cc <keypad_sm+0xa04>)
 8004666:	f7fc fd2d 	bl	80010c4 <__aeabi_fcmple>
 800466a:	b118      	cbz	r0, 8004674 <keypad_sm+0x7ac>
					volt_set_aux = translate_keypad();
 800466c:	f7ff f96c 	bl	8003948 <translate_keypad>
 8004670:	4a97      	ldr	r2, [pc, #604]	; (80048d0 <keypad_sm+0xa08>)
 8004672:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8004674:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8004676:	207a      	movs	r0, #122	; 0x7a
 8004678:	4b96      	ldr	r3, [pc, #600]	; (80048d4 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 800467a:	4a97      	ldr	r2, [pc, #604]	; (80048d8 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 800467c:	4d97      	ldr	r5, [pc, #604]	; (80048dc <keypad_sm+0xa14>)
				kpenum = WAIT;
 800467e:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8004680:	7819      	ldrb	r1, [r3, #0]
 8004682:	b249      	sxtb	r1, r1
 8004684:	2903      	cmp	r1, #3
 8004686:	f73f ac35 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800468a:	7819      	ldrb	r1, [r3, #0]
 800468c:	b249      	sxtb	r1, r1
 800468e:	2903      	cmp	r1, #3
 8004690:	dcf6      	bgt.n	8004680 <keypad_sm+0x7b8>
			if(keypadarr[4] == '.'){
 8004692:	7911      	ldrb	r1, [r2, #4]
 8004694:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004696:	bf08      	it	eq
 8004698:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800469a:	78d1      	ldrb	r1, [r2, #3]
 800469c:	b2c9      	uxtb	r1, r1
 800469e:	7111      	strb	r1, [r2, #4]
 80046a0:	7891      	ldrb	r1, [r2, #2]
 80046a2:	b2c9      	uxtb	r1, r1
 80046a4:	70d1      	strb	r1, [r2, #3]
 80046a6:	7851      	ldrb	r1, [r2, #1]
 80046a8:	b2c9      	uxtb	r1, r1
 80046aa:	7091      	strb	r1, [r2, #2]
 80046ac:	7811      	ldrb	r1, [r2, #0]
 80046ae:	b2c9      	uxtb	r1, r1
 80046b0:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80046b2:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80046b4:	7819      	ldrb	r1, [r3, #0]
 80046b6:	3101      	adds	r1, #1
 80046b8:	b249      	sxtb	r1, r1
 80046ba:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80046bc:	7819      	ldrb	r1, [r3, #0]
 80046be:	b249      	sxtb	r1, r1
 80046c0:	2903      	cmp	r1, #3
 80046c2:	dde2      	ble.n	800468a <keypad_sm+0x7c2>
}
 80046c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				chstat_aux_tx = 1;
 80046c6:	2201      	movs	r2, #1
 80046c8:	4b85      	ldr	r3, [pc, #532]	; (80048e0 <keypad_sm+0xa18>)
 80046ca:	701a      	strb	r2, [r3, #0]
}
 80046cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 80046ce:	207a      	movs	r0, #122	; 0x7a
 80046d0:	4b80      	ldr	r3, [pc, #512]	; (80048d4 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 80046d2:	4a81      	ldr	r2, [pc, #516]	; (80048d8 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 80046d4:	4c81      	ldr	r4, [pc, #516]	; (80048dc <keypad_sm+0xa14>)
				kpenum = WAIT;
 80046d6:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80046d8:	7819      	ldrb	r1, [r3, #0]
 80046da:	b249      	sxtb	r1, r1
 80046dc:	2903      	cmp	r1, #3
 80046de:	f73f ac09 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80046e2:	7819      	ldrb	r1, [r3, #0]
 80046e4:	b249      	sxtb	r1, r1
 80046e6:	2903      	cmp	r1, #3
 80046e8:	dcf6      	bgt.n	80046d8 <keypad_sm+0x810>
			if(keypadarr[4] == '.'){
 80046ea:	7911      	ldrb	r1, [r2, #4]
 80046ec:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80046ee:	bf08      	it	eq
 80046f0:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 80046f2:	78d1      	ldrb	r1, [r2, #3]
 80046f4:	b2c9      	uxtb	r1, r1
 80046f6:	7111      	strb	r1, [r2, #4]
 80046f8:	7891      	ldrb	r1, [r2, #2]
 80046fa:	b2c9      	uxtb	r1, r1
 80046fc:	70d1      	strb	r1, [r2, #3]
 80046fe:	7851      	ldrb	r1, [r2, #1]
 8004700:	b2c9      	uxtb	r1, r1
 8004702:	7091      	strb	r1, [r2, #2]
 8004704:	7811      	ldrb	r1, [r2, #0]
 8004706:	b2c9      	uxtb	r1, r1
 8004708:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800470a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800470c:	7819      	ldrb	r1, [r3, #0]
 800470e:	3101      	adds	r1, #1
 8004710:	b249      	sxtb	r1, r1
 8004712:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004714:	7819      	ldrb	r1, [r3, #0]
 8004716:	b249      	sxtb	r1, r1
 8004718:	2903      	cmp	r1, #3
 800471a:	dde2      	ble.n	80046e2 <keypad_sm+0x81a>
}
 800471c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 800471e:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004720:	207a      	movs	r0, #122	; 0x7a
 8004722:	4b6c      	ldr	r3, [pc, #432]	; (80048d4 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004724:	4a6c      	ldr	r2, [pc, #432]	; (80048d8 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004726:	4f6d      	ldr	r7, [pc, #436]	; (80048dc <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004728:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 800472a:	7819      	ldrb	r1, [r3, #0]
 800472c:	b249      	sxtb	r1, r1
 800472e:	2903      	cmp	r1, #3
 8004730:	dc1c      	bgt.n	800476c <keypad_sm+0x8a4>
		if(keypaditerator < keypadlength-1){
 8004732:	7819      	ldrb	r1, [r3, #0]
 8004734:	b249      	sxtb	r1, r1
 8004736:	2903      	cmp	r1, #3
 8004738:	dcf7      	bgt.n	800472a <keypad_sm+0x862>
			if(keypadarr[4] == '.'){
 800473a:	7911      	ldrb	r1, [r2, #4]
 800473c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800473e:	bf08      	it	eq
 8004740:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004742:	78d1      	ldrb	r1, [r2, #3]
 8004744:	b2c9      	uxtb	r1, r1
 8004746:	7111      	strb	r1, [r2, #4]
 8004748:	7891      	ldrb	r1, [r2, #2]
 800474a:	b2c9      	uxtb	r1, r1
 800474c:	70d1      	strb	r1, [r2, #3]
 800474e:	7851      	ldrb	r1, [r2, #1]
 8004750:	b2c9      	uxtb	r1, r1
 8004752:	7091      	strb	r1, [r2, #2]
 8004754:	7811      	ldrb	r1, [r2, #0]
 8004756:	b2c9      	uxtb	r1, r1
 8004758:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800475a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800475c:	7819      	ldrb	r1, [r3, #0]
 800475e:	3101      	adds	r1, #1
 8004760:	b249      	sxtb	r1, r1
 8004762:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004764:	7819      	ldrb	r1, [r3, #0]
 8004766:	b249      	sxtb	r1, r1
 8004768:	2903      	cmp	r1, #3
 800476a:	dde2      	ble.n	8004732 <keypad_sm+0x86a>
				encmode = 0;
 800476c:	2300      	movs	r3, #0
				encpos = 0;
 800476e:	4a5d      	ldr	r2, [pc, #372]	; (80048e4 <keypad_sm+0xa1c>)
				encmode = 0;
 8004770:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004772:	7013      	strb	r3, [r2, #0]
}
 8004774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004776:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004778:	207a      	movs	r0, #122	; 0x7a
 800477a:	4b56      	ldr	r3, [pc, #344]	; (80048d4 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 800477c:	4a56      	ldr	r2, [pc, #344]	; (80048d8 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 800477e:	4f57      	ldr	r7, [pc, #348]	; (80048dc <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004780:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004782:	7819      	ldrb	r1, [r3, #0]
 8004784:	b249      	sxtb	r1, r1
 8004786:	2903      	cmp	r1, #3
 8004788:	dc1c      	bgt.n	80047c4 <keypad_sm+0x8fc>
		if(keypaditerator < keypadlength-1){
 800478a:	7819      	ldrb	r1, [r3, #0]
 800478c:	b249      	sxtb	r1, r1
 800478e:	2903      	cmp	r1, #3
 8004790:	dcf7      	bgt.n	8004782 <keypad_sm+0x8ba>
			if(keypadarr[4] == '.'){
 8004792:	7911      	ldrb	r1, [r2, #4]
 8004794:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004796:	bf08      	it	eq
 8004798:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 800479a:	78d1      	ldrb	r1, [r2, #3]
 800479c:	b2c9      	uxtb	r1, r1
 800479e:	7111      	strb	r1, [r2, #4]
 80047a0:	7891      	ldrb	r1, [r2, #2]
 80047a2:	b2c9      	uxtb	r1, r1
 80047a4:	70d1      	strb	r1, [r2, #3]
 80047a6:	7851      	ldrb	r1, [r2, #1]
 80047a8:	b2c9      	uxtb	r1, r1
 80047aa:	7091      	strb	r1, [r2, #2]
 80047ac:	7811      	ldrb	r1, [r2, #0]
 80047ae:	b2c9      	uxtb	r1, r1
 80047b0:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80047b2:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80047b4:	7819      	ldrb	r1, [r3, #0]
 80047b6:	3101      	adds	r1, #1
 80047b8:	b249      	sxtb	r1, r1
 80047ba:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80047bc:	7819      	ldrb	r1, [r3, #0]
 80047be:	b249      	sxtb	r1, r1
 80047c0:	2903      	cmp	r1, #3
 80047c2:	dde2      	ble.n	800478a <keypad_sm+0x8c2>
				encmode = 0;
 80047c4:	2300      	movs	r3, #0
				encpos = 0;
 80047c6:	4a47      	ldr	r2, [pc, #284]	; (80048e4 <keypad_sm+0xa1c>)
				encmode = 0;
 80047c8:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80047ca:	7013      	strb	r3, [r2, #0]
}
 80047cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 80047ce:	207a      	movs	r0, #122	; 0x7a
 80047d0:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 80047d2:	4a41      	ldr	r2, [pc, #260]	; (80048d8 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 80047d4:	4c41      	ldr	r4, [pc, #260]	; (80048dc <keypad_sm+0xa14>)
				kpenum = WAIT;
 80047d6:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80047d8:	7819      	ldrb	r1, [r3, #0]
 80047da:	b249      	sxtb	r1, r1
 80047dc:	2903      	cmp	r1, #3
 80047de:	f73f ab89 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80047e2:	7819      	ldrb	r1, [r3, #0]
 80047e4:	b249      	sxtb	r1, r1
 80047e6:	2903      	cmp	r1, #3
 80047e8:	dcf6      	bgt.n	80047d8 <keypad_sm+0x910>
			if(keypadarr[4] == '.'){
 80047ea:	7911      	ldrb	r1, [r2, #4]
 80047ec:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80047ee:	bf08      	it	eq
 80047f0:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 80047f2:	78d1      	ldrb	r1, [r2, #3]
 80047f4:	b2c9      	uxtb	r1, r1
 80047f6:	7111      	strb	r1, [r2, #4]
 80047f8:	7891      	ldrb	r1, [r2, #2]
 80047fa:	b2c9      	uxtb	r1, r1
 80047fc:	70d1      	strb	r1, [r2, #3]
 80047fe:	7851      	ldrb	r1, [r2, #1]
 8004800:	b2c9      	uxtb	r1, r1
 8004802:	7091      	strb	r1, [r2, #2]
 8004804:	7811      	ldrb	r1, [r2, #0]
 8004806:	b2c9      	uxtb	r1, r1
 8004808:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800480a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800480c:	7819      	ldrb	r1, [r3, #0]
 800480e:	3101      	adds	r1, #1
 8004810:	b249      	sxtb	r1, r1
 8004812:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004814:	7819      	ldrb	r1, [r3, #0]
 8004816:	b249      	sxtb	r1, r1
 8004818:	2903      	cmp	r1, #3
 800481a:	dde2      	ble.n	80047e2 <keypad_sm+0x91a>
}
 800481c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				chstat_main = 1;
 800481e:	2201      	movs	r2, #1
 8004820:	701a      	strb	r2, [r3, #0]
}
 8004822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004824:	207a      	movs	r0, #122	; 0x7a
 8004826:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004828:	4a2b      	ldr	r2, [pc, #172]	; (80048d8 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 800482a:	4c2c      	ldr	r4, [pc, #176]	; (80048dc <keypad_sm+0xa14>)
				kpenum = WAIT;
 800482c:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 800482e:	7819      	ldrb	r1, [r3, #0]
 8004830:	b249      	sxtb	r1, r1
 8004832:	2903      	cmp	r1, #3
 8004834:	f73f ab5e 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004838:	7819      	ldrb	r1, [r3, #0]
 800483a:	b249      	sxtb	r1, r1
 800483c:	2903      	cmp	r1, #3
 800483e:	dcf6      	bgt.n	800482e <keypad_sm+0x966>
			if(keypadarr[4] == '.'){
 8004840:	7911      	ldrb	r1, [r2, #4]
 8004842:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004844:	bf08      	it	eq
 8004846:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004848:	78d1      	ldrb	r1, [r2, #3]
 800484a:	b2c9      	uxtb	r1, r1
 800484c:	7111      	strb	r1, [r2, #4]
 800484e:	7891      	ldrb	r1, [r2, #2]
 8004850:	b2c9      	uxtb	r1, r1
 8004852:	70d1      	strb	r1, [r2, #3]
 8004854:	7851      	ldrb	r1, [r2, #1]
 8004856:	b2c9      	uxtb	r1, r1
 8004858:	7091      	strb	r1, [r2, #2]
 800485a:	7811      	ldrb	r1, [r2, #0]
 800485c:	b2c9      	uxtb	r1, r1
 800485e:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004860:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004862:	7819      	ldrb	r1, [r3, #0]
 8004864:	3101      	adds	r1, #1
 8004866:	b249      	sxtb	r1, r1
 8004868:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800486a:	7819      	ldrb	r1, [r3, #0]
 800486c:	b249      	sxtb	r1, r1
 800486e:	2903      	cmp	r1, #3
 8004870:	dde2      	ble.n	8004838 <keypad_sm+0x970>
}
 8004872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004874:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004876:	207a      	movs	r0, #122	; 0x7a
 8004878:	4b16      	ldr	r3, [pc, #88]	; (80048d4 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 800487a:	4a17      	ldr	r2, [pc, #92]	; (80048d8 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 800487c:	4f17      	ldr	r7, [pc, #92]	; (80048dc <keypad_sm+0xa14>)
				kpenum = WAIT;
 800487e:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004880:	7819      	ldrb	r1, [r3, #0]
 8004882:	b249      	sxtb	r1, r1
 8004884:	2903      	cmp	r1, #3
 8004886:	dc1c      	bgt.n	80048c2 <keypad_sm+0x9fa>
		if(keypaditerator < keypadlength-1){
 8004888:	7819      	ldrb	r1, [r3, #0]
 800488a:	b249      	sxtb	r1, r1
 800488c:	2903      	cmp	r1, #3
 800488e:	dcf7      	bgt.n	8004880 <keypad_sm+0x9b8>
			if(keypadarr[4] == '.'){
 8004890:	7911      	ldrb	r1, [r2, #4]
 8004892:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004894:	bf08      	it	eq
 8004896:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004898:	78d1      	ldrb	r1, [r2, #3]
 800489a:	b2c9      	uxtb	r1, r1
 800489c:	7111      	strb	r1, [r2, #4]
 800489e:	7891      	ldrb	r1, [r2, #2]
 80048a0:	b2c9      	uxtb	r1, r1
 80048a2:	70d1      	strb	r1, [r2, #3]
 80048a4:	7851      	ldrb	r1, [r2, #1]
 80048a6:	b2c9      	uxtb	r1, r1
 80048a8:	7091      	strb	r1, [r2, #2]
 80048aa:	7811      	ldrb	r1, [r2, #0]
 80048ac:	b2c9      	uxtb	r1, r1
 80048ae:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80048b0:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80048b2:	7819      	ldrb	r1, [r3, #0]
 80048b4:	3101      	adds	r1, #1
 80048b6:	b249      	sxtb	r1, r1
 80048b8:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80048ba:	7819      	ldrb	r1, [r3, #0]
 80048bc:	b249      	sxtb	r1, r1
 80048be:	2903      	cmp	r1, #3
 80048c0:	dde2      	ble.n	8004888 <keypad_sm+0x9c0>
				encmode = 0;
 80048c2:	2300      	movs	r3, #0
				encpos = 0;
 80048c4:	4a07      	ldr	r2, [pc, #28]	; (80048e4 <keypad_sm+0xa1c>)
				encmode = 0;
 80048c6:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80048c8:	7013      	strb	r3, [r2, #0]
}
 80048ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048cc:	41400000 	.word	0x41400000
 80048d0:	20000824 	.word	0x20000824
 80048d4:	20000005 	.word	0x20000005
 80048d8:	20000000 	.word	0x20000000
 80048dc:	200006c4 	.word	0x200006c4
 80048e0:	200003a2 	.word	0x200003a2
 80048e4:	200003ad 	.word	0x200003ad
				kpenum = WAIT;
 80048e8:	2500      	movs	r5, #0
			keypadarr[0] = num;
 80048ea:	207a      	movs	r0, #122	; 0x7a
 80048ec:	4b7e      	ldr	r3, [pc, #504]	; (8004ae8 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 80048ee:	4a7f      	ldr	r2, [pc, #508]	; (8004aec <keypad_sm+0xc24>)
				keypaddecimal = 0;
 80048f0:	4f7f      	ldr	r7, [pc, #508]	; (8004af0 <keypad_sm+0xc28>)
				kpenum = WAIT;
 80048f2:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80048f4:	7819      	ldrb	r1, [r3, #0]
 80048f6:	b249      	sxtb	r1, r1
 80048f8:	2903      	cmp	r1, #3
 80048fa:	dc1c      	bgt.n	8004936 <keypad_sm+0xa6e>
		if(keypaditerator < keypadlength-1){
 80048fc:	7819      	ldrb	r1, [r3, #0]
 80048fe:	b249      	sxtb	r1, r1
 8004900:	2903      	cmp	r1, #3
 8004902:	dcf7      	bgt.n	80048f4 <keypad_sm+0xa2c>
			if(keypadarr[4] == '.'){
 8004904:	7911      	ldrb	r1, [r2, #4]
 8004906:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004908:	bf08      	it	eq
 800490a:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 800490c:	78d1      	ldrb	r1, [r2, #3]
 800490e:	b2c9      	uxtb	r1, r1
 8004910:	7111      	strb	r1, [r2, #4]
 8004912:	7891      	ldrb	r1, [r2, #2]
 8004914:	b2c9      	uxtb	r1, r1
 8004916:	70d1      	strb	r1, [r2, #3]
 8004918:	7851      	ldrb	r1, [r2, #1]
 800491a:	b2c9      	uxtb	r1, r1
 800491c:	7091      	strb	r1, [r2, #2]
 800491e:	7811      	ldrb	r1, [r2, #0]
 8004920:	b2c9      	uxtb	r1, r1
 8004922:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004924:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004926:	7819      	ldrb	r1, [r3, #0]
 8004928:	3101      	adds	r1, #1
 800492a:	b249      	sxtb	r1, r1
 800492c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800492e:	7819      	ldrb	r1, [r3, #0]
 8004930:	b249      	sxtb	r1, r1
 8004932:	2903      	cmp	r1, #3
 8004934:	dde2      	ble.n	80048fc <keypad_sm+0xa34>
				encmode = 0;
 8004936:	2300      	movs	r3, #0
				encpos = 0;
 8004938:	4a6e      	ldr	r2, [pc, #440]	; (8004af4 <keypad_sm+0xc2c>)
				encmode = 0;
 800493a:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800493c:	7013      	strb	r3, [r2, #0]
}
 800493e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004940:	207a      	movs	r0, #122	; 0x7a
 8004942:	4b69      	ldr	r3, [pc, #420]	; (8004ae8 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 8004944:	4a69      	ldr	r2, [pc, #420]	; (8004aec <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8004946:	4c6a      	ldr	r4, [pc, #424]	; (8004af0 <keypad_sm+0xc28>)
				kpenum = WAIT;
 8004948:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 800494a:	7819      	ldrb	r1, [r3, #0]
 800494c:	b249      	sxtb	r1, r1
 800494e:	2903      	cmp	r1, #3
 8004950:	f73f aad0 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004954:	7819      	ldrb	r1, [r3, #0]
 8004956:	b249      	sxtb	r1, r1
 8004958:	2903      	cmp	r1, #3
 800495a:	dcf6      	bgt.n	800494a <keypad_sm+0xa82>
			if(keypadarr[4] == '.'){
 800495c:	7911      	ldrb	r1, [r2, #4]
 800495e:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004960:	bf08      	it	eq
 8004962:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004964:	78d1      	ldrb	r1, [r2, #3]
 8004966:	b2c9      	uxtb	r1, r1
 8004968:	7111      	strb	r1, [r2, #4]
 800496a:	7891      	ldrb	r1, [r2, #2]
 800496c:	b2c9      	uxtb	r1, r1
 800496e:	70d1      	strb	r1, [r2, #3]
 8004970:	7851      	ldrb	r1, [r2, #1]
 8004972:	b2c9      	uxtb	r1, r1
 8004974:	7091      	strb	r1, [r2, #2]
 8004976:	7811      	ldrb	r1, [r2, #0]
 8004978:	b2c9      	uxtb	r1, r1
 800497a:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800497c:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800497e:	7819      	ldrb	r1, [r3, #0]
 8004980:	3101      	adds	r1, #1
 8004982:	b249      	sxtb	r1, r1
 8004984:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004986:	7819      	ldrb	r1, [r3, #0]
 8004988:	b249      	sxtb	r1, r1
 800498a:	2903      	cmp	r1, #3
 800498c:	dde2      	ble.n	8004954 <keypad_sm+0xa8c>
}
 800498e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004990:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004994:	f7fc be06 	b.w	80015a4 <update_keypad.part.0>
			keypadarr[0] = num;
 8004998:	207a      	movs	r0, #122	; 0x7a
 800499a:	4b53      	ldr	r3, [pc, #332]	; (8004ae8 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 800499c:	4a53      	ldr	r2, [pc, #332]	; (8004aec <keypad_sm+0xc24>)
				keypaddecimal = 0;
 800499e:	4c54      	ldr	r4, [pc, #336]	; (8004af0 <keypad_sm+0xc28>)
				kpenum = WAIT;
 80049a0:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80049a2:	7819      	ldrb	r1, [r3, #0]
 80049a4:	b249      	sxtb	r1, r1
 80049a6:	2903      	cmp	r1, #3
 80049a8:	f73f aaa4 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80049ac:	7819      	ldrb	r1, [r3, #0]
 80049ae:	b249      	sxtb	r1, r1
 80049b0:	2903      	cmp	r1, #3
 80049b2:	dcf6      	bgt.n	80049a2 <keypad_sm+0xada>
			if(keypadarr[4] == '.'){
 80049b4:	7911      	ldrb	r1, [r2, #4]
 80049b6:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80049b8:	bf08      	it	eq
 80049ba:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 80049bc:	78d1      	ldrb	r1, [r2, #3]
 80049be:	b2c9      	uxtb	r1, r1
 80049c0:	7111      	strb	r1, [r2, #4]
 80049c2:	7891      	ldrb	r1, [r2, #2]
 80049c4:	b2c9      	uxtb	r1, r1
 80049c6:	70d1      	strb	r1, [r2, #3]
 80049c8:	7851      	ldrb	r1, [r2, #1]
 80049ca:	b2c9      	uxtb	r1, r1
 80049cc:	7091      	strb	r1, [r2, #2]
 80049ce:	7811      	ldrb	r1, [r2, #0]
 80049d0:	b2c9      	uxtb	r1, r1
 80049d2:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80049d4:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80049d6:	7819      	ldrb	r1, [r3, #0]
 80049d8:	3101      	adds	r1, #1
 80049da:	b249      	sxtb	r1, r1
 80049dc:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80049de:	7819      	ldrb	r1, [r3, #0]
 80049e0:	b249      	sxtb	r1, r1
 80049e2:	2903      	cmp	r1, #3
 80049e4:	dde2      	ble.n	80049ac <keypad_sm+0xae4>
}
 80049e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80049e8:	2500      	movs	r5, #0
			keypadarr[0] = num;
 80049ea:	207a      	movs	r0, #122	; 0x7a
 80049ec:	4b3e      	ldr	r3, [pc, #248]	; (8004ae8 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 80049ee:	4a3f      	ldr	r2, [pc, #252]	; (8004aec <keypad_sm+0xc24>)
				keypaddecimal = 0;
 80049f0:	4f3f      	ldr	r7, [pc, #252]	; (8004af0 <keypad_sm+0xc28>)
				kpenum = WAIT;
 80049f2:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80049f4:	7819      	ldrb	r1, [r3, #0]
 80049f6:	b249      	sxtb	r1, r1
 80049f8:	2903      	cmp	r1, #3
 80049fa:	dc1c      	bgt.n	8004a36 <keypad_sm+0xb6e>
		if(keypaditerator < keypadlength-1){
 80049fc:	7819      	ldrb	r1, [r3, #0]
 80049fe:	b249      	sxtb	r1, r1
 8004a00:	2903      	cmp	r1, #3
 8004a02:	dcf7      	bgt.n	80049f4 <keypad_sm+0xb2c>
			if(keypadarr[4] == '.'){
 8004a04:	7911      	ldrb	r1, [r2, #4]
 8004a06:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004a08:	bf08      	it	eq
 8004a0a:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004a0c:	78d1      	ldrb	r1, [r2, #3]
 8004a0e:	b2c9      	uxtb	r1, r1
 8004a10:	7111      	strb	r1, [r2, #4]
 8004a12:	7891      	ldrb	r1, [r2, #2]
 8004a14:	b2c9      	uxtb	r1, r1
 8004a16:	70d1      	strb	r1, [r2, #3]
 8004a18:	7851      	ldrb	r1, [r2, #1]
 8004a1a:	b2c9      	uxtb	r1, r1
 8004a1c:	7091      	strb	r1, [r2, #2]
 8004a1e:	7811      	ldrb	r1, [r2, #0]
 8004a20:	b2c9      	uxtb	r1, r1
 8004a22:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004a24:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004a26:	7819      	ldrb	r1, [r3, #0]
 8004a28:	3101      	adds	r1, #1
 8004a2a:	b249      	sxtb	r1, r1
 8004a2c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004a2e:	7819      	ldrb	r1, [r3, #0]
 8004a30:	b249      	sxtb	r1, r1
 8004a32:	2903      	cmp	r1, #3
 8004a34:	dde2      	ble.n	80049fc <keypad_sm+0xb34>
				encmode = 0;
 8004a36:	2300      	movs	r3, #0
				encpos = 0;
 8004a38:	4a2e      	ldr	r2, [pc, #184]	; (8004af4 <keypad_sm+0xc2c>)
				encmode = 0;
 8004a3a:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004a3c:	7013      	strb	r3, [r2, #0]
}
 8004a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004a40:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004a42:	207a      	movs	r0, #122	; 0x7a
 8004a44:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 8004a46:	4a29      	ldr	r2, [pc, #164]	; (8004aec <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8004a48:	4f29      	ldr	r7, [pc, #164]	; (8004af0 <keypad_sm+0xc28>)
				kpenum = WAIT;
 8004a4a:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004a4c:	7819      	ldrb	r1, [r3, #0]
 8004a4e:	b249      	sxtb	r1, r1
 8004a50:	2903      	cmp	r1, #3
 8004a52:	dc1c      	bgt.n	8004a8e <keypad_sm+0xbc6>
		if(keypaditerator < keypadlength-1){
 8004a54:	7819      	ldrb	r1, [r3, #0]
 8004a56:	b249      	sxtb	r1, r1
 8004a58:	2903      	cmp	r1, #3
 8004a5a:	dcf7      	bgt.n	8004a4c <keypad_sm+0xb84>
			if(keypadarr[4] == '.'){
 8004a5c:	7911      	ldrb	r1, [r2, #4]
 8004a5e:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004a60:	bf08      	it	eq
 8004a62:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004a64:	78d1      	ldrb	r1, [r2, #3]
 8004a66:	b2c9      	uxtb	r1, r1
 8004a68:	7111      	strb	r1, [r2, #4]
 8004a6a:	7891      	ldrb	r1, [r2, #2]
 8004a6c:	b2c9      	uxtb	r1, r1
 8004a6e:	70d1      	strb	r1, [r2, #3]
 8004a70:	7851      	ldrb	r1, [r2, #1]
 8004a72:	b2c9      	uxtb	r1, r1
 8004a74:	7091      	strb	r1, [r2, #2]
 8004a76:	7811      	ldrb	r1, [r2, #0]
 8004a78:	b2c9      	uxtb	r1, r1
 8004a7a:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004a7c:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004a7e:	7819      	ldrb	r1, [r3, #0]
 8004a80:	3101      	adds	r1, #1
 8004a82:	b249      	sxtb	r1, r1
 8004a84:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004a86:	7819      	ldrb	r1, [r3, #0]
 8004a88:	b249      	sxtb	r1, r1
 8004a8a:	2903      	cmp	r1, #3
 8004a8c:	dde2      	ble.n	8004a54 <keypad_sm+0xb8c>
				encmode = 0;
 8004a8e:	2300      	movs	r3, #0
				encpos = 0;
 8004a90:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <keypad_sm+0xc2c>)
				encmode = 0;
 8004a92:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004a94:	7013      	strb	r3, [r2, #0]
}
 8004a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004a98:	207a      	movs	r0, #122	; 0x7a
 8004a9a:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 8004a9c:	4a13      	ldr	r2, [pc, #76]	; (8004aec <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8004a9e:	4c14      	ldr	r4, [pc, #80]	; (8004af0 <keypad_sm+0xc28>)
				kpenum = WAIT;
 8004aa0:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004aa2:	7819      	ldrb	r1, [r3, #0]
 8004aa4:	b249      	sxtb	r1, r1
 8004aa6:	2903      	cmp	r1, #3
 8004aa8:	f73f aa24 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004aac:	7819      	ldrb	r1, [r3, #0]
 8004aae:	b249      	sxtb	r1, r1
 8004ab0:	2903      	cmp	r1, #3
 8004ab2:	dcf6      	bgt.n	8004aa2 <keypad_sm+0xbda>
			if(keypadarr[4] == '.'){
 8004ab4:	7911      	ldrb	r1, [r2, #4]
 8004ab6:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004ab8:	bf08      	it	eq
 8004aba:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004abc:	78d1      	ldrb	r1, [r2, #3]
 8004abe:	b2c9      	uxtb	r1, r1
 8004ac0:	7111      	strb	r1, [r2, #4]
 8004ac2:	7891      	ldrb	r1, [r2, #2]
 8004ac4:	b2c9      	uxtb	r1, r1
 8004ac6:	70d1      	strb	r1, [r2, #3]
 8004ac8:	7851      	ldrb	r1, [r2, #1]
 8004aca:	b2c9      	uxtb	r1, r1
 8004acc:	7091      	strb	r1, [r2, #2]
 8004ace:	7811      	ldrb	r1, [r2, #0]
 8004ad0:	b2c9      	uxtb	r1, r1
 8004ad2:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004ad4:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004ad6:	7819      	ldrb	r1, [r3, #0]
 8004ad8:	3101      	adds	r1, #1
 8004ada:	b249      	sxtb	r1, r1
 8004adc:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004ade:	7819      	ldrb	r1, [r3, #0]
 8004ae0:	b249      	sxtb	r1, r1
 8004ae2:	2903      	cmp	r1, #3
 8004ae4:	dde2      	ble.n	8004aac <keypad_sm+0xbe4>
}
 8004ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ae8:	20000005 	.word	0x20000005
 8004aec:	20000000 	.word	0x20000000
 8004af0:	200006c4 	.word	0x200006c4
 8004af4:	200003ad 	.word	0x200003ad
	float temp = translate_keypad();
 8004af8:	f7fe ff26 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004afc:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8004afe:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004b00:	f7fc faea 	bl	80010d8 <__aeabi_fcmpge>
 8004b04:	b160      	cbz	r0, 8004b20 <keypad_sm+0xc58>
 8004b06:	4620      	mov	r0, r4
 8004b08:	f7fb fca6 	bl	8000458 <__aeabi_f2d>
 8004b0c:	a39a      	add	r3, pc, #616	; (adr r3, 8004d78 <keypad_sm+0xeb0>)
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f7fb ff75 	bl	8000a00 <__aeabi_dcmple>
 8004b16:	b118      	cbz	r0, 8004b20 <keypad_sm+0xc58>
					amp_set_aux = translate_keypad();
 8004b18:	f7fe ff16 	bl	8003948 <translate_keypad>
 8004b1c:	4a98      	ldr	r2, [pc, #608]	; (8004d80 <keypad_sm+0xeb8>)
 8004b1e:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8004b20:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8004b22:	207a      	movs	r0, #122	; 0x7a
 8004b24:	4b97      	ldr	r3, [pc, #604]	; (8004d84 <keypad_sm+0xebc>)
			if(keypadarr[4] == '.'){
 8004b26:	4a98      	ldr	r2, [pc, #608]	; (8004d88 <keypad_sm+0xec0>)
				keypaddecimal = 0;
 8004b28:	4d98      	ldr	r5, [pc, #608]	; (8004d8c <keypad_sm+0xec4>)
				kpenum = WAIT;
 8004b2a:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8004b2c:	7819      	ldrb	r1, [r3, #0]
 8004b2e:	b249      	sxtb	r1, r1
 8004b30:	2903      	cmp	r1, #3
 8004b32:	f73f a9df 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004b36:	7819      	ldrb	r1, [r3, #0]
 8004b38:	b249      	sxtb	r1, r1
 8004b3a:	2903      	cmp	r1, #3
 8004b3c:	dcf6      	bgt.n	8004b2c <keypad_sm+0xc64>
			if(keypadarr[4] == '.'){
 8004b3e:	7911      	ldrb	r1, [r2, #4]
 8004b40:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004b42:	bf08      	it	eq
 8004b44:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004b46:	78d1      	ldrb	r1, [r2, #3]
 8004b48:	b2c9      	uxtb	r1, r1
 8004b4a:	7111      	strb	r1, [r2, #4]
 8004b4c:	7891      	ldrb	r1, [r2, #2]
 8004b4e:	b2c9      	uxtb	r1, r1
 8004b50:	70d1      	strb	r1, [r2, #3]
 8004b52:	7851      	ldrb	r1, [r2, #1]
 8004b54:	b2c9      	uxtb	r1, r1
 8004b56:	7091      	strb	r1, [r2, #2]
 8004b58:	7811      	ldrb	r1, [r2, #0]
 8004b5a:	b2c9      	uxtb	r1, r1
 8004b5c:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004b5e:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004b60:	7819      	ldrb	r1, [r3, #0]
 8004b62:	3101      	adds	r1, #1
 8004b64:	b249      	sxtb	r1, r1
 8004b66:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004b68:	7819      	ldrb	r1, [r3, #0]
 8004b6a:	b249      	sxtb	r1, r1
 8004b6c:	2903      	cmp	r1, #3
 8004b6e:	dde2      	ble.n	8004b36 <keypad_sm+0xc6e>
}
 8004b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8004b72:	f7fe fee9 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004b76:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8004b78:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004b7a:	f7fc faad 	bl	80010d8 <__aeabi_fcmpge>
 8004b7e:	b140      	cbz	r0, 8004b92 <keypad_sm+0xcca>
 8004b80:	4628      	mov	r0, r5
 8004b82:	4983      	ldr	r1, [pc, #524]	; (8004d90 <keypad_sm+0xec8>)
 8004b84:	f7fc fa9e 	bl	80010c4 <__aeabi_fcmple>
 8004b88:	b118      	cbz	r0, 8004b92 <keypad_sm+0xcca>
					amp_set_aux = translate_keypad();
 8004b8a:	f7fe fedd 	bl	8003948 <translate_keypad>
 8004b8e:	4a7c      	ldr	r2, [pc, #496]	; (8004d80 <keypad_sm+0xeb8>)
 8004b90:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8004b92:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004b94:	207a      	movs	r0, #122	; 0x7a
 8004b96:	4b7b      	ldr	r3, [pc, #492]	; (8004d84 <keypad_sm+0xebc>)
			if(keypadarr[4] == '.'){
 8004b98:	4a7b      	ldr	r2, [pc, #492]	; (8004d88 <keypad_sm+0xec0>)
				keypaddecimal = 0;
 8004b9a:	4f7c      	ldr	r7, [pc, #496]	; (8004d8c <keypad_sm+0xec4>)
				kpenum = WAIT;
 8004b9c:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004b9e:	7819      	ldrb	r1, [r3, #0]
 8004ba0:	b249      	sxtb	r1, r1
 8004ba2:	2903      	cmp	r1, #3
 8004ba4:	dc1c      	bgt.n	8004be0 <keypad_sm+0xd18>
		if(keypaditerator < keypadlength-1){
 8004ba6:	7819      	ldrb	r1, [r3, #0]
 8004ba8:	b249      	sxtb	r1, r1
 8004baa:	2903      	cmp	r1, #3
 8004bac:	dcf7      	bgt.n	8004b9e <keypad_sm+0xcd6>
			if(keypadarr[4] == '.'){
 8004bae:	7911      	ldrb	r1, [r2, #4]
 8004bb0:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004bb2:	bf08      	it	eq
 8004bb4:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004bb6:	78d1      	ldrb	r1, [r2, #3]
 8004bb8:	b2c9      	uxtb	r1, r1
 8004bba:	7111      	strb	r1, [r2, #4]
 8004bbc:	7891      	ldrb	r1, [r2, #2]
 8004bbe:	b2c9      	uxtb	r1, r1
 8004bc0:	70d1      	strb	r1, [r2, #3]
 8004bc2:	7851      	ldrb	r1, [r2, #1]
 8004bc4:	b2c9      	uxtb	r1, r1
 8004bc6:	7091      	strb	r1, [r2, #2]
 8004bc8:	7811      	ldrb	r1, [r2, #0]
 8004bca:	b2c9      	uxtb	r1, r1
 8004bcc:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004bce:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004bd0:	7819      	ldrb	r1, [r3, #0]
 8004bd2:	3101      	adds	r1, #1
 8004bd4:	b249      	sxtb	r1, r1
 8004bd6:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004bd8:	7819      	ldrb	r1, [r3, #0]
 8004bda:	b249      	sxtb	r1, r1
 8004bdc:	2903      	cmp	r1, #3
 8004bde:	dde2      	ble.n	8004ba6 <keypad_sm+0xcde>
				encmode = 0;
 8004be0:	2300      	movs	r3, #0
				encpos = 0;
 8004be2:	4a6c      	ldr	r2, [pc, #432]	; (8004d94 <keypad_sm+0xecc>)
				encmode = 0;
 8004be4:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004be6:	7013      	strb	r3, [r2, #0]
}
 8004be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004bea:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004bec:	207a      	movs	r0, #122	; 0x7a
 8004bee:	4b65      	ldr	r3, [pc, #404]	; (8004d84 <keypad_sm+0xebc>)
			if(keypadarr[4] == '.'){
 8004bf0:	4a65      	ldr	r2, [pc, #404]	; (8004d88 <keypad_sm+0xec0>)
				keypaddecimal = 0;
 8004bf2:	4f66      	ldr	r7, [pc, #408]	; (8004d8c <keypad_sm+0xec4>)
				kpenum = WAIT;
 8004bf4:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004bf6:	7819      	ldrb	r1, [r3, #0]
 8004bf8:	b249      	sxtb	r1, r1
 8004bfa:	2903      	cmp	r1, #3
 8004bfc:	dc1c      	bgt.n	8004c38 <keypad_sm+0xd70>
		if(keypaditerator < keypadlength-1){
 8004bfe:	7819      	ldrb	r1, [r3, #0]
 8004c00:	b249      	sxtb	r1, r1
 8004c02:	2903      	cmp	r1, #3
 8004c04:	dcf7      	bgt.n	8004bf6 <keypad_sm+0xd2e>
			if(keypadarr[4] == '.'){
 8004c06:	7911      	ldrb	r1, [r2, #4]
 8004c08:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004c0a:	bf08      	it	eq
 8004c0c:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004c0e:	78d1      	ldrb	r1, [r2, #3]
 8004c10:	b2c9      	uxtb	r1, r1
 8004c12:	7111      	strb	r1, [r2, #4]
 8004c14:	7891      	ldrb	r1, [r2, #2]
 8004c16:	b2c9      	uxtb	r1, r1
 8004c18:	70d1      	strb	r1, [r2, #3]
 8004c1a:	7851      	ldrb	r1, [r2, #1]
 8004c1c:	b2c9      	uxtb	r1, r1
 8004c1e:	7091      	strb	r1, [r2, #2]
 8004c20:	7811      	ldrb	r1, [r2, #0]
 8004c22:	b2c9      	uxtb	r1, r1
 8004c24:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004c26:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004c28:	7819      	ldrb	r1, [r3, #0]
 8004c2a:	3101      	adds	r1, #1
 8004c2c:	b249      	sxtb	r1, r1
 8004c2e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004c30:	7819      	ldrb	r1, [r3, #0]
 8004c32:	b249      	sxtb	r1, r1
 8004c34:	2903      	cmp	r1, #3
 8004c36:	dde2      	ble.n	8004bfe <keypad_sm+0xd36>
				encmode = 0;
 8004c38:	2300      	movs	r3, #0
				encpos = 0;
 8004c3a:	4a56      	ldr	r2, [pc, #344]	; (8004d94 <keypad_sm+0xecc>)
				encmode = 0;
 8004c3c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004c3e:	7013      	strb	r3, [r2, #0]
}
 8004c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(num == '#'){
 8004c42:	2823      	cmp	r0, #35	; 0x23
 8004c44:	f000 8397 	beq.w	8005376 <keypad_sm+0x14ae>
			else if(num == '+'){
 8004c48:	282b      	cmp	r0, #43	; 0x2b
 8004c4a:	f000 866c 	beq.w	8005926 <keypad_sm+0x1a5e>
			else if(num == '-'){
 8004c4e:	282d      	cmp	r0, #45	; 0x2d
 8004c50:	f000 8607 	beq.w	8005862 <keypad_sm+0x199a>
			else if(num == 's'){
 8004c54:	2873      	cmp	r0, #115	; 0x73
 8004c56:	f000 8795 	beq.w	8005b84 <keypad_sm+0x1cbc>
			else if(num == '['){
 8004c5a:	285b      	cmp	r0, #91	; 0x5b
 8004c5c:	f001 800a 	beq.w	8005c74 <keypad_sm+0x1dac>
			else if(num == ']'){
 8004c60:	285d      	cmp	r0, #93	; 0x5d
 8004c62:	f47f a947 	bne.w	8003ef4 <keypad_sm+0x2c>
				float temp = translate_keypad();
 8004c66:	f7fe fe6f 	bl	8003948 <translate_keypad>
				if(encpos == 0){
 8004c6a:	4b4a      	ldr	r3, [pc, #296]	; (8004d94 <keypad_sm+0xecc>)
				float temp = translate_keypad();
 8004c6c:	4604      	mov	r4, r0
				if(encpos == 0){
 8004c6e:	781a      	ldrb	r2, [r3, #0]
 8004c70:	2a00      	cmp	r2, #0
 8004c72:	f001 82e8 	beq.w	8006246 <keypad_sm+0x237e>
				else if(encpos == 1){
 8004c76:	781a      	ldrb	r2, [r3, #0]
 8004c78:	2a01      	cmp	r2, #1
 8004c7a:	f001 82dd 	beq.w	8006238 <keypad_sm+0x2370>
				else if(encpos == 3){
 8004c7e:	781a      	ldrb	r2, [r3, #0]
 8004c80:	2a03      	cmp	r2, #3
 8004c82:	f001 8229 	beq.w	80060d8 <keypad_sm+0x2210>
				else if(encpos == 4){
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	f000 82f5 	beq.w	8005278 <keypad_sm+0x13b0>
				if(temp >= 0.0000 && temp <= 12.0000){
 8004c8e:	4620      	mov	r0, r4
 8004c90:	2100      	movs	r1, #0
 8004c92:	f7fc fa21 	bl	80010d8 <__aeabi_fcmpge>
 8004c96:	b130      	cbz	r0, 8004ca6 <keypad_sm+0xdde>
 8004c98:	4620      	mov	r0, r4
 8004c9a:	493d      	ldr	r1, [pc, #244]	; (8004d90 <keypad_sm+0xec8>)
 8004c9c:	f7fc fa12 	bl	80010c4 <__aeabi_fcmple>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	f041 824f 	bne.w	8006144 <keypad_sm+0x227c>
				else if(temp < 0.0000){
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	2100      	movs	r1, #0
 8004caa:	f7fc fa01 	bl	80010b0 <__aeabi_fcmplt>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	f041 82a4 	bne.w	80061fc <keypad_sm+0x2334>
				else if(temp > 12.0000){
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	4936      	ldr	r1, [pc, #216]	; (8004d90 <keypad_sm+0xec8>)
 8004cb8:	f7fc fa18 	bl	80010ec <__aeabi_fcmpgt>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	f43f a919 	beq.w	8003ef4 <keypad_sm+0x2c>
}
 8004cc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					fill_keypad(0,12);
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	4931      	ldr	r1, [pc, #196]	; (8004d90 <keypad_sm+0xec8>)
 8004cca:	f7fe bfe1 	b.w	8003c90 <fill_keypad>
				keypaddecimal = 0;
 8004cce:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8004cd0:	207a      	movs	r0, #122	; 0x7a
 8004cd2:	4b2c      	ldr	r3, [pc, #176]	; (8004d84 <keypad_sm+0xebc>)
			if(keypadarr[4] == '.'){
 8004cd4:	4a2c      	ldr	r2, [pc, #176]	; (8004d88 <keypad_sm+0xec0>)
				keypaddecimal = 0;
 8004cd6:	4d2d      	ldr	r5, [pc, #180]	; (8004d8c <keypad_sm+0xec4>)
	while(keypaditerator < 4){
 8004cd8:	7819      	ldrb	r1, [r3, #0]
 8004cda:	b249      	sxtb	r1, r1
 8004cdc:	2903      	cmp	r1, #3
 8004cde:	dc1c      	bgt.n	8004d1a <keypad_sm+0xe52>
		if(keypaditerator < keypadlength-1){
 8004ce0:	7819      	ldrb	r1, [r3, #0]
 8004ce2:	b249      	sxtb	r1, r1
 8004ce4:	2903      	cmp	r1, #3
 8004ce6:	dcf7      	bgt.n	8004cd8 <keypad_sm+0xe10>
			if(keypadarr[4] == '.'){
 8004ce8:	7911      	ldrb	r1, [r2, #4]
 8004cea:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004cec:	bf08      	it	eq
 8004cee:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004cf0:	78d1      	ldrb	r1, [r2, #3]
 8004cf2:	b2c9      	uxtb	r1, r1
 8004cf4:	7111      	strb	r1, [r2, #4]
 8004cf6:	7891      	ldrb	r1, [r2, #2]
 8004cf8:	b2c9      	uxtb	r1, r1
 8004cfa:	70d1      	strb	r1, [r2, #3]
 8004cfc:	7851      	ldrb	r1, [r2, #1]
 8004cfe:	b2c9      	uxtb	r1, r1
 8004d00:	7091      	strb	r1, [r2, #2]
 8004d02:	7811      	ldrb	r1, [r2, #0]
 8004d04:	b2c9      	uxtb	r1, r1
 8004d06:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004d08:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004d0a:	7819      	ldrb	r1, [r3, #0]
 8004d0c:	3101      	adds	r1, #1
 8004d0e:	b249      	sxtb	r1, r1
 8004d10:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004d12:	7819      	ldrb	r1, [r3, #0]
 8004d14:	b249      	sxtb	r1, r1
 8004d16:	2903      	cmp	r1, #3
 8004d18:	dde2      	ble.n	8004ce0 <keypad_sm+0xe18>
				encmode = 0;
 8004d1a:	2300      	movs	r3, #0
				encpos = 0;
 8004d1c:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <keypad_sm+0xecc>)
				encmode = 0;
 8004d1e:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004d20:	7013      	strb	r3, [r2, #0]
}
 8004d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004d24:	207a      	movs	r0, #122	; 0x7a
 8004d26:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <keypad_sm+0xebc>)
			if(keypadarr[4] == '.'){
 8004d28:	4a17      	ldr	r2, [pc, #92]	; (8004d88 <keypad_sm+0xec0>)
				keypaddecimal = 0;
 8004d2a:	4c18      	ldr	r4, [pc, #96]	; (8004d8c <keypad_sm+0xec4>)
				kpenum = WAIT;
 8004d2c:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004d2e:	7819      	ldrb	r1, [r3, #0]
 8004d30:	b249      	sxtb	r1, r1
 8004d32:	2903      	cmp	r1, #3
 8004d34:	f73f a8de 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004d38:	7819      	ldrb	r1, [r3, #0]
 8004d3a:	b249      	sxtb	r1, r1
 8004d3c:	2903      	cmp	r1, #3
 8004d3e:	dcf6      	bgt.n	8004d2e <keypad_sm+0xe66>
			if(keypadarr[4] == '.'){
 8004d40:	7911      	ldrb	r1, [r2, #4]
 8004d42:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004d44:	bf08      	it	eq
 8004d46:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004d48:	78d1      	ldrb	r1, [r2, #3]
 8004d4a:	b2c9      	uxtb	r1, r1
 8004d4c:	7111      	strb	r1, [r2, #4]
 8004d4e:	7891      	ldrb	r1, [r2, #2]
 8004d50:	b2c9      	uxtb	r1, r1
 8004d52:	70d1      	strb	r1, [r2, #3]
 8004d54:	7851      	ldrb	r1, [r2, #1]
 8004d56:	b2c9      	uxtb	r1, r1
 8004d58:	7091      	strb	r1, [r2, #2]
 8004d5a:	7811      	ldrb	r1, [r2, #0]
 8004d5c:	b2c9      	uxtb	r1, r1
 8004d5e:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004d60:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004d62:	7819      	ldrb	r1, [r3, #0]
 8004d64:	3101      	adds	r1, #1
 8004d66:	b249      	sxtb	r1, r1
 8004d68:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004d6a:	7819      	ldrb	r1, [r3, #0]
 8004d6c:	b249      	sxtb	r1, r1
 8004d6e:	2903      	cmp	r1, #3
 8004d70:	dde2      	ble.n	8004d38 <keypad_sm+0xe70>
}
 8004d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d74:	f3af 8000 	nop.w
 8004d78:	50b0f27c 	.word	0x50b0f27c
 8004d7c:	3fe99a6b 	.word	0x3fe99a6b
 8004d80:	20000394 	.word	0x20000394
 8004d84:	20000005 	.word	0x20000005
 8004d88:	20000000 	.word	0x20000000
 8004d8c:	200006c4 	.word	0x200006c4
 8004d90:	41400000 	.word	0x41400000
 8004d94:	200003ad 	.word	0x200003ad
			keypadarr[0] = num;
 8004d98:	207a      	movs	r0, #122	; 0x7a
 8004d9a:	4b8f      	ldr	r3, [pc, #572]	; (8004fd8 <keypad_sm+0x1110>)
			if(keypadarr[4] == '.'){
 8004d9c:	4a8f      	ldr	r2, [pc, #572]	; (8004fdc <keypad_sm+0x1114>)
				keypaddecimal = 0;
 8004d9e:	4c90      	ldr	r4, [pc, #576]	; (8004fe0 <keypad_sm+0x1118>)
				kpenum = WAIT;
 8004da0:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004da2:	7819      	ldrb	r1, [r3, #0]
 8004da4:	b249      	sxtb	r1, r1
 8004da6:	2903      	cmp	r1, #3
 8004da8:	f73f a8a4 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004dac:	7819      	ldrb	r1, [r3, #0]
 8004dae:	b249      	sxtb	r1, r1
 8004db0:	2903      	cmp	r1, #3
 8004db2:	dcf6      	bgt.n	8004da2 <keypad_sm+0xeda>
			if(keypadarr[4] == '.'){
 8004db4:	7911      	ldrb	r1, [r2, #4]
 8004db6:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004db8:	bf08      	it	eq
 8004dba:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004dbc:	78d1      	ldrb	r1, [r2, #3]
 8004dbe:	b2c9      	uxtb	r1, r1
 8004dc0:	7111      	strb	r1, [r2, #4]
 8004dc2:	7891      	ldrb	r1, [r2, #2]
 8004dc4:	b2c9      	uxtb	r1, r1
 8004dc6:	70d1      	strb	r1, [r2, #3]
 8004dc8:	7851      	ldrb	r1, [r2, #1]
 8004dca:	b2c9      	uxtb	r1, r1
 8004dcc:	7091      	strb	r1, [r2, #2]
 8004dce:	7811      	ldrb	r1, [r2, #0]
 8004dd0:	b2c9      	uxtb	r1, r1
 8004dd2:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004dd4:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004dd6:	7819      	ldrb	r1, [r3, #0]
 8004dd8:	3101      	adds	r1, #1
 8004dda:	b249      	sxtb	r1, r1
 8004ddc:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004dde:	7819      	ldrb	r1, [r3, #0]
 8004de0:	b249      	sxtb	r1, r1
 8004de2:	2903      	cmp	r1, #3
 8004de4:	dde2      	ble.n	8004dac <keypad_sm+0xee4>
}
 8004de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004de8:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004dea:	207a      	movs	r0, #122	; 0x7a
 8004dec:	4b7a      	ldr	r3, [pc, #488]	; (8004fd8 <keypad_sm+0x1110>)
			if(keypadarr[4] == '.'){
 8004dee:	4a7b      	ldr	r2, [pc, #492]	; (8004fdc <keypad_sm+0x1114>)
				keypaddecimal = 0;
 8004df0:	4f7b      	ldr	r7, [pc, #492]	; (8004fe0 <keypad_sm+0x1118>)
				kpenum = WAIT;
 8004df2:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004df4:	7819      	ldrb	r1, [r3, #0]
 8004df6:	b249      	sxtb	r1, r1
 8004df8:	2903      	cmp	r1, #3
 8004dfa:	dc1c      	bgt.n	8004e36 <keypad_sm+0xf6e>
		if(keypaditerator < keypadlength-1){
 8004dfc:	7819      	ldrb	r1, [r3, #0]
 8004dfe:	b249      	sxtb	r1, r1
 8004e00:	2903      	cmp	r1, #3
 8004e02:	dcf7      	bgt.n	8004df4 <keypad_sm+0xf2c>
			if(keypadarr[4] == '.'){
 8004e04:	7911      	ldrb	r1, [r2, #4]
 8004e06:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004e08:	bf08      	it	eq
 8004e0a:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004e0c:	78d1      	ldrb	r1, [r2, #3]
 8004e0e:	b2c9      	uxtb	r1, r1
 8004e10:	7111      	strb	r1, [r2, #4]
 8004e12:	7891      	ldrb	r1, [r2, #2]
 8004e14:	b2c9      	uxtb	r1, r1
 8004e16:	70d1      	strb	r1, [r2, #3]
 8004e18:	7851      	ldrb	r1, [r2, #1]
 8004e1a:	b2c9      	uxtb	r1, r1
 8004e1c:	7091      	strb	r1, [r2, #2]
 8004e1e:	7811      	ldrb	r1, [r2, #0]
 8004e20:	b2c9      	uxtb	r1, r1
 8004e22:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004e24:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004e26:	7819      	ldrb	r1, [r3, #0]
 8004e28:	3101      	adds	r1, #1
 8004e2a:	b249      	sxtb	r1, r1
 8004e2c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004e2e:	7819      	ldrb	r1, [r3, #0]
 8004e30:	b249      	sxtb	r1, r1
 8004e32:	2903      	cmp	r1, #3
 8004e34:	dde2      	ble.n	8004dfc <keypad_sm+0xf34>
				encmode = 0;
 8004e36:	2300      	movs	r3, #0
				encpos = 0;
 8004e38:	4a6a      	ldr	r2, [pc, #424]	; (8004fe4 <keypad_sm+0x111c>)
				encmode = 0;
 8004e3a:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004e3c:	7013      	strb	r3, [r2, #0]
}
 8004e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004e40:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004e42:	207a      	movs	r0, #122	; 0x7a
 8004e44:	4b64      	ldr	r3, [pc, #400]	; (8004fd8 <keypad_sm+0x1110>)
			if(keypadarr[4] == '.'){
 8004e46:	4a65      	ldr	r2, [pc, #404]	; (8004fdc <keypad_sm+0x1114>)
				keypaddecimal = 0;
 8004e48:	4f65      	ldr	r7, [pc, #404]	; (8004fe0 <keypad_sm+0x1118>)
				kpenum = WAIT;
 8004e4a:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004e4c:	7819      	ldrb	r1, [r3, #0]
 8004e4e:	b249      	sxtb	r1, r1
 8004e50:	2903      	cmp	r1, #3
 8004e52:	dc1c      	bgt.n	8004e8e <keypad_sm+0xfc6>
		if(keypaditerator < keypadlength-1){
 8004e54:	7819      	ldrb	r1, [r3, #0]
 8004e56:	b249      	sxtb	r1, r1
 8004e58:	2903      	cmp	r1, #3
 8004e5a:	dcf7      	bgt.n	8004e4c <keypad_sm+0xf84>
			if(keypadarr[4] == '.'){
 8004e5c:	7911      	ldrb	r1, [r2, #4]
 8004e5e:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004e60:	bf08      	it	eq
 8004e62:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004e64:	78d1      	ldrb	r1, [r2, #3]
 8004e66:	b2c9      	uxtb	r1, r1
 8004e68:	7111      	strb	r1, [r2, #4]
 8004e6a:	7891      	ldrb	r1, [r2, #2]
 8004e6c:	b2c9      	uxtb	r1, r1
 8004e6e:	70d1      	strb	r1, [r2, #3]
 8004e70:	7851      	ldrb	r1, [r2, #1]
 8004e72:	b2c9      	uxtb	r1, r1
 8004e74:	7091      	strb	r1, [r2, #2]
 8004e76:	7811      	ldrb	r1, [r2, #0]
 8004e78:	b2c9      	uxtb	r1, r1
 8004e7a:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004e7c:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004e7e:	7819      	ldrb	r1, [r3, #0]
 8004e80:	3101      	adds	r1, #1
 8004e82:	b249      	sxtb	r1, r1
 8004e84:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004e86:	7819      	ldrb	r1, [r3, #0]
 8004e88:	b249      	sxtb	r1, r1
 8004e8a:	2903      	cmp	r1, #3
 8004e8c:	dde2      	ble.n	8004e54 <keypad_sm+0xf8c>
				encmode = 0;
 8004e8e:	2300      	movs	r3, #0
				encpos = 0;
 8004e90:	4a54      	ldr	r2, [pc, #336]	; (8004fe4 <keypad_sm+0x111c>)
				encmode = 0;
 8004e92:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004e94:	7013      	strb	r3, [r2, #0]
}
 8004e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 8004e98:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8004e9a:	207a      	movs	r0, #122	; 0x7a
 8004e9c:	4b4e      	ldr	r3, [pc, #312]	; (8004fd8 <keypad_sm+0x1110>)
			if(keypadarr[4] == '.'){
 8004e9e:	4a4f      	ldr	r2, [pc, #316]	; (8004fdc <keypad_sm+0x1114>)
				keypaddecimal = 0;
 8004ea0:	4d4f      	ldr	r5, [pc, #316]	; (8004fe0 <keypad_sm+0x1118>)
	while(keypaditerator < 4){
 8004ea2:	7819      	ldrb	r1, [r3, #0]
 8004ea4:	b249      	sxtb	r1, r1
 8004ea6:	2903      	cmp	r1, #3
 8004ea8:	dc1c      	bgt.n	8004ee4 <keypad_sm+0x101c>
		if(keypaditerator < keypadlength-1){
 8004eaa:	7819      	ldrb	r1, [r3, #0]
 8004eac:	b249      	sxtb	r1, r1
 8004eae:	2903      	cmp	r1, #3
 8004eb0:	dcf7      	bgt.n	8004ea2 <keypad_sm+0xfda>
			if(keypadarr[4] == '.'){
 8004eb2:	7911      	ldrb	r1, [r2, #4]
 8004eb4:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004eb6:	bf08      	it	eq
 8004eb8:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004eba:	78d1      	ldrb	r1, [r2, #3]
 8004ebc:	b2c9      	uxtb	r1, r1
 8004ebe:	7111      	strb	r1, [r2, #4]
 8004ec0:	7891      	ldrb	r1, [r2, #2]
 8004ec2:	b2c9      	uxtb	r1, r1
 8004ec4:	70d1      	strb	r1, [r2, #3]
 8004ec6:	7851      	ldrb	r1, [r2, #1]
 8004ec8:	b2c9      	uxtb	r1, r1
 8004eca:	7091      	strb	r1, [r2, #2]
 8004ecc:	7811      	ldrb	r1, [r2, #0]
 8004ece:	b2c9      	uxtb	r1, r1
 8004ed0:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004ed2:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004ed4:	7819      	ldrb	r1, [r3, #0]
 8004ed6:	3101      	adds	r1, #1
 8004ed8:	b249      	sxtb	r1, r1
 8004eda:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004edc:	7819      	ldrb	r1, [r3, #0]
 8004ede:	b249      	sxtb	r1, r1
 8004ee0:	2903      	cmp	r1, #3
 8004ee2:	dde2      	ble.n	8004eaa <keypad_sm+0xfe2>
				encmode = 0;
 8004ee4:	2300      	movs	r3, #0
				encpos = 0;
 8004ee6:	4a3f      	ldr	r2, [pc, #252]	; (8004fe4 <keypad_sm+0x111c>)
				encmode = 0;
 8004ee8:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004eea:	7013      	strb	r3, [r2, #0]
}
 8004eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004eee:	207a      	movs	r0, #122	; 0x7a
 8004ef0:	4b39      	ldr	r3, [pc, #228]	; (8004fd8 <keypad_sm+0x1110>)
			if(keypadarr[4] == '.'){
 8004ef2:	4a3a      	ldr	r2, [pc, #232]	; (8004fdc <keypad_sm+0x1114>)
				keypaddecimal = 0;
 8004ef4:	4c3a      	ldr	r4, [pc, #232]	; (8004fe0 <keypad_sm+0x1118>)
				kpenum = WAIT;
 8004ef6:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004ef8:	7819      	ldrb	r1, [r3, #0]
 8004efa:	b249      	sxtb	r1, r1
 8004efc:	2903      	cmp	r1, #3
 8004efe:	f73e aff9 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004f02:	7819      	ldrb	r1, [r3, #0]
 8004f04:	b249      	sxtb	r1, r1
 8004f06:	2903      	cmp	r1, #3
 8004f08:	dcf6      	bgt.n	8004ef8 <keypad_sm+0x1030>
			if(keypadarr[4] == '.'){
 8004f0a:	7911      	ldrb	r1, [r2, #4]
 8004f0c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004f0e:	bf08      	it	eq
 8004f10:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004f12:	78d1      	ldrb	r1, [r2, #3]
 8004f14:	b2c9      	uxtb	r1, r1
 8004f16:	7111      	strb	r1, [r2, #4]
 8004f18:	7891      	ldrb	r1, [r2, #2]
 8004f1a:	b2c9      	uxtb	r1, r1
 8004f1c:	70d1      	strb	r1, [r2, #3]
 8004f1e:	7851      	ldrb	r1, [r2, #1]
 8004f20:	b2c9      	uxtb	r1, r1
 8004f22:	7091      	strb	r1, [r2, #2]
 8004f24:	7811      	ldrb	r1, [r2, #0]
 8004f26:	b2c9      	uxtb	r1, r1
 8004f28:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004f2a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004f2c:	7819      	ldrb	r1, [r3, #0]
 8004f2e:	3101      	adds	r1, #1
 8004f30:	b249      	sxtb	r1, r1
 8004f32:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004f34:	7819      	ldrb	r1, [r3, #0]
 8004f36:	b249      	sxtb	r1, r1
 8004f38:	2903      	cmp	r1, #3
 8004f3a:	dde2      	ble.n	8004f02 <keypad_sm+0x103a>
}
 8004f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(num == '#'){
 8004f3e:	2823      	cmp	r0, #35	; 0x23
 8004f40:	f000 83fc 	beq.w	800573c <keypad_sm+0x1874>
			else if(num == '+'){
 8004f44:	282b      	cmp	r0, #43	; 0x2b
 8004f46:	f000 85d4 	beq.w	8005af2 <keypad_sm+0x1c2a>
			else if(num == '-'){
 8004f4a:	282d      	cmp	r0, #45	; 0x2d
 8004f4c:	f000 857a 	beq.w	8005a44 <keypad_sm+0x1b7c>
			else if(num == 's'){
 8004f50:	2873      	cmp	r0, #115	; 0x73
 8004f52:	f000 86c4 	beq.w	8005cde <keypad_sm+0x1e16>
			else if(num == '['){
 8004f56:	285b      	cmp	r0, #91	; 0x5b
 8004f58:	f000 86dd 	beq.w	8005d16 <keypad_sm+0x1e4e>
			else if(num == ']'){
 8004f5c:	285d      	cmp	r0, #93	; 0x5d
 8004f5e:	f47e afc9 	bne.w	8003ef4 <keypad_sm+0x2c>
				float temp = translate_keypad();
 8004f62:	f7fe fcf1 	bl	8003948 <translate_keypad>
				if(encpos == 0){
 8004f66:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <keypad_sm+0x111c>)
				float temp = translate_keypad();
 8004f68:	4604      	mov	r4, r0
				if(encpos == 0){
 8004f6a:	781a      	ldrb	r2, [r3, #0]
 8004f6c:	2a00      	cmp	r2, #0
 8004f6e:	f041 804e 	bne.w	800600e <keypad_sm+0x2146>
					temp = temp + 1;
 8004f72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004f76:	f7fb fdf5 	bl	8000b64 <__addsf3>
 8004f7a:	4604      	mov	r4, r0
				if(temp >= 0.0000 && temp <= 0.8000){
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	2100      	movs	r1, #0
 8004f80:	f7fc f8aa 	bl	80010d8 <__aeabi_fcmpge>
 8004f84:	b150      	cbz	r0, 8004f9c <keypad_sm+0x10d4>
 8004f86:	4620      	mov	r0, r4
 8004f88:	f7fb fa66 	bl	8000458 <__aeabi_f2d>
 8004f8c:	a310      	add	r3, pc, #64	; (adr r3, 8004fd0 <keypad_sm+0x1108>)
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f7fb fd35 	bl	8000a00 <__aeabi_dcmple>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	f040 82bf 	bne.w	800551a <keypad_sm+0x1652>
				else if(temp < 0.0000){
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	f7fc f886 	bl	80010b0 <__aeabi_fcmplt>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	f041 8123 	bne.w	80061f0 <keypad_sm+0x2328>
				else if(temp > 0.8000){
 8004faa:	4620      	mov	r0, r4
 8004fac:	f7fb fa54 	bl	8000458 <__aeabi_f2d>
 8004fb0:	a307      	add	r3, pc, #28	; (adr r3, 8004fd0 <keypad_sm+0x1108>)
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	f7fb fd37 	bl	8000a28 <__aeabi_dcmpgt>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	f43e af9a 	beq.w	8003ef4 <keypad_sm+0x2c>
}
 8004fc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					fill_keypad(1,0.8);
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	4908      	ldr	r1, [pc, #32]	; (8004fe8 <keypad_sm+0x1120>)
 8004fc8:	f7fe be62 	b.w	8003c90 <fill_keypad>
 8004fcc:	f3af 8000 	nop.w
 8004fd0:	9999999a 	.word	0x9999999a
 8004fd4:	3fe99999 	.word	0x3fe99999
 8004fd8:	20000005 	.word	0x20000005
 8004fdc:	20000000 	.word	0x20000000
 8004fe0:	200006c4 	.word	0x200006c4
 8004fe4:	200003ad 	.word	0x200003ad
 8004fe8:	3f4ccccd 	.word	0x3f4ccccd
				kpenum = WAIT;
 8004fec:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004fee:	207a      	movs	r0, #122	; 0x7a
 8004ff0:	4b87      	ldr	r3, [pc, #540]	; (8005210 <keypad_sm+0x1348>)
			if(keypadarr[4] == '.'){
 8004ff2:	4a88      	ldr	r2, [pc, #544]	; (8005214 <keypad_sm+0x134c>)
				keypaddecimal = 0;
 8004ff4:	4f88      	ldr	r7, [pc, #544]	; (8005218 <keypad_sm+0x1350>)
				kpenum = WAIT;
 8004ff6:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004ff8:	7819      	ldrb	r1, [r3, #0]
 8004ffa:	b249      	sxtb	r1, r1
 8004ffc:	2903      	cmp	r1, #3
 8004ffe:	dc1c      	bgt.n	800503a <keypad_sm+0x1172>
		if(keypaditerator < keypadlength-1){
 8005000:	7819      	ldrb	r1, [r3, #0]
 8005002:	b249      	sxtb	r1, r1
 8005004:	2903      	cmp	r1, #3
 8005006:	dcf7      	bgt.n	8004ff8 <keypad_sm+0x1130>
			if(keypadarr[4] == '.'){
 8005008:	7911      	ldrb	r1, [r2, #4]
 800500a:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800500c:	bf08      	it	eq
 800500e:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8005010:	78d1      	ldrb	r1, [r2, #3]
 8005012:	b2c9      	uxtb	r1, r1
 8005014:	7111      	strb	r1, [r2, #4]
 8005016:	7891      	ldrb	r1, [r2, #2]
 8005018:	b2c9      	uxtb	r1, r1
 800501a:	70d1      	strb	r1, [r2, #3]
 800501c:	7851      	ldrb	r1, [r2, #1]
 800501e:	b2c9      	uxtb	r1, r1
 8005020:	7091      	strb	r1, [r2, #2]
 8005022:	7811      	ldrb	r1, [r2, #0]
 8005024:	b2c9      	uxtb	r1, r1
 8005026:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005028:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800502a:	7819      	ldrb	r1, [r3, #0]
 800502c:	3101      	adds	r1, #1
 800502e:	b249      	sxtb	r1, r1
 8005030:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005032:	7819      	ldrb	r1, [r3, #0]
 8005034:	b249      	sxtb	r1, r1
 8005036:	2903      	cmp	r1, #3
 8005038:	dde2      	ble.n	8005000 <keypad_sm+0x1138>
				encmode = 0;
 800503a:	2300      	movs	r3, #0
				encpos = 0;
 800503c:	4a77      	ldr	r2, [pc, #476]	; (800521c <keypad_sm+0x1354>)
				encmode = 0;
 800503e:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005040:	7013      	strb	r3, [r2, #0]
}
 8005042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8005044:	4b72      	ldr	r3, [pc, #456]	; (8005210 <keypad_sm+0x1348>)
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	b252      	sxtb	r2, r2
 800504a:	2a01      	cmp	r2, #1
 800504c:	f77e af52 	ble.w	8003ef4 <keypad_sm+0x2c>
 8005050:	4871      	ldr	r0, [pc, #452]	; (8005218 <keypad_sm+0x1350>)
 8005052:	7802      	ldrb	r2, [r0, #0]
 8005054:	2a00      	cmp	r2, #0
 8005056:	f47e af4d 	bne.w	8003ef4 <keypad_sm+0x2c>
			keypadarr[keypadlength-1] = num;
 800505a:	252e      	movs	r5, #46	; 0x2e
			keypaddecimal = 1;
 800505c:	2401      	movs	r4, #1
				keypadarr[i-1] = keypadarr[i];
 800505e:	4a6d      	ldr	r2, [pc, #436]	; (8005214 <keypad_sm+0x134c>)
 8005060:	7851      	ldrb	r1, [r2, #1]
 8005062:	b2c9      	uxtb	r1, r1
 8005064:	7011      	strb	r1, [r2, #0]
 8005066:	7891      	ldrb	r1, [r2, #2]
 8005068:	b2c9      	uxtb	r1, r1
 800506a:	7051      	strb	r1, [r2, #1]
 800506c:	78d1      	ldrb	r1, [r2, #3]
 800506e:	b2c9      	uxtb	r1, r1
 8005070:	7091      	strb	r1, [r2, #2]
 8005072:	7911      	ldrb	r1, [r2, #4]
 8005074:	b2c9      	uxtb	r1, r1
 8005076:	70d1      	strb	r1, [r2, #3]
			keypadarr[keypadlength-1] = num;
 8005078:	7115      	strb	r5, [r2, #4]
			keypaddecimal = 1;
 800507a:	7004      	strb	r4, [r0, #0]
			keypaditerator--;
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	3a01      	subs	r2, #1
 8005080:	b252      	sxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]
}
 8005084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8005086:	207a      	movs	r0, #122	; 0x7a
 8005088:	4b61      	ldr	r3, [pc, #388]	; (8005210 <keypad_sm+0x1348>)
			if(keypadarr[4] == '.'){
 800508a:	4a62      	ldr	r2, [pc, #392]	; (8005214 <keypad_sm+0x134c>)
				keypaddecimal = 0;
 800508c:	4c62      	ldr	r4, [pc, #392]	; (8005218 <keypad_sm+0x1350>)
				kpenum = WAIT;
 800508e:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8005090:	7819      	ldrb	r1, [r3, #0]
 8005092:	b249      	sxtb	r1, r1
 8005094:	2903      	cmp	r1, #3
 8005096:	f73e af2d 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800509a:	7819      	ldrb	r1, [r3, #0]
 800509c:	b249      	sxtb	r1, r1
 800509e:	2903      	cmp	r1, #3
 80050a0:	dcf6      	bgt.n	8005090 <keypad_sm+0x11c8>
			if(keypadarr[4] == '.'){
 80050a2:	7911      	ldrb	r1, [r2, #4]
 80050a4:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80050a6:	bf08      	it	eq
 80050a8:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 80050aa:	78d1      	ldrb	r1, [r2, #3]
 80050ac:	b2c9      	uxtb	r1, r1
 80050ae:	7111      	strb	r1, [r2, #4]
 80050b0:	7891      	ldrb	r1, [r2, #2]
 80050b2:	b2c9      	uxtb	r1, r1
 80050b4:	70d1      	strb	r1, [r2, #3]
 80050b6:	7851      	ldrb	r1, [r2, #1]
 80050b8:	b2c9      	uxtb	r1, r1
 80050ba:	7091      	strb	r1, [r2, #2]
 80050bc:	7811      	ldrb	r1, [r2, #0]
 80050be:	b2c9      	uxtb	r1, r1
 80050c0:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80050c2:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80050c4:	7819      	ldrb	r1, [r3, #0]
 80050c6:	3101      	adds	r1, #1
 80050c8:	b249      	sxtb	r1, r1
 80050ca:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80050cc:	7819      	ldrb	r1, [r3, #0]
 80050ce:	b249      	sxtb	r1, r1
 80050d0:	2903      	cmp	r1, #3
 80050d2:	dde2      	ble.n	800509a <keypad_sm+0x11d2>
}
 80050d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 80050d6:	f7fe fc37 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80050da:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80050dc:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80050de:	f7fb fffb 	bl	80010d8 <__aeabi_fcmpge>
 80050e2:	b158      	cbz	r0, 80050fc <keypad_sm+0x1234>
 80050e4:	4628      	mov	r0, r5
 80050e6:	494e      	ldr	r1, [pc, #312]	; (8005220 <keypad_sm+0x1358>)
 80050e8:	f7fb ffec 	bl	80010c4 <__aeabi_fcmple>
 80050ec:	b130      	cbz	r0, 80050fc <keypad_sm+0x1234>
					volt_set_main_old = volt_set_main;
 80050ee:	4d4d      	ldr	r5, [pc, #308]	; (8005224 <keypad_sm+0x135c>)
 80050f0:	4b4d      	ldr	r3, [pc, #308]	; (8005228 <keypad_sm+0x1360>)
 80050f2:	682a      	ldr	r2, [r5, #0]
 80050f4:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 80050f6:	f7fe fc27 	bl	8003948 <translate_keypad>
 80050fa:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 80050fc:	2500      	movs	r5, #0
			keypadarr[0] = num;
 80050fe:	207a      	movs	r0, #122	; 0x7a
 8005100:	4b43      	ldr	r3, [pc, #268]	; (8005210 <keypad_sm+0x1348>)
			if(keypadarr[4] == '.'){
 8005102:	4944      	ldr	r1, [pc, #272]	; (8005214 <keypad_sm+0x134c>)
				keypaddecimal = 0;
 8005104:	4f44      	ldr	r7, [pc, #272]	; (8005218 <keypad_sm+0x1350>)
				kpenum = WAIT;
 8005106:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	b252      	sxtb	r2, r2
 800510c:	2a03      	cmp	r2, #3
 800510e:	dc1c      	bgt.n	800514a <keypad_sm+0x1282>
		if(keypaditerator < keypadlength-1){
 8005110:	781a      	ldrb	r2, [r3, #0]
 8005112:	b252      	sxtb	r2, r2
 8005114:	2a03      	cmp	r2, #3
 8005116:	dcf7      	bgt.n	8005108 <keypad_sm+0x1240>
			if(keypadarr[4] == '.'){
 8005118:	790a      	ldrb	r2, [r1, #4]
 800511a:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 800511c:	bf08      	it	eq
 800511e:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8005120:	78ca      	ldrb	r2, [r1, #3]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	710a      	strb	r2, [r1, #4]
 8005126:	788a      	ldrb	r2, [r1, #2]
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	70ca      	strb	r2, [r1, #3]
 800512c:	784a      	ldrb	r2, [r1, #1]
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	708a      	strb	r2, [r1, #2]
 8005132:	780a      	ldrb	r2, [r1, #0]
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005138:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 800513a:	781a      	ldrb	r2, [r3, #0]
 800513c:	3201      	adds	r2, #1
 800513e:	b252      	sxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005142:	781a      	ldrb	r2, [r3, #0]
 8005144:	b252      	sxtb	r2, r2
 8005146:	2a03      	cmp	r2, #3
 8005148:	dde2      	ble.n	8005110 <keypad_sm+0x1248>
				encmode = 0;
 800514a:	2300      	movs	r3, #0
				encpos = 0;
 800514c:	4a33      	ldr	r2, [pc, #204]	; (800521c <keypad_sm+0x1354>)
				encmode = 0;
 800514e:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005150:	7013      	strb	r3, [r2, #0]
}
 8005152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005154:	f7fe fbf8 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005158:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800515a:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800515c:	f7fb ffbc 	bl	80010d8 <__aeabi_fcmpge>
 8005160:	b158      	cbz	r0, 800517a <keypad_sm+0x12b2>
 8005162:	4620      	mov	r0, r4
 8005164:	492e      	ldr	r1, [pc, #184]	; (8005220 <keypad_sm+0x1358>)
 8005166:	f7fb ffad 	bl	80010c4 <__aeabi_fcmple>
 800516a:	b130      	cbz	r0, 800517a <keypad_sm+0x12b2>
					volt_set_main_old = volt_set_main;
 800516c:	4c2d      	ldr	r4, [pc, #180]	; (8005224 <keypad_sm+0x135c>)
 800516e:	4b2e      	ldr	r3, [pc, #184]	; (8005228 <keypad_sm+0x1360>)
 8005170:	6822      	ldr	r2, [r4, #0]
 8005172:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005174:	f7fe fbe8 	bl	8003948 <translate_keypad>
 8005178:	6020      	str	r0, [r4, #0]
				kpenum = WAIT;
 800517a:	2400      	movs	r4, #0
			keypadarr[0] = num;
 800517c:	207a      	movs	r0, #122	; 0x7a
 800517e:	4b24      	ldr	r3, [pc, #144]	; (8005210 <keypad_sm+0x1348>)
			if(keypadarr[4] == '.'){
 8005180:	4924      	ldr	r1, [pc, #144]	; (8005214 <keypad_sm+0x134c>)
				keypaddecimal = 0;
 8005182:	4d25      	ldr	r5, [pc, #148]	; (8005218 <keypad_sm+0x1350>)
				kpenum = WAIT;
 8005184:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8005186:	781a      	ldrb	r2, [r3, #0]
 8005188:	b252      	sxtb	r2, r2
 800518a:	2a03      	cmp	r2, #3
 800518c:	f73e aeb2 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	b252      	sxtb	r2, r2
 8005194:	2a03      	cmp	r2, #3
 8005196:	dcf6      	bgt.n	8005186 <keypad_sm+0x12be>
			if(keypadarr[4] == '.'){
 8005198:	790a      	ldrb	r2, [r1, #4]
 800519a:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 800519c:	bf08      	it	eq
 800519e:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80051a0:	78ca      	ldrb	r2, [r1, #3]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	710a      	strb	r2, [r1, #4]
 80051a6:	788a      	ldrb	r2, [r1, #2]
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	70ca      	strb	r2, [r1, #3]
 80051ac:	784a      	ldrb	r2, [r1, #1]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	708a      	strb	r2, [r1, #2]
 80051b2:	780a      	ldrb	r2, [r1, #0]
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 80051b8:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 80051ba:	781a      	ldrb	r2, [r3, #0]
 80051bc:	3201      	adds	r2, #1
 80051be:	b252      	sxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 80051c2:	781a      	ldrb	r2, [r3, #0]
 80051c4:	b252      	sxtb	r2, r2
 80051c6:	2a03      	cmp	r2, #3
 80051c8:	dde2      	ble.n	8005190 <keypad_sm+0x12c8>
}
 80051ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 80051cc:	4b10      	ldr	r3, [pc, #64]	; (8005210 <keypad_sm+0x1348>)
 80051ce:	781a      	ldrb	r2, [r3, #0]
 80051d0:	b252      	sxtb	r2, r2
 80051d2:	2a01      	cmp	r2, #1
 80051d4:	f77e ae8e 	ble.w	8003ef4 <keypad_sm+0x2c>
 80051d8:	480f      	ldr	r0, [pc, #60]	; (8005218 <keypad_sm+0x1350>)
 80051da:	7802      	ldrb	r2, [r0, #0]
 80051dc:	2a00      	cmp	r2, #0
 80051de:	f47e ae89 	bne.w	8003ef4 <keypad_sm+0x2c>
			keypadarr[keypadlength-1] = num;
 80051e2:	252e      	movs	r5, #46	; 0x2e
			keypaddecimal = 1;
 80051e4:	2401      	movs	r4, #1
				keypadarr[i-1] = keypadarr[i];
 80051e6:	4a0b      	ldr	r2, [pc, #44]	; (8005214 <keypad_sm+0x134c>)
 80051e8:	7851      	ldrb	r1, [r2, #1]
 80051ea:	b2c9      	uxtb	r1, r1
 80051ec:	7011      	strb	r1, [r2, #0]
 80051ee:	7891      	ldrb	r1, [r2, #2]
 80051f0:	b2c9      	uxtb	r1, r1
 80051f2:	7051      	strb	r1, [r2, #1]
 80051f4:	78d1      	ldrb	r1, [r2, #3]
 80051f6:	b2c9      	uxtb	r1, r1
 80051f8:	7091      	strb	r1, [r2, #2]
 80051fa:	7911      	ldrb	r1, [r2, #4]
 80051fc:	b2c9      	uxtb	r1, r1
 80051fe:	70d1      	strb	r1, [r2, #3]
			keypadarr[keypadlength-1] = num;
 8005200:	7115      	strb	r5, [r2, #4]
			keypaddecimal = 1;
 8005202:	7004      	strb	r4, [r0, #0]
			keypaditerator--;
 8005204:	781a      	ldrb	r2, [r3, #0]
 8005206:	3a01      	subs	r2, #1
 8005208:	b252      	sxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]
}
 800520c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520e:	bf00      	nop
 8005210:	20000005 	.word	0x20000005
 8005214:	20000000 	.word	0x20000000
 8005218:	200006c4 	.word	0x200006c4
 800521c:	200003ad 	.word	0x200003ad
 8005220:	41400000 	.word	0x41400000
 8005224:	20000828 	.word	0x20000828
 8005228:	2000082c 	.word	0x2000082c
			else if(num == '#'){
 800522c:	2823      	cmp	r0, #35	; 0x23
 800522e:	f000 82ed 	beq.w	800580c <keypad_sm+0x1944>
			else if(num == '+'){
 8005232:	282b      	cmp	r0, #43	; 0x2b
 8005234:	f000 860b 	beq.w	8005e4e <keypad_sm+0x1f86>
			else if(num == '-'){
 8005238:	282d      	cmp	r0, #45	; 0x2d
 800523a:	f000 85da 	beq.w	8005df2 <keypad_sm+0x1f2a>
			else if(num == 's'){
 800523e:	2873      	cmp	r0, #115	; 0x73
 8005240:	f000 853f 	beq.w	8005cc2 <keypad_sm+0x1dfa>
			else if(num == '['){
 8005244:	285b      	cmp	r0, #91	; 0x5b
 8005246:	f000 879a 	beq.w	800617e <keypad_sm+0x22b6>
			else if(num == ']'){
 800524a:	285d      	cmp	r0, #93	; 0x5d
 800524c:	f47e ae52 	bne.w	8003ef4 <keypad_sm+0x2c>
				float temp = translate_keypad();
 8005250:	f7fe fb7a 	bl	8003948 <translate_keypad>
				if(encpos == 0){
 8005254:	4b92      	ldr	r3, [pc, #584]	; (80054a0 <keypad_sm+0x15d8>)
				float temp = translate_keypad();
 8005256:	4604      	mov	r4, r0
				if(encpos == 0){
 8005258:	781a      	ldrb	r2, [r3, #0]
 800525a:	2a00      	cmp	r2, #0
 800525c:	f000 87f3 	beq.w	8006246 <keypad_sm+0x237e>
				else if(encpos == 1){
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	2a01      	cmp	r2, #1
 8005264:	f000 87e8 	beq.w	8006238 <keypad_sm+0x2370>
				else if(encpos == 3){
 8005268:	781a      	ldrb	r2, [r3, #0]
 800526a:	2a03      	cmp	r2, #3
 800526c:	f000 8734 	beq.w	80060d8 <keypad_sm+0x2210>
				else if(encpos == 4){
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b04      	cmp	r3, #4
 8005274:	f47f ad0b 	bne.w	8004c8e <keypad_sm+0xdc6>
					temp = temp + 0.01;
 8005278:	f7fb f8ee 	bl	8000458 <__aeabi_f2d>
 800527c:	a386      	add	r3, pc, #536	; (adr r3, 8005498 <keypad_sm+0x15d0>)
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f7fa ff8b 	bl	800019c <__adddf3>
 8005286:	f7fb fc17 	bl	8000ab8 <__aeabi_d2f>
 800528a:	4604      	mov	r4, r0
 800528c:	e4ff      	b.n	8004c8e <keypad_sm+0xdc6>
				keypaddecimal = 0;
 800528e:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8005290:	207a      	movs	r0, #122	; 0x7a
 8005292:	4b84      	ldr	r3, [pc, #528]	; (80054a4 <keypad_sm+0x15dc>)
			if(keypadarr[4] == '.'){
 8005294:	4a84      	ldr	r2, [pc, #528]	; (80054a8 <keypad_sm+0x15e0>)
				keypaddecimal = 0;
 8005296:	4d85      	ldr	r5, [pc, #532]	; (80054ac <keypad_sm+0x15e4>)
	while(keypaditerator < 4){
 8005298:	7819      	ldrb	r1, [r3, #0]
 800529a:	b249      	sxtb	r1, r1
 800529c:	2903      	cmp	r1, #3
 800529e:	dc1c      	bgt.n	80052da <keypad_sm+0x1412>
		if(keypaditerator < keypadlength-1){
 80052a0:	7819      	ldrb	r1, [r3, #0]
 80052a2:	b249      	sxtb	r1, r1
 80052a4:	2903      	cmp	r1, #3
 80052a6:	dcf7      	bgt.n	8005298 <keypad_sm+0x13d0>
			if(keypadarr[4] == '.'){
 80052a8:	7911      	ldrb	r1, [r2, #4]
 80052aa:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80052ac:	bf08      	it	eq
 80052ae:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80052b0:	78d1      	ldrb	r1, [r2, #3]
 80052b2:	b2c9      	uxtb	r1, r1
 80052b4:	7111      	strb	r1, [r2, #4]
 80052b6:	7891      	ldrb	r1, [r2, #2]
 80052b8:	b2c9      	uxtb	r1, r1
 80052ba:	70d1      	strb	r1, [r2, #3]
 80052bc:	7851      	ldrb	r1, [r2, #1]
 80052be:	b2c9      	uxtb	r1, r1
 80052c0:	7091      	strb	r1, [r2, #2]
 80052c2:	7811      	ldrb	r1, [r2, #0]
 80052c4:	b2c9      	uxtb	r1, r1
 80052c6:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80052c8:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80052ca:	7819      	ldrb	r1, [r3, #0]
 80052cc:	3101      	adds	r1, #1
 80052ce:	b249      	sxtb	r1, r1
 80052d0:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80052d2:	7819      	ldrb	r1, [r3, #0]
 80052d4:	b249      	sxtb	r1, r1
 80052d6:	2903      	cmp	r1, #3
 80052d8:	dde2      	ble.n	80052a0 <keypad_sm+0x13d8>
				encmode = 0;
 80052da:	2300      	movs	r3, #0
				encpos = 0;
 80052dc:	4a70      	ldr	r2, [pc, #448]	; (80054a0 <keypad_sm+0x15d8>)
				encmode = 0;
 80052de:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80052e0:	7013      	strb	r3, [r2, #0]
}
 80052e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80052e4:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80052e6:	247a      	movs	r4, #122	; 0x7a
 80052e8:	4b6e      	ldr	r3, [pc, #440]	; (80054a4 <keypad_sm+0x15dc>)
			if(keypadarr[4] == '.'){
 80052ea:	496f      	ldr	r1, [pc, #444]	; (80054a8 <keypad_sm+0x15e0>)
				keypaddecimal = 0;
 80052ec:	4d6f      	ldr	r5, [pc, #444]	; (80054ac <keypad_sm+0x15e4>)
				kpenum = WAIT;
 80052ee:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80052f0:	781a      	ldrb	r2, [r3, #0]
 80052f2:	b252      	sxtb	r2, r2
 80052f4:	2a03      	cmp	r2, #3
 80052f6:	f73e adfd 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80052fa:	781a      	ldrb	r2, [r3, #0]
 80052fc:	b252      	sxtb	r2, r2
 80052fe:	2a03      	cmp	r2, #3
 8005300:	dcf6      	bgt.n	80052f0 <keypad_sm+0x1428>
			if(keypadarr[4] == '.'){
 8005302:	790a      	ldrb	r2, [r1, #4]
 8005304:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8005306:	bf08      	it	eq
 8005308:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800530a:	78ca      	ldrb	r2, [r1, #3]
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	710a      	strb	r2, [r1, #4]
 8005310:	788a      	ldrb	r2, [r1, #2]
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	70ca      	strb	r2, [r1, #3]
 8005316:	784a      	ldrb	r2, [r1, #1]
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	708a      	strb	r2, [r1, #2]
 800531c:	780a      	ldrb	r2, [r1, #0]
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005322:	700c      	strb	r4, [r1, #0]
			keypaditerator++;
 8005324:	781a      	ldrb	r2, [r3, #0]
 8005326:	3201      	adds	r2, #1
 8005328:	b252      	sxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 800532c:	781a      	ldrb	r2, [r3, #0]
 800532e:	b252      	sxtb	r2, r2
 8005330:	2a03      	cmp	r2, #3
 8005332:	dde2      	ble.n	80052fa <keypad_sm+0x1432>
}
 8005334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(keypaditerator < keypadlength-1){
 8005336:	4b5b      	ldr	r3, [pc, #364]	; (80054a4 <keypad_sm+0x15dc>)
 8005338:	781a      	ldrb	r2, [r3, #0]
 800533a:	b252      	sxtb	r2, r2
 800533c:	2a03      	cmp	r2, #3
 800533e:	f73e add9 	bgt.w	8003ef4 <keypad_sm+0x2c>
			if(keypadarr[4] == '.'){
 8005342:	4a59      	ldr	r2, [pc, #356]	; (80054a8 <keypad_sm+0x15e0>)
 8005344:	7911      	ldrb	r1, [r2, #4]
 8005346:	292e      	cmp	r1, #46	; 0x2e
 8005348:	d102      	bne.n	8005350 <keypad_sm+0x1488>
				keypaddecimal = 0;
 800534a:	2000      	movs	r0, #0
 800534c:	4957      	ldr	r1, [pc, #348]	; (80054ac <keypad_sm+0x15e4>)
 800534e:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 8005350:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8005352:	78d1      	ldrb	r1, [r2, #3]
 8005354:	b2c9      	uxtb	r1, r1
 8005356:	7111      	strb	r1, [r2, #4]
 8005358:	7891      	ldrb	r1, [r2, #2]
 800535a:	b2c9      	uxtb	r1, r1
 800535c:	70d1      	strb	r1, [r2, #3]
 800535e:	7851      	ldrb	r1, [r2, #1]
 8005360:	b2c9      	uxtb	r1, r1
 8005362:	7091      	strb	r1, [r2, #2]
 8005364:	7811      	ldrb	r1, [r2, #0]
 8005366:	b2c9      	uxtb	r1, r1
 8005368:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800536a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800536c:	781a      	ldrb	r2, [r3, #0]
 800536e:	3201      	adds	r2, #1
 8005370:	b252      	sxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
}
 8005374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 8005376:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8005378:	207a      	movs	r0, #122	; 0x7a
 800537a:	4b4a      	ldr	r3, [pc, #296]	; (80054a4 <keypad_sm+0x15dc>)
			if(keypadarr[4] == '.'){
 800537c:	4a4a      	ldr	r2, [pc, #296]	; (80054a8 <keypad_sm+0x15e0>)
				keypaddecimal = 0;
 800537e:	4d4b      	ldr	r5, [pc, #300]	; (80054ac <keypad_sm+0x15e4>)
	while(keypaditerator < 4){
 8005380:	7819      	ldrb	r1, [r3, #0]
 8005382:	b249      	sxtb	r1, r1
 8005384:	2903      	cmp	r1, #3
 8005386:	dc1c      	bgt.n	80053c2 <keypad_sm+0x14fa>
		if(keypaditerator < keypadlength-1){
 8005388:	7819      	ldrb	r1, [r3, #0]
 800538a:	b249      	sxtb	r1, r1
 800538c:	2903      	cmp	r1, #3
 800538e:	dcf7      	bgt.n	8005380 <keypad_sm+0x14b8>
			if(keypadarr[4] == '.'){
 8005390:	7911      	ldrb	r1, [r2, #4]
 8005392:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005394:	bf08      	it	eq
 8005396:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005398:	78d1      	ldrb	r1, [r2, #3]
 800539a:	b2c9      	uxtb	r1, r1
 800539c:	7111      	strb	r1, [r2, #4]
 800539e:	7891      	ldrb	r1, [r2, #2]
 80053a0:	b2c9      	uxtb	r1, r1
 80053a2:	70d1      	strb	r1, [r2, #3]
 80053a4:	7851      	ldrb	r1, [r2, #1]
 80053a6:	b2c9      	uxtb	r1, r1
 80053a8:	7091      	strb	r1, [r2, #2]
 80053aa:	7811      	ldrb	r1, [r2, #0]
 80053ac:	b2c9      	uxtb	r1, r1
 80053ae:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80053b0:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80053b2:	7819      	ldrb	r1, [r3, #0]
 80053b4:	3101      	adds	r1, #1
 80053b6:	b249      	sxtb	r1, r1
 80053b8:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80053ba:	7819      	ldrb	r1, [r3, #0]
 80053bc:	b249      	sxtb	r1, r1
 80053be:	2903      	cmp	r1, #3
 80053c0:	dde2      	ble.n	8005388 <keypad_sm+0x14c0>
				encmode = 0;
 80053c2:	2300      	movs	r3, #0
				encpos = 0;
 80053c4:	4a36      	ldr	r2, [pc, #216]	; (80054a0 <keypad_sm+0x15d8>)
				encmode = 0;
 80053c6:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80053c8:	7013      	strb	r3, [r2, #0]
}
 80053ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 80053cc:	2600      	movs	r6, #0
			keypadarr[0] = num;
 80053ce:	207a      	movs	r0, #122	; 0x7a
 80053d0:	4b34      	ldr	r3, [pc, #208]	; (80054a4 <keypad_sm+0x15dc>)
			if(keypadarr[4] == '.'){
 80053d2:	4a35      	ldr	r2, [pc, #212]	; (80054a8 <keypad_sm+0x15e0>)
				keypaddecimal = 0;
 80053d4:	4d35      	ldr	r5, [pc, #212]	; (80054ac <keypad_sm+0x15e4>)
	while(keypaditerator < 4){
 80053d6:	7819      	ldrb	r1, [r3, #0]
 80053d8:	b249      	sxtb	r1, r1
 80053da:	2903      	cmp	r1, #3
 80053dc:	dc1c      	bgt.n	8005418 <keypad_sm+0x1550>
		if(keypaditerator < keypadlength-1){
 80053de:	7819      	ldrb	r1, [r3, #0]
 80053e0:	b249      	sxtb	r1, r1
 80053e2:	2903      	cmp	r1, #3
 80053e4:	dcf7      	bgt.n	80053d6 <keypad_sm+0x150e>
			if(keypadarr[4] == '.'){
 80053e6:	7911      	ldrb	r1, [r2, #4]
 80053e8:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80053ea:	bf08      	it	eq
 80053ec:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80053ee:	78d1      	ldrb	r1, [r2, #3]
 80053f0:	b2c9      	uxtb	r1, r1
 80053f2:	7111      	strb	r1, [r2, #4]
 80053f4:	7891      	ldrb	r1, [r2, #2]
 80053f6:	b2c9      	uxtb	r1, r1
 80053f8:	70d1      	strb	r1, [r2, #3]
 80053fa:	7851      	ldrb	r1, [r2, #1]
 80053fc:	b2c9      	uxtb	r1, r1
 80053fe:	7091      	strb	r1, [r2, #2]
 8005400:	7811      	ldrb	r1, [r2, #0]
 8005402:	b2c9      	uxtb	r1, r1
 8005404:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005406:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005408:	7819      	ldrb	r1, [r3, #0]
 800540a:	3101      	adds	r1, #1
 800540c:	b249      	sxtb	r1, r1
 800540e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005410:	7819      	ldrb	r1, [r3, #0]
 8005412:	b249      	sxtb	r1, r1
 8005414:	2903      	cmp	r1, #3
 8005416:	dde2      	ble.n	80053de <keypad_sm+0x1516>
				encmode = 0;
 8005418:	2300      	movs	r3, #0
				encpos = 0;
 800541a:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <keypad_sm+0x15d8>)
				encmode = 0;
 800541c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800541e:	7013      	strb	r3, [r2, #0]
}
 8005420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005422:	f7fe fa91 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005426:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005428:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800542a:	f7fb fe55 	bl	80010d8 <__aeabi_fcmpge>
 800542e:	b140      	cbz	r0, 8005442 <keypad_sm+0x157a>
 8005430:	4620      	mov	r0, r4
 8005432:	491f      	ldr	r1, [pc, #124]	; (80054b0 <keypad_sm+0x15e8>)
 8005434:	f7fb fe46 	bl	80010c4 <__aeabi_fcmple>
 8005438:	b118      	cbz	r0, 8005442 <keypad_sm+0x157a>
					volt_set_aux = translate_keypad();
 800543a:	f7fe fa85 	bl	8003948 <translate_keypad>
 800543e:	4a1d      	ldr	r2, [pc, #116]	; (80054b4 <keypad_sm+0x15ec>)
 8005440:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005442:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005444:	247a      	movs	r4, #122	; 0x7a
 8005446:	4b17      	ldr	r3, [pc, #92]	; (80054a4 <keypad_sm+0x15dc>)
			if(keypadarr[4] == '.'){
 8005448:	4a17      	ldr	r2, [pc, #92]	; (80054a8 <keypad_sm+0x15e0>)
				keypaddecimal = 0;
 800544a:	4d18      	ldr	r5, [pc, #96]	; (80054ac <keypad_sm+0x15e4>)
				kpenum = WAIT;
 800544c:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 800544e:	7819      	ldrb	r1, [r3, #0]
 8005450:	b249      	sxtb	r1, r1
 8005452:	2903      	cmp	r1, #3
 8005454:	f73e ad4e 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005458:	7819      	ldrb	r1, [r3, #0]
 800545a:	b249      	sxtb	r1, r1
 800545c:	2903      	cmp	r1, #3
 800545e:	dcf6      	bgt.n	800544e <keypad_sm+0x1586>
			if(keypadarr[4] == '.'){
 8005460:	7911      	ldrb	r1, [r2, #4]
 8005462:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005464:	bf08      	it	eq
 8005466:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005468:	78d1      	ldrb	r1, [r2, #3]
 800546a:	b2c9      	uxtb	r1, r1
 800546c:	7111      	strb	r1, [r2, #4]
 800546e:	7891      	ldrb	r1, [r2, #2]
 8005470:	b2c9      	uxtb	r1, r1
 8005472:	70d1      	strb	r1, [r2, #3]
 8005474:	7851      	ldrb	r1, [r2, #1]
 8005476:	b2c9      	uxtb	r1, r1
 8005478:	7091      	strb	r1, [r2, #2]
 800547a:	7811      	ldrb	r1, [r2, #0]
 800547c:	b2c9      	uxtb	r1, r1
 800547e:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005480:	7014      	strb	r4, [r2, #0]
			keypaditerator++;
 8005482:	7819      	ldrb	r1, [r3, #0]
 8005484:	3101      	adds	r1, #1
 8005486:	b249      	sxtb	r1, r1
 8005488:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800548a:	7819      	ldrb	r1, [r3, #0]
 800548c:	b249      	sxtb	r1, r1
 800548e:	2903      	cmp	r1, #3
 8005490:	dde2      	ble.n	8005458 <keypad_sm+0x1590>
}
 8005492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005494:	f3af 8000 	nop.w
 8005498:	47ae147b 	.word	0x47ae147b
 800549c:	3f847ae1 	.word	0x3f847ae1
 80054a0:	200003ad 	.word	0x200003ad
 80054a4:	20000005 	.word	0x20000005
 80054a8:	20000000 	.word	0x20000000
 80054ac:	200006c4 	.word	0x200006c4
 80054b0:	41400000 	.word	0x41400000
 80054b4:	20000824 	.word	0x20000824
			else if(num == '#'){
 80054b8:	2823      	cmp	r0, #35	; 0x23
 80054ba:	f000 8371 	beq.w	8005ba0 <keypad_sm+0x1cd8>
			else if(num == '+'){
 80054be:	282b      	cmp	r0, #43	; 0x2b
 80054c0:	f000 8559 	beq.w	8005f76 <keypad_sm+0x20ae>
			else if(num == '-'){
 80054c4:	282d      	cmp	r0, #45	; 0x2d
 80054c6:	f000 851f 	beq.w	8005f08 <keypad_sm+0x2040>
			else if(num == 's'){
 80054ca:	2873      	cmp	r0, #115	; 0x73
 80054cc:	f000 8415 	beq.w	8005cfa <keypad_sm+0x1e32>
			else if(num == '['){
 80054d0:	285b      	cmp	r0, #91	; 0x5b
 80054d2:	f000 858f 	beq.w	8005ff4 <keypad_sm+0x212c>
			else if(num == ']'){
 80054d6:	285d      	cmp	r0, #93	; 0x5d
 80054d8:	f47e ad0c 	bne.w	8003ef4 <keypad_sm+0x2c>
				float temp = translate_keypad();
 80054dc:	f7fe fa34 	bl	8003948 <translate_keypad>
				if(encpos == 0){
 80054e0:	4b8f      	ldr	r3, [pc, #572]	; (8005720 <keypad_sm+0x1858>)
				float temp = translate_keypad();
 80054e2:	4604      	mov	r4, r0
				if(encpos == 0){
 80054e4:	781a      	ldrb	r2, [r3, #0]
 80054e6:	2a00      	cmp	r2, #0
 80054e8:	f040 8632 	bne.w	8006150 <keypad_sm+0x2288>
					temp = temp + 1;
 80054ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80054f0:	f7fb fb38 	bl	8000b64 <__addsf3>
 80054f4:	4604      	mov	r4, r0
				if(temp >= 0.0000 && temp <= 0.80001){
 80054f6:	4620      	mov	r0, r4
 80054f8:	2100      	movs	r1, #0
 80054fa:	f7fb fded 	bl	80010d8 <__aeabi_fcmpge>
 80054fe:	2800      	cmp	r0, #0
 8005500:	f43f ad4c 	beq.w	8004f9c <keypad_sm+0x10d4>
 8005504:	4620      	mov	r0, r4
 8005506:	f7fa ffa7 	bl	8000458 <__aeabi_f2d>
 800550a:	a381      	add	r3, pc, #516	; (adr r3, 8005710 <keypad_sm+0x1848>)
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f7fb fa76 	bl	8000a00 <__aeabi_dcmple>
 8005514:	2800      	cmp	r0, #0
 8005516:	f43f ad41 	beq.w	8004f9c <keypad_sm+0x10d4>
					fill_keypad(1,temp);
 800551a:	4621      	mov	r1, r4
}
 800551c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					fill_keypad(1,temp);
 8005520:	2001      	movs	r0, #1
 8005522:	f7fe bbb5 	b.w	8003c90 <fill_keypad>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8005526:	4a7f      	ldr	r2, [pc, #508]	; (8005724 <keypad_sm+0x185c>)
 8005528:	7813      	ldrb	r3, [r2, #0]
 800552a:	b25b      	sxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	f77e ace1 	ble.w	8003ef4 <keypad_sm+0x2c>
 8005532:	487d      	ldr	r0, [pc, #500]	; (8005728 <keypad_sm+0x1860>)
 8005534:	7803      	ldrb	r3, [r0, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	f47e acdc 	bne.w	8003ef4 <keypad_sm+0x2c>
			keypadarr[keypadlength-1] = num;
 800553c:	252e      	movs	r5, #46	; 0x2e
			keypaddecimal = 1;
 800553e:	2401      	movs	r4, #1
				keypadarr[i-1] = keypadarr[i];
 8005540:	4b7a      	ldr	r3, [pc, #488]	; (800572c <keypad_sm+0x1864>)
 8005542:	7859      	ldrb	r1, [r3, #1]
 8005544:	b2c9      	uxtb	r1, r1
 8005546:	7019      	strb	r1, [r3, #0]
 8005548:	7899      	ldrb	r1, [r3, #2]
 800554a:	b2c9      	uxtb	r1, r1
 800554c:	7059      	strb	r1, [r3, #1]
 800554e:	78d9      	ldrb	r1, [r3, #3]
 8005550:	b2c9      	uxtb	r1, r1
 8005552:	7099      	strb	r1, [r3, #2]
 8005554:	7919      	ldrb	r1, [r3, #4]
 8005556:	b2c9      	uxtb	r1, r1
 8005558:	70d9      	strb	r1, [r3, #3]
			keypadarr[keypadlength-1] = num;
 800555a:	711d      	strb	r5, [r3, #4]
			keypaddecimal = 1;
 800555c:	7004      	strb	r4, [r0, #0]
			keypaditerator--;
 800555e:	7813      	ldrb	r3, [r2, #0]
 8005560:	3b01      	subs	r3, #1
 8005562:	b25b      	sxtb	r3, r3
 8005564:	7013      	strb	r3, [r2, #0]
}
 8005566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005568:	f7fe f9ee 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800556c:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800556e:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005570:	f7fb fdb2 	bl	80010d8 <__aeabi_fcmpge>
 8005574:	b158      	cbz	r0, 800558e <keypad_sm+0x16c6>
 8005576:	4628      	mov	r0, r5
 8005578:	496d      	ldr	r1, [pc, #436]	; (8005730 <keypad_sm+0x1868>)
 800557a:	f7fb fda3 	bl	80010c4 <__aeabi_fcmple>
 800557e:	b130      	cbz	r0, 800558e <keypad_sm+0x16c6>
					amp_set_main_old = amp_set_main;
 8005580:	4d6c      	ldr	r5, [pc, #432]	; (8005734 <keypad_sm+0x186c>)
 8005582:	4b6d      	ldr	r3, [pc, #436]	; (8005738 <keypad_sm+0x1870>)
 8005584:	682a      	ldr	r2, [r5, #0]
 8005586:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8005588:	f7fe f9de 	bl	8003948 <translate_keypad>
 800558c:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 800558e:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005590:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005594:	4b63      	ldr	r3, [pc, #396]	; (8005724 <keypad_sm+0x185c>)
			if(keypadarr[4] == '.'){
 8005596:	4965      	ldr	r1, [pc, #404]	; (800572c <keypad_sm+0x1864>)
				keypaddecimal = 0;
 8005598:	4d63      	ldr	r5, [pc, #396]	; (8005728 <keypad_sm+0x1860>)
				kpenum = WAIT;
 800559a:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 800559c:	781a      	ldrb	r2, [r3, #0]
 800559e:	b252      	sxtb	r2, r2
 80055a0:	2a03      	cmp	r2, #3
 80055a2:	dc1d      	bgt.n	80055e0 <keypad_sm+0x1718>
		if(keypaditerator < keypadlength-1){
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	b252      	sxtb	r2, r2
 80055a8:	2a03      	cmp	r2, #3
 80055aa:	dcf7      	bgt.n	800559c <keypad_sm+0x16d4>
			if(keypadarr[4] == '.'){
 80055ac:	790a      	ldrb	r2, [r1, #4]
 80055ae:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 80055b0:	bf08      	it	eq
 80055b2:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80055b4:	78ca      	ldrb	r2, [r1, #3]
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	710a      	strb	r2, [r1, #4]
 80055ba:	788a      	ldrb	r2, [r1, #2]
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	70ca      	strb	r2, [r1, #3]
 80055c0:	784a      	ldrb	r2, [r1, #1]
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	708a      	strb	r2, [r1, #2]
 80055c6:	780a      	ldrb	r2, [r1, #0]
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 80055cc:	f881 c000 	strb.w	ip, [r1]
			keypaditerator++;
 80055d0:	781a      	ldrb	r2, [r3, #0]
 80055d2:	3201      	adds	r2, #1
 80055d4:	b252      	sxtb	r2, r2
 80055d6:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 80055d8:	781a      	ldrb	r2, [r3, #0]
 80055da:	b252      	sxtb	r2, r2
 80055dc:	2a03      	cmp	r2, #3
 80055de:	dde1      	ble.n	80055a4 <keypad_sm+0x16dc>
				encmode = 0;
 80055e0:	2300      	movs	r3, #0
				encpos = 0;
 80055e2:	4a4f      	ldr	r2, [pc, #316]	; (8005720 <keypad_sm+0x1858>)
				encmode = 0;
 80055e4:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80055e6:	7013      	strb	r3, [r2, #0]
}
 80055e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				update_keypad('z');
 80055ee:	f7fc b89b 	b.w	8001728 <update_keypad.constprop.0>
	float temp = translate_keypad();
 80055f2:	f7fe f9a9 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80055f6:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80055f8:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80055fa:	f7fb fd6d 	bl	80010d8 <__aeabi_fcmpge>
 80055fe:	b190      	cbz	r0, 8005626 <keypad_sm+0x175e>
 8005600:	4620      	mov	r0, r4
 8005602:	f7fa ff29 	bl	8000458 <__aeabi_f2d>
 8005606:	a344      	add	r3, pc, #272	; (adr r3, 8005718 <keypad_sm+0x1850>)
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f7fb f9f8 	bl	8000a00 <__aeabi_dcmple>
 8005610:	b148      	cbz	r0, 8005626 <keypad_sm+0x175e>
					amp_set_main_old = amp_set_main;
 8005612:	4c48      	ldr	r4, [pc, #288]	; (8005734 <keypad_sm+0x186c>)
 8005614:	4b48      	ldr	r3, [pc, #288]	; (8005738 <keypad_sm+0x1870>)
 8005616:	6822      	ldr	r2, [r4, #0]
 8005618:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 800561a:	f7fe f995 	bl	8003948 <translate_keypad>
 800561e:	6020      	str	r0, [r4, #0]
					update_ADC_watchdog(amp_set_main);
 8005620:	6820      	ldr	r0, [r4, #0]
 8005622:	f7fc f8ff 	bl	8001824 <update_ADC_watchdog>
				kpenum = WAIT;
 8005626:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005628:	257a      	movs	r5, #122	; 0x7a
 800562a:	4b3e      	ldr	r3, [pc, #248]	; (8005724 <keypad_sm+0x185c>)
			if(keypadarr[4] == '.'){
 800562c:	493f      	ldr	r1, [pc, #252]	; (800572c <keypad_sm+0x1864>)
				keypaddecimal = 0;
 800562e:	4c3e      	ldr	r4, [pc, #248]	; (8005728 <keypad_sm+0x1860>)
				kpenum = WAIT;
 8005630:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005632:	781a      	ldrb	r2, [r3, #0]
 8005634:	b252      	sxtb	r2, r2
 8005636:	2a03      	cmp	r2, #3
 8005638:	f73e ac5c 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800563c:	781a      	ldrb	r2, [r3, #0]
 800563e:	b252      	sxtb	r2, r2
 8005640:	2a03      	cmp	r2, #3
 8005642:	dcf6      	bgt.n	8005632 <keypad_sm+0x176a>
			if(keypadarr[4] == '.'){
 8005644:	790a      	ldrb	r2, [r1, #4]
 8005646:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8005648:	bf08      	it	eq
 800564a:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 800564c:	78ca      	ldrb	r2, [r1, #3]
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	710a      	strb	r2, [r1, #4]
 8005652:	788a      	ldrb	r2, [r1, #2]
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	70ca      	strb	r2, [r1, #3]
 8005658:	784a      	ldrb	r2, [r1, #1]
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	708a      	strb	r2, [r1, #2]
 800565e:	780a      	ldrb	r2, [r1, #0]
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005664:	700d      	strb	r5, [r1, #0]
			keypaditerator++;
 8005666:	781a      	ldrb	r2, [r3, #0]
 8005668:	3201      	adds	r2, #1
 800566a:	b252      	sxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 800566e:	781a      	ldrb	r2, [r3, #0]
 8005670:	b252      	sxtb	r2, r2
 8005672:	2a03      	cmp	r2, #3
 8005674:	dde2      	ble.n	800563c <keypad_sm+0x1774>
}
 8005676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005678:	2000      	movs	r0, #0
			keypadarr[0] = num;
 800567a:	257a      	movs	r5, #122	; 0x7a
 800567c:	4b29      	ldr	r3, [pc, #164]	; (8005724 <keypad_sm+0x185c>)
			if(keypadarr[4] == '.'){
 800567e:	492b      	ldr	r1, [pc, #172]	; (800572c <keypad_sm+0x1864>)
				keypaddecimal = 0;
 8005680:	4c29      	ldr	r4, [pc, #164]	; (8005728 <keypad_sm+0x1860>)
				kpenum = WAIT;
 8005682:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	b252      	sxtb	r2, r2
 8005688:	2a03      	cmp	r2, #3
 800568a:	f73e ac33 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800568e:	781a      	ldrb	r2, [r3, #0]
 8005690:	b252      	sxtb	r2, r2
 8005692:	2a03      	cmp	r2, #3
 8005694:	dcf6      	bgt.n	8005684 <keypad_sm+0x17bc>
			if(keypadarr[4] == '.'){
 8005696:	790a      	ldrb	r2, [r1, #4]
 8005698:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 800569a:	bf08      	it	eq
 800569c:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 800569e:	78ca      	ldrb	r2, [r1, #3]
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	710a      	strb	r2, [r1, #4]
 80056a4:	788a      	ldrb	r2, [r1, #2]
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	70ca      	strb	r2, [r1, #3]
 80056aa:	784a      	ldrb	r2, [r1, #1]
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	708a      	strb	r2, [r1, #2]
 80056b0:	780a      	ldrb	r2, [r1, #0]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 80056b6:	700d      	strb	r5, [r1, #0]
			keypaditerator++;
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	3201      	adds	r2, #1
 80056bc:	b252      	sxtb	r2, r2
 80056be:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 80056c0:	781a      	ldrb	r2, [r3, #0]
 80056c2:	b252      	sxtb	r2, r2
 80056c4:	2a03      	cmp	r2, #3
 80056c6:	dde2      	ble.n	800568e <keypad_sm+0x17c6>
}
 80056c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(keypaditerator < keypadlength-1){
 80056ca:	4b16      	ldr	r3, [pc, #88]	; (8005724 <keypad_sm+0x185c>)
 80056cc:	781a      	ldrb	r2, [r3, #0]
 80056ce:	b252      	sxtb	r2, r2
 80056d0:	2a03      	cmp	r2, #3
 80056d2:	f73e ac0f 	bgt.w	8003ef4 <keypad_sm+0x2c>
			if(keypadarr[4] == '.'){
 80056d6:	4a15      	ldr	r2, [pc, #84]	; (800572c <keypad_sm+0x1864>)
 80056d8:	7911      	ldrb	r1, [r2, #4]
 80056da:	292e      	cmp	r1, #46	; 0x2e
 80056dc:	d102      	bne.n	80056e4 <keypad_sm+0x181c>
				keypaddecimal = 0;
 80056de:	2000      	movs	r0, #0
 80056e0:	4911      	ldr	r1, [pc, #68]	; (8005728 <keypad_sm+0x1860>)
 80056e2:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 80056e4:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 80056e6:	78d1      	ldrb	r1, [r2, #3]
 80056e8:	b2c9      	uxtb	r1, r1
 80056ea:	7111      	strb	r1, [r2, #4]
 80056ec:	7891      	ldrb	r1, [r2, #2]
 80056ee:	b2c9      	uxtb	r1, r1
 80056f0:	70d1      	strb	r1, [r2, #3]
 80056f2:	7851      	ldrb	r1, [r2, #1]
 80056f4:	b2c9      	uxtb	r1, r1
 80056f6:	7091      	strb	r1, [r2, #2]
 80056f8:	7811      	ldrb	r1, [r2, #0]
 80056fa:	b2c9      	uxtb	r1, r1
 80056fc:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80056fe:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	3201      	adds	r2, #1
 8005704:	b252      	sxtb	r2, r2
 8005706:	701a      	strb	r2, [r3, #0]
}
 8005708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800570a:	bf00      	nop
 800570c:	f3af 8000 	nop.w
 8005710:	924f227d 	.word	0x924f227d
 8005714:	3fe999ae 	.word	0x3fe999ae
 8005718:	50b0f27c 	.word	0x50b0f27c
 800571c:	3fe99a6b 	.word	0x3fe99a6b
 8005720:	200003ad 	.word	0x200003ad
 8005724:	20000005 	.word	0x20000005
 8005728:	200006c4 	.word	0x200006c4
 800572c:	20000000 	.word	0x20000000
 8005730:	41400000 	.word	0x41400000
 8005734:	20000398 	.word	0x20000398
 8005738:	2000039c 	.word	0x2000039c
				keypaddecimal = 0;
 800573c:	2600      	movs	r6, #0
			keypadarr[0] = num;
 800573e:	257a      	movs	r5, #122	; 0x7a
 8005740:	4b9b      	ldr	r3, [pc, #620]	; (80059b0 <keypad_sm+0x1ae8>)
			if(keypadarr[4] == '.'){
 8005742:	499c      	ldr	r1, [pc, #624]	; (80059b4 <keypad_sm+0x1aec>)
				keypaddecimal = 0;
 8005744:	489c      	ldr	r0, [pc, #624]	; (80059b8 <keypad_sm+0x1af0>)
	while(keypaditerator < 4){
 8005746:	781a      	ldrb	r2, [r3, #0]
 8005748:	b252      	sxtb	r2, r2
 800574a:	2a03      	cmp	r2, #3
 800574c:	dc1c      	bgt.n	8005788 <keypad_sm+0x18c0>
		if(keypaditerator < keypadlength-1){
 800574e:	781a      	ldrb	r2, [r3, #0]
 8005750:	b252      	sxtb	r2, r2
 8005752:	2a03      	cmp	r2, #3
 8005754:	dcf7      	bgt.n	8005746 <keypad_sm+0x187e>
			if(keypadarr[4] == '.'){
 8005756:	790a      	ldrb	r2, [r1, #4]
 8005758:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 800575a:	bf08      	it	eq
 800575c:	7006      	strbeq	r6, [r0, #0]
				keypadarr[i+1] = keypadarr[i];
 800575e:	78ca      	ldrb	r2, [r1, #3]
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	710a      	strb	r2, [r1, #4]
 8005764:	788a      	ldrb	r2, [r1, #2]
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	70ca      	strb	r2, [r1, #3]
 800576a:	784a      	ldrb	r2, [r1, #1]
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	708a      	strb	r2, [r1, #2]
 8005770:	780a      	ldrb	r2, [r1, #0]
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005776:	700d      	strb	r5, [r1, #0]
			keypaditerator++;
 8005778:	781a      	ldrb	r2, [r3, #0]
 800577a:	3201      	adds	r2, #1
 800577c:	b252      	sxtb	r2, r2
 800577e:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005780:	781a      	ldrb	r2, [r3, #0]
 8005782:	b252      	sxtb	r2, r2
 8005784:	2a03      	cmp	r2, #3
 8005786:	dde2      	ble.n	800574e <keypad_sm+0x1886>
				encmode = 0;
 8005788:	2300      	movs	r3, #0
				encpos = 0;
 800578a:	4a8c      	ldr	r2, [pc, #560]	; (80059bc <keypad_sm+0x1af4>)
				encmode = 0;
 800578c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800578e:	7013      	strb	r3, [r2, #0]
}
 8005790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005792:	f7fe f8d9 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005796:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005798:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800579a:	f7fb fc9d 	bl	80010d8 <__aeabi_fcmpge>
 800579e:	b160      	cbz	r0, 80057ba <keypad_sm+0x18f2>
 80057a0:	4620      	mov	r0, r4
 80057a2:	f7fa fe59 	bl	8000458 <__aeabi_f2d>
 80057a6:	a380      	add	r3, pc, #512	; (adr r3, 80059a8 <keypad_sm+0x1ae0>)
 80057a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ac:	f7fb f928 	bl	8000a00 <__aeabi_dcmple>
 80057b0:	b118      	cbz	r0, 80057ba <keypad_sm+0x18f2>
					amp_set_aux = translate_keypad();
 80057b2:	f7fe f8c9 	bl	8003948 <translate_keypad>
 80057b6:	4a82      	ldr	r2, [pc, #520]	; (80059c0 <keypad_sm+0x1af8>)
 80057b8:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 80057ba:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80057bc:	257a      	movs	r5, #122	; 0x7a
 80057be:	4b7c      	ldr	r3, [pc, #496]	; (80059b0 <keypad_sm+0x1ae8>)
			if(keypadarr[4] == '.'){
 80057c0:	4a7c      	ldr	r2, [pc, #496]	; (80059b4 <keypad_sm+0x1aec>)
				keypaddecimal = 0;
 80057c2:	4c7d      	ldr	r4, [pc, #500]	; (80059b8 <keypad_sm+0x1af0>)
				kpenum = WAIT;
 80057c4:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80057c6:	7819      	ldrb	r1, [r3, #0]
 80057c8:	b249      	sxtb	r1, r1
 80057ca:	2903      	cmp	r1, #3
 80057cc:	f73e ab92 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80057d0:	7819      	ldrb	r1, [r3, #0]
 80057d2:	b249      	sxtb	r1, r1
 80057d4:	2903      	cmp	r1, #3
 80057d6:	dcf6      	bgt.n	80057c6 <keypad_sm+0x18fe>
			if(keypadarr[4] == '.'){
 80057d8:	7911      	ldrb	r1, [r2, #4]
 80057da:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80057dc:	bf08      	it	eq
 80057de:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 80057e0:	78d1      	ldrb	r1, [r2, #3]
 80057e2:	b2c9      	uxtb	r1, r1
 80057e4:	7111      	strb	r1, [r2, #4]
 80057e6:	7891      	ldrb	r1, [r2, #2]
 80057e8:	b2c9      	uxtb	r1, r1
 80057ea:	70d1      	strb	r1, [r2, #3]
 80057ec:	7851      	ldrb	r1, [r2, #1]
 80057ee:	b2c9      	uxtb	r1, r1
 80057f0:	7091      	strb	r1, [r2, #2]
 80057f2:	7811      	ldrb	r1, [r2, #0]
 80057f4:	b2c9      	uxtb	r1, r1
 80057f6:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80057f8:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 80057fa:	7819      	ldrb	r1, [r3, #0]
 80057fc:	3101      	adds	r1, #1
 80057fe:	b249      	sxtb	r1, r1
 8005800:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005802:	7819      	ldrb	r1, [r3, #0]
 8005804:	b249      	sxtb	r1, r1
 8005806:	2903      	cmp	r1, #3
 8005808:	dde2      	ble.n	80057d0 <keypad_sm+0x1908>
}
 800580a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 800580c:	2600      	movs	r6, #0
			keypadarr[0] = num;
 800580e:	257a      	movs	r5, #122	; 0x7a
 8005810:	4b67      	ldr	r3, [pc, #412]	; (80059b0 <keypad_sm+0x1ae8>)
			if(keypadarr[4] == '.'){
 8005812:	4a68      	ldr	r2, [pc, #416]	; (80059b4 <keypad_sm+0x1aec>)
				keypaddecimal = 0;
 8005814:	4868      	ldr	r0, [pc, #416]	; (80059b8 <keypad_sm+0x1af0>)
	while(keypaditerator < 4){
 8005816:	7819      	ldrb	r1, [r3, #0]
 8005818:	b249      	sxtb	r1, r1
 800581a:	2903      	cmp	r1, #3
 800581c:	dc1c      	bgt.n	8005858 <keypad_sm+0x1990>
		if(keypaditerator < keypadlength-1){
 800581e:	7819      	ldrb	r1, [r3, #0]
 8005820:	b249      	sxtb	r1, r1
 8005822:	2903      	cmp	r1, #3
 8005824:	dcf7      	bgt.n	8005816 <keypad_sm+0x194e>
			if(keypadarr[4] == '.'){
 8005826:	7911      	ldrb	r1, [r2, #4]
 8005828:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800582a:	bf08      	it	eq
 800582c:	7006      	strbeq	r6, [r0, #0]
				keypadarr[i+1] = keypadarr[i];
 800582e:	78d1      	ldrb	r1, [r2, #3]
 8005830:	b2c9      	uxtb	r1, r1
 8005832:	7111      	strb	r1, [r2, #4]
 8005834:	7891      	ldrb	r1, [r2, #2]
 8005836:	b2c9      	uxtb	r1, r1
 8005838:	70d1      	strb	r1, [r2, #3]
 800583a:	7851      	ldrb	r1, [r2, #1]
 800583c:	b2c9      	uxtb	r1, r1
 800583e:	7091      	strb	r1, [r2, #2]
 8005840:	7811      	ldrb	r1, [r2, #0]
 8005842:	b2c9      	uxtb	r1, r1
 8005844:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005846:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005848:	7819      	ldrb	r1, [r3, #0]
 800584a:	3101      	adds	r1, #1
 800584c:	b249      	sxtb	r1, r1
 800584e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005850:	7819      	ldrb	r1, [r3, #0]
 8005852:	b249      	sxtb	r1, r1
 8005854:	2903      	cmp	r1, #3
 8005856:	dde2      	ble.n	800581e <keypad_sm+0x1956>
				encmode = 0;
 8005858:	2300      	movs	r3, #0
				encpos = 0;
 800585a:	4a58      	ldr	r2, [pc, #352]	; (80059bc <keypad_sm+0x1af4>)
				encmode = 0;
 800585c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800585e:	7013      	strb	r3, [r2, #0]
}
 8005860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005862:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005864:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005868:	4b51      	ldr	r3, [pc, #324]	; (80059b0 <keypad_sm+0x1ae8>)
			if(keypadarr[4] == '.'){
 800586a:	4952      	ldr	r1, [pc, #328]	; (80059b4 <keypad_sm+0x1aec>)
				keypaddecimal = 0;
 800586c:	4d52      	ldr	r5, [pc, #328]	; (80059b8 <keypad_sm+0x1af0>)
				kpenum = WAIT;
 800586e:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005870:	781a      	ldrb	r2, [r3, #0]
 8005872:	b252      	sxtb	r2, r2
 8005874:	2a03      	cmp	r2, #3
 8005876:	dc1d      	bgt.n	80058b4 <keypad_sm+0x19ec>
		if(keypaditerator < keypadlength-1){
 8005878:	781a      	ldrb	r2, [r3, #0]
 800587a:	b252      	sxtb	r2, r2
 800587c:	2a03      	cmp	r2, #3
 800587e:	dcf7      	bgt.n	8005870 <keypad_sm+0x19a8>
			if(keypadarr[4] == '.'){
 8005880:	790a      	ldrb	r2, [r1, #4]
 8005882:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8005884:	bf08      	it	eq
 8005886:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005888:	78ca      	ldrb	r2, [r1, #3]
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	710a      	strb	r2, [r1, #4]
 800588e:	788a      	ldrb	r2, [r1, #2]
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	70ca      	strb	r2, [r1, #3]
 8005894:	784a      	ldrb	r2, [r1, #1]
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	708a      	strb	r2, [r1, #2]
 800589a:	780a      	ldrb	r2, [r1, #0]
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 80058a0:	f881 c000 	strb.w	ip, [r1]
			keypaditerator++;
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	3201      	adds	r2, #1
 80058a8:	b252      	sxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	b252      	sxtb	r2, r2
 80058b0:	2a03      	cmp	r2, #3
 80058b2:	dde1      	ble.n	8005878 <keypad_sm+0x19b0>
				encmode = 0;
 80058b4:	2300      	movs	r3, #0
				encpos = 0;
 80058b6:	4a41      	ldr	r2, [pc, #260]	; (80059bc <keypad_sm+0x1af4>)
				encmode = 0;
 80058b8:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80058ba:	7013      	strb	r3, [r2, #0]
}
 80058bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(0, volt_set_aux);
 80058be:	4b41      	ldr	r3, [pc, #260]	; (80059c4 <keypad_sm+0x1afc>)
 80058c0:	2000      	movs	r0, #0
 80058c2:	6819      	ldr	r1, [r3, #0]
 80058c4:	f7fe f9e4 	bl	8003c90 <fill_keypad>
				encmode = 1;
 80058c8:	2101      	movs	r1, #1
				encpos = 0;
 80058ca:	2200      	movs	r2, #0
 80058cc:	4b3b      	ldr	r3, [pc, #236]	; (80059bc <keypad_sm+0x1af4>)
				encmode = 1;
 80058ce:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 80058d0:	701a      	strb	r2, [r3, #0]
}
 80058d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80058d4:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80058d6:	257a      	movs	r5, #122	; 0x7a
 80058d8:	4b35      	ldr	r3, [pc, #212]	; (80059b0 <keypad_sm+0x1ae8>)
			if(keypadarr[4] == '.'){
 80058da:	4a36      	ldr	r2, [pc, #216]	; (80059b4 <keypad_sm+0x1aec>)
				keypaddecimal = 0;
 80058dc:	4c36      	ldr	r4, [pc, #216]	; (80059b8 <keypad_sm+0x1af0>)
				kpenum = WAIT;
 80058de:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80058e0:	7819      	ldrb	r1, [r3, #0]
 80058e2:	b249      	sxtb	r1, r1
 80058e4:	2903      	cmp	r1, #3
 80058e6:	f73e ab05 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80058ea:	7819      	ldrb	r1, [r3, #0]
 80058ec:	b249      	sxtb	r1, r1
 80058ee:	2903      	cmp	r1, #3
 80058f0:	dcf6      	bgt.n	80058e0 <keypad_sm+0x1a18>
			if(keypadarr[4] == '.'){
 80058f2:	7911      	ldrb	r1, [r2, #4]
 80058f4:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80058f6:	bf08      	it	eq
 80058f8:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 80058fa:	78d1      	ldrb	r1, [r2, #3]
 80058fc:	b2c9      	uxtb	r1, r1
 80058fe:	7111      	strb	r1, [r2, #4]
 8005900:	7891      	ldrb	r1, [r2, #2]
 8005902:	b2c9      	uxtb	r1, r1
 8005904:	70d1      	strb	r1, [r2, #3]
 8005906:	7851      	ldrb	r1, [r2, #1]
 8005908:	b2c9      	uxtb	r1, r1
 800590a:	7091      	strb	r1, [r2, #2]
 800590c:	7811      	ldrb	r1, [r2, #0]
 800590e:	b2c9      	uxtb	r1, r1
 8005910:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005912:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005914:	7819      	ldrb	r1, [r3, #0]
 8005916:	3101      	adds	r1, #1
 8005918:	b249      	sxtb	r1, r1
 800591a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800591c:	7819      	ldrb	r1, [r3, #0]
 800591e:	b249      	sxtb	r1, r1
 8005920:	2903      	cmp	r1, #3
 8005922:	dde2      	ble.n	80058ea <keypad_sm+0x1a22>
}
 8005924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005926:	f7fe f80f 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800592a:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800592c:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800592e:	f7fb fbd3 	bl	80010d8 <__aeabi_fcmpge>
 8005932:	b140      	cbz	r0, 8005946 <keypad_sm+0x1a7e>
 8005934:	4628      	mov	r0, r5
 8005936:	4924      	ldr	r1, [pc, #144]	; (80059c8 <keypad_sm+0x1b00>)
 8005938:	f7fb fbc4 	bl	80010c4 <__aeabi_fcmple>
 800593c:	b118      	cbz	r0, 8005946 <keypad_sm+0x1a7e>
					volt_set_aux = translate_keypad();
 800593e:	f7fe f803 	bl	8003948 <translate_keypad>
 8005942:	4a20      	ldr	r2, [pc, #128]	; (80059c4 <keypad_sm+0x1afc>)
 8005944:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005946:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005948:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 800594c:	4b18      	ldr	r3, [pc, #96]	; (80059b0 <keypad_sm+0x1ae8>)
			if(keypadarr[4] == '.'){
 800594e:	4a19      	ldr	r2, [pc, #100]	; (80059b4 <keypad_sm+0x1aec>)
				keypaddecimal = 0;
 8005950:	4d19      	ldr	r5, [pc, #100]	; (80059b8 <keypad_sm+0x1af0>)
				kpenum = WAIT;
 8005952:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005954:	7819      	ldrb	r1, [r3, #0]
 8005956:	b249      	sxtb	r1, r1
 8005958:	2903      	cmp	r1, #3
 800595a:	dc1d      	bgt.n	8005998 <keypad_sm+0x1ad0>
		if(keypaditerator < keypadlength-1){
 800595c:	7819      	ldrb	r1, [r3, #0]
 800595e:	b249      	sxtb	r1, r1
 8005960:	2903      	cmp	r1, #3
 8005962:	dcf7      	bgt.n	8005954 <keypad_sm+0x1a8c>
			if(keypadarr[4] == '.'){
 8005964:	7911      	ldrb	r1, [r2, #4]
 8005966:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005968:	bf08      	it	eq
 800596a:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800596c:	78d1      	ldrb	r1, [r2, #3]
 800596e:	b2c9      	uxtb	r1, r1
 8005970:	7111      	strb	r1, [r2, #4]
 8005972:	7891      	ldrb	r1, [r2, #2]
 8005974:	b2c9      	uxtb	r1, r1
 8005976:	70d1      	strb	r1, [r2, #3]
 8005978:	7851      	ldrb	r1, [r2, #1]
 800597a:	b2c9      	uxtb	r1, r1
 800597c:	7091      	strb	r1, [r2, #2]
 800597e:	7811      	ldrb	r1, [r2, #0]
 8005980:	b2c9      	uxtb	r1, r1
 8005982:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005984:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8005988:	7819      	ldrb	r1, [r3, #0]
 800598a:	3101      	adds	r1, #1
 800598c:	b249      	sxtb	r1, r1
 800598e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005990:	7819      	ldrb	r1, [r3, #0]
 8005992:	b249      	sxtb	r1, r1
 8005994:	2903      	cmp	r1, #3
 8005996:	dde1      	ble.n	800595c <keypad_sm+0x1a94>
				encmode = 0;
 8005998:	2300      	movs	r3, #0
				encpos = 0;
 800599a:	4a08      	ldr	r2, [pc, #32]	; (80059bc <keypad_sm+0x1af4>)
				encmode = 0;
 800599c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800599e:	7013      	strb	r3, [r2, #0]
}
 80059a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059a2:	bf00      	nop
 80059a4:	f3af 8000 	nop.w
 80059a8:	50b0f27c 	.word	0x50b0f27c
 80059ac:	3fe99a6b 	.word	0x3fe99a6b
 80059b0:	20000005 	.word	0x20000005
 80059b4:	20000000 	.word	0x20000000
 80059b8:	200006c4 	.word	0x200006c4
 80059bc:	200003ad 	.word	0x200003ad
 80059c0:	20000394 	.word	0x20000394
 80059c4:	20000824 	.word	0x20000824
 80059c8:	41400000 	.word	0x41400000
	float temp = translate_keypad();
 80059cc:	f7fd ffbc 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80059d0:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80059d2:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80059d4:	f7fb fb80 	bl	80010d8 <__aeabi_fcmpge>
 80059d8:	b158      	cbz	r0, 80059f2 <keypad_sm+0x1b2a>
 80059da:	4620      	mov	r0, r4
 80059dc:	499c      	ldr	r1, [pc, #624]	; (8005c50 <keypad_sm+0x1d88>)
 80059de:	f7fb fb71 	bl	80010c4 <__aeabi_fcmple>
 80059e2:	b130      	cbz	r0, 80059f2 <keypad_sm+0x1b2a>
					volt_set_main_old = volt_set_main;
 80059e4:	4c9b      	ldr	r4, [pc, #620]	; (8005c54 <keypad_sm+0x1d8c>)
 80059e6:	4b9c      	ldr	r3, [pc, #624]	; (8005c58 <keypad_sm+0x1d90>)
 80059e8:	6822      	ldr	r2, [r4, #0]
 80059ea:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 80059ec:	f7fd ffac 	bl	8003948 <translate_keypad>
 80059f0:	6020      	str	r0, [r4, #0]
				kpenum = WAIT;
 80059f2:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80059f4:	257a      	movs	r5, #122	; 0x7a
 80059f6:	4b99      	ldr	r3, [pc, #612]	; (8005c5c <keypad_sm+0x1d94>)
			if(keypadarr[4] == '.'){
 80059f8:	4a99      	ldr	r2, [pc, #612]	; (8005c60 <keypad_sm+0x1d98>)
				keypaddecimal = 0;
 80059fa:	4c9a      	ldr	r4, [pc, #616]	; (8005c64 <keypad_sm+0x1d9c>)
				kpenum = WAIT;
 80059fc:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80059fe:	7819      	ldrb	r1, [r3, #0]
 8005a00:	b249      	sxtb	r1, r1
 8005a02:	2903      	cmp	r1, #3
 8005a04:	f73e aa76 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005a08:	7819      	ldrb	r1, [r3, #0]
 8005a0a:	b249      	sxtb	r1, r1
 8005a0c:	2903      	cmp	r1, #3
 8005a0e:	dcf6      	bgt.n	80059fe <keypad_sm+0x1b36>
			if(keypadarr[4] == '.'){
 8005a10:	7911      	ldrb	r1, [r2, #4]
 8005a12:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005a14:	bf08      	it	eq
 8005a16:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005a18:	78d1      	ldrb	r1, [r2, #3]
 8005a1a:	b2c9      	uxtb	r1, r1
 8005a1c:	7111      	strb	r1, [r2, #4]
 8005a1e:	7891      	ldrb	r1, [r2, #2]
 8005a20:	b2c9      	uxtb	r1, r1
 8005a22:	70d1      	strb	r1, [r2, #3]
 8005a24:	7851      	ldrb	r1, [r2, #1]
 8005a26:	b2c9      	uxtb	r1, r1
 8005a28:	7091      	strb	r1, [r2, #2]
 8005a2a:	7811      	ldrb	r1, [r2, #0]
 8005a2c:	b2c9      	uxtb	r1, r1
 8005a2e:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005a30:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005a32:	7819      	ldrb	r1, [r3, #0]
 8005a34:	3101      	adds	r1, #1
 8005a36:	b249      	sxtb	r1, r1
 8005a38:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005a3a:	7819      	ldrb	r1, [r3, #0]
 8005a3c:	b249      	sxtb	r1, r1
 8005a3e:	2903      	cmp	r1, #3
 8005a40:	dde2      	ble.n	8005a08 <keypad_sm+0x1b40>
}
 8005a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005a44:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005a46:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005a4a:	4b84      	ldr	r3, [pc, #528]	; (8005c5c <keypad_sm+0x1d94>)
			if(keypadarr[4] == '.'){
 8005a4c:	4a84      	ldr	r2, [pc, #528]	; (8005c60 <keypad_sm+0x1d98>)
				keypaddecimal = 0;
 8005a4e:	4d85      	ldr	r5, [pc, #532]	; (8005c64 <keypad_sm+0x1d9c>)
				kpenum = WAIT;
 8005a50:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005a52:	7819      	ldrb	r1, [r3, #0]
 8005a54:	b249      	sxtb	r1, r1
 8005a56:	2903      	cmp	r1, #3
 8005a58:	dc1d      	bgt.n	8005a96 <keypad_sm+0x1bce>
		if(keypaditerator < keypadlength-1){
 8005a5a:	7819      	ldrb	r1, [r3, #0]
 8005a5c:	b249      	sxtb	r1, r1
 8005a5e:	2903      	cmp	r1, #3
 8005a60:	dcf7      	bgt.n	8005a52 <keypad_sm+0x1b8a>
			if(keypadarr[4] == '.'){
 8005a62:	7911      	ldrb	r1, [r2, #4]
 8005a64:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005a66:	bf08      	it	eq
 8005a68:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005a6a:	78d1      	ldrb	r1, [r2, #3]
 8005a6c:	b2c9      	uxtb	r1, r1
 8005a6e:	7111      	strb	r1, [r2, #4]
 8005a70:	7891      	ldrb	r1, [r2, #2]
 8005a72:	b2c9      	uxtb	r1, r1
 8005a74:	70d1      	strb	r1, [r2, #3]
 8005a76:	7851      	ldrb	r1, [r2, #1]
 8005a78:	b2c9      	uxtb	r1, r1
 8005a7a:	7091      	strb	r1, [r2, #2]
 8005a7c:	7811      	ldrb	r1, [r2, #0]
 8005a7e:	b2c9      	uxtb	r1, r1
 8005a80:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005a82:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8005a86:	7819      	ldrb	r1, [r3, #0]
 8005a88:	3101      	adds	r1, #1
 8005a8a:	b249      	sxtb	r1, r1
 8005a8c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005a8e:	7819      	ldrb	r1, [r3, #0]
 8005a90:	b249      	sxtb	r1, r1
 8005a92:	2903      	cmp	r1, #3
 8005a94:	dde1      	ble.n	8005a5a <keypad_sm+0x1b92>
				encmode = 0;
 8005a96:	2300      	movs	r3, #0
				encpos = 0;
 8005a98:	4a73      	ldr	r2, [pc, #460]	; (8005c68 <keypad_sm+0x1da0>)
				encmode = 0;
 8005a9a:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005a9c:	7013      	strb	r3, [r2, #0]
}
 8005a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005aa0:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005aa2:	257a      	movs	r5, #122	; 0x7a
 8005aa4:	4b6d      	ldr	r3, [pc, #436]	; (8005c5c <keypad_sm+0x1d94>)
			if(keypadarr[4] == '.'){
 8005aa6:	4a6e      	ldr	r2, [pc, #440]	; (8005c60 <keypad_sm+0x1d98>)
				keypaddecimal = 0;
 8005aa8:	4c6e      	ldr	r4, [pc, #440]	; (8005c64 <keypad_sm+0x1d9c>)
				kpenum = WAIT;
 8005aaa:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005aac:	7819      	ldrb	r1, [r3, #0]
 8005aae:	b249      	sxtb	r1, r1
 8005ab0:	2903      	cmp	r1, #3
 8005ab2:	f73e aa1f 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005ab6:	7819      	ldrb	r1, [r3, #0]
 8005ab8:	b249      	sxtb	r1, r1
 8005aba:	2903      	cmp	r1, #3
 8005abc:	dcf6      	bgt.n	8005aac <keypad_sm+0x1be4>
			if(keypadarr[4] == '.'){
 8005abe:	7911      	ldrb	r1, [r2, #4]
 8005ac0:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005ac2:	bf08      	it	eq
 8005ac4:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005ac6:	78d1      	ldrb	r1, [r2, #3]
 8005ac8:	b2c9      	uxtb	r1, r1
 8005aca:	7111      	strb	r1, [r2, #4]
 8005acc:	7891      	ldrb	r1, [r2, #2]
 8005ace:	b2c9      	uxtb	r1, r1
 8005ad0:	70d1      	strb	r1, [r2, #3]
 8005ad2:	7851      	ldrb	r1, [r2, #1]
 8005ad4:	b2c9      	uxtb	r1, r1
 8005ad6:	7091      	strb	r1, [r2, #2]
 8005ad8:	7811      	ldrb	r1, [r2, #0]
 8005ada:	b2c9      	uxtb	r1, r1
 8005adc:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005ade:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005ae0:	7819      	ldrb	r1, [r3, #0]
 8005ae2:	3101      	adds	r1, #1
 8005ae4:	b249      	sxtb	r1, r1
 8005ae6:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005ae8:	7819      	ldrb	r1, [r3, #0]
 8005aea:	b249      	sxtb	r1, r1
 8005aec:	2903      	cmp	r1, #3
 8005aee:	dde2      	ble.n	8005ab6 <keypad_sm+0x1bee>
}
 8005af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005af2:	f7fd ff29 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005af6:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005af8:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005afa:	f7fb faed 	bl	80010d8 <__aeabi_fcmpge>
 8005afe:	b140      	cbz	r0, 8005b12 <keypad_sm+0x1c4a>
 8005b00:	4628      	mov	r0, r5
 8005b02:	4953      	ldr	r1, [pc, #332]	; (8005c50 <keypad_sm+0x1d88>)
 8005b04:	f7fb fade 	bl	80010c4 <__aeabi_fcmple>
 8005b08:	b118      	cbz	r0, 8005b12 <keypad_sm+0x1c4a>
					amp_set_aux = translate_keypad();
 8005b0a:	f7fd ff1d 	bl	8003948 <translate_keypad>
 8005b0e:	4a57      	ldr	r2, [pc, #348]	; (8005c6c <keypad_sm+0x1da4>)
 8005b10:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005b12:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005b14:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005b18:	4b50      	ldr	r3, [pc, #320]	; (8005c5c <keypad_sm+0x1d94>)
			if(keypadarr[4] == '.'){
 8005b1a:	4a51      	ldr	r2, [pc, #324]	; (8005c60 <keypad_sm+0x1d98>)
				keypaddecimal = 0;
 8005b1c:	4d51      	ldr	r5, [pc, #324]	; (8005c64 <keypad_sm+0x1d9c>)
				kpenum = WAIT;
 8005b1e:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005b20:	7819      	ldrb	r1, [r3, #0]
 8005b22:	b249      	sxtb	r1, r1
 8005b24:	2903      	cmp	r1, #3
 8005b26:	dc1d      	bgt.n	8005b64 <keypad_sm+0x1c9c>
		if(keypaditerator < keypadlength-1){
 8005b28:	7819      	ldrb	r1, [r3, #0]
 8005b2a:	b249      	sxtb	r1, r1
 8005b2c:	2903      	cmp	r1, #3
 8005b2e:	dcf7      	bgt.n	8005b20 <keypad_sm+0x1c58>
			if(keypadarr[4] == '.'){
 8005b30:	7911      	ldrb	r1, [r2, #4]
 8005b32:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005b34:	bf08      	it	eq
 8005b36:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005b38:	78d1      	ldrb	r1, [r2, #3]
 8005b3a:	b2c9      	uxtb	r1, r1
 8005b3c:	7111      	strb	r1, [r2, #4]
 8005b3e:	7891      	ldrb	r1, [r2, #2]
 8005b40:	b2c9      	uxtb	r1, r1
 8005b42:	70d1      	strb	r1, [r2, #3]
 8005b44:	7851      	ldrb	r1, [r2, #1]
 8005b46:	b2c9      	uxtb	r1, r1
 8005b48:	7091      	strb	r1, [r2, #2]
 8005b4a:	7811      	ldrb	r1, [r2, #0]
 8005b4c:	b2c9      	uxtb	r1, r1
 8005b4e:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005b50:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8005b54:	7819      	ldrb	r1, [r3, #0]
 8005b56:	3101      	adds	r1, #1
 8005b58:	b249      	sxtb	r1, r1
 8005b5a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005b5c:	7819      	ldrb	r1, [r3, #0]
 8005b5e:	b249      	sxtb	r1, r1
 8005b60:	2903      	cmp	r1, #3
 8005b62:	dde1      	ble.n	8005b28 <keypad_sm+0x1c60>
				encmode = 0;
 8005b64:	2300      	movs	r3, #0
				encpos = 0;
 8005b66:	4a40      	ldr	r2, [pc, #256]	; (8005c68 <keypad_sm+0x1da0>)
				encmode = 0;
 8005b68:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005b6a:	7013      	strb	r3, [r2, #0]
}
 8005b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(1, amp_set_aux);
 8005b6e:	4b3f      	ldr	r3, [pc, #252]	; (8005c6c <keypad_sm+0x1da4>)
 8005b70:	2001      	movs	r0, #1
 8005b72:	6819      	ldr	r1, [r3, #0]
 8005b74:	f7fe f88c 	bl	8003c90 <fill_keypad>
				encmode = 1;
 8005b78:	2101      	movs	r1, #1
				encpos = 0;
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	4b3a      	ldr	r3, [pc, #232]	; (8005c68 <keypad_sm+0x1da0>)
				encmode = 1;
 8005b7e:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8005b80:	701a      	strb	r2, [r3, #0]
}
 8005b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if(encpos == 1){
 8005b84:	4b38      	ldr	r3, [pc, #224]	; (8005c68 <keypad_sm+0x1da0>)
 8005b86:	781a      	ldrb	r2, [r3, #0]
 8005b88:	2a01      	cmp	r2, #1
					encpos++;
 8005b8a:	781a      	ldrb	r2, [r3, #0]
				if(encpos == 1){
 8005b8c:	f000 8091 	beq.w	8005cb2 <keypad_sm+0x1dea>
				else if(encpos < 4){
 8005b90:	2a03      	cmp	r2, #3
					encpos = 0;
 8005b92:	bf8f      	iteee	hi
 8005b94:	2200      	movhi	r2, #0
					encpos++;
 8005b96:	781a      	ldrbls	r2, [r3, #0]
 8005b98:	3201      	addls	r2, #1
 8005b9a:	b2d2      	uxtbls	r2, r2
					encpos = 0;
 8005b9c:	701a      	strb	r2, [r3, #0]
}
 8005b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 8005ba0:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8005ba2:	257a      	movs	r5, #122	; 0x7a
 8005ba4:	4b2d      	ldr	r3, [pc, #180]	; (8005c5c <keypad_sm+0x1d94>)
			if(keypadarr[4] == '.'){
 8005ba6:	4a2e      	ldr	r2, [pc, #184]	; (8005c60 <keypad_sm+0x1d98>)
				keypaddecimal = 0;
 8005ba8:	482e      	ldr	r0, [pc, #184]	; (8005c64 <keypad_sm+0x1d9c>)
	while(keypaditerator < 4){
 8005baa:	7819      	ldrb	r1, [r3, #0]
 8005bac:	b249      	sxtb	r1, r1
 8005bae:	2903      	cmp	r1, #3
 8005bb0:	dc1c      	bgt.n	8005bec <keypad_sm+0x1d24>
		if(keypaditerator < keypadlength-1){
 8005bb2:	7819      	ldrb	r1, [r3, #0]
 8005bb4:	b249      	sxtb	r1, r1
 8005bb6:	2903      	cmp	r1, #3
 8005bb8:	dcf7      	bgt.n	8005baa <keypad_sm+0x1ce2>
			if(keypadarr[4] == '.'){
 8005bba:	7911      	ldrb	r1, [r2, #4]
 8005bbc:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005bbe:	bf08      	it	eq
 8005bc0:	7006      	strbeq	r6, [r0, #0]
				keypadarr[i+1] = keypadarr[i];
 8005bc2:	78d1      	ldrb	r1, [r2, #3]
 8005bc4:	b2c9      	uxtb	r1, r1
 8005bc6:	7111      	strb	r1, [r2, #4]
 8005bc8:	7891      	ldrb	r1, [r2, #2]
 8005bca:	b2c9      	uxtb	r1, r1
 8005bcc:	70d1      	strb	r1, [r2, #3]
 8005bce:	7851      	ldrb	r1, [r2, #1]
 8005bd0:	b2c9      	uxtb	r1, r1
 8005bd2:	7091      	strb	r1, [r2, #2]
 8005bd4:	7811      	ldrb	r1, [r2, #0]
 8005bd6:	b2c9      	uxtb	r1, r1
 8005bd8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005bda:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005bdc:	7819      	ldrb	r1, [r3, #0]
 8005bde:	3101      	adds	r1, #1
 8005be0:	b249      	sxtb	r1, r1
 8005be2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005be4:	7819      	ldrb	r1, [r3, #0]
 8005be6:	b249      	sxtb	r1, r1
 8005be8:	2903      	cmp	r1, #3
 8005bea:	dde2      	ble.n	8005bb2 <keypad_sm+0x1cea>
				encmode = 0;
 8005bec:	2300      	movs	r3, #0
				encpos = 0;
 8005bee:	4a1e      	ldr	r2, [pc, #120]	; (8005c68 <keypad_sm+0x1da0>)
				encmode = 0;
 8005bf0:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005bf2:	7013      	strb	r3, [r2, #0]
}
 8005bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(0, volt_set_aux);
 8005bf6:	4b1e      	ldr	r3, [pc, #120]	; (8005c70 <keypad_sm+0x1da8>)
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	6819      	ldr	r1, [r3, #0]
 8005bfc:	f7fe f848 	bl	8003c90 <fill_keypad>
				encmode = 1;
 8005c00:	2101      	movs	r1, #1
				encpos = 0;
 8005c02:	2200      	movs	r2, #0
 8005c04:	4b18      	ldr	r3, [pc, #96]	; (8005c68 <keypad_sm+0x1da0>)
				encmode = 1;
 8005c06:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8005c08:	701a      	strb	r2, [r3, #0]
}
 8005c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(1, amp_set_aux);
 8005c0c:	4b17      	ldr	r3, [pc, #92]	; (8005c6c <keypad_sm+0x1da4>)
 8005c0e:	2001      	movs	r0, #1
 8005c10:	6819      	ldr	r1, [r3, #0]
 8005c12:	f7fe f83d 	bl	8003c90 <fill_keypad>
				encmode = 1;
 8005c16:	2101      	movs	r1, #1
				encpos = 0;
 8005c18:	2200      	movs	r2, #0
 8005c1a:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <keypad_sm+0x1da0>)
				encmode = 1;
 8005c1c:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8005c1e:	701a      	strb	r2, [r3, #0]
}
 8005c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(0, volt_set_main);
 8005c22:	4b0c      	ldr	r3, [pc, #48]	; (8005c54 <keypad_sm+0x1d8c>)
 8005c24:	2000      	movs	r0, #0
 8005c26:	6819      	ldr	r1, [r3, #0]
 8005c28:	f7fe f832 	bl	8003c90 <fill_keypad>
				encmode = 1;
 8005c2c:	2101      	movs	r1, #1
				encpos = 0;
 8005c2e:	2200      	movs	r2, #0
 8005c30:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <keypad_sm+0x1da0>)
				encmode = 1;
 8005c32:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8005c34:	701a      	strb	r2, [r3, #0]
}
 8005c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(0, volt_set_main);
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <keypad_sm+0x1d8c>)
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	6819      	ldr	r1, [r3, #0]
 8005c3e:	f7fe f827 	bl	8003c90 <fill_keypad>
				encmode = 1;
 8005c42:	2101      	movs	r1, #1
				encpos = 0;
 8005c44:	2200      	movs	r2, #0
 8005c46:	4b08      	ldr	r3, [pc, #32]	; (8005c68 <keypad_sm+0x1da0>)
				encmode = 1;
 8005c48:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8005c4a:	701a      	strb	r2, [r3, #0]
}
 8005c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	41400000 	.word	0x41400000
 8005c54:	20000828 	.word	0x20000828
 8005c58:	2000082c 	.word	0x2000082c
 8005c5c:	20000005 	.word	0x20000005
 8005c60:	20000000 	.word	0x20000000
 8005c64:	200006c4 	.word	0x200006c4
 8005c68:	200003ad 	.word	0x200003ad
 8005c6c:	20000394 	.word	0x20000394
 8005c70:	20000824 	.word	0x20000824
				float temp = translate_keypad();
 8005c74:	f7fd fe68 	bl	8003948 <translate_keypad>
				if(encpos == 0){
 8005c78:	4b99      	ldr	r3, [pc, #612]	; (8005ee0 <keypad_sm+0x2018>)
				float temp = translate_keypad();
 8005c7a:	4604      	mov	r4, r0
				if(encpos == 0){
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	2a00      	cmp	r2, #0
 8005c80:	d058      	beq.n	8005d34 <keypad_sm+0x1e6c>
				else if(encpos == 1){
 8005c82:	781a      	ldrb	r2, [r3, #0]
 8005c84:	2a01      	cmp	r2, #1
 8005c86:	f000 823f 	beq.w	8006108 <keypad_sm+0x2240>
				else if(encpos == 3){
 8005c8a:	781a      	ldrb	r2, [r3, #0]
 8005c8c:	2a03      	cmp	r2, #3
 8005c8e:	f000 822f 	beq.w	80060f0 <keypad_sm+0x2228>
				else if(encpos == 4){
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b04      	cmp	r3, #4
 8005c96:	f47e affa 	bne.w	8004c8e <keypad_sm+0xdc6>
					temp = temp - 0.01;
 8005c9a:	f7fa fbdd 	bl	8000458 <__aeabi_f2d>
 8005c9e:	a38c      	add	r3, pc, #560	; (adr r3, 8005ed0 <keypad_sm+0x2008>)
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	f7fa fa78 	bl	8000198 <__aeabi_dsub>
 8005ca8:	f7fa ff06 	bl	8000ab8 <__aeabi_d2f>
 8005cac:	4604      	mov	r4, r0
 8005cae:	f7fe bfee 	b.w	8004c8e <keypad_sm+0xdc6>
					encpos++;
 8005cb2:	3201      	adds	r2, #1
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	701a      	strb	r2, [r3, #0]
					encpos++;
 8005cb8:	781a      	ldrb	r2, [r3, #0]
 8005cba:	3201      	adds	r2, #1
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]
}
 8005cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if(encpos == 1){
 8005cc2:	4b87      	ldr	r3, [pc, #540]	; (8005ee0 <keypad_sm+0x2018>)
 8005cc4:	781a      	ldrb	r2, [r3, #0]
 8005cc6:	2a01      	cmp	r2, #1
					encpos++;
 8005cc8:	781a      	ldrb	r2, [r3, #0]
				if(encpos == 1){
 8005cca:	f000 8289 	beq.w	80061e0 <keypad_sm+0x2318>
				else if(encpos < 4){
 8005cce:	2a03      	cmp	r2, #3
					encpos = 0;
 8005cd0:	bf8f      	iteee	hi
 8005cd2:	2200      	movhi	r2, #0
					encpos++;
 8005cd4:	781a      	ldrbls	r2, [r3, #0]
 8005cd6:	3201      	addls	r2, #1
 8005cd8:	b2d2      	uxtbls	r2, r2
					encpos = 0;
 8005cda:	701a      	strb	r2, [r3, #0]
}
 8005cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if(encpos == 0){
 8005cde:	4b80      	ldr	r3, [pc, #512]	; (8005ee0 <keypad_sm+0x2018>)
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	2a00      	cmp	r2, #0
 8005ce4:	f040 813e 	bne.w	8005f64 <keypad_sm+0x209c>
					encpos++;
 8005ce8:	781a      	ldrb	r2, [r3, #0]
 8005cea:	3201      	adds	r2, #1
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
					encpos++;
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	3201      	adds	r2, #1
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]
}
 8005cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if(encpos == 0){
 8005cfa:	4b79      	ldr	r3, [pc, #484]	; (8005ee0 <keypad_sm+0x2018>)
 8005cfc:	781a      	ldrb	r2, [r3, #0]
 8005cfe:	2a00      	cmp	r2, #0
 8005d00:	f040 819b 	bne.w	800603a <keypad_sm+0x2172>
					encpos++;
 8005d04:	781a      	ldrb	r2, [r3, #0]
 8005d06:	3201      	adds	r2, #1
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
					encpos++;
 8005d0c:	781a      	ldrb	r2, [r3, #0]
 8005d0e:	3201      	adds	r2, #1
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	701a      	strb	r2, [r3, #0]
}
 8005d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				float temp = translate_keypad();
 8005d16:	f7fd fe17 	bl	8003948 <translate_keypad>
				if(encpos == 0){
 8005d1a:	4b71      	ldr	r3, [pc, #452]	; (8005ee0 <keypad_sm+0x2018>)
				float temp = translate_keypad();
 8005d1c:	4604      	mov	r4, r0
				if(encpos == 0){
 8005d1e:	781a      	ldrb	r2, [r3, #0]
 8005d20:	2a00      	cmp	r2, #0
 8005d22:	f040 81f8 	bne.w	8006116 <keypad_sm+0x224e>
					temp = temp - 1;
 8005d26:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d2a:	f7fa ff19 	bl	8000b60 <__aeabi_fsub>
 8005d2e:	4604      	mov	r4, r0
 8005d30:	f7ff b924 	b.w	8004f7c <keypad_sm+0x10b4>
					temp = temp - 10;
 8005d34:	496b      	ldr	r1, [pc, #428]	; (8005ee4 <keypad_sm+0x201c>)
 8005d36:	f7fa ff13 	bl	8000b60 <__aeabi_fsub>
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	f7fe bfa7 	b.w	8004c8e <keypad_sm+0xdc6>
				fill_keypad(1, amp_set_main);
 8005d40:	4b69      	ldr	r3, [pc, #420]	; (8005ee8 <keypad_sm+0x2020>)
 8005d42:	2001      	movs	r0, #1
 8005d44:	6819      	ldr	r1, [r3, #0]
 8005d46:	f7fd ffa3 	bl	8003c90 <fill_keypad>
				encmode = 1;
 8005d4a:	2101      	movs	r1, #1
				encpos = 0;
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	4b64      	ldr	r3, [pc, #400]	; (8005ee0 <keypad_sm+0x2018>)
				encmode = 1;
 8005d50:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8005d52:	701a      	strb	r2, [r3, #0]
}
 8005d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(1, amp_set_main);
 8005d56:	4b64      	ldr	r3, [pc, #400]	; (8005ee8 <keypad_sm+0x2020>)
 8005d58:	2001      	movs	r0, #1
 8005d5a:	6819      	ldr	r1, [r3, #0]
 8005d5c:	f7fd ff98 	bl	8003c90 <fill_keypad>
				encmode = 1;
 8005d60:	2101      	movs	r1, #1
				encpos = 0;
 8005d62:	2200      	movs	r2, #0
 8005d64:	4b5e      	ldr	r3, [pc, #376]	; (8005ee0 <keypad_sm+0x2018>)
				encmode = 1;
 8005d66:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8005d68:	701a      	strb	r2, [r3, #0]
}
 8005d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005d6c:	f7fd fdec 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d70:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005d72:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d74:	f7fb f9b0 	bl	80010d8 <__aeabi_fcmpge>
 8005d78:	b190      	cbz	r0, 8005da0 <keypad_sm+0x1ed8>
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f7fa fb6c 	bl	8000458 <__aeabi_f2d>
 8005d80:	a355      	add	r3, pc, #340	; (adr r3, 8005ed8 <keypad_sm+0x2010>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f7fa fe3b 	bl	8000a00 <__aeabi_dcmple>
 8005d8a:	b148      	cbz	r0, 8005da0 <keypad_sm+0x1ed8>
					amp_set_main_old = amp_set_main;
 8005d8c:	4c56      	ldr	r4, [pc, #344]	; (8005ee8 <keypad_sm+0x2020>)
 8005d8e:	4b57      	ldr	r3, [pc, #348]	; (8005eec <keypad_sm+0x2024>)
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8005d94:	f7fd fdd8 	bl	8003948 <translate_keypad>
 8005d98:	6020      	str	r0, [r4, #0]
					update_ADC_watchdog(amp_set_main);
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	f7fb fd42 	bl	8001824 <update_ADC_watchdog>
				kpenum = WAIT;
 8005da0:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005da2:	257a      	movs	r5, #122	; 0x7a
 8005da4:	4b52      	ldr	r3, [pc, #328]	; (8005ef0 <keypad_sm+0x2028>)
			if(keypadarr[4] == '.'){
 8005da6:	4a53      	ldr	r2, [pc, #332]	; (8005ef4 <keypad_sm+0x202c>)
				keypaddecimal = 0;
 8005da8:	4c53      	ldr	r4, [pc, #332]	; (8005ef8 <keypad_sm+0x2030>)
				kpenum = WAIT;
 8005daa:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005dac:	7819      	ldrb	r1, [r3, #0]
 8005dae:	b249      	sxtb	r1, r1
 8005db0:	2903      	cmp	r1, #3
 8005db2:	f73e a89f 	bgt.w	8003ef4 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005db6:	7819      	ldrb	r1, [r3, #0]
 8005db8:	b249      	sxtb	r1, r1
 8005dba:	2903      	cmp	r1, #3
 8005dbc:	dcf6      	bgt.n	8005dac <keypad_sm+0x1ee4>
			if(keypadarr[4] == '.'){
 8005dbe:	7911      	ldrb	r1, [r2, #4]
 8005dc0:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005dc2:	bf08      	it	eq
 8005dc4:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005dc6:	78d1      	ldrb	r1, [r2, #3]
 8005dc8:	b2c9      	uxtb	r1, r1
 8005dca:	7111      	strb	r1, [r2, #4]
 8005dcc:	7891      	ldrb	r1, [r2, #2]
 8005dce:	b2c9      	uxtb	r1, r1
 8005dd0:	70d1      	strb	r1, [r2, #3]
 8005dd2:	7851      	ldrb	r1, [r2, #1]
 8005dd4:	b2c9      	uxtb	r1, r1
 8005dd6:	7091      	strb	r1, [r2, #2]
 8005dd8:	7811      	ldrb	r1, [r2, #0]
 8005dda:	b2c9      	uxtb	r1, r1
 8005ddc:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005dde:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005de0:	7819      	ldrb	r1, [r3, #0]
 8005de2:	3101      	adds	r1, #1
 8005de4:	b249      	sxtb	r1, r1
 8005de6:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005de8:	7819      	ldrb	r1, [r3, #0]
 8005dea:	b249      	sxtb	r1, r1
 8005dec:	2903      	cmp	r1, #3
 8005dee:	dde2      	ble.n	8005db6 <keypad_sm+0x1eee>
}
 8005df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005df2:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005df4:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005df8:	4b3d      	ldr	r3, [pc, #244]	; (8005ef0 <keypad_sm+0x2028>)
			if(keypadarr[4] == '.'){
 8005dfa:	4a3e      	ldr	r2, [pc, #248]	; (8005ef4 <keypad_sm+0x202c>)
				keypaddecimal = 0;
 8005dfc:	4d3e      	ldr	r5, [pc, #248]	; (8005ef8 <keypad_sm+0x2030>)
				kpenum = WAIT;
 8005dfe:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005e00:	7819      	ldrb	r1, [r3, #0]
 8005e02:	b249      	sxtb	r1, r1
 8005e04:	2903      	cmp	r1, #3
 8005e06:	dc1d      	bgt.n	8005e44 <keypad_sm+0x1f7c>
		if(keypaditerator < keypadlength-1){
 8005e08:	7819      	ldrb	r1, [r3, #0]
 8005e0a:	b249      	sxtb	r1, r1
 8005e0c:	2903      	cmp	r1, #3
 8005e0e:	dcf7      	bgt.n	8005e00 <keypad_sm+0x1f38>
			if(keypadarr[4] == '.'){
 8005e10:	7911      	ldrb	r1, [r2, #4]
 8005e12:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005e14:	bf08      	it	eq
 8005e16:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005e18:	78d1      	ldrb	r1, [r2, #3]
 8005e1a:	b2c9      	uxtb	r1, r1
 8005e1c:	7111      	strb	r1, [r2, #4]
 8005e1e:	7891      	ldrb	r1, [r2, #2]
 8005e20:	b2c9      	uxtb	r1, r1
 8005e22:	70d1      	strb	r1, [r2, #3]
 8005e24:	7851      	ldrb	r1, [r2, #1]
 8005e26:	b2c9      	uxtb	r1, r1
 8005e28:	7091      	strb	r1, [r2, #2]
 8005e2a:	7811      	ldrb	r1, [r2, #0]
 8005e2c:	b2c9      	uxtb	r1, r1
 8005e2e:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005e30:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8005e34:	7819      	ldrb	r1, [r3, #0]
 8005e36:	3101      	adds	r1, #1
 8005e38:	b249      	sxtb	r1, r1
 8005e3a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005e3c:	7819      	ldrb	r1, [r3, #0]
 8005e3e:	b249      	sxtb	r1, r1
 8005e40:	2903      	cmp	r1, #3
 8005e42:	dde1      	ble.n	8005e08 <keypad_sm+0x1f40>
				encmode = 0;
 8005e44:	2300      	movs	r3, #0
				encpos = 0;
 8005e46:	4a26      	ldr	r2, [pc, #152]	; (8005ee0 <keypad_sm+0x2018>)
				encmode = 0;
 8005e48:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005e4a:	7013      	strb	r3, [r2, #0]
}
 8005e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005e4e:	f7fd fd7b 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005e52:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005e54:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005e56:	f7fb f93f 	bl	80010d8 <__aeabi_fcmpge>
 8005e5a:	b158      	cbz	r0, 8005e74 <keypad_sm+0x1fac>
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	4927      	ldr	r1, [pc, #156]	; (8005efc <keypad_sm+0x2034>)
 8005e60:	f7fb f930 	bl	80010c4 <__aeabi_fcmple>
 8005e64:	b130      	cbz	r0, 8005e74 <keypad_sm+0x1fac>
					volt_set_main_old = volt_set_main;
 8005e66:	4d26      	ldr	r5, [pc, #152]	; (8005f00 <keypad_sm+0x2038>)
 8005e68:	4b26      	ldr	r3, [pc, #152]	; (8005f04 <keypad_sm+0x203c>)
 8005e6a:	682a      	ldr	r2, [r5, #0]
 8005e6c:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005e6e:	f7fd fd6b 	bl	8003948 <translate_keypad>
 8005e72:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8005e74:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005e76:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005e7a:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <keypad_sm+0x2028>)
			if(keypadarr[4] == '.'){
 8005e7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <keypad_sm+0x202c>)
				keypaddecimal = 0;
 8005e7e:	4d1e      	ldr	r5, [pc, #120]	; (8005ef8 <keypad_sm+0x2030>)
				kpenum = WAIT;
 8005e80:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005e82:	7819      	ldrb	r1, [r3, #0]
 8005e84:	b249      	sxtb	r1, r1
 8005e86:	2903      	cmp	r1, #3
 8005e88:	dc1d      	bgt.n	8005ec6 <keypad_sm+0x1ffe>
		if(keypaditerator < keypadlength-1){
 8005e8a:	7819      	ldrb	r1, [r3, #0]
 8005e8c:	b249      	sxtb	r1, r1
 8005e8e:	2903      	cmp	r1, #3
 8005e90:	dcf7      	bgt.n	8005e82 <keypad_sm+0x1fba>
			if(keypadarr[4] == '.'){
 8005e92:	7911      	ldrb	r1, [r2, #4]
 8005e94:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005e96:	bf08      	it	eq
 8005e98:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005e9a:	78d1      	ldrb	r1, [r2, #3]
 8005e9c:	b2c9      	uxtb	r1, r1
 8005e9e:	7111      	strb	r1, [r2, #4]
 8005ea0:	7891      	ldrb	r1, [r2, #2]
 8005ea2:	b2c9      	uxtb	r1, r1
 8005ea4:	70d1      	strb	r1, [r2, #3]
 8005ea6:	7851      	ldrb	r1, [r2, #1]
 8005ea8:	b2c9      	uxtb	r1, r1
 8005eaa:	7091      	strb	r1, [r2, #2]
 8005eac:	7811      	ldrb	r1, [r2, #0]
 8005eae:	b2c9      	uxtb	r1, r1
 8005eb0:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005eb2:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8005eb6:	7819      	ldrb	r1, [r3, #0]
 8005eb8:	3101      	adds	r1, #1
 8005eba:	b249      	sxtb	r1, r1
 8005ebc:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005ebe:	7819      	ldrb	r1, [r3, #0]
 8005ec0:	b249      	sxtb	r1, r1
 8005ec2:	2903      	cmp	r1, #3
 8005ec4:	dde1      	ble.n	8005e8a <keypad_sm+0x1fc2>
				encmode = 0;
 8005ec6:	2300      	movs	r3, #0
				encpos = 0;
 8005ec8:	4a05      	ldr	r2, [pc, #20]	; (8005ee0 <keypad_sm+0x2018>)
				encmode = 0;
 8005eca:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005ecc:	7013      	strb	r3, [r2, #0]
}
 8005ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed0:	47ae147b 	.word	0x47ae147b
 8005ed4:	3f847ae1 	.word	0x3f847ae1
 8005ed8:	50b0f27c 	.word	0x50b0f27c
 8005edc:	3fe99a6b 	.word	0x3fe99a6b
 8005ee0:	200003ad 	.word	0x200003ad
 8005ee4:	41200000 	.word	0x41200000
 8005ee8:	20000398 	.word	0x20000398
 8005eec:	2000039c 	.word	0x2000039c
 8005ef0:	20000005 	.word	0x20000005
 8005ef4:	20000000 	.word	0x20000000
 8005ef8:	200006c4 	.word	0x200006c4
 8005efc:	41400000 	.word	0x41400000
 8005f00:	20000828 	.word	0x20000828
 8005f04:	2000082c 	.word	0x2000082c
				kpenum = WAIT;
 8005f08:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005f0a:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005f0e:	4bac      	ldr	r3, [pc, #688]	; (80061c0 <keypad_sm+0x22f8>)
			if(keypadarr[4] == '.'){
 8005f10:	4aac      	ldr	r2, [pc, #688]	; (80061c4 <keypad_sm+0x22fc>)
				keypaddecimal = 0;
 8005f12:	4dad      	ldr	r5, [pc, #692]	; (80061c8 <keypad_sm+0x2300>)
				kpenum = WAIT;
 8005f14:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005f16:	7819      	ldrb	r1, [r3, #0]
 8005f18:	b249      	sxtb	r1, r1
 8005f1a:	2903      	cmp	r1, #3
 8005f1c:	dc1d      	bgt.n	8005f5a <keypad_sm+0x2092>
		if(keypaditerator < keypadlength-1){
 8005f1e:	7819      	ldrb	r1, [r3, #0]
 8005f20:	b249      	sxtb	r1, r1
 8005f22:	2903      	cmp	r1, #3
 8005f24:	dcf7      	bgt.n	8005f16 <keypad_sm+0x204e>
			if(keypadarr[4] == '.'){
 8005f26:	7911      	ldrb	r1, [r2, #4]
 8005f28:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005f2a:	bf08      	it	eq
 8005f2c:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005f2e:	78d1      	ldrb	r1, [r2, #3]
 8005f30:	b2c9      	uxtb	r1, r1
 8005f32:	7111      	strb	r1, [r2, #4]
 8005f34:	7891      	ldrb	r1, [r2, #2]
 8005f36:	b2c9      	uxtb	r1, r1
 8005f38:	70d1      	strb	r1, [r2, #3]
 8005f3a:	7851      	ldrb	r1, [r2, #1]
 8005f3c:	b2c9      	uxtb	r1, r1
 8005f3e:	7091      	strb	r1, [r2, #2]
 8005f40:	7811      	ldrb	r1, [r2, #0]
 8005f42:	b2c9      	uxtb	r1, r1
 8005f44:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005f46:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8005f4a:	7819      	ldrb	r1, [r3, #0]
 8005f4c:	3101      	adds	r1, #1
 8005f4e:	b249      	sxtb	r1, r1
 8005f50:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005f52:	7819      	ldrb	r1, [r3, #0]
 8005f54:	b249      	sxtb	r1, r1
 8005f56:	2903      	cmp	r1, #3
 8005f58:	dde1      	ble.n	8005f1e <keypad_sm+0x2056>
				encmode = 0;
 8005f5a:	2300      	movs	r3, #0
				encpos = 0;
 8005f5c:	4a9b      	ldr	r2, [pc, #620]	; (80061cc <keypad_sm+0x2304>)
				encmode = 0;
 8005f5e:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005f60:	7013      	strb	r3, [r2, #0]
}
 8005f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				else if(encpos < 4){
 8005f64:	781a      	ldrb	r2, [r3, #0]
 8005f66:	2a03      	cmp	r2, #3
					encpos = 0;
 8005f68:	bf8f      	iteee	hi
 8005f6a:	2200      	movhi	r2, #0
					encpos++;
 8005f6c:	781a      	ldrbls	r2, [r3, #0]
 8005f6e:	3201      	addls	r2, #1
 8005f70:	b2d2      	uxtbls	r2, r2
					encpos = 0;
 8005f72:	701a      	strb	r2, [r3, #0]
}
 8005f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005f76:	f7fd fce7 	bl	8003948 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005f7a:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005f7c:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005f7e:	f7fb f8ab 	bl	80010d8 <__aeabi_fcmpge>
 8005f82:	b160      	cbz	r0, 8005f9e <keypad_sm+0x20d6>
 8005f84:	4628      	mov	r0, r5
 8005f86:	4992      	ldr	r1, [pc, #584]	; (80061d0 <keypad_sm+0x2308>)
 8005f88:	f7fb f89c 	bl	80010c4 <__aeabi_fcmple>
 8005f8c:	b138      	cbz	r0, 8005f9e <keypad_sm+0x20d6>
					amp_set_main_old = amp_set_main;
 8005f8e:	4a91      	ldr	r2, [pc, #580]	; (80061d4 <keypad_sm+0x230c>)
 8005f90:	4b91      	ldr	r3, [pc, #580]	; (80061d8 <keypad_sm+0x2310>)
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	601a      	str	r2, [r3, #0]
					amp_set_aux = translate_keypad();
 8005f96:	f7fd fcd7 	bl	8003948 <translate_keypad>
 8005f9a:	4a90      	ldr	r2, [pc, #576]	; (80061dc <keypad_sm+0x2314>)
 8005f9c:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005f9e:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005fa0:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005fa4:	4b86      	ldr	r3, [pc, #536]	; (80061c0 <keypad_sm+0x22f8>)
			if(keypadarr[4] == '.'){
 8005fa6:	4a87      	ldr	r2, [pc, #540]	; (80061c4 <keypad_sm+0x22fc>)
				keypaddecimal = 0;
 8005fa8:	4d87      	ldr	r5, [pc, #540]	; (80061c8 <keypad_sm+0x2300>)
				kpenum = WAIT;
 8005faa:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005fac:	7819      	ldrb	r1, [r3, #0]
 8005fae:	b249      	sxtb	r1, r1
 8005fb0:	2903      	cmp	r1, #3
 8005fb2:	dc1a      	bgt.n	8005fea <keypad_sm+0x2122>
		if(keypaditerator < keypadlength-1){
 8005fb4:	7819      	ldrb	r1, [r3, #0]
 8005fb6:	b249      	sxtb	r1, r1
 8005fb8:	2903      	cmp	r1, #3
 8005fba:	dcf7      	bgt.n	8005fac <keypad_sm+0x20e4>
			if(keypadarr[4] == '.'){
 8005fbc:	7911      	ldrb	r1, [r2, #4]
 8005fbe:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005fc0:	bf08      	it	eq
 8005fc2:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005fc4:	78d1      	ldrb	r1, [r2, #3]
 8005fc6:	b2c9      	uxtb	r1, r1
 8005fc8:	7111      	strb	r1, [r2, #4]
 8005fca:	7891      	ldrb	r1, [r2, #2]
 8005fcc:	b2c9      	uxtb	r1, r1
 8005fce:	70d1      	strb	r1, [r2, #3]
 8005fd0:	7851      	ldrb	r1, [r2, #1]
 8005fd2:	b2c9      	uxtb	r1, r1
 8005fd4:	7091      	strb	r1, [r2, #2]
 8005fd6:	7811      	ldrb	r1, [r2, #0]
 8005fd8:	b2c9      	uxtb	r1, r1
 8005fda:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005fdc:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8005fe0:	7819      	ldrb	r1, [r3, #0]
 8005fe2:	3101      	adds	r1, #1
 8005fe4:	b249      	sxtb	r1, r1
 8005fe6:	7019      	strb	r1, [r3, #0]
 8005fe8:	e7e0      	b.n	8005fac <keypad_sm+0x20e4>
				encmode = 0;
 8005fea:	2300      	movs	r3, #0
				encpos = 0;
 8005fec:	4a77      	ldr	r2, [pc, #476]	; (80061cc <keypad_sm+0x2304>)
				encmode = 0;
 8005fee:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005ff0:	7013      	strb	r3, [r2, #0]
}
 8005ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				float temp = translate_keypad();
 8005ff4:	f7fd fca8 	bl	8003948 <translate_keypad>
				if(encpos == 0){
 8005ff8:	4b74      	ldr	r3, [pc, #464]	; (80061cc <keypad_sm+0x2304>)
				float temp = translate_keypad();
 8005ffa:	4604      	mov	r4, r0
				if(encpos == 0){
 8005ffc:	781a      	ldrb	r2, [r3, #0]
 8005ffe:	bb2a      	cbnz	r2, 800604c <keypad_sm+0x2184>
					temp = temp - 1;
 8006000:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006004:	f7fa fdac 	bl	8000b60 <__aeabi_fsub>
 8006008:	4604      	mov	r4, r0
 800600a:	f7ff ba74 	b.w	80054f6 <keypad_sm+0x162e>
				else if(encpos == 2){
 800600e:	781a      	ldrb	r2, [r3, #0]
 8006010:	2a02      	cmp	r2, #2
 8006012:	d03d      	beq.n	8006090 <keypad_sm+0x21c8>
				else if(encpos == 3){
 8006014:	781a      	ldrb	r2, [r3, #0]
 8006016:	2a03      	cmp	r2, #3
 8006018:	d02e      	beq.n	8006078 <keypad_sm+0x21b0>
				else if(encpos == 4){
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b04      	cmp	r3, #4
 800601e:	f47e afad 	bne.w	8004f7c <keypad_sm+0x10b4>
					temp = temp + 0.001;
 8006022:	f7fa fa19 	bl	8000458 <__aeabi_f2d>
 8006026:	a360      	add	r3, pc, #384	; (adr r3, 80061a8 <keypad_sm+0x22e0>)
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f7fa f8b6 	bl	800019c <__adddf3>
 8006030:	f7fa fd42 	bl	8000ab8 <__aeabi_d2f>
 8006034:	4604      	mov	r4, r0
 8006036:	f7fe bfa1 	b.w	8004f7c <keypad_sm+0x10b4>
				else if(encpos < 4){
 800603a:	781a      	ldrb	r2, [r3, #0]
 800603c:	2a03      	cmp	r2, #3
					encpos = 0;
 800603e:	bf8f      	iteee	hi
 8006040:	2200      	movhi	r2, #0
					encpos++;
 8006042:	781a      	ldrbls	r2, [r3, #0]
 8006044:	3201      	addls	r2, #1
 8006046:	b2d2      	uxtbls	r2, r2
					encpos = 0;
 8006048:	701a      	strb	r2, [r3, #0]
}
 800604a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				else if(encpos == 2){
 800604c:	781a      	ldrb	r2, [r3, #0]
 800604e:	2a02      	cmp	r2, #2
 8006050:	d036      	beq.n	80060c0 <keypad_sm+0x21f8>
				else if(encpos == 3){
 8006052:	781a      	ldrb	r2, [r3, #0]
 8006054:	2a03      	cmp	r2, #3
 8006056:	d027      	beq.n	80060a8 <keypad_sm+0x21e0>
				else if(encpos == 4){
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b04      	cmp	r3, #4
 800605c:	f47f aa4b 	bne.w	80054f6 <keypad_sm+0x162e>
					temp = temp - 0.001;
 8006060:	f7fa f9fa 	bl	8000458 <__aeabi_f2d>
 8006064:	a350      	add	r3, pc, #320	; (adr r3, 80061a8 <keypad_sm+0x22e0>)
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f7fa f895 	bl	8000198 <__aeabi_dsub>
 800606e:	f7fa fd23 	bl	8000ab8 <__aeabi_d2f>
 8006072:	4604      	mov	r4, r0
 8006074:	f7ff ba3f 	b.w	80054f6 <keypad_sm+0x162e>
					temp = temp + 0.01;
 8006078:	f7fa f9ee 	bl	8000458 <__aeabi_f2d>
 800607c:	a34c      	add	r3, pc, #304	; (adr r3, 80061b0 <keypad_sm+0x22e8>)
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	f7fa f88b 	bl	800019c <__adddf3>
 8006086:	f7fa fd17 	bl	8000ab8 <__aeabi_d2f>
 800608a:	4604      	mov	r4, r0
 800608c:	f7fe bf76 	b.w	8004f7c <keypad_sm+0x10b4>
					temp = temp + 0.1;
 8006090:	f7fa f9e2 	bl	8000458 <__aeabi_f2d>
 8006094:	a348      	add	r3, pc, #288	; (adr r3, 80061b8 <keypad_sm+0x22f0>)
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	f7fa f87f 	bl	800019c <__adddf3>
 800609e:	f7fa fd0b 	bl	8000ab8 <__aeabi_d2f>
 80060a2:	4604      	mov	r4, r0
 80060a4:	f7fe bf6a 	b.w	8004f7c <keypad_sm+0x10b4>
					temp = temp - 0.01;
 80060a8:	f7fa f9d6 	bl	8000458 <__aeabi_f2d>
 80060ac:	a340      	add	r3, pc, #256	; (adr r3, 80061b0 <keypad_sm+0x22e8>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa f871 	bl	8000198 <__aeabi_dsub>
 80060b6:	f7fa fcff 	bl	8000ab8 <__aeabi_d2f>
 80060ba:	4604      	mov	r4, r0
 80060bc:	f7ff ba1b 	b.w	80054f6 <keypad_sm+0x162e>
					temp = temp - 0.1;
 80060c0:	f7fa f9ca 	bl	8000458 <__aeabi_f2d>
 80060c4:	a33c      	add	r3, pc, #240	; (adr r3, 80061b8 <keypad_sm+0x22f0>)
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f7fa f865 	bl	8000198 <__aeabi_dsub>
 80060ce:	f7fa fcf3 	bl	8000ab8 <__aeabi_d2f>
 80060d2:	4604      	mov	r4, r0
 80060d4:	f7ff ba0f 	b.w	80054f6 <keypad_sm+0x162e>
					temp = temp + 0.1;
 80060d8:	f7fa f9be 	bl	8000458 <__aeabi_f2d>
 80060dc:	a336      	add	r3, pc, #216	; (adr r3, 80061b8 <keypad_sm+0x22f0>)
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f7fa f85b 	bl	800019c <__adddf3>
 80060e6:	f7fa fce7 	bl	8000ab8 <__aeabi_d2f>
 80060ea:	4604      	mov	r4, r0
 80060ec:	f7fe bdcf 	b.w	8004c8e <keypad_sm+0xdc6>
					temp = temp - 0.1;
 80060f0:	f7fa f9b2 	bl	8000458 <__aeabi_f2d>
 80060f4:	a330      	add	r3, pc, #192	; (adr r3, 80061b8 <keypad_sm+0x22f0>)
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	f7fa f84d 	bl	8000198 <__aeabi_dsub>
 80060fe:	f7fa fcdb 	bl	8000ab8 <__aeabi_d2f>
 8006102:	4604      	mov	r4, r0
 8006104:	f7fe bdc3 	b.w	8004c8e <keypad_sm+0xdc6>
					temp = temp - 1;
 8006108:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800610c:	f7fa fd28 	bl	8000b60 <__aeabi_fsub>
 8006110:	4604      	mov	r4, r0
 8006112:	f7fe bdbc 	b.w	8004c8e <keypad_sm+0xdc6>
				else if(encpos == 2){
 8006116:	781a      	ldrb	r2, [r3, #0]
 8006118:	2a02      	cmp	r2, #2
 800611a:	f000 8081 	beq.w	8006220 <keypad_sm+0x2358>
				else if(encpos == 3){
 800611e:	781a      	ldrb	r2, [r3, #0]
 8006120:	2a03      	cmp	r2, #3
 8006122:	d071      	beq.n	8006208 <keypad_sm+0x2340>
				else if(encpos == 4){
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b04      	cmp	r3, #4
 8006128:	f47e af28 	bne.w	8004f7c <keypad_sm+0x10b4>
					temp = temp - 0.001;
 800612c:	f7fa f994 	bl	8000458 <__aeabi_f2d>
 8006130:	a31d      	add	r3, pc, #116	; (adr r3, 80061a8 <keypad_sm+0x22e0>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f7fa f82f 	bl	8000198 <__aeabi_dsub>
 800613a:	f7fa fcbd 	bl	8000ab8 <__aeabi_d2f>
 800613e:	4604      	mov	r4, r0
 8006140:	f7fe bf1c 	b.w	8004f7c <keypad_sm+0x10b4>
					fill_keypad(0,temp);
 8006144:	4621      	mov	r1, r4
}
 8006146:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					fill_keypad(0,temp);
 800614a:	2000      	movs	r0, #0
 800614c:	f7fd bda0 	b.w	8003c90 <fill_keypad>
				else if(encpos == 2){
 8006150:	781a      	ldrb	r2, [r3, #0]
 8006152:	2a02      	cmp	r2, #2
 8006154:	f000 8089 	beq.w	800626a <keypad_sm+0x23a2>
				else if(encpos == 3){
 8006158:	781a      	ldrb	r2, [r3, #0]
 800615a:	2a03      	cmp	r2, #3
 800615c:	d079      	beq.n	8006252 <keypad_sm+0x238a>
				else if(encpos == 4){
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b04      	cmp	r3, #4
 8006162:	f47f a9c8 	bne.w	80054f6 <keypad_sm+0x162e>
					temp = temp + 0.001;
 8006166:	f7fa f977 	bl	8000458 <__aeabi_f2d>
 800616a:	a30f      	add	r3, pc, #60	; (adr r3, 80061a8 <keypad_sm+0x22e0>)
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f7fa f814 	bl	800019c <__adddf3>
 8006174:	f7fa fca0 	bl	8000ab8 <__aeabi_d2f>
 8006178:	4604      	mov	r4, r0
 800617a:	f7ff b9bc 	b.w	80054f6 <keypad_sm+0x162e>
				float temp = translate_keypad();
 800617e:	f7fd fbe3 	bl	8003948 <translate_keypad>
				if(encpos == 0){
 8006182:	4b12      	ldr	r3, [pc, #72]	; (80061cc <keypad_sm+0x2304>)
				float temp = translate_keypad();
 8006184:	4604      	mov	r4, r0
				if(encpos == 0){
 8006186:	781a      	ldrb	r2, [r3, #0]
 8006188:	2a00      	cmp	r2, #0
 800618a:	f43f add3 	beq.w	8005d34 <keypad_sm+0x1e6c>
				else if(encpos == 1){
 800618e:	781a      	ldrb	r2, [r3, #0]
 8006190:	2a01      	cmp	r2, #1
 8006192:	d0b9      	beq.n	8006108 <keypad_sm+0x2240>
				else if(encpos == 3){
 8006194:	781a      	ldrb	r2, [r3, #0]
 8006196:	2a03      	cmp	r2, #3
 8006198:	d0aa      	beq.n	80060f0 <keypad_sm+0x2228>
				else if(encpos == 4){
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b04      	cmp	r3, #4
 800619e:	f47e ad76 	bne.w	8004c8e <keypad_sm+0xdc6>
 80061a2:	e57a      	b.n	8005c9a <keypad_sm+0x1dd2>
 80061a4:	f3af 8000 	nop.w
 80061a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80061ac:	3f50624d 	.word	0x3f50624d
 80061b0:	47ae147b 	.word	0x47ae147b
 80061b4:	3f847ae1 	.word	0x3f847ae1
 80061b8:	9999999a 	.word	0x9999999a
 80061bc:	3fb99999 	.word	0x3fb99999
 80061c0:	20000005 	.word	0x20000005
 80061c4:	20000000 	.word	0x20000000
 80061c8:	200006c4 	.word	0x200006c4
 80061cc:	200003ad 	.word	0x200003ad
 80061d0:	41400000 	.word	0x41400000
 80061d4:	20000398 	.word	0x20000398
 80061d8:	2000039c 	.word	0x2000039c
 80061dc:	20000394 	.word	0x20000394
					encpos++;
 80061e0:	3201      	adds	r2, #1
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
					encpos++;
 80061e6:	781a      	ldrb	r2, [r3, #0]
 80061e8:	3201      	adds	r2, #1
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]
}
 80061ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					fill_keypad(1,0);
 80061f0:	2001      	movs	r0, #1
}
 80061f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					fill_keypad(1,0);
 80061f6:	2100      	movs	r1, #0
 80061f8:	f7fd bd4a 	b.w	8003c90 <fill_keypad>
					fill_keypad(0,0);
 80061fc:	2000      	movs	r0, #0
}
 80061fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					fill_keypad(0,0);
 8006202:	2100      	movs	r1, #0
 8006204:	f7fd bd44 	b.w	8003c90 <fill_keypad>
					temp = temp - 0.01;
 8006208:	f7fa f926 	bl	8000458 <__aeabi_f2d>
 800620c:	a31e      	add	r3, pc, #120	; (adr r3, 8006288 <keypad_sm+0x23c0>)
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	f7f9 ffc1 	bl	8000198 <__aeabi_dsub>
 8006216:	f7fa fc4f 	bl	8000ab8 <__aeabi_d2f>
 800621a:	4604      	mov	r4, r0
 800621c:	f7fe beae 	b.w	8004f7c <keypad_sm+0x10b4>
					temp = temp - 0.1;
 8006220:	f7fa f91a 	bl	8000458 <__aeabi_f2d>
 8006224:	a31a      	add	r3, pc, #104	; (adr r3, 8006290 <keypad_sm+0x23c8>)
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f7f9 ffb5 	bl	8000198 <__aeabi_dsub>
 800622e:	f7fa fc43 	bl	8000ab8 <__aeabi_d2f>
 8006232:	4604      	mov	r4, r0
 8006234:	f7fe bea2 	b.w	8004f7c <keypad_sm+0x10b4>
					temp = temp + 1;
 8006238:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800623c:	f7fa fc92 	bl	8000b64 <__addsf3>
 8006240:	4604      	mov	r4, r0
 8006242:	f7fe bd24 	b.w	8004c8e <keypad_sm+0xdc6>
					temp = temp + 10;
 8006246:	4914      	ldr	r1, [pc, #80]	; (8006298 <keypad_sm+0x23d0>)
 8006248:	f7fa fc8c 	bl	8000b64 <__addsf3>
 800624c:	4604      	mov	r4, r0
 800624e:	f7fe bd1e 	b.w	8004c8e <keypad_sm+0xdc6>
					temp = temp + 0.01;
 8006252:	f7fa f901 	bl	8000458 <__aeabi_f2d>
 8006256:	a30c      	add	r3, pc, #48	; (adr r3, 8006288 <keypad_sm+0x23c0>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7f9 ff9e 	bl	800019c <__adddf3>
 8006260:	f7fa fc2a 	bl	8000ab8 <__aeabi_d2f>
 8006264:	4604      	mov	r4, r0
 8006266:	f7ff b946 	b.w	80054f6 <keypad_sm+0x162e>
					temp = temp + 0.1;
 800626a:	f7fa f8f5 	bl	8000458 <__aeabi_f2d>
 800626e:	a308      	add	r3, pc, #32	; (adr r3, 8006290 <keypad_sm+0x23c8>)
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f7f9 ff92 	bl	800019c <__adddf3>
 8006278:	f7fa fc1e 	bl	8000ab8 <__aeabi_d2f>
 800627c:	4604      	mov	r4, r0
 800627e:	f7ff b93a 	b.w	80054f6 <keypad_sm+0x162e>
 8006282:	bf00      	nop
 8006284:	f3af 8000 	nop.w
 8006288:	47ae147b 	.word	0x47ae147b
 800628c:	3f847ae1 	.word	0x3f847ae1
 8006290:	9999999a 	.word	0x9999999a
 8006294:	3fb99999 	.word	0x3fb99999
 8006298:	41200000 	.word	0x41200000

0800629c <row_input>:
void row_input(void){
 800629c:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800629e:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80062a0:	4e30      	ldr	r6, [pc, #192]	; (8006364 <row_input+0xc8>)
void row_input(void){
 80062a2:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80062a4:	4630      	mov	r0, r6
 80062a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062aa:	e9cd 4400 	strd	r4, r4, [sp]
 80062ae:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80062b2:	9404      	str	r4, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80062b4:	f001 fe96 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 80062b8:	4630      	mov	r0, r6
 80062ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062be:	f001 fe91 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80062c2:	4630      	mov	r0, r6
 80062c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80062c8:	4d27      	ldr	r5, [pc, #156]	; (8006368 <row_input+0xcc>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80062ca:	f001 fe8b 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 80062ce:	4630      	mov	r0, r6
 80062d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062d4:	f001 fe86 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 80062d8:	4630      	mov	r0, r6
 80062da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062de:	f001 fe81 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80062e2:	4628      	mov	r0, r5
 80062e4:	2140      	movs	r1, #64	; 0x40
 80062e6:	f001 fe7d 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 80062ea:	4628      	mov	r0, r5
 80062ec:	2180      	movs	r1, #128	; 0x80
 80062ee:	f001 fe79 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 80062f2:	4628      	mov	r0, r5
 80062f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062f8:	f001 fe74 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 80062fc:	4628      	mov	r0, r5
 80062fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006302:	f001 fe6f 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8006306:	4622      	mov	r2, r4
 8006308:	4628      	mov	r0, r5
 800630a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800630e:	f001 ff01 	bl	8008114 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8006312:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8006316:	2301      	movs	r3, #1
 8006318:	e9cd 2300 	strd	r2, r3, [sp]
 800631c:	2200      	movs	r2, #0
 800631e:	2300      	movs	r3, #0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8006320:	4669      	mov	r1, sp
 8006322:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8006324:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8006328:	f001 fd72 	bl	8007e10 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 800632c:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 8006330:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006334:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006338:	2301      	movs	r3, #1
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 800633a:	4669      	mov	r1, sp
 800633c:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800633e:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8006340:	f001 fd66 	bl	8007e10 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8006344:	4622      	mov	r2, r4
 8006346:	4628      	mov	r0, r5
 8006348:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800634c:	f001 fee2 	bl	8008114 <HAL_GPIO_WritePin>
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 12, 0);
 8006350:	4622      	mov	r2, r4
 8006352:	210c      	movs	r1, #12
 8006354:	2028      	movs	r0, #40	; 0x28
 8006356:	f001 faa9 	bl	80078ac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Row_1_EXTI_IRQn);
 800635a:	2028      	movs	r0, #40	; 0x28
 800635c:	f001 fae4 	bl	8007928 <HAL_NVIC_EnableIRQ>
}
 8006360:	b006      	add	sp, #24
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	40020400 	.word	0x40020400
 8006368:	40020800 	.word	0x40020800

0800636c <column_input>:
void column_input(void){
 800636c:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800636e:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8006370:	4d2d      	ldr	r5, [pc, #180]	; (8006428 <column_input+0xbc>)
void column_input(void){
 8006372:	b086      	sub	sp, #24
	HAL_NVIC_DisableIRQ(Row_1_EXTI_IRQn);
 8006374:	2028      	movs	r0, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006376:	e9cd 4400 	strd	r4, r4, [sp]
 800637a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800637e:	9404      	str	r4, [sp, #16]
	HAL_NVIC_DisableIRQ(Row_1_EXTI_IRQn);
 8006380:	f001 fae0 	bl	8007944 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8006384:	4628      	mov	r0, r5
 8006386:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800638a:	f001 fe2b 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 800638e:	4628      	mov	r0, r5
 8006390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006394:	f001 fe26 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8006398:	4628      	mov	r0, r5
 800639a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 800639e:	4e23      	ldr	r6, [pc, #140]	; (800642c <column_input+0xc0>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80063a0:	f001 fe20 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 80063a4:	4628      	mov	r0, r5
 80063a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063aa:	f001 fe1b 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 80063ae:	4628      	mov	r0, r5
 80063b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80063b4:	f001 fe16 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80063b8:	4630      	mov	r0, r6
 80063ba:	2140      	movs	r1, #64	; 0x40
 80063bc:	f001 fe12 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 80063c0:	4630      	mov	r0, r6
 80063c2:	2180      	movs	r1, #128	; 0x80
 80063c4:	f001 fe0e 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 80063c8:	4630      	mov	r0, r6
 80063ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063ce:	f001 fe09 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 80063d2:	4630      	mov	r0, r6
 80063d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063d8:	f001 fe04 	bl	8007fe4 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 80063dc:	4622      	mov	r2, r4
 80063de:	4628      	mov	r0, r5
 80063e0:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 80063e4:	f001 fe96 	bl	8008114 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 80063e8:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 80063ec:	2301      	movs	r3, #1
 80063ee:	e9cd 2300 	strd	r2, r3, [sp]
 80063f2:	2200      	movs	r2, #0
 80063f4:	2300      	movs	r3, #0
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80063f6:	4628      	mov	r0, r5
 80063f8:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 80063fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80063fe:	f001 fd07 	bl	8007e10 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006402:	2001      	movs	r0, #1
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8006404:	2300      	movs	r3, #0
 8006406:	f44f 7270 	mov.w	r2, #960	; 0x3c0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800640a:	4669      	mov	r1, sp
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800640c:	9002      	str	r0, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800640e:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8006410:	e9cd 2300 	strd	r2, r3, [sp]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8006414:	f001 fcfc 	bl	8007e10 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 8006418:	4622      	mov	r2, r4
 800641a:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 800641e:	4630      	mov	r0, r6
 8006420:	f001 fe78 	bl	8008114 <HAL_GPIO_WritePin>
}
 8006424:	b006      	add	sp, #24
 8006426:	bd70      	pop	{r4, r5, r6, pc}
 8006428:	40020400 	.word	0x40020400
 800642c:	40020800 	.word	0x40020800

08006430 <HAL_GPIO_EXTI_Callback>:
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 8006430:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4604      	mov	r4, r0
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 8006438:	d010      	beq.n	800645c <HAL_GPIO_EXTI_Callback+0x2c>
 800643a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800643e:	d00d      	beq.n	800645c <HAL_GPIO_EXTI_Callback+0x2c>
 8006440:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006444:	d00a      	beq.n	800645c <HAL_GPIO_EXTI_Callback+0x2c>
 8006446:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800644a:	d007      	beq.n	800645c <HAL_GPIO_EXTI_Callback+0x2c>
 800644c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8006450:	d004      	beq.n	800645c <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == Rot_SW_Pin){
 8006452:	2804      	cmp	r0, #4
 8006454:	d036      	beq.n	80064c4 <HAL_GPIO_EXTI_Callback+0x94>
	else if(GPIO_Pin == Rot_CLK_Pin){
 8006456:	2801      	cmp	r0, #1
 8006458:	d019      	beq.n	800648e <HAL_GPIO_EXTI_Callback+0x5e>
}
 800645a:	bd38      	pop	{r3, r4, r5, pc}
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, GPIO_Pin) == 0){
 800645c:	4621      	mov	r1, r4
 800645e:	4825      	ldr	r0, [pc, #148]	; (80064f4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8006460:	f001 fe52 	bl	8008108 <HAL_GPIO_ReadPin>
 8006464:	4603      	mov	r3, r0
 8006466:	b130      	cbz	r0, 8006476 <HAL_GPIO_EXTI_Callback+0x46>
			if(kpedge != 1){
 8006468:	4b23      	ldr	r3, [pc, #140]	; (80064f8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800646a:	781a      	ldrb	r2, [r3, #0]
 800646c:	2a01      	cmp	r2, #1
 800646e:	d0f4      	beq.n	800645a <HAL_GPIO_EXTI_Callback+0x2a>
				swedge = 1;
 8006470:	2201      	movs	r2, #1
 8006472:	701a      	strb	r2, [r3, #0]
}
 8006474:	bd38      	pop	{r3, r4, r5, pc}
			if(kpedge != 0){
 8006476:	4a20      	ldr	r2, [pc, #128]	; (80064f8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8006478:	7811      	ldrb	r1, [r2, #0]
 800647a:	2900      	cmp	r1, #0
 800647c:	d0ed      	beq.n	800645a <HAL_GPIO_EXTI_Callback+0x2a>
				rowpin = GPIO_Pin;
 800647e:	491f      	ldr	r1, [pc, #124]	; (80064fc <HAL_GPIO_EXTI_Callback+0xcc>)
				kpedge = 0;
 8006480:	7013      	strb	r3, [r2, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 8006482:	481f      	ldr	r0, [pc, #124]	; (8006500 <HAL_GPIO_EXTI_Callback+0xd0>)
				rowpin = GPIO_Pin;
 8006484:	600c      	str	r4, [r1, #0]
}
 8006486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_TIM_Base_Start_IT(&htim2);
 800648a:	f003 bc07 	b.w	8009c9c <HAL_TIM_Base_Start_IT>
		if (rotenum == NOTURN) {
 800648e:	4d1d      	ldr	r5, [pc, #116]	; (8006504 <HAL_GPIO_EXTI_Callback+0xd4>)
 8006490:	782b      	ldrb	r3, [r5, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e1      	bne.n	800645a <HAL_GPIO_EXTI_Callback+0x2a>
			HAL_NVIC_DisableIRQ(Rot_CLK_EXTI_IRQn);
 8006496:	2006      	movs	r0, #6
 8006498:	f001 fa54 	bl	8007944 <HAL_NVIC_DisableIRQ>
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 800649c:	4621      	mov	r1, r4
 800649e:	4815      	ldr	r0, [pc, #84]	; (80064f4 <HAL_GPIO_EXTI_Callback+0xc4>)
 80064a0:	f001 fe32 	bl	8008108 <HAL_GPIO_ReadPin>
 80064a4:	2102      	movs	r1, #2
 80064a6:	4604      	mov	r4, r0
 80064a8:	4812      	ldr	r0, [pc, #72]	; (80064f4 <HAL_GPIO_EXTI_Callback+0xc4>)
 80064aa:	f001 fe2d 	bl	8008108 <HAL_GPIO_ReadPin>
 80064ae:	4603      	mov	r3, r0
 80064b0:	429c      	cmp	r4, r3
 80064b2:	bf0c      	ite	eq
 80064b4:	2401      	moveq	r4, #1
 80064b6:	2402      	movne	r4, #2
			HAL_TIM_Base_Start_IT(&htim10);
 80064b8:	4813      	ldr	r0, [pc, #76]	; (8006508 <HAL_GPIO_EXTI_Callback+0xd8>)
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 80064ba:	702c      	strb	r4, [r5, #0]
}
 80064bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_TIM_Base_Start_IT(&htim10);
 80064c0:	f003 bbec 	b.w	8009c9c <HAL_TIM_Base_Start_IT>
		if(HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin) == 0){
 80064c4:	4601      	mov	r1, r0
 80064c6:	480b      	ldr	r0, [pc, #44]	; (80064f4 <HAL_GPIO_EXTI_Callback+0xc4>)
 80064c8:	f001 fe1e 	bl	8008108 <HAL_GPIO_ReadPin>
 80064cc:	4603      	mov	r3, r0
 80064ce:	b960      	cbnz	r0, 80064ea <HAL_GPIO_EXTI_Callback+0xba>
			if(swedge != 0){
 80064d0:	4a0e      	ldr	r2, [pc, #56]	; (800650c <HAL_GPIO_EXTI_Callback+0xdc>)
 80064d2:	7811      	ldrb	r1, [r2, #0]
 80064d4:	2900      	cmp	r1, #0
 80064d6:	d0c0      	beq.n	800645a <HAL_GPIO_EXTI_Callback+0x2a>
				HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 80064d8:	2008      	movs	r0, #8
				swedge = 0;
 80064da:	7013      	strb	r3, [r2, #0]
				HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 80064dc:	f001 fa32 	bl	8007944 <HAL_NVIC_DisableIRQ>
}
 80064e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_TIM_Base_Start_IT(&htim9);
 80064e4:	480a      	ldr	r0, [pc, #40]	; (8006510 <HAL_GPIO_EXTI_Callback+0xe0>)
 80064e6:	f003 bbd9 	b.w	8009c9c <HAL_TIM_Base_Start_IT>
			if(swedge != 1){
 80064ea:	4b08      	ldr	r3, [pc, #32]	; (800650c <HAL_GPIO_EXTI_Callback+0xdc>)
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	2a01      	cmp	r2, #1
 80064f0:	d1be      	bne.n	8006470 <HAL_GPIO_EXTI_Callback+0x40>
}
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
 80064f4:	40020400 	.word	0x40020400
 80064f8:	20000006 	.word	0x20000006
 80064fc:	20000008 	.word	0x20000008
 8006500:	200005c0 	.word	0x200005c0
 8006504:	200006d4 	.word	0x200006d4
 8006508:	20000540 	.word	0x20000540
 800650c:	2000000c 	.word	0x2000000c
 8006510:	20000640 	.word	0x20000640

08006514 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim2){
 8006514:	4b6d      	ldr	r3, [pc, #436]	; (80066cc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
{
 8006516:	b570      	push	{r4, r5, r6, lr}
	if(htim == &htim2){
 8006518:	4298      	cmp	r0, r3
 800651a:	d022      	beq.n	8006562 <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if(htim == &htim3){
 800651c:	4b6c      	ldr	r3, [pc, #432]	; (80066d0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800651e:	4604      	mov	r4, r0
 8006520:	4298      	cmp	r0, r3
 8006522:	d034      	beq.n	800658e <HAL_TIM_PeriodElapsedCallback+0x7a>
	else if(htim == &htim9){
 8006524:	4b6b      	ldr	r3, [pc, #428]	; (80066d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8006526:	4298      	cmp	r0, r3
 8006528:	d03a      	beq.n	80065a0 <HAL_TIM_PeriodElapsedCallback+0x8c>
	else if(htim == &htim10){
 800652a:	4b6b      	ldr	r3, [pc, #428]	; (80066d8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800652c:	4298      	cmp	r0, r3
 800652e:	d003      	beq.n	8006538 <HAL_TIM_PeriodElapsedCallback+0x24>
	else if(htim == &htim11){
 8006530:	4b6a      	ldr	r3, [pc, #424]	; (80066dc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8006532:	4298      	cmp	r0, r3
 8006534:	d043      	beq.n	80065be <HAL_TIM_PeriodElapsedCallback+0xaa>
}
 8006536:	bd70      	pop	{r4, r5, r6, pc}
		if(rotenum == CWTURN){
 8006538:	4c69      	ldr	r4, [pc, #420]	; (80066e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
		HAL_TIM_Base_Stop_IT(&htim10);
 800653a:	f003 fbdb 	bl	8009cf4 <HAL_TIM_Base_Stop_IT>
		if(rotenum == CWTURN){
 800653e:	7823      	ldrb	r3, [r4, #0]
 8006540:	2b01      	cmp	r3, #1
 8006542:	f000 8091 	beq.w	8006668 <HAL_TIM_PeriodElapsedCallback+0x154>
		else if(rotenum == CCWTURN){
 8006546:	2b02      	cmp	r3, #2
 8006548:	f000 809b 	beq.w	8006682 <HAL_TIM_PeriodElapsedCallback+0x16e>
		rotenum = NOTURN;
 800654c:	2200      	movs	r2, #0
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 13, 0);
 800654e:	2006      	movs	r0, #6
 8006550:	210d      	movs	r1, #13
		rotenum = NOTURN;
 8006552:	7022      	strb	r2, [r4, #0]
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 13, 0);
 8006554:	f001 f9aa 	bl	80078ac <HAL_NVIC_SetPriority>
}
 8006558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_NVIC_EnableIRQ(Rot_CLK_EXTI_IRQn);
 800655c:	2006      	movs	r0, #6
 800655e:	f001 b9e3 	b.w	8007928 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim2);
 8006562:	f003 fbc7 	bl	8009cf4 <HAL_TIM_Base_Stop_IT>
		for(int i = 0; i < 4; i++){
 8006566:	2400      	movs	r4, #0
		column_input();
 8006568:	f7ff ff00 	bl	800636c <column_input>
		for(int i = 0; i < 4; i++){
 800656c:	4e5d      	ldr	r6, [pc, #372]	; (80066e4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800656e:	4d5e      	ldr	r5, [pc, #376]	; (80066e8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
			if(HAL_GPIO_ReadPin(col_ports[i], col_pins[i]) == 0){
 8006570:	f835 1b02 	ldrh.w	r1, [r5], #2
 8006574:	f856 0b04 	ldr.w	r0, [r6], #4
 8006578:	f001 fdc6 	bl	8008108 <HAL_GPIO_ReadPin>
 800657c:	2800      	cmp	r0, #0
 800657e:	d052      	beq.n	8006626 <HAL_TIM_PeriodElapsedCallback+0x112>
		for(int i = 0; i < 4; i++){
 8006580:	3401      	adds	r4, #1
 8006582:	2c04      	cmp	r4, #4
 8006584:	d1f4      	bne.n	8006570 <HAL_TIM_PeriodElapsedCallback+0x5c>
}
 8006586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		row_input();
 800658a:	f7ff be87 	b.w	800629c <row_input>
		HAL_TIM_Base_Stop_IT(&htim3);
 800658e:	f003 fbb1 	bl	8009cf4 <HAL_TIM_Base_Stop_IT>
		lcd_psu_update();
 8006592:	f7fc fcd7 	bl	8002f44 <lcd_psu_update>
		HAL_TIM_Base_Start_IT(&htim3);
 8006596:	4620      	mov	r0, r4
}
 8006598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(&htim3);
 800659c:	f003 bb7e 	b.w	8009c9c <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim9);
 80065a0:	f003 fba8 	bl	8009cf4 <HAL_TIM_Base_Stop_IT>
		keypad_sm('s');//s for switch
 80065a4:	2073      	movs	r0, #115	; 0x73
 80065a6:	f7fd fc8f 	bl	8003ec8 <keypad_sm>
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 11, 0);
 80065aa:	2008      	movs	r0, #8
 80065ac:	2200      	movs	r2, #0
 80065ae:	210b      	movs	r1, #11
 80065b0:	f001 f97c 	bl	80078ac <HAL_NVIC_SetPriority>
}
 80065b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_NVIC_EnableIRQ(Rot_SW_EXTI_IRQn);
 80065b8:	2008      	movs	r0, #8
 80065ba:	f001 b9b5 	b.w	8007928 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim11);
 80065be:	f003 fb99 	bl	8009cf4 <HAL_TIM_Base_Stop_IT>
		if(chstat_main == 0){
 80065c2:	4b4a      	ldr	r3, [pc, #296]	; (80066ec <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80065c4:	781a      	ldrb	r2, [r3, #0]
 80065c6:	b1b2      	cbz	r2, 80065f6 <HAL_TIM_PeriodElapsedCallback+0xe2>
		else if(chstat_main == 1){
 80065c8:	7819      	ldrb	r1, [r3, #0]
 80065ca:	2901      	cmp	r1, #1
 80065cc:	b24a      	sxtb	r2, r1
 80065ce:	d04f      	beq.n	8006670 <HAL_TIM_PeriodElapsedCallback+0x15c>
		else if(chstat_main == 2){
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d059      	beq.n	800668a <HAL_TIM_PeriodElapsedCallback+0x176>
		if(chstat_aux_rx == 0){
 80065d6:	4b46      	ldr	r3, [pc, #280]	; (80066f0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80065d8:	7819      	ldrb	r1, [r3, #0]
 80065da:	b24a      	sxtb	r2, r1
 80065dc:	b1f1      	cbz	r1, 800661c <HAL_TIM_PeriodElapsedCallback+0x108>
		else if(chstat_aux_rx == 1){
 80065de:	7819      	ldrb	r1, [r3, #0]
 80065e0:	2901      	cmp	r1, #1
 80065e2:	b24a      	sxtb	r2, r1
 80065e4:	d01a      	beq.n	800661c <HAL_TIM_PeriodElapsedCallback+0x108>
		else if(chstat_aux_rx == 2){
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d05e      	beq.n	80066aa <HAL_TIM_PeriodElapsedCallback+0x196>
}
 80065ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(&htim11);
 80065f0:	483a      	ldr	r0, [pc, #232]	; (80066dc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80065f2:	f003 bb53 	b.w	8009c9c <HAL_TIM_Base_Start_IT>
			if(!timercounter){
 80065f6:	4c3f      	ldr	r4, [pc, #252]	; (80066f4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80065f8:	7823      	ldrb	r3, [r4, #0]
 80065fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d03a      	beq.n	8006678 <HAL_TIM_PeriodElapsedCallback+0x164>
			timercounter++;
 8006602:	7823      	ldrb	r3, [r4, #0]
			blink = 0;
 8006604:	2200      	movs	r2, #0
			timercounter++;
 8006606:	3301      	adds	r3, #1
 8006608:	b2db      	uxtb	r3, r3
 800660a:	7023      	strb	r3, [r4, #0]
			if(timercounter >= 7){
 800660c:	7823      	ldrb	r3, [r4, #0]
 800660e:	2b06      	cmp	r3, #6
				timercounter = 0;
 8006610:	bf84      	itt	hi
 8006612:	2300      	movhi	r3, #0
 8006614:	7023      	strbhi	r3, [r4, #0]
			blink = 0;
 8006616:	4b38      	ldr	r3, [pc, #224]	; (80066f8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	e7dc      	b.n	80065d6 <HAL_TIM_PeriodElapsedCallback+0xc2>
			HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_SET);
 800661c:	2110      	movs	r1, #16
 800661e:	4837      	ldr	r0, [pc, #220]	; (80066fc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8006620:	f001 fd78 	bl	8008114 <HAL_GPIO_WritePin>
 8006624:	e7e2      	b.n	80065ec <HAL_TIM_PeriodElapsedCallback+0xd8>
					if(rowpin == row_pins[j]){
 8006626:	4d36      	ldr	r5, [pc, #216]	; (8006700 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800662e:	d011      	beq.n	8006654 <HAL_TIM_PeriodElapsedCallback+0x140>
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006636:	d042      	beq.n	80066be <HAL_TIM_PeriodElapsedCallback+0x1aa>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	d042      	beq.n	80066c6 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006646:	d03c      	beq.n	80066c2 <HAL_TIM_PeriodElapsedCallback+0x1ae>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
				for(int j = 0; j < 5; j++){
 800664e:	bf08      	it	eq
 8006650:	2004      	moveq	r0, #4
					if(rowpin == row_pins[j]){
 8006652:	d198      	bne.n	8006586 <HAL_TIM_PeriodElapsedCallback+0x72>
						keypad_sm(keypad_labels[j][i]);
 8006654:	4b2b      	ldr	r3, [pc, #172]	; (8006704 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8006656:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800665a:	5d00      	ldrb	r0, [r0, r4]
 800665c:	f7fd fc34 	bl	8003ec8 <keypad_sm>
						rowpin = -1;
 8006660:	f04f 33ff 	mov.w	r3, #4294967295
 8006664:	602b      	str	r3, [r5, #0]
						break;
 8006666:	e78e      	b.n	8006586 <HAL_TIM_PeriodElapsedCallback+0x72>
			keypad_sm(']');//right bracket for CW
 8006668:	205d      	movs	r0, #93	; 0x5d
 800666a:	f7fd fc2d 	bl	8003ec8 <keypad_sm>
 800666e:	e76d      	b.n	800654c <HAL_TIM_PeriodElapsedCallback+0x38>
			if(!timercounter){
 8006670:	4c20      	ldr	r4, [pc, #128]	; (80066f4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8006672:	7823      	ldrb	r3, [r4, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1c4      	bne.n	8006602 <HAL_TIM_PeriodElapsedCallback+0xee>
				HAL_GPIO_WritePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_SET);
 8006678:	2120      	movs	r1, #32
 800667a:	4820      	ldr	r0, [pc, #128]	; (80066fc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800667c:	f001 fd4a 	bl	8008114 <HAL_GPIO_WritePin>
 8006680:	e7bf      	b.n	8006602 <HAL_TIM_PeriodElapsedCallback+0xee>
			keypad_sm('[');//left bracket for CCW
 8006682:	205b      	movs	r0, #91	; 0x5b
 8006684:	f7fd fc20 	bl	8003ec8 <keypad_sm>
 8006688:	e760      	b.n	800654c <HAL_TIM_PeriodElapsedCallback+0x38>
			if(blink){
 800668a:	4c1b      	ldr	r4, [pc, #108]	; (80066f8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800668c:	7823      	ldrb	r3, [r4, #0]
 800668e:	b98b      	cbnz	r3, 80066b4 <HAL_TIM_PeriodElapsedCallback+0x1a0>
			timercounter++;
 8006690:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8006692:	7813      	ldrb	r3, [r2, #0]
 8006694:	3301      	adds	r3, #1
 8006696:	b2db      	uxtb	r3, r3
 8006698:	7013      	strb	r3, [r2, #0]
			if(timercounter >= 7){
 800669a:	7813      	ldrb	r3, [r2, #0]
 800669c:	2b06      	cmp	r3, #6
 800669e:	d99a      	bls.n	80065d6 <HAL_TIM_PeriodElapsedCallback+0xc2>
				timercounter = 0;
 80066a0:	2100      	movs	r1, #0
				blink = 1;
 80066a2:	2301      	movs	r3, #1
				timercounter = 0;
 80066a4:	7011      	strb	r1, [r2, #0]
				blink = 1;
 80066a6:	7023      	strb	r3, [r4, #0]
 80066a8:	e795      	b.n	80065d6 <HAL_TIM_PeriodElapsedCallback+0xc2>
			HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 80066aa:	2110      	movs	r1, #16
 80066ac:	4813      	ldr	r0, [pc, #76]	; (80066fc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80066ae:	f001 fd35 	bl	800811c <HAL_GPIO_TogglePin>
 80066b2:	e79b      	b.n	80065ec <HAL_TIM_PeriodElapsedCallback+0xd8>
				HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 80066b4:	2120      	movs	r1, #32
 80066b6:	4811      	ldr	r0, [pc, #68]	; (80066fc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80066b8:	f001 fd30 	bl	800811c <HAL_GPIO_TogglePin>
 80066bc:	e7e8      	b.n	8006690 <HAL_TIM_PeriodElapsedCallback+0x17c>
				for(int j = 0; j < 5; j++){
 80066be:	2001      	movs	r0, #1
 80066c0:	e7c8      	b.n	8006654 <HAL_TIM_PeriodElapsedCallback+0x140>
 80066c2:	2003      	movs	r0, #3
 80066c4:	e7c6      	b.n	8006654 <HAL_TIM_PeriodElapsedCallback+0x140>
 80066c6:	2002      	movs	r0, #2
 80066c8:	e7c4      	b.n	8006654 <HAL_TIM_PeriodElapsedCallback+0x140>
 80066ca:	bf00      	nop
 80066cc:	200005c0 	.word	0x200005c0
 80066d0:	20000600 	.word	0x20000600
 80066d4:	20000640 	.word	0x20000640
 80066d8:	20000540 	.word	0x20000540
 80066dc:	20000580 	.word	0x20000580
 80066e0:	200006d4 	.word	0x200006d4
 80066e4:	0800f254 	.word	0x0800f254
 80066e8:	0800f24c 	.word	0x0800f24c
 80066ec:	200003a3 	.word	0x200003a3
 80066f0:	200003a1 	.word	0x200003a1
 80066f4:	2000071c 	.word	0x2000071c
 80066f8:	200003a0 	.word	0x200003a0
 80066fc:	40020800 	.word	0x40020800
 8006700:	20000008 	.word	0x20000008
 8006704:	0800f2a4 	.word	0x0800f2a4

08006708 <HAL_ADC_ConvHalfCpltCallback>:
	adc_values_cpy[0] = adc_values[0];
 8006708:	4a05      	ldr	r2, [pc, #20]	; (8006720 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800670a:	4b06      	ldr	r3, [pc, #24]	; (8006724 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800670c:	8811      	ldrh	r1, [r2, #0]
 800670e:	b289      	uxth	r1, r1
 8006710:	8019      	strh	r1, [r3, #0]
	adc_values_cpy[1] = adc_values[1];
 8006712:	8851      	ldrh	r1, [r2, #2]
 8006714:	b289      	uxth	r1, r1
 8006716:	8059      	strh	r1, [r3, #2]
	adc_values_cpy[2] = adc_values[2];
 8006718:	8892      	ldrh	r2, [r2, #4]
 800671a:	b292      	uxth	r2, r2
 800671c:	809a      	strh	r2, [r3, #4]
}
 800671e:	4770      	bx	lr
 8006720:	2000037c 	.word	0x2000037c
 8006724:	20000388 	.word	0x20000388

08006728 <HAL_ADC_ConvCpltCallback>:
	adc_values_cpy[3] = adc_values[3];
 8006728:	4a05      	ldr	r2, [pc, #20]	; (8006740 <HAL_ADC_ConvCpltCallback+0x18>)
 800672a:	4b06      	ldr	r3, [pc, #24]	; (8006744 <HAL_ADC_ConvCpltCallback+0x1c>)
 800672c:	88d1      	ldrh	r1, [r2, #6]
 800672e:	b289      	uxth	r1, r1
 8006730:	80d9      	strh	r1, [r3, #6]
	adc_values_cpy[4] = adc_values[4];
 8006732:	8911      	ldrh	r1, [r2, #8]
 8006734:	b289      	uxth	r1, r1
 8006736:	8119      	strh	r1, [r3, #8]
	adc_values_cpy[5] = adc_values[5];
 8006738:	8952      	ldrh	r2, [r2, #10]
 800673a:	b292      	uxth	r2, r2
 800673c:	815a      	strh	r2, [r3, #10]
}
 800673e:	4770      	bx	lr
 8006740:	2000037c 	.word	0x2000037c
 8006744:	20000388 	.word	0x20000388

08006748 <HAL_ADC_LevelOutOfWindowCallback>:
{
 8006748:	b510      	push	{r4, lr}
	if(chstat_main == 1){
 800674a:	4c06      	ldr	r4, [pc, #24]	; (8006764 <HAL_ADC_LevelOutOfWindowCallback+0x1c>)
 800674c:	7823      	ldrb	r3, [r4, #0]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d000      	beq.n	8006754 <HAL_ADC_LevelOutOfWindowCallback+0xc>
}
 8006752:	bd10      	pop	{r4, pc}
 8006754:	b25a      	sxtb	r2, r3
		HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8006756:	2140      	movs	r1, #64	; 0x40
 8006758:	4803      	ldr	r0, [pc, #12]	; (8006768 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 800675a:	f001 fcdb 	bl	8008114 <HAL_GPIO_WritePin>
		chstat_main = 2;
 800675e:	2302      	movs	r3, #2
 8006760:	7023      	strb	r3, [r4, #0]
}
 8006762:	bd10      	pop	{r4, pc}
 8006764:	200003a3 	.word	0x200003a3
 8006768:	40020000 	.word	0x40020000

0800676c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800676c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006770:	4e84      	ldr	r6, [pc, #528]	; (8006984 <HAL_UART_RxCpltCallback+0x218>)
	for(int i = 0; i < 64; i++){
 8006772:	2400      	movs	r4, #0
 8006774:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006776:	b089      	sub	sp, #36	; 0x24
 8006778:	e003      	b.n	8006782 <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 800677a:	3401      	adds	r4, #1
 800677c:	2c40      	cmp	r4, #64	; 0x40
 800677e:	f000 80fd 	beq.w	800697c <HAL_UART_RxCpltCallback+0x210>
		if(rxbuffer[i] == '*'){
 8006782:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006786:	2d2a      	cmp	r5, #42	; 0x2a
 8006788:	d1f7      	bne.n	800677a <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 800678a:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 800678c:	2220      	movs	r2, #32
 800678e:	2100      	movs	r1, #0
 8006790:	4668      	mov	r0, sp
 8006792:	f005 fe23 	bl	800c3dc <memset>
	for(int i = 0; i < 25; i++){
 8006796:	f10d 33ff 	add.w	r3, sp, #4294967295
 800679a:	aa06      	add	r2, sp, #24
 800679c:	e000      	b.n	80067a0 <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 800679e:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 80067a0:	3401      	adds	r4, #1
 80067a2:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 80067a4:	2c40      	cmp	r4, #64	; 0x40
		rxbuffercpy[i] = rxbuffer[rxiter];
 80067a6:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 80067aa:	bf28      	it	cs
 80067ac:	2400      	movcs	r4, #0
	for(int i = 0; i < 25; i++){
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d1f5      	bne.n	800679e <HAL_UART_RxCpltCallback+0x32>
	if( //Check start condition
 80067b2:	f89d 3000 	ldrb.w	r3, [sp]
 80067b6:	2b2a      	cmp	r3, #42	; 0x2a
 80067b8:	d00c      	beq.n	80067d4 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 80067ba:	2240      	movs	r2, #64	; 0x40
 80067bc:	2100      	movs	r1, #0
 80067be:	4871      	ldr	r0, [pc, #452]	; (8006984 <HAL_UART_RxCpltCallback+0x218>)
 80067c0:	f005 fe0c 	bl	800c3dc <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 80067c4:	2240      	movs	r2, #64	; 0x40
 80067c6:	496f      	ldr	r1, [pc, #444]	; (8006984 <HAL_UART_RxCpltCallback+0x218>)
 80067c8:	486f      	ldr	r0, [pc, #444]	; (8006988 <HAL_UART_RxCpltCallback+0x21c>)
}
 80067ca:	b009      	add	sp, #36	; 0x24
 80067cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 80067d0:	f003 bcd8 	b.w	800a184 <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 80067d4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80067d8:	2b53      	cmp	r3, #83	; 0x53
 80067da:	d1ee      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
 80067dc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80067e0:	2b54      	cmp	r3, #84	; 0x54
 80067e2:	d1ea      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
 80067e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80067e8:	2b52      	cmp	r3, #82	; 0x52
 80067ea:	d1e6      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
 80067ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80067f0:	2b54      	cmp	r3, #84	; 0x54
 80067f2:	d1e2      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
 80067f4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80067f8:	2b46      	cmp	r3, #70	; 0x46
 80067fa:	d1de      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 80067fc:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8006800:	2b4e      	cmp	r3, #78	; 0x4e
 8006802:	d1da      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
 8006804:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006808:	2b53      	cmp	r3, #83	; 0x53
 800680a:	d1d6      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
 800680c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006810:	2b48      	cmp	r3, #72	; 0x48
 8006812:	d1d2      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
 8006814:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006818:	2b21      	cmp	r3, #33	; 0x21
 800681a:	d1ce      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
 800681c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006820:	2b2c      	cmp	r3, #44	; 0x2c
 8006822:	d1ca      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8006824:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006828:	2b2c      	cmp	r3, #44	; 0x2c
 800682a:	d1c6      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
 800682c:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8006830:	2b2c      	cmp	r3, #44	; 0x2c
 8006832:	d1c2      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
 8006834:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006838:	2b2c      	cmp	r3, #44	; 0x2c
 800683a:	d1be      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 800683c:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8006840:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8006842:	b2c3      	uxtb	r3, r0
 8006844:	2b09      	cmp	r3, #9
 8006846:	d8b8      	bhi.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8006848:	f89d b007 	ldrb.w	fp, [sp, #7]
 800684c:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 8006850:	fa5f f38b 	uxtb.w	r3, fp
 8006854:	2b09      	cmp	r3, #9
 8006856:	d8b0      	bhi.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
 8006858:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800685c:	2b2e      	cmp	r3, #46	; 0x2e
 800685e:	d1ac      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8006860:	f89d a009 	ldrb.w	sl, [sp, #9]
 8006864:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8006868:	fa5f f38a 	uxtb.w	r3, sl
 800686c:	2b09      	cmp	r3, #9
 800686e:	d8a4      	bhi.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8006870:	f89d 900a 	ldrb.w	r9, [sp, #10]
 8006874:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8006878:	fa5f f389 	uxtb.w	r3, r9
 800687c:	2b09      	cmp	r3, #9
 800687e:	d89c      	bhi.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8006880:	f89d 800c 	ldrb.w	r8, [sp, #12]
 8006884:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8006888:	fa5f f388 	uxtb.w	r3, r8
 800688c:	2b09      	cmp	r3, #9
 800688e:	d894      	bhi.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8006890:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8006894:	2b2e      	cmp	r3, #46	; 0x2e
 8006896:	d190      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
 8006898:	f89d 700e 	ldrb.w	r7, [sp, #14]
 800689c:	3f30      	subs	r7, #48	; 0x30
 800689e:	b2fb      	uxtb	r3, r7
 80068a0:	2b09      	cmp	r3, #9
 80068a2:	d88a      	bhi.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80068a4:	f89d 600f 	ldrb.w	r6, [sp, #15]
 80068a8:	3e30      	subs	r6, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 80068aa:	b2f3      	uxtb	r3, r6
 80068ac:	2b09      	cmp	r3, #9
 80068ae:	d884      	bhi.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80068b0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80068b4:	3d30      	subs	r5, #48	; 0x30
 80068b6:	b2eb      	uxtb	r3, r5
 80068b8:	2b09      	cmp	r3, #9
 80068ba:	f63f af7e 	bhi.w	80067ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 80068be:	f89d 4012 	ldrb.w	r4, [sp, #18]
 80068c2:	3c30      	subs	r4, #48	; 0x30
 80068c4:	b2e4      	uxtb	r4, r4
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80068c6:	2c02      	cmp	r4, #2
 80068c8:	f63f af77 	bhi.w	80067ba <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 80068cc:	f7fa f9fe 	bl	8000ccc <__aeabi_i2f>
 80068d0:	492e      	ldr	r1, [pc, #184]	; (800698c <HAL_UART_RxCpltCallback+0x220>)
 80068d2:	f7fa fa4f 	bl	8000d74 <__aeabi_fmul>
 80068d6:	2100      	movs	r1, #0
 80068d8:	f7fa f944 	bl	8000b64 <__addsf3>
 80068dc:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80068de:	4658      	mov	r0, fp
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 80068e0:	469b      	mov	fp, r3
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80068e2:	f7fa f9f3 	bl	8000ccc <__aeabi_i2f>
 80068e6:	4659      	mov	r1, fp
 80068e8:	f7fa f93c 	bl	8000b64 <__addsf3>
 80068ec:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 80068ee:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80068f0:	469a      	mov	sl, r3
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 80068f2:	f7fa f9eb 	bl	8000ccc <__aeabi_i2f>
 80068f6:	4925      	ldr	r1, [pc, #148]	; (800698c <HAL_UART_RxCpltCallback+0x220>)
 80068f8:	f7fa faf0 	bl	8000edc <__aeabi_fdiv>
 80068fc:	4651      	mov	r1, sl
 80068fe:	f7fa f931 	bl	8000b64 <__addsf3>
 8006902:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8006904:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8006906:	4699      	mov	r9, r3
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8006908:	f7fa f9e0 	bl	8000ccc <__aeabi_i2f>
 800690c:	4920      	ldr	r1, [pc, #128]	; (8006990 <HAL_UART_RxCpltCallback+0x224>)
 800690e:	f7fa fae5 	bl	8000edc <__aeabi_fdiv>
 8006912:	4649      	mov	r1, r9
 8006914:	f7fa f926 	bl	8000b64 <__addsf3>
 8006918:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 800691a:	4640      	mov	r0, r8
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 800691c:	4698      	mov	r8, r3
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 800691e:	f7fa f9d5 	bl	8000ccc <__aeabi_i2f>
 8006922:	2100      	movs	r1, #0
 8006924:	f7fa f91e 	bl	8000b64 <__addsf3>
 8006928:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 800692a:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 800692c:	461f      	mov	r7, r3
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 800692e:	f7fa f9cd 	bl	8000ccc <__aeabi_i2f>
 8006932:	4916      	ldr	r1, [pc, #88]	; (800698c <HAL_UART_RxCpltCallback+0x220>)
 8006934:	f7fa fad2 	bl	8000edc <__aeabi_fdiv>
 8006938:	4639      	mov	r1, r7
 800693a:	f7fa f913 	bl	8000b64 <__addsf3>
 800693e:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8006940:	4630      	mov	r0, r6
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8006942:	461e      	mov	r6, r3
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8006944:	f7fa f9c2 	bl	8000ccc <__aeabi_i2f>
 8006948:	4911      	ldr	r1, [pc, #68]	; (8006990 <HAL_UART_RxCpltCallback+0x224>)
 800694a:	f7fa fac7 	bl	8000edc <__aeabi_fdiv>
 800694e:	4631      	mov	r1, r6
 8006950:	f7fa f908 	bl	8000b64 <__addsf3>
 8006954:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8006956:	4628      	mov	r0, r5
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8006958:	461d      	mov	r5, r3
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 800695a:	f7fa f9b7 	bl	8000ccc <__aeabi_i2f>
 800695e:	490d      	ldr	r1, [pc, #52]	; (8006994 <HAL_UART_RxCpltCallback+0x228>)
 8006960:	f7fa fabc 	bl	8000edc <__aeabi_fdiv>
 8006964:	4629      	mov	r1, r5
 8006966:	f7fa f8fd 	bl	8000b64 <__addsf3>
		lin_num_aux = tempv2;
 800696a:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <HAL_UART_RxCpltCallback+0x22c>)
		cur_num_aux = tempa2;
 800696c:	490b      	ldr	r1, [pc, #44]	; (800699c <HAL_UART_RxCpltCallback+0x230>)
		chstat_aux_rx = rxbuffercpy[18]-48;
 800696e:	4a0c      	ldr	r2, [pc, #48]	; (80069a0 <HAL_UART_RxCpltCallback+0x234>)
 8006970:	b264      	sxtb	r4, r4
		lin_num_aux = tempv2;
 8006972:	f8c3 8000 	str.w	r8, [r3]
		cur_num_aux = tempa2;
 8006976:	6008      	str	r0, [r1, #0]
		chstat_aux_rx = rxbuffercpy[18]-48;
 8006978:	7014      	strb	r4, [r2, #0]
 800697a:	e71e      	b.n	80067ba <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 800697c:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 800697e:	7835      	ldrb	r5, [r6, #0]
 8006980:	e704      	b.n	800678c <HAL_UART_RxCpltCallback+0x20>
 8006982:	bf00      	nop
 8006984:	200006d8 	.word	0x200006d8
 8006988:	20000680 	.word	0x20000680
 800698c:	41200000 	.word	0x41200000
 8006990:	42c80000 	.word	0x42c80000
 8006994:	447a0000 	.word	0x447a0000
 8006998:	200006cc 	.word	0x200006cc
 800699c:	200003a8 	.word	0x200003a8
 80069a0:	200003a1 	.word	0x200003a1

080069a4 <HAL_UART_ErrorCallback>:
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64); //Try again!
 80069a4:	2240      	movs	r2, #64	; 0x40
 80069a6:	4902      	ldr	r1, [pc, #8]	; (80069b0 <HAL_UART_ErrorCallback+0xc>)
 80069a8:	4802      	ldr	r0, [pc, #8]	; (80069b4 <HAL_UART_ErrorCallback+0x10>)
 80069aa:	f003 bbeb 	b.w	800a184 <HAL_UART_Receive_DMA>
 80069ae:	bf00      	nop
 80069b0:	200006d8 	.word	0x200006d8
 80069b4:	20000680 	.word	0x20000680

080069b8 <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 80069b8:	b430      	push	{r4, r5}
	memcpy(txbuffer, txbuffer_cpy, 64);  // copy the data to the buffer
 80069ba:	4c07      	ldr	r4, [pc, #28]	; (80069d8 <HAL_UART_TxHalfCpltCallback+0x20>)
 80069bc:	4d07      	ldr	r5, [pc, #28]	; (80069dc <HAL_UART_TxHalfCpltCallback+0x24>)
 80069be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80069ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80069d2:	bc30      	pop	{r4, r5}
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	20000720 	.word	0x20000720
 80069dc:	20000760 	.word	0x20000760

080069e0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80069e0:	b5d0      	push	{r4, r6, r7, lr}
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 80069e2:	4c11      	ldr	r4, [pc, #68]	; (8006a28 <HAL_UART_TxCpltCallback+0x48>)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80069e4:	b086      	sub	sp, #24
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 80069e6:	2240      	movs	r2, #64	; 0x40
 80069e8:	2100      	movs	r1, #0
 80069ea:	4620      	mov	r0, r4
 80069ec:	f005 fcf6 	bl	800c3dc <memset>
	snprintf((char*)txbuffer_cpy, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 80069f0:	4a0e      	ldr	r2, [pc, #56]	; (8006a2c <HAL_UART_TxCpltCallback+0x4c>)
 80069f2:	490f      	ldr	r1, [pc, #60]	; (8006a30 <HAL_UART_TxCpltCallback+0x50>)
 80069f4:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <HAL_UART_TxCpltCallback+0x54>)
 80069f6:	680e      	ldr	r6, [r1, #0]
 80069f8:	6810      	ldr	r0, [r2, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	b25b      	sxtb	r3, r3
 80069fe:	9304      	str	r3, [sp, #16]
 8006a00:	f7f9 fd2a 	bl	8000458 <__aeabi_f2d>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4630      	mov	r0, r6
 8006a0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a0e:	f7f9 fd23 	bl	8000458 <__aeabi_f2d>
 8006a12:	4606      	mov	r6, r0
 8006a14:	460f      	mov	r7, r1
 8006a16:	4620      	mov	r0, r4
 8006a18:	2120      	movs	r1, #32
 8006a1a:	e9cd 6700 	strd	r6, r7, [sp]
 8006a1e:	4a06      	ldr	r2, [pc, #24]	; (8006a38 <HAL_UART_TxCpltCallback+0x58>)
 8006a20:	f006 f944 	bl	800ccac <sniprintf>
}
 8006a24:	b006      	add	sp, #24
 8006a26:	bdd0      	pop	{r4, r6, r7, pc}
 8006a28:	20000760 	.word	0x20000760
 8006a2c:	20000394 	.word	0x20000394
 8006a30:	20000824 	.word	0x20000824
 8006a34:	200003a2 	.word	0x200003a2
 8006a38:	0800f218 	.word	0x0800f218

08006a3c <Error_Handler>:
 8006a3c:	b672      	cpsid	i
  while (1)
 8006a3e:	e7fe      	b.n	8006a3e <Error_Handler+0x2>

08006a40 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8006a40:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <HAL_MspInit+0x40>)
{
 8006a42:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8006a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a4a:	625a      	str	r2, [r3, #36]	; 0x24
 8006a4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a4e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006a52:	9201      	str	r2, [sp, #4]
 8006a54:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a56:	6a1a      	ldr	r2, [r3, #32]
 8006a58:	f042 0201 	orr.w	r2, r2, #1
 8006a5c:	621a      	str	r2, [r3, #32]
 8006a5e:	6a1a      	ldr	r2, [r3, #32]
 8006a60:	f002 0201 	and.w	r2, r2, #1
 8006a64:	9202      	str	r2, [sp, #8]
 8006a66:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a6e:	625a      	str	r2, [r3, #36]	; 0x24
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a76:	9303      	str	r3, [sp, #12]
 8006a78:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a7a:	b004      	add	sp, #16
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40023800 	.word	0x40023800

08006a84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006a84:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a86:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8006a88:	4b25      	ldr	r3, [pc, #148]	; (8006b20 <HAL_ADC_MspInit+0x9c>)
 8006a8a:	6802      	ldr	r2, [r0, #0]
{
 8006a8c:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8006a8e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a90:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006a94:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006a98:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8006a9a:	d001      	beq.n	8006aa0 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006a9c:	b008      	add	sp, #32
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006aa0:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8006aa4:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aa6:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aac:	621a      	str	r2, [r3, #32]
 8006aae:	6a1a      	ldr	r2, [r3, #32]
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006ab6:	9200      	str	r2, [sp, #0]
 8006ab8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aba:	69da      	ldr	r2, [r3, #28]
    hdma_adc.Instance = DMA1_Channel1;
 8006abc:	4e19      	ldr	r6, [pc, #100]	; (8006b24 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006abe:	f042 0201 	orr.w	r2, r2, #1
 8006ac2:	61da      	str	r2, [r3, #28]
 8006ac4:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006ac6:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006ace:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ad0:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ad2:	4815      	ldr	r0, [pc, #84]	; (8006b28 <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006ad4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ad8:	f001 f99a 	bl	8007e10 <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8006adc:	2380      	movs	r3, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8006ade:	4913      	ldr	r1, [pc, #76]	; (8006b2c <HAL_ADC_MspInit+0xa8>)
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ae4:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8006ae8:	60f3      	str	r3, [r6, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8006aee:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8006af0:	4630      	mov	r0, r6
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8006af2:	60b4      	str	r4, [r6, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8006af4:	61f4      	str	r4, [r6, #28]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006af6:	6171      	str	r1, [r6, #20]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006af8:	6132      	str	r2, [r6, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8006afa:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8006afc:	f000 ffd4 	bl	8007aa8 <HAL_DMA_Init>
 8006b00:	b958      	cbnz	r0, 8006b1a <HAL_ADC_MspInit+0x96>
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8006b02:	2200      	movs	r2, #0
 8006b04:	2101      	movs	r1, #1
 8006b06:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8006b08:	646e      	str	r6, [r5, #68]	; 0x44
 8006b0a:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8006b0c:	f000 fece 	bl	80078ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8006b10:	2012      	movs	r0, #18
 8006b12:	f000 ff09 	bl	8007928 <HAL_NVIC_EnableIRQ>
}
 8006b16:	b008      	add	sp, #32
 8006b18:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8006b1a:	f7ff ff8f 	bl	8006a3c <Error_Handler>
 8006b1e:	e7f0      	b.n	8006b02 <HAL_ADC_MspInit+0x7e>
 8006b20:	40012400 	.word	0x40012400
 8006b24:	20000418 	.word	0x20000418
 8006b28:	40020000 	.word	0x40020000
 8006b2c:	40026008 	.word	0x40026008

08006b30 <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <HAL_ADC_MspDeInit+0x30>)
 8006b32:	6802      	ldr	r2, [r0, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d000      	beq.n	8006b3a <HAL_ADC_MspDeInit+0xa>
 8006b38:	4770      	bx	lr
{
 8006b3a:	b510      	push	{r4, lr}
 8006b3c:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8006b3e:	4a09      	ldr	r2, [pc, #36]	; (8006b64 <HAL_ADC_MspDeInit+0x34>)
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8006b40:	210f      	movs	r1, #15
    __HAL_RCC_ADC1_CLK_DISABLE();
 8006b42:	6a13      	ldr	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8006b44:	4808      	ldr	r0, [pc, #32]	; (8006b68 <HAL_ADC_MspDeInit+0x38>)
    __HAL_RCC_ADC1_CLK_DISABLE();
 8006b46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b4a:	6213      	str	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8006b4c:	f001 fa4a 	bl	8007fe4 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8006b50:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006b52:	f000 ffe1 	bl	8007b18 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8006b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8006b5a:	2012      	movs	r0, #18
 8006b5c:	f000 bef2 	b.w	8007944 <HAL_NVIC_DisableIRQ>
 8006b60:	40012400 	.word	0x40012400
 8006b64:	40023800 	.word	0x40023800
 8006b68:	40020000 	.word	0x40020000

08006b6c <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b6c:	2300      	movs	r3, #0
{
 8006b6e:	b530      	push	{r4, r5, lr}
  if(hdac->Instance==DAC)
 8006b70:	4a14      	ldr	r2, [pc, #80]	; (8006bc4 <HAL_DAC_MspInit+0x58>)
 8006b72:	6801      	ldr	r1, [r0, #0]
{
 8006b74:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 8006b76:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b7c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006b80:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8006b82:	d001      	beq.n	8006b88 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8006b84:	b009      	add	sp, #36	; 0x24
 8006b86:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006b88:	2430      	movs	r4, #48	; 0x30
 8006b8a:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8006b8c:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <HAL_DAC_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b8e:	480f      	ldr	r0, [pc, #60]	; (8006bcc <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8006b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b92:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC_CLK_ENABLE();
 8006b94:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006b98:	625a      	str	r2, [r3, #36]	; 0x24
 8006b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b9c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8006ba0:	9200      	str	r2, [sp, #0]
 8006ba2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ba4:	69da      	ldr	r2, [r3, #28]
 8006ba6:	f042 0201 	orr.w	r2, r2, #1
 8006baa:	61da      	str	r2, [r3, #28]
 8006bac:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006bae:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	9301      	str	r3, [sp, #4]
 8006bb8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bba:	f001 f929 	bl	8007e10 <HAL_GPIO_Init>
}
 8006bbe:	b009      	add	sp, #36	; 0x24
 8006bc0:	bd30      	pop	{r4, r5, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40007400 	.word	0x40007400
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	40020000 	.word	0x40020000

08006bd0 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bd0:	2300      	movs	r3, #0
{
 8006bd2:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8006bd4:	4a16      	ldr	r2, [pc, #88]	; (8006c30 <HAL_I2C_MspInit+0x60>)
 8006bd6:	6801      	ldr	r1, [r0, #0]
{
 8006bd8:	b088      	sub	sp, #32
  if(hi2c->Instance==I2C1)
 8006bda:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bdc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006be0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006be4:	9306      	str	r3, [sp, #24]
  if(hi2c->Instance==I2C1)
 8006be6:	d001      	beq.n	8006bec <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006be8:	b008      	add	sp, #32
 8006bea:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bec:	2003      	movs	r0, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006bee:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006bf0:	26c0      	movs	r6, #192	; 0xc0
 8006bf2:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bf4:	4c0f      	ldr	r4, [pc, #60]	; (8006c34 <HAL_I2C_MspInit+0x64>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bf6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bf8:	69e3      	ldr	r3, [r4, #28]
 8006bfa:	f043 0302 	orr.w	r3, r3, #2
 8006bfe:	61e3      	str	r3, [r4, #28]
 8006c00:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c02:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c0a:	480b      	ldr	r0, [pc, #44]	; (8006c38 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c0c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c12:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c14:	f001 f8fc 	bl	8007e10 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c1e:	6263      	str	r3, [r4, #36]	; 0x24
 8006c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	9b01      	ldr	r3, [sp, #4]
}
 8006c2a:	b008      	add	sp, #32
 8006c2c:	bdd0      	pop	{r4, r6, r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	40005400 	.word	0x40005400
 8006c34:	40023800 	.word	0x40023800
 8006c38:	40020400 	.word	0x40020400

08006c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c3c:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8006c3e:	6803      	ldr	r3, [r0, #0]
{
 8006c40:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 8006c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c46:	d022      	beq.n	8006c8e <HAL_TIM_Base_MspInit+0x52>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8006c48:	4a39      	ldr	r2, [pc, #228]	; (8006d30 <HAL_TIM_Base_MspInit+0xf4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d035      	beq.n	8006cba <HAL_TIM_Base_MspInit+0x7e>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 8006c4e:	4a39      	ldr	r2, [pc, #228]	; (8006d34 <HAL_TIM_Base_MspInit+0xf8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d047      	beq.n	8006ce4 <HAL_TIM_Base_MspInit+0xa8>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8006c54:	4a38      	ldr	r2, [pc, #224]	; (8006d38 <HAL_TIM_Base_MspInit+0xfc>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d005      	beq.n	8006c66 <HAL_TIM_Base_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8006c5a:	4a38      	ldr	r2, [pc, #224]	; (8006d3c <HAL_TIM_Base_MspInit+0x100>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d056      	beq.n	8006d0e <HAL_TIM_Base_MspInit+0xd2>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8006c60:	b007      	add	sp, #28
 8006c62:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006c66:	4b36      	ldr	r3, [pc, #216]	; (8006d40 <HAL_TIM_Base_MspInit+0x104>)
    HAL_NVIC_SetPriority(TIM10_IRQn, 8, 0);
 8006c68:	201a      	movs	r0, #26
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006c6a:	6a19      	ldr	r1, [r3, #32]
    HAL_NVIC_SetPriority(TIM10_IRQn, 8, 0);
 8006c6c:	2200      	movs	r2, #0
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006c6e:	f041 0108 	orr.w	r1, r1, #8
 8006c72:	6219      	str	r1, [r3, #32]
    HAL_NVIC_SetPriority(TIM10_IRQn, 8, 0);
 8006c74:	2108      	movs	r1, #8
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	400b      	ands	r3, r1
 8006c7a:	9304      	str	r3, [sp, #16]
 8006c7c:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM10_IRQn, 8, 0);
 8006c7e:	f000 fe15 	bl	80078ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 8006c82:	201a      	movs	r0, #26
}
 8006c84:	b007      	add	sp, #28
 8006c86:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006c8a:	f000 be4d 	b.w	8007928 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c8e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8006c92:	6a59      	ldr	r1, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 8006c94:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c96:	f041 0101 	orr.w	r1, r1, #1
 8006c9a:	6259      	str	r1, [r3, #36]	; 0x24
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 8006c9e:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 8006ca6:	2107      	movs	r1, #7
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006ca8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 8006caa:	f000 fdff 	bl	80078ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006cae:	201c      	movs	r0, #28
}
 8006cb0:	b007      	add	sp, #28
 8006cb2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006cb6:	f000 be37 	b.w	8007928 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006cba:	4b21      	ldr	r3, [pc, #132]	; (8006d40 <HAL_TIM_Base_MspInit+0x104>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8006cbc:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006cbe:	6a59      	ldr	r1, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8006cc0:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006cc2:	f041 0102 	orr.w	r1, r1, #2
 8006cc6:	6259      	str	r1, [r3, #36]	; 0x24
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8006cca:	210a      	movs	r1, #10
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	9302      	str	r3, [sp, #8]
 8006cd2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8006cd4:	f000 fdea 	bl	80078ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006cd8:	201d      	movs	r0, #29
}
 8006cda:	b007      	add	sp, #28
 8006cdc:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006ce0:	f000 be22 	b.w	8007928 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006ce4:	4b16      	ldr	r3, [pc, #88]	; (8006d40 <HAL_TIM_Base_MspInit+0x104>)
    HAL_NVIC_SetPriority(TIM9_IRQn, 6, 0);
 8006ce6:	2019      	movs	r0, #25
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006ce8:	6a19      	ldr	r1, [r3, #32]
    HAL_NVIC_SetPriority(TIM9_IRQn, 6, 0);
 8006cea:	2200      	movs	r2, #0
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006cec:	f041 0104 	orr.w	r1, r1, #4
 8006cf0:	6219      	str	r1, [r3, #32]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM9_IRQn, 6, 0);
 8006cf4:	2106      	movs	r1, #6
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006cf6:	f003 0304 	and.w	r3, r3, #4
 8006cfa:	9303      	str	r3, [sp, #12]
 8006cfc:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM9_IRQn, 6, 0);
 8006cfe:	f000 fdd5 	bl	80078ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8006d02:	2019      	movs	r0, #25
}
 8006d04:	b007      	add	sp, #28
 8006d06:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006d0a:	f000 be0d 	b.w	8007928 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <HAL_TIM_Base_MspInit+0x104>)
    HAL_NVIC_SetPriority(TIM11_IRQn, 9, 0);
 8006d10:	201b      	movs	r0, #27
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006d12:	6a19      	ldr	r1, [r3, #32]
    HAL_NVIC_SetPriority(TIM11_IRQn, 9, 0);
 8006d14:	2200      	movs	r2, #0
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006d16:	f041 0110 	orr.w	r1, r1, #16
 8006d1a:	6219      	str	r1, [r3, #32]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM11_IRQn, 9, 0);
 8006d1e:	2109      	movs	r1, #9
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	9305      	str	r3, [sp, #20]
 8006d26:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM11_IRQn, 9, 0);
 8006d28:	f000 fdc0 	bl	80078ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006d2c:	201b      	movs	r0, #27
 8006d2e:	e7a9      	b.n	8006c84 <HAL_TIM_Base_MspInit+0x48>
 8006d30:	40000400 	.word	0x40000400
 8006d34:	40010800 	.word	0x40010800
 8006d38:	40010c00 	.word	0x40010c00
 8006d3c:	40011000 	.word	0x40011000
 8006d40:	40023800 	.word	0x40023800

08006d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d44:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d46:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8006d48:	4b31      	ldr	r3, [pc, #196]	; (8006e10 <HAL_UART_MspInit+0xcc>)
 8006d4a:	6802      	ldr	r2, [r0, #0]
{
 8006d4c:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8006d4e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d50:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006d54:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006d58:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8006d5a:	d001      	beq.n	8006d60 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006d5c:	b008      	add	sp, #32
 8006d5e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d60:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006d64:	6a1a      	ldr	r2, [r3, #32]
 8006d66:	4605      	mov	r5, r0
 8006d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d6c:	621a      	str	r2, [r3, #32]
 8006d6e:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d70:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d72:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006d76:	9200      	str	r2, [sp, #0]
 8006d78:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d7a:	69da      	ldr	r2, [r3, #28]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006d7c:	4e25      	ldr	r6, [pc, #148]	; (8006e14 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d7e:	f042 0201 	orr.w	r2, r2, #1
 8006d82:	61da      	str	r2, [r3, #28]
 8006d84:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006d86:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006d90:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d92:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d94:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006d96:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006d9a:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d9c:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d9e:	481e      	ldr	r0, [pc, #120]	; (8006e18 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006da0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006da2:	f001 f835 	bl	8007e10 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006da6:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006da8:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <HAL_UART_MspInit+0xd8>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006daa:	4630      	mov	r0, r6
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006dac:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006db0:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006db4:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006db8:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006dba:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006dbc:	f000 fe74 	bl	8007aa8 <HAL_DMA_Init>
 8006dc0:	b9f8      	cbnz	r0, 8006e02 <HAL_UART_MspInit+0xbe>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006dc2:	2210      	movs	r2, #16
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006dc4:	4c16      	ldr	r4, [pc, #88]	; (8006e20 <HAL_UART_MspInit+0xdc>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dc6:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006dc8:	2180      	movs	r1, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006dca:	6062      	str	r2, [r4, #4]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8006dcc:	2220      	movs	r2, #32
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006dce:	e9c4 3102 	strd	r3, r1, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dd2:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006dd6:	61e3      	str	r3, [r4, #28]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006dd8:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <HAL_UART_MspInit+0xe0>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006dda:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006ddc:	63ae      	str	r6, [r5, #56]	; 0x38
 8006dde:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006de0:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8006de2:	61a2      	str	r2, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006de4:	f000 fe60 	bl	8007aa8 <HAL_DMA_Init>
 8006de8:	b970      	cbnz	r0, 8006e08 <HAL_UART_MspInit+0xc4>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006dea:	2200      	movs	r2, #0
 8006dec:	2105      	movs	r1, #5
 8006dee:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006df0:	636c      	str	r4, [r5, #52]	; 0x34
 8006df2:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006df4:	f000 fd5a 	bl	80078ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006df8:	2025      	movs	r0, #37	; 0x25
 8006dfa:	f000 fd95 	bl	8007928 <HAL_NVIC_EnableIRQ>
}
 8006dfe:	b008      	add	sp, #32
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8006e02:	f7ff fe1b 	bl	8006a3c <Error_Handler>
 8006e06:	e7dc      	b.n	8006dc2 <HAL_UART_MspInit+0x7e>
      Error_Handler();
 8006e08:	f7ff fe18 	bl	8006a3c <Error_Handler>
 8006e0c:	e7ed      	b.n	8006dea <HAL_UART_MspInit+0xa6>
 8006e0e:	bf00      	nop
 8006e10:	40013800 	.word	0x40013800
 8006e14:	2000045c 	.word	0x2000045c
 8006e18:	40020000 	.word	0x40020000
 8006e1c:	40026058 	.word	0x40026058
 8006e20:	200004a0 	.word	0x200004a0
 8006e24:	40026044 	.word	0x40026044

08006e28 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006e28:	e7fe      	b.n	8006e28 <NMI_Handler>
 8006e2a:	bf00      	nop

08006e2c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e2c:	e7fe      	b.n	8006e2c <HardFault_Handler>
 8006e2e:	bf00      	nop

08006e30 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e30:	e7fe      	b.n	8006e30 <MemManage_Handler>
 8006e32:	bf00      	nop

08006e34 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e34:	e7fe      	b.n	8006e34 <BusFault_Handler>
 8006e36:	bf00      	nop

08006e38 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e38:	e7fe      	b.n	8006e38 <UsageFault_Handler>
 8006e3a:	bf00      	nop

08006e3c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop

08006e40 <DebugMon_Handler>:
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop

08006e44 <PendSV_Handler>:
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop

08006e48 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e48:	f000 b920 	b.w	800708c <HAL_IncTick>

08006e4c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_CLK_Pin);
 8006e4c:	2001      	movs	r0, #1
 8006e4e:	f001 b96f 	b.w	8008130 <HAL_GPIO_EXTI_IRQHandler>
 8006e52:	bf00      	nop

08006e54 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_SW_Pin);
 8006e54:	2004      	movs	r0, #4
 8006e56:	f001 b96b 	b.w	8008130 <HAL_GPIO_EXTI_IRQHandler>
 8006e5a:	bf00      	nop

08006e5c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8006e5c:	4801      	ldr	r0, [pc, #4]	; (8006e64 <DMA1_Channel1_IRQHandler+0x8>)
 8006e5e:	f000 bf23 	b.w	8007ca8 <HAL_DMA_IRQHandler>
 8006e62:	bf00      	nop
 8006e64:	20000418 	.word	0x20000418

08006e68 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006e68:	4801      	ldr	r0, [pc, #4]	; (8006e70 <DMA1_Channel4_IRQHandler+0x8>)
 8006e6a:	f000 bf1d 	b.w	8007ca8 <HAL_DMA_IRQHandler>
 8006e6e:	bf00      	nop
 8006e70:	200004a0 	.word	0x200004a0

08006e74 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006e74:	4801      	ldr	r0, [pc, #4]	; (8006e7c <DMA1_Channel5_IRQHandler+0x8>)
 8006e76:	f000 bf17 	b.w	8007ca8 <HAL_DMA_IRQHandler>
 8006e7a:	bf00      	nop
 8006e7c:	2000045c 	.word	0x2000045c

08006e80 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8006e80:	4801      	ldr	r0, [pc, #4]	; (8006e88 <ADC1_IRQHandler+0x8>)
 8006e82:	f000 bacb 	b.w	800741c <HAL_ADC_IRQHandler>
 8006e86:	bf00      	nop
 8006e88:	200003b0 	.word	0x200003b0

08006e8c <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006e8c:	4801      	ldr	r0, [pc, #4]	; (8006e94 <USB_LP_IRQHandler+0x8>)
 8006e8e:	f001 bc35 	b.w	80086fc <HAL_PCD_IRQHandler>
 8006e92:	bf00      	nop
 8006e94:	200014a8 	.word	0x200014a8

08006e98 <TIM9_IRQHandler>:
void TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM9_IRQn 0 */

  /* USER CODE END TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8006e98:	4801      	ldr	r0, [pc, #4]	; (8006ea0 <TIM9_IRQHandler+0x8>)
 8006e9a:	f002 bfef 	b.w	8009e7c <HAL_TIM_IRQHandler>
 8006e9e:	bf00      	nop
 8006ea0:	20000640 	.word	0x20000640

08006ea4 <TIM10_IRQHandler>:
void TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006ea4:	4801      	ldr	r0, [pc, #4]	; (8006eac <TIM10_IRQHandler+0x8>)
 8006ea6:	f002 bfe9 	b.w	8009e7c <HAL_TIM_IRQHandler>
 8006eaa:	bf00      	nop
 8006eac:	20000540 	.word	0x20000540

08006eb0 <TIM11_IRQHandler>:
void TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8006eb0:	4801      	ldr	r0, [pc, #4]	; (8006eb8 <TIM11_IRQHandler+0x8>)
 8006eb2:	f002 bfe3 	b.w	8009e7c <HAL_TIM_IRQHandler>
 8006eb6:	bf00      	nop
 8006eb8:	20000580 	.word	0x20000580

08006ebc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006ebc:	4801      	ldr	r0, [pc, #4]	; (8006ec4 <TIM2_IRQHandler+0x8>)
 8006ebe:	f002 bfdd 	b.w	8009e7c <HAL_TIM_IRQHandler>
 8006ec2:	bf00      	nop
 8006ec4:	200005c0 	.word	0x200005c0

08006ec8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006ec8:	4801      	ldr	r0, [pc, #4]	; (8006ed0 <TIM3_IRQHandler+0x8>)
 8006eca:	f002 bfd7 	b.w	8009e7c <HAL_TIM_IRQHandler>
 8006ece:	bf00      	nop
 8006ed0:	20000600 	.word	0x20000600

08006ed4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <USART1_IRQHandler+0x8>)
 8006ed6:	f003 ba9f 	b.w	800a418 <HAL_UART_IRQHandler>
 8006eda:	bf00      	nop
 8006edc:	20000680 	.word	0x20000680

08006ee0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006ee0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Row_1_Pin);
 8006ee2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006ee6:	f001 f923 	bl	8008130 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_2_Pin);
 8006eea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006eee:	f001 f91f 	bl	8008130 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_3_Pin);
 8006ef2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006ef6:	f001 f91b 	bl	8008130 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_4_Pin);
 8006efa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006efe:	f001 f917 	bl	8008130 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
 8006f06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006f0a:	f001 b911 	b.w	8008130 <HAL_GPIO_EXTI_IRQHandler>
 8006f0e:	bf00      	nop

08006f10 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8006f10:	2001      	movs	r0, #1
 8006f12:	4770      	bx	lr

08006f14 <_kill>:

int _kill(int pid, int sig)
{
 8006f14:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006f16:	f005 fa29 	bl	800c36c <__errno>
 8006f1a:	2216      	movs	r2, #22
 8006f1c:	4603      	mov	r3, r0
	return -1;
}
 8006f1e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8006f22:	601a      	str	r2, [r3, #0]
}
 8006f24:	bd08      	pop	{r3, pc}
 8006f26:	bf00      	nop

08006f28 <_exit>:

void _exit (int status)
{
 8006f28:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006f2a:	f005 fa1f 	bl	800c36c <__errno>
 8006f2e:	2316      	movs	r3, #22
 8006f30:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8006f32:	e7fe      	b.n	8006f32 <_exit+0xa>

08006f34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006f34:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f36:	1e16      	subs	r6, r2, #0
 8006f38:	dd07      	ble.n	8006f4a <_read+0x16>
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8006f3e:	f3af 8000 	nop.w
 8006f42:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f46:	42a5      	cmp	r5, r4
 8006f48:	d1f9      	bne.n	8006f3e <_read+0xa>
	}

return len;
}
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	bd70      	pop	{r4, r5, r6, pc}
 8006f4e:	bf00      	nop

08006f50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006f50:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f52:	1e16      	subs	r6, r2, #0
 8006f54:	dd07      	ble.n	8006f66 <_write+0x16>
 8006f56:	460c      	mov	r4, r1
 8006f58:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8006f5a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006f5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f62:	42ac      	cmp	r4, r5
 8006f64:	d1f9      	bne.n	8006f5a <_write+0xa>
	}
	return len;
}
 8006f66:	4630      	mov	r0, r6
 8006f68:	bd70      	pop	{r4, r5, r6, pc}
 8006f6a:	bf00      	nop

08006f6c <_close>:

int _close(int file)
{
	return -1;
}
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop

08006f74 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8006f78:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8006f7a:	604b      	str	r3, [r1, #4]
}
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop

08006f80 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006f80:	2001      	movs	r0, #1
 8006f82:	4770      	bx	lr

08006f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006f84:	2000      	movs	r0, #0
 8006f86:	4770      	bx	lr

08006f88 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f88:	490d      	ldr	r1, [pc, #52]	; (8006fc0 <_sbrk+0x38>)
{
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f8e:	4a0d      	ldr	r2, [pc, #52]	; (8006fc4 <_sbrk+0x3c>)
 8006f90:	4c0d      	ldr	r4, [pc, #52]	; (8006fc8 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8006f92:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f94:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8006f96:	b120      	cbz	r0, 8006fa2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f98:	4403      	add	r3, r0
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d807      	bhi.n	8006fae <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006f9e:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8006fa0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006fa2:	4c0a      	ldr	r4, [pc, #40]	; (8006fcc <_sbrk+0x44>)
 8006fa4:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8006fa6:	4403      	add	r3, r0
 8006fa8:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8006faa:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8006fac:	d9f7      	bls.n	8006f9e <_sbrk+0x16>
    errno = ENOMEM;
 8006fae:	f005 f9dd 	bl	800c36c <__errno>
 8006fb2:	220c      	movs	r2, #12
 8006fb4:	4603      	mov	r3, r0
    return (void *)-1;
 8006fb6:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8006fba:	601a      	str	r2, [r3, #0]
}
 8006fbc:	bd10      	pop	{r4, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000830 	.word	0x20000830
 8006fc4:	20008000 	.word	0x20008000
 8006fc8:	00002000 	.word	0x00002000
 8006fcc:	200019c8 	.word	0x200019c8

08006fd0 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop

08006fd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006fd4:	480c      	ldr	r0, [pc, #48]	; (8007008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006fd6:	490d      	ldr	r1, [pc, #52]	; (800700c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006fd8:	4a0d      	ldr	r2, [pc, #52]	; (8007010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006fdc:	e002      	b.n	8006fe4 <LoopCopyDataInit>

08006fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006fe2:	3304      	adds	r3, #4

08006fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006fe8:	d3f9      	bcc.n	8006fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006fea:	4a0a      	ldr	r2, [pc, #40]	; (8007014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006fec:	4c0a      	ldr	r4, [pc, #40]	; (8007018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ff0:	e001      	b.n	8006ff6 <LoopFillZerobss>

08006ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ff4:	3204      	adds	r2, #4

08006ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ff8:	d3fb      	bcc.n	8006ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006ffa:	f7ff ffe9 	bl	8006fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ffe:	f005 f9bb 	bl	800c378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007002:	f7fb f84f 	bl	80020a4 <main>
  bx lr
 8007006:	4770      	bx	lr
  ldr r0, =_sdata
 8007008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800700c:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8007010:	0800f714 	.word	0x0800f714
  ldr r2, =_sbss
 8007014:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8007018:	200019c4 	.word	0x200019c4

0800701c <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800701c:	e7fe      	b.n	800701c <COMP_IRQHandler>
	...

08007020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007020:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8007022:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <HAL_InitTick+0x40>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	b90b      	cbnz	r3, 800702c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8007028:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800702a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800702c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007030:	fbb2 f3f3 	udiv	r3, r2, r3
 8007034:	490b      	ldr	r1, [pc, #44]	; (8007064 <HAL_InitTick+0x44>)
 8007036:	4605      	mov	r5, r0
 8007038:	6808      	ldr	r0, [r1, #0]
 800703a:	fbb0 f0f3 	udiv	r0, r0, r3
 800703e:	f000 fc95 	bl	800796c <HAL_SYSTICK_Config>
 8007042:	4604      	mov	r4, r0
 8007044:	2800      	cmp	r0, #0
 8007046:	d1ef      	bne.n	8007028 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007048:	2d0f      	cmp	r5, #15
 800704a:	d8ed      	bhi.n	8007028 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800704c:	4602      	mov	r2, r0
 800704e:	4629      	mov	r1, r5
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	f000 fc2a 	bl	80078ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007058:	4b03      	ldr	r3, [pc, #12]	; (8007068 <HAL_InitTick+0x48>)
 800705a:	4620      	mov	r0, r4
 800705c:	601d      	str	r5, [r3, #0]
}
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	20000018 	.word	0x20000018
 8007064:	20000014 	.word	0x20000014
 8007068:	2000001c 	.word	0x2000001c

0800706c <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800706c:	2003      	movs	r0, #3
{
 800706e:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007070:	f000 fc0a 	bl	8007888 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007074:	200f      	movs	r0, #15
 8007076:	f7ff ffd3 	bl	8007020 <HAL_InitTick>
 800707a:	b110      	cbz	r0, 8007082 <HAL_Init+0x16>
    status = HAL_ERROR;
 800707c:	2401      	movs	r4, #1
}
 800707e:	4620      	mov	r0, r4
 8007080:	bd10      	pop	{r4, pc}
 8007082:	4604      	mov	r4, r0
    HAL_MspInit();
 8007084:	f7ff fcdc 	bl	8006a40 <HAL_MspInit>
}
 8007088:	4620      	mov	r0, r4
 800708a:	bd10      	pop	{r4, pc}

0800708c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800708c:	4a03      	ldr	r2, [pc, #12]	; (800709c <HAL_IncTick+0x10>)
 800708e:	4904      	ldr	r1, [pc, #16]	; (80070a0 <HAL_IncTick+0x14>)
 8007090:	6813      	ldr	r3, [r2, #0]
 8007092:	6809      	ldr	r1, [r1, #0]
 8007094:	440b      	add	r3, r1
 8007096:	6013      	str	r3, [r2, #0]
}
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	20000834 	.word	0x20000834
 80070a0:	20000018 	.word	0x20000018

080070a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80070a4:	4b01      	ldr	r3, [pc, #4]	; (80070ac <HAL_GetTick+0x8>)
 80070a6:	6818      	ldr	r0, [r3, #0]
}
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	20000834 	.word	0x20000834

080070b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80070b4:	f7ff fff6 	bl	80070a4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070b8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80070ba:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80070bc:	d002      	beq.n	80070c4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80070be:	4b04      	ldr	r3, [pc, #16]	; (80070d0 <HAL_Delay+0x20>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80070c4:	f7ff ffee 	bl	80070a4 <HAL_GetTick>
 80070c8:	1b40      	subs	r0, r0, r5
 80070ca:	42a0      	cmp	r0, r4
 80070cc:	d3fa      	bcc.n	80070c4 <HAL_Delay+0x14>
  {
  }
}
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
 80070d0:	20000018 	.word	0x20000018

080070d4 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80070d4:	2800      	cmp	r0, #0
 80070d6:	f000 80a9 	beq.w	800722c <HAL_ADC_Init+0x158>
{
 80070da:	b530      	push	{r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80070dc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80070de:	4604      	mov	r4, r0
{
 80070e0:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d078      	beq.n	80071d8 <HAL_ADC_Init+0x104>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80070e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80070e8:	06d8      	lsls	r0, r3, #27
 80070ea:	d453      	bmi.n	8007194 <HAL_ADC_Init+0xc0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80070ee:	4a5c      	ldr	r2, [pc, #368]	; (8007260 <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 80070f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80070f4:	f023 0302 	bic.w	r3, r3, #2
 80070f8:	f043 0302 	orr.w	r3, r3, #2
 80070fc:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 80070fe:	6853      	ldr	r3, [r2, #4]
 8007100:	6861      	ldr	r1, [r4, #4]
 8007102:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007106:	430b      	orrs	r3, r1
 8007108:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800710a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800710e:	fa91 f1a1 	rbit	r1, r1
 8007112:	2302      	movs	r3, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007114:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8007118:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800711c:	fa93 f3a3 	rbit	r3, r3
 8007120:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007124:	6965      	ldr	r5, [r4, #20]
 8007126:	68e2      	ldr	r2, [r4, #12]
 8007128:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 800712c:	432a      	orrs	r2, r5
 800712e:	6a25      	ldr	r5, [r4, #32]
 8007130:	fa0c f101 	lsl.w	r1, ip, r1
 8007134:	432a      	orrs	r2, r5
 8007136:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007138:	6b61      	ldr	r1, [r4, #52]	; 0x34
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800713a:	fa00 f303 	lsl.w	r3, r0, r3
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800713e:	2910      	cmp	r1, #16
                hadc->Init.ChannelsBank                                        |
 8007140:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007144:	d002      	beq.n	800714c <HAL_ADC_Init+0x78>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8007146:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007148:	4311      	orrs	r1, r2
 800714a:	430b      	orrs	r3, r1
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800714c:	6822      	ldr	r2, [r4, #0]
 800714e:	6811      	ldr	r1, [r2, #0]
 8007150:	0649      	lsls	r1, r1, #25
 8007152:	d551      	bpl.n	80071f8 <HAL_ADC_Init+0x124>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8007154:	6925      	ldr	r5, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8007156:	6890      	ldr	r0, [r2, #8]
 8007158:	4942      	ldr	r1, [pc, #264]	; (8007264 <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800715a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 800715e:	ea01 0100 	and.w	r1, r1, r0
 8007162:	ea41 0103 	orr.w	r1, r1, r3
 8007166:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007168:	d017      	beq.n	800719a <HAL_ADC_Init+0xc6>
 800716a:	2d01      	cmp	r5, #1
 800716c:	d015      	beq.n	800719a <HAL_ADC_Init+0xc6>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800716e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007170:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 8007174:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8007176:	6891      	ldr	r1, [r2, #8]
 8007178:	4a3b      	ldr	r2, [pc, #236]	; (8007268 <HAL_ADC_Init+0x194>)
 800717a:	400a      	ands	r2, r1
 800717c:	429a      	cmp	r2, r3
 800717e:	d11f      	bne.n	80071c0 <HAL_ADC_Init+0xec>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007180:	2000      	movs	r0, #0
 8007182:	6520      	str	r0, [r4, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007184:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007186:	f023 0303 	bic.w	r3, r3, #3
 800718a:	f043 0301 	orr.w	r3, r3, #1
 800718e:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8007190:	b003      	add	sp, #12
 8007192:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007194:	2001      	movs	r0, #1
}
 8007196:	b003      	add	sp, #12
 8007198:	bd30      	pop	{r4, r5, pc}
 800719a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800719e:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80071a0:	fa91 f1a1 	rbit	r1, r1
 80071a4:	fab1 f081 	clz	r0, r1
 80071a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80071aa:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 80071ae:	3901      	subs	r1, #1
 80071b0:	4081      	lsls	r1, r0
 80071b2:	4329      	orrs	r1, r5
 80071b4:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80071b6:	6891      	ldr	r1, [r2, #8]
 80071b8:	4a2b      	ldr	r2, [pc, #172]	; (8007268 <HAL_ADC_Init+0x194>)
 80071ba:	400a      	ands	r2, r1
 80071bc:	429a      	cmp	r2, r3
 80071be:	d0df      	beq.n	8007180 <HAL_ADC_Init+0xac>
      tmp_hal_status = HAL_ERROR;
 80071c0:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80071c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80071c4:	f023 0312 	bic.w	r3, r3, #18
 80071c8:	f043 0310 	orr.w	r3, r3, #16
 80071cc:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80071d0:	4303      	orrs	r3, r0
 80071d2:	6523      	str	r3, [r4, #80]	; 0x50
}
 80071d4:	b003      	add	sp, #12
 80071d6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071d8:	4a24      	ldr	r2, [pc, #144]	; (800726c <HAL_ADC_Init+0x198>)
    ADC_CLEAR_ERRORCODE(hadc);
 80071da:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 80071dc:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071e0:	6a13      	ldr	r3, [r2, #32]
 80071e2:	f043 0301 	orr.w	r3, r3, #1
 80071e6:	6213      	str	r3, [r2, #32]
 80071e8:	6a13      	ldr	r3, [r2, #32]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	9301      	str	r3, [sp, #4]
 80071f0:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 80071f2:	f7ff fc47 	bl	8006a84 <HAL_ADC_MspInit>
 80071f6:	e776      	b.n	80070e6 <HAL_ADC_Init+0x12>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80071f8:	69a1      	ldr	r1, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80071fa:	68a5      	ldr	r5, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80071fc:	430b      	orrs	r3, r1
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80071fe:	69e1      	ldr	r1, [r4, #28]
 8007200:	ea45 0c01 	orr.w	ip, r5, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8007204:	6925      	ldr	r5, [r4, #16]
 8007206:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800720a:	d00c      	beq.n	8007226 <HAL_ADC_Init+0x152>
 800720c:	2d01      	cmp	r5, #1
 800720e:	d00a      	beq.n	8007226 <HAL_ADC_Init+0x152>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007210:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8007214:	2901      	cmp	r1, #1
 8007216:	d00b      	beq.n	8007230 <HAL_ADC_Init+0x15c>
        MODIFY_REG(hadc->Instance->CR1,
 8007218:	6850      	ldr	r0, [r2, #4]
 800721a:	4915      	ldr	r1, [pc, #84]	; (8007270 <HAL_ADC_Init+0x19c>)
 800721c:	4001      	ands	r1, r0
 800721e:	ea41 010c 	orr.w	r1, r1, ip
 8007222:	6051      	str	r1, [r2, #4]
 8007224:	e797      	b.n	8007156 <HAL_ADC_Init+0x82>
                  hadc->Init.LowPowerAutoPowerOff           |
 8007226:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 800722a:	e7f1      	b.n	8007210 <HAL_ADC_Init+0x13c>
    return HAL_ERROR;
 800722c:	2001      	movs	r0, #1
}
 800722e:	4770      	bx	lr
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8007230:	b968      	cbnz	r0, 800724e <HAL_ADC_Init+0x17a>
 8007232:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8007236:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800723a:	fab1 f081 	clz	r0, r1
 800723e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007240:	3901      	subs	r1, #1
 8007242:	4081      	lsls	r1, r0
 8007244:	ea41 010c 	orr.w	r1, r1, ip
 8007248:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 800724c:	e7e4      	b.n	8007218 <HAL_ADC_Init+0x144>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800724e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007250:	f041 0120 	orr.w	r1, r1, #32
 8007254:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007256:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007258:	f041 0101 	orr.w	r1, r1, #1
 800725c:	6521      	str	r1, [r4, #80]	; 0x50
 800725e:	e7db      	b.n	8007218 <HAL_ADC_Init+0x144>
 8007260:	40012700 	.word	0x40012700
 8007264:	c0fff18d 	.word	0xc0fff18d
 8007268:	bf80fffe 	.word	0xbf80fffe
 800726c:	40023800 	.word	0x40023800
 8007270:	fcfc16ff 	.word	0xfcfc16ff

08007274 <HAL_ADC_DeInit>:
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007274:	2800      	cmp	r0, #0
 8007276:	d075      	beq.n	8007364 <HAL_ADC_DeInit+0xf0>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8007278:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 800727a:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800727c:	f042 0202 	orr.w	r2, r2, #2
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007280:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8007282:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	4604      	mov	r4, r0
 8007288:	0655      	lsls	r5, r2, #25
 800728a:	d453      	bmi.n	8007334 <HAL_ADC_DeInit+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 800728c:	f06f 001f 	mvn.w	r0, #31
 8007290:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 8007292:	6858      	ldr	r0, [r3, #4]
 8007294:	4939      	ldr	r1, [pc, #228]	; (800737c <HAL_ADC_DeInit+0x108>)
    ADC_CR2_CLEAR(hadc);
 8007296:	4a3a      	ldr	r2, [pc, #232]	; (8007380 <HAL_ADC_DeInit+0x10c>)
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 8007298:	4001      	ands	r1, r0
 800729a:	6059      	str	r1, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 800729c:	6899      	ldr	r1, [r3, #8]
 800729e:	400a      	ands	r2, r1
 80072a0:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 80072a2:	bf00      	nop
    ADC_SMPR1_CLEAR(hadc);
 80072a4:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80072a6:	4a37      	ldr	r2, [pc, #220]	; (8007384 <HAL_ADC_DeInit+0x110>)
    ADC_SMPR1_CLEAR(hadc);
 80072a8:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 80072aa:	4837      	ldr	r0, [pc, #220]	; (8007388 <HAL_ADC_DeInit+0x114>)
    ADC_SMPR1_CLEAR(hadc);
 80072ac:	0d49      	lsrs	r1, r1, #21
 80072ae:	0549      	lsls	r1, r1, #21
 80072b0:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 80072b2:	6919      	ldr	r1, [r3, #16]
 80072b4:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80072b8:	6119      	str	r1, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 80072ba:	6959      	ldr	r1, [r3, #20]
 80072bc:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80072c0:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80072c2:	6999      	ldr	r1, [r3, #24]
 80072c4:	4011      	ands	r1, r2
 80072c6:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 80072c8:	69d9      	ldr	r1, [r3, #28]
 80072ca:	4011      	ands	r1, r2
 80072cc:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 80072ce:	6a19      	ldr	r1, [r3, #32]
 80072d0:	4011      	ands	r1, r2
 80072d2:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 80072d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80072d6:	4011      	ands	r1, r2
 80072d8:	6259      	str	r1, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 80072da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80072dc:	4011      	ands	r1, r2
 80072de:	6299      	str	r1, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 80072e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072e2:	400a      	ands	r2, r1
 80072e4:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 80072e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 80072e8:	4928      	ldr	r1, [pc, #160]	; (800738c <HAL_ADC_DeInit+0x118>)
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 80072ea:	4010      	ands	r0, r2
 80072ec:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 80072ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_ADC_MspDeInit(hadc);
 80072f0:	4620      	mov	r0, r4
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 80072f2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80072f6:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 80072f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072fa:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80072fe:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 8007300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007302:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8007306:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 8007308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800730a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800730e:	641a      	str	r2, [r3, #64]	; 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 8007310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007312:	0d92      	lsrs	r2, r2, #22
 8007314:	0592      	lsls	r2, r2, #22
 8007316:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8007318:	684b      	ldr	r3, [r1, #4]
 800731a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800731e:	604b      	str	r3, [r1, #4]
    HAL_ADC_MspDeInit(hadc);
 8007320:	f7ff fc06 	bl	8006b30 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8007324:	2300      	movs	r3, #0
    hadc->State = HAL_ADC_STATE_RESET;
 8007326:	4618      	mov	r0, r3
    ADC_CLEAR_ERRORCODE(hadc);
 8007328:	6523      	str	r3, [r4, #80]	; 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 800732a:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 800732c:	2300      	movs	r3, #0
 800732e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 8007332:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007334:	689a      	ldr	r2, [r3, #8]
 8007336:	f022 0201 	bic.w	r2, r2, #1
 800733a:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800733c:	f7ff feb2 	bl	80070a4 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007340:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8007342:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	0650      	lsls	r0, r2, #25
 8007348:	d5a0      	bpl.n	800728c <HAL_ADC_DeInit+0x18>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800734a:	f7ff feab 	bl	80070a4 <HAL_GetTick>
 800734e:	1b40      	subs	r0, r0, r5
 8007350:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007352:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8007354:	d902      	bls.n	800735c <HAL_ADC_DeInit+0xe8>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	0651      	lsls	r1, r2, #25
 800735a:	d405      	bmi.n	8007368 <HAL_ADC_DeInit+0xf4>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	0652      	lsls	r2, r2, #25
 8007360:	d4f3      	bmi.n	800734a <HAL_ADC_DeInit+0xd6>
 8007362:	e793      	b.n	800728c <HAL_ADC_DeInit+0x18>
    return HAL_ERROR;
 8007364:	2001      	movs	r0, #1
}
 8007366:	4770      	bx	lr
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007368:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800736a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800736c:	f043 0310 	orr.w	r3, r3, #16
 8007370:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007372:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007374:	4303      	orrs	r3, r0
 8007376:	6523      	str	r3, [r4, #80]	; 0x50
  if (tmp_hal_status == HAL_OK)
 8007378:	e7d8      	b.n	800732c <HAL_ADC_DeInit+0xb8>
 800737a:	bf00      	nop
 800737c:	f83c0000 	.word	0xf83c0000
 8007380:	8080f08c 	.word	0x8080f08c
 8007384:	fffff000 	.word	0xfffff000
 8007388:	fe0f8000 	.word	0xfe0f8000
 800738c:	40012700 	.word	0x40012700

08007390 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007390:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007394:	f012 0f50 	tst.w	r2, #80	; 0x50
 8007398:	d126      	bne.n	80073e8 <ADC_DMAConvCplt+0x58>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800739a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800739c:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800739e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 80073a2:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073a4:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80073a6:	688a      	ldr	r2, [r1, #8]
 80073a8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80073ac:	d118      	bne.n	80073e0 <ADC_DMAConvCplt+0x50>
 80073ae:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80073b2:	b9aa      	cbnz	r2, 80073e0 <ADC_DMAConvCplt+0x50>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80073b4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80073b6:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 80073ba:	d002      	beq.n	80073c2 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80073bc:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80073be:	0550      	lsls	r0, r2, #21
 80073c0:	d40e      	bmi.n	80073e0 <ADC_DMAConvCplt+0x50>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80073c2:	684a      	ldr	r2, [r1, #4]
 80073c4:	f022 0220 	bic.w	r2, r2, #32
 80073c8:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80073ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073d0:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80073d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073d4:	04d2      	lsls	r2, r2, #19
 80073d6:	d403      	bmi.n	80073e0 <ADC_DMAConvCplt+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073da:	f042 0201 	orr.w	r2, r2, #1
 80073de:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff f9a1 	bl	8006728 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80073e6:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80073e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	4718      	bx	r3
 80073ee:	bf00      	nop

080073f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80073f0:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80073f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80073f4:	f7ff f988 	bl	8006708 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80073f8:	bd08      	pop	{r3, pc}
 80073fa:	bf00      	nop

080073fc <HAL_ADC_ErrorCallback>:
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop

08007400 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007400:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8007402:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007404:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800740a:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800740c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800740e:	f043 0304 	orr.w	r3, r3, #4
 8007412:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007414:	f7ff fff2 	bl	80073fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007418:	bd08      	pop	{r3, pc}
 800741a:	bf00      	nop

0800741c <HAL_ADC_IRQHandler>:
{
 800741c:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800741e:	6803      	ldr	r3, [r0, #0]
{
 8007420:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	0691      	lsls	r1, r2, #26
 8007426:	d502      	bpl.n	800742e <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	0792      	lsls	r2, r2, #30
 800742c:	d445      	bmi.n	80074ba <HAL_ADC_IRQHandler+0x9e>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	0612      	lsls	r2, r2, #24
 8007432:	d502      	bpl.n	800743a <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	0755      	lsls	r5, r2, #29
 8007438:	d40c      	bmi.n	8007454 <HAL_ADC_IRQHandler+0x38>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	0655      	lsls	r5, r2, #25
 800743e:	d502      	bpl.n	8007446 <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	07d0      	lsls	r0, r2, #31
 8007444:	d46f      	bmi.n	8007526 <HAL_ADC_IRQHandler+0x10a>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	d502      	bpl.n	8007452 <HAL_ADC_IRQHandler+0x36>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	0692      	lsls	r2, r2, #26
 8007450:	d45c      	bmi.n	800750c <HAL_ADC_IRQHandler+0xf0>
}
 8007452:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007454:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007456:	06d0      	lsls	r0, r2, #27
 8007458:	d403      	bmi.n	8007462 <HAL_ADC_IRQHandler+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800745a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800745c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007460:	64e2      	str	r2, [r4, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8007468:	d11f      	bne.n	80074aa <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800746a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800746c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8007470:	d002      	beq.n	8007478 <HAL_ADC_IRQHandler+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8007472:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007474:	0551      	lsls	r1, r2, #21
 8007476:	d418      	bmi.n	80074aa <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007478:	685a      	ldr	r2, [r3, #4]
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800747a:	0552      	lsls	r2, r2, #21
 800747c:	d415      	bmi.n	80074aa <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800747e:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007480:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8007484:	d111      	bne.n	80074aa <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007486:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800748a:	b972      	cbnz	r2, 80074aa <HAL_ADC_IRQHandler+0x8e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007492:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007494:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800749a:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800749c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800749e:	05db      	lsls	r3, r3, #23
 80074a0:	d403      	bmi.n	80074aa <HAL_ADC_IRQHandler+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80074a4:	f043 0301 	orr.w	r3, r3, #1
 80074a8:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 f9ea 	bl	8007884 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80074b0:	f06f 020c 	mvn.w	r2, #12
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	e7bf      	b.n	800743a <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80074ba:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80074bc:	06d5      	lsls	r5, r2, #27
 80074be:	d403      	bmi.n	80074c8 <HAL_ADC_IRQHandler+0xac>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80074c0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80074c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074c6:	64c2      	str	r2, [r0, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80074ce:	d115      	bne.n	80074fc <HAL_ADC_IRQHandler+0xe0>
 80074d0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80074d4:	b992      	cbnz	r2, 80074fc <HAL_ADC_IRQHandler+0xe0>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80074d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074d8:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 80074dc:	d12f      	bne.n	800753e <HAL_ADC_IRQHandler+0x122>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	f022 0220 	bic.w	r2, r2, #32
 80074e4:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80074e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80074e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ec:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80074ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80074f0:	04d9      	lsls	r1, r3, #19
 80074f2:	d403      	bmi.n	80074fc <HAL_ADC_IRQHandler+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80074f6:	f043 0301 	orr.w	r3, r3, #1
 80074fa:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_ConvCpltCallback(hadc);
 80074fc:	4620      	mov	r0, r4
 80074fe:	f7ff f913 	bl	8006728 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007502:	f06f 0212 	mvn.w	r2, #18
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	e790      	b.n	800742e <HAL_ADC_IRQHandler+0x12>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800750c:	f06f 0520 	mvn.w	r5, #32
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007510:	6d22      	ldr	r2, [r4, #80]	; 0x50
      HAL_ADC_ErrorCallback(hadc);
 8007512:	4620      	mov	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007514:	f042 0202 	orr.w	r2, r2, #2
 8007518:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800751a:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800751c:	f7ff ff6e 	bl	80073fc <HAL_ADC_ErrorCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	601d      	str	r5, [r3, #0]
}
 8007524:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007526:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007528:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800752a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800752e:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007530:	f7ff f90a 	bl	8006748 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007534:	f06f 0201 	mvn.w	r2, #1
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	e783      	b.n	8007446 <HAL_ADC_IRQHandler+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800753e:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007540:	0550      	lsls	r0, r2, #21
 8007542:	d4db      	bmi.n	80074fc <HAL_ADC_IRQHandler+0xe0>
 8007544:	e7cb      	b.n	80074de <HAL_ADC_IRQHandler+0xc2>
 8007546:	bf00      	nop

08007548 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8007548:	2300      	movs	r3, #0
{
 800754a:	b530      	push	{r4, r5, lr}
 800754c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800754e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8007550:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8007554:	2b01      	cmp	r3, #1
 8007556:	f000 80aa 	beq.w	80076ae <HAL_ADC_ConfigChannel+0x166>
 800755a:	2301      	movs	r3, #1
 800755c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 8007560:	684b      	ldr	r3, [r1, #4]
 8007562:	4602      	mov	r2, r0
 8007564:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR5,
 8007566:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7)
 8007568:	d924      	bls.n	80075b4 <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13)
 800756a:	2b0c      	cmp	r3, #12
 800756c:	d866      	bhi.n	800763c <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SQR4,
 800756e:	f04f 0c1f 	mov.w	ip, #31
 8007572:	680c      	ldr	r4, [r1, #0]
 8007574:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007578:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800757a:	3b23      	subs	r3, #35	; 0x23
 800757c:	fa04 fe03 	lsl.w	lr, r4, r3
 8007580:	fa0c f303 	lsl.w	r3, ip, r3
 8007584:	ea25 0303 	bic.w	r3, r5, r3
 8007588:	ea43 030e 	orr.w	r3, r3, lr
 800758c:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel < ADC_CHANNEL_10)
 800758e:	2c09      	cmp	r4, #9
 8007590:	d822      	bhi.n	80075d8 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR3,
 8007592:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8007596:	2407      	movs	r4, #7
 8007598:	6943      	ldr	r3, [r0, #20]
 800759a:	6889      	ldr	r1, [r1, #8]
 800759c:	40ac      	lsls	r4, r5
 800759e:	40a9      	lsls	r1, r5
 80075a0:	ea23 0404 	bic.w	r4, r3, r4
 80075a4:	430c      	orrs	r4, r1
 80075a6:	6144      	str	r4, [r0, #20]
  __HAL_UNLOCK(hadc);
 80075a8:	2300      	movs	r3, #0
  return tmp_hal_status;
 80075aa:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 80075ac:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
}
 80075b0:	b003      	add	sp, #12
 80075b2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR5,
 80075b4:	f04f 0c1f 	mov.w	ip, #31
 80075b8:	680c      	ldr	r4, [r1, #0]
 80075ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80075be:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80075c0:	3b05      	subs	r3, #5
 80075c2:	fa04 fe03 	lsl.w	lr, r4, r3
 80075c6:	fa0c f303 	lsl.w	r3, ip, r3
 80075ca:	ea25 0303 	bic.w	r3, r5, r3
 80075ce:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel < ADC_CHANNEL_10)
 80075d2:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SQR5,
 80075d4:	6403      	str	r3, [r0, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 80075d6:	d9dc      	bls.n	8007592 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80075d8:	2c13      	cmp	r4, #19
 80075da:	d844      	bhi.n	8007666 <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 80075dc:	f04f 0c07 	mov.w	ip, #7
 80075e0:	688d      	ldr	r5, [r1, #8]
 80075e2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80075e6:	6903      	ldr	r3, [r0, #16]
 80075e8:	391e      	subs	r1, #30
 80075ea:	408d      	lsls	r5, r1
 80075ec:	fa0c f101 	lsl.w	r1, ip, r1
 80075f0:	ea23 0301 	bic.w	r3, r3, r1
 80075f4:	432b      	orrs	r3, r5
 80075f6:	6103      	str	r3, [r0, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80075f8:	f1a4 0310 	sub.w	r3, r4, #16
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d8d3      	bhi.n	80075a8 <HAL_ADC_ConfigChannel+0x60>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8007600:	4b34      	ldr	r3, [pc, #208]	; (80076d4 <HAL_ADC_ConfigChannel+0x18c>)
 8007602:	6859      	ldr	r1, [r3, #4]
 8007604:	0209      	lsls	r1, r1, #8
 8007606:	d4cf      	bmi.n	80075a8 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8007608:	6859      	ldr	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800760a:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800760c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007610:	6059      	str	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007612:	d1c9      	bne.n	80075a8 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007614:	4b30      	ldr	r3, [pc, #192]	; (80076d8 <HAL_ADC_ConfigChannel+0x190>)
 8007616:	4931      	ldr	r1, [pc, #196]	; (80076dc <HAL_ADC_ConfigChannel+0x194>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	fba1 1303 	umull	r1, r3, r1, r3
 800761e:	0c9b      	lsrs	r3, r3, #18
 8007620:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8007628:	9b01      	ldr	r3, [sp, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0bc      	beq.n	80075a8 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800762e:	9b01      	ldr	r3, [sp, #4]
 8007630:	3b01      	subs	r3, #1
 8007632:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8007634:	9b01      	ldr	r3, [sp, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f9      	bne.n	800762e <HAL_ADC_ConfigChannel+0xe6>
 800763a:	e7b5      	b.n	80075a8 <HAL_ADC_ConfigChannel+0x60>
  else if (sConfig->Rank < 19)
 800763c:	2b12      	cmp	r3, #18
 800763e:	d925      	bls.n	800768c <HAL_ADC_ConfigChannel+0x144>
  else if (sConfig->Rank < 25)
 8007640:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 8007642:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 8007646:	d835      	bhi.n	80076b4 <HAL_ADC_ConfigChannel+0x16c>
    MODIFY_REG(hadc->Instance->SQR2,
 8007648:	f04f 0c1f 	mov.w	ip, #31
 800764c:	680c      	ldr	r4, [r1, #0]
 800764e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007650:	3b5f      	subs	r3, #95	; 0x5f
 8007652:	fa04 fe03 	lsl.w	lr, r4, r3
 8007656:	fa0c f303 	lsl.w	r3, ip, r3
 800765a:	ea25 0303 	bic.w	r3, r5, r3
 800765e:	ea43 030e 	orr.w	r3, r3, lr
 8007662:	6343      	str	r3, [r0, #52]	; 0x34
 8007664:	e793      	b.n	800758e <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8007666:	2c1a      	cmp	r4, #26
 8007668:	d80d      	bhi.n	8007686 <HAL_ADC_ConfigChannel+0x13e>
    MODIFY_REG(hadc->Instance->SMPR1,
 800766a:	2507      	movs	r5, #7
 800766c:	6889      	ldr	r1, [r1, #8]
 800766e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8007672:	68c3      	ldr	r3, [r0, #12]
 8007674:	3c3c      	subs	r4, #60	; 0x3c
 8007676:	40a1      	lsls	r1, r4
 8007678:	fa05 f404 	lsl.w	r4, r5, r4
 800767c:	ea23 0304 	bic.w	r3, r3, r4
 8007680:	430b      	orrs	r3, r1
 8007682:	60c3      	str	r3, [r0, #12]
 8007684:	e790      	b.n	80075a8 <HAL_ADC_ConfigChannel+0x60>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8007686:	bf00      	nop
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007688:	680c      	ldr	r4, [r1, #0]
 800768a:	e7b5      	b.n	80075f8 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR3,
 800768c:	f04f 0c1f 	mov.w	ip, #31
 8007690:	680c      	ldr	r4, [r1, #0]
 8007692:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007696:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8007698:	3b41      	subs	r3, #65	; 0x41
 800769a:	fa04 fe03 	lsl.w	lr, r4, r3
 800769e:	fa0c f303 	lsl.w	r3, ip, r3
 80076a2:	ea25 0303 	bic.w	r3, r5, r3
 80076a6:	ea43 030e 	orr.w	r3, r3, lr
 80076aa:	6383      	str	r3, [r0, #56]	; 0x38
 80076ac:	e76f      	b.n	800758e <HAL_ADC_ConfigChannel+0x46>
  __HAL_LOCK(hadc);
 80076ae:	2002      	movs	r0, #2
}
 80076b0:	b003      	add	sp, #12
 80076b2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR1,
 80076b4:	f04f 0c1f 	mov.w	ip, #31
 80076b8:	680c      	ldr	r4, [r1, #0]
 80076ba:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80076bc:	3b7d      	subs	r3, #125	; 0x7d
 80076be:	fa04 fe03 	lsl.w	lr, r4, r3
 80076c2:	fa0c f303 	lsl.w	r3, ip, r3
 80076c6:	ea25 0303 	bic.w	r3, r5, r3
 80076ca:	ea43 030e 	orr.w	r3, r3, lr
 80076ce:	6303      	str	r3, [r0, #48]	; 0x30
 80076d0:	e75d      	b.n	800758e <HAL_ADC_ConfigChannel+0x46>
 80076d2:	bf00      	nop
 80076d4:	40012700 	.word	0x40012700
 80076d8:	20000014 	.word	0x20000014
 80076dc:	431bde83 	.word	0x431bde83

080076e0 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 80076e0:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80076e4:	680a      	ldr	r2, [r1, #0]
  __HAL_LOCK(hadc);
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d024      	beq.n	8007734 <HAL_ADC_AnalogWDGConfig+0x54>
 80076ea:	2301      	movs	r3, #1
{
 80076ec:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80076ee:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if(AnalogWDGConfig->ITMode == ENABLE)
 80076f2:	7a0b      	ldrb	r3, [r1, #8]
 80076f4:	4686      	mov	lr, r0
 80076f6:	2b01      	cmp	r3, #1
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80076f8:	6803      	ldr	r3, [r0, #0]
  if(AnalogWDGConfig->ITMode == ENABLE)
 80076fa:	d016      	beq.n	800772a <HAL_ADC_AnalogWDGConfig+0x4a>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80076fc:	685c      	ldr	r4, [r3, #4]
 80076fe:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8007702:	605c      	str	r4, [r3, #4]
  __HAL_UNLOCK(hadc);
 8007704:	f04f 0c00 	mov.w	ip, #0
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8007708:	6858      	ldr	r0, [r3, #4]
 800770a:	4c0b      	ldr	r4, [pc, #44]	; (8007738 <HAL_ADC_AnalogWDGConfig+0x58>)
 800770c:	4004      	ands	r4, r0
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 800770e:	6848      	ldr	r0, [r1, #4]
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8007710:	605c      	str	r4, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 8007712:	4302      	orrs	r2, r0
 8007714:	6858      	ldr	r0, [r3, #4]
 8007716:	4302      	orrs	r2, r0
 8007718:	605a      	str	r2, [r3, #4]
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800771a:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 800771e:	6298      	str	r0, [r3, #40]	; 0x28
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8007720:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_UNLOCK(hadc);
 8007722:	f88e c048 	strb.w	ip, [lr, #72]	; 0x48
  return HAL_OK;
 8007726:	4660      	mov	r0, ip
}
 8007728:	bd10      	pop	{r4, pc}
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800772a:	6858      	ldr	r0, [r3, #4]
 800772c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8007730:	6058      	str	r0, [r3, #4]
 8007732:	e7e7      	b.n	8007704 <HAL_ADC_AnalogWDGConfig+0x24>
  __HAL_LOCK(hadc);
 8007734:	2002      	movs	r0, #2
}
 8007736:	4770      	bx	lr
 8007738:	ff3ffde0 	.word	0xff3ffde0

0800773c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800773c:	2300      	movs	r3, #0
{
 800773e:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007740:	6802      	ldr	r2, [r0, #0]
{
 8007742:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8007744:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007746:	6813      	ldr	r3, [r2, #0]
 8007748:	0659      	lsls	r1, r3, #25
 800774a:	d429      	bmi.n	80077a0 <ADC_Enable+0x64>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800774c:	4b1c      	ldr	r3, [pc, #112]	; (80077c0 <ADC_Enable+0x84>)
 800774e:	4604      	mov	r4, r0
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	481c      	ldr	r0, [pc, #112]	; (80077c4 <ADC_Enable+0x88>)
    __HAL_ADC_ENABLE(hadc);
 8007754:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007756:	fba0 0303 	umull	r0, r3, r0, r3
 800775a:	0c9b      	lsrs	r3, r3, #18
 800775c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8007760:	f041 0101 	orr.w	r1, r1, #1
 8007764:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007766:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8007768:	9b01      	ldr	r3, [sp, #4]
 800776a:	b12b      	cbz	r3, 8007778 <ADC_Enable+0x3c>
      wait_loop_index--;
 800776c:	9b01      	ldr	r3, [sp, #4]
 800776e:	3b01      	subs	r3, #1
 8007770:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8007772:	9b01      	ldr	r3, [sp, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1f9      	bne.n	800776c <ADC_Enable+0x30>
    tickstart = HAL_GetTick();    
 8007778:	f7ff fc94 	bl	80070a4 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800777c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();    
 800777e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	065a      	lsls	r2, r3, #25
 8007784:	d40c      	bmi.n	80077a0 <ADC_Enable+0x64>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8007786:	f7ff fc8d 	bl	80070a4 <HAL_GetTick>
 800778a:	1b43      	subs	r3, r0, r5
 800778c:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 800778e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8007790:	d903      	bls.n	800779a <ADC_Enable+0x5e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8007798:	d005      	beq.n	80077a6 <ADC_Enable+0x6a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	065b      	lsls	r3, r3, #25
 800779e:	d5f2      	bpl.n	8007786 <ADC_Enable+0x4a>
  return HAL_OK;
 80077a0:	2000      	movs	r0, #0
}
 80077a2:	b003      	add	sp, #12
 80077a4:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 80077a6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 80077aa:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077ae:	f043 0310 	orr.w	r3, r3, #16
 80077b2:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80077b6:	4303      	orrs	r3, r0
 80077b8:	6523      	str	r3, [r4, #80]	; 0x50
}
 80077ba:	b003      	add	sp, #12
 80077bc:	bd30      	pop	{r4, r5, pc}
 80077be:	bf00      	nop
 80077c0:	20000014 	.word	0x20000014
 80077c4:	431bde83 	.word	0x431bde83

080077c8 <HAL_ADC_Start_DMA>:
{
 80077c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 80077cc:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 80077d0:	2d01      	cmp	r5, #1
 80077d2:	d04c      	beq.n	800786e <HAL_ADC_Start_DMA+0xa6>
 80077d4:	2301      	movs	r3, #1
 80077d6:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 80077da:	4604      	mov	r4, r0
 80077dc:	4688      	mov	r8, r1
 80077de:	4617      	mov	r7, r2
 80077e0:	f7ff ffac 	bl	800773c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80077e4:	4605      	mov	r5, r0
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d13e      	bne.n	8007868 <HAL_ADC_Start_DMA+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 80077ea:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80077ec:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80077ee:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80077f2:	f020 0001 	bic.w	r0, r0, #1
 80077f6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80077fa:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80077fc:	6873      	ldr	r3, [r6, #4]
 80077fe:	055b      	lsls	r3, r3, #21
 8007800:	d505      	bpl.n	800780e <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007802:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007804:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800780c:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 800780e:	2100      	movs	r1, #0
 8007810:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007814:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007818:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800781a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800781c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007820:	bf18      	it	ne
 8007822:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007824:	4642      	mov	r2, r8
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007826:	bf18      	it	ne
 8007828:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800782c:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800782e:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007830:	4f11      	ldr	r7, [pc, #68]	; (8007878 <HAL_ADC_Start_DMA+0xb0>)
 8007832:	6287      	str	r7, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007834:	4f11      	ldr	r7, [pc, #68]	; (800787c <HAL_ADC_Start_DMA+0xb4>)
 8007836:	62c7      	str	r7, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007838:	4f11      	ldr	r7, [pc, #68]	; (8007880 <HAL_ADC_Start_DMA+0xb8>)
 800783a:	6307      	str	r7, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800783c:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800783e:	6871      	ldr	r1, [r6, #4]
 8007840:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8007844:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007846:	68b1      	ldr	r1, [r6, #8]
 8007848:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800784c:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800784e:	f106 0158 	add.w	r1, r6, #88	; 0x58
 8007852:	f000 f98f 	bl	8007b74 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800785e:	d103      	bne.n	8007868 <HAL_ADC_Start_DMA+0xa0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007866:	609a      	str	r2, [r3, #8]
}
 8007868:	4628      	mov	r0, r5
 800786a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 800786e:	2502      	movs	r5, #2
}
 8007870:	4628      	mov	r0, r5
 8007872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007876:	bf00      	nop
 8007878:	08007391 	.word	0x08007391
 800787c:	080073f1 	.word	0x080073f1
 8007880:	08007401 	.word	0x08007401

08007884 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop

08007888 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007888:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800788c:	4906      	ldr	r1, [pc, #24]	; (80078a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800788e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007890:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007892:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007896:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800789a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800789c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80078a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80078a4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80078a6:	4770      	bx	lr
 80078a8:	e000ed00 	.word	0xe000ed00

080078ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078ac:	4b1c      	ldr	r3, [pc, #112]	; (8007920 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078ae:	b500      	push	{lr}
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078b6:	f1c3 0e07 	rsb	lr, r3, #7
 80078ba:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078be:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078c2:	bf28      	it	cs
 80078c4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078c8:	f1bc 0f06 	cmp.w	ip, #6
 80078cc:	d91b      	bls.n	8007906 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078ce:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078d2:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078d4:	fa0c fc03 	lsl.w	ip, ip, r3
 80078d8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078dc:	f04f 3cff 	mov.w	ip, #4294967295
 80078e0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80078e4:	ea21 010c 	bic.w	r1, r1, ip
 80078e8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80078ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078ec:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80078f0:	db0c      	blt.n	800790c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078f2:	0109      	lsls	r1, r1, #4
 80078f4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80078f8:	b2c9      	uxtb	r1, r1
 80078fa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80078fe:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007902:	f85d fb04 	ldr.w	pc, [sp], #4
 8007906:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007908:	4613      	mov	r3, r2
 800790a:	e7e7      	b.n	80078dc <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <HAL_NVIC_SetPriority+0x78>)
 800790e:	f000 000f 	and.w	r0, r0, #15
 8007912:	0109      	lsls	r1, r1, #4
 8007914:	b2c9      	uxtb	r1, r1
 8007916:	4403      	add	r3, r0
 8007918:	7619      	strb	r1, [r3, #24]
 800791a:	f85d fb04 	ldr.w	pc, [sp], #4
 800791e:	bf00      	nop
 8007920:	e000ed00 	.word	0xe000ed00
 8007924:	e000ecfc 	.word	0xe000ecfc

08007928 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007928:	2800      	cmp	r0, #0
 800792a:	db07      	blt.n	800793c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800792c:	2301      	movs	r3, #1
 800792e:	f000 011f 	and.w	r1, r0, #31
 8007932:	4a03      	ldr	r2, [pc, #12]	; (8007940 <HAL_NVIC_EnableIRQ+0x18>)
 8007934:	0940      	lsrs	r0, r0, #5
 8007936:	408b      	lsls	r3, r1
 8007938:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	e000e100 	.word	0xe000e100

08007944 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007944:	2800      	cmp	r0, #0
 8007946:	db0d      	blt.n	8007964 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007948:	2201      	movs	r2, #1
 800794a:	4907      	ldr	r1, [pc, #28]	; (8007968 <HAL_NVIC_DisableIRQ+0x24>)
 800794c:	0943      	lsrs	r3, r0, #5
 800794e:	f000 001f 	and.w	r0, r0, #31
 8007952:	3320      	adds	r3, #32
 8007954:	fa02 f000 	lsl.w	r0, r2, r0
 8007958:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800795c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007960:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	e000e100 	.word	0xe000e100

0800796c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800796c:	3801      	subs	r0, #1
 800796e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007972:	d20f      	bcs.n	8007994 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007974:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007978:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800797c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800797e:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007980:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007982:	4c05      	ldr	r4, [pc, #20]	; (8007998 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007984:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007986:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800798a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800798c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800798e:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007990:	6119      	str	r1, [r3, #16]
 8007992:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007994:	2001      	movs	r0, #1
 8007996:	4770      	bx	lr
 8007998:	e000ed00 	.word	0xe000ed00

0800799c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 800799c:	b188      	cbz	r0, 80079c2 <HAL_DAC_Init+0x26>
{
 800799e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80079a0:	7903      	ldrb	r3, [r0, #4]
 80079a2:	4604      	mov	r4, r0
 80079a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80079a8:	b13b      	cbz	r3, 80079ba <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80079aa:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80079ac:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80079ae:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80079b0:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80079b2:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80079b4:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80079b6:	4618      	mov	r0, r3
}
 80079b8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80079ba:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80079bc:	f7ff f8d6 	bl	8006b6c <HAL_DAC_MspInit>
 80079c0:	e7f3      	b.n	80079aa <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80079c2:	2001      	movs	r0, #1
}
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop

080079c8 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80079c8:	7942      	ldrb	r2, [r0, #5]
 80079ca:	2a01      	cmp	r2, #1
 80079cc:	d02a      	beq.n	8007a24 <HAL_DAC_Start+0x5c>
{
 80079ce:	b410      	push	{r4}
 80079d0:	4603      	mov	r3, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80079d2:	2402      	movs	r4, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80079d4:	2201      	movs	r2, #1
 80079d6:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80079d8:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80079da:	6804      	ldr	r4, [r0, #0]
 80079dc:	f001 0c10 	and.w	ip, r1, #16
 80079e0:	fa02 f20c 	lsl.w	r2, r2, ip
 80079e4:	4322      	orrs	r2, r4
 80079e6:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 80079e8:	b979      	cbnz	r1, 8007a0a <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80079ea:	6802      	ldr	r2, [r0, #0]
 80079ec:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 80079f0:	2a3c      	cmp	r2, #60	; 0x3c
 80079f2:	d103      	bne.n	80079fc <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80079f4:	6842      	ldr	r2, [r0, #4]
 80079f6:	f042 0201 	orr.w	r2, r2, #1
 80079fa:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80079fc:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 80079fe:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8007a00:	715a      	strb	r2, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8007a02:	7119      	strb	r1, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007a04:	4610      	mov	r0, r2
}
 8007a06:	bc10      	pop	{r4}
 8007a08:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007a0a:	223c      	movs	r2, #60	; 0x3c
 8007a0c:	6801      	ldr	r1, [r0, #0]
 8007a0e:	fa02 fc0c 	lsl.w	ip, r2, ip
 8007a12:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8007a16:	4561      	cmp	r1, ip
 8007a18:	d1f0      	bne.n	80079fc <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007a1a:	6842      	ldr	r2, [r0, #4]
 8007a1c:	f042 0202 	orr.w	r2, r2, #2
 8007a20:	6042      	str	r2, [r0, #4]
 8007a22:	e7eb      	b.n	80079fc <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 8007a24:	2002      	movs	r0, #2
}
 8007a26:	4770      	bx	lr

08007a28 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007a28:	b410      	push	{r4}
  __IO uint32_t tmp = 0UL;
 8007a2a:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007a2c:	6800      	ldr	r0, [r0, #0]
{
 8007a2e:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8007a30:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8007a32:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8007a34:	b949      	cbnz	r1, 8007a4a <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007a36:	9901      	ldr	r1, [sp, #4]
 8007a38:	3108      	adds	r1, #8
 8007a3a:	440a      	add	r2, r1
 8007a3c:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
}
 8007a3e:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8007a40:	9a01      	ldr	r2, [sp, #4]
 8007a42:	6013      	str	r3, [r2, #0]
}
 8007a44:	b003      	add	sp, #12
 8007a46:	bc10      	pop	{r4}
 8007a48:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007a4a:	9901      	ldr	r1, [sp, #4]
 8007a4c:	3114      	adds	r1, #20
 8007a4e:	440a      	add	r2, r1
 8007a50:	9201      	str	r2, [sp, #4]
 8007a52:	e7f4      	b.n	8007a3e <HAL_DAC_SetValue+0x16>

08007a54 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007a54:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007a56:	7940      	ldrb	r0, [r0, #5]
 8007a58:	2801      	cmp	r0, #1
 8007a5a:	d022      	beq.n	8007aa2 <HAL_DAC_ConfigChannel+0x4e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a5c:	2002      	movs	r0, #2
{
 8007a5e:	b570      	push	{r4, r5, r6, lr}
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007a60:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007a64:	f640 76fe 	movw	r6, #4094	; 0xffe

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007a68:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 8007a6c:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a6e:	7118      	strb	r0, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8007a70:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007a72:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007a76:	f002 0210 	and.w	r2, r2, #16
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007a7a:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007a7c:	4096      	lsls	r6, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007a7e:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007a82:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 = hdac->Instance->CR;
 8007a86:	6821      	ldr	r1, [r4, #0]

  /* Return function status */
  return HAL_OK;
 8007a88:	4670      	mov	r0, lr
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007a8a:	ea21 0106 	bic.w	r1, r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007a8e:	430a      	orrs	r2, r1
  hdac->Instance->CR = tmpreg1;
 8007a90:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007a92:	6822      	ldr	r2, [r4, #0]
 8007a94:	ea22 020c 	bic.w	r2, r2, ip
 8007a98:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8007a9a:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8007a9c:	f883 e005 	strb.w	lr, [r3, #5]
}
 8007aa0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 8007aa2:	2002      	movs	r0, #2
}
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop

08007aa8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007aa8:	b370      	cbz	r0, 8007b08 <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007aaa:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007aac:	2202      	movs	r2, #2
{
 8007aae:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007ab0:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ab4:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007ab6:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8007abc:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007abe:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8007ac0:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
  tmp |=  hdma->Init.Direction        |
 8007ac4:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8007ac8:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007aca:	4910      	ldr	r1, [pc, #64]	; (8007b0c <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007acc:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007ace:	4d10      	ldr	r5, [pc, #64]	; (8007b10 <HAL_DMA_Init+0x68>)
 8007ad0:	4401      	add	r1, r0
 8007ad2:	fba5 5101 	umull	r5, r1, r5, r1
 8007ad6:	0909      	lsrs	r1, r1, #4
 8007ad8:	0089      	lsls	r1, r1, #2
 8007ada:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007adc:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8007ade:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ae2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ae4:	6959      	ldr	r1, [r3, #20]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	6999      	ldr	r1, [r3, #24]
 8007aea:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8007aec:	69d9      	ldr	r1, [r3, #28]
 8007aee:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8007af0:	4908      	ldr	r1, [pc, #32]	; (8007b14 <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 8007af2:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 8007af6:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8007af8:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007afa:	639c      	str	r4, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007afc:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8007b00:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 8007b04:	4620      	mov	r0, r4
}
 8007b06:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007b08:	2001      	movs	r0, #1
}
 8007b0a:	4770      	bx	lr
 8007b0c:	bffd9ff8 	.word	0xbffd9ff8
 8007b10:	cccccccd 	.word	0xcccccccd
 8007b14:	40026000 	.word	0x40026000

08007b18 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8007b18:	b320      	cbz	r0, 8007b64 <HAL_DMA_DeInit+0x4c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8007b1a:	4603      	mov	r3, r0

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b1c:	2101      	movs	r1, #1
{
 8007b1e:	b430      	push	{r4, r5}
  hdma->Instance->CCR = 0U;
 8007b20:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8007b22:	6805      	ldr	r5, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007b24:	4810      	ldr	r0, [pc, #64]	; (8007b68 <HAL_DMA_DeInit+0x50>)
  __HAL_DMA_DISABLE(hdma);
 8007b26:	682a      	ldr	r2, [r5, #0]
 8007b28:	f022 0201 	bic.w	r2, r2, #1
 8007b2c:	602a      	str	r2, [r5, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007b2e:	4a0f      	ldr	r2, [pc, #60]	; (8007b6c <HAL_DMA_DeInit+0x54>)
 8007b30:	442a      	add	r2, r5
 8007b32:	fba0 0202 	umull	r0, r2, r0, r2
 8007b36:	0912      	lsrs	r2, r2, #4
 8007b38:	0092      	lsls	r2, r2, #2
 8007b3a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b3c:	f002 021c 	and.w	r2, r2, #28
 8007b40:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8007b44:	490a      	ldr	r1, [pc, #40]	; (8007b70 <HAL_DMA_DeInit+0x58>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8007b46:	4620      	mov	r0, r4
  hdma->DmaBaseAddress = DMA1;
 8007b48:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = 0U;
 8007b4a:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b4c:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b4e:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdma);
 8007b50:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 8007b54:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 8007b58:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8007b5c:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
}
 8007b60:	bc30      	pop	{r4, r5}
 8007b62:	4770      	bx	lr
    return HAL_ERROR;
 8007b64:	2001      	movs	r0, #1
}
 8007b66:	4770      	bx	lr
 8007b68:	cccccccd 	.word	0xcccccccd
 8007b6c:	bffd9ff8 	.word	0xbffd9ff8
 8007b70:	40026000 	.word	0x40026000

08007b74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b74:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b76:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007b7a:	2801      	cmp	r0, #1
 8007b7c:	d042      	beq.n	8007c04 <HAL_DMA_Start_IT+0x90>
{
 8007b7e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8007b80:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8007b82:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8007b86:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8007b8a:	42a0      	cmp	r0, r4
 8007b8c:	fa5f fe80 	uxtb.w	lr, r0
 8007b90:	d004      	beq.n	8007b9c <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b92:	2300      	movs	r3, #0
 8007b94:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007b98:	2002      	movs	r0, #2
  }
  return status;
}
 8007b9a:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b9c:	2002      	movs	r0, #2
 8007b9e:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ba2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8007ba4:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ba8:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8007bac:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007bae:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8007bb2:	f025 0501 	bic.w	r5, r5, #1
 8007bb6:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007bb8:	f000 001c 	and.w	r0, r0, #28
 8007bbc:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8007bc0:	fa0e f000 	lsl.w	r0, lr, r0
 8007bc4:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007bc6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007bc8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007bcc:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8007bce:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007bd2:	bf0b      	itete	eq
 8007bd4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8007bd6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007bd8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007bda:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8007bdc:	b14b      	cbz	r3, 8007bf2 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	f043 030e 	orr.w	r3, r3, #14
 8007be4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8007be6:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007be8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8007bea:	f043 0301 	orr.w	r3, r3, #1
 8007bee:	6023      	str	r3, [r4, #0]
}
 8007bf0:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	f023 0304 	bic.w	r3, r3, #4
 8007bf8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	f043 030a 	orr.w	r3, r3, #10
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	e7f0      	b.n	8007be6 <HAL_DMA_Start_IT+0x72>
  __HAL_LOCK(hdma);
 8007c04:	2002      	movs	r0, #2
}
 8007c06:	4770      	bx	lr

08007c08 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c08:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8007c0c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c0e:	2a02      	cmp	r2, #2
 8007c10:	d006      	beq.n	8007c20 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c12:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8007c14:	2200      	movs	r2, #0
    return HAL_ERROR;
 8007c16:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c18:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8007c1a:	f883 2020 	strb.w	r2, [r3, #32]
}
 8007c1e:	4770      	bx	lr
{
 8007c20:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c22:	f04f 0e01 	mov.w	lr, #1
    __HAL_UNLOCK(hdma);
 8007c26:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c2a:	6802      	ldr	r2, [r0, #0]
 8007c2c:	6811      	ldr	r1, [r2, #0]
 8007c2e:	f021 010e 	bic.w	r1, r1, #14
 8007c32:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007c34:	6811      	ldr	r1, [r2, #0]
 8007c36:	f021 0101 	bic.w	r1, r1, #1
 8007c3a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c3c:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8007c40:	f002 021c 	and.w	r2, r2, #28
 8007c44:	fa0e f202 	lsl.w	r2, lr, r2
 8007c48:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007c4a:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8007c4e:	f883 c020 	strb.w	ip, [r3, #32]
    return status;
 8007c52:	4660      	mov	r0, ip
}
 8007c54:	f85d fb04 	ldr.w	pc, [sp], #4

08007c58 <HAL_DMA_Abort_IT>:
{
 8007c58:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007c5a:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8007c5e:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007c60:	2a02      	cmp	r2, #2
 8007c62:	d003      	beq.n	8007c6c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c64:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8007c66:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c68:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c6c:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c6e:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c72:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c74:	6c02      	ldr	r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c76:	f024 040e 	bic.w	r4, r4, #14
 8007c7a:	600c      	str	r4, [r1, #0]
    __HAL_UNLOCK(hdma);
 8007c7c:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8007c7e:	680d      	ldr	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c80:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 8007c84:	f025 0501 	bic.w	r5, r5, #1
 8007c88:	600d      	str	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c8a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8007c8c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c8e:	fa0c f202 	lsl.w	r2, ip, r2
 8007c92:	606a      	str	r2, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007c94:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8007c98:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8007c9c:	b111      	cbz	r1, 8007ca4 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8007c9e:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8007ca0:	4620      	mov	r0, r4
}
 8007ca2:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8007ca4:	4608      	mov	r0, r1
}
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}

08007ca8 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007ca8:	2204      	movs	r2, #4
{
 8007caa:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007cac:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007cae:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007cb0:	f003 031c 	and.w	r3, r3, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007cb4:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8007cb6:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007cb8:	409a      	lsls	r2, r3
 8007cba:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8007cbc:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007cbe:	d00e      	beq.n	8007cde <HAL_DMA_IRQHandler+0x36>
 8007cc0:	f014 0f04 	tst.w	r4, #4
 8007cc4:	d00b      	beq.n	8007cde <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007cc6:	682b      	ldr	r3, [r5, #0]
 8007cc8:	069b      	lsls	r3, r3, #26
 8007cca:	d403      	bmi.n	8007cd4 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	f023 0304 	bic.w	r3, r3, #4
 8007cd2:	602b      	str	r3, [r5, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8007cd4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007cd6:	6072      	str	r2, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8007cd8:	b1cb      	cbz	r3, 8007d0e <HAL_DMA_IRQHandler+0x66>
}
 8007cda:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8007cdc:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007cde:	2202      	movs	r2, #2
 8007ce0:	409a      	lsls	r2, r3
 8007ce2:	420a      	tst	r2, r1
 8007ce4:	d015      	beq.n	8007d12 <HAL_DMA_IRQHandler+0x6a>
 8007ce6:	f014 0f02 	tst.w	r4, #2
 8007cea:	d012      	beq.n	8007d12 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	0699      	lsls	r1, r3, #26
 8007cf0:	d406      	bmi.n	8007d00 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007cf2:	682b      	ldr	r3, [r5, #0]
 8007cf4:	f023 030a 	bic.w	r3, r3, #10
 8007cf8:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8007d00:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 8007d02:	6a83      	ldr	r3, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d04:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8007d06:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e5      	bne.n	8007cda <HAL_DMA_IRQHandler+0x32>
}
 8007d0e:	bc70      	pop	{r4, r5, r6}
 8007d10:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007d12:	2208      	movs	r2, #8
 8007d14:	409a      	lsls	r2, r3
 8007d16:	420a      	tst	r2, r1
 8007d18:	d0f9      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x66>
 8007d1a:	0722      	lsls	r2, r4, #28
 8007d1c:	d5f7      	bpl.n	8007d0e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d1e:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 8007d20:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d22:	f022 020e 	bic.w	r2, r2, #14
 8007d26:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d28:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8007d2a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d30:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d32:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8007d34:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 8007d38:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	d0e6      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x66>
}
 8007d40:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8007d42:	4708      	bx	r1

08007d44 <HAL_EXTI_SetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d041      	beq.n	8007dcc <HAL_EXTI_SetConfigLine+0x88>
 8007d48:	2900      	cmp	r1, #0
 8007d4a:	d03f      	beq.n	8007dcc <HAL_EXTI_SetConfigLine+0x88>
  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
  maskline = (1uL << linepos);
 8007d4c:	f04f 0c01 	mov.w	ip, #1
  hexti->Line = pExtiConfig->Line;
 8007d50:	680b      	ldr	r3, [r1, #0]
{
 8007d52:	b430      	push	{r4, r5}
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8007d54:	f003 021f 	and.w	r2, r3, #31
  hexti->Line = pExtiConfig->Line;
 8007d58:	6003      	str	r3, [r0, #0]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8007d5a:	0198      	lsls	r0, r3, #6
  maskline = (1uL << linepos);
 8007d5c:	fa0c fc02 	lsl.w	ip, ip, r2
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8007d60:	d519      	bpl.n	8007d96 <HAL_EXTI_SetConfigLine+0x52>

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
    {
      EXTI->RTSR |= maskline;
 8007d62:	4d25      	ldr	r5, [pc, #148]	; (8007df8 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8007d64:	6888      	ldr	r0, [r1, #8]
      EXTI->RTSR |= maskline;
 8007d66:	68ac      	ldr	r4, [r5, #8]
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8007d68:	f010 0f01 	tst.w	r0, #1
      EXTI->RTSR |= maskline;
 8007d6c:	bf14      	ite	ne
 8007d6e:	ea44 040c 	orrne.w	r4, r4, ip
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8007d72:	ea24 040c 	biceq.w	r4, r4, ip
 8007d76:	60ac      	str	r4, [r5, #8]

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
    {
      EXTI->FTSR |= maskline;
 8007d78:	4c1f      	ldr	r4, [pc, #124]	; (8007df8 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8007d7a:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR |= maskline;
 8007d7e:	68e0      	ldr	r0, [r4, #12]
 8007d80:	bf14      	ite	ne
 8007d82:	ea40 000c 	orrne.w	r0, r0, ip
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8007d86:	ea20 000c 	biceq.w	r0, r0, ip
 8007d8a:	60e0      	str	r0, [r4, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8007d8c:	f003 60c0 	and.w	r0, r3, #100663296	; 0x6000000
 8007d90:	f1b0 6fc0 	cmp.w	r0, #100663296	; 0x6000000
 8007d94:	d01c      	beq.n	8007dd0 <HAL_EXTI_SetConfigLine+0x8c>

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
  {
    EXTI->IMR |= maskline;
 8007d96:	4a18      	ldr	r2, [pc, #96]	; (8007df8 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8007d98:	6848      	ldr	r0, [r1, #4]
    EXTI->IMR |= maskline;
 8007d9a:	6813      	ldr	r3, [r2, #0]
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8007d9c:	07c1      	lsls	r1, r0, #31
    EXTI->IMR |= maskline;
 8007d9e:	bf4c      	ite	mi
 8007da0:	ea43 030c 	orrmi.w	r3, r3, ip
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8007da4:	ea23 030c 	bicpl.w	r3, r3, ip
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8007da8:	f010 0002 	ands.w	r0, r0, #2
    EXTI->IMR &= ~maskline;
 8007dac:	6013      	str	r3, [r2, #0]
  {
    EXTI->EMR |= maskline;
 8007dae:	4a12      	ldr	r2, [pc, #72]	; (8007df8 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8007db0:	d105      	bne.n	8007dbe <HAL_EXTI_SetConfigLine+0x7a>
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
}
 8007db2:	bc30      	pop	{r4, r5}
    EXTI->EMR &= ~maskline;
 8007db4:	6853      	ldr	r3, [r2, #4]
 8007db6:	ea23 030c 	bic.w	r3, r3, ip
 8007dba:	6053      	str	r3, [r2, #4]
}
 8007dbc:	4770      	bx	lr
    EXTI->EMR |= maskline;
 8007dbe:	6853      	ldr	r3, [r2, #4]
  return HAL_OK;
 8007dc0:	2000      	movs	r0, #0
}
 8007dc2:	bc30      	pop	{r4, r5}
    EXTI->EMR |= maskline;
 8007dc4:	ea43 030c 	orr.w	r3, r3, ip
 8007dc8:	6053      	str	r3, [r2, #4]
}
 8007dca:	4770      	bx	lr
    return HAL_ERROR;
 8007dcc:	2001      	movs	r0, #1
}
 8007dce:	4770      	bx	lr
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007dd0:	250f      	movs	r5, #15
 8007dd2:	f002 021c 	and.w	r2, r2, #28
 8007dd6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007dda:	68c8      	ldr	r0, [r1, #12]
 8007ddc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007de0:	f003 0303 	and.w	r3, r3, #3
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8007de4:	6894      	ldr	r4, [r2, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007de6:	009b      	lsls	r3, r3, #2
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007de8:	4098      	lsls	r0, r3
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007dea:	fa05 f303 	lsl.w	r3, r5, r3
 8007dee:	ea24 0303 	bic.w	r3, r4, r3
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8007df2:	4318      	orrs	r0, r3
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8007df4:	6090      	str	r0, [r2, #8]
 8007df6:	e7ce      	b.n	8007d96 <HAL_EXTI_SetConfigLine+0x52>
 8007df8:	40010400 	.word	0x40010400

08007dfc <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	6802      	ldr	r2, [r0, #0]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8007e00:	4902      	ldr	r1, [pc, #8]	; (8007e0c <HAL_EXTI_GenerateSWI+0x10>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007e02:	f002 021f 	and.w	r2, r2, #31
 8007e06:	4093      	lsls	r3, r2
  EXTI->SWIER = maskline;
 8007e08:	610b      	str	r3, [r1, #16]
}
 8007e0a:	4770      	bx	lr
 8007e0c:	40010400 	.word	0x40010400

08007e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007e14:	680c      	ldr	r4, [r1, #0]
{
 8007e16:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8007e18:	2c00      	cmp	r4, #0
 8007e1a:	d07c      	beq.n	8007f16 <HAL_GPIO_Init+0x106>
 8007e1c:	f04f 0e00 	mov.w	lr, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007e20:	f04f 0b01 	mov.w	fp, #1
  uint32_t position = 0x00;
 8007e24:	4673      	mov	r3, lr
 8007e26:	468c      	mov	ip, r1
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007e28:	fa0b f503 	lsl.w	r5, fp, r3

    if (iocurrent)
 8007e2c:	ea15 0a04 	ands.w	sl, r5, r4
 8007e30:	d06b      	beq.n	8007f0a <HAL_GPIO_Init+0xfa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007e32:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007e36:	f001 0203 	and.w	r2, r1, #3
 8007e3a:	1e57      	subs	r7, r2, #1
 8007e3c:	2f01      	cmp	r7, #1
 8007e3e:	d96d      	bls.n	8007f1c <HAL_GPIO_Init+0x10c>
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e40:	2a03      	cmp	r2, #3
 8007e42:	f040 80ae 	bne.w	8007fa2 <HAL_GPIO_Init+0x192>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007e46:	fa02 f20e 	lsl.w	r2, r2, lr
 8007e4a:	43d7      	mvns	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e4c:	6805      	ldr	r5, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e4e:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8007e52:	ea07 0705 	and.w	r7, r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007e56:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 8007e5a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e5c:	d055      	beq.n	8007f0a <HAL_GPIO_Init+0xfa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8007e5e:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e60:	4d5a      	ldr	r5, [pc, #360]	; (8007fcc <HAL_GPIO_Init+0x1bc>)
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8007e62:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e66:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8007e68:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e6a:	f042 0201 	orr.w	r2, r2, #1
 8007e6e:	622a      	str	r2, [r5, #32]
 8007e70:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8007e72:	fa06 f807 	lsl.w	r8, r6, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e76:	f002 0201 	and.w	r2, r2, #1
 8007e7a:	9203      	str	r2, [sp, #12]
 8007e7c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8007e7e:	f023 0203 	bic.w	r2, r3, #3
 8007e82:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007e86:	4e52      	ldr	r6, [pc, #328]	; (8007fd0 <HAL_GPIO_Init+0x1c0>)
 8007e88:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2];
 8007e8c:	6895      	ldr	r5, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007e8e:	42b0      	cmp	r0, r6
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8007e90:	ea25 0508 	bic.w	r5, r5, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007e94:	d015      	beq.n	8007ec2 <HAL_GPIO_Init+0xb2>
 8007e96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007e9a:	42b0      	cmp	r0, r6
 8007e9c:	f000 808c 	beq.w	8007fb8 <HAL_GPIO_Init+0x1a8>
 8007ea0:	4e4c      	ldr	r6, [pc, #304]	; (8007fd4 <HAL_GPIO_Init+0x1c4>)
 8007ea2:	42b0      	cmp	r0, r6
 8007ea4:	f000 808c 	beq.w	8007fc0 <HAL_GPIO_Init+0x1b0>
 8007ea8:	4e4b      	ldr	r6, [pc, #300]	; (8007fd8 <HAL_GPIO_Init+0x1c8>)
 8007eaa:	42b0      	cmp	r0, r6
 8007eac:	d07e      	beq.n	8007fac <HAL_GPIO_Init+0x19c>
 8007eae:	4e4b      	ldr	r6, [pc, #300]	; (8007fdc <HAL_GPIO_Init+0x1cc>)
 8007eb0:	42b0      	cmp	r0, r6
 8007eb2:	bf0c      	ite	eq
 8007eb4:	f04f 0804 	moveq.w	r8, #4
 8007eb8:	f04f 0805 	movne.w	r8, #5
 8007ebc:	fa08 f707 	lsl.w	r7, r8, r7
 8007ec0:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007ec2:	ea6f 070a 	mvn.w	r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8007ec6:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8007ec8:	4a45      	ldr	r2, [pc, #276]	; (8007fe0 <HAL_GPIO_Init+0x1d0>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007eca:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 8007ecc:	6812      	ldr	r2, [r2, #0]
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->IMR = temp;
 8007ece:	4d44      	ldr	r5, [pc, #272]	; (8007fe0 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007ed0:	bf54      	ite	pl
 8007ed2:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8007ed4:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 8007ed8:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 8007eda:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007edc:	038a      	lsls	r2, r1, #14
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->EMR = temp;
 8007ede:	4a40      	ldr	r2, [pc, #256]	; (8007fe0 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007ee0:	bf54      	ite	pl
 8007ee2:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8007ee4:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR = temp;
 8007ee8:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007eea:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007eec:	02ce      	lsls	r6, r1, #11
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->RTSR = temp;
 8007eee:	4a3c      	ldr	r2, [pc, #240]	; (8007fe0 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007ef0:	bf54      	ite	pl
 8007ef2:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8007ef4:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR = temp;
 8007ef8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8007efa:	68d2      	ldr	r2, [r2, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007efc:	0289      	lsls	r1, r1, #10
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->FTSR = temp;
 8007efe:	4938      	ldr	r1, [pc, #224]	; (8007fe0 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007f00:	bf54      	ite	pl
 8007f02:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8007f04:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 8007f08:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 8007f0a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8007f0c:	fa34 f203 	lsrs.w	r2, r4, r3
 8007f10:	f10e 0e02 	add.w	lr, lr, #2
 8007f14:	d188      	bne.n	8007e28 <HAL_GPIO_Init+0x18>
  }
}
 8007f16:	b005      	add	sp, #20
 8007f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007f1c:	f04f 0903 	mov.w	r9, #3
        temp = GPIOx->OSPEEDR;
 8007f20:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8007f22:	f8dc 700c 	ldr.w	r7, [ip, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007f26:	fa09 f90e 	lsl.w	r9, r9, lr
 8007f2a:	ea26 0609 	bic.w	r6, r6, r9
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8007f2e:	fa07 f70e 	lsl.w	r7, r7, lr
 8007f32:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 8007f34:	6087      	str	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007f36:	ea6f 0709 	mvn.w	r7, r9
        temp = GPIOx->OTYPER;
 8007f3a:	f8d0 9004 	ldr.w	r9, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f3e:	f3c1 1800 	ubfx	r8, r1, #4, #1
 8007f42:	fa08 f803 	lsl.w	r8, r8, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8007f46:	ea29 0505 	bic.w	r5, r9, r5
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f4a:	ea48 0505 	orr.w	r5, r8, r5
        GPIOx->OTYPER = temp;
 8007f4e:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8007f50:	68c5      	ldr	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f52:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8007f54:	ea05 0807 	and.w	r8, r5, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8007f58:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8007f5c:	fa02 f20e 	lsl.w	r2, r2, lr
 8007f60:	fa05 f50e 	lsl.w	r5, r5, lr
 8007f64:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->PUPDR = temp;
 8007f68:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f6a:	f47f af6f 	bne.w	8007e4c <HAL_GPIO_Init+0x3c>
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8007f6e:	f8dc 5010 	ldr.w	r5, [ip, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8007f72:	f003 0807 	and.w	r8, r3, #7
 8007f76:	ea4f 0888 	mov.w	r8, r8, lsl #2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8007f7a:	fa05 f508 	lsl.w	r5, r5, r8
 8007f7e:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8007f80:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3];
 8007f82:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8007f86:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8007f8a:	f8d9 6020 	ldr.w	r6, [r9, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8007f8e:	fa05 f808 	lsl.w	r8, r5, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8007f92:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8007f94:	ea26 0808 	bic.w	r8, r6, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8007f98:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->AFR[position >> 3] = temp;
 8007f9c:	f8c9 5020 	str.w	r5, [r9, #32]
 8007fa0:	e754      	b.n	8007e4c <HAL_GPIO_Init+0x3c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007fa2:	2703      	movs	r7, #3
 8007fa4:	fa07 f70e 	lsl.w	r7, r7, lr
 8007fa8:	43ff      	mvns	r7, r7
 8007faa:	e7d1      	b.n	8007f50 <HAL_GPIO_Init+0x140>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007fac:	f04f 0803 	mov.w	r8, #3
 8007fb0:	fa08 f707 	lsl.w	r7, r8, r7
 8007fb4:	433d      	orrs	r5, r7
 8007fb6:	e784      	b.n	8007ec2 <HAL_GPIO_Init+0xb2>
 8007fb8:	fa0b f707 	lsl.w	r7, fp, r7
 8007fbc:	433d      	orrs	r5, r7
 8007fbe:	e780      	b.n	8007ec2 <HAL_GPIO_Init+0xb2>
 8007fc0:	f04f 0802 	mov.w	r8, #2
 8007fc4:	fa08 f707 	lsl.w	r7, r8, r7
 8007fc8:	433d      	orrs	r5, r7
 8007fca:	e77a      	b.n	8007ec2 <HAL_GPIO_Init+0xb2>
 8007fcc:	40023800 	.word	0x40023800
 8007fd0:	40020000 	.word	0x40020000
 8007fd4:	40020800 	.word	0x40020800
 8007fd8:	40020c00 	.word	0x40020c00
 8007fdc:	40021000 	.word	0x40021000
 8007fe0:	40010400 	.word	0x40010400

08007fe4 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	f000 8083 	beq.w	80080f0 <HAL_GPIO_DeInit+0x10c>
{
 8007fea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 8007fee:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8007ff0:	2701      	movs	r7, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8007ff2:	f04f 090f 	mov.w	r9, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8007ff6:	f04f 0a03 	mov.w	sl, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007ffa:	4e3e      	ldr	r6, [pc, #248]	; (80080f4 <HAL_GPIO_DeInit+0x110>)
 8007ffc:	e051      	b.n	80080a2 <HAL_GPIO_DeInit+0xbe>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8007ffe:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8008002:	4558      	cmp	r0, fp
 8008004:	d069      	beq.n	80080da <HAL_GPIO_DeInit+0xf6>
 8008006:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 80080f8 <HAL_GPIO_DeInit+0x114>
 800800a:	4558      	cmp	r0, fp
 800800c:	d068      	beq.n	80080e0 <HAL_GPIO_DeInit+0xfc>
 800800e:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 80080fc <HAL_GPIO_DeInit+0x118>
 8008012:	4558      	cmp	r0, fp
 8008014:	d069      	beq.n	80080ea <HAL_GPIO_DeInit+0x106>
 8008016:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8008100 <HAL_GPIO_DeInit+0x11c>
 800801a:	4558      	cmp	r0, fp
 800801c:	bf14      	ite	ne
 800801e:	f04f 0b05 	movne.w	fp, #5
 8008022:	f04f 0b04 	moveq.w	fp, #4
 8008026:	fa0b f404 	lsl.w	r4, fp, r4
 800802a:	45a4      	cmp	ip, r4
 800802c:	d113      	bne.n	8008056 <HAL_GPIO_DeInit+0x72>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800802e:	6834      	ldr	r4, [r6, #0]
 8008030:	ea24 040e 	bic.w	r4, r4, lr
 8008034:	6034      	str	r4, [r6, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008036:	6874      	ldr	r4, [r6, #4]
 8008038:	ea24 040e 	bic.w	r4, r4, lr
 800803c:	6074      	str	r4, [r6, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800803e:	68b4      	ldr	r4, [r6, #8]
 8008040:	ea24 040e 	bic.w	r4, r4, lr
 8008044:	60b4      	str	r4, [r6, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008046:	68f4      	ldr	r4, [r6, #12]
 8008048:	ea24 040e 	bic.w	r4, r4, lr
 800804c:	60f4      	str	r4, [r6, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 800804e:	68ac      	ldr	r4, [r5, #8]
 8008050:	ea24 0408 	bic.w	r4, r4, r8
 8008054:	60ac      	str	r4, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008056:	6805      	ldr	r5, [r0, #0]
 8008058:	005c      	lsls	r4, r3, #1
 800805a:	fa0a f404 	lsl.w	r4, sl, r4
 800805e:	ea25 0504 	bic.w	r5, r5, r4

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8008062:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008066:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8008068:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800806c:	f003 0507 	and.w	r5, r3, #7
 8008070:	f8dc e020 	ldr.w	lr, [ip, #32]
 8008074:	00ad      	lsls	r5, r5, #2
 8008076:	fa09 f505 	lsl.w	r5, r9, r5
 800807a:	ea2e 0505 	bic.w	r5, lr, r5
 800807e:	f8cc 5020 	str.w	r5, [ip, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8008082:	68c5      	ldr	r5, [r0, #12]
 8008084:	ea25 0504 	bic.w	r5, r5, r4
 8008088:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800808a:	6845      	ldr	r5, [r0, #4]
 800808c:	ea25 0202 	bic.w	r2, r5, r2
 8008090:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008092:	6882      	ldr	r2, [r0, #8]
 8008094:	ea22 0404 	bic.w	r4, r2, r4
 8008098:	6084      	str	r4, [r0, #8]
    }

    position++;
 800809a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 800809c:	fa31 f203 	lsrs.w	r2, r1, r3
 80080a0:	d019      	beq.n	80080d6 <HAL_GPIO_DeInit+0xf2>
    iocurrent = (GPIO_Pin) & (1U << position);
 80080a2:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 80080a6:	ea12 0e01 	ands.w	lr, r2, r1
 80080aa:	d0f6      	beq.n	800809a <HAL_GPIO_DeInit+0xb6>
      tmp = SYSCFG->EXTICR[position >> 2];
 80080ac:	f023 0503 	bic.w	r5, r3, #3
 80080b0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80080b4:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8008104 <HAL_GPIO_DeInit+0x120>
 80080b8:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80080bc:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 80080c0:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80080c4:	00a4      	lsls	r4, r4, #2
 80080c6:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80080ca:	4558      	cmp	r0, fp
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80080cc:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80080d0:	d195      	bne.n	8007ffe <HAL_GPIO_DeInit+0x1a>
 80080d2:	2400      	movs	r4, #0
 80080d4:	e7a9      	b.n	800802a <HAL_GPIO_DeInit+0x46>
  }
}
 80080d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80080da:	fa07 f404 	lsl.w	r4, r7, r4
 80080de:	e7a4      	b.n	800802a <HAL_GPIO_DeInit+0x46>
 80080e0:	f04f 0b02 	mov.w	fp, #2
 80080e4:	fa0b f404 	lsl.w	r4, fp, r4
 80080e8:	e79f      	b.n	800802a <HAL_GPIO_DeInit+0x46>
 80080ea:	fa0a f404 	lsl.w	r4, sl, r4
 80080ee:	e79c      	b.n	800802a <HAL_GPIO_DeInit+0x46>
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	40010400 	.word	0x40010400
 80080f8:	40020800 	.word	0x40020800
 80080fc:	40020c00 	.word	0x40020c00
 8008100:	40021000 	.word	0x40021000
 8008104:	40020000 	.word	0x40020000

08008108 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008108:	6903      	ldr	r3, [r0, #16]
 800810a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800810c:	bf14      	ite	ne
 800810e:	2001      	movne	r0, #1
 8008110:	2000      	moveq	r0, #0
 8008112:	4770      	bx	lr

08008114 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008114:	b902      	cbnz	r2, 8008118 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8008116:	0409      	lsls	r1, r1, #16
 8008118:	6181      	str	r1, [r0, #24]
  }
}
 800811a:	4770      	bx	lr

0800811c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800811c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800811e:	ea01 0203 	and.w	r2, r1, r3
 8008122:	ea21 0103 	bic.w	r1, r1, r3
 8008126:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800812a:	6181      	str	r1, [r0, #24]
}
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop

08008130 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008130:	4a04      	ldr	r2, [pc, #16]	; (8008144 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8008132:	6951      	ldr	r1, [r2, #20]
 8008134:	4201      	tst	r1, r0
 8008136:	d100      	bne.n	800813a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8008138:	4770      	bx	lr
{
 800813a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800813c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800813e:	f7fe f977 	bl	8006430 <HAL_GPIO_EXTI_Callback>
  }
}
 8008142:	bd08      	pop	{r3, pc}
 8008144:	40010400 	.word	0x40010400

08008148 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008148:	2800      	cmp	r0, #0
 800814a:	f000 80b9 	beq.w	80082c0 <HAL_I2C_Init+0x178>
{
 800814e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008150:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008154:	4604      	mov	r4, r0
 8008156:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 8098 	beq.w	8008290 <HAL_I2C_Init+0x148>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008160:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008162:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008164:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	f022 0201 	bic.w	r2, r2, #1
 800816e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008176:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800817e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008180:	f001 fd1c 	bl	8009bbc <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008184:	6863      	ldr	r3, [r4, #4]
 8008186:	494f      	ldr	r1, [pc, #316]	; (80082c4 <HAL_I2C_Init+0x17c>)
 8008188:	428b      	cmp	r3, r1
 800818a:	d84f      	bhi.n	800822c <HAL_I2C_Init+0xe4>
 800818c:	4a4e      	ldr	r2, [pc, #312]	; (80082c8 <HAL_I2C_Init+0x180>)
 800818e:	4290      	cmp	r0, r2
 8008190:	d97c      	bls.n	800828c <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008192:	4d4e      	ldr	r5, [pc, #312]	; (80082cc <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008194:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8008196:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800819a:	1e43      	subs	r3, r0, #1
 800819c:	fbb3 f3f2 	udiv	r3, r3, r2
 80081a0:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081a4:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80081a6:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081a8:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081aa:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081ae:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80081b2:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 80081b6:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081b8:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081ba:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081bc:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80081c0:	ea41 010c 	orr.w	r1, r1, ip
 80081c4:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081c6:	69d1      	ldr	r1, [r2, #28]
 80081c8:	ea13 0f0e 	tst.w	r3, lr
 80081cc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80081d0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80081d4:	d161      	bne.n	800829a <HAL_I2C_Init+0x152>
 80081d6:	2304      	movs	r3, #4
 80081d8:	430b      	orrs	r3, r1
 80081da:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80081dc:	6811      	ldr	r1, [r2, #0]
 80081de:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80081e2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80081e6:	4303      	orrs	r3, r0
 80081e8:	430b      	orrs	r3, r1
 80081ea:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80081ec:	6891      	ldr	r1, [r2, #8]
 80081ee:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80081f2:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80081f6:	4303      	orrs	r3, r0
 80081f8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80081fc:	430b      	orrs	r3, r1
 80081fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008200:	68d0      	ldr	r0, [r2, #12]
 8008202:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8008206:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800820a:	430b      	orrs	r3, r1
 800820c:	4303      	orrs	r3, r0
 800820e:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008210:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008212:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8008214:	f043 0301 	orr.w	r3, r3, #1
 8008218:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800821a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800821c:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800821e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008222:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008224:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e

  return HAL_OK;
 8008228:	4608      	mov	r0, r1
}
 800822a:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800822c:	4a28      	ldr	r2, [pc, #160]	; (80082d0 <HAL_I2C_Init+0x188>)
 800822e:	4290      	cmp	r0, r2
 8008230:	d92c      	bls.n	800828c <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8008232:	4d26      	ldr	r5, [pc, #152]	; (80082cc <HAL_I2C_Init+0x184>)
 8008234:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008238:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800823c:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008240:	fb02 f101 	mul.w	r1, r2, r1
 8008244:	4d23      	ldr	r5, [pc, #140]	; (80082d4 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008246:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008248:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800824c:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800824e:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008250:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008254:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8008258:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800825a:	6a15      	ldr	r5, [r2, #32]
 800825c:	3101      	adds	r1, #1
 800825e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008262:	4329      	orrs	r1, r5
 8008264:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008266:	69d1      	ldr	r1, [r2, #28]
 8008268:	68a5      	ldr	r5, [r4, #8]
 800826a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800826e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008272:	b9ad      	cbnz	r5, 80082a0 <HAL_I2C_Init+0x158>
 8008274:	3801      	subs	r0, #1
 8008276:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800827a:	fbb0 f3f3 	udiv	r3, r0, r3
 800827e:	3301      	adds	r3, #1
 8008280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008284:	b1d3      	cbz	r3, 80082bc <HAL_I2C_Init+0x174>
 8008286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800828a:	e7a5      	b.n	80081d8 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800828c:	2001      	movs	r0, #1
}
 800828e:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8008290:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8008294:	f7fe fc9c 	bl	8006bd0 <HAL_I2C_MspInit>
 8008298:	e762      	b.n	8008160 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800829a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800829e:	e79b      	b.n	80081d8 <HAL_I2C_Init+0x90>
 80082a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80082a4:	3801      	subs	r0, #1
 80082a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80082aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80082ae:	3301      	adds	r3, #1
 80082b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082b4:	b113      	cbz	r3, 80082bc <HAL_I2C_Init+0x174>
 80082b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082ba:	e78d      	b.n	80081d8 <HAL_I2C_Init+0x90>
 80082bc:	2301      	movs	r3, #1
 80082be:	e78b      	b.n	80081d8 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80082c0:	2001      	movs	r0, #1
}
 80082c2:	4770      	bx	lr
 80082c4:	000186a0 	.word	0x000186a0
 80082c8:	001e847f 	.word	0x001e847f
 80082cc:	431bde83 	.word	0x431bde83
 80082d0:	003d08ff 	.word	0x003d08ff
 80082d4:	10624dd3 	.word	0x10624dd3

080082d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	4605      	mov	r5, r0
 80082de:	b083      	sub	sp, #12
 80082e0:	4699      	mov	r9, r3
 80082e2:	4688      	mov	r8, r1
 80082e4:	4692      	mov	sl, r2
 80082e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80082e8:	f7fe fedc 	bl	80070a4 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082ec:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80082f0:	2b20      	cmp	r3, #32
 80082f2:	d003      	beq.n	80082fc <HAL_I2C_Master_Transmit+0x24>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80082f4:	2002      	movs	r0, #2
  }
}
 80082f6:	b003      	add	sp, #12
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	4606      	mov	r6, r0
 80082fe:	e005      	b.n	800830c <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008300:	f7fe fed0 	bl	80070a4 <HAL_GetTick>
 8008304:	1b80      	subs	r0, r0, r6
 8008306:	2819      	cmp	r0, #25
 8008308:	f200 80f8 	bhi.w	80084fc <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800830c:	682c      	ldr	r4, [r5, #0]
 800830e:	69a3      	ldr	r3, [r4, #24]
 8008310:	ea6f 0c03 	mvn.w	ip, r3
 8008314:	f01c 0b02 	ands.w	fp, ip, #2
 8008318:	d0f2      	beq.n	8008300 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 800831a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800831e:	2b01      	cmp	r3, #1
 8008320:	d0e8      	beq.n	80082f4 <HAL_I2C_Master_Transmit+0x1c>
 8008322:	2301      	movs	r3, #1
 8008324:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	07d9      	lsls	r1, r3, #31
 800832c:	d571      	bpl.n	8008412 <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800832e:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008330:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008332:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800833a:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800833c:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008340:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008344:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8008346:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800834a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800834c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8008350:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8008352:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008354:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8008356:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800835a:	2b08      	cmp	r3, #8
 800835c:	d006      	beq.n	800836c <HAL_I2C_Master_Transmit+0x94>
 800835e:	2b01      	cmp	r3, #1
 8008360:	d004      	beq.n	800836c <HAL_I2C_Master_Transmit+0x94>
 8008362:	4293      	cmp	r3, r2
 8008364:	d002      	beq.n	800836c <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008366:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008368:	2b12      	cmp	r3, #18
 800836a:	d103      	bne.n	8008374 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	1c7b      	adds	r3, r7, #1
 8008376:	d13e      	bne.n	80083f6 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008378:	6963      	ldr	r3, [r4, #20]
 800837a:	07d8      	lsls	r0, r3, #31
 800837c:	d5fc      	bpl.n	8008378 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800837e:	692b      	ldr	r3, [r5, #16]
 8008380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008384:	d14a      	bne.n	800841c <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008386:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 800838a:	6121      	str	r1, [r4, #16]
 800838c:	1c78      	adds	r0, r7, #1
 800838e:	d004      	beq.n	800839a <HAL_I2C_Master_Transmit+0xc2>
 8008390:	e0dd      	b.n	800854e <HAL_I2C_Master_Transmit+0x276>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008392:	6963      	ldr	r3, [r4, #20]
 8008394:	055a      	lsls	r2, r3, #21
 8008396:	f100 80c2 	bmi.w	800851e <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800839a:	6963      	ldr	r3, [r4, #20]
 800839c:	0799      	lsls	r1, r3, #30
 800839e:	d5f8      	bpl.n	8008392 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083a0:	2200      	movs	r2, #0
 80083a2:	9201      	str	r2, [sp, #4]
 80083a4:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 80083a6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083a8:	9201      	str	r2, [sp, #4]
 80083aa:	69a2      	ldr	r2, [r4, #24]
 80083ac:	9201      	str	r2, [sp, #4]
 80083ae:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d075      	beq.n	80084a0 <HAL_I2C_Master_Transmit+0x1c8>
 80083b4:	1c79      	adds	r1, r7, #1
 80083b6:	f040 8081 	bne.w	80084bc <HAL_I2C_Master_Transmit+0x1e4>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083ba:	6963      	ldr	r3, [r4, #20]
 80083bc:	061a      	lsls	r2, r3, #24
 80083be:	d441      	bmi.n	8008444 <HAL_I2C_Master_Transmit+0x16c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083c0:	6963      	ldr	r3, [r4, #20]
 80083c2:	055b      	lsls	r3, r3, #21
 80083c4:	d5f9      	bpl.n	80083ba <HAL_I2C_Master_Transmit+0xe2>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80083c6:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80083c8:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083ca:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80083ce:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80083d0:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80083d2:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083d6:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083da:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083dc:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083e0:	f043 0304 	orr.w	r3, r3, #4
 80083e4:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083e6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	f000 80e6 	beq.w	80085ba <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 80083ee:	2001      	movs	r0, #1
}
 80083f0:	b003      	add	sp, #12
 80083f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083f6:	6963      	ldr	r3, [r4, #20]
 80083f8:	07d9      	lsls	r1, r3, #31
 80083fa:	d4c0      	bmi.n	800837e <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083fc:	f7fe fe52 	bl	80070a4 <HAL_GetTick>
 8008400:	1b80      	subs	r0, r0, r6
 8008402:	4287      	cmp	r7, r0
 8008404:	f0c0 80b3 	bcc.w	800856e <HAL_I2C_Master_Transmit+0x296>
 8008408:	2f00      	cmp	r7, #0
 800840a:	f000 80b0 	beq.w	800856e <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800840e:	682c      	ldr	r4, [r5, #0]
 8008410:	e7b0      	b.n	8008374 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	f043 0301 	orr.w	r3, r3, #1
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	e788      	b.n	800832e <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800841c:	ea4f 13e8 	mov.w	r3, r8, asr #7
 8008420:	f003 0306 	and.w	r3, r3, #6
 8008424:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8008428:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800842a:	1c7b      	adds	r3, r7, #1
 800842c:	d003      	beq.n	8008436 <HAL_I2C_Master_Transmit+0x15e>
 800842e:	e0b5      	b.n	800859c <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008430:	6963      	ldr	r3, [r4, #20]
 8008432:	0559      	lsls	r1, r3, #21
 8008434:	d473      	bmi.n	800851e <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008436:	6963      	ldr	r3, [r4, #20]
 8008438:	0718      	lsls	r0, r3, #28
 800843a:	d5f9      	bpl.n	8008430 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800843c:	fa5f f388 	uxtb.w	r3, r8
 8008440:	6123      	str	r3, [r4, #16]
 8008442:	e7a3      	b.n	800838c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008444:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8008446:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800844a:	4601      	mov	r1, r0
 800844c:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 8008450:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008454:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8008456:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8008458:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800845a:	3b01      	subs	r3, #1
 800845c:	b29b      	uxth	r3, r3
 800845e:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008460:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 8008462:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008464:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8008466:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008468:	d50c      	bpl.n	8008484 <HAL_I2C_Master_Transmit+0x1ac>
 800846a:	b15a      	cbz	r2, 8008484 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800846c:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 800846e:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008472:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8008474:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8008476:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8008478:	3b01      	subs	r3, #1
 800847a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800847c:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8008480:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8008482:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8008484:	1c78      	adds	r0, r7, #1
 8008486:	d129      	bne.n	80084dc <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008488:	6963      	ldr	r3, [r4, #20]
 800848a:	0759      	lsls	r1, r3, #29
 800848c:	d405      	bmi.n	800849a <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800848e:	6963      	ldr	r3, [r4, #20]
 8008490:	055a      	lsls	r2, r3, #21
 8008492:	d498      	bmi.n	80083c6 <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008494:	6963      	ldr	r3, [r4, #20]
 8008496:	0759      	lsls	r1, r3, #29
 8008498:	d5f9      	bpl.n	800848e <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 800849a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800849c:	2b00      	cmp	r3, #0
 800849e:	d189      	bne.n	80083b4 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084a0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80084a2:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084a4:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80084a6:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084ac:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80084ae:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80084b2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084b6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 80084ba:	e71c      	b.n	80082f6 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084bc:	6963      	ldr	r3, [r4, #20]
 80084be:	0618      	lsls	r0, r3, #24
 80084c0:	d4c0      	bmi.n	8008444 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084c2:	6963      	ldr	r3, [r4, #20]
 80084c4:	0558      	lsls	r0, r3, #21
 80084c6:	f53f af7e 	bmi.w	80083c6 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ca:	f7fe fdeb 	bl	80070a4 <HAL_GetTick>
 80084ce:	1b80      	subs	r0, r0, r6
 80084d0:	4287      	cmp	r7, r0
 80084d2:	d379      	bcc.n	80085c8 <HAL_I2C_Master_Transmit+0x2f0>
 80084d4:	2f00      	cmp	r7, #0
 80084d6:	d077      	beq.n	80085c8 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084d8:	682c      	ldr	r4, [r5, #0]
 80084da:	e76b      	b.n	80083b4 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084dc:	6963      	ldr	r3, [r4, #20]
 80084de:	075b      	lsls	r3, r3, #29
 80084e0:	d4db      	bmi.n	800849a <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084e2:	6963      	ldr	r3, [r4, #20]
 80084e4:	055b      	lsls	r3, r3, #21
 80084e6:	f53f af6e 	bmi.w	80083c6 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ea:	f7fe fddb 	bl	80070a4 <HAL_GetTick>
 80084ee:	1b80      	subs	r0, r0, r6
 80084f0:	4287      	cmp	r7, r0
 80084f2:	d369      	bcc.n	80085c8 <HAL_I2C_Master_Transmit+0x2f0>
 80084f4:	2f00      	cmp	r7, #0
 80084f6:	d067      	beq.n	80085c8 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084f8:	682c      	ldr	r4, [r5, #0]
 80084fa:	e7c3      	b.n	8008484 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 80084fc:	2320      	movs	r3, #32
      return HAL_BUSY;
 80084fe:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008500:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008504:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008508:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800850c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800850e:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008512:	f043 0320 	orr.w	r3, r3, #32
 8008516:	642b      	str	r3, [r5, #64]	; 0x40
}
 8008518:	b003      	add	sp, #12
 800851a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 800851e:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008520:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8008524:	2120      	movs	r1, #32
      return HAL_ERROR;
 8008526:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800852e:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008530:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008532:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008534:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008538:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800853c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800853e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008542:	f043 0304 	orr.w	r3, r3, #4
 8008546:	642b      	str	r3, [r5, #64]	; 0x40
}
 8008548:	b003      	add	sp, #12
 800854a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800854e:	6963      	ldr	r3, [r4, #20]
 8008550:	079b      	lsls	r3, r3, #30
 8008552:	f53f af25 	bmi.w	80083a0 <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008556:	6963      	ldr	r3, [r4, #20]
 8008558:	055b      	lsls	r3, r3, #21
 800855a:	d4e0      	bmi.n	800851e <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800855c:	f7fe fda2 	bl	80070a4 <HAL_GetTick>
 8008560:	1b80      	subs	r0, r0, r6
 8008562:	4287      	cmp	r7, r0
 8008564:	d33e      	bcc.n	80085e4 <HAL_I2C_Master_Transmit+0x30c>
 8008566:	2f00      	cmp	r7, #0
 8008568:	d03c      	beq.n	80085e4 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800856a:	682c      	ldr	r4, [r5, #0]
 800856c:	e70e      	b.n	800838c <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800856e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008570:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008572:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008574:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008578:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800857c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800857e:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008580:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8008584:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008588:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800858a:	680b      	ldr	r3, [r1, #0]
 800858c:	05da      	lsls	r2, r3, #23
 800858e:	f57f af2e 	bpl.w	80083ee <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008592:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8008596:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008598:	642b      	str	r3, [r5, #64]	; 0x40
 800859a:	e6ac      	b.n	80082f6 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800859c:	6963      	ldr	r3, [r4, #20]
 800859e:	071a      	lsls	r2, r3, #28
 80085a0:	f53f af4c 	bmi.w	800843c <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085a4:	6963      	ldr	r3, [r4, #20]
 80085a6:	055a      	lsls	r2, r3, #21
 80085a8:	d4b9      	bmi.n	800851e <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085aa:	f7fe fd7b 	bl	80070a4 <HAL_GetTick>
 80085ae:	1b83      	subs	r3, r0, r6
 80085b0:	429f      	cmp	r7, r3
 80085b2:	d317      	bcc.n	80085e4 <HAL_I2C_Master_Transmit+0x30c>
 80085b4:	b1b7      	cbz	r7, 80085e4 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085b6:	682c      	ldr	r4, [r5, #0]
 80085b8:	e737      	b.n	800842a <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ba:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 80085bc:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085be:	6813      	ldr	r3, [r2, #0]
 80085c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	e696      	b.n	80082f6 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80085c8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80085ca:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80085cc:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80085ce:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80085d2:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80085d6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80085d8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80085dc:	f043 0320 	orr.w	r3, r3, #32
 80085e0:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80085e2:	e700      	b.n	80083e6 <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085e4:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80085e6:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085e8:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085ea:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085ee:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085f2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80085f4:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085f6:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80085fa:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085fe:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8008600:	e679      	b.n	80082f6 <HAL_I2C_Master_Transmit+0x1e>
 8008602:	bf00      	nop

08008604 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008604:	2800      	cmp	r0, #0
 8008606:	d05d      	beq.n	80086c4 <HAL_PCD_Init+0xc0>
{
 8008608:	b570      	push	{r4, r5, r6, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800860a:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800860e:	4604      	mov	r4, r0
{
 8008610:	b086      	sub	sp, #24
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008612:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008616:	2b00      	cmp	r3, #0
 8008618:	d04f      	beq.n	80086ba <HAL_PCD_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800861a:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800861c:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 800861e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8008622:	f002 f831 	bl	800a688 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008626:	6860      	ldr	r0, [r4, #4]
 8008628:	b368      	cbz	r0, 8008686 <HAL_PCD_Init+0x82>
 800862a:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800862c:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008630:	4611      	mov	r1, r2
    hpcd->IN_ep[i].is_in = 1U;
 8008632:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8008636:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800863a:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 800863e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008642:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008644:	fa5f f28c 	uxtb.w	r2, ip
 8008648:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 800864a:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 800864e:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008652:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8008656:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008658:	d3eb      	bcc.n	8008632 <HAL_PCD_Init+0x2e>
 800865a:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800865c:	4611      	mov	r1, r2
 800865e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8008662:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008666:	f102 0c01 	add.w	ip, r2, #1
    hpcd->OUT_ep[i].num = i;
 800866a:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800866e:	fa5f f28c 	uxtb.w	r2, ip
 8008672:	4282      	cmp	r2, r0
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008674:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8008678:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800867c:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008680:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008684:	d3eb      	bcc.n	800865e <HAL_PCD_Init+0x5a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008686:	46a4      	mov	ip, r4
 8008688:	46ee      	mov	lr, sp
 800868a:	f85c 6b10 	ldr.w	r6, [ip], #16
 800868e:	1d25      	adds	r5, r4, #4
 8008690:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008694:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008698:	f8dc 3000 	ldr.w	r3, [ip]
 800869c:	4630      	mov	r0, r6
 800869e:	f8ce 3000 	str.w	r3, [lr]
 80086a2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80086a6:	f001 fff9 	bl	800a69c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80086aa:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80086ac:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80086ae:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80086b2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 80086b6:	b006      	add	sp, #24
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80086ba:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80086be:	f003 fd1b 	bl	800c0f8 <HAL_PCD_MspInit>
 80086c2:	e7aa      	b.n	800861a <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 80086c4:	2001      	movs	r0, #1
}
 80086c6:	4770      	bx	lr

080086c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80086c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80086ca:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d012      	beq.n	80086f8 <HAL_PCD_Start+0x30>
 80086d2:	4604      	mov	r4, r0
 80086d4:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 80086d6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80086d8:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80086dc:	f001 ffca 	bl	800a674 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80086e0:	4629      	mov	r1, r5
 80086e2:	4620      	mov	r0, r4
 80086e4:	f003 fcfc 	bl	800c0e0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80086e8:	6820      	ldr	r0, [r4, #0]
 80086ea:	f002 fdc7 	bl	800b27c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80086ee:	2300      	movs	r3, #0
 80086f0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8

  return HAL_OK;
 80086f4:	4618      	mov	r0, r3
}
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80086f8:	2002      	movs	r0, #2
}
 80086fa:	bd38      	pop	{r3, r4, r5, pc}

080086fc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80086fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8008702:	6800      	ldr	r0, [r0, #0]
 8008704:	f002 fdbc 	bl	800b280 <USB_ReadInterrupts>
 8008708:	0406      	lsls	r6, r0, #16
 800870a:	d443      	bmi.n	8008794 <HAL_PCD_IRQHandler+0x98>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800870c:	6820      	ldr	r0, [r4, #0]
 800870e:	f002 fdb7 	bl	800b280 <USB_ReadInterrupts>
 8008712:	0545      	lsls	r5, r0, #21
 8008714:	f100 8180 	bmi.w	8008a18 <HAL_PCD_IRQHandler+0x31c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8008718:	6820      	ldr	r0, [r4, #0]
 800871a:	f002 fdb1 	bl	800b280 <USB_ReadInterrupts>
 800871e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008722:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8008724:	d007      	beq.n	8008736 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008726:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800872a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800872e:	041b      	lsls	r3, r3, #16
 8008730:	0c1b      	lsrs	r3, r3, #16
 8008732:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8008736:	f002 fda3 	bl	800b280 <USB_ReadInterrupts>
 800873a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800873e:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8008740:	d007      	beq.n	8008752 <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008742:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8008746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800874a:	041b      	lsls	r3, r3, #16
 800874c:	0c1b      	lsrs	r3, r3, #16
 800874e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8008752:	f002 fd95 	bl	800b280 <USB_ReadInterrupts>
 8008756:	04c0      	lsls	r0, r0, #19
 8008758:	f100 81f6 	bmi.w	8008b48 <HAL_PCD_IRQHandler+0x44c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800875c:	6820      	ldr	r0, [r4, #0]
 800875e:	f002 fd8f 	bl	800b280 <USB_ReadInterrupts>
 8008762:	0501      	lsls	r1, r0, #20
 8008764:	f100 81d5 	bmi.w	8008b12 <HAL_PCD_IRQHandler+0x416>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8008768:	6820      	ldr	r0, [r4, #0]
 800876a:	f002 fd89 	bl	800b280 <USB_ReadInterrupts>
 800876e:	0582      	lsls	r2, r0, #22
 8008770:	f100 81c2 	bmi.w	8008af8 <HAL_PCD_IRQHandler+0x3fc>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8008774:	6820      	ldr	r0, [r4, #0]
 8008776:	f002 fd83 	bl	800b280 <USB_ReadInterrupts>
 800877a:	05c3      	lsls	r3, r0, #23
 800877c:	d508      	bpl.n	8008790 <HAL_PCD_IRQHandler+0x94>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800877e:	6822      	ldr	r2, [r4, #0]
 8008780:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008788:	041b      	lsls	r3, r3, #16
 800878a:	0c1b      	lsrs	r3, r3, #16
 800878c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8008790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008794:	6822      	ldr	r2, [r4, #0]
 8008796:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800879a:	4610      	mov	r0, r2
 800879c:	041d      	lsls	r5, r3, #16
 800879e:	d5b6      	bpl.n	800870e <HAL_PCD_IRQHandler+0x12>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80087a0:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8008af0 <HAL_PCD_IRQHandler+0x3f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80087a4:	f8df a34c 	ldr.w	sl, [pc, #844]	; 8008af4 <HAL_PCD_IRQHandler+0x3f8>
 80087a8:	e011      	b.n	80087ce <HAL_PCD_IRQHandler+0xd2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80087aa:	f011 0110 	ands.w	r1, r1, #16
 80087ae:	f000 8151 	beq.w	8008a54 <HAL_PCD_IRQHandler+0x358>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80087b2:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80087b4:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80087b8:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80087ba:	f040 8176 	bne.w	8008aaa <HAL_PCD_IRQHandler+0x3ae>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80087be:	0419      	lsls	r1, r3, #16
 80087c0:	f100 821b 	bmi.w	8008bfa <HAL_PCD_IRQHandler+0x4fe>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80087c4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80087c8:	041e      	lsls	r6, r3, #16
 80087ca:	f140 811f 	bpl.w	8008a0c <HAL_PCD_IRQHandler+0x310>
    wIstr = hpcd->Instance->ISTR;
 80087ce:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 80087d2:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 80087d4:	f015 050f 	ands.w	r5, r5, #15
 80087d8:	d0e7      	beq.n	80087aa <HAL_PCD_IRQHandler+0xae>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80087da:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80087de:	00ae      	lsls	r6, r5, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80087e0:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80087e2:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80087e6:	f100 80a0 	bmi.w	800892a <HAL_PCD_IRQHandler+0x22e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80087ea:	f018 0f80 	tst.w	r8, #128	; 0x80
 80087ee:	d0e9      	beq.n	80087c4 <HAL_PCD_IRQHandler+0xc8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80087f0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80087f4:	1977      	adds	r7, r6, r5
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	ea03 0309 	and.w	r3, r3, r9
 80087fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008800:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8008804:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8008808:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800880c:	2b03      	cmp	r3, #3
 800880e:	f000 80d0 	beq.w	80089b2 <HAL_PCD_IRQHandler+0x2b6>
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 80cd 	beq.w	80089b2 <HAL_PCD_IRQHandler+0x2b6>
 8008818:	2b02      	cmp	r3, #2
 800881a:	d103      	bne.n	8008824 <HAL_PCD_IRQHandler+0x128>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800881c:	f418 7f80 	tst.w	r8, #256	; 0x100
 8008820:	f000 80c7 	beq.w	80089b2 <HAL_PCD_IRQHandler+0x2b6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008824:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008828:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800882c:	b29b      	uxth	r3, r3
 800882e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008832:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008836:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800883a:	f000 8255 	beq.w	8008ce8 <HAL_PCD_IRQHandler+0x5ec>
    if (ep->xfer_len > TxByteNbre)
 800883e:	eb06 0c05 	add.w	ip, r6, r5
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008842:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 8008846:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 800884a:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800884e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 8008852:	459e      	cmp	lr, r3
 8008854:	f240 834b 	bls.w	8008eee <HAL_PCD_IRQHandler+0x7f2>
      ep->xfer_len -= TxByteNbre;
 8008858:	ebae 0e03 	sub.w	lr, lr, r3
 800885c:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8008860:	f1be 0f00 	cmp.w	lr, #0
 8008864:	f000 8346 	beq.w	8008ef4 <HAL_PCD_IRQHandler+0x7f8>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008868:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 800886c:	d00f      	beq.n	800888e <HAL_PCD_IRQHandler+0x192>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800886e:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 8008872:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8008876:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800887a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800887e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008882:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 8008886:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800888a:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800888e:	eb06 0e05 	add.w	lr, r6, r5
 8008892:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8008896:	f89e c04c 	ldrb.w	ip, [lr, #76]	; 0x4c
 800889a:	f1bc 0f01 	cmp.w	ip, #1
 800889e:	f040 8316 	bne.w	8008ece <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 80088a2:	f8de 203c 	ldr.w	r2, [lr, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80088a6:	f8de 8038 	ldr.w	r8, [lr, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80088aa:	eb02 0c03 	add.w	ip, r2, r3
        ep->xfer_count += TxByteNbre;
 80088ae:	f8de 2044 	ldr.w	r2, [lr, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80088b2:	f8ce c03c 	str.w	ip, [lr, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80088b6:	441a      	add	r2, r3
 80088b8:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80088bc:	f8de 2048 	ldr.w	r2, [lr, #72]	; 0x48
 80088c0:	4542      	cmp	r2, r8
 80088c2:	f0c0 83e4 	bcc.w	800908e <HAL_PCD_IRQHandler+0x992>
          ep->xfer_len_db -= len;
 80088c6:	eba2 0208 	sub.w	r2, r2, r8
 80088ca:	f8ce 2048 	str.w	r2, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80088ce:	fa1f f388 	uxth.w	r3, r8
 80088d2:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 80088d6:	f1be 0f00 	cmp.w	lr, #0
 80088da:	f040 83cb 	bne.w	8009074 <HAL_PCD_IRQHandler+0x978>
 80088de:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80088e2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80088e6:	f201 4e04 	addw	lr, r1, #1028	; 0x404
 80088ea:	b292      	uxth	r2, r2
 80088ec:	eb0e 0102 	add.w	r1, lr, r2
 80088f0:	f1b8 0f00 	cmp.w	r8, #0
 80088f4:	f040 83f8 	bne.w	80090e8 <HAL_PCD_IRQHandler+0x9ec>
 80088f8:	f83e 1002 	ldrh.w	r1, [lr, r2]
 80088fc:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8008900:	0409      	lsls	r1, r1, #16
 8008902:	0c09      	lsrs	r1, r1, #16
 8008904:	f82e 1002 	strh.w	r1, [lr, r2]
 8008908:	f83e 1002 	ldrh.w	r1, [lr, r2]
 800890c:	b289      	uxth	r1, r1
 800890e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008912:	f82e 1002 	strh.w	r1, [lr, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008916:	1972      	adds	r2, r6, r5
 8008918:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800891c:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800891e:	4661      	mov	r1, ip
 8008920:	f002 fcb2 	bl	800b288 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	4602      	mov	r2, r0
 8008928:	e2d1      	b.n	8008ece <HAL_PCD_IRQHandler+0x7d2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800892a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800892e:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8008932:	1971      	adds	r1, r6, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008934:	4013      	ands	r3, r2
 8008936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893a:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800893e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008942:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8008946:	2b00      	cmp	r3, #0
 8008948:	f040 811c 	bne.w	8008b84 <HAL_PCD_IRQHandler+0x488>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800894c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008950:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8008954:	b29b      	uxth	r3, r3
 8008956:	3306      	adds	r3, #6
 8008958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800895c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008960:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8008964:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8008968:	461f      	mov	r7, r3
          if (count != 0U)
 800896a:	2b00      	cmp	r3, #0
 800896c:	f040 81ac 	bne.w	8008cc8 <HAL_PCD_IRQHandler+0x5cc>
        ep->xfer_count += count;
 8008970:	1971      	adds	r1, r6, r5
 8008972:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8008976:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800897a:	00c9      	lsls	r1, r1, #3
 800897c:	443a      	add	r2, r7
 800897e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8008982:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8008986:	443a      	add	r2, r7
 8008988:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800898c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8008990:	b122      	cbz	r2, 800899c <HAL_PCD_IRQHandler+0x2a0>
 8008992:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8008996:	42bb      	cmp	r3, r7
 8008998:	f240 819d 	bls.w	8008cd6 <HAL_PCD_IRQHandler+0x5da>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800899c:	1973      	adds	r3, r6, r5
 800899e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80089a2:	4620      	mov	r0, r4
 80089a4:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80089a8:	f003 fbce 	bl	800c148 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80089ac:	6820      	ldr	r0, [r4, #0]
 80089ae:	4602      	mov	r2, r0
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80089b0:	e71b      	b.n	80087ea <HAL_PCD_IRQHandler+0xee>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80089b2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80089b6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          if (ep->xfer_len > TxByteNbre)
 80089c0:	442e      	add	r6, r5
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80089c2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80089c6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
          if (ep->xfer_len > TxByteNbre)
 80089ca:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 80089ce:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80089d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089d4:	429a      	cmp	r2, r3
 80089d6:	f240 8108 	bls.w	8008bea <HAL_PCD_IRQHandler+0x4ee>
            ep->xfer_len -= TxByteNbre;
 80089da:	1ad2      	subs	r2, r2, r3
 80089dc:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80089de:	2a00      	cmp	r2, #0
 80089e0:	f000 8105 	beq.w	8008bee <HAL_PCD_IRQHandler+0x4f2>
            ep->xfer_buff += TxByteNbre;
 80089e4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 80089e6:	3501      	adds	r5, #1
            ep->xfer_buff += TxByteNbre;
 80089e8:	441a      	add	r2, r3
 80089ea:	63f2      	str	r2, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 80089ec:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 80089ee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 80089f2:	4413      	add	r3, r2
 80089f4:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80089f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80089fa:	f002 f8b7 	bl	800ab6c <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80089fe:	6820      	ldr	r0, [r4, #0]
 8008a00:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8008a04:	4602      	mov	r2, r0
 8008a06:	041e      	lsls	r6, r3, #16
 8008a08:	f53f aee1 	bmi.w	80087ce <HAL_PCD_IRQHandler+0xd2>
 8008a0c:	4610      	mov	r0, r2
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8008a0e:	f002 fc37 	bl	800b280 <USB_ReadInterrupts>
 8008a12:	0545      	lsls	r5, r0, #21
 8008a14:	f57f ae80 	bpl.w	8008718 <HAL_PCD_IRQHandler+0x1c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008a18:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8008a1a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008a1c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a24:	041b      	lsls	r3, r3, #16
 8008a26:	0c1b      	lsrs	r3, r3, #16
 8008a28:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8008a2c:	f003 fba4 	bl	800c178 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8008a30:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	f43f ae6f 	beq.w	8008718 <HAL_PCD_IRQHandler+0x1c>
  hpcd->USB_Address = address;
 8008a3a:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8008a3c:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008a3e:	4629      	mov	r1, r5
 8008a40:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008a42:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8008a46:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008a4a:	f002 fc11 	bl	800b270 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008a4e:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8008a52:	e661      	b.n	8008718 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008a54:	8803      	ldrh	r3, [r0, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	ea03 0309 	and.w	r3, r3, r9
 8008a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a60:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008a62:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008a66:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a70:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008a74:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8008a78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a7e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8008a80:	4413      	add	r3, r2
 8008a82:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008a84:	4620      	mov	r0, r4
 8008a86:	f003 fb69 	bl	800c15c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008a8a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8008a8e:	b363      	cbz	r3, 8008aea <HAL_PCD_IRQHandler+0x3ee>
 8008a90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a92:	bb53      	cbnz	r3, 8008aea <HAL_PCD_IRQHandler+0x3ee>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008a94:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008a98:	6820      	ldr	r0, [r4, #0]
 8008a9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a9e:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 8008aa2:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 8008aa4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8008aa8:	e68c      	b.n	80087c4 <HAL_PCD_IRQHandler+0xc8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008aaa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008aae:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ab8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008abc:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008ac0:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8008ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008ac8:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008acc:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8008ad0:	f002 fbea 	bl	800b2a8 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008ad4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008ad8:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8008ada:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008adc:	8811      	ldrh	r1, [r2, #0]
 8008ade:	400b      	ands	r3, r1
 8008ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae4:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8008ae6:	f003 fb27 	bl	800c138 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008aea:	6820      	ldr	r0, [r4, #0]
 8008aec:	4602      	mov	r2, r0
 8008aee:	e669      	b.n	80087c4 <HAL_PCD_IRQHandler+0xc8>
 8008af0:	ffff8f0f 	.word	0xffff8f0f
 8008af4:	ffff8fbf 	.word	0xffff8fbf
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008af8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8008afa:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008afc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b04:	041b      	lsls	r3, r3, #16
 8008b06:	0c1b      	lsrs	r3, r3, #16
 8008b08:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8008b0c:	f003 fb30 	bl	800c170 <HAL_PCD_SOFCallback>
 8008b10:	e630      	b.n	8008774 <HAL_PCD_IRQHandler+0x78>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008b12:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SuspendCallback(hpcd);
 8008b14:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008b16:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	f043 0308 	orr.w	r3, r3, #8
 8008b20:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008b24:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b2c:	041b      	lsls	r3, r3, #16
 8008b2e:	0c1b      	lsrs	r3, r3, #16
 8008b30:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008b34:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	f043 0304 	orr.w	r3, r3, #4
 8008b3e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8008b42:	f003 fb2b 	bl	800c19c <HAL_PCD_SuspendCallback>
 8008b46:	e60f      	b.n	8008768 <HAL_PCD_IRQHandler+0x6c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008b48:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8008b4a:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008b4c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008b50:	f023 0304 	bic.w	r3, r3, #4
 8008b54:	041b      	lsls	r3, r3, #16
 8008b56:	0c1b      	lsrs	r3, r3, #16
 8008b58:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008b5c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008b60:	f023 0308 	bic.w	r3, r3, #8
 8008b64:	041b      	lsls	r3, r3, #16
 8008b66:	0c1b      	lsrs	r3, r3, #16
 8008b68:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8008b6c:	f003 fb26 	bl	800c1bc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008b70:	6820      	ldr	r0, [r4, #0]
 8008b72:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8008b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b7a:	041b      	lsls	r3, r3, #16
 8008b7c:	0c1b      	lsrs	r3, r3, #16
 8008b7e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8008b82:	e5ec      	b.n	800875e <HAL_PCD_IRQHandler+0x62>
          if (ep->type == EP_TYPE_BULK)
 8008b84:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	f000 8120 	beq.w	8008dce <HAL_PCD_IRQHandler+0x6d2>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008b8e:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8008b92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9e:	041b      	lsls	r3, r3, #16
 8008ba0:	0c1b      	lsrs	r3, r3, #16
 8008ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ba6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008baa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008bae:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8008bb2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008bb6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008bba:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008bbe:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008bc0:	d06e      	beq.n	8008ca0 <HAL_PCD_IRQHandler+0x5a4>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008bc2:	3302      	adds	r3, #2
 8008bc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bc8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008bcc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8008bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8008bd4:	461f      	mov	r7, r3
              if (count != 0U)
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f43f aeca 	beq.w	8008970 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008bdc:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8008be0:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008be4:	f002 fb60 	bl	800b2a8 <USB_ReadPMA>
 8008be8:	e6c2      	b.n	8008970 <HAL_PCD_IRQHandler+0x274>
 8008bea:	2300      	movs	r3, #0
 8008bec:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f003 fab4 	bl	800c15c <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008bf4:	6820      	ldr	r0, [r4, #0]
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	e5e4      	b.n	80087c4 <HAL_PCD_IRQHandler+0xc8>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008bfa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008bfe:	8802      	ldrh	r2, [r0, #0]
 8008c00:	4013      	ands	r3, r2
 8008c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c06:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008c08:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008c0c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c16:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008c1a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8008c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c22:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008c26:	b193      	cbz	r3, 8008c4e <HAL_PCD_IRQHandler+0x552>
 8008c28:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8008c2c:	b179      	cbz	r1, 8008c4e <HAL_PCD_IRQHandler+0x552>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008c2e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8008c32:	f002 fb39 	bl	800b2a8 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8008c36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c3a:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008c3e:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8008c40:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008c42:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8008c44:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008c48:	f003 fa7e 	bl	800c148 <HAL_PCD_DataOutStageCallback>
 8008c4c:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8008c4e:	8803      	ldrh	r3, [r0, #0]
 8008c50:	4602      	mov	r2, r0
 8008c52:	051b      	lsls	r3, r3, #20
 8008c54:	f53f adb6 	bmi.w	80087c4 <HAL_PCD_IRQHandler+0xc8>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008c58:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008c5c:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 8008c66:	2900      	cmp	r1, #0
 8008c68:	f040 80a6 	bne.w	8008db8 <HAL_PCD_IRQHandler+0x6bc>
 8008c6c:	5ae9      	ldrh	r1, [r5, r3]
 8008c6e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8008c72:	0409      	lsls	r1, r1, #16
 8008c74:	0c09      	lsrs	r1, r1, #16
 8008c76:	52e9      	strh	r1, [r5, r3]
 8008c78:	5ae9      	ldrh	r1, [r5, r3]
 8008c7a:	b289      	uxth	r1, r1
 8008c7c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008c80:	52e9      	strh	r1, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008c82:	8803      	ldrh	r3, [r0, #0]
 8008c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c8c:	041b      	lsls	r3, r3, #16
 8008c8e:	0c1b      	lsrs	r3, r3, #16
 8008c90:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9c:	8003      	strh	r3, [r0, #0]
 8008c9e:	e591      	b.n	80087c4 <HAL_PCD_IRQHandler+0xc8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008ca0:	3306      	adds	r3, #6
 8008ca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ca6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008caa:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8008cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8008cb2:	461f      	mov	r7, r3
              if (count != 0U)
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f43f ae5b 	beq.w	8008970 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008cba:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8008cbe:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008cc2:	f002 faf1 	bl	800b2a8 <USB_ReadPMA>
 8008cc6:	e653      	b.n	8008970 <HAL_PCD_IRQHandler+0x274>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008cc8:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8008ccc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008cd0:	f002 faea 	bl	800b2a8 <USB_ReadPMA>
 8008cd4:	e64c      	b.n	8008970 <HAL_PCD_IRQHandler+0x274>
        ep = &hpcd->OUT_ep[epindex];
 8008cd6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8008cda:	6820      	ldr	r0, [r4, #0]
 8008cdc:	4421      	add	r1, r4
 8008cde:	f001 ff45 	bl	800ab6c <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008ce2:	6820      	ldr	r0, [r4, #0]
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	e580      	b.n	80087ea <HAL_PCD_IRQHandler+0xee>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008ce8:	f8b3 e40c 	ldrh.w	lr, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 8008cec:	1973      	adds	r3, r6, r5
 8008cee:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008cf2:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008cf6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8008cfa:	45f3      	cmp	fp, lr
 8008cfc:	f0c0 80a5 	bcc.w	8008e4a <HAL_PCD_IRQHandler+0x74e>
      ep->xfer_len -= TxByteNbre;
 8008d00:	ebab 0c0e 	sub.w	ip, fp, lr
 8008d04:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8008d08:	f1bc 0f00 	cmp.w	ip, #0
 8008d0c:	f000 809f 	beq.w	8008e4e <HAL_PCD_IRQHandler+0x752>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008d10:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8008d14:	d10d      	bne.n	8008d32 <HAL_PCD_IRQHandler+0x636>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008d16:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8008d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d22:	041b      	lsls	r3, r3, #16
 8008d24:	0c1b      	lsrs	r3, r3, #16
 8008d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d2e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8008d32:	1973      	adds	r3, r6, r5
 8008d34:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008d38:	f893 c04c 	ldrb.w	ip, [r3, #76]	; 0x4c
 8008d3c:	f1bc 0f01 	cmp.w	ip, #1
 8008d40:	f040 80c5 	bne.w	8008ece <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 8008d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8008d46:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8008d4a:	eb02 0c0e 	add.w	ip, r2, lr
        ep->xfer_count += TxByteNbre;
 8008d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8008d50:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8008d54:	4472      	add	r2, lr
 8008d56:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8008d58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d5a:	4542      	cmp	r2, r8
 8008d5c:	f0c0 81ab 	bcc.w	80090b6 <HAL_PCD_IRQHandler+0x9ba>
          ep->xfer_len_db -= len;
 8008d60:	eba2 0208 	sub.w	r2, r2, r8
 8008d64:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008d66:	fa1f fe88 	uxth.w	lr, r8
 8008d6a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f040 8194 	bne.w	800909c <HAL_PCD_IRQHandler+0x9a0>
 8008d74:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8008d78:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008d7c:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8008d80:	b292      	uxth	r2, r2
 8008d82:	188b      	adds	r3, r1, r2
 8008d84:	f1b8 0f00 	cmp.w	r8, #0
 8008d88:	f040 81d0 	bne.w	800912c <HAL_PCD_IRQHandler+0xa30>
 8008d8c:	5a8b      	ldrh	r3, [r1, r2]
 8008d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d92:	041b      	lsls	r3, r3, #16
 8008d94:	0c1b      	lsrs	r3, r3, #16
 8008d96:	528b      	strh	r3, [r1, r2]
 8008d98:	5a8b      	ldrh	r3, [r1, r2]
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008da0:	528b      	strh	r3, [r1, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008da2:	1972      	adds	r2, r6, r5
 8008da4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8008da8:	4673      	mov	r3, lr
 8008daa:	4661      	mov	r1, ip
 8008dac:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008dae:	f002 fa6b 	bl	800b288 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008db2:	6820      	ldr	r0, [r4, #0]
 8008db4:	4602      	mov	r2, r0
 8008db6:	e08a      	b.n	8008ece <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008db8:	293e      	cmp	r1, #62	; 0x3e
 8008dba:	f200 80cb 	bhi.w	8008f54 <HAL_PCD_IRQHandler+0x858>
 8008dbe:	084e      	lsrs	r6, r1, #1
 8008dc0:	07cf      	lsls	r7, r1, #31
 8008dc2:	bf48      	it	mi
 8008dc4:	3601      	addmi	r6, #1
 8008dc6:	02b1      	lsls	r1, r6, #10
 8008dc8:	b289      	uxth	r1, r1
 8008dca:	52e9      	strh	r1, [r5, r3]
 8008dcc:	e759      	b.n	8008c82 <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008dce:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008dd2:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008dd6:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008dd8:	f000 80c7 	beq.w	8008f6a <HAL_PCD_IRQHandler+0x86e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008ddc:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8008de0:	3302      	adds	r3, #2
 8008de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008de6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008dea:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8008dee:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008df2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8008df6:	459c      	cmp	ip, r3
 8008df8:	461f      	mov	r7, r3
 8008dfa:	f0c0 8112 	bcc.w	8009022 <HAL_PCD_IRQHandler+0x926>
      ep->xfer_len -= count;
 8008dfe:	ebac 0c03 	sub.w	ip, ip, r3
 8008e02:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8008e06:	f1bc 0f00 	cmp.w	ip, #0
 8008e0a:	f000 810e 	beq.w	800902a <HAL_PCD_IRQHandler+0x92e>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008e0e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008e12:	d00d      	beq.n	8008e30 <HAL_PCD_IRQHandler+0x734>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008e14:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8008e18:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8008e1c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008e20:	0409      	lsls	r1, r1, #16
 8008e22:	0c09      	lsrs	r1, r1, #16
 8008e24:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008e28:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8008e2c:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 80c3 	beq.w	8008fbc <HAL_PCD_IRQHandler+0x8c0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008e36:	1971      	adds	r1, r6, r5
 8008e38:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008e3c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8008e40:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008e44:	f002 fa30 	bl	800b2a8 <USB_ReadPMA>
 8008e48:	e592      	b.n	8008970 <HAL_PCD_IRQHandler+0x274>
 8008e4a:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e4e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f040 80be 	bne.w	8008fd4 <HAL_PCD_IRQHandler+0x8d8>
 8008e58:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8008e5c:	010b      	lsls	r3, r1, #4
 8008e5e:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8008e62:	4406      	add	r6, r0
 8008e64:	b2ad      	uxth	r5, r5
 8008e66:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e6c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008e70:	0412      	lsls	r2, r2, #16
 8008e72:	0c12      	lsrs	r2, r2, #16
 8008e74:	5372      	strh	r2, [r6, r5]
 8008e76:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e78:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e7a:	b292      	uxth	r2, r2
 8008e7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e80:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e82:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8008e86:	b280      	uxth	r0, r0
 8008e88:	5a1a      	ldrh	r2, [r3, r0]
 8008e8a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008e8e:	0412      	lsls	r2, r2, #16
 8008e90:	0c12      	lsrs	r2, r2, #16
 8008e92:	521a      	strh	r2, [r3, r0]
 8008e94:	5a1a      	ldrh	r2, [r3, r0]
 8008e96:	b292      	uxth	r2, r2
 8008e98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e9c:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f003 f95c 	bl	800c15c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008ea4:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008ea8:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008eaa:	d183      	bne.n	8008db4 <HAL_PCD_IRQHandler+0x6b8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008eac:	4602      	mov	r2, r0
 8008eae:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8008eb2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8008eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ebe:	041b      	lsls	r3, r3, #16
 8008ec0:	0c1b      	lsrs	r3, r3, #16
 8008ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eca:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008ece:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8008ed2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	ea03 030a 	and.w	r3, r3, sl
 8008edc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8008ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 8008eec:	e46a      	b.n	80087c4 <HAL_PCD_IRQHandler+0xc8>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008ef4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d17f      	bne.n	8008ffc <HAL_PCD_IRQHandler+0x900>
 8008efc:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8008f00:	010b      	lsls	r3, r1, #4
 8008f02:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8008f06:	4406      	add	r6, r0
 8008f08:	b2ad      	uxth	r5, r5
 8008f0a:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f10:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008f14:	0412      	lsls	r2, r2, #16
 8008f16:	0c12      	lsrs	r2, r2, #16
 8008f18:	5372      	strh	r2, [r6, r5]
 8008f1a:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f1c:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f1e:	b292      	uxth	r2, r2
 8008f20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f24:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f26:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8008f2a:	b280      	uxth	r0, r0
 8008f2c:	5a1a      	ldrh	r2, [r3, r0]
 8008f2e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008f32:	0412      	lsls	r2, r2, #16
 8008f34:	0c12      	lsrs	r2, r2, #16
 8008f36:	521a      	strh	r2, [r3, r0]
 8008f38:	5a1a      	ldrh	r2, [r3, r0]
 8008f3a:	b292      	uxth	r2, r2
 8008f3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f40:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008f42:	4620      	mov	r0, r4
 8008f44:	f003 f90a 	bl	800c15c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008f48:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008f4c:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008f4e:	d1ad      	bne.n	8008eac <HAL_PCD_IRQHandler+0x7b0>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008f50:	4602      	mov	r2, r0
 8008f52:	e7bc      	b.n	8008ece <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008f54:	094e      	lsrs	r6, r1, #5
 8008f56:	06c9      	lsls	r1, r1, #27
 8008f58:	4989      	ldr	r1, [pc, #548]	; (8009180 <HAL_PCD_IRQHandler+0xa84>)
 8008f5a:	bf08      	it	eq
 8008f5c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8008f60:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8008f64:	b289      	uxth	r1, r1
 8008f66:	52e9      	strh	r1, [r5, r3]
 8008f68:	e68b      	b.n	8008c82 <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008f6a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8008f6e:	3306      	adds	r3, #6
 8008f70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f74:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008f78:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8008f7c:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8008f84:	459e      	cmp	lr, r3
 8008f86:	461f      	mov	r7, r3
 8008f88:	d360      	bcc.n	800904c <HAL_PCD_IRQHandler+0x950>
      ep->xfer_len -= count;
 8008f8a:	ebae 0e03 	sub.w	lr, lr, r3
 8008f8e:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8008f92:	f1be 0f00 	cmp.w	lr, #0
 8008f96:	d05b      	beq.n	8009050 <HAL_PCD_IRQHandler+0x954>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008f98:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008f9c:	d10d      	bne.n	8008fba <HAL_PCD_IRQHandler+0x8be>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008f9e:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8008fa2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8008fa6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008faa:	0409      	lsls	r1, r1, #16
 8008fac:	0c09      	lsrs	r1, r1, #16
 8008fae:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008fb2:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8008fb6:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8008fba:	b90b      	cbnz	r3, 8008fc0 <HAL_PCD_IRQHandler+0x8c4>
 8008fbc:	461f      	mov	r7, r3
 8008fbe:	e4d7      	b.n	8008970 <HAL_PCD_IRQHandler+0x274>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008fc0:	1971      	adds	r1, r6, r5
 8008fc2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008fc6:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8008fca:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008fce:	f002 f96b 	bl	800b2a8 <USB_ReadPMA>
 8008fd2:	e4cd      	b.n	8008970 <HAL_PCD_IRQHandler+0x274>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	f47f af62 	bne.w	8008e9e <HAL_PCD_IRQHandler+0x7a2>
 8008fda:	2500      	movs	r5, #0
 8008fdc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8008fe0:	010b      	lsls	r3, r1, #4
 8008fe2:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8008fe6:	b292      	uxth	r2, r2
 8008fe8:	4406      	add	r6, r0
 8008fea:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008fec:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8008ff0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ff4:	4403      	add	r3, r0
 8008ff6:	b292      	uxth	r2, r2
 8008ff8:	529d      	strh	r5, [r3, r2]
 8008ffa:	e750      	b.n	8008e9e <HAL_PCD_IRQHandler+0x7a2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d1a0      	bne.n	8008f42 <HAL_PCD_IRQHandler+0x846>
 8009000:	2500      	movs	r5, #0
 8009002:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009006:	010b      	lsls	r3, r1, #4
 8009008:	f203 4604 	addw	r6, r3, #1028	; 0x404
 800900c:	b292      	uxth	r2, r2
 800900e:	4406      	add	r6, r0
 8009010:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009012:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009016:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800901a:	4403      	add	r3, r0
 800901c:	b292      	uxth	r2, r2
 800901e:	529d      	strh	r5, [r3, r2]
 8009020:	e78f      	b.n	8008f42 <HAL_PCD_IRQHandler+0x846>
 8009022:	f04f 0c00 	mov.w	ip, #0
 8009026:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800902a:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800902e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009032:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009036:	0409      	lsls	r1, r1, #16
 8009038:	0c09      	lsrs	r1, r1, #16
 800903a:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800903e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009042:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009046:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 800904a:	e6e0      	b.n	8008e0e <HAL_PCD_IRQHandler+0x712>
 800904c:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009050:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009054:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009058:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800905c:	0409      	lsls	r1, r1, #16
 800905e:	0c09      	lsrs	r1, r1, #16
 8009060:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8009064:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009068:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800906c:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8009070:	e792      	b.n	8008f98 <HAL_PCD_IRQHandler+0x89c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009072:	b293      	uxth	r3, r2
 8009074:	f1be 0f01 	cmp.w	lr, #1
 8009078:	f47f ac4d 	bne.w	8008916 <HAL_PCD_IRQHandler+0x21a>
 800907c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009080:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009084:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8009088:	b292      	uxth	r2, r2
 800908a:	528b      	strh	r3, [r1, r2]
 800908c:	e443      	b.n	8008916 <HAL_PCD_IRQHandler+0x21a>
        else if (ep->xfer_len_db == 0U)
 800908e:	b9ba      	cbnz	r2, 80090c0 <HAL_PCD_IRQHandler+0x9c4>
          ep->xfer_fill_db = 0U;
 8009090:	4698      	mov	r8, r3
 8009092:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
 8009096:	e41c      	b.n	80088d2 <HAL_PCD_IRQHandler+0x1d6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009098:	fa1f fe82 	uxth.w	lr, r2
 800909c:	2b01      	cmp	r3, #1
 800909e:	f47f ae80 	bne.w	8008da2 <HAL_PCD_IRQHandler+0x6a6>
 80090a2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80090a6:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 80090aa:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	f822 e003 	strh.w	lr, [r2, r3]
 80090b4:	e675      	b.n	8008da2 <HAL_PCD_IRQHandler+0x6a6>
        else if (ep->xfer_len_db == 0U)
 80090b6:	bb22      	cbnz	r2, 8009102 <HAL_PCD_IRQHandler+0xa06>
          ep->xfer_fill_db = 0U;
 80090b8:	46f0      	mov	r8, lr
 80090ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80090be:	e654      	b.n	8008d6a <HAL_PCD_IRQHandler+0x66e>
          ep->xfer_fill_db = 0U;
 80090c0:	2300      	movs	r3, #0
 80090c2:	f88e 304c 	strb.w	r3, [lr, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80090c6:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80090ca:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 80090ce:	f1be 0f00 	cmp.w	lr, #0
 80090d2:	d1ce      	bne.n	8009072 <HAL_PCD_IRQHandler+0x976>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80090d4:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80090d6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80090da:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80090de:	b29b      	uxth	r3, r3
 80090e0:	f201 4104 	addw	r1, r1, #1028	; 0x404
 80090e4:	4419      	add	r1, r3
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80090e6:	b293      	uxth	r3, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80090e8:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 80090ec:	d82b      	bhi.n	8009146 <HAL_PCD_IRQHandler+0xa4a>
 80090ee:	ea4f 0258 	mov.w	r2, r8, lsr #1
 80090f2:	f018 0f01 	tst.w	r8, #1
 80090f6:	bf18      	it	ne
 80090f8:	3201      	addne	r2, #1
 80090fa:	0292      	lsls	r2, r2, #10
 80090fc:	b292      	uxth	r2, r2
 80090fe:	800a      	strh	r2, [r1, #0]
 8009100:	e409      	b.n	8008916 <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_len_db = 0U;
 8009102:	f04f 0e00 	mov.w	lr, #0
 8009106:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800910a:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800910e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1c0      	bne.n	8009098 <HAL_PCD_IRQHandler+0x99c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009116:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009118:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800911c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009120:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8009124:	b29b      	uxth	r3, r3
 8009126:	440b      	add	r3, r1
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009128:	fa1f fe82 	uxth.w	lr, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800912c:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 8009130:	d818      	bhi.n	8009164 <HAL_PCD_IRQHandler+0xa68>
 8009132:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8009136:	f018 0f01 	tst.w	r8, #1
 800913a:	bf18      	it	ne
 800913c:	3201      	addne	r2, #1
 800913e:	0292      	lsls	r2, r2, #10
 8009140:	b292      	uxth	r2, r2
 8009142:	801a      	strh	r2, [r3, #0]
 8009144:	e62d      	b.n	8008da2 <HAL_PCD_IRQHandler+0x6a6>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009146:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800914a:	f8df e034 	ldr.w	lr, [pc, #52]	; 8009180 <HAL_PCD_IRQHandler+0xa84>
 800914e:	f018 0f1f 	tst.w	r8, #31
 8009152:	bf08      	it	eq
 8009154:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8009158:	ea4e 2282 	orr.w	r2, lr, r2, lsl #10
 800915c:	b292      	uxth	r2, r2
 800915e:	800a      	strh	r2, [r1, #0]
 8009160:	f7ff bbd9 	b.w	8008916 <HAL_PCD_IRQHandler+0x21a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009164:	ea4f 1258 	mov.w	r2, r8, lsr #5
 8009168:	4905      	ldr	r1, [pc, #20]	; (8009180 <HAL_PCD_IRQHandler+0xa84>)
 800916a:	f018 0f1f 	tst.w	r8, #31
 800916e:	bf08      	it	eq
 8009170:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8009174:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 8009178:	b292      	uxth	r2, r2
 800917a:	801a      	strh	r2, [r3, #0]
 800917c:	e611      	b.n	8008da2 <HAL_PCD_IRQHandler+0x6a6>
 800917e:	bf00      	nop
 8009180:	ffff8000 	.word	0xffff8000

08009184 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8009184:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8009188:	2a01      	cmp	r2, #1
 800918a:	d00e      	beq.n	80091aa <HAL_PCD_SetAddress+0x26>
{
 800918c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800918e:	2201      	movs	r2, #1
 8009190:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009192:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8009194:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8009198:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800919c:	f002 f868 	bl	800b270 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80091a0:	2300      	movs	r3, #0
 80091a2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 80091a6:	4618      	mov	r0, r3
}
 80091a8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80091aa:	2002      	movs	r0, #2
}
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop

080091b0 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 80091b0:	f001 0c07 	and.w	ip, r1, #7
 80091b4:	0609      	lsls	r1, r1, #24
{
 80091b6:	b510      	push	{r4, lr}
 80091b8:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80091ba:	d425      	bmi.n	8009208 <HAL_PCD_EP_Open+0x58>
    ep->is_in = 0U;
 80091bc:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091c0:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 80091c4:	00c0      	lsls	r0, r0, #3
 80091c6:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 80091ca:	4420      	add	r0, r4
 80091cc:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091d0:	4421      	add	r1, r4
  ep->maxpacket = ep_mps;
 80091d2:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 80091d4:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091d6:	f881 c000 	strb.w	ip, [r1]
  ep->type = ep_type;
 80091da:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80091dc:	b10a      	cbz	r2, 80091e2 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 80091de:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80091e2:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80091e4:	bf04      	itt	eq
 80091e6:	2300      	moveq	r3, #0
 80091e8:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80091ea:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d019      	beq.n	8009226 <HAL_PCD_EP_Open+0x76>
 80091f2:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80091f4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80091f6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80091fa:	f001 fa63 	bl	800a6c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80091fe:	2300      	movs	r3, #0
 8009200:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return ret;
 8009204:	4618      	mov	r0, r3
}
 8009206:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009208:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 800920c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009210:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8009214:	2001      	movs	r0, #1
 8009216:	7048      	strb	r0, [r1, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009218:	eb0c 0100 	add.w	r1, ip, r0
 800921c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009220:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8009224:	e7d5      	b.n	80091d2 <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 8009226:	2002      	movs	r0, #2
}
 8009228:	bd10      	pop	{r4, pc}
 800922a:	bf00      	nop

0800922c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800922c:	060b      	lsls	r3, r1, #24
{
 800922e:	b510      	push	{r4, lr}
 8009230:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8009232:	d41b      	bmi.n	800926c <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009234:	f001 0307 	and.w	r3, r1, #7
 8009238:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800923c:	00d2      	lsls	r2, r2, #3
 800923e:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8009242:	4401      	add	r1, r0
    ep->is_in = 0U;
 8009244:	4402      	add	r2, r0
 8009246:	2000      	movs	r0, #0
 8009248:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800924c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800924e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009252:	2b01      	cmp	r3, #1
 8009254:	d019      	beq.n	800928a <HAL_PCD_EP_Close+0x5e>
 8009256:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009258:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800925a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800925e:	f001 fba5 	bl	800a9ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009262:	2300      	movs	r3, #0
 8009264:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8009268:	4618      	mov	r0, r3
}
 800926a:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800926c:	2001      	movs	r0, #1
 800926e:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009272:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 8009274:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009278:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800927c:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800927e:	7050      	strb	r0, [r2, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009280:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8009282:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009286:	2b01      	cmp	r3, #1
 8009288:	d1e5      	bne.n	8009256 <HAL_PCD_EP_Close+0x2a>
 800928a:	2002      	movs	r0, #2
}
 800928c:	bd10      	pop	{r4, pc}
 800928e:	bf00      	nop

08009290 <HAL_PCD_EP_Receive>:
{
 8009290:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 8009292:	2400      	movs	r4, #0
 8009294:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8009298:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 800929c:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 80092a0:	e9cc 235f 	strd	r2, r3, [ip, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80092a4:	6800      	ldr	r0, [r0, #0]
 80092a6:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
  ep->xfer_count = 0U;
 80092aa:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 80092ae:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80092b2:	f88c e168 	strb.w	lr, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80092b6:	f001 fc59 	bl	800ab6c <USB_EPStartXfer>
}
 80092ba:	4620      	mov	r0, r4
 80092bc:	bd10      	pop	{r4, pc}
 80092be:	bf00      	nop

080092c0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80092c0:	f001 0107 	and.w	r1, r1, #7
 80092c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80092c8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80092cc:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop

080092d4 <HAL_PCD_EP_Transmit>:
{
 80092d4:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 80092d6:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 80092d8:	2500      	movs	r5, #0
{
 80092da:	4604      	mov	r4, r0
 80092dc:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 80092e0:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092e4:	eb0e 0106 	add.w	r1, lr, r6
  ep->xfer_buff = pBuf;
 80092e8:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  ep->xfer_buff = pBuf;
 80092f0:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->num = ep_addr & EP_ADDR_MSK;
 80092f4:	f88c e028 	strb.w	lr, [ip, #40]	; 0x28
  ep->xfer_len = len;
 80092f8:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 80092fc:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_fill_db = 1U;
 8009300:	f88c 604c 	strb.w	r6, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 8009304:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
  ep->is_in = 1U;
 8009308:	f88c 6029 	strb.w	r6, [ip, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800930c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009310:	6800      	ldr	r0, [r0, #0]
 8009312:	f001 fc2b 	bl	800ab6c <USB_EPStartXfer>
}
 8009316:	4628      	mov	r0, r5
 8009318:	bd70      	pop	{r4, r5, r6, pc}
 800931a:	bf00      	nop

0800931c <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800931c:	6843      	ldr	r3, [r0, #4]
{
 800931e:	b510      	push	{r4, lr}
 8009320:	4604      	mov	r4, r0
 8009322:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009326:	4298      	cmp	r0, r3
 8009328:	d82d      	bhi.n	8009386 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 800932a:	060b      	lsls	r3, r1, #24
 800932c:	d41a      	bmi.n	8009364 <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 800932e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009332:	00c9      	lsls	r1, r1, #3
 8009334:	f501 72b4 	add.w	r2, r1, #360	; 0x168
    ep->is_in = 0U;
 8009338:	1863      	adds	r3, r4, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800933a:	18a1      	adds	r1, r4, r2
    ep->is_in = 0U;
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8009342:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009344:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 8009346:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8009348:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800934c:	429a      	cmp	r2, r3
 800934e:	d018      	beq.n	8009382 <HAL_PCD_EP_SetStall+0x66>
 8009350:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009354:	6820      	ldr	r0, [r4, #0]
 8009356:	f001 ff13 	bl	800b180 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800935a:	2300      	movs	r3, #0
 800935c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8009360:	4618      	mov	r0, r3
}
 8009362:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8009364:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009366:	1883      	adds	r3, r0, r2
    ep->is_in = 1U;
 8009368:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800936c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8009370:	705a      	strb	r2, [r3, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009372:	4619      	mov	r1, r3
  ep->is_stall = 1U;
 8009374:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009376:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 8009378:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800937a:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800937e:	429a      	cmp	r2, r3
 8009380:	d1e6      	bne.n	8009350 <HAL_PCD_EP_SetStall+0x34>
 8009382:	2002      	movs	r0, #2
}
 8009384:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009386:	2001      	movs	r0, #1
}
 8009388:	bd10      	pop	{r4, pc}
 800938a:	bf00      	nop

0800938c <HAL_PCD_EP_ClrStall>:
{
 800938c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800938e:	6843      	ldr	r3, [r0, #4]
 8009390:	f001 020f 	and.w	r2, r1, #15
 8009394:	429a      	cmp	r2, r3
 8009396:	d832      	bhi.n	80093fe <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8009398:	060b      	lsls	r3, r1, #24
 800939a:	4604      	mov	r4, r0
 800939c:	d41c      	bmi.n	80093d8 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800939e:	f001 0307 	and.w	r3, r1, #7
 80093a2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80093a6:	00d2      	lsls	r2, r2, #3
 80093a8:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 80093ac:	4401      	add	r1, r0
    ep->is_in = 0U;
 80093ae:	4402      	add	r2, r0
  ep->is_stall = 0U;
 80093b0:	2500      	movs	r5, #0
    ep->is_in = 0U;
 80093b2:	2000      	movs	r0, #0
 80093b4:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80093b8:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 80093ba:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80093bc:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d01a      	beq.n	80093fa <HAL_PCD_EP_ClrStall+0x6e>
 80093c4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80093c6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80093c8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80093cc:	f001 ff00 	bl	800b1d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80093d0:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 80093d4:	4628      	mov	r0, r5
}
 80093d6:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80093d8:	2001      	movs	r0, #1
 80093da:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093de:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 80093e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80093e4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093e8:	4611      	mov	r1, r2
  ep->is_stall = 0U;
 80093ea:	2500      	movs	r5, #0
    ep->is_in = 1U;
 80093ec:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80093ee:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 80093f0:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80093f2:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d1e4      	bne.n	80093c4 <HAL_PCD_EP_ClrStall+0x38>
 80093fa:	2002      	movs	r0, #2
}
 80093fc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80093fe:	2001      	movs	r0, #1
}
 8009400:	bd38      	pop	{r3, r4, r5, pc}
 8009402:	bf00      	nop

08009404 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8009404:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009408:	d00b      	beq.n	8009422 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800940a:	f001 0107 	and.w	r1, r1, #7
 800940e:	3101      	adds	r1, #1
 8009410:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009414:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009418:	b95a      	cbnz	r2, 8009432 <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800941a:	2000      	movs	r0, #0
    ep->pmaadress = (uint16_t)pmaadress;
 800941c:	80cb      	strh	r3, [r1, #6]
 800941e:	730a      	strb	r2, [r1, #12]
}
 8009420:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8009422:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009426:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800942a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 800942e:	2a00      	cmp	r2, #0
 8009430:	d0f3      	beq.n	800941a <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 8009432:	2201      	movs	r2, #1
}
 8009434:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8009436:	608b      	str	r3, [r1, #8]
 8009438:	730a      	strb	r2, [r1, #12]
}
 800943a:	4770      	bx	lr

0800943c <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800943c:	4b1d      	ldr	r3, [pc, #116]	; (80094b4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 800943e:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009440:	689a      	ldr	r2, [r3, #8]
 8009442:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8009446:	d116      	bne.n	8009476 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800944a:	00d2      	lsls	r2, r2, #3
 800944c:	d420      	bmi.n	8009490 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800944e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009450:	4919      	ldr	r1, [pc, #100]	; (80094b8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8009452:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009456:	625a      	str	r2, [r3, #36]	; 0x24
 8009458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800945a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800945e:	9201      	str	r2, [sp, #4]
 8009460:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009462:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8009464:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009466:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800946a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800946e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8009472:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8009474:	d013      	beq.n	800949e <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009476:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009478:	4a10      	ldr	r2, [pc, #64]	; (80094bc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800947a:	6813      	ldr	r3, [r2, #0]
 800947c:	f023 0301 	bic.w	r3, r3, #1
 8009480:	4303      	orrs	r3, r0
 8009482:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009484:	6813      	ldr	r3, [r2, #0]
 8009486:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800948a:	4058      	eors	r0, r3
 800948c:	b002      	add	sp, #8
 800948e:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009490:	4b09      	ldr	r3, [pc, #36]	; (80094b8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8009498:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800949c:	d1eb      	bne.n	8009476 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 800949e:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80094a2:	d1e8      	bne.n	8009476 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 80094a4:	4a05      	ldr	r2, [pc, #20]	; (80094bc <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 80094a6:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 80094a8:	6813      	ldr	r3, [r2, #0]
 80094aa:	f043 0304 	orr.w	r3, r3, #4
 80094ae:	6013      	str	r3, [r2, #0]
 80094b0:	e7e2      	b.n	8009478 <RCC_SetFlashLatencyFromMSIRange+0x3c>
 80094b2:	bf00      	nop
 80094b4:	40023800 	.word	0x40023800
 80094b8:	40007000 	.word	0x40007000
 80094bc:	40023c00 	.word	0x40023c00

080094c0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80094c0:	2800      	cmp	r0, #0
 80094c2:	f000 81f8 	beq.w	80098b6 <HAL_RCC_OscConfig+0x3f6>
{
 80094c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094ca:	4aa2      	ldr	r2, [pc, #648]	; (8009754 <HAL_RCC_OscConfig+0x294>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094cc:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094ce:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80094d0:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094d2:	07d9      	lsls	r1, r3, #31
 80094d4:	4604      	mov	r4, r0
{
 80094d6:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094d8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80094dc:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094e0:	d52e      	bpl.n	8009540 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80094e2:	2d08      	cmp	r5, #8
 80094e4:	f000 8128 	beq.w	8009738 <HAL_RCC_OscConfig+0x278>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80094e8:	2d0c      	cmp	r5, #12
 80094ea:	f000 8122 	beq.w	8009732 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094ee:	6863      	ldr	r3, [r4, #4]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d00f      	beq.n	8009514 <HAL_RCC_OscConfig+0x54>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 8180 	beq.w	80097fa <HAL_RCC_OscConfig+0x33a>
 80094fa:	2b05      	cmp	r3, #5
 80094fc:	4b95      	ldr	r3, [pc, #596]	; (8009754 <HAL_RCC_OscConfig+0x294>)
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	f000 81db 	beq.w	80098ba <HAL_RCC_OscConfig+0x3fa>
 8009504:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	e004      	b.n	800951e <HAL_RCC_OscConfig+0x5e>
 8009514:	4a8f      	ldr	r2, [pc, #572]	; (8009754 <HAL_RCC_OscConfig+0x294>)
 8009516:	6813      	ldr	r3, [r2, #0]
 8009518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800951c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800951e:	f7fd fdc1 	bl	80070a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009522:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8009754 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 8009526:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009528:	e005      	b.n	8009536 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800952a:	f7fd fdbb 	bl	80070a4 <HAL_GetTick>
 800952e:	1bc0      	subs	r0, r0, r7
 8009530:	2864      	cmp	r0, #100	; 0x64
 8009532:	f200 815e 	bhi.w	80097f2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009536:	f8d8 3000 	ldr.w	r3, [r8]
 800953a:	039b      	lsls	r3, r3, #14
 800953c:	d5f5      	bpl.n	800952a <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	0799      	lsls	r1, r3, #30
 8009542:	d522      	bpl.n	800958a <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009544:	2d04      	cmp	r5, #4
 8009546:	f000 8114 	beq.w	8009772 <HAL_RCC_OscConfig+0x2b2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800954a:	2d0c      	cmp	r5, #12
 800954c:	f000 810e 	beq.w	800976c <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009550:	68e3      	ldr	r3, [r4, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 8179 	beq.w	800984a <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 8009558:	2201      	movs	r2, #1
 800955a:	4b7f      	ldr	r3, [pc, #508]	; (8009758 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800955c:	4f7d      	ldr	r7, [pc, #500]	; (8009754 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_ENABLE();
 800955e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009560:	f7fd fda0 	bl	80070a4 <HAL_GetTick>
 8009564:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009566:	e005      	b.n	8009574 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009568:	f7fd fd9c 	bl	80070a4 <HAL_GetTick>
 800956c:	1b80      	subs	r0, r0, r6
 800956e:	2802      	cmp	r0, #2
 8009570:	f200 813f 	bhi.w	80097f2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	079b      	lsls	r3, r3, #30
 8009578:	d5f6      	bpl.n	8009568 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6922      	ldr	r2, [r4, #16]
 800957e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8009582:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009586:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	06d9      	lsls	r1, r3, #27
 800958c:	d525      	bpl.n	80095da <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800958e:	2d00      	cmp	r5, #0
 8009590:	f000 8098 	beq.w	80096c4 <HAL_RCC_OscConfig+0x204>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009594:	69a3      	ldr	r3, [r4, #24]
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 816a 	beq.w	8009870 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_MSI_ENABLE();
 800959c:	2201      	movs	r2, #1
 800959e:	4b6e      	ldr	r3, [pc, #440]	; (8009758 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80095a0:	4e6c      	ldr	r6, [pc, #432]	; (8009754 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_MSI_ENABLE();
 80095a2:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 80095a4:	f7fd fd7e 	bl	80070a4 <HAL_GetTick>
 80095a8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80095aa:	e005      	b.n	80095b8 <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80095ac:	f7fd fd7a 	bl	80070a4 <HAL_GetTick>
 80095b0:	1bc0      	subs	r0, r0, r7
 80095b2:	2802      	cmp	r0, #2
 80095b4:	f200 811d 	bhi.w	80097f2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80095b8:	6833      	ldr	r3, [r6, #0]
 80095ba:	059b      	lsls	r3, r3, #22
 80095bc:	d5f6      	bpl.n	80095ac <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80095be:	6873      	ldr	r3, [r6, #4]
 80095c0:	6a22      	ldr	r2, [r4, #32]
 80095c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80095c6:	4313      	orrs	r3, r2
 80095c8:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80095ca:	6873      	ldr	r3, [r6, #4]
 80095cc:	69e2      	ldr	r2, [r4, #28]
 80095ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80095d6:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	0719      	lsls	r1, r3, #28
 80095dc:	d516      	bpl.n	800960c <HAL_RCC_OscConfig+0x14c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80095de:	6963      	ldr	r3, [r4, #20]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 8121 	beq.w	8009828 <HAL_RCC_OscConfig+0x368>
      __HAL_RCC_LSI_ENABLE();
 80095e6:	2201      	movs	r2, #1
 80095e8:	4b5b      	ldr	r3, [pc, #364]	; (8009758 <HAL_RCC_OscConfig+0x298>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80095ea:	4f5a      	ldr	r7, [pc, #360]	; (8009754 <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_LSI_ENABLE();
 80095ec:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 80095f0:	f7fd fd58 	bl	80070a4 <HAL_GetTick>
 80095f4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80095f6:	e005      	b.n	8009604 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095f8:	f7fd fd54 	bl	80070a4 <HAL_GetTick>
 80095fc:	1b80      	subs	r0, r0, r6
 80095fe:	2802      	cmp	r0, #2
 8009600:	f200 80f7 	bhi.w	80097f2 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009606:	079a      	lsls	r2, r3, #30
 8009608:	d5f6      	bpl.n	80095f8 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	075e      	lsls	r6, r3, #29
 800960e:	d53b      	bpl.n	8009688 <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009610:	4b50      	ldr	r3, [pc, #320]	; (8009754 <HAL_RCC_OscConfig+0x294>)
 8009612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009614:	00d0      	lsls	r0, r2, #3
 8009616:	f100 8129 	bmi.w	800986c <HAL_RCC_OscConfig+0x3ac>
      pwrclkchanged = SET;
 800961a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800961c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800961e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009622:	625a      	str	r2, [r3, #36]	; 0x24
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800962a:	9301      	str	r3, [sp, #4]
 800962c:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800962e:	4f4b      	ldr	r7, [pc, #300]	; (800975c <HAL_RCC_OscConfig+0x29c>)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	05d9      	lsls	r1, r3, #23
 8009634:	f140 80cc 	bpl.w	80097d0 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009638:	68a3      	ldr	r3, [r4, #8]
 800963a:	2b01      	cmp	r3, #1
 800963c:	f000 8175 	beq.w	800992a <HAL_RCC_OscConfig+0x46a>
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 80a9 	beq.w	8009798 <HAL_RCC_OscConfig+0x2d8>
 8009646:	2b05      	cmp	r3, #5
 8009648:	4b42      	ldr	r3, [pc, #264]	; (8009754 <HAL_RCC_OscConfig+0x294>)
 800964a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800964c:	f000 818b 	beq.w	8009966 <HAL_RCC_OscConfig+0x4a6>
 8009650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009654:	635a      	str	r2, [r3, #52]	; 0x34
 8009656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800965c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800965e:	f7fd fd21 	bl	80070a4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009662:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009666:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009668:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8009754 <HAL_RCC_OscConfig+0x294>
 800966c:	e005      	b.n	800967a <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800966e:	f7fd fd19 	bl	80070a4 <HAL_GetTick>
 8009672:	1bc0      	subs	r0, r0, r7
 8009674:	4548      	cmp	r0, r9
 8009676:	f200 80bc 	bhi.w	80097f2 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800967a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800967e:	059b      	lsls	r3, r3, #22
 8009680:	d5f5      	bpl.n	800966e <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 8009682:	2e00      	cmp	r6, #0
 8009684:	f040 814b 	bne.w	800991e <HAL_RCC_OscConfig+0x45e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009688:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800968a:	b1b8      	cbz	r0, 80096bc <HAL_RCC_OscConfig+0x1fc>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800968c:	2d0c      	cmp	r5, #12
 800968e:	f000 8152 	beq.w	8009936 <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009692:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8009694:	f04f 0200 	mov.w	r2, #0
 8009698:	4b2f      	ldr	r3, [pc, #188]	; (8009758 <HAL_RCC_OscConfig+0x298>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800969a:	f000 8116 	beq.w	80098ca <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_PLL_DISABLE();
 800969e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80096a0:	f7fd fd00 	bl	80070a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096a4:	4d2b      	ldr	r5, [pc, #172]	; (8009754 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 80096a6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096a8:	e005      	b.n	80096b6 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096aa:	f7fd fcfb 	bl	80070a4 <HAL_GetTick>
 80096ae:	1b00      	subs	r0, r0, r4
 80096b0:	2802      	cmp	r0, #2
 80096b2:	f200 809e 	bhi.w	80097f2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096b6:	682b      	ldr	r3, [r5, #0]
 80096b8:	019b      	lsls	r3, r3, #6
 80096ba:	d4f6      	bmi.n	80096aa <HAL_RCC_OscConfig+0x1ea>
  return HAL_OK;
 80096bc:	2000      	movs	r0, #0
}
 80096be:	b003      	add	sp, #12
 80096c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80096c4:	4b23      	ldr	r3, [pc, #140]	; (8009754 <HAL_RCC_OscConfig+0x294>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	059a      	lsls	r2, r3, #22
 80096ca:	d502      	bpl.n	80096d2 <HAL_RCC_OscConfig+0x212>
 80096cc:	69a3      	ldr	r3, [r4, #24]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d03b      	beq.n	800974a <HAL_RCC_OscConfig+0x28a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80096d2:	4e20      	ldr	r6, [pc, #128]	; (8009754 <HAL_RCC_OscConfig+0x294>)
 80096d4:	6a20      	ldr	r0, [r4, #32]
 80096d6:	6873      	ldr	r3, [r6, #4]
 80096d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80096dc:	4298      	cmp	r0, r3
 80096de:	f240 80d7 	bls.w	8009890 <HAL_RCC_OscConfig+0x3d0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80096e2:	f7ff feab 	bl	800943c <RCC_SetFlashLatencyFromMSIRange>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d12f      	bne.n	800974a <HAL_RCC_OscConfig+0x28a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80096ea:	6872      	ldr	r2, [r6, #4]
 80096ec:	6a23      	ldr	r3, [r4, #32]
 80096ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80096f2:	431a      	orrs	r2, r3
 80096f4:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80096f6:	6872      	ldr	r2, [r6, #4]
 80096f8:	69e1      	ldr	r1, [r4, #28]
 80096fa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80096fe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009702:	6072      	str	r2, [r6, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009704:	4a13      	ldr	r2, [pc, #76]	; (8009754 <HAL_RCC_OscConfig+0x294>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009706:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009708:	6891      	ldr	r1, [r2, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800970a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800970e:	3301      	adds	r3, #1
 8009710:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009714:	4a12      	ldr	r2, [pc, #72]	; (8009760 <HAL_RCC_OscConfig+0x2a0>)
 8009716:	f3c1 1103 	ubfx	r1, r1, #4, #4
 800971a:	5c52      	ldrb	r2, [r2, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800971c:	4811      	ldr	r0, [pc, #68]	; (8009764 <HAL_RCC_OscConfig+0x2a4>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800971e:	40d3      	lsrs	r3, r2
        status = HAL_InitTick(uwTickPrio);
 8009720:	4a11      	ldr	r2, [pc, #68]	; (8009768 <HAL_RCC_OscConfig+0x2a8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009722:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick(uwTickPrio);
 8009724:	6810      	ldr	r0, [r2, #0]
 8009726:	f7fd fc7b 	bl	8007020 <HAL_InitTick>
        if(status != HAL_OK)
 800972a:	2800      	cmp	r0, #0
 800972c:	d1c7      	bne.n	80096be <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	e753      	b.n	80095da <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009732:	2e00      	cmp	r6, #0
 8009734:	f43f aedb 	beq.w	80094ee <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009738:	4a06      	ldr	r2, [pc, #24]	; (8009754 <HAL_RCC_OscConfig+0x294>)
 800973a:	6812      	ldr	r2, [r2, #0]
 800973c:	0392      	lsls	r2, r2, #14
 800973e:	f57f aeff 	bpl.w	8009540 <HAL_RCC_OscConfig+0x80>
 8009742:	6862      	ldr	r2, [r4, #4]
 8009744:	2a00      	cmp	r2, #0
 8009746:	f47f aefb 	bne.w	8009540 <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 800974a:	2001      	movs	r0, #1
}
 800974c:	b003      	add	sp, #12
 800974e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009752:	bf00      	nop
 8009754:	40023800 	.word	0x40023800
 8009758:	42470000 	.word	0x42470000
 800975c:	40007000 	.word	0x40007000
 8009760:	0800f2b8 	.word	0x0800f2b8
 8009764:	20000014 	.word	0x20000014
 8009768:	2000001c 	.word	0x2000001c
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800976c:	2e00      	cmp	r6, #0
 800976e:	f47f aeef 	bne.w	8009550 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009772:	4a81      	ldr	r2, [pc, #516]	; (8009978 <HAL_RCC_OscConfig+0x4b8>)
 8009774:	6812      	ldr	r2, [r2, #0]
 8009776:	0792      	lsls	r2, r2, #30
 8009778:	d502      	bpl.n	8009780 <HAL_RCC_OscConfig+0x2c0>
 800977a:	68e2      	ldr	r2, [r4, #12]
 800977c:	2a01      	cmp	r2, #1
 800977e:	d1e4      	bne.n	800974a <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009780:	497d      	ldr	r1, [pc, #500]	; (8009978 <HAL_RCC_OscConfig+0x4b8>)
 8009782:	6920      	ldr	r0, [r4, #16]
 8009784:	684a      	ldr	r2, [r1, #4]
 8009786:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800978a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800978e:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009790:	06d9      	lsls	r1, r3, #27
 8009792:	f57f af22 	bpl.w	80095da <HAL_RCC_OscConfig+0x11a>
 8009796:	e6fa      	b.n	800958e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009798:	4f77      	ldr	r7, [pc, #476]	; (8009978 <HAL_RCC_OscConfig+0x4b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800979a:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800979e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097a4:	637b      	str	r3, [r7, #52]	; 0x34
 80097a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097ac:	637b      	str	r3, [r7, #52]	; 0x34
      tickstart = HAL_GetTick();
 80097ae:	f7fd fc79 	bl	80070a4 <HAL_GetTick>
 80097b2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80097b4:	e005      	b.n	80097c2 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097b6:	f7fd fc75 	bl	80070a4 <HAL_GetTick>
 80097ba:	eba0 0008 	sub.w	r0, r0, r8
 80097be:	4548      	cmp	r0, r9
 80097c0:	d817      	bhi.n	80097f2 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80097c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c4:	0598      	lsls	r0, r3, #22
 80097c6:	d4f6      	bmi.n	80097b6 <HAL_RCC_OscConfig+0x2f6>
    if(pwrclkchanged == SET)
 80097c8:	2e00      	cmp	r6, #0
 80097ca:	f43f af5d 	beq.w	8009688 <HAL_RCC_OscConfig+0x1c8>
 80097ce:	e0a6      	b.n	800991e <HAL_RCC_OscConfig+0x45e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097d6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80097d8:	f7fd fc64 	bl	80070a4 <HAL_GetTick>
 80097dc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	05da      	lsls	r2, r3, #23
 80097e2:	f53f af29 	bmi.w	8009638 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097e6:	f7fd fc5d 	bl	80070a4 <HAL_GetTick>
 80097ea:	eba0 0008 	sub.w	r0, r0, r8
 80097ee:	2864      	cmp	r0, #100	; 0x64
 80097f0:	d9f5      	bls.n	80097de <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 80097f2:	2003      	movs	r0, #3
}
 80097f4:	b003      	add	sp, #12
 80097f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097fa:	4f5f      	ldr	r7, [pc, #380]	; (8009978 <HAL_RCC_OscConfig+0x4b8>)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009802:	603b      	str	r3, [r7, #0]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800980a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800980c:	f7fd fc4a 	bl	80070a4 <HAL_GetTick>
 8009810:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009812:	e005      	b.n	8009820 <HAL_RCC_OscConfig+0x360>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009814:	f7fd fc46 	bl	80070a4 <HAL_GetTick>
 8009818:	eba0 0008 	sub.w	r0, r0, r8
 800981c:	2864      	cmp	r0, #100	; 0x64
 800981e:	d8e8      	bhi.n	80097f2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	0398      	lsls	r0, r3, #14
 8009824:	d4f6      	bmi.n	8009814 <HAL_RCC_OscConfig+0x354>
 8009826:	e68a      	b.n	800953e <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 8009828:	4a54      	ldr	r2, [pc, #336]	; (800997c <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800982a:	4f53      	ldr	r7, [pc, #332]	; (8009978 <HAL_RCC_OscConfig+0x4b8>)
      __HAL_RCC_LSI_DISABLE();
 800982c:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8009830:	f7fd fc38 	bl	80070a4 <HAL_GetTick>
 8009834:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009836:	e004      	b.n	8009842 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009838:	f7fd fc34 	bl	80070a4 <HAL_GetTick>
 800983c:	1b80      	subs	r0, r0, r6
 800983e:	2802      	cmp	r0, #2
 8009840:	d8d7      	bhi.n	80097f2 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009844:	079b      	lsls	r3, r3, #30
 8009846:	d4f7      	bmi.n	8009838 <HAL_RCC_OscConfig+0x378>
 8009848:	e6df      	b.n	800960a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 800984a:	4a4c      	ldr	r2, [pc, #304]	; (800997c <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800984c:	4f4a      	ldr	r7, [pc, #296]	; (8009978 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_HSI_DISABLE();
 800984e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009850:	f7fd fc28 	bl	80070a4 <HAL_GetTick>
 8009854:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009856:	e004      	b.n	8009862 <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009858:	f7fd fc24 	bl	80070a4 <HAL_GetTick>
 800985c:	1b80      	subs	r0, r0, r6
 800985e:	2802      	cmp	r0, #2
 8009860:	d8c7      	bhi.n	80097f2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	0798      	lsls	r0, r3, #30
 8009866:	d4f7      	bmi.n	8009858 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009868:	6823      	ldr	r3, [r4, #0]
 800986a:	e68e      	b.n	800958a <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 800986c:	2600      	movs	r6, #0
 800986e:	e6de      	b.n	800962e <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_MSI_DISABLE();
 8009870:	4a42      	ldr	r2, [pc, #264]	; (800997c <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009872:	4f41      	ldr	r7, [pc, #260]	; (8009978 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_MSI_DISABLE();
 8009874:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8009876:	f7fd fc15 	bl	80070a4 <HAL_GetTick>
 800987a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800987c:	e004      	b.n	8009888 <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800987e:	f7fd fc11 	bl	80070a4 <HAL_GetTick>
 8009882:	1b80      	subs	r0, r0, r6
 8009884:	2802      	cmp	r0, #2
 8009886:	d8b4      	bhi.n	80097f2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	0598      	lsls	r0, r3, #22
 800988c:	d4f7      	bmi.n	800987e <HAL_RCC_OscConfig+0x3be>
 800988e:	e74e      	b.n	800972e <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009890:	6873      	ldr	r3, [r6, #4]
 8009892:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009896:	4303      	orrs	r3, r0
 8009898:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800989a:	6873      	ldr	r3, [r6, #4]
 800989c:	69e2      	ldr	r2, [r4, #28]
 800989e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80098a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80098a6:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80098a8:	f7ff fdc8 	bl	800943c <RCC_SetFlashLatencyFromMSIRange>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	f47f af4c 	bne.w	800974a <HAL_RCC_OscConfig+0x28a>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80098b2:	6a23      	ldr	r3, [r4, #32]
 80098b4:	e726      	b.n	8009704 <HAL_RCC_OscConfig+0x244>
    return HAL_ERROR;
 80098b6:	2001      	movs	r0, #1
}
 80098b8:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098ba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	e629      	b.n	800951e <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 80098ca:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80098cc:	f7fd fbea 	bl	80070a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098d0:	4e29      	ldr	r6, [pc, #164]	; (8009978 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 80098d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098d4:	e004      	b.n	80098e0 <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098d6:	f7fd fbe5 	bl	80070a4 <HAL_GetTick>
 80098da:	1b40      	subs	r0, r0, r5
 80098dc:	2802      	cmp	r0, #2
 80098de:	d888      	bhi.n	80097f2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098e0:	6833      	ldr	r3, [r6, #0]
 80098e2:	0199      	lsls	r1, r3, #6
 80098e4:	d4f7      	bmi.n	80098d6 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098e6:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 80098ea:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 80098ec:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098ee:	68b2      	ldr	r2, [r6, #8]
 80098f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80098f2:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80098f6:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80098f8:	4a20      	ldr	r2, [pc, #128]	; (800997c <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098fa:	4303      	orrs	r3, r0
 80098fc:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 80098fe:	6611      	str	r1, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8009900:	f7fd fbd0 	bl	80070a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009904:	4d1c      	ldr	r5, [pc, #112]	; (8009978 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8009906:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009908:	e005      	b.n	8009916 <HAL_RCC_OscConfig+0x456>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800990a:	f7fd fbcb 	bl	80070a4 <HAL_GetTick>
 800990e:	1b00      	subs	r0, r0, r4
 8009910:	2802      	cmp	r0, #2
 8009912:	f63f af6e 	bhi.w	80097f2 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009916:	682b      	ldr	r3, [r5, #0]
 8009918:	019a      	lsls	r2, r3, #6
 800991a:	d5f6      	bpl.n	800990a <HAL_RCC_OscConfig+0x44a>
 800991c:	e6ce      	b.n	80096bc <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800991e:	4a16      	ldr	r2, [pc, #88]	; (8009978 <HAL_RCC_OscConfig+0x4b8>)
 8009920:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8009922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009926:	6253      	str	r3, [r2, #36]	; 0x24
 8009928:	e6ae      	b.n	8009688 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800992a:	4a13      	ldr	r2, [pc, #76]	; (8009978 <HAL_RCC_OscConfig+0x4b8>)
 800992c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800992e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009932:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009934:	e693      	b.n	800965e <HAL_RCC_OscConfig+0x19e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009936:	2801      	cmp	r0, #1
 8009938:	f43f aec1 	beq.w	80096be <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 800993c:	4b0e      	ldr	r3, [pc, #56]	; (8009978 <HAL_RCC_OscConfig+0x4b8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800993e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 8009940:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009942:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8009946:	4291      	cmp	r1, r2
 8009948:	f47f aeff 	bne.w	800974a <HAL_RCC_OscConfig+0x28a>
 800994c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800994e:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009952:	4291      	cmp	r1, r2
 8009954:	f47f aef9 	bne.w	800974a <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009958:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800995a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 800995e:	1a18      	subs	r0, r3, r0
 8009960:	bf18      	it	ne
 8009962:	2001      	movne	r0, #1
 8009964:	e6ab      	b.n	80096be <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009966:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800996a:	635a      	str	r2, [r3, #52]	; 0x34
 800996c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800996e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009972:	635a      	str	r2, [r3, #52]	; 0x34
 8009974:	e673      	b.n	800965e <HAL_RCC_OscConfig+0x19e>
 8009976:	bf00      	nop
 8009978:	40023800 	.word	0x40023800
 800997c:	42470000 	.word	0x42470000

08009980 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009980:	2800      	cmp	r0, #0
 8009982:	f000 80c2 	beq.w	8009b0a <HAL_RCC_ClockConfig+0x18a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009986:	4a85      	ldr	r2, [pc, #532]	; (8009b9c <HAL_RCC_ClockConfig+0x21c>)
{
 8009988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800998c:	6813      	ldr	r3, [r2, #0]
 800998e:	4604      	mov	r4, r0
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	428b      	cmp	r3, r1
 8009996:	460d      	mov	r5, r1
 8009998:	d213      	bcs.n	80099c2 <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800999a:	2901      	cmp	r1, #1
 800999c:	d103      	bne.n	80099a6 <HAL_RCC_ClockConfig+0x26>
 800999e:	6813      	ldr	r3, [r2, #0]
 80099a0:	f043 0304 	orr.w	r3, r3, #4
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	4a7d      	ldr	r2, [pc, #500]	; (8009b9c <HAL_RCC_ClockConfig+0x21c>)
 80099a8:	6813      	ldr	r3, [r2, #0]
 80099aa:	f023 0301 	bic.w	r3, r3, #1
 80099ae:	432b      	orrs	r3, r5
 80099b0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099b2:	6813      	ldr	r3, [r2, #0]
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	42ab      	cmp	r3, r5
 80099ba:	d002      	beq.n	80099c2 <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 80099bc:	2001      	movs	r0, #1
}
 80099be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	0799      	lsls	r1, r3, #30
 80099c6:	d506      	bpl.n	80099d6 <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099c8:	4975      	ldr	r1, [pc, #468]	; (8009ba0 <HAL_RCC_ClockConfig+0x220>)
 80099ca:	68a0      	ldr	r0, [r4, #8]
 80099cc:	688a      	ldr	r2, [r1, #8]
 80099ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80099d2:	4302      	orrs	r2, r0
 80099d4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099d6:	07da      	lsls	r2, r3, #31
 80099d8:	d529      	bpl.n	8009a2e <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099da:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099dc:	4b70      	ldr	r3, [pc, #448]	; (8009ba0 <HAL_RCC_ClockConfig+0x220>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099de:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099e0:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099e2:	f000 808e 	beq.w	8009b02 <HAL_RCC_ClockConfig+0x182>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099e6:	2a03      	cmp	r2, #3
 80099e8:	f000 8085 	beq.w	8009af6 <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80099ec:	2a01      	cmp	r2, #1
 80099ee:	f000 80d1 	beq.w	8009b94 <HAL_RCC_ClockConfig+0x214>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80099f2:	0598      	lsls	r0, r3, #22
 80099f4:	d5e2      	bpl.n	80099bc <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80099f6:	4e6a      	ldr	r6, [pc, #424]	; (8009ba0 <HAL_RCC_ClockConfig+0x220>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099f8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80099fc:	68b3      	ldr	r3, [r6, #8]
 80099fe:	f023 0303 	bic.w	r3, r3, #3
 8009a02:	4313      	orrs	r3, r2
 8009a04:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8009a06:	f7fd fb4d 	bl	80070a4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a0a:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8009a0c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d055      	beq.n	8009abe <HAL_RCC_ClockConfig+0x13e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d05e      	beq.n	8009ad4 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d105      	bne.n	8009a26 <HAL_RCC_ClockConfig+0xa6>
 8009a1a:	e066      	b.n	8009aea <HAL_RCC_ClockConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a1c:	f7fd fb42 	bl	80070a4 <HAL_GetTick>
 8009a20:	1bc0      	subs	r0, r0, r7
 8009a22:	4540      	cmp	r0, r8
 8009a24:	d873      	bhi.n	8009b0e <HAL_RCC_ClockConfig+0x18e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009a26:	68b3      	ldr	r3, [r6, #8]
 8009a28:	f013 0f0c 	tst.w	r3, #12
 8009a2c:	d1f6      	bne.n	8009a1c <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009a2e:	4a5b      	ldr	r2, [pc, #364]	; (8009b9c <HAL_RCC_ClockConfig+0x21c>)
 8009a30:	6813      	ldr	r3, [r2, #0]
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	42ab      	cmp	r3, r5
 8009a38:	d906      	bls.n	8009a48 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a3a:	6813      	ldr	r3, [r2, #0]
 8009a3c:	f023 0301 	bic.w	r3, r3, #1
 8009a40:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a42:	6813      	ldr	r3, [r2, #0]
 8009a44:	07da      	lsls	r2, r3, #31
 8009a46:	d4b9      	bmi.n	80099bc <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	0759      	lsls	r1, r3, #29
 8009a4c:	d506      	bpl.n	8009a5c <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a4e:	4954      	ldr	r1, [pc, #336]	; (8009ba0 <HAL_RCC_ClockConfig+0x220>)
 8009a50:	68e0      	ldr	r0, [r4, #12]
 8009a52:	688a      	ldr	r2, [r1, #8]
 8009a54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009a58:	4302      	orrs	r2, r0
 8009a5a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a5c:	071b      	lsls	r3, r3, #28
 8009a5e:	d420      	bmi.n	8009aa2 <HAL_RCC_ClockConfig+0x122>
  tmpreg = RCC->CFGR;
 8009a60:	494f      	ldr	r1, [pc, #316]	; (8009ba0 <HAL_RCC_ClockConfig+0x220>)
 8009a62:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8009a64:	f002 030c 	and.w	r3, r2, #12
 8009a68:	2b08      	cmp	r3, #8
 8009a6a:	d079      	beq.n	8009b60 <HAL_RCC_ClockConfig+0x1e0>
 8009a6c:	2b0c      	cmp	r3, #12
 8009a6e:	d050      	beq.n	8009b12 <HAL_RCC_ClockConfig+0x192>
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	d044      	beq.n	8009afe <HAL_RCC_ClockConfig+0x17e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8009a74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8009a78:	684b      	ldr	r3, [r1, #4]
 8009a7a:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8009a7e:	3301      	adds	r3, #1
 8009a80:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009a82:	4b47      	ldr	r3, [pc, #284]	; (8009ba0 <HAL_RCC_ClockConfig+0x220>)
 8009a84:	4a47      	ldr	r2, [pc, #284]	; (8009ba4 <HAL_RCC_ClockConfig+0x224>)
 8009a86:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 8009a88:	4947      	ldr	r1, [pc, #284]	; (8009ba8 <HAL_RCC_ClockConfig+0x228>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009a8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009a8e:	5cd3      	ldrb	r3, [r2, r3]
 8009a90:	4a46      	ldr	r2, [pc, #280]	; (8009bac <HAL_RCC_ClockConfig+0x22c>)
 8009a92:	fa20 f303 	lsr.w	r3, r0, r3
}
 8009a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8009a9a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009a9c:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 8009a9e:	f7fd babf 	b.w	8007020 <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009aa2:	4a3f      	ldr	r2, [pc, #252]	; (8009ba0 <HAL_RCC_ClockConfig+0x220>)
 8009aa4:	6921      	ldr	r1, [r4, #16]
 8009aa6:	6893      	ldr	r3, [r2, #8]
 8009aa8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8009aac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009ab0:	6093      	str	r3, [r2, #8]
 8009ab2:	e7d5      	b.n	8009a60 <HAL_RCC_ClockConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ab4:	f7fd faf6 	bl	80070a4 <HAL_GetTick>
 8009ab8:	1bc3      	subs	r3, r0, r7
 8009aba:	4543      	cmp	r3, r8
 8009abc:	d827      	bhi.n	8009b0e <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009abe:	68b3      	ldr	r3, [r6, #8]
 8009ac0:	f003 030c 	and.w	r3, r3, #12
 8009ac4:	2b08      	cmp	r3, #8
 8009ac6:	d1f5      	bne.n	8009ab4 <HAL_RCC_ClockConfig+0x134>
 8009ac8:	e7b1      	b.n	8009a2e <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009aca:	f7fd faeb 	bl	80070a4 <HAL_GetTick>
 8009ace:	1bc0      	subs	r0, r0, r7
 8009ad0:	4540      	cmp	r0, r8
 8009ad2:	d81c      	bhi.n	8009b0e <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ad4:	68b3      	ldr	r3, [r6, #8]
 8009ad6:	f003 030c 	and.w	r3, r3, #12
 8009ada:	2b0c      	cmp	r3, #12
 8009adc:	d1f5      	bne.n	8009aca <HAL_RCC_ClockConfig+0x14a>
 8009ade:	e7a6      	b.n	8009a2e <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ae0:	f7fd fae0 	bl	80070a4 <HAL_GetTick>
 8009ae4:	1bc0      	subs	r0, r0, r7
 8009ae6:	4540      	cmp	r0, r8
 8009ae8:	d811      	bhi.n	8009b0e <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009aea:	68b3      	ldr	r3, [r6, #8]
 8009aec:	f003 030c 	and.w	r3, r3, #12
 8009af0:	2b04      	cmp	r3, #4
 8009af2:	d1f5      	bne.n	8009ae0 <HAL_RCC_ClockConfig+0x160>
 8009af4:	e79b      	b.n	8009a2e <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009af6:	019f      	lsls	r7, r3, #6
 8009af8:	f53f af7d 	bmi.w	80099f6 <HAL_RCC_ClockConfig+0x76>
 8009afc:	e75e      	b.n	80099bc <HAL_RCC_ClockConfig+0x3c>
      sysclockfreq = HSI_VALUE;
 8009afe:	482c      	ldr	r0, [pc, #176]	; (8009bb0 <HAL_RCC_ClockConfig+0x230>)
 8009b00:	e7bf      	b.n	8009a82 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b02:	039b      	lsls	r3, r3, #14
 8009b04:	f53f af77 	bmi.w	80099f6 <HAL_RCC_ClockConfig+0x76>
 8009b08:	e758      	b.n	80099bc <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 8009b0a:	2001      	movs	r0, #1
}
 8009b0c:	4770      	bx	lr
          return HAL_TIMEOUT;
 8009b0e:	2003      	movs	r0, #3
 8009b10:	e755      	b.n	80099be <HAL_RCC_ClockConfig+0x3e>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009b12:	4828      	ldr	r0, [pc, #160]	; (8009bb4 <HAL_RCC_ClockConfig+0x234>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b14:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009b16:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8009b1a:	5c44      	ldrb	r4, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009b1c:	f3c2 5281 	ubfx	r2, r2, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b20:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009b24:	f102 0201 	add.w	r2, r2, #1
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009b28:	ea4f 1144 	mov.w	r1, r4, lsl #5
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b2c:	d01a      	beq.n	8009b64 <HAL_RCC_ClockConfig+0x1e4>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009b2e:	1b09      	subs	r1, r1, r4
 8009b30:	eb65 0505 	sbc.w	r5, r5, r5
 8009b34:	01ab      	lsls	r3, r5, #6
 8009b36:	0188      	lsls	r0, r1, #6
 8009b38:	1a40      	subs	r0, r0, r1
 8009b3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009b3e:	eb63 0305 	sbc.w	r3, r3, r5
 8009b42:	00c1      	lsls	r1, r0, #3
 8009b44:	00db      	lsls	r3, r3, #3
 8009b46:	190c      	adds	r4, r1, r4
 8009b48:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009b4c:	f143 0300 	adc.w	r3, r3, #0
 8009b50:	0259      	lsls	r1, r3, #9
 8009b52:	0260      	lsls	r0, r4, #9
 8009b54:	2300      	movs	r3, #0
 8009b56:	ea41 51d4 	orr.w	r1, r1, r4, lsr #23
 8009b5a:	f7f7 fb17 	bl	800118c <__aeabi_uldivmod>
 8009b5e:	e790      	b.n	8009a82 <HAL_RCC_ClockConfig+0x102>
  switch (tmpreg & RCC_CFGR_SWS)
 8009b60:	4815      	ldr	r0, [pc, #84]	; (8009bb8 <HAL_RCC_ClockConfig+0x238>)
 8009b62:	e78e      	b.n	8009a82 <HAL_RCC_ClockConfig+0x102>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009b64:	1b0d      	subs	r5, r1, r4
 8009b66:	eb66 0606 	sbc.w	r6, r6, r6
 8009b6a:	01b0      	lsls	r0, r6, #6
 8009b6c:	01a9      	lsls	r1, r5, #6
 8009b6e:	1b49      	subs	r1, r1, r5
 8009b70:	ea40 6095 	orr.w	r0, r0, r5, lsr #26
 8009b74:	eb60 0006 	sbc.w	r0, r0, r6
 8009b78:	00c0      	lsls	r0, r0, #3
 8009b7a:	ea40 7051 	orr.w	r0, r0, r1, lsr #29
 8009b7e:	00c9      	lsls	r1, r1, #3
 8009b80:	190c      	adds	r4, r1, r4
 8009b82:	f140 0000 	adc.w	r0, r0, #0
 8009b86:	0281      	lsls	r1, r0, #10
 8009b88:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 8009b8c:	02a0      	lsls	r0, r4, #10
 8009b8e:	f7f7 fafd 	bl	800118c <__aeabi_uldivmod>
 8009b92:	e776      	b.n	8009a82 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b94:	079e      	lsls	r6, r3, #30
 8009b96:	f53f af2e 	bmi.w	80099f6 <HAL_RCC_ClockConfig+0x76>
 8009b9a:	e70f      	b.n	80099bc <HAL_RCC_ClockConfig+0x3c>
 8009b9c:	40023c00 	.word	0x40023c00
 8009ba0:	40023800 	.word	0x40023800
 8009ba4:	0800f2b8 	.word	0x0800f2b8
 8009ba8:	2000001c 	.word	0x2000001c
 8009bac:	20000014 	.word	0x20000014
 8009bb0:	00f42400 	.word	0x00f42400
 8009bb4:	0800f2d0 	.word	0x0800f2d0
 8009bb8:	007a1200 	.word	0x007a1200

08009bbc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009bbc:	4b04      	ldr	r3, [pc, #16]	; (8009bd0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8009bbe:	4a05      	ldr	r2, [pc, #20]	; (8009bd4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	4905      	ldr	r1, [pc, #20]	; (8009bd8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009bc4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009bc8:	5ccb      	ldrb	r3, [r1, r3]
 8009bca:	6810      	ldr	r0, [r2, #0]
}
 8009bcc:	40d8      	lsrs	r0, r3
 8009bce:	4770      	bx	lr
 8009bd0:	40023800 	.word	0x40023800
 8009bd4:	20000014 	.word	0x20000014
 8009bd8:	0800f2c8 	.word	0x0800f2c8

08009bdc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009bdc:	4b04      	ldr	r3, [pc, #16]	; (8009bf0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8009bde:	4a05      	ldr	r2, [pc, #20]	; (8009bf4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	4905      	ldr	r1, [pc, #20]	; (8009bf8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009be4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009be8:	5ccb      	ldrb	r3, [r1, r3]
 8009bea:	6810      	ldr	r0, [r2, #0]
}
 8009bec:	40d8      	lsrs	r0, r3
 8009bee:	4770      	bx	lr
 8009bf0:	40023800 	.word	0x40023800
 8009bf4:	20000014 	.word	0x20000014
 8009bf8:	0800f2c8 	.word	0x0800f2c8

08009bfc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d049      	beq.n	8009c94 <HAL_TIM_Base_Init+0x98>
{
 8009c00:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c02:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009c06:	4604      	mov	r4, r0
 8009c08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d03c      	beq.n	8009c8a <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c10:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c12:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009c14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c18:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8009c1c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c1e:	d013      	beq.n	8009c48 <HAL_TIM_Base_Init+0x4c>
 8009c20:	491d      	ldr	r1, [pc, #116]	; (8009c98 <HAL_TIM_Base_Init+0x9c>)
 8009c22:	428a      	cmp	r2, r1
 8009c24:	d010      	beq.n	8009c48 <HAL_TIM_Base_Init+0x4c>
 8009c26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009c2a:	428a      	cmp	r2, r1
 8009c2c:	d00c      	beq.n	8009c48 <HAL_TIM_Base_Init+0x4c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c2e:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8009c32:	428a      	cmp	r2, r1
 8009c34:	d00c      	beq.n	8009c50 <HAL_TIM_Base_Init+0x54>
 8009c36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009c3a:	428a      	cmp	r2, r1
 8009c3c:	d008      	beq.n	8009c50 <HAL_TIM_Base_Init+0x54>
 8009c3e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009c42:	428a      	cmp	r2, r1
 8009c44:	d108      	bne.n	8009c58 <HAL_TIM_Base_Init+0x5c>
 8009c46:	e003      	b.n	8009c50 <HAL_TIM_Base_Init+0x54>
    tmpcr1 |= Structure->CounterMode;
 8009c48:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c4e:	430b      	orrs	r3, r1
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c50:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c56:	430b      	orrs	r3, r1
  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c58:	2101      	movs	r1, #1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c5a:	6960      	ldr	r0, [r4, #20]
 8009c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c60:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c62:	68e0      	ldr	r0, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8009c64:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8009c66:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c68:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009c6a:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8009c6c:	6151      	str	r1, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c6e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c72:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 8009c76:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 8009c7a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 8009c7e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 8009c82:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  return HAL_OK;
 8009c86:	2000      	movs	r0, #0
}
 8009c88:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009c8a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8009c8e:	f7fc ffd5 	bl	8006c3c <HAL_TIM_Base_MspInit>
 8009c92:	e7bd      	b.n	8009c10 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8009c94:	2001      	movs	r0, #1
}
 8009c96:	4770      	bx	lr
 8009c98:	40000400 	.word	0x40000400

08009c9c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009c9c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d120      	bne.n	8009ce6 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8009ca4:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ca6:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009ca8:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cac:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cb2:	f042 0201 	orr.w	r2, r2, #1
 8009cb6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cb8:	d00a      	beq.n	8009cd0 <HAL_TIM_Base_Start_IT+0x34>
 8009cba:	4a0d      	ldr	r2, [pc, #52]	; (8009cf0 <HAL_TIM_Base_Start_IT+0x54>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d007      	beq.n	8009cd0 <HAL_TIM_Base_Start_IT+0x34>
 8009cc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d003      	beq.n	8009cd0 <HAL_TIM_Base_Start_IT+0x34>
 8009cc8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d104      	bne.n	8009cda <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cd0:	689a      	ldr	r2, [r3, #8]
 8009cd2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cd6:	2a06      	cmp	r2, #6
 8009cd8:	d007      	beq.n	8009cea <HAL_TIM_Base_Start_IT+0x4e>
    __HAL_TIM_ENABLE(htim);
 8009cda:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8009cdc:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8009cde:	f042 0201 	orr.w	r2, r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	4770      	bx	lr
    return HAL_ERROR;
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	4770      	bx	lr
  return HAL_OK;
 8009cea:	2000      	movs	r0, #0
}
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	40000400 	.word	0x40000400

08009cf4 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 8009cf4:	f241 1c11 	movw	ip, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009cf8:	6802      	ldr	r2, [r0, #0]
{
 8009cfa:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009cfc:	68d1      	ldr	r1, [r2, #12]
 8009cfe:	f021 0101 	bic.w	r1, r1, #1
 8009d02:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8009d04:	6a11      	ldr	r1, [r2, #32]
 8009d06:	ea11 0f0c 	tst.w	r1, ip
 8009d0a:	d103      	bne.n	8009d14 <HAL_TIM_Base_Stop_IT+0x20>
 8009d0c:	6811      	ldr	r1, [r2, #0]
 8009d0e:	f021 0101 	bic.w	r1, r1, #1
 8009d12:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8009d14:	2201      	movs	r2, #1
}
 8009d16:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8009d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop

08009d20 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8009d20:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8009d24:	2a01      	cmp	r2, #1
 8009d26:	d075      	beq.n	8009e14 <HAL_TIM_ConfigClockSource+0xf4>
{
 8009d28:	b430      	push	{r4, r5}
 8009d2a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8009d2c:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8009d2e:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8009d30:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8009d32:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8009d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8009d3a:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8009d3c:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d3e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8009d42:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8009d46:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8009d48:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8009d4a:	d065      	beq.n	8009e18 <HAL_TIM_ConfigClockSource+0xf8>
 8009d4c:	d831      	bhi.n	8009db2 <HAL_TIM_ConfigClockSource+0x92>
 8009d4e:	2a40      	cmp	r2, #64	; 0x40
 8009d50:	d048      	beq.n	8009de4 <HAL_TIM_ConfigClockSource+0xc4>
 8009d52:	d921      	bls.n	8009d98 <HAL_TIM_ConfigClockSource+0x78>
 8009d54:	2a50      	cmp	r2, #80	; 0x50
 8009d56:	d116      	bne.n	8009d86 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d58:	684c      	ldr	r4, [r1, #4]
 8009d5a:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d5c:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d5e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8009d62:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d64:	6a04      	ldr	r4, [r0, #32]
 8009d66:	f024 0401 	bic.w	r4, r4, #1
 8009d6a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d6c:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d72:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d76:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009d78:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d7a:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d80:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d84:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 8009d86:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8009d88:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8009d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8009d8e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  return HAL_OK;
 8009d92:	4610      	mov	r0, r2
}
 8009d94:	bc30      	pop	{r4, r5}
 8009d96:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8009d98:	2a20      	cmp	r2, #32
 8009d9a:	d002      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x82>
 8009d9c:	d91e      	bls.n	8009ddc <HAL_TIM_ConfigClockSource+0xbc>
 8009d9e:	2a30      	cmp	r2, #48	; 0x30
 8009da0:	d1f1      	bne.n	8009d86 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 8009da2:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009da4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009da8:	430a      	orrs	r2, r1
 8009daa:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8009dae:	6082      	str	r2, [r0, #8]
}
 8009db0:	e7e9      	b.n	8009d86 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8009db2:	2a70      	cmp	r2, #112	; 0x70
 8009db4:	d049      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0x12a>
 8009db6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009dba:	d1e4      	bne.n	8009d86 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dbc:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8009dc0:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dc2:	432a      	orrs	r2, r5
 8009dc4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dc6:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8009dce:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dd0:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009dd2:	6882      	ldr	r2, [r0, #8]
 8009dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009dd8:	6082      	str	r2, [r0, #8]
      break;
 8009dda:	e7d4      	b.n	8009d86 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8009ddc:	f032 0110 	bics.w	r1, r2, #16
 8009de0:	d1d1      	bne.n	8009d86 <HAL_TIM_ConfigClockSource+0x66>
 8009de2:	e7de      	b.n	8009da2 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009de4:	684c      	ldr	r4, [r1, #4]
 8009de6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8009de8:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dea:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8009dee:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009df0:	6a04      	ldr	r4, [r0, #32]
 8009df2:	f024 0401 	bic.w	r4, r4, #1
 8009df6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009df8:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dfa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009dfe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8009e02:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009e04:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8009e06:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e0c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8009e10:	6082      	str	r2, [r0, #8]
}
 8009e12:	e7b8      	b.n	8009d86 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8009e14:	2002      	movs	r0, #2
}
 8009e16:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e18:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e1a:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e1c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e20:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e22:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e24:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e26:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e2a:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 8009e2e:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8009e30:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e36:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8009e3a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8009e3c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e42:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8009e46:	6082      	str	r2, [r0, #8]
}
 8009e48:	e79d      	b.n	8009d86 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e4a:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8009e4e:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e50:	432a      	orrs	r2, r5
 8009e52:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e54:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e58:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8009e5c:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8009e5e:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8009e60:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e62:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8009e66:	6082      	str	r2, [r0, #8]
      break;
 8009e68:	e78d      	b.n	8009d86 <HAL_TIM_ConfigClockSource+0x66>
 8009e6a:	bf00      	nop

08009e6c <HAL_TIM_OC_DelayElapsedCallback>:
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop

08009e70 <HAL_TIM_IC_CaptureCallback>:
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop

08009e74 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop

08009e78 <HAL_TIM_TriggerCallback>:
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop

08009e7c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e7c:	6803      	ldr	r3, [r0, #0]
{
 8009e7e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e80:	691a      	ldr	r2, [r3, #16]
{
 8009e82:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e84:	0791      	lsls	r1, r2, #30
 8009e86:	d502      	bpl.n	8009e8e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e88:	68da      	ldr	r2, [r3, #12]
 8009e8a:	0792      	lsls	r2, r2, #30
 8009e8c:	d450      	bmi.n	8009f30 <HAL_TIM_IRQHandler+0xb4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e8e:	691a      	ldr	r2, [r3, #16]
 8009e90:	0752      	lsls	r2, r2, #29
 8009e92:	d502      	bpl.n	8009e9a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e94:	68da      	ldr	r2, [r3, #12]
 8009e96:	0750      	lsls	r0, r2, #29
 8009e98:	d437      	bmi.n	8009f0a <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e9a:	691a      	ldr	r2, [r3, #16]
 8009e9c:	0711      	lsls	r1, r2, #28
 8009e9e:	d502      	bpl.n	8009ea6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ea0:	68da      	ldr	r2, [r3, #12]
 8009ea2:	0712      	lsls	r2, r2, #28
 8009ea4:	d422      	bmi.n	8009eec <HAL_TIM_IRQHandler+0x70>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ea6:	691a      	ldr	r2, [r3, #16]
 8009ea8:	06d0      	lsls	r0, r2, #27
 8009eaa:	d502      	bpl.n	8009eb2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009eac:	68da      	ldr	r2, [r3, #12]
 8009eae:	06d1      	lsls	r1, r2, #27
 8009eb0:	d40c      	bmi.n	8009ecc <HAL_TIM_IRQHandler+0x50>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009eb2:	691a      	ldr	r2, [r3, #16]
 8009eb4:	07d2      	lsls	r2, r2, #31
 8009eb6:	d502      	bpl.n	8009ebe <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009eb8:	68da      	ldr	r2, [r3, #12]
 8009eba:	07d0      	lsls	r0, r2, #31
 8009ebc:	d450      	bmi.n	8009f60 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ebe:	691a      	ldr	r2, [r3, #16]
 8009ec0:	0651      	lsls	r1, r2, #25
 8009ec2:	d502      	bpl.n	8009eca <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	0652      	lsls	r2, r2, #25
 8009ec8:	d443      	bmi.n	8009f52 <HAL_TIM_IRQHandler+0xd6>
}
 8009eca:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ecc:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ed0:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ed2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ed4:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ed6:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8009ed8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009eda:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009ede:	d047      	beq.n	8009f70 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8009ee0:	f7ff ffc6 	bl	8009e70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ee4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ee6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ee8:	7622      	strb	r2, [r4, #24]
 8009eea:	e7e2      	b.n	8009eb2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009eec:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ef0:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ef2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ef4:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ef6:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009efa:	079b      	lsls	r3, r3, #30
 8009efc:	d044      	beq.n	8009f88 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 8009efe:	f7ff ffb7 	bl	8009e70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f02:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f04:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f06:	7622      	strb	r2, [r4, #24]
 8009f08:	e7cd      	b.n	8009ea6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f0a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f0e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f10:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f12:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f14:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8009f16:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f18:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009f1c:	d131      	bne.n	8009f82 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f1e:	f7ff ffa5 	bl	8009e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f22:	4620      	mov	r0, r4
 8009f24:	f7ff ffa6 	bl	8009e74 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f28:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f2a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f2c:	7622      	strb	r2, [r4, #24]
 8009f2e:	e7b4      	b.n	8009e9a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f30:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f34:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f36:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f38:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	0799      	lsls	r1, r3, #30
 8009f3e:	d11d      	bne.n	8009f7c <HAL_TIM_IRQHandler+0x100>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f40:	f7ff ff94 	bl	8009e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f44:	4620      	mov	r0, r4
 8009f46:	f7ff ff95 	bl	8009e74 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f4a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f4c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f4e:	7622      	strb	r2, [r4, #24]
 8009f50:	e79d      	b.n	8009e8e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f52:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8009f56:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f58:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009f5a:	f7ff ff8d 	bl	8009e78 <HAL_TIM_TriggerCallback>
}
 8009f5e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f60:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f64:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f66:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f68:	f7fc fad4 	bl	8006514 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	e7a6      	b.n	8009ebe <HAL_TIM_IRQHandler+0x42>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f70:	f7ff ff7c 	bl	8009e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f74:	4620      	mov	r0, r4
 8009f76:	f7ff ff7d 	bl	8009e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8009f7a:	e7b3      	b.n	8009ee4 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_IC_CaptureCallback(htim);
 8009f7c:	f7ff ff78 	bl	8009e70 <HAL_TIM_IC_CaptureCallback>
 8009f80:	e7e3      	b.n	8009f4a <HAL_TIM_IRQHandler+0xce>
        HAL_TIM_IC_CaptureCallback(htim);
 8009f82:	f7ff ff75 	bl	8009e70 <HAL_TIM_IC_CaptureCallback>
 8009f86:	e7cf      	b.n	8009f28 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f88:	f7ff ff70 	bl	8009e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f7ff ff71 	bl	8009e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8009f92:	e7b6      	b.n	8009f02 <HAL_TIM_IRQHandler+0x86>

08009f94 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f94:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8009f98:	2a01      	cmp	r2, #1
 8009f9a:	d028      	beq.n	8009fee <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8009f9c:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f9e:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fa0:	681a      	ldr	r2, [r3, #0]
{
 8009fa2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa4:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 8009fa8:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009faa:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fac:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fb0:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fb2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 8009fb6:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8009fb8:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fba:	d00a      	beq.n	8009fd2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8009fbc:	480d      	ldr	r0, [pc, #52]	; (8009ff4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8009fbe:	4282      	cmp	r2, r0
 8009fc0:	d007      	beq.n	8009fd2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8009fc2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009fc6:	4282      	cmp	r2, r0
 8009fc8:	d003      	beq.n	8009fd2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8009fca:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8009fce:	4282      	cmp	r2, r0
 8009fd0:	d104      	bne.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0x48>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fd2:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fd4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fd8:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fda:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8009fdc:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8009fde:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8009fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8009fe4:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39

  return HAL_OK;
 8009fe8:	4610      	mov	r0, r2
}
 8009fea:	bc30      	pop	{r4, r5}
 8009fec:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009fee:	2002      	movs	r0, #2
}
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	40000400 	.word	0x40000400

08009ff8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	f000 8081 	beq.w	800a100 <HAL_UART_Init+0x108>
{
 8009ffe:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a000:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a004:	4604      	mov	r4, r0
 800a006:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d070      	beq.n	800a0f0 <HAL_UART_Init+0xf8>
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a00e:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800a012:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a014:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800a016:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a018:	4302      	orrs	r2, r0
 800a01a:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 800a01c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a020:	4302      	orrs	r2, r0
 800a022:	69e0      	ldr	r0, [r4, #28]
 800a024:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 800a026:	68d8      	ldr	r0, [r3, #12]
 800a028:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 800a02c:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a02e:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a030:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a032:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800a036:	4329      	orrs	r1, r5
 800a038:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800a03a:	68d9      	ldr	r1, [r3, #12]
 800a03c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800a040:	f021 010c 	bic.w	r1, r1, #12
 800a044:	430a      	orrs	r2, r1
 800a046:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a048:	695a      	ldr	r2, [r3, #20]


  if((huart->Instance == USART1))
 800a04a:	492e      	ldr	r1, [pc, #184]	; (800a104 <HAL_UART_Init+0x10c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a04c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a050:	4302      	orrs	r2, r0
  if((huart->Instance == USART1))
 800a052:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a054:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1))
 800a056:	d050      	beq.n	800a0fa <HAL_UART_Init+0x102>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a058:	f7ff fdb0 	bl	8009bbc <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a05c:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a05e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a066:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a06a:	6863      	ldr	r3, [r4, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a06c:	d027      	beq.n	800a0be <HAL_UART_Init+0xc6>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	fbb0 f3f3 	udiv	r3, r0, r3
 800a074:	2564      	movs	r5, #100	; 0x64
 800a076:	4824      	ldr	r0, [pc, #144]	; (800a108 <HAL_UART_Init+0x110>)
 800a078:	6822      	ldr	r2, [r4, #0]
 800a07a:	fba0 6103 	umull	r6, r1, r0, r3
 800a07e:	0949      	lsrs	r1, r1, #5
 800a080:	fb05 3311 	mls	r3, r5, r1, r3
 800a084:	011b      	lsls	r3, r3, #4
 800a086:	3332      	adds	r3, #50	; 0x32
 800a088:	fba0 0303 	umull	r0, r3, r0, r3
 800a08c:	0109      	lsls	r1, r1, #4
 800a08e:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800a092:	6093      	str	r3, [r2, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a094:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800a096:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a098:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800a09a:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a09c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a0a0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0a2:	6953      	ldr	r3, [r2, #20]
 800a0a4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a0a8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800a0aa:	68d3      	ldr	r3, [r2, #12]
 800a0ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a0b0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b2:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a0b4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a0b8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 800a0bc:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a0be:	005b      	lsls	r3, r3, #1
 800a0c0:	fbb0 f0f3 	udiv	r0, r0, r3
 800a0c4:	2364      	movs	r3, #100	; 0x64
 800a0c6:	4e10      	ldr	r6, [pc, #64]	; (800a108 <HAL_UART_Init+0x110>)
 800a0c8:	6822      	ldr	r2, [r4, #0]
 800a0ca:	fba6 5100 	umull	r5, r1, r6, r0
 800a0ce:	094d      	lsrs	r5, r1, #5
 800a0d0:	fb03 0315 	mls	r3, r3, r5, r0
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	3332      	adds	r3, #50	; 0x32
 800a0d8:	fba6 1303 	umull	r1, r3, r6, r3
 800a0dc:	f3c3 1142 	ubfx	r1, r3, #5, #3
 800a0e0:	091b      	lsrs	r3, r3, #4
 800a0e2:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800a0e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a0ea:	440b      	add	r3, r1
 800a0ec:	6093      	str	r3, [r2, #8]
 800a0ee:	e7d1      	b.n	800a094 <HAL_UART_Init+0x9c>
    huart->Lock = HAL_UNLOCKED;
 800a0f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800a0f4:	f7fc fe26 	bl	8006d44 <HAL_UART_MspInit>
 800a0f8:	e789      	b.n	800a00e <HAL_UART_Init+0x16>
    pclk = HAL_RCC_GetPCLK2Freq();
 800a0fa:	f7ff fd6f 	bl	8009bdc <HAL_RCC_GetPCLK2Freq>
 800a0fe:	e7ad      	b.n	800a05c <HAL_UART_Init+0x64>
    return HAL_ERROR;
 800a100:	2001      	movs	r0, #1
}
 800a102:	4770      	bx	lr
 800a104:	40013800 	.word	0x40013800
 800a108:	51eb851f 	.word	0x51eb851f

0800a10c <HAL_UART_Transmit_DMA>:
{
 800a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800a110:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800a114:	2820      	cmp	r0, #32
 800a116:	d12d      	bne.n	800a174 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 800a118:	b351      	cbz	r1, 800a170 <HAL_UART_Transmit_DMA+0x64>
 800a11a:	b34a      	cbz	r2, 800a170 <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 800a11c:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800a120:	2801      	cmp	r0, #1
 800a122:	d027      	beq.n	800a174 <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a124:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800a126:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a12a:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a12e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a130:	4f11      	ldr	r7, [pc, #68]	; (800a178 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a132:	4e12      	ldr	r6, [pc, #72]	; (800a17c <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 800a134:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 800a136:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a138:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 800a13a:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 800a13c:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a140:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a144:	4613      	mov	r3, r2
 800a146:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a148:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a14c:	4e0c      	ldr	r6, [pc, #48]	; (800a180 <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a14e:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 800a150:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a152:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a154:	f7fd fd0e 	bl	8007b74 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a158:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a15c:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800a15e:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a160:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800a162:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a166:	695a      	ldr	r2, [r3, #20]
 800a168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a16c:	615a      	str	r2, [r3, #20]
}
 800a16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a170:	2001      	movs	r0, #1
}
 800a172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800a174:	2002      	movs	r0, #2
}
 800a176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a178:	0800a225 	.word	0x0800a225
 800a17c:	0800a251 	.word	0x0800a251
 800a180:	0800a261 	.word	0x0800a261

0800a184 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800a184:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800a188:	2b20      	cmp	r3, #32
 800a18a:	d13f      	bne.n	800a20c <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800a18c:	2900      	cmp	r1, #0
 800a18e:	d03b      	beq.n	800a208 <HAL_UART_Receive_DMA+0x84>
 800a190:	2a00      	cmp	r2, #0
 800a192:	d039      	beq.n	800a208 <HAL_UART_Receive_DMA+0x84>
{
 800a194:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 800a196:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a19a:	4604      	mov	r4, r0
 800a19c:	2b01      	cmp	r3, #1
{
 800a19e:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 800a1a0:	d036      	beq.n	800a210 <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1a2:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800a1a4:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1a8:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 800a1ac:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800a1ae:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a1b0:	4f19      	ldr	r7, [pc, #100]	; (800a218 <HAL_UART_Receive_DMA+0x94>)
 800a1b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a1b4:	4e19      	ldr	r6, [pc, #100]	; (800a21c <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 800a1b8:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1bc:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a1be:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1c0:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a1c4:	460a      	mov	r2, r1
 800a1c6:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a1c8:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a1cc:	4e14      	ldr	r6, [pc, #80]	; (800a220 <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a1ce:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 800a1d0:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a1d2:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a1d4:	f7fd fcce 	bl	8007b74 <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 800a1d8:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	9501      	str	r5, [sp, #4]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	9201      	str	r2, [sp, #4]
 800a1e2:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 800a1e4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a1e8:	9201      	str	r2, [sp, #4]
 800a1ea:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1ec:	68da      	ldr	r2, [r3, #12]
 800a1ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1f2:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1f4:	695a      	ldr	r2, [r3, #20]
 800a1f6:	f042 0201 	orr.w	r2, r2, #1
 800a1fa:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1fc:	695a      	ldr	r2, [r3, #20]
 800a1fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a202:	615a      	str	r2, [r3, #20]
}
 800a204:	b003      	add	sp, #12
 800a206:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a208:	2001      	movs	r0, #1
}
 800a20a:	4770      	bx	lr
    return HAL_BUSY;
 800a20c:	2002      	movs	r0, #2
 800a20e:	4770      	bx	lr
 800a210:	2002      	movs	r0, #2
}
 800a212:	b003      	add	sp, #12
 800a214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a216:	bf00      	nop
 800a218:	0800a30d 	.word	0x0800a30d
 800a21c:	0800a2f1 	.word	0x0800a2f1
 800a220:	0800a261 	.word	0x0800a261

0800a224 <UART_DMATransmitCplt>:
{
 800a224:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a226:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a228:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f013 0320 	ands.w	r3, r3, #32
 800a230:	d10a      	bne.n	800a248 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a232:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 800a234:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a236:	6953      	ldr	r3, [r2, #20]
 800a238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a23c:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a23e:	68d3      	ldr	r3, [r2, #12]
 800a240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a244:	60d3      	str	r3, [r2, #12]
}
 800a246:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800a248:	f7fc fbca 	bl	80069e0 <HAL_UART_TxCpltCallback>
}
 800a24c:	bd08      	pop	{r3, pc}
 800a24e:	bf00      	nop

0800a250 <UART_DMATxHalfCplt>:
{
 800a250:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800a252:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a254:	f7fc fbb0 	bl	80069b8 <HAL_UART_TxHalfCpltCallback>
}
 800a258:	bd08      	pop	{r3, pc}
 800a25a:	bf00      	nop

0800a25c <HAL_UART_RxHalfCpltCallback>:
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop

0800a260 <UART_DMAError>:
{
 800a260:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a262:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a264:	6803      	ldr	r3, [r0, #0]
 800a266:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a268:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800a26c:	2a21      	cmp	r2, #33	; 0x21
 800a26e:	d00b      	beq.n	800a288 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a270:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a272:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800a276:	2a22      	cmp	r2, #34	; 0x22
 800a278:	d016      	beq.n	800a2a8 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a27a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a27c:	f043 0310 	orr.w	r3, r3, #16
 800a280:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 800a282:	f7fc fb8f 	bl	80069a4 <HAL_UART_ErrorCallback>
}
 800a286:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a288:	0609      	lsls	r1, r1, #24
 800a28a:	d5f1      	bpl.n	800a270 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800a28c:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 800a28e:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 800a290:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a292:	68da      	ldr	r2, [r3, #12]
 800a294:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a298:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800a29a:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a29e:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a2a0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800a2a4:	2a22      	cmp	r2, #34	; 0x22
 800a2a6:	d1e8      	bne.n	800a27a <UART_DMAError+0x1a>
 800a2a8:	064a      	lsls	r2, r1, #25
 800a2aa:	d5e6      	bpl.n	800a27a <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2b0:	68da      	ldr	r2, [r3, #12]
 800a2b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a2b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b8:	695a      	ldr	r2, [r3, #20]
 800a2ba:	f022 0201 	bic.w	r2, r2, #1
 800a2be:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2c0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800a2c2:	2a01      	cmp	r2, #1
 800a2c4:	d103      	bne.n	800a2ce <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2c6:	68da      	ldr	r2, [r3, #12]
 800a2c8:	f022 0210 	bic.w	r2, r2, #16
 800a2cc:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 800a2ce:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a2d2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d6:	6303      	str	r3, [r0, #48]	; 0x30
}
 800a2d8:	e7cf      	b.n	800a27a <UART_DMAError+0x1a>
 800a2da:	bf00      	nop

0800a2dc <UART_DMAAbortOnError>:
{
 800a2dc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800a2de:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800a2e2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a2e4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800a2e6:	f7fc fb5d 	bl	80069a4 <HAL_UART_ErrorCallback>
}
 800a2ea:	bd08      	pop	{r3, pc}

0800a2ec <HAL_UARTEx_RxEventCallback>:
}
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop

0800a2f0 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800a2f2:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d002      	beq.n	800a300 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800a2fa:	f7ff ffaf 	bl	800a25c <HAL_UART_RxHalfCpltCallback>
}
 800a2fe:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a300:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800a302:	0849      	lsrs	r1, r1, #1
 800a304:	f7ff fff2 	bl	800a2ec <HAL_UARTEx_RxEventCallback>
}
 800a308:	bd08      	pop	{r3, pc}
 800a30a:	bf00      	nop

0800a30c <UART_DMAReceiveCplt>:
{
 800a30c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a30e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a310:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f013 0320 	ands.w	r3, r3, #32
 800a318:	d113      	bne.n	800a342 <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 800a31a:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a31c:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 800a31e:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a320:	68d3      	ldr	r3, [r2, #12]
 800a322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a326:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a328:	6953      	ldr	r3, [r2, #20]
 800a32a:	f023 0301 	bic.w	r3, r3, #1
 800a32e:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a330:	6953      	ldr	r3, [r2, #20]
 800a332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a336:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800a338:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a33c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d009      	beq.n	800a356 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a342:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a344:	2b01      	cmp	r3, #1
 800a346:	d002      	beq.n	800a34e <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 800a348:	f7fc fa10 	bl	800676c <HAL_UART_RxCpltCallback>
}
 800a34c:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a34e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800a350:	f7ff ffcc 	bl	800a2ec <HAL_UARTEx_RxEventCallback>
}
 800a354:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a356:	68d3      	ldr	r3, [r2, #12]
 800a358:	f023 0310 	bic.w	r3, r3, #16
 800a35c:	60d3      	str	r3, [r2, #12]
 800a35e:	e7f0      	b.n	800a342 <UART_DMAReceiveCplt+0x36>

0800a360 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a360:	6883      	ldr	r3, [r0, #8]
 800a362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a366:	d03b      	beq.n	800a3e0 <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a368:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d030      	beq.n	800a3d0 <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a36e:	6803      	ldr	r3, [r0, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a376:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800a378:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a37a:	3301      	adds	r3, #1
 800a37c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800a37e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800a380:	3b01      	subs	r3, #1
 800a382:	b29b      	uxth	r3, r3
 800a384:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800a386:	bb53      	cbnz	r3, 800a3de <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 800a388:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a38c:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800a38e:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a390:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800a392:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a394:	f021 0120 	bic.w	r1, r1, #32
 800a398:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a39a:	68d1      	ldr	r1, [r2, #12]
 800a39c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a3a0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a3a2:	6951      	ldr	r1, [r2, #20]
 800a3a4:	f021 0101 	bic.w	r1, r1, #1
 800a3a8:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800a3aa:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ae:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a3b0:	2901      	cmp	r1, #1
 800a3b2:	d120      	bne.n	800a3f6 <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3b4:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b6:	68d1      	ldr	r1, [r2, #12]
 800a3b8:	f021 0110 	bic.w	r1, r1, #16
 800a3bc:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a3be:	6811      	ldr	r1, [r2, #0]
 800a3c0:	06c9      	lsls	r1, r1, #27
 800a3c2:	d422      	bmi.n	800a40a <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3c4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800a3c6:	f7ff ff91 	bl	800a2ec <HAL_UARTEx_RxEventCallback>
}
 800a3ca:	b003      	add	sp, #12
 800a3cc:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3d0:	6903      	ldr	r3, [r0, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1cb      	bne.n	800a36e <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3d6:	6803      	ldr	r3, [r0, #0]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	7013      	strb	r3, [r2, #0]
 800a3dc:	e7cc      	b.n	800a378 <UART_Receive_IT.part.0.isra.0+0x18>
 800a3de:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3e0:	6903      	ldr	r3, [r0, #16]
 800a3e2:	b96b      	cbnz	r3, 800a400 <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a3e4:	6802      	ldr	r2, [r0, #0]
 800a3e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a3e8:	6852      	ldr	r2, [r2, #4]
 800a3ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3ee:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800a3f2:	6283      	str	r3, [r0, #40]	; 0x28
 800a3f4:	e7c3      	b.n	800a37e <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 800a3f6:	f7fc f9b9 	bl	800676c <HAL_UART_RxCpltCallback>
}
 800a3fa:	b003      	add	sp, #12
 800a3fc:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a400:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a402:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	7013      	strb	r3, [r2, #0]
 800a408:	e7b6      	b.n	800a378 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a40a:	9301      	str	r3, [sp, #4]
 800a40c:	6813      	ldr	r3, [r2, #0]
 800a40e:	9301      	str	r3, [sp, #4]
 800a410:	6853      	ldr	r3, [r2, #4]
 800a412:	9301      	str	r3, [sp, #4]
 800a414:	9b01      	ldr	r3, [sp, #4]
 800a416:	e7d5      	b.n	800a3c4 <UART_Receive_IT.part.0.isra.0+0x64>

0800a418 <HAL_UART_IRQHandler>:
{
 800a418:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a41a:	6803      	ldr	r3, [r0, #0]
{
 800a41c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a41e:	681a      	ldr	r2, [r3, #0]
{
 800a420:	b083      	sub	sp, #12
  if (errorflags == RESET)
 800a422:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a426:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a428:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800a42a:	d14e      	bne.n	800a4ca <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a42c:	0695      	lsls	r5, r2, #26
 800a42e:	d502      	bpl.n	800a436 <HAL_UART_IRQHandler+0x1e>
 800a430:	068d      	lsls	r5, r1, #26
 800a432:	f100 8090 	bmi.w	800a556 <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a436:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a438:	2801      	cmp	r0, #1
 800a43a:	d00b      	beq.n	800a454 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a43c:	0610      	lsls	r0, r2, #24
 800a43e:	d502      	bpl.n	800a446 <HAL_UART_IRQHandler+0x2e>
 800a440:	060d      	lsls	r5, r1, #24
 800a442:	f100 8092 	bmi.w	800a56a <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a446:	0650      	lsls	r0, r2, #25
 800a448:	d502      	bpl.n	800a450 <HAL_UART_IRQHandler+0x38>
 800a44a:	064a      	lsls	r2, r1, #25
 800a44c:	f100 80ab 	bmi.w	800a5a6 <HAL_UART_IRQHandler+0x18e>
}
 800a450:	b003      	add	sp, #12
 800a452:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a454:	06d0      	lsls	r0, r2, #27
 800a456:	d5f1      	bpl.n	800a43c <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a458:	06cd      	lsls	r5, r1, #27
 800a45a:	d5ef      	bpl.n	800a43c <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a45c:	2100      	movs	r1, #0
 800a45e:	9101      	str	r1, [sp, #4]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	9201      	str	r2, [sp, #4]
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	9201      	str	r2, [sp, #4]
 800a468:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a46a:	695a      	ldr	r2, [r3, #20]
 800a46c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800a470:	f000 80d2 	beq.w	800a618 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a474:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a476:	6802      	ldr	r2, [r0, #0]
 800a478:	6852      	ldr	r2, [r2, #4]
 800a47a:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800a47c:	2a00      	cmp	r2, #0
 800a47e:	d0e7      	beq.n	800a450 <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a480:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800a482:	4295      	cmp	r5, r2
 800a484:	d9e4      	bls.n	800a450 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800a486:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a488:	6982      	ldr	r2, [r0, #24]
 800a48a:	2a20      	cmp	r2, #32
 800a48c:	d016      	beq.n	800a4bc <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a48e:	68da      	ldr	r2, [r3, #12]
 800a490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a494:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a496:	695a      	ldr	r2, [r3, #20]
 800a498:	f022 0201 	bic.w	r2, r2, #1
 800a49c:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a49e:	695a      	ldr	r2, [r3, #20]
 800a4a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4a4:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800a4a6:	2220      	movs	r2, #32
 800a4a8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ac:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	f022 0210 	bic.w	r2, r2, #16
 800a4b4:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4b6:	f7fd fba7 	bl	8007c08 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4ba:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800a4bc:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800a4be:	4620      	mov	r0, r4
 800a4c0:	1a69      	subs	r1, r5, r1
 800a4c2:	b289      	uxth	r1, r1
 800a4c4:	f7ff ff12 	bl	800a2ec <HAL_UARTEx_RxEventCallback>
 800a4c8:	e7c2      	b.n	800a450 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a4ca:	f005 0501 	and.w	r5, r5, #1
 800a4ce:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800a4d2:	4328      	orrs	r0, r5
 800a4d4:	d0af      	beq.n	800a436 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a4d6:	07d0      	lsls	r0, r2, #31
 800a4d8:	d505      	bpl.n	800a4e6 <HAL_UART_IRQHandler+0xce>
 800a4da:	05c8      	lsls	r0, r1, #23
 800a4dc:	d503      	bpl.n	800a4e6 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4de:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a4e0:	f040 0001 	orr.w	r0, r0, #1
 800a4e4:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4e6:	0750      	lsls	r0, r2, #29
 800a4e8:	d530      	bpl.n	800a54c <HAL_UART_IRQHandler+0x134>
 800a4ea:	b14d      	cbz	r5, 800a500 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4ec:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a4ee:	f040 0002 	orr.w	r0, r0, #2
 800a4f2:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4f4:	0790      	lsls	r0, r2, #30
 800a4f6:	d503      	bpl.n	800a500 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4f8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a4fa:	f040 0004 	orr.w	r0, r0, #4
 800a4fe:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a500:	0710      	lsls	r0, r2, #28
 800a502:	d507      	bpl.n	800a514 <HAL_UART_IRQHandler+0xfc>
 800a504:	f001 0020 	and.w	r0, r1, #32
 800a508:	4328      	orrs	r0, r5
 800a50a:	d003      	beq.n	800a514 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a50c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a50e:	f040 0008 	orr.w	r0, r0, #8
 800a512:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a514:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a516:	2800      	cmp	r0, #0
 800a518:	d09a      	beq.n	800a450 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a51a:	0690      	lsls	r0, r2, #26
 800a51c:	d509      	bpl.n	800a532 <HAL_UART_IRQHandler+0x11a>
 800a51e:	068a      	lsls	r2, r1, #26
 800a520:	d507      	bpl.n	800a532 <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a522:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800a526:	2a22      	cmp	r2, #34	; 0x22
 800a528:	d103      	bne.n	800a532 <HAL_UART_IRQHandler+0x11a>
 800a52a:	4620      	mov	r0, r4
 800a52c:	f7ff ff18 	bl	800a360 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a534:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a536:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a53a:	f005 0508 	and.w	r5, r5, #8
 800a53e:	4315      	orrs	r5, r2
 800a540:	d13c      	bne.n	800a5bc <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 800a542:	4620      	mov	r0, r4
 800a544:	f7fc fa2e 	bl	80069a4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a548:	6425      	str	r5, [r4, #64]	; 0x40
 800a54a:	e781      	b.n	800a450 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a54c:	0790      	lsls	r0, r2, #30
 800a54e:	d5d7      	bpl.n	800a500 <HAL_UART_IRQHandler+0xe8>
 800a550:	2d00      	cmp	r5, #0
 800a552:	d1d1      	bne.n	800a4f8 <HAL_UART_IRQHandler+0xe0>
 800a554:	e7d4      	b.n	800a500 <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a556:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800a55a:	2b22      	cmp	r3, #34	; 0x22
 800a55c:	f47f af78 	bne.w	800a450 <HAL_UART_IRQHandler+0x38>
}
 800a560:	b003      	add	sp, #12
 800a562:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a566:	f7ff befb 	b.w	800a360 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a56a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800a56e:	2a21      	cmp	r2, #33	; 0x21
 800a570:	f47f af6e 	bne.w	800a450 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a574:	68a2      	ldr	r2, [r4, #8]
 800a576:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a57a:	d06e      	beq.n	800a65a <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a57c:	6a22      	ldr	r2, [r4, #32]
 800a57e:	1c51      	adds	r1, r2, #1
 800a580:	6221      	str	r1, [r4, #32]
 800a582:	7812      	ldrb	r2, [r2, #0]
 800a584:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800a586:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800a588:	3a01      	subs	r2, #1
 800a58a:	b292      	uxth	r2, r2
 800a58c:	84e2      	strh	r2, [r4, #38]	; 0x26
 800a58e:	2a00      	cmp	r2, #0
 800a590:	f47f af5e 	bne.w	800a450 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a594:	68da      	ldr	r2, [r3, #12]
 800a596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a59a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a59c:	68da      	ldr	r2, [r3, #12]
 800a59e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5a2:	60da      	str	r2, [r3, #12]
 800a5a4:	e754      	b.n	800a450 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 800a5a6:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5a8:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800a5aa:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5b0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800a5b2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800a5b6:	f7fc fa13 	bl	80069e0 <HAL_UART_TxCpltCallback>
    return;
 800a5ba:	e749      	b.n	800a450 <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5bc:	68da      	ldr	r2, [r3, #12]
 800a5be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a5c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5c4:	695a      	ldr	r2, [r3, #20]
 800a5c6:	f022 0201 	bic.w	r2, r2, #1
 800a5ca:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a5ce:	2a01      	cmp	r2, #1
 800a5d0:	d103      	bne.n	800a5da <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5d2:	68da      	ldr	r2, [r3, #12]
 800a5d4:	f022 0210 	bic.w	r2, r2, #16
 800a5d8:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5da:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a5dc:	2120      	movs	r1, #32
 800a5de:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e2:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5e4:	695a      	ldr	r2, [r3, #20]
 800a5e6:	0655      	lsls	r5, r2, #25
 800a5e8:	d512      	bpl.n	800a610 <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ea:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800a5ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5f2:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800a5f4:	b160      	cbz	r0, 800a610 <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5f6:	4b1e      	ldr	r3, [pc, #120]	; (800a670 <HAL_UART_IRQHandler+0x258>)
 800a5f8:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5fa:	f7fd fb2d 	bl	8007c58 <HAL_DMA_Abort_IT>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	f43f af26 	beq.w	800a450 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a604:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a606:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800a608:	b003      	add	sp, #12
 800a60a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a60e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800a610:	4620      	mov	r0, r4
 800a612:	f7fc f9c7 	bl	80069a4 <HAL_UART_ErrorCallback>
 800a616:	e71b      	b.n	800a450 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a618:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 800a61a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a61c:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800a61e:	b289      	uxth	r1, r1
 800a620:	2900      	cmp	r1, #0
 800a622:	f43f af15 	beq.w	800a450 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a626:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800a628:	1a08      	subs	r0, r1, r0
 800a62a:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800a62c:	2900      	cmp	r1, #0
 800a62e:	f43f af0f 	beq.w	800a450 <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 800a632:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a634:	68d8      	ldr	r0, [r3, #12]
 800a636:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800a63a:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a63c:	6958      	ldr	r0, [r3, #20]
 800a63e:	f020 0001 	bic.w	r0, r0, #1
 800a642:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800a644:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a648:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a64a:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a64c:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a64e:	f022 0210 	bic.w	r2, r2, #16
 800a652:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a654:	f7ff fe4a 	bl	800a2ec <HAL_UARTEx_RxEventCallback>
 800a658:	e6fa      	b.n	800a450 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a65a:	6922      	ldr	r2, [r4, #16]
 800a65c:	2a00      	cmp	r2, #0
 800a65e:	d18d      	bne.n	800a57c <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a660:	6a22      	ldr	r2, [r4, #32]
 800a662:	f832 1b02 	ldrh.w	r1, [r2], #2
 800a666:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800a66a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a66c:	6222      	str	r2, [r4, #32]
 800a66e:	e78a      	b.n	800a586 <HAL_UART_IRQHandler+0x16e>
 800a670:	0800a2dd 	.word	0x0800a2dd

0800a674 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a674:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a676:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a678:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800a67c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 800a680:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 800a682:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800a686:	4770      	bx	lr

0800a688 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a688:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a68a:	f244 02ff 	movw	r2, #16639	; 0x40ff
 800a68e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40

  return HAL_OK;
}
 800a692:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a694:	400a      	ands	r2, r1
 800a696:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800a69a:	4770      	bx	lr

0800a69c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a69c:	b084      	sub	sp, #16
 800a69e:	f10d 0c04 	add.w	ip, sp, #4
 800a6a2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800a6a6:	4603      	mov	r3, r0
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a6a8:	2200      	movs	r2, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a6aa:	2101      	movs	r1, #1

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 800a6ac:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a6ae:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800a6b2:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 800a6b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 800a6b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800a6bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop

0800a6c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a6c6:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800a6c8:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a6cc:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
{
 800a6d0:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a6d2:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 800a6d6:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800a6da:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800a6de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  switch (ep->type)
 800a6e2:	f1be 0f03 	cmp.w	lr, #3
 800a6e6:	f200 815a 	bhi.w	800a99e <USB_ActivateEndpoint+0x2da>
 800a6ea:	e8df f00e 	tbb	[pc, lr]
 800a6ee:	4e52      	.short	0x4e52
 800a6f0:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a6f2:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800a6f6:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a6f8:	f248 0580 	movw	r5, #32896	; 0x8080
 800a6fc:	ea4c 0c05 	orr.w	ip, ip, r5
 800a700:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a704:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800a708:	4ca6      	ldr	r4, [pc, #664]	; (800a9a4 <USB_ActivateEndpoint+0x2e0>)
 800a70a:	fa1f fc8c 	uxth.w	ip, ip
 800a70e:	ea0c 0c04 	and.w	ip, ip, r4
 800a712:	ea4c 0c02 	orr.w	ip, ip, r2
 800a716:	ea45 050c 	orr.w	r5, r5, ip
 800a71a:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800a71e:	7b0d      	ldrb	r5, [r1, #12]
 800a720:	2d00      	cmp	r5, #0
 800a722:	d17e      	bne.n	800a822 <USB_ActivateEndpoint+0x15e>
  {
    if (ep->is_in != 0U)
 800a724:	784d      	ldrb	r5, [r1, #1]
 800a726:	2d00      	cmp	r5, #0
 800a728:	f000 80dd 	beq.w	800a8e6 <USB_ActivateEndpoint+0x222>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a72c:	88c9      	ldrh	r1, [r1, #6]
 800a72e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800a732:	0849      	lsrs	r1, r1, #1
 800a734:	eb03 1602 	add.w	r6, r3, r2, lsl #4
 800a738:	0049      	lsls	r1, r1, #1
 800a73a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a73e:	b2ad      	uxth	r5, r5
 800a740:	5371      	strh	r1, [r6, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a742:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a746:	064e      	lsls	r6, r1, #25
 800a748:	d509      	bpl.n	800a75e <USB_ActivateEndpoint+0x9a>
 800a74a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a74e:	b289      	uxth	r1, r1
 800a750:	400c      	ands	r4, r1
 800a752:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800a756:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800a75a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a75e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800a762:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a766:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800a76a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800a76e:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800a772:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 800a776:	d04d      	beq.n	800a814 <USB_ActivateEndpoint+0x150>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a778:	f081 0120 	eor.w	r1, r1, #32
 800a77c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a780:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a784:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800a788:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef ret = HAL_OK;
 800a78a:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a78c:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
      break;
 800a790:	e7b2      	b.n	800a6f8 <USB_ActivateEndpoint+0x34>
  HAL_StatusTypeDef ret = HAL_OK;
 800a792:	4670      	mov	r0, lr
      wEpRegVal |= USB_EP_CONTROL;
 800a794:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 800a798:	e7ae      	b.n	800a6f8 <USB_ActivateEndpoint+0x34>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a79a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a79e:	044d      	lsls	r5, r1, #17
 800a7a0:	d509      	bpl.n	800a7b6 <USB_ActivateEndpoint+0xf2>
 800a7a2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a7a6:	b289      	uxth	r1, r1
 800a7a8:	400c      	ands	r4, r1
 800a7aa:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800a7ae:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800a7b2:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a7b6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a7ba:	0649      	lsls	r1, r1, #25
 800a7bc:	d50d      	bpl.n	800a7da <USB_ActivateEndpoint+0x116>
 800a7be:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a7c2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800a7c6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a7ca:	0409      	lsls	r1, r1, #16
 800a7cc:	0c09      	lsrs	r1, r1, #16
 800a7ce:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a7d2:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800a7d6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a7da:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800a7de:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a7e2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800a7e6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800a7ea:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800a7ee:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800a7f2:	bf18      	it	ne
 800a7f4:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7f8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a7fc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a800:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a804:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a808:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800a80c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a810:	0409      	lsls	r1, r1, #16
 800a812:	0c09      	lsrs	r1, r1, #16
 800a814:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a818:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a81c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800a820:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF(USBx, ep->num);
 800a822:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800a826:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800a82a:	fa1f fc8c 	uxth.w	ip, ip
 800a82e:	ea0c 0c04 	and.w	ip, ip, r4
 800a832:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 800a836:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800a83a:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a83e:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 800a842:	890e      	ldrh	r6, [r1, #8]
 800a844:	fa1f fc8c 	uxth.w	ip, ip
 800a848:	0876      	lsrs	r6, r6, #1
 800a84a:	44bc      	add	ip, r7
 800a84c:	0076      	lsls	r6, r6, #1
 800a84e:	f8ac 6400 	strh.w	r6, [ip, #1024]	; 0x400
 800a852:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800a856:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800a85a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a85e:	b2ad      	uxth	r5, r5
 800a860:	443d      	add	r5, r7
 800a862:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800a866:	f8a5 c408 	strh.w	ip, [r5, #1032]	; 0x408
    if (ep->is_in == 0U)
 800a86a:	7849      	ldrb	r1, [r1, #1]
 800a86c:	2900      	cmp	r1, #0
 800a86e:	d194      	bne.n	800a79a <USB_ActivateEndpoint+0xd6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a870:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a874:	044f      	lsls	r7, r1, #17
 800a876:	d509      	bpl.n	800a88c <USB_ActivateEndpoint+0x1c8>
 800a878:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a87c:	b289      	uxth	r1, r1
 800a87e:	400c      	ands	r4, r1
 800a880:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800a884:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800a888:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a88c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a890:	064e      	lsls	r6, r1, #25
 800a892:	d50d      	bpl.n	800a8b0 <USB_ActivateEndpoint+0x1ec>
 800a894:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a898:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800a89c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a8a0:	0409      	lsls	r1, r1, #16
 800a8a2:	0c09      	lsrs	r1, r1, #16
 800a8a4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a8a8:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800a8ac:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a8b0:	f248 0480 	movw	r4, #32896	; 0x8080
 800a8b4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a8b8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800a8bc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a8c0:	0409      	lsls	r1, r1, #16
 800a8c2:	0c09      	lsrs	r1, r1, #16
 800a8c4:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800a8c8:	4321      	orrs	r1, r4
 800a8ca:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8ce:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a8d2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800a8d6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800a8da:	0409      	lsls	r1, r1, #16
 800a8dc:	0c09      	lsrs	r1, r1, #16
 800a8de:	4321      	orrs	r1, r4
 800a8e0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800a8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a8e6:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800a8ea:	88cd      	ldrh	r5, [r1, #6]
 800a8ec:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800a8f0:	b2a4      	uxth	r4, r4
 800a8f2:	086d      	lsrs	r5, r5, #1
 800a8f4:	006d      	lsls	r5, r5, #1
 800a8f6:	443c      	add	r4, r7
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a8f8:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a8fa:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a8fe:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800a902:	b289      	uxth	r1, r1
 800a904:	4439      	add	r1, r7
 800a906:	b366      	cbz	r6, 800a962 <USB_ActivateEndpoint+0x29e>
 800a908:	2e3e      	cmp	r6, #62	; 0x3e
 800a90a:	d83c      	bhi.n	800a986 <USB_ActivateEndpoint+0x2c2>
 800a90c:	0874      	lsrs	r4, r6, #1
 800a90e:	07f5      	lsls	r5, r6, #31
 800a910:	bf48      	it	mi
 800a912:	3401      	addmi	r4, #1
 800a914:	02a4      	lsls	r4, r4, #10
 800a916:	b2a4      	uxth	r4, r4
 800a918:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a91c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a920:	0449      	lsls	r1, r1, #17
 800a922:	d50d      	bpl.n	800a940 <USB_ActivateEndpoint+0x27c>
 800a924:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a928:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800a92c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a930:	0409      	lsls	r1, r1, #16
 800a932:	0c09      	lsrs	r1, r1, #16
 800a934:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800a938:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a93c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a940:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a944:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800a948:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a94c:	0409      	lsls	r1, r1, #16
 800a94e:	0c09      	lsrs	r1, r1, #16
 800a950:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800a954:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a958:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a95c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800a960:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a962:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800a966:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800a96a:	0424      	lsls	r4, r4, #16
 800a96c:	0c24      	lsrs	r4, r4, #16
 800a96e:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800a972:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800a976:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800a97a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800a97e:	b2a4      	uxth	r4, r4
 800a980:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800a984:	e7ca      	b.n	800a91c <USB_ActivateEndpoint+0x258>
 800a986:	0975      	lsrs	r5, r6, #5
 800a988:	06f4      	lsls	r4, r6, #27
 800a98a:	4c07      	ldr	r4, [pc, #28]	; (800a9a8 <USB_ActivateEndpoint+0x2e4>)
 800a98c:	bf08      	it	eq
 800a98e:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800a992:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800a996:	b2a4      	uxth	r4, r4
 800a998:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800a99c:	e7be      	b.n	800a91c <USB_ActivateEndpoint+0x258>
  switch (ep->type)
 800a99e:	2001      	movs	r0, #1
 800a9a0:	e6aa      	b.n	800a6f8 <USB_ActivateEndpoint+0x34>
 800a9a2:	bf00      	nop
 800a9a4:	ffff8f8f 	.word	0xffff8f8f
 800a9a8:	ffff8000 	.word	0xffff8000

0800a9ac <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800a9ac:	7b0b      	ldrb	r3, [r1, #12]
 800a9ae:	b9cb      	cbnz	r3, 800a9e4 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 800a9b0:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9b2:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f000 80b1 	beq.w	800ab1c <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a9be:	0659      	lsls	r1, r3, #25
 800a9c0:	f100 80c5 	bmi.w	800ab4e <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a9c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a9c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a9d0:	041b      	lsls	r3, r3, #16
 800a9d2:	0c1b      	lsrs	r3, r3, #16
 800a9d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	4770      	bx	lr
    if (ep->is_in == 0U)
 800a9e4:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9e6:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d14b      	bne.n	800aa84 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a9f0:	0459      	lsls	r1, r3, #17
 800a9f2:	d50d      	bpl.n	800aa10 <USB_DeactivateEndpoint+0x64>
 800a9f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a9f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa00:	041b      	lsls	r3, r3, #16
 800aa02:	0c1b      	lsrs	r3, r3, #16
 800aa04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa0c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa14:	065b      	lsls	r3, r3, #25
 800aa16:	d50d      	bpl.n	800aa34 <USB_DeactivateEndpoint+0x88>
 800aa18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa24:	041b      	lsls	r3, r3, #16
 800aa26:	0c1b      	lsrs	r3, r3, #16
 800aa28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa30:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa34:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 800aa38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa44:	041b      	lsls	r3, r3, #16
 800aa46:	0c1b      	lsrs	r3, r3, #16
 800aa48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa60:	041b      	lsls	r3, r3, #16
 800aa62:	0c1b      	lsrs	r3, r3, #16
 800aa64:	430b      	orrs	r3, r1
 800aa66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa76:	041b      	lsls	r3, r3, #16
 800aa78:	0c1b      	lsrs	r3, r3, #16
 800aa7a:	430b      	orrs	r3, r1
 800aa7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800aa80:	2000      	movs	r0, #0
 800aa82:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa84:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa88:	0459      	lsls	r1, r3, #17
 800aa8a:	d50d      	bpl.n	800aaa8 <USB_DeactivateEndpoint+0xfc>
 800aa8c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aa90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa98:	041b      	lsls	r3, r3, #16
 800aa9a:	0c1b      	lsrs	r3, r3, #16
 800aa9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aaa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aaa8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aaac:	065b      	lsls	r3, r3, #25
 800aaae:	d50d      	bpl.n	800aacc <USB_DeactivateEndpoint+0x120>
 800aab0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aabc:	041b      	lsls	r3, r3, #16
 800aabe:	0c1b      	lsrs	r3, r3, #16
 800aac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aac4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aac8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aacc:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800aad0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aadc:	041b      	lsls	r3, r3, #16
 800aade:	0c1b      	lsrs	r3, r3, #16
 800aae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aaec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800aaf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaf8:	041b      	lsls	r3, r3, #16
 800aafa:	0c1b      	lsrs	r3, r3, #16
 800aafc:	430b      	orrs	r3, r1
 800aafe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ab02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ab06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab0e:	041b      	lsls	r3, r3, #16
 800ab10:	0c1b      	lsrs	r3, r3, #16
 800ab12:	430b      	orrs	r3, r1
 800ab14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800ab18:	2000      	movs	r0, #0
 800ab1a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ab20:	045b      	lsls	r3, r3, #17
 800ab22:	d50d      	bpl.n	800ab40 <USB_DeactivateEndpoint+0x194>
 800ab24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ab28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab30:	041b      	lsls	r3, r3, #16
 800ab32:	0c1b      	lsrs	r3, r3, #16
 800ab34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab3c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ab40:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ab44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab4c:	e740      	b.n	800a9d0 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ab52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab5a:	041b      	lsls	r3, r3, #16
 800ab5c:	0c1b      	lsrs	r3, r3, #16
 800ab5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800ab6a:	e72b      	b.n	800a9c4 <USB_DeactivateEndpoint+0x18>

0800ab6c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab70:	784b      	ldrb	r3, [r1, #1]
{
 800ab72:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d06b      	beq.n	800ac50 <USB_EPStartXfer+0xe4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ab78:	7b08      	ldrb	r0, [r1, #12]
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d037      	beq.n	800abee <USB_EPStartXfer+0x82>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ab7e:	78c8      	ldrb	r0, [r1, #3]
 800ab80:	2802      	cmp	r0, #2
 800ab82:	f000 812d 	beq.w	800ade0 <USB_EPStartXfer+0x274>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ab86:	2801      	cmp	r0, #1
 800ab88:	f040 810a 	bne.w	800ada0 <USB_EPStartXfer+0x234>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ab8c:	6988      	ldr	r0, [r1, #24]
 800ab8e:	690c      	ldr	r4, [r1, #16]
 800ab90:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 800ab92:	bf94      	ite	ls
 800ab94:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 800ab96:	1b05      	subhi	r5, r0, r4
 800ab98:	618d      	str	r5, [r1, #24]
 800ab9a:	bf88      	it	hi
 800ab9c:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f040 811b 	bne.w	800adda <USB_EPStartXfer+0x26e>
 800aba4:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800aba8:	780b      	ldrb	r3, [r1, #0]
 800abaa:	b2a4      	uxth	r4, r4
 800abac:	f202 4504 	addw	r5, r2, #1028	; 0x404
 800abb0:	011b      	lsls	r3, r3, #4
 800abb2:	442c      	add	r4, r5
 800abb4:	2800      	cmp	r0, #0
 800abb6:	f000 8251 	beq.w	800b05c <USB_EPStartXfer+0x4f0>
 800abba:	283e      	cmp	r0, #62	; 0x3e
 800abbc:	f200 80f3 	bhi.w	800ada6 <USB_EPStartXfer+0x23a>
 800abc0:	0845      	lsrs	r5, r0, #1
 800abc2:	462e      	mov	r6, r5
 800abc4:	f010 0001 	ands.w	r0, r0, #1
 800abc8:	bf18      	it	ne
 800abca:	1c6e      	addne	r6, r5, #1
 800abcc:	02b6      	lsls	r6, r6, #10
 800abce:	b2b6      	uxth	r6, r6
 800abd0:	52e6      	strh	r6, [r4, r3]
 800abd2:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800abd6:	b2a6      	uxth	r6, r4
 800abd8:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800abdc:	4434      	add	r4, r6
 800abde:	b100      	cbz	r0, 800abe2 <USB_EPStartXfer+0x76>
 800abe0:	3501      	adds	r5, #1
 800abe2:	02ad      	lsls	r5, r5, #10
 800abe4:	b2a8      	uxth	r0, r5
 800abe6:	52e0      	strh	r0, [r4, r3]
 800abe8:	f891 c000 	ldrb.w	ip, [r1]
 800abec:	e01d      	b.n	800ac2a <USB_EPStartXfer+0xbe>
      if (ep->xfer_len > ep->maxpacket)
 800abee:	698c      	ldr	r4, [r1, #24]
 800abf0:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800abf2:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 800abf4:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 800abf6:	bf84      	itt	hi
 800abf8:	1ae0      	subhi	r0, r4, r3
 800abfa:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800abfc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800ac00:	6188      	str	r0, [r1, #24]
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800ac08:	012d      	lsls	r5, r5, #4
 800ac0a:	4403      	add	r3, r0
 800ac0c:	2c00      	cmp	r4, #0
 800ac0e:	f000 80b7 	beq.w	800ad80 <USB_EPStartXfer+0x214>
 800ac12:	2c3e      	cmp	r4, #62	; 0x3e
 800ac14:	f200 8129 	bhi.w	800ae6a <USB_EPStartXfer+0x2fe>
 800ac18:	0860      	lsrs	r0, r4, #1
 800ac1a:	07e4      	lsls	r4, r4, #31
 800ac1c:	bf48      	it	mi
 800ac1e:	3001      	addmi	r0, #1
 800ac20:	0280      	lsls	r0, r0, #10
 800ac22:	b280      	uxth	r0, r0
 800ac24:	52e8      	strh	r0, [r5, r3]
 800ac26:	f891 c000 	ldrb.w	ip, [r1]
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac2a:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
  }

  return HAL_OK;
 800ac2e:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac38:	041b      	lsls	r3, r3, #16
 800ac3a:	0c1b      	lsrs	r3, r3, #16
 800ac3c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800ac40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac48:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
}
 800ac4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 800ac50:	690d      	ldr	r5, [r1, #16]
 800ac52:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 800ac54:	7b0b      	ldrb	r3, [r1, #12]
 800ac56:	42a8      	cmp	r0, r5
 800ac58:	bf28      	it	cs
 800ac5a:	4628      	movcs	r0, r5
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d05d      	beq.n	800ad1c <USB_EPStartXfer+0x1b0>
      if (ep->type == EP_TYPE_BULK)
 800ac60:	78cb      	ldrb	r3, [r1, #3]
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	f000 810e 	beq.w	800ae84 <USB_EPStartXfer+0x318>
        PCD_SET_EP_DBUF(USBx, ep->num);
 800ac68:	f891 8000 	ldrb.w	r8, [r1]
        ep->xfer_len_db -= len;
 800ac6c:	6a0b      	ldr	r3, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 800ac6e:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800ac72:	1a1b      	subs	r3, r3, r0
        PCD_SET_EP_DBUF(USBx, ep->num);
 800ac74:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 800ac78:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800ac7c:	0424      	lsls	r4, r4, #16
 800ac7e:	0c24      	lsrs	r4, r4, #16
 800ac80:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800ac84:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800ac88:	f822 4028 	strh.w	r4, [r2, r8, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ac8c:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800ac90:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ac92:	f014 0f40 	tst.w	r4, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ac96:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800ac9a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800ac9e:	b2a6      	uxth	r6, r4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aca0:	f000 814a 	beq.w	800af38 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aca4:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800aca8:	4434      	add	r4, r6
 800acaa:	b286      	uxth	r6, r0
 800acac:	f824 6008 	strh.w	r6, [r4, r8]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800acb0:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800acb2:	3601      	adds	r6, #1
 800acb4:	f502 6780 	add.w	r7, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800acb8:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800acba:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800acbe:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 800acc2:	d008      	beq.n	800acd6 <USB_EPStartXfer+0x16a>
  uint8_t *pBuf = pbUsrBuf;
 800acc4:	46cc      	mov	ip, r9
 800acc6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  {
    temp1 = *pBuf;
 800acca:	f83c eb02 	ldrh.w	lr, [ip], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 800acce:	f824 eb04 	strh.w	lr, [r4], #4
  for (i = n; i != 0U; i--)
 800acd2:	42a6      	cmp	r6, r4
 800acd4:	d1f9      	bne.n	800acca <USB_EPStartXfer+0x15e>
          ep->xfer_buff += len;
 800acd6:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800acda:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800acdc:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800acde:	f0c0 81b7 	bcc.w	800b050 <USB_EPStartXfer+0x4e4>
            ep->xfer_len_db = 0U;
 800ace2:	2500      	movs	r5, #0
 800ace4:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d036      	beq.n	800ad58 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800acea:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800acee:	b285      	uxth	r5, r0
 800acf0:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800acf4:	4428      	add	r0, r5
 800acf6:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800acf8:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800acfa:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800acfe:	8908      	ldrh	r0, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ad00:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800ad02:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad04:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800ad08:	d026      	beq.n	800ad58 <USB_EPStartXfer+0x1ec>
 800ad0a:	eb00 0583 	add.w	r5, r0, r3, lsl #2
    temp1 = *pBuf;
 800ad0e:	f834 3b02 	ldrh.w	r3, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800ad12:	f820 3b04 	strh.w	r3, [r0], #4
  for (i = n; i != 0U; i--)
 800ad16:	4285      	cmp	r5, r0
 800ad18:	d1f9      	bne.n	800ad0e <USB_EPStartXfer+0x1a2>
 800ad1a:	e01d      	b.n	800ad58 <USB_EPStartXfer+0x1ec>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ad1c:	b284      	uxth	r4, r0
 800ad1e:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad20:	88cd      	ldrh	r5, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ad22:	f104 0e01 	add.w	lr, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad26:	f502 6080 	add.w	r0, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800ad2a:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad2e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (i = n; i != 0U; i--)
 800ad32:	bf18      	it	ne
 800ad34:	eb03 0e4e 	addne.w	lr, r3, lr, lsl #1
 800ad38:	d005      	beq.n	800ad46 <USB_EPStartXfer+0x1da>
    temp1 = *pBuf;
 800ad3a:	f833 cb02 	ldrh.w	ip, [r3], #2
  for (i = n; i != 0U; i--)
 800ad3e:	4573      	cmp	r3, lr
    *pdwVal = (uint16_t)temp2;
 800ad40:	f820 cb04 	strh.w	ip, [r0], #4
  for (i = n; i != 0U; i--)
 800ad44:	d1f9      	bne.n	800ad3a <USB_EPStartXfer+0x1ce>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ad46:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800ad4a:	7808      	ldrb	r0, [r1, #0]
 800ad4c:	b29d      	uxth	r5, r3
 800ad4e:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800ad52:	0100      	lsls	r0, r0, #4
 800ad54:	442b      	add	r3, r5
 800ad56:	52c4      	strh	r4, [r0, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ad58:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 800ad5a:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ad5c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800ad60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad68:	041b      	lsls	r3, r3, #16
 800ad6a:	0c1b      	lsrs	r3, r3, #16
 800ad6c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800ad70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad78:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 800ad7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ad80:	5ae8      	ldrh	r0, [r5, r3]
 800ad82:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800ad86:	0400      	lsls	r0, r0, #16
 800ad88:	0c00      	lsrs	r0, r0, #16
 800ad8a:	52e8      	strh	r0, [r5, r3]
 800ad8c:	5ae8      	ldrh	r0, [r5, r3]
 800ad8e:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800ad92:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800ad96:	b280      	uxth	r0, r0
 800ad98:	52e8      	strh	r0, [r5, r3]
 800ad9a:	f891 c000 	ldrb.w	ip, [r1]
 800ad9e:	e744      	b.n	800ac2a <USB_EPStartXfer+0xbe>
        return HAL_ERROR;
 800ada0:	2001      	movs	r0, #1
}
 800ada2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ada6:	0945      	lsrs	r5, r0, #5
 800ada8:	462f      	mov	r7, r5
 800adaa:	f010 001f 	ands.w	r0, r0, #31
 800adae:	bf08      	it	eq
 800adb0:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800adb4:	462e      	mov	r6, r5
 800adb6:	4dbb      	ldr	r5, [pc, #748]	; (800b0a4 <USB_EPStartXfer+0x538>)
 800adb8:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800adbc:	b2ad      	uxth	r5, r5
 800adbe:	52e5      	strh	r5, [r4, r3]
 800adc0:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800adc4:	b2a5      	uxth	r5, r4
 800adc6:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800adca:	442c      	add	r4, r5
 800adcc:	b900      	cbnz	r0, 800add0 <USB_EPStartXfer+0x264>
 800adce:	3e01      	subs	r6, #1
 800add0:	48b4      	ldr	r0, [pc, #720]	; (800b0a4 <USB_EPStartXfer+0x538>)
 800add2:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800add6:	b280      	uxth	r0, r0
 800add8:	52e0      	strh	r0, [r4, r3]
 800adda:	f891 c000 	ldrb.w	ip, [r1]
 800adde:	e724      	b.n	800ac2a <USB_EPStartXfer+0xbe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ade0:	bb13      	cbnz	r3, 800ae28 <USB_EPStartXfer+0x2bc>
 800ade2:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800ade6:	780b      	ldrb	r3, [r1, #0]
 800ade8:	b284      	uxth	r4, r0
 800adea:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800adee:	4420      	add	r0, r4
 800adf0:	690c      	ldr	r4, [r1, #16]
 800adf2:	011b      	lsls	r3, r3, #4
 800adf4:	2c00      	cmp	r4, #0
 800adf6:	f000 8109 	beq.w	800b00c <USB_EPStartXfer+0x4a0>
 800adfa:	2c3e      	cmp	r4, #62	; 0x3e
 800adfc:	f200 818e 	bhi.w	800b11c <USB_EPStartXfer+0x5b0>
 800ae00:	0865      	lsrs	r5, r4, #1
 800ae02:	462e      	mov	r6, r5
 800ae04:	f014 0401 	ands.w	r4, r4, #1
 800ae08:	bf18      	it	ne
 800ae0a:	1c6e      	addne	r6, r5, #1
 800ae0c:	02b6      	lsls	r6, r6, #10
 800ae0e:	b2b6      	uxth	r6, r6
 800ae10:	52c6      	strh	r6, [r0, r3]
 800ae12:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800ae16:	f202 460c 	addw	r6, r2, #1036	; 0x40c
 800ae1a:	b280      	uxth	r0, r0
 800ae1c:	4406      	add	r6, r0
 800ae1e:	b104      	cbz	r4, 800ae22 <USB_EPStartXfer+0x2b6>
 800ae20:	3501      	adds	r5, #1
 800ae22:	02ad      	lsls	r5, r5, #10
 800ae24:	b2a8      	uxth	r0, r5
 800ae26:	52f0      	strh	r0, [r6, r3]
        if (ep->xfer_count != 0U)
 800ae28:	69cb      	ldr	r3, [r1, #28]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d0d5      	beq.n	800adda <USB_EPStartXfer+0x26e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ae2e:	f244 0340 	movw	r3, #16448	; 0x4040
 800ae32:	f891 c000 	ldrb.w	ip, [r1]
 800ae36:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ae3a:	ea03 0400 	and.w	r4, r3, r0
 800ae3e:	4383      	bics	r3, r0
 800ae40:	d002      	beq.n	800ae48 <USB_EPStartXfer+0x2dc>
 800ae42:	2c00      	cmp	r4, #0
 800ae44:	f47f aef1 	bne.w	800ac2a <USB_EPStartXfer+0xbe>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800ae48:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800ae4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae54:	041b      	lsls	r3, r3, #16
 800ae56:	0c1b      	lsrs	r3, r3, #16
 800ae58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae60:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 800ae64:	f891 c000 	ldrb.w	ip, [r1]
 800ae68:	e6df      	b.n	800ac2a <USB_EPStartXfer+0xbe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ae6a:	0966      	lsrs	r6, r4, #5
 800ae6c:	06e0      	lsls	r0, r4, #27
 800ae6e:	488d      	ldr	r0, [pc, #564]	; (800b0a4 <USB_EPStartXfer+0x538>)
 800ae70:	bf08      	it	eq
 800ae72:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800ae76:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800ae7a:	b280      	uxth	r0, r0
 800ae7c:	52e8      	strh	r0, [r5, r3]
 800ae7e:	f891 c000 	ldrb.w	ip, [r1]
 800ae82:	e6d2      	b.n	800ac2a <USB_EPStartXfer+0xbe>
        if (ep->xfer_len_db > ep->maxpacket)
 800ae84:	6a0c      	ldr	r4, [r1, #32]
 800ae86:	42a5      	cmp	r5, r4
 800ae88:	f080 8094 	bcs.w	800afb4 <USB_EPStartXfer+0x448>
          PCD_SET_EP_DBUF(USBx, ep->num);
 800ae8c:	780e      	ldrb	r6, [r1, #0]
          ep->xfer_len_db -= len;
 800ae8e:	1a24      	subs	r4, r4, r0
          PCD_SET_EP_DBUF(USBx, ep->num);
 800ae90:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae94:	ea4f 1906 	mov.w	r9, r6, lsl #4
          PCD_SET_EP_DBUF(USBx, ep->num);
 800ae98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aea0:	041b      	lsls	r3, r3, #16
 800aea2:	0c1b      	lsrs	r3, r3, #16
 800aea4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800aea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeac:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aeb0:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
          ep->xfer_len_db -= len;
 800aeb4:	620c      	str	r4, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aeb6:	f013 0f40 	tst.w	r3, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aeba:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800aebe:	b29e      	uxth	r6, r3
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aec0:	f000 80f2 	beq.w	800b0a8 <USB_EPStartXfer+0x53c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aec4:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800aec8:	4433      	add	r3, r6
 800aeca:	fa1f fa80 	uxth.w	sl, r0
 800aece:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aed2:	894e      	ldrh	r6, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aed4:	f10a 0801 	add.w	r8, sl, #1
 800aed8:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800aedc:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aee0:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aee2:	eb03 0646 	add.w	r6, r3, r6, lsl #1
  for (i = n; i != 0U; i--)
 800aee6:	d008      	beq.n	800aefa <USB_EPStartXfer+0x38e>
  uint8_t *pBuf = pbUsrBuf;
 800aee8:	46bc      	mov	ip, r7
 800aeea:	eb06 0b88 	add.w	fp, r6, r8, lsl #2
    temp1 = *pBuf;
 800aeee:	f83c eb02 	ldrh.w	lr, [ip], #2
    *pdwVal = (uint16_t)temp2;
 800aef2:	f826 eb04 	strh.w	lr, [r6], #4
  for (i = n; i != 0U; i--)
 800aef6:	45b3      	cmp	fp, r6
 800aef8:	d1f9      	bne.n	800aeee <USB_EPStartXfer+0x382>
            ep->xfer_buff += len;
 800aefa:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800aefc:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800aefe:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800af00:	f080 8127 	bcs.w	800b152 <USB_EPStartXfer+0x5e6>
              ep->xfer_len_db -= len;
 800af04:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af06:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800af0a:	620c      	str	r4, [r1, #32]
 800af0c:	b284      	uxth	r4, r0
 800af0e:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800af12:	4420      	add	r0, r4
 800af14:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af18:	8908      	ldrh	r0, [r1, #8]
 800af1a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800af1e:	f1b8 0f00 	cmp.w	r8, #0
 800af22:	f43f af19 	beq.w	800ad58 <USB_EPStartXfer+0x1ec>
 800af26:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800af2a:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800af2e:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800af32:	429c      	cmp	r4, r3
 800af34:	d1f9      	bne.n	800af2a <USB_EPStartXfer+0x3be>
 800af36:	e70f      	b.n	800ad58 <USB_EPStartXfer+0x1ec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af38:	f202 4404 	addw	r4, r2, #1028	; 0x404
 800af3c:	4434      	add	r4, r6
 800af3e:	b286      	uxth	r6, r0
 800af40:	f824 6008 	strh.w	r6, [r4, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af44:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800af48:	3601      	adds	r6, #1
 800af4a:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800af4e:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af50:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af54:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
  for (i = n; i != 0U; i--)
 800af58:	d008      	beq.n	800af6c <USB_EPStartXfer+0x400>
  uint8_t *pBuf = pbUsrBuf;
 800af5a:	464c      	mov	r4, r9
 800af5c:	eb09 0646 	add.w	r6, r9, r6, lsl #1
    temp1 = *pBuf;
 800af60:	f834 eb02 	ldrh.w	lr, [r4], #2
  for (i = n; i != 0U; i--)
 800af64:	42b4      	cmp	r4, r6
    *pdwVal = (uint16_t)temp2;
 800af66:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800af6a:	d1f9      	bne.n	800af60 <USB_EPStartXfer+0x3f4>
          ep->xfer_buff += len;
 800af6c:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800af70:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800af72:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800af74:	d36f      	bcc.n	800b056 <USB_EPStartXfer+0x4ea>
            ep->xfer_len_db = 0U;
 800af76:	2500      	movs	r5, #0
 800af78:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f43f aeec 	beq.w	800ad58 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800af80:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800af84:	b285      	uxth	r5, r0
 800af86:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800af8a:	4428      	add	r0, r5
 800af8c:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800af8e:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800af90:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af94:	8948      	ldrh	r0, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800af96:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800af98:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af9a:	eb07 0740 	add.w	r7, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800af9e:	f43f aedb 	beq.w	800ad58 <USB_EPStartXfer+0x1ec>
 800afa2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    temp1 = *pBuf;
 800afa6:	f834 0b02 	ldrh.w	r0, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800afaa:	f827 0b04 	strh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 800afae:	429f      	cmp	r7, r3
 800afb0:	d1f9      	bne.n	800afa6 <USB_EPStartXfer+0x43a>
 800afb2:	e6d1      	b.n	800ad58 <USB_EPStartXfer+0x1ec>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800afb4:	7808      	ldrb	r0, [r1, #0]
 800afb6:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 800afba:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800afbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afc2:	041b      	lsls	r3, r3, #16
 800afc4:	0c1b      	lsrs	r3, r3, #16
 800afc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afce:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800afd2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800afd6:	0100      	lsls	r0, r0, #4
 800afd8:	b29d      	uxth	r5, r3
 800afda:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800afde:	442b      	add	r3, r5
 800afe0:	b2a5      	uxth	r5, r4
 800afe2:	521d      	strh	r5, [r3, r0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800afe4:	b2a0      	uxth	r0, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800afe6:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800afe8:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800afea:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800afee:	0840      	lsrs	r0, r0, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aff0:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aff2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 800aff6:	f43f aeaf 	beq.w	800ad58 <USB_EPStartXfer+0x1ec>
 800affa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    temp1 = *pBuf;
 800affe:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800b002:	f823 5b04 	strh.w	r5, [r3], #4
  for (i = n; i != 0U; i--)
 800b006:	4298      	cmp	r0, r3
 800b008:	d1f9      	bne.n	800affe <USB_EPStartXfer+0x492>
 800b00a:	e6a5      	b.n	800ad58 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b00c:	5ac4      	ldrh	r4, [r0, r3]
 800b00e:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b012:	0424      	lsls	r4, r4, #16
 800b014:	0c24      	lsrs	r4, r4, #16
 800b016:	52c4      	strh	r4, [r0, r3]
 800b018:	5ac5      	ldrh	r5, [r0, r3]
 800b01a:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800b01e:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800b022:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800b026:	b2ad      	uxth	r5, r5
 800b028:	52c5      	strh	r5, [r0, r3]
 800b02a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b02e:	b285      	uxth	r5, r0
 800b030:	4620      	mov	r0, r4
 800b032:	4428      	add	r0, r5
 800b034:	5ac4      	ldrh	r4, [r0, r3]
 800b036:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b03a:	0424      	lsls	r4, r4, #16
 800b03c:	0c24      	lsrs	r4, r4, #16
 800b03e:	52c4      	strh	r4, [r0, r3]
 800b040:	5ac4      	ldrh	r4, [r0, r3]
 800b042:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800b046:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800b04a:	b2a4      	uxth	r4, r4
 800b04c:	52c4      	strh	r4, [r0, r3]
 800b04e:	e6eb      	b.n	800ae28 <USB_EPStartXfer+0x2bc>
            ep->xfer_len_db -= len;
 800b050:	1a1d      	subs	r5, r3, r0
 800b052:	4603      	mov	r3, r0
 800b054:	e646      	b.n	800ace4 <USB_EPStartXfer+0x178>
            ep->xfer_len_db -= len;
 800b056:	1a1d      	subs	r5, r3, r0
 800b058:	4603      	mov	r3, r0
 800b05a:	e78d      	b.n	800af78 <USB_EPStartXfer+0x40c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b05c:	5ae0      	ldrh	r0, [r4, r3]
 800b05e:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800b062:	0400      	lsls	r0, r0, #16
 800b064:	0c00      	lsrs	r0, r0, #16
 800b066:	52e0      	strh	r0, [r4, r3]
 800b068:	5ae5      	ldrh	r5, [r4, r3]
 800b06a:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800b06e:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800b072:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800b076:	b2ad      	uxth	r5, r5
 800b078:	52e5      	strh	r5, [r4, r3]
 800b07a:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800b07e:	b2a4      	uxth	r4, r4
 800b080:	4420      	add	r0, r4
 800b082:	5ac4      	ldrh	r4, [r0, r3]
 800b084:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b088:	0424      	lsls	r4, r4, #16
 800b08a:	0c24      	lsrs	r4, r4, #16
 800b08c:	52c4      	strh	r4, [r0, r3]
 800b08e:	5ac4      	ldrh	r4, [r0, r3]
 800b090:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800b094:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800b098:	b2a4      	uxth	r4, r4
 800b09a:	52c4      	strh	r4, [r0, r3]
 800b09c:	f891 c000 	ldrb.w	ip, [r1]
 800b0a0:	e5c3      	b.n	800ac2a <USB_EPStartXfer+0xbe>
 800b0a2:	bf00      	nop
 800b0a4:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b0a8:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800b0ac:	4433      	add	r3, r6
 800b0ae:	fa1f fa80 	uxth.w	sl, r0
 800b0b2:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0b6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b0ba:	f10a 0801 	add.w	r8, sl, #1
 800b0be:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b0c2:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b0c6:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0c8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
  for (i = n; i != 0U; i--)
 800b0cc:	d008      	beq.n	800b0e0 <USB_EPStartXfer+0x574>
  uint8_t *pBuf = pbUsrBuf;
 800b0ce:	463e      	mov	r6, r7
 800b0d0:	eb07 0b48 	add.w	fp, r7, r8, lsl #1
    temp1 = *pBuf;
 800b0d4:	f836 eb02 	ldrh.w	lr, [r6], #2
  for (i = n; i != 0U; i--)
 800b0d8:	45b3      	cmp	fp, r6
    *pdwVal = (uint16_t)temp2;
 800b0da:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800b0de:	d1f9      	bne.n	800b0d4 <USB_EPStartXfer+0x568>
            ep->xfer_buff += len;
 800b0e0:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800b0e2:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800b0e4:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800b0e6:	d23e      	bcs.n	800b166 <USB_EPStartXfer+0x5fa>
              ep->xfer_len_db -= len;
 800b0e8:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b0ea:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b0ee:	620c      	str	r4, [r1, #32]
 800b0f0:	b284      	uxth	r4, r0
 800b0f2:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800b0f6:	4420      	add	r0, r4
 800b0f8:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0fc:	8948      	ldrh	r0, [r1, #10]
 800b0fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800b102:	f1b8 0f00 	cmp.w	r8, #0
 800b106:	f43f ae27 	beq.w	800ad58 <USB_EPStartXfer+0x1ec>
 800b10a:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800b10e:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800b112:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800b116:	429c      	cmp	r4, r3
 800b118:	d1f9      	bne.n	800b10e <USB_EPStartXfer+0x5a2>
 800b11a:	e61d      	b.n	800ad58 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b11c:	0965      	lsrs	r5, r4, #5
 800b11e:	462f      	mov	r7, r5
 800b120:	f014 041f 	ands.w	r4, r4, #31
 800b124:	bf08      	it	eq
 800b126:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800b12a:	462e      	mov	r6, r5
 800b12c:	4d13      	ldr	r5, [pc, #76]	; (800b17c <USB_EPStartXfer+0x610>)
 800b12e:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800b132:	b2ad      	uxth	r5, r5
 800b134:	52c5      	strh	r5, [r0, r3]
 800b136:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b13a:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 800b13e:	b280      	uxth	r0, r0
 800b140:	4405      	add	r5, r0
 800b142:	b904      	cbnz	r4, 800b146 <USB_EPStartXfer+0x5da>
 800b144:	3e01      	subs	r6, #1
 800b146:	480d      	ldr	r0, [pc, #52]	; (800b17c <USB_EPStartXfer+0x610>)
 800b148:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800b14c:	b280      	uxth	r0, r0
 800b14e:	52e8      	strh	r0, [r5, r3]
 800b150:	e66a      	b.n	800ae28 <USB_EPStartXfer+0x2bc>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b152:	fa1f f884 	uxth.w	r8, r4
 800b156:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b15a:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b15e:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800b162:	2400      	movs	r4, #0
 800b164:	e6cf      	b.n	800af06 <USB_EPStartXfer+0x39a>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b166:	fa1f f884 	uxth.w	r8, r4
 800b16a:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b16e:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b172:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800b176:	2400      	movs	r4, #0
 800b178:	e7b7      	b.n	800b0ea <USB_EPStartXfer+0x57e>
 800b17a:	bf00      	nop
 800b17c:	ffff8000 	.word	0xffff8000

0800b180 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 800b180:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b182:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800b184:	b18b      	cbz	r3, 800b1aa <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b186:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b18a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b18e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b192:	041b      	lsls	r3, r3, #16
 800b194:	0c1b      	lsrs	r3, r3, #16
 800b196:	f083 0310 	eor.w	r3, r3, #16
 800b19a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b1aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1b6:	041b      	lsls	r3, r3, #16
 800b1b8:	0c1b      	lsrs	r3, r3, #16
 800b1ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b1be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop

0800b1d0 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 800b1d0:	7b0b      	ldrb	r3, [r1, #12]
 800b1d2:	bb3b      	cbnz	r3, 800b224 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 800b1d4:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1d6:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800b1d8:	b333      	cbz	r3, 800b228 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1de:	065b      	lsls	r3, r3, #25
 800b1e0:	d50d      	bpl.n	800b1fe <USB_EPClearStall+0x2e>
 800b1e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ee:	041b      	lsls	r3, r3, #16
 800b1f0:	0c1b      	lsrs	r3, r3, #16
 800b1f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b1fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800b1fe:	78cb      	ldrb	r3, [r1, #3]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d00f      	beq.n	800b224 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b204:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b20c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b210:	041b      	lsls	r3, r3, #16
 800b212:	0c1b      	lsrs	r3, r3, #16
 800b214:	f083 0320 	eor.w	r3, r3, #32
 800b218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b220:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b224:	2000      	movs	r0, #0
 800b226:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b228:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b22c:	045b      	lsls	r3, r3, #17
 800b22e:	d50d      	bpl.n	800b24c <USB_EPClearStall+0x7c>
 800b230:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b23c:	041b      	lsls	r3, r3, #16
 800b23e:	0c1b      	lsrs	r3, r3, #16
 800b240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b248:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b24c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b258:	041b      	lsls	r3, r3, #16
 800b25a:	0c1b      	lsrs	r3, r3, #16
 800b25c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800b260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b268:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b26c:	2000      	movs	r0, #0
 800b26e:	4770      	bx	lr

0800b270 <USB_SetDevAddress>:
  if (address == 0U)
 800b270:	b911      	cbnz	r1, 800b278 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b272:	2380      	movs	r3, #128	; 0x80
 800b274:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800b278:	2000      	movs	r0, #0
 800b27a:	4770      	bx	lr

0800b27c <USB_DevConnect>:
}
 800b27c:	2000      	movs	r0, #0
 800b27e:	4770      	bx	lr

0800b280 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 800b280:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 800b284:	b280      	uxth	r0, r0
 800b286:	4770      	bx	lr

0800b288 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b288:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b28a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 800b28e:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b290:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b294:	d007      	beq.n	800b2a6 <USB_WritePMA+0x1e>
 800b296:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b29a:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800b29e:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 800b2a2:	4282      	cmp	r2, r0
 800b2a4:	d1f9      	bne.n	800b29a <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800b2a6:	4770      	bx	lr

0800b2a8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b2a8:	b570      	push	{r4, r5, r6, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2aa:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 800b2ae:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2b0:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b2b4:	d012      	beq.n	800b2dc <USB_ReadPMA+0x34>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2b6:	46ae      	mov	lr, r5
  for (i = n; i != 0U; i--)
 800b2b8:	46b4      	mov	ip, r6
 800b2ba:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b2bc:	f83e 2b04 	ldrh.w	r2, [lr], #4
  for (i = n; i != 0U; i--)
 800b2c0:	3002      	adds	r0, #2
    temp = *(__IO uint16_t *)pdwVal;
 800b2c2:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b2c4:	0a14      	lsrs	r4, r2, #8
  for (i = n; i != 0U; i--)
 800b2c6:	f1bc 0c01 	subs.w	ip, ip, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b2ca:	f800 2c04 	strb.w	r2, [r0, #-4]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b2ce:	f800 4c03 	strb.w	r4, [r0, #-3]
  for (i = n; i != 0U; i--)
 800b2d2:	d1f3      	bne.n	800b2bc <USB_ReadPMA+0x14>
    pBuf++;
 800b2d4:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 800b2d8:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b2dc:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800b2de:	bf44      	itt	mi
 800b2e0:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b2e2:	700b      	strbmi	r3, [r1, #0]
  }
}
 800b2e4:	bd70      	pop	{r4, r5, r6, pc}
 800b2e6:	bf00      	nop

0800b2e8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b2e8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800b2ec:	b183      	cbz	r3, 800b310 <USBD_CDC_EP0_RxReady+0x28>
{
 800b2ee:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b2f0:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b2f4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800b2f8:	28ff      	cmp	r0, #255	; 0xff
 800b2fa:	d007      	beq.n	800b30c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	4621      	mov	r1, r4
 800b300:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800b304:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 800b306:	23ff      	movs	r3, #255	; 0xff
 800b308:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800b30c:	2000      	movs	r0, #0
 800b30e:	bd10      	pop	{r4, pc}
 800b310:	2000      	movs	r0, #0
 800b312:	4770      	bx	lr

0800b314 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800b314:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b316:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgFSDesc;
}
 800b318:	4801      	ldr	r0, [pc, #4]	; (800b320 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b31a:	801a      	strh	r2, [r3, #0]
}
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	20000058 	.word	0x20000058

0800b324 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800b324:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b326:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgHSDesc;
}
 800b328:	4801      	ldr	r0, [pc, #4]	; (800b330 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b32a:	801a      	strh	r2, [r3, #0]
}
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	2000009c 	.word	0x2000009c

0800b334 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800b334:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b336:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800b338:	4801      	ldr	r0, [pc, #4]	; (800b340 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b33a:	801a      	strh	r2, [r3, #0]
}
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	200000ec 	.word	0x200000ec

0800b344 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800b344:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b346:	220a      	movs	r2, #10
  return USBD_CDC_DeviceQualifierDesc;
}
 800b348:	4801      	ldr	r0, [pc, #4]	; (800b350 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b34a:	801a      	strh	r2, [r3, #0]
}
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	200000e0 	.word	0x200000e0

0800b354 <USBD_CDC_DataOut>:
{
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b358:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b35c:	f000 fffc 	bl	800c358 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800b360:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b364:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800b368:	b14b      	cbz	r3, 800b37e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b36a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800b36e:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800b378:	4798      	blx	r3
    return USBD_OK;
 800b37a:	2000      	movs	r0, #0
}
 800b37c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b37e:	2002      	movs	r0, #2
}
 800b380:	bd38      	pop	{r3, r4, r5, pc}
 800b382:	bf00      	nop

0800b384 <USBD_CDC_DataIn>:
{
 800b384:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800b386:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 800b38a:	b1ed      	cbz	r5, 800b3c8 <USBD_CDC_DataIn+0x44>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b38c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800b390:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 800b394:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800b398:	b14a      	cbz	r2, 800b3ae <USBD_CDC_DataIn+0x2a>
 800b39a:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 800b39e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800b3a2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800b3a4:	fbb2 f3f4 	udiv	r3, r2, r4
 800b3a8:	fb04 2413 	mls	r4, r4, r3, r2
 800b3ac:	b124      	cbz	r4, 800b3b8 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800b3ae:	2300      	movs	r3, #0
    return USBD_OK;
 800b3b0:	4618      	mov	r0, r3
      hcdc->TxState = 0U;
 800b3b2:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
}
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800b3b8:	4623      	mov	r3, r4
 800b3ba:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 800b3bc:	f8cc 401c 	str.w	r4, [ip, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800b3c0:	f000 ffae 	bl	800c320 <USBD_LL_Transmit>
    return USBD_OK;
 800b3c4:	4620      	mov	r0, r4
}
 800b3c6:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b3c8:	2002      	movs	r0, #2
}
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}

0800b3cc <USBD_CDC_Setup>:
{
 800b3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 800b3d0:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3d2:	780b      	ldrb	r3, [r1, #0]
{
 800b3d4:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3d6:	f013 0660 	ands.w	r6, r3, #96	; 0x60
{
 800b3da:	460c      	mov	r4, r1
 800b3dc:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b3de:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800b3e2:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800b3e6:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3ea:	d013      	beq.n	800b414 <USBD_CDC_Setup+0x48>
 800b3ec:	2e20      	cmp	r6, #32
 800b3ee:	d117      	bne.n	800b420 <USBD_CDC_Setup+0x54>
    if (req->wLength)
 800b3f0:	88ce      	ldrh	r6, [r1, #6]
 800b3f2:	b1f6      	cbz	r6, 800b432 <USBD_CDC_Setup+0x66>
      if (req->bmRequest & 0x80U)
 800b3f4:	061b      	lsls	r3, r3, #24
 800b3f6:	d53f      	bpl.n	800b478 <USBD_CDC_Setup+0xac>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3f8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800b3fc:	4632      	mov	r2, r6
 800b3fe:	4641      	mov	r1, r8
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	7860      	ldrb	r0, [r4, #1]
 800b404:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b406:	4641      	mov	r1, r8
 800b408:	4628      	mov	r0, r5
 800b40a:	88e2      	ldrh	r2, [r4, #6]
  uint8_t ret = USBD_OK;
 800b40c:	463e      	mov	r6, r7
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b40e:	f000 fcd5 	bl	800bdbc <USBD_CtlSendData>
 800b412:	e00a      	b.n	800b42a <USBD_CDC_Setup+0x5e>
    switch (req->bRequest)
 800b414:	784b      	ldrb	r3, [r1, #1]
 800b416:	2b0a      	cmp	r3, #10
 800b418:	d01f      	beq.n	800b45a <USBD_CDC_Setup+0x8e>
 800b41a:	2b0b      	cmp	r3, #11
 800b41c:	d027      	beq.n	800b46e <USBD_CDC_Setup+0xa2>
 800b41e:	b193      	cbz	r3, 800b446 <USBD_CDC_Setup+0x7a>
      USBD_CtlError (pdev, req);
 800b420:	4621      	mov	r1, r4
 800b422:	4628      	mov	r0, r5
 800b424:	f000 fc94 	bl	800bd50 <USBD_CtlError>
      ret = USBD_FAIL;
 800b428:	2602      	movs	r6, #2
}
 800b42a:	4630      	mov	r0, r6
 800b42c:	b002      	add	sp, #8
 800b42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b432:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800b436:	4632      	mov	r2, r6
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	7848      	ldrb	r0, [r1, #1]
 800b43c:	4798      	blx	r3
}
 800b43e:	4630      	mov	r0, r6
 800b440:	b002      	add	sp, #8
 800b442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b446:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	d1e8      	bne.n	800b420 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800b44e:	2202      	movs	r2, #2
 800b450:	f10d 0106 	add.w	r1, sp, #6
 800b454:	f000 fcb2 	bl	800bdbc <USBD_CtlSendData>
 800b458:	e7e7      	b.n	800b42a <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b45a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d1de      	bne.n	800b420 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800b462:	2201      	movs	r2, #1
 800b464:	f10d 0105 	add.w	r1, sp, #5
 800b468:	f000 fca8 	bl	800bdbc <USBD_CtlSendData>
 800b46c:	e7dd      	b.n	800b42a <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b46e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b472:	2b03      	cmp	r3, #3
 800b474:	d0d9      	beq.n	800b42a <USBD_CDC_Setup+0x5e>
 800b476:	e7d3      	b.n	800b420 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 800b478:	784b      	ldrb	r3, [r1, #1]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b47a:	4632      	mov	r2, r6
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b47c:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b480:	4641      	mov	r1, r8
        hcdc->CmdOpCode = req->bRequest;
 800b482:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b486:	f000 fcb1 	bl	800bdec <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800b48a:	463e      	mov	r6, r7
 800b48c:	e7cd      	b.n	800b42a <USBD_CDC_Setup+0x5e>
 800b48e:	bf00      	nop

0800b490 <USBD_CDC_DeInit>:
{
 800b490:	b538      	push	{r3, r4, r5, lr}
 800b492:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b494:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b496:	2181      	movs	r1, #129	; 0x81
 800b498:	f000 fef6 	bl	800c288 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b49c:	2101      	movs	r1, #1
 800b49e:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b4a0:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b4a2:	f000 fef1 	bl	800c288 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b4a6:	2182      	movs	r1, #130	; 0x82
 800b4a8:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b4aa:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b4ae:	f000 feeb 	bl	800c288 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800b4b2:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b4b6:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 800b4b8:	b14b      	cbz	r3, 800b4ce <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b4ba:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b4c2:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800b4c6:	f000 ff4f 	bl	800c368 <USBD_static_free>
    pdev->pClassData = NULL;
 800b4ca:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	bd38      	pop	{r3, r4, r5, pc}
 800b4d2:	bf00      	nop

0800b4d4 <USBD_CDC_Init>:
{
 800b4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b4d8:	7c03      	ldrb	r3, [r0, #16]
{
 800b4da:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b4dc:	bbbb      	cbnz	r3, 800b54e <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b4de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	2181      	movs	r1, #129	; 0x81
 800b4e6:	f000 febf 	bl	800c268 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b4ea:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b4ec:	f44f 7300 	mov.w	r3, #512	; 0x200
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b4f0:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b4f6:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f000 feb5 	bl	800c268 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b4fe:	2308      	movs	r3, #8
 800b500:	2203      	movs	r2, #3
 800b502:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b504:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b508:	4620      	mov	r0, r4
 800b50a:	f000 fead 	bl	800c268 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b50e:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b512:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b514:	f000 ff24 	bl	800c360 <USBD_static_malloc>
 800b518:	4605      	mov	r5, r0
 800b51a:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800b51e:	b348      	cbz	r0, 800b574 <USBD_CDC_Init+0xa0>
    hcdc->TxState = 0U;
 800b520:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b524:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4798      	blx	r3
    hcdc->TxState = 0U;
 800b52c:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800b530:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b534:	7c26      	ldrb	r6, [r4, #16]
 800b536:	b196      	cbz	r6, 800b55e <USBD_CDC_Init+0x8a>
  uint8_t ret = 0U;
 800b538:	4646      	mov	r6, r8
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b53a:	2340      	movs	r3, #64	; 0x40
 800b53c:	4639      	mov	r1, r7
 800b53e:	4620      	mov	r0, r4
 800b540:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b544:	f000 fefa 	bl	800c33c <USBD_LL_PrepareReceive>
}
 800b548:	4630      	mov	r0, r6
 800b54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b54e:	2340      	movs	r3, #64	; 0x40
 800b550:	2202      	movs	r2, #2
 800b552:	2181      	movs	r1, #129	; 0x81
 800b554:	f000 fe88 	bl	800c268 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b558:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b55a:	2340      	movs	r3, #64	; 0x40
 800b55c:	e7c8      	b.n	800b4f0 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b55e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b562:	4639      	mov	r1, r7
 800b564:	4620      	mov	r0, r4
 800b566:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b56a:	f000 fee7 	bl	800c33c <USBD_LL_PrepareReceive>
}
 800b56e:	4630      	mov	r0, r6
 800b570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 800b574:	463e      	mov	r6, r7
}
 800b576:	4630      	mov	r0, r6
 800b578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b57c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800b57c:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 800b57e:	b119      	cbz	r1, 800b588 <USBD_CDC_RegisterInterface+0xc>
  {
    pdev->pUserData= fops;
    ret = USBD_OK;
 800b580:	2000      	movs	r0, #0
    pdev->pUserData= fops;
 800b582:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
    ret = USBD_OK;
 800b586:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800b588:	2002      	movs	r0, #2
  }

  return ret;
}
 800b58a:	4770      	bx	lr

0800b58c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800b58c:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b58e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800b592:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800b594:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b598:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop

0800b5a0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800b5a0:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800b5a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  return USBD_OK;
}
 800b5a6:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800b5a8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop

0800b5b0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b5b0:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 800b5b4:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800b5b6:	b19a      	cbz	r2, 800b5e0 <USBD_CDC_ReceivePacket+0x30>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800b5b8:	7c04      	ldrb	r4, [r0, #16]
 800b5ba:	b144      	cbz	r4, 800b5ce <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b5bc:	2400      	movs	r4, #0
      USBD_LL_PrepareReceive(pdev,
 800b5be:	2340      	movs	r3, #64	; 0x40
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800b5c6:	f000 feb9 	bl	800c33c <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800b5ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800b5d8:	f000 feb0 	bl	800c33c <USBD_LL_PrepareReceive>
}
 800b5dc:	4620      	mov	r0, r4
 800b5de:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800b5e0:	2402      	movs	r4, #2
}
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	bd10      	pop	{r4, pc}
 800b5e6:	bf00      	nop

0800b5e8 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800b5e8:	b188      	cbz	r0, 800b60e <USBD_Init+0x26>
{
 800b5ea:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800b5ec:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b5f0:	b113      	cbz	r3, 800b5f8 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800b5f8:	b109      	cbz	r1, 800b5fe <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800b5fa:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b5fe:	2301      	movs	r3, #1
  pdev->id = id;
 800b600:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b602:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b606:	f000 fddd 	bl	800c1c4 <USBD_LL_Init>

  return USBD_OK;
 800b60a:	2000      	movs	r0, #0
}
 800b60c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800b60e:	2002      	movs	r0, #2
}
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop

0800b614 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b614:	4603      	mov	r3, r0
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800b616:	b119      	cbz	r1, 800b620 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 800b618:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 800b61a:	f8c3 128c 	str.w	r1, [r3, #652]	; 0x28c
    status = USBD_OK;
 800b61e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b620:	2002      	movs	r0, #2
  }

  return status;
}
 800b622:	4770      	bx	lr

0800b624 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800b624:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b626:	f000 fe11 	bl	800c24c <USBD_LL_Start>

  return USBD_OK;
}
 800b62a:	2000      	movs	r0, #0
 800b62c:	bd08      	pop	{r3, pc}
 800b62e:	bf00      	nop

0800b630 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b630:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800b632:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b636:	b11b      	cbz	r3, 800b640 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4798      	blx	r3
 800b63c:	b900      	cbnz	r0, 800b640 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800b63e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800b640:	2002      	movs	r0, #2
}
 800b642:	bd08      	pop	{r3, pc}

0800b644 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b644:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b646:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	4798      	blx	r3
  return USBD_OK;
}
 800b64e:	2000      	movs	r0, #0
 800b650:	bd08      	pop	{r3, pc}
 800b652:	bf00      	nop

0800b654 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b654:	b538      	push	{r3, r4, r5, lr}
 800b656:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b658:	f500 7520 	add.w	r5, r0, #640	; 0x280
 800b65c:	4628      	mov	r0, r5
 800b65e:	f000 fb63 	bl	800bd28 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b662:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 800b664:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286

  switch (pdev->request.bmRequest & 0x1FU)
 800b668:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 800b66c:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
 800b670:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 800b674:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 800b676:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 800b67a:	d009      	beq.n	800b690 <USBD_LL_SetupStage+0x3c>
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d013      	beq.n	800b6a8 <USBD_LL_SetupStage+0x54>
 800b680:	b163      	cbz	r3, 800b69c <USBD_LL_SetupStage+0x48>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b682:	4620      	mov	r0, r4
 800b684:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b688:	f000 fe0c 	bl	800c2a4 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 800b68c:	2000      	movs	r0, #0
 800b68e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800b690:	4629      	mov	r1, r5
 800b692:	4620      	mov	r0, r4
 800b694:	f000 fa78 	bl	800bb88 <USBD_StdItfReq>
}
 800b698:	2000      	movs	r0, #0
 800b69a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 800b69c:	4629      	mov	r1, r5
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f000 f8f8 	bl	800b894 <USBD_StdDevReq>
}
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 faa0 	bl	800bbf0 <USBD_StdEPReq>
}
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	bd38      	pop	{r3, r4, r5, pc}

0800b6b4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800b6b8:	b969      	cbnz	r1, 800b6d6 <USBD_LL_DataOutStage+0x22>
 800b6ba:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b6bc:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800b6c0:	2a03      	cmp	r2, #3
 800b6c2:	d015      	beq.n	800b6f0 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b6c4:	2a05      	cmp	r2, #5
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	d10e      	bne.n	800b6e8 <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b6ca:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800b6ce:	f000 fde9 	bl	800c2a4 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800b6d2:	4620      	mov	r0, r4
}
 800b6d4:	bd38      	pop	{r3, r4, r5, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 800b6d6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b6da:	699b      	ldr	r3, [r3, #24]
 800b6dc:	b133      	cbz	r3, 800b6ec <USBD_LL_DataOutStage+0x38>
 800b6de:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800b6e2:	2a03      	cmp	r2, #3
 800b6e4:	d102      	bne.n	800b6ec <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 800b6e6:	4798      	blx	r3
  return USBD_OK;
 800b6e8:	2000      	movs	r0, #0
}
 800b6ea:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b6ec:	2002      	movs	r0, #2
}
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
      if(pep->rem_length > pep->maxpacket)
 800b6f0:	e9d0 1253 	ldrd	r1, r2, [r0, #332]	; 0x14c
 800b6f4:	4291      	cmp	r1, r2
 800b6f6:	d90c      	bls.n	800b712 <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -=  pep->maxpacket;
 800b6f8:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx (pdev,
 800b6fa:	428a      	cmp	r2, r1
 800b6fc:	bf88      	it	hi
 800b6fe:	b28a      	uxthhi	r2, r1
        pep->rem_length -=  pep->maxpacket;
 800b700:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800b704:	bf98      	it	ls
 800b706:	b292      	uxthls	r2, r2
 800b708:	4619      	mov	r1, r3
 800b70a:	f000 fb7d 	bl	800be08 <USBD_CtlContinueRx>
  return USBD_OK;
 800b70e:	2000      	movs	r0, #0
}
 800b710:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b712:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	b11b      	cbz	r3, 800b722 <USBD_LL_DataOutStage+0x6e>
 800b71a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800b71e:	2a03      	cmp	r2, #3
 800b720:	d004      	beq.n	800b72c <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 800b722:	4628      	mov	r0, r5
 800b724:	f000 fb7a 	bl	800be1c <USBD_CtlSendStatus>
  return USBD_OK;
 800b728:	2000      	movs	r0, #0
}
 800b72a:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 800b72c:	4798      	blx	r3
 800b72e:	e7f8      	b.n	800b722 <USBD_LL_DataOutStage+0x6e>

0800b730 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800b734:	b961      	cbnz	r1, 800b750 <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800b736:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d015      	beq.n	800b76a <USBD_LL_DataInStage+0x3a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b73e:	f033 0304 	bics.w	r3, r3, #4
 800b742:	d02e      	beq.n	800b7a2 <USBD_LL_DataInStage+0x72>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b744:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d031      	beq.n	800b7b0 <USBD_LL_DataInStage+0x80>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800b74c:	2000      	movs	r0, #0
}
 800b74e:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 800b750:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b754:	695b      	ldr	r3, [r3, #20]
 800b756:	b133      	cbz	r3, 800b766 <USBD_LL_DataInStage+0x36>
 800b758:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800b75c:	2a03      	cmp	r2, #3
 800b75e:	d102      	bne.n	800b766 <USBD_LL_DataInStage+0x36>
    pdev->pClass->DataIn(pdev, epnum);
 800b760:	4798      	blx	r3
  return USBD_OK;
 800b762:	2000      	movs	r0, #0
}
 800b764:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800b766:	2002      	movs	r0, #2
}
 800b768:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 800b76a:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800b76e:	429e      	cmp	r6, r3
 800b770:	d833      	bhi.n	800b7da <USBD_LL_DataInStage+0xaa>
        if((pep->total_length % pep->maxpacket == 0U) &&
 800b772:	69c2      	ldr	r2, [r0, #28]
 800b774:	fbb2 f5f3 	udiv	r5, r2, r3
 800b778:	fb03 2515 	mls	r5, r3, r5, r2
 800b77c:	b9ed      	cbnz	r5, 800b7ba <USBD_LL_DataInStage+0x8a>
 800b77e:	4293      	cmp	r3, r2
 800b780:	d81b      	bhi.n	800b7ba <USBD_LL_DataInStage+0x8a>
           (pep->total_length >= pep->maxpacket) &&
 800b782:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 800b786:	429a      	cmp	r2, r3
 800b788:	d217      	bcs.n	800b7ba <USBD_LL_DataInStage+0x8a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b78a:	462a      	mov	r2, r5
 800b78c:	f000 fb24 	bl	800bdd8 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b790:	462b      	mov	r3, r5
 800b792:	462a      	mov	r2, r5
 800b794:	4629      	mov	r1, r5
 800b796:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800b798:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b79c:	f000 fdce 	bl	800c33c <USBD_LL_PrepareReceive>
 800b7a0:	e7d0      	b.n	800b744 <USBD_LL_DataInStage+0x14>
        USBD_LL_StallEP(pdev, 0x80U);
 800b7a2:	2180      	movs	r1, #128	; 0x80
 800b7a4:	f000 fd7e 	bl	800c2a4 <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 800b7a8:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d1cd      	bne.n	800b74c <USBD_LL_DataInStage+0x1c>
      pdev->dev_test_mode = 0U;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
  return USBD_OK;
 800b7b6:	4618      	mov	r0, r3
}
 800b7b8:	bd70      	pop	{r4, r5, r6, pc}
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b7ba:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	b11b      	cbz	r3, 800b7ca <USBD_LL_DataInStage+0x9a>
 800b7c2:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800b7c6:	2a03      	cmp	r2, #3
 800b7c8:	d015      	beq.n	800b7f6 <USBD_LL_DataInStage+0xc6>
          USBD_LL_StallEP(pdev, 0x80U);
 800b7ca:	2180      	movs	r1, #128	; 0x80
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f000 fd69 	bl	800c2a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f000 fb2e 	bl	800be34 <USBD_CtlReceiveStatus>
 800b7d8:	e7b4      	b.n	800b744 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800b7da:	460d      	mov	r5, r1
 800b7dc:	1af3      	subs	r3, r6, r3
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800b7de:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800b7e0:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	f000 faf8 	bl	800bdd8 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b7e8:	462b      	mov	r3, r5
 800b7ea:	462a      	mov	r2, r5
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f000 fda4 	bl	800c33c <USBD_LL_PrepareReceive>
 800b7f4:	e7a6      	b.n	800b744 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	4798      	blx	r3
 800b7fa:	e7e6      	b.n	800b7ca <USBD_LL_DataInStage+0x9a>

0800b7fc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800b7fc:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7fe:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b800:	2640      	movs	r6, #64	; 0x40
{
 800b802:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b804:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b806:	4611      	mov	r1, r2
 800b808:	4633      	mov	r3, r6
 800b80a:	f000 fd2d 	bl	800c268 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b80e:	4633      	mov	r3, r6
 800b810:	2180      	movs	r1, #128	; 0x80
 800b812:	2200      	movs	r2, #0
 800b814:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b816:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b81a:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b81e:	f000 fd23 	bl	800c268 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800b822:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800b824:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b828:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b82a:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b82c:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800b830:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800b834:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800b836:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 800b83a:	b123      	cbz	r3, 800b846 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b83c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800b840:	4620      	mov	r0, r4
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	4798      	blx	r3
  }

  return USBD_OK;
}
 800b846:	2000      	movs	r0, #0
 800b848:	bd70      	pop	{r4, r5, r6, pc}
 800b84a:	bf00      	nop

0800b84c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800b84c:	4603      	mov	r3, r0
  pdev->dev_speed = speed;
  return USBD_OK;
}
 800b84e:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800b850:	7419      	strb	r1, [r3, #16]
}
 800b852:	4770      	bx	lr

0800b854 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800b854:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b856:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 800b858:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
}
 800b85c:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b85e:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
  pdev->dev_old_state =  pdev->dev_state;
 800b862:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
}
 800b866:	4770      	bx	lr

0800b868 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800b868:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
 800b86a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
  return USBD_OK;
}
 800b86e:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 800b870:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop

0800b878 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800b878:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800b87c:	2a03      	cmp	r2, #3
 800b87e:	d001      	beq.n	800b884 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800b880:	2000      	movs	r0, #0
 800b882:	4770      	bx	lr
{
 800b884:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 800b886:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b88a:	69db      	ldr	r3, [r3, #28]
 800b88c:	b103      	cbz	r3, 800b890 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800b88e:	4798      	blx	r3
}
 800b890:	2000      	movs	r0, #0
 800b892:	bd08      	pop	{r3, pc}

0800b894 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800b894:	b530      	push	{r4, r5, lr}
 800b896:	780b      	ldrb	r3, [r1, #0]
 800b898:	460d      	mov	r5, r1
 800b89a:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b89e:	2b20      	cmp	r3, #32
{
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8a4:	d00d      	beq.n	800b8c2 <USBD_StdDevReq+0x2e>
 800b8a6:	2b40      	cmp	r3, #64	; 0x40
 800b8a8:	d00b      	beq.n	800b8c2 <USBD_StdDevReq+0x2e>
 800b8aa:	b19b      	cbz	r3, 800b8d4 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800b8ac:	2180      	movs	r1, #128	; 0x80
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 fcf8 	bl	800c2a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f000 fcf4 	bl	800c2a4 <USBD_LL_StallEP>
}
 800b8bc:	2000      	movs	r0, #0
 800b8be:	b003      	add	sp, #12
 800b8c0:	bd30      	pop	{r4, r5, pc}
    pdev->pClass->Setup(pdev, req);
 800b8c2:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	4798      	blx	r3
}
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	b003      	add	sp, #12
 800b8d2:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 800b8d4:	784b      	ldrb	r3, [r1, #1]
 800b8d6:	2b09      	cmp	r3, #9
 800b8d8:	d8e8      	bhi.n	800b8ac <USBD_StdDevReq+0x18>
 800b8da:	a201      	add	r2, pc, #4	; (adr r2, 800b8e0 <USBD_StdDevReq+0x4c>)
 800b8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e0:	0800b93b 	.word	0x0800b93b
 800b8e4:	0800b967 	.word	0x0800b967
 800b8e8:	0800b8ad 	.word	0x0800b8ad
 800b8ec:	0800b985 	.word	0x0800b985
 800b8f0:	0800b8ad 	.word	0x0800b8ad
 800b8f4:	0800b98d 	.word	0x0800b98d
 800b8f8:	0800b9c5 	.word	0x0800b9c5
 800b8fc:	0800b8ad 	.word	0x0800b8ad
 800b900:	0800b9f5 	.word	0x0800b9f5
 800b904:	0800b909 	.word	0x0800b909
  cfgidx = (uint8_t)(req->wValue);
 800b908:	7889      	ldrb	r1, [r1, #2]
 800b90a:	4d9e      	ldr	r5, [pc, #632]	; (800bb84 <USBD_StdDevReq+0x2f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b90c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800b90e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b910:	d8cc      	bhi.n	800b8ac <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800b912:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b916:	2b02      	cmp	r3, #2
 800b918:	f000 8111 	beq.w	800bb3e <USBD_StdDevReq+0x2aa>
 800b91c:	2b03      	cmp	r3, #3
 800b91e:	f000 80ff 	beq.w	800bb20 <USBD_StdDevReq+0x28c>
  USBD_LL_StallEP(pdev , 0x80U);
 800b922:	2180      	movs	r1, #128	; 0x80
 800b924:	f000 fcbe 	bl	800c2a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800b928:	2100      	movs	r1, #0
 800b92a:	4620      	mov	r0, r4
 800b92c:	f000 fcba 	bl	800c2a4 <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 800b930:	4620      	mov	r0, r4
 800b932:	7829      	ldrb	r1, [r5, #0]
 800b934:	f7ff fe86 	bl	800b644 <USBD_ClrClassConfig>
      break;
 800b938:	e7c0      	b.n	800b8bc <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800b93a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b93e:	3b01      	subs	r3, #1
 800b940:	2b02      	cmp	r3, #2
 800b942:	d8b3      	bhi.n	800b8ac <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 800b944:	88cb      	ldrh	r3, [r1, #6]
 800b946:	2b02      	cmp	r3, #2
 800b948:	d1b0      	bne.n	800b8ac <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b94a:	2201      	movs	r2, #1
    if (pdev->dev_remote_wakeup)
 800b94c:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b950:	60c2      	str	r2, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800b952:	b10b      	cbz	r3, 800b958 <USBD_StdDevReq+0xc4>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b954:	2303      	movs	r3, #3
 800b956:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b958:	2202      	movs	r2, #2
 800b95a:	4620      	mov	r0, r4
 800b95c:	f104 010c 	add.w	r1, r4, #12
 800b960:	f000 fa2c 	bl	800bdbc <USBD_CtlSendData>
    break;
 800b964:	e7aa      	b.n	800b8bc <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800b966:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b96a:	3b01      	subs	r3, #1
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d89d      	bhi.n	800b8ac <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b970:	884b      	ldrh	r3, [r1, #2]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d1a2      	bne.n	800b8bc <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 800b976:	2300      	movs	r3, #0
      USBD_CtlSendStatus(pdev);
 800b978:	4620      	mov	r0, r4
      pdev->dev_remote_wakeup = 0U;
 800b97a:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800b97e:	f000 fa4d 	bl	800be1c <USBD_CtlSendStatus>
 800b982:	e79b      	b.n	800b8bc <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b984:	884b      	ldrh	r3, [r1, #2]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d198      	bne.n	800b8bc <USBD_StdDevReq+0x28>
 800b98a:	e7f5      	b.n	800b978 <USBD_StdDevReq+0xe4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b98c:	888b      	ldrh	r3, [r1, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d18c      	bne.n	800b8ac <USBD_StdDevReq+0x18>
 800b992:	88cb      	ldrh	r3, [r1, #6]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d189      	bne.n	800b8ac <USBD_StdDevReq+0x18>
 800b998:	884d      	ldrh	r5, [r1, #2]
 800b99a:	2d7f      	cmp	r5, #127	; 0x7f
 800b99c:	d886      	bhi.n	800b8ac <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b99e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d082      	beq.n	800b8ac <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9a6:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800b9a8:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9ac:	f000 fcaa 	bl	800c304 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f000 fa33 	bl	800be1c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800b9b6:	2d00      	cmp	r5, #0
 800b9b8:	f000 80df 	beq.w	800bb7a <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9bc:	2302      	movs	r3, #2
 800b9be:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800b9c2:	e77b      	b.n	800b8bc <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 800b9c4:	884a      	ldrh	r2, [r1, #2]
 800b9c6:	0a13      	lsrs	r3, r2, #8
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	2b06      	cmp	r3, #6
 800b9cc:	f63f af6e 	bhi.w	800b8ac <USBD_StdDevReq+0x18>
 800b9d0:	a101      	add	r1, pc, #4	; (adr r1, 800b9d8 <USBD_StdDevReq+0x144>)
 800b9d2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9d6:	bf00      	nop
 800b9d8:	0800ba87 	.word	0x0800ba87
 800b9dc:	0800ba6f 	.word	0x0800ba6f
 800b9e0:	0800ba5d 	.word	0x0800ba5d
 800b9e4:	0800b8ad 	.word	0x0800b8ad
 800b9e8:	0800b8ad 	.word	0x0800b8ad
 800b9ec:	0800ba47 	.word	0x0800ba47
 800b9f0:	0800ba19 	.word	0x0800ba19
  if (req->wLength != 1U)
 800b9f4:	88ca      	ldrh	r2, [r1, #6]
 800b9f6:	2a01      	cmp	r2, #1
 800b9f8:	f47f af58 	bne.w	800b8ac <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800b9fc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d878      	bhi.n	800baf6 <USBD_StdDevReq+0x262>
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f43f af51 	beq.w	800b8ac <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 800ba0a:	4601      	mov	r1, r0
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ba12:	f000 f9d3 	bl	800bdbc <USBD_CtlSendData>
      break;
 800ba16:	e751      	b.n	800b8bc <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ba18:	7c03      	ldrb	r3, [r0, #16]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f47f af46 	bne.w	800b8ac <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ba20:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800ba24:	f10d 0006 	add.w	r0, sp, #6
 800ba28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba2c:	2307      	movs	r3, #7
 800ba2e:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 800ba30:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ba34:	2a00      	cmp	r2, #0
 800ba36:	d06e      	beq.n	800bb16 <USBD_StdDevReq+0x282>
 800ba38:	88eb      	ldrh	r3, [r5, #6]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d162      	bne.n	800bb04 <USBD_StdDevReq+0x270>
        USBD_CtlSendStatus(pdev);
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 f9ec 	bl	800be1c <USBD_CtlSendStatus>
 800ba44:	e73a      	b.n	800b8bc <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ba46:	7c03      	ldrb	r3, [r0, #16]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f47f af2f 	bne.w	800b8ac <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ba4e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800ba52:	f10d 0006 	add.w	r0, sp, #6
 800ba56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba58:	4798      	blx	r3
      break;
 800ba5a:	e7e9      	b.n	800ba30 <USBD_StdDevReq+0x19c>
    switch ((uint8_t)(req->wValue))
 800ba5c:	b2d2      	uxtb	r2, r2
 800ba5e:	2a05      	cmp	r2, #5
 800ba60:	f63f af24 	bhi.w	800b8ac <USBD_StdDevReq+0x18>
 800ba64:	e8df f002 	tbb	[pc, r2]
 800ba68:	272f373f 	.word	0x272f373f
 800ba6c:	171f      	.short	0x171f
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800ba6e:	7c03      	ldrb	r3, [r0, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d172      	bne.n	800bb5a <USBD_StdDevReq+0x2c6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ba74:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800ba78:	f10d 0006 	add.w	r0, sp, #6
 800ba7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba7e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba80:	2302      	movs	r3, #2
 800ba82:	7043      	strb	r3, [r0, #1]
 800ba84:	e7d4      	b.n	800ba30 <USBD_StdDevReq+0x19c>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ba86:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ba8a:	f10d 0106 	add.w	r1, sp, #6
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	7c00      	ldrb	r0, [r0, #16]
 800ba92:	4798      	blx	r3
    break;
 800ba94:	e7cc      	b.n	800ba30 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ba96:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ba9a:	f10d 0106 	add.w	r1, sp, #6
 800ba9e:	699b      	ldr	r3, [r3, #24]
 800baa0:	7c00      	ldrb	r0, [r0, #16]
 800baa2:	4798      	blx	r3
      break;
 800baa4:	e7c4      	b.n	800ba30 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800baa6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800baaa:	f10d 0106 	add.w	r1, sp, #6
 800baae:	695b      	ldr	r3, [r3, #20]
 800bab0:	7c00      	ldrb	r0, [r0, #16]
 800bab2:	4798      	blx	r3
      break;
 800bab4:	e7bc      	b.n	800ba30 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bab6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800baba:	f10d 0106 	add.w	r1, sp, #6
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	7c00      	ldrb	r0, [r0, #16]
 800bac2:	4798      	blx	r3
      break;
 800bac4:	e7b4      	b.n	800ba30 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bac6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800baca:	f10d 0106 	add.w	r1, sp, #6
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	7c00      	ldrb	r0, [r0, #16]
 800bad2:	4798      	blx	r3
      break;
 800bad4:	e7ac      	b.n	800ba30 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bad6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800bada:	f10d 0106 	add.w	r1, sp, #6
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	7c00      	ldrb	r0, [r0, #16]
 800bae2:	4798      	blx	r3
      break;
 800bae4:	e7a4      	b.n	800ba30 <USBD_StdDevReq+0x19c>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bae6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800baea:	f10d 0106 	add.w	r1, sp, #6
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	7c00      	ldrb	r0, [r0, #16]
 800baf2:	4798      	blx	r3
      break;
 800baf4:	e79c      	b.n	800ba30 <USBD_StdDevReq+0x19c>
    switch (pdev->dev_state)
 800baf6:	2b03      	cmp	r3, #3
 800baf8:	f47f aed8 	bne.w	800b8ac <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bafc:	1d01      	adds	r1, r0, #4
 800bafe:	f000 f95d 	bl	800bdbc <USBD_CtlSendData>
      break;
 800bb02:	e6db      	b.n	800b8bc <USBD_StdDevReq+0x28>
    len = MIN(len, req->wLength);
 800bb04:	429a      	cmp	r2, r3
 800bb06:	bf28      	it	cs
 800bb08:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 800bb0e:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800bb12:	f000 f953 	bl	800bdbc <USBD_CtlSendData>
  if(req->wLength == 0U)
 800bb16:	88eb      	ldrh	r3, [r5, #6]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f47f aecf 	bne.w	800b8bc <USBD_StdDevReq+0x28>
 800bb1e:	e78e      	b.n	800ba3e <USBD_StdDevReq+0x1aa>
      if (cfgidx == 0U)
 800bb20:	b321      	cbz	r1, 800bb6c <USBD_StdDevReq+0x2d8>
      else if (cfgidx != pdev->dev_config)
 800bb22:	6841      	ldr	r1, [r0, #4]
 800bb24:	2901      	cmp	r1, #1
 800bb26:	d08a      	beq.n	800ba3e <USBD_StdDevReq+0x1aa>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb28:	b2c9      	uxtb	r1, r1
 800bb2a:	f7ff fd8b 	bl	800b644 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb2e:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb30:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 800bb32:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb34:	f7ff fd7c 	bl	800b630 <USBD_SetClassConfig>
 800bb38:	2802      	cmp	r0, #2
 800bb3a:	d180      	bne.n	800ba3e <USBD_StdDevReq+0x1aa>
 800bb3c:	e6b6      	b.n	800b8ac <USBD_StdDevReq+0x18>
      if (cfgidx)
 800bb3e:	2900      	cmp	r1, #0
 800bb40:	f43f af7d 	beq.w	800ba3e <USBD_StdDevReq+0x1aa>
        pdev->dev_config = cfgidx;
 800bb44:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb46:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800bb48:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb4a:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb4e:	f7ff fd6f 	bl	800b630 <USBD_SetClassConfig>
 800bb52:	2802      	cmp	r0, #2
 800bb54:	f47f af73 	bne.w	800ba3e <USBD_StdDevReq+0x1aa>
 800bb58:	e6a8      	b.n	800b8ac <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bb5a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800bb5e:	f10d 0006 	add.w	r0, sp, #6
 800bb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb64:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb66:	2302      	movs	r3, #2
 800bb68:	7043      	strb	r3, [r0, #1]
 800bb6a:	e761      	b.n	800ba30 <USBD_StdDevReq+0x19c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb6c:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800bb6e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb70:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 800bb74:	f7ff fd66 	bl	800b644 <USBD_ClrClassConfig>
 800bb78:	e761      	b.n	800ba3e <USBD_StdDevReq+0x1aa>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800bb80:	e69c      	b.n	800b8bc <USBD_StdDevReq+0x28>
 800bb82:	bf00      	nop
 800bb84:	20000838 	.word	0x20000838

0800bb88 <USBD_StdItfReq>:
{
 800bb88:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb8a:	780b      	ldrb	r3, [r1, #0]
{
 800bb8c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb8e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800bb92:	2a40      	cmp	r2, #64	; 0x40
{
 800bb94:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb96:	d00a      	beq.n	800bbae <USBD_StdItfReq+0x26>
 800bb98:	065b      	lsls	r3, r3, #25
 800bb9a:	d508      	bpl.n	800bbae <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 800bb9c:	2180      	movs	r1, #128	; 0x80
 800bb9e:	f000 fb81 	bl	800c2a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800bba2:	2100      	movs	r1, #0
 800bba4:	4620      	mov	r0, r4
 800bba6:	f000 fb7d 	bl	800c2a4 <USBD_LL_StallEP>
}
 800bbaa:	2000      	movs	r0, #0
 800bbac:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 800bbae:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d811      	bhi.n	800bbdc <USBD_StdItfReq+0x54>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bbb8:	792b      	ldrb	r3, [r5, #4]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d80e      	bhi.n	800bbdc <USBD_StdItfReq+0x54>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800bbbe:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800bbca:	88eb      	ldrh	r3, [r5, #6]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d1ec      	bne.n	800bbaa <USBD_StdItfReq+0x22>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d1ea      	bne.n	800bbaa <USBD_StdItfReq+0x22>
          USBD_CtlSendStatus(pdev);
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f000 f921 	bl	800be1c <USBD_CtlSendStatus>
 800bbda:	e7e6      	b.n	800bbaa <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev , 0x80U);
 800bbdc:	2180      	movs	r1, #128	; 0x80
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f000 fb60 	bl	800c2a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f000 fb5c 	bl	800c2a4 <USBD_LL_StallEP>
}
 800bbec:	2000      	movs	r0, #0
 800bbee:	bd38      	pop	{r3, r4, r5, pc}

0800bbf0 <USBD_StdEPReq>:
{
 800bbf0:	b538      	push	{r3, r4, r5, lr}
 800bbf2:	780b      	ldrb	r3, [r1, #0]
 800bbf4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbfa:	2b20      	cmp	r3, #32
 800bbfc:	d00c      	beq.n	800bc18 <USBD_StdEPReq+0x28>
 800bbfe:	2b40      	cmp	r3, #64	; 0x40
 800bc00:	d00a      	beq.n	800bc18 <USBD_StdEPReq+0x28>
 800bc02:	b183      	cbz	r3, 800bc26 <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 800bc04:	2180      	movs	r1, #128	; 0x80
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 fb4c 	bl	800c2a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f000 fb48 	bl	800c2a4 <USBD_LL_StallEP>
}
 800bc14:	2000      	movs	r0, #0
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->Setup (pdev, req);
 800bc18:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	4798      	blx	r3
}
 800bc22:	2000      	movs	r0, #0
 800bc24:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 800bc26:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800bc28:	888a      	ldrh	r2, [r1, #4]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	fa5f fc82 	uxtb.w	ip, r2
    switch (req->bRequest)
 800bc30:	d03e      	beq.n	800bcb0 <USBD_StdEPReq+0xc0>
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d02a      	beq.n	800bc8c <USBD_StdEPReq+0x9c>
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1e4      	bne.n	800bc04 <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 800bc3a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d051      	beq.n	800bce6 <USBD_StdEPReq+0xf6>
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d1de      	bne.n	800bc04 <USBD_StdEPReq+0x14>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc46:	f00c 030f 	and.w	r3, ip, #15
 800bc4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800bc4e:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc50:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800bc54:	d456      	bmi.n	800bd04 <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc56:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0d2      	beq.n	800bc04 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bc5e:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800bc62:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800bc66:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800bc6a:	f505 75a0 	add.w	r5, r5, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc6e:	b133      	cbz	r3, 800bc7e <USBD_StdEPReq+0x8e>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800bc70:	4661      	mov	r1, ip
 800bc72:	4620      	mov	r0, r4
 800bc74:	f000 fb32 	bl	800c2dc <USBD_LL_IsStallEP>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d04f      	beq.n	800bd1c <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bc80:	2202      	movs	r2, #2
 800bc82:	4629      	mov	r1, r5
 800bc84:	4620      	mov	r0, r4
 800bc86:	f000 f899 	bl	800bdbc <USBD_CtlSendData>
          break;
 800bc8a:	e7c3      	b.n	800bc14 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800bc8c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	d01d      	beq.n	800bcd0 <USBD_StdEPReq+0xe0>
 800bc94:	2b03      	cmp	r3, #3
 800bc96:	d1b5      	bne.n	800bc04 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bc98:	884b      	ldrh	r3, [r1, #2]
 800bc9a:	b92b      	cbnz	r3, 800bca8 <USBD_StdEPReq+0xb8>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc9c:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800bca0:	d002      	beq.n	800bca8 <USBD_StdEPReq+0xb8>
 800bca2:	88cb      	ldrh	r3, [r1, #6]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d03b      	beq.n	800bd20 <USBD_StdEPReq+0x130>
        USBD_CtlSendStatus(pdev);
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f000 f8b7 	bl	800be1c <USBD_CtlSendStatus>
        break;
 800bcae:	e7b1      	b.n	800bc14 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800bcb0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d00b      	beq.n	800bcd0 <USBD_StdEPReq+0xe0>
 800bcb8:	2b03      	cmp	r3, #3
 800bcba:	d1a3      	bne.n	800bc04 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bcbc:	884b      	ldrh	r3, [r1, #2]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1a8      	bne.n	800bc14 <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 800bcc2:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800bcc6:	d0ef      	beq.n	800bca8 <USBD_StdEPReq+0xb8>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800bcc8:	4661      	mov	r1, ip
 800bcca:	f000 faf9 	bl	800c2c0 <USBD_LL_ClearStallEP>
 800bcce:	e7eb      	b.n	800bca8 <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcd0:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800bcd4:	d096      	beq.n	800bc04 <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 800bcd6:	4661      	mov	r1, ip
 800bcd8:	f000 fae4 	bl	800c2a4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800bcdc:	2180      	movs	r1, #128	; 0x80
 800bcde:	4620      	mov	r0, r4
 800bce0:	f000 fae0 	bl	800c2a4 <USBD_LL_StallEP>
 800bce4:	e796      	b.n	800bc14 <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bce6:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800bcea:	d18b      	bne.n	800bc04 <USBD_StdEPReq+0x14>
          pep->status = 0x0000U;
 800bcec:	2300      	movs	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bcee:	0611      	lsls	r1, r2, #24
 800bcf0:	bf4c      	ite	mi
 800bcf2:	f100 0114 	addmi.w	r1, r0, #20
 800bcf6:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bcfa:	2202      	movs	r2, #2
          pep->status = 0x0000U;
 800bcfc:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bcfe:	f000 f85d 	bl	800bdbc <USBD_CtlSendData>
          break;
 800bd02:	e787      	b.n	800bc14 <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd04:	699b      	ldr	r3, [r3, #24]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f43f af7c 	beq.w	800bc04 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bd0c:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800bd10:	1c5d      	adds	r5, r3, #1
 800bd12:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800bd16:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800bd1a:	e7a8      	b.n	800bc6e <USBD_StdEPReq+0x7e>
            pep->status = 0x0000U;
 800bd1c:	6028      	str	r0, [r5, #0]
 800bd1e:	e7af      	b.n	800bc80 <USBD_StdEPReq+0x90>
            USBD_LL_StallEP(pdev, ep_addr);
 800bd20:	4661      	mov	r1, ip
 800bd22:	f000 fabf 	bl	800c2a4 <USBD_LL_StallEP>
 800bd26:	e7bf      	b.n	800bca8 <USBD_StdEPReq+0xb8>

0800bd28 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800bd28:	780b      	ldrb	r3, [r1, #0]
 800bd2a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800bd2c:	784b      	ldrb	r3, [r1, #1]
 800bd2e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800bd30:	78ca      	ldrb	r2, [r1, #3]
 800bd32:	788b      	ldrb	r3, [r1, #2]
 800bd34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bd38:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800bd3a:	794a      	ldrb	r2, [r1, #5]
 800bd3c:	790b      	ldrb	r3, [r1, #4]
 800bd3e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bd42:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800bd44:	79ca      	ldrb	r2, [r1, #7]
 800bd46:	798b      	ldrb	r3, [r1, #6]
 800bd48:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bd4c:	80c3      	strh	r3, [r0, #6]
}
 800bd4e:	4770      	bx	lr

0800bd50 <USBD_CtlError>:
{
 800bd50:	b510      	push	{r4, lr}
 800bd52:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800bd54:	2180      	movs	r1, #128	; 0x80
 800bd56:	f000 faa5 	bl	800c2a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800bd5a:	4620      	mov	r0, r4
}
 800bd5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800bd60:	2100      	movs	r1, #0
 800bd62:	f000 ba9f 	b.w	800c2a4 <USBD_LL_StallEP>
 800bd66:	bf00      	nop

0800bd68 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800bd68:	b318      	cbz	r0, 800bdb2 <USBD_GetString+0x4a>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800bd6a:	7803      	ldrb	r3, [r0, #0]
{
 800bd6c:	b430      	push	{r4, r5}
    while (*buf != '\0')
 800bd6e:	b30b      	cbz	r3, 800bdb4 <USBD_GetString+0x4c>
 800bd70:	4604      	mov	r4, r0
 800bd72:	f1c0 0c01 	rsb	ip, r0, #1
    {
        len++;
 800bd76:	eb04 030c 	add.w	r3, r4, ip
    while (*buf != '\0')
 800bd7a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	2d00      	cmp	r5, #0
 800bd82:	d1f8      	bne.n	800bd76 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bd84:	3301      	adds	r3, #1
 800bd86:	005b      	lsls	r3, r3, #1
 800bd88:	b2dc      	uxtb	r4, r3
 800bd8a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bd8c:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bd8e:	700c      	strb	r4, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bd90:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 800bd92:	7804      	ldrb	r4, [r0, #0]
 800bd94:	b15c      	cbz	r4, 800bdae <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bd96:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800bd98:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	b2d2      	uxtb	r2, r2
 800bd9e:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800bda0:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800bda2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 800bda6:	3302      	adds	r3, #2
 800bda8:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 800bdaa:	2c00      	cmp	r4, #0
 800bdac:	d1f5      	bne.n	800bd9a <USBD_GetString+0x32>
}
 800bdae:	bc30      	pop	{r4, r5}
 800bdb0:	4770      	bx	lr
 800bdb2:	4770      	bx	lr
    while (*buf != '\0')
 800bdb4:	2402      	movs	r4, #2
 800bdb6:	4623      	mov	r3, r4
 800bdb8:	e7e7      	b.n	800bd8a <USBD_GetString+0x22>
 800bdba:	bf00      	nop

0800bdbc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800bdbc:	b510      	push	{r4, lr}
 800bdbe:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bdc0:	2402      	movs	r4, #2
{
 800bdc2:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800bdc4:	e9c0 3307 	strd	r3, r3, [r0, #28]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800bdc8:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bdca:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800bdce:	f000 faa7 	bl	800c320 <USBD_LL_Transmit>

  return USBD_OK;
}
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	bd10      	pop	{r4, pc}
 800bdd6:	bf00      	nop

0800bdd8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800bdd8:	468c      	mov	ip, r1
 800bdda:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800bddc:	2100      	movs	r1, #0
{
 800bdde:	4613      	mov	r3, r2
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800bde0:	4662      	mov	r2, ip
 800bde2:	f000 fa9d 	bl	800c320 <USBD_LL_Transmit>

  return USBD_OK;
}
 800bde6:	2000      	movs	r0, #0
 800bde8:	bd08      	pop	{r3, pc}
 800bdea:	bf00      	nop

0800bdec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800bdec:	b510      	push	{r4, lr}
 800bdee:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bdf0:	2403      	movs	r4, #3
{
 800bdf2:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800bdf4:	e9c0 3352 	strd	r3, r3, [r0, #328]	; 0x148

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800bdf8:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bdfa:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800bdfe:	f000 fa9d 	bl	800c33c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800be02:	2000      	movs	r0, #0
 800be04:	bd10      	pop	{r4, pc}
 800be06:	bf00      	nop

0800be08 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800be08:	468c      	mov	ip, r1
 800be0a:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be0c:	2100      	movs	r1, #0
{
 800be0e:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be10:	4662      	mov	r2, ip
 800be12:	f000 fa93 	bl	800c33c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800be16:	2000      	movs	r0, #0
 800be18:	bd08      	pop	{r3, pc}
 800be1a:	bf00      	nop

0800be1c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800be1c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be1e:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be20:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be22:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be26:	461a      	mov	r2, r3
 800be28:	4619      	mov	r1, r3
 800be2a:	f000 fa79 	bl	800c320 <USBD_LL_Transmit>

  return USBD_OK;
}
 800be2e:	2000      	movs	r0, #0
 800be30:	bd08      	pop	{r3, pc}
 800be32:	bf00      	nop

0800be34 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800be34:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be36:	2105      	movs	r1, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800be38:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be3a:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800be3e:	461a      	mov	r2, r3
 800be40:	4619      	mov	r1, r3
 800be42:	f000 fa7b 	bl	800c33c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800be46:	2000      	movs	r0, #0
 800be48:	bd08      	pop	{r3, pc}
 800be4a:	bf00      	nop

0800be4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be4e:	2200      	movs	r2, #0
 800be50:	4917      	ldr	r1, [pc, #92]	; (800beb0 <MX_USB_DEVICE_Init+0x64>)
 800be52:	4818      	ldr	r0, [pc, #96]	; (800beb4 <MX_USB_DEVICE_Init+0x68>)
 800be54:	f7ff fbc8 	bl	800b5e8 <USBD_Init>
 800be58:	b970      	cbnz	r0, 800be78 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be5a:	4917      	ldr	r1, [pc, #92]	; (800beb8 <MX_USB_DEVICE_Init+0x6c>)
 800be5c:	4815      	ldr	r0, [pc, #84]	; (800beb4 <MX_USB_DEVICE_Init+0x68>)
 800be5e:	f7ff fbd9 	bl	800b614 <USBD_RegisterClass>
 800be62:	b988      	cbnz	r0, 800be88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800be64:	4915      	ldr	r1, [pc, #84]	; (800bebc <MX_USB_DEVICE_Init+0x70>)
 800be66:	4813      	ldr	r0, [pc, #76]	; (800beb4 <MX_USB_DEVICE_Init+0x68>)
 800be68:	f7ff fb88 	bl	800b57c <USBD_CDC_RegisterInterface>
 800be6c:	b9a0      	cbnz	r0, 800be98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800be6e:	4811      	ldr	r0, [pc, #68]	; (800beb4 <MX_USB_DEVICE_Init+0x68>)
 800be70:	f7ff fbd8 	bl	800b624 <USBD_Start>
 800be74:	b9b8      	cbnz	r0, 800bea6 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800be76:	bd08      	pop	{r3, pc}
    Error_Handler();
 800be78:	f7fa fde0 	bl	8006a3c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be7c:	490e      	ldr	r1, [pc, #56]	; (800beb8 <MX_USB_DEVICE_Init+0x6c>)
 800be7e:	480d      	ldr	r0, [pc, #52]	; (800beb4 <MX_USB_DEVICE_Init+0x68>)
 800be80:	f7ff fbc8 	bl	800b614 <USBD_RegisterClass>
 800be84:	2800      	cmp	r0, #0
 800be86:	d0ed      	beq.n	800be64 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800be88:	f7fa fdd8 	bl	8006a3c <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800be8c:	490b      	ldr	r1, [pc, #44]	; (800bebc <MX_USB_DEVICE_Init+0x70>)
 800be8e:	4809      	ldr	r0, [pc, #36]	; (800beb4 <MX_USB_DEVICE_Init+0x68>)
 800be90:	f7ff fb74 	bl	800b57c <USBD_CDC_RegisterInterface>
 800be94:	2800      	cmp	r0, #0
 800be96:	d0ea      	beq.n	800be6e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800be98:	f7fa fdd0 	bl	8006a3c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800be9c:	4805      	ldr	r0, [pc, #20]	; (800beb4 <MX_USB_DEVICE_Init+0x68>)
 800be9e:	f7ff fbc1 	bl	800b624 <USBD_Start>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d0e7      	beq.n	800be76 <MX_USB_DEVICE_Init+0x2a>
}
 800bea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800beaa:	f7fa bdc7 	b.w	8006a3c <Error_Handler>
 800beae:	bf00      	nop
 800beb0:	20000140 	.word	0x20000140
 800beb4:	2000083c 	.word	0x2000083c
 800beb8:	20000020 	.word	0x20000020
 800bebc:	20000130 	.word	0x20000130

0800bec0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800bec0:	2000      	movs	r0, #0
 800bec2:	4770      	bx	lr

0800bec4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800bec4:	2000      	movs	r0, #0
 800bec6:	4770      	bx	lr

0800bec8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beca:	4604      	mov	r4, r0
 800becc:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bece:	4f0f      	ldr	r7, [pc, #60]	; (800bf0c <CDC_Receive_FS+0x44>)
 800bed0:	4621      	mov	r1, r4
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);

	memset (usbbuffer, '\0', 128);  // clear the buffer
 800bed2:	4e0f      	ldr	r6, [pc, #60]	; (800bf10 <CDC_Receive_FS+0x48>)
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bed4:	4638      	mov	r0, r7
 800bed6:	f7ff fb63 	bl	800b5a0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800beda:	4638      	mov	r0, r7
 800bedc:	f7ff fb68 	bl	800b5b0 <USBD_CDC_ReceivePacket>
	memset (usbbuffer, '\0', 128);  // clear the buffer
 800bee0:	2280      	movs	r2, #128	; 0x80
 800bee2:	2100      	movs	r1, #0
 800bee4:	4630      	mov	r0, r6
 800bee6:	f000 fa79 	bl	800c3dc <memset>
	uint8_t len = (uint8_t)*Len;
	memcpy(usbbuffer, Buf, len);  // copy the data to the buffer
 800beea:	782d      	ldrb	r5, [r5, #0]
 800beec:	4621      	mov	r1, r4
 800beee:	462a      	mov	r2, r5
 800bef0:	4630      	mov	r0, r6
 800bef2:	f000 fa65 	bl	800c3c0 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800bef6:	462a      	mov	r2, r5
 800bef8:	2100      	movs	r1, #0
 800befa:	4620      	mov	r0, r4
 800befc:	f000 fa6e 	bl	800c3dc <memset>

	HAL_EXTI_GenerateSWI(&hexti1);
 800bf00:	4804      	ldr	r0, [pc, #16]	; (800bf14 <CDC_Receive_FS+0x4c>)
 800bf02:	f7fb ff7b 	bl	8007dfc <HAL_EXTI_GenerateSWI>

	return (USBD_OK);
  /* USER CODE END 6 */
}
 800bf06:	2000      	movs	r0, #0
 800bf08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	2000083c 	.word	0x2000083c
 800bf10:	200007a0 	.word	0x200007a0
 800bf14:	200004e4 	.word	0x200004e4

0800bf18 <CDC_Init_FS>:
{
 800bf18:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bf1a:	4c06      	ldr	r4, [pc, #24]	; (800bf34 <CDC_Init_FS+0x1c>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	4620      	mov	r0, r4
 800bf20:	4905      	ldr	r1, [pc, #20]	; (800bf38 <CDC_Init_FS+0x20>)
 800bf22:	f7ff fb33 	bl	800b58c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf26:	4620      	mov	r0, r4
 800bf28:	4904      	ldr	r1, [pc, #16]	; (800bf3c <CDC_Init_FS+0x24>)
 800bf2a:	f7ff fb39 	bl	800b5a0 <USBD_CDC_SetRxBuffer>
}
 800bf2e:	2000      	movs	r0, #0
 800bf30:	bd10      	pop	{r4, pc}
 800bf32:	bf00      	nop
 800bf34:	2000083c 	.word	0x2000083c
 800bf38:	20000ec0 	.word	0x20000ec0
 800bf3c:	20000ad8 	.word	0x20000ad8

0800bf40 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bf40:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800bf42:	4801      	ldr	r0, [pc, #4]	; (800bf48 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800bf44:	800b      	strh	r3, [r1, #0]
}
 800bf46:	4770      	bx	lr
 800bf48:	2000015c 	.word	0x2000015c

0800bf4c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bf4c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800bf4e:	4801      	ldr	r0, [pc, #4]	; (800bf54 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800bf50:	800b      	strh	r3, [r1, #0]
}
 800bf52:	4770      	bx	lr
 800bf54:	20000170 	.word	0x20000170

0800bf58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf58:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf5a:	4c04      	ldr	r4, [pc, #16]	; (800bf6c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800bf5c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf5e:	4804      	ldr	r0, [pc, #16]	; (800bf70 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800bf60:	4621      	mov	r1, r4
 800bf62:	f7ff ff01 	bl	800bd68 <USBD_GetString>
  return USBD_StrDesc;
}
 800bf66:	4620      	mov	r0, r4
 800bf68:	bd10      	pop	{r4, pc}
 800bf6a:	bf00      	nop
 800bf6c:	200012a8 	.word	0x200012a8
 800bf70:	0800f2dc 	.word	0x0800f2dc

0800bf74 <USBD_FS_ProductStrDescriptor>:
{
 800bf74:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf76:	4c04      	ldr	r4, [pc, #16]	; (800bf88 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800bf78:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf7a:	4804      	ldr	r0, [pc, #16]	; (800bf8c <USBD_FS_ProductStrDescriptor+0x18>)
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	f7ff fef3 	bl	800bd68 <USBD_GetString>
}
 800bf82:	4620      	mov	r0, r4
 800bf84:	bd10      	pop	{r4, pc}
 800bf86:	bf00      	nop
 800bf88:	200012a8 	.word	0x200012a8
 800bf8c:	0800f2f0 	.word	0x0800f2f0

0800bf90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf90:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf92:	4c04      	ldr	r4, [pc, #16]	; (800bfa4 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800bf94:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf96:	4804      	ldr	r0, [pc, #16]	; (800bfa8 <USBD_FS_ConfigStrDescriptor+0x18>)
 800bf98:	4621      	mov	r1, r4
 800bf9a:	f7ff fee5 	bl	800bd68 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	bd10      	pop	{r4, pc}
 800bfa2:	bf00      	nop
 800bfa4:	200012a8 	.word	0x200012a8
 800bfa8:	0800f308 	.word	0x0800f308

0800bfac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfac:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfae:	4c04      	ldr	r4, [pc, #16]	; (800bfc0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800bfb0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfb2:	4804      	ldr	r0, [pc, #16]	; (800bfc4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800bfb4:	4621      	mov	r1, r4
 800bfb6:	f7ff fed7 	bl	800bd68 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800bfba:	4620      	mov	r0, r4
 800bfbc:	bd10      	pop	{r4, pc}
 800bfbe:	bf00      	nop
 800bfc0:	200012a8 	.word	0x200012a8
 800bfc4:	0800f314 	.word	0x0800f314

0800bfc8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800bfc8:	f04f 0c1a 	mov.w	ip, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfcc:	4a42      	ldr	r2, [pc, #264]	; (800c0d8 <USBD_FS_SerialStrDescriptor+0x110>)
 800bfce:	6d10      	ldr	r0, [r2, #80]	; 0x50
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800bfd0:	6d93      	ldr	r3, [r2, #88]	; 0x58
  *length = USB_SIZ_STRING_SERIAL;
 800bfd2:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800bfd6:	18c3      	adds	r3, r0, r3
 800bfd8:	d101      	bne.n	800bfde <USBD_FS_SerialStrDescriptor+0x16>
}
 800bfda:	4840      	ldr	r0, [pc, #256]	; (800c0dc <USBD_FS_SerialStrDescriptor+0x114>)
 800bfdc:	4770      	bx	lr
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800bfde:	f04f 0c00 	mov.w	ip, #0
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bfe2:	6d51      	ldr	r1, [r2, #84]	; 0x54
    if (((value >> 28)) < 0xA)
 800bfe4:	0f18      	lsrs	r0, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfe6:	4a3d      	ldr	r2, [pc, #244]	; (800c0dc <USBD_FS_SerialStrDescriptor+0x114>)
    if (((value >> 28)) < 0xA)
 800bfe8:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bfec:	bf2c      	ite	cs
 800bfee:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800bff0:	3030      	addcc	r0, #48	; 0x30
 800bff2:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800bff4:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800bff8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bffa:	bf8c      	ite	hi
 800bffc:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800bffe:	3030      	addls	r0, #48	; 0x30
 800c000:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800c002:	f3c3 5003 	ubfx	r0, r3, #20, #4
 800c006:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c008:	bf8c      	ite	hi
 800c00a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c00c:	3030      	addls	r0, #48	; 0x30
 800c00e:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800c010:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800c014:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c016:	bf8c      	ite	hi
 800c018:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c01a:	3030      	addls	r0, #48	; 0x30
 800c01c:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800c01e:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800c022:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c024:	bf8c      	ite	hi
 800c026:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c028:	3030      	addls	r0, #48	; 0x30
 800c02a:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800c02c:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800c030:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c032:	bf8c      	ite	hi
 800c034:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c036:	3030      	addls	r0, #48	; 0x30
 800c038:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800c03a:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800c03e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c040:	bf8c      	ite	hi
 800c042:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c044:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800c046:	f882 c003 	strb.w	ip, [r2, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 800c04a:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800c04c:	f04f 0c00 	mov.w	ip, #0
 800c050:	2000      	movs	r0, #0
 800c052:	f882 c005 	strb.w	ip, [r2, #5]
 800c056:	73d0      	strb	r0, [r2, #15]
 800c058:	f04f 0c00 	mov.w	ip, #0
 800c05c:	2000      	movs	r0, #0
 800c05e:	f882 c007 	strb.w	ip, [r2, #7]
 800c062:	7450      	strb	r0, [r2, #17]
 800c064:	f04f 0c00 	mov.w	ip, #0
 800c068:	2000      	movs	r0, #0
 800c06a:	f882 c009 	strb.w	ip, [r2, #9]
 800c06e:	74d0      	strb	r0, [r2, #19]
 800c070:	f04f 0c00 	mov.w	ip, #0
 800c074:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800c076:	f003 030f 	and.w	r3, r3, #15
 800c07a:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800c07c:	bf94      	ite	ls
 800c07e:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c080:	3337      	addhi	r3, #55	; 0x37
 800c082:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800c084:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 800c088:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c08c:	bf2c      	ite	cs
 800c08e:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c090:	3330      	addcc	r3, #48	; 0x30
 800c092:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800c094:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800c098:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c09a:	bf8c      	ite	hi
 800c09c:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c09e:	3330      	addls	r3, #48	; 0x30
 800c0a0:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800c0a2:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800c0a6:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0a8:	bf8c      	ite	hi
 800c0aa:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c0ac:	3330      	addls	r3, #48	; 0x30
 800c0ae:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800c0b0:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800c0b4:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800c0b6:	bf94      	ite	ls
 800c0b8:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0ba:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 800c0bc:	f882 c00b 	strb.w	ip, [r2, #11]
 800c0c0:	7550      	strb	r0, [r2, #21]
 800c0c2:	f04f 0c00 	mov.w	ip, #0
 800c0c6:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0c8:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	75d0      	strb	r0, [r2, #23]
 800c0ce:	f882 c00d 	strb.w	ip, [r2, #13]
}
 800c0d2:	4802      	ldr	r0, [pc, #8]	; (800c0dc <USBD_FS_SerialStrDescriptor+0x114>)
    pbuf[2 * idx + 1] = 0;
 800c0d4:	7653      	strb	r3, [r2, #25]
}
 800c0d6:	4770      	bx	lr
 800c0d8:	1ff80000 	.word	0x1ff80000
 800c0dc:	20000174 	.word	0x20000174

0800c0e0 <HAL_PCDEx_SetConnectionState>:
{
  /* USER CODE BEGIN 6 */
  if (state == 1)
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800c0e0:	4a04      	ldr	r2, [pc, #16]	; (800c0f4 <HAL_PCDEx_SetConnectionState+0x14>)
  if (state == 1)
 800c0e2:	2901      	cmp	r1, #1
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800c0e4:	6853      	ldr	r3, [r2, #4]
 800c0e6:	bf0c      	ite	eq
 800c0e8:	f043 0301 	orreq.w	r3, r3, #1
  }
  else
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800c0ec:	f023 0301 	bicne.w	r3, r3, #1
 800c0f0:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END 6 */
}
 800c0f2:	4770      	bx	lr
 800c0f4:	40010000 	.word	0x40010000

0800c0f8 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 800c0f8:	4b0e      	ldr	r3, [pc, #56]	; (800c134 <HAL_PCD_MspInit+0x3c>)
 800c0fa:	6802      	ldr	r2, [r0, #0]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d000      	beq.n	800c102 <HAL_PCD_MspInit+0xa>
 800c100:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c102:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 800c106:	6a59      	ldr	r1, [r3, #36]	; 0x24
{
 800c108:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 800c10a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800c10e:	6259      	str	r1, [r3, #36]	; 0x24
 800c110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 800c112:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800c114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c118:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 2, 0);
 800c11a:	2014      	movs	r0, #20
 800c11c:	2200      	movs	r2, #0
 800c11e:	2102      	movs	r1, #2
    __HAL_RCC_USB_CLK_ENABLE();
 800c120:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 2, 0);
 800c122:	f7fb fbc3 	bl	80078ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c126:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c128:	b003      	add	sp, #12
 800c12a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c12e:	f7fb bbfb 	b.w	8007928 <HAL_NVIC_EnableIRQ>
 800c132:	bf00      	nop
 800c134:	40005c00 	.word	0x40005c00

0800c138 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c138:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c13a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c13e:	f501 712c 	add.w	r1, r1, #688	; 0x2b0
 800c142:	f7ff ba87 	b.w	800b654 <USBD_LL_SetupStage>
 800c146:	bf00      	nop

0800c148 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c148:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c14c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c150:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800c154:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c158:	f7ff baac 	b.w	800b6b4 <USBD_LL_DataOutStage>

0800c15c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c15c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c160:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c166:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c16a:	f7ff bae1 	b.w	800b730 <USBD_LL_DataInStage>
 800c16e:	bf00      	nop

0800c170 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c170:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c174:	f7ff bb80 	b.w	800b878 <USBD_LL_SOF>

0800c178 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c178:	6883      	ldr	r3, [r0, #8]
{
 800c17a:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c17c:	2b02      	cmp	r3, #2
{
 800c17e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c180:	d001      	beq.n	800c186 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800c182:	f7fa fc5b 	bl	8006a3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c186:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800c18a:	2101      	movs	r1, #1
 800c18c:	f7ff fb5e 	bl	800b84c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c190:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800c194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c198:	f7ff bb30 	b.w	800b7fc <USBD_LL_Reset>

0800c19c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c19c:	b510      	push	{r4, lr}
 800c19e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1a0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c1a4:	f7ff fb56 	bl	800b854 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1a8:	69a3      	ldr	r3, [r4, #24]
 800c1aa:	b123      	cbz	r3, 800c1b6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1ac:	4a02      	ldr	r2, [pc, #8]	; (800c1b8 <HAL_PCD_SuspendCallback+0x1c>)
 800c1ae:	6913      	ldr	r3, [r2, #16]
 800c1b0:	f043 0306 	orr.w	r3, r3, #6
 800c1b4:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1b6:	bd10      	pop	{r4, pc}
 800c1b8:	e000ed00 	.word	0xe000ed00

0800c1bc <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1bc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c1c0:	f7ff bb52 	b.w	800b868 <USBD_LL_Resume>

0800c1c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1c4:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c1c6:	2408      	movs	r4, #8
  hpcd_USB_FS.pData = pdev;
 800c1c8:	4b1e      	ldr	r3, [pc, #120]	; (800c244 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c1ca:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c1cc:	605c      	str	r4, [r3, #4]
{
 800c1ce:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c1d0:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c1d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c1d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_FS.Instance = USB;
 800c1d6:	4a1c      	ldr	r2, [pc, #112]	; (800c248 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 800c1d8:	f8c3 42e8 	str.w	r4, [r3, #744]	; 0x2e8
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c1dc:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 800c1de:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c1e2:	6099      	str	r1, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c1e4:	6119      	str	r1, [r3, #16]
  hpcd_USB_FS.Instance = USB;
 800c1e6:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c1e8:	f7fc fa0c 	bl	8008604 <HAL_PCD_Init>
 800c1ec:	bb30      	cbnz	r0, 800c23c <USBD_LL_Init+0x78>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2318      	movs	r3, #24
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c1f8:	f7fd f904 	bl	8009404 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c1fc:	2358      	movs	r3, #88	; 0x58
 800c1fe:	2200      	movs	r2, #0
 800c200:	2180      	movs	r1, #128	; 0x80
 800c202:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c206:	f7fd f8fd 	bl	8009404 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c20a:	23c0      	movs	r3, #192	; 0xc0
 800c20c:	2200      	movs	r2, #0
 800c20e:	2181      	movs	r1, #129	; 0x81
 800c210:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c214:	f7fd f8f6 	bl	8009404 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c218:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c21c:	2200      	movs	r2, #0
 800c21e:	2101      	movs	r1, #1
 800c220:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c224:	f7fd f8ee 	bl	8009404 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c22c:	2200      	movs	r2, #0
 800c22e:	2182      	movs	r1, #130	; 0x82
 800c230:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c234:	f7fd f8e6 	bl	8009404 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800c238:	2000      	movs	r0, #0
 800c23a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800c23c:	f7fa fbfe 	bl	8006a3c <Error_Handler>
 800c240:	e7d5      	b.n	800c1ee <USBD_LL_Init+0x2a>
 800c242:	bf00      	nop
 800c244:	200014a8 	.word	0x200014a8
 800c248:	40005c00 	.word	0x40005c00

0800c24c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c24c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800c24e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c252:	f7fc fa39 	bl	80086c8 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800c256:	2803      	cmp	r0, #3
 800c258:	bf96      	itet	ls
 800c25a:	4b02      	ldrls	r3, [pc, #8]	; (800c264 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 800c25c:	2002      	movhi	r0, #2
 800c25e:	5c18      	ldrbls	r0, [r3, r0]
}
 800c260:	bd08      	pop	{r3, pc}
 800c262:	bf00      	nop
 800c264:	0800f324 	.word	0x0800f324

0800c268 <USBD_LL_OpenEP>:
{
 800c268:	4694      	mov	ip, r2
 800c26a:	b508      	push	{r3, lr}
 800c26c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c26e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c272:	4663      	mov	r3, ip
 800c274:	f7fc ff9c 	bl	80091b0 <HAL_PCD_EP_Open>
  switch (hal_status)
 800c278:	2803      	cmp	r0, #3
 800c27a:	bf96      	itet	ls
 800c27c:	4b01      	ldrls	r3, [pc, #4]	; (800c284 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c27e:	2002      	movhi	r0, #2
 800c280:	5c18      	ldrbls	r0, [r3, r0]
}
 800c282:	bd08      	pop	{r3, pc}
 800c284:	0800f324 	.word	0x0800f324

0800c288 <USBD_LL_CloseEP>:
{
 800c288:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c28a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c28e:	f7fc ffcd 	bl	800922c <HAL_PCD_EP_Close>
  switch (hal_status)
 800c292:	2803      	cmp	r0, #3
 800c294:	bf96      	itet	ls
 800c296:	4b02      	ldrls	r3, [pc, #8]	; (800c2a0 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c298:	2002      	movhi	r0, #2
 800c29a:	5c18      	ldrbls	r0, [r3, r0]
}
 800c29c:	bd08      	pop	{r3, pc}
 800c29e:	bf00      	nop
 800c2a0:	0800f324 	.word	0x0800f324

0800c2a4 <USBD_LL_StallEP>:
{
 800c2a4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2a6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c2aa:	f7fd f837 	bl	800931c <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800c2ae:	2803      	cmp	r0, #3
 800c2b0:	bf96      	itet	ls
 800c2b2:	4b02      	ldrls	r3, [pc, #8]	; (800c2bc <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2b4:	2002      	movhi	r0, #2
 800c2b6:	5c18      	ldrbls	r0, [r3, r0]
}
 800c2b8:	bd08      	pop	{r3, pc}
 800c2ba:	bf00      	nop
 800c2bc:	0800f324 	.word	0x0800f324

0800c2c0 <USBD_LL_ClearStallEP>:
{
 800c2c0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2c2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c2c6:	f7fd f861 	bl	800938c <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800c2ca:	2803      	cmp	r0, #3
 800c2cc:	bf96      	itet	ls
 800c2ce:	4b02      	ldrls	r3, [pc, #8]	; (800c2d8 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2d0:	2002      	movhi	r0, #2
 800c2d2:	5c18      	ldrbls	r0, [r3, r0]
}
 800c2d4:	bd08      	pop	{r3, pc}
 800c2d6:	bf00      	nop
 800c2d8:	0800f324 	.word	0x0800f324

0800c2dc <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800c2dc:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2de:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 800c2e2:	d406      	bmi.n	800c2f2 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c2e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c2e8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c2ec:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800c2f0:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2f2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800c2f6:	3101      	adds	r1, #1
 800c2f8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c2fc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c300:	7888      	ldrb	r0, [r1, #2]
 800c302:	4770      	bx	lr

0800c304 <USBD_LL_SetUSBAddress>:
{
 800c304:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c306:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c30a:	f7fc ff3b 	bl	8009184 <HAL_PCD_SetAddress>
  switch (hal_status)
 800c30e:	2803      	cmp	r0, #3
 800c310:	bf96      	itet	ls
 800c312:	4b02      	ldrls	r3, [pc, #8]	; (800c31c <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c314:	2002      	movhi	r0, #2
 800c316:	5c18      	ldrbls	r0, [r3, r0]
}
 800c318:	bd08      	pop	{r3, pc}
 800c31a:	bf00      	nop
 800c31c:	0800f324 	.word	0x0800f324

0800c320 <USBD_LL_Transmit>:
{
 800c320:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c322:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c326:	f7fc ffd5 	bl	80092d4 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800c32a:	2803      	cmp	r0, #3
 800c32c:	bf96      	itet	ls
 800c32e:	4b02      	ldrls	r3, [pc, #8]	; (800c338 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c330:	2002      	movhi	r0, #2
 800c332:	5c18      	ldrbls	r0, [r3, r0]
}
 800c334:	bd08      	pop	{r3, pc}
 800c336:	bf00      	nop
 800c338:	0800f324 	.word	0x0800f324

0800c33c <USBD_LL_PrepareReceive>:
{
 800c33c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c33e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c342:	f7fc ffa5 	bl	8009290 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800c346:	2803      	cmp	r0, #3
 800c348:	bf96      	itet	ls
 800c34a:	4b02      	ldrls	r3, [pc, #8]	; (800c354 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c34c:	2002      	movhi	r0, #2
 800c34e:	5c18      	ldrbls	r0, [r3, r0]
}
 800c350:	bd08      	pop	{r3, pc}
 800c352:	bf00      	nop
 800c354:	0800f324 	.word	0x0800f324

0800c358 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c358:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c35c:	f7fc bfb0 	b.w	80092c0 <HAL_PCD_EP_GetRxCount>

0800c360 <USBD_static_malloc>:
}
 800c360:	4800      	ldr	r0, [pc, #0]	; (800c364 <USBD_static_malloc+0x4>)
 800c362:	4770      	bx	lr
 800c364:	20001794 	.word	0x20001794

0800c368 <USBD_static_free>:
}
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop

0800c36c <__errno>:
 800c36c:	4b01      	ldr	r3, [pc, #4]	; (800c374 <__errno+0x8>)
 800c36e:	6818      	ldr	r0, [r3, #0]
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	20000190 	.word	0x20000190

0800c378 <__libc_init_array>:
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	2600      	movs	r6, #0
 800c37c:	4d0c      	ldr	r5, [pc, #48]	; (800c3b0 <__libc_init_array+0x38>)
 800c37e:	4c0d      	ldr	r4, [pc, #52]	; (800c3b4 <__libc_init_array+0x3c>)
 800c380:	1b64      	subs	r4, r4, r5
 800c382:	10a4      	asrs	r4, r4, #2
 800c384:	42a6      	cmp	r6, r4
 800c386:	d109      	bne.n	800c39c <__libc_init_array+0x24>
 800c388:	f002 ff10 	bl	800f1ac <_init>
 800c38c:	2600      	movs	r6, #0
 800c38e:	4d0a      	ldr	r5, [pc, #40]	; (800c3b8 <__libc_init_array+0x40>)
 800c390:	4c0a      	ldr	r4, [pc, #40]	; (800c3bc <__libc_init_array+0x44>)
 800c392:	1b64      	subs	r4, r4, r5
 800c394:	10a4      	asrs	r4, r4, #2
 800c396:	42a6      	cmp	r6, r4
 800c398:	d105      	bne.n	800c3a6 <__libc_init_array+0x2e>
 800c39a:	bd70      	pop	{r4, r5, r6, pc}
 800c39c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3a0:	4798      	blx	r3
 800c3a2:	3601      	adds	r6, #1
 800c3a4:	e7ee      	b.n	800c384 <__libc_init_array+0xc>
 800c3a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3aa:	4798      	blx	r3
 800c3ac:	3601      	adds	r6, #1
 800c3ae:	e7f2      	b.n	800c396 <__libc_init_array+0x1e>
 800c3b0:	0800f70c 	.word	0x0800f70c
 800c3b4:	0800f70c 	.word	0x0800f70c
 800c3b8:	0800f70c 	.word	0x0800f70c
 800c3bc:	0800f710 	.word	0x0800f710

0800c3c0 <memcpy>:
 800c3c0:	440a      	add	r2, r1
 800c3c2:	4291      	cmp	r1, r2
 800c3c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3c8:	d100      	bne.n	800c3cc <memcpy+0xc>
 800c3ca:	4770      	bx	lr
 800c3cc:	b510      	push	{r4, lr}
 800c3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3d2:	4291      	cmp	r1, r2
 800c3d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3d8:	d1f9      	bne.n	800c3ce <memcpy+0xe>
 800c3da:	bd10      	pop	{r4, pc}

0800c3dc <memset>:
 800c3dc:	4603      	mov	r3, r0
 800c3de:	4402      	add	r2, r0
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d100      	bne.n	800c3e6 <memset+0xa>
 800c3e4:	4770      	bx	lr
 800c3e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c3ea:	e7f9      	b.n	800c3e0 <memset+0x4>

0800c3ec <__cvt>:
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f2:	461f      	mov	r7, r3
 800c3f4:	bfbb      	ittet	lt
 800c3f6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800c3fa:	461f      	movlt	r7, r3
 800c3fc:	2300      	movge	r3, #0
 800c3fe:	232d      	movlt	r3, #45	; 0x2d
 800c400:	b088      	sub	sp, #32
 800c402:	4614      	mov	r4, r2
 800c404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c406:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c408:	7013      	strb	r3, [r2, #0]
 800c40a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c40c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800c410:	f023 0820 	bic.w	r8, r3, #32
 800c414:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c418:	d005      	beq.n	800c426 <__cvt+0x3a>
 800c41a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c41e:	d100      	bne.n	800c422 <__cvt+0x36>
 800c420:	3501      	adds	r5, #1
 800c422:	2302      	movs	r3, #2
 800c424:	e000      	b.n	800c428 <__cvt+0x3c>
 800c426:	2303      	movs	r3, #3
 800c428:	aa07      	add	r2, sp, #28
 800c42a:	9204      	str	r2, [sp, #16]
 800c42c:	aa06      	add	r2, sp, #24
 800c42e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c432:	e9cd 3500 	strd	r3, r5, [sp]
 800c436:	4622      	mov	r2, r4
 800c438:	463b      	mov	r3, r7
 800c43a:	f000 fcf9 	bl	800ce30 <_dtoa_r>
 800c43e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c442:	4606      	mov	r6, r0
 800c444:	d102      	bne.n	800c44c <__cvt+0x60>
 800c446:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c448:	07db      	lsls	r3, r3, #31
 800c44a:	d522      	bpl.n	800c492 <__cvt+0xa6>
 800c44c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c450:	eb06 0905 	add.w	r9, r6, r5
 800c454:	d110      	bne.n	800c478 <__cvt+0x8c>
 800c456:	7833      	ldrb	r3, [r6, #0]
 800c458:	2b30      	cmp	r3, #48	; 0x30
 800c45a:	d10a      	bne.n	800c472 <__cvt+0x86>
 800c45c:	2200      	movs	r2, #0
 800c45e:	2300      	movs	r3, #0
 800c460:	4620      	mov	r0, r4
 800c462:	4639      	mov	r1, r7
 800c464:	f7f4 fab8 	bl	80009d8 <__aeabi_dcmpeq>
 800c468:	b918      	cbnz	r0, 800c472 <__cvt+0x86>
 800c46a:	f1c5 0501 	rsb	r5, r5, #1
 800c46e:	f8ca 5000 	str.w	r5, [sl]
 800c472:	f8da 3000 	ldr.w	r3, [sl]
 800c476:	4499      	add	r9, r3
 800c478:	2200      	movs	r2, #0
 800c47a:	2300      	movs	r3, #0
 800c47c:	4620      	mov	r0, r4
 800c47e:	4639      	mov	r1, r7
 800c480:	f7f4 faaa 	bl	80009d8 <__aeabi_dcmpeq>
 800c484:	b108      	cbz	r0, 800c48a <__cvt+0x9e>
 800c486:	f8cd 901c 	str.w	r9, [sp, #28]
 800c48a:	2230      	movs	r2, #48	; 0x30
 800c48c:	9b07      	ldr	r3, [sp, #28]
 800c48e:	454b      	cmp	r3, r9
 800c490:	d307      	bcc.n	800c4a2 <__cvt+0xb6>
 800c492:	4630      	mov	r0, r6
 800c494:	9b07      	ldr	r3, [sp, #28]
 800c496:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c498:	1b9b      	subs	r3, r3, r6
 800c49a:	6013      	str	r3, [r2, #0]
 800c49c:	b008      	add	sp, #32
 800c49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4a2:	1c59      	adds	r1, r3, #1
 800c4a4:	9107      	str	r1, [sp, #28]
 800c4a6:	701a      	strb	r2, [r3, #0]
 800c4a8:	e7f0      	b.n	800c48c <__cvt+0xa0>

0800c4aa <__exponent>:
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4ae:	2900      	cmp	r1, #0
 800c4b0:	f803 2b02 	strb.w	r2, [r3], #2
 800c4b4:	bfb6      	itet	lt
 800c4b6:	222d      	movlt	r2, #45	; 0x2d
 800c4b8:	222b      	movge	r2, #43	; 0x2b
 800c4ba:	4249      	neglt	r1, r1
 800c4bc:	2909      	cmp	r1, #9
 800c4be:	7042      	strb	r2, [r0, #1]
 800c4c0:	dd2b      	ble.n	800c51a <__exponent+0x70>
 800c4c2:	f10d 0407 	add.w	r4, sp, #7
 800c4c6:	46a4      	mov	ip, r4
 800c4c8:	270a      	movs	r7, #10
 800c4ca:	fb91 f6f7 	sdiv	r6, r1, r7
 800c4ce:	460a      	mov	r2, r1
 800c4d0:	46a6      	mov	lr, r4
 800c4d2:	fb07 1516 	mls	r5, r7, r6, r1
 800c4d6:	2a63      	cmp	r2, #99	; 0x63
 800c4d8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800c4dc:	4631      	mov	r1, r6
 800c4de:	f104 34ff 	add.w	r4, r4, #4294967295
 800c4e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c4e6:	dcf0      	bgt.n	800c4ca <__exponent+0x20>
 800c4e8:	3130      	adds	r1, #48	; 0x30
 800c4ea:	f1ae 0502 	sub.w	r5, lr, #2
 800c4ee:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c4f2:	4629      	mov	r1, r5
 800c4f4:	1c44      	adds	r4, r0, #1
 800c4f6:	4561      	cmp	r1, ip
 800c4f8:	d30a      	bcc.n	800c510 <__exponent+0x66>
 800c4fa:	f10d 0209 	add.w	r2, sp, #9
 800c4fe:	eba2 020e 	sub.w	r2, r2, lr
 800c502:	4565      	cmp	r5, ip
 800c504:	bf88      	it	hi
 800c506:	2200      	movhi	r2, #0
 800c508:	4413      	add	r3, r2
 800c50a:	1a18      	subs	r0, r3, r0
 800c50c:	b003      	add	sp, #12
 800c50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c510:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c514:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c518:	e7ed      	b.n	800c4f6 <__exponent+0x4c>
 800c51a:	2330      	movs	r3, #48	; 0x30
 800c51c:	3130      	adds	r1, #48	; 0x30
 800c51e:	7083      	strb	r3, [r0, #2]
 800c520:	70c1      	strb	r1, [r0, #3]
 800c522:	1d03      	adds	r3, r0, #4
 800c524:	e7f1      	b.n	800c50a <__exponent+0x60>
	...

0800c528 <_printf_float>:
 800c528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52c:	b091      	sub	sp, #68	; 0x44
 800c52e:	460c      	mov	r4, r1
 800c530:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c534:	4616      	mov	r6, r2
 800c536:	461f      	mov	r7, r3
 800c538:	4605      	mov	r5, r0
 800c53a:	f001 fa67 	bl	800da0c <_localeconv_r>
 800c53e:	6803      	ldr	r3, [r0, #0]
 800c540:	4618      	mov	r0, r3
 800c542:	9309      	str	r3, [sp, #36]	; 0x24
 800c544:	f7f3 fe1c 	bl	8000180 <strlen>
 800c548:	2300      	movs	r3, #0
 800c54a:	930e      	str	r3, [sp, #56]	; 0x38
 800c54c:	f8d8 3000 	ldr.w	r3, [r8]
 800c550:	900a      	str	r0, [sp, #40]	; 0x28
 800c552:	3307      	adds	r3, #7
 800c554:	f023 0307 	bic.w	r3, r3, #7
 800c558:	f103 0208 	add.w	r2, r3, #8
 800c55c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c560:	f8d4 b000 	ldr.w	fp, [r4]
 800c564:	f8c8 2000 	str.w	r2, [r8]
 800c568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c570:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800c574:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c578:	930b      	str	r3, [sp, #44]	; 0x2c
 800c57a:	f04f 32ff 	mov.w	r2, #4294967295
 800c57e:	4640      	mov	r0, r8
 800c580:	4b9c      	ldr	r3, [pc, #624]	; (800c7f4 <_printf_float+0x2cc>)
 800c582:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c584:	f7f4 fa5a 	bl	8000a3c <__aeabi_dcmpun>
 800c588:	bb70      	cbnz	r0, 800c5e8 <_printf_float+0xc0>
 800c58a:	f04f 32ff 	mov.w	r2, #4294967295
 800c58e:	4640      	mov	r0, r8
 800c590:	4b98      	ldr	r3, [pc, #608]	; (800c7f4 <_printf_float+0x2cc>)
 800c592:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c594:	f7f4 fa34 	bl	8000a00 <__aeabi_dcmple>
 800c598:	bb30      	cbnz	r0, 800c5e8 <_printf_float+0xc0>
 800c59a:	2200      	movs	r2, #0
 800c59c:	2300      	movs	r3, #0
 800c59e:	4640      	mov	r0, r8
 800c5a0:	4651      	mov	r1, sl
 800c5a2:	f7f4 fa23 	bl	80009ec <__aeabi_dcmplt>
 800c5a6:	b110      	cbz	r0, 800c5ae <_printf_float+0x86>
 800c5a8:	232d      	movs	r3, #45	; 0x2d
 800c5aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5ae:	4b92      	ldr	r3, [pc, #584]	; (800c7f8 <_printf_float+0x2d0>)
 800c5b0:	4892      	ldr	r0, [pc, #584]	; (800c7fc <_printf_float+0x2d4>)
 800c5b2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c5b6:	bf94      	ite	ls
 800c5b8:	4698      	movls	r8, r3
 800c5ba:	4680      	movhi	r8, r0
 800c5bc:	2303      	movs	r3, #3
 800c5be:	f04f 0a00 	mov.w	sl, #0
 800c5c2:	6123      	str	r3, [r4, #16]
 800c5c4:	f02b 0304 	bic.w	r3, fp, #4
 800c5c8:	6023      	str	r3, [r4, #0]
 800c5ca:	4633      	mov	r3, r6
 800c5cc:	4621      	mov	r1, r4
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	9700      	str	r7, [sp, #0]
 800c5d2:	aa0f      	add	r2, sp, #60	; 0x3c
 800c5d4:	f000 f9d4 	bl	800c980 <_printf_common>
 800c5d8:	3001      	adds	r0, #1
 800c5da:	f040 8090 	bne.w	800c6fe <_printf_float+0x1d6>
 800c5de:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e2:	b011      	add	sp, #68	; 0x44
 800c5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e8:	4642      	mov	r2, r8
 800c5ea:	4653      	mov	r3, sl
 800c5ec:	4640      	mov	r0, r8
 800c5ee:	4651      	mov	r1, sl
 800c5f0:	f7f4 fa24 	bl	8000a3c <__aeabi_dcmpun>
 800c5f4:	b148      	cbz	r0, 800c60a <_printf_float+0xe2>
 800c5f6:	f1ba 0f00 	cmp.w	sl, #0
 800c5fa:	bfb8      	it	lt
 800c5fc:	232d      	movlt	r3, #45	; 0x2d
 800c5fe:	4880      	ldr	r0, [pc, #512]	; (800c800 <_printf_float+0x2d8>)
 800c600:	bfb8      	it	lt
 800c602:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c606:	4b7f      	ldr	r3, [pc, #508]	; (800c804 <_printf_float+0x2dc>)
 800c608:	e7d3      	b.n	800c5b2 <_printf_float+0x8a>
 800c60a:	6863      	ldr	r3, [r4, #4]
 800c60c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c610:	1c5a      	adds	r2, r3, #1
 800c612:	d142      	bne.n	800c69a <_printf_float+0x172>
 800c614:	2306      	movs	r3, #6
 800c616:	6063      	str	r3, [r4, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	9206      	str	r2, [sp, #24]
 800c61c:	aa0e      	add	r2, sp, #56	; 0x38
 800c61e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800c622:	aa0d      	add	r2, sp, #52	; 0x34
 800c624:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800c628:	9203      	str	r2, [sp, #12]
 800c62a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c62e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c632:	6023      	str	r3, [r4, #0]
 800c634:	6863      	ldr	r3, [r4, #4]
 800c636:	4642      	mov	r2, r8
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	4628      	mov	r0, r5
 800c63c:	4653      	mov	r3, sl
 800c63e:	910b      	str	r1, [sp, #44]	; 0x2c
 800c640:	f7ff fed4 	bl	800c3ec <__cvt>
 800c644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c646:	4680      	mov	r8, r0
 800c648:	2947      	cmp	r1, #71	; 0x47
 800c64a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c64c:	d108      	bne.n	800c660 <_printf_float+0x138>
 800c64e:	1cc8      	adds	r0, r1, #3
 800c650:	db02      	blt.n	800c658 <_printf_float+0x130>
 800c652:	6863      	ldr	r3, [r4, #4]
 800c654:	4299      	cmp	r1, r3
 800c656:	dd40      	ble.n	800c6da <_printf_float+0x1b2>
 800c658:	f1a9 0902 	sub.w	r9, r9, #2
 800c65c:	fa5f f989 	uxtb.w	r9, r9
 800c660:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c664:	d81f      	bhi.n	800c6a6 <_printf_float+0x17e>
 800c666:	464a      	mov	r2, r9
 800c668:	3901      	subs	r1, #1
 800c66a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c66e:	910d      	str	r1, [sp, #52]	; 0x34
 800c670:	f7ff ff1b 	bl	800c4aa <__exponent>
 800c674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c676:	4682      	mov	sl, r0
 800c678:	1813      	adds	r3, r2, r0
 800c67a:	2a01      	cmp	r2, #1
 800c67c:	6123      	str	r3, [r4, #16]
 800c67e:	dc02      	bgt.n	800c686 <_printf_float+0x15e>
 800c680:	6822      	ldr	r2, [r4, #0]
 800c682:	07d2      	lsls	r2, r2, #31
 800c684:	d501      	bpl.n	800c68a <_printf_float+0x162>
 800c686:	3301      	adds	r3, #1
 800c688:	6123      	str	r3, [r4, #16]
 800c68a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d09b      	beq.n	800c5ca <_printf_float+0xa2>
 800c692:	232d      	movs	r3, #45	; 0x2d
 800c694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c698:	e797      	b.n	800c5ca <_printf_float+0xa2>
 800c69a:	2947      	cmp	r1, #71	; 0x47
 800c69c:	d1bc      	bne.n	800c618 <_printf_float+0xf0>
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1ba      	bne.n	800c618 <_printf_float+0xf0>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e7b7      	b.n	800c616 <_printf_float+0xee>
 800c6a6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c6aa:	d118      	bne.n	800c6de <_printf_float+0x1b6>
 800c6ac:	2900      	cmp	r1, #0
 800c6ae:	6863      	ldr	r3, [r4, #4]
 800c6b0:	dd0b      	ble.n	800c6ca <_printf_float+0x1a2>
 800c6b2:	6121      	str	r1, [r4, #16]
 800c6b4:	b913      	cbnz	r3, 800c6bc <_printf_float+0x194>
 800c6b6:	6822      	ldr	r2, [r4, #0]
 800c6b8:	07d0      	lsls	r0, r2, #31
 800c6ba:	d502      	bpl.n	800c6c2 <_printf_float+0x19a>
 800c6bc:	3301      	adds	r3, #1
 800c6be:	440b      	add	r3, r1
 800c6c0:	6123      	str	r3, [r4, #16]
 800c6c2:	f04f 0a00 	mov.w	sl, #0
 800c6c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c6c8:	e7df      	b.n	800c68a <_printf_float+0x162>
 800c6ca:	b913      	cbnz	r3, 800c6d2 <_printf_float+0x1aa>
 800c6cc:	6822      	ldr	r2, [r4, #0]
 800c6ce:	07d2      	lsls	r2, r2, #31
 800c6d0:	d501      	bpl.n	800c6d6 <_printf_float+0x1ae>
 800c6d2:	3302      	adds	r3, #2
 800c6d4:	e7f4      	b.n	800c6c0 <_printf_float+0x198>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e7f2      	b.n	800c6c0 <_printf_float+0x198>
 800c6da:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c6de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6e0:	4299      	cmp	r1, r3
 800c6e2:	db05      	blt.n	800c6f0 <_printf_float+0x1c8>
 800c6e4:	6823      	ldr	r3, [r4, #0]
 800c6e6:	6121      	str	r1, [r4, #16]
 800c6e8:	07d8      	lsls	r0, r3, #31
 800c6ea:	d5ea      	bpl.n	800c6c2 <_printf_float+0x19a>
 800c6ec:	1c4b      	adds	r3, r1, #1
 800c6ee:	e7e7      	b.n	800c6c0 <_printf_float+0x198>
 800c6f0:	2900      	cmp	r1, #0
 800c6f2:	bfcc      	ite	gt
 800c6f4:	2201      	movgt	r2, #1
 800c6f6:	f1c1 0202 	rsble	r2, r1, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	e7e0      	b.n	800c6c0 <_printf_float+0x198>
 800c6fe:	6823      	ldr	r3, [r4, #0]
 800c700:	055a      	lsls	r2, r3, #21
 800c702:	d407      	bmi.n	800c714 <_printf_float+0x1ec>
 800c704:	6923      	ldr	r3, [r4, #16]
 800c706:	4642      	mov	r2, r8
 800c708:	4631      	mov	r1, r6
 800c70a:	4628      	mov	r0, r5
 800c70c:	47b8      	blx	r7
 800c70e:	3001      	adds	r0, #1
 800c710:	d12b      	bne.n	800c76a <_printf_float+0x242>
 800c712:	e764      	b.n	800c5de <_printf_float+0xb6>
 800c714:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c718:	f240 80dd 	bls.w	800c8d6 <_printf_float+0x3ae>
 800c71c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c720:	2200      	movs	r2, #0
 800c722:	2300      	movs	r3, #0
 800c724:	f7f4 f958 	bl	80009d8 <__aeabi_dcmpeq>
 800c728:	2800      	cmp	r0, #0
 800c72a:	d033      	beq.n	800c794 <_printf_float+0x26c>
 800c72c:	2301      	movs	r3, #1
 800c72e:	4631      	mov	r1, r6
 800c730:	4628      	mov	r0, r5
 800c732:	4a35      	ldr	r2, [pc, #212]	; (800c808 <_printf_float+0x2e0>)
 800c734:	47b8      	blx	r7
 800c736:	3001      	adds	r0, #1
 800c738:	f43f af51 	beq.w	800c5de <_printf_float+0xb6>
 800c73c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c740:	429a      	cmp	r2, r3
 800c742:	db02      	blt.n	800c74a <_printf_float+0x222>
 800c744:	6823      	ldr	r3, [r4, #0]
 800c746:	07d8      	lsls	r0, r3, #31
 800c748:	d50f      	bpl.n	800c76a <_printf_float+0x242>
 800c74a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c74e:	4631      	mov	r1, r6
 800c750:	4628      	mov	r0, r5
 800c752:	47b8      	blx	r7
 800c754:	3001      	adds	r0, #1
 800c756:	f43f af42 	beq.w	800c5de <_printf_float+0xb6>
 800c75a:	f04f 0800 	mov.w	r8, #0
 800c75e:	f104 091a 	add.w	r9, r4, #26
 800c762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c764:	3b01      	subs	r3, #1
 800c766:	4543      	cmp	r3, r8
 800c768:	dc09      	bgt.n	800c77e <_printf_float+0x256>
 800c76a:	6823      	ldr	r3, [r4, #0]
 800c76c:	079b      	lsls	r3, r3, #30
 800c76e:	f100 8102 	bmi.w	800c976 <_printf_float+0x44e>
 800c772:	68e0      	ldr	r0, [r4, #12]
 800c774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c776:	4298      	cmp	r0, r3
 800c778:	bfb8      	it	lt
 800c77a:	4618      	movlt	r0, r3
 800c77c:	e731      	b.n	800c5e2 <_printf_float+0xba>
 800c77e:	2301      	movs	r3, #1
 800c780:	464a      	mov	r2, r9
 800c782:	4631      	mov	r1, r6
 800c784:	4628      	mov	r0, r5
 800c786:	47b8      	blx	r7
 800c788:	3001      	adds	r0, #1
 800c78a:	f43f af28 	beq.w	800c5de <_printf_float+0xb6>
 800c78e:	f108 0801 	add.w	r8, r8, #1
 800c792:	e7e6      	b.n	800c762 <_printf_float+0x23a>
 800c794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c796:	2b00      	cmp	r3, #0
 800c798:	dc38      	bgt.n	800c80c <_printf_float+0x2e4>
 800c79a:	2301      	movs	r3, #1
 800c79c:	4631      	mov	r1, r6
 800c79e:	4628      	mov	r0, r5
 800c7a0:	4a19      	ldr	r2, [pc, #100]	; (800c808 <_printf_float+0x2e0>)
 800c7a2:	47b8      	blx	r7
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	f43f af1a 	beq.w	800c5de <_printf_float+0xb6>
 800c7aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	d102      	bne.n	800c7b8 <_printf_float+0x290>
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	07d9      	lsls	r1, r3, #31
 800c7b6:	d5d8      	bpl.n	800c76a <_printf_float+0x242>
 800c7b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7bc:	4631      	mov	r1, r6
 800c7be:	4628      	mov	r0, r5
 800c7c0:	47b8      	blx	r7
 800c7c2:	3001      	adds	r0, #1
 800c7c4:	f43f af0b 	beq.w	800c5de <_printf_float+0xb6>
 800c7c8:	f04f 0900 	mov.w	r9, #0
 800c7cc:	f104 0a1a 	add.w	sl, r4, #26
 800c7d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7d2:	425b      	negs	r3, r3
 800c7d4:	454b      	cmp	r3, r9
 800c7d6:	dc01      	bgt.n	800c7dc <_printf_float+0x2b4>
 800c7d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7da:	e794      	b.n	800c706 <_printf_float+0x1de>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	4652      	mov	r2, sl
 800c7e0:	4631      	mov	r1, r6
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	47b8      	blx	r7
 800c7e6:	3001      	adds	r0, #1
 800c7e8:	f43f aef9 	beq.w	800c5de <_printf_float+0xb6>
 800c7ec:	f109 0901 	add.w	r9, r9, #1
 800c7f0:	e7ee      	b.n	800c7d0 <_printf_float+0x2a8>
 800c7f2:	bf00      	nop
 800c7f4:	7fefffff 	.word	0x7fefffff
 800c7f8:	0800f32c 	.word	0x0800f32c
 800c7fc:	0800f330 	.word	0x0800f330
 800c800:	0800f338 	.word	0x0800f338
 800c804:	0800f334 	.word	0x0800f334
 800c808:	0800f33c 	.word	0x0800f33c
 800c80c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c80e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c810:	429a      	cmp	r2, r3
 800c812:	bfa8      	it	ge
 800c814:	461a      	movge	r2, r3
 800c816:	2a00      	cmp	r2, #0
 800c818:	4691      	mov	r9, r2
 800c81a:	dc37      	bgt.n	800c88c <_printf_float+0x364>
 800c81c:	f04f 0b00 	mov.w	fp, #0
 800c820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c824:	f104 021a 	add.w	r2, r4, #26
 800c828:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c82c:	ebaa 0309 	sub.w	r3, sl, r9
 800c830:	455b      	cmp	r3, fp
 800c832:	dc33      	bgt.n	800c89c <_printf_float+0x374>
 800c834:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c838:	429a      	cmp	r2, r3
 800c83a:	db3b      	blt.n	800c8b4 <_printf_float+0x38c>
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	07da      	lsls	r2, r3, #31
 800c840:	d438      	bmi.n	800c8b4 <_printf_float+0x38c>
 800c842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c844:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c846:	eba3 020a 	sub.w	r2, r3, sl
 800c84a:	eba3 0901 	sub.w	r9, r3, r1
 800c84e:	4591      	cmp	r9, r2
 800c850:	bfa8      	it	ge
 800c852:	4691      	movge	r9, r2
 800c854:	f1b9 0f00 	cmp.w	r9, #0
 800c858:	dc34      	bgt.n	800c8c4 <_printf_float+0x39c>
 800c85a:	f04f 0800 	mov.w	r8, #0
 800c85e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c862:	f104 0a1a 	add.w	sl, r4, #26
 800c866:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c86a:	1a9b      	subs	r3, r3, r2
 800c86c:	eba3 0309 	sub.w	r3, r3, r9
 800c870:	4543      	cmp	r3, r8
 800c872:	f77f af7a 	ble.w	800c76a <_printf_float+0x242>
 800c876:	2301      	movs	r3, #1
 800c878:	4652      	mov	r2, sl
 800c87a:	4631      	mov	r1, r6
 800c87c:	4628      	mov	r0, r5
 800c87e:	47b8      	blx	r7
 800c880:	3001      	adds	r0, #1
 800c882:	f43f aeac 	beq.w	800c5de <_printf_float+0xb6>
 800c886:	f108 0801 	add.w	r8, r8, #1
 800c88a:	e7ec      	b.n	800c866 <_printf_float+0x33e>
 800c88c:	4613      	mov	r3, r2
 800c88e:	4631      	mov	r1, r6
 800c890:	4642      	mov	r2, r8
 800c892:	4628      	mov	r0, r5
 800c894:	47b8      	blx	r7
 800c896:	3001      	adds	r0, #1
 800c898:	d1c0      	bne.n	800c81c <_printf_float+0x2f4>
 800c89a:	e6a0      	b.n	800c5de <_printf_float+0xb6>
 800c89c:	2301      	movs	r3, #1
 800c89e:	4631      	mov	r1, r6
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	920b      	str	r2, [sp, #44]	; 0x2c
 800c8a4:	47b8      	blx	r7
 800c8a6:	3001      	adds	r0, #1
 800c8a8:	f43f ae99 	beq.w	800c5de <_printf_float+0xb6>
 800c8ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8ae:	f10b 0b01 	add.w	fp, fp, #1
 800c8b2:	e7b9      	b.n	800c828 <_printf_float+0x300>
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	47b8      	blx	r7
 800c8be:	3001      	adds	r0, #1
 800c8c0:	d1bf      	bne.n	800c842 <_printf_float+0x31a>
 800c8c2:	e68c      	b.n	800c5de <_printf_float+0xb6>
 800c8c4:	464b      	mov	r3, r9
 800c8c6:	4631      	mov	r1, r6
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	eb08 020a 	add.w	r2, r8, sl
 800c8ce:	47b8      	blx	r7
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	d1c2      	bne.n	800c85a <_printf_float+0x332>
 800c8d4:	e683      	b.n	800c5de <_printf_float+0xb6>
 800c8d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8d8:	2a01      	cmp	r2, #1
 800c8da:	dc01      	bgt.n	800c8e0 <_printf_float+0x3b8>
 800c8dc:	07db      	lsls	r3, r3, #31
 800c8de:	d537      	bpl.n	800c950 <_printf_float+0x428>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	4642      	mov	r2, r8
 800c8e4:	4631      	mov	r1, r6
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	47b8      	blx	r7
 800c8ea:	3001      	adds	r0, #1
 800c8ec:	f43f ae77 	beq.w	800c5de <_printf_float+0xb6>
 800c8f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8f4:	4631      	mov	r1, r6
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	47b8      	blx	r7
 800c8fa:	3001      	adds	r0, #1
 800c8fc:	f43f ae6f 	beq.w	800c5de <_printf_float+0xb6>
 800c900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c904:	2200      	movs	r2, #0
 800c906:	2300      	movs	r3, #0
 800c908:	f7f4 f866 	bl	80009d8 <__aeabi_dcmpeq>
 800c90c:	b9d8      	cbnz	r0, 800c946 <_printf_float+0x41e>
 800c90e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c910:	f108 0201 	add.w	r2, r8, #1
 800c914:	3b01      	subs	r3, #1
 800c916:	4631      	mov	r1, r6
 800c918:	4628      	mov	r0, r5
 800c91a:	47b8      	blx	r7
 800c91c:	3001      	adds	r0, #1
 800c91e:	d10e      	bne.n	800c93e <_printf_float+0x416>
 800c920:	e65d      	b.n	800c5de <_printf_float+0xb6>
 800c922:	2301      	movs	r3, #1
 800c924:	464a      	mov	r2, r9
 800c926:	4631      	mov	r1, r6
 800c928:	4628      	mov	r0, r5
 800c92a:	47b8      	blx	r7
 800c92c:	3001      	adds	r0, #1
 800c92e:	f43f ae56 	beq.w	800c5de <_printf_float+0xb6>
 800c932:	f108 0801 	add.w	r8, r8, #1
 800c936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c938:	3b01      	subs	r3, #1
 800c93a:	4543      	cmp	r3, r8
 800c93c:	dcf1      	bgt.n	800c922 <_printf_float+0x3fa>
 800c93e:	4653      	mov	r3, sl
 800c940:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c944:	e6e0      	b.n	800c708 <_printf_float+0x1e0>
 800c946:	f04f 0800 	mov.w	r8, #0
 800c94a:	f104 091a 	add.w	r9, r4, #26
 800c94e:	e7f2      	b.n	800c936 <_printf_float+0x40e>
 800c950:	2301      	movs	r3, #1
 800c952:	4642      	mov	r2, r8
 800c954:	e7df      	b.n	800c916 <_printf_float+0x3ee>
 800c956:	2301      	movs	r3, #1
 800c958:	464a      	mov	r2, r9
 800c95a:	4631      	mov	r1, r6
 800c95c:	4628      	mov	r0, r5
 800c95e:	47b8      	blx	r7
 800c960:	3001      	adds	r0, #1
 800c962:	f43f ae3c 	beq.w	800c5de <_printf_float+0xb6>
 800c966:	f108 0801 	add.w	r8, r8, #1
 800c96a:	68e3      	ldr	r3, [r4, #12]
 800c96c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c96e:	1a5b      	subs	r3, r3, r1
 800c970:	4543      	cmp	r3, r8
 800c972:	dcf0      	bgt.n	800c956 <_printf_float+0x42e>
 800c974:	e6fd      	b.n	800c772 <_printf_float+0x24a>
 800c976:	f04f 0800 	mov.w	r8, #0
 800c97a:	f104 0919 	add.w	r9, r4, #25
 800c97e:	e7f4      	b.n	800c96a <_printf_float+0x442>

0800c980 <_printf_common>:
 800c980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c984:	4616      	mov	r6, r2
 800c986:	4699      	mov	r9, r3
 800c988:	688a      	ldr	r2, [r1, #8]
 800c98a:	690b      	ldr	r3, [r1, #16]
 800c98c:	4607      	mov	r7, r0
 800c98e:	4293      	cmp	r3, r2
 800c990:	bfb8      	it	lt
 800c992:	4613      	movlt	r3, r2
 800c994:	6033      	str	r3, [r6, #0]
 800c996:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c99a:	460c      	mov	r4, r1
 800c99c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9a0:	b10a      	cbz	r2, 800c9a6 <_printf_common+0x26>
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	6033      	str	r3, [r6, #0]
 800c9a6:	6823      	ldr	r3, [r4, #0]
 800c9a8:	0699      	lsls	r1, r3, #26
 800c9aa:	bf42      	ittt	mi
 800c9ac:	6833      	ldrmi	r3, [r6, #0]
 800c9ae:	3302      	addmi	r3, #2
 800c9b0:	6033      	strmi	r3, [r6, #0]
 800c9b2:	6825      	ldr	r5, [r4, #0]
 800c9b4:	f015 0506 	ands.w	r5, r5, #6
 800c9b8:	d106      	bne.n	800c9c8 <_printf_common+0x48>
 800c9ba:	f104 0a19 	add.w	sl, r4, #25
 800c9be:	68e3      	ldr	r3, [r4, #12]
 800c9c0:	6832      	ldr	r2, [r6, #0]
 800c9c2:	1a9b      	subs	r3, r3, r2
 800c9c4:	42ab      	cmp	r3, r5
 800c9c6:	dc28      	bgt.n	800ca1a <_printf_common+0x9a>
 800c9c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9cc:	1e13      	subs	r3, r2, #0
 800c9ce:	6822      	ldr	r2, [r4, #0]
 800c9d0:	bf18      	it	ne
 800c9d2:	2301      	movne	r3, #1
 800c9d4:	0692      	lsls	r2, r2, #26
 800c9d6:	d42d      	bmi.n	800ca34 <_printf_common+0xb4>
 800c9d8:	4649      	mov	r1, r9
 800c9da:	4638      	mov	r0, r7
 800c9dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9e0:	47c0      	blx	r8
 800c9e2:	3001      	adds	r0, #1
 800c9e4:	d020      	beq.n	800ca28 <_printf_common+0xa8>
 800c9e6:	6823      	ldr	r3, [r4, #0]
 800c9e8:	68e5      	ldr	r5, [r4, #12]
 800c9ea:	f003 0306 	and.w	r3, r3, #6
 800c9ee:	2b04      	cmp	r3, #4
 800c9f0:	bf18      	it	ne
 800c9f2:	2500      	movne	r5, #0
 800c9f4:	6832      	ldr	r2, [r6, #0]
 800c9f6:	f04f 0600 	mov.w	r6, #0
 800c9fa:	68a3      	ldr	r3, [r4, #8]
 800c9fc:	bf08      	it	eq
 800c9fe:	1aad      	subeq	r5, r5, r2
 800ca00:	6922      	ldr	r2, [r4, #16]
 800ca02:	bf08      	it	eq
 800ca04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	bfc4      	itt	gt
 800ca0c:	1a9b      	subgt	r3, r3, r2
 800ca0e:	18ed      	addgt	r5, r5, r3
 800ca10:	341a      	adds	r4, #26
 800ca12:	42b5      	cmp	r5, r6
 800ca14:	d11a      	bne.n	800ca4c <_printf_common+0xcc>
 800ca16:	2000      	movs	r0, #0
 800ca18:	e008      	b.n	800ca2c <_printf_common+0xac>
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	4652      	mov	r2, sl
 800ca1e:	4649      	mov	r1, r9
 800ca20:	4638      	mov	r0, r7
 800ca22:	47c0      	blx	r8
 800ca24:	3001      	adds	r0, #1
 800ca26:	d103      	bne.n	800ca30 <_printf_common+0xb0>
 800ca28:	f04f 30ff 	mov.w	r0, #4294967295
 800ca2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca30:	3501      	adds	r5, #1
 800ca32:	e7c4      	b.n	800c9be <_printf_common+0x3e>
 800ca34:	2030      	movs	r0, #48	; 0x30
 800ca36:	18e1      	adds	r1, r4, r3
 800ca38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca3c:	1c5a      	adds	r2, r3, #1
 800ca3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca42:	4422      	add	r2, r4
 800ca44:	3302      	adds	r3, #2
 800ca46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca4a:	e7c5      	b.n	800c9d8 <_printf_common+0x58>
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	4622      	mov	r2, r4
 800ca50:	4649      	mov	r1, r9
 800ca52:	4638      	mov	r0, r7
 800ca54:	47c0      	blx	r8
 800ca56:	3001      	adds	r0, #1
 800ca58:	d0e6      	beq.n	800ca28 <_printf_common+0xa8>
 800ca5a:	3601      	adds	r6, #1
 800ca5c:	e7d9      	b.n	800ca12 <_printf_common+0x92>
	...

0800ca60 <_printf_i>:
 800ca60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca64:	7e0f      	ldrb	r7, [r1, #24]
 800ca66:	4691      	mov	r9, r2
 800ca68:	2f78      	cmp	r7, #120	; 0x78
 800ca6a:	4680      	mov	r8, r0
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	469a      	mov	sl, r3
 800ca70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca76:	d807      	bhi.n	800ca88 <_printf_i+0x28>
 800ca78:	2f62      	cmp	r7, #98	; 0x62
 800ca7a:	d80a      	bhi.n	800ca92 <_printf_i+0x32>
 800ca7c:	2f00      	cmp	r7, #0
 800ca7e:	f000 80d9 	beq.w	800cc34 <_printf_i+0x1d4>
 800ca82:	2f58      	cmp	r7, #88	; 0x58
 800ca84:	f000 80a4 	beq.w	800cbd0 <_printf_i+0x170>
 800ca88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca90:	e03a      	b.n	800cb08 <_printf_i+0xa8>
 800ca92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca96:	2b15      	cmp	r3, #21
 800ca98:	d8f6      	bhi.n	800ca88 <_printf_i+0x28>
 800ca9a:	a101      	add	r1, pc, #4	; (adr r1, 800caa0 <_printf_i+0x40>)
 800ca9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800caa0:	0800caf9 	.word	0x0800caf9
 800caa4:	0800cb0d 	.word	0x0800cb0d
 800caa8:	0800ca89 	.word	0x0800ca89
 800caac:	0800ca89 	.word	0x0800ca89
 800cab0:	0800ca89 	.word	0x0800ca89
 800cab4:	0800ca89 	.word	0x0800ca89
 800cab8:	0800cb0d 	.word	0x0800cb0d
 800cabc:	0800ca89 	.word	0x0800ca89
 800cac0:	0800ca89 	.word	0x0800ca89
 800cac4:	0800ca89 	.word	0x0800ca89
 800cac8:	0800ca89 	.word	0x0800ca89
 800cacc:	0800cc1b 	.word	0x0800cc1b
 800cad0:	0800cb3d 	.word	0x0800cb3d
 800cad4:	0800cbfd 	.word	0x0800cbfd
 800cad8:	0800ca89 	.word	0x0800ca89
 800cadc:	0800ca89 	.word	0x0800ca89
 800cae0:	0800cc3d 	.word	0x0800cc3d
 800cae4:	0800ca89 	.word	0x0800ca89
 800cae8:	0800cb3d 	.word	0x0800cb3d
 800caec:	0800ca89 	.word	0x0800ca89
 800caf0:	0800ca89 	.word	0x0800ca89
 800caf4:	0800cc05 	.word	0x0800cc05
 800caf8:	682b      	ldr	r3, [r5, #0]
 800cafa:	1d1a      	adds	r2, r3, #4
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	602a      	str	r2, [r5, #0]
 800cb00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb08:	2301      	movs	r3, #1
 800cb0a:	e0a4      	b.n	800cc56 <_printf_i+0x1f6>
 800cb0c:	6820      	ldr	r0, [r4, #0]
 800cb0e:	6829      	ldr	r1, [r5, #0]
 800cb10:	0606      	lsls	r6, r0, #24
 800cb12:	f101 0304 	add.w	r3, r1, #4
 800cb16:	d50a      	bpl.n	800cb2e <_printf_i+0xce>
 800cb18:	680e      	ldr	r6, [r1, #0]
 800cb1a:	602b      	str	r3, [r5, #0]
 800cb1c:	2e00      	cmp	r6, #0
 800cb1e:	da03      	bge.n	800cb28 <_printf_i+0xc8>
 800cb20:	232d      	movs	r3, #45	; 0x2d
 800cb22:	4276      	negs	r6, r6
 800cb24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb28:	230a      	movs	r3, #10
 800cb2a:	485e      	ldr	r0, [pc, #376]	; (800cca4 <_printf_i+0x244>)
 800cb2c:	e019      	b.n	800cb62 <_printf_i+0x102>
 800cb2e:	680e      	ldr	r6, [r1, #0]
 800cb30:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb34:	602b      	str	r3, [r5, #0]
 800cb36:	bf18      	it	ne
 800cb38:	b236      	sxthne	r6, r6
 800cb3a:	e7ef      	b.n	800cb1c <_printf_i+0xbc>
 800cb3c:	682b      	ldr	r3, [r5, #0]
 800cb3e:	6820      	ldr	r0, [r4, #0]
 800cb40:	1d19      	adds	r1, r3, #4
 800cb42:	6029      	str	r1, [r5, #0]
 800cb44:	0601      	lsls	r1, r0, #24
 800cb46:	d501      	bpl.n	800cb4c <_printf_i+0xec>
 800cb48:	681e      	ldr	r6, [r3, #0]
 800cb4a:	e002      	b.n	800cb52 <_printf_i+0xf2>
 800cb4c:	0646      	lsls	r6, r0, #25
 800cb4e:	d5fb      	bpl.n	800cb48 <_printf_i+0xe8>
 800cb50:	881e      	ldrh	r6, [r3, #0]
 800cb52:	2f6f      	cmp	r7, #111	; 0x6f
 800cb54:	bf0c      	ite	eq
 800cb56:	2308      	moveq	r3, #8
 800cb58:	230a      	movne	r3, #10
 800cb5a:	4852      	ldr	r0, [pc, #328]	; (800cca4 <_printf_i+0x244>)
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb62:	6865      	ldr	r5, [r4, #4]
 800cb64:	2d00      	cmp	r5, #0
 800cb66:	bfa8      	it	ge
 800cb68:	6821      	ldrge	r1, [r4, #0]
 800cb6a:	60a5      	str	r5, [r4, #8]
 800cb6c:	bfa4      	itt	ge
 800cb6e:	f021 0104 	bicge.w	r1, r1, #4
 800cb72:	6021      	strge	r1, [r4, #0]
 800cb74:	b90e      	cbnz	r6, 800cb7a <_printf_i+0x11a>
 800cb76:	2d00      	cmp	r5, #0
 800cb78:	d04d      	beq.n	800cc16 <_printf_i+0x1b6>
 800cb7a:	4615      	mov	r5, r2
 800cb7c:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb80:	fb03 6711 	mls	r7, r3, r1, r6
 800cb84:	5dc7      	ldrb	r7, [r0, r7]
 800cb86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb8a:	4637      	mov	r7, r6
 800cb8c:	42bb      	cmp	r3, r7
 800cb8e:	460e      	mov	r6, r1
 800cb90:	d9f4      	bls.n	800cb7c <_printf_i+0x11c>
 800cb92:	2b08      	cmp	r3, #8
 800cb94:	d10b      	bne.n	800cbae <_printf_i+0x14e>
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	07de      	lsls	r6, r3, #31
 800cb9a:	d508      	bpl.n	800cbae <_printf_i+0x14e>
 800cb9c:	6923      	ldr	r3, [r4, #16]
 800cb9e:	6861      	ldr	r1, [r4, #4]
 800cba0:	4299      	cmp	r1, r3
 800cba2:	bfde      	ittt	le
 800cba4:	2330      	movle	r3, #48	; 0x30
 800cba6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbae:	1b52      	subs	r2, r2, r5
 800cbb0:	6122      	str	r2, [r4, #16]
 800cbb2:	464b      	mov	r3, r9
 800cbb4:	4621      	mov	r1, r4
 800cbb6:	4640      	mov	r0, r8
 800cbb8:	f8cd a000 	str.w	sl, [sp]
 800cbbc:	aa03      	add	r2, sp, #12
 800cbbe:	f7ff fedf 	bl	800c980 <_printf_common>
 800cbc2:	3001      	adds	r0, #1
 800cbc4:	d14c      	bne.n	800cc60 <_printf_i+0x200>
 800cbc6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbca:	b004      	add	sp, #16
 800cbcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbd0:	4834      	ldr	r0, [pc, #208]	; (800cca4 <_printf_i+0x244>)
 800cbd2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cbd6:	6829      	ldr	r1, [r5, #0]
 800cbd8:	6823      	ldr	r3, [r4, #0]
 800cbda:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbde:	6029      	str	r1, [r5, #0]
 800cbe0:	061d      	lsls	r5, r3, #24
 800cbe2:	d514      	bpl.n	800cc0e <_printf_i+0x1ae>
 800cbe4:	07df      	lsls	r7, r3, #31
 800cbe6:	bf44      	itt	mi
 800cbe8:	f043 0320 	orrmi.w	r3, r3, #32
 800cbec:	6023      	strmi	r3, [r4, #0]
 800cbee:	b91e      	cbnz	r6, 800cbf8 <_printf_i+0x198>
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	f023 0320 	bic.w	r3, r3, #32
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	2310      	movs	r3, #16
 800cbfa:	e7af      	b.n	800cb5c <_printf_i+0xfc>
 800cbfc:	6823      	ldr	r3, [r4, #0]
 800cbfe:	f043 0320 	orr.w	r3, r3, #32
 800cc02:	6023      	str	r3, [r4, #0]
 800cc04:	2378      	movs	r3, #120	; 0x78
 800cc06:	4828      	ldr	r0, [pc, #160]	; (800cca8 <_printf_i+0x248>)
 800cc08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc0c:	e7e3      	b.n	800cbd6 <_printf_i+0x176>
 800cc0e:	0659      	lsls	r1, r3, #25
 800cc10:	bf48      	it	mi
 800cc12:	b2b6      	uxthmi	r6, r6
 800cc14:	e7e6      	b.n	800cbe4 <_printf_i+0x184>
 800cc16:	4615      	mov	r5, r2
 800cc18:	e7bb      	b.n	800cb92 <_printf_i+0x132>
 800cc1a:	682b      	ldr	r3, [r5, #0]
 800cc1c:	6826      	ldr	r6, [r4, #0]
 800cc1e:	1d18      	adds	r0, r3, #4
 800cc20:	6961      	ldr	r1, [r4, #20]
 800cc22:	6028      	str	r0, [r5, #0]
 800cc24:	0635      	lsls	r5, r6, #24
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	d501      	bpl.n	800cc2e <_printf_i+0x1ce>
 800cc2a:	6019      	str	r1, [r3, #0]
 800cc2c:	e002      	b.n	800cc34 <_printf_i+0x1d4>
 800cc2e:	0670      	lsls	r0, r6, #25
 800cc30:	d5fb      	bpl.n	800cc2a <_printf_i+0x1ca>
 800cc32:	8019      	strh	r1, [r3, #0]
 800cc34:	2300      	movs	r3, #0
 800cc36:	4615      	mov	r5, r2
 800cc38:	6123      	str	r3, [r4, #16]
 800cc3a:	e7ba      	b.n	800cbb2 <_printf_i+0x152>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	2100      	movs	r1, #0
 800cc40:	1d1a      	adds	r2, r3, #4
 800cc42:	602a      	str	r2, [r5, #0]
 800cc44:	681d      	ldr	r5, [r3, #0]
 800cc46:	6862      	ldr	r2, [r4, #4]
 800cc48:	4628      	mov	r0, r5
 800cc4a:	f000 feeb 	bl	800da24 <memchr>
 800cc4e:	b108      	cbz	r0, 800cc54 <_printf_i+0x1f4>
 800cc50:	1b40      	subs	r0, r0, r5
 800cc52:	6060      	str	r0, [r4, #4]
 800cc54:	6863      	ldr	r3, [r4, #4]
 800cc56:	6123      	str	r3, [r4, #16]
 800cc58:	2300      	movs	r3, #0
 800cc5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc5e:	e7a8      	b.n	800cbb2 <_printf_i+0x152>
 800cc60:	462a      	mov	r2, r5
 800cc62:	4649      	mov	r1, r9
 800cc64:	4640      	mov	r0, r8
 800cc66:	6923      	ldr	r3, [r4, #16]
 800cc68:	47d0      	blx	sl
 800cc6a:	3001      	adds	r0, #1
 800cc6c:	d0ab      	beq.n	800cbc6 <_printf_i+0x166>
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	079b      	lsls	r3, r3, #30
 800cc72:	d413      	bmi.n	800cc9c <_printf_i+0x23c>
 800cc74:	68e0      	ldr	r0, [r4, #12]
 800cc76:	9b03      	ldr	r3, [sp, #12]
 800cc78:	4298      	cmp	r0, r3
 800cc7a:	bfb8      	it	lt
 800cc7c:	4618      	movlt	r0, r3
 800cc7e:	e7a4      	b.n	800cbca <_printf_i+0x16a>
 800cc80:	2301      	movs	r3, #1
 800cc82:	4632      	mov	r2, r6
 800cc84:	4649      	mov	r1, r9
 800cc86:	4640      	mov	r0, r8
 800cc88:	47d0      	blx	sl
 800cc8a:	3001      	adds	r0, #1
 800cc8c:	d09b      	beq.n	800cbc6 <_printf_i+0x166>
 800cc8e:	3501      	adds	r5, #1
 800cc90:	68e3      	ldr	r3, [r4, #12]
 800cc92:	9903      	ldr	r1, [sp, #12]
 800cc94:	1a5b      	subs	r3, r3, r1
 800cc96:	42ab      	cmp	r3, r5
 800cc98:	dcf2      	bgt.n	800cc80 <_printf_i+0x220>
 800cc9a:	e7eb      	b.n	800cc74 <_printf_i+0x214>
 800cc9c:	2500      	movs	r5, #0
 800cc9e:	f104 0619 	add.w	r6, r4, #25
 800cca2:	e7f5      	b.n	800cc90 <_printf_i+0x230>
 800cca4:	0800f33e 	.word	0x0800f33e
 800cca8:	0800f34f 	.word	0x0800f34f

0800ccac <sniprintf>:
 800ccac:	b40c      	push	{r2, r3}
 800ccae:	b530      	push	{r4, r5, lr}
 800ccb0:	4b17      	ldr	r3, [pc, #92]	; (800cd10 <sniprintf+0x64>)
 800ccb2:	1e0c      	subs	r4, r1, #0
 800ccb4:	681d      	ldr	r5, [r3, #0]
 800ccb6:	b09d      	sub	sp, #116	; 0x74
 800ccb8:	da08      	bge.n	800cccc <sniprintf+0x20>
 800ccba:	238b      	movs	r3, #139	; 0x8b
 800ccbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc0:	602b      	str	r3, [r5, #0]
 800ccc2:	b01d      	add	sp, #116	; 0x74
 800ccc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccc8:	b002      	add	sp, #8
 800ccca:	4770      	bx	lr
 800cccc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ccd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ccd4:	bf0c      	ite	eq
 800ccd6:	4623      	moveq	r3, r4
 800ccd8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ccdc:	9304      	str	r3, [sp, #16]
 800ccde:	9307      	str	r3, [sp, #28]
 800cce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cce4:	9002      	str	r0, [sp, #8]
 800cce6:	9006      	str	r0, [sp, #24]
 800cce8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ccec:	4628      	mov	r0, r5
 800ccee:	ab21      	add	r3, sp, #132	; 0x84
 800ccf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ccf2:	a902      	add	r1, sp, #8
 800ccf4:	9301      	str	r3, [sp, #4]
 800ccf6:	f001 fb71 	bl	800e3dc <_svfiprintf_r>
 800ccfa:	1c43      	adds	r3, r0, #1
 800ccfc:	bfbc      	itt	lt
 800ccfe:	238b      	movlt	r3, #139	; 0x8b
 800cd00:	602b      	strlt	r3, [r5, #0]
 800cd02:	2c00      	cmp	r4, #0
 800cd04:	d0dd      	beq.n	800ccc2 <sniprintf+0x16>
 800cd06:	2200      	movs	r2, #0
 800cd08:	9b02      	ldr	r3, [sp, #8]
 800cd0a:	701a      	strb	r2, [r3, #0]
 800cd0c:	e7d9      	b.n	800ccc2 <sniprintf+0x16>
 800cd0e:	bf00      	nop
 800cd10:	20000190 	.word	0x20000190

0800cd14 <quorem>:
 800cd14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd18:	6903      	ldr	r3, [r0, #16]
 800cd1a:	690c      	ldr	r4, [r1, #16]
 800cd1c:	4607      	mov	r7, r0
 800cd1e:	42a3      	cmp	r3, r4
 800cd20:	f2c0 8082 	blt.w	800ce28 <quorem+0x114>
 800cd24:	3c01      	subs	r4, #1
 800cd26:	f100 0514 	add.w	r5, r0, #20
 800cd2a:	f101 0814 	add.w	r8, r1, #20
 800cd2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	fbb2 f6f3 	udiv	r6, r2, r3
 800cd44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cd48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd4c:	d331      	bcc.n	800cdb2 <quorem+0x9e>
 800cd4e:	f04f 0e00 	mov.w	lr, #0
 800cd52:	4640      	mov	r0, r8
 800cd54:	46ac      	mov	ip, r5
 800cd56:	46f2      	mov	sl, lr
 800cd58:	f850 2b04 	ldr.w	r2, [r0], #4
 800cd5c:	b293      	uxth	r3, r2
 800cd5e:	fb06 e303 	mla	r3, r6, r3, lr
 800cd62:	0c12      	lsrs	r2, r2, #16
 800cd64:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	fb06 e202 	mla	r2, r6, r2, lr
 800cd6e:	ebaa 0303 	sub.w	r3, sl, r3
 800cd72:	f8dc a000 	ldr.w	sl, [ip]
 800cd76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cd7a:	fa1f fa8a 	uxth.w	sl, sl
 800cd7e:	4453      	add	r3, sl
 800cd80:	f8dc a000 	ldr.w	sl, [ip]
 800cd84:	b292      	uxth	r2, r2
 800cd86:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cd8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd94:	4581      	cmp	r9, r0
 800cd96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cd9a:	f84c 3b04 	str.w	r3, [ip], #4
 800cd9e:	d2db      	bcs.n	800cd58 <quorem+0x44>
 800cda0:	f855 300b 	ldr.w	r3, [r5, fp]
 800cda4:	b92b      	cbnz	r3, 800cdb2 <quorem+0x9e>
 800cda6:	9b01      	ldr	r3, [sp, #4]
 800cda8:	3b04      	subs	r3, #4
 800cdaa:	429d      	cmp	r5, r3
 800cdac:	461a      	mov	r2, r3
 800cdae:	d32f      	bcc.n	800ce10 <quorem+0xfc>
 800cdb0:	613c      	str	r4, [r7, #16]
 800cdb2:	4638      	mov	r0, r7
 800cdb4:	f001 f8c2 	bl	800df3c <__mcmp>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	db25      	blt.n	800ce08 <quorem+0xf4>
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	f04f 0c00 	mov.w	ip, #0
 800cdc2:	3601      	adds	r6, #1
 800cdc4:	f858 1b04 	ldr.w	r1, [r8], #4
 800cdc8:	f8d0 e000 	ldr.w	lr, [r0]
 800cdcc:	b28b      	uxth	r3, r1
 800cdce:	ebac 0303 	sub.w	r3, ip, r3
 800cdd2:	fa1f f28e 	uxth.w	r2, lr
 800cdd6:	4413      	add	r3, r2
 800cdd8:	0c0a      	lsrs	r2, r1, #16
 800cdda:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cdde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cde8:	45c1      	cmp	r9, r8
 800cdea:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cdee:	f840 3b04 	str.w	r3, [r0], #4
 800cdf2:	d2e7      	bcs.n	800cdc4 <quorem+0xb0>
 800cdf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cdf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cdfc:	b922      	cbnz	r2, 800ce08 <quorem+0xf4>
 800cdfe:	3b04      	subs	r3, #4
 800ce00:	429d      	cmp	r5, r3
 800ce02:	461a      	mov	r2, r3
 800ce04:	d30a      	bcc.n	800ce1c <quorem+0x108>
 800ce06:	613c      	str	r4, [r7, #16]
 800ce08:	4630      	mov	r0, r6
 800ce0a:	b003      	add	sp, #12
 800ce0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce10:	6812      	ldr	r2, [r2, #0]
 800ce12:	3b04      	subs	r3, #4
 800ce14:	2a00      	cmp	r2, #0
 800ce16:	d1cb      	bne.n	800cdb0 <quorem+0x9c>
 800ce18:	3c01      	subs	r4, #1
 800ce1a:	e7c6      	b.n	800cdaa <quorem+0x96>
 800ce1c:	6812      	ldr	r2, [r2, #0]
 800ce1e:	3b04      	subs	r3, #4
 800ce20:	2a00      	cmp	r2, #0
 800ce22:	d1f0      	bne.n	800ce06 <quorem+0xf2>
 800ce24:	3c01      	subs	r4, #1
 800ce26:	e7eb      	b.n	800ce00 <quorem+0xec>
 800ce28:	2000      	movs	r0, #0
 800ce2a:	e7ee      	b.n	800ce0a <quorem+0xf6>
 800ce2c:	0000      	movs	r0, r0
	...

0800ce30 <_dtoa_r>:
 800ce30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce34:	4616      	mov	r6, r2
 800ce36:	461f      	mov	r7, r3
 800ce38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ce3a:	b099      	sub	sp, #100	; 0x64
 800ce3c:	4605      	mov	r5, r0
 800ce3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ce42:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ce46:	b974      	cbnz	r4, 800ce66 <_dtoa_r+0x36>
 800ce48:	2010      	movs	r0, #16
 800ce4a:	f000 fde3 	bl	800da14 <malloc>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	6268      	str	r0, [r5, #36]	; 0x24
 800ce52:	b920      	cbnz	r0, 800ce5e <_dtoa_r+0x2e>
 800ce54:	21ea      	movs	r1, #234	; 0xea
 800ce56:	4ba8      	ldr	r3, [pc, #672]	; (800d0f8 <_dtoa_r+0x2c8>)
 800ce58:	48a8      	ldr	r0, [pc, #672]	; (800d0fc <_dtoa_r+0x2cc>)
 800ce5a:	f001 fbcf 	bl	800e5fc <__assert_func>
 800ce5e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce62:	6004      	str	r4, [r0, #0]
 800ce64:	60c4      	str	r4, [r0, #12]
 800ce66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce68:	6819      	ldr	r1, [r3, #0]
 800ce6a:	b151      	cbz	r1, 800ce82 <_dtoa_r+0x52>
 800ce6c:	685a      	ldr	r2, [r3, #4]
 800ce6e:	2301      	movs	r3, #1
 800ce70:	4093      	lsls	r3, r2
 800ce72:	604a      	str	r2, [r1, #4]
 800ce74:	608b      	str	r3, [r1, #8]
 800ce76:	4628      	mov	r0, r5
 800ce78:	f000 fe22 	bl	800dac0 <_Bfree>
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce80:	601a      	str	r2, [r3, #0]
 800ce82:	1e3b      	subs	r3, r7, #0
 800ce84:	bfaf      	iteee	ge
 800ce86:	2300      	movge	r3, #0
 800ce88:	2201      	movlt	r2, #1
 800ce8a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ce8e:	9305      	strlt	r3, [sp, #20]
 800ce90:	bfa8      	it	ge
 800ce92:	f8c8 3000 	strge.w	r3, [r8]
 800ce96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ce9a:	4b99      	ldr	r3, [pc, #612]	; (800d100 <_dtoa_r+0x2d0>)
 800ce9c:	bfb8      	it	lt
 800ce9e:	f8c8 2000 	strlt.w	r2, [r8]
 800cea2:	ea33 0309 	bics.w	r3, r3, r9
 800cea6:	d119      	bne.n	800cedc <_dtoa_r+0xac>
 800cea8:	f242 730f 	movw	r3, #9999	; 0x270f
 800ceac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ceae:	6013      	str	r3, [r2, #0]
 800ceb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ceb4:	4333      	orrs	r3, r6
 800ceb6:	f000 857f 	beq.w	800d9b8 <_dtoa_r+0xb88>
 800ceba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cebc:	b953      	cbnz	r3, 800ced4 <_dtoa_r+0xa4>
 800cebe:	4b91      	ldr	r3, [pc, #580]	; (800d104 <_dtoa_r+0x2d4>)
 800cec0:	e022      	b.n	800cf08 <_dtoa_r+0xd8>
 800cec2:	4b91      	ldr	r3, [pc, #580]	; (800d108 <_dtoa_r+0x2d8>)
 800cec4:	9303      	str	r3, [sp, #12]
 800cec6:	3308      	adds	r3, #8
 800cec8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ceca:	6013      	str	r3, [r2, #0]
 800cecc:	9803      	ldr	r0, [sp, #12]
 800cece:	b019      	add	sp, #100	; 0x64
 800ced0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced4:	4b8b      	ldr	r3, [pc, #556]	; (800d104 <_dtoa_r+0x2d4>)
 800ced6:	9303      	str	r3, [sp, #12]
 800ced8:	3303      	adds	r3, #3
 800ceda:	e7f5      	b.n	800cec8 <_dtoa_r+0x98>
 800cedc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cee0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800cee4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cee8:	2200      	movs	r2, #0
 800ceea:	2300      	movs	r3, #0
 800ceec:	f7f3 fd74 	bl	80009d8 <__aeabi_dcmpeq>
 800cef0:	4680      	mov	r8, r0
 800cef2:	b158      	cbz	r0, 800cf0c <_dtoa_r+0xdc>
 800cef4:	2301      	movs	r3, #1
 800cef6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cef8:	6013      	str	r3, [r2, #0]
 800cefa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f000 8558 	beq.w	800d9b2 <_dtoa_r+0xb82>
 800cf02:	4882      	ldr	r0, [pc, #520]	; (800d10c <_dtoa_r+0x2dc>)
 800cf04:	6018      	str	r0, [r3, #0]
 800cf06:	1e43      	subs	r3, r0, #1
 800cf08:	9303      	str	r3, [sp, #12]
 800cf0a:	e7df      	b.n	800cecc <_dtoa_r+0x9c>
 800cf0c:	ab16      	add	r3, sp, #88	; 0x58
 800cf0e:	9301      	str	r3, [sp, #4]
 800cf10:	ab17      	add	r3, sp, #92	; 0x5c
 800cf12:	9300      	str	r3, [sp, #0]
 800cf14:	4628      	mov	r0, r5
 800cf16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cf1a:	f001 f8b7 	bl	800e08c <__d2b>
 800cf1e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cf22:	4683      	mov	fp, r0
 800cf24:	2c00      	cmp	r4, #0
 800cf26:	d07f      	beq.n	800d028 <_dtoa_r+0x1f8>
 800cf28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf2e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cf32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf36:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800cf3a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cf3e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800cf42:	2200      	movs	r2, #0
 800cf44:	4b72      	ldr	r3, [pc, #456]	; (800d110 <_dtoa_r+0x2e0>)
 800cf46:	f7f3 f927 	bl	8000198 <__aeabi_dsub>
 800cf4a:	a365      	add	r3, pc, #404	; (adr r3, 800d0e0 <_dtoa_r+0x2b0>)
 800cf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf50:	f7f3 fada 	bl	8000508 <__aeabi_dmul>
 800cf54:	a364      	add	r3, pc, #400	; (adr r3, 800d0e8 <_dtoa_r+0x2b8>)
 800cf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5a:	f7f3 f91f 	bl	800019c <__adddf3>
 800cf5e:	4606      	mov	r6, r0
 800cf60:	4620      	mov	r0, r4
 800cf62:	460f      	mov	r7, r1
 800cf64:	f7f3 fa66 	bl	8000434 <__aeabi_i2d>
 800cf68:	a361      	add	r3, pc, #388	; (adr r3, 800d0f0 <_dtoa_r+0x2c0>)
 800cf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6e:	f7f3 facb 	bl	8000508 <__aeabi_dmul>
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	4630      	mov	r0, r6
 800cf78:	4639      	mov	r1, r7
 800cf7a:	f7f3 f90f 	bl	800019c <__adddf3>
 800cf7e:	4606      	mov	r6, r0
 800cf80:	460f      	mov	r7, r1
 800cf82:	f7f3 fd71 	bl	8000a68 <__aeabi_d2iz>
 800cf86:	2200      	movs	r2, #0
 800cf88:	4682      	mov	sl, r0
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	4639      	mov	r1, r7
 800cf90:	f7f3 fd2c 	bl	80009ec <__aeabi_dcmplt>
 800cf94:	b148      	cbz	r0, 800cfaa <_dtoa_r+0x17a>
 800cf96:	4650      	mov	r0, sl
 800cf98:	f7f3 fa4c 	bl	8000434 <__aeabi_i2d>
 800cf9c:	4632      	mov	r2, r6
 800cf9e:	463b      	mov	r3, r7
 800cfa0:	f7f3 fd1a 	bl	80009d8 <__aeabi_dcmpeq>
 800cfa4:	b908      	cbnz	r0, 800cfaa <_dtoa_r+0x17a>
 800cfa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfaa:	f1ba 0f16 	cmp.w	sl, #22
 800cfae:	d858      	bhi.n	800d062 <_dtoa_r+0x232>
 800cfb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cfb4:	4b57      	ldr	r3, [pc, #348]	; (800d114 <_dtoa_r+0x2e4>)
 800cfb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbe:	f7f3 fd15 	bl	80009ec <__aeabi_dcmplt>
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	d04f      	beq.n	800d066 <_dtoa_r+0x236>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfcc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cfd0:	1b1c      	subs	r4, r3, r4
 800cfd2:	1e63      	subs	r3, r4, #1
 800cfd4:	9309      	str	r3, [sp, #36]	; 0x24
 800cfd6:	bf49      	itett	mi
 800cfd8:	f1c4 0301 	rsbmi	r3, r4, #1
 800cfdc:	2300      	movpl	r3, #0
 800cfde:	9306      	strmi	r3, [sp, #24]
 800cfe0:	2300      	movmi	r3, #0
 800cfe2:	bf54      	ite	pl
 800cfe4:	9306      	strpl	r3, [sp, #24]
 800cfe6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800cfe8:	f1ba 0f00 	cmp.w	sl, #0
 800cfec:	db3d      	blt.n	800d06a <_dtoa_r+0x23a>
 800cfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cff4:	4453      	add	r3, sl
 800cff6:	9309      	str	r3, [sp, #36]	; 0x24
 800cff8:	2300      	movs	r3, #0
 800cffa:	930a      	str	r3, [sp, #40]	; 0x28
 800cffc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cffe:	2b09      	cmp	r3, #9
 800d000:	f200 808c 	bhi.w	800d11c <_dtoa_r+0x2ec>
 800d004:	2b05      	cmp	r3, #5
 800d006:	bfc4      	itt	gt
 800d008:	3b04      	subgt	r3, #4
 800d00a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d00c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d00e:	bfc8      	it	gt
 800d010:	2400      	movgt	r4, #0
 800d012:	f1a3 0302 	sub.w	r3, r3, #2
 800d016:	bfd8      	it	le
 800d018:	2401      	movle	r4, #1
 800d01a:	2b03      	cmp	r3, #3
 800d01c:	f200 808a 	bhi.w	800d134 <_dtoa_r+0x304>
 800d020:	e8df f003 	tbb	[pc, r3]
 800d024:	5b4d4f2d 	.word	0x5b4d4f2d
 800d028:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d02c:	441c      	add	r4, r3
 800d02e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d032:	2b20      	cmp	r3, #32
 800d034:	bfc3      	ittte	gt
 800d036:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d03a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800d03e:	fa09 f303 	lslgt.w	r3, r9, r3
 800d042:	f1c3 0320 	rsble	r3, r3, #32
 800d046:	bfc6      	itte	gt
 800d048:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d04c:	4318      	orrgt	r0, r3
 800d04e:	fa06 f003 	lslle.w	r0, r6, r3
 800d052:	f7f3 f9df 	bl	8000414 <__aeabi_ui2d>
 800d056:	2301      	movs	r3, #1
 800d058:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d05c:	3c01      	subs	r4, #1
 800d05e:	9313      	str	r3, [sp, #76]	; 0x4c
 800d060:	e76f      	b.n	800cf42 <_dtoa_r+0x112>
 800d062:	2301      	movs	r3, #1
 800d064:	e7b2      	b.n	800cfcc <_dtoa_r+0x19c>
 800d066:	900f      	str	r0, [sp, #60]	; 0x3c
 800d068:	e7b1      	b.n	800cfce <_dtoa_r+0x19e>
 800d06a:	9b06      	ldr	r3, [sp, #24]
 800d06c:	eba3 030a 	sub.w	r3, r3, sl
 800d070:	9306      	str	r3, [sp, #24]
 800d072:	f1ca 0300 	rsb	r3, sl, #0
 800d076:	930a      	str	r3, [sp, #40]	; 0x28
 800d078:	2300      	movs	r3, #0
 800d07a:	930e      	str	r3, [sp, #56]	; 0x38
 800d07c:	e7be      	b.n	800cffc <_dtoa_r+0x1cc>
 800d07e:	2300      	movs	r3, #0
 800d080:	930b      	str	r3, [sp, #44]	; 0x2c
 800d082:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d084:	2b00      	cmp	r3, #0
 800d086:	dc58      	bgt.n	800d13a <_dtoa_r+0x30a>
 800d088:	f04f 0901 	mov.w	r9, #1
 800d08c:	464b      	mov	r3, r9
 800d08e:	f8cd 9020 	str.w	r9, [sp, #32]
 800d092:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800d096:	2200      	movs	r2, #0
 800d098:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d09a:	6042      	str	r2, [r0, #4]
 800d09c:	2204      	movs	r2, #4
 800d09e:	f102 0614 	add.w	r6, r2, #20
 800d0a2:	429e      	cmp	r6, r3
 800d0a4:	6841      	ldr	r1, [r0, #4]
 800d0a6:	d94e      	bls.n	800d146 <_dtoa_r+0x316>
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	f000 fcc9 	bl	800da40 <_Balloc>
 800d0ae:	9003      	str	r0, [sp, #12]
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	d14c      	bne.n	800d14e <_dtoa_r+0x31e>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d0ba:	4b17      	ldr	r3, [pc, #92]	; (800d118 <_dtoa_r+0x2e8>)
 800d0bc:	e6cc      	b.n	800ce58 <_dtoa_r+0x28>
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e7de      	b.n	800d080 <_dtoa_r+0x250>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d0c8:	eb0a 0903 	add.w	r9, sl, r3
 800d0cc:	f109 0301 	add.w	r3, r9, #1
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	9308      	str	r3, [sp, #32]
 800d0d4:	bfb8      	it	lt
 800d0d6:	2301      	movlt	r3, #1
 800d0d8:	e7dd      	b.n	800d096 <_dtoa_r+0x266>
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e7f2      	b.n	800d0c4 <_dtoa_r+0x294>
 800d0de:	bf00      	nop
 800d0e0:	636f4361 	.word	0x636f4361
 800d0e4:	3fd287a7 	.word	0x3fd287a7
 800d0e8:	8b60c8b3 	.word	0x8b60c8b3
 800d0ec:	3fc68a28 	.word	0x3fc68a28
 800d0f0:	509f79fb 	.word	0x509f79fb
 800d0f4:	3fd34413 	.word	0x3fd34413
 800d0f8:	0800f36d 	.word	0x0800f36d
 800d0fc:	0800f384 	.word	0x0800f384
 800d100:	7ff00000 	.word	0x7ff00000
 800d104:	0800f369 	.word	0x0800f369
 800d108:	0800f360 	.word	0x0800f360
 800d10c:	0800f33d 	.word	0x0800f33d
 800d110:	3ff80000 	.word	0x3ff80000
 800d114:	0800f478 	.word	0x0800f478
 800d118:	0800f3df 	.word	0x0800f3df
 800d11c:	2401      	movs	r4, #1
 800d11e:	2300      	movs	r3, #0
 800d120:	940b      	str	r4, [sp, #44]	; 0x2c
 800d122:	9322      	str	r3, [sp, #136]	; 0x88
 800d124:	f04f 39ff 	mov.w	r9, #4294967295
 800d128:	2200      	movs	r2, #0
 800d12a:	2312      	movs	r3, #18
 800d12c:	f8cd 9020 	str.w	r9, [sp, #32]
 800d130:	9223      	str	r2, [sp, #140]	; 0x8c
 800d132:	e7b0      	b.n	800d096 <_dtoa_r+0x266>
 800d134:	2301      	movs	r3, #1
 800d136:	930b      	str	r3, [sp, #44]	; 0x2c
 800d138:	e7f4      	b.n	800d124 <_dtoa_r+0x2f4>
 800d13a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800d13e:	464b      	mov	r3, r9
 800d140:	f8cd 9020 	str.w	r9, [sp, #32]
 800d144:	e7a7      	b.n	800d096 <_dtoa_r+0x266>
 800d146:	3101      	adds	r1, #1
 800d148:	6041      	str	r1, [r0, #4]
 800d14a:	0052      	lsls	r2, r2, #1
 800d14c:	e7a7      	b.n	800d09e <_dtoa_r+0x26e>
 800d14e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d150:	9a03      	ldr	r2, [sp, #12]
 800d152:	601a      	str	r2, [r3, #0]
 800d154:	9b08      	ldr	r3, [sp, #32]
 800d156:	2b0e      	cmp	r3, #14
 800d158:	f200 80a8 	bhi.w	800d2ac <_dtoa_r+0x47c>
 800d15c:	2c00      	cmp	r4, #0
 800d15e:	f000 80a5 	beq.w	800d2ac <_dtoa_r+0x47c>
 800d162:	f1ba 0f00 	cmp.w	sl, #0
 800d166:	dd34      	ble.n	800d1d2 <_dtoa_r+0x3a2>
 800d168:	4a9a      	ldr	r2, [pc, #616]	; (800d3d4 <_dtoa_r+0x5a4>)
 800d16a:	f00a 030f 	and.w	r3, sl, #15
 800d16e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d172:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d176:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d17a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d17e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800d182:	d016      	beq.n	800d1b2 <_dtoa_r+0x382>
 800d184:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d188:	4b93      	ldr	r3, [pc, #588]	; (800d3d8 <_dtoa_r+0x5a8>)
 800d18a:	2703      	movs	r7, #3
 800d18c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d190:	f7f3 fae4 	bl	800075c <__aeabi_ddiv>
 800d194:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d198:	f004 040f 	and.w	r4, r4, #15
 800d19c:	4e8e      	ldr	r6, [pc, #568]	; (800d3d8 <_dtoa_r+0x5a8>)
 800d19e:	b954      	cbnz	r4, 800d1b6 <_dtoa_r+0x386>
 800d1a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d1a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1a8:	f7f3 fad8 	bl	800075c <__aeabi_ddiv>
 800d1ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1b0:	e029      	b.n	800d206 <_dtoa_r+0x3d6>
 800d1b2:	2702      	movs	r7, #2
 800d1b4:	e7f2      	b.n	800d19c <_dtoa_r+0x36c>
 800d1b6:	07e1      	lsls	r1, r4, #31
 800d1b8:	d508      	bpl.n	800d1cc <_dtoa_r+0x39c>
 800d1ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d1be:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d1c2:	f7f3 f9a1 	bl	8000508 <__aeabi_dmul>
 800d1c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d1ca:	3701      	adds	r7, #1
 800d1cc:	1064      	asrs	r4, r4, #1
 800d1ce:	3608      	adds	r6, #8
 800d1d0:	e7e5      	b.n	800d19e <_dtoa_r+0x36e>
 800d1d2:	f000 80a5 	beq.w	800d320 <_dtoa_r+0x4f0>
 800d1d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d1da:	f1ca 0400 	rsb	r4, sl, #0
 800d1de:	4b7d      	ldr	r3, [pc, #500]	; (800d3d4 <_dtoa_r+0x5a4>)
 800d1e0:	f004 020f 	and.w	r2, r4, #15
 800d1e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	f7f3 f98c 	bl	8000508 <__aeabi_dmul>
 800d1f0:	2702      	movs	r7, #2
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1f8:	4e77      	ldr	r6, [pc, #476]	; (800d3d8 <_dtoa_r+0x5a8>)
 800d1fa:	1124      	asrs	r4, r4, #4
 800d1fc:	2c00      	cmp	r4, #0
 800d1fe:	f040 8084 	bne.w	800d30a <_dtoa_r+0x4da>
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1d2      	bne.n	800d1ac <_dtoa_r+0x37c>
 800d206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d208:	2b00      	cmp	r3, #0
 800d20a:	f000 808b 	beq.w	800d324 <_dtoa_r+0x4f4>
 800d20e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d212:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d216:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d21a:	2200      	movs	r2, #0
 800d21c:	4b6f      	ldr	r3, [pc, #444]	; (800d3dc <_dtoa_r+0x5ac>)
 800d21e:	f7f3 fbe5 	bl	80009ec <__aeabi_dcmplt>
 800d222:	2800      	cmp	r0, #0
 800d224:	d07e      	beq.n	800d324 <_dtoa_r+0x4f4>
 800d226:	9b08      	ldr	r3, [sp, #32]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d07b      	beq.n	800d324 <_dtoa_r+0x4f4>
 800d22c:	f1b9 0f00 	cmp.w	r9, #0
 800d230:	dd38      	ble.n	800d2a4 <_dtoa_r+0x474>
 800d232:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d236:	2200      	movs	r2, #0
 800d238:	4b69      	ldr	r3, [pc, #420]	; (800d3e0 <_dtoa_r+0x5b0>)
 800d23a:	f7f3 f965 	bl	8000508 <__aeabi_dmul>
 800d23e:	464c      	mov	r4, r9
 800d240:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d244:	f10a 38ff 	add.w	r8, sl, #4294967295
 800d248:	3701      	adds	r7, #1
 800d24a:	4638      	mov	r0, r7
 800d24c:	f7f3 f8f2 	bl	8000434 <__aeabi_i2d>
 800d250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d254:	f7f3 f958 	bl	8000508 <__aeabi_dmul>
 800d258:	2200      	movs	r2, #0
 800d25a:	4b62      	ldr	r3, [pc, #392]	; (800d3e4 <_dtoa_r+0x5b4>)
 800d25c:	f7f2 ff9e 	bl	800019c <__adddf3>
 800d260:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d264:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d268:	9611      	str	r6, [sp, #68]	; 0x44
 800d26a:	2c00      	cmp	r4, #0
 800d26c:	d15d      	bne.n	800d32a <_dtoa_r+0x4fa>
 800d26e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d272:	2200      	movs	r2, #0
 800d274:	4b5c      	ldr	r3, [pc, #368]	; (800d3e8 <_dtoa_r+0x5b8>)
 800d276:	f7f2 ff8f 	bl	8000198 <__aeabi_dsub>
 800d27a:	4602      	mov	r2, r0
 800d27c:	460b      	mov	r3, r1
 800d27e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d282:	4633      	mov	r3, r6
 800d284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d286:	f7f3 fbcf 	bl	8000a28 <__aeabi_dcmpgt>
 800d28a:	2800      	cmp	r0, #0
 800d28c:	f040 829c 	bne.w	800d7c8 <_dtoa_r+0x998>
 800d290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d296:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d29a:	f7f3 fba7 	bl	80009ec <__aeabi_dcmplt>
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	f040 8290 	bne.w	800d7c4 <_dtoa_r+0x994>
 800d2a4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800d2a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d2ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	f2c0 8152 	blt.w	800d558 <_dtoa_r+0x728>
 800d2b4:	f1ba 0f0e 	cmp.w	sl, #14
 800d2b8:	f300 814e 	bgt.w	800d558 <_dtoa_r+0x728>
 800d2bc:	4b45      	ldr	r3, [pc, #276]	; (800d3d4 <_dtoa_r+0x5a4>)
 800d2be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d2c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d2c6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d2ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f280 80db 	bge.w	800d488 <_dtoa_r+0x658>
 800d2d2:	9b08      	ldr	r3, [sp, #32]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f300 80d7 	bgt.w	800d488 <_dtoa_r+0x658>
 800d2da:	f040 8272 	bne.w	800d7c2 <_dtoa_r+0x992>
 800d2de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	4b40      	ldr	r3, [pc, #256]	; (800d3e8 <_dtoa_r+0x5b8>)
 800d2e6:	f7f3 f90f 	bl	8000508 <__aeabi_dmul>
 800d2ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2ee:	f7f3 fb91 	bl	8000a14 <__aeabi_dcmpge>
 800d2f2:	9c08      	ldr	r4, [sp, #32]
 800d2f4:	4626      	mov	r6, r4
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	f040 8248 	bne.w	800d78c <_dtoa_r+0x95c>
 800d2fc:	2331      	movs	r3, #49	; 0x31
 800d2fe:	9f03      	ldr	r7, [sp, #12]
 800d300:	f10a 0a01 	add.w	sl, sl, #1
 800d304:	f807 3b01 	strb.w	r3, [r7], #1
 800d308:	e244      	b.n	800d794 <_dtoa_r+0x964>
 800d30a:	07e2      	lsls	r2, r4, #31
 800d30c:	d505      	bpl.n	800d31a <_dtoa_r+0x4ea>
 800d30e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d312:	f7f3 f8f9 	bl	8000508 <__aeabi_dmul>
 800d316:	2301      	movs	r3, #1
 800d318:	3701      	adds	r7, #1
 800d31a:	1064      	asrs	r4, r4, #1
 800d31c:	3608      	adds	r6, #8
 800d31e:	e76d      	b.n	800d1fc <_dtoa_r+0x3cc>
 800d320:	2702      	movs	r7, #2
 800d322:	e770      	b.n	800d206 <_dtoa_r+0x3d6>
 800d324:	46d0      	mov	r8, sl
 800d326:	9c08      	ldr	r4, [sp, #32]
 800d328:	e78f      	b.n	800d24a <_dtoa_r+0x41a>
 800d32a:	9903      	ldr	r1, [sp, #12]
 800d32c:	4b29      	ldr	r3, [pc, #164]	; (800d3d4 <_dtoa_r+0x5a4>)
 800d32e:	4421      	add	r1, r4
 800d330:	9112      	str	r1, [sp, #72]	; 0x48
 800d332:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d334:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d338:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d33c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d340:	2900      	cmp	r1, #0
 800d342:	d055      	beq.n	800d3f0 <_dtoa_r+0x5c0>
 800d344:	2000      	movs	r0, #0
 800d346:	4929      	ldr	r1, [pc, #164]	; (800d3ec <_dtoa_r+0x5bc>)
 800d348:	f7f3 fa08 	bl	800075c <__aeabi_ddiv>
 800d34c:	463b      	mov	r3, r7
 800d34e:	4632      	mov	r2, r6
 800d350:	f7f2 ff22 	bl	8000198 <__aeabi_dsub>
 800d354:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d358:	9f03      	ldr	r7, [sp, #12]
 800d35a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d35e:	f7f3 fb83 	bl	8000a68 <__aeabi_d2iz>
 800d362:	4604      	mov	r4, r0
 800d364:	f7f3 f866 	bl	8000434 <__aeabi_i2d>
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d370:	f7f2 ff12 	bl	8000198 <__aeabi_dsub>
 800d374:	4602      	mov	r2, r0
 800d376:	460b      	mov	r3, r1
 800d378:	3430      	adds	r4, #48	; 0x30
 800d37a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d37e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d382:	f807 4b01 	strb.w	r4, [r7], #1
 800d386:	f7f3 fb31 	bl	80009ec <__aeabi_dcmplt>
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d174      	bne.n	800d478 <_dtoa_r+0x648>
 800d38e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d392:	2000      	movs	r0, #0
 800d394:	4911      	ldr	r1, [pc, #68]	; (800d3dc <_dtoa_r+0x5ac>)
 800d396:	f7f2 feff 	bl	8000198 <__aeabi_dsub>
 800d39a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d39e:	f7f3 fb25 	bl	80009ec <__aeabi_dcmplt>
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	f040 80b7 	bne.w	800d516 <_dtoa_r+0x6e6>
 800d3a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3aa:	429f      	cmp	r7, r3
 800d3ac:	f43f af7a 	beq.w	800d2a4 <_dtoa_r+0x474>
 800d3b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	4b0a      	ldr	r3, [pc, #40]	; (800d3e0 <_dtoa_r+0x5b0>)
 800d3b8:	f7f3 f8a6 	bl	8000508 <__aeabi_dmul>
 800d3bc:	2200      	movs	r2, #0
 800d3be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d3c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3c6:	4b06      	ldr	r3, [pc, #24]	; (800d3e0 <_dtoa_r+0x5b0>)
 800d3c8:	f7f3 f89e 	bl	8000508 <__aeabi_dmul>
 800d3cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3d0:	e7c3      	b.n	800d35a <_dtoa_r+0x52a>
 800d3d2:	bf00      	nop
 800d3d4:	0800f478 	.word	0x0800f478
 800d3d8:	0800f450 	.word	0x0800f450
 800d3dc:	3ff00000 	.word	0x3ff00000
 800d3e0:	40240000 	.word	0x40240000
 800d3e4:	401c0000 	.word	0x401c0000
 800d3e8:	40140000 	.word	0x40140000
 800d3ec:	3fe00000 	.word	0x3fe00000
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	4639      	mov	r1, r7
 800d3f4:	f7f3 f888 	bl	8000508 <__aeabi_dmul>
 800d3f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d3fe:	9c03      	ldr	r4, [sp, #12]
 800d400:	9314      	str	r3, [sp, #80]	; 0x50
 800d402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d406:	f7f3 fb2f 	bl	8000a68 <__aeabi_d2iz>
 800d40a:	9015      	str	r0, [sp, #84]	; 0x54
 800d40c:	f7f3 f812 	bl	8000434 <__aeabi_i2d>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d418:	f7f2 febe 	bl	8000198 <__aeabi_dsub>
 800d41c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d41e:	4606      	mov	r6, r0
 800d420:	3330      	adds	r3, #48	; 0x30
 800d422:	f804 3b01 	strb.w	r3, [r4], #1
 800d426:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d428:	460f      	mov	r7, r1
 800d42a:	429c      	cmp	r4, r3
 800d42c:	f04f 0200 	mov.w	r2, #0
 800d430:	d124      	bne.n	800d47c <_dtoa_r+0x64c>
 800d432:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d436:	4bb0      	ldr	r3, [pc, #704]	; (800d6f8 <_dtoa_r+0x8c8>)
 800d438:	f7f2 feb0 	bl	800019c <__adddf3>
 800d43c:	4602      	mov	r2, r0
 800d43e:	460b      	mov	r3, r1
 800d440:	4630      	mov	r0, r6
 800d442:	4639      	mov	r1, r7
 800d444:	f7f3 faf0 	bl	8000a28 <__aeabi_dcmpgt>
 800d448:	2800      	cmp	r0, #0
 800d44a:	d163      	bne.n	800d514 <_dtoa_r+0x6e4>
 800d44c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d450:	2000      	movs	r0, #0
 800d452:	49a9      	ldr	r1, [pc, #676]	; (800d6f8 <_dtoa_r+0x8c8>)
 800d454:	f7f2 fea0 	bl	8000198 <__aeabi_dsub>
 800d458:	4602      	mov	r2, r0
 800d45a:	460b      	mov	r3, r1
 800d45c:	4630      	mov	r0, r6
 800d45e:	4639      	mov	r1, r7
 800d460:	f7f3 fac4 	bl	80009ec <__aeabi_dcmplt>
 800d464:	2800      	cmp	r0, #0
 800d466:	f43f af1d 	beq.w	800d2a4 <_dtoa_r+0x474>
 800d46a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d46c:	1e7b      	subs	r3, r7, #1
 800d46e:	9314      	str	r3, [sp, #80]	; 0x50
 800d470:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d474:	2b30      	cmp	r3, #48	; 0x30
 800d476:	d0f8      	beq.n	800d46a <_dtoa_r+0x63a>
 800d478:	46c2      	mov	sl, r8
 800d47a:	e03b      	b.n	800d4f4 <_dtoa_r+0x6c4>
 800d47c:	4b9f      	ldr	r3, [pc, #636]	; (800d6fc <_dtoa_r+0x8cc>)
 800d47e:	f7f3 f843 	bl	8000508 <__aeabi_dmul>
 800d482:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d486:	e7bc      	b.n	800d402 <_dtoa_r+0x5d2>
 800d488:	9f03      	ldr	r7, [sp, #12]
 800d48a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d48e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d492:	4640      	mov	r0, r8
 800d494:	4649      	mov	r1, r9
 800d496:	f7f3 f961 	bl	800075c <__aeabi_ddiv>
 800d49a:	f7f3 fae5 	bl	8000a68 <__aeabi_d2iz>
 800d49e:	4604      	mov	r4, r0
 800d4a0:	f7f2 ffc8 	bl	8000434 <__aeabi_i2d>
 800d4a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4a8:	f7f3 f82e 	bl	8000508 <__aeabi_dmul>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	4640      	mov	r0, r8
 800d4b2:	4649      	mov	r1, r9
 800d4b4:	f7f2 fe70 	bl	8000198 <__aeabi_dsub>
 800d4b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d4bc:	f807 6b01 	strb.w	r6, [r7], #1
 800d4c0:	9e03      	ldr	r6, [sp, #12]
 800d4c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d4c6:	1bbe      	subs	r6, r7, r6
 800d4c8:	45b4      	cmp	ip, r6
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	d136      	bne.n	800d53e <_dtoa_r+0x70e>
 800d4d0:	f7f2 fe64 	bl	800019c <__adddf3>
 800d4d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4d8:	4680      	mov	r8, r0
 800d4da:	4689      	mov	r9, r1
 800d4dc:	f7f3 faa4 	bl	8000a28 <__aeabi_dcmpgt>
 800d4e0:	bb58      	cbnz	r0, 800d53a <_dtoa_r+0x70a>
 800d4e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4e6:	4640      	mov	r0, r8
 800d4e8:	4649      	mov	r1, r9
 800d4ea:	f7f3 fa75 	bl	80009d8 <__aeabi_dcmpeq>
 800d4ee:	b108      	cbz	r0, 800d4f4 <_dtoa_r+0x6c4>
 800d4f0:	07e1      	lsls	r1, r4, #31
 800d4f2:	d422      	bmi.n	800d53a <_dtoa_r+0x70a>
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	4659      	mov	r1, fp
 800d4f8:	f000 fae2 	bl	800dac0 <_Bfree>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	703b      	strb	r3, [r7, #0]
 800d500:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d502:	f10a 0001 	add.w	r0, sl, #1
 800d506:	6018      	str	r0, [r3, #0]
 800d508:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f43f acde 	beq.w	800cecc <_dtoa_r+0x9c>
 800d510:	601f      	str	r7, [r3, #0]
 800d512:	e4db      	b.n	800cecc <_dtoa_r+0x9c>
 800d514:	4627      	mov	r7, r4
 800d516:	463b      	mov	r3, r7
 800d518:	461f      	mov	r7, r3
 800d51a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d51e:	2a39      	cmp	r2, #57	; 0x39
 800d520:	d107      	bne.n	800d532 <_dtoa_r+0x702>
 800d522:	9a03      	ldr	r2, [sp, #12]
 800d524:	429a      	cmp	r2, r3
 800d526:	d1f7      	bne.n	800d518 <_dtoa_r+0x6e8>
 800d528:	2230      	movs	r2, #48	; 0x30
 800d52a:	9903      	ldr	r1, [sp, #12]
 800d52c:	f108 0801 	add.w	r8, r8, #1
 800d530:	700a      	strb	r2, [r1, #0]
 800d532:	781a      	ldrb	r2, [r3, #0]
 800d534:	3201      	adds	r2, #1
 800d536:	701a      	strb	r2, [r3, #0]
 800d538:	e79e      	b.n	800d478 <_dtoa_r+0x648>
 800d53a:	46d0      	mov	r8, sl
 800d53c:	e7eb      	b.n	800d516 <_dtoa_r+0x6e6>
 800d53e:	2200      	movs	r2, #0
 800d540:	4b6e      	ldr	r3, [pc, #440]	; (800d6fc <_dtoa_r+0x8cc>)
 800d542:	f7f2 ffe1 	bl	8000508 <__aeabi_dmul>
 800d546:	2200      	movs	r2, #0
 800d548:	2300      	movs	r3, #0
 800d54a:	4680      	mov	r8, r0
 800d54c:	4689      	mov	r9, r1
 800d54e:	f7f3 fa43 	bl	80009d8 <__aeabi_dcmpeq>
 800d552:	2800      	cmp	r0, #0
 800d554:	d09b      	beq.n	800d48e <_dtoa_r+0x65e>
 800d556:	e7cd      	b.n	800d4f4 <_dtoa_r+0x6c4>
 800d558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d55a:	2a00      	cmp	r2, #0
 800d55c:	f000 80d0 	beq.w	800d700 <_dtoa_r+0x8d0>
 800d560:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d562:	2a01      	cmp	r2, #1
 800d564:	f300 80ae 	bgt.w	800d6c4 <_dtoa_r+0x894>
 800d568:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d56a:	2a00      	cmp	r2, #0
 800d56c:	f000 80a6 	beq.w	800d6bc <_dtoa_r+0x88c>
 800d570:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d574:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d576:	9f06      	ldr	r7, [sp, #24]
 800d578:	9a06      	ldr	r2, [sp, #24]
 800d57a:	2101      	movs	r1, #1
 800d57c:	441a      	add	r2, r3
 800d57e:	9206      	str	r2, [sp, #24]
 800d580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d582:	4628      	mov	r0, r5
 800d584:	441a      	add	r2, r3
 800d586:	9209      	str	r2, [sp, #36]	; 0x24
 800d588:	f000 fb50 	bl	800dc2c <__i2b>
 800d58c:	4606      	mov	r6, r0
 800d58e:	2f00      	cmp	r7, #0
 800d590:	dd0c      	ble.n	800d5ac <_dtoa_r+0x77c>
 800d592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d594:	2b00      	cmp	r3, #0
 800d596:	dd09      	ble.n	800d5ac <_dtoa_r+0x77c>
 800d598:	42bb      	cmp	r3, r7
 800d59a:	bfa8      	it	ge
 800d59c:	463b      	movge	r3, r7
 800d59e:	9a06      	ldr	r2, [sp, #24]
 800d5a0:	1aff      	subs	r7, r7, r3
 800d5a2:	1ad2      	subs	r2, r2, r3
 800d5a4:	9206      	str	r2, [sp, #24]
 800d5a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5a8:	1ad3      	subs	r3, r2, r3
 800d5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d5ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5ae:	b1f3      	cbz	r3, 800d5ee <_dtoa_r+0x7be>
 800d5b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	f000 80a8 	beq.w	800d708 <_dtoa_r+0x8d8>
 800d5b8:	2c00      	cmp	r4, #0
 800d5ba:	dd10      	ble.n	800d5de <_dtoa_r+0x7ae>
 800d5bc:	4631      	mov	r1, r6
 800d5be:	4622      	mov	r2, r4
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	f000 fbf1 	bl	800dda8 <__pow5mult>
 800d5c6:	465a      	mov	r2, fp
 800d5c8:	4601      	mov	r1, r0
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	f000 fb43 	bl	800dc58 <__multiply>
 800d5d2:	4680      	mov	r8, r0
 800d5d4:	4659      	mov	r1, fp
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f000 fa72 	bl	800dac0 <_Bfree>
 800d5dc:	46c3      	mov	fp, r8
 800d5de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5e0:	1b1a      	subs	r2, r3, r4
 800d5e2:	d004      	beq.n	800d5ee <_dtoa_r+0x7be>
 800d5e4:	4659      	mov	r1, fp
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	f000 fbde 	bl	800dda8 <__pow5mult>
 800d5ec:	4683      	mov	fp, r0
 800d5ee:	2101      	movs	r1, #1
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	f000 fb1b 	bl	800dc2c <__i2b>
 800d5f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	f340 8086 	ble.w	800d70c <_dtoa_r+0x8dc>
 800d600:	461a      	mov	r2, r3
 800d602:	4601      	mov	r1, r0
 800d604:	4628      	mov	r0, r5
 800d606:	f000 fbcf 	bl	800dda8 <__pow5mult>
 800d60a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d60c:	4604      	mov	r4, r0
 800d60e:	2b01      	cmp	r3, #1
 800d610:	dd7f      	ble.n	800d712 <_dtoa_r+0x8e2>
 800d612:	f04f 0800 	mov.w	r8, #0
 800d616:	6923      	ldr	r3, [r4, #16]
 800d618:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d61c:	6918      	ldr	r0, [r3, #16]
 800d61e:	f000 fab7 	bl	800db90 <__hi0bits>
 800d622:	f1c0 0020 	rsb	r0, r0, #32
 800d626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d628:	4418      	add	r0, r3
 800d62a:	f010 001f 	ands.w	r0, r0, #31
 800d62e:	f000 8092 	beq.w	800d756 <_dtoa_r+0x926>
 800d632:	f1c0 0320 	rsb	r3, r0, #32
 800d636:	2b04      	cmp	r3, #4
 800d638:	f340 808a 	ble.w	800d750 <_dtoa_r+0x920>
 800d63c:	f1c0 001c 	rsb	r0, r0, #28
 800d640:	9b06      	ldr	r3, [sp, #24]
 800d642:	4407      	add	r7, r0
 800d644:	4403      	add	r3, r0
 800d646:	9306      	str	r3, [sp, #24]
 800d648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d64a:	4403      	add	r3, r0
 800d64c:	9309      	str	r3, [sp, #36]	; 0x24
 800d64e:	9b06      	ldr	r3, [sp, #24]
 800d650:	2b00      	cmp	r3, #0
 800d652:	dd05      	ble.n	800d660 <_dtoa_r+0x830>
 800d654:	4659      	mov	r1, fp
 800d656:	461a      	mov	r2, r3
 800d658:	4628      	mov	r0, r5
 800d65a:	f000 fbff 	bl	800de5c <__lshift>
 800d65e:	4683      	mov	fp, r0
 800d660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d662:	2b00      	cmp	r3, #0
 800d664:	dd05      	ble.n	800d672 <_dtoa_r+0x842>
 800d666:	4621      	mov	r1, r4
 800d668:	461a      	mov	r2, r3
 800d66a:	4628      	mov	r0, r5
 800d66c:	f000 fbf6 	bl	800de5c <__lshift>
 800d670:	4604      	mov	r4, r0
 800d672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d674:	2b00      	cmp	r3, #0
 800d676:	d070      	beq.n	800d75a <_dtoa_r+0x92a>
 800d678:	4621      	mov	r1, r4
 800d67a:	4658      	mov	r0, fp
 800d67c:	f000 fc5e 	bl	800df3c <__mcmp>
 800d680:	2800      	cmp	r0, #0
 800d682:	da6a      	bge.n	800d75a <_dtoa_r+0x92a>
 800d684:	2300      	movs	r3, #0
 800d686:	4659      	mov	r1, fp
 800d688:	220a      	movs	r2, #10
 800d68a:	4628      	mov	r0, r5
 800d68c:	f000 fa3a 	bl	800db04 <__multadd>
 800d690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d692:	4683      	mov	fp, r0
 800d694:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f000 8194 	beq.w	800d9c6 <_dtoa_r+0xb96>
 800d69e:	4631      	mov	r1, r6
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	220a      	movs	r2, #10
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	f000 fa2d 	bl	800db04 <__multadd>
 800d6aa:	f1b9 0f00 	cmp.w	r9, #0
 800d6ae:	4606      	mov	r6, r0
 800d6b0:	f300 8093 	bgt.w	800d7da <_dtoa_r+0x9aa>
 800d6b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d6b6:	2b02      	cmp	r3, #2
 800d6b8:	dc57      	bgt.n	800d76a <_dtoa_r+0x93a>
 800d6ba:	e08e      	b.n	800d7da <_dtoa_r+0x9aa>
 800d6bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d6be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d6c2:	e757      	b.n	800d574 <_dtoa_r+0x744>
 800d6c4:	9b08      	ldr	r3, [sp, #32]
 800d6c6:	1e5c      	subs	r4, r3, #1
 800d6c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ca:	42a3      	cmp	r3, r4
 800d6cc:	bfb7      	itett	lt
 800d6ce:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d6d0:	1b1c      	subge	r4, r3, r4
 800d6d2:	1ae2      	sublt	r2, r4, r3
 800d6d4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d6d6:	bfbe      	ittt	lt
 800d6d8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d6da:	189b      	addlt	r3, r3, r2
 800d6dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d6de:	9b08      	ldr	r3, [sp, #32]
 800d6e0:	bfb8      	it	lt
 800d6e2:	2400      	movlt	r4, #0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	bfbb      	ittet	lt
 800d6e8:	9b06      	ldrlt	r3, [sp, #24]
 800d6ea:	9a08      	ldrlt	r2, [sp, #32]
 800d6ec:	9f06      	ldrge	r7, [sp, #24]
 800d6ee:	1a9f      	sublt	r7, r3, r2
 800d6f0:	bfac      	ite	ge
 800d6f2:	9b08      	ldrge	r3, [sp, #32]
 800d6f4:	2300      	movlt	r3, #0
 800d6f6:	e73f      	b.n	800d578 <_dtoa_r+0x748>
 800d6f8:	3fe00000 	.word	0x3fe00000
 800d6fc:	40240000 	.word	0x40240000
 800d700:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d702:	9f06      	ldr	r7, [sp, #24]
 800d704:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d706:	e742      	b.n	800d58e <_dtoa_r+0x75e>
 800d708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d70a:	e76b      	b.n	800d5e4 <_dtoa_r+0x7b4>
 800d70c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d70e:	2b01      	cmp	r3, #1
 800d710:	dc19      	bgt.n	800d746 <_dtoa_r+0x916>
 800d712:	9b04      	ldr	r3, [sp, #16]
 800d714:	b9bb      	cbnz	r3, 800d746 <_dtoa_r+0x916>
 800d716:	9b05      	ldr	r3, [sp, #20]
 800d718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d71c:	b99b      	cbnz	r3, 800d746 <_dtoa_r+0x916>
 800d71e:	9b05      	ldr	r3, [sp, #20]
 800d720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d724:	0d1b      	lsrs	r3, r3, #20
 800d726:	051b      	lsls	r3, r3, #20
 800d728:	b183      	cbz	r3, 800d74c <_dtoa_r+0x91c>
 800d72a:	f04f 0801 	mov.w	r8, #1
 800d72e:	9b06      	ldr	r3, [sp, #24]
 800d730:	3301      	adds	r3, #1
 800d732:	9306      	str	r3, [sp, #24]
 800d734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d736:	3301      	adds	r3, #1
 800d738:	9309      	str	r3, [sp, #36]	; 0x24
 800d73a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f47f af6a 	bne.w	800d616 <_dtoa_r+0x7e6>
 800d742:	2001      	movs	r0, #1
 800d744:	e76f      	b.n	800d626 <_dtoa_r+0x7f6>
 800d746:	f04f 0800 	mov.w	r8, #0
 800d74a:	e7f6      	b.n	800d73a <_dtoa_r+0x90a>
 800d74c:	4698      	mov	r8, r3
 800d74e:	e7f4      	b.n	800d73a <_dtoa_r+0x90a>
 800d750:	f43f af7d 	beq.w	800d64e <_dtoa_r+0x81e>
 800d754:	4618      	mov	r0, r3
 800d756:	301c      	adds	r0, #28
 800d758:	e772      	b.n	800d640 <_dtoa_r+0x810>
 800d75a:	9b08      	ldr	r3, [sp, #32]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	dc36      	bgt.n	800d7ce <_dtoa_r+0x99e>
 800d760:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d762:	2b02      	cmp	r3, #2
 800d764:	dd33      	ble.n	800d7ce <_dtoa_r+0x99e>
 800d766:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d76a:	f1b9 0f00 	cmp.w	r9, #0
 800d76e:	d10d      	bne.n	800d78c <_dtoa_r+0x95c>
 800d770:	4621      	mov	r1, r4
 800d772:	464b      	mov	r3, r9
 800d774:	2205      	movs	r2, #5
 800d776:	4628      	mov	r0, r5
 800d778:	f000 f9c4 	bl	800db04 <__multadd>
 800d77c:	4601      	mov	r1, r0
 800d77e:	4604      	mov	r4, r0
 800d780:	4658      	mov	r0, fp
 800d782:	f000 fbdb 	bl	800df3c <__mcmp>
 800d786:	2800      	cmp	r0, #0
 800d788:	f73f adb8 	bgt.w	800d2fc <_dtoa_r+0x4cc>
 800d78c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d78e:	9f03      	ldr	r7, [sp, #12]
 800d790:	ea6f 0a03 	mvn.w	sl, r3
 800d794:	f04f 0800 	mov.w	r8, #0
 800d798:	4621      	mov	r1, r4
 800d79a:	4628      	mov	r0, r5
 800d79c:	f000 f990 	bl	800dac0 <_Bfree>
 800d7a0:	2e00      	cmp	r6, #0
 800d7a2:	f43f aea7 	beq.w	800d4f4 <_dtoa_r+0x6c4>
 800d7a6:	f1b8 0f00 	cmp.w	r8, #0
 800d7aa:	d005      	beq.n	800d7b8 <_dtoa_r+0x988>
 800d7ac:	45b0      	cmp	r8, r6
 800d7ae:	d003      	beq.n	800d7b8 <_dtoa_r+0x988>
 800d7b0:	4641      	mov	r1, r8
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	f000 f984 	bl	800dac0 <_Bfree>
 800d7b8:	4631      	mov	r1, r6
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	f000 f980 	bl	800dac0 <_Bfree>
 800d7c0:	e698      	b.n	800d4f4 <_dtoa_r+0x6c4>
 800d7c2:	2400      	movs	r4, #0
 800d7c4:	4626      	mov	r6, r4
 800d7c6:	e7e1      	b.n	800d78c <_dtoa_r+0x95c>
 800d7c8:	46c2      	mov	sl, r8
 800d7ca:	4626      	mov	r6, r4
 800d7cc:	e596      	b.n	800d2fc <_dtoa_r+0x4cc>
 800d7ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f000 80fd 	beq.w	800d9d4 <_dtoa_r+0xba4>
 800d7da:	2f00      	cmp	r7, #0
 800d7dc:	dd05      	ble.n	800d7ea <_dtoa_r+0x9ba>
 800d7de:	4631      	mov	r1, r6
 800d7e0:	463a      	mov	r2, r7
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	f000 fb3a 	bl	800de5c <__lshift>
 800d7e8:	4606      	mov	r6, r0
 800d7ea:	f1b8 0f00 	cmp.w	r8, #0
 800d7ee:	d05c      	beq.n	800d8aa <_dtoa_r+0xa7a>
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	6871      	ldr	r1, [r6, #4]
 800d7f4:	f000 f924 	bl	800da40 <_Balloc>
 800d7f8:	4607      	mov	r7, r0
 800d7fa:	b928      	cbnz	r0, 800d808 <_dtoa_r+0x9d8>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d802:	4b7f      	ldr	r3, [pc, #508]	; (800da00 <_dtoa_r+0xbd0>)
 800d804:	f7ff bb28 	b.w	800ce58 <_dtoa_r+0x28>
 800d808:	6932      	ldr	r2, [r6, #16]
 800d80a:	f106 010c 	add.w	r1, r6, #12
 800d80e:	3202      	adds	r2, #2
 800d810:	0092      	lsls	r2, r2, #2
 800d812:	300c      	adds	r0, #12
 800d814:	f7fe fdd4 	bl	800c3c0 <memcpy>
 800d818:	2201      	movs	r2, #1
 800d81a:	4639      	mov	r1, r7
 800d81c:	4628      	mov	r0, r5
 800d81e:	f000 fb1d 	bl	800de5c <__lshift>
 800d822:	46b0      	mov	r8, r6
 800d824:	4606      	mov	r6, r0
 800d826:	9b03      	ldr	r3, [sp, #12]
 800d828:	3301      	adds	r3, #1
 800d82a:	9308      	str	r3, [sp, #32]
 800d82c:	9b03      	ldr	r3, [sp, #12]
 800d82e:	444b      	add	r3, r9
 800d830:	930a      	str	r3, [sp, #40]	; 0x28
 800d832:	9b04      	ldr	r3, [sp, #16]
 800d834:	f003 0301 	and.w	r3, r3, #1
 800d838:	9309      	str	r3, [sp, #36]	; 0x24
 800d83a:	9b08      	ldr	r3, [sp, #32]
 800d83c:	4621      	mov	r1, r4
 800d83e:	3b01      	subs	r3, #1
 800d840:	4658      	mov	r0, fp
 800d842:	9304      	str	r3, [sp, #16]
 800d844:	f7ff fa66 	bl	800cd14 <quorem>
 800d848:	4603      	mov	r3, r0
 800d84a:	4641      	mov	r1, r8
 800d84c:	3330      	adds	r3, #48	; 0x30
 800d84e:	9006      	str	r0, [sp, #24]
 800d850:	4658      	mov	r0, fp
 800d852:	930b      	str	r3, [sp, #44]	; 0x2c
 800d854:	f000 fb72 	bl	800df3c <__mcmp>
 800d858:	4632      	mov	r2, r6
 800d85a:	4681      	mov	r9, r0
 800d85c:	4621      	mov	r1, r4
 800d85e:	4628      	mov	r0, r5
 800d860:	f000 fb88 	bl	800df74 <__mdiff>
 800d864:	68c2      	ldr	r2, [r0, #12]
 800d866:	4607      	mov	r7, r0
 800d868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d86a:	bb02      	cbnz	r2, 800d8ae <_dtoa_r+0xa7e>
 800d86c:	4601      	mov	r1, r0
 800d86e:	4658      	mov	r0, fp
 800d870:	f000 fb64 	bl	800df3c <__mcmp>
 800d874:	4602      	mov	r2, r0
 800d876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d878:	4639      	mov	r1, r7
 800d87a:	4628      	mov	r0, r5
 800d87c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d880:	f000 f91e 	bl	800dac0 <_Bfree>
 800d884:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d888:	9f08      	ldr	r7, [sp, #32]
 800d88a:	ea43 0102 	orr.w	r1, r3, r2
 800d88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d890:	430b      	orrs	r3, r1
 800d892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d894:	d10d      	bne.n	800d8b2 <_dtoa_r+0xa82>
 800d896:	2b39      	cmp	r3, #57	; 0x39
 800d898:	d029      	beq.n	800d8ee <_dtoa_r+0xabe>
 800d89a:	f1b9 0f00 	cmp.w	r9, #0
 800d89e:	dd01      	ble.n	800d8a4 <_dtoa_r+0xa74>
 800d8a0:	9b06      	ldr	r3, [sp, #24]
 800d8a2:	3331      	adds	r3, #49	; 0x31
 800d8a4:	9a04      	ldr	r2, [sp, #16]
 800d8a6:	7013      	strb	r3, [r2, #0]
 800d8a8:	e776      	b.n	800d798 <_dtoa_r+0x968>
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	e7b9      	b.n	800d822 <_dtoa_r+0x9f2>
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	e7e2      	b.n	800d878 <_dtoa_r+0xa48>
 800d8b2:	f1b9 0f00 	cmp.w	r9, #0
 800d8b6:	db06      	blt.n	800d8c6 <_dtoa_r+0xa96>
 800d8b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d8ba:	ea41 0909 	orr.w	r9, r1, r9
 800d8be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8c0:	ea59 0101 	orrs.w	r1, r9, r1
 800d8c4:	d120      	bne.n	800d908 <_dtoa_r+0xad8>
 800d8c6:	2a00      	cmp	r2, #0
 800d8c8:	ddec      	ble.n	800d8a4 <_dtoa_r+0xa74>
 800d8ca:	4659      	mov	r1, fp
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	9308      	str	r3, [sp, #32]
 800d8d2:	f000 fac3 	bl	800de5c <__lshift>
 800d8d6:	4621      	mov	r1, r4
 800d8d8:	4683      	mov	fp, r0
 800d8da:	f000 fb2f 	bl	800df3c <__mcmp>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	9b08      	ldr	r3, [sp, #32]
 800d8e2:	dc02      	bgt.n	800d8ea <_dtoa_r+0xaba>
 800d8e4:	d1de      	bne.n	800d8a4 <_dtoa_r+0xa74>
 800d8e6:	07da      	lsls	r2, r3, #31
 800d8e8:	d5dc      	bpl.n	800d8a4 <_dtoa_r+0xa74>
 800d8ea:	2b39      	cmp	r3, #57	; 0x39
 800d8ec:	d1d8      	bne.n	800d8a0 <_dtoa_r+0xa70>
 800d8ee:	2339      	movs	r3, #57	; 0x39
 800d8f0:	9a04      	ldr	r2, [sp, #16]
 800d8f2:	7013      	strb	r3, [r2, #0]
 800d8f4:	463b      	mov	r3, r7
 800d8f6:	461f      	mov	r7, r3
 800d8f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d8fc:	3b01      	subs	r3, #1
 800d8fe:	2a39      	cmp	r2, #57	; 0x39
 800d900:	d050      	beq.n	800d9a4 <_dtoa_r+0xb74>
 800d902:	3201      	adds	r2, #1
 800d904:	701a      	strb	r2, [r3, #0]
 800d906:	e747      	b.n	800d798 <_dtoa_r+0x968>
 800d908:	2a00      	cmp	r2, #0
 800d90a:	dd03      	ble.n	800d914 <_dtoa_r+0xae4>
 800d90c:	2b39      	cmp	r3, #57	; 0x39
 800d90e:	d0ee      	beq.n	800d8ee <_dtoa_r+0xabe>
 800d910:	3301      	adds	r3, #1
 800d912:	e7c7      	b.n	800d8a4 <_dtoa_r+0xa74>
 800d914:	9a08      	ldr	r2, [sp, #32]
 800d916:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d918:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d91c:	428a      	cmp	r2, r1
 800d91e:	d02a      	beq.n	800d976 <_dtoa_r+0xb46>
 800d920:	4659      	mov	r1, fp
 800d922:	2300      	movs	r3, #0
 800d924:	220a      	movs	r2, #10
 800d926:	4628      	mov	r0, r5
 800d928:	f000 f8ec 	bl	800db04 <__multadd>
 800d92c:	45b0      	cmp	r8, r6
 800d92e:	4683      	mov	fp, r0
 800d930:	f04f 0300 	mov.w	r3, #0
 800d934:	f04f 020a 	mov.w	r2, #10
 800d938:	4641      	mov	r1, r8
 800d93a:	4628      	mov	r0, r5
 800d93c:	d107      	bne.n	800d94e <_dtoa_r+0xb1e>
 800d93e:	f000 f8e1 	bl	800db04 <__multadd>
 800d942:	4680      	mov	r8, r0
 800d944:	4606      	mov	r6, r0
 800d946:	9b08      	ldr	r3, [sp, #32]
 800d948:	3301      	adds	r3, #1
 800d94a:	9308      	str	r3, [sp, #32]
 800d94c:	e775      	b.n	800d83a <_dtoa_r+0xa0a>
 800d94e:	f000 f8d9 	bl	800db04 <__multadd>
 800d952:	4631      	mov	r1, r6
 800d954:	4680      	mov	r8, r0
 800d956:	2300      	movs	r3, #0
 800d958:	220a      	movs	r2, #10
 800d95a:	4628      	mov	r0, r5
 800d95c:	f000 f8d2 	bl	800db04 <__multadd>
 800d960:	4606      	mov	r6, r0
 800d962:	e7f0      	b.n	800d946 <_dtoa_r+0xb16>
 800d964:	f1b9 0f00 	cmp.w	r9, #0
 800d968:	bfcc      	ite	gt
 800d96a:	464f      	movgt	r7, r9
 800d96c:	2701      	movle	r7, #1
 800d96e:	f04f 0800 	mov.w	r8, #0
 800d972:	9a03      	ldr	r2, [sp, #12]
 800d974:	4417      	add	r7, r2
 800d976:	4659      	mov	r1, fp
 800d978:	2201      	movs	r2, #1
 800d97a:	4628      	mov	r0, r5
 800d97c:	9308      	str	r3, [sp, #32]
 800d97e:	f000 fa6d 	bl	800de5c <__lshift>
 800d982:	4621      	mov	r1, r4
 800d984:	4683      	mov	fp, r0
 800d986:	f000 fad9 	bl	800df3c <__mcmp>
 800d98a:	2800      	cmp	r0, #0
 800d98c:	dcb2      	bgt.n	800d8f4 <_dtoa_r+0xac4>
 800d98e:	d102      	bne.n	800d996 <_dtoa_r+0xb66>
 800d990:	9b08      	ldr	r3, [sp, #32]
 800d992:	07db      	lsls	r3, r3, #31
 800d994:	d4ae      	bmi.n	800d8f4 <_dtoa_r+0xac4>
 800d996:	463b      	mov	r3, r7
 800d998:	461f      	mov	r7, r3
 800d99a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d99e:	2a30      	cmp	r2, #48	; 0x30
 800d9a0:	d0fa      	beq.n	800d998 <_dtoa_r+0xb68>
 800d9a2:	e6f9      	b.n	800d798 <_dtoa_r+0x968>
 800d9a4:	9a03      	ldr	r2, [sp, #12]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d1a5      	bne.n	800d8f6 <_dtoa_r+0xac6>
 800d9aa:	2331      	movs	r3, #49	; 0x31
 800d9ac:	f10a 0a01 	add.w	sl, sl, #1
 800d9b0:	e779      	b.n	800d8a6 <_dtoa_r+0xa76>
 800d9b2:	4b14      	ldr	r3, [pc, #80]	; (800da04 <_dtoa_r+0xbd4>)
 800d9b4:	f7ff baa8 	b.w	800cf08 <_dtoa_r+0xd8>
 800d9b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f47f aa81 	bne.w	800cec2 <_dtoa_r+0x92>
 800d9c0:	4b11      	ldr	r3, [pc, #68]	; (800da08 <_dtoa_r+0xbd8>)
 800d9c2:	f7ff baa1 	b.w	800cf08 <_dtoa_r+0xd8>
 800d9c6:	f1b9 0f00 	cmp.w	r9, #0
 800d9ca:	dc03      	bgt.n	800d9d4 <_dtoa_r+0xba4>
 800d9cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	f73f aecb 	bgt.w	800d76a <_dtoa_r+0x93a>
 800d9d4:	9f03      	ldr	r7, [sp, #12]
 800d9d6:	4621      	mov	r1, r4
 800d9d8:	4658      	mov	r0, fp
 800d9da:	f7ff f99b 	bl	800cd14 <quorem>
 800d9de:	9a03      	ldr	r2, [sp, #12]
 800d9e0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d9e4:	f807 3b01 	strb.w	r3, [r7], #1
 800d9e8:	1aba      	subs	r2, r7, r2
 800d9ea:	4591      	cmp	r9, r2
 800d9ec:	ddba      	ble.n	800d964 <_dtoa_r+0xb34>
 800d9ee:	4659      	mov	r1, fp
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	220a      	movs	r2, #10
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	f000 f885 	bl	800db04 <__multadd>
 800d9fa:	4683      	mov	fp, r0
 800d9fc:	e7eb      	b.n	800d9d6 <_dtoa_r+0xba6>
 800d9fe:	bf00      	nop
 800da00:	0800f3df 	.word	0x0800f3df
 800da04:	0800f33c 	.word	0x0800f33c
 800da08:	0800f360 	.word	0x0800f360

0800da0c <_localeconv_r>:
 800da0c:	4800      	ldr	r0, [pc, #0]	; (800da10 <_localeconv_r+0x4>)
 800da0e:	4770      	bx	lr
 800da10:	200002e4 	.word	0x200002e4

0800da14 <malloc>:
 800da14:	4b02      	ldr	r3, [pc, #8]	; (800da20 <malloc+0xc>)
 800da16:	4601      	mov	r1, r0
 800da18:	6818      	ldr	r0, [r3, #0]
 800da1a:	f000 bc0f 	b.w	800e23c <_malloc_r>
 800da1e:	bf00      	nop
 800da20:	20000190 	.word	0x20000190

0800da24 <memchr>:
 800da24:	4603      	mov	r3, r0
 800da26:	b510      	push	{r4, lr}
 800da28:	b2c9      	uxtb	r1, r1
 800da2a:	4402      	add	r2, r0
 800da2c:	4293      	cmp	r3, r2
 800da2e:	4618      	mov	r0, r3
 800da30:	d101      	bne.n	800da36 <memchr+0x12>
 800da32:	2000      	movs	r0, #0
 800da34:	e003      	b.n	800da3e <memchr+0x1a>
 800da36:	7804      	ldrb	r4, [r0, #0]
 800da38:	3301      	adds	r3, #1
 800da3a:	428c      	cmp	r4, r1
 800da3c:	d1f6      	bne.n	800da2c <memchr+0x8>
 800da3e:	bd10      	pop	{r4, pc}

0800da40 <_Balloc>:
 800da40:	b570      	push	{r4, r5, r6, lr}
 800da42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da44:	4604      	mov	r4, r0
 800da46:	460d      	mov	r5, r1
 800da48:	b976      	cbnz	r6, 800da68 <_Balloc+0x28>
 800da4a:	2010      	movs	r0, #16
 800da4c:	f7ff ffe2 	bl	800da14 <malloc>
 800da50:	4602      	mov	r2, r0
 800da52:	6260      	str	r0, [r4, #36]	; 0x24
 800da54:	b920      	cbnz	r0, 800da60 <_Balloc+0x20>
 800da56:	2166      	movs	r1, #102	; 0x66
 800da58:	4b17      	ldr	r3, [pc, #92]	; (800dab8 <_Balloc+0x78>)
 800da5a:	4818      	ldr	r0, [pc, #96]	; (800dabc <_Balloc+0x7c>)
 800da5c:	f000 fdce 	bl	800e5fc <__assert_func>
 800da60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da64:	6006      	str	r6, [r0, #0]
 800da66:	60c6      	str	r6, [r0, #12]
 800da68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800da6a:	68f3      	ldr	r3, [r6, #12]
 800da6c:	b183      	cbz	r3, 800da90 <_Balloc+0x50>
 800da6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da70:	68db      	ldr	r3, [r3, #12]
 800da72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da76:	b9b8      	cbnz	r0, 800daa8 <_Balloc+0x68>
 800da78:	2101      	movs	r1, #1
 800da7a:	fa01 f605 	lsl.w	r6, r1, r5
 800da7e:	1d72      	adds	r2, r6, #5
 800da80:	4620      	mov	r0, r4
 800da82:	0092      	lsls	r2, r2, #2
 800da84:	f000 fb5e 	bl	800e144 <_calloc_r>
 800da88:	b160      	cbz	r0, 800daa4 <_Balloc+0x64>
 800da8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da8e:	e00e      	b.n	800daae <_Balloc+0x6e>
 800da90:	2221      	movs	r2, #33	; 0x21
 800da92:	2104      	movs	r1, #4
 800da94:	4620      	mov	r0, r4
 800da96:	f000 fb55 	bl	800e144 <_calloc_r>
 800da9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da9c:	60f0      	str	r0, [r6, #12]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1e4      	bne.n	800da6e <_Balloc+0x2e>
 800daa4:	2000      	movs	r0, #0
 800daa6:	bd70      	pop	{r4, r5, r6, pc}
 800daa8:	6802      	ldr	r2, [r0, #0]
 800daaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800daae:	2300      	movs	r3, #0
 800dab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dab4:	e7f7      	b.n	800daa6 <_Balloc+0x66>
 800dab6:	bf00      	nop
 800dab8:	0800f36d 	.word	0x0800f36d
 800dabc:	0800f3f0 	.word	0x0800f3f0

0800dac0 <_Bfree>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dac4:	4605      	mov	r5, r0
 800dac6:	460c      	mov	r4, r1
 800dac8:	b976      	cbnz	r6, 800dae8 <_Bfree+0x28>
 800daca:	2010      	movs	r0, #16
 800dacc:	f7ff ffa2 	bl	800da14 <malloc>
 800dad0:	4602      	mov	r2, r0
 800dad2:	6268      	str	r0, [r5, #36]	; 0x24
 800dad4:	b920      	cbnz	r0, 800dae0 <_Bfree+0x20>
 800dad6:	218a      	movs	r1, #138	; 0x8a
 800dad8:	4b08      	ldr	r3, [pc, #32]	; (800dafc <_Bfree+0x3c>)
 800dada:	4809      	ldr	r0, [pc, #36]	; (800db00 <_Bfree+0x40>)
 800dadc:	f000 fd8e 	bl	800e5fc <__assert_func>
 800dae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dae4:	6006      	str	r6, [r0, #0]
 800dae6:	60c6      	str	r6, [r0, #12]
 800dae8:	b13c      	cbz	r4, 800dafa <_Bfree+0x3a>
 800daea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800daec:	6862      	ldr	r2, [r4, #4]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800daf4:	6021      	str	r1, [r4, #0]
 800daf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dafa:	bd70      	pop	{r4, r5, r6, pc}
 800dafc:	0800f36d 	.word	0x0800f36d
 800db00:	0800f3f0 	.word	0x0800f3f0

0800db04 <__multadd>:
 800db04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db08:	4607      	mov	r7, r0
 800db0a:	460c      	mov	r4, r1
 800db0c:	461e      	mov	r6, r3
 800db0e:	2000      	movs	r0, #0
 800db10:	690d      	ldr	r5, [r1, #16]
 800db12:	f101 0c14 	add.w	ip, r1, #20
 800db16:	f8dc 3000 	ldr.w	r3, [ip]
 800db1a:	3001      	adds	r0, #1
 800db1c:	b299      	uxth	r1, r3
 800db1e:	fb02 6101 	mla	r1, r2, r1, r6
 800db22:	0c1e      	lsrs	r6, r3, #16
 800db24:	0c0b      	lsrs	r3, r1, #16
 800db26:	fb02 3306 	mla	r3, r2, r6, r3
 800db2a:	b289      	uxth	r1, r1
 800db2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db30:	4285      	cmp	r5, r0
 800db32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db36:	f84c 1b04 	str.w	r1, [ip], #4
 800db3a:	dcec      	bgt.n	800db16 <__multadd+0x12>
 800db3c:	b30e      	cbz	r6, 800db82 <__multadd+0x7e>
 800db3e:	68a3      	ldr	r3, [r4, #8]
 800db40:	42ab      	cmp	r3, r5
 800db42:	dc19      	bgt.n	800db78 <__multadd+0x74>
 800db44:	6861      	ldr	r1, [r4, #4]
 800db46:	4638      	mov	r0, r7
 800db48:	3101      	adds	r1, #1
 800db4a:	f7ff ff79 	bl	800da40 <_Balloc>
 800db4e:	4680      	mov	r8, r0
 800db50:	b928      	cbnz	r0, 800db5e <__multadd+0x5a>
 800db52:	4602      	mov	r2, r0
 800db54:	21b5      	movs	r1, #181	; 0xb5
 800db56:	4b0c      	ldr	r3, [pc, #48]	; (800db88 <__multadd+0x84>)
 800db58:	480c      	ldr	r0, [pc, #48]	; (800db8c <__multadd+0x88>)
 800db5a:	f000 fd4f 	bl	800e5fc <__assert_func>
 800db5e:	6922      	ldr	r2, [r4, #16]
 800db60:	f104 010c 	add.w	r1, r4, #12
 800db64:	3202      	adds	r2, #2
 800db66:	0092      	lsls	r2, r2, #2
 800db68:	300c      	adds	r0, #12
 800db6a:	f7fe fc29 	bl	800c3c0 <memcpy>
 800db6e:	4621      	mov	r1, r4
 800db70:	4638      	mov	r0, r7
 800db72:	f7ff ffa5 	bl	800dac0 <_Bfree>
 800db76:	4644      	mov	r4, r8
 800db78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db7c:	3501      	adds	r5, #1
 800db7e:	615e      	str	r6, [r3, #20]
 800db80:	6125      	str	r5, [r4, #16]
 800db82:	4620      	mov	r0, r4
 800db84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db88:	0800f3df 	.word	0x0800f3df
 800db8c:	0800f3f0 	.word	0x0800f3f0

0800db90 <__hi0bits>:
 800db90:	0c02      	lsrs	r2, r0, #16
 800db92:	0412      	lsls	r2, r2, #16
 800db94:	4603      	mov	r3, r0
 800db96:	b9ca      	cbnz	r2, 800dbcc <__hi0bits+0x3c>
 800db98:	0403      	lsls	r3, r0, #16
 800db9a:	2010      	movs	r0, #16
 800db9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dba0:	bf04      	itt	eq
 800dba2:	021b      	lsleq	r3, r3, #8
 800dba4:	3008      	addeq	r0, #8
 800dba6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dbaa:	bf04      	itt	eq
 800dbac:	011b      	lsleq	r3, r3, #4
 800dbae:	3004      	addeq	r0, #4
 800dbb0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dbb4:	bf04      	itt	eq
 800dbb6:	009b      	lsleq	r3, r3, #2
 800dbb8:	3002      	addeq	r0, #2
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	db05      	blt.n	800dbca <__hi0bits+0x3a>
 800dbbe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800dbc2:	f100 0001 	add.w	r0, r0, #1
 800dbc6:	bf08      	it	eq
 800dbc8:	2020      	moveq	r0, #32
 800dbca:	4770      	bx	lr
 800dbcc:	2000      	movs	r0, #0
 800dbce:	e7e5      	b.n	800db9c <__hi0bits+0xc>

0800dbd0 <__lo0bits>:
 800dbd0:	6803      	ldr	r3, [r0, #0]
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	f013 0007 	ands.w	r0, r3, #7
 800dbd8:	d00b      	beq.n	800dbf2 <__lo0bits+0x22>
 800dbda:	07d9      	lsls	r1, r3, #31
 800dbdc:	d421      	bmi.n	800dc22 <__lo0bits+0x52>
 800dbde:	0798      	lsls	r0, r3, #30
 800dbe0:	bf49      	itett	mi
 800dbe2:	085b      	lsrmi	r3, r3, #1
 800dbe4:	089b      	lsrpl	r3, r3, #2
 800dbe6:	2001      	movmi	r0, #1
 800dbe8:	6013      	strmi	r3, [r2, #0]
 800dbea:	bf5c      	itt	pl
 800dbec:	2002      	movpl	r0, #2
 800dbee:	6013      	strpl	r3, [r2, #0]
 800dbf0:	4770      	bx	lr
 800dbf2:	b299      	uxth	r1, r3
 800dbf4:	b909      	cbnz	r1, 800dbfa <__lo0bits+0x2a>
 800dbf6:	2010      	movs	r0, #16
 800dbf8:	0c1b      	lsrs	r3, r3, #16
 800dbfa:	b2d9      	uxtb	r1, r3
 800dbfc:	b909      	cbnz	r1, 800dc02 <__lo0bits+0x32>
 800dbfe:	3008      	adds	r0, #8
 800dc00:	0a1b      	lsrs	r3, r3, #8
 800dc02:	0719      	lsls	r1, r3, #28
 800dc04:	bf04      	itt	eq
 800dc06:	091b      	lsreq	r3, r3, #4
 800dc08:	3004      	addeq	r0, #4
 800dc0a:	0799      	lsls	r1, r3, #30
 800dc0c:	bf04      	itt	eq
 800dc0e:	089b      	lsreq	r3, r3, #2
 800dc10:	3002      	addeq	r0, #2
 800dc12:	07d9      	lsls	r1, r3, #31
 800dc14:	d403      	bmi.n	800dc1e <__lo0bits+0x4e>
 800dc16:	085b      	lsrs	r3, r3, #1
 800dc18:	f100 0001 	add.w	r0, r0, #1
 800dc1c:	d003      	beq.n	800dc26 <__lo0bits+0x56>
 800dc1e:	6013      	str	r3, [r2, #0]
 800dc20:	4770      	bx	lr
 800dc22:	2000      	movs	r0, #0
 800dc24:	4770      	bx	lr
 800dc26:	2020      	movs	r0, #32
 800dc28:	4770      	bx	lr
	...

0800dc2c <__i2b>:
 800dc2c:	b510      	push	{r4, lr}
 800dc2e:	460c      	mov	r4, r1
 800dc30:	2101      	movs	r1, #1
 800dc32:	f7ff ff05 	bl	800da40 <_Balloc>
 800dc36:	4602      	mov	r2, r0
 800dc38:	b928      	cbnz	r0, 800dc46 <__i2b+0x1a>
 800dc3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dc3e:	4b04      	ldr	r3, [pc, #16]	; (800dc50 <__i2b+0x24>)
 800dc40:	4804      	ldr	r0, [pc, #16]	; (800dc54 <__i2b+0x28>)
 800dc42:	f000 fcdb 	bl	800e5fc <__assert_func>
 800dc46:	2301      	movs	r3, #1
 800dc48:	6144      	str	r4, [r0, #20]
 800dc4a:	6103      	str	r3, [r0, #16]
 800dc4c:	bd10      	pop	{r4, pc}
 800dc4e:	bf00      	nop
 800dc50:	0800f3df 	.word	0x0800f3df
 800dc54:	0800f3f0 	.word	0x0800f3f0

0800dc58 <__multiply>:
 800dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5c:	4691      	mov	r9, r2
 800dc5e:	690a      	ldr	r2, [r1, #16]
 800dc60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc64:	460c      	mov	r4, r1
 800dc66:	429a      	cmp	r2, r3
 800dc68:	bfbe      	ittt	lt
 800dc6a:	460b      	movlt	r3, r1
 800dc6c:	464c      	movlt	r4, r9
 800dc6e:	4699      	movlt	r9, r3
 800dc70:	6927      	ldr	r7, [r4, #16]
 800dc72:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc76:	68a3      	ldr	r3, [r4, #8]
 800dc78:	6861      	ldr	r1, [r4, #4]
 800dc7a:	eb07 060a 	add.w	r6, r7, sl
 800dc7e:	42b3      	cmp	r3, r6
 800dc80:	b085      	sub	sp, #20
 800dc82:	bfb8      	it	lt
 800dc84:	3101      	addlt	r1, #1
 800dc86:	f7ff fedb 	bl	800da40 <_Balloc>
 800dc8a:	b930      	cbnz	r0, 800dc9a <__multiply+0x42>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	f240 115d 	movw	r1, #349	; 0x15d
 800dc92:	4b43      	ldr	r3, [pc, #268]	; (800dda0 <__multiply+0x148>)
 800dc94:	4843      	ldr	r0, [pc, #268]	; (800dda4 <__multiply+0x14c>)
 800dc96:	f000 fcb1 	bl	800e5fc <__assert_func>
 800dc9a:	f100 0514 	add.w	r5, r0, #20
 800dc9e:	462b      	mov	r3, r5
 800dca0:	2200      	movs	r2, #0
 800dca2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dca6:	4543      	cmp	r3, r8
 800dca8:	d321      	bcc.n	800dcee <__multiply+0x96>
 800dcaa:	f104 0314 	add.w	r3, r4, #20
 800dcae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcb2:	f109 0314 	add.w	r3, r9, #20
 800dcb6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dcba:	9202      	str	r2, [sp, #8]
 800dcbc:	1b3a      	subs	r2, r7, r4
 800dcbe:	3a15      	subs	r2, #21
 800dcc0:	f022 0203 	bic.w	r2, r2, #3
 800dcc4:	3204      	adds	r2, #4
 800dcc6:	f104 0115 	add.w	r1, r4, #21
 800dcca:	428f      	cmp	r7, r1
 800dccc:	bf38      	it	cc
 800dcce:	2204      	movcc	r2, #4
 800dcd0:	9201      	str	r2, [sp, #4]
 800dcd2:	9a02      	ldr	r2, [sp, #8]
 800dcd4:	9303      	str	r3, [sp, #12]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d80c      	bhi.n	800dcf4 <__multiply+0x9c>
 800dcda:	2e00      	cmp	r6, #0
 800dcdc:	dd03      	ble.n	800dce6 <__multiply+0x8e>
 800dcde:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d059      	beq.n	800dd9a <__multiply+0x142>
 800dce6:	6106      	str	r6, [r0, #16]
 800dce8:	b005      	add	sp, #20
 800dcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcee:	f843 2b04 	str.w	r2, [r3], #4
 800dcf2:	e7d8      	b.n	800dca6 <__multiply+0x4e>
 800dcf4:	f8b3 a000 	ldrh.w	sl, [r3]
 800dcf8:	f1ba 0f00 	cmp.w	sl, #0
 800dcfc:	d023      	beq.n	800dd46 <__multiply+0xee>
 800dcfe:	46a9      	mov	r9, r5
 800dd00:	f04f 0c00 	mov.w	ip, #0
 800dd04:	f104 0e14 	add.w	lr, r4, #20
 800dd08:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dd0c:	f8d9 1000 	ldr.w	r1, [r9]
 800dd10:	fa1f fb82 	uxth.w	fp, r2
 800dd14:	b289      	uxth	r1, r1
 800dd16:	fb0a 110b 	mla	r1, sl, fp, r1
 800dd1a:	4461      	add	r1, ip
 800dd1c:	f8d9 c000 	ldr.w	ip, [r9]
 800dd20:	0c12      	lsrs	r2, r2, #16
 800dd22:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800dd26:	fb0a c202 	mla	r2, sl, r2, ip
 800dd2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dd2e:	b289      	uxth	r1, r1
 800dd30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd34:	4577      	cmp	r7, lr
 800dd36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd3a:	f849 1b04 	str.w	r1, [r9], #4
 800dd3e:	d8e3      	bhi.n	800dd08 <__multiply+0xb0>
 800dd40:	9a01      	ldr	r2, [sp, #4]
 800dd42:	f845 c002 	str.w	ip, [r5, r2]
 800dd46:	9a03      	ldr	r2, [sp, #12]
 800dd48:	3304      	adds	r3, #4
 800dd4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd4e:	f1b9 0f00 	cmp.w	r9, #0
 800dd52:	d020      	beq.n	800dd96 <__multiply+0x13e>
 800dd54:	46ae      	mov	lr, r5
 800dd56:	f04f 0a00 	mov.w	sl, #0
 800dd5a:	6829      	ldr	r1, [r5, #0]
 800dd5c:	f104 0c14 	add.w	ip, r4, #20
 800dd60:	f8bc b000 	ldrh.w	fp, [ip]
 800dd64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd68:	b289      	uxth	r1, r1
 800dd6a:	fb09 220b 	mla	r2, r9, fp, r2
 800dd6e:	4492      	add	sl, r2
 800dd70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dd74:	f84e 1b04 	str.w	r1, [lr], #4
 800dd78:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dd7c:	f8be 1000 	ldrh.w	r1, [lr]
 800dd80:	0c12      	lsrs	r2, r2, #16
 800dd82:	fb09 1102 	mla	r1, r9, r2, r1
 800dd86:	4567      	cmp	r7, ip
 800dd88:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dd8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd90:	d8e6      	bhi.n	800dd60 <__multiply+0x108>
 800dd92:	9a01      	ldr	r2, [sp, #4]
 800dd94:	50a9      	str	r1, [r5, r2]
 800dd96:	3504      	adds	r5, #4
 800dd98:	e79b      	b.n	800dcd2 <__multiply+0x7a>
 800dd9a:	3e01      	subs	r6, #1
 800dd9c:	e79d      	b.n	800dcda <__multiply+0x82>
 800dd9e:	bf00      	nop
 800dda0:	0800f3df 	.word	0x0800f3df
 800dda4:	0800f3f0 	.word	0x0800f3f0

0800dda8 <__pow5mult>:
 800dda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddac:	4615      	mov	r5, r2
 800ddae:	f012 0203 	ands.w	r2, r2, #3
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	460f      	mov	r7, r1
 800ddb6:	d007      	beq.n	800ddc8 <__pow5mult+0x20>
 800ddb8:	4c25      	ldr	r4, [pc, #148]	; (800de50 <__pow5mult+0xa8>)
 800ddba:	3a01      	subs	r2, #1
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddc2:	f7ff fe9f 	bl	800db04 <__multadd>
 800ddc6:	4607      	mov	r7, r0
 800ddc8:	10ad      	asrs	r5, r5, #2
 800ddca:	d03d      	beq.n	800de48 <__pow5mult+0xa0>
 800ddcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ddce:	b97c      	cbnz	r4, 800ddf0 <__pow5mult+0x48>
 800ddd0:	2010      	movs	r0, #16
 800ddd2:	f7ff fe1f 	bl	800da14 <malloc>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	6270      	str	r0, [r6, #36]	; 0x24
 800ddda:	b928      	cbnz	r0, 800dde8 <__pow5mult+0x40>
 800dddc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dde0:	4b1c      	ldr	r3, [pc, #112]	; (800de54 <__pow5mult+0xac>)
 800dde2:	481d      	ldr	r0, [pc, #116]	; (800de58 <__pow5mult+0xb0>)
 800dde4:	f000 fc0a 	bl	800e5fc <__assert_func>
 800dde8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddec:	6004      	str	r4, [r0, #0]
 800ddee:	60c4      	str	r4, [r0, #12]
 800ddf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ddf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddf8:	b94c      	cbnz	r4, 800de0e <__pow5mult+0x66>
 800ddfa:	f240 2171 	movw	r1, #625	; 0x271
 800ddfe:	4630      	mov	r0, r6
 800de00:	f7ff ff14 	bl	800dc2c <__i2b>
 800de04:	2300      	movs	r3, #0
 800de06:	4604      	mov	r4, r0
 800de08:	f8c8 0008 	str.w	r0, [r8, #8]
 800de0c:	6003      	str	r3, [r0, #0]
 800de0e:	f04f 0900 	mov.w	r9, #0
 800de12:	07eb      	lsls	r3, r5, #31
 800de14:	d50a      	bpl.n	800de2c <__pow5mult+0x84>
 800de16:	4639      	mov	r1, r7
 800de18:	4622      	mov	r2, r4
 800de1a:	4630      	mov	r0, r6
 800de1c:	f7ff ff1c 	bl	800dc58 <__multiply>
 800de20:	4680      	mov	r8, r0
 800de22:	4639      	mov	r1, r7
 800de24:	4630      	mov	r0, r6
 800de26:	f7ff fe4b 	bl	800dac0 <_Bfree>
 800de2a:	4647      	mov	r7, r8
 800de2c:	106d      	asrs	r5, r5, #1
 800de2e:	d00b      	beq.n	800de48 <__pow5mult+0xa0>
 800de30:	6820      	ldr	r0, [r4, #0]
 800de32:	b938      	cbnz	r0, 800de44 <__pow5mult+0x9c>
 800de34:	4622      	mov	r2, r4
 800de36:	4621      	mov	r1, r4
 800de38:	4630      	mov	r0, r6
 800de3a:	f7ff ff0d 	bl	800dc58 <__multiply>
 800de3e:	6020      	str	r0, [r4, #0]
 800de40:	f8c0 9000 	str.w	r9, [r0]
 800de44:	4604      	mov	r4, r0
 800de46:	e7e4      	b.n	800de12 <__pow5mult+0x6a>
 800de48:	4638      	mov	r0, r7
 800de4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de4e:	bf00      	nop
 800de50:	0800f540 	.word	0x0800f540
 800de54:	0800f36d 	.word	0x0800f36d
 800de58:	0800f3f0 	.word	0x0800f3f0

0800de5c <__lshift>:
 800de5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de60:	460c      	mov	r4, r1
 800de62:	4607      	mov	r7, r0
 800de64:	4691      	mov	r9, r2
 800de66:	6923      	ldr	r3, [r4, #16]
 800de68:	6849      	ldr	r1, [r1, #4]
 800de6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de6e:	68a3      	ldr	r3, [r4, #8]
 800de70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de74:	f108 0601 	add.w	r6, r8, #1
 800de78:	42b3      	cmp	r3, r6
 800de7a:	db0b      	blt.n	800de94 <__lshift+0x38>
 800de7c:	4638      	mov	r0, r7
 800de7e:	f7ff fddf 	bl	800da40 <_Balloc>
 800de82:	4605      	mov	r5, r0
 800de84:	b948      	cbnz	r0, 800de9a <__lshift+0x3e>
 800de86:	4602      	mov	r2, r0
 800de88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800de8c:	4b29      	ldr	r3, [pc, #164]	; (800df34 <__lshift+0xd8>)
 800de8e:	482a      	ldr	r0, [pc, #168]	; (800df38 <__lshift+0xdc>)
 800de90:	f000 fbb4 	bl	800e5fc <__assert_func>
 800de94:	3101      	adds	r1, #1
 800de96:	005b      	lsls	r3, r3, #1
 800de98:	e7ee      	b.n	800de78 <__lshift+0x1c>
 800de9a:	2300      	movs	r3, #0
 800de9c:	f100 0114 	add.w	r1, r0, #20
 800dea0:	f100 0210 	add.w	r2, r0, #16
 800dea4:	4618      	mov	r0, r3
 800dea6:	4553      	cmp	r3, sl
 800dea8:	db37      	blt.n	800df1a <__lshift+0xbe>
 800deaa:	6920      	ldr	r0, [r4, #16]
 800deac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800deb0:	f104 0314 	add.w	r3, r4, #20
 800deb4:	f019 091f 	ands.w	r9, r9, #31
 800deb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800debc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dec0:	d02f      	beq.n	800df22 <__lshift+0xc6>
 800dec2:	468a      	mov	sl, r1
 800dec4:	f04f 0c00 	mov.w	ip, #0
 800dec8:	f1c9 0e20 	rsb	lr, r9, #32
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	fa02 f209 	lsl.w	r2, r2, r9
 800ded2:	ea42 020c 	orr.w	r2, r2, ip
 800ded6:	f84a 2b04 	str.w	r2, [sl], #4
 800deda:	f853 2b04 	ldr.w	r2, [r3], #4
 800dede:	4298      	cmp	r0, r3
 800dee0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dee4:	d8f2      	bhi.n	800decc <__lshift+0x70>
 800dee6:	1b03      	subs	r3, r0, r4
 800dee8:	3b15      	subs	r3, #21
 800deea:	f023 0303 	bic.w	r3, r3, #3
 800deee:	3304      	adds	r3, #4
 800def0:	f104 0215 	add.w	r2, r4, #21
 800def4:	4290      	cmp	r0, r2
 800def6:	bf38      	it	cc
 800def8:	2304      	movcc	r3, #4
 800defa:	f841 c003 	str.w	ip, [r1, r3]
 800defe:	f1bc 0f00 	cmp.w	ip, #0
 800df02:	d001      	beq.n	800df08 <__lshift+0xac>
 800df04:	f108 0602 	add.w	r6, r8, #2
 800df08:	3e01      	subs	r6, #1
 800df0a:	4638      	mov	r0, r7
 800df0c:	4621      	mov	r1, r4
 800df0e:	612e      	str	r6, [r5, #16]
 800df10:	f7ff fdd6 	bl	800dac0 <_Bfree>
 800df14:	4628      	mov	r0, r5
 800df16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800df1e:	3301      	adds	r3, #1
 800df20:	e7c1      	b.n	800dea6 <__lshift+0x4a>
 800df22:	3904      	subs	r1, #4
 800df24:	f853 2b04 	ldr.w	r2, [r3], #4
 800df28:	4298      	cmp	r0, r3
 800df2a:	f841 2f04 	str.w	r2, [r1, #4]!
 800df2e:	d8f9      	bhi.n	800df24 <__lshift+0xc8>
 800df30:	e7ea      	b.n	800df08 <__lshift+0xac>
 800df32:	bf00      	nop
 800df34:	0800f3df 	.word	0x0800f3df
 800df38:	0800f3f0 	.word	0x0800f3f0

0800df3c <__mcmp>:
 800df3c:	4603      	mov	r3, r0
 800df3e:	690a      	ldr	r2, [r1, #16]
 800df40:	6900      	ldr	r0, [r0, #16]
 800df42:	b530      	push	{r4, r5, lr}
 800df44:	1a80      	subs	r0, r0, r2
 800df46:	d10d      	bne.n	800df64 <__mcmp+0x28>
 800df48:	3314      	adds	r3, #20
 800df4a:	3114      	adds	r1, #20
 800df4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800df50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800df54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df5c:	4295      	cmp	r5, r2
 800df5e:	d002      	beq.n	800df66 <__mcmp+0x2a>
 800df60:	d304      	bcc.n	800df6c <__mcmp+0x30>
 800df62:	2001      	movs	r0, #1
 800df64:	bd30      	pop	{r4, r5, pc}
 800df66:	42a3      	cmp	r3, r4
 800df68:	d3f4      	bcc.n	800df54 <__mcmp+0x18>
 800df6a:	e7fb      	b.n	800df64 <__mcmp+0x28>
 800df6c:	f04f 30ff 	mov.w	r0, #4294967295
 800df70:	e7f8      	b.n	800df64 <__mcmp+0x28>
	...

0800df74 <__mdiff>:
 800df74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df78:	460d      	mov	r5, r1
 800df7a:	4607      	mov	r7, r0
 800df7c:	4611      	mov	r1, r2
 800df7e:	4628      	mov	r0, r5
 800df80:	4614      	mov	r4, r2
 800df82:	f7ff ffdb 	bl	800df3c <__mcmp>
 800df86:	1e06      	subs	r6, r0, #0
 800df88:	d111      	bne.n	800dfae <__mdiff+0x3a>
 800df8a:	4631      	mov	r1, r6
 800df8c:	4638      	mov	r0, r7
 800df8e:	f7ff fd57 	bl	800da40 <_Balloc>
 800df92:	4602      	mov	r2, r0
 800df94:	b928      	cbnz	r0, 800dfa2 <__mdiff+0x2e>
 800df96:	f240 2132 	movw	r1, #562	; 0x232
 800df9a:	4b3a      	ldr	r3, [pc, #232]	; (800e084 <__mdiff+0x110>)
 800df9c:	483a      	ldr	r0, [pc, #232]	; (800e088 <__mdiff+0x114>)
 800df9e:	f000 fb2d 	bl	800e5fc <__assert_func>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfae:	bfa4      	itt	ge
 800dfb0:	4623      	movge	r3, r4
 800dfb2:	462c      	movge	r4, r5
 800dfb4:	4638      	mov	r0, r7
 800dfb6:	6861      	ldr	r1, [r4, #4]
 800dfb8:	bfa6      	itte	ge
 800dfba:	461d      	movge	r5, r3
 800dfbc:	2600      	movge	r6, #0
 800dfbe:	2601      	movlt	r6, #1
 800dfc0:	f7ff fd3e 	bl	800da40 <_Balloc>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	b918      	cbnz	r0, 800dfd0 <__mdiff+0x5c>
 800dfc8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dfcc:	4b2d      	ldr	r3, [pc, #180]	; (800e084 <__mdiff+0x110>)
 800dfce:	e7e5      	b.n	800df9c <__mdiff+0x28>
 800dfd0:	f102 0814 	add.w	r8, r2, #20
 800dfd4:	46c2      	mov	sl, r8
 800dfd6:	f04f 0c00 	mov.w	ip, #0
 800dfda:	6927      	ldr	r7, [r4, #16]
 800dfdc:	60c6      	str	r6, [r0, #12]
 800dfde:	692e      	ldr	r6, [r5, #16]
 800dfe0:	f104 0014 	add.w	r0, r4, #20
 800dfe4:	f105 0914 	add.w	r9, r5, #20
 800dfe8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800dfec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dff0:	3410      	adds	r4, #16
 800dff2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800dff6:	f859 3b04 	ldr.w	r3, [r9], #4
 800dffa:	fa1f f18b 	uxth.w	r1, fp
 800dffe:	448c      	add	ip, r1
 800e000:	b299      	uxth	r1, r3
 800e002:	0c1b      	lsrs	r3, r3, #16
 800e004:	ebac 0101 	sub.w	r1, ip, r1
 800e008:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e00c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e010:	b289      	uxth	r1, r1
 800e012:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800e016:	454e      	cmp	r6, r9
 800e018:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e01c:	f84a 3b04 	str.w	r3, [sl], #4
 800e020:	d8e7      	bhi.n	800dff2 <__mdiff+0x7e>
 800e022:	1b73      	subs	r3, r6, r5
 800e024:	3b15      	subs	r3, #21
 800e026:	f023 0303 	bic.w	r3, r3, #3
 800e02a:	3515      	adds	r5, #21
 800e02c:	3304      	adds	r3, #4
 800e02e:	42ae      	cmp	r6, r5
 800e030:	bf38      	it	cc
 800e032:	2304      	movcc	r3, #4
 800e034:	4418      	add	r0, r3
 800e036:	4443      	add	r3, r8
 800e038:	461e      	mov	r6, r3
 800e03a:	4605      	mov	r5, r0
 800e03c:	4575      	cmp	r5, lr
 800e03e:	d30e      	bcc.n	800e05e <__mdiff+0xea>
 800e040:	f10e 0103 	add.w	r1, lr, #3
 800e044:	1a09      	subs	r1, r1, r0
 800e046:	f021 0103 	bic.w	r1, r1, #3
 800e04a:	3803      	subs	r0, #3
 800e04c:	4586      	cmp	lr, r0
 800e04e:	bf38      	it	cc
 800e050:	2100      	movcc	r1, #0
 800e052:	4419      	add	r1, r3
 800e054:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e058:	b18b      	cbz	r3, 800e07e <__mdiff+0x10a>
 800e05a:	6117      	str	r7, [r2, #16]
 800e05c:	e7a4      	b.n	800dfa8 <__mdiff+0x34>
 800e05e:	f855 8b04 	ldr.w	r8, [r5], #4
 800e062:	fa1f f188 	uxth.w	r1, r8
 800e066:	4461      	add	r1, ip
 800e068:	140c      	asrs	r4, r1, #16
 800e06a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e06e:	b289      	uxth	r1, r1
 800e070:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e074:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800e078:	f846 1b04 	str.w	r1, [r6], #4
 800e07c:	e7de      	b.n	800e03c <__mdiff+0xc8>
 800e07e:	3f01      	subs	r7, #1
 800e080:	e7e8      	b.n	800e054 <__mdiff+0xe0>
 800e082:	bf00      	nop
 800e084:	0800f3df 	.word	0x0800f3df
 800e088:	0800f3f0 	.word	0x0800f3f0

0800e08c <__d2b>:
 800e08c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e090:	2101      	movs	r1, #1
 800e092:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800e096:	4690      	mov	r8, r2
 800e098:	461d      	mov	r5, r3
 800e09a:	f7ff fcd1 	bl	800da40 <_Balloc>
 800e09e:	4604      	mov	r4, r0
 800e0a0:	b930      	cbnz	r0, 800e0b0 <__d2b+0x24>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	f240 310a 	movw	r1, #778	; 0x30a
 800e0a8:	4b24      	ldr	r3, [pc, #144]	; (800e13c <__d2b+0xb0>)
 800e0aa:	4825      	ldr	r0, [pc, #148]	; (800e140 <__d2b+0xb4>)
 800e0ac:	f000 faa6 	bl	800e5fc <__assert_func>
 800e0b0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800e0b4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800e0b8:	bb2d      	cbnz	r5, 800e106 <__d2b+0x7a>
 800e0ba:	9301      	str	r3, [sp, #4]
 800e0bc:	f1b8 0300 	subs.w	r3, r8, #0
 800e0c0:	d026      	beq.n	800e110 <__d2b+0x84>
 800e0c2:	4668      	mov	r0, sp
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	f7ff fd83 	bl	800dbd0 <__lo0bits>
 800e0ca:	9900      	ldr	r1, [sp, #0]
 800e0cc:	b1f0      	cbz	r0, 800e10c <__d2b+0x80>
 800e0ce:	9a01      	ldr	r2, [sp, #4]
 800e0d0:	f1c0 0320 	rsb	r3, r0, #32
 800e0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800e0d8:	430b      	orrs	r3, r1
 800e0da:	40c2      	lsrs	r2, r0
 800e0dc:	6163      	str	r3, [r4, #20]
 800e0de:	9201      	str	r2, [sp, #4]
 800e0e0:	9b01      	ldr	r3, [sp, #4]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	bf14      	ite	ne
 800e0e6:	2102      	movne	r1, #2
 800e0e8:	2101      	moveq	r1, #1
 800e0ea:	61a3      	str	r3, [r4, #24]
 800e0ec:	6121      	str	r1, [r4, #16]
 800e0ee:	b1c5      	cbz	r5, 800e122 <__d2b+0x96>
 800e0f0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e0f4:	4405      	add	r5, r0
 800e0f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e0fa:	603d      	str	r5, [r7, #0]
 800e0fc:	6030      	str	r0, [r6, #0]
 800e0fe:	4620      	mov	r0, r4
 800e100:	b002      	add	sp, #8
 800e102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e10a:	e7d6      	b.n	800e0ba <__d2b+0x2e>
 800e10c:	6161      	str	r1, [r4, #20]
 800e10e:	e7e7      	b.n	800e0e0 <__d2b+0x54>
 800e110:	a801      	add	r0, sp, #4
 800e112:	f7ff fd5d 	bl	800dbd0 <__lo0bits>
 800e116:	2101      	movs	r1, #1
 800e118:	9b01      	ldr	r3, [sp, #4]
 800e11a:	6121      	str	r1, [r4, #16]
 800e11c:	6163      	str	r3, [r4, #20]
 800e11e:	3020      	adds	r0, #32
 800e120:	e7e5      	b.n	800e0ee <__d2b+0x62>
 800e122:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800e126:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e12a:	6038      	str	r0, [r7, #0]
 800e12c:	6918      	ldr	r0, [r3, #16]
 800e12e:	f7ff fd2f 	bl	800db90 <__hi0bits>
 800e132:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800e136:	6031      	str	r1, [r6, #0]
 800e138:	e7e1      	b.n	800e0fe <__d2b+0x72>
 800e13a:	bf00      	nop
 800e13c:	0800f3df 	.word	0x0800f3df
 800e140:	0800f3f0 	.word	0x0800f3f0

0800e144 <_calloc_r>:
 800e144:	b570      	push	{r4, r5, r6, lr}
 800e146:	fba1 5402 	umull	r5, r4, r1, r2
 800e14a:	b934      	cbnz	r4, 800e15a <_calloc_r+0x16>
 800e14c:	4629      	mov	r1, r5
 800e14e:	f000 f875 	bl	800e23c <_malloc_r>
 800e152:	4606      	mov	r6, r0
 800e154:	b928      	cbnz	r0, 800e162 <_calloc_r+0x1e>
 800e156:	4630      	mov	r0, r6
 800e158:	bd70      	pop	{r4, r5, r6, pc}
 800e15a:	220c      	movs	r2, #12
 800e15c:	2600      	movs	r6, #0
 800e15e:	6002      	str	r2, [r0, #0]
 800e160:	e7f9      	b.n	800e156 <_calloc_r+0x12>
 800e162:	462a      	mov	r2, r5
 800e164:	4621      	mov	r1, r4
 800e166:	f7fe f939 	bl	800c3dc <memset>
 800e16a:	e7f4      	b.n	800e156 <_calloc_r+0x12>

0800e16c <_free_r>:
 800e16c:	b538      	push	{r3, r4, r5, lr}
 800e16e:	4605      	mov	r5, r0
 800e170:	2900      	cmp	r1, #0
 800e172:	d040      	beq.n	800e1f6 <_free_r+0x8a>
 800e174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e178:	1f0c      	subs	r4, r1, #4
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	bfb8      	it	lt
 800e17e:	18e4      	addlt	r4, r4, r3
 800e180:	f000 fa98 	bl	800e6b4 <__malloc_lock>
 800e184:	4a1c      	ldr	r2, [pc, #112]	; (800e1f8 <_free_r+0x8c>)
 800e186:	6813      	ldr	r3, [r2, #0]
 800e188:	b933      	cbnz	r3, 800e198 <_free_r+0x2c>
 800e18a:	6063      	str	r3, [r4, #4]
 800e18c:	6014      	str	r4, [r2, #0]
 800e18e:	4628      	mov	r0, r5
 800e190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e194:	f000 ba94 	b.w	800e6c0 <__malloc_unlock>
 800e198:	42a3      	cmp	r3, r4
 800e19a:	d908      	bls.n	800e1ae <_free_r+0x42>
 800e19c:	6820      	ldr	r0, [r4, #0]
 800e19e:	1821      	adds	r1, r4, r0
 800e1a0:	428b      	cmp	r3, r1
 800e1a2:	bf01      	itttt	eq
 800e1a4:	6819      	ldreq	r1, [r3, #0]
 800e1a6:	685b      	ldreq	r3, [r3, #4]
 800e1a8:	1809      	addeq	r1, r1, r0
 800e1aa:	6021      	streq	r1, [r4, #0]
 800e1ac:	e7ed      	b.n	800e18a <_free_r+0x1e>
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	b10b      	cbz	r3, 800e1b8 <_free_r+0x4c>
 800e1b4:	42a3      	cmp	r3, r4
 800e1b6:	d9fa      	bls.n	800e1ae <_free_r+0x42>
 800e1b8:	6811      	ldr	r1, [r2, #0]
 800e1ba:	1850      	adds	r0, r2, r1
 800e1bc:	42a0      	cmp	r0, r4
 800e1be:	d10b      	bne.n	800e1d8 <_free_r+0x6c>
 800e1c0:	6820      	ldr	r0, [r4, #0]
 800e1c2:	4401      	add	r1, r0
 800e1c4:	1850      	adds	r0, r2, r1
 800e1c6:	4283      	cmp	r3, r0
 800e1c8:	6011      	str	r1, [r2, #0]
 800e1ca:	d1e0      	bne.n	800e18e <_free_r+0x22>
 800e1cc:	6818      	ldr	r0, [r3, #0]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	4401      	add	r1, r0
 800e1d2:	6011      	str	r1, [r2, #0]
 800e1d4:	6053      	str	r3, [r2, #4]
 800e1d6:	e7da      	b.n	800e18e <_free_r+0x22>
 800e1d8:	d902      	bls.n	800e1e0 <_free_r+0x74>
 800e1da:	230c      	movs	r3, #12
 800e1dc:	602b      	str	r3, [r5, #0]
 800e1de:	e7d6      	b.n	800e18e <_free_r+0x22>
 800e1e0:	6820      	ldr	r0, [r4, #0]
 800e1e2:	1821      	adds	r1, r4, r0
 800e1e4:	428b      	cmp	r3, r1
 800e1e6:	bf01      	itttt	eq
 800e1e8:	6819      	ldreq	r1, [r3, #0]
 800e1ea:	685b      	ldreq	r3, [r3, #4]
 800e1ec:	1809      	addeq	r1, r1, r0
 800e1ee:	6021      	streq	r1, [r4, #0]
 800e1f0:	6063      	str	r3, [r4, #4]
 800e1f2:	6054      	str	r4, [r2, #4]
 800e1f4:	e7cb      	b.n	800e18e <_free_r+0x22>
 800e1f6:	bd38      	pop	{r3, r4, r5, pc}
 800e1f8:	200019b4 	.word	0x200019b4

0800e1fc <sbrk_aligned>:
 800e1fc:	b570      	push	{r4, r5, r6, lr}
 800e1fe:	4e0e      	ldr	r6, [pc, #56]	; (800e238 <sbrk_aligned+0x3c>)
 800e200:	460c      	mov	r4, r1
 800e202:	6831      	ldr	r1, [r6, #0]
 800e204:	4605      	mov	r5, r0
 800e206:	b911      	cbnz	r1, 800e20e <sbrk_aligned+0x12>
 800e208:	f000 f9e8 	bl	800e5dc <_sbrk_r>
 800e20c:	6030      	str	r0, [r6, #0]
 800e20e:	4621      	mov	r1, r4
 800e210:	4628      	mov	r0, r5
 800e212:	f000 f9e3 	bl	800e5dc <_sbrk_r>
 800e216:	1c43      	adds	r3, r0, #1
 800e218:	d00a      	beq.n	800e230 <sbrk_aligned+0x34>
 800e21a:	1cc4      	adds	r4, r0, #3
 800e21c:	f024 0403 	bic.w	r4, r4, #3
 800e220:	42a0      	cmp	r0, r4
 800e222:	d007      	beq.n	800e234 <sbrk_aligned+0x38>
 800e224:	1a21      	subs	r1, r4, r0
 800e226:	4628      	mov	r0, r5
 800e228:	f000 f9d8 	bl	800e5dc <_sbrk_r>
 800e22c:	3001      	adds	r0, #1
 800e22e:	d101      	bne.n	800e234 <sbrk_aligned+0x38>
 800e230:	f04f 34ff 	mov.w	r4, #4294967295
 800e234:	4620      	mov	r0, r4
 800e236:	bd70      	pop	{r4, r5, r6, pc}
 800e238:	200019b8 	.word	0x200019b8

0800e23c <_malloc_r>:
 800e23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e240:	1ccd      	adds	r5, r1, #3
 800e242:	f025 0503 	bic.w	r5, r5, #3
 800e246:	3508      	adds	r5, #8
 800e248:	2d0c      	cmp	r5, #12
 800e24a:	bf38      	it	cc
 800e24c:	250c      	movcc	r5, #12
 800e24e:	2d00      	cmp	r5, #0
 800e250:	4607      	mov	r7, r0
 800e252:	db01      	blt.n	800e258 <_malloc_r+0x1c>
 800e254:	42a9      	cmp	r1, r5
 800e256:	d905      	bls.n	800e264 <_malloc_r+0x28>
 800e258:	230c      	movs	r3, #12
 800e25a:	2600      	movs	r6, #0
 800e25c:	603b      	str	r3, [r7, #0]
 800e25e:	4630      	mov	r0, r6
 800e260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e264:	4e2e      	ldr	r6, [pc, #184]	; (800e320 <_malloc_r+0xe4>)
 800e266:	f000 fa25 	bl	800e6b4 <__malloc_lock>
 800e26a:	6833      	ldr	r3, [r6, #0]
 800e26c:	461c      	mov	r4, r3
 800e26e:	bb34      	cbnz	r4, 800e2be <_malloc_r+0x82>
 800e270:	4629      	mov	r1, r5
 800e272:	4638      	mov	r0, r7
 800e274:	f7ff ffc2 	bl	800e1fc <sbrk_aligned>
 800e278:	1c43      	adds	r3, r0, #1
 800e27a:	4604      	mov	r4, r0
 800e27c:	d14d      	bne.n	800e31a <_malloc_r+0xde>
 800e27e:	6834      	ldr	r4, [r6, #0]
 800e280:	4626      	mov	r6, r4
 800e282:	2e00      	cmp	r6, #0
 800e284:	d140      	bne.n	800e308 <_malloc_r+0xcc>
 800e286:	6823      	ldr	r3, [r4, #0]
 800e288:	4631      	mov	r1, r6
 800e28a:	4638      	mov	r0, r7
 800e28c:	eb04 0803 	add.w	r8, r4, r3
 800e290:	f000 f9a4 	bl	800e5dc <_sbrk_r>
 800e294:	4580      	cmp	r8, r0
 800e296:	d13a      	bne.n	800e30e <_malloc_r+0xd2>
 800e298:	6821      	ldr	r1, [r4, #0]
 800e29a:	3503      	adds	r5, #3
 800e29c:	1a6d      	subs	r5, r5, r1
 800e29e:	f025 0503 	bic.w	r5, r5, #3
 800e2a2:	3508      	adds	r5, #8
 800e2a4:	2d0c      	cmp	r5, #12
 800e2a6:	bf38      	it	cc
 800e2a8:	250c      	movcc	r5, #12
 800e2aa:	4638      	mov	r0, r7
 800e2ac:	4629      	mov	r1, r5
 800e2ae:	f7ff ffa5 	bl	800e1fc <sbrk_aligned>
 800e2b2:	3001      	adds	r0, #1
 800e2b4:	d02b      	beq.n	800e30e <_malloc_r+0xd2>
 800e2b6:	6823      	ldr	r3, [r4, #0]
 800e2b8:	442b      	add	r3, r5
 800e2ba:	6023      	str	r3, [r4, #0]
 800e2bc:	e00e      	b.n	800e2dc <_malloc_r+0xa0>
 800e2be:	6822      	ldr	r2, [r4, #0]
 800e2c0:	1b52      	subs	r2, r2, r5
 800e2c2:	d41e      	bmi.n	800e302 <_malloc_r+0xc6>
 800e2c4:	2a0b      	cmp	r2, #11
 800e2c6:	d916      	bls.n	800e2f6 <_malloc_r+0xba>
 800e2c8:	1961      	adds	r1, r4, r5
 800e2ca:	42a3      	cmp	r3, r4
 800e2cc:	6025      	str	r5, [r4, #0]
 800e2ce:	bf18      	it	ne
 800e2d0:	6059      	strne	r1, [r3, #4]
 800e2d2:	6863      	ldr	r3, [r4, #4]
 800e2d4:	bf08      	it	eq
 800e2d6:	6031      	streq	r1, [r6, #0]
 800e2d8:	5162      	str	r2, [r4, r5]
 800e2da:	604b      	str	r3, [r1, #4]
 800e2dc:	4638      	mov	r0, r7
 800e2de:	f104 060b 	add.w	r6, r4, #11
 800e2e2:	f000 f9ed 	bl	800e6c0 <__malloc_unlock>
 800e2e6:	f026 0607 	bic.w	r6, r6, #7
 800e2ea:	1d23      	adds	r3, r4, #4
 800e2ec:	1af2      	subs	r2, r6, r3
 800e2ee:	d0b6      	beq.n	800e25e <_malloc_r+0x22>
 800e2f0:	1b9b      	subs	r3, r3, r6
 800e2f2:	50a3      	str	r3, [r4, r2]
 800e2f4:	e7b3      	b.n	800e25e <_malloc_r+0x22>
 800e2f6:	6862      	ldr	r2, [r4, #4]
 800e2f8:	42a3      	cmp	r3, r4
 800e2fa:	bf0c      	ite	eq
 800e2fc:	6032      	streq	r2, [r6, #0]
 800e2fe:	605a      	strne	r2, [r3, #4]
 800e300:	e7ec      	b.n	800e2dc <_malloc_r+0xa0>
 800e302:	4623      	mov	r3, r4
 800e304:	6864      	ldr	r4, [r4, #4]
 800e306:	e7b2      	b.n	800e26e <_malloc_r+0x32>
 800e308:	4634      	mov	r4, r6
 800e30a:	6876      	ldr	r6, [r6, #4]
 800e30c:	e7b9      	b.n	800e282 <_malloc_r+0x46>
 800e30e:	230c      	movs	r3, #12
 800e310:	4638      	mov	r0, r7
 800e312:	603b      	str	r3, [r7, #0]
 800e314:	f000 f9d4 	bl	800e6c0 <__malloc_unlock>
 800e318:	e7a1      	b.n	800e25e <_malloc_r+0x22>
 800e31a:	6025      	str	r5, [r4, #0]
 800e31c:	e7de      	b.n	800e2dc <_malloc_r+0xa0>
 800e31e:	bf00      	nop
 800e320:	200019b4 	.word	0x200019b4

0800e324 <__ssputs_r>:
 800e324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e328:	688e      	ldr	r6, [r1, #8]
 800e32a:	4682      	mov	sl, r0
 800e32c:	429e      	cmp	r6, r3
 800e32e:	460c      	mov	r4, r1
 800e330:	4690      	mov	r8, r2
 800e332:	461f      	mov	r7, r3
 800e334:	d838      	bhi.n	800e3a8 <__ssputs_r+0x84>
 800e336:	898a      	ldrh	r2, [r1, #12]
 800e338:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e33c:	d032      	beq.n	800e3a4 <__ssputs_r+0x80>
 800e33e:	6825      	ldr	r5, [r4, #0]
 800e340:	6909      	ldr	r1, [r1, #16]
 800e342:	3301      	adds	r3, #1
 800e344:	eba5 0901 	sub.w	r9, r5, r1
 800e348:	6965      	ldr	r5, [r4, #20]
 800e34a:	444b      	add	r3, r9
 800e34c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e354:	106d      	asrs	r5, r5, #1
 800e356:	429d      	cmp	r5, r3
 800e358:	bf38      	it	cc
 800e35a:	461d      	movcc	r5, r3
 800e35c:	0553      	lsls	r3, r2, #21
 800e35e:	d531      	bpl.n	800e3c4 <__ssputs_r+0xa0>
 800e360:	4629      	mov	r1, r5
 800e362:	f7ff ff6b 	bl	800e23c <_malloc_r>
 800e366:	4606      	mov	r6, r0
 800e368:	b950      	cbnz	r0, 800e380 <__ssputs_r+0x5c>
 800e36a:	230c      	movs	r3, #12
 800e36c:	f04f 30ff 	mov.w	r0, #4294967295
 800e370:	f8ca 3000 	str.w	r3, [sl]
 800e374:	89a3      	ldrh	r3, [r4, #12]
 800e376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e37a:	81a3      	strh	r3, [r4, #12]
 800e37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e380:	464a      	mov	r2, r9
 800e382:	6921      	ldr	r1, [r4, #16]
 800e384:	f7fe f81c 	bl	800c3c0 <memcpy>
 800e388:	89a3      	ldrh	r3, [r4, #12]
 800e38a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e38e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e392:	81a3      	strh	r3, [r4, #12]
 800e394:	6126      	str	r6, [r4, #16]
 800e396:	444e      	add	r6, r9
 800e398:	6026      	str	r6, [r4, #0]
 800e39a:	463e      	mov	r6, r7
 800e39c:	6165      	str	r5, [r4, #20]
 800e39e:	eba5 0509 	sub.w	r5, r5, r9
 800e3a2:	60a5      	str	r5, [r4, #8]
 800e3a4:	42be      	cmp	r6, r7
 800e3a6:	d900      	bls.n	800e3aa <__ssputs_r+0x86>
 800e3a8:	463e      	mov	r6, r7
 800e3aa:	4632      	mov	r2, r6
 800e3ac:	4641      	mov	r1, r8
 800e3ae:	6820      	ldr	r0, [r4, #0]
 800e3b0:	f000 f966 	bl	800e680 <memmove>
 800e3b4:	68a3      	ldr	r3, [r4, #8]
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	1b9b      	subs	r3, r3, r6
 800e3ba:	60a3      	str	r3, [r4, #8]
 800e3bc:	6823      	ldr	r3, [r4, #0]
 800e3be:	4433      	add	r3, r6
 800e3c0:	6023      	str	r3, [r4, #0]
 800e3c2:	e7db      	b.n	800e37c <__ssputs_r+0x58>
 800e3c4:	462a      	mov	r2, r5
 800e3c6:	f000 f981 	bl	800e6cc <_realloc_r>
 800e3ca:	4606      	mov	r6, r0
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	d1e1      	bne.n	800e394 <__ssputs_r+0x70>
 800e3d0:	4650      	mov	r0, sl
 800e3d2:	6921      	ldr	r1, [r4, #16]
 800e3d4:	f7ff feca 	bl	800e16c <_free_r>
 800e3d8:	e7c7      	b.n	800e36a <__ssputs_r+0x46>
	...

0800e3dc <_svfiprintf_r>:
 800e3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e0:	4698      	mov	r8, r3
 800e3e2:	898b      	ldrh	r3, [r1, #12]
 800e3e4:	4607      	mov	r7, r0
 800e3e6:	061b      	lsls	r3, r3, #24
 800e3e8:	460d      	mov	r5, r1
 800e3ea:	4614      	mov	r4, r2
 800e3ec:	b09d      	sub	sp, #116	; 0x74
 800e3ee:	d50e      	bpl.n	800e40e <_svfiprintf_r+0x32>
 800e3f0:	690b      	ldr	r3, [r1, #16]
 800e3f2:	b963      	cbnz	r3, 800e40e <_svfiprintf_r+0x32>
 800e3f4:	2140      	movs	r1, #64	; 0x40
 800e3f6:	f7ff ff21 	bl	800e23c <_malloc_r>
 800e3fa:	6028      	str	r0, [r5, #0]
 800e3fc:	6128      	str	r0, [r5, #16]
 800e3fe:	b920      	cbnz	r0, 800e40a <_svfiprintf_r+0x2e>
 800e400:	230c      	movs	r3, #12
 800e402:	603b      	str	r3, [r7, #0]
 800e404:	f04f 30ff 	mov.w	r0, #4294967295
 800e408:	e0d1      	b.n	800e5ae <_svfiprintf_r+0x1d2>
 800e40a:	2340      	movs	r3, #64	; 0x40
 800e40c:	616b      	str	r3, [r5, #20]
 800e40e:	2300      	movs	r3, #0
 800e410:	9309      	str	r3, [sp, #36]	; 0x24
 800e412:	2320      	movs	r3, #32
 800e414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e418:	2330      	movs	r3, #48	; 0x30
 800e41a:	f04f 0901 	mov.w	r9, #1
 800e41e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e422:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e5c8 <_svfiprintf_r+0x1ec>
 800e426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e42a:	4623      	mov	r3, r4
 800e42c:	469a      	mov	sl, r3
 800e42e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e432:	b10a      	cbz	r2, 800e438 <_svfiprintf_r+0x5c>
 800e434:	2a25      	cmp	r2, #37	; 0x25
 800e436:	d1f9      	bne.n	800e42c <_svfiprintf_r+0x50>
 800e438:	ebba 0b04 	subs.w	fp, sl, r4
 800e43c:	d00b      	beq.n	800e456 <_svfiprintf_r+0x7a>
 800e43e:	465b      	mov	r3, fp
 800e440:	4622      	mov	r2, r4
 800e442:	4629      	mov	r1, r5
 800e444:	4638      	mov	r0, r7
 800e446:	f7ff ff6d 	bl	800e324 <__ssputs_r>
 800e44a:	3001      	adds	r0, #1
 800e44c:	f000 80aa 	beq.w	800e5a4 <_svfiprintf_r+0x1c8>
 800e450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e452:	445a      	add	r2, fp
 800e454:	9209      	str	r2, [sp, #36]	; 0x24
 800e456:	f89a 3000 	ldrb.w	r3, [sl]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	f000 80a2 	beq.w	800e5a4 <_svfiprintf_r+0x1c8>
 800e460:	2300      	movs	r3, #0
 800e462:	f04f 32ff 	mov.w	r2, #4294967295
 800e466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e46a:	f10a 0a01 	add.w	sl, sl, #1
 800e46e:	9304      	str	r3, [sp, #16]
 800e470:	9307      	str	r3, [sp, #28]
 800e472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e476:	931a      	str	r3, [sp, #104]	; 0x68
 800e478:	4654      	mov	r4, sl
 800e47a:	2205      	movs	r2, #5
 800e47c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e480:	4851      	ldr	r0, [pc, #324]	; (800e5c8 <_svfiprintf_r+0x1ec>)
 800e482:	f7ff facf 	bl	800da24 <memchr>
 800e486:	9a04      	ldr	r2, [sp, #16]
 800e488:	b9d8      	cbnz	r0, 800e4c2 <_svfiprintf_r+0xe6>
 800e48a:	06d0      	lsls	r0, r2, #27
 800e48c:	bf44      	itt	mi
 800e48e:	2320      	movmi	r3, #32
 800e490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e494:	0711      	lsls	r1, r2, #28
 800e496:	bf44      	itt	mi
 800e498:	232b      	movmi	r3, #43	; 0x2b
 800e49a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e49e:	f89a 3000 	ldrb.w	r3, [sl]
 800e4a2:	2b2a      	cmp	r3, #42	; 0x2a
 800e4a4:	d015      	beq.n	800e4d2 <_svfiprintf_r+0xf6>
 800e4a6:	4654      	mov	r4, sl
 800e4a8:	2000      	movs	r0, #0
 800e4aa:	f04f 0c0a 	mov.w	ip, #10
 800e4ae:	9a07      	ldr	r2, [sp, #28]
 800e4b0:	4621      	mov	r1, r4
 800e4b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4b6:	3b30      	subs	r3, #48	; 0x30
 800e4b8:	2b09      	cmp	r3, #9
 800e4ba:	d94e      	bls.n	800e55a <_svfiprintf_r+0x17e>
 800e4bc:	b1b0      	cbz	r0, 800e4ec <_svfiprintf_r+0x110>
 800e4be:	9207      	str	r2, [sp, #28]
 800e4c0:	e014      	b.n	800e4ec <_svfiprintf_r+0x110>
 800e4c2:	eba0 0308 	sub.w	r3, r0, r8
 800e4c6:	fa09 f303 	lsl.w	r3, r9, r3
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	46a2      	mov	sl, r4
 800e4ce:	9304      	str	r3, [sp, #16]
 800e4d0:	e7d2      	b.n	800e478 <_svfiprintf_r+0x9c>
 800e4d2:	9b03      	ldr	r3, [sp, #12]
 800e4d4:	1d19      	adds	r1, r3, #4
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	9103      	str	r1, [sp, #12]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	bfbb      	ittet	lt
 800e4de:	425b      	neglt	r3, r3
 800e4e0:	f042 0202 	orrlt.w	r2, r2, #2
 800e4e4:	9307      	strge	r3, [sp, #28]
 800e4e6:	9307      	strlt	r3, [sp, #28]
 800e4e8:	bfb8      	it	lt
 800e4ea:	9204      	strlt	r2, [sp, #16]
 800e4ec:	7823      	ldrb	r3, [r4, #0]
 800e4ee:	2b2e      	cmp	r3, #46	; 0x2e
 800e4f0:	d10c      	bne.n	800e50c <_svfiprintf_r+0x130>
 800e4f2:	7863      	ldrb	r3, [r4, #1]
 800e4f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e4f6:	d135      	bne.n	800e564 <_svfiprintf_r+0x188>
 800e4f8:	9b03      	ldr	r3, [sp, #12]
 800e4fa:	3402      	adds	r4, #2
 800e4fc:	1d1a      	adds	r2, r3, #4
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	9203      	str	r2, [sp, #12]
 800e502:	2b00      	cmp	r3, #0
 800e504:	bfb8      	it	lt
 800e506:	f04f 33ff 	movlt.w	r3, #4294967295
 800e50a:	9305      	str	r3, [sp, #20]
 800e50c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800e5cc <_svfiprintf_r+0x1f0>
 800e510:	2203      	movs	r2, #3
 800e512:	4650      	mov	r0, sl
 800e514:	7821      	ldrb	r1, [r4, #0]
 800e516:	f7ff fa85 	bl	800da24 <memchr>
 800e51a:	b140      	cbz	r0, 800e52e <_svfiprintf_r+0x152>
 800e51c:	2340      	movs	r3, #64	; 0x40
 800e51e:	eba0 000a 	sub.w	r0, r0, sl
 800e522:	fa03 f000 	lsl.w	r0, r3, r0
 800e526:	9b04      	ldr	r3, [sp, #16]
 800e528:	3401      	adds	r4, #1
 800e52a:	4303      	orrs	r3, r0
 800e52c:	9304      	str	r3, [sp, #16]
 800e52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e532:	2206      	movs	r2, #6
 800e534:	4826      	ldr	r0, [pc, #152]	; (800e5d0 <_svfiprintf_r+0x1f4>)
 800e536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e53a:	f7ff fa73 	bl	800da24 <memchr>
 800e53e:	2800      	cmp	r0, #0
 800e540:	d038      	beq.n	800e5b4 <_svfiprintf_r+0x1d8>
 800e542:	4b24      	ldr	r3, [pc, #144]	; (800e5d4 <_svfiprintf_r+0x1f8>)
 800e544:	bb1b      	cbnz	r3, 800e58e <_svfiprintf_r+0x1b2>
 800e546:	9b03      	ldr	r3, [sp, #12]
 800e548:	3307      	adds	r3, #7
 800e54a:	f023 0307 	bic.w	r3, r3, #7
 800e54e:	3308      	adds	r3, #8
 800e550:	9303      	str	r3, [sp, #12]
 800e552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e554:	4433      	add	r3, r6
 800e556:	9309      	str	r3, [sp, #36]	; 0x24
 800e558:	e767      	b.n	800e42a <_svfiprintf_r+0x4e>
 800e55a:	460c      	mov	r4, r1
 800e55c:	2001      	movs	r0, #1
 800e55e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e562:	e7a5      	b.n	800e4b0 <_svfiprintf_r+0xd4>
 800e564:	2300      	movs	r3, #0
 800e566:	f04f 0c0a 	mov.w	ip, #10
 800e56a:	4619      	mov	r1, r3
 800e56c:	3401      	adds	r4, #1
 800e56e:	9305      	str	r3, [sp, #20]
 800e570:	4620      	mov	r0, r4
 800e572:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e576:	3a30      	subs	r2, #48	; 0x30
 800e578:	2a09      	cmp	r2, #9
 800e57a:	d903      	bls.n	800e584 <_svfiprintf_r+0x1a8>
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d0c5      	beq.n	800e50c <_svfiprintf_r+0x130>
 800e580:	9105      	str	r1, [sp, #20]
 800e582:	e7c3      	b.n	800e50c <_svfiprintf_r+0x130>
 800e584:	4604      	mov	r4, r0
 800e586:	2301      	movs	r3, #1
 800e588:	fb0c 2101 	mla	r1, ip, r1, r2
 800e58c:	e7f0      	b.n	800e570 <_svfiprintf_r+0x194>
 800e58e:	ab03      	add	r3, sp, #12
 800e590:	9300      	str	r3, [sp, #0]
 800e592:	462a      	mov	r2, r5
 800e594:	4638      	mov	r0, r7
 800e596:	4b10      	ldr	r3, [pc, #64]	; (800e5d8 <_svfiprintf_r+0x1fc>)
 800e598:	a904      	add	r1, sp, #16
 800e59a:	f7fd ffc5 	bl	800c528 <_printf_float>
 800e59e:	1c42      	adds	r2, r0, #1
 800e5a0:	4606      	mov	r6, r0
 800e5a2:	d1d6      	bne.n	800e552 <_svfiprintf_r+0x176>
 800e5a4:	89ab      	ldrh	r3, [r5, #12]
 800e5a6:	065b      	lsls	r3, r3, #25
 800e5a8:	f53f af2c 	bmi.w	800e404 <_svfiprintf_r+0x28>
 800e5ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5ae:	b01d      	add	sp, #116	; 0x74
 800e5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b4:	ab03      	add	r3, sp, #12
 800e5b6:	9300      	str	r3, [sp, #0]
 800e5b8:	462a      	mov	r2, r5
 800e5ba:	4638      	mov	r0, r7
 800e5bc:	4b06      	ldr	r3, [pc, #24]	; (800e5d8 <_svfiprintf_r+0x1fc>)
 800e5be:	a904      	add	r1, sp, #16
 800e5c0:	f7fe fa4e 	bl	800ca60 <_printf_i>
 800e5c4:	e7eb      	b.n	800e59e <_svfiprintf_r+0x1c2>
 800e5c6:	bf00      	nop
 800e5c8:	0800f54c 	.word	0x0800f54c
 800e5cc:	0800f552 	.word	0x0800f552
 800e5d0:	0800f556 	.word	0x0800f556
 800e5d4:	0800c529 	.word	0x0800c529
 800e5d8:	0800e325 	.word	0x0800e325

0800e5dc <_sbrk_r>:
 800e5dc:	b538      	push	{r3, r4, r5, lr}
 800e5de:	2300      	movs	r3, #0
 800e5e0:	4d05      	ldr	r5, [pc, #20]	; (800e5f8 <_sbrk_r+0x1c>)
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	4608      	mov	r0, r1
 800e5e6:	602b      	str	r3, [r5, #0]
 800e5e8:	f7f8 fcce 	bl	8006f88 <_sbrk>
 800e5ec:	1c43      	adds	r3, r0, #1
 800e5ee:	d102      	bne.n	800e5f6 <_sbrk_r+0x1a>
 800e5f0:	682b      	ldr	r3, [r5, #0]
 800e5f2:	b103      	cbz	r3, 800e5f6 <_sbrk_r+0x1a>
 800e5f4:	6023      	str	r3, [r4, #0]
 800e5f6:	bd38      	pop	{r3, r4, r5, pc}
 800e5f8:	200019bc 	.word	0x200019bc

0800e5fc <__assert_func>:
 800e5fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5fe:	4614      	mov	r4, r2
 800e600:	461a      	mov	r2, r3
 800e602:	4b09      	ldr	r3, [pc, #36]	; (800e628 <__assert_func+0x2c>)
 800e604:	4605      	mov	r5, r0
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	68d8      	ldr	r0, [r3, #12]
 800e60a:	b14c      	cbz	r4, 800e620 <__assert_func+0x24>
 800e60c:	4b07      	ldr	r3, [pc, #28]	; (800e62c <__assert_func+0x30>)
 800e60e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e612:	9100      	str	r1, [sp, #0]
 800e614:	462b      	mov	r3, r5
 800e616:	4906      	ldr	r1, [pc, #24]	; (800e630 <__assert_func+0x34>)
 800e618:	f000 f80e 	bl	800e638 <fiprintf>
 800e61c:	f000 faaa 	bl	800eb74 <abort>
 800e620:	4b04      	ldr	r3, [pc, #16]	; (800e634 <__assert_func+0x38>)
 800e622:	461c      	mov	r4, r3
 800e624:	e7f3      	b.n	800e60e <__assert_func+0x12>
 800e626:	bf00      	nop
 800e628:	20000190 	.word	0x20000190
 800e62c:	0800f55d 	.word	0x0800f55d
 800e630:	0800f56a 	.word	0x0800f56a
 800e634:	0800f598 	.word	0x0800f598

0800e638 <fiprintf>:
 800e638:	b40e      	push	{r1, r2, r3}
 800e63a:	b503      	push	{r0, r1, lr}
 800e63c:	4601      	mov	r1, r0
 800e63e:	ab03      	add	r3, sp, #12
 800e640:	4805      	ldr	r0, [pc, #20]	; (800e658 <fiprintf+0x20>)
 800e642:	f853 2b04 	ldr.w	r2, [r3], #4
 800e646:	6800      	ldr	r0, [r0, #0]
 800e648:	9301      	str	r3, [sp, #4]
 800e64a:	f000 f895 	bl	800e778 <_vfiprintf_r>
 800e64e:	b002      	add	sp, #8
 800e650:	f85d eb04 	ldr.w	lr, [sp], #4
 800e654:	b003      	add	sp, #12
 800e656:	4770      	bx	lr
 800e658:	20000190 	.word	0x20000190

0800e65c <__ascii_mbtowc>:
 800e65c:	b082      	sub	sp, #8
 800e65e:	b901      	cbnz	r1, 800e662 <__ascii_mbtowc+0x6>
 800e660:	a901      	add	r1, sp, #4
 800e662:	b142      	cbz	r2, 800e676 <__ascii_mbtowc+0x1a>
 800e664:	b14b      	cbz	r3, 800e67a <__ascii_mbtowc+0x1e>
 800e666:	7813      	ldrb	r3, [r2, #0]
 800e668:	600b      	str	r3, [r1, #0]
 800e66a:	7812      	ldrb	r2, [r2, #0]
 800e66c:	1e10      	subs	r0, r2, #0
 800e66e:	bf18      	it	ne
 800e670:	2001      	movne	r0, #1
 800e672:	b002      	add	sp, #8
 800e674:	4770      	bx	lr
 800e676:	4610      	mov	r0, r2
 800e678:	e7fb      	b.n	800e672 <__ascii_mbtowc+0x16>
 800e67a:	f06f 0001 	mvn.w	r0, #1
 800e67e:	e7f8      	b.n	800e672 <__ascii_mbtowc+0x16>

0800e680 <memmove>:
 800e680:	4288      	cmp	r0, r1
 800e682:	b510      	push	{r4, lr}
 800e684:	eb01 0402 	add.w	r4, r1, r2
 800e688:	d902      	bls.n	800e690 <memmove+0x10>
 800e68a:	4284      	cmp	r4, r0
 800e68c:	4623      	mov	r3, r4
 800e68e:	d807      	bhi.n	800e6a0 <memmove+0x20>
 800e690:	1e43      	subs	r3, r0, #1
 800e692:	42a1      	cmp	r1, r4
 800e694:	d008      	beq.n	800e6a8 <memmove+0x28>
 800e696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e69a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e69e:	e7f8      	b.n	800e692 <memmove+0x12>
 800e6a0:	4601      	mov	r1, r0
 800e6a2:	4402      	add	r2, r0
 800e6a4:	428a      	cmp	r2, r1
 800e6a6:	d100      	bne.n	800e6aa <memmove+0x2a>
 800e6a8:	bd10      	pop	{r4, pc}
 800e6aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6b2:	e7f7      	b.n	800e6a4 <memmove+0x24>

0800e6b4 <__malloc_lock>:
 800e6b4:	4801      	ldr	r0, [pc, #4]	; (800e6bc <__malloc_lock+0x8>)
 800e6b6:	f000 bc19 	b.w	800eeec <__retarget_lock_acquire_recursive>
 800e6ba:	bf00      	nop
 800e6bc:	200019c0 	.word	0x200019c0

0800e6c0 <__malloc_unlock>:
 800e6c0:	4801      	ldr	r0, [pc, #4]	; (800e6c8 <__malloc_unlock+0x8>)
 800e6c2:	f000 bc14 	b.w	800eeee <__retarget_lock_release_recursive>
 800e6c6:	bf00      	nop
 800e6c8:	200019c0 	.word	0x200019c0

0800e6cc <_realloc_r>:
 800e6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d0:	4680      	mov	r8, r0
 800e6d2:	4614      	mov	r4, r2
 800e6d4:	460e      	mov	r6, r1
 800e6d6:	b921      	cbnz	r1, 800e6e2 <_realloc_r+0x16>
 800e6d8:	4611      	mov	r1, r2
 800e6da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6de:	f7ff bdad 	b.w	800e23c <_malloc_r>
 800e6e2:	b92a      	cbnz	r2, 800e6f0 <_realloc_r+0x24>
 800e6e4:	f7ff fd42 	bl	800e16c <_free_r>
 800e6e8:	4625      	mov	r5, r4
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f0:	f000 fc64 	bl	800efbc <_malloc_usable_size_r>
 800e6f4:	4284      	cmp	r4, r0
 800e6f6:	4607      	mov	r7, r0
 800e6f8:	d802      	bhi.n	800e700 <_realloc_r+0x34>
 800e6fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e6fe:	d812      	bhi.n	800e726 <_realloc_r+0x5a>
 800e700:	4621      	mov	r1, r4
 800e702:	4640      	mov	r0, r8
 800e704:	f7ff fd9a 	bl	800e23c <_malloc_r>
 800e708:	4605      	mov	r5, r0
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d0ed      	beq.n	800e6ea <_realloc_r+0x1e>
 800e70e:	42bc      	cmp	r4, r7
 800e710:	4622      	mov	r2, r4
 800e712:	4631      	mov	r1, r6
 800e714:	bf28      	it	cs
 800e716:	463a      	movcs	r2, r7
 800e718:	f7fd fe52 	bl	800c3c0 <memcpy>
 800e71c:	4631      	mov	r1, r6
 800e71e:	4640      	mov	r0, r8
 800e720:	f7ff fd24 	bl	800e16c <_free_r>
 800e724:	e7e1      	b.n	800e6ea <_realloc_r+0x1e>
 800e726:	4635      	mov	r5, r6
 800e728:	e7df      	b.n	800e6ea <_realloc_r+0x1e>

0800e72a <__sfputc_r>:
 800e72a:	6893      	ldr	r3, [r2, #8]
 800e72c:	b410      	push	{r4}
 800e72e:	3b01      	subs	r3, #1
 800e730:	2b00      	cmp	r3, #0
 800e732:	6093      	str	r3, [r2, #8]
 800e734:	da07      	bge.n	800e746 <__sfputc_r+0x1c>
 800e736:	6994      	ldr	r4, [r2, #24]
 800e738:	42a3      	cmp	r3, r4
 800e73a:	db01      	blt.n	800e740 <__sfputc_r+0x16>
 800e73c:	290a      	cmp	r1, #10
 800e73e:	d102      	bne.n	800e746 <__sfputc_r+0x1c>
 800e740:	bc10      	pop	{r4}
 800e742:	f000 b949 	b.w	800e9d8 <__swbuf_r>
 800e746:	6813      	ldr	r3, [r2, #0]
 800e748:	1c58      	adds	r0, r3, #1
 800e74a:	6010      	str	r0, [r2, #0]
 800e74c:	7019      	strb	r1, [r3, #0]
 800e74e:	4608      	mov	r0, r1
 800e750:	bc10      	pop	{r4}
 800e752:	4770      	bx	lr

0800e754 <__sfputs_r>:
 800e754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e756:	4606      	mov	r6, r0
 800e758:	460f      	mov	r7, r1
 800e75a:	4614      	mov	r4, r2
 800e75c:	18d5      	adds	r5, r2, r3
 800e75e:	42ac      	cmp	r4, r5
 800e760:	d101      	bne.n	800e766 <__sfputs_r+0x12>
 800e762:	2000      	movs	r0, #0
 800e764:	e007      	b.n	800e776 <__sfputs_r+0x22>
 800e766:	463a      	mov	r2, r7
 800e768:	4630      	mov	r0, r6
 800e76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e76e:	f7ff ffdc 	bl	800e72a <__sfputc_r>
 800e772:	1c43      	adds	r3, r0, #1
 800e774:	d1f3      	bne.n	800e75e <__sfputs_r+0xa>
 800e776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e778 <_vfiprintf_r>:
 800e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77c:	460d      	mov	r5, r1
 800e77e:	4614      	mov	r4, r2
 800e780:	4698      	mov	r8, r3
 800e782:	4606      	mov	r6, r0
 800e784:	b09d      	sub	sp, #116	; 0x74
 800e786:	b118      	cbz	r0, 800e790 <_vfiprintf_r+0x18>
 800e788:	6983      	ldr	r3, [r0, #24]
 800e78a:	b90b      	cbnz	r3, 800e790 <_vfiprintf_r+0x18>
 800e78c:	f000 fb10 	bl	800edb0 <__sinit>
 800e790:	4b89      	ldr	r3, [pc, #548]	; (800e9b8 <_vfiprintf_r+0x240>)
 800e792:	429d      	cmp	r5, r3
 800e794:	d11b      	bne.n	800e7ce <_vfiprintf_r+0x56>
 800e796:	6875      	ldr	r5, [r6, #4]
 800e798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e79a:	07d9      	lsls	r1, r3, #31
 800e79c:	d405      	bmi.n	800e7aa <_vfiprintf_r+0x32>
 800e79e:	89ab      	ldrh	r3, [r5, #12]
 800e7a0:	059a      	lsls	r2, r3, #22
 800e7a2:	d402      	bmi.n	800e7aa <_vfiprintf_r+0x32>
 800e7a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7a6:	f000 fba1 	bl	800eeec <__retarget_lock_acquire_recursive>
 800e7aa:	89ab      	ldrh	r3, [r5, #12]
 800e7ac:	071b      	lsls	r3, r3, #28
 800e7ae:	d501      	bpl.n	800e7b4 <_vfiprintf_r+0x3c>
 800e7b0:	692b      	ldr	r3, [r5, #16]
 800e7b2:	b9eb      	cbnz	r3, 800e7f0 <_vfiprintf_r+0x78>
 800e7b4:	4629      	mov	r1, r5
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f000 f96e 	bl	800ea98 <__swsetup_r>
 800e7bc:	b1c0      	cbz	r0, 800e7f0 <_vfiprintf_r+0x78>
 800e7be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7c0:	07dc      	lsls	r4, r3, #31
 800e7c2:	d50e      	bpl.n	800e7e2 <_vfiprintf_r+0x6a>
 800e7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c8:	b01d      	add	sp, #116	; 0x74
 800e7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ce:	4b7b      	ldr	r3, [pc, #492]	; (800e9bc <_vfiprintf_r+0x244>)
 800e7d0:	429d      	cmp	r5, r3
 800e7d2:	d101      	bne.n	800e7d8 <_vfiprintf_r+0x60>
 800e7d4:	68b5      	ldr	r5, [r6, #8]
 800e7d6:	e7df      	b.n	800e798 <_vfiprintf_r+0x20>
 800e7d8:	4b79      	ldr	r3, [pc, #484]	; (800e9c0 <_vfiprintf_r+0x248>)
 800e7da:	429d      	cmp	r5, r3
 800e7dc:	bf08      	it	eq
 800e7de:	68f5      	ldreq	r5, [r6, #12]
 800e7e0:	e7da      	b.n	800e798 <_vfiprintf_r+0x20>
 800e7e2:	89ab      	ldrh	r3, [r5, #12]
 800e7e4:	0598      	lsls	r0, r3, #22
 800e7e6:	d4ed      	bmi.n	800e7c4 <_vfiprintf_r+0x4c>
 800e7e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7ea:	f000 fb80 	bl	800eeee <__retarget_lock_release_recursive>
 800e7ee:	e7e9      	b.n	800e7c4 <_vfiprintf_r+0x4c>
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e7f4:	2320      	movs	r3, #32
 800e7f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7fa:	2330      	movs	r3, #48	; 0x30
 800e7fc:	f04f 0901 	mov.w	r9, #1
 800e800:	f8cd 800c 	str.w	r8, [sp, #12]
 800e804:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e9c4 <_vfiprintf_r+0x24c>
 800e808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e80c:	4623      	mov	r3, r4
 800e80e:	469a      	mov	sl, r3
 800e810:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e814:	b10a      	cbz	r2, 800e81a <_vfiprintf_r+0xa2>
 800e816:	2a25      	cmp	r2, #37	; 0x25
 800e818:	d1f9      	bne.n	800e80e <_vfiprintf_r+0x96>
 800e81a:	ebba 0b04 	subs.w	fp, sl, r4
 800e81e:	d00b      	beq.n	800e838 <_vfiprintf_r+0xc0>
 800e820:	465b      	mov	r3, fp
 800e822:	4622      	mov	r2, r4
 800e824:	4629      	mov	r1, r5
 800e826:	4630      	mov	r0, r6
 800e828:	f7ff ff94 	bl	800e754 <__sfputs_r>
 800e82c:	3001      	adds	r0, #1
 800e82e:	f000 80aa 	beq.w	800e986 <_vfiprintf_r+0x20e>
 800e832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e834:	445a      	add	r2, fp
 800e836:	9209      	str	r2, [sp, #36]	; 0x24
 800e838:	f89a 3000 	ldrb.w	r3, [sl]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	f000 80a2 	beq.w	800e986 <_vfiprintf_r+0x20e>
 800e842:	2300      	movs	r3, #0
 800e844:	f04f 32ff 	mov.w	r2, #4294967295
 800e848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e84c:	f10a 0a01 	add.w	sl, sl, #1
 800e850:	9304      	str	r3, [sp, #16]
 800e852:	9307      	str	r3, [sp, #28]
 800e854:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e858:	931a      	str	r3, [sp, #104]	; 0x68
 800e85a:	4654      	mov	r4, sl
 800e85c:	2205      	movs	r2, #5
 800e85e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e862:	4858      	ldr	r0, [pc, #352]	; (800e9c4 <_vfiprintf_r+0x24c>)
 800e864:	f7ff f8de 	bl	800da24 <memchr>
 800e868:	9a04      	ldr	r2, [sp, #16]
 800e86a:	b9d8      	cbnz	r0, 800e8a4 <_vfiprintf_r+0x12c>
 800e86c:	06d1      	lsls	r1, r2, #27
 800e86e:	bf44      	itt	mi
 800e870:	2320      	movmi	r3, #32
 800e872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e876:	0713      	lsls	r3, r2, #28
 800e878:	bf44      	itt	mi
 800e87a:	232b      	movmi	r3, #43	; 0x2b
 800e87c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e880:	f89a 3000 	ldrb.w	r3, [sl]
 800e884:	2b2a      	cmp	r3, #42	; 0x2a
 800e886:	d015      	beq.n	800e8b4 <_vfiprintf_r+0x13c>
 800e888:	4654      	mov	r4, sl
 800e88a:	2000      	movs	r0, #0
 800e88c:	f04f 0c0a 	mov.w	ip, #10
 800e890:	9a07      	ldr	r2, [sp, #28]
 800e892:	4621      	mov	r1, r4
 800e894:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e898:	3b30      	subs	r3, #48	; 0x30
 800e89a:	2b09      	cmp	r3, #9
 800e89c:	d94e      	bls.n	800e93c <_vfiprintf_r+0x1c4>
 800e89e:	b1b0      	cbz	r0, 800e8ce <_vfiprintf_r+0x156>
 800e8a0:	9207      	str	r2, [sp, #28]
 800e8a2:	e014      	b.n	800e8ce <_vfiprintf_r+0x156>
 800e8a4:	eba0 0308 	sub.w	r3, r0, r8
 800e8a8:	fa09 f303 	lsl.w	r3, r9, r3
 800e8ac:	4313      	orrs	r3, r2
 800e8ae:	46a2      	mov	sl, r4
 800e8b0:	9304      	str	r3, [sp, #16]
 800e8b2:	e7d2      	b.n	800e85a <_vfiprintf_r+0xe2>
 800e8b4:	9b03      	ldr	r3, [sp, #12]
 800e8b6:	1d19      	adds	r1, r3, #4
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	9103      	str	r1, [sp, #12]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	bfbb      	ittet	lt
 800e8c0:	425b      	neglt	r3, r3
 800e8c2:	f042 0202 	orrlt.w	r2, r2, #2
 800e8c6:	9307      	strge	r3, [sp, #28]
 800e8c8:	9307      	strlt	r3, [sp, #28]
 800e8ca:	bfb8      	it	lt
 800e8cc:	9204      	strlt	r2, [sp, #16]
 800e8ce:	7823      	ldrb	r3, [r4, #0]
 800e8d0:	2b2e      	cmp	r3, #46	; 0x2e
 800e8d2:	d10c      	bne.n	800e8ee <_vfiprintf_r+0x176>
 800e8d4:	7863      	ldrb	r3, [r4, #1]
 800e8d6:	2b2a      	cmp	r3, #42	; 0x2a
 800e8d8:	d135      	bne.n	800e946 <_vfiprintf_r+0x1ce>
 800e8da:	9b03      	ldr	r3, [sp, #12]
 800e8dc:	3402      	adds	r4, #2
 800e8de:	1d1a      	adds	r2, r3, #4
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	9203      	str	r2, [sp, #12]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	bfb8      	it	lt
 800e8e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8ec:	9305      	str	r3, [sp, #20]
 800e8ee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e9c8 <_vfiprintf_r+0x250>
 800e8f2:	2203      	movs	r2, #3
 800e8f4:	4650      	mov	r0, sl
 800e8f6:	7821      	ldrb	r1, [r4, #0]
 800e8f8:	f7ff f894 	bl	800da24 <memchr>
 800e8fc:	b140      	cbz	r0, 800e910 <_vfiprintf_r+0x198>
 800e8fe:	2340      	movs	r3, #64	; 0x40
 800e900:	eba0 000a 	sub.w	r0, r0, sl
 800e904:	fa03 f000 	lsl.w	r0, r3, r0
 800e908:	9b04      	ldr	r3, [sp, #16]
 800e90a:	3401      	adds	r4, #1
 800e90c:	4303      	orrs	r3, r0
 800e90e:	9304      	str	r3, [sp, #16]
 800e910:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e914:	2206      	movs	r2, #6
 800e916:	482d      	ldr	r0, [pc, #180]	; (800e9cc <_vfiprintf_r+0x254>)
 800e918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e91c:	f7ff f882 	bl	800da24 <memchr>
 800e920:	2800      	cmp	r0, #0
 800e922:	d03f      	beq.n	800e9a4 <_vfiprintf_r+0x22c>
 800e924:	4b2a      	ldr	r3, [pc, #168]	; (800e9d0 <_vfiprintf_r+0x258>)
 800e926:	bb1b      	cbnz	r3, 800e970 <_vfiprintf_r+0x1f8>
 800e928:	9b03      	ldr	r3, [sp, #12]
 800e92a:	3307      	adds	r3, #7
 800e92c:	f023 0307 	bic.w	r3, r3, #7
 800e930:	3308      	adds	r3, #8
 800e932:	9303      	str	r3, [sp, #12]
 800e934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e936:	443b      	add	r3, r7
 800e938:	9309      	str	r3, [sp, #36]	; 0x24
 800e93a:	e767      	b.n	800e80c <_vfiprintf_r+0x94>
 800e93c:	460c      	mov	r4, r1
 800e93e:	2001      	movs	r0, #1
 800e940:	fb0c 3202 	mla	r2, ip, r2, r3
 800e944:	e7a5      	b.n	800e892 <_vfiprintf_r+0x11a>
 800e946:	2300      	movs	r3, #0
 800e948:	f04f 0c0a 	mov.w	ip, #10
 800e94c:	4619      	mov	r1, r3
 800e94e:	3401      	adds	r4, #1
 800e950:	9305      	str	r3, [sp, #20]
 800e952:	4620      	mov	r0, r4
 800e954:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e958:	3a30      	subs	r2, #48	; 0x30
 800e95a:	2a09      	cmp	r2, #9
 800e95c:	d903      	bls.n	800e966 <_vfiprintf_r+0x1ee>
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d0c5      	beq.n	800e8ee <_vfiprintf_r+0x176>
 800e962:	9105      	str	r1, [sp, #20]
 800e964:	e7c3      	b.n	800e8ee <_vfiprintf_r+0x176>
 800e966:	4604      	mov	r4, r0
 800e968:	2301      	movs	r3, #1
 800e96a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e96e:	e7f0      	b.n	800e952 <_vfiprintf_r+0x1da>
 800e970:	ab03      	add	r3, sp, #12
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	462a      	mov	r2, r5
 800e976:	4630      	mov	r0, r6
 800e978:	4b16      	ldr	r3, [pc, #88]	; (800e9d4 <_vfiprintf_r+0x25c>)
 800e97a:	a904      	add	r1, sp, #16
 800e97c:	f7fd fdd4 	bl	800c528 <_printf_float>
 800e980:	4607      	mov	r7, r0
 800e982:	1c78      	adds	r0, r7, #1
 800e984:	d1d6      	bne.n	800e934 <_vfiprintf_r+0x1bc>
 800e986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e988:	07d9      	lsls	r1, r3, #31
 800e98a:	d405      	bmi.n	800e998 <_vfiprintf_r+0x220>
 800e98c:	89ab      	ldrh	r3, [r5, #12]
 800e98e:	059a      	lsls	r2, r3, #22
 800e990:	d402      	bmi.n	800e998 <_vfiprintf_r+0x220>
 800e992:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e994:	f000 faab 	bl	800eeee <__retarget_lock_release_recursive>
 800e998:	89ab      	ldrh	r3, [r5, #12]
 800e99a:	065b      	lsls	r3, r3, #25
 800e99c:	f53f af12 	bmi.w	800e7c4 <_vfiprintf_r+0x4c>
 800e9a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9a2:	e711      	b.n	800e7c8 <_vfiprintf_r+0x50>
 800e9a4:	ab03      	add	r3, sp, #12
 800e9a6:	9300      	str	r3, [sp, #0]
 800e9a8:	462a      	mov	r2, r5
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	4b09      	ldr	r3, [pc, #36]	; (800e9d4 <_vfiprintf_r+0x25c>)
 800e9ae:	a904      	add	r1, sp, #16
 800e9b0:	f7fe f856 	bl	800ca60 <_printf_i>
 800e9b4:	e7e4      	b.n	800e980 <_vfiprintf_r+0x208>
 800e9b6:	bf00      	nop
 800e9b8:	0800f6c4 	.word	0x0800f6c4
 800e9bc:	0800f6e4 	.word	0x0800f6e4
 800e9c0:	0800f6a4 	.word	0x0800f6a4
 800e9c4:	0800f54c 	.word	0x0800f54c
 800e9c8:	0800f552 	.word	0x0800f552
 800e9cc:	0800f556 	.word	0x0800f556
 800e9d0:	0800c529 	.word	0x0800c529
 800e9d4:	0800e755 	.word	0x0800e755

0800e9d8 <__swbuf_r>:
 800e9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9da:	460e      	mov	r6, r1
 800e9dc:	4614      	mov	r4, r2
 800e9de:	4605      	mov	r5, r0
 800e9e0:	b118      	cbz	r0, 800e9ea <__swbuf_r+0x12>
 800e9e2:	6983      	ldr	r3, [r0, #24]
 800e9e4:	b90b      	cbnz	r3, 800e9ea <__swbuf_r+0x12>
 800e9e6:	f000 f9e3 	bl	800edb0 <__sinit>
 800e9ea:	4b21      	ldr	r3, [pc, #132]	; (800ea70 <__swbuf_r+0x98>)
 800e9ec:	429c      	cmp	r4, r3
 800e9ee:	d12b      	bne.n	800ea48 <__swbuf_r+0x70>
 800e9f0:	686c      	ldr	r4, [r5, #4]
 800e9f2:	69a3      	ldr	r3, [r4, #24]
 800e9f4:	60a3      	str	r3, [r4, #8]
 800e9f6:	89a3      	ldrh	r3, [r4, #12]
 800e9f8:	071a      	lsls	r2, r3, #28
 800e9fa:	d52f      	bpl.n	800ea5c <__swbuf_r+0x84>
 800e9fc:	6923      	ldr	r3, [r4, #16]
 800e9fe:	b36b      	cbz	r3, 800ea5c <__swbuf_r+0x84>
 800ea00:	6923      	ldr	r3, [r4, #16]
 800ea02:	6820      	ldr	r0, [r4, #0]
 800ea04:	b2f6      	uxtb	r6, r6
 800ea06:	1ac0      	subs	r0, r0, r3
 800ea08:	6963      	ldr	r3, [r4, #20]
 800ea0a:	4637      	mov	r7, r6
 800ea0c:	4283      	cmp	r3, r0
 800ea0e:	dc04      	bgt.n	800ea1a <__swbuf_r+0x42>
 800ea10:	4621      	mov	r1, r4
 800ea12:	4628      	mov	r0, r5
 800ea14:	f000 f938 	bl	800ec88 <_fflush_r>
 800ea18:	bb30      	cbnz	r0, 800ea68 <__swbuf_r+0x90>
 800ea1a:	68a3      	ldr	r3, [r4, #8]
 800ea1c:	3001      	adds	r0, #1
 800ea1e:	3b01      	subs	r3, #1
 800ea20:	60a3      	str	r3, [r4, #8]
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	1c5a      	adds	r2, r3, #1
 800ea26:	6022      	str	r2, [r4, #0]
 800ea28:	701e      	strb	r6, [r3, #0]
 800ea2a:	6963      	ldr	r3, [r4, #20]
 800ea2c:	4283      	cmp	r3, r0
 800ea2e:	d004      	beq.n	800ea3a <__swbuf_r+0x62>
 800ea30:	89a3      	ldrh	r3, [r4, #12]
 800ea32:	07db      	lsls	r3, r3, #31
 800ea34:	d506      	bpl.n	800ea44 <__swbuf_r+0x6c>
 800ea36:	2e0a      	cmp	r6, #10
 800ea38:	d104      	bne.n	800ea44 <__swbuf_r+0x6c>
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	f000 f923 	bl	800ec88 <_fflush_r>
 800ea42:	b988      	cbnz	r0, 800ea68 <__swbuf_r+0x90>
 800ea44:	4638      	mov	r0, r7
 800ea46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea48:	4b0a      	ldr	r3, [pc, #40]	; (800ea74 <__swbuf_r+0x9c>)
 800ea4a:	429c      	cmp	r4, r3
 800ea4c:	d101      	bne.n	800ea52 <__swbuf_r+0x7a>
 800ea4e:	68ac      	ldr	r4, [r5, #8]
 800ea50:	e7cf      	b.n	800e9f2 <__swbuf_r+0x1a>
 800ea52:	4b09      	ldr	r3, [pc, #36]	; (800ea78 <__swbuf_r+0xa0>)
 800ea54:	429c      	cmp	r4, r3
 800ea56:	bf08      	it	eq
 800ea58:	68ec      	ldreq	r4, [r5, #12]
 800ea5a:	e7ca      	b.n	800e9f2 <__swbuf_r+0x1a>
 800ea5c:	4621      	mov	r1, r4
 800ea5e:	4628      	mov	r0, r5
 800ea60:	f000 f81a 	bl	800ea98 <__swsetup_r>
 800ea64:	2800      	cmp	r0, #0
 800ea66:	d0cb      	beq.n	800ea00 <__swbuf_r+0x28>
 800ea68:	f04f 37ff 	mov.w	r7, #4294967295
 800ea6c:	e7ea      	b.n	800ea44 <__swbuf_r+0x6c>
 800ea6e:	bf00      	nop
 800ea70:	0800f6c4 	.word	0x0800f6c4
 800ea74:	0800f6e4 	.word	0x0800f6e4
 800ea78:	0800f6a4 	.word	0x0800f6a4

0800ea7c <__ascii_wctomb>:
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	4608      	mov	r0, r1
 800ea80:	b141      	cbz	r1, 800ea94 <__ascii_wctomb+0x18>
 800ea82:	2aff      	cmp	r2, #255	; 0xff
 800ea84:	d904      	bls.n	800ea90 <__ascii_wctomb+0x14>
 800ea86:	228a      	movs	r2, #138	; 0x8a
 800ea88:	f04f 30ff 	mov.w	r0, #4294967295
 800ea8c:	601a      	str	r2, [r3, #0]
 800ea8e:	4770      	bx	lr
 800ea90:	2001      	movs	r0, #1
 800ea92:	700a      	strb	r2, [r1, #0]
 800ea94:	4770      	bx	lr
	...

0800ea98 <__swsetup_r>:
 800ea98:	4b32      	ldr	r3, [pc, #200]	; (800eb64 <__swsetup_r+0xcc>)
 800ea9a:	b570      	push	{r4, r5, r6, lr}
 800ea9c:	681d      	ldr	r5, [r3, #0]
 800ea9e:	4606      	mov	r6, r0
 800eaa0:	460c      	mov	r4, r1
 800eaa2:	b125      	cbz	r5, 800eaae <__swsetup_r+0x16>
 800eaa4:	69ab      	ldr	r3, [r5, #24]
 800eaa6:	b913      	cbnz	r3, 800eaae <__swsetup_r+0x16>
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	f000 f981 	bl	800edb0 <__sinit>
 800eaae:	4b2e      	ldr	r3, [pc, #184]	; (800eb68 <__swsetup_r+0xd0>)
 800eab0:	429c      	cmp	r4, r3
 800eab2:	d10f      	bne.n	800ead4 <__swsetup_r+0x3c>
 800eab4:	686c      	ldr	r4, [r5, #4]
 800eab6:	89a3      	ldrh	r3, [r4, #12]
 800eab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eabc:	0719      	lsls	r1, r3, #28
 800eabe:	d42c      	bmi.n	800eb1a <__swsetup_r+0x82>
 800eac0:	06dd      	lsls	r5, r3, #27
 800eac2:	d411      	bmi.n	800eae8 <__swsetup_r+0x50>
 800eac4:	2309      	movs	r3, #9
 800eac6:	6033      	str	r3, [r6, #0]
 800eac8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eacc:	f04f 30ff 	mov.w	r0, #4294967295
 800ead0:	81a3      	strh	r3, [r4, #12]
 800ead2:	e03e      	b.n	800eb52 <__swsetup_r+0xba>
 800ead4:	4b25      	ldr	r3, [pc, #148]	; (800eb6c <__swsetup_r+0xd4>)
 800ead6:	429c      	cmp	r4, r3
 800ead8:	d101      	bne.n	800eade <__swsetup_r+0x46>
 800eada:	68ac      	ldr	r4, [r5, #8]
 800eadc:	e7eb      	b.n	800eab6 <__swsetup_r+0x1e>
 800eade:	4b24      	ldr	r3, [pc, #144]	; (800eb70 <__swsetup_r+0xd8>)
 800eae0:	429c      	cmp	r4, r3
 800eae2:	bf08      	it	eq
 800eae4:	68ec      	ldreq	r4, [r5, #12]
 800eae6:	e7e6      	b.n	800eab6 <__swsetup_r+0x1e>
 800eae8:	0758      	lsls	r0, r3, #29
 800eaea:	d512      	bpl.n	800eb12 <__swsetup_r+0x7a>
 800eaec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eaee:	b141      	cbz	r1, 800eb02 <__swsetup_r+0x6a>
 800eaf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eaf4:	4299      	cmp	r1, r3
 800eaf6:	d002      	beq.n	800eafe <__swsetup_r+0x66>
 800eaf8:	4630      	mov	r0, r6
 800eafa:	f7ff fb37 	bl	800e16c <_free_r>
 800eafe:	2300      	movs	r3, #0
 800eb00:	6363      	str	r3, [r4, #52]	; 0x34
 800eb02:	89a3      	ldrh	r3, [r4, #12]
 800eb04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eb08:	81a3      	strh	r3, [r4, #12]
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	6063      	str	r3, [r4, #4]
 800eb0e:	6923      	ldr	r3, [r4, #16]
 800eb10:	6023      	str	r3, [r4, #0]
 800eb12:	89a3      	ldrh	r3, [r4, #12]
 800eb14:	f043 0308 	orr.w	r3, r3, #8
 800eb18:	81a3      	strh	r3, [r4, #12]
 800eb1a:	6923      	ldr	r3, [r4, #16]
 800eb1c:	b94b      	cbnz	r3, 800eb32 <__swsetup_r+0x9a>
 800eb1e:	89a3      	ldrh	r3, [r4, #12]
 800eb20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb28:	d003      	beq.n	800eb32 <__swsetup_r+0x9a>
 800eb2a:	4621      	mov	r1, r4
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	f000 fa05 	bl	800ef3c <__smakebuf_r>
 800eb32:	89a0      	ldrh	r0, [r4, #12]
 800eb34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb38:	f010 0301 	ands.w	r3, r0, #1
 800eb3c:	d00a      	beq.n	800eb54 <__swsetup_r+0xbc>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	60a3      	str	r3, [r4, #8]
 800eb42:	6963      	ldr	r3, [r4, #20]
 800eb44:	425b      	negs	r3, r3
 800eb46:	61a3      	str	r3, [r4, #24]
 800eb48:	6923      	ldr	r3, [r4, #16]
 800eb4a:	b943      	cbnz	r3, 800eb5e <__swsetup_r+0xc6>
 800eb4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eb50:	d1ba      	bne.n	800eac8 <__swsetup_r+0x30>
 800eb52:	bd70      	pop	{r4, r5, r6, pc}
 800eb54:	0781      	lsls	r1, r0, #30
 800eb56:	bf58      	it	pl
 800eb58:	6963      	ldrpl	r3, [r4, #20]
 800eb5a:	60a3      	str	r3, [r4, #8]
 800eb5c:	e7f4      	b.n	800eb48 <__swsetup_r+0xb0>
 800eb5e:	2000      	movs	r0, #0
 800eb60:	e7f7      	b.n	800eb52 <__swsetup_r+0xba>
 800eb62:	bf00      	nop
 800eb64:	20000190 	.word	0x20000190
 800eb68:	0800f6c4 	.word	0x0800f6c4
 800eb6c:	0800f6e4 	.word	0x0800f6e4
 800eb70:	0800f6a4 	.word	0x0800f6a4

0800eb74 <abort>:
 800eb74:	2006      	movs	r0, #6
 800eb76:	b508      	push	{r3, lr}
 800eb78:	f000 fa50 	bl	800f01c <raise>
 800eb7c:	2001      	movs	r0, #1
 800eb7e:	f7f8 f9d3 	bl	8006f28 <_exit>
	...

0800eb84 <__sflush_r>:
 800eb84:	898a      	ldrh	r2, [r1, #12]
 800eb86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb88:	4605      	mov	r5, r0
 800eb8a:	0710      	lsls	r0, r2, #28
 800eb8c:	460c      	mov	r4, r1
 800eb8e:	d457      	bmi.n	800ec40 <__sflush_r+0xbc>
 800eb90:	684b      	ldr	r3, [r1, #4]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	dc04      	bgt.n	800eba0 <__sflush_r+0x1c>
 800eb96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	dc01      	bgt.n	800eba0 <__sflush_r+0x1c>
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eba2:	2e00      	cmp	r6, #0
 800eba4:	d0fa      	beq.n	800eb9c <__sflush_r+0x18>
 800eba6:	2300      	movs	r3, #0
 800eba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebac:	682f      	ldr	r7, [r5, #0]
 800ebae:	602b      	str	r3, [r5, #0]
 800ebb0:	d032      	beq.n	800ec18 <__sflush_r+0x94>
 800ebb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebb4:	89a3      	ldrh	r3, [r4, #12]
 800ebb6:	075a      	lsls	r2, r3, #29
 800ebb8:	d505      	bpl.n	800ebc6 <__sflush_r+0x42>
 800ebba:	6863      	ldr	r3, [r4, #4]
 800ebbc:	1ac0      	subs	r0, r0, r3
 800ebbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebc0:	b10b      	cbz	r3, 800ebc6 <__sflush_r+0x42>
 800ebc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebc4:	1ac0      	subs	r0, r0, r3
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	4602      	mov	r2, r0
 800ebca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebcc:	4628      	mov	r0, r5
 800ebce:	6a21      	ldr	r1, [r4, #32]
 800ebd0:	47b0      	blx	r6
 800ebd2:	1c43      	adds	r3, r0, #1
 800ebd4:	89a3      	ldrh	r3, [r4, #12]
 800ebd6:	d106      	bne.n	800ebe6 <__sflush_r+0x62>
 800ebd8:	6829      	ldr	r1, [r5, #0]
 800ebda:	291d      	cmp	r1, #29
 800ebdc:	d82c      	bhi.n	800ec38 <__sflush_r+0xb4>
 800ebde:	4a29      	ldr	r2, [pc, #164]	; (800ec84 <__sflush_r+0x100>)
 800ebe0:	40ca      	lsrs	r2, r1
 800ebe2:	07d6      	lsls	r6, r2, #31
 800ebe4:	d528      	bpl.n	800ec38 <__sflush_r+0xb4>
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	6062      	str	r2, [r4, #4]
 800ebea:	6922      	ldr	r2, [r4, #16]
 800ebec:	04d9      	lsls	r1, r3, #19
 800ebee:	6022      	str	r2, [r4, #0]
 800ebf0:	d504      	bpl.n	800ebfc <__sflush_r+0x78>
 800ebf2:	1c42      	adds	r2, r0, #1
 800ebf4:	d101      	bne.n	800ebfa <__sflush_r+0x76>
 800ebf6:	682b      	ldr	r3, [r5, #0]
 800ebf8:	b903      	cbnz	r3, 800ebfc <__sflush_r+0x78>
 800ebfa:	6560      	str	r0, [r4, #84]	; 0x54
 800ebfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebfe:	602f      	str	r7, [r5, #0]
 800ec00:	2900      	cmp	r1, #0
 800ec02:	d0cb      	beq.n	800eb9c <__sflush_r+0x18>
 800ec04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec08:	4299      	cmp	r1, r3
 800ec0a:	d002      	beq.n	800ec12 <__sflush_r+0x8e>
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	f7ff faad 	bl	800e16c <_free_r>
 800ec12:	2000      	movs	r0, #0
 800ec14:	6360      	str	r0, [r4, #52]	; 0x34
 800ec16:	e7c2      	b.n	800eb9e <__sflush_r+0x1a>
 800ec18:	6a21      	ldr	r1, [r4, #32]
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	47b0      	blx	r6
 800ec20:	1c41      	adds	r1, r0, #1
 800ec22:	d1c7      	bne.n	800ebb4 <__sflush_r+0x30>
 800ec24:	682b      	ldr	r3, [r5, #0]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d0c4      	beq.n	800ebb4 <__sflush_r+0x30>
 800ec2a:	2b1d      	cmp	r3, #29
 800ec2c:	d001      	beq.n	800ec32 <__sflush_r+0xae>
 800ec2e:	2b16      	cmp	r3, #22
 800ec30:	d101      	bne.n	800ec36 <__sflush_r+0xb2>
 800ec32:	602f      	str	r7, [r5, #0]
 800ec34:	e7b2      	b.n	800eb9c <__sflush_r+0x18>
 800ec36:	89a3      	ldrh	r3, [r4, #12]
 800ec38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec3c:	81a3      	strh	r3, [r4, #12]
 800ec3e:	e7ae      	b.n	800eb9e <__sflush_r+0x1a>
 800ec40:	690f      	ldr	r7, [r1, #16]
 800ec42:	2f00      	cmp	r7, #0
 800ec44:	d0aa      	beq.n	800eb9c <__sflush_r+0x18>
 800ec46:	0793      	lsls	r3, r2, #30
 800ec48:	bf18      	it	ne
 800ec4a:	2300      	movne	r3, #0
 800ec4c:	680e      	ldr	r6, [r1, #0]
 800ec4e:	bf08      	it	eq
 800ec50:	694b      	ldreq	r3, [r1, #20]
 800ec52:	1bf6      	subs	r6, r6, r7
 800ec54:	600f      	str	r7, [r1, #0]
 800ec56:	608b      	str	r3, [r1, #8]
 800ec58:	2e00      	cmp	r6, #0
 800ec5a:	dd9f      	ble.n	800eb9c <__sflush_r+0x18>
 800ec5c:	4633      	mov	r3, r6
 800ec5e:	463a      	mov	r2, r7
 800ec60:	4628      	mov	r0, r5
 800ec62:	6a21      	ldr	r1, [r4, #32]
 800ec64:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ec68:	47e0      	blx	ip
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	dc06      	bgt.n	800ec7c <__sflush_r+0xf8>
 800ec6e:	89a3      	ldrh	r3, [r4, #12]
 800ec70:	f04f 30ff 	mov.w	r0, #4294967295
 800ec74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec78:	81a3      	strh	r3, [r4, #12]
 800ec7a:	e790      	b.n	800eb9e <__sflush_r+0x1a>
 800ec7c:	4407      	add	r7, r0
 800ec7e:	1a36      	subs	r6, r6, r0
 800ec80:	e7ea      	b.n	800ec58 <__sflush_r+0xd4>
 800ec82:	bf00      	nop
 800ec84:	20400001 	.word	0x20400001

0800ec88 <_fflush_r>:
 800ec88:	b538      	push	{r3, r4, r5, lr}
 800ec8a:	690b      	ldr	r3, [r1, #16]
 800ec8c:	4605      	mov	r5, r0
 800ec8e:	460c      	mov	r4, r1
 800ec90:	b913      	cbnz	r3, 800ec98 <_fflush_r+0x10>
 800ec92:	2500      	movs	r5, #0
 800ec94:	4628      	mov	r0, r5
 800ec96:	bd38      	pop	{r3, r4, r5, pc}
 800ec98:	b118      	cbz	r0, 800eca2 <_fflush_r+0x1a>
 800ec9a:	6983      	ldr	r3, [r0, #24]
 800ec9c:	b90b      	cbnz	r3, 800eca2 <_fflush_r+0x1a>
 800ec9e:	f000 f887 	bl	800edb0 <__sinit>
 800eca2:	4b14      	ldr	r3, [pc, #80]	; (800ecf4 <_fflush_r+0x6c>)
 800eca4:	429c      	cmp	r4, r3
 800eca6:	d11b      	bne.n	800ece0 <_fflush_r+0x58>
 800eca8:	686c      	ldr	r4, [r5, #4]
 800ecaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d0ef      	beq.n	800ec92 <_fflush_r+0xa>
 800ecb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ecb4:	07d0      	lsls	r0, r2, #31
 800ecb6:	d404      	bmi.n	800ecc2 <_fflush_r+0x3a>
 800ecb8:	0599      	lsls	r1, r3, #22
 800ecba:	d402      	bmi.n	800ecc2 <_fflush_r+0x3a>
 800ecbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecbe:	f000 f915 	bl	800eeec <__retarget_lock_acquire_recursive>
 800ecc2:	4628      	mov	r0, r5
 800ecc4:	4621      	mov	r1, r4
 800ecc6:	f7ff ff5d 	bl	800eb84 <__sflush_r>
 800ecca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eccc:	4605      	mov	r5, r0
 800ecce:	07da      	lsls	r2, r3, #31
 800ecd0:	d4e0      	bmi.n	800ec94 <_fflush_r+0xc>
 800ecd2:	89a3      	ldrh	r3, [r4, #12]
 800ecd4:	059b      	lsls	r3, r3, #22
 800ecd6:	d4dd      	bmi.n	800ec94 <_fflush_r+0xc>
 800ecd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecda:	f000 f908 	bl	800eeee <__retarget_lock_release_recursive>
 800ecde:	e7d9      	b.n	800ec94 <_fflush_r+0xc>
 800ece0:	4b05      	ldr	r3, [pc, #20]	; (800ecf8 <_fflush_r+0x70>)
 800ece2:	429c      	cmp	r4, r3
 800ece4:	d101      	bne.n	800ecea <_fflush_r+0x62>
 800ece6:	68ac      	ldr	r4, [r5, #8]
 800ece8:	e7df      	b.n	800ecaa <_fflush_r+0x22>
 800ecea:	4b04      	ldr	r3, [pc, #16]	; (800ecfc <_fflush_r+0x74>)
 800ecec:	429c      	cmp	r4, r3
 800ecee:	bf08      	it	eq
 800ecf0:	68ec      	ldreq	r4, [r5, #12]
 800ecf2:	e7da      	b.n	800ecaa <_fflush_r+0x22>
 800ecf4:	0800f6c4 	.word	0x0800f6c4
 800ecf8:	0800f6e4 	.word	0x0800f6e4
 800ecfc:	0800f6a4 	.word	0x0800f6a4

0800ed00 <std>:
 800ed00:	2300      	movs	r3, #0
 800ed02:	b510      	push	{r4, lr}
 800ed04:	4604      	mov	r4, r0
 800ed06:	e9c0 3300 	strd	r3, r3, [r0]
 800ed0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed0e:	6083      	str	r3, [r0, #8]
 800ed10:	8181      	strh	r1, [r0, #12]
 800ed12:	6643      	str	r3, [r0, #100]	; 0x64
 800ed14:	81c2      	strh	r2, [r0, #14]
 800ed16:	6183      	str	r3, [r0, #24]
 800ed18:	4619      	mov	r1, r3
 800ed1a:	2208      	movs	r2, #8
 800ed1c:	305c      	adds	r0, #92	; 0x5c
 800ed1e:	f7fd fb5d 	bl	800c3dc <memset>
 800ed22:	4b05      	ldr	r3, [pc, #20]	; (800ed38 <std+0x38>)
 800ed24:	6224      	str	r4, [r4, #32]
 800ed26:	6263      	str	r3, [r4, #36]	; 0x24
 800ed28:	4b04      	ldr	r3, [pc, #16]	; (800ed3c <std+0x3c>)
 800ed2a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed2c:	4b04      	ldr	r3, [pc, #16]	; (800ed40 <std+0x40>)
 800ed2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed30:	4b04      	ldr	r3, [pc, #16]	; (800ed44 <std+0x44>)
 800ed32:	6323      	str	r3, [r4, #48]	; 0x30
 800ed34:	bd10      	pop	{r4, pc}
 800ed36:	bf00      	nop
 800ed38:	0800f055 	.word	0x0800f055
 800ed3c:	0800f077 	.word	0x0800f077
 800ed40:	0800f0af 	.word	0x0800f0af
 800ed44:	0800f0d3 	.word	0x0800f0d3

0800ed48 <_cleanup_r>:
 800ed48:	4901      	ldr	r1, [pc, #4]	; (800ed50 <_cleanup_r+0x8>)
 800ed4a:	f000 b8af 	b.w	800eeac <_fwalk_reent>
 800ed4e:	bf00      	nop
 800ed50:	0800ec89 	.word	0x0800ec89

0800ed54 <__sfmoreglue>:
 800ed54:	2268      	movs	r2, #104	; 0x68
 800ed56:	b570      	push	{r4, r5, r6, lr}
 800ed58:	1e4d      	subs	r5, r1, #1
 800ed5a:	4355      	muls	r5, r2
 800ed5c:	460e      	mov	r6, r1
 800ed5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed62:	f7ff fa6b 	bl	800e23c <_malloc_r>
 800ed66:	4604      	mov	r4, r0
 800ed68:	b140      	cbz	r0, 800ed7c <__sfmoreglue+0x28>
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	e9c0 1600 	strd	r1, r6, [r0]
 800ed70:	300c      	adds	r0, #12
 800ed72:	60a0      	str	r0, [r4, #8]
 800ed74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed78:	f7fd fb30 	bl	800c3dc <memset>
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	bd70      	pop	{r4, r5, r6, pc}

0800ed80 <__sfp_lock_acquire>:
 800ed80:	4801      	ldr	r0, [pc, #4]	; (800ed88 <__sfp_lock_acquire+0x8>)
 800ed82:	f000 b8b3 	b.w	800eeec <__retarget_lock_acquire_recursive>
 800ed86:	bf00      	nop
 800ed88:	200019c1 	.word	0x200019c1

0800ed8c <__sfp_lock_release>:
 800ed8c:	4801      	ldr	r0, [pc, #4]	; (800ed94 <__sfp_lock_release+0x8>)
 800ed8e:	f000 b8ae 	b.w	800eeee <__retarget_lock_release_recursive>
 800ed92:	bf00      	nop
 800ed94:	200019c1 	.word	0x200019c1

0800ed98 <__sinit_lock_acquire>:
 800ed98:	4801      	ldr	r0, [pc, #4]	; (800eda0 <__sinit_lock_acquire+0x8>)
 800ed9a:	f000 b8a7 	b.w	800eeec <__retarget_lock_acquire_recursive>
 800ed9e:	bf00      	nop
 800eda0:	200019c2 	.word	0x200019c2

0800eda4 <__sinit_lock_release>:
 800eda4:	4801      	ldr	r0, [pc, #4]	; (800edac <__sinit_lock_release+0x8>)
 800eda6:	f000 b8a2 	b.w	800eeee <__retarget_lock_release_recursive>
 800edaa:	bf00      	nop
 800edac:	200019c2 	.word	0x200019c2

0800edb0 <__sinit>:
 800edb0:	b510      	push	{r4, lr}
 800edb2:	4604      	mov	r4, r0
 800edb4:	f7ff fff0 	bl	800ed98 <__sinit_lock_acquire>
 800edb8:	69a3      	ldr	r3, [r4, #24]
 800edba:	b11b      	cbz	r3, 800edc4 <__sinit+0x14>
 800edbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edc0:	f7ff bff0 	b.w	800eda4 <__sinit_lock_release>
 800edc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800edc8:	6523      	str	r3, [r4, #80]	; 0x50
 800edca:	4b13      	ldr	r3, [pc, #76]	; (800ee18 <__sinit+0x68>)
 800edcc:	4a13      	ldr	r2, [pc, #76]	; (800ee1c <__sinit+0x6c>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	62a2      	str	r2, [r4, #40]	; 0x28
 800edd2:	42a3      	cmp	r3, r4
 800edd4:	bf08      	it	eq
 800edd6:	2301      	moveq	r3, #1
 800edd8:	4620      	mov	r0, r4
 800edda:	bf08      	it	eq
 800eddc:	61a3      	streq	r3, [r4, #24]
 800edde:	f000 f81f 	bl	800ee20 <__sfp>
 800ede2:	6060      	str	r0, [r4, #4]
 800ede4:	4620      	mov	r0, r4
 800ede6:	f000 f81b 	bl	800ee20 <__sfp>
 800edea:	60a0      	str	r0, [r4, #8]
 800edec:	4620      	mov	r0, r4
 800edee:	f000 f817 	bl	800ee20 <__sfp>
 800edf2:	2200      	movs	r2, #0
 800edf4:	2104      	movs	r1, #4
 800edf6:	60e0      	str	r0, [r4, #12]
 800edf8:	6860      	ldr	r0, [r4, #4]
 800edfa:	f7ff ff81 	bl	800ed00 <std>
 800edfe:	2201      	movs	r2, #1
 800ee00:	2109      	movs	r1, #9
 800ee02:	68a0      	ldr	r0, [r4, #8]
 800ee04:	f7ff ff7c 	bl	800ed00 <std>
 800ee08:	2202      	movs	r2, #2
 800ee0a:	2112      	movs	r1, #18
 800ee0c:	68e0      	ldr	r0, [r4, #12]
 800ee0e:	f7ff ff77 	bl	800ed00 <std>
 800ee12:	2301      	movs	r3, #1
 800ee14:	61a3      	str	r3, [r4, #24]
 800ee16:	e7d1      	b.n	800edbc <__sinit+0xc>
 800ee18:	0800f328 	.word	0x0800f328
 800ee1c:	0800ed49 	.word	0x0800ed49

0800ee20 <__sfp>:
 800ee20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee22:	4607      	mov	r7, r0
 800ee24:	f7ff ffac 	bl	800ed80 <__sfp_lock_acquire>
 800ee28:	4b1e      	ldr	r3, [pc, #120]	; (800eea4 <__sfp+0x84>)
 800ee2a:	681e      	ldr	r6, [r3, #0]
 800ee2c:	69b3      	ldr	r3, [r6, #24]
 800ee2e:	b913      	cbnz	r3, 800ee36 <__sfp+0x16>
 800ee30:	4630      	mov	r0, r6
 800ee32:	f7ff ffbd 	bl	800edb0 <__sinit>
 800ee36:	3648      	adds	r6, #72	; 0x48
 800ee38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	d503      	bpl.n	800ee48 <__sfp+0x28>
 800ee40:	6833      	ldr	r3, [r6, #0]
 800ee42:	b30b      	cbz	r3, 800ee88 <__sfp+0x68>
 800ee44:	6836      	ldr	r6, [r6, #0]
 800ee46:	e7f7      	b.n	800ee38 <__sfp+0x18>
 800ee48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee4c:	b9d5      	cbnz	r5, 800ee84 <__sfp+0x64>
 800ee4e:	4b16      	ldr	r3, [pc, #88]	; (800eea8 <__sfp+0x88>)
 800ee50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee54:	60e3      	str	r3, [r4, #12]
 800ee56:	6665      	str	r5, [r4, #100]	; 0x64
 800ee58:	f000 f847 	bl	800eeea <__retarget_lock_init_recursive>
 800ee5c:	f7ff ff96 	bl	800ed8c <__sfp_lock_release>
 800ee60:	2208      	movs	r2, #8
 800ee62:	4629      	mov	r1, r5
 800ee64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee6c:	6025      	str	r5, [r4, #0]
 800ee6e:	61a5      	str	r5, [r4, #24]
 800ee70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee74:	f7fd fab2 	bl	800c3dc <memset>
 800ee78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee80:	4620      	mov	r0, r4
 800ee82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee84:	3468      	adds	r4, #104	; 0x68
 800ee86:	e7d9      	b.n	800ee3c <__sfp+0x1c>
 800ee88:	2104      	movs	r1, #4
 800ee8a:	4638      	mov	r0, r7
 800ee8c:	f7ff ff62 	bl	800ed54 <__sfmoreglue>
 800ee90:	4604      	mov	r4, r0
 800ee92:	6030      	str	r0, [r6, #0]
 800ee94:	2800      	cmp	r0, #0
 800ee96:	d1d5      	bne.n	800ee44 <__sfp+0x24>
 800ee98:	f7ff ff78 	bl	800ed8c <__sfp_lock_release>
 800ee9c:	230c      	movs	r3, #12
 800ee9e:	603b      	str	r3, [r7, #0]
 800eea0:	e7ee      	b.n	800ee80 <__sfp+0x60>
 800eea2:	bf00      	nop
 800eea4:	0800f328 	.word	0x0800f328
 800eea8:	ffff0001 	.word	0xffff0001

0800eeac <_fwalk_reent>:
 800eeac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eeb0:	4606      	mov	r6, r0
 800eeb2:	4688      	mov	r8, r1
 800eeb4:	2700      	movs	r7, #0
 800eeb6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eeba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eebe:	f1b9 0901 	subs.w	r9, r9, #1
 800eec2:	d505      	bpl.n	800eed0 <_fwalk_reent+0x24>
 800eec4:	6824      	ldr	r4, [r4, #0]
 800eec6:	2c00      	cmp	r4, #0
 800eec8:	d1f7      	bne.n	800eeba <_fwalk_reent+0xe>
 800eeca:	4638      	mov	r0, r7
 800eecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eed0:	89ab      	ldrh	r3, [r5, #12]
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d907      	bls.n	800eee6 <_fwalk_reent+0x3a>
 800eed6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eeda:	3301      	adds	r3, #1
 800eedc:	d003      	beq.n	800eee6 <_fwalk_reent+0x3a>
 800eede:	4629      	mov	r1, r5
 800eee0:	4630      	mov	r0, r6
 800eee2:	47c0      	blx	r8
 800eee4:	4307      	orrs	r7, r0
 800eee6:	3568      	adds	r5, #104	; 0x68
 800eee8:	e7e9      	b.n	800eebe <_fwalk_reent+0x12>

0800eeea <__retarget_lock_init_recursive>:
 800eeea:	4770      	bx	lr

0800eeec <__retarget_lock_acquire_recursive>:
 800eeec:	4770      	bx	lr

0800eeee <__retarget_lock_release_recursive>:
 800eeee:	4770      	bx	lr

0800eef0 <__swhatbuf_r>:
 800eef0:	b570      	push	{r4, r5, r6, lr}
 800eef2:	460e      	mov	r6, r1
 800eef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eef8:	4614      	mov	r4, r2
 800eefa:	2900      	cmp	r1, #0
 800eefc:	461d      	mov	r5, r3
 800eefe:	b096      	sub	sp, #88	; 0x58
 800ef00:	da08      	bge.n	800ef14 <__swhatbuf_r+0x24>
 800ef02:	2200      	movs	r2, #0
 800ef04:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef08:	602a      	str	r2, [r5, #0]
 800ef0a:	061a      	lsls	r2, r3, #24
 800ef0c:	d410      	bmi.n	800ef30 <__swhatbuf_r+0x40>
 800ef0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef12:	e00e      	b.n	800ef32 <__swhatbuf_r+0x42>
 800ef14:	466a      	mov	r2, sp
 800ef16:	f000 f903 	bl	800f120 <_fstat_r>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	dbf1      	blt.n	800ef02 <__swhatbuf_r+0x12>
 800ef1e:	9a01      	ldr	r2, [sp, #4]
 800ef20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef28:	425a      	negs	r2, r3
 800ef2a:	415a      	adcs	r2, r3
 800ef2c:	602a      	str	r2, [r5, #0]
 800ef2e:	e7ee      	b.n	800ef0e <__swhatbuf_r+0x1e>
 800ef30:	2340      	movs	r3, #64	; 0x40
 800ef32:	2000      	movs	r0, #0
 800ef34:	6023      	str	r3, [r4, #0]
 800ef36:	b016      	add	sp, #88	; 0x58
 800ef38:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef3c <__smakebuf_r>:
 800ef3c:	898b      	ldrh	r3, [r1, #12]
 800ef3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef40:	079d      	lsls	r5, r3, #30
 800ef42:	4606      	mov	r6, r0
 800ef44:	460c      	mov	r4, r1
 800ef46:	d507      	bpl.n	800ef58 <__smakebuf_r+0x1c>
 800ef48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef4c:	6023      	str	r3, [r4, #0]
 800ef4e:	6123      	str	r3, [r4, #16]
 800ef50:	2301      	movs	r3, #1
 800ef52:	6163      	str	r3, [r4, #20]
 800ef54:	b002      	add	sp, #8
 800ef56:	bd70      	pop	{r4, r5, r6, pc}
 800ef58:	466a      	mov	r2, sp
 800ef5a:	ab01      	add	r3, sp, #4
 800ef5c:	f7ff ffc8 	bl	800eef0 <__swhatbuf_r>
 800ef60:	9900      	ldr	r1, [sp, #0]
 800ef62:	4605      	mov	r5, r0
 800ef64:	4630      	mov	r0, r6
 800ef66:	f7ff f969 	bl	800e23c <_malloc_r>
 800ef6a:	b948      	cbnz	r0, 800ef80 <__smakebuf_r+0x44>
 800ef6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef70:	059a      	lsls	r2, r3, #22
 800ef72:	d4ef      	bmi.n	800ef54 <__smakebuf_r+0x18>
 800ef74:	f023 0303 	bic.w	r3, r3, #3
 800ef78:	f043 0302 	orr.w	r3, r3, #2
 800ef7c:	81a3      	strh	r3, [r4, #12]
 800ef7e:	e7e3      	b.n	800ef48 <__smakebuf_r+0xc>
 800ef80:	4b0d      	ldr	r3, [pc, #52]	; (800efb8 <__smakebuf_r+0x7c>)
 800ef82:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef84:	89a3      	ldrh	r3, [r4, #12]
 800ef86:	6020      	str	r0, [r4, #0]
 800ef88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef8c:	81a3      	strh	r3, [r4, #12]
 800ef8e:	9b00      	ldr	r3, [sp, #0]
 800ef90:	6120      	str	r0, [r4, #16]
 800ef92:	6163      	str	r3, [r4, #20]
 800ef94:	9b01      	ldr	r3, [sp, #4]
 800ef96:	b15b      	cbz	r3, 800efb0 <__smakebuf_r+0x74>
 800ef98:	4630      	mov	r0, r6
 800ef9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef9e:	f000 f8d1 	bl	800f144 <_isatty_r>
 800efa2:	b128      	cbz	r0, 800efb0 <__smakebuf_r+0x74>
 800efa4:	89a3      	ldrh	r3, [r4, #12]
 800efa6:	f023 0303 	bic.w	r3, r3, #3
 800efaa:	f043 0301 	orr.w	r3, r3, #1
 800efae:	81a3      	strh	r3, [r4, #12]
 800efb0:	89a0      	ldrh	r0, [r4, #12]
 800efb2:	4305      	orrs	r5, r0
 800efb4:	81a5      	strh	r5, [r4, #12]
 800efb6:	e7cd      	b.n	800ef54 <__smakebuf_r+0x18>
 800efb8:	0800ed49 	.word	0x0800ed49

0800efbc <_malloc_usable_size_r>:
 800efbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efc0:	1f18      	subs	r0, r3, #4
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	bfbc      	itt	lt
 800efc6:	580b      	ldrlt	r3, [r1, r0]
 800efc8:	18c0      	addlt	r0, r0, r3
 800efca:	4770      	bx	lr

0800efcc <_raise_r>:
 800efcc:	291f      	cmp	r1, #31
 800efce:	b538      	push	{r3, r4, r5, lr}
 800efd0:	4604      	mov	r4, r0
 800efd2:	460d      	mov	r5, r1
 800efd4:	d904      	bls.n	800efe0 <_raise_r+0x14>
 800efd6:	2316      	movs	r3, #22
 800efd8:	6003      	str	r3, [r0, #0]
 800efda:	f04f 30ff 	mov.w	r0, #4294967295
 800efde:	bd38      	pop	{r3, r4, r5, pc}
 800efe0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800efe2:	b112      	cbz	r2, 800efea <_raise_r+0x1e>
 800efe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800efe8:	b94b      	cbnz	r3, 800effe <_raise_r+0x32>
 800efea:	4620      	mov	r0, r4
 800efec:	f000 f830 	bl	800f050 <_getpid_r>
 800eff0:	462a      	mov	r2, r5
 800eff2:	4601      	mov	r1, r0
 800eff4:	4620      	mov	r0, r4
 800eff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800effa:	f000 b817 	b.w	800f02c <_kill_r>
 800effe:	2b01      	cmp	r3, #1
 800f000:	d00a      	beq.n	800f018 <_raise_r+0x4c>
 800f002:	1c59      	adds	r1, r3, #1
 800f004:	d103      	bne.n	800f00e <_raise_r+0x42>
 800f006:	2316      	movs	r3, #22
 800f008:	6003      	str	r3, [r0, #0]
 800f00a:	2001      	movs	r0, #1
 800f00c:	e7e7      	b.n	800efde <_raise_r+0x12>
 800f00e:	2400      	movs	r4, #0
 800f010:	4628      	mov	r0, r5
 800f012:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f016:	4798      	blx	r3
 800f018:	2000      	movs	r0, #0
 800f01a:	e7e0      	b.n	800efde <_raise_r+0x12>

0800f01c <raise>:
 800f01c:	4b02      	ldr	r3, [pc, #8]	; (800f028 <raise+0xc>)
 800f01e:	4601      	mov	r1, r0
 800f020:	6818      	ldr	r0, [r3, #0]
 800f022:	f7ff bfd3 	b.w	800efcc <_raise_r>
 800f026:	bf00      	nop
 800f028:	20000190 	.word	0x20000190

0800f02c <_kill_r>:
 800f02c:	b538      	push	{r3, r4, r5, lr}
 800f02e:	2300      	movs	r3, #0
 800f030:	4d06      	ldr	r5, [pc, #24]	; (800f04c <_kill_r+0x20>)
 800f032:	4604      	mov	r4, r0
 800f034:	4608      	mov	r0, r1
 800f036:	4611      	mov	r1, r2
 800f038:	602b      	str	r3, [r5, #0]
 800f03a:	f7f7 ff6b 	bl	8006f14 <_kill>
 800f03e:	1c43      	adds	r3, r0, #1
 800f040:	d102      	bne.n	800f048 <_kill_r+0x1c>
 800f042:	682b      	ldr	r3, [r5, #0]
 800f044:	b103      	cbz	r3, 800f048 <_kill_r+0x1c>
 800f046:	6023      	str	r3, [r4, #0]
 800f048:	bd38      	pop	{r3, r4, r5, pc}
 800f04a:	bf00      	nop
 800f04c:	200019bc 	.word	0x200019bc

0800f050 <_getpid_r>:
 800f050:	f7f7 bf5e 	b.w	8006f10 <_getpid>

0800f054 <__sread>:
 800f054:	b510      	push	{r4, lr}
 800f056:	460c      	mov	r4, r1
 800f058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f05c:	f000 f894 	bl	800f188 <_read_r>
 800f060:	2800      	cmp	r0, #0
 800f062:	bfab      	itete	ge
 800f064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f066:	89a3      	ldrhlt	r3, [r4, #12]
 800f068:	181b      	addge	r3, r3, r0
 800f06a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f06e:	bfac      	ite	ge
 800f070:	6563      	strge	r3, [r4, #84]	; 0x54
 800f072:	81a3      	strhlt	r3, [r4, #12]
 800f074:	bd10      	pop	{r4, pc}

0800f076 <__swrite>:
 800f076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f07a:	461f      	mov	r7, r3
 800f07c:	898b      	ldrh	r3, [r1, #12]
 800f07e:	4605      	mov	r5, r0
 800f080:	05db      	lsls	r3, r3, #23
 800f082:	460c      	mov	r4, r1
 800f084:	4616      	mov	r6, r2
 800f086:	d505      	bpl.n	800f094 <__swrite+0x1e>
 800f088:	2302      	movs	r3, #2
 800f08a:	2200      	movs	r2, #0
 800f08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f090:	f000 f868 	bl	800f164 <_lseek_r>
 800f094:	89a3      	ldrh	r3, [r4, #12]
 800f096:	4632      	mov	r2, r6
 800f098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f09c:	81a3      	strh	r3, [r4, #12]
 800f09e:	4628      	mov	r0, r5
 800f0a0:	463b      	mov	r3, r7
 800f0a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0aa:	f000 b817 	b.w	800f0dc <_write_r>

0800f0ae <__sseek>:
 800f0ae:	b510      	push	{r4, lr}
 800f0b0:	460c      	mov	r4, r1
 800f0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b6:	f000 f855 	bl	800f164 <_lseek_r>
 800f0ba:	1c43      	adds	r3, r0, #1
 800f0bc:	89a3      	ldrh	r3, [r4, #12]
 800f0be:	bf15      	itete	ne
 800f0c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f0c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f0c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f0ca:	81a3      	strheq	r3, [r4, #12]
 800f0cc:	bf18      	it	ne
 800f0ce:	81a3      	strhne	r3, [r4, #12]
 800f0d0:	bd10      	pop	{r4, pc}

0800f0d2 <__sclose>:
 800f0d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0d6:	f000 b813 	b.w	800f100 <_close_r>
	...

0800f0dc <_write_r>:
 800f0dc:	b538      	push	{r3, r4, r5, lr}
 800f0de:	4604      	mov	r4, r0
 800f0e0:	4608      	mov	r0, r1
 800f0e2:	4611      	mov	r1, r2
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	4d05      	ldr	r5, [pc, #20]	; (800f0fc <_write_r+0x20>)
 800f0e8:	602a      	str	r2, [r5, #0]
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	f7f7 ff30 	bl	8006f50 <_write>
 800f0f0:	1c43      	adds	r3, r0, #1
 800f0f2:	d102      	bne.n	800f0fa <_write_r+0x1e>
 800f0f4:	682b      	ldr	r3, [r5, #0]
 800f0f6:	b103      	cbz	r3, 800f0fa <_write_r+0x1e>
 800f0f8:	6023      	str	r3, [r4, #0]
 800f0fa:	bd38      	pop	{r3, r4, r5, pc}
 800f0fc:	200019bc 	.word	0x200019bc

0800f100 <_close_r>:
 800f100:	b538      	push	{r3, r4, r5, lr}
 800f102:	2300      	movs	r3, #0
 800f104:	4d05      	ldr	r5, [pc, #20]	; (800f11c <_close_r+0x1c>)
 800f106:	4604      	mov	r4, r0
 800f108:	4608      	mov	r0, r1
 800f10a:	602b      	str	r3, [r5, #0]
 800f10c:	f7f7 ff2e 	bl	8006f6c <_close>
 800f110:	1c43      	adds	r3, r0, #1
 800f112:	d102      	bne.n	800f11a <_close_r+0x1a>
 800f114:	682b      	ldr	r3, [r5, #0]
 800f116:	b103      	cbz	r3, 800f11a <_close_r+0x1a>
 800f118:	6023      	str	r3, [r4, #0]
 800f11a:	bd38      	pop	{r3, r4, r5, pc}
 800f11c:	200019bc 	.word	0x200019bc

0800f120 <_fstat_r>:
 800f120:	b538      	push	{r3, r4, r5, lr}
 800f122:	2300      	movs	r3, #0
 800f124:	4d06      	ldr	r5, [pc, #24]	; (800f140 <_fstat_r+0x20>)
 800f126:	4604      	mov	r4, r0
 800f128:	4608      	mov	r0, r1
 800f12a:	4611      	mov	r1, r2
 800f12c:	602b      	str	r3, [r5, #0]
 800f12e:	f7f7 ff21 	bl	8006f74 <_fstat>
 800f132:	1c43      	adds	r3, r0, #1
 800f134:	d102      	bne.n	800f13c <_fstat_r+0x1c>
 800f136:	682b      	ldr	r3, [r5, #0]
 800f138:	b103      	cbz	r3, 800f13c <_fstat_r+0x1c>
 800f13a:	6023      	str	r3, [r4, #0]
 800f13c:	bd38      	pop	{r3, r4, r5, pc}
 800f13e:	bf00      	nop
 800f140:	200019bc 	.word	0x200019bc

0800f144 <_isatty_r>:
 800f144:	b538      	push	{r3, r4, r5, lr}
 800f146:	2300      	movs	r3, #0
 800f148:	4d05      	ldr	r5, [pc, #20]	; (800f160 <_isatty_r+0x1c>)
 800f14a:	4604      	mov	r4, r0
 800f14c:	4608      	mov	r0, r1
 800f14e:	602b      	str	r3, [r5, #0]
 800f150:	f7f7 ff16 	bl	8006f80 <_isatty>
 800f154:	1c43      	adds	r3, r0, #1
 800f156:	d102      	bne.n	800f15e <_isatty_r+0x1a>
 800f158:	682b      	ldr	r3, [r5, #0]
 800f15a:	b103      	cbz	r3, 800f15e <_isatty_r+0x1a>
 800f15c:	6023      	str	r3, [r4, #0]
 800f15e:	bd38      	pop	{r3, r4, r5, pc}
 800f160:	200019bc 	.word	0x200019bc

0800f164 <_lseek_r>:
 800f164:	b538      	push	{r3, r4, r5, lr}
 800f166:	4604      	mov	r4, r0
 800f168:	4608      	mov	r0, r1
 800f16a:	4611      	mov	r1, r2
 800f16c:	2200      	movs	r2, #0
 800f16e:	4d05      	ldr	r5, [pc, #20]	; (800f184 <_lseek_r+0x20>)
 800f170:	602a      	str	r2, [r5, #0]
 800f172:	461a      	mov	r2, r3
 800f174:	f7f7 ff06 	bl	8006f84 <_lseek>
 800f178:	1c43      	adds	r3, r0, #1
 800f17a:	d102      	bne.n	800f182 <_lseek_r+0x1e>
 800f17c:	682b      	ldr	r3, [r5, #0]
 800f17e:	b103      	cbz	r3, 800f182 <_lseek_r+0x1e>
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	bd38      	pop	{r3, r4, r5, pc}
 800f184:	200019bc 	.word	0x200019bc

0800f188 <_read_r>:
 800f188:	b538      	push	{r3, r4, r5, lr}
 800f18a:	4604      	mov	r4, r0
 800f18c:	4608      	mov	r0, r1
 800f18e:	4611      	mov	r1, r2
 800f190:	2200      	movs	r2, #0
 800f192:	4d05      	ldr	r5, [pc, #20]	; (800f1a8 <_read_r+0x20>)
 800f194:	602a      	str	r2, [r5, #0]
 800f196:	461a      	mov	r2, r3
 800f198:	f7f7 fecc 	bl	8006f34 <_read>
 800f19c:	1c43      	adds	r3, r0, #1
 800f19e:	d102      	bne.n	800f1a6 <_read_r+0x1e>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	b103      	cbz	r3, 800f1a6 <_read_r+0x1e>
 800f1a4:	6023      	str	r3, [r4, #0]
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	200019bc 	.word	0x200019bc

0800f1ac <_init>:
 800f1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ae:	bf00      	nop
 800f1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1b2:	bc08      	pop	{r3}
 800f1b4:	469e      	mov	lr, r3
 800f1b6:	4770      	bx	lr

0800f1b8 <_fini>:
 800f1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ba:	bf00      	nop
 800f1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1be:	bc08      	pop	{r3}
 800f1c0:	469e      	mov	lr, r3
 800f1c2:	4770      	bx	lr
