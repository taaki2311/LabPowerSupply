
MainBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d12c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800d270  0800d270  0001d270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d79c  0800d79c  00020370  2**0
                  CONTENTS
  4 .ARM          00000008  0800d79c  0800d79c  0001d79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7a4  0800d7a4  00020370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7a4  0800d7a4  0001d7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7a8  0800d7a8  0001d7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  0800d7ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001660  20000370  0800db1c  00020370  2**2
                  ALLOC
 10 ._user_heap_stack 00003000  200019d0  0800db1c  000219d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY
 12 .debug_info   000299e5  00000000  00000000  00020399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000526c  00000000  00000000  00049d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001e3a9  00000000  00000000  0004efea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  0006d398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005818  00000000  00000000  0006e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f59  00000000  00000000  00073ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cc3e  00000000  00000000  0008de31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009048d  00000000  00000000  000baa6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014aefc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005230  00000000  00000000  0014af4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d254 	.word	0x0800d254

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	0800d254 	.word	0x0800d254

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__gesf2>:
 8000f74:	f04f 3cff 	mov.w	ip, #4294967295
 8000f78:	e006      	b.n	8000f88 <__cmpsf2+0x4>
 8000f7a:	bf00      	nop

08000f7c <__lesf2>:
 8000f7c:	f04f 0c01 	mov.w	ip, #1
 8000f80:	e002      	b.n	8000f88 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__cmpsf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	bf18      	it	ne
 8000f9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9e:	d011      	beq.n	8000fc4 <__cmpsf2+0x40>
 8000fa0:	b001      	add	sp, #4
 8000fa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa6:	bf18      	it	ne
 8000fa8:	ea90 0f01 	teqne	r0, r1
 8000fac:	bf58      	it	pl
 8000fae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fb2:	bf88      	it	hi
 8000fb4:	17c8      	asrhi	r0, r1, #31
 8000fb6:	bf38      	it	cc
 8000fb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fbc:	bf18      	it	ne
 8000fbe:	f040 0001 	orrne.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	d102      	bne.n	8000fd0 <__cmpsf2+0x4c>
 8000fca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fce:	d105      	bne.n	8000fdc <__cmpsf2+0x58>
 8000fd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd4:	d1e4      	bne.n	8000fa0 <__cmpsf2+0x1c>
 8000fd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fda:	d0e1      	beq.n	8000fa0 <__cmpsf2+0x1c>
 8000fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_cfrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4661      	mov	r1, ip
 8000fea:	e7ff      	b.n	8000fec <__aeabi_cfcmpeq>

08000fec <__aeabi_cfcmpeq>:
 8000fec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fee:	f7ff ffc9 	bl	8000f84 <__cmpsf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	bf48      	it	mi
 8000ff6:	f110 0f00 	cmnmi.w	r0, #0
 8000ffa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ffc <__aeabi_fcmpeq>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff fff4 	bl	8000fec <__aeabi_cfcmpeq>
 8001004:	bf0c      	ite	eq
 8001006:	2001      	moveq	r0, #1
 8001008:	2000      	movne	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmplt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffea 	bl	8000fec <__aeabi_cfcmpeq>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmple>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffe0 	bl	8000fec <__aeabi_cfcmpeq>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpge>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffd2 	bl	8000fe4 <__aeabi_cfrcmple>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpgt>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffc8 	bl	8000fe4 <__aeabi_cfrcmple>
 8001054:	bf34      	ite	cc
 8001056:	2001      	movcc	r0, #1
 8001058:	2000      	movcs	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_f2uiz>:
 8001060:	0042      	lsls	r2, r0, #1
 8001062:	d20e      	bcs.n	8001082 <__aeabi_f2uiz+0x22>
 8001064:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001068:	d30b      	bcc.n	8001082 <__aeabi_f2uiz+0x22>
 800106a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001072:	d409      	bmi.n	8001088 <__aeabi_f2uiz+0x28>
 8001074:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	4770      	bx	lr
 8001082:	f04f 0000 	mov.w	r0, #0
 8001086:	4770      	bx	lr
 8001088:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800108c:	d101      	bne.n	8001092 <__aeabi_f2uiz+0x32>
 800108e:	0242      	lsls	r2, r0, #9
 8001090:	d102      	bne.n	8001098 <__aeabi_f2uiz+0x38>
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	4770      	bx	lr
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295
 80010b4:	f000 b976 	b.w	80013a4 <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f806 	bl	80010d0 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	9e08      	ldr	r6, [sp, #32]
 80010d6:	460d      	mov	r5, r1
 80010d8:	4604      	mov	r4, r0
 80010da:	4688      	mov	r8, r1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d14d      	bne.n	800117c <__udivmoddi4+0xac>
 80010e0:	428a      	cmp	r2, r1
 80010e2:	4694      	mov	ip, r2
 80010e4:	d968      	bls.n	80011b8 <__udivmoddi4+0xe8>
 80010e6:	fab2 f282 	clz	r2, r2
 80010ea:	b152      	cbz	r2, 8001102 <__udivmoddi4+0x32>
 80010ec:	fa01 f302 	lsl.w	r3, r1, r2
 80010f0:	f1c2 0120 	rsb	r1, r2, #32
 80010f4:	fa20 f101 	lsr.w	r1, r0, r1
 80010f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010fc:	ea41 0803 	orr.w	r8, r1, r3
 8001100:	4094      	lsls	r4, r2
 8001102:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001106:	fbb8 f7f1 	udiv	r7, r8, r1
 800110a:	fa1f fe8c 	uxth.w	lr, ip
 800110e:	fb01 8817 	mls	r8, r1, r7, r8
 8001112:	fb07 f00e 	mul.w	r0, r7, lr
 8001116:	0c23      	lsrs	r3, r4, #16
 8001118:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800111c:	4298      	cmp	r0, r3
 800111e:	d90a      	bls.n	8001136 <__udivmoddi4+0x66>
 8001120:	eb1c 0303 	adds.w	r3, ip, r3
 8001124:	f107 35ff 	add.w	r5, r7, #4294967295
 8001128:	f080 811e 	bcs.w	8001368 <__udivmoddi4+0x298>
 800112c:	4298      	cmp	r0, r3
 800112e:	f240 811b 	bls.w	8001368 <__udivmoddi4+0x298>
 8001132:	3f02      	subs	r7, #2
 8001134:	4463      	add	r3, ip
 8001136:	1a1b      	subs	r3, r3, r0
 8001138:	fbb3 f0f1 	udiv	r0, r3, r1
 800113c:	fb01 3310 	mls	r3, r1, r0, r3
 8001140:	fb00 fe0e 	mul.w	lr, r0, lr
 8001144:	b2a4      	uxth	r4, r4
 8001146:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800114a:	45a6      	cmp	lr, r4
 800114c:	d90a      	bls.n	8001164 <__udivmoddi4+0x94>
 800114e:	eb1c 0404 	adds.w	r4, ip, r4
 8001152:	f100 33ff 	add.w	r3, r0, #4294967295
 8001156:	f080 8109 	bcs.w	800136c <__udivmoddi4+0x29c>
 800115a:	45a6      	cmp	lr, r4
 800115c:	f240 8106 	bls.w	800136c <__udivmoddi4+0x29c>
 8001160:	4464      	add	r4, ip
 8001162:	3802      	subs	r0, #2
 8001164:	2100      	movs	r1, #0
 8001166:	eba4 040e 	sub.w	r4, r4, lr
 800116a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800116e:	b11e      	cbz	r6, 8001178 <__udivmoddi4+0xa8>
 8001170:	2300      	movs	r3, #0
 8001172:	40d4      	lsrs	r4, r2
 8001174:	e9c6 4300 	strd	r4, r3, [r6]
 8001178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117c:	428b      	cmp	r3, r1
 800117e:	d908      	bls.n	8001192 <__udivmoddi4+0xc2>
 8001180:	2e00      	cmp	r6, #0
 8001182:	f000 80ee 	beq.w	8001362 <__udivmoddi4+0x292>
 8001186:	2100      	movs	r1, #0
 8001188:	e9c6 0500 	strd	r0, r5, [r6]
 800118c:	4608      	mov	r0, r1
 800118e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001192:	fab3 f183 	clz	r1, r3
 8001196:	2900      	cmp	r1, #0
 8001198:	d14a      	bne.n	8001230 <__udivmoddi4+0x160>
 800119a:	42ab      	cmp	r3, r5
 800119c:	d302      	bcc.n	80011a4 <__udivmoddi4+0xd4>
 800119e:	4282      	cmp	r2, r0
 80011a0:	f200 80fc 	bhi.w	800139c <__udivmoddi4+0x2cc>
 80011a4:	1a84      	subs	r4, r0, r2
 80011a6:	eb65 0303 	sbc.w	r3, r5, r3
 80011aa:	2001      	movs	r0, #1
 80011ac:	4698      	mov	r8, r3
 80011ae:	2e00      	cmp	r6, #0
 80011b0:	d0e2      	beq.n	8001178 <__udivmoddi4+0xa8>
 80011b2:	e9c6 4800 	strd	r4, r8, [r6]
 80011b6:	e7df      	b.n	8001178 <__udivmoddi4+0xa8>
 80011b8:	b902      	cbnz	r2, 80011bc <__udivmoddi4+0xec>
 80011ba:	deff      	udf	#255	; 0xff
 80011bc:	fab2 f282 	clz	r2, r2
 80011c0:	2a00      	cmp	r2, #0
 80011c2:	f040 8091 	bne.w	80012e8 <__udivmoddi4+0x218>
 80011c6:	eba1 000c 	sub.w	r0, r1, ip
 80011ca:	2101      	movs	r1, #1
 80011cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011d0:	fa1f fe8c 	uxth.w	lr, ip
 80011d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80011d8:	fb07 0013 	mls	r0, r7, r3, r0
 80011dc:	0c25      	lsrs	r5, r4, #16
 80011de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011e2:	fb0e f003 	mul.w	r0, lr, r3
 80011e6:	42a8      	cmp	r0, r5
 80011e8:	d908      	bls.n	80011fc <__udivmoddi4+0x12c>
 80011ea:	eb1c 0505 	adds.w	r5, ip, r5
 80011ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80011f2:	d202      	bcs.n	80011fa <__udivmoddi4+0x12a>
 80011f4:	42a8      	cmp	r0, r5
 80011f6:	f200 80ce 	bhi.w	8001396 <__udivmoddi4+0x2c6>
 80011fa:	4643      	mov	r3, r8
 80011fc:	1a2d      	subs	r5, r5, r0
 80011fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8001202:	fb07 5510 	mls	r5, r7, r0, r5
 8001206:	fb0e fe00 	mul.w	lr, lr, r0
 800120a:	b2a4      	uxth	r4, r4
 800120c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001210:	45a6      	cmp	lr, r4
 8001212:	d908      	bls.n	8001226 <__udivmoddi4+0x156>
 8001214:	eb1c 0404 	adds.w	r4, ip, r4
 8001218:	f100 35ff 	add.w	r5, r0, #4294967295
 800121c:	d202      	bcs.n	8001224 <__udivmoddi4+0x154>
 800121e:	45a6      	cmp	lr, r4
 8001220:	f200 80b6 	bhi.w	8001390 <__udivmoddi4+0x2c0>
 8001224:	4628      	mov	r0, r5
 8001226:	eba4 040e 	sub.w	r4, r4, lr
 800122a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800122e:	e79e      	b.n	800116e <__udivmoddi4+0x9e>
 8001230:	f1c1 0720 	rsb	r7, r1, #32
 8001234:	408b      	lsls	r3, r1
 8001236:	fa22 fc07 	lsr.w	ip, r2, r7
 800123a:	ea4c 0c03 	orr.w	ip, ip, r3
 800123e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001242:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001246:	fbba f8f9 	udiv	r8, sl, r9
 800124a:	fa20 f307 	lsr.w	r3, r0, r7
 800124e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001252:	408d      	lsls	r5, r1
 8001254:	fa1f fe8c 	uxth.w	lr, ip
 8001258:	431d      	orrs	r5, r3
 800125a:	fa00 f301 	lsl.w	r3, r0, r1
 800125e:	fb08 f00e 	mul.w	r0, r8, lr
 8001262:	0c2c      	lsrs	r4, r5, #16
 8001264:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001268:	42a0      	cmp	r0, r4
 800126a:	fa02 f201 	lsl.w	r2, r2, r1
 800126e:	d90b      	bls.n	8001288 <__udivmoddi4+0x1b8>
 8001270:	eb1c 0404 	adds.w	r4, ip, r4
 8001274:	f108 3aff 	add.w	sl, r8, #4294967295
 8001278:	f080 8088 	bcs.w	800138c <__udivmoddi4+0x2bc>
 800127c:	42a0      	cmp	r0, r4
 800127e:	f240 8085 	bls.w	800138c <__udivmoddi4+0x2bc>
 8001282:	f1a8 0802 	sub.w	r8, r8, #2
 8001286:	4464      	add	r4, ip
 8001288:	1a24      	subs	r4, r4, r0
 800128a:	fbb4 f0f9 	udiv	r0, r4, r9
 800128e:	fb09 4410 	mls	r4, r9, r0, r4
 8001292:	fb00 fe0e 	mul.w	lr, r0, lr
 8001296:	b2ad      	uxth	r5, r5
 8001298:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800129c:	45a6      	cmp	lr, r4
 800129e:	d908      	bls.n	80012b2 <__udivmoddi4+0x1e2>
 80012a0:	eb1c 0404 	adds.w	r4, ip, r4
 80012a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80012a8:	d26c      	bcs.n	8001384 <__udivmoddi4+0x2b4>
 80012aa:	45a6      	cmp	lr, r4
 80012ac:	d96a      	bls.n	8001384 <__udivmoddi4+0x2b4>
 80012ae:	3802      	subs	r0, #2
 80012b0:	4464      	add	r4, ip
 80012b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012b6:	fba0 9502 	umull	r9, r5, r0, r2
 80012ba:	eba4 040e 	sub.w	r4, r4, lr
 80012be:	42ac      	cmp	r4, r5
 80012c0:	46c8      	mov	r8, r9
 80012c2:	46ae      	mov	lr, r5
 80012c4:	d356      	bcc.n	8001374 <__udivmoddi4+0x2a4>
 80012c6:	d053      	beq.n	8001370 <__udivmoddi4+0x2a0>
 80012c8:	2e00      	cmp	r6, #0
 80012ca:	d069      	beq.n	80013a0 <__udivmoddi4+0x2d0>
 80012cc:	ebb3 0208 	subs.w	r2, r3, r8
 80012d0:	eb64 040e 	sbc.w	r4, r4, lr
 80012d4:	fa22 f301 	lsr.w	r3, r2, r1
 80012d8:	fa04 f707 	lsl.w	r7, r4, r7
 80012dc:	431f      	orrs	r7, r3
 80012de:	40cc      	lsrs	r4, r1
 80012e0:	e9c6 7400 	strd	r7, r4, [r6]
 80012e4:	2100      	movs	r1, #0
 80012e6:	e747      	b.n	8001178 <__udivmoddi4+0xa8>
 80012e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ec:	f1c2 0120 	rsb	r1, r2, #32
 80012f0:	fa25 f301 	lsr.w	r3, r5, r1
 80012f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012f8:	fa20 f101 	lsr.w	r1, r0, r1
 80012fc:	4095      	lsls	r5, r2
 80012fe:	430d      	orrs	r5, r1
 8001300:	fbb3 f1f7 	udiv	r1, r3, r7
 8001304:	fb07 3311 	mls	r3, r7, r1, r3
 8001308:	fa1f fe8c 	uxth.w	lr, ip
 800130c:	0c28      	lsrs	r0, r5, #16
 800130e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001312:	fb01 f30e 	mul.w	r3, r1, lr
 8001316:	4283      	cmp	r3, r0
 8001318:	fa04 f402 	lsl.w	r4, r4, r2
 800131c:	d908      	bls.n	8001330 <__udivmoddi4+0x260>
 800131e:	eb1c 0000 	adds.w	r0, ip, r0
 8001322:	f101 38ff 	add.w	r8, r1, #4294967295
 8001326:	d22f      	bcs.n	8001388 <__udivmoddi4+0x2b8>
 8001328:	4283      	cmp	r3, r0
 800132a:	d92d      	bls.n	8001388 <__udivmoddi4+0x2b8>
 800132c:	3902      	subs	r1, #2
 800132e:	4460      	add	r0, ip
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	fbb0 f3f7 	udiv	r3, r0, r7
 8001336:	fb07 0013 	mls	r0, r7, r3, r0
 800133a:	b2ad      	uxth	r5, r5
 800133c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001340:	fb03 f00e 	mul.w	r0, r3, lr
 8001344:	42a8      	cmp	r0, r5
 8001346:	d908      	bls.n	800135a <__udivmoddi4+0x28a>
 8001348:	eb1c 0505 	adds.w	r5, ip, r5
 800134c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001350:	d216      	bcs.n	8001380 <__udivmoddi4+0x2b0>
 8001352:	42a8      	cmp	r0, r5
 8001354:	d914      	bls.n	8001380 <__udivmoddi4+0x2b0>
 8001356:	3b02      	subs	r3, #2
 8001358:	4465      	add	r5, ip
 800135a:	1a28      	subs	r0, r5, r0
 800135c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001360:	e738      	b.n	80011d4 <__udivmoddi4+0x104>
 8001362:	4631      	mov	r1, r6
 8001364:	4630      	mov	r0, r6
 8001366:	e707      	b.n	8001178 <__udivmoddi4+0xa8>
 8001368:	462f      	mov	r7, r5
 800136a:	e6e4      	b.n	8001136 <__udivmoddi4+0x66>
 800136c:	4618      	mov	r0, r3
 800136e:	e6f9      	b.n	8001164 <__udivmoddi4+0x94>
 8001370:	454b      	cmp	r3, r9
 8001372:	d2a9      	bcs.n	80012c8 <__udivmoddi4+0x1f8>
 8001374:	ebb9 0802 	subs.w	r8, r9, r2
 8001378:	eb65 0e0c 	sbc.w	lr, r5, ip
 800137c:	3801      	subs	r0, #1
 800137e:	e7a3      	b.n	80012c8 <__udivmoddi4+0x1f8>
 8001380:	4643      	mov	r3, r8
 8001382:	e7ea      	b.n	800135a <__udivmoddi4+0x28a>
 8001384:	4628      	mov	r0, r5
 8001386:	e794      	b.n	80012b2 <__udivmoddi4+0x1e2>
 8001388:	4641      	mov	r1, r8
 800138a:	e7d1      	b.n	8001330 <__udivmoddi4+0x260>
 800138c:	46d0      	mov	r8, sl
 800138e:	e77b      	b.n	8001288 <__udivmoddi4+0x1b8>
 8001390:	4464      	add	r4, ip
 8001392:	3802      	subs	r0, #2
 8001394:	e747      	b.n	8001226 <__udivmoddi4+0x156>
 8001396:	3b02      	subs	r3, #2
 8001398:	4465      	add	r5, ip
 800139a:	e72f      	b.n	80011fc <__udivmoddi4+0x12c>
 800139c:	4608      	mov	r0, r1
 800139e:	e706      	b.n	80011ae <__udivmoddi4+0xde>
 80013a0:	4631      	mov	r1, r6
 80013a2:	e6e9      	b.n	8001178 <__udivmoddi4+0xa8>

080013a4 <__aeabi_idiv0>:
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <MX_ADC_Init>:

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80013a8:	2300      	movs	r3, #0
{
 80013aa:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80013ac:	4c3f      	ldr	r4, [pc, #252]	; (80014ac <MX_ADC_Init+0x104>)
{
 80013ae:	b08a      	sub	sp, #40	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b0:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80013b4:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80013b8:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80013bc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80013c0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013c4:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80013c8:	9304      	str	r3, [sp, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013ca:	9300      	str	r3, [sp, #0]
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 6;
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013cc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d0:	63a3      	str	r3, [r4, #56]	; 0x38
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80013d2:	9309      	str	r3, [sp, #36]	; 0x24
  hadc.Instance = ADC1;
 80013d4:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <MX_ADC_Init+0x108>)
  hadc.Init.ContinuousConvMode = ENABLE;
 80013d6:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80013d8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013dc:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc.Init.NbrOfConversion = 6;
 80013e0:	2606      	movs	r6, #6
  hadc.Instance = ADC1;
 80013e2:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e4:	2310      	movs	r3, #16
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013e6:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80013e8:	6061      	str	r1, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013ea:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 80013ec:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc.Init.NbrOfConversion = 6;
 80013f0:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 80013f2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f6:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013f8:	f003 fec0 	bl	800517c <HAL_ADC_Init>
 80013fc:	b108      	cbz	r0, 8001402 <MX_ADC_Init+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fe:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	e7fe      	b.n	8001400 <MX_ADC_Init+0x58>
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001402:	2302      	movs	r3, #2
 8001404:	4a2b      	ldr	r2, [pc, #172]	; (80014b4 <MX_ADC_Init+0x10c>)
  AnalogWDGConfig.LowThreshold = 0;
 8001406:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 800140a:	a904      	add	r1, sp, #16
 800140c:	4620      	mov	r0, r4
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800140e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  AnalogWDGConfig.ITMode = ENABLE;
 8001412:	f88d 5018 	strb.w	r5, [sp, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8001416:	f004 f9b7 	bl	8005788 <HAL_ADC_AnalogWDGConfig>
 800141a:	b108      	cbz	r0, 8001420 <MX_ADC_Init+0x78>
 800141c:	b672      	cpsid	i
  while (1)
 800141e:	e7fe      	b.n	800141e <MX_ADC_Init+0x76>
  sConfig.Channel = ADC_CHANNEL_0;
 8001420:	2200      	movs	r2, #0
 8001422:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001424:	4669      	mov	r1, sp
 8001426:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8001428:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 800142c:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800142e:	f004 f8df 	bl	80055f0 <HAL_ADC_ConfigChannel>
 8001432:	b108      	cbz	r0, 8001438 <MX_ADC_Init+0x90>
 8001434:	b672      	cpsid	i
  while (1)
 8001436:	e7fe      	b.n	8001436 <MX_ADC_Init+0x8e>
  sConfig.Channel = ADC_CHANNEL_1;
 8001438:	2201      	movs	r2, #1
 800143a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800143c:	4669      	mov	r1, sp
 800143e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8001440:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001444:	f004 f8d4 	bl	80055f0 <HAL_ADC_ConfigChannel>
 8001448:	b108      	cbz	r0, 800144e <MX_ADC_Init+0xa6>
 800144a:	b672      	cpsid	i
  while (1)
 800144c:	e7fe      	b.n	800144c <MX_ADC_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_2;
 800144e:	2202      	movs	r2, #2
 8001450:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001452:	4669      	mov	r1, sp
 8001454:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8001456:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800145a:	f004 f8c9 	bl	80055f0 <HAL_ADC_ConfigChannel>
 800145e:	b108      	cbz	r0, 8001464 <MX_ADC_Init+0xbc>
 8001460:	b672      	cpsid	i
  while (1)
 8001462:	e7fe      	b.n	8001462 <MX_ADC_Init+0xba>
  sConfig.Channel = ADC_CHANNEL_3;
 8001464:	2203      	movs	r2, #3
 8001466:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001468:	4669      	mov	r1, sp
 800146a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 800146c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001470:	f004 f8be 	bl	80055f0 <HAL_ADC_ConfigChannel>
 8001474:	b108      	cbz	r0, 800147a <MX_ADC_Init+0xd2>
 8001476:	b672      	cpsid	i
  while (1)
 8001478:	e7fe      	b.n	8001478 <MX_ADC_Init+0xd0>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800147a:	2211      	movs	r2, #17
 800147c:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800147e:	4669      	mov	r1, sp
 8001480:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001482:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001486:	f004 f8b3 	bl	80055f0 <HAL_ADC_ConfigChannel>
 800148a:	b108      	cbz	r0, 8001490 <MX_ADC_Init+0xe8>
 800148c:	b672      	cpsid	i
  while (1)
 800148e:	e7fe      	b.n	800148e <MX_ADC_Init+0xe6>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001490:	2210      	movs	r2, #16
 8001492:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001494:	4669      	mov	r1, sp
 8001496:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001498:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800149c:	f004 f8a8 	bl	80055f0 <HAL_ADC_ConfigChannel>
 80014a0:	b108      	cbz	r0, 80014a6 <MX_ADC_Init+0xfe>
 80014a2:	b672      	cpsid	i
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <MX_ADC_Init+0xfc>
}
 80014a6:	b00a      	add	sp, #40	; 0x28
 80014a8:	bd70      	pop	{r4, r5, r6, pc}
 80014aa:	bf00      	nop
 80014ac:	200003c0 	.word	0x200003c0
 80014b0:	40012400 	.word	0x40012400
 80014b4:	00800200 	.word	0x00800200

080014b8 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b8:	2300      	movs	r3, #0
{
 80014ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014be:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80014c2:	2403      	movs	r4, #3
 80014c4:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c6:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c8:	f04f 0810 	mov.w	r8, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014cc:	f04f 0e02 	mov.w	lr, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80014d0:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80014d4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
{
 80014d8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014da:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80014de:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 80014e2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80014ea:	e9cd 3303 	strd	r3, r3, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ee:	4a16      	ldr	r2, [pc, #88]	; (8001548 <SystemClock_Config+0x90>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f0:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f2:	9300      	str	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f4:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f6:	a806      	add	r0, sp, #24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80014fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001500:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001502:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001506:	e9cd ec0f 	strd	lr, ip, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800150a:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001512:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001514:	f006 f828 	bl	8007568 <HAL_RCC_OscConfig>
 8001518:	b108      	cbz	r0, 800151e <SystemClock_Config+0x66>
 800151a:	b672      	cpsid	i
  while (1)
 800151c:	e7fe      	b.n	800151c <SystemClock_Config+0x64>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151e:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001520:	240f      	movs	r4, #15
 8001522:	2503      	movs	r5, #3
 8001524:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001526:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001528:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800152a:	4631      	mov	r1, r6
 800152c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152e:	e9cd 4500 	strd	r4, r5, [sp]
 8001532:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001536:	f006 fa77 	bl	8007a28 <HAL_RCC_ClockConfig>
 800153a:	b108      	cbz	r0, 8001540 <SystemClock_Config+0x88>
 800153c:	b672      	cpsid	i
  while (1)
 800153e:	e7fe      	b.n	800153e <SystemClock_Config+0x86>
}
 8001540:	b014      	add	sp, #80	; 0x50
 8001542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001546:	bf00      	nop
 8001548:	40007000 	.word	0x40007000

0800154c <EXTI1_IRQHandler>:
{
 800154c:	b410      	push	{r4}
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 800154e:	2407      	movs	r4, #7
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <EXTI1_IRQHandler+0x14>)
	memset (usbbuffer, '\0', 128); // clear the buffer
 8001552:	2280      	movs	r2, #128	; 0x80
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 8001554:	615c      	str	r4, [r3, #20]
	memset (usbbuffer, '\0', 128); // clear the buffer
 8001556:	2100      	movs	r1, #0
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <EXTI1_IRQHandler+0x18>)
}
 800155a:	bc10      	pop	{r4}
	memset (usbbuffer, '\0', 128); // clear the buffer
 800155c:	f008 bf92 	b.w	800a484 <memset>
 8001560:	40010400 	.word	0x40010400
 8001564:	200007ac 	.word	0x200007ac

08001568 <update_ADC_watchdog>:
void update_ADC_watchdog(float val){
 8001568:	b570      	push	{r4, r5, r6, lr}
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <update_ADC_watchdog+0x78>)
void update_ADC_watchdog(float val){
 800156c:	b082      	sub	sp, #8
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800156e:	491d      	ldr	r1, [pc, #116]	; (80015e4 <update_ADC_watchdog+0x7c>)
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8001570:	891e      	ldrh	r6, [r3, #8]
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001572:	f7ff fbaf 	bl	8000cd4 <__aeabi_fmul>
 8001576:	491c      	ldr	r1, [pc, #112]	; (80015e8 <update_ADC_watchdog+0x80>)
 8001578:	f7ff fbac 	bl	8000cd4 <__aeabi_fmul>
 800157c:	491b      	ldr	r1, [pc, #108]	; (80015ec <update_ADC_watchdog+0x84>)
 800157e:	f7ff fba9 	bl	8000cd4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <update_ADC_watchdog+0x88>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001584:	4604      	mov	r4, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001586:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8001588:	b2b6      	uxth	r6, r6
 800158a:	8818      	ldrh	r0, [r3, #0]
 800158c:	f7ff fb4a 	bl	8000c24 <__aeabi_ui2f>
 8001590:	4605      	mov	r5, r0
 8001592:	4630      	mov	r0, r6
 8001594:	f7ff fb46 	bl	8000c24 <__aeabi_ui2f>
 8001598:	4601      	mov	r1, r0
 800159a:	4628      	mov	r0, r5
 800159c:	f7ff fc4e 	bl	8000e3c <__aeabi_fdiv>
 80015a0:	4914      	ldr	r1, [pc, #80]	; (80015f4 <update_ADC_watchdog+0x8c>)
 80015a2:	f7ff fb97 	bl	8000cd4 <__aeabi_fmul>
 80015a6:	4601      	mov	r1, r0
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80015a8:	4620      	mov	r0, r4
 80015aa:	f7ff fc47 	bl	8000e3c <__aeabi_fdiv>
 80015ae:	f7ff fd57 	bl	8001060 <__aeabi_f2uiz>
	if(amp >= 4095){
 80015b2:	f640 72fe 	movw	r2, #4094	; 0xffe
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80015b6:	b280      	uxth	r0, r0
 80015b8:	f8ad 0006 	strh.w	r0, [sp, #6]
	if(amp >= 4095){
 80015bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d905      	bls.n	80015d2 <update_ADC_watchdog+0x6a>
		ADC1->HTR = 4095;
 80015c6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <update_ADC_watchdog+0x90>)
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015ce:	b002      	add	sp, #8
 80015d0:	bd70      	pop	{r4, r5, r6, pc}
		ADC1->HTR = amp;
 80015d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <update_ADC_watchdog+0x90>)
 80015d8:	b29b      	uxth	r3, r3
 80015da:	6293      	str	r3, [r2, #40]	; 0x28
}
 80015dc:	b002      	add	sp, #8
 80015de:	bd70      	pop	{r4, r5, r6, pc}
 80015e0:	2000039c 	.word	0x2000039c
 80015e4:	3e19999a 	.word	0x3e19999a
 80015e8:	41a00000 	.word	0x41a00000
 80015ec:	457ff000 	.word	0x457ff000
 80015f0:	20000020 	.word	0x20000020
 80015f4:	40400000 	.word	0x40400000
 80015f8:	40012400 	.word	0x40012400

080015fc <lcd_createChar>:
{
 80015fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001600:	2564      	movs	r5, #100	; 0x64
 8001602:	482d      	ldr	r0, [pc, #180]	; (80016b8 <lcd_createChar+0xbc>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001604:	492d      	ldr	r1, [pc, #180]	; (80016bc <lcd_createChar+0xc0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001606:	4607      	mov	r7, r0
{
 8001608:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800160a:	2304      	movs	r3, #4
 800160c:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800160e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001610:	9500      	str	r5, [sp, #0]
 8001612:	214e      	movs	r1, #78	; 0x4e
 8001614:	f004 feb4 	bl	8006380 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001618:	2001      	movs	r0, #1
 800161a:	f003 fd9d 	bl	8005158 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800161e:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001620:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001622:	9303      	str	r3, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001624:	4638      	mov	r0, r7
 8001626:	2304      	movs	r3, #4
 8001628:	4c26      	ldr	r4, [pc, #152]	; (80016c4 <lcd_createChar+0xc8>)
 800162a:	9500      	str	r5, [sp, #0]
 800162c:	aa03      	add	r2, sp, #12
 800162e:	f004 fea7 	bl	8006380 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001632:	2001      	movs	r0, #1
 8001634:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8001638:	f003 fd8e 	bl	8005158 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800163c:	2304      	movs	r3, #4
		lcd_send_data(customChar[i]);
 800163e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001642:	4638      	mov	r0, r7
	data_l = ((data<<4)&0xf0);
 8001644:	fa02 f103 	lsl.w	r1, r2, r3
 8001648:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 800164a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800164e:	f042 0c09 	orr.w	ip, r2, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001652:	f041 0e09 	orr.w	lr, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001656:	f042 090d 	orr.w	r9, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800165a:	f041 080d 	orr.w	r8, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800165e:	aa03      	add	r2, sp, #12
 8001660:	214e      	movs	r1, #78	; 0x4e
 8001662:	9500      	str	r5, [sp, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001664:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001668:	f88d e00f 	strb.w	lr, [sp, #15]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800166c:	f88d 900c 	strb.w	r9, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001670:	f88d 800e 	strb.w	r8, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001674:	f004 fe84 	bl	8006380 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8001678:	2001      	movs	r0, #1
 800167a:	f003 fd6d 	bl	8005158 <HAL_Delay>
	for(int i = 0; i <= 63 ; i++){
 800167e:	42a6      	cmp	r6, r4
 8001680:	d1dc      	bne.n	800163c <lcd_createChar+0x40>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001682:	490f      	ldr	r1, [pc, #60]	; (80016c0 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001684:	aa03      	add	r2, sp, #12
 8001686:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001688:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800168a:	9500      	str	r5, [sp, #0]
 800168c:	214e      	movs	r1, #78	; 0x4e
 800168e:	480a      	ldr	r0, [pc, #40]	; (80016b8 <lcd_createChar+0xbc>)
 8001690:	f004 fe76 	bl	8006380 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001694:	2001      	movs	r0, #1
 8001696:	f003 fd5f 	bl	8005158 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800169a:	480b      	ldr	r0, [pc, #44]	; (80016c8 <lcd_createChar+0xcc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800169c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800169e:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80016a0:	214e      	movs	r1, #78	; 0x4e
 80016a2:	aa03      	add	r2, sp, #12
 80016a4:	9500      	str	r5, [sp, #0]
 80016a6:	4804      	ldr	r0, [pc, #16]	; (80016b8 <lcd_createChar+0xbc>)
 80016a8:	f004 fe6a 	bl	8006380 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80016ac:	2001      	movs	r0, #1
}
 80016ae:	b005      	add	sp, #20
 80016b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 80016b4:	f003 bd50 	b.w	8005158 <HAL_Delay>
 80016b8:	200004fc 	.word	0x200004fc
 80016bc:	080c484c 	.word	0x080c484c
 80016c0:	080c080c 	.word	0x080c080c
 80016c4:	0800d2fb 	.word	0x0800d2fb
 80016c8:	282c080c 	.word	0x282c080c

080016cc <lcd_init>:
{
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 80016ce:	2064      	movs	r0, #100	; 0x64
{
 80016d0:	b085      	sub	sp, #20
	HAL_Delay(100);
 80016d2:	f003 fd41 	bl	8005158 <HAL_Delay>
 80016d6:	2403      	movs	r4, #3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80016d8:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016da:	4f2e      	ldr	r7, [pc, #184]	; (8001794 <lcd_init+0xc8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80016dc:	4e2e      	ldr	r6, [pc, #184]	; (8001798 <lcd_init+0xcc>)
 80016de:	2304      	movs	r3, #4
 80016e0:	214e      	movs	r1, #78	; 0x4e
 80016e2:	aa03      	add	r2, sp, #12
 80016e4:	4630      	mov	r0, r6
 80016e6:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016e8:	9703      	str	r7, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80016ea:	f004 fe49 	bl	8006380 <HAL_I2C_Master_Transmit>
		HAL_Delay(45);
 80016ee:	202d      	movs	r0, #45	; 0x2d
 80016f0:	f003 fd32 	bl	8005158 <HAL_Delay>
	for(i=0;i<3;i++){//sending 3 times: select 4-bit mode
 80016f4:	1e63      	subs	r3, r4, #1
 80016f6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80016fa:	d1f0      	bne.n	80016de <lcd_init+0x12>
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80016fc:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016fe:	4927      	ldr	r1, [pc, #156]	; (800179c <lcd_init+0xd0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001700:	2304      	movs	r3, #4
 8001702:	aa03      	add	r2, sp, #12
 8001704:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001706:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001708:	4823      	ldr	r0, [pc, #140]	; (8001798 <lcd_init+0xcc>)
 800170a:	214e      	movs	r1, #78	; 0x4e
 800170c:	f004 fe38 	bl	8006380 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8001710:	4620      	mov	r0, r4
 8001712:	f003 fd21 	bl	8005158 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <lcd_init+0xd4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001718:	2304      	movs	r3, #4
 800171a:	214e      	movs	r1, #78	; 0x4e
 800171c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800171e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001720:	481d      	ldr	r0, [pc, #116]	; (8001798 <lcd_init+0xcc>)
 8001722:	aa03      	add	r2, sp, #12
 8001724:	f004 fe2c 	bl	8006380 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001728:	2001      	movs	r0, #1
 800172a:	f003 fd15 	bl	8005158 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800172e:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <lcd_init+0xd8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001730:	2304      	movs	r3, #4
 8001732:	214e      	movs	r1, #78	; 0x4e
 8001734:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001736:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001738:	4817      	ldr	r0, [pc, #92]	; (8001798 <lcd_init+0xcc>)
 800173a:	aa03      	add	r2, sp, #12
 800173c:	f004 fe20 	bl	8006380 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001740:	2001      	movs	r0, #1
 8001742:	f003 fd09 	bl	8005158 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001746:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <lcd_init+0xdc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001748:	2304      	movs	r3, #4
 800174a:	214e      	movs	r1, #78	; 0x4e
 800174c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800174e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001750:	4811      	ldr	r0, [pc, #68]	; (8001798 <lcd_init+0xcc>)
 8001752:	aa03      	add	r2, sp, #12
 8001754:	f004 fe14 	bl	8006380 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001758:	2001      	movs	r0, #1
 800175a:	f003 fcfd 	bl	8005158 <HAL_Delay>
	lcd_createChar();
 800175e:	f7ff ff4d 	bl	80015fc <lcd_createChar>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <lcd_init+0xe0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001764:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001766:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001768:	2304      	movs	r3, #4
 800176a:	214e      	movs	r1, #78	; 0x4e
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <lcd_init+0xcc>)
 800176e:	aa03      	add	r2, sp, #12
 8001770:	f004 fe06 	bl	8006380 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001774:	4627      	mov	r7, r4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001776:	4e0e      	ldr	r6, [pc, #56]	; (80017b0 <lcd_init+0xe4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001778:	4d07      	ldr	r5, [pc, #28]	; (8001798 <lcd_init+0xcc>)
 800177a:	2304      	movs	r3, #4
 800177c:	214e      	movs	r1, #78	; 0x4e
 800177e:	4628      	mov	r0, r5
 8001780:	aa03      	add	r2, sp, #12
 8001782:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001784:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001786:	f004 fdfb 	bl	8006380 <HAL_I2C_Master_Transmit>
	for (int i=0; i<100; i++)
 800178a:	3c01      	subs	r4, #1
 800178c:	d1f5      	bne.n	800177a <lcd_init+0xae>
}
 800178e:	b005      	add	sp, #20
 8001790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001792:	bf00      	nop
 8001794:	383c080c 	.word	0x383c080c
 8001798:	200004fc 	.word	0x200004fc
 800179c:	282c080c 	.word	0x282c080c
 80017a0:	888c282c 	.word	0x888c282c
 80017a4:	c8cc080c 	.word	0xc8cc080c
 80017a8:	080c888c 	.word	0x080c888c
 80017ac:	080c080c 	.word	0x080c080c
 80017b0:	090d292d 	.word	0x090d292d

080017b4 <lcd_psu_init>:
{
 80017b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80017b8:	2664      	movs	r6, #100	; 0x64
{
 80017ba:	b084      	sub	sp, #16
	lcd_init();
 80017bc:	f7ff ff86 	bl	80016cc <lcd_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80017c0:	49c7      	ldr	r1, [pc, #796]	; (8001ae0 <lcd_psu_init+0x32c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80017c2:	48c8      	ldr	r0, [pc, #800]	; (8001ae4 <lcd_psu_init+0x330>)
 80017c4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80017c6:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80017c8:	aa03      	add	r2, sp, #12
 80017ca:	214e      	movs	r1, #78	; 0x4e
 80017cc:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80017ce:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80017d0:	f004 fdd6 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80017d4:	2356      	movs	r3, #86	; 0x56
 80017d6:	4dc4      	ldr	r5, [pc, #784]	; (8001ae8 <lcd_psu_init+0x334>)
	data_l = ((data<<4)&0xf0);
 80017d8:	011a      	lsls	r2, r3, #4
 80017da:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80017dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80017e0:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80017e4:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80017e8:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80017ec:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80017f0:	2304      	movs	r3, #4
 80017f2:	214e      	movs	r1, #78	; 0x4e
 80017f4:	4638      	mov	r0, r7
 80017f6:	aa03      	add	r2, sp, #12
 80017f8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80017fa:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80017fe:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001802:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001806:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800180a:	f004 fdb9 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800180e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1e0      	bne.n	80017d8 <lcd_psu_init+0x24>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001816:	49b5      	ldr	r1, [pc, #724]	; (8001aec <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001818:	2304      	movs	r3, #4
 800181a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800181c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800181e:	48b1      	ldr	r0, [pc, #708]	; (8001ae4 <lcd_psu_init+0x330>)
 8001820:	214e      	movs	r1, #78	; 0x4e
 8001822:	aa03      	add	r2, sp, #12
 8001824:	f004 fdac 	bl	8006380 <HAL_I2C_Master_Transmit>
 8001828:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 800182a:	2356      	movs	r3, #86	; 0x56
 800182c:	4db0      	ldr	r5, [pc, #704]	; (8001af0 <lcd_psu_init+0x33c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800182e:	4fad      	ldr	r7, [pc, #692]	; (8001ae4 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001830:	011a      	lsls	r2, r3, #4
 8001832:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001838:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800183c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001840:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001844:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001848:	2304      	movs	r3, #4
 800184a:	214e      	movs	r1, #78	; 0x4e
 800184c:	4638      	mov	r0, r7
 800184e:	aa03      	add	r2, sp, #12
 8001850:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001852:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001856:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800185a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800185e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001862:	f004 fd8d 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001866:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1e0      	bne.n	8001830 <lcd_psu_init+0x7c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800186e:	49a1      	ldr	r1, [pc, #644]	; (8001af4 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001870:	2304      	movs	r3, #4
 8001872:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001874:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001876:	489b      	ldr	r0, [pc, #620]	; (8001ae4 <lcd_psu_init+0x330>)
 8001878:	214e      	movs	r1, #78	; 0x4e
 800187a:	aa03      	add	r2, sp, #12
 800187c:	f004 fd80 	bl	8006380 <HAL_I2C_Master_Transmit>
 8001880:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001882:	233a      	movs	r3, #58	; 0x3a
 8001884:	4d9c      	ldr	r5, [pc, #624]	; (8001af8 <lcd_psu_init+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001886:	4f97      	ldr	r7, [pc, #604]	; (8001ae4 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001888:	011a      	lsls	r2, r3, #4
 800188a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800188c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001890:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001894:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001898:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800189c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018a0:	2304      	movs	r3, #4
 80018a2:	214e      	movs	r1, #78	; 0x4e
 80018a4:	4638      	mov	r0, r7
 80018a6:	aa03      	add	r2, sp, #12
 80018a8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80018aa:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80018ae:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80018b2:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80018b6:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018ba:	f004 fd61 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80018be:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1e0      	bne.n	8001888 <lcd_psu_init+0xd4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018c6:	498d      	ldr	r1, [pc, #564]	; (8001afc <lcd_psu_init+0x348>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018c8:	2304      	movs	r3, #4
 80018ca:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018cc:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018ce:	4885      	ldr	r0, [pc, #532]	; (8001ae4 <lcd_psu_init+0x330>)
 80018d0:	214e      	movs	r1, #78	; 0x4e
 80018d2:	aa03      	add	r2, sp, #12
 80018d4:	f004 fd54 	bl	8006380 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018d8:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80018da:	2341      	movs	r3, #65	; 0x41
 80018dc:	4d88      	ldr	r5, [pc, #544]	; (8001b00 <lcd_psu_init+0x34c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018de:	4f81      	ldr	r7, [pc, #516]	; (8001ae4 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 80018e0:	011a      	lsls	r2, r3, #4
 80018e2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80018e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80018e8:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80018ec:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80018f0:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80018f4:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018f8:	2304      	movs	r3, #4
 80018fa:	214e      	movs	r1, #78	; 0x4e
 80018fc:	4638      	mov	r0, r7
 80018fe:	aa03      	add	r2, sp, #12
 8001900:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001902:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001906:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800190a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800190e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001912:	f004 fd35 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001916:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1e0      	bne.n	80018e0 <lcd_psu_init+0x12c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800191e:	4973      	ldr	r1, [pc, #460]	; (8001aec <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001920:	2304      	movs	r3, #4
 8001922:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001924:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001926:	486f      	ldr	r0, [pc, #444]	; (8001ae4 <lcd_psu_init+0x330>)
 8001928:	214e      	movs	r1, #78	; 0x4e
 800192a:	aa03      	add	r2, sp, #12
 800192c:	f004 fd28 	bl	8006380 <HAL_I2C_Master_Transmit>
 8001930:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001932:	2341      	movs	r3, #65	; 0x41
 8001934:	4d73      	ldr	r5, [pc, #460]	; (8001b04 <lcd_psu_init+0x350>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001936:	4f6b      	ldr	r7, [pc, #428]	; (8001ae4 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001938:	011a      	lsls	r2, r3, #4
 800193a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800193c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001940:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001944:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001948:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800194c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001950:	2304      	movs	r3, #4
 8001952:	214e      	movs	r1, #78	; 0x4e
 8001954:	4638      	mov	r0, r7
 8001956:	aa03      	add	r2, sp, #12
 8001958:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800195a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800195e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001962:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001966:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800196a:	f004 fd09 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800196e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1e0      	bne.n	8001938 <lcd_psu_init+0x184>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001976:	495f      	ldr	r1, [pc, #380]	; (8001af4 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001978:	2304      	movs	r3, #4
 800197a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800197c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800197e:	4859      	ldr	r0, [pc, #356]	; (8001ae4 <lcd_psu_init+0x330>)
 8001980:	214e      	movs	r1, #78	; 0x4e
 8001982:	aa03      	add	r2, sp, #12
 8001984:	f004 fcfc 	bl	8006380 <HAL_I2C_Master_Transmit>
 8001988:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 800198a:	233a      	movs	r3, #58	; 0x3a
 800198c:	4d5e      	ldr	r5, [pc, #376]	; (8001b08 <lcd_psu_init+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800198e:	4f55      	ldr	r7, [pc, #340]	; (8001ae4 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001990:	011a      	lsls	r2, r3, #4
 8001992:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001998:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800199c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019a0:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80019a4:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019a8:	2304      	movs	r3, #4
 80019aa:	214e      	movs	r1, #78	; 0x4e
 80019ac:	4638      	mov	r0, r7
 80019ae:	aa03      	add	r2, sp, #12
 80019b0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019b2:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80019b6:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80019ba:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80019be:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019c2:	f004 fcdd 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80019c6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1e0      	bne.n	8001990 <lcd_psu_init+0x1dc>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019ce:	494f      	ldr	r1, [pc, #316]	; (8001b0c <lcd_psu_init+0x358>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019d0:	2304      	movs	r3, #4
 80019d2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019d4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019d6:	4843      	ldr	r0, [pc, #268]	; (8001ae4 <lcd_psu_init+0x330>)
 80019d8:	214e      	movs	r1, #78	; 0x4e
 80019da:	aa03      	add	r2, sp, #12
 80019dc:	f004 fcd0 	bl	8006380 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019e0:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80019e2:	2356      	movs	r3, #86	; 0x56
 80019e4:	4d4a      	ldr	r5, [pc, #296]	; (8001b10 <lcd_psu_init+0x35c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019e6:	4f3f      	ldr	r7, [pc, #252]	; (8001ae4 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 80019e8:	011a      	lsls	r2, r3, #4
 80019ea:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80019ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80019f0:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80019f4:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019f8:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80019fc:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a00:	2304      	movs	r3, #4
 8001a02:	214e      	movs	r1, #78	; 0x4e
 8001a04:	4638      	mov	r0, r7
 8001a06:	aa03      	add	r2, sp, #12
 8001a08:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a0a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a0e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a12:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a16:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a1a:	f004 fcb1 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001a1e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1e0      	bne.n	80019e8 <lcd_psu_init+0x234>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a26:	4931      	ldr	r1, [pc, #196]	; (8001aec <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a28:	2304      	movs	r3, #4
 8001a2a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a2c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a2e:	482d      	ldr	r0, [pc, #180]	; (8001ae4 <lcd_psu_init+0x330>)
 8001a30:	214e      	movs	r1, #78	; 0x4e
 8001a32:	aa03      	add	r2, sp, #12
 8001a34:	f004 fca4 	bl	8006380 <HAL_I2C_Master_Transmit>
 8001a38:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001a3a:	2356      	movs	r3, #86	; 0x56
 8001a3c:	4d35      	ldr	r5, [pc, #212]	; (8001b14 <lcd_psu_init+0x360>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a3e:	4f29      	ldr	r7, [pc, #164]	; (8001ae4 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001a40:	011a      	lsls	r2, r3, #4
 8001a42:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a48:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a4c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a50:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a54:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a58:	2304      	movs	r3, #4
 8001a5a:	214e      	movs	r1, #78	; 0x4e
 8001a5c:	4638      	mov	r0, r7
 8001a5e:	aa03      	add	r2, sp, #12
 8001a60:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a62:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a66:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a6a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a6e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a72:	f004 fc85 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001a76:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1e0      	bne.n	8001a40 <lcd_psu_init+0x28c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a7e:	491d      	ldr	r1, [pc, #116]	; (8001af4 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a80:	2304      	movs	r3, #4
 8001a82:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a84:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a86:	4817      	ldr	r0, [pc, #92]	; (8001ae4 <lcd_psu_init+0x330>)
 8001a88:	214e      	movs	r1, #78	; 0x4e
 8001a8a:	aa03      	add	r2, sp, #12
 8001a8c:	f004 fc78 	bl	8006380 <HAL_I2C_Master_Transmit>
 8001a90:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001a92:	233a      	movs	r3, #58	; 0x3a
 8001a94:	4d18      	ldr	r5, [pc, #96]	; (8001af8 <lcd_psu_init+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a96:	4f13      	ldr	r7, [pc, #76]	; (8001ae4 <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001a98:	011a      	lsls	r2, r3, #4
 8001a9a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001aa0:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001aa4:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001aa8:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001aac:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	214e      	movs	r1, #78	; 0x4e
 8001ab4:	4638      	mov	r0, r7
 8001ab6:	aa03      	add	r2, sp, #12
 8001ab8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001aba:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001abe:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001ac2:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001ac6:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001aca:	f004 fc59 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001ace:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1e0      	bne.n	8001a98 <lcd_psu_init+0x2e4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ad6:	4910      	ldr	r1, [pc, #64]	; (8001b18 <lcd_psu_init+0x364>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ad8:	2304      	movs	r3, #4
 8001ada:	9600      	str	r6, [sp, #0]
 8001adc:	e01e      	b.n	8001b1c <lcd_psu_init+0x368>
 8001ade:	bf00      	nop
 8001ae0:	080c888c 	.word	0x080c888c
 8001ae4:	200004fc 	.word	0x200004fc
 8001ae8:	0800d270 	.word	0x0800d270
 8001aec:	191d090d 	.word	0x191d090d
 8001af0:	0800d27c 	.word	0x0800d27c
 8001af4:	090d090d 	.word	0x090d090d
 8001af8:	0800d280 	.word	0x0800d280
 8001afc:	080cc8cc 	.word	0x080cc8cc
 8001b00:	0800d288 	.word	0x0800d288
 8001b04:	0800d294 	.word	0x0800d294
 8001b08:	0800d298 	.word	0x0800d298
 8001b0c:	484c989c 	.word	0x484c989c
 8001b10:	0800d2a0 	.word	0x0800d2a0
 8001b14:	0800d2ac 	.word	0x0800d2ac
 8001b18:	484cd8dc 	.word	0x484cd8dc
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b1c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b1e:	4841      	ldr	r0, [pc, #260]	; (8001c24 <lcd_psu_init+0x470>)
 8001b20:	214e      	movs	r1, #78	; 0x4e
 8001b22:	aa03      	add	r2, sp, #12
 8001b24:	f004 fc2c 	bl	8006380 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b28:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001b2a:	2341      	movs	r3, #65	; 0x41
 8001b2c:	4d3e      	ldr	r5, [pc, #248]	; (8001c28 <lcd_psu_init+0x474>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b2e:	4f3d      	ldr	r7, [pc, #244]	; (8001c24 <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001b30:	011a      	lsls	r2, r3, #4
 8001b32:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b38:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b3c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b40:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b44:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b48:	2304      	movs	r3, #4
 8001b4a:	214e      	movs	r1, #78	; 0x4e
 8001b4c:	4638      	mov	r0, r7
 8001b4e:	aa03      	add	r2, sp, #12
 8001b50:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b52:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b56:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b5a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b5e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b62:	f004 fc0d 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001b66:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1e0      	bne.n	8001b30 <lcd_psu_init+0x37c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b6e:	492f      	ldr	r1, [pc, #188]	; (8001c2c <lcd_psu_init+0x478>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b70:	2304      	movs	r3, #4
 8001b72:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b74:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b76:	482b      	ldr	r0, [pc, #172]	; (8001c24 <lcd_psu_init+0x470>)
 8001b78:	214e      	movs	r1, #78	; 0x4e
 8001b7a:	aa03      	add	r2, sp, #12
 8001b7c:	f004 fc00 	bl	8006380 <HAL_I2C_Master_Transmit>
 8001b80:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001b82:	2341      	movs	r3, #65	; 0x41
 8001b84:	4d2a      	ldr	r5, [pc, #168]	; (8001c30 <lcd_psu_init+0x47c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b86:	4f27      	ldr	r7, [pc, #156]	; (8001c24 <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001b88:	011a      	lsls	r2, r3, #4
 8001b8a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b90:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b94:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b98:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b9c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	214e      	movs	r1, #78	; 0x4e
 8001ba4:	4638      	mov	r0, r7
 8001ba6:	aa03      	add	r2, sp, #12
 8001ba8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001baa:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001bae:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001bb2:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001bb6:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bba:	f004 fbe1 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001bbe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1e0      	bne.n	8001b88 <lcd_psu_init+0x3d4>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001bc6:	491b      	ldr	r1, [pc, #108]	; (8001c34 <lcd_psu_init+0x480>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bc8:	2304      	movs	r3, #4
 8001bca:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001bcc:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bce:	4815      	ldr	r0, [pc, #84]	; (8001c24 <lcd_psu_init+0x470>)
 8001bd0:	214e      	movs	r1, #78	; 0x4e
 8001bd2:	aa03      	add	r2, sp, #12
 8001bd4:	f004 fbd4 	bl	8006380 <HAL_I2C_Master_Transmit>
 8001bd8:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001bda:	233a      	movs	r3, #58	; 0x3a
 8001bdc:	4c16      	ldr	r4, [pc, #88]	; (8001c38 <lcd_psu_init+0x484>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bde:	4d11      	ldr	r5, [pc, #68]	; (8001c24 <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001be0:	011a      	lsls	r2, r3, #4
 8001be2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001be8:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001bec:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001bf0:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001bf4:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	214e      	movs	r1, #78	; 0x4e
 8001bfc:	4628      	mov	r0, r5
 8001bfe:	aa03      	add	r2, sp, #12
 8001c00:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c02:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001c06:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001c0a:	f88d 700e 	strb.w	r7, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001c0e:	f88d e00f 	strb.w	lr, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c12:	f004 fbb5 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001c16:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1e0      	bne.n	8001be0 <lcd_psu_init+0x42c>
}
 8001c1e:	b004      	add	sp, #16
 8001c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c24:	200004fc 	.word	0x200004fc
 8001c28:	0800d2b0 	.word	0x0800d2b0
 8001c2c:	191d090d 	.word	0x191d090d
 8001c30:	0800d2bc 	.word	0x0800d2bc
 8001c34:	090d090d 	.word	0x090d090d
 8001c38:	0800d298 	.word	0x0800d298

08001c3c <ourInit>:
void ourInit(void){
 8001c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_ADC_DeInit(&hadc);
 8001c40:	4f54      	ldr	r7, [pc, #336]	; (8001d94 <ourInit+0x158>)
void ourInit(void){
 8001c42:	b08d      	sub	sp, #52	; 0x34
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001c44:	2201      	movs	r2, #1
 8001c46:	2140      	movs	r1, #64	; 0x40
 8001c48:	4853      	ldr	r0, [pc, #332]	; (8001d98 <ourInit+0x15c>)
 8001c4a:	f004 fab7 	bl	80061bc <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 8001c4e:	4638      	mov	r0, r7
 8001c50:	f003 fb64 	bl	800531c <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 8001c54:	4851      	ldr	r0, [pc, #324]	; (8001d9c <ourInit+0x160>)
 8001c56:	f003 ffb3 	bl	8005bc0 <HAL_DMA_DeInit>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c5c:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <ourInit+0x164>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c5e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c60:	69d9      	ldr	r1, [r3, #28]
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001c62:	4d50      	ldr	r5, [pc, #320]	; (8001da4 <ourInit+0x168>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c64:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001c68:	61d9      	str	r1, [r3, #28]
 8001c6a:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c6c:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c72:	9307      	str	r3, [sp, #28]
 8001c74:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c76:	f003 fe6d 	bl	8005954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c7a:	200b      	movs	r0, #11
 8001c7c:	f003 fea8 	bl	80059d0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	200e      	movs	r0, #14
 8001c84:	4611      	mov	r1, r2
 8001c86:	f003 fe65 	bl	8005954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c8a:	200e      	movs	r0, #14
 8001c8c:	f003 fea0 	bl	80059d0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	200f      	movs	r0, #15
 8001c94:	4611      	mov	r1, r2
 8001c96:	f003 fe5d 	bl	8005954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c9a:	200f      	movs	r0, #15
 8001c9c:	f003 fe98 	bl	80059d0 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 8001ca0:	f7ff fb82 	bl	80013a8 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_values, 6);// start the adc in dma mode
 8001ca4:	2206      	movs	r2, #6
 8001ca6:	4638      	mov	r0, r7
 8001ca8:	493f      	ldr	r1, [pc, #252]	; (8001da8 <ourInit+0x16c>)
 8001caa:	f003 fde1 	bl	8005870 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4628      	mov	r0, r5
 8001cb2:	f003 fedd 	bl	8005a70 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001cb6:	2110      	movs	r1, #16
 8001cb8:	4628      	mov	r0, r5
 8001cba:	f003 fed9 	bl	8005a70 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f003 ff03 	bl	8005ad0 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001cca:	2300      	movs	r3, #0
 8001ccc:	4628      	mov	r0, r5
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	f003 fefd 	bl	8005ad0 <HAL_DAC_SetValue>
	ExtiConfig.Line = EXTI_LINE_1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	4a34      	ldr	r2, [pc, #208]	; (8001dac <ourInit+0x170>)
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001cda:	a908      	add	r1, sp, #32
	ExtiConfig.Line = EXTI_LINE_1;
 8001cdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001ce0:	2303      	movs	r3, #3
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001ce2:	4833      	ldr	r0, [pc, #204]	; (8001db0 <ourInit+0x174>)
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001ce4:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001ce6:	f004 f881 	bl	8005dec <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001cec:	2440      	movs	r4, #64	; 0x40
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001cee:	4611      	mov	r1, r2
 8001cf0:	2007      	movs	r0, #7
 8001cf2:	f003 fe2f 	bl	8005954 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001cf6:	2007      	movs	r0, #7
 8001cf8:	f003 fe6a 	bl	80059d0 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001d02:	482c      	ldr	r0, [pc, #176]	; (8001db4 <ourInit+0x178>)
 8001d04:	f004 fa5a 	bl	80061bc <HAL_GPIO_WritePin>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001d08:	4e2b      	ldr	r6, [pc, #172]	; (8001db8 <ourInit+0x17c>)
	lcd_psu_init();
 8001d0a:	f7ff fd53 	bl	80017b4 <lcd_psu_init>
	HAL_TIM_Base_Start_IT(&htim3);
 8001d0e:	482b      	ldr	r0, [pc, #172]	; (8001dbc <ourInit+0x180>)
 8001d10:	f006 f818 	bl	8007d44 <HAL_TIM_Base_Start_IT>
	memset (usbbuffer, '\0', 128);  // clear the buffer
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	2100      	movs	r1, #0
 8001d18:	4829      	ldr	r0, [pc, #164]	; (8001dc0 <ourInit+0x184>)
 8001d1a:	f008 fbb3 	bl	800a484 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001d1e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8001dc4 <ourInit+0x188>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001d22:	4622      	mov	r2, r4
 8001d24:	2100      	movs	r1, #0
 8001d26:	4630      	mov	r0, r6
 8001d28:	f008 fbac 	bl	800a484 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001d2c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001dc8 <ourInit+0x18c>
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001d30:	4622      	mov	r2, r4
 8001d32:	2100      	movs	r1, #0
 8001d34:	4825      	ldr	r0, [pc, #148]	; (8001dcc <ourInit+0x190>)
 8001d36:	f008 fba5 	bl	800a484 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4648      	mov	r0, r9
 8001d40:	f008 fba0 	bl	800a484 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001d44:	4622      	mov	r2, r4
 8001d46:	4649      	mov	r1, r9
 8001d48:	4640      	mov	r0, r8
 8001d4a:	f006 fa6f 	bl	800822c <HAL_UART_Receive_DMA>
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001d4e:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <ourInit+0x194>)
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <ourInit+0x198>)
 8001d52:	6815      	ldr	r5, [r2, #0]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <ourInit+0x19c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b25b      	sxtb	r3, r3
 8001d5c:	9304      	str	r3, [sp, #16]
 8001d5e:	f7fe fb7b 	bl	8000458 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4628      	mov	r0, r5
 8001d68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d6c:	f7fe fb74 	bl	8000458 <__aeabi_f2d>
 8001d70:	4682      	mov	sl, r0
 8001d72:	468b      	mov	fp, r1
 8001d74:	4630      	mov	r0, r6
 8001d76:	2120      	movs	r1, #32
 8001d78:	e9cd ab00 	strd	sl, fp, [sp]
 8001d7c:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <ourInit+0x1a0>)
 8001d7e:	f008 ffe9 	bl	800ad54 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001d82:	4622      	mov	r2, r4
 8001d84:	4631      	mov	r1, r6
 8001d86:	4640      	mov	r0, r8
}
 8001d88:	b00d      	add	sp, #52	; 0x34
 8001d8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001d8e:	f006 ba11 	b.w	80081b4 <HAL_UART_Transmit_DMA>
 8001d92:	bf00      	nop
 8001d94:	200003c0 	.word	0x200003c0
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	20000428 	.word	0x20000428
 8001da0:	40023800 	.word	0x40023800
 8001da4:	20000414 	.word	0x20000414
 8001da8:	20000390 	.word	0x20000390
 8001dac:	06000001 	.word	0x06000001
 8001db0:	200004f4 	.word	0x200004f4
 8001db4:	40020800 	.word	0x40020800
 8001db8:	2000072c 	.word	0x2000072c
 8001dbc:	20000610 	.word	0x20000610
 8001dc0:	200007ac 	.word	0x200007ac
 8001dc4:	200006e4 	.word	0x200006e4
 8001dc8:	20000690 	.word	0x20000690
 8001dcc:	2000076c 	.word	0x2000076c
 8001dd0:	20000830 	.word	0x20000830
 8001dd4:	200003a8 	.word	0x200003a8
 8001dd8:	200003b5 	.word	0x200003b5
 8001ddc:	0800d2c0 	.word	0x0800d2c0

08001de0 <main>:
{
 8001de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	2400      	movs	r4, #0
{
 8001de6:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8001de8:	f003 f994 	bl	8005114 <HAL_Init>
  SystemClock_Config();
 8001dec:	f7ff fb64 	bl	80014b8 <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001df0:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8001df6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfa:	4dac      	ldr	r5, [pc, #688]	; (80020ac <main+0x2cc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfe:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e00:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	61eb      	str	r3, [r5, #28]
 8001e08:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e0a:	48a9      	ldr	r0, [pc, #676]	; (80020b0 <main+0x2d0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	9304      	str	r3, [sp, #16]
 8001e12:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e16:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61eb      	str	r3, [r5, #28]
 8001e1c:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e1e:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	4013      	ands	r3, r2
 8001e22:	9305      	str	r3, [sp, #20]
 8001e24:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e26:	69eb      	ldr	r3, [r5, #28]
  hdac.Instance = DAC;
 8001e28:	f8df 8288 	ldr.w	r8, [pc, #648]	; 80020b4 <main+0x2d4>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	61eb      	str	r3, [r5, #28]
 8001e32:	69eb      	ldr	r3, [r5, #28]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	9306      	str	r3, [sp, #24]
 8001e3a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3c:	69eb      	ldr	r3, [r5, #28]
 8001e3e:	f043 0302 	orr.w	r3, r3, #2
 8001e42:	61eb      	str	r3, [r5, #28]
 8001e44:	69eb      	ldr	r3, [r5, #28]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	9307      	str	r3, [sp, #28]
 8001e4c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e4e:	f004 f9b5 	bl	80061bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Status_LED_2_Pin|Status_LED_1_Pin|Col_1_Pin|Col_2_Pin
 8001e52:	4622      	mov	r2, r4
 8001e54:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001e58:	4897      	ldr	r0, [pc, #604]	; (80020b8 <main+0x2d8>)
 8001e5a:	f004 f9af 	bl	80061bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e5e:	2240      	movs	r2, #64	; 0x40
 8001e60:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001e62:	4893      	ldr	r0, [pc, #588]	; (80020b0 <main+0x2d0>)
 8001e64:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001e6a:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f004 f823 	bl	8005eb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Status_LED_2_Pin|Status_LED_1_Pin|Col_1_Pin|Col_2_Pin
 8001e72:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8001e76:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e78:	488f      	ldr	r0, [pc, #572]	; (80020b8 <main+0x2d8>)
 8001e7a:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Status_LED_2_Pin|Status_LED_1_Pin|Col_1_Pin|Col_2_Pin
 8001e7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001e80:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e84:	f004 f818 	bl	8005eb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e88:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 8001e8a:	f647 4205 	movw	r2, #31749	; 0x7c05
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 8001e90:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	4889      	ldr	r0, [pc, #548]	; (80020bc <main+0x2dc>)
 8001e96:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 8001e98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f004 f80c 	bl	8005eb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2202      	movs	r2, #2
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	4885      	ldr	r0, [pc, #532]	; (80020bc <main+0x2dc>)
 8001ea6:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001ea8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f004 f803 	bl	8005eb8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001eb2:	4622      	mov	r2, r4
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	2006      	movs	r0, #6
 8001eb8:	f003 fd4c 	bl	8005954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ebc:	2006      	movs	r0, #6
 8001ebe:	f003 fd87 	bl	80059d0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001ec2:	4622      	mov	r2, r4
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	2008      	movs	r0, #8
 8001ec8:	f003 fd44 	bl	8005954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ecc:	2008      	movs	r0, #8
 8001ece:	f003 fd7f 	bl	80059d0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ed2:	4622      	mov	r2, r4
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	2028      	movs	r0, #40	; 0x28
 8001ed8:	f003 fd3c 	bl	8005954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001edc:	2028      	movs	r0, #40	; 0x28
 8001ede:	f003 fd77 	bl	80059d0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ee2:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ee4:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eea:	61eb      	str	r3, [r5, #28]
 8001eec:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001eee:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ef4:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ef6:	9303      	str	r3, [sp, #12]
 8001ef8:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001efa:	f003 fd2b 	bl	8005954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001efe:	200b      	movs	r0, #11
 8001f00:	f003 fd66 	bl	80059d0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001f04:	4622      	mov	r2, r4
 8001f06:	4621      	mov	r1, r4
 8001f08:	200e      	movs	r0, #14
 8001f0a:	f003 fd23 	bl	8005954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f0e:	200e      	movs	r0, #14
 8001f10:	f003 fd5e 	bl	80059d0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f14:	4622      	mov	r2, r4
 8001f16:	4621      	mov	r1, r4
 8001f18:	200f      	movs	r0, #15
 8001f1a:	f003 fd1b 	bl	8005954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f1e:	200f      	movs	r0, #15
 8001f20:	f003 fd56 	bl	80059d0 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 8001f24:	f7ff fa40 	bl	80013a8 <MX_ADC_Init>
  hdac.Instance = DAC;
 8001f28:	4b65      	ldr	r3, [pc, #404]	; (80020c0 <main+0x2e0>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001f2a:	4640      	mov	r0, r8
  DAC_ChannelConfTypeDef sConfig = {0};
 8001f2c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  hdac.Instance = DAC;
 8001f30:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001f34:	f003 fd86 	bl	8005a44 <HAL_DAC_Init>
 8001f38:	b108      	cbz	r0, 8001f3e <main+0x15e>
 8001f3a:	b672      	cpsid	i
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <main+0x15c>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f3e:	4602      	mov	r2, r0
 8001f40:	a90a      	add	r1, sp, #40	; 0x28
 8001f42:	4640      	mov	r0, r8
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f44:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f48:	f003 fdd8 	bl	8005afc <HAL_DAC_ConfigChannel>
 8001f4c:	b108      	cbz	r0, 8001f52 <main+0x172>
 8001f4e:	b672      	cpsid	i
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <main+0x170>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001f52:	2210      	movs	r2, #16
 8001f54:	4640      	mov	r0, r8
 8001f56:	a90a      	add	r1, sp, #40	; 0x28
 8001f58:	f003 fdd0 	bl	8005afc <HAL_DAC_ConfigChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	b108      	cbz	r0, 8001f64 <main+0x184>
 8001f60:	b672      	cpsid	i
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <main+0x182>
  hi2c1.Instance = I2C1;
 8001f64:	4857      	ldr	r0, [pc, #348]	; (80020c4 <main+0x2e4>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f66:	219c      	movs	r1, #156	; 0x9c
  hi2c1.Init.OwnAddress2 = 0;
 8001f68:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f6c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f70:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001f76:	4c54      	ldr	r4, [pc, #336]	; (80020c8 <main+0x2e8>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f78:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hi2c1.Init.ClockSpeed = 100000;
 8001f7c:	4b53      	ldr	r3, [pc, #332]	; (80020cc <main+0x2ec>)
 8001f7e:	e9c0 4300 	strd	r4, r3, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f82:	f004 f935 	bl	80061f0 <HAL_I2C_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	b9b8      	cbnz	r0, 8001fba <main+0x1da>
  huart1.Instance = USART1;
 8001f8a:	4851      	ldr	r0, [pc, #324]	; (80020d0 <main+0x2f0>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001f8c:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f94:	60c3      	str	r3, [r0, #12]
  huart1.Init.BaudRate = 9600;
 8001f96:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001f9a:	6043      	str	r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001f9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fa0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	6143      	str	r3, [r0, #20]
  huart1.Instance = USART1;
 8001fa6:	4b4b      	ldr	r3, [pc, #300]	; (80020d4 <main+0x2f4>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001fa8:	f8c0 8008 	str.w	r8, [r0, #8]
  huart1.Instance = USART1;
 8001fac:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fae:	f006 f877 	bl	80080a0 <HAL_UART_Init>
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	b118      	cbz	r0, 8001fbe <main+0x1de>
 8001fb6:	b672      	cpsid	i
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <main+0x1d8>
 8001fba:	b672      	cpsid	i
 8001fbc:	e7fe      	b.n	8001fbc <main+0x1dc>
  MX_USB_DEVICE_Init();
 8001fbe:	f007 ff99 	bl	8009ef4 <MX_USB_DEVICE_Init>
  htim2.Init.Prescaler = 32000-1;
 8001fc2:	f647 49ff 	movw	r9, #31999	; 0x7cff
  htim2.Instance = TIM2;
 8001fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 10;
 8001fca:	230a      	movs	r3, #10
  htim2.Instance = TIM2;
 8001fcc:	4d42      	ldr	r5, [pc, #264]	; (80020d8 <main+0x2f8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fce:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fd2:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fd4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd8:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fdc:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe0:	60ac      	str	r4, [r5, #8]
  htim2.Instance = TIM2;
 8001fe2:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = 10;
 8001fe4:	60eb      	str	r3, [r5, #12]
  htim2.Init.Prescaler = 32000-1;
 8001fe6:	f8c5 9004 	str.w	r9, [r5, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fea:	f005 fe5b 	bl	8007ca4 <HAL_TIM_Base_Init>
 8001fee:	b108      	cbz	r0, 8001ff4 <main+0x214>
 8001ff0:	b672      	cpsid	i
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <main+0x212>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ff4:	4628      	mov	r0, r5
 8001ff6:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ffc:	f005 fee4 	bl	8007dc8 <HAL_TIM_ConfigClockSource>
 8002000:	b108      	cbz	r0, 8002006 <main+0x226>
 8002002:	b672      	cpsid	i
  while (1)
 8002004:	e7fe      	b.n	8002004 <main+0x224>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002006:	4628      	mov	r0, r5
 8002008:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200a:	e9cd 6708 	strd	r6, r7, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800200e:	f006 f815 	bl	800803c <HAL_TIMEx_MasterConfigSynchronization>
 8002012:	b108      	cbz	r0, 8002018 <main+0x238>
 8002014:	b672      	cpsid	i
  while (1)
 8002016:	e7fe      	b.n	8002016 <main+0x236>
  htim3.Init.Period = 500;
 8002018:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  htim3.Instance = TIM3;
 800201c:	4c2f      	ldr	r4, [pc, #188]	; (80020dc <main+0x2fc>)
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <main+0x300>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002020:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8002024:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002028:	e9cd 0008 	strd	r0, r0, [sp, #32]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202c:	e9c4 9001 	strd	r9, r0, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002030:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002034:	4620      	mov	r0, r4
  htim3.Init.Period = 500;
 8002036:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 8002038:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800203a:	f005 fe33 	bl	8007ca4 <HAL_TIM_Base_Init>
 800203e:	b108      	cbz	r0, 8002044 <main+0x264>
 8002040:	b672      	cpsid	i
  while (1)
 8002042:	e7fe      	b.n	8002042 <main+0x262>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002044:	4620      	mov	r0, r4
 8002046:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002048:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800204c:	f005 febc 	bl	8007dc8 <HAL_TIM_ConfigClockSource>
 8002050:	b108      	cbz	r0, 8002056 <main+0x276>
 8002052:	b672      	cpsid	i
  while (1)
 8002054:	e7fe      	b.n	8002054 <main+0x274>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002056:	2400      	movs	r4, #0
 8002058:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800205a:	4820      	ldr	r0, [pc, #128]	; (80020dc <main+0x2fc>)
 800205c:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205e:	e9cd 4508 	strd	r4, r5, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002062:	f005 ffeb 	bl	800803c <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	b108      	cbz	r0, 800206c <main+0x28c>
 8002068:	b672      	cpsid	i
  while (1)
 800206a:	e7fe      	b.n	800206a <main+0x28a>
  htim10.Init.Prescaler = 32000-1;
 800206c:	f647 46ff 	movw	r6, #31999	; 0x7cff
  htim10.Init.Period = 20;
 8002070:	2214      	movs	r2, #20
  htim10.Instance = TIM10;
 8002072:	4f1c      	ldr	r7, [pc, #112]	; (80020e4 <main+0x304>)
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <main+0x308>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002076:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800207a:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207e:	e9c7 0004 	strd	r0, r0, [r7, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	60b8      	str	r0, [r7, #8]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002084:	4638      	mov	r0, r7
  htim10.Init.Period = 20;
 8002086:	60fa      	str	r2, [r7, #12]
  htim10.Init.Prescaler = 32000-1;
 8002088:	607e      	str	r6, [r7, #4]
  htim10.Instance = TIM10;
 800208a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800208c:	f005 fe0a 	bl	8007ca4 <HAL_TIM_Base_Init>
 8002090:	b108      	cbz	r0, 8002096 <main+0x2b6>
 8002092:	b672      	cpsid	i
  while (1)
 8002094:	e7fe      	b.n	8002094 <main+0x2b4>
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002096:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002098:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 800209c:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209e:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 80020a0:	f005 fe92 	bl	8007dc8 <HAL_TIM_ConfigClockSource>
 80020a4:	b310      	cbz	r0, 80020ec <main+0x30c>
 80020a6:	b672      	cpsid	i
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <main+0x2c8>
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40020000 	.word	0x40020000
 80020b4:	20000414 	.word	0x20000414
 80020b8:	40020800 	.word	0x40020800
 80020bc:	40020400 	.word	0x40020400
 80020c0:	40007400 	.word	0x40007400
 80020c4:	200004fc 	.word	0x200004fc
 80020c8:	40005400 	.word	0x40005400
 80020cc:	000186a0 	.word	0x000186a0
 80020d0:	20000690 	.word	0x20000690
 80020d4:	40013800 	.word	0x40013800
 80020d8:	200005d0 	.word	0x200005d0
 80020dc:	20000610 	.word	0x20000610
 80020e0:	40000400 	.word	0x40000400
 80020e4:	20000550 	.word	0x20000550
 80020e8:	40010c00 	.word	0x40010c00
  htim11.Init.Period = 100;
 80020ec:	2264      	movs	r2, #100	; 0x64
  htim11.Instance = TIM11;
 80020ee:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8002190 <main+0x3b0>
 80020f2:	4b28      	ldr	r3, [pc, #160]	; (8002194 <main+0x3b4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f4:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80020f8:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fc:	e9c8 6001 	strd	r6, r0, [r8, #4]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002100:	e9c8 0004 	strd	r0, r0, [r8, #16]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002104:	4640      	mov	r0, r8
  htim11.Init.Period = 100;
 8002106:	f8c8 200c 	str.w	r2, [r8, #12]
  htim11.Instance = TIM11;
 800210a:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800210e:	f005 fdc9 	bl	8007ca4 <HAL_TIM_Base_Init>
 8002112:	b108      	cbz	r0, 8002118 <main+0x338>
 8002114:	b672      	cpsid	i
  while (1)
 8002116:	e7fe      	b.n	8002116 <main+0x336>
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002118:	4640      	mov	r0, r8
 800211a:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800211c:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800211e:	f005 fe53 	bl	8007dc8 <HAL_TIM_ConfigClockSource>
 8002122:	b108      	cbz	r0, 8002128 <main+0x348>
 8002124:	b672      	cpsid	i
  while (1)
 8002126:	e7fe      	b.n	8002126 <main+0x346>
  htim9.Init.Period = 10;
 8002128:	220a      	movs	r2, #10
  htim9.Instance = TIM9;
 800212a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8002198 <main+0x3b8>
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <main+0x3bc>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002130:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8002134:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002138:	e9cd 0008 	strd	r0, r0, [sp, #32]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213c:	e9c8 6001 	strd	r6, r0, [r8, #4]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002140:	e9c8 0004 	strd	r0, r0, [r8, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002144:	4640      	mov	r0, r8
  htim9.Init.Period = 10;
 8002146:	f8c8 200c 	str.w	r2, [r8, #12]
  htim9.Instance = TIM9;
 800214a:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800214e:	f005 fda9 	bl	8007ca4 <HAL_TIM_Base_Init>
 8002152:	b108      	cbz	r0, 8002158 <main+0x378>
 8002154:	b672      	cpsid	i
  while (1)
 8002156:	e7fe      	b.n	8002156 <main+0x376>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002158:	4640      	mov	r0, r8
 800215a:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215c:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800215e:	f005 fe33 	bl	8007dc8 <HAL_TIM_ConfigClockSource>
 8002162:	b108      	cbz	r0, 8002168 <main+0x388>
 8002164:	b672      	cpsid	i
  while (1)
 8002166:	e7fe      	b.n	8002166 <main+0x386>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8002168:	4640      	mov	r0, r8
 800216a:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216c:	e9cd 4508 	strd	r4, r5, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8002170:	f005 ff64 	bl	800803c <HAL_TIMEx_MasterConfigSynchronization>
 8002174:	b108      	cbz	r0, 800217a <main+0x39a>
 8002176:	b672      	cpsid	i
  while (1)
 8002178:	e7fe      	b.n	8002178 <main+0x398>
  ourInit();
 800217a:	f7ff fd5f 	bl	8001c3c <ourInit>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 800217e:	2700      	movs	r7, #0
 8002180:	4d07      	ldr	r5, [pc, #28]	; (80021a0 <main+0x3c0>)
 8002182:	4c08      	ldr	r4, [pc, #32]	; (80021a4 <main+0x3c4>)
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002184:	f8df a020 	ldr.w	sl, [pc, #32]	; 80021a8 <main+0x3c8>
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8002188:	f8df 8020 	ldr.w	r8, [pc, #32]	; 80021ac <main+0x3cc>
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 800218c:	4e08      	ldr	r6, [pc, #32]	; (80021b0 <main+0x3d0>)
 800218e:	e056      	b.n	800223e <main+0x45e>
 8002190:	20000590 	.word	0x20000590
 8002194:	40011000 	.word	0x40011000
 8002198:	20000650 	.word	0x20000650
 800219c:	40010800 	.word	0x40010800
 80021a0:	2000039c 	.word	0x2000039c
 80021a4:	2000082c 	.word	0x2000082c
 80021a8:	40400000 	.word	0x40400000
 80021ac:	457ff000 	.word	0x457ff000
 80021b0:	20000414 	.word	0x20000414
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 80021b4:	882b      	ldrh	r3, [r5, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	f240 81ac 	bls.w	8002516 <main+0x736>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	2140      	movs	r1, #64	; 0x40
 80021c2:	48a6      	ldr	r0, [pc, #664]	; (800245c <main+0x67c>)
 80021c4:	f003 fffa 	bl	80061bc <HAL_GPIO_WritePin>
	  update_ADC_watchdog(amp_set_main);
 80021c8:	4ba5      	ldr	r3, [pc, #660]	; (8002460 <main+0x680>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80021ca:	49a6      	ldr	r1, [pc, #664]	; (8002464 <main+0x684>)
	  update_ADC_watchdog(amp_set_main);
 80021cc:	6818      	ldr	r0, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80021ce:	892b      	ldrh	r3, [r5, #8]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	9300      	str	r3, [sp, #0]
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80021d4:	f7fe fd7e 	bl	8000cd4 <__aeabi_fmul>
 80021d8:	49a3      	ldr	r1, [pc, #652]	; (8002468 <main+0x688>)
 80021da:	f7fe fd7b 	bl	8000cd4 <__aeabi_fmul>
 80021de:	4641      	mov	r1, r8
 80021e0:	f7fe fd78 	bl	8000cd4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 80021e4:	4ba1      	ldr	r3, [pc, #644]	; (800246c <main+0x68c>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80021e6:	4681      	mov	r9, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 80021e8:	681a      	ldr	r2, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80021ea:	8810      	ldrh	r0, [r2, #0]
 80021ec:	f7fe fd1a 	bl	8000c24 <__aeabi_ui2f>
 80021f0:	9b00      	ldr	r3, [sp, #0]
 80021f2:	4683      	mov	fp, r0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe fd15 	bl	8000c24 <__aeabi_ui2f>
 80021fa:	4601      	mov	r1, r0
 80021fc:	4658      	mov	r0, fp
 80021fe:	f7fe fe1d 	bl	8000e3c <__aeabi_fdiv>
 8002202:	4651      	mov	r1, sl
 8002204:	f7fe fd66 	bl	8000cd4 <__aeabi_fmul>
 8002208:	4601      	mov	r1, r0
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800220a:	4648      	mov	r0, r9
 800220c:	f7fe fe16 	bl	8000e3c <__aeabi_fdiv>
 8002210:	f7fe ff26 	bl	8001060 <__aeabi_f2uiz>
	if(amp >= 4095){
 8002214:	f640 72fe 	movw	r2, #4094	; 0xffe
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002218:	b283      	uxth	r3, r0
 800221a:	f8ad 3020 	strh.w	r3, [sp, #32]
	if(amp >= 4095){
 800221e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	  HAL_Delay(1);
 8002222:	2001      	movs	r0, #1
	if(amp >= 4095){
 8002224:	b29b      	uxth	r3, r3
 8002226:	4293      	cmp	r3, r2
		ADC1->HTR = 4095;
 8002228:	bf8c      	ite	hi
 800222a:	f640 73ff 	movwhi	r3, #4095	; 0xfff
		ADC1->HTR = amp;
 800222e:	f8bd 3020 	ldrhls.w	r3, [sp, #32]
 8002232:	4a8f      	ldr	r2, [pc, #572]	; (8002470 <main+0x690>)
 8002234:	bf98      	it	ls
 8002236:	b29b      	uxthls	r3, r3
 8002238:	6293      	str	r3, [r2, #40]	; 0x28
	  HAL_Delay(1);
 800223a:	f002 ff8d 	bl	8005158 <HAL_Delay>
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 800223e:	4b8b      	ldr	r3, [pc, #556]	; (800246c <main+0x68c>)
 8002240:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002242:	8818      	ldrh	r0, [r3, #0]
 8002244:	f7fe fcee 	bl	8000c24 <__aeabi_ui2f>
 8002248:	4681      	mov	r9, r0
 800224a:	8928      	ldrh	r0, [r5, #8]
 800224c:	b280      	uxth	r0, r0
 800224e:	f7fe fce9 	bl	8000c24 <__aeabi_ui2f>
 8002252:	4601      	mov	r1, r0
 8002254:	4648      	mov	r0, r9
 8002256:	f7fe fdf1 	bl	8000e3c <__aeabi_fdiv>
 800225a:	4651      	mov	r1, sl
 800225c:	f7fe fd3a 	bl	8000cd4 <__aeabi_fmul>
 8002260:	4683      	mov	fp, r0
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8002262:	88a8      	ldrh	r0, [r5, #4]
 8002264:	892a      	ldrh	r2, [r5, #8]
 8002266:	b280      	uxth	r0, r0
 8002268:	b292      	uxth	r2, r2
 800226a:	9200      	str	r2, [sp, #0]
 800226c:	f7fe fcda 	bl	8000c24 <__aeabi_ui2f>
 8002270:	4651      	mov	r1, sl
 8002272:	f7fe fd2f 	bl	8000cd4 <__aeabi_fmul>
 8002276:	4649      	mov	r1, r9
 8002278:	f7fe fd2c 	bl	8000cd4 <__aeabi_fmul>
 800227c:	4603      	mov	r3, r0
 800227e:	9a00      	ldr	r2, [sp, #0]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	4610      	mov	r0, r2
 8002284:	f7fe fcce 	bl	8000c24 <__aeabi_ui2f>
 8002288:	4641      	mov	r1, r8
 800228a:	f7fe fd23 	bl	8000cd4 <__aeabi_fmul>
 800228e:	9b00      	ldr	r3, [sp, #0]
 8002290:	4601      	mov	r1, r0
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fdd2 	bl	8000e3c <__aeabi_fdiv>
 8002298:	4973      	ldr	r1, [pc, #460]	; (8002468 <main+0x688>)
 800229a:	f7fe fdcf 	bl	8000e3c <__aeabi_fdiv>
 800229e:	4971      	ldr	r1, [pc, #452]	; (8002464 <main+0x684>)
 80022a0:	f7fe fdcc 	bl	8000e3c <__aeabi_fdiv>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80022a4:	4639      	mov	r1, r7
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 80022a6:	9000      	str	r0, [sp, #0]
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80022a8:	f7fe fec6 	bl	8001038 <__aeabi_fcmpge>
 80022ac:	9b00      	ldr	r3, [sp, #0]
 80022ae:	b900      	cbnz	r0, 80022b2 <main+0x4d2>
 80022b0:	463b      	mov	r3, r7
 80022b2:	4a70      	ldr	r2, [pc, #448]	; (8002474 <main+0x694>)
 80022b4:	6013      	str	r3, [r2, #0]
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80022b6:	8828      	ldrh	r0, [r5, #0]
 80022b8:	892a      	ldrh	r2, [r5, #8]
 80022ba:	b280      	uxth	r0, r0
 80022bc:	b292      	uxth	r2, r2
 80022be:	9200      	str	r2, [sp, #0]
 80022c0:	f7fe fcb0 	bl	8000c24 <__aeabi_ui2f>
 80022c4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80022c8:	f7fe fd04 	bl	8000cd4 <__aeabi_fmul>
 80022cc:	4651      	mov	r1, sl
 80022ce:	f7fe fd01 	bl	8000cd4 <__aeabi_fmul>
 80022d2:	4649      	mov	r1, r9
 80022d4:	f7fe fcfe 	bl	8000cd4 <__aeabi_fmul>
 80022d8:	4603      	mov	r3, r0
 80022da:	9a00      	ldr	r2, [sp, #0]
 80022dc:	4610      	mov	r0, r2
 80022de:	4a65      	ldr	r2, [pc, #404]	; (8002474 <main+0x694>)
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	e9cd 3200 	strd	r3, r2, [sp]
 80022e6:	f7fe fc9d 	bl	8000c24 <__aeabi_ui2f>
 80022ea:	4641      	mov	r1, r8
 80022ec:	f7fe fcf2 	bl	8000cd4 <__aeabi_fmul>
 80022f0:	9b00      	ldr	r3, [sp, #0]
 80022f2:	4601      	mov	r1, r0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe fda1 	bl	8000e3c <__aeabi_fdiv>
 80022fa:	4603      	mov	r3, r0
 80022fc:	9a01      	ldr	r2, [sp, #4]
 80022fe:	495e      	ldr	r1, [pc, #376]	; (8002478 <main+0x698>)
 8002300:	4610      	mov	r0, r2
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	f7fe fce6 	bl	8000cd4 <__aeabi_fmul>
 8002308:	9b00      	ldr	r3, [sp, #0]
 800230a:	4601      	mov	r1, r0
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe fbd7 	bl	8000ac0 <__aeabi_fsub>
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 8002312:	4639      	mov	r1, r7
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8002314:	9000      	str	r0, [sp, #0]
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 8002316:	f7fe fe8f 	bl	8001038 <__aeabi_fcmpge>
 800231a:	9b00      	ldr	r3, [sp, #0]
 800231c:	b900      	cbnz	r0, 8002320 <main+0x540>
 800231e:	463b      	mov	r3, r7
 8002320:	4a56      	ldr	r2, [pc, #344]	; (800247c <main+0x69c>)
 8002322:	6013      	str	r3, [r2, #0]
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8002324:	8868      	ldrh	r0, [r5, #2]
 8002326:	892a      	ldrh	r2, [r5, #8]
 8002328:	b280      	uxth	r0, r0
 800232a:	b292      	uxth	r2, r2
 800232c:	9200      	str	r2, [sp, #0]
 800232e:	f7fe fc79 	bl	8000c24 <__aeabi_ui2f>
 8002332:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002336:	f7fe fccd 	bl	8000cd4 <__aeabi_fmul>
 800233a:	4651      	mov	r1, sl
 800233c:	f7fe fcca 	bl	8000cd4 <__aeabi_fmul>
 8002340:	4649      	mov	r1, r9
 8002342:	f7fe fcc7 	bl	8000cd4 <__aeabi_fmul>
 8002346:	4603      	mov	r3, r0
 8002348:	9a00      	ldr	r2, [sp, #0]
 800234a:	4610      	mov	r0, r2
 800234c:	4a49      	ldr	r2, [pc, #292]	; (8002474 <main+0x694>)
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	e9cd 3200 	strd	r3, r2, [sp]
 8002354:	f7fe fc66 	bl	8000c24 <__aeabi_ui2f>
 8002358:	4641      	mov	r1, r8
 800235a:	f7fe fcbb 	bl	8000cd4 <__aeabi_fmul>
 800235e:	9b00      	ldr	r3, [sp, #0]
 8002360:	4601      	mov	r1, r0
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fd6a 	bl	8000e3c <__aeabi_fdiv>
 8002368:	4603      	mov	r3, r0
 800236a:	9a01      	ldr	r2, [sp, #4]
 800236c:	4942      	ldr	r1, [pc, #264]	; (8002478 <main+0x698>)
 800236e:	4610      	mov	r0, r2
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	f7fe fcaf 	bl	8000cd4 <__aeabi_fmul>
 8002376:	9b00      	ldr	r3, [sp, #0]
 8002378:	4601      	mov	r1, r0
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fba0 	bl	8000ac0 <__aeabi_fsub>
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 8002380:	4639      	mov	r1, r7
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8002382:	9000      	str	r0, [sp, #0]
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 8002384:	f7fe fe58 	bl	8001038 <__aeabi_fcmpge>
 8002388:	9b00      	ldr	r3, [sp, #0]
 800238a:	b900      	cbnz	r0, 800238e <main+0x5ae>
 800238c:	463b      	mov	r3, r7
 800238e:	4a3c      	ldr	r2, [pc, #240]	; (8002480 <main+0x6a0>)
 8002390:	6013      	str	r3, [r2, #0]
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 8002392:	88e8      	ldrh	r0, [r5, #6]
 8002394:	892b      	ldrh	r3, [r5, #8]
 8002396:	b280      	uxth	r0, r0
 8002398:	b29b      	uxth	r3, r3
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	f7fe fc42 	bl	8000c24 <__aeabi_ui2f>
 80023a0:	4938      	ldr	r1, [pc, #224]	; (8002484 <main+0x6a4>)
 80023a2:	f7fe fc97 	bl	8000cd4 <__aeabi_fmul>
 80023a6:	4651      	mov	r1, sl
 80023a8:	f7fe fc94 	bl	8000cd4 <__aeabi_fmul>
 80023ac:	4649      	mov	r1, r9
 80023ae:	f7fe fc91 	bl	8000cd4 <__aeabi_fmul>
 80023b2:	9b00      	ldr	r3, [sp, #0]
 80023b4:	4681      	mov	r9, r0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fc34 	bl	8000c24 <__aeabi_ui2f>
 80023bc:	4641      	mov	r1, r8
 80023be:	f7fe fc89 	bl	8000cd4 <__aeabi_fmul>
 80023c2:	4601      	mov	r1, r0
 80023c4:	4648      	mov	r0, r9
 80023c6:	f7fe fd39 	bl	8000e3c <__aeabi_fdiv>
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 80023ca:	4639      	mov	r1, r7
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 80023cc:	4681      	mov	r9, r0
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 80023ce:	f7fe fe33 	bl	8001038 <__aeabi_fcmpge>
 80023d2:	b900      	cbnz	r0, 80023d6 <main+0x5f6>
 80023d4:	46b9      	mov	r9, r7
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <main+0x6a8>)
		  if(lin_num > volt_set_main + margin){
 80023d8:	492c      	ldr	r1, [pc, #176]	; (800248c <main+0x6ac>)
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 80023da:	f8c3 9000 	str.w	r9, [r3]
	  if(chstat_main == 1){
 80023de:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <main+0x6b0>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b01      	cmp	r3, #1
		  if(lin_num > volt_set_main + margin){
 80023e4:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <main+0x6b4>)
 80023e6:	6818      	ldr	r0, [r3, #0]
	  if(chstat_main == 1){
 80023e8:	f000 80c6 	beq.w	8002578 <main+0x798>
		  if(op_num > volt_set_main + margin){
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <main+0x69c>)
 80023ee:	f8d3 9000 	ldr.w	r9, [r3]
 80023f2:	f7fe fb67 	bl	8000ac4 <__addsf3>
 80023f6:	4649      	mov	r1, r9
 80023f8:	f7fe fe0a 	bl	8001010 <__aeabi_fcmplt>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	f040 8090 	bne.w	8002522 <main+0x742>
		  else if(op_num < volt_set_main - margin){
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <main+0x6b4>)
 8002404:	4921      	ldr	r1, [pc, #132]	; (800248c <main+0x6ac>)
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	4b1c      	ldr	r3, [pc, #112]	; (800247c <main+0x69c>)
 800240a:	f8d3 9000 	ldr.w	r9, [r3]
 800240e:	f7fe fb57 	bl	8000ac0 <__aeabi_fsub>
 8002412:	4649      	mov	r1, r9
 8002414:	f7fe fe1a 	bl	800104c <__aeabi_fcmpgt>
 8002418:	b180      	cbz	r0, 800243c <main+0x65c>
			  if(v1 <= 4094){
 800241a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800241e:	8823      	ldrh	r3, [r4, #0]
 8002420:	b29b      	uxth	r3, r3
 8002422:	4293      	cmp	r3, r2
 8002424:	d803      	bhi.n	800242e <main+0x64e>
				  v1++;
 8002426:	8823      	ldrh	r3, [r4, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	b29b      	uxth	r3, r3
 800242c:	8023      	strh	r3, [r4, #0]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 800242e:	2200      	movs	r2, #0
 8002430:	8823      	ldrh	r3, [r4, #0]
 8002432:	4630      	mov	r0, r6
 8002434:	4611      	mov	r1, r2
 8002436:	b29b      	uxth	r3, r3
 8002438:	f003 fb4a 	bl	8005ad0 <HAL_DAC_SetValue>
	  volatile float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)0.5))) * (float)4095 / (float)vddcalc);
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <main+0x6b4>)
 800243e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	f7fe fb3e 	bl	8000ac4 <__addsf3>
 8002448:	4913      	ldr	r1, [pc, #76]	; (8002498 <main+0x6b8>)
 800244a:	f7fe fc43 	bl	8000cd4 <__aeabi_fmul>
 800244e:	4601      	mov	r1, r0
 8002450:	4812      	ldr	r0, [pc, #72]	; (800249c <main+0x6bc>)
 8002452:	f7fe fb35 	bl	8000ac0 <__aeabi_fsub>
 8002456:	4641      	mov	r1, r8
 8002458:	e022      	b.n	80024a0 <main+0x6c0>
 800245a:	bf00      	nop
 800245c:	40020000 	.word	0x40020000
 8002460:	200003ac 	.word	0x200003ac
 8002464:	3e19999a 	.word	0x3e19999a
 8002468:	41a00000 	.word	0x41a00000
 800246c:	20000020 	.word	0x20000020
 8002470:	40012400 	.word	0x40012400
 8002474:	200003b8 	.word	0x200003b8
 8002478:	3eb33333 	.word	0x3eb33333
 800247c:	200006e0 	.word	0x200006e0
 8002480:	200006d8 	.word	0x200006d8
 8002484:	40a00000 	.word	0x40a00000
 8002488:	20000724 	.word	0x20000724
 800248c:	3b03126f 	.word	0x3b03126f
 8002490:	200003b6 	.word	0x200003b6
 8002494:	20000834 	.word	0x20000834
 8002498:	3e75c28f 	.word	0x3e75c28f
 800249c:	40800b78 	.word	0x40800b78
 80024a0:	f7fe fc18 	bl	8000cd4 <__aeabi_fmul>
 80024a4:	4659      	mov	r1, fp
 80024a6:	f7fe fcc9 	bl	8000e3c <__aeabi_fdiv>
 80024aa:	900a      	str	r0, [sp, #40]	; 0x28
	  if(temp <= 0){
 80024ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80024ae:	4639      	mov	r1, r7
 80024b0:	f7fe fdb8 	bl	8001024 <__aeabi_fcmple>
 80024b4:	2800      	cmp	r0, #0
 80024b6:	d15b      	bne.n	8002570 <main+0x790>
	  else if(temp >= 4095){
 80024b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80024ba:	4641      	mov	r1, r8
 80024bc:	f7fe fdbc 	bl	8001038 <__aeabi_fcmpge>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d04e      	beq.n	8002562 <main+0x782>
		  v2 = 4095;
 80024c4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80024c8:	4a33      	ldr	r2, [pc, #204]	; (8002598 <main+0x7b8>)
 80024ca:	8013      	strh	r3, [r2, #0]
	  if(volt_set_main > volt_set_main_old){
 80024cc:	4b33      	ldr	r3, [pc, #204]	; (800259c <main+0x7bc>)
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <main+0x7c0>)
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	f7fe fdba 	bl	800104c <__aeabi_fcmpgt>
 80024d8:	4683      	mov	fp, r0
 80024da:	2800      	cmp	r0, #0
 80024dc:	d131      	bne.n	8002542 <main+0x762>
	  else if(volt_set_main < volt_set_main_old){
 80024de:	4b2f      	ldr	r3, [pc, #188]	; (800259c <main+0x7bc>)
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <main+0x7c0>)
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	f7fe fd93 	bl	8001010 <__aeabi_fcmplt>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80024ea:	8823      	ldrh	r3, [r4, #0]
	  else if(volt_set_main < volt_set_main_old){
 80024ec:	4681      	mov	r9, r0
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80024ee:	b29b      	uxth	r3, r3
	  else if(volt_set_main < volt_set_main_old){
 80024f0:	b300      	cbz	r0, 8002534 <main+0x754>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80024f2:	465a      	mov	r2, fp
 80024f4:	4659      	mov	r1, fp
 80024f6:	4630      	mov	r0, r6
 80024f8:	f003 faea 	bl	8005ad0 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 80024fc:	465a      	mov	r2, fp
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 80024fe:	4b26      	ldr	r3, [pc, #152]	; (8002598 <main+0x7b8>)
 8002500:	2110      	movs	r1, #16
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	4630      	mov	r0, r6
 8002506:	b29b      	uxth	r3, r3
 8002508:	f003 fae2 	bl	8005ad0 <HAL_DAC_SetValue>
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <main+0x7c4>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	f43f ae4f 	beq.w	80021b4 <main+0x3d4>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8002516:	2201      	movs	r2, #1
 8002518:	2140      	movs	r1, #64	; 0x40
 800251a:	4823      	ldr	r0, [pc, #140]	; (80025a8 <main+0x7c8>)
 800251c:	f003 fe4e 	bl	80061bc <HAL_GPIO_WritePin>
 8002520:	e652      	b.n	80021c8 <main+0x3e8>
			  if(v1 >= 1){
 8002522:	8823      	ldrh	r3, [r4, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d081      	beq.n	800242e <main+0x64e>
				  v1--;
 800252a:	8823      	ldrh	r3, [r4, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	b29b      	uxth	r3, r3
 8002530:	8023      	strh	r3, [r4, #0]
 8002532:	e77c      	b.n	800242e <main+0x64e>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002534:	4602      	mov	r2, r0
 8002536:	4601      	mov	r1, r0
 8002538:	4630      	mov	r0, r6
 800253a:	f003 fac9 	bl	8005ad0 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 800253e:	464a      	mov	r2, r9
 8002540:	e7dd      	b.n	80024fe <main+0x71e>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <main+0x7b8>)
 8002544:	2200      	movs	r2, #0
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	2110      	movs	r1, #16
 800254a:	4630      	mov	r0, r6
 800254c:	b29b      	uxth	r3, r3
 800254e:	f003 fabf 	bl	8005ad0 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002552:	2200      	movs	r2, #0
 8002554:	8823      	ldrh	r3, [r4, #0]
 8002556:	4630      	mov	r0, r6
 8002558:	4611      	mov	r1, r2
 800255a:	b29b      	uxth	r3, r3
 800255c:	f003 fab8 	bl	8005ad0 <HAL_DAC_SetValue>
 8002560:	e7d4      	b.n	800250c <main+0x72c>
		  v2 = (uint16_t)temp;
 8002562:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002564:	f7fe fd7c 	bl	8001060 <__aeabi_f2uiz>
 8002568:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <main+0x7b8>)
 800256a:	b283      	uxth	r3, r0
 800256c:	8013      	strh	r3, [r2, #0]
 800256e:	e7ad      	b.n	80024cc <main+0x6ec>
		  v2 = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	4a09      	ldr	r2, [pc, #36]	; (8002598 <main+0x7b8>)
 8002574:	8013      	strh	r3, [r2, #0]
 8002576:	e7a9      	b.n	80024cc <main+0x6ec>
		  if(lin_num > volt_set_main + margin){
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <main+0x7cc>)
 800257a:	f8d3 9000 	ldr.w	r9, [r3]
 800257e:	f7fe faa1 	bl	8000ac4 <__addsf3>
 8002582:	4649      	mov	r1, r9
 8002584:	f7fe fd44 	bl	8001010 <__aeabi_fcmplt>
 8002588:	2800      	cmp	r0, #0
 800258a:	d1ca      	bne.n	8002522 <main+0x742>
		  else if(lin_num < volt_set_main - margin){
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <main+0x7bc>)
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <main+0x7d0>)
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <main+0x7cc>)
 8002594:	e739      	b.n	800240a <main+0x62a>
 8002596:	bf00      	nop
 8002598:	2000082e 	.word	0x2000082e
 800259c:	20000834 	.word	0x20000834
 80025a0:	20000838 	.word	0x20000838
 80025a4:	200003b6 	.word	0x200003b6
 80025a8:	40020000 	.word	0x40020000
 80025ac:	200006d8 	.word	0x200006d8
 80025b0:	3b03126f 	.word	0x3b03126f

080025b4 <lcd_update_voltage>:
void lcd_update_voltage(uint8_t channel, float num){
 80025b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b6:	4605      	mov	r5, r0
 80025b8:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.2f", num);
 80025ba:	4608      	mov	r0, r1
 80025bc:	f7fd ff4c 	bl	8000458 <__aeabi_f2d>
 80025c0:	4606      	mov	r6, r0
 80025c2:	460f      	mov	r7, r1
 80025c4:	4a9a      	ldr	r2, [pc, #616]	; (8002830 <lcd_update_voltage+0x27c>)
 80025c6:	2106      	movs	r1, #6
 80025c8:	e9cd 6700 	strd	r6, r7, [sp]
 80025cc:	a804      	add	r0, sp, #16
 80025ce:	f008 fbc1 	bl	800ad54 <sniprintf>
	if(channel == 1){
 80025d2:	2d01      	cmp	r5, #1
 80025d4:	d009      	beq.n	80025ea <lcd_update_voltage+0x36>
	else if(channel == 2){
 80025d6:	2d02      	cmp	r5, #2
 80025d8:	f000 80cb 	beq.w	8002772 <lcd_update_voltage+0x1be>
	else if(channel == 3){
 80025dc:	2d03      	cmp	r5, #3
 80025de:	f000 8135 	beq.w	800284c <lcd_update_voltage+0x298>
	else if(channel == 4){
 80025e2:	2d04      	cmp	r5, #4
 80025e4:	d068      	beq.n	80026b8 <lcd_update_voltage+0x104>
}
 80025e6:	b007      	add	sp, #28
 80025e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025ea:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80025ec:	4a91      	ldr	r2, [pc, #580]	; (8002834 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025ee:	4892      	ldr	r0, [pc, #584]	; (8002838 <lcd_update_voltage+0x284>)
 80025f0:	ac03      	add	r4, sp, #12
 80025f2:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80025f4:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025f6:	214e      	movs	r1, #78	; 0x4e
 80025f8:	4622      	mov	r2, r4
 80025fa:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025fc:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025fe:	f003 febf 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002602:	2320      	movs	r3, #32
 8002604:	4d8d      	ldr	r5, [pc, #564]	; (800283c <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002606:	011a      	lsls	r2, r3, #4
 8002608:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800260a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800260e:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002612:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002616:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800261a:	f043 0309 	orr.w	r3, r3, #9
 800261e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002622:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002626:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002628:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800262c:	4622      	mov	r2, r4
 800262e:	214e      	movs	r1, #78	; 0x4e
 8002630:	4638      	mov	r0, r7
 8002632:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002634:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002638:	f003 fea2 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800263c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e0      	bne.n	8002606 <lcd_update_voltage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002644:	4a7b      	ldr	r2, [pc, #492]	; (8002834 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002646:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002648:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800264a:	214e      	movs	r1, #78	; 0x4e
 800264c:	4622      	mov	r2, r4
 800264e:	487a      	ldr	r0, [pc, #488]	; (8002838 <lcd_update_voltage+0x284>)
 8002650:	9600      	str	r6, [sp, #0]
 8002652:	f003 fe95 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002656:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800265a:	b30b      	cbz	r3, 80026a0 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800265c:	2764      	movs	r7, #100	; 0x64
 800265e:	4e76      	ldr	r6, [pc, #472]	; (8002838 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002660:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002662:	011a      	lsls	r2, r3, #4
 8002664:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800266a:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800266e:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002672:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002676:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800267a:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800267c:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002680:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002684:	4622      	mov	r2, r4
 8002686:	214e      	movs	r1, #78	; 0x4e
 8002688:	4630      	mov	r0, r6
 800268a:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800268c:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002690:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002694:	f003 fe74 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002698:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e0      	bne.n	8002662 <lcd_update_voltage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026a0:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80026a2:	4867      	ldr	r0, [pc, #412]	; (8002840 <lcd_update_voltage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026a4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80026a6:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026a8:	4622      	mov	r2, r4
 80026aa:	214e      	movs	r1, #78	; 0x4e
 80026ac:	9500      	str	r5, [sp, #0]
 80026ae:	4862      	ldr	r0, [pc, #392]	; (8002838 <lcd_update_voltage+0x284>)
 80026b0:	f003 fe66 	bl	8006380 <HAL_I2C_Master_Transmit>
}
 80026b4:	b007      	add	sp, #28
 80026b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026b8:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80026ba:	4a62      	ldr	r2, [pc, #392]	; (8002844 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026bc:	485e      	ldr	r0, [pc, #376]	; (8002838 <lcd_update_voltage+0x284>)
 80026be:	ac03      	add	r4, sp, #12
 80026c0:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80026c2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026c4:	214e      	movs	r1, #78	; 0x4e
 80026c6:	4622      	mov	r2, r4
 80026c8:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026ca:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026cc:	f003 fe58 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80026d0:	2320      	movs	r3, #32
 80026d2:	4d5a      	ldr	r5, [pc, #360]	; (800283c <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 80026d4:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80026d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80026da:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80026de:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80026e0:	f043 0309 	orr.w	r3, r3, #9
 80026e4:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80026e8:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80026ec:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80026f0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80026f4:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80026f8:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026fc:	2304      	movs	r3, #4
 80026fe:	4622      	mov	r2, r4
 8002700:	214e      	movs	r1, #78	; 0x4e
 8002702:	4638      	mov	r0, r7
 8002704:	9600      	str	r6, [sp, #0]
 8002706:	f003 fe3b 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800270a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1e0      	bne.n	80026d4 <lcd_update_voltage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002712:	4a4c      	ldr	r2, [pc, #304]	; (8002844 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002714:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002716:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002718:	214e      	movs	r1, #78	; 0x4e
 800271a:	4622      	mov	r2, r4
 800271c:	4846      	ldr	r0, [pc, #280]	; (8002838 <lcd_update_voltage+0x284>)
 800271e:	9600      	str	r6, [sp, #0]
 8002720:	f003 fe2e 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002724:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0b9      	beq.n	80026a0 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800272c:	2764      	movs	r7, #100	; 0x64
 800272e:	4e42      	ldr	r6, [pc, #264]	; (8002838 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002730:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002732:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002738:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800273c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800273e:	f043 0309 	orr.w	r3, r3, #9
 8002742:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002746:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800274a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800274e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002752:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002756:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800275a:	2304      	movs	r3, #4
 800275c:	4622      	mov	r2, r4
 800275e:	214e      	movs	r1, #78	; 0x4e
 8002760:	4630      	mov	r0, r6
 8002762:	9700      	str	r7, [sp, #0]
 8002764:	f003 fe0c 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002768:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e0      	bne.n	8002732 <lcd_update_voltage+0x17e>
 8002770:	e796      	b.n	80026a0 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002772:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002774:	4a34      	ldr	r2, [pc, #208]	; (8002848 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002776:	4830      	ldr	r0, [pc, #192]	; (8002838 <lcd_update_voltage+0x284>)
 8002778:	ac03      	add	r4, sp, #12
 800277a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800277c:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800277e:	214e      	movs	r1, #78	; 0x4e
 8002780:	4622      	mov	r2, r4
 8002782:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002784:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002786:	f003 fdfb 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800278a:	2320      	movs	r3, #32
 800278c:	4d2b      	ldr	r5, [pc, #172]	; (800283c <lcd_update_voltage+0x288>)
	data_u = (data&0xf0);
 800278e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002796:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800279a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800279e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80027a2:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80027a6:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80027aa:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80027ae:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027b2:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80027b4:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027b8:	214e      	movs	r1, #78	; 0x4e
 80027ba:	4622      	mov	r2, r4
 80027bc:	4638      	mov	r0, r7
 80027be:	9600      	str	r6, [sp, #0]
 80027c0:	f003 fdde 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80027c4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e0      	bne.n	800278e <lcd_update_voltage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80027cc:	4a1e      	ldr	r2, [pc, #120]	; (8002848 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027ce:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80027d0:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027d2:	214e      	movs	r1, #78	; 0x4e
 80027d4:	4622      	mov	r2, r4
 80027d6:	4818      	ldr	r0, [pc, #96]	; (8002838 <lcd_update_voltage+0x284>)
 80027d8:	9600      	str	r6, [sp, #0]
 80027da:	f003 fdd1 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80027de:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f43f af5c 	beq.w	80026a0 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027e8:	2764      	movs	r7, #100	; 0x64
 80027ea:	4e13      	ldr	r6, [pc, #76]	; (8002838 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 80027ec:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80027ee:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80027f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80027f4:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80027f6:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80027fa:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80027fe:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002802:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002806:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800280a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800280e:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002812:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002814:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002818:	4622      	mov	r2, r4
 800281a:	214e      	movs	r1, #78	; 0x4e
 800281c:	4630      	mov	r0, r6
 800281e:	9700      	str	r7, [sp, #0]
 8002820:	f003 fdae 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002824:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e0      	bne.n	80027ee <lcd_update_voltage+0x23a>
 800282c:	e738      	b.n	80026a0 <lcd_update_voltage+0xec>
 800282e:	bf00      	nop
 8002830:	0800d2e4 	.word	0x0800d2e4
 8002834:	383c888c 	.word	0x383c888c
 8002838:	200004fc 	.word	0x200004fc
 800283c:	0800d2dc 	.word	0x0800d2dc
 8002840:	696d595d 	.word	0x696d595d
 8002844:	282ca8ac 	.word	0x282ca8ac
 8002848:	e8ec888c 	.word	0xe8ec888c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800284c:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800284e:	4a2e      	ldr	r2, [pc, #184]	; (8002908 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002850:	482e      	ldr	r0, [pc, #184]	; (800290c <lcd_update_voltage+0x358>)
 8002852:	ac03      	add	r4, sp, #12
 8002854:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002856:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002858:	214e      	movs	r1, #78	; 0x4e
 800285a:	4622      	mov	r2, r4
 800285c:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800285e:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002860:	f003 fd8e 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002864:	2320      	movs	r3, #32
 8002866:	4d2a      	ldr	r5, [pc, #168]	; (8002910 <lcd_update_voltage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8002868:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800286a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800286e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002872:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002874:	f043 0309 	orr.w	r3, r3, #9
 8002878:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800287c:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002880:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002884:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002888:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800288c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002890:	2304      	movs	r3, #4
 8002892:	4622      	mov	r2, r4
 8002894:	214e      	movs	r1, #78	; 0x4e
 8002896:	4638      	mov	r0, r7
 8002898:	9600      	str	r6, [sp, #0]
 800289a:	f003 fd71 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800289e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1e0      	bne.n	8002868 <lcd_update_voltage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028a8:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80028aa:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028ac:	214e      	movs	r1, #78	; 0x4e
 80028ae:	4622      	mov	r2, r4
 80028b0:	4816      	ldr	r0, [pc, #88]	; (800290c <lcd_update_voltage+0x358>)
 80028b2:	9600      	str	r6, [sp, #0]
 80028b4:	f003 fd64 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80028b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f43f aeef 	beq.w	80026a0 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028c2:	2764      	movs	r7, #100	; 0x64
 80028c4:	4e11      	ldr	r6, [pc, #68]	; (800290c <lcd_update_voltage+0x358>)
	while (*str) lcd_send_data (*str++);
 80028c6:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 80028c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028d0:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80028d4:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028d8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80028dc:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80028e0:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80028e4:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80028e8:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028ec:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80028ee:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028f2:	214e      	movs	r1, #78	; 0x4e
 80028f4:	4622      	mov	r2, r4
 80028f6:	4630      	mov	r0, r6
 80028f8:	9700      	str	r7, [sp, #0]
 80028fa:	f003 fd41 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80028fe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e0      	bne.n	80028c8 <lcd_update_voltage+0x314>
 8002906:	e6cb      	b.n	80026a0 <lcd_update_voltage+0xec>
 8002908:	787c989c 	.word	0x787c989c
 800290c:	200004fc 	.word	0x200004fc
 8002910:	0800d2dc 	.word	0x0800d2dc

08002914 <lcd_update_amperage>:
void lcd_update_amperage(uint8_t channel, float num){
 8002914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002916:	4605      	mov	r5, r0
 8002918:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.3f", num);
 800291a:	4608      	mov	r0, r1
 800291c:	f7fd fd9c 	bl	8000458 <__aeabi_f2d>
 8002920:	4606      	mov	r6, r0
 8002922:	460f      	mov	r7, r1
 8002924:	4a9a      	ldr	r2, [pc, #616]	; (8002b90 <lcd_update_amperage+0x27c>)
 8002926:	2106      	movs	r1, #6
 8002928:	e9cd 6700 	strd	r6, r7, [sp]
 800292c:	a804      	add	r0, sp, #16
 800292e:	f008 fa11 	bl	800ad54 <sniprintf>
	if(channel == 1){
 8002932:	2d01      	cmp	r5, #1
 8002934:	d009      	beq.n	800294a <lcd_update_amperage+0x36>
	else if(channel == 2){
 8002936:	2d02      	cmp	r5, #2
 8002938:	f000 80cb 	beq.w	8002ad2 <lcd_update_amperage+0x1be>
	else if(channel == 3){
 800293c:	2d03      	cmp	r5, #3
 800293e:	f000 8135 	beq.w	8002bac <lcd_update_amperage+0x298>
	else if(channel == 4){
 8002942:	2d04      	cmp	r5, #4
 8002944:	d068      	beq.n	8002a18 <lcd_update_amperage+0x104>
}
 8002946:	b007      	add	sp, #28
 8002948:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800294a:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800294c:	4a91      	ldr	r2, [pc, #580]	; (8002b94 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800294e:	4892      	ldr	r0, [pc, #584]	; (8002b98 <lcd_update_amperage+0x284>)
 8002950:	ac03      	add	r4, sp, #12
 8002952:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002954:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002956:	214e      	movs	r1, #78	; 0x4e
 8002958:	4622      	mov	r2, r4
 800295a:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800295c:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800295e:	f003 fd0f 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002962:	2320      	movs	r3, #32
 8002964:	4d8d      	ldr	r5, [pc, #564]	; (8002b9c <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002966:	011a      	lsls	r2, r3, #4
 8002968:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800296a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800296e:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002972:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002976:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800297a:	f043 0309 	orr.w	r3, r3, #9
 800297e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002982:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002986:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002988:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800298c:	4622      	mov	r2, r4
 800298e:	214e      	movs	r1, #78	; 0x4e
 8002990:	4638      	mov	r0, r7
 8002992:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002994:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002998:	f003 fcf2 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800299c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e0      	bne.n	8002966 <lcd_update_amperage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029a4:	4a7b      	ldr	r2, [pc, #492]	; (8002b94 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029a6:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029a8:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029aa:	214e      	movs	r1, #78	; 0x4e
 80029ac:	4622      	mov	r2, r4
 80029ae:	487a      	ldr	r0, [pc, #488]	; (8002b98 <lcd_update_amperage+0x284>)
 80029b0:	9600      	str	r6, [sp, #0]
 80029b2:	f003 fce5 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80029b6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80029ba:	b30b      	cbz	r3, 8002a00 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029bc:	2764      	movs	r7, #100	; 0x64
 80029be:	4e76      	ldr	r6, [pc, #472]	; (8002b98 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 80029c0:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80029c2:	011a      	lsls	r2, r3, #4
 80029c4:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80029c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80029ca:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80029ce:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80029d2:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80029d6:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029da:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80029dc:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80029e0:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029e4:	4622      	mov	r2, r4
 80029e6:	214e      	movs	r1, #78	; 0x4e
 80029e8:	4630      	mov	r0, r6
 80029ea:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80029ec:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80029f0:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029f4:	f003 fcc4 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80029f8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e0      	bne.n	80029c2 <lcd_update_amperage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a00:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a02:	4867      	ldr	r0, [pc, #412]	; (8002ba0 <lcd_update_amperage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a04:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a06:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a08:	4622      	mov	r2, r4
 8002a0a:	214e      	movs	r1, #78	; 0x4e
 8002a0c:	9500      	str	r5, [sp, #0]
 8002a0e:	4862      	ldr	r0, [pc, #392]	; (8002b98 <lcd_update_amperage+0x284>)
 8002a10:	f003 fcb6 	bl	8006380 <HAL_I2C_Master_Transmit>
}
 8002a14:	b007      	add	sp, #28
 8002a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a18:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a1a:	4a62      	ldr	r2, [pc, #392]	; (8002ba4 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a1c:	485e      	ldr	r0, [pc, #376]	; (8002b98 <lcd_update_amperage+0x284>)
 8002a1e:	ac03      	add	r4, sp, #12
 8002a20:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a22:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a24:	214e      	movs	r1, #78	; 0x4e
 8002a26:	4622      	mov	r2, r4
 8002a28:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a2a:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a2c:	f003 fca8 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a30:	2320      	movs	r3, #32
 8002a32:	4d5a      	ldr	r5, [pc, #360]	; (8002b9c <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002a34:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a3a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002a3e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a40:	f043 0309 	orr.w	r3, r3, #9
 8002a44:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a48:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a4c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a50:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a54:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a58:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	4622      	mov	r2, r4
 8002a60:	214e      	movs	r1, #78	; 0x4e
 8002a62:	4638      	mov	r0, r7
 8002a64:	9600      	str	r6, [sp, #0]
 8002a66:	f003 fc8b 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a6a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e0      	bne.n	8002a34 <lcd_update_amperage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a72:	4a4c      	ldr	r2, [pc, #304]	; (8002ba4 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a74:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a76:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a78:	214e      	movs	r1, #78	; 0x4e
 8002a7a:	4622      	mov	r2, r4
 8002a7c:	4846      	ldr	r0, [pc, #280]	; (8002b98 <lcd_update_amperage+0x284>)
 8002a7e:	9600      	str	r6, [sp, #0]
 8002a80:	f003 fc7e 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a84:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0b9      	beq.n	8002a00 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a8c:	2764      	movs	r7, #100	; 0x64
 8002a8e:	4e42      	ldr	r6, [pc, #264]	; (8002b98 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002a90:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002a92:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a98:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002a9c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a9e:	f043 0309 	orr.w	r3, r3, #9
 8002aa2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002aa6:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002aaa:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002aae:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ab2:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ab6:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002aba:	2304      	movs	r3, #4
 8002abc:	4622      	mov	r2, r4
 8002abe:	214e      	movs	r1, #78	; 0x4e
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	9700      	str	r7, [sp, #0]
 8002ac4:	f003 fc5c 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002ac8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e0      	bne.n	8002a92 <lcd_update_amperage+0x17e>
 8002ad0:	e796      	b.n	8002a00 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ad2:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ad4:	4a34      	ldr	r2, [pc, #208]	; (8002ba8 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ad6:	4830      	ldr	r0, [pc, #192]	; (8002b98 <lcd_update_amperage+0x284>)
 8002ad8:	ac03      	add	r4, sp, #12
 8002ada:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002adc:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ade:	214e      	movs	r1, #78	; 0x4e
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ae4:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ae6:	f003 fc4b 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002aea:	2320      	movs	r3, #32
 8002aec:	4d2b      	ldr	r5, [pc, #172]	; (8002b9c <lcd_update_amperage+0x288>)
	data_u = (data&0xf0);
 8002aee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002af6:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002afa:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002afe:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002b02:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b06:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b0a:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b0e:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b12:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b14:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b18:	214e      	movs	r1, #78	; 0x4e
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	4638      	mov	r0, r7
 8002b1e:	9600      	str	r6, [sp, #0]
 8002b20:	f003 fc2e 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b24:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e0      	bne.n	8002aee <lcd_update_amperage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b2c:	4a1e      	ldr	r2, [pc, #120]	; (8002ba8 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b2e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b30:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b32:	214e      	movs	r1, #78	; 0x4e
 8002b34:	4622      	mov	r2, r4
 8002b36:	4818      	ldr	r0, [pc, #96]	; (8002b98 <lcd_update_amperage+0x284>)
 8002b38:	9600      	str	r6, [sp, #0]
 8002b3a:	f003 fc21 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b3e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f43f af5c 	beq.w	8002a00 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b48:	2764      	movs	r7, #100	; 0x64
 8002b4a:	4e13      	ldr	r6, [pc, #76]	; (8002b98 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002b4c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002b4e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002b54:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b56:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b5a:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002b5e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b62:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b66:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002b6a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b6e:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b72:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b74:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b78:	4622      	mov	r2, r4
 8002b7a:	214e      	movs	r1, #78	; 0x4e
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	9700      	str	r7, [sp, #0]
 8002b80:	f003 fbfe 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b84:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e0      	bne.n	8002b4e <lcd_update_amperage+0x23a>
 8002b8c:	e738      	b.n	8002a00 <lcd_update_amperage+0xec>
 8002b8e:	bf00      	nop
 8002b90:	0800d2ec 	.word	0x0800d2ec
 8002b94:	383cc8cc 	.word	0x383cc8cc
 8002b98:	200004fc 	.word	0x200004fc
 8002b9c:	0800d2dc 	.word	0x0800d2dc
 8002ba0:	191d494d 	.word	0x191d494d
 8002ba4:	282ce8ec 	.word	0x282ce8ec
 8002ba8:	e8ecc8cc 	.word	0xe8ecc8cc
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bac:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002bae:	4a2e      	ldr	r2, [pc, #184]	; (8002c68 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bb0:	482e      	ldr	r0, [pc, #184]	; (8002c6c <lcd_update_amperage+0x358>)
 8002bb2:	ac03      	add	r4, sp, #12
 8002bb4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002bb6:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bb8:	214e      	movs	r1, #78	; 0x4e
 8002bba:	4622      	mov	r2, r4
 8002bbc:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bbe:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bc0:	f003 fbde 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	4d2a      	ldr	r5, [pc, #168]	; (8002c70 <lcd_update_amperage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8002bc8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002bce:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002bd2:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002bd4:	f043 0309 	orr.w	r3, r3, #9
 8002bd8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002bdc:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002be0:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002be4:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002be8:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002bec:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	4622      	mov	r2, r4
 8002bf4:	214e      	movs	r1, #78	; 0x4e
 8002bf6:	4638      	mov	r0, r7
 8002bf8:	9600      	str	r6, [sp, #0]
 8002bfa:	f003 fbc1 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002bfe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1e0      	bne.n	8002bc8 <lcd_update_amperage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c06:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c08:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c0a:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c0c:	214e      	movs	r1, #78	; 0x4e
 8002c0e:	4622      	mov	r2, r4
 8002c10:	4816      	ldr	r0, [pc, #88]	; (8002c6c <lcd_update_amperage+0x358>)
 8002c12:	9600      	str	r6, [sp, #0]
 8002c14:	f003 fbb4 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c18:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f43f aeef 	beq.w	8002a00 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c22:	2764      	movs	r7, #100	; 0x64
 8002c24:	4e11      	ldr	r6, [pc, #68]	; (8002c6c <lcd_update_amperage+0x358>)
	while (*str) lcd_send_data (*str++);
 8002c26:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 8002c28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c30:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c34:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c38:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c3c:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c40:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c44:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c48:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c4c:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c4e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c52:	214e      	movs	r1, #78	; 0x4e
 8002c54:	4622      	mov	r2, r4
 8002c56:	4630      	mov	r0, r6
 8002c58:	9700      	str	r7, [sp, #0]
 8002c5a:	f003 fb91 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c5e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e0      	bne.n	8002c28 <lcd_update_amperage+0x314>
 8002c66:	e6cb      	b.n	8002a00 <lcd_update_amperage+0xec>
 8002c68:	787cd8dc 	.word	0x787cd8dc
 8002c6c:	200004fc 	.word	0x200004fc
 8002c70:	0800d2dc 	.word	0x0800d2dc

08002c74 <lcd_psu_update>:
void lcd_psu_update(void){
 8002c74:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c76:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c78:	49a3      	ldr	r1, [pc, #652]	; (8002f08 <lcd_psu_update+0x294>)
void lcd_psu_update(void){
 8002c7a:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c7c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c7e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c80:	48a2      	ldr	r0, [pc, #648]	; (8002f0c <lcd_psu_update+0x298>)
 8002c82:	214e      	movs	r1, #78	; 0x4e
 8002c84:	aa03      	add	r2, sp, #12
 8002c86:	9400      	str	r4, [sp, #0]
 8002c88:	f003 fb7a 	bl	8006380 <HAL_I2C_Master_Transmit>
	if(kpenum == WAIT){
 8002c8c:	4ba0      	ldr	r3, [pc, #640]	; (8002f10 <lcd_psu_update+0x29c>)
 8002c8e:	781d      	ldrb	r5, [r3, #0]
 8002c90:	b165      	cbz	r5, 8002cac <lcd_psu_update+0x38>
	else if(kpenum == V1){
 8002c92:	2d01      	cmp	r5, #1
 8002c94:	f000 8156 	beq.w	8002f44 <lcd_psu_update+0x2d0>
	else if(kpenum == V2){
 8002c98:	2d03      	cmp	r5, #3
 8002c9a:	d032      	beq.n	8002d02 <lcd_psu_update+0x8e>
	else if(kpenum == A1){
 8002c9c:	2d02      	cmp	r5, #2
 8002c9e:	f000 81a1 	beq.w	8002fe4 <lcd_psu_update+0x370>
	else if(kpenum == A2){
 8002ca2:	2d04      	cmp	r5, #4
 8002ca4:	f000 81ee 	beq.w	8003084 <lcd_psu_update+0x410>
}
 8002ca8:	b004      	add	sp, #16
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
		lcd_update_voltage(1,volt_set_aux);
 8002cac:	4b99      	ldr	r3, [pc, #612]	; (8002f14 <lcd_psu_update+0x2a0>)
 8002cae:	2001      	movs	r0, #1
 8002cb0:	6819      	ldr	r1, [r3, #0]
 8002cb2:	f7ff fc7f 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8002cb6:	4b98      	ldr	r3, [pc, #608]	; (8002f18 <lcd_psu_update+0x2a4>)
 8002cb8:	2001      	movs	r0, #1
 8002cba:	6819      	ldr	r1, [r3, #0]
 8002cbc:	f7ff fe2a 	bl	8002914 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8002cc0:	4b96      	ldr	r3, [pc, #600]	; (8002f1c <lcd_psu_update+0x2a8>)
 8002cc2:	2002      	movs	r0, #2
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	f7ff fc75 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8002cca:	4b95      	ldr	r3, [pc, #596]	; (8002f20 <lcd_psu_update+0x2ac>)
 8002ccc:	2002      	movs	r0, #2
 8002cce:	6819      	ldr	r1, [r3, #0]
 8002cd0:	f7ff fe20 	bl	8002914 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8002cd4:	4b93      	ldr	r3, [pc, #588]	; (8002f24 <lcd_psu_update+0x2b0>)
 8002cd6:	2003      	movs	r0, #3
 8002cd8:	6819      	ldr	r1, [r3, #0]
 8002cda:	f7ff fc6b 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8002cde:	4b92      	ldr	r3, [pc, #584]	; (8002f28 <lcd_psu_update+0x2b4>)
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	6819      	ldr	r1, [r3, #0]
 8002ce4:	f7ff fe16 	bl	8002914 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8002ce8:	4b90      	ldr	r3, [pc, #576]	; (8002f2c <lcd_psu_update+0x2b8>)
 8002cea:	2004      	movs	r0, #4
 8002cec:	6819      	ldr	r1, [r3, #0]
 8002cee:	f7ff fc61 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002cf2:	2004      	movs	r0, #4
 8002cf4:	4b8e      	ldr	r3, [pc, #568]	; (8002f30 <lcd_psu_update+0x2bc>)
 8002cf6:	6819      	ldr	r1, [r3, #0]
}
 8002cf8:	b004      	add	sp, #16
 8002cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lcd_update_amperage(4,cur_num);
 8002cfe:	f7ff be09 	b.w	8002914 <lcd_update_amperage>
		lcd_update_voltage(1,volt_set_aux);
 8002d02:	4b84      	ldr	r3, [pc, #528]	; (8002f14 <lcd_psu_update+0x2a0>)
 8002d04:	2001      	movs	r0, #1
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	f7ff fc54 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8002d0c:	4b82      	ldr	r3, [pc, #520]	; (8002f18 <lcd_psu_update+0x2a4>)
 8002d0e:	2001      	movs	r0, #1
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	f7ff fdff 	bl	8002914 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8002d16:	4b81      	ldr	r3, [pc, #516]	; (8002f1c <lcd_psu_update+0x2a8>)
 8002d18:	2002      	movs	r0, #2
 8002d1a:	6819      	ldr	r1, [r3, #0]
 8002d1c:	f7ff fc4a 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8002d20:	4b7f      	ldr	r3, [pc, #508]	; (8002f20 <lcd_psu_update+0x2ac>)
 8002d22:	2002      	movs	r0, #2
 8002d24:	6819      	ldr	r1, [r3, #0]
 8002d26:	f7ff fdf5 	bl	8002914 <lcd_update_amperage>
		lcd_update_amperage(3,amp_set_main);
 8002d2a:	4b7f      	ldr	r3, [pc, #508]	; (8002f28 <lcd_psu_update+0x2b4>)
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	6819      	ldr	r1, [r3, #0]
 8002d30:	f7ff fdf0 	bl	8002914 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8002d34:	4b7d      	ldr	r3, [pc, #500]	; (8002f2c <lcd_psu_update+0x2b8>)
 8002d36:	2004      	movs	r0, #4
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	f7ff fc3b 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002d3e:	4b7c      	ldr	r3, [pc, #496]	; (8002f30 <lcd_psu_update+0x2bc>)
 8002d40:	2004      	movs	r0, #4
 8002d42:	6819      	ldr	r1, [r3, #0]
 8002d44:	f7ff fde6 	bl	8002914 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d48:	497a      	ldr	r1, [pc, #488]	; (8002f34 <lcd_psu_update+0x2c0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d4a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d4c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d4e:	486f      	ldr	r0, [pc, #444]	; (8002f0c <lcd_psu_update+0x298>)
 8002d50:	214e      	movs	r1, #78	; 0x4e
 8002d52:	aa03      	add	r2, sp, #12
 8002d54:	9400      	str	r4, [sp, #0]
 8002d56:	f003 fb13 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	4d76      	ldr	r5, [pc, #472]	; (8002f38 <lcd_psu_update+0x2c4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d5e:	4e6b      	ldr	r6, [pc, #428]	; (8002f0c <lcd_psu_update+0x298>)
	data_l = ((data<<4)&0xf0);
 8002d60:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d66:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002d6a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d6c:	f043 0309 	orr.w	r3, r3, #9
 8002d70:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d74:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d78:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d7c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d80:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d84:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d88:	2304      	movs	r3, #4
 8002d8a:	214e      	movs	r1, #78	; 0x4e
 8002d8c:	4630      	mov	r0, r6
 8002d8e:	9400      	str	r4, [sp, #0]
 8002d90:	aa03      	add	r2, sp, #12
 8002d92:	f003 faf5 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d96:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1e0      	bne.n	8002d60 <lcd_psu_update+0xec>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d9e:	4965      	ldr	r1, [pc, #404]	; (8002f34 <lcd_psu_update+0x2c0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002da0:	2304      	movs	r3, #4
 8002da2:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002da4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002da6:	4859      	ldr	r0, [pc, #356]	; (8002f0c <lcd_psu_update+0x298>)
 8002da8:	214e      	movs	r1, #78	; 0x4e
 8002daa:	9400      	str	r4, [sp, #0]
 8002dac:	f003 fae8 	bl	8006380 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002db0:	4962      	ldr	r1, [pc, #392]	; (8002f3c <lcd_psu_update+0x2c8>)
		if(keypadarr[0] != 'z'){
 8002db2:	4d63      	ldr	r5, [pc, #396]	; (8002f40 <lcd_psu_update+0x2cc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002db4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002db6:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002db8:	4854      	ldr	r0, [pc, #336]	; (8002f0c <lcd_psu_update+0x298>)
 8002dba:	214e      	movs	r1, #78	; 0x4e
 8002dbc:	aa03      	add	r2, sp, #12
 8002dbe:	9400      	str	r4, [sp, #0]
 8002dc0:	f003 fade 	bl	8006380 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8002dc4:	782b      	ldrb	r3, [r5, #0]
 8002dc6:	2b7a      	cmp	r3, #122	; 0x7a
 8002dc8:	d01b      	beq.n	8002e02 <lcd_psu_update+0x18e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dca:	9400      	str	r4, [sp, #0]
			lcd_send_data(keypadarr[0]);
 8002dcc:	782b      	ldrb	r3, [r5, #0]
	data_l = ((data<<4)&0xf0);
 8002dce:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002dd4:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dd6:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002dda:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002dde:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002de2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002de6:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002dea:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002dee:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002df2:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002df6:	2304      	movs	r3, #4
 8002df8:	214e      	movs	r1, #78	; 0x4e
 8002dfa:	4844      	ldr	r0, [pc, #272]	; (8002f0c <lcd_psu_update+0x298>)
 8002dfc:	aa03      	add	r2, sp, #12
 8002dfe:	f003 fabf 	bl	8006380 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 8002e02:	786b      	ldrb	r3, [r5, #1]
 8002e04:	2b7a      	cmp	r3, #122	; 0x7a
 8002e06:	d01c      	beq.n	8002e42 <lcd_psu_update+0x1ce>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e08:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[1]);
 8002e0a:	786b      	ldrb	r3, [r5, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e0c:	483f      	ldr	r0, [pc, #252]	; (8002f0c <lcd_psu_update+0x298>)
	data_l = ((data<<4)&0xf0);
 8002e0e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e14:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002e18:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e1a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e1e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e22:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e26:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e2a:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e2e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e32:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e36:	2304      	movs	r3, #4
 8002e38:	214e      	movs	r1, #78	; 0x4e
 8002e3a:	aa03      	add	r2, sp, #12
 8002e3c:	9400      	str	r4, [sp, #0]
 8002e3e:	f003 fa9f 	bl	8006380 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 8002e42:	78ab      	ldrb	r3, [r5, #2]
 8002e44:	2b7a      	cmp	r3, #122	; 0x7a
 8002e46:	d01c      	beq.n	8002e82 <lcd_psu_update+0x20e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e48:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[2]);
 8002e4a:	78ab      	ldrb	r3, [r5, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e4c:	482f      	ldr	r0, [pc, #188]	; (8002f0c <lcd_psu_update+0x298>)
	data_l = ((data<<4)&0xf0);
 8002e4e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e54:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002e58:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e5a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e5e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e62:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e66:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e6a:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e6e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e72:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e76:	2304      	movs	r3, #4
 8002e78:	214e      	movs	r1, #78	; 0x4e
 8002e7a:	aa03      	add	r2, sp, #12
 8002e7c:	9400      	str	r4, [sp, #0]
 8002e7e:	f003 fa7f 	bl	8006380 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 8002e82:	78eb      	ldrb	r3, [r5, #3]
 8002e84:	2b7a      	cmp	r3, #122	; 0x7a
 8002e86:	d01c      	beq.n	8002ec2 <lcd_psu_update+0x24e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e88:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[3]);
 8002e8a:	78eb      	ldrb	r3, [r5, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e8c:	481f      	ldr	r0, [pc, #124]	; (8002f0c <lcd_psu_update+0x298>)
	data_l = ((data<<4)&0xf0);
 8002e8e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e94:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002e98:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e9a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e9e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ea2:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ea6:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002eaa:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002eae:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002eb2:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	214e      	movs	r1, #78	; 0x4e
 8002eba:	aa03      	add	r2, sp, #12
 8002ebc:	9400      	str	r4, [sp, #0]
 8002ebe:	f003 fa5f 	bl	8006380 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 8002ec2:	792b      	ldrb	r3, [r5, #4]
 8002ec4:	2b7a      	cmp	r3, #122	; 0x7a
 8002ec6:	f43f aeef 	beq.w	8002ca8 <lcd_psu_update+0x34>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eca:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[4]);
 8002ecc:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ece:	aa03      	add	r2, sp, #12
	data_l = ((data<<4)&0xf0);
 8002ed0:	0119      	lsls	r1, r3, #4
	data_u = (data&0xf0);
 8002ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002ed6:	b2c9      	uxtb	r1, r1
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ed8:	f043 000d 	orr.w	r0, r3, #13
 8002edc:	f88d 000c 	strb.w	r0, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ee0:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ee4:	f041 0009 	orr.w	r0, r1, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ee8:	f041 050d 	orr.w	r5, r1, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002eec:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ef0:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	214e      	movs	r1, #78	; 0x4e
 8002ef8:	9400      	str	r4, [sp, #0]
 8002efa:	4804      	ldr	r0, [pc, #16]	; (8002f0c <lcd_psu_update+0x298>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002efc:	f88d 500e 	strb.w	r5, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f00:	f003 fa3e 	bl	8006380 <HAL_I2C_Master_Transmit>
}
 8002f04:	b004      	add	sp, #16
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
 8002f08:	c8cc080c 	.word	0xc8cc080c
 8002f0c:	200004fc 	.word	0x200004fc
 8002f10:	200006d5 	.word	0x200006d5
 8002f14:	20000830 	.word	0x20000830
 8002f18:	200003a8 	.word	0x200003a8
 8002f1c:	200006dc 	.word	0x200006dc
 8002f20:	200003bc 	.word	0x200003bc
 8002f24:	20000834 	.word	0x20000834
 8002f28:	200003ac 	.word	0x200003ac
 8002f2c:	200006d8 	.word	0x200006d8
 8002f30:	200003b8 	.word	0x200003b8
 8002f34:	787c989c 	.word	0x787c989c
 8002f38:	0800d2dc 	.word	0x0800d2dc
 8002f3c:	f8fc080c 	.word	0xf8fc080c
 8002f40:	20000014 	.word	0x20000014
		lcd_update_amperage(1,amp_set_aux);
 8002f44:	4b77      	ldr	r3, [pc, #476]	; (8003124 <lcd_psu_update+0x4b0>)
 8002f46:	4628      	mov	r0, r5
 8002f48:	6819      	ldr	r1, [r3, #0]
 8002f4a:	f7ff fce3 	bl	8002914 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8002f4e:	4b76      	ldr	r3, [pc, #472]	; (8003128 <lcd_psu_update+0x4b4>)
 8002f50:	2002      	movs	r0, #2
 8002f52:	6819      	ldr	r1, [r3, #0]
 8002f54:	f7ff fb2e 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8002f58:	4b74      	ldr	r3, [pc, #464]	; (800312c <lcd_psu_update+0x4b8>)
 8002f5a:	2002      	movs	r0, #2
 8002f5c:	6819      	ldr	r1, [r3, #0]
 8002f5e:	f7ff fcd9 	bl	8002914 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8002f62:	4b73      	ldr	r3, [pc, #460]	; (8003130 <lcd_psu_update+0x4bc>)
 8002f64:	2003      	movs	r0, #3
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	f7ff fb24 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8002f6c:	4b71      	ldr	r3, [pc, #452]	; (8003134 <lcd_psu_update+0x4c0>)
 8002f6e:	2003      	movs	r0, #3
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	f7ff fccf 	bl	8002914 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8002f76:	4b70      	ldr	r3, [pc, #448]	; (8003138 <lcd_psu_update+0x4c4>)
 8002f78:	2004      	movs	r0, #4
 8002f7a:	6819      	ldr	r1, [r3, #0]
 8002f7c:	f7ff fb1a 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002f80:	4b6e      	ldr	r3, [pc, #440]	; (800313c <lcd_psu_update+0x4c8>)
 8002f82:	2004      	movs	r0, #4
 8002f84:	6819      	ldr	r1, [r3, #0]
 8002f86:	f7ff fcc5 	bl	8002914 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f8a:	496d      	ldr	r1, [pc, #436]	; (8003140 <lcd_psu_update+0x4cc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f8c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f8e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f90:	486c      	ldr	r0, [pc, #432]	; (8003144 <lcd_psu_update+0x4d0>)
 8002f92:	214e      	movs	r1, #78	; 0x4e
 8002f94:	aa03      	add	r2, sp, #12
 8002f96:	9400      	str	r4, [sp, #0]
 8002f98:	f003 f9f2 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	4d6a      	ldr	r5, [pc, #424]	; (8003148 <lcd_psu_update+0x4d4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fa0:	4e68      	ldr	r6, [pc, #416]	; (8003144 <lcd_psu_update+0x4d0>)
	data_u = (data&0xf0);
 8002fa2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002faa:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002fae:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fb2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002fb6:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fba:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fbe:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fc2:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fc6:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fc8:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fcc:	214e      	movs	r1, #78	; 0x4e
 8002fce:	4630      	mov	r0, r6
 8002fd0:	9400      	str	r4, [sp, #0]
 8002fd2:	aa03      	add	r2, sp, #12
 8002fd4:	f003 f9d4 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002fd8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e0      	bne.n	8002fa2 <lcd_psu_update+0x32e>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fe0:	4957      	ldr	r1, [pc, #348]	; (8003140 <lcd_psu_update+0x4cc>)
 8002fe2:	e6dd      	b.n	8002da0 <lcd_psu_update+0x12c>
		lcd_update_voltage(1,volt_set_aux);
 8002fe4:	4b59      	ldr	r3, [pc, #356]	; (800314c <lcd_psu_update+0x4d8>)
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	6819      	ldr	r1, [r3, #0]
 8002fea:	f7ff fae3 	bl	80025b4 <lcd_update_voltage>
		lcd_update_voltage(2,lin_num_aux);
 8002fee:	4b4e      	ldr	r3, [pc, #312]	; (8003128 <lcd_psu_update+0x4b4>)
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	6819      	ldr	r1, [r3, #0]
 8002ff4:	f7ff fade 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8002ff8:	4b4c      	ldr	r3, [pc, #304]	; (800312c <lcd_psu_update+0x4b8>)
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	6819      	ldr	r1, [r3, #0]
 8002ffe:	f7ff fc89 	bl	8002914 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003002:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <lcd_psu_update+0x4bc>)
 8003004:	2003      	movs	r0, #3
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	f7ff fad4 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 800300c:	4b49      	ldr	r3, [pc, #292]	; (8003134 <lcd_psu_update+0x4c0>)
 800300e:	2003      	movs	r0, #3
 8003010:	6819      	ldr	r1, [r3, #0]
 8003012:	f7ff fc7f 	bl	8002914 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003016:	4b48      	ldr	r3, [pc, #288]	; (8003138 <lcd_psu_update+0x4c4>)
 8003018:	2004      	movs	r0, #4
 800301a:	6819      	ldr	r1, [r3, #0]
 800301c:	f7ff faca 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003020:	4b46      	ldr	r3, [pc, #280]	; (800313c <lcd_psu_update+0x4c8>)
 8003022:	2004      	movs	r0, #4
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	f7ff fc75 	bl	8002914 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800302a:	4949      	ldr	r1, [pc, #292]	; (8003150 <lcd_psu_update+0x4dc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800302c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800302e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003030:	4844      	ldr	r0, [pc, #272]	; (8003144 <lcd_psu_update+0x4d0>)
 8003032:	214e      	movs	r1, #78	; 0x4e
 8003034:	aa03      	add	r2, sp, #12
 8003036:	9400      	str	r4, [sp, #0]
 8003038:	f003 f9a2 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800303c:	2320      	movs	r3, #32
 800303e:	4d42      	ldr	r5, [pc, #264]	; (8003148 <lcd_psu_update+0x4d4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003040:	4e40      	ldr	r6, [pc, #256]	; (8003144 <lcd_psu_update+0x4d0>)
	data_l = ((data<<4)&0xf0);
 8003042:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003048:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800304c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800304e:	f043 0309 	orr.w	r3, r3, #9
 8003052:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003056:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800305a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800305e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003062:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003066:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800306a:	2304      	movs	r3, #4
 800306c:	214e      	movs	r1, #78	; 0x4e
 800306e:	4630      	mov	r0, r6
 8003070:	9400      	str	r4, [sp, #0]
 8003072:	aa03      	add	r2, sp, #12
 8003074:	f003 f984 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003078:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e0      	bne.n	8003042 <lcd_psu_update+0x3ce>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003080:	4933      	ldr	r1, [pc, #204]	; (8003150 <lcd_psu_update+0x4dc>)
 8003082:	e68d      	b.n	8002da0 <lcd_psu_update+0x12c>
		lcd_update_voltage(1,volt_set_aux);
 8003084:	4b31      	ldr	r3, [pc, #196]	; (800314c <lcd_psu_update+0x4d8>)
 8003086:	2001      	movs	r0, #1
 8003088:	6819      	ldr	r1, [r3, #0]
 800308a:	f7ff fa93 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 800308e:	4b25      	ldr	r3, [pc, #148]	; (8003124 <lcd_psu_update+0x4b0>)
 8003090:	2001      	movs	r0, #1
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	f7ff fc3e 	bl	8002914 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003098:	4b23      	ldr	r3, [pc, #140]	; (8003128 <lcd_psu_update+0x4b4>)
 800309a:	2002      	movs	r0, #2
 800309c:	6819      	ldr	r1, [r3, #0]
 800309e:	f7ff fa89 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 80030a2:	4b22      	ldr	r3, [pc, #136]	; (800312c <lcd_psu_update+0x4b8>)
 80030a4:	2002      	movs	r0, #2
 80030a6:	6819      	ldr	r1, [r3, #0]
 80030a8:	f7ff fc34 	bl	8002914 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 80030ac:	4b20      	ldr	r3, [pc, #128]	; (8003130 <lcd_psu_update+0x4bc>)
 80030ae:	2003      	movs	r0, #3
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	f7ff fa7f 	bl	80025b4 <lcd_update_voltage>
		lcd_update_voltage(4,lin_num);
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <lcd_psu_update+0x4c4>)
 80030b8:	4628      	mov	r0, r5
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	f7ff fa7a 	bl	80025b4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 80030c0:	4b1e      	ldr	r3, [pc, #120]	; (800313c <lcd_psu_update+0x4c8>)
 80030c2:	4628      	mov	r0, r5
 80030c4:	6819      	ldr	r1, [r3, #0]
 80030c6:	f7ff fc25 	bl	8002914 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80030ca:	4922      	ldr	r1, [pc, #136]	; (8003154 <lcd_psu_update+0x4e0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030cc:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80030ce:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030d0:	481c      	ldr	r0, [pc, #112]	; (8003144 <lcd_psu_update+0x4d0>)
 80030d2:	214e      	movs	r1, #78	; 0x4e
 80030d4:	aa03      	add	r2, sp, #12
 80030d6:	9400      	str	r4, [sp, #0]
 80030d8:	f003 f952 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80030dc:	2320      	movs	r3, #32
 80030de:	4d1a      	ldr	r5, [pc, #104]	; (8003148 <lcd_psu_update+0x4d4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030e0:	4e18      	ldr	r6, [pc, #96]	; (8003144 <lcd_psu_update+0x4d0>)
	data_l = ((data<<4)&0xf0);
 80030e2:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80030e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030e8:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80030ec:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030ee:	f043 0309 	orr.w	r3, r3, #9
 80030f2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030f6:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030fa:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030fe:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003102:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003106:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800310a:	2304      	movs	r3, #4
 800310c:	214e      	movs	r1, #78	; 0x4e
 800310e:	4630      	mov	r0, r6
 8003110:	9400      	str	r4, [sp, #0]
 8003112:	aa03      	add	r2, sp, #12
 8003114:	f003 f934 	bl	8006380 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003118:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e0      	bne.n	80030e2 <lcd_psu_update+0x46e>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003120:	490c      	ldr	r1, [pc, #48]	; (8003154 <lcd_psu_update+0x4e0>)
 8003122:	e63d      	b.n	8002da0 <lcd_psu_update+0x12c>
 8003124:	200003a8 	.word	0x200003a8
 8003128:	200006dc 	.word	0x200006dc
 800312c:	200003bc 	.word	0x200003bc
 8003130:	20000834 	.word	0x20000834
 8003134:	200003ac 	.word	0x200003ac
 8003138:	200006d8 	.word	0x200006d8
 800313c:	200003b8 	.word	0x200003b8
 8003140:	383c888c 	.word	0x383c888c
 8003144:	200004fc 	.word	0x200004fc
 8003148:	0800d2dc 	.word	0x0800d2dc
 800314c:	20000830 	.word	0x20000830
 8003150:	383cc8cc 	.word	0x383cc8cc
 8003154:	787cd8dc 	.word	0x787cd8dc

08003158 <translate_keypad>:
float translate_keypad(void){
 8003158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if(keypadarr[i] == '.'){
 800315c:	4ca6      	ldr	r4, [pc, #664]	; (80033f8 <translate_keypad+0x2a0>)
 800315e:	7823      	ldrb	r3, [r4, #0]
 8003160:	7861      	ldrb	r1, [r4, #1]
 8003162:	3b2e      	subs	r3, #46	; 0x2e
 8003164:	78a2      	ldrb	r2, [r4, #2]
 8003166:	bf18      	it	ne
 8003168:	f04f 33ff 	movne.w	r3, #4294967295
	for(int i = 0; i < keypadlength; i++){
 800316c:	292e      	cmp	r1, #46	; 0x2e
 800316e:	bf08      	it	eq
 8003170:	2301      	moveq	r3, #1
		if(keypadarr[i] == '.'){
 8003172:	2a2e      	cmp	r2, #46	; 0x2e
 8003174:	f000 8103 	beq.w	800337e <translate_keypad+0x226>
 8003178:	78e2      	ldrb	r2, [r4, #3]
 800317a:	2a2e      	cmp	r2, #46	; 0x2e
 800317c:	d018      	beq.n	80031b0 <translate_keypad+0x58>
 800317e:	7922      	ldrb	r2, [r4, #4]
 8003180:	2a2e      	cmp	r2, #46	; 0x2e
 8003182:	f000 816b 	beq.w	800345c <translate_keypad+0x304>
	if(decimallocation == -1){
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	f040 816a 	bne.w	8003460 <translate_keypad+0x308>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800318c:	7923      	ldrb	r3, [r4, #4]
 800318e:	2b2f      	cmp	r3, #47	; 0x2f
 8003190:	f240 80a5 	bls.w	80032de <translate_keypad+0x186>
 8003194:	7923      	ldrb	r3, [r4, #4]
 8003196:	2b39      	cmp	r3, #57	; 0x39
 8003198:	f200 80a1 	bhi.w	80032de <translate_keypad+0x186>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800319c:	7920      	ldrb	r0, [r4, #4]
				count = count * 10;
 800319e:	260a      	movs	r6, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80031a0:	3830      	subs	r0, #48	; 0x30
 80031a2:	f7fd fd43 	bl	8000c2c <__aeabi_i2f>
 80031a6:	2100      	movs	r1, #0
 80031a8:	f7fd fc8c 	bl	8000ac4 <__addsf3>
 80031ac:	4605      	mov	r5, r0
				count = count * 10;
 80031ae:	e098      	b.n	80032e2 <translate_keypad+0x18a>
		if(keypadarr[i] == '.'){
 80031b0:	7923      	ldrb	r3, [r4, #4]
	for(int i = 0; i < keypadlength; i++){
 80031b2:	2b2e      	cmp	r3, #46	; 0x2e
 80031b4:	bf0c      	ite	eq
 80031b6:	2704      	moveq	r7, #4
 80031b8:	2703      	movne	r7, #3
		for(int i = decimallocation-1; i >=0; i--){
 80031ba:	1e7e      	subs	r6, r7, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80031bc:	5da3      	ldrb	r3, [r4, r6]
 80031be:	2b2f      	cmp	r3, #47	; 0x2f
 80031c0:	d903      	bls.n	80031ca <translate_keypad+0x72>
 80031c2:	5da3      	ldrb	r3, [r4, r6]
 80031c4:	2b39      	cmp	r3, #57	; 0x39
 80031c6:	f240 80fb 	bls.w	80033c0 <translate_keypad+0x268>
		int count = 1;
 80031ca:	f04f 0801 	mov.w	r8, #1
	float num = 0;
 80031ce:	2500      	movs	r5, #0
		for(int i = decimallocation-1; i >=0; i--){
 80031d0:	1e73      	subs	r3, r6, #1
 80031d2:	2e00      	cmp	r6, #0
 80031d4:	f000 80e2 	beq.w	800339c <translate_keypad+0x244>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80031d8:	5ce2      	ldrb	r2, [r4, r3]
 80031da:	2a2f      	cmp	r2, #47	; 0x2f
 80031dc:	d903      	bls.n	80031e6 <translate_keypad+0x8e>
 80031de:	5ce2      	ldrb	r2, [r4, r3]
 80031e0:	2a39      	cmp	r2, #57	; 0x39
 80031e2:	f240 80f8 	bls.w	80033d6 <translate_keypad+0x27e>
		for(int i = decimallocation-1; i >=0; i--){
 80031e6:	2e01      	cmp	r6, #1
 80031e8:	f1a6 0902 	sub.w	r9, r6, #2
 80031ec:	f000 80d6 	beq.w	800339c <translate_keypad+0x244>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80031f0:	f814 3009 	ldrb.w	r3, [r4, r9]
 80031f4:	2b2f      	cmp	r3, #47	; 0x2f
 80031f6:	d913      	bls.n	8003220 <translate_keypad+0xc8>
 80031f8:	f814 3009 	ldrb.w	r3, [r4, r9]
 80031fc:	2b39      	cmp	r3, #57	; 0x39
 80031fe:	d80f      	bhi.n	8003220 <translate_keypad+0xc8>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003200:	f814 0009 	ldrb.w	r0, [r4, r9]
 8003204:	3830      	subs	r0, #48	; 0x30
 8003206:	fb08 f000 	mul.w	r0, r8, r0
 800320a:	f7fd fd0f 	bl	8000c2c <__aeabi_i2f>
 800320e:	4601      	mov	r1, r0
 8003210:	4628      	mov	r0, r5
 8003212:	f7fd fc57 	bl	8000ac4 <__addsf3>
 8003216:	4605      	mov	r5, r0
				count = count * 10;
 8003218:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 800321c:	ea4f 0848 	mov.w	r8, r8, lsl #1
		for(int i = decimallocation-1; i >=0; i--){
 8003220:	f1b9 0f00 	cmp.w	r9, #0
 8003224:	f000 80ba 	beq.w	800339c <translate_keypad+0x244>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003228:	7823      	ldrb	r3, [r4, #0]
 800322a:	2b2f      	cmp	r3, #47	; 0x2f
 800322c:	f200 80b8 	bhi.w	80033a0 <translate_keypad+0x248>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003230:	2f04      	cmp	r7, #4
 8003232:	f107 0601 	add.w	r6, r7, #1
 8003236:	d04f      	beq.n	80032d8 <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003238:	5da3      	ldrb	r3, [r4, r6]
 800323a:	2b2f      	cmp	r3, #47	; 0x2f
 800323c:	d903      	bls.n	8003246 <translate_keypad+0xee>
 800323e:	5da3      	ldrb	r3, [r4, r6]
 8003240:	2b39      	cmp	r3, #57	; 0x39
 8003242:	f240 80fa 	bls.w	800343a <translate_keypad+0x2e2>
 8003246:	f04f 080a 	mov.w	r8, #10
		for(int i = decimallocation+1; i < keypadlength; i++){
 800324a:	2e04      	cmp	r6, #4
 800324c:	f106 0701 	add.w	r7, r6, #1
 8003250:	d042      	beq.n	80032d8 <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003252:	5de3      	ldrb	r3, [r4, r7]
 8003254:	2b2f      	cmp	r3, #47	; 0x2f
 8003256:	d903      	bls.n	8003260 <translate_keypad+0x108>
 8003258:	5de3      	ldrb	r3, [r4, r7]
 800325a:	2b39      	cmp	r3, #57	; 0x39
 800325c:	f240 80d0 	bls.w	8003400 <translate_keypad+0x2a8>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003260:	2f04      	cmp	r7, #4
 8003262:	f107 0601 	add.w	r6, r7, #1
 8003266:	d037      	beq.n	80032d8 <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003268:	5da3      	ldrb	r3, [r4, r6]
 800326a:	2b2f      	cmp	r3, #47	; 0x2f
 800326c:	d919      	bls.n	80032a2 <translate_keypad+0x14a>
 800326e:	5da3      	ldrb	r3, [r4, r6]
 8003270:	2b39      	cmp	r3, #57	; 0x39
 8003272:	d816      	bhi.n	80032a2 <translate_keypad+0x14a>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003274:	5da0      	ldrb	r0, [r4, r6]
 8003276:	f7fd fcd9 	bl	8000c2c <__aeabi_i2f>
 800327a:	4960      	ldr	r1, [pc, #384]	; (80033fc <translate_keypad+0x2a4>)
 800327c:	f7fd fc20 	bl	8000ac0 <__aeabi_fsub>
 8003280:	4607      	mov	r7, r0
 8003282:	4640      	mov	r0, r8
 8003284:	f7fd fcd2 	bl	8000c2c <__aeabi_i2f>
 8003288:	4601      	mov	r1, r0
 800328a:	4638      	mov	r0, r7
 800328c:	f7fd fdd6 	bl	8000e3c <__aeabi_fdiv>
 8003290:	4601      	mov	r1, r0
 8003292:	4628      	mov	r0, r5
 8003294:	f7fd fc16 	bl	8000ac4 <__addsf3>
 8003298:	4605      	mov	r5, r0
				count = count * 10;
 800329a:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 800329e:	ea4f 0848 	mov.w	r8, r8, lsl #1
		for(int i = decimallocation+1; i < keypadlength; i++){
 80032a2:	2e03      	cmp	r6, #3
 80032a4:	d118      	bne.n	80032d8 <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80032a6:	7923      	ldrb	r3, [r4, #4]
 80032a8:	2b2f      	cmp	r3, #47	; 0x2f
 80032aa:	d915      	bls.n	80032d8 <translate_keypad+0x180>
 80032ac:	7923      	ldrb	r3, [r4, #4]
 80032ae:	2b39      	cmp	r3, #57	; 0x39
 80032b0:	d812      	bhi.n	80032d8 <translate_keypad+0x180>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80032b2:	7920      	ldrb	r0, [r4, #4]
 80032b4:	f7fd fcba 	bl	8000c2c <__aeabi_i2f>
 80032b8:	4950      	ldr	r1, [pc, #320]	; (80033fc <translate_keypad+0x2a4>)
 80032ba:	f7fd fc01 	bl	8000ac0 <__aeabi_fsub>
 80032be:	4604      	mov	r4, r0
 80032c0:	4640      	mov	r0, r8
 80032c2:	f7fd fcb3 	bl	8000c2c <__aeabi_i2f>
 80032c6:	4601      	mov	r1, r0
 80032c8:	4620      	mov	r0, r4
 80032ca:	f7fd fdb7 	bl	8000e3c <__aeabi_fdiv>
 80032ce:	4601      	mov	r1, r0
 80032d0:	4628      	mov	r0, r5
 80032d2:	f7fd fbf7 	bl	8000ac4 <__addsf3>
 80032d6:	4605      	mov	r5, r0
}
 80032d8:	4628      	mov	r0, r5
 80032da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		int count = 1;
 80032de:	2601      	movs	r6, #1
	float num = 0;
 80032e0:	2500      	movs	r5, #0
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80032e2:	78e3      	ldrb	r3, [r4, #3]
 80032e4:	2b2f      	cmp	r3, #47	; 0x2f
 80032e6:	d910      	bls.n	800330a <translate_keypad+0x1b2>
 80032e8:	78e3      	ldrb	r3, [r4, #3]
 80032ea:	2b39      	cmp	r3, #57	; 0x39
 80032ec:	d80d      	bhi.n	800330a <translate_keypad+0x1b2>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80032ee:	78e0      	ldrb	r0, [r4, #3]
 80032f0:	3830      	subs	r0, #48	; 0x30
 80032f2:	fb06 f000 	mul.w	r0, r6, r0
 80032f6:	f7fd fc99 	bl	8000c2c <__aeabi_i2f>
 80032fa:	4601      	mov	r1, r0
 80032fc:	4628      	mov	r0, r5
 80032fe:	f7fd fbe1 	bl	8000ac4 <__addsf3>
 8003302:	4605      	mov	r5, r0
				count = count * 10;
 8003304:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003308:	0076      	lsls	r6, r6, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800330a:	78a3      	ldrb	r3, [r4, #2]
 800330c:	2b2f      	cmp	r3, #47	; 0x2f
 800330e:	d910      	bls.n	8003332 <translate_keypad+0x1da>
 8003310:	78a3      	ldrb	r3, [r4, #2]
 8003312:	2b39      	cmp	r3, #57	; 0x39
 8003314:	d80d      	bhi.n	8003332 <translate_keypad+0x1da>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003316:	78a0      	ldrb	r0, [r4, #2]
 8003318:	3830      	subs	r0, #48	; 0x30
 800331a:	fb06 f000 	mul.w	r0, r6, r0
 800331e:	f7fd fc85 	bl	8000c2c <__aeabi_i2f>
 8003322:	4601      	mov	r1, r0
 8003324:	4628      	mov	r0, r5
 8003326:	f7fd fbcd 	bl	8000ac4 <__addsf3>
 800332a:	4605      	mov	r5, r0
				count = count * 10;
 800332c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003330:	0076      	lsls	r6, r6, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003332:	7863      	ldrb	r3, [r4, #1]
 8003334:	2b2f      	cmp	r3, #47	; 0x2f
 8003336:	d910      	bls.n	800335a <translate_keypad+0x202>
 8003338:	7863      	ldrb	r3, [r4, #1]
 800333a:	2b39      	cmp	r3, #57	; 0x39
 800333c:	d80d      	bhi.n	800335a <translate_keypad+0x202>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800333e:	7860      	ldrb	r0, [r4, #1]
 8003340:	3830      	subs	r0, #48	; 0x30
 8003342:	fb06 f000 	mul.w	r0, r6, r0
 8003346:	f7fd fc71 	bl	8000c2c <__aeabi_i2f>
 800334a:	4601      	mov	r1, r0
 800334c:	4628      	mov	r0, r5
 800334e:	f7fd fbb9 	bl	8000ac4 <__addsf3>
 8003352:	4605      	mov	r5, r0
				count = count * 10;
 8003354:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003358:	0076      	lsls	r6, r6, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800335a:	7823      	ldrb	r3, [r4, #0]
 800335c:	2b2f      	cmp	r3, #47	; 0x2f
 800335e:	d9bb      	bls.n	80032d8 <translate_keypad+0x180>
 8003360:	7823      	ldrb	r3, [r4, #0]
 8003362:	2b39      	cmp	r3, #57	; 0x39
 8003364:	d8b8      	bhi.n	80032d8 <translate_keypad+0x180>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003366:	7820      	ldrb	r0, [r4, #0]
 8003368:	3830      	subs	r0, #48	; 0x30
 800336a:	fb06 f000 	mul.w	r0, r6, r0
 800336e:	f7fd fc5d 	bl	8000c2c <__aeabi_i2f>
 8003372:	4601      	mov	r1, r0
 8003374:	4628      	mov	r0, r5
 8003376:	f7fd fba5 	bl	8000ac4 <__addsf3>
 800337a:	4605      	mov	r5, r0
		for(int i = keypadlength-1; i >=0; i--){
 800337c:	e7ac      	b.n	80032d8 <translate_keypad+0x180>
		if(keypadarr[i] == '.'){
 800337e:	78e3      	ldrb	r3, [r4, #3]
 8003380:	2b2e      	cmp	r3, #46	; 0x2e
 8003382:	f43f af15 	beq.w	80031b0 <translate_keypad+0x58>
 8003386:	7923      	ldrb	r3, [r4, #4]
	for(int i = 0; i < keypadlength; i++){
 8003388:	2b2e      	cmp	r3, #46	; 0x2e
 800338a:	bf0c      	ite	eq
 800338c:	2704      	moveq	r7, #4
 800338e:	2702      	movne	r7, #2
 8003390:	e713      	b.n	80031ba <translate_keypad+0x62>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003392:	7823      	ldrb	r3, [r4, #0]
 8003394:	2b2f      	cmp	r3, #47	; 0x2f
 8003396:	d87a      	bhi.n	800348e <translate_keypad+0x336>
 8003398:	2701      	movs	r7, #1
	float num = 0;
 800339a:	2500      	movs	r5, #0
		for(int i = decimallocation+1; i < keypadlength; i++){
 800339c:	1c7e      	adds	r6, r7, #1
 800339e:	e74b      	b.n	8003238 <translate_keypad+0xe0>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80033a0:	7823      	ldrb	r3, [r4, #0]
 80033a2:	2b39      	cmp	r3, #57	; 0x39
 80033a4:	f63f af44 	bhi.w	8003230 <translate_keypad+0xd8>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80033a8:	7820      	ldrb	r0, [r4, #0]
 80033aa:	3830      	subs	r0, #48	; 0x30
 80033ac:	fb08 f000 	mul.w	r0, r8, r0
 80033b0:	f7fd fc3c 	bl	8000c2c <__aeabi_i2f>
 80033b4:	4601      	mov	r1, r0
 80033b6:	4628      	mov	r0, r5
 80033b8:	f7fd fb84 	bl	8000ac4 <__addsf3>
 80033bc:	4605      	mov	r5, r0
				count = count * 10;
 80033be:	e737      	b.n	8003230 <translate_keypad+0xd8>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80033c0:	5da0      	ldrb	r0, [r4, r6]
				count = count * 10;
 80033c2:	f04f 080a 	mov.w	r8, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80033c6:	3830      	subs	r0, #48	; 0x30
 80033c8:	f7fd fc30 	bl	8000c2c <__aeabi_i2f>
 80033cc:	2100      	movs	r1, #0
 80033ce:	f7fd fb79 	bl	8000ac4 <__addsf3>
 80033d2:	4605      	mov	r5, r0
				count = count * 10;
 80033d4:	e6fc      	b.n	80031d0 <translate_keypad+0x78>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80033d6:	5ce0      	ldrb	r0, [r4, r3]
 80033d8:	3830      	subs	r0, #48	; 0x30
 80033da:	fb08 f000 	mul.w	r0, r8, r0
 80033de:	f7fd fc25 	bl	8000c2c <__aeabi_i2f>
 80033e2:	4601      	mov	r1, r0
 80033e4:	4628      	mov	r0, r5
 80033e6:	f7fd fb6d 	bl	8000ac4 <__addsf3>
				count = count * 10;
 80033ea:	eb08 0888 	add.w	r8, r8, r8, lsl #2
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80033ee:	4605      	mov	r5, r0
				count = count * 10;
 80033f0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80033f4:	e6f7      	b.n	80031e6 <translate_keypad+0x8e>
 80033f6:	bf00      	nop
 80033f8:	20000014 	.word	0x20000014
 80033fc:	42400000 	.word	0x42400000
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003400:	5de0      	ldrb	r0, [r4, r7]
 8003402:	f7fd fc13 	bl	8000c2c <__aeabi_i2f>
 8003406:	4923      	ldr	r1, [pc, #140]	; (8003494 <translate_keypad+0x33c>)
 8003408:	f7fd fb5a 	bl	8000ac0 <__aeabi_fsub>
 800340c:	4606      	mov	r6, r0
 800340e:	4640      	mov	r0, r8
 8003410:	f7fd fc0c 	bl	8000c2c <__aeabi_i2f>
 8003414:	4601      	mov	r1, r0
 8003416:	4630      	mov	r0, r6
 8003418:	f7fd fd10 	bl	8000e3c <__aeabi_fdiv>
 800341c:	4601      	mov	r1, r0
 800341e:	4628      	mov	r0, r5
 8003420:	f7fd fb50 	bl	8000ac4 <__addsf3>
				count = count * 10;
 8003424:	eb08 0888 	add.w	r8, r8, r8, lsl #2
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003428:	4605      	mov	r5, r0
				count = count * 10;
 800342a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800342e:	e717      	b.n	8003260 <translate_keypad+0x108>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003430:	7863      	ldrb	r3, [r4, #1]
 8003432:	2b39      	cmp	r3, #57	; 0x39
 8003434:	d821      	bhi.n	800347a <translate_keypad+0x322>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003436:	2601      	movs	r6, #1
	float num = 0;
 8003438:	2500      	movs	r5, #0
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800343a:	5da0      	ldrb	r0, [r4, r6]
 800343c:	f7fd fbf6 	bl	8000c2c <__aeabi_i2f>
 8003440:	4914      	ldr	r1, [pc, #80]	; (8003494 <translate_keypad+0x33c>)
 8003442:	f7fd fb3d 	bl	8000ac0 <__aeabi_fsub>
 8003446:	4914      	ldr	r1, [pc, #80]	; (8003498 <translate_keypad+0x340>)
 8003448:	f7fd fcf8 	bl	8000e3c <__aeabi_fdiv>
 800344c:	4601      	mov	r1, r0
 800344e:	4628      	mov	r0, r5
 8003450:	f7fd fb38 	bl	8000ac4 <__addsf3>
				count = count * 10;
 8003454:	f04f 0864 	mov.w	r8, #100	; 0x64
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003458:	4605      	mov	r5, r0
				count = count * 10;
 800345a:	e6f6      	b.n	800324a <translate_keypad+0xf2>
	for(int i = 0; i < keypadlength; i++){
 800345c:	2704      	movs	r7, #4
 800345e:	e6ac      	b.n	80031ba <translate_keypad+0x62>
		for(int i = decimallocation-1; i >=0; i--){
 8003460:	2b00      	cmp	r3, #0
 8003462:	d196      	bne.n	8003392 <translate_keypad+0x23a>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003464:	7863      	ldrb	r3, [r4, #1]
 8003466:	2b2f      	cmp	r3, #47	; 0x2f
 8003468:	d8e2      	bhi.n	8003430 <translate_keypad+0x2d8>
 800346a:	78a3      	ldrb	r3, [r4, #2]
 800346c:	2b2f      	cmp	r3, #47	; 0x2f
 800346e:	d909      	bls.n	8003484 <translate_keypad+0x32c>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003470:	2702      	movs	r7, #2
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003472:	f04f 080a 	mov.w	r8, #10
	float num = 0;
 8003476:	2500      	movs	r5, #0
 8003478:	e6ee      	b.n	8003258 <translate_keypad+0x100>
		for(int i = decimallocation+1; i < keypadlength; i++){
 800347a:	2702      	movs	r7, #2
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800347c:	f04f 080a 	mov.w	r8, #10
	float num = 0;
 8003480:	2500      	movs	r5, #0
 8003482:	e6e6      	b.n	8003252 <translate_keypad+0xfa>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003484:	2603      	movs	r6, #3
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003486:	f04f 080a 	mov.w	r8, #10
	float num = 0;
 800348a:	2500      	movs	r5, #0
 800348c:	e6ec      	b.n	8003268 <translate_keypad+0x110>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800348e:	2600      	movs	r6, #0
 8003490:	2701      	movs	r7, #1
 8003492:	e696      	b.n	80031c2 <translate_keypad+0x6a>
 8003494:	42400000 	.word	0x42400000
 8003498:	41200000 	.word	0x41200000

0800349c <update_keypad>:
	if(num == 'z'){
 800349c:	287a      	cmp	r0, #122	; 0x7a
void update_keypad(char num){
 800349e:	b538      	push	{r3, r4, r5, lr}
	if(num == 'z'){
 80034a0:	d059      	beq.n	8003556 <update_keypad+0xba>
	else if(num == '.'){
 80034a2:	282e      	cmp	r0, #46	; 0x2e
 80034a4:	4604      	mov	r4, r0
 80034a6:	d038      	beq.n	800351a <update_keypad+0x7e>
	else if(num >= '0' && num <= '9'){
 80034a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80034ac:	2b09      	cmp	r3, #9
 80034ae:	d833      	bhi.n	8003518 <update_keypad+0x7c>
		if(keypaditerator > 2){
 80034b0:	4d46      	ldr	r5, [pc, #280]	; (80035cc <update_keypad+0x130>)
 80034b2:	782b      	ldrb	r3, [r5, #0]
 80034b4:	b25b      	sxtb	r3, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	dc1c      	bgt.n	80034f4 <update_keypad+0x58>
		else if(keypaditerator <= 1 && keypaddecimal == 1 && keypadarr[1] == 'z' && keypadarr[2] != '.'){
 80034ba:	782b      	ldrb	r3, [r5, #0]
 80034bc:	b25b      	sxtb	r3, r3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	dd68      	ble.n	8003594 <update_keypad+0xf8>
		else if(keypaditerator <= 1 && keypaddecimal == 1 && keypadarr[1] == 'z'){
 80034c2:	782b      	ldrb	r3, [r5, #0]
 80034c4:	b25b      	sxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	dd70      	ble.n	80035ac <update_keypad+0x110>
		else if(keypaditerator > 0 && keypaddecimal == 1){
 80034ca:	782b      	ldrb	r3, [r5, #0]
 80034cc:	b25b      	sxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	dd03      	ble.n	80034da <update_keypad+0x3e>
 80034d2:	4b3f      	ldr	r3, [pc, #252]	; (80035d0 <update_keypad+0x134>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d00c      	beq.n	80034f4 <update_keypad+0x58>
		else if(keypaditerator >= 0 && keypaddecimal == 1 && translate_keypad() >= 10.0){
 80034da:	782b      	ldrb	r3, [r5, #0]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	d41b      	bmi.n	8003518 <update_keypad+0x7c>
 80034e0:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <update_keypad+0x134>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d117      	bne.n	8003518 <update_keypad+0x7c>
 80034e8:	f7ff fe36 	bl	8003158 <translate_keypad>
 80034ec:	4939      	ldr	r1, [pc, #228]	; (80035d4 <update_keypad+0x138>)
 80034ee:	f7fd fda3 	bl	8001038 <__aeabi_fcmpge>
 80034f2:	b188      	cbz	r0, 8003518 <update_keypad+0x7c>
				keypadarr[i-1] = keypadarr[i];
 80034f4:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <update_keypad+0x13c>)
 80034f6:	785a      	ldrb	r2, [r3, #1]
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	789a      	ldrb	r2, [r3, #2]
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	705a      	strb	r2, [r3, #1]
 8003502:	78da      	ldrb	r2, [r3, #3]
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	709a      	strb	r2, [r3, #2]
 8003508:	791a      	ldrb	r2, [r3, #4]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	70da      	strb	r2, [r3, #3]
			keypadarr[keypadlength-1] = num;
 800350e:	711c      	strb	r4, [r3, #4]
			keypaditerator--;
 8003510:	782b      	ldrb	r3, [r5, #0]
 8003512:	3b01      	subs	r3, #1
 8003514:	b25b      	sxtb	r3, r3
 8003516:	702b      	strb	r3, [r5, #0]
}
 8003518:	bd38      	pop	{r3, r4, r5, pc}
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 800351a:	4a2c      	ldr	r2, [pc, #176]	; (80035cc <update_keypad+0x130>)
 800351c:	7813      	ldrb	r3, [r2, #0]
 800351e:	b25b      	sxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	ddf9      	ble.n	8003518 <update_keypad+0x7c>
 8003524:	492a      	ldr	r1, [pc, #168]	; (80035d0 <update_keypad+0x134>)
 8003526:	780b      	ldrb	r3, [r1, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f5      	bne.n	8003518 <update_keypad+0x7c>
				keypadarr[i-1] = keypadarr[i];
 800352c:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <update_keypad+0x13c>)
 800352e:	7858      	ldrb	r0, [r3, #1]
 8003530:	b2c0      	uxtb	r0, r0
 8003532:	7018      	strb	r0, [r3, #0]
 8003534:	7898      	ldrb	r0, [r3, #2]
 8003536:	b2c0      	uxtb	r0, r0
 8003538:	7058      	strb	r0, [r3, #1]
 800353a:	78d8      	ldrb	r0, [r3, #3]
 800353c:	b2c0      	uxtb	r0, r0
 800353e:	7098      	strb	r0, [r3, #2]
 8003540:	7918      	ldrb	r0, [r3, #4]
 8003542:	b2c0      	uxtb	r0, r0
 8003544:	70d8      	strb	r0, [r3, #3]
			keypaddecimal = 1;
 8003546:	2001      	movs	r0, #1
			keypadarr[keypadlength-1] = num;
 8003548:	711c      	strb	r4, [r3, #4]
			keypaddecimal = 1;
 800354a:	7008      	strb	r0, [r1, #0]
			keypaditerator--;
 800354c:	7813      	ldrb	r3, [r2, #0]
 800354e:	3b01      	subs	r3, #1
 8003550:	b25b      	sxtb	r3, r3
 8003552:	7013      	strb	r3, [r2, #0]
}
 8003554:	bd38      	pop	{r3, r4, r5, pc}
		if(keypaditerator < keypadlength-1){
 8003556:	4d1d      	ldr	r5, [pc, #116]	; (80035cc <update_keypad+0x130>)
 8003558:	782b      	ldrb	r3, [r5, #0]
 800355a:	b25b      	sxtb	r3, r3
 800355c:	2b03      	cmp	r3, #3
 800355e:	dcdb      	bgt.n	8003518 <update_keypad+0x7c>
			if(keypadarr[4] == '.'){
 8003560:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <update_keypad+0x13c>)
 8003562:	791a      	ldrb	r2, [r3, #4]
 8003564:	2a2e      	cmp	r2, #46	; 0x2e
 8003566:	d102      	bne.n	800356e <update_keypad+0xd2>
				keypaddecimal = 0;
 8003568:	2100      	movs	r1, #0
 800356a:	4a19      	ldr	r2, [pc, #100]	; (80035d0 <update_keypad+0x134>)
 800356c:	7011      	strb	r1, [r2, #0]
			keypadarr[0] = num;
 800356e:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8003570:	78da      	ldrb	r2, [r3, #3]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	711a      	strb	r2, [r3, #4]
 8003576:	789a      	ldrb	r2, [r3, #2]
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	70da      	strb	r2, [r3, #3]
 800357c:	785a      	ldrb	r2, [r3, #1]
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	709a      	strb	r2, [r3, #2]
 8003582:	781a      	ldrb	r2, [r3, #0]
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	705a      	strb	r2, [r3, #1]
			keypadarr[0] = num;
 8003588:	7019      	strb	r1, [r3, #0]
			keypaditerator++;
 800358a:	782b      	ldrb	r3, [r5, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	b25b      	sxtb	r3, r3
 8003590:	702b      	strb	r3, [r5, #0]
}
 8003592:	bd38      	pop	{r3, r4, r5, pc}
		else if(keypaditerator <= 1 && keypaddecimal == 1 && keypadarr[1] == 'z' && keypadarr[2] != '.'){
 8003594:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <update_keypad+0x134>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d192      	bne.n	80034c2 <update_keypad+0x26>
 800359c:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <update_keypad+0x13c>)
 800359e:	785a      	ldrb	r2, [r3, #1]
 80035a0:	2a7a      	cmp	r2, #122	; 0x7a
 80035a2:	d18e      	bne.n	80034c2 <update_keypad+0x26>
 80035a4:	789a      	ldrb	r2, [r3, #2]
 80035a6:	2a2e      	cmp	r2, #46	; 0x2e
 80035a8:	d1a5      	bne.n	80034f6 <update_keypad+0x5a>
 80035aa:	e78a      	b.n	80034c2 <update_keypad+0x26>
		else if(keypaditerator <= 1 && keypaddecimal == 1 && keypadarr[1] == 'z'){
 80035ac:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <update_keypad+0x134>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d18a      	bne.n	80034ca <update_keypad+0x2e>
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <update_keypad+0x13c>)
 80035b6:	785a      	ldrb	r2, [r3, #1]
 80035b8:	2a7a      	cmp	r2, #122	; 0x7a
 80035ba:	d186      	bne.n	80034ca <update_keypad+0x2e>
			if(kpenum == A1 || kpenum == A2){
 80035bc:	4a07      	ldr	r2, [pc, #28]	; (80035dc <update_keypad+0x140>)
 80035be:	7812      	ldrb	r2, [r2, #0]
 80035c0:	2a02      	cmp	r2, #2
 80035c2:	d098      	beq.n	80034f6 <update_keypad+0x5a>
 80035c4:	2a04      	cmp	r2, #4
 80035c6:	d096      	beq.n	80034f6 <update_keypad+0x5a>
}
 80035c8:	bd38      	pop	{r3, r4, r5, pc}
 80035ca:	bf00      	nop
 80035cc:	20000019 	.word	0x20000019
 80035d0:	200006d4 	.word	0x200006d4
 80035d4:	41200000 	.word	0x41200000
 80035d8:	20000014 	.word	0x20000014
 80035dc:	200006d5 	.word	0x200006d5

080035e0 <keypad_sm>:
void keypad_sm(char num){
 80035e0:	b570      	push	{r4, r5, r6, lr}
	if(kpenum == WAIT){
 80035e2:	4ea0      	ldr	r6, [pc, #640]	; (8003864 <keypad_sm+0x284>)
 80035e4:	7834      	ldrb	r4, [r6, #0]
 80035e6:	b994      	cbnz	r4, 800360e <keypad_sm+0x2e>
		if(num == 'A'){
 80035e8:	2841      	cmp	r0, #65	; 0x41
 80035ea:	f000 80a2 	beq.w	8003732 <keypad_sm+0x152>
		else if(num == 'B'){
 80035ee:	2842      	cmp	r0, #66	; 0x42
 80035f0:	f000 8186 	beq.w	8003900 <keypad_sm+0x320>
		else if(num == 'C'){
 80035f4:	2843      	cmp	r0, #67	; 0x43
 80035f6:	f000 810b 	beq.w	8003810 <keypad_sm+0x230>
		else if(num == 'D'){
 80035fa:	2844      	cmp	r0, #68	; 0x44
 80035fc:	f000 822b 	beq.w	8003a56 <keypad_sm+0x476>
		else if(num == '*'){
 8003600:	282a      	cmp	r0, #42	; 0x2a
 8003602:	f000 82e5 	beq.w	8003bd0 <keypad_sm+0x5f0>
		else if(num == '/'){
 8003606:	282f      	cmp	r0, #47	; 0x2f
 8003608:	f000 81cc 	beq.w	80039a4 <keypad_sm+0x3c4>
}
 800360c:	bd70      	pop	{r4, r5, r6, pc}
	else if(kpenum == V1){
 800360e:	2c01      	cmp	r4, #1
 8003610:	d04b      	beq.n	80036aa <keypad_sm+0xca>
	else if(kpenum == A1){
 8003612:	2c02      	cmp	r4, #2
 8003614:	f000 812e 	beq.w	8003874 <keypad_sm+0x294>
	else if(kpenum == V2){
 8003618:	2c03      	cmp	r4, #3
 800361a:	f000 80b3 	beq.w	8003784 <keypad_sm+0x1a4>
	else if(kpenum == A2){
 800361e:	2c04      	cmp	r4, #4
 8003620:	d1f4      	bne.n	800360c <keypad_sm+0x2c>
		if(num == 'A'){
 8003622:	2841      	cmp	r0, #65	; 0x41
 8003624:	f000 8332 	beq.w	8003c8c <keypad_sm+0x6ac>
		else if(num == 'B'){
 8003628:	2842      	cmp	r0, #66	; 0x42
 800362a:	f000 83d6 	beq.w	8003dda <keypad_sm+0x7fa>
		else if(num == 'C'){
 800362e:	2843      	cmp	r0, #67	; 0x43
 8003630:	f000 8488 	beq.w	8003f44 <keypad_sm+0x964>
		else if(num == 'D'){
 8003634:	2844      	cmp	r0, #68	; 0x44
 8003636:	f000 852a 	beq.w	800408e <keypad_sm+0xaae>
		else if(num == '.'){
 800363a:	282e      	cmp	r0, #46	; 0x2e
 800363c:	f000 856a 	beq.w	8004114 <keypad_sm+0xb34>
		else if(num >= '0' && num <= '9'){
 8003640:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003644:	2b09      	cmp	r3, #9
 8003646:	f240 82f4 	bls.w	8003c32 <keypad_sm+0x652>
		else if(num == '#'){
 800364a:	2823      	cmp	r0, #35	; 0x23
 800364c:	f000 83f1 	beq.w	8003e32 <keypad_sm+0x852>
		else if(num == '+'){
 8003650:	282b      	cmp	r0, #43	; 0x2b
 8003652:	f000 8611 	beq.w	8004278 <keypad_sm+0xc98>
		else if(num == '-'){
 8003656:	282d      	cmp	r0, #45	; 0x2d
 8003658:	d1d8      	bne.n	800360c <keypad_sm+0x2c>
			kpenum = WAIT;
 800365a:	2000      	movs	r0, #0
			keypadarr[0] = num;
 800365c:	257a      	movs	r5, #122	; 0x7a
 800365e:	4b82      	ldr	r3, [pc, #520]	; (8003868 <keypad_sm+0x288>)
			if(keypadarr[4] == '.'){
 8003660:	4982      	ldr	r1, [pc, #520]	; (800386c <keypad_sm+0x28c>)
				keypaddecimal = 0;
 8003662:	4c83      	ldr	r4, [pc, #524]	; (8003870 <keypad_sm+0x290>)
			kpenum = WAIT;
 8003664:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8003666:	781a      	ldrb	r2, [r3, #0]
 8003668:	b252      	sxtb	r2, r2
 800366a:	2a03      	cmp	r2, #3
 800366c:	dcce      	bgt.n	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800366e:	781a      	ldrb	r2, [r3, #0]
 8003670:	b252      	sxtb	r2, r2
 8003672:	2a03      	cmp	r2, #3
 8003674:	dcf7      	bgt.n	8003666 <keypad_sm+0x86>
			if(keypadarr[4] == '.'){
 8003676:	790a      	ldrb	r2, [r1, #4]
 8003678:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 800367a:	bf08      	it	eq
 800367c:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 800367e:	78ca      	ldrb	r2, [r1, #3]
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	710a      	strb	r2, [r1, #4]
 8003684:	788a      	ldrb	r2, [r1, #2]
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	70ca      	strb	r2, [r1, #3]
 800368a:	784a      	ldrb	r2, [r1, #1]
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	708a      	strb	r2, [r1, #2]
 8003690:	780a      	ldrb	r2, [r1, #0]
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8003696:	700d      	strb	r5, [r1, #0]
			keypaditerator++;
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	3201      	adds	r2, #1
 800369c:	b252      	sxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 80036a0:	781a      	ldrb	r2, [r3, #0]
 80036a2:	b252      	sxtb	r2, r2
 80036a4:	2a03      	cmp	r2, #3
 80036a6:	dde2      	ble.n	800366e <keypad_sm+0x8e>
}
 80036a8:	bd70      	pop	{r4, r5, r6, pc}
		if(num == 'A'){
 80036aa:	2841      	cmp	r0, #65	; 0x41
 80036ac:	f000 8257 	beq.w	8003b5e <keypad_sm+0x57e>
		else if(num == 'B'){
 80036b0:	2842      	cmp	r0, #66	; 0x42
 80036b2:	f000 81f9 	beq.w	8003aa8 <keypad_sm+0x4c8>
		else if(num == 'C'){
 80036b6:	2843      	cmp	r0, #67	; 0x43
 80036b8:	f000 8292 	beq.w	8003be0 <keypad_sm+0x600>
		else if(num == 'D'){
 80036bc:	2844      	cmp	r0, #68	; 0x44
 80036be:	f000 81a1 	beq.w	8003a04 <keypad_sm+0x424>
		else if(num == '.'){
 80036c2:	282e      	cmp	r0, #46	; 0x2e
 80036c4:	f000 841f 	beq.w	8003f06 <keypad_sm+0x926>
		else if(num >= '0' && num <= '9'){
 80036c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80036cc:	2b09      	cmp	r3, #9
 80036ce:	f240 82b0 	bls.w	8003c32 <keypad_sm+0x652>
		else if(num == '#'){
 80036d2:	2823      	cmp	r0, #35	; 0x23
 80036d4:	f000 83ad 	beq.w	8003e32 <keypad_sm+0x852>
		else if(num == '+'){
 80036d8:	282b      	cmp	r0, #43	; 0x2b
 80036da:	f000 849f 	beq.w	800401c <keypad_sm+0xa3c>
		else if(num == '-'){
 80036de:	282d      	cmp	r0, #45	; 0x2d
 80036e0:	d194      	bne.n	800360c <keypad_sm+0x2c>
			kpenum = WAIT;
 80036e2:	2400      	movs	r4, #0
			keypadarr[0] = num;
 80036e4:	207a      	movs	r0, #122	; 0x7a
 80036e6:	4b60      	ldr	r3, [pc, #384]	; (8003868 <keypad_sm+0x288>)
			if(keypadarr[4] == '.'){
 80036e8:	4a60      	ldr	r2, [pc, #384]	; (800386c <keypad_sm+0x28c>)
				keypaddecimal = 0;
 80036ea:	4d61      	ldr	r5, [pc, #388]	; (8003870 <keypad_sm+0x290>)
			kpenum = WAIT;
 80036ec:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 80036ee:	7819      	ldrb	r1, [r3, #0]
 80036f0:	b249      	sxtb	r1, r1
 80036f2:	2903      	cmp	r1, #3
 80036f4:	dc8a      	bgt.n	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80036f6:	7819      	ldrb	r1, [r3, #0]
 80036f8:	b249      	sxtb	r1, r1
 80036fa:	2903      	cmp	r1, #3
 80036fc:	dcf7      	bgt.n	80036ee <keypad_sm+0x10e>
			if(keypadarr[4] == '.'){
 80036fe:	7911      	ldrb	r1, [r2, #4]
 8003700:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003702:	bf08      	it	eq
 8003704:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003706:	78d1      	ldrb	r1, [r2, #3]
 8003708:	b2c9      	uxtb	r1, r1
 800370a:	7111      	strb	r1, [r2, #4]
 800370c:	7891      	ldrb	r1, [r2, #2]
 800370e:	b2c9      	uxtb	r1, r1
 8003710:	70d1      	strb	r1, [r2, #3]
 8003712:	7851      	ldrb	r1, [r2, #1]
 8003714:	b2c9      	uxtb	r1, r1
 8003716:	7091      	strb	r1, [r2, #2]
 8003718:	7811      	ldrb	r1, [r2, #0]
 800371a:	b2c9      	uxtb	r1, r1
 800371c:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800371e:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003720:	7819      	ldrb	r1, [r3, #0]
 8003722:	3101      	adds	r1, #1
 8003724:	b249      	sxtb	r1, r1
 8003726:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003728:	7819      	ldrb	r1, [r3, #0]
 800372a:	b249      	sxtb	r1, r1
 800372c:	2903      	cmp	r1, #3
 800372e:	dde2      	ble.n	80036f6 <keypad_sm+0x116>
}
 8003730:	bd70      	pop	{r4, r5, r6, pc}
			kpenum = V1;
 8003732:	2101      	movs	r1, #1
			keypadarr[0] = num;
 8003734:	207a      	movs	r0, #122	; 0x7a
 8003736:	4b4c      	ldr	r3, [pc, #304]	; (8003868 <keypad_sm+0x288>)
			if(keypadarr[4] == '.'){
 8003738:	4a4c      	ldr	r2, [pc, #304]	; (800386c <keypad_sm+0x28c>)
				keypaddecimal = 0;
 800373a:	4d4d      	ldr	r5, [pc, #308]	; (8003870 <keypad_sm+0x290>)
			kpenum = V1;
 800373c:	7031      	strb	r1, [r6, #0]
	while(keypaditerator < 4){
 800373e:	7819      	ldrb	r1, [r3, #0]
 8003740:	b249      	sxtb	r1, r1
 8003742:	2903      	cmp	r1, #3
 8003744:	f73f af62 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003748:	7819      	ldrb	r1, [r3, #0]
 800374a:	b249      	sxtb	r1, r1
 800374c:	2903      	cmp	r1, #3
 800374e:	dcf6      	bgt.n	800373e <keypad_sm+0x15e>
			if(keypadarr[4] == '.'){
 8003750:	7911      	ldrb	r1, [r2, #4]
 8003752:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003754:	bf08      	it	eq
 8003756:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003758:	78d1      	ldrb	r1, [r2, #3]
 800375a:	b2c9      	uxtb	r1, r1
 800375c:	7111      	strb	r1, [r2, #4]
 800375e:	7891      	ldrb	r1, [r2, #2]
 8003760:	b2c9      	uxtb	r1, r1
 8003762:	70d1      	strb	r1, [r2, #3]
 8003764:	7851      	ldrb	r1, [r2, #1]
 8003766:	b2c9      	uxtb	r1, r1
 8003768:	7091      	strb	r1, [r2, #2]
 800376a:	7811      	ldrb	r1, [r2, #0]
 800376c:	b2c9      	uxtb	r1, r1
 800376e:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003770:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003772:	7819      	ldrb	r1, [r3, #0]
 8003774:	3101      	adds	r1, #1
 8003776:	b249      	sxtb	r1, r1
 8003778:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800377a:	7819      	ldrb	r1, [r3, #0]
 800377c:	b249      	sxtb	r1, r1
 800377e:	2903      	cmp	r1, #3
 8003780:	dde2      	ble.n	8003748 <keypad_sm+0x168>
}
 8003782:	bd70      	pop	{r4, r5, r6, pc}
		if(num == 'A'){
 8003784:	2841      	cmp	r0, #65	; 0x41
 8003786:	f000 80e4 	beq.w	8003952 <keypad_sm+0x372>
		else if(num == 'B'){
 800378a:	2842      	cmp	r0, #66	; 0x42
 800378c:	f000 8255 	beq.w	8003c3a <keypad_sm+0x65a>
		else if(num == 'C'){
 8003790:	2843      	cmp	r0, #67	; 0x43
 8003792:	f000 8407 	beq.w	8003fa4 <keypad_sm+0x9c4>
		else if(num == 'D'){
 8003796:	2844      	cmp	r0, #68	; 0x44
 8003798:	f000 838c 	beq.w	8003eb4 <keypad_sm+0x8d4>
		else if(num == '.'){
 800379c:	282e      	cmp	r0, #46	; 0x2e
 800379e:	f000 8368 	beq.w	8003e72 <keypad_sm+0x892>
		else if(num >= '0' && num <= '9'){
 80037a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80037a6:	2b09      	cmp	r3, #9
 80037a8:	f240 8243 	bls.w	8003c32 <keypad_sm+0x652>
		else if(num == '#'){
 80037ac:	2823      	cmp	r0, #35	; 0x23
 80037ae:	f000 8340 	beq.w	8003e32 <keypad_sm+0x852>
		else if(num == '+'){
 80037b2:	282b      	cmp	r0, #43	; 0x2b
 80037b4:	f000 8524 	beq.w	8004200 <keypad_sm+0xc20>
		else if(num == '-'){
 80037b8:	282d      	cmp	r0, #45	; 0x2d
 80037ba:	f47f af27 	bne.w	800360c <keypad_sm+0x2c>
			kpenum = WAIT;
 80037be:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80037c0:	247a      	movs	r4, #122	; 0x7a
 80037c2:	4b29      	ldr	r3, [pc, #164]	; (8003868 <keypad_sm+0x288>)
			if(keypadarr[4] == '.'){
 80037c4:	4a29      	ldr	r2, [pc, #164]	; (800386c <keypad_sm+0x28c>)
				keypaddecimal = 0;
 80037c6:	4d2a      	ldr	r5, [pc, #168]	; (8003870 <keypad_sm+0x290>)
			kpenum = WAIT;
 80037c8:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80037ca:	7819      	ldrb	r1, [r3, #0]
 80037cc:	b249      	sxtb	r1, r1
 80037ce:	2903      	cmp	r1, #3
 80037d0:	f73f af1c 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80037d4:	7819      	ldrb	r1, [r3, #0]
 80037d6:	b249      	sxtb	r1, r1
 80037d8:	2903      	cmp	r1, #3
 80037da:	dcf6      	bgt.n	80037ca <keypad_sm+0x1ea>
			if(keypadarr[4] == '.'){
 80037dc:	7911      	ldrb	r1, [r2, #4]
 80037de:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80037e0:	bf08      	it	eq
 80037e2:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80037e4:	78d1      	ldrb	r1, [r2, #3]
 80037e6:	b2c9      	uxtb	r1, r1
 80037e8:	7111      	strb	r1, [r2, #4]
 80037ea:	7891      	ldrb	r1, [r2, #2]
 80037ec:	b2c9      	uxtb	r1, r1
 80037ee:	70d1      	strb	r1, [r2, #3]
 80037f0:	7851      	ldrb	r1, [r2, #1]
 80037f2:	b2c9      	uxtb	r1, r1
 80037f4:	7091      	strb	r1, [r2, #2]
 80037f6:	7811      	ldrb	r1, [r2, #0]
 80037f8:	b2c9      	uxtb	r1, r1
 80037fa:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80037fc:	7014      	strb	r4, [r2, #0]
			keypaditerator++;
 80037fe:	7819      	ldrb	r1, [r3, #0]
 8003800:	3101      	adds	r1, #1
 8003802:	b249      	sxtb	r1, r1
 8003804:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003806:	7819      	ldrb	r1, [r3, #0]
 8003808:	b249      	sxtb	r1, r1
 800380a:	2903      	cmp	r1, #3
 800380c:	dde2      	ble.n	80037d4 <keypad_sm+0x1f4>
}
 800380e:	bd70      	pop	{r4, r5, r6, pc}
			kpenum = V2;
 8003810:	2203      	movs	r2, #3
			keypadarr[0] = num;
 8003812:	207a      	movs	r0, #122	; 0x7a
 8003814:	4b14      	ldr	r3, [pc, #80]	; (8003868 <keypad_sm+0x288>)
			if(keypadarr[4] == '.'){
 8003816:	4915      	ldr	r1, [pc, #84]	; (800386c <keypad_sm+0x28c>)
				keypaddecimal = 0;
 8003818:	4d15      	ldr	r5, [pc, #84]	; (8003870 <keypad_sm+0x290>)
			kpenum = V2;
 800381a:	7032      	strb	r2, [r6, #0]
	while(keypaditerator < 4){
 800381c:	781a      	ldrb	r2, [r3, #0]
 800381e:	b252      	sxtb	r2, r2
 8003820:	2a03      	cmp	r2, #3
 8003822:	f73f aef3 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003826:	781a      	ldrb	r2, [r3, #0]
 8003828:	b252      	sxtb	r2, r2
 800382a:	2a03      	cmp	r2, #3
 800382c:	dcf6      	bgt.n	800381c <keypad_sm+0x23c>
			if(keypadarr[4] == '.'){
 800382e:	790a      	ldrb	r2, [r1, #4]
 8003830:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8003832:	bf08      	it	eq
 8003834:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003836:	78ca      	ldrb	r2, [r1, #3]
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	710a      	strb	r2, [r1, #4]
 800383c:	788a      	ldrb	r2, [r1, #2]
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	70ca      	strb	r2, [r1, #3]
 8003842:	784a      	ldrb	r2, [r1, #1]
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	708a      	strb	r2, [r1, #2]
 8003848:	780a      	ldrb	r2, [r1, #0]
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 800384e:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	3201      	adds	r2, #1
 8003854:	b252      	sxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	b252      	sxtb	r2, r2
 800385c:	2a03      	cmp	r2, #3
 800385e:	dde2      	ble.n	8003826 <keypad_sm+0x246>
}
 8003860:	bd70      	pop	{r4, r5, r6, pc}
 8003862:	bf00      	nop
 8003864:	200006d5 	.word	0x200006d5
 8003868:	20000019 	.word	0x20000019
 800386c:	20000014 	.word	0x20000014
 8003870:	200006d4 	.word	0x200006d4
		if(num == 'A'){
 8003874:	2841      	cmp	r0, #65	; 0x41
 8003876:	f000 8149 	beq.w	8003b0c <keypad_sm+0x52c>
		else if(num == 'B'){
 800387a:	2842      	cmp	r0, #66	; 0x42
 800387c:	f000 8233 	beq.w	8003ce6 <keypad_sm+0x706>
		else if(num == 'C'){
 8003880:	2843      	cmp	r0, #67	; 0x43
 8003882:	f000 8096 	beq.w	80039b2 <keypad_sm+0x3d2>
		else if(num == 'D'){
 8003886:	2844      	cmp	r0, #68	; 0x44
 8003888:	f000 827e 	beq.w	8003d88 <keypad_sm+0x7a8>
		else if(num == '.'){
 800388c:	282e      	cmp	r0, #46	; 0x2e
 800388e:	f000 82f0 	beq.w	8003e72 <keypad_sm+0x892>
		else if(num >= '0' && num <= '9'){
 8003892:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003896:	2b09      	cmp	r3, #9
 8003898:	f240 81cb 	bls.w	8003c32 <keypad_sm+0x652>
		else if(num == '#'){
 800389c:	2823      	cmp	r0, #35	; 0x23
 800389e:	f000 82c8 	beq.w	8003e32 <keypad_sm+0x852>
		else if(num == '+'){
 80038a2:	282b      	cmp	r0, #43	; 0x2b
 80038a4:	f000 8457 	beq.w	8004156 <keypad_sm+0xb76>
		else if(num == '-'){
 80038a8:	282d      	cmp	r0, #45	; 0x2d
 80038aa:	f47f aeaf 	bne.w	800360c <keypad_sm+0x2c>
			kpenum = WAIT;
 80038ae:	2400      	movs	r4, #0
			keypadarr[0] = num;
 80038b0:	207a      	movs	r0, #122	; 0x7a
 80038b2:	4b92      	ldr	r3, [pc, #584]	; (8003afc <keypad_sm+0x51c>)
			if(keypadarr[4] == '.'){
 80038b4:	4a92      	ldr	r2, [pc, #584]	; (8003b00 <keypad_sm+0x520>)
				keypaddecimal = 0;
 80038b6:	4d93      	ldr	r5, [pc, #588]	; (8003b04 <keypad_sm+0x524>)
			kpenum = WAIT;
 80038b8:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 80038ba:	7819      	ldrb	r1, [r3, #0]
 80038bc:	b249      	sxtb	r1, r1
 80038be:	2903      	cmp	r1, #3
 80038c0:	f73f aea4 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80038c4:	7819      	ldrb	r1, [r3, #0]
 80038c6:	b249      	sxtb	r1, r1
 80038c8:	2903      	cmp	r1, #3
 80038ca:	dcf6      	bgt.n	80038ba <keypad_sm+0x2da>
			if(keypadarr[4] == '.'){
 80038cc:	7911      	ldrb	r1, [r2, #4]
 80038ce:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80038d0:	bf08      	it	eq
 80038d2:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80038d4:	78d1      	ldrb	r1, [r2, #3]
 80038d6:	b2c9      	uxtb	r1, r1
 80038d8:	7111      	strb	r1, [r2, #4]
 80038da:	7891      	ldrb	r1, [r2, #2]
 80038dc:	b2c9      	uxtb	r1, r1
 80038de:	70d1      	strb	r1, [r2, #3]
 80038e0:	7851      	ldrb	r1, [r2, #1]
 80038e2:	b2c9      	uxtb	r1, r1
 80038e4:	7091      	strb	r1, [r2, #2]
 80038e6:	7811      	ldrb	r1, [r2, #0]
 80038e8:	b2c9      	uxtb	r1, r1
 80038ea:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80038ec:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80038ee:	7819      	ldrb	r1, [r3, #0]
 80038f0:	3101      	adds	r1, #1
 80038f2:	b249      	sxtb	r1, r1
 80038f4:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80038f6:	7819      	ldrb	r1, [r3, #0]
 80038f8:	b249      	sxtb	r1, r1
 80038fa:	2903      	cmp	r1, #3
 80038fc:	dde2      	ble.n	80038c4 <keypad_sm+0x2e4>
}
 80038fe:	bd70      	pop	{r4, r5, r6, pc}
			kpenum = A1;
 8003900:	2202      	movs	r2, #2
			keypadarr[0] = num;
 8003902:	207a      	movs	r0, #122	; 0x7a
 8003904:	4b7d      	ldr	r3, [pc, #500]	; (8003afc <keypad_sm+0x51c>)
			if(keypadarr[4] == '.'){
 8003906:	497e      	ldr	r1, [pc, #504]	; (8003b00 <keypad_sm+0x520>)
				keypaddecimal = 0;
 8003908:	4d7e      	ldr	r5, [pc, #504]	; (8003b04 <keypad_sm+0x524>)
			kpenum = A1;
 800390a:	7032      	strb	r2, [r6, #0]
	while(keypaditerator < 4){
 800390c:	781a      	ldrb	r2, [r3, #0]
 800390e:	b252      	sxtb	r2, r2
 8003910:	2a03      	cmp	r2, #3
 8003912:	f73f ae7b 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	b252      	sxtb	r2, r2
 800391a:	2a03      	cmp	r2, #3
 800391c:	dcf6      	bgt.n	800390c <keypad_sm+0x32c>
			if(keypadarr[4] == '.'){
 800391e:	790a      	ldrb	r2, [r1, #4]
 8003920:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8003922:	bf08      	it	eq
 8003924:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003926:	78ca      	ldrb	r2, [r1, #3]
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	710a      	strb	r2, [r1, #4]
 800392c:	788a      	ldrb	r2, [r1, #2]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	70ca      	strb	r2, [r1, #3]
 8003932:	784a      	ldrb	r2, [r1, #1]
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	708a      	strb	r2, [r1, #2]
 8003938:	780a      	ldrb	r2, [r1, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 800393e:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	3201      	adds	r2, #1
 8003944:	b252      	sxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	b252      	sxtb	r2, r2
 800394c:	2a03      	cmp	r2, #3
 800394e:	dde2      	ble.n	8003916 <keypad_sm+0x336>
}
 8003950:	bd70      	pop	{r4, r5, r6, pc}
			kpenum = WAIT;
 8003952:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003954:	207a      	movs	r0, #122	; 0x7a
 8003956:	4b69      	ldr	r3, [pc, #420]	; (8003afc <keypad_sm+0x51c>)
			if(keypadarr[4] == '.'){
 8003958:	4a69      	ldr	r2, [pc, #420]	; (8003b00 <keypad_sm+0x520>)
				keypaddecimal = 0;
 800395a:	4d6a      	ldr	r5, [pc, #424]	; (8003b04 <keypad_sm+0x524>)
			kpenum = WAIT;
 800395c:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 800395e:	7819      	ldrb	r1, [r3, #0]
 8003960:	b249      	sxtb	r1, r1
 8003962:	2903      	cmp	r1, #3
 8003964:	f73f ae52 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003968:	7819      	ldrb	r1, [r3, #0]
 800396a:	b249      	sxtb	r1, r1
 800396c:	2903      	cmp	r1, #3
 800396e:	dcf6      	bgt.n	800395e <keypad_sm+0x37e>
			if(keypadarr[4] == '.'){
 8003970:	7911      	ldrb	r1, [r2, #4]
 8003972:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003974:	bf08      	it	eq
 8003976:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003978:	78d1      	ldrb	r1, [r2, #3]
 800397a:	b2c9      	uxtb	r1, r1
 800397c:	7111      	strb	r1, [r2, #4]
 800397e:	7891      	ldrb	r1, [r2, #2]
 8003980:	b2c9      	uxtb	r1, r1
 8003982:	70d1      	strb	r1, [r2, #3]
 8003984:	7851      	ldrb	r1, [r2, #1]
 8003986:	b2c9      	uxtb	r1, r1
 8003988:	7091      	strb	r1, [r2, #2]
 800398a:	7811      	ldrb	r1, [r2, #0]
 800398c:	b2c9      	uxtb	r1, r1
 800398e:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003990:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003992:	7819      	ldrb	r1, [r3, #0]
 8003994:	3101      	adds	r1, #1
 8003996:	b249      	sxtb	r1, r1
 8003998:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800399a:	7819      	ldrb	r1, [r3, #0]
 800399c:	b249      	sxtb	r1, r1
 800399e:	2903      	cmp	r1, #3
 80039a0:	dde2      	ble.n	8003968 <keypad_sm+0x388>
}
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
			if(chstat_main){
 80039a4:	4b58      	ldr	r3, [pc, #352]	; (8003b08 <keypad_sm+0x528>)
 80039a6:	781a      	ldrb	r2, [r3, #0]
 80039a8:	2a00      	cmp	r2, #0
 80039aa:	f000 823f 	beq.w	8003e2c <keypad_sm+0x84c>
				chstat_main = 0;
 80039ae:	701c      	strb	r4, [r3, #0]
}
 80039b0:	bd70      	pop	{r4, r5, r6, pc}
			kpenum = WAIT;
 80039b2:	2400      	movs	r4, #0
			keypadarr[0] = num;
 80039b4:	207a      	movs	r0, #122	; 0x7a
 80039b6:	4b51      	ldr	r3, [pc, #324]	; (8003afc <keypad_sm+0x51c>)
			if(keypadarr[4] == '.'){
 80039b8:	4a51      	ldr	r2, [pc, #324]	; (8003b00 <keypad_sm+0x520>)
				keypaddecimal = 0;
 80039ba:	4d52      	ldr	r5, [pc, #328]	; (8003b04 <keypad_sm+0x524>)
			kpenum = WAIT;
 80039bc:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 80039be:	7819      	ldrb	r1, [r3, #0]
 80039c0:	b249      	sxtb	r1, r1
 80039c2:	2903      	cmp	r1, #3
 80039c4:	f73f ae22 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80039c8:	7819      	ldrb	r1, [r3, #0]
 80039ca:	b249      	sxtb	r1, r1
 80039cc:	2903      	cmp	r1, #3
 80039ce:	dcf6      	bgt.n	80039be <keypad_sm+0x3de>
			if(keypadarr[4] == '.'){
 80039d0:	7911      	ldrb	r1, [r2, #4]
 80039d2:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80039d4:	bf08      	it	eq
 80039d6:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80039d8:	78d1      	ldrb	r1, [r2, #3]
 80039da:	b2c9      	uxtb	r1, r1
 80039dc:	7111      	strb	r1, [r2, #4]
 80039de:	7891      	ldrb	r1, [r2, #2]
 80039e0:	b2c9      	uxtb	r1, r1
 80039e2:	70d1      	strb	r1, [r2, #3]
 80039e4:	7851      	ldrb	r1, [r2, #1]
 80039e6:	b2c9      	uxtb	r1, r1
 80039e8:	7091      	strb	r1, [r2, #2]
 80039ea:	7811      	ldrb	r1, [r2, #0]
 80039ec:	b2c9      	uxtb	r1, r1
 80039ee:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80039f0:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80039f2:	7819      	ldrb	r1, [r3, #0]
 80039f4:	3101      	adds	r1, #1
 80039f6:	b249      	sxtb	r1, r1
 80039f8:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80039fa:	7819      	ldrb	r1, [r3, #0]
 80039fc:	b249      	sxtb	r1, r1
 80039fe:	2903      	cmp	r1, #3
 8003a00:	dde2      	ble.n	80039c8 <keypad_sm+0x3e8>
}
 8003a02:	bd70      	pop	{r4, r5, r6, pc}
			kpenum = WAIT;
 8003a04:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003a06:	207a      	movs	r0, #122	; 0x7a
 8003a08:	4b3c      	ldr	r3, [pc, #240]	; (8003afc <keypad_sm+0x51c>)
			if(keypadarr[4] == '.'){
 8003a0a:	4a3d      	ldr	r2, [pc, #244]	; (8003b00 <keypad_sm+0x520>)
				keypaddecimal = 0;
 8003a0c:	4d3d      	ldr	r5, [pc, #244]	; (8003b04 <keypad_sm+0x524>)
			kpenum = WAIT;
 8003a0e:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8003a10:	7819      	ldrb	r1, [r3, #0]
 8003a12:	b249      	sxtb	r1, r1
 8003a14:	2903      	cmp	r1, #3
 8003a16:	f73f adf9 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003a1a:	7819      	ldrb	r1, [r3, #0]
 8003a1c:	b249      	sxtb	r1, r1
 8003a1e:	2903      	cmp	r1, #3
 8003a20:	dcf6      	bgt.n	8003a10 <keypad_sm+0x430>
			if(keypadarr[4] == '.'){
 8003a22:	7911      	ldrb	r1, [r2, #4]
 8003a24:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003a26:	bf08      	it	eq
 8003a28:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003a2a:	78d1      	ldrb	r1, [r2, #3]
 8003a2c:	b2c9      	uxtb	r1, r1
 8003a2e:	7111      	strb	r1, [r2, #4]
 8003a30:	7891      	ldrb	r1, [r2, #2]
 8003a32:	b2c9      	uxtb	r1, r1
 8003a34:	70d1      	strb	r1, [r2, #3]
 8003a36:	7851      	ldrb	r1, [r2, #1]
 8003a38:	b2c9      	uxtb	r1, r1
 8003a3a:	7091      	strb	r1, [r2, #2]
 8003a3c:	7811      	ldrb	r1, [r2, #0]
 8003a3e:	b2c9      	uxtb	r1, r1
 8003a40:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003a42:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003a44:	7819      	ldrb	r1, [r3, #0]
 8003a46:	3101      	adds	r1, #1
 8003a48:	b249      	sxtb	r1, r1
 8003a4a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003a4c:	7819      	ldrb	r1, [r3, #0]
 8003a4e:	b249      	sxtb	r1, r1
 8003a50:	2903      	cmp	r1, #3
 8003a52:	dde2      	ble.n	8003a1a <keypad_sm+0x43a>
}
 8003a54:	bd70      	pop	{r4, r5, r6, pc}
			kpenum = A2;
 8003a56:	2104      	movs	r1, #4
			keypadarr[0] = num;
 8003a58:	207a      	movs	r0, #122	; 0x7a
 8003a5a:	4b28      	ldr	r3, [pc, #160]	; (8003afc <keypad_sm+0x51c>)
			if(keypadarr[4] == '.'){
 8003a5c:	4a28      	ldr	r2, [pc, #160]	; (8003b00 <keypad_sm+0x520>)
				keypaddecimal = 0;
 8003a5e:	4d29      	ldr	r5, [pc, #164]	; (8003b04 <keypad_sm+0x524>)
			kpenum = A2;
 8003a60:	7031      	strb	r1, [r6, #0]
	while(keypaditerator < 4){
 8003a62:	7819      	ldrb	r1, [r3, #0]
 8003a64:	b249      	sxtb	r1, r1
 8003a66:	2903      	cmp	r1, #3
 8003a68:	f73f add0 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003a6c:	7819      	ldrb	r1, [r3, #0]
 8003a6e:	b249      	sxtb	r1, r1
 8003a70:	2903      	cmp	r1, #3
 8003a72:	dcf6      	bgt.n	8003a62 <keypad_sm+0x482>
			if(keypadarr[4] == '.'){
 8003a74:	7911      	ldrb	r1, [r2, #4]
 8003a76:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003a78:	bf08      	it	eq
 8003a7a:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003a7c:	78d1      	ldrb	r1, [r2, #3]
 8003a7e:	b2c9      	uxtb	r1, r1
 8003a80:	7111      	strb	r1, [r2, #4]
 8003a82:	7891      	ldrb	r1, [r2, #2]
 8003a84:	b2c9      	uxtb	r1, r1
 8003a86:	70d1      	strb	r1, [r2, #3]
 8003a88:	7851      	ldrb	r1, [r2, #1]
 8003a8a:	b2c9      	uxtb	r1, r1
 8003a8c:	7091      	strb	r1, [r2, #2]
 8003a8e:	7811      	ldrb	r1, [r2, #0]
 8003a90:	b2c9      	uxtb	r1, r1
 8003a92:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003a94:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003a96:	7819      	ldrb	r1, [r3, #0]
 8003a98:	3101      	adds	r1, #1
 8003a9a:	b249      	sxtb	r1, r1
 8003a9c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003a9e:	7819      	ldrb	r1, [r3, #0]
 8003aa0:	b249      	sxtb	r1, r1
 8003aa2:	2903      	cmp	r1, #3
 8003aa4:	dde2      	ble.n	8003a6c <keypad_sm+0x48c>
}
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
			kpenum = WAIT;
 8003aa8:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003aaa:	207a      	movs	r0, #122	; 0x7a
 8003aac:	4b13      	ldr	r3, [pc, #76]	; (8003afc <keypad_sm+0x51c>)
			if(keypadarr[4] == '.'){
 8003aae:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <keypad_sm+0x520>)
				keypaddecimal = 0;
 8003ab0:	4d14      	ldr	r5, [pc, #80]	; (8003b04 <keypad_sm+0x524>)
			kpenum = WAIT;
 8003ab2:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8003ab4:	7819      	ldrb	r1, [r3, #0]
 8003ab6:	b249      	sxtb	r1, r1
 8003ab8:	2903      	cmp	r1, #3
 8003aba:	f73f ada7 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003abe:	7819      	ldrb	r1, [r3, #0]
 8003ac0:	b249      	sxtb	r1, r1
 8003ac2:	2903      	cmp	r1, #3
 8003ac4:	dcf6      	bgt.n	8003ab4 <keypad_sm+0x4d4>
			if(keypadarr[4] == '.'){
 8003ac6:	7911      	ldrb	r1, [r2, #4]
 8003ac8:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003aca:	bf08      	it	eq
 8003acc:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003ace:	78d1      	ldrb	r1, [r2, #3]
 8003ad0:	b2c9      	uxtb	r1, r1
 8003ad2:	7111      	strb	r1, [r2, #4]
 8003ad4:	7891      	ldrb	r1, [r2, #2]
 8003ad6:	b2c9      	uxtb	r1, r1
 8003ad8:	70d1      	strb	r1, [r2, #3]
 8003ada:	7851      	ldrb	r1, [r2, #1]
 8003adc:	b2c9      	uxtb	r1, r1
 8003ade:	7091      	strb	r1, [r2, #2]
 8003ae0:	7811      	ldrb	r1, [r2, #0]
 8003ae2:	b2c9      	uxtb	r1, r1
 8003ae4:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003ae6:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003ae8:	7819      	ldrb	r1, [r3, #0]
 8003aea:	3101      	adds	r1, #1
 8003aec:	b249      	sxtb	r1, r1
 8003aee:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003af0:	7819      	ldrb	r1, [r3, #0]
 8003af2:	b249      	sxtb	r1, r1
 8003af4:	2903      	cmp	r1, #3
 8003af6:	dde2      	ble.n	8003abe <keypad_sm+0x4de>
}
 8003af8:	bd70      	pop	{r4, r5, r6, pc}
 8003afa:	bf00      	nop
 8003afc:	20000019 	.word	0x20000019
 8003b00:	20000014 	.word	0x20000014
 8003b04:	200006d4 	.word	0x200006d4
 8003b08:	200003b6 	.word	0x200003b6
			kpenum = WAIT;
 8003b0c:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003b0e:	207a      	movs	r0, #122	; 0x7a
 8003b10:	4b95      	ldr	r3, [pc, #596]	; (8003d68 <keypad_sm+0x788>)
			if(keypadarr[4] == '.'){
 8003b12:	4a96      	ldr	r2, [pc, #600]	; (8003d6c <keypad_sm+0x78c>)
				keypaddecimal = 0;
 8003b14:	4d96      	ldr	r5, [pc, #600]	; (8003d70 <keypad_sm+0x790>)
			kpenum = WAIT;
 8003b16:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8003b18:	7819      	ldrb	r1, [r3, #0]
 8003b1a:	b249      	sxtb	r1, r1
 8003b1c:	2903      	cmp	r1, #3
 8003b1e:	f73f ad75 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003b22:	7819      	ldrb	r1, [r3, #0]
 8003b24:	b249      	sxtb	r1, r1
 8003b26:	2903      	cmp	r1, #3
 8003b28:	dcf6      	bgt.n	8003b18 <keypad_sm+0x538>
			if(keypadarr[4] == '.'){
 8003b2a:	7911      	ldrb	r1, [r2, #4]
 8003b2c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003b2e:	bf08      	it	eq
 8003b30:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003b32:	78d1      	ldrb	r1, [r2, #3]
 8003b34:	b2c9      	uxtb	r1, r1
 8003b36:	7111      	strb	r1, [r2, #4]
 8003b38:	7891      	ldrb	r1, [r2, #2]
 8003b3a:	b2c9      	uxtb	r1, r1
 8003b3c:	70d1      	strb	r1, [r2, #3]
 8003b3e:	7851      	ldrb	r1, [r2, #1]
 8003b40:	b2c9      	uxtb	r1, r1
 8003b42:	7091      	strb	r1, [r2, #2]
 8003b44:	7811      	ldrb	r1, [r2, #0]
 8003b46:	b2c9      	uxtb	r1, r1
 8003b48:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003b4a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003b4c:	7819      	ldrb	r1, [r3, #0]
 8003b4e:	3101      	adds	r1, #1
 8003b50:	b249      	sxtb	r1, r1
 8003b52:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003b54:	7819      	ldrb	r1, [r3, #0]
 8003b56:	b249      	sxtb	r1, r1
 8003b58:	2903      	cmp	r1, #3
 8003b5a:	dde2      	ble.n	8003b22 <keypad_sm+0x542>
}
 8003b5c:	bd70      	pop	{r4, r5, r6, pc}
	float temp = translate_keypad();
 8003b5e:	f7ff fafb 	bl	8003158 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8003b62:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8003b64:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8003b66:	f7fd fa67 	bl	8001038 <__aeabi_fcmpge>
 8003b6a:	b140      	cbz	r0, 8003b7e <keypad_sm+0x59e>
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	4981      	ldr	r1, [pc, #516]	; (8003d74 <keypad_sm+0x794>)
 8003b70:	f7fd fa58 	bl	8001024 <__aeabi_fcmple>
 8003b74:	b118      	cbz	r0, 8003b7e <keypad_sm+0x59e>
				volt_set_aux = translate_keypad();
 8003b76:	f7ff faef 	bl	8003158 <translate_keypad>
 8003b7a:	4b7f      	ldr	r3, [pc, #508]	; (8003d78 <keypad_sm+0x798>)
 8003b7c:	6018      	str	r0, [r3, #0]
			kpenum = WAIT;
 8003b7e:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003b80:	207a      	movs	r0, #122	; 0x7a
 8003b82:	4b79      	ldr	r3, [pc, #484]	; (8003d68 <keypad_sm+0x788>)
			if(keypadarr[4] == '.'){
 8003b84:	4a79      	ldr	r2, [pc, #484]	; (8003d6c <keypad_sm+0x78c>)
				keypaddecimal = 0;
 8003b86:	4d7a      	ldr	r5, [pc, #488]	; (8003d70 <keypad_sm+0x790>)
			kpenum = WAIT;
 8003b88:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8003b8a:	7819      	ldrb	r1, [r3, #0]
 8003b8c:	b249      	sxtb	r1, r1
 8003b8e:	2903      	cmp	r1, #3
 8003b90:	f73f ad3c 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003b94:	7819      	ldrb	r1, [r3, #0]
 8003b96:	b249      	sxtb	r1, r1
 8003b98:	2903      	cmp	r1, #3
 8003b9a:	dcf6      	bgt.n	8003b8a <keypad_sm+0x5aa>
			if(keypadarr[4] == '.'){
 8003b9c:	7911      	ldrb	r1, [r2, #4]
 8003b9e:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003ba0:	bf08      	it	eq
 8003ba2:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003ba4:	78d1      	ldrb	r1, [r2, #3]
 8003ba6:	b2c9      	uxtb	r1, r1
 8003ba8:	7111      	strb	r1, [r2, #4]
 8003baa:	7891      	ldrb	r1, [r2, #2]
 8003bac:	b2c9      	uxtb	r1, r1
 8003bae:	70d1      	strb	r1, [r2, #3]
 8003bb0:	7851      	ldrb	r1, [r2, #1]
 8003bb2:	b2c9      	uxtb	r1, r1
 8003bb4:	7091      	strb	r1, [r2, #2]
 8003bb6:	7811      	ldrb	r1, [r2, #0]
 8003bb8:	b2c9      	uxtb	r1, r1
 8003bba:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003bbc:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003bbe:	7819      	ldrb	r1, [r3, #0]
 8003bc0:	3101      	adds	r1, #1
 8003bc2:	b249      	sxtb	r1, r1
 8003bc4:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003bc6:	7819      	ldrb	r1, [r3, #0]
 8003bc8:	b249      	sxtb	r1, r1
 8003bca:	2903      	cmp	r1, #3
 8003bcc:	dde2      	ble.n	8003b94 <keypad_sm+0x5b4>
}
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
			if(chstat_aux_rx){
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <keypad_sm+0x79c>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8082 	beq.w	8003cde <keypad_sm+0x6fe>
				chstat_aux_tx = 0;
 8003bda:	4b69      	ldr	r3, [pc, #420]	; (8003d80 <keypad_sm+0x7a0>)
 8003bdc:	701c      	strb	r4, [r3, #0]
}
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
			kpenum = WAIT;
 8003be0:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003be2:	207a      	movs	r0, #122	; 0x7a
 8003be4:	4b60      	ldr	r3, [pc, #384]	; (8003d68 <keypad_sm+0x788>)
			if(keypadarr[4] == '.'){
 8003be6:	4a61      	ldr	r2, [pc, #388]	; (8003d6c <keypad_sm+0x78c>)
				keypaddecimal = 0;
 8003be8:	4d61      	ldr	r5, [pc, #388]	; (8003d70 <keypad_sm+0x790>)
			kpenum = WAIT;
 8003bea:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8003bec:	7819      	ldrb	r1, [r3, #0]
 8003bee:	b249      	sxtb	r1, r1
 8003bf0:	2903      	cmp	r1, #3
 8003bf2:	f73f ad0b 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003bf6:	7819      	ldrb	r1, [r3, #0]
 8003bf8:	b249      	sxtb	r1, r1
 8003bfa:	2903      	cmp	r1, #3
 8003bfc:	dcf6      	bgt.n	8003bec <keypad_sm+0x60c>
			if(keypadarr[4] == '.'){
 8003bfe:	7911      	ldrb	r1, [r2, #4]
 8003c00:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003c02:	bf08      	it	eq
 8003c04:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003c06:	78d1      	ldrb	r1, [r2, #3]
 8003c08:	b2c9      	uxtb	r1, r1
 8003c0a:	7111      	strb	r1, [r2, #4]
 8003c0c:	7891      	ldrb	r1, [r2, #2]
 8003c0e:	b2c9      	uxtb	r1, r1
 8003c10:	70d1      	strb	r1, [r2, #3]
 8003c12:	7851      	ldrb	r1, [r2, #1]
 8003c14:	b2c9      	uxtb	r1, r1
 8003c16:	7091      	strb	r1, [r2, #2]
 8003c18:	7811      	ldrb	r1, [r2, #0]
 8003c1a:	b2c9      	uxtb	r1, r1
 8003c1c:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003c1e:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003c20:	7819      	ldrb	r1, [r3, #0]
 8003c22:	3101      	adds	r1, #1
 8003c24:	b249      	sxtb	r1, r1
 8003c26:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003c28:	7819      	ldrb	r1, [r3, #0]
 8003c2a:	b249      	sxtb	r1, r1
 8003c2c:	2903      	cmp	r1, #3
 8003c2e:	dde2      	ble.n	8003bf6 <keypad_sm+0x616>
}
 8003c30:	bd70      	pop	{r4, r5, r6, pc}
 8003c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			update_keypad(num);
 8003c36:	f7ff bc31 	b.w	800349c <update_keypad>
			kpenum = WAIT;
 8003c3a:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003c3c:	207a      	movs	r0, #122	; 0x7a
 8003c3e:	4b4a      	ldr	r3, [pc, #296]	; (8003d68 <keypad_sm+0x788>)
			if(keypadarr[4] == '.'){
 8003c40:	4a4a      	ldr	r2, [pc, #296]	; (8003d6c <keypad_sm+0x78c>)
				keypaddecimal = 0;
 8003c42:	4d4b      	ldr	r5, [pc, #300]	; (8003d70 <keypad_sm+0x790>)
			kpenum = WAIT;
 8003c44:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8003c46:	7819      	ldrb	r1, [r3, #0]
 8003c48:	b249      	sxtb	r1, r1
 8003c4a:	2903      	cmp	r1, #3
 8003c4c:	f73f acde 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003c50:	7819      	ldrb	r1, [r3, #0]
 8003c52:	b249      	sxtb	r1, r1
 8003c54:	2903      	cmp	r1, #3
 8003c56:	dcf6      	bgt.n	8003c46 <keypad_sm+0x666>
			if(keypadarr[4] == '.'){
 8003c58:	7911      	ldrb	r1, [r2, #4]
 8003c5a:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003c5c:	bf08      	it	eq
 8003c5e:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003c60:	78d1      	ldrb	r1, [r2, #3]
 8003c62:	b2c9      	uxtb	r1, r1
 8003c64:	7111      	strb	r1, [r2, #4]
 8003c66:	7891      	ldrb	r1, [r2, #2]
 8003c68:	b2c9      	uxtb	r1, r1
 8003c6a:	70d1      	strb	r1, [r2, #3]
 8003c6c:	7851      	ldrb	r1, [r2, #1]
 8003c6e:	b2c9      	uxtb	r1, r1
 8003c70:	7091      	strb	r1, [r2, #2]
 8003c72:	7811      	ldrb	r1, [r2, #0]
 8003c74:	b2c9      	uxtb	r1, r1
 8003c76:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003c78:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003c7a:	7819      	ldrb	r1, [r3, #0]
 8003c7c:	3101      	adds	r1, #1
 8003c7e:	b249      	sxtb	r1, r1
 8003c80:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003c82:	7819      	ldrb	r1, [r3, #0]
 8003c84:	b249      	sxtb	r1, r1
 8003c86:	2903      	cmp	r1, #3
 8003c88:	dde2      	ble.n	8003c50 <keypad_sm+0x670>
}
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
			kpenum = WAIT;
 8003c8c:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003c8e:	207a      	movs	r0, #122	; 0x7a
 8003c90:	4b35      	ldr	r3, [pc, #212]	; (8003d68 <keypad_sm+0x788>)
			if(keypadarr[4] == '.'){
 8003c92:	4a36      	ldr	r2, [pc, #216]	; (8003d6c <keypad_sm+0x78c>)
				keypaddecimal = 0;
 8003c94:	4d36      	ldr	r5, [pc, #216]	; (8003d70 <keypad_sm+0x790>)
			kpenum = WAIT;
 8003c96:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8003c98:	7819      	ldrb	r1, [r3, #0]
 8003c9a:	b249      	sxtb	r1, r1
 8003c9c:	2903      	cmp	r1, #3
 8003c9e:	f73f acb5 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003ca2:	7819      	ldrb	r1, [r3, #0]
 8003ca4:	b249      	sxtb	r1, r1
 8003ca6:	2903      	cmp	r1, #3
 8003ca8:	dcf6      	bgt.n	8003c98 <keypad_sm+0x6b8>
			if(keypadarr[4] == '.'){
 8003caa:	7911      	ldrb	r1, [r2, #4]
 8003cac:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003cae:	bf08      	it	eq
 8003cb0:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003cb2:	78d1      	ldrb	r1, [r2, #3]
 8003cb4:	b2c9      	uxtb	r1, r1
 8003cb6:	7111      	strb	r1, [r2, #4]
 8003cb8:	7891      	ldrb	r1, [r2, #2]
 8003cba:	b2c9      	uxtb	r1, r1
 8003cbc:	70d1      	strb	r1, [r2, #3]
 8003cbe:	7851      	ldrb	r1, [r2, #1]
 8003cc0:	b2c9      	uxtb	r1, r1
 8003cc2:	7091      	strb	r1, [r2, #2]
 8003cc4:	7811      	ldrb	r1, [r2, #0]
 8003cc6:	b2c9      	uxtb	r1, r1
 8003cc8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003cca:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003ccc:	7819      	ldrb	r1, [r3, #0]
 8003cce:	3101      	adds	r1, #1
 8003cd0:	b249      	sxtb	r1, r1
 8003cd2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003cd4:	7819      	ldrb	r1, [r3, #0]
 8003cd6:	b249      	sxtb	r1, r1
 8003cd8:	2903      	cmp	r1, #3
 8003cda:	dde2      	ble.n	8003ca2 <keypad_sm+0x6c2>
}
 8003cdc:	bd70      	pop	{r4, r5, r6, pc}
				chstat_aux_tx = 1;
 8003cde:	2201      	movs	r2, #1
 8003ce0:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <keypad_sm+0x7a0>)
 8003ce2:	701a      	strb	r2, [r3, #0]
}
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}
	float temp = translate_keypad();
 8003ce6:	f7ff fa37 	bl	8003158 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8003cea:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8003cec:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8003cee:	f7fd f9a3 	bl	8001038 <__aeabi_fcmpge>
 8003cf2:	b160      	cbz	r0, 8003d0e <keypad_sm+0x72e>
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7fc fbaf 	bl	8000458 <__aeabi_f2d>
 8003cfa:	a319      	add	r3, pc, #100	; (adr r3, 8003d60 <keypad_sm+0x780>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f7fc fe7e 	bl	8000a00 <__aeabi_dcmple>
 8003d04:	b118      	cbz	r0, 8003d0e <keypad_sm+0x72e>
				amp_set_aux = translate_keypad();
 8003d06:	f7ff fa27 	bl	8003158 <translate_keypad>
 8003d0a:	4a1e      	ldr	r2, [pc, #120]	; (8003d84 <keypad_sm+0x7a4>)
 8003d0c:	6010      	str	r0, [r2, #0]
			kpenum = WAIT;
 8003d0e:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003d10:	207a      	movs	r0, #122	; 0x7a
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <keypad_sm+0x788>)
			if(keypadarr[4] == '.'){
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <keypad_sm+0x78c>)
				keypaddecimal = 0;
 8003d16:	4d16      	ldr	r5, [pc, #88]	; (8003d70 <keypad_sm+0x790>)
			kpenum = WAIT;
 8003d18:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8003d1a:	7819      	ldrb	r1, [r3, #0]
 8003d1c:	b249      	sxtb	r1, r1
 8003d1e:	2903      	cmp	r1, #3
 8003d20:	f73f ac74 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003d24:	7819      	ldrb	r1, [r3, #0]
 8003d26:	b249      	sxtb	r1, r1
 8003d28:	2903      	cmp	r1, #3
 8003d2a:	dcf6      	bgt.n	8003d1a <keypad_sm+0x73a>
			if(keypadarr[4] == '.'){
 8003d2c:	7911      	ldrb	r1, [r2, #4]
 8003d2e:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003d30:	bf08      	it	eq
 8003d32:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003d34:	78d1      	ldrb	r1, [r2, #3]
 8003d36:	b2c9      	uxtb	r1, r1
 8003d38:	7111      	strb	r1, [r2, #4]
 8003d3a:	7891      	ldrb	r1, [r2, #2]
 8003d3c:	b2c9      	uxtb	r1, r1
 8003d3e:	70d1      	strb	r1, [r2, #3]
 8003d40:	7851      	ldrb	r1, [r2, #1]
 8003d42:	b2c9      	uxtb	r1, r1
 8003d44:	7091      	strb	r1, [r2, #2]
 8003d46:	7811      	ldrb	r1, [r2, #0]
 8003d48:	b2c9      	uxtb	r1, r1
 8003d4a:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003d4c:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003d4e:	7819      	ldrb	r1, [r3, #0]
 8003d50:	3101      	adds	r1, #1
 8003d52:	b249      	sxtb	r1, r1
 8003d54:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003d56:	7819      	ldrb	r1, [r3, #0]
 8003d58:	b249      	sxtb	r1, r1
 8003d5a:	2903      	cmp	r1, #3
 8003d5c:	dde2      	ble.n	8003d24 <keypad_sm+0x744>
}
 8003d5e:	bd70      	pop	{r4, r5, r6, pc}
 8003d60:	50b0f27c 	.word	0x50b0f27c
 8003d64:	3fe99a6b 	.word	0x3fe99a6b
 8003d68:	20000019 	.word	0x20000019
 8003d6c:	20000014 	.word	0x20000014
 8003d70:	200006d4 	.word	0x200006d4
 8003d74:	41400000 	.word	0x41400000
 8003d78:	20000830 	.word	0x20000830
 8003d7c:	200003b4 	.word	0x200003b4
 8003d80:	200003b5 	.word	0x200003b5
 8003d84:	200003a8 	.word	0x200003a8
			kpenum = WAIT;
 8003d88:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003d8a:	207a      	movs	r0, #122	; 0x7a
 8003d8c:	4b82      	ldr	r3, [pc, #520]	; (8003f98 <keypad_sm+0x9b8>)
			if(keypadarr[4] == '.'){
 8003d8e:	4a83      	ldr	r2, [pc, #524]	; (8003f9c <keypad_sm+0x9bc>)
				keypaddecimal = 0;
 8003d90:	4d83      	ldr	r5, [pc, #524]	; (8003fa0 <keypad_sm+0x9c0>)
			kpenum = WAIT;
 8003d92:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8003d94:	7819      	ldrb	r1, [r3, #0]
 8003d96:	b249      	sxtb	r1, r1
 8003d98:	2903      	cmp	r1, #3
 8003d9a:	f73f ac37 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003d9e:	7819      	ldrb	r1, [r3, #0]
 8003da0:	b249      	sxtb	r1, r1
 8003da2:	2903      	cmp	r1, #3
 8003da4:	dcf6      	bgt.n	8003d94 <keypad_sm+0x7b4>
			if(keypadarr[4] == '.'){
 8003da6:	7911      	ldrb	r1, [r2, #4]
 8003da8:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003daa:	bf08      	it	eq
 8003dac:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003dae:	78d1      	ldrb	r1, [r2, #3]
 8003db0:	b2c9      	uxtb	r1, r1
 8003db2:	7111      	strb	r1, [r2, #4]
 8003db4:	7891      	ldrb	r1, [r2, #2]
 8003db6:	b2c9      	uxtb	r1, r1
 8003db8:	70d1      	strb	r1, [r2, #3]
 8003dba:	7851      	ldrb	r1, [r2, #1]
 8003dbc:	b2c9      	uxtb	r1, r1
 8003dbe:	7091      	strb	r1, [r2, #2]
 8003dc0:	7811      	ldrb	r1, [r2, #0]
 8003dc2:	b2c9      	uxtb	r1, r1
 8003dc4:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003dc6:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003dc8:	7819      	ldrb	r1, [r3, #0]
 8003dca:	3101      	adds	r1, #1
 8003dcc:	b249      	sxtb	r1, r1
 8003dce:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003dd0:	7819      	ldrb	r1, [r3, #0]
 8003dd2:	b249      	sxtb	r1, r1
 8003dd4:	2903      	cmp	r1, #3
 8003dd6:	dde2      	ble.n	8003d9e <keypad_sm+0x7be>
}
 8003dd8:	bd70      	pop	{r4, r5, r6, pc}
			kpenum = WAIT;
 8003dda:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003ddc:	207a      	movs	r0, #122	; 0x7a
 8003dde:	4b6e      	ldr	r3, [pc, #440]	; (8003f98 <keypad_sm+0x9b8>)
			if(keypadarr[4] == '.'){
 8003de0:	4a6e      	ldr	r2, [pc, #440]	; (8003f9c <keypad_sm+0x9bc>)
				keypaddecimal = 0;
 8003de2:	4d6f      	ldr	r5, [pc, #444]	; (8003fa0 <keypad_sm+0x9c0>)
			kpenum = WAIT;
 8003de4:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8003de6:	7819      	ldrb	r1, [r3, #0]
 8003de8:	b249      	sxtb	r1, r1
 8003dea:	2903      	cmp	r1, #3
 8003dec:	f73f ac0e 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003df0:	7819      	ldrb	r1, [r3, #0]
 8003df2:	b249      	sxtb	r1, r1
 8003df4:	2903      	cmp	r1, #3
 8003df6:	dcf6      	bgt.n	8003de6 <keypad_sm+0x806>
			if(keypadarr[4] == '.'){
 8003df8:	7911      	ldrb	r1, [r2, #4]
 8003dfa:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003dfc:	bf08      	it	eq
 8003dfe:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003e00:	78d1      	ldrb	r1, [r2, #3]
 8003e02:	b2c9      	uxtb	r1, r1
 8003e04:	7111      	strb	r1, [r2, #4]
 8003e06:	7891      	ldrb	r1, [r2, #2]
 8003e08:	b2c9      	uxtb	r1, r1
 8003e0a:	70d1      	strb	r1, [r2, #3]
 8003e0c:	7851      	ldrb	r1, [r2, #1]
 8003e0e:	b2c9      	uxtb	r1, r1
 8003e10:	7091      	strb	r1, [r2, #2]
 8003e12:	7811      	ldrb	r1, [r2, #0]
 8003e14:	b2c9      	uxtb	r1, r1
 8003e16:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003e18:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003e1a:	7819      	ldrb	r1, [r3, #0]
 8003e1c:	3101      	adds	r1, #1
 8003e1e:	b249      	sxtb	r1, r1
 8003e20:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003e22:	7819      	ldrb	r1, [r3, #0]
 8003e24:	b249      	sxtb	r1, r1
 8003e26:	2903      	cmp	r1, #3
 8003e28:	dde2      	ble.n	8003df0 <keypad_sm+0x810>
}
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
				chstat_main = 1;
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
}
 8003e30:	bd70      	pop	{r4, r5, r6, pc}
		if(keypaditerator < keypadlength-1){
 8003e32:	4b59      	ldr	r3, [pc, #356]	; (8003f98 <keypad_sm+0x9b8>)
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	b252      	sxtb	r2, r2
 8003e38:	2a03      	cmp	r2, #3
 8003e3a:	f73f abe7 	bgt.w	800360c <keypad_sm+0x2c>
			if(keypadarr[4] == '.'){
 8003e3e:	4a57      	ldr	r2, [pc, #348]	; (8003f9c <keypad_sm+0x9bc>)
 8003e40:	7911      	ldrb	r1, [r2, #4]
 8003e42:	292e      	cmp	r1, #46	; 0x2e
 8003e44:	d102      	bne.n	8003e4c <keypad_sm+0x86c>
				keypaddecimal = 0;
 8003e46:	2000      	movs	r0, #0
 8003e48:	4955      	ldr	r1, [pc, #340]	; (8003fa0 <keypad_sm+0x9c0>)
 8003e4a:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 8003e4c:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8003e4e:	78d1      	ldrb	r1, [r2, #3]
 8003e50:	b2c9      	uxtb	r1, r1
 8003e52:	7111      	strb	r1, [r2, #4]
 8003e54:	7891      	ldrb	r1, [r2, #2]
 8003e56:	b2c9      	uxtb	r1, r1
 8003e58:	70d1      	strb	r1, [r2, #3]
 8003e5a:	7851      	ldrb	r1, [r2, #1]
 8003e5c:	b2c9      	uxtb	r1, r1
 8003e5e:	7091      	strb	r1, [r2, #2]
 8003e60:	7811      	ldrb	r1, [r2, #0]
 8003e62:	b2c9      	uxtb	r1, r1
 8003e64:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003e66:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	3201      	adds	r2, #1
 8003e6c:	b252      	sxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]
}
 8003e70:	bd70      	pop	{r4, r5, r6, pc}
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8003e72:	4b49      	ldr	r3, [pc, #292]	; (8003f98 <keypad_sm+0x9b8>)
 8003e74:	781a      	ldrb	r2, [r3, #0]
 8003e76:	b252      	sxtb	r2, r2
 8003e78:	2a01      	cmp	r2, #1
 8003e7a:	f77f abc7 	ble.w	800360c <keypad_sm+0x2c>
 8003e7e:	4848      	ldr	r0, [pc, #288]	; (8003fa0 <keypad_sm+0x9c0>)
 8003e80:	7802      	ldrb	r2, [r0, #0]
 8003e82:	2a00      	cmp	r2, #0
 8003e84:	f47f abc2 	bne.w	800360c <keypad_sm+0x2c>
			keypadarr[keypadlength-1] = num;
 8003e88:	252e      	movs	r5, #46	; 0x2e
			keypaddecimal = 1;
 8003e8a:	2401      	movs	r4, #1
				keypadarr[i-1] = keypadarr[i];
 8003e8c:	4a43      	ldr	r2, [pc, #268]	; (8003f9c <keypad_sm+0x9bc>)
 8003e8e:	7851      	ldrb	r1, [r2, #1]
 8003e90:	b2c9      	uxtb	r1, r1
 8003e92:	7011      	strb	r1, [r2, #0]
 8003e94:	7891      	ldrb	r1, [r2, #2]
 8003e96:	b2c9      	uxtb	r1, r1
 8003e98:	7051      	strb	r1, [r2, #1]
 8003e9a:	78d1      	ldrb	r1, [r2, #3]
 8003e9c:	b2c9      	uxtb	r1, r1
 8003e9e:	7091      	strb	r1, [r2, #2]
 8003ea0:	7911      	ldrb	r1, [r2, #4]
 8003ea2:	b2c9      	uxtb	r1, r1
 8003ea4:	70d1      	strb	r1, [r2, #3]
			keypadarr[keypadlength-1] = num;
 8003ea6:	7115      	strb	r5, [r2, #4]
			keypaddecimal = 1;
 8003ea8:	7004      	strb	r4, [r0, #0]
			keypaditerator--;
 8003eaa:	781a      	ldrb	r2, [r3, #0]
 8003eac:	3a01      	subs	r2, #1
 8003eae:	b252      	sxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]
}
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}
			kpenum = WAIT;
 8003eb4:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003eb6:	207a      	movs	r0, #122	; 0x7a
 8003eb8:	4b37      	ldr	r3, [pc, #220]	; (8003f98 <keypad_sm+0x9b8>)
			if(keypadarr[4] == '.'){
 8003eba:	4a38      	ldr	r2, [pc, #224]	; (8003f9c <keypad_sm+0x9bc>)
				keypaddecimal = 0;
 8003ebc:	4d38      	ldr	r5, [pc, #224]	; (8003fa0 <keypad_sm+0x9c0>)
			kpenum = WAIT;
 8003ebe:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8003ec0:	7819      	ldrb	r1, [r3, #0]
 8003ec2:	b249      	sxtb	r1, r1
 8003ec4:	2903      	cmp	r1, #3
 8003ec6:	f73f aba1 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003eca:	7819      	ldrb	r1, [r3, #0]
 8003ecc:	b249      	sxtb	r1, r1
 8003ece:	2903      	cmp	r1, #3
 8003ed0:	dcf6      	bgt.n	8003ec0 <keypad_sm+0x8e0>
			if(keypadarr[4] == '.'){
 8003ed2:	7911      	ldrb	r1, [r2, #4]
 8003ed4:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003ed6:	bf08      	it	eq
 8003ed8:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003eda:	78d1      	ldrb	r1, [r2, #3]
 8003edc:	b2c9      	uxtb	r1, r1
 8003ede:	7111      	strb	r1, [r2, #4]
 8003ee0:	7891      	ldrb	r1, [r2, #2]
 8003ee2:	b2c9      	uxtb	r1, r1
 8003ee4:	70d1      	strb	r1, [r2, #3]
 8003ee6:	7851      	ldrb	r1, [r2, #1]
 8003ee8:	b2c9      	uxtb	r1, r1
 8003eea:	7091      	strb	r1, [r2, #2]
 8003eec:	7811      	ldrb	r1, [r2, #0]
 8003eee:	b2c9      	uxtb	r1, r1
 8003ef0:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003ef2:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003ef4:	7819      	ldrb	r1, [r3, #0]
 8003ef6:	3101      	adds	r1, #1
 8003ef8:	b249      	sxtb	r1, r1
 8003efa:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003efc:	7819      	ldrb	r1, [r3, #0]
 8003efe:	b249      	sxtb	r1, r1
 8003f00:	2903      	cmp	r1, #3
 8003f02:	dde2      	ble.n	8003eca <keypad_sm+0x8ea>
}
 8003f04:	bd70      	pop	{r4, r5, r6, pc}
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8003f06:	4a24      	ldr	r2, [pc, #144]	; (8003f98 <keypad_sm+0x9b8>)
 8003f08:	7813      	ldrb	r3, [r2, #0]
 8003f0a:	b25b      	sxtb	r3, r3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	f77f ab7d 	ble.w	800360c <keypad_sm+0x2c>
 8003f12:	4d23      	ldr	r5, [pc, #140]	; (8003fa0 <keypad_sm+0x9c0>)
 8003f14:	782b      	ldrb	r3, [r5, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f47f ab78 	bne.w	800360c <keypad_sm+0x2c>
				keypadarr[i-1] = keypadarr[i];
 8003f1c:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <keypad_sm+0x9bc>)
 8003f1e:	7859      	ldrb	r1, [r3, #1]
 8003f20:	b2c9      	uxtb	r1, r1
 8003f22:	7019      	strb	r1, [r3, #0]
 8003f24:	7899      	ldrb	r1, [r3, #2]
 8003f26:	b2c9      	uxtb	r1, r1
 8003f28:	7059      	strb	r1, [r3, #1]
 8003f2a:	78d9      	ldrb	r1, [r3, #3]
 8003f2c:	b2c9      	uxtb	r1, r1
 8003f2e:	7099      	strb	r1, [r3, #2]
 8003f30:	7919      	ldrb	r1, [r3, #4]
 8003f32:	b2c9      	uxtb	r1, r1
 8003f34:	70d9      	strb	r1, [r3, #3]
			keypadarr[keypadlength-1] = num;
 8003f36:	7118      	strb	r0, [r3, #4]
			keypaddecimal = 1;
 8003f38:	702c      	strb	r4, [r5, #0]
			keypaditerator--;
 8003f3a:	7813      	ldrb	r3, [r2, #0]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b25b      	sxtb	r3, r3
 8003f40:	7013      	strb	r3, [r2, #0]
}
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
			kpenum = WAIT;
 8003f44:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003f46:	207a      	movs	r0, #122	; 0x7a
 8003f48:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <keypad_sm+0x9b8>)
			if(keypadarr[4] == '.'){
 8003f4a:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <keypad_sm+0x9bc>)
				keypaddecimal = 0;
 8003f4c:	4d14      	ldr	r5, [pc, #80]	; (8003fa0 <keypad_sm+0x9c0>)
			kpenum = WAIT;
 8003f4e:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8003f50:	7819      	ldrb	r1, [r3, #0]
 8003f52:	b249      	sxtb	r1, r1
 8003f54:	2903      	cmp	r1, #3
 8003f56:	f73f ab59 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003f5a:	7819      	ldrb	r1, [r3, #0]
 8003f5c:	b249      	sxtb	r1, r1
 8003f5e:	2903      	cmp	r1, #3
 8003f60:	dcf6      	bgt.n	8003f50 <keypad_sm+0x970>
			if(keypadarr[4] == '.'){
 8003f62:	7911      	ldrb	r1, [r2, #4]
 8003f64:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003f66:	bf08      	it	eq
 8003f68:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003f6a:	78d1      	ldrb	r1, [r2, #3]
 8003f6c:	b2c9      	uxtb	r1, r1
 8003f6e:	7111      	strb	r1, [r2, #4]
 8003f70:	7891      	ldrb	r1, [r2, #2]
 8003f72:	b2c9      	uxtb	r1, r1
 8003f74:	70d1      	strb	r1, [r2, #3]
 8003f76:	7851      	ldrb	r1, [r2, #1]
 8003f78:	b2c9      	uxtb	r1, r1
 8003f7a:	7091      	strb	r1, [r2, #2]
 8003f7c:	7811      	ldrb	r1, [r2, #0]
 8003f7e:	b2c9      	uxtb	r1, r1
 8003f80:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8003f82:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8003f84:	7819      	ldrb	r1, [r3, #0]
 8003f86:	3101      	adds	r1, #1
 8003f88:	b249      	sxtb	r1, r1
 8003f8a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8003f8c:	7819      	ldrb	r1, [r3, #0]
 8003f8e:	b249      	sxtb	r1, r1
 8003f90:	2903      	cmp	r1, #3
 8003f92:	dde2      	ble.n	8003f5a <keypad_sm+0x97a>
}
 8003f94:	bd70      	pop	{r4, r5, r6, pc}
 8003f96:	bf00      	nop
 8003f98:	20000019 	.word	0x20000019
 8003f9c:	20000014 	.word	0x20000014
 8003fa0:	200006d4 	.word	0x200006d4
	float temp = translate_keypad();
 8003fa4:	f7ff f8d8 	bl	8003158 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8003fa8:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8003faa:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8003fac:	f7fd f844 	bl	8001038 <__aeabi_fcmpge>
 8003fb0:	b158      	cbz	r0, 8003fca <keypad_sm+0x9ea>
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	4988      	ldr	r1, [pc, #544]	; (80041d8 <keypad_sm+0xbf8>)
 8003fb6:	f7fd f835 	bl	8001024 <__aeabi_fcmple>
 8003fba:	b130      	cbz	r0, 8003fca <keypad_sm+0x9ea>
				volt_set_main_old = volt_set_main;
 8003fbc:	4c87      	ldr	r4, [pc, #540]	; (80041dc <keypad_sm+0xbfc>)
 8003fbe:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <keypad_sm+0xc00>)
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	601a      	str	r2, [r3, #0]
				volt_set_main = translate_keypad();
 8003fc4:	f7ff f8c8 	bl	8003158 <translate_keypad>
 8003fc8:	6020      	str	r0, [r4, #0]
			kpenum = WAIT;
 8003fca:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8003fcc:	207a      	movs	r0, #122	; 0x7a
 8003fce:	4b85      	ldr	r3, [pc, #532]	; (80041e4 <keypad_sm+0xc04>)
			if(keypadarr[4] == '.'){
 8003fd0:	4a85      	ldr	r2, [pc, #532]	; (80041e8 <keypad_sm+0xc08>)
				keypaddecimal = 0;
 8003fd2:	4d86      	ldr	r5, [pc, #536]	; (80041ec <keypad_sm+0xc0c>)
			kpenum = WAIT;
 8003fd4:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8003fd6:	7819      	ldrb	r1, [r3, #0]
 8003fd8:	b249      	sxtb	r1, r1
 8003fda:	2903      	cmp	r1, #3
 8003fdc:	f73f ab16 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8003fe0:	7819      	ldrb	r1, [r3, #0]
 8003fe2:	b249      	sxtb	r1, r1
 8003fe4:	2903      	cmp	r1, #3
 8003fe6:	dcf6      	bgt.n	8003fd6 <keypad_sm+0x9f6>
			if(keypadarr[4] == '.'){
 8003fe8:	7911      	ldrb	r1, [r2, #4]
 8003fea:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8003fec:	bf08      	it	eq
 8003fee:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003ff0:	78d1      	ldrb	r1, [r2, #3]
 8003ff2:	b2c9      	uxtb	r1, r1
 8003ff4:	7111      	strb	r1, [r2, #4]
 8003ff6:	7891      	ldrb	r1, [r2, #2]
 8003ff8:	b2c9      	uxtb	r1, r1
 8003ffa:	70d1      	strb	r1, [r2, #3]
 8003ffc:	7851      	ldrb	r1, [r2, #1]
 8003ffe:	b2c9      	uxtb	r1, r1
 8004000:	7091      	strb	r1, [r2, #2]
 8004002:	7811      	ldrb	r1, [r2, #0]
 8004004:	b2c9      	uxtb	r1, r1
 8004006:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004008:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800400a:	7819      	ldrb	r1, [r3, #0]
 800400c:	3101      	adds	r1, #1
 800400e:	b249      	sxtb	r1, r1
 8004010:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004012:	7819      	ldrb	r1, [r3, #0]
 8004014:	b249      	sxtb	r1, r1
 8004016:	2903      	cmp	r1, #3
 8004018:	dde2      	ble.n	8003fe0 <keypad_sm+0xa00>
}
 800401a:	bd70      	pop	{r4, r5, r6, pc}
	float temp = translate_keypad();
 800401c:	f7ff f89c 	bl	8003158 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004020:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8004022:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004024:	f7fd f808 	bl	8001038 <__aeabi_fcmpge>
 8004028:	b140      	cbz	r0, 800403c <keypad_sm+0xa5c>
 800402a:	4620      	mov	r0, r4
 800402c:	496a      	ldr	r1, [pc, #424]	; (80041d8 <keypad_sm+0xbf8>)
 800402e:	f7fc fff9 	bl	8001024 <__aeabi_fcmple>
 8004032:	b118      	cbz	r0, 800403c <keypad_sm+0xa5c>
				volt_set_aux = translate_keypad();
 8004034:	f7ff f890 	bl	8003158 <translate_keypad>
 8004038:	4a6d      	ldr	r2, [pc, #436]	; (80041f0 <keypad_sm+0xc10>)
 800403a:	6010      	str	r0, [r2, #0]
			kpenum = WAIT;
 800403c:	2400      	movs	r4, #0
			keypadarr[0] = num;
 800403e:	207a      	movs	r0, #122	; 0x7a
 8004040:	4b68      	ldr	r3, [pc, #416]	; (80041e4 <keypad_sm+0xc04>)
			if(keypadarr[4] == '.'){
 8004042:	4a69      	ldr	r2, [pc, #420]	; (80041e8 <keypad_sm+0xc08>)
				keypaddecimal = 0;
 8004044:	4d69      	ldr	r5, [pc, #420]	; (80041ec <keypad_sm+0xc0c>)
			kpenum = WAIT;
 8004046:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8004048:	7819      	ldrb	r1, [r3, #0]
 800404a:	b249      	sxtb	r1, r1
 800404c:	2903      	cmp	r1, #3
 800404e:	f73f aadd 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004052:	7819      	ldrb	r1, [r3, #0]
 8004054:	b249      	sxtb	r1, r1
 8004056:	2903      	cmp	r1, #3
 8004058:	dcf6      	bgt.n	8004048 <keypad_sm+0xa68>
			if(keypadarr[4] == '.'){
 800405a:	7911      	ldrb	r1, [r2, #4]
 800405c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800405e:	bf08      	it	eq
 8004060:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004062:	78d1      	ldrb	r1, [r2, #3]
 8004064:	b2c9      	uxtb	r1, r1
 8004066:	7111      	strb	r1, [r2, #4]
 8004068:	7891      	ldrb	r1, [r2, #2]
 800406a:	b2c9      	uxtb	r1, r1
 800406c:	70d1      	strb	r1, [r2, #3]
 800406e:	7851      	ldrb	r1, [r2, #1]
 8004070:	b2c9      	uxtb	r1, r1
 8004072:	7091      	strb	r1, [r2, #2]
 8004074:	7811      	ldrb	r1, [r2, #0]
 8004076:	b2c9      	uxtb	r1, r1
 8004078:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800407a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800407c:	7819      	ldrb	r1, [r3, #0]
 800407e:	3101      	adds	r1, #1
 8004080:	b249      	sxtb	r1, r1
 8004082:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004084:	7819      	ldrb	r1, [r3, #0]
 8004086:	b249      	sxtb	r1, r1
 8004088:	2903      	cmp	r1, #3
 800408a:	dde2      	ble.n	8004052 <keypad_sm+0xa72>
}
 800408c:	bd70      	pop	{r4, r5, r6, pc}
	float temp = translate_keypad();
 800408e:	f7ff f863 	bl	8003158 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004092:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8004094:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004096:	f7fc ffcf 	bl	8001038 <__aeabi_fcmpge>
 800409a:	b190      	cbz	r0, 80040c2 <keypad_sm+0xae2>
 800409c:	4620      	mov	r0, r4
 800409e:	f7fc f9db 	bl	8000458 <__aeabi_f2d>
 80040a2:	a34b      	add	r3, pc, #300	; (adr r3, 80041d0 <keypad_sm+0xbf0>)
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f7fc fcaa 	bl	8000a00 <__aeabi_dcmple>
 80040ac:	b148      	cbz	r0, 80040c2 <keypad_sm+0xae2>
				amp_set_main_old = amp_set_main;
 80040ae:	4c51      	ldr	r4, [pc, #324]	; (80041f4 <keypad_sm+0xc14>)
 80040b0:	4b51      	ldr	r3, [pc, #324]	; (80041f8 <keypad_sm+0xc18>)
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	601a      	str	r2, [r3, #0]
				amp_set_main = translate_keypad();
 80040b6:	f7ff f84f 	bl	8003158 <translate_keypad>
 80040ba:	6020      	str	r0, [r4, #0]
				update_ADC_watchdog(amp_set_main);
 80040bc:	6820      	ldr	r0, [r4, #0]
 80040be:	f7fd fa53 	bl	8001568 <update_ADC_watchdog>
			kpenum = WAIT;
 80040c2:	2400      	movs	r4, #0
			keypadarr[0] = num;
 80040c4:	207a      	movs	r0, #122	; 0x7a
 80040c6:	4b47      	ldr	r3, [pc, #284]	; (80041e4 <keypad_sm+0xc04>)
			if(keypadarr[4] == '.'){
 80040c8:	4a47      	ldr	r2, [pc, #284]	; (80041e8 <keypad_sm+0xc08>)
				keypaddecimal = 0;
 80040ca:	4d48      	ldr	r5, [pc, #288]	; (80041ec <keypad_sm+0xc0c>)
			kpenum = WAIT;
 80040cc:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 80040ce:	7819      	ldrb	r1, [r3, #0]
 80040d0:	b249      	sxtb	r1, r1
 80040d2:	2903      	cmp	r1, #3
 80040d4:	f73f aa9a 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80040d8:	7819      	ldrb	r1, [r3, #0]
 80040da:	b249      	sxtb	r1, r1
 80040dc:	2903      	cmp	r1, #3
 80040de:	dcf6      	bgt.n	80040ce <keypad_sm+0xaee>
			if(keypadarr[4] == '.'){
 80040e0:	7911      	ldrb	r1, [r2, #4]
 80040e2:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80040e4:	bf08      	it	eq
 80040e6:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80040e8:	78d1      	ldrb	r1, [r2, #3]
 80040ea:	b2c9      	uxtb	r1, r1
 80040ec:	7111      	strb	r1, [r2, #4]
 80040ee:	7891      	ldrb	r1, [r2, #2]
 80040f0:	b2c9      	uxtb	r1, r1
 80040f2:	70d1      	strb	r1, [r2, #3]
 80040f4:	7851      	ldrb	r1, [r2, #1]
 80040f6:	b2c9      	uxtb	r1, r1
 80040f8:	7091      	strb	r1, [r2, #2]
 80040fa:	7811      	ldrb	r1, [r2, #0]
 80040fc:	b2c9      	uxtb	r1, r1
 80040fe:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004100:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004102:	7819      	ldrb	r1, [r3, #0]
 8004104:	3101      	adds	r1, #1
 8004106:	b249      	sxtb	r1, r1
 8004108:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800410a:	7819      	ldrb	r1, [r3, #0]
 800410c:	b249      	sxtb	r1, r1
 800410e:	2903      	cmp	r1, #3
 8004110:	dde2      	ble.n	80040d8 <keypad_sm+0xaf8>
}
 8004112:	bd70      	pop	{r4, r5, r6, pc}
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8004114:	4a33      	ldr	r2, [pc, #204]	; (80041e4 <keypad_sm+0xc04>)
 8004116:	7813      	ldrb	r3, [r2, #0]
 8004118:	b25b      	sxtb	r3, r3
 800411a:	2b01      	cmp	r3, #1
 800411c:	f77f aa76 	ble.w	800360c <keypad_sm+0x2c>
 8004120:	4832      	ldr	r0, [pc, #200]	; (80041ec <keypad_sm+0xc0c>)
 8004122:	7803      	ldrb	r3, [r0, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f47f aa71 	bne.w	800360c <keypad_sm+0x2c>
			keypadarr[keypadlength-1] = num;
 800412a:	252e      	movs	r5, #46	; 0x2e
			keypaddecimal = 1;
 800412c:	2401      	movs	r4, #1
				keypadarr[i-1] = keypadarr[i];
 800412e:	4b2e      	ldr	r3, [pc, #184]	; (80041e8 <keypad_sm+0xc08>)
 8004130:	7859      	ldrb	r1, [r3, #1]
 8004132:	b2c9      	uxtb	r1, r1
 8004134:	7019      	strb	r1, [r3, #0]
 8004136:	7899      	ldrb	r1, [r3, #2]
 8004138:	b2c9      	uxtb	r1, r1
 800413a:	7059      	strb	r1, [r3, #1]
 800413c:	78d9      	ldrb	r1, [r3, #3]
 800413e:	b2c9      	uxtb	r1, r1
 8004140:	7099      	strb	r1, [r3, #2]
 8004142:	7919      	ldrb	r1, [r3, #4]
 8004144:	b2c9      	uxtb	r1, r1
 8004146:	70d9      	strb	r1, [r3, #3]
			keypadarr[keypadlength-1] = num;
 8004148:	711d      	strb	r5, [r3, #4]
			keypaddecimal = 1;
 800414a:	7004      	strb	r4, [r0, #0]
			keypaditerator--;
 800414c:	7813      	ldrb	r3, [r2, #0]
 800414e:	3b01      	subs	r3, #1
 8004150:	b25b      	sxtb	r3, r3
 8004152:	7013      	strb	r3, [r2, #0]
}
 8004154:	bd70      	pop	{r4, r5, r6, pc}
	float temp = translate_keypad();
 8004156:	f7fe ffff 	bl	8003158 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800415a:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800415c:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800415e:	f7fc ff6b 	bl	8001038 <__aeabi_fcmpge>
 8004162:	b160      	cbz	r0, 800417e <keypad_sm+0xb9e>
 8004164:	4620      	mov	r0, r4
 8004166:	f7fc f977 	bl	8000458 <__aeabi_f2d>
 800416a:	a319      	add	r3, pc, #100	; (adr r3, 80041d0 <keypad_sm+0xbf0>)
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f7fc fc46 	bl	8000a00 <__aeabi_dcmple>
 8004174:	b118      	cbz	r0, 800417e <keypad_sm+0xb9e>
				amp_set_aux = translate_keypad();
 8004176:	f7fe ffef 	bl	8003158 <translate_keypad>
 800417a:	4a20      	ldr	r2, [pc, #128]	; (80041fc <keypad_sm+0xc1c>)
 800417c:	6010      	str	r0, [r2, #0]
			kpenum = WAIT;
 800417e:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8004180:	247a      	movs	r4, #122	; 0x7a
 8004182:	4b18      	ldr	r3, [pc, #96]	; (80041e4 <keypad_sm+0xc04>)
			if(keypadarr[4] == '.'){
 8004184:	4a18      	ldr	r2, [pc, #96]	; (80041e8 <keypad_sm+0xc08>)
				keypaddecimal = 0;
 8004186:	4d19      	ldr	r5, [pc, #100]	; (80041ec <keypad_sm+0xc0c>)
			kpenum = WAIT;
 8004188:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 800418a:	7819      	ldrb	r1, [r3, #0]
 800418c:	b249      	sxtb	r1, r1
 800418e:	2903      	cmp	r1, #3
 8004190:	f73f aa3c 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004194:	7819      	ldrb	r1, [r3, #0]
 8004196:	b249      	sxtb	r1, r1
 8004198:	2903      	cmp	r1, #3
 800419a:	dcf6      	bgt.n	800418a <keypad_sm+0xbaa>
			if(keypadarr[4] == '.'){
 800419c:	7911      	ldrb	r1, [r2, #4]
 800419e:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80041a0:	bf08      	it	eq
 80041a2:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80041a4:	78d1      	ldrb	r1, [r2, #3]
 80041a6:	b2c9      	uxtb	r1, r1
 80041a8:	7111      	strb	r1, [r2, #4]
 80041aa:	7891      	ldrb	r1, [r2, #2]
 80041ac:	b2c9      	uxtb	r1, r1
 80041ae:	70d1      	strb	r1, [r2, #3]
 80041b0:	7851      	ldrb	r1, [r2, #1]
 80041b2:	b2c9      	uxtb	r1, r1
 80041b4:	7091      	strb	r1, [r2, #2]
 80041b6:	7811      	ldrb	r1, [r2, #0]
 80041b8:	b2c9      	uxtb	r1, r1
 80041ba:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80041bc:	7014      	strb	r4, [r2, #0]
			keypaditerator++;
 80041be:	7819      	ldrb	r1, [r3, #0]
 80041c0:	3101      	adds	r1, #1
 80041c2:	b249      	sxtb	r1, r1
 80041c4:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80041c6:	7819      	ldrb	r1, [r3, #0]
 80041c8:	b249      	sxtb	r1, r1
 80041ca:	2903      	cmp	r1, #3
 80041cc:	dde2      	ble.n	8004194 <keypad_sm+0xbb4>
}
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	50b0f27c 	.word	0x50b0f27c
 80041d4:	3fe99a6b 	.word	0x3fe99a6b
 80041d8:	41400000 	.word	0x41400000
 80041dc:	20000834 	.word	0x20000834
 80041e0:	20000838 	.word	0x20000838
 80041e4:	20000019 	.word	0x20000019
 80041e8:	20000014 	.word	0x20000014
 80041ec:	200006d4 	.word	0x200006d4
 80041f0:	20000830 	.word	0x20000830
 80041f4:	200003ac 	.word	0x200003ac
 80041f8:	200003b0 	.word	0x200003b0
 80041fc:	200003a8 	.word	0x200003a8
	float temp = translate_keypad();
 8004200:	f7fe ffaa 	bl	8003158 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004204:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8004206:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004208:	f7fc ff16 	bl	8001038 <__aeabi_fcmpge>
 800420c:	b158      	cbz	r0, 8004226 <keypad_sm+0xc46>
 800420e:	4620      	mov	r0, r4
 8004210:	493d      	ldr	r1, [pc, #244]	; (8004308 <keypad_sm+0xd28>)
 8004212:	f7fc ff07 	bl	8001024 <__aeabi_fcmple>
 8004216:	b130      	cbz	r0, 8004226 <keypad_sm+0xc46>
				volt_set_main_old = volt_set_main;
 8004218:	4c3c      	ldr	r4, [pc, #240]	; (800430c <keypad_sm+0xd2c>)
 800421a:	4b3d      	ldr	r3, [pc, #244]	; (8004310 <keypad_sm+0xd30>)
 800421c:	6822      	ldr	r2, [r4, #0]
 800421e:	601a      	str	r2, [r3, #0]
				volt_set_main = translate_keypad();
 8004220:	f7fe ff9a 	bl	8003158 <translate_keypad>
 8004224:	6020      	str	r0, [r4, #0]
			kpenum = WAIT;
 8004226:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8004228:	257a      	movs	r5, #122	; 0x7a
 800422a:	4b3a      	ldr	r3, [pc, #232]	; (8004314 <keypad_sm+0xd34>)
			if(keypadarr[4] == '.'){
 800422c:	493a      	ldr	r1, [pc, #232]	; (8004318 <keypad_sm+0xd38>)
				keypaddecimal = 0;
 800422e:	4c3b      	ldr	r4, [pc, #236]	; (800431c <keypad_sm+0xd3c>)
			kpenum = WAIT;
 8004230:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8004232:	781a      	ldrb	r2, [r3, #0]
 8004234:	b252      	sxtb	r2, r2
 8004236:	2a03      	cmp	r2, #3
 8004238:	f73f a9e8 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800423c:	781a      	ldrb	r2, [r3, #0]
 800423e:	b252      	sxtb	r2, r2
 8004240:	2a03      	cmp	r2, #3
 8004242:	dcf6      	bgt.n	8004232 <keypad_sm+0xc52>
			if(keypadarr[4] == '.'){
 8004244:	790a      	ldrb	r2, [r1, #4]
 8004246:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8004248:	bf08      	it	eq
 800424a:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 800424c:	78ca      	ldrb	r2, [r1, #3]
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	710a      	strb	r2, [r1, #4]
 8004252:	788a      	ldrb	r2, [r1, #2]
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	70ca      	strb	r2, [r1, #3]
 8004258:	784a      	ldrb	r2, [r1, #1]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	708a      	strb	r2, [r1, #2]
 800425e:	780a      	ldrb	r2, [r1, #0]
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8004264:	700d      	strb	r5, [r1, #0]
			keypaditerator++;
 8004266:	781a      	ldrb	r2, [r3, #0]
 8004268:	3201      	adds	r2, #1
 800426a:	b252      	sxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 800426e:	781a      	ldrb	r2, [r3, #0]
 8004270:	b252      	sxtb	r2, r2
 8004272:	2a03      	cmp	r2, #3
 8004274:	dde2      	ble.n	800423c <keypad_sm+0xc5c>
}
 8004276:	bd70      	pop	{r4, r5, r6, pc}
	float temp = translate_keypad();
 8004278:	f7fe ff6e 	bl	8003158 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800427c:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800427e:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004280:	f7fc feda 	bl	8001038 <__aeabi_fcmpge>
 8004284:	b190      	cbz	r0, 80042ac <keypad_sm+0xccc>
 8004286:	4620      	mov	r0, r4
 8004288:	f7fc f8e6 	bl	8000458 <__aeabi_f2d>
 800428c:	a31c      	add	r3, pc, #112	; (adr r3, 8004300 <keypad_sm+0xd20>)
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	f7fc fbb5 	bl	8000a00 <__aeabi_dcmple>
 8004296:	b148      	cbz	r0, 80042ac <keypad_sm+0xccc>
				amp_set_main_old = amp_set_main;
 8004298:	4c21      	ldr	r4, [pc, #132]	; (8004320 <keypad_sm+0xd40>)
 800429a:	4b22      	ldr	r3, [pc, #136]	; (8004324 <keypad_sm+0xd44>)
 800429c:	6822      	ldr	r2, [r4, #0]
 800429e:	601a      	str	r2, [r3, #0]
				amp_set_main = translate_keypad();
 80042a0:	f7fe ff5a 	bl	8003158 <translate_keypad>
 80042a4:	6020      	str	r0, [r4, #0]
				update_ADC_watchdog(amp_set_main);
 80042a6:	6820      	ldr	r0, [r4, #0]
 80042a8:	f7fd f95e 	bl	8001568 <update_ADC_watchdog>
			kpenum = WAIT;
 80042ac:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80042ae:	257a      	movs	r5, #122	; 0x7a
 80042b0:	4b18      	ldr	r3, [pc, #96]	; (8004314 <keypad_sm+0xd34>)
			if(keypadarr[4] == '.'){
 80042b2:	4a19      	ldr	r2, [pc, #100]	; (8004318 <keypad_sm+0xd38>)
				keypaddecimal = 0;
 80042b4:	4c19      	ldr	r4, [pc, #100]	; (800431c <keypad_sm+0xd3c>)
			kpenum = WAIT;
 80042b6:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80042b8:	7819      	ldrb	r1, [r3, #0]
 80042ba:	b249      	sxtb	r1, r1
 80042bc:	2903      	cmp	r1, #3
 80042be:	f73f a9a5 	bgt.w	800360c <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80042c2:	7819      	ldrb	r1, [r3, #0]
 80042c4:	b249      	sxtb	r1, r1
 80042c6:	2903      	cmp	r1, #3
 80042c8:	dcf6      	bgt.n	80042b8 <keypad_sm+0xcd8>
			if(keypadarr[4] == '.'){
 80042ca:	7911      	ldrb	r1, [r2, #4]
 80042cc:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80042ce:	bf08      	it	eq
 80042d0:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 80042d2:	78d1      	ldrb	r1, [r2, #3]
 80042d4:	b2c9      	uxtb	r1, r1
 80042d6:	7111      	strb	r1, [r2, #4]
 80042d8:	7891      	ldrb	r1, [r2, #2]
 80042da:	b2c9      	uxtb	r1, r1
 80042dc:	70d1      	strb	r1, [r2, #3]
 80042de:	7851      	ldrb	r1, [r2, #1]
 80042e0:	b2c9      	uxtb	r1, r1
 80042e2:	7091      	strb	r1, [r2, #2]
 80042e4:	7811      	ldrb	r1, [r2, #0]
 80042e6:	b2c9      	uxtb	r1, r1
 80042e8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80042ea:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 80042ec:	7819      	ldrb	r1, [r3, #0]
 80042ee:	3101      	adds	r1, #1
 80042f0:	b249      	sxtb	r1, r1
 80042f2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80042f4:	7819      	ldrb	r1, [r3, #0]
 80042f6:	b249      	sxtb	r1, r1
 80042f8:	2903      	cmp	r1, #3
 80042fa:	dde2      	ble.n	80042c2 <keypad_sm+0xce2>
}
 80042fc:	bd70      	pop	{r4, r5, r6, pc}
 80042fe:	bf00      	nop
 8004300:	50b0f27c 	.word	0x50b0f27c
 8004304:	3fe99a6b 	.word	0x3fe99a6b
 8004308:	41400000 	.word	0x41400000
 800430c:	20000834 	.word	0x20000834
 8004310:	20000838 	.word	0x20000838
 8004314:	20000019 	.word	0x20000019
 8004318:	20000014 	.word	0x20000014
 800431c:	200006d4 	.word	0x200006d4
 8004320:	200003ac 	.word	0x200003ac
 8004324:	200003b0 	.word	0x200003b0

08004328 <row_input>:
void row_input(void){
 8004328:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800432a:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 800432c:	4e30      	ldr	r6, [pc, #192]	; (80043f0 <row_input+0xc8>)
void row_input(void){
 800432e:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8004330:	4630      	mov	r0, r6
 8004332:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004336:	e9cd 4400 	strd	r4, r4, [sp]
 800433a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800433e:	9404      	str	r4, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8004340:	f001 fea4 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 8004344:	4630      	mov	r0, r6
 8004346:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800434a:	f001 fe9f 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 800434e:	4630      	mov	r0, r6
 8004350:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8004354:	4d27      	ldr	r5, [pc, #156]	; (80043f4 <row_input+0xcc>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8004356:	f001 fe99 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 800435a:	4630      	mov	r0, r6
 800435c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004360:	f001 fe94 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 8004364:	4630      	mov	r0, r6
 8004366:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800436a:	f001 fe8f 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 800436e:	4628      	mov	r0, r5
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	f001 fe8b 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 8004376:	4628      	mov	r0, r5
 8004378:	2180      	movs	r1, #128	; 0x80
 800437a:	f001 fe87 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 800437e:	4628      	mov	r0, r5
 8004380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004384:	f001 fe82 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 8004388:	4628      	mov	r0, r5
 800438a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800438e:	f001 fe7d 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8004392:	4622      	mov	r2, r4
 8004394:	4628      	mov	r0, r5
 8004396:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800439a:	f001 ff0f 	bl	80061bc <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 800439e:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80043a2:	2301      	movs	r3, #1
 80043a4:	e9cd 2300 	strd	r2, r3, [sp]
 80043a8:	2200      	movs	r2, #0
 80043aa:	2300      	movs	r3, #0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 80043ac:	4669      	mov	r1, sp
 80043ae:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 80043b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 80043b4:	f001 fd80 	bl	8005eb8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 80043b8:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 80043bc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80043c0:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043c4:	2301      	movs	r3, #1
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80043c6:	4669      	mov	r1, sp
 80043c8:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043ca:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80043cc:	f001 fd74 	bl	8005eb8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 80043d0:	4622      	mov	r2, r4
 80043d2:	4628      	mov	r0, r5
 80043d4:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80043d8:	f001 fef0 	bl	80061bc <HAL_GPIO_WritePin>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80043dc:	4622      	mov	r2, r4
 80043de:	4621      	mov	r1, r4
 80043e0:	2028      	movs	r0, #40	; 0x28
 80043e2:	f001 fab7 	bl	8005954 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043e6:	2028      	movs	r0, #40	; 0x28
 80043e8:	f001 faf2 	bl	80059d0 <HAL_NVIC_EnableIRQ>
}
 80043ec:	b006      	add	sp, #24
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	40020400 	.word	0x40020400
 80043f4:	40020800 	.word	0x40020800

080043f8 <column_input>:
void column_input(void){
 80043f8:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043fa:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80043fc:	4d2d      	ldr	r5, [pc, #180]	; (80044b4 <column_input+0xbc>)
void column_input(void){
 80043fe:	b086      	sub	sp, #24
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8004400:	2028      	movs	r0, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004402:	e9cd 4400 	strd	r4, r4, [sp]
 8004406:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800440a:	9404      	str	r4, [sp, #16]
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800440c:	f001 faee 	bl	80059ec <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8004410:	4628      	mov	r0, r5
 8004412:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004416:	f001 fe39 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 800441a:	4628      	mov	r0, r5
 800441c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004420:	f001 fe34 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8004424:	4628      	mov	r0, r5
 8004426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 800442a:	4e23      	ldr	r6, [pc, #140]	; (80044b8 <column_input+0xc0>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 800442c:	f001 fe2e 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 8004430:	4628      	mov	r0, r5
 8004432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004436:	f001 fe29 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 800443a:	4628      	mov	r0, r5
 800443c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004440:	f001 fe24 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8004444:	4630      	mov	r0, r6
 8004446:	2140      	movs	r1, #64	; 0x40
 8004448:	f001 fe20 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 800444c:	4630      	mov	r0, r6
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	f001 fe1c 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 8004454:	4630      	mov	r0, r6
 8004456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800445a:	f001 fe17 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 800445e:	4630      	mov	r0, r6
 8004460:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004464:	f001 fe12 	bl	800608c <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 8004468:	4622      	mov	r2, r4
 800446a:	4628      	mov	r0, r5
 800446c:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8004470:	f001 fea4 	bl	80061bc <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8004474:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 8004478:	2301      	movs	r3, #1
 800447a:	e9cd 2300 	strd	r2, r3, [sp]
 800447e:	2200      	movs	r2, #0
 8004480:	2300      	movs	r3, #0
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8004482:	4628      	mov	r0, r5
 8004484:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8004486:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 800448a:	f001 fd15 	bl	8005eb8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800448e:	2001      	movs	r0, #1
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8004490:	2300      	movs	r3, #0
 8004492:	f44f 7270 	mov.w	r2, #960	; 0x3c0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8004496:	4669      	mov	r1, sp
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004498:	9002      	str	r0, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800449a:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 800449c:	e9cd 2300 	strd	r2, r3, [sp]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 80044a0:	f001 fd0a 	bl	8005eb8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 80044a4:	4622      	mov	r2, r4
 80044a6:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 80044aa:	4630      	mov	r0, r6
 80044ac:	f001 fe86 	bl	80061bc <HAL_GPIO_WritePin>
}
 80044b0:	b006      	add	sp, #24
 80044b2:	bd70      	pop	{r4, r5, r6, pc}
 80044b4:	40020400 	.word	0x40020400
 80044b8:	40020800 	.word	0x40020800

080044bc <HAL_GPIO_EXTI_Callback>:
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 80044bc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80044c0:	b510      	push	{r4, lr}
 80044c2:	4604      	mov	r4, r0
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 80044c4:	d010      	beq.n	80044e8 <HAL_GPIO_EXTI_Callback+0x2c>
 80044c6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80044ca:	d00d      	beq.n	80044e8 <HAL_GPIO_EXTI_Callback+0x2c>
 80044cc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80044d0:	d00a      	beq.n	80044e8 <HAL_GPIO_EXTI_Callback+0x2c>
 80044d2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80044d6:	d007      	beq.n	80044e8 <HAL_GPIO_EXTI_Callback+0x2c>
 80044d8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80044dc:	d004      	beq.n	80044e8 <HAL_GPIO_EXTI_Callback+0x2c>
	else if (GPIO_Pin == Rot_CLK_Pin) {
 80044de:	2801      	cmp	r0, #1
 80044e0:	d01b      	beq.n	800451a <HAL_GPIO_EXTI_Callback+0x5e>
	else if (GPIO_Pin == Rot_SW_Pin) {
 80044e2:	2804      	cmp	r0, #4
 80044e4:	d02f      	beq.n	8004546 <HAL_GPIO_EXTI_Callback+0x8a>
}
 80044e6:	bd10      	pop	{r4, pc}
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, GPIO_Pin) == 0){
 80044e8:	4621      	mov	r1, r4
 80044ea:	481c      	ldr	r0, [pc, #112]	; (800455c <HAL_GPIO_EXTI_Callback+0xa0>)
 80044ec:	f001 fe60 	bl	80061b0 <HAL_GPIO_ReadPin>
 80044f0:	4603      	mov	r3, r0
 80044f2:	b130      	cbz	r0, 8004502 <HAL_GPIO_EXTI_Callback+0x46>
			if(kpedge != 1){
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <HAL_GPIO_EXTI_Callback+0xa4>)
 80044f6:	781a      	ldrb	r2, [r3, #0]
 80044f8:	2a01      	cmp	r2, #1
 80044fa:	d0f4      	beq.n	80044e6 <HAL_GPIO_EXTI_Callback+0x2a>
				kpedge = 1;
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]
}
 8004500:	bd10      	pop	{r4, pc}
			if(kpedge != 0){
 8004502:	4a17      	ldr	r2, [pc, #92]	; (8004560 <HAL_GPIO_EXTI_Callback+0xa4>)
 8004504:	7811      	ldrb	r1, [r2, #0]
 8004506:	2900      	cmp	r1, #0
 8004508:	d0ed      	beq.n	80044e6 <HAL_GPIO_EXTI_Callback+0x2a>
				rowpin = GPIO_Pin;
 800450a:	4916      	ldr	r1, [pc, #88]	; (8004564 <HAL_GPIO_EXTI_Callback+0xa8>)
				kpedge = 0;
 800450c:	7013      	strb	r3, [r2, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 800450e:	4816      	ldr	r0, [pc, #88]	; (8004568 <HAL_GPIO_EXTI_Callback+0xac>)
				rowpin = GPIO_Pin;
 8004510:	600c      	str	r4, [r1, #0]
}
 8004512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				HAL_TIM_Base_Start_IT(&htim2);
 8004516:	f003 bc15 	b.w	8007d44 <HAL_TIM_Base_Start_IT>
		if (Rot_State == NOTURN) {
 800451a:	4c14      	ldr	r4, [pc, #80]	; (800456c <HAL_GPIO_EXTI_Callback+0xb0>)
 800451c:	7823      	ldrb	r3, [r4, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e1      	bne.n	80044e6 <HAL_GPIO_EXTI_Callback+0x2a>
			HAL_NVIC_DisableIRQ(Rot_CLK_EXTI_IRQn);
 8004522:	2006      	movs	r0, #6
 8004524:	f001 fa62 	bl	80059ec <HAL_NVIC_DisableIRQ>
			Rot_State = (HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 8004528:	2102      	movs	r1, #2
 800452a:	480c      	ldr	r0, [pc, #48]	; (800455c <HAL_GPIO_EXTI_Callback+0xa0>)
 800452c:	f001 fe40 	bl	80061b0 <HAL_GPIO_ReadPin>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf14      	ite	ne
 8004536:	2301      	movne	r3, #1
 8004538:	2302      	moveq	r3, #2
 800453a:	7023      	strb	r3, [r4, #0]
			HAL_TIM_Base_Start_IT(&htim9);
 800453c:	480c      	ldr	r0, [pc, #48]	; (8004570 <HAL_GPIO_EXTI_Callback+0xb4>)
}
 800453e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_TIM_Base_Start_IT(&htim9);
 8004542:	f003 bbff 	b.w	8007d44 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 8004546:	2120      	movs	r1, #32
 8004548:	480a      	ldr	r0, [pc, #40]	; (8004574 <HAL_GPIO_EXTI_Callback+0xb8>)
 800454a:	f001 fe3b 	bl	80061c4 <HAL_GPIO_TogglePin>
}
 800454e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 8004552:	2110      	movs	r1, #16
 8004554:	4807      	ldr	r0, [pc, #28]	; (8004574 <HAL_GPIO_EXTI_Callback+0xb8>)
 8004556:	f001 be35 	b.w	80061c4 <HAL_GPIO_TogglePin>
 800455a:	bf00      	nop
 800455c:	40020400 	.word	0x40020400
 8004560:	2000001a 	.word	0x2000001a
 8004564:	2000001c 	.word	0x2000001c
 8004568:	200005d0 	.word	0x200005d0
 800456c:	2000038d 	.word	0x2000038d
 8004570:	20000650 	.word	0x20000650
 8004574:	40020800 	.word	0x40020800

08004578 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim2){
 8004578:	4b7a      	ldr	r3, [pc, #488]	; (8004764 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
{
 800457a:	b570      	push	{r4, r5, r6, lr}
	if(htim == &htim2){
 800457c:	4298      	cmp	r0, r3
 800457e:	d03f      	beq.n	8004600 <HAL_TIM_PeriodElapsedCallback+0x88>
	else if(htim == &htim3){
 8004580:	4b79      	ldr	r3, [pc, #484]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8004582:	4604      	mov	r4, r0
 8004584:	4298      	cmp	r0, r3
 8004586:	d051      	beq.n	800462c <HAL_TIM_PeriodElapsedCallback+0xb4>
	else if(htim == &htim9) {
 8004588:	4b78      	ldr	r3, [pc, #480]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800458a:	4298      	cmp	r0, r3
 800458c:	d057      	beq.n	800463e <HAL_TIM_PeriodElapsedCallback+0xc6>
	else if(htim == &htim10) {
 800458e:	4b78      	ldr	r3, [pc, #480]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004590:	4298      	cmp	r0, r3
 8004592:	d003      	beq.n	800459c <HAL_TIM_PeriodElapsedCallback+0x24>
	else if(htim == &htim11){
 8004594:	4b77      	ldr	r3, [pc, #476]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004596:	4298      	cmp	r0, r3
 8004598:	d011      	beq.n	80045be <HAL_TIM_PeriodElapsedCallback+0x46>
}
 800459a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_TIM_Base_Stop_IT(&htim10);
 800459c:	f003 fbfe 	bl	8007d9c <HAL_TIM_Base_Stop_IT>
		if (HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin) == Rot_SW_State) {
 80045a0:	2104      	movs	r1, #4
 80045a2:	4875      	ldr	r0, [pc, #468]	; (8004778 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80045a4:	f001 fe04 	bl	80061b0 <HAL_GPIO_ReadPin>
 80045a8:	4b74      	ldr	r3, [pc, #464]	; (800477c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	4298      	cmp	r0, r3
 80045ae:	d17e      	bne.n	80046ae <HAL_TIM_PeriodElapsedCallback+0x136>
			switch (Rot_SW_State) {
 80045b0:	2800      	cmp	r0, #0
 80045b2:	d070      	beq.n	8004696 <HAL_TIM_PeriodElapsedCallback+0x11e>
}
 80045b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_NVIC_EnableIRQ(Rot_SW_EXTI_IRQn);
 80045b8:	2008      	movs	r0, #8
 80045ba:	f001 ba09 	b.w	80059d0 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim11);
 80045be:	f003 fbed 	bl	8007d9c <HAL_TIM_Base_Stop_IT>
		if(chstat_main == 0){
 80045c2:	4b6f      	ldr	r3, [pc, #444]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	2a00      	cmp	r2, #0
 80045c8:	d048      	beq.n	800465c <HAL_TIM_PeriodElapsedCallback+0xe4>
		else if(chstat_main == 1){
 80045ca:	7819      	ldrb	r1, [r3, #0]
 80045cc:	2901      	cmp	r1, #1
 80045ce:	b24a      	sxtb	r2, r1
 80045d0:	f000 809c 	beq.w	800470c <HAL_TIM_PeriodElapsedCallback+0x194>
		else if(chstat_main == 2){
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	f000 80a1 	beq.w	800471e <HAL_TIM_PeriodElapsedCallback+0x1a6>
		if(chstat_aux_rx == 0){
 80045dc:	4b69      	ldr	r3, [pc, #420]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80045de:	7819      	ldrb	r1, [r3, #0]
 80045e0:	b24a      	sxtb	r2, r1
 80045e2:	2900      	cmp	r1, #0
 80045e4:	d06c      	beq.n	80046c0 <HAL_TIM_PeriodElapsedCallback+0x148>
		else if(chstat_aux_rx == 1){
 80045e6:	7819      	ldrb	r1, [r3, #0]
 80045e8:	2901      	cmp	r1, #1
 80045ea:	b24a      	sxtb	r2, r1
 80045ec:	d068      	beq.n	80046c0 <HAL_TIM_PeriodElapsedCallback+0x148>
		else if(chstat_aux_rx == 2){
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	f000 80a6 	beq.w	8004742 <HAL_TIM_PeriodElapsedCallback+0x1ca>
}
 80045f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(&htim11);
 80045fa:	485e      	ldr	r0, [pc, #376]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80045fc:	f003 bba2 	b.w	8007d44 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim2);
 8004600:	f003 fbcc 	bl	8007d9c <HAL_TIM_Base_Stop_IT>
		for(int i = 0; i < 4; i++){
 8004604:	2400      	movs	r4, #0
		column_input();
 8004606:	f7ff fef7 	bl	80043f8 <column_input>
		for(int i = 0; i < 4; i++){
 800460a:	4e5f      	ldr	r6, [pc, #380]	; (8004788 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800460c:	4d5f      	ldr	r5, [pc, #380]	; (800478c <HAL_TIM_PeriodElapsedCallback+0x214>)
			if(HAL_GPIO_ReadPin(col_ports[i], col_pins[i]) == 0){
 800460e:	f835 1b02 	ldrh.w	r1, [r5], #2
 8004612:	f856 0b04 	ldr.w	r0, [r6], #4
 8004616:	f001 fdcb 	bl	80061b0 <HAL_GPIO_ReadPin>
 800461a:	2800      	cmp	r0, #0
 800461c:	d055      	beq.n	80046ca <HAL_TIM_PeriodElapsedCallback+0x152>
		for(int i = 0; i < 4; i++){
 800461e:	3401      	adds	r4, #1
 8004620:	2c04      	cmp	r4, #4
 8004622:	d1f4      	bne.n	800460e <HAL_TIM_PeriodElapsedCallback+0x96>
}
 8004624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		row_input();
 8004628:	f7ff be7e 	b.w	8004328 <row_input>
		HAL_TIM_Base_Stop_IT(&htim3);
 800462c:	f003 fbb6 	bl	8007d9c <HAL_TIM_Base_Stop_IT>
		lcd_psu_update();
 8004630:	f7fe fb20 	bl	8002c74 <lcd_psu_update>
		HAL_TIM_Base_Start_IT(&htim3);
 8004634:	4620      	mov	r0, r4
}
 8004636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(&htim3);
 800463a:	f003 bb83 	b.w	8007d44 <HAL_TIM_Base_Start_IT>
		if (Rot_State != NOTURN) {
 800463e:	4c54      	ldr	r4, [pc, #336]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0x218>)
		HAL_TIM_Base_Stop_IT(&htim9);
 8004640:	f003 fbac 	bl	8007d9c <HAL_TIM_Base_Stop_IT>
		if (Rot_State != NOTURN) {
 8004644:	7823      	ldrb	r3, [r4, #0]
 8004646:	b11b      	cbz	r3, 8004650 <HAL_TIM_PeriodElapsedCallback+0xd8>
			switch (Rot_State) {
 8004648:	2b01      	cmp	r3, #1
 800464a:	d01f      	beq.n	800468c <HAL_TIM_PeriodElapsedCallback+0x114>
 800464c:	2b02      	cmp	r3, #2
 800464e:	d018      	beq.n	8004682 <HAL_TIM_PeriodElapsedCallback+0x10a>
		HAL_NVIC_EnableIRQ(Rot_CLK_EXTI_IRQn);
 8004650:	2006      	movs	r0, #6
 8004652:	f001 f9bd 	bl	80059d0 <HAL_NVIC_EnableIRQ>
		Rot_State = NOTURN;
 8004656:	2300      	movs	r3, #0
 8004658:	7023      	strb	r3, [r4, #0]
}
 800465a:	bd70      	pop	{r4, r5, r6, pc}
			if(!timercounter){
 800465c:	4c4d      	ldr	r4, [pc, #308]	; (8004794 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800465e:	7823      	ldrb	r3, [r4, #0]
 8004660:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004664:	2b00      	cmp	r3, #0
 8004666:	d055      	beq.n	8004714 <HAL_TIM_PeriodElapsedCallback+0x19c>
			timercounter++;
 8004668:	7823      	ldrb	r3, [r4, #0]
			blink = 1;
 800466a:	2201      	movs	r2, #1
			timercounter++;
 800466c:	3301      	adds	r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	7023      	strb	r3, [r4, #0]
			if(timercounter >= 7){
 8004672:	7823      	ldrb	r3, [r4, #0]
 8004674:	2b06      	cmp	r3, #6
				timercounter = 0;
 8004676:	bf84      	itt	hi
 8004678:	2300      	movhi	r3, #0
 800467a:	7023      	strbhi	r3, [r4, #0]
			blink = 1;
 800467c:	4b46      	ldr	r3, [pc, #280]	; (8004798 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	e7ac      	b.n	80045dc <HAL_TIM_PeriodElapsedCallback+0x64>
				HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 8004682:	2110      	movs	r1, #16
 8004684:	4845      	ldr	r0, [pc, #276]	; (800479c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8004686:	f001 fd9d 	bl	80061c4 <HAL_GPIO_TogglePin>
				break;
 800468a:	e7e1      	b.n	8004650 <HAL_TIM_PeriodElapsedCallback+0xd8>
				HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 800468c:	2120      	movs	r1, #32
 800468e:	4843      	ldr	r0, [pc, #268]	; (800479c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8004690:	f001 fd98 	bl	80061c4 <HAL_GPIO_TogglePin>
				break;
 8004694:	e7dc      	b.n	8004650 <HAL_TIM_PeriodElapsedCallback+0xd8>
				HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 8004696:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800469a:	2120      	movs	r1, #32
 800469c:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 80046a0:	f001 fd90 	bl	80061c4 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 80046a4:	2110      	movs	r1, #16
 80046a6:	483d      	ldr	r0, [pc, #244]	; (800479c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80046a8:	f001 fd8c 	bl	80061c4 <HAL_GPIO_TogglePin>
				break;
 80046ac:	e782      	b.n	80045b4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 80046ae:	2120      	movs	r1, #32
 80046b0:	483a      	ldr	r0, [pc, #232]	; (800479c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80046b2:	f001 fd87 	bl	80061c4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 80046b6:	2110      	movs	r1, #16
 80046b8:	4838      	ldr	r0, [pc, #224]	; (800479c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80046ba:	f001 fd83 	bl	80061c4 <HAL_GPIO_TogglePin>
}
 80046be:	e779      	b.n	80045b4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			HAL_GPIO_WritePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_SET);
 80046c0:	2110      	movs	r1, #16
 80046c2:	4836      	ldr	r0, [pc, #216]	; (800479c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80046c4:	f001 fd7a 	bl	80061bc <HAL_GPIO_WritePin>
 80046c8:	e795      	b.n	80045f6 <HAL_TIM_PeriodElapsedCallback+0x7e>
					if(rowpin == row_pins[j]){
 80046ca:	4d35      	ldr	r5, [pc, #212]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d2:	d011      	beq.n	80046f8 <HAL_TIM_PeriodElapsedCallback+0x180>
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046da:	d03c      	beq.n	8004756 <HAL_TIM_PeriodElapsedCallback+0x1de>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e2:	d03c      	beq.n	800475e <HAL_TIM_PeriodElapsedCallback+0x1e6>
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ea:	d036      	beq.n	800475a <HAL_TIM_PeriodElapsedCallback+0x1e2>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
				for(int j = 0; j < 5; j++){
 80046f2:	bf08      	it	eq
 80046f4:	2004      	moveq	r0, #4
					if(rowpin == row_pins[j]){
 80046f6:	d195      	bne.n	8004624 <HAL_TIM_PeriodElapsedCallback+0xac>
						keypad_sm(keypad_labels[j][i]);
 80046f8:	4b2a      	ldr	r3, [pc, #168]	; (80047a4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80046fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80046fe:	5d00      	ldrb	r0, [r0, r4]
 8004700:	f7fe ff6e 	bl	80035e0 <keypad_sm>
						rowpin = -1;
 8004704:	f04f 33ff 	mov.w	r3, #4294967295
 8004708:	602b      	str	r3, [r5, #0]
						break;
 800470a:	e78b      	b.n	8004624 <HAL_TIM_PeriodElapsedCallback+0xac>
			if(!timercounter){
 800470c:	4c21      	ldr	r4, [pc, #132]	; (8004794 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800470e:	7823      	ldrb	r3, [r4, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1a9      	bne.n	8004668 <HAL_TIM_PeriodElapsedCallback+0xf0>
				HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_SET);
 8004714:	2120      	movs	r1, #32
 8004716:	4821      	ldr	r0, [pc, #132]	; (800479c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8004718:	f001 fd50 	bl	80061bc <HAL_GPIO_WritePin>
 800471c:	e7a4      	b.n	8004668 <HAL_TIM_PeriodElapsedCallback+0xf0>
			if(!timercounter){
 800471e:	4c1d      	ldr	r4, [pc, #116]	; (8004794 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004720:	7823      	ldrb	r3, [r4, #0]
 8004722:	b19b      	cbz	r3, 800474c <HAL_TIM_PeriodElapsedCallback+0x1d4>
			if(blink){
 8004724:	4a1c      	ldr	r2, [pc, #112]	; (8004798 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8004726:	7813      	ldrb	r3, [r2, #0]
 8004728:	b11b      	cbz	r3, 8004732 <HAL_TIM_PeriodElapsedCallback+0x1ba>
				timercounter++;
 800472a:	7823      	ldrb	r3, [r4, #0]
 800472c:	3301      	adds	r3, #1
 800472e:	b2db      	uxtb	r3, r3
 8004730:	7023      	strb	r3, [r4, #0]
			if(timercounter >= 7){
 8004732:	7823      	ldrb	r3, [r4, #0]
 8004734:	2b06      	cmp	r3, #6
 8004736:	f67f af51 	bls.w	80045dc <HAL_TIM_PeriodElapsedCallback+0x64>
				timercounter = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	7023      	strb	r3, [r4, #0]
				blink = 0;
 800473e:	7013      	strb	r3, [r2, #0]
 8004740:	e74c      	b.n	80045dc <HAL_TIM_PeriodElapsedCallback+0x64>
			HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 8004742:	2110      	movs	r1, #16
 8004744:	4815      	ldr	r0, [pc, #84]	; (800479c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8004746:	f001 fd3d 	bl	80061c4 <HAL_GPIO_TogglePin>
 800474a:	e754      	b.n	80045f6 <HAL_TIM_PeriodElapsedCallback+0x7e>
				HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 800474c:	2120      	movs	r1, #32
 800474e:	4813      	ldr	r0, [pc, #76]	; (800479c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8004750:	f001 fd38 	bl	80061c4 <HAL_GPIO_TogglePin>
 8004754:	e7e6      	b.n	8004724 <HAL_TIM_PeriodElapsedCallback+0x1ac>
				for(int j = 0; j < 5; j++){
 8004756:	2001      	movs	r0, #1
 8004758:	e7ce      	b.n	80046f8 <HAL_TIM_PeriodElapsedCallback+0x180>
 800475a:	2003      	movs	r0, #3
 800475c:	e7cc      	b.n	80046f8 <HAL_TIM_PeriodElapsedCallback+0x180>
 800475e:	2002      	movs	r0, #2
 8004760:	e7ca      	b.n	80046f8 <HAL_TIM_PeriodElapsedCallback+0x180>
 8004762:	bf00      	nop
 8004764:	200005d0 	.word	0x200005d0
 8004768:	20000610 	.word	0x20000610
 800476c:	20000650 	.word	0x20000650
 8004770:	20000550 	.word	0x20000550
 8004774:	20000590 	.word	0x20000590
 8004778:	40020400 	.word	0x40020400
 800477c:	2000038c 	.word	0x2000038c
 8004780:	200003b6 	.word	0x200003b6
 8004784:	200003b4 	.word	0x200003b4
 8004788:	20000004 	.word	0x20000004
 800478c:	0800d2f4 	.word	0x0800d2f4
 8004790:	2000038d 	.word	0x2000038d
 8004794:	20000728 	.word	0x20000728
 8004798:	20000000 	.word	0x20000000
 800479c:	40020800 	.word	0x40020800
 80047a0:	2000001c 	.word	0x2000001c
 80047a4:	0800d33c 	.word	0x0800d33c

080047a8 <HAL_ADC_ConvHalfCpltCallback>:
	adc_values_cpy[0] = adc_values[0];
 80047a8:	4a05      	ldr	r2, [pc, #20]	; (80047c0 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80047ac:	8811      	ldrh	r1, [r2, #0]
 80047ae:	b289      	uxth	r1, r1
 80047b0:	8019      	strh	r1, [r3, #0]
	adc_values_cpy[1] = adc_values[1];
 80047b2:	8851      	ldrh	r1, [r2, #2]
 80047b4:	b289      	uxth	r1, r1
 80047b6:	8059      	strh	r1, [r3, #2]
	adc_values_cpy[2] = adc_values[2];
 80047b8:	8892      	ldrh	r2, [r2, #4]
 80047ba:	b292      	uxth	r2, r2
 80047bc:	809a      	strh	r2, [r3, #4]
}
 80047be:	4770      	bx	lr
 80047c0:	20000390 	.word	0x20000390
 80047c4:	2000039c 	.word	0x2000039c

080047c8 <HAL_ADC_ConvCpltCallback>:
	adc_values_cpy[3] = adc_values[3];
 80047c8:	4a05      	ldr	r2, [pc, #20]	; (80047e0 <HAL_ADC_ConvCpltCallback+0x18>)
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80047cc:	88d1      	ldrh	r1, [r2, #6]
 80047ce:	b289      	uxth	r1, r1
 80047d0:	80d9      	strh	r1, [r3, #6]
	adc_values_cpy[4] = adc_values[4];
 80047d2:	8911      	ldrh	r1, [r2, #8]
 80047d4:	b289      	uxth	r1, r1
 80047d6:	8119      	strh	r1, [r3, #8]
	adc_values_cpy[5] = adc_values[5];
 80047d8:	8952      	ldrh	r2, [r2, #10]
 80047da:	b292      	uxth	r2, r2
 80047dc:	815a      	strh	r2, [r3, #10]
}
 80047de:	4770      	bx	lr
 80047e0:	20000390 	.word	0x20000390
 80047e4:	2000039c 	.word	0x2000039c

080047e8 <HAL_ADC_LevelOutOfWindowCallback>:
{
 80047e8:	b410      	push	{r4}
	if(chstat_main == 1){
 80047ea:	4c07      	ldr	r4, [pc, #28]	; (8004808 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 80047ec:	7823      	ldrb	r3, [r4, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d001      	beq.n	80047f6 <HAL_ADC_LevelOutOfWindowCallback+0xe>
}
 80047f2:	bc10      	pop	{r4}
 80047f4:	4770      	bx	lr
 80047f6:	b25a      	sxtb	r2, r3
		chstat_main = 2;
 80047f8:	2302      	movs	r3, #2
		HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80047fa:	2140      	movs	r1, #64	; 0x40
		chstat_main = 2;
 80047fc:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80047fe:	4803      	ldr	r0, [pc, #12]	; (800480c <HAL_ADC_LevelOutOfWindowCallback+0x24>)
}
 8004800:	bc10      	pop	{r4}
		HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8004802:	f001 bcdb 	b.w	80061bc <HAL_GPIO_WritePin>
 8004806:	bf00      	nop
 8004808:	200003b6 	.word	0x200003b6
 800480c:	40020000 	.word	0x40020000

08004810 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004814:	4e84      	ldr	r6, [pc, #528]	; (8004a28 <HAL_UART_RxCpltCallback+0x218>)
	for(int i = 0; i < 64; i++){
 8004816:	2400      	movs	r4, #0
 8004818:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800481a:	b089      	sub	sp, #36	; 0x24
 800481c:	e003      	b.n	8004826 <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 800481e:	3401      	adds	r4, #1
 8004820:	2c40      	cmp	r4, #64	; 0x40
 8004822:	f000 80fd 	beq.w	8004a20 <HAL_UART_RxCpltCallback+0x210>
		if(rxbuffer[i] == '*'){
 8004826:	f813 5b01 	ldrb.w	r5, [r3], #1
 800482a:	2d2a      	cmp	r5, #42	; 0x2a
 800482c:	d1f7      	bne.n	800481e <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 800482e:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 8004830:	2220      	movs	r2, #32
 8004832:	2100      	movs	r1, #0
 8004834:	4668      	mov	r0, sp
 8004836:	f005 fe25 	bl	800a484 <memset>
	for(int i = 0; i < 25; i++){
 800483a:	f10d 33ff 	add.w	r3, sp, #4294967295
 800483e:	aa06      	add	r2, sp, #24
 8004840:	e000      	b.n	8004844 <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 8004842:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 8004844:	3401      	adds	r4, #1
 8004846:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 8004848:	2c40      	cmp	r4, #64	; 0x40
		rxbuffercpy[i] = rxbuffer[rxiter];
 800484a:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 800484e:	bf28      	it	cs
 8004850:	2400      	movcs	r4, #0
	for(int i = 0; i < 25; i++){
 8004852:	429a      	cmp	r2, r3
 8004854:	d1f5      	bne.n	8004842 <HAL_UART_RxCpltCallback+0x32>
	if( //Check start condition
 8004856:	f89d 3000 	ldrb.w	r3, [sp]
 800485a:	2b2a      	cmp	r3, #42	; 0x2a
 800485c:	d00c      	beq.n	8004878 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 800485e:	2240      	movs	r2, #64	; 0x40
 8004860:	2100      	movs	r1, #0
 8004862:	4871      	ldr	r0, [pc, #452]	; (8004a28 <HAL_UART_RxCpltCallback+0x218>)
 8004864:	f005 fe0e 	bl	800a484 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8004868:	2240      	movs	r2, #64	; 0x40
 800486a:	496f      	ldr	r1, [pc, #444]	; (8004a28 <HAL_UART_RxCpltCallback+0x218>)
 800486c:	486f      	ldr	r0, [pc, #444]	; (8004a2c <HAL_UART_RxCpltCallback+0x21c>)
}
 800486e:	b009      	add	sp, #36	; 0x24
 8004870:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8004874:	f003 bcda 	b.w	800822c <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 8004878:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800487c:	2b53      	cmp	r3, #83	; 0x53
 800487e:	d1ee      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
 8004880:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004884:	2b54      	cmp	r3, #84	; 0x54
 8004886:	d1ea      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
 8004888:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800488c:	2b52      	cmp	r3, #82	; 0x52
 800488e:	d1e6      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
 8004890:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004894:	2b54      	cmp	r3, #84	; 0x54
 8004896:	d1e2      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
 8004898:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800489c:	2b46      	cmp	r3, #70	; 0x46
 800489e:	d1de      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 80048a0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80048a4:	2b4e      	cmp	r3, #78	; 0x4e
 80048a6:	d1da      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
 80048a8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80048ac:	2b53      	cmp	r3, #83	; 0x53
 80048ae:	d1d6      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
 80048b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80048b4:	2b48      	cmp	r3, #72	; 0x48
 80048b6:	d1d2      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
 80048b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80048bc:	2b21      	cmp	r3, #33	; 0x21
 80048be:	d1ce      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
 80048c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80048c4:	2b2c      	cmp	r3, #44	; 0x2c
 80048c6:	d1ca      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 80048c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80048cc:	2b2c      	cmp	r3, #44	; 0x2c
 80048ce:	d1c6      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
 80048d0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80048d4:	2b2c      	cmp	r3, #44	; 0x2c
 80048d6:	d1c2      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
 80048d8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80048dc:	2b2c      	cmp	r3, #44	; 0x2c
 80048de:	d1be      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 80048e0:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80048e4:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 80048e6:	b2c3      	uxtb	r3, r0
 80048e8:	2b09      	cmp	r3, #9
 80048ea:	d8b8      	bhi.n	800485e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 80048ec:	f89d b007 	ldrb.w	fp, [sp, #7]
 80048f0:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 80048f4:	fa5f f38b 	uxtb.w	r3, fp
 80048f8:	2b09      	cmp	r3, #9
 80048fa:	d8b0      	bhi.n	800485e <HAL_UART_RxCpltCallback+0x4e>
 80048fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004900:	2b2e      	cmp	r3, #46	; 0x2e
 8004902:	d1ac      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8004904:	f89d a009 	ldrb.w	sl, [sp, #9]
 8004908:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 800490c:	fa5f f38a 	uxtb.w	r3, sl
 8004910:	2b09      	cmp	r3, #9
 8004912:	d8a4      	bhi.n	800485e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8004914:	f89d 900a 	ldrb.w	r9, [sp, #10]
 8004918:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 800491c:	fa5f f389 	uxtb.w	r3, r9
 8004920:	2b09      	cmp	r3, #9
 8004922:	d89c      	bhi.n	800485e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8004924:	f89d 800c 	ldrb.w	r8, [sp, #12]
 8004928:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 800492c:	fa5f f388 	uxtb.w	r3, r8
 8004930:	2b09      	cmp	r3, #9
 8004932:	d894      	bhi.n	800485e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8004934:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004938:	2b2e      	cmp	r3, #46	; 0x2e
 800493a:	d190      	bne.n	800485e <HAL_UART_RxCpltCallback+0x4e>
 800493c:	f89d 700e 	ldrb.w	r7, [sp, #14]
 8004940:	3f30      	subs	r7, #48	; 0x30
 8004942:	b2fb      	uxtb	r3, r7
 8004944:	2b09      	cmp	r3, #9
 8004946:	d88a      	bhi.n	800485e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8004948:	f89d 600f 	ldrb.w	r6, [sp, #15]
 800494c:	3e30      	subs	r6, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 800494e:	b2f3      	uxtb	r3, r6
 8004950:	2b09      	cmp	r3, #9
 8004952:	d884      	bhi.n	800485e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8004954:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8004958:	3d30      	subs	r5, #48	; 0x30
 800495a:	b2eb      	uxtb	r3, r5
 800495c:	2b09      	cmp	r3, #9
 800495e:	f63f af7e 	bhi.w	800485e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 8004962:	f89d 4012 	ldrb.w	r4, [sp, #18]
 8004966:	3c30      	subs	r4, #48	; 0x30
 8004968:	b2e4      	uxtb	r4, r4
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 800496a:	2c02      	cmp	r4, #2
 800496c:	f63f af77 	bhi.w	800485e <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8004970:	f7fc f95c 	bl	8000c2c <__aeabi_i2f>
 8004974:	492e      	ldr	r1, [pc, #184]	; (8004a30 <HAL_UART_RxCpltCallback+0x220>)
 8004976:	f7fc f9ad 	bl	8000cd4 <__aeabi_fmul>
 800497a:	2100      	movs	r1, #0
 800497c:	f7fc f8a2 	bl	8000ac4 <__addsf3>
 8004980:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8004982:	4658      	mov	r0, fp
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8004984:	469b      	mov	fp, r3
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8004986:	f7fc f951 	bl	8000c2c <__aeabi_i2f>
 800498a:	4659      	mov	r1, fp
 800498c:	f7fc f89a 	bl	8000ac4 <__addsf3>
 8004990:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8004992:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8004994:	469a      	mov	sl, r3
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8004996:	f7fc f949 	bl	8000c2c <__aeabi_i2f>
 800499a:	4925      	ldr	r1, [pc, #148]	; (8004a30 <HAL_UART_RxCpltCallback+0x220>)
 800499c:	f7fc fa4e 	bl	8000e3c <__aeabi_fdiv>
 80049a0:	4651      	mov	r1, sl
 80049a2:	f7fc f88f 	bl	8000ac4 <__addsf3>
 80049a6:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 80049a8:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 80049aa:	4699      	mov	r9, r3
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 80049ac:	f7fc f93e 	bl	8000c2c <__aeabi_i2f>
 80049b0:	4920      	ldr	r1, [pc, #128]	; (8004a34 <HAL_UART_RxCpltCallback+0x224>)
 80049b2:	f7fc fa43 	bl	8000e3c <__aeabi_fdiv>
 80049b6:	4649      	mov	r1, r9
 80049b8:	f7fc f884 	bl	8000ac4 <__addsf3>
 80049bc:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 80049be:	4640      	mov	r0, r8
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 80049c0:	4698      	mov	r8, r3
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 80049c2:	f7fc f933 	bl	8000c2c <__aeabi_i2f>
 80049c6:	2100      	movs	r1, #0
 80049c8:	f7fc f87c 	bl	8000ac4 <__addsf3>
 80049cc:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 80049ce:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 80049d0:	461f      	mov	r7, r3
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 80049d2:	f7fc f92b 	bl	8000c2c <__aeabi_i2f>
 80049d6:	4916      	ldr	r1, [pc, #88]	; (8004a30 <HAL_UART_RxCpltCallback+0x220>)
 80049d8:	f7fc fa30 	bl	8000e3c <__aeabi_fdiv>
 80049dc:	4639      	mov	r1, r7
 80049de:	f7fc f871 	bl	8000ac4 <__addsf3>
 80049e2:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 80049e4:	4630      	mov	r0, r6
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 80049e6:	461e      	mov	r6, r3
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 80049e8:	f7fc f920 	bl	8000c2c <__aeabi_i2f>
 80049ec:	4911      	ldr	r1, [pc, #68]	; (8004a34 <HAL_UART_RxCpltCallback+0x224>)
 80049ee:	f7fc fa25 	bl	8000e3c <__aeabi_fdiv>
 80049f2:	4631      	mov	r1, r6
 80049f4:	f7fc f866 	bl	8000ac4 <__addsf3>
 80049f8:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 80049fa:	4628      	mov	r0, r5
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 80049fc:	461d      	mov	r5, r3
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 80049fe:	f7fc f915 	bl	8000c2c <__aeabi_i2f>
 8004a02:	490d      	ldr	r1, [pc, #52]	; (8004a38 <HAL_UART_RxCpltCallback+0x228>)
 8004a04:	f7fc fa1a 	bl	8000e3c <__aeabi_fdiv>
 8004a08:	4629      	mov	r1, r5
 8004a0a:	f7fc f85b 	bl	8000ac4 <__addsf3>
		lin_num_aux = tempv2;
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <HAL_UART_RxCpltCallback+0x22c>)
		cur_num_aux = tempa2;
 8004a10:	490b      	ldr	r1, [pc, #44]	; (8004a40 <HAL_UART_RxCpltCallback+0x230>)
		chstat_aux_rx = rxbuffercpy[18]-48;
 8004a12:	4a0c      	ldr	r2, [pc, #48]	; (8004a44 <HAL_UART_RxCpltCallback+0x234>)
 8004a14:	b264      	sxtb	r4, r4
		lin_num_aux = tempv2;
 8004a16:	f8c3 8000 	str.w	r8, [r3]
		cur_num_aux = tempa2;
 8004a1a:	6008      	str	r0, [r1, #0]
		chstat_aux_rx = rxbuffercpy[18]-48;
 8004a1c:	7014      	strb	r4, [r2, #0]
 8004a1e:	e71e      	b.n	800485e <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 8004a20:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 8004a22:	7835      	ldrb	r5, [r6, #0]
 8004a24:	e704      	b.n	8004830 <HAL_UART_RxCpltCallback+0x20>
 8004a26:	bf00      	nop
 8004a28:	200006e4 	.word	0x200006e4
 8004a2c:	20000690 	.word	0x20000690
 8004a30:	41200000 	.word	0x41200000
 8004a34:	42c80000 	.word	0x42c80000
 8004a38:	447a0000 	.word	0x447a0000
 8004a3c:	200006dc 	.word	0x200006dc
 8004a40:	200003bc 	.word	0x200003bc
 8004a44:	200003b4 	.word	0x200003b4

08004a48 <HAL_UART_ErrorCallback>:
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64); //Try again!
 8004a48:	2240      	movs	r2, #64	; 0x40
 8004a4a:	4902      	ldr	r1, [pc, #8]	; (8004a54 <HAL_UART_ErrorCallback+0xc>)
 8004a4c:	4802      	ldr	r0, [pc, #8]	; (8004a58 <HAL_UART_ErrorCallback+0x10>)
 8004a4e:	f003 bbed 	b.w	800822c <HAL_UART_Receive_DMA>
 8004a52:	bf00      	nop
 8004a54:	200006e4 	.word	0x200006e4
 8004a58:	20000690 	.word	0x20000690

08004a5c <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8004a5c:	b430      	push	{r4, r5}
	memcpy(txbuffer, txbuffer_cpy, 64);  // copy the data to the buffer
 8004a5e:	4c07      	ldr	r4, [pc, #28]	; (8004a7c <HAL_UART_TxHalfCpltCallback+0x20>)
 8004a60:	4d07      	ldr	r5, [pc, #28]	; (8004a80 <HAL_UART_TxHalfCpltCallback+0x24>)
 8004a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004a76:	bc30      	pop	{r4, r5}
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	2000072c 	.word	0x2000072c
 8004a80:	2000076c 	.word	0x2000076c

08004a84 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004a84:	b5d0      	push	{r4, r6, r7, lr}
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8004a86:	4c11      	ldr	r4, [pc, #68]	; (8004acc <HAL_UART_TxCpltCallback+0x48>)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004a88:	b086      	sub	sp, #24
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8004a8a:	2240      	movs	r2, #64	; 0x40
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f005 fcf8 	bl	800a484 <memset>
	snprintf((char*)txbuffer_cpy, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8004a94:	4a0e      	ldr	r2, [pc, #56]	; (8004ad0 <HAL_UART_TxCpltCallback+0x4c>)
 8004a96:	490f      	ldr	r1, [pc, #60]	; (8004ad4 <HAL_UART_TxCpltCallback+0x50>)
 8004a98:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <HAL_UART_TxCpltCallback+0x54>)
 8004a9a:	680e      	ldr	r6, [r1, #0]
 8004a9c:	6810      	ldr	r0, [r2, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	b25b      	sxtb	r3, r3
 8004aa2:	9304      	str	r3, [sp, #16]
 8004aa4:	f7fb fcd8 	bl	8000458 <__aeabi_f2d>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4630      	mov	r0, r6
 8004aae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ab2:	f7fb fcd1 	bl	8000458 <__aeabi_f2d>
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	460f      	mov	r7, r1
 8004aba:	4620      	mov	r0, r4
 8004abc:	2120      	movs	r1, #32
 8004abe:	e9cd 6700 	strd	r6, r7, [sp]
 8004ac2:	4a06      	ldr	r2, [pc, #24]	; (8004adc <HAL_UART_TxCpltCallback+0x58>)
 8004ac4:	f006 f946 	bl	800ad54 <sniprintf>
}
 8004ac8:	b006      	add	sp, #24
 8004aca:	bdd0      	pop	{r4, r6, r7, pc}
 8004acc:	2000076c 	.word	0x2000076c
 8004ad0:	200003a8 	.word	0x200003a8
 8004ad4:	20000830 	.word	0x20000830
 8004ad8:	200003b5 	.word	0x200003b5
 8004adc:	0800d2c0 	.word	0x0800d2c0

08004ae0 <Error_Handler>:
 8004ae0:	b672      	cpsid	i
  while (1)
 8004ae2:	e7fe      	b.n	8004ae2 <Error_Handler+0x2>

08004ae4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <HAL_MspInit+0x40>)
{
 8004ae6:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8004ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004aee:	625a      	str	r2, [r3, #36]	; 0x24
 8004af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004af2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004af6:	9201      	str	r2, [sp, #4]
 8004af8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	f042 0201 	orr.w	r2, r2, #1
 8004b00:	621a      	str	r2, [r3, #32]
 8004b02:	6a1a      	ldr	r2, [r3, #32]
 8004b04:	f002 0201 	and.w	r2, r2, #1
 8004b08:	9202      	str	r2, [sp, #8]
 8004b0a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b12:	625a      	str	r2, [r3, #36]	; 0x24
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	9303      	str	r3, [sp, #12]
 8004b1c:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b1e:	b004      	add	sp, #16
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40023800 	.word	0x40023800

08004b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b28:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b2a:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8004b2c:	4b25      	ldr	r3, [pc, #148]	; (8004bc4 <HAL_ADC_MspInit+0x9c>)
 8004b2e:	6802      	ldr	r2, [r0, #0]
{
 8004b30:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8004b32:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b34:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004b38:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004b3c:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8004b3e:	d001      	beq.n	8004b44 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004b40:	b008      	add	sp, #32
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b44:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8004b48:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4a:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b50:	621a      	str	r2, [r3, #32]
 8004b52:	6a1a      	ldr	r2, [r3, #32]
 8004b54:	4605      	mov	r5, r0
 8004b56:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004b5a:	9200      	str	r2, [sp, #0]
 8004b5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b5e:	69da      	ldr	r2, [r3, #28]
    hdma_adc.Instance = DMA1_Channel1;
 8004b60:	4e19      	ldr	r6, [pc, #100]	; (8004bc8 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	61da      	str	r2, [r3, #28]
 8004b68:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004b6a:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004b72:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b74:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b76:	4815      	ldr	r0, [pc, #84]	; (8004bcc <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004b78:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7c:	f001 f99c 	bl	8005eb8 <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004b80:	2380      	movs	r3, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8004b82:	4913      	ldr	r1, [pc, #76]	; (8004bd0 <HAL_ADC_MspInit+0xa8>)
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b84:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b88:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004b8c:	60f3      	str	r3, [r6, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004b8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004b92:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004b94:	4630      	mov	r0, r6
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b96:	60b4      	str	r4, [r6, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8004b98:	61f4      	str	r4, [r6, #28]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004b9a:	6171      	str	r1, [r6, #20]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b9c:	6132      	str	r2, [r6, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004b9e:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004ba0:	f000 ffd6 	bl	8005b50 <HAL_DMA_Init>
 8004ba4:	b958      	cbnz	r0, 8004bbe <HAL_ADC_MspInit+0x96>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2012      	movs	r0, #18
 8004baa:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8004bac:	646e      	str	r6, [r5, #68]	; 0x44
 8004bae:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8004bb0:	f000 fed0 	bl	8005954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004bb4:	2012      	movs	r0, #18
 8004bb6:	f000 ff0b 	bl	80059d0 <HAL_NVIC_EnableIRQ>
}
 8004bba:	b008      	add	sp, #32
 8004bbc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004bbe:	f7ff ff8f 	bl	8004ae0 <Error_Handler>
 8004bc2:	e7f0      	b.n	8004ba6 <HAL_ADC_MspInit+0x7e>
 8004bc4:	40012400 	.word	0x40012400
 8004bc8:	20000428 	.word	0x20000428
 8004bcc:	40020000 	.word	0x40020000
 8004bd0:	40026008 	.word	0x40026008

08004bd4 <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <HAL_ADC_MspDeInit+0x30>)
 8004bd6:	6802      	ldr	r2, [r0, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d000      	beq.n	8004bde <HAL_ADC_MspDeInit+0xa>
 8004bdc:	4770      	bx	lr
{
 8004bde:	b510      	push	{r4, lr}
 8004be0:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8004be2:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <HAL_ADC_MspDeInit+0x34>)
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8004be4:	210f      	movs	r1, #15
    __HAL_RCC_ADC1_CLK_DISABLE();
 8004be6:	6a13      	ldr	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8004be8:	4808      	ldr	r0, [pc, #32]	; (8004c0c <HAL_ADC_MspDeInit+0x38>)
    __HAL_RCC_ADC1_CLK_DISABLE();
 8004bea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bee:	6213      	str	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8004bf0:	f001 fa4c 	bl	800608c <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8004bf4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004bf6:	f000 ffe3 	bl	8005bc0 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8004bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8004bfe:	2012      	movs	r0, #18
 8004c00:	f000 bef4 	b.w	80059ec <HAL_NVIC_DisableIRQ>
 8004c04:	40012400 	.word	0x40012400
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	40020000 	.word	0x40020000

08004c10 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c10:	2300      	movs	r3, #0
{
 8004c12:	b530      	push	{r4, r5, lr}
  if(hdac->Instance==DAC)
 8004c14:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <HAL_DAC_MspInit+0x58>)
 8004c16:	6801      	ldr	r1, [r0, #0]
{
 8004c18:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 8004c1a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c1c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c20:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004c24:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8004c26:	d001      	beq.n	8004c2c <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004c28:	b009      	add	sp, #36	; 0x24
 8004c2a:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004c2c:	2430      	movs	r4, #48	; 0x30
 8004c2e:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8004c30:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <HAL_DAC_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c32:	480f      	ldr	r0, [pc, #60]	; (8004c70 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8004c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c36:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC_CLK_ENABLE();
 8004c38:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c40:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8004c44:	9200      	str	r2, [sp, #0]
 8004c46:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c48:	69da      	ldr	r2, [r3, #28]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	61da      	str	r2, [r3, #28]
 8004c50:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004c52:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c5e:	f001 f92b 	bl	8005eb8 <HAL_GPIO_Init>
}
 8004c62:	b009      	add	sp, #36	; 0x24
 8004c64:	bd30      	pop	{r4, r5, pc}
 8004c66:	bf00      	nop
 8004c68:	40007400 	.word	0x40007400
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40020000 	.word	0x40020000

08004c74 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c74:	2300      	movs	r3, #0
{
 8004c76:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8004c78:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <HAL_I2C_MspInit+0x60>)
 8004c7a:	6801      	ldr	r1, [r0, #0]
{
 8004c7c:	b088      	sub	sp, #32
  if(hi2c->Instance==I2C1)
 8004c7e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c84:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004c88:	9306      	str	r3, [sp, #24]
  if(hi2c->Instance==I2C1)
 8004c8a:	d001      	beq.n	8004c90 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c8c:	b008      	add	sp, #32
 8004c8e:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c90:	2003      	movs	r0, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c92:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c94:	26c0      	movs	r6, #192	; 0xc0
 8004c96:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c98:	4c0f      	ldr	r4, [pc, #60]	; (8004cd8 <HAL_I2C_MspInit+0x64>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c9a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c9c:	69e3      	ldr	r3, [r4, #28]
 8004c9e:	f043 0302 	orr.w	r3, r3, #2
 8004ca2:	61e3      	str	r3, [r4, #28]
 8004ca4:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca6:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cae:	480b      	ldr	r0, [pc, #44]	; (8004cdc <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cb0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cb2:	e9cd 6702 	strd	r6, r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004cb6:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb8:	f001 f8fe 	bl	8005eb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cc2:	6263      	str	r3, [r4, #36]	; 0x24
 8004cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cca:	9301      	str	r3, [sp, #4]
 8004ccc:	9b01      	ldr	r3, [sp, #4]
}
 8004cce:	b008      	add	sp, #32
 8004cd0:	bdd0      	pop	{r4, r6, r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40005400 	.word	0x40005400
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40020400 	.word	0x40020400

08004ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ce0:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8004ce2:	6803      	ldr	r3, [r0, #0]
{
 8004ce4:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 8004ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cea:	d023      	beq.n	8004d34 <HAL_TIM_Base_MspInit+0x54>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004cec:	4a3a      	ldr	r2, [pc, #232]	; (8004dd8 <HAL_TIM_Base_MspInit+0xf8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d036      	beq.n	8004d60 <HAL_TIM_Base_MspInit+0x80>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 8004cf2:	4a3a      	ldr	r2, [pc, #232]	; (8004ddc <HAL_TIM_Base_MspInit+0xfc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d048      	beq.n	8004d8a <HAL_TIM_Base_MspInit+0xaa>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8004cf8:	4a39      	ldr	r2, [pc, #228]	; (8004de0 <HAL_TIM_Base_MspInit+0x100>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d005      	beq.n	8004d0a <HAL_TIM_Base_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8004cfe:	4a39      	ldr	r2, [pc, #228]	; (8004de4 <HAL_TIM_Base_MspInit+0x104>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d057      	beq.n	8004db4 <HAL_TIM_Base_MspInit+0xd4>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004d04:	b007      	add	sp, #28
 8004d06:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8004d0a:	2200      	movs	r2, #0
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004d0c:	4b36      	ldr	r3, [pc, #216]	; (8004de8 <HAL_TIM_Base_MspInit+0x108>)
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8004d0e:	201a      	movs	r0, #26
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004d10:	6a19      	ldr	r1, [r3, #32]
 8004d12:	f041 0108 	orr.w	r1, r1, #8
 8004d16:	6219      	str	r1, [r3, #32]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8004d1a:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	9304      	str	r3, [sp, #16]
 8004d22:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8004d24:	f000 fe16 	bl	8005954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 8004d28:	201a      	movs	r0, #26
}
 8004d2a:	b007      	add	sp, #28
 8004d2c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8004d30:	f000 be4e 	b.w	80059d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004d34:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d36:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8004d3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004d3c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d3e:	f041 0101 	orr.w	r1, r1, #1
 8004d42:	6259      	str	r1, [r3, #36]	; 0x24
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004d46:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004d50:	f000 fe00 	bl	8005954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d54:	201c      	movs	r0, #28
}
 8004d56:	b007      	add	sp, #28
 8004d58:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8004d5c:	f000 be38 	b.w	80059d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004d60:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d62:	4b21      	ldr	r3, [pc, #132]	; (8004de8 <HAL_TIM_Base_MspInit+0x108>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004d64:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d66:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004d68:	f041 0102 	orr.w	r1, r1, #2
 8004d6c:	6259      	str	r1, [r3, #36]	; 0x24
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004d70:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	9302      	str	r3, [sp, #8]
 8004d78:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004d7a:	f000 fdeb 	bl	8005954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004d7e:	201d      	movs	r0, #29
}
 8004d80:	b007      	add	sp, #28
 8004d82:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8004d86:	f000 be23 	b.w	80059d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8004d8a:	2200      	movs	r2, #0
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004d8c:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <HAL_TIM_Base_MspInit+0x108>)
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8004d8e:	2019      	movs	r0, #25
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004d90:	6a19      	ldr	r1, [r3, #32]
 8004d92:	f041 0104 	orr.w	r1, r1, #4
 8004d96:	6219      	str	r1, [r3, #32]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8004d9a:	4611      	mov	r1, r2
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	9303      	str	r3, [sp, #12]
 8004da2:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8004da4:	f000 fdd6 	bl	8005954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8004da8:	2019      	movs	r0, #25
}
 8004daa:	b007      	add	sp, #28
 8004dac:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8004db0:	f000 be0e 	b.w	80059d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8004db4:	2200      	movs	r2, #0
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004db6:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <HAL_TIM_Base_MspInit+0x108>)
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8004db8:	201b      	movs	r0, #27
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004dba:	6a19      	ldr	r1, [r3, #32]
 8004dbc:	f041 0110 	orr.w	r1, r1, #16
 8004dc0:	6219      	str	r1, [r3, #32]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8004dc4:	4611      	mov	r1, r2
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	9305      	str	r3, [sp, #20]
 8004dcc:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8004dce:	f000 fdc1 	bl	8005954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8004dd2:	201b      	movs	r0, #27
 8004dd4:	e7a9      	b.n	8004d2a <HAL_TIM_Base_MspInit+0x4a>
 8004dd6:	bf00      	nop
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	40010800 	.word	0x40010800
 8004de0:	40010c00 	.word	0x40010c00
 8004de4:	40011000 	.word	0x40011000
 8004de8:	40023800 	.word	0x40023800

08004dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004dec:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dee:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8004df0:	4b31      	ldr	r3, [pc, #196]	; (8004eb8 <HAL_UART_MspInit+0xcc>)
 8004df2:	6802      	ldr	r2, [r0, #0]
{
 8004df4:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8004df6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004dfc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004e00:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8004e02:	d001      	beq.n	8004e08 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004e04:	b008      	add	sp, #32
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e08:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004e0c:	6a1a      	ldr	r2, [r3, #32]
 8004e0e:	4605      	mov	r5, r0
 8004e10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e14:	621a      	str	r2, [r3, #32]
 8004e16:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e18:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e1a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004e1e:	9200      	str	r2, [sp, #0]
 8004e20:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e22:	69da      	ldr	r2, [r3, #28]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004e24:	4e25      	ldr	r6, [pc, #148]	; (8004ebc <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	61da      	str	r2, [r3, #28]
 8004e2c:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e2e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e38:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e3a:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e3c:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e42:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e44:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e46:	481e      	ldr	r0, [pc, #120]	; (8004ec0 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e48:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e4a:	f001 f835 	bl	8005eb8 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e4e:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004e50:	4a1c      	ldr	r2, [pc, #112]	; (8004ec4 <HAL_UART_MspInit+0xd8>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004e52:	4630      	mov	r0, r6
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004e54:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e58:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e5c:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e60:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e62:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004e64:	f000 fe74 	bl	8005b50 <HAL_DMA_Init>
 8004e68:	b9f8      	cbnz	r0, 8004eaa <HAL_UART_MspInit+0xbe>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e6a:	2210      	movs	r2, #16
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004e6c:	4c16      	ldr	r4, [pc, #88]	; (8004ec8 <HAL_UART_MspInit+0xdc>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e6e:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e70:	2180      	movs	r1, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e72:	6062      	str	r2, [r4, #4]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8004e74:	2220      	movs	r2, #32
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e76:	e9c4 3102 	strd	r3, r1, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e7a:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e7e:	61e3      	str	r3, [r4, #28]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004e80:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <HAL_UART_MspInit+0xe0>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004e82:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004e84:	63ae      	str	r6, [r5, #56]	; 0x38
 8004e86:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004e88:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8004e8a:	61a2      	str	r2, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004e8c:	f000 fe60 	bl	8005b50 <HAL_DMA_Init>
 8004e90:	b970      	cbnz	r0, 8004eb0 <HAL_UART_MspInit+0xc4>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004e92:	2200      	movs	r2, #0
 8004e94:	2025      	movs	r0, #37	; 0x25
 8004e96:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004e98:	636c      	str	r4, [r5, #52]	; 0x34
 8004e9a:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004e9c:	f000 fd5a 	bl	8005954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ea0:	2025      	movs	r0, #37	; 0x25
 8004ea2:	f000 fd95 	bl	80059d0 <HAL_NVIC_EnableIRQ>
}
 8004ea6:	b008      	add	sp, #32
 8004ea8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004eaa:	f7ff fe19 	bl	8004ae0 <Error_Handler>
 8004eae:	e7dc      	b.n	8004e6a <HAL_UART_MspInit+0x7e>
      Error_Handler();
 8004eb0:	f7ff fe16 	bl	8004ae0 <Error_Handler>
 8004eb4:	e7ed      	b.n	8004e92 <HAL_UART_MspInit+0xa6>
 8004eb6:	bf00      	nop
 8004eb8:	40013800 	.word	0x40013800
 8004ebc:	2000046c 	.word	0x2000046c
 8004ec0:	40020000 	.word	0x40020000
 8004ec4:	40026058 	.word	0x40026058
 8004ec8:	200004b0 	.word	0x200004b0
 8004ecc:	40026044 	.word	0x40026044

08004ed0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ed0:	e7fe      	b.n	8004ed0 <NMI_Handler>
 8004ed2:	bf00      	nop

08004ed4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ed4:	e7fe      	b.n	8004ed4 <HardFault_Handler>
 8004ed6:	bf00      	nop

08004ed8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ed8:	e7fe      	b.n	8004ed8 <MemManage_Handler>
 8004eda:	bf00      	nop

08004edc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004edc:	e7fe      	b.n	8004edc <BusFault_Handler>
 8004ede:	bf00      	nop

08004ee0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ee0:	e7fe      	b.n	8004ee0 <UsageFault_Handler>
 8004ee2:	bf00      	nop

08004ee4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop

08004ee8 <DebugMon_Handler>:
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop

08004eec <PendSV_Handler>:
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop

08004ef0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ef0:	f000 b920 	b.w	8005134 <HAL_IncTick>

08004ef4 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_CLK_Pin);
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	f001 b96f 	b.w	80061d8 <HAL_GPIO_EXTI_IRQHandler>
 8004efa:	bf00      	nop

08004efc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_SW_Pin);
 8004efc:	2004      	movs	r0, #4
 8004efe:	f001 b96b 	b.w	80061d8 <HAL_GPIO_EXTI_IRQHandler>
 8004f02:	bf00      	nop

08004f04 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004f04:	4801      	ldr	r0, [pc, #4]	; (8004f0c <DMA1_Channel1_IRQHandler+0x8>)
 8004f06:	f000 bf23 	b.w	8005d50 <HAL_DMA_IRQHandler>
 8004f0a:	bf00      	nop
 8004f0c:	20000428 	.word	0x20000428

08004f10 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004f10:	4801      	ldr	r0, [pc, #4]	; (8004f18 <DMA1_Channel4_IRQHandler+0x8>)
 8004f12:	f000 bf1d 	b.w	8005d50 <HAL_DMA_IRQHandler>
 8004f16:	bf00      	nop
 8004f18:	200004b0 	.word	0x200004b0

08004f1c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004f1c:	4801      	ldr	r0, [pc, #4]	; (8004f24 <DMA1_Channel5_IRQHandler+0x8>)
 8004f1e:	f000 bf17 	b.w	8005d50 <HAL_DMA_IRQHandler>
 8004f22:	bf00      	nop
 8004f24:	2000046c 	.word	0x2000046c

08004f28 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004f28:	4801      	ldr	r0, [pc, #4]	; (8004f30 <ADC1_IRQHandler+0x8>)
 8004f2a:	f000 bacb 	b.w	80054c4 <HAL_ADC_IRQHandler>
 8004f2e:	bf00      	nop
 8004f30:	200003c0 	.word	0x200003c0

08004f34 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004f34:	4801      	ldr	r0, [pc, #4]	; (8004f3c <USB_LP_IRQHandler+0x8>)
 8004f36:	f001 bc35 	b.w	80067a4 <HAL_PCD_IRQHandler>
 8004f3a:	bf00      	nop
 8004f3c:	200014b4 	.word	0x200014b4

08004f40 <TIM9_IRQHandler>:
void TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM9_IRQn 0 */

  /* USER CODE END TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004f40:	4801      	ldr	r0, [pc, #4]	; (8004f48 <TIM9_IRQHandler+0x8>)
 8004f42:	f002 bfef 	b.w	8007f24 <HAL_TIM_IRQHandler>
 8004f46:	bf00      	nop
 8004f48:	20000650 	.word	0x20000650

08004f4c <TIM10_IRQHandler>:
void TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004f4c:	4801      	ldr	r0, [pc, #4]	; (8004f54 <TIM10_IRQHandler+0x8>)
 8004f4e:	f002 bfe9 	b.w	8007f24 <HAL_TIM_IRQHandler>
 8004f52:	bf00      	nop
 8004f54:	20000550 	.word	0x20000550

08004f58 <TIM11_IRQHandler>:
void TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004f58:	4801      	ldr	r0, [pc, #4]	; (8004f60 <TIM11_IRQHandler+0x8>)
 8004f5a:	f002 bfe3 	b.w	8007f24 <HAL_TIM_IRQHandler>
 8004f5e:	bf00      	nop
 8004f60:	20000590 	.word	0x20000590

08004f64 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f64:	4801      	ldr	r0, [pc, #4]	; (8004f6c <TIM2_IRQHandler+0x8>)
 8004f66:	f002 bfdd 	b.w	8007f24 <HAL_TIM_IRQHandler>
 8004f6a:	bf00      	nop
 8004f6c:	200005d0 	.word	0x200005d0

08004f70 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004f70:	4801      	ldr	r0, [pc, #4]	; (8004f78 <TIM3_IRQHandler+0x8>)
 8004f72:	f002 bfd7 	b.w	8007f24 <HAL_TIM_IRQHandler>
 8004f76:	bf00      	nop
 8004f78:	20000610 	.word	0x20000610

08004f7c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f7c:	4801      	ldr	r0, [pc, #4]	; (8004f84 <USART1_IRQHandler+0x8>)
 8004f7e:	f003 ba9f 	b.w	80084c0 <HAL_UART_IRQHandler>
 8004f82:	bf00      	nop
 8004f84:	20000690 	.word	0x20000690

08004f88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Row_1_Pin);
 8004f8a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004f8e:	f001 f923 	bl	80061d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_2_Pin);
 8004f92:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f96:	f001 f91f 	bl	80061d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_3_Pin);
 8004f9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004f9e:	f001 f91b 	bl	80061d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_4_Pin);
 8004fa2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004fa6:	f001 f917 	bl	80061d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
 8004fae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004fb2:	f001 b911 	b.w	80061d8 <HAL_GPIO_EXTI_IRQHandler>
 8004fb6:	bf00      	nop

08004fb8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004fb8:	2001      	movs	r0, #1
 8004fba:	4770      	bx	lr

08004fbc <_kill>:

int _kill(int pid, int sig)
{
 8004fbc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004fbe:	f005 fa29 	bl	800a414 <__errno>
 8004fc2:	2216      	movs	r2, #22
 8004fc4:	4603      	mov	r3, r0
	return -1;
}
 8004fc6:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8004fca:	601a      	str	r2, [r3, #0]
}
 8004fcc:	bd08      	pop	{r3, pc}
 8004fce:	bf00      	nop

08004fd0 <_exit>:

void _exit (int status)
{
 8004fd0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004fd2:	f005 fa1f 	bl	800a414 <__errno>
 8004fd6:	2316      	movs	r3, #22
 8004fd8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004fda:	e7fe      	b.n	8004fda <_exit+0xa>

08004fdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fdc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fde:	1e16      	subs	r6, r2, #0
 8004fe0:	dd07      	ble.n	8004ff2 <_read+0x16>
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8004fe6:	f3af 8000 	nop.w
 8004fea:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fee:	42a5      	cmp	r5, r4
 8004ff0:	d1f9      	bne.n	8004fe6 <_read+0xa>
	}

return len;
}
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	bd70      	pop	{r4, r5, r6, pc}
 8004ff6:	bf00      	nop

08004ff8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ff8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ffa:	1e16      	subs	r6, r2, #0
 8004ffc:	dd07      	ble.n	800500e <_write+0x16>
 8004ffe:	460c      	mov	r4, r1
 8005000:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8005002:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005006:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800500a:	42ac      	cmp	r4, r5
 800500c:	d1f9      	bne.n	8005002 <_write+0xa>
	}
	return len;
}
 800500e:	4630      	mov	r0, r6
 8005010:	bd70      	pop	{r4, r5, r6, pc}
 8005012:	bf00      	nop

08005014 <_close>:

int _close(int file)
{
	return -1;
}
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop

0800501c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800501c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8005020:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005022:	604b      	str	r3, [r1, #4]
}
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop

08005028 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005028:	2001      	movs	r0, #1
 800502a:	4770      	bx	lr

0800502c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800502c:	2000      	movs	r0, #0
 800502e:	4770      	bx	lr

08005030 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005030:	490d      	ldr	r1, [pc, #52]	; (8005068 <_sbrk+0x38>)
{
 8005032:	4603      	mov	r3, r0
 8005034:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005036:	4a0d      	ldr	r2, [pc, #52]	; (800506c <_sbrk+0x3c>)
 8005038:	4c0d      	ldr	r4, [pc, #52]	; (8005070 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 800503a:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800503c:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800503e:	b120      	cbz	r0, 800504a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005040:	4403      	add	r3, r0
 8005042:	4293      	cmp	r3, r2
 8005044:	d807      	bhi.n	8005056 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005046:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8005048:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800504a:	4c0a      	ldr	r4, [pc, #40]	; (8005074 <_sbrk+0x44>)
 800504c:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 800504e:	4403      	add	r3, r0
 8005050:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8005052:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8005054:	d9f7      	bls.n	8005046 <_sbrk+0x16>
    errno = ENOMEM;
 8005056:	f005 f9dd 	bl	800a414 <__errno>
 800505a:	220c      	movs	r2, #12
 800505c:	4603      	mov	r3, r0
    return (void *)-1;
 800505e:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8005062:	601a      	str	r2, [r3, #0]
}
 8005064:	bd10      	pop	{r4, pc}
 8005066:	bf00      	nop
 8005068:	2000083c 	.word	0x2000083c
 800506c:	20008000 	.word	0x20008000
 8005070:	00002000 	.word	0x00002000
 8005074:	200019d0 	.word	0x200019d0

08005078 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop

0800507c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800507c:	480c      	ldr	r0, [pc, #48]	; (80050b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800507e:	490d      	ldr	r1, [pc, #52]	; (80050b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005080:	4a0d      	ldr	r2, [pc, #52]	; (80050b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005084:	e002      	b.n	800508c <LoopCopyDataInit>

08005086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800508a:	3304      	adds	r3, #4

0800508c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800508c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800508e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005090:	d3f9      	bcc.n	8005086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005092:	4a0a      	ldr	r2, [pc, #40]	; (80050bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005094:	4c0a      	ldr	r4, [pc, #40]	; (80050c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005098:	e001      	b.n	800509e <LoopFillZerobss>

0800509a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800509a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800509c:	3204      	adds	r2, #4

0800509e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800509e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050a0:	d3fb      	bcc.n	800509a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80050a2:	f7ff ffe9 	bl	8005078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050a6:	f005 f9bb 	bl	800a420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80050aa:	f7fc fe99 	bl	8001de0 <main>
  bx lr
 80050ae:	4770      	bx	lr
  ldr r0, =_sdata
 80050b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050b4:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 80050b8:	0800d7ac 	.word	0x0800d7ac
  ldr r2, =_sbss
 80050bc:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 80050c0:	200019d0 	.word	0x200019d0

080050c4 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050c4:	e7fe      	b.n	80050c4 <COMP_IRQHandler>
	...

080050c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050c8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <HAL_InitTick+0x40>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	b90b      	cbnz	r3, 80050d4 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80050d0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80050d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050dc:	490b      	ldr	r1, [pc, #44]	; (800510c <HAL_InitTick+0x44>)
 80050de:	4605      	mov	r5, r0
 80050e0:	6808      	ldr	r0, [r1, #0]
 80050e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80050e6:	f000 fc95 	bl	8005a14 <HAL_SYSTICK_Config>
 80050ea:	4604      	mov	r4, r0
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d1ef      	bne.n	80050d0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050f0:	2d0f      	cmp	r5, #15
 80050f2:	d8ed      	bhi.n	80050d0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050f4:	4602      	mov	r2, r0
 80050f6:	4629      	mov	r1, r5
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	f000 fc2a 	bl	8005954 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <HAL_InitTick+0x48>)
 8005102:	4620      	mov	r0, r4
 8005104:	601d      	str	r5, [r3, #0]
}
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	20000028 	.word	0x20000028
 800510c:	20000024 	.word	0x20000024
 8005110:	2000002c 	.word	0x2000002c

08005114 <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005114:	2003      	movs	r0, #3
{
 8005116:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005118:	f000 fc0a 	bl	8005930 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800511c:	200f      	movs	r0, #15
 800511e:	f7ff ffd3 	bl	80050c8 <HAL_InitTick>
 8005122:	b110      	cbz	r0, 800512a <HAL_Init+0x16>
    status = HAL_ERROR;
 8005124:	2401      	movs	r4, #1
}
 8005126:	4620      	mov	r0, r4
 8005128:	bd10      	pop	{r4, pc}
 800512a:	4604      	mov	r4, r0
    HAL_MspInit();
 800512c:	f7ff fcda 	bl	8004ae4 <HAL_MspInit>
}
 8005130:	4620      	mov	r0, r4
 8005132:	bd10      	pop	{r4, pc}

08005134 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005134:	4a03      	ldr	r2, [pc, #12]	; (8005144 <HAL_IncTick+0x10>)
 8005136:	4904      	ldr	r1, [pc, #16]	; (8005148 <HAL_IncTick+0x14>)
 8005138:	6813      	ldr	r3, [r2, #0]
 800513a:	6809      	ldr	r1, [r1, #0]
 800513c:	440b      	add	r3, r1
 800513e:	6013      	str	r3, [r2, #0]
}
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	20000840 	.word	0x20000840
 8005148:	20000028 	.word	0x20000028

0800514c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800514c:	4b01      	ldr	r3, [pc, #4]	; (8005154 <HAL_GetTick+0x8>)
 800514e:	6818      	ldr	r0, [r3, #0]
}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000840 	.word	0x20000840

08005158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800515c:	f7ff fff6 	bl	800514c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005160:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005162:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005164:	d002      	beq.n	800516c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005166:	4b04      	ldr	r3, [pc, #16]	; (8005178 <HAL_Delay+0x20>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800516c:	f7ff ffee 	bl	800514c <HAL_GetTick>
 8005170:	1b40      	subs	r0, r0, r5
 8005172:	42a0      	cmp	r0, r4
 8005174:	d3fa      	bcc.n	800516c <HAL_Delay+0x14>
  {
  }
}
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	20000028 	.word	0x20000028

0800517c <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800517c:	2800      	cmp	r0, #0
 800517e:	f000 80a9 	beq.w	80052d4 <HAL_ADC_Init+0x158>
{
 8005182:	b530      	push	{r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005184:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005186:	4604      	mov	r4, r0
{
 8005188:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 800518a:	2b00      	cmp	r3, #0
 800518c:	d078      	beq.n	8005280 <HAL_ADC_Init+0x104>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800518e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005190:	06d8      	lsls	r0, r3, #27
 8005192:	d453      	bmi.n	800523c <HAL_ADC_Init+0xc0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005194:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8005196:	4a5c      	ldr	r2, [pc, #368]	; (8005308 <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 8005198:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800519c:	f023 0302 	bic.w	r3, r3, #2
 80051a0:	f043 0302 	orr.w	r3, r3, #2
 80051a4:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 80051a6:	6853      	ldr	r3, [r2, #4]
 80051a8:	6861      	ldr	r1, [r4, #4]
 80051aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80051ae:	430b      	orrs	r3, r1
 80051b0:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051b6:	fa91 f1a1 	rbit	r1, r1
 80051ba:	2302      	movs	r3, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80051bc:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80051c0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80051c4:	fa93 f3a3 	rbit	r3, r3
 80051c8:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80051cc:	6965      	ldr	r5, [r4, #20]
 80051ce:	68e2      	ldr	r2, [r4, #12]
 80051d0:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 80051d4:	432a      	orrs	r2, r5
 80051d6:	6a25      	ldr	r5, [r4, #32]
 80051d8:	fa0c f101 	lsl.w	r1, ip, r1
 80051dc:	432a      	orrs	r2, r5
 80051de:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80051e2:	fa00 f303 	lsl.w	r3, r0, r3
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051e6:	2910      	cmp	r1, #16
                hadc->Init.ChannelsBank                                        |
 80051e8:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051ec:	d002      	beq.n	80051f4 <HAL_ADC_Init+0x78>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80051ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051f0:	4311      	orrs	r1, r2
 80051f2:	430b      	orrs	r3, r1
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80051f4:	6822      	ldr	r2, [r4, #0]
 80051f6:	6811      	ldr	r1, [r2, #0]
 80051f8:	0649      	lsls	r1, r1, #25
 80051fa:	d551      	bpl.n	80052a0 <HAL_ADC_Init+0x124>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80051fc:	6925      	ldr	r5, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80051fe:	6890      	ldr	r0, [r2, #8]
 8005200:	4942      	ldr	r1, [pc, #264]	; (800530c <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005202:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 8005206:	ea01 0100 	and.w	r1, r1, r0
 800520a:	ea41 0103 	orr.w	r1, r1, r3
 800520e:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005210:	d017      	beq.n	8005242 <HAL_ADC_Init+0xc6>
 8005212:	2d01      	cmp	r5, #1
 8005214:	d015      	beq.n	8005242 <HAL_ADC_Init+0xc6>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005216:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005218:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 800521c:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800521e:	6891      	ldr	r1, [r2, #8]
 8005220:	4a3b      	ldr	r2, [pc, #236]	; (8005310 <HAL_ADC_Init+0x194>)
 8005222:	400a      	ands	r2, r1
 8005224:	429a      	cmp	r2, r3
 8005226:	d11f      	bne.n	8005268 <HAL_ADC_Init+0xec>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005228:	2000      	movs	r0, #0
 800522a:	6520      	str	r0, [r4, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800522c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8005238:	b003      	add	sp, #12
 800523a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800523c:	2001      	movs	r0, #1
}
 800523e:	b003      	add	sp, #12
 8005240:	bd30      	pop	{r4, r5, pc}
 8005242:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8005246:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8005248:	fa91 f1a1 	rbit	r1, r1
 800524c:	fab1 f081 	clz	r0, r1
 8005250:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005252:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 8005256:	3901      	subs	r1, #1
 8005258:	4081      	lsls	r1, r0
 800525a:	4329      	orrs	r1, r5
 800525c:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800525e:	6891      	ldr	r1, [r2, #8]
 8005260:	4a2b      	ldr	r2, [pc, #172]	; (8005310 <HAL_ADC_Init+0x194>)
 8005262:	400a      	ands	r2, r1
 8005264:	429a      	cmp	r2, r3
 8005266:	d0df      	beq.n	8005228 <HAL_ADC_Init+0xac>
      tmp_hal_status = HAL_ERROR;
 8005268:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800526a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800526c:	f023 0312 	bic.w	r3, r3, #18
 8005270:	f043 0310 	orr.w	r3, r3, #16
 8005274:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005276:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005278:	4303      	orrs	r3, r0
 800527a:	6523      	str	r3, [r4, #80]	; 0x50
}
 800527c:	b003      	add	sp, #12
 800527e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005280:	4a24      	ldr	r2, [pc, #144]	; (8005314 <HAL_ADC_Init+0x198>)
    ADC_CLEAR_ERRORCODE(hadc);
 8005282:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 8005284:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005288:	6a13      	ldr	r3, [r2, #32]
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	6213      	str	r3, [r2, #32]
 8005290:	6a13      	ldr	r3, [r2, #32]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 800529a:	f7ff fc45 	bl	8004b28 <HAL_ADC_MspInit>
 800529e:	e776      	b.n	800518e <HAL_ADC_Init+0x12>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80052a0:	69a1      	ldr	r1, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80052a2:	68a5      	ldr	r5, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80052a4:	430b      	orrs	r3, r1
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80052a6:	69e1      	ldr	r1, [r4, #28]
 80052a8:	ea45 0c01 	orr.w	ip, r5, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80052ac:	6925      	ldr	r5, [r4, #16]
 80052ae:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80052b2:	d00c      	beq.n	80052ce <HAL_ADC_Init+0x152>
 80052b4:	2d01      	cmp	r5, #1
 80052b6:	d00a      	beq.n	80052ce <HAL_ADC_Init+0x152>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80052b8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80052bc:	2901      	cmp	r1, #1
 80052be:	d00b      	beq.n	80052d8 <HAL_ADC_Init+0x15c>
        MODIFY_REG(hadc->Instance->CR1,
 80052c0:	6850      	ldr	r0, [r2, #4]
 80052c2:	4915      	ldr	r1, [pc, #84]	; (8005318 <HAL_ADC_Init+0x19c>)
 80052c4:	4001      	ands	r1, r0
 80052c6:	ea41 010c 	orr.w	r1, r1, ip
 80052ca:	6051      	str	r1, [r2, #4]
 80052cc:	e797      	b.n	80051fe <HAL_ADC_Init+0x82>
                  hadc->Init.LowPowerAutoPowerOff           |
 80052ce:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 80052d2:	e7f1      	b.n	80052b8 <HAL_ADC_Init+0x13c>
    return HAL_ERROR;
 80052d4:	2001      	movs	r0, #1
}
 80052d6:	4770      	bx	lr
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80052d8:	b968      	cbnz	r0, 80052f6 <HAL_ADC_Init+0x17a>
 80052da:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80052de:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80052e2:	fab1 f081 	clz	r0, r1
 80052e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80052e8:	3901      	subs	r1, #1
 80052ea:	4081      	lsls	r1, r0
 80052ec:	ea41 010c 	orr.w	r1, r1, ip
 80052f0:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 80052f4:	e7e4      	b.n	80052c0 <HAL_ADC_Init+0x144>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80052f8:	f041 0120 	orr.w	r1, r1, #32
 80052fc:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005300:	f041 0101 	orr.w	r1, r1, #1
 8005304:	6521      	str	r1, [r4, #80]	; 0x50
 8005306:	e7db      	b.n	80052c0 <HAL_ADC_Init+0x144>
 8005308:	40012700 	.word	0x40012700
 800530c:	c0fff18d 	.word	0xc0fff18d
 8005310:	bf80fffe 	.word	0xbf80fffe
 8005314:	40023800 	.word	0x40023800
 8005318:	fcfc16ff 	.word	0xfcfc16ff

0800531c <HAL_ADC_DeInit>:
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800531c:	2800      	cmp	r0, #0
 800531e:	d075      	beq.n	800540c <HAL_ADC_DeInit+0xf0>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005320:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 8005322:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005324:	f042 0202 	orr.w	r2, r2, #2
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005328:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800532a:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (ADC_IS_ENABLE(hadc) != RESET)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4604      	mov	r4, r0
 8005330:	0655      	lsls	r5, r2, #25
 8005332:	d453      	bmi.n	80053dc <HAL_ADC_DeInit+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8005334:	f06f 001f 	mvn.w	r0, #31
 8005338:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 800533a:	6858      	ldr	r0, [r3, #4]
 800533c:	4939      	ldr	r1, [pc, #228]	; (8005424 <HAL_ADC_DeInit+0x108>)
    ADC_CR2_CLEAR(hadc);
 800533e:	4a3a      	ldr	r2, [pc, #232]	; (8005428 <HAL_ADC_DeInit+0x10c>)
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 8005340:	4001      	ands	r1, r0
 8005342:	6059      	str	r1, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 8005344:	6899      	ldr	r1, [r3, #8]
 8005346:	400a      	ands	r2, r1
 8005348:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 800534a:	bf00      	nop
    ADC_SMPR1_CLEAR(hadc);
 800534c:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 800534e:	4a37      	ldr	r2, [pc, #220]	; (800542c <HAL_ADC_DeInit+0x110>)
    ADC_SMPR1_CLEAR(hadc);
 8005350:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8005352:	4837      	ldr	r0, [pc, #220]	; (8005430 <HAL_ADC_DeInit+0x114>)
    ADC_SMPR1_CLEAR(hadc);
 8005354:	0d49      	lsrs	r1, r1, #21
 8005356:	0549      	lsls	r1, r1, #21
 8005358:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 800535a:	6919      	ldr	r1, [r3, #16]
 800535c:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8005360:	6119      	str	r1, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 8005362:	6959      	ldr	r1, [r3, #20]
 8005364:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8005368:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 800536a:	6999      	ldr	r1, [r3, #24]
 800536c:	4011      	ands	r1, r2
 800536e:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8005370:	69d9      	ldr	r1, [r3, #28]
 8005372:	4011      	ands	r1, r2
 8005374:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8005376:	6a19      	ldr	r1, [r3, #32]
 8005378:	4011      	ands	r1, r2
 800537a:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 800537c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800537e:	4011      	ands	r1, r2
 8005380:	6259      	str	r1, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8005382:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005384:	4011      	ands	r1, r2
 8005386:	6299      	str	r1, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8005388:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800538a:	400a      	ands	r2, r1
 800538c:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 800538e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8005390:	4928      	ldr	r1, [pc, #160]	; (8005434 <HAL_ADC_DeInit+0x118>)
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8005392:	4010      	ands	r0, r2
 8005394:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8005396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_ADC_MspDeInit(hadc);
 8005398:	4620      	mov	r0, r4
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 800539a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800539e:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 80053a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80053a6:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 80053a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053aa:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80053ae:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 80053b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053b2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 80053b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ba:	0d92      	lsrs	r2, r2, #22
 80053bc:	0592      	lsls	r2, r2, #22
 80053be:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 80053c0:	684b      	ldr	r3, [r1, #4]
 80053c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053c6:	604b      	str	r3, [r1, #4]
    HAL_ADC_MspDeInit(hadc);
 80053c8:	f7ff fc04 	bl	8004bd4 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80053cc:	2300      	movs	r3, #0
    hadc->State = HAL_ADC_STATE_RESET;
 80053ce:	4618      	mov	r0, r3
    ADC_CLEAR_ERRORCODE(hadc);
 80053d0:	6523      	str	r3, [r4, #80]	; 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 80053d2:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 80053d4:	2300      	movs	r3, #0
 80053d6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 80053da:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	f022 0201 	bic.w	r2, r2, #1
 80053e2:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80053e4:	f7ff feb2 	bl	800514c <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80053e8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80053ea:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	0650      	lsls	r0, r2, #25
 80053f0:	d5a0      	bpl.n	8005334 <HAL_ADC_DeInit+0x18>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80053f2:	f7ff feab 	bl	800514c <HAL_GetTick>
 80053f6:	1b40      	subs	r0, r0, r5
 80053f8:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80053fa:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80053fc:	d902      	bls.n	8005404 <HAL_ADC_DeInit+0xe8>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	0651      	lsls	r1, r2, #25
 8005402:	d405      	bmi.n	8005410 <HAL_ADC_DeInit+0xf4>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	0652      	lsls	r2, r2, #25
 8005408:	d4f3      	bmi.n	80053f2 <HAL_ADC_DeInit+0xd6>
 800540a:	e793      	b.n	8005334 <HAL_ADC_DeInit+0x18>
    return HAL_ERROR;
 800540c:	2001      	movs	r0, #1
}
 800540e:	4770      	bx	lr
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005410:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005412:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005414:	f043 0310 	orr.w	r3, r3, #16
 8005418:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800541a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800541c:	4303      	orrs	r3, r0
 800541e:	6523      	str	r3, [r4, #80]	; 0x50
  if (tmp_hal_status == HAL_OK)
 8005420:	e7d8      	b.n	80053d4 <HAL_ADC_DeInit+0xb8>
 8005422:	bf00      	nop
 8005424:	f83c0000 	.word	0xf83c0000
 8005428:	8080f08c 	.word	0x8080f08c
 800542c:	fffff000 	.word	0xfffff000
 8005430:	fe0f8000 	.word	0xfe0f8000
 8005434:	40012700 	.word	0x40012700

08005438 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005438:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800543a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800543c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8005440:	d126      	bne.n	8005490 <ADC_DMAConvCplt+0x58>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005442:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005444:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 800544a:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800544c:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800544e:	688a      	ldr	r2, [r1, #8]
 8005450:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8005454:	d118      	bne.n	8005488 <ADC_DMAConvCplt+0x50>
 8005456:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800545a:	b9aa      	cbnz	r2, 8005488 <ADC_DMAConvCplt+0x50>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800545c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800545e:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8005462:	d002      	beq.n	800546a <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005464:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005466:	0550      	lsls	r0, r2, #21
 8005468:	d40e      	bmi.n	8005488 <ADC_DMAConvCplt+0x50>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800546a:	684a      	ldr	r2, [r1, #4]
 800546c:	f022 0220 	bic.w	r2, r2, #32
 8005470:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005478:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800547a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800547c:	04d2      	lsls	r2, r2, #19
 800547e:	d403      	bmi.n	8005488 <ADC_DMAConvCplt+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff f99d 	bl	80047c8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800548e:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	4718      	bx	r3
 8005496:	bf00      	nop

08005498 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005498:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800549a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800549c:	f7ff f984 	bl	80047a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054a0:	bd08      	pop	{r3, pc}
 80054a2:	bf00      	nop

080054a4 <HAL_ADC_ErrorCallback>:
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop

080054a8 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80054a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80054aa:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80054ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80054ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b2:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80054b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80054b6:	f043 0304 	orr.w	r3, r3, #4
 80054ba:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80054bc:	f7ff fff2 	bl	80054a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054c0:	bd08      	pop	{r3, pc}
 80054c2:	bf00      	nop

080054c4 <HAL_ADC_IRQHandler>:
{
 80054c4:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80054c6:	6803      	ldr	r3, [r0, #0]
{
 80054c8:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	0691      	lsls	r1, r2, #26
 80054ce:	d502      	bpl.n	80054d6 <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	0792      	lsls	r2, r2, #30
 80054d4:	d445      	bmi.n	8005562 <HAL_ADC_IRQHandler+0x9e>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	0612      	lsls	r2, r2, #24
 80054da:	d502      	bpl.n	80054e2 <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	0755      	lsls	r5, r2, #29
 80054e0:	d40c      	bmi.n	80054fc <HAL_ADC_IRQHandler+0x38>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	0655      	lsls	r5, r2, #25
 80054e6:	d502      	bpl.n	80054ee <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	07d0      	lsls	r0, r2, #31
 80054ec:	d46f      	bmi.n	80055ce <HAL_ADC_IRQHandler+0x10a>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	d502      	bpl.n	80054fa <HAL_ADC_IRQHandler+0x36>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	0692      	lsls	r2, r2, #26
 80054f8:	d45c      	bmi.n	80055b4 <HAL_ADC_IRQHandler+0xf0>
}
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80054fc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80054fe:	06d0      	lsls	r0, r2, #27
 8005500:	d403      	bmi.n	800550a <HAL_ADC_IRQHandler+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005502:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005508:	64e2      	str	r2, [r4, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8005510:	d11f      	bne.n	8005552 <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005514:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8005518:	d002      	beq.n	8005520 <HAL_ADC_IRQHandler+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800551a:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800551c:	0551      	lsls	r1, r2, #21
 800551e:	d418      	bmi.n	8005552 <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005520:	685a      	ldr	r2, [r3, #4]
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005522:	0552      	lsls	r2, r2, #21
 8005524:	d415      	bmi.n	8005552 <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005526:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005528:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800552c:	d111      	bne.n	8005552 <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800552e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8005532:	b972      	cbnz	r2, 8005552 <HAL_ADC_IRQHandler+0x8e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800553a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800553c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800553e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005542:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005544:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005546:	05db      	lsls	r3, r3, #23
 8005548:	d403      	bmi.n	8005552 <HAL_ADC_IRQHandler+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800554a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800554c:	f043 0301 	orr.w	r3, r3, #1
 8005550:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005552:	4620      	mov	r0, r4
 8005554:	f000 f9ea 	bl	800592c <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005558:	f06f 020c 	mvn.w	r2, #12
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	e7bf      	b.n	80054e2 <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005562:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005564:	06d5      	lsls	r5, r2, #27
 8005566:	d403      	bmi.n	8005570 <HAL_ADC_IRQHandler+0xac>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005568:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800556a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556e:	64c2      	str	r2, [r0, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8005576:	d115      	bne.n	80055a4 <HAL_ADC_IRQHandler+0xe0>
 8005578:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800557c:	b992      	cbnz	r2, 80055a4 <HAL_ADC_IRQHandler+0xe0>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800557e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005580:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8005584:	d12f      	bne.n	80055e6 <HAL_ADC_IRQHandler+0x122>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	f022 0220 	bic.w	r2, r2, #32
 800558c:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800558e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005594:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005596:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005598:	04d9      	lsls	r1, r3, #19
 800559a:	d403      	bmi.n	80055a4 <HAL_ADC_IRQHandler+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800559c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_ConvCpltCallback(hadc);
 80055a4:	4620      	mov	r0, r4
 80055a6:	f7ff f90f 	bl	80047c8 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80055aa:	f06f 0212 	mvn.w	r2, #18
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e790      	b.n	80054d6 <HAL_ADC_IRQHandler+0x12>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80055b4:	f06f 0520 	mvn.w	r5, #32
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80055b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
      HAL_ADC_ErrorCallback(hadc);
 80055ba:	4620      	mov	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80055bc:	f042 0202 	orr.w	r2, r2, #2
 80055c0:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80055c2:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80055c4:	f7ff ff6e 	bl	80054a4 <HAL_ADC_ErrorCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	601d      	str	r5, [r3, #0]
}
 80055cc:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80055ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80055d0:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80055d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d6:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80055d8:	f7ff f906 	bl	80047e8 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80055dc:	f06f 0201 	mvn.w	r2, #1
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e783      	b.n	80054ee <HAL_ADC_IRQHandler+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80055e6:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80055e8:	0550      	lsls	r0, r2, #21
 80055ea:	d4db      	bmi.n	80055a4 <HAL_ADC_IRQHandler+0xe0>
 80055ec:	e7cb      	b.n	8005586 <HAL_ADC_IRQHandler+0xc2>
 80055ee:	bf00      	nop

080055f0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 80055f0:	2300      	movs	r3, #0
{
 80055f2:	b530      	push	{r4, r5, lr}
 80055f4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80055f6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80055f8:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	f000 80aa 	beq.w	8005756 <HAL_ADC_ConfigChannel+0x166>
 8005602:	2301      	movs	r3, #1
 8005604:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 8005608:	684b      	ldr	r3, [r1, #4]
 800560a:	4602      	mov	r2, r0
 800560c:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR5,
 800560e:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7)
 8005610:	d924      	bls.n	800565c <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13)
 8005612:	2b0c      	cmp	r3, #12
 8005614:	d866      	bhi.n	80056e4 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SQR4,
 8005616:	f04f 0c1f 	mov.w	ip, #31
 800561a:	680c      	ldr	r4, [r1, #0]
 800561c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005620:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8005622:	3b23      	subs	r3, #35	; 0x23
 8005624:	fa04 fe03 	lsl.w	lr, r4, r3
 8005628:	fa0c f303 	lsl.w	r3, ip, r3
 800562c:	ea25 0303 	bic.w	r3, r5, r3
 8005630:	ea43 030e 	orr.w	r3, r3, lr
 8005634:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel < ADC_CHANNEL_10)
 8005636:	2c09      	cmp	r4, #9
 8005638:	d822      	bhi.n	8005680 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR3,
 800563a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800563e:	2407      	movs	r4, #7
 8005640:	6943      	ldr	r3, [r0, #20]
 8005642:	6889      	ldr	r1, [r1, #8]
 8005644:	40ac      	lsls	r4, r5
 8005646:	40a9      	lsls	r1, r5
 8005648:	ea23 0404 	bic.w	r4, r3, r4
 800564c:	430c      	orrs	r4, r1
 800564e:	6144      	str	r4, [r0, #20]
  __HAL_UNLOCK(hadc);
 8005650:	2300      	movs	r3, #0
  return tmp_hal_status;
 8005652:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8005654:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
}
 8005658:	b003      	add	sp, #12
 800565a:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR5,
 800565c:	f04f 0c1f 	mov.w	ip, #31
 8005660:	680c      	ldr	r4, [r1, #0]
 8005662:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005666:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8005668:	3b05      	subs	r3, #5
 800566a:	fa04 fe03 	lsl.w	lr, r4, r3
 800566e:	fa0c f303 	lsl.w	r3, ip, r3
 8005672:	ea25 0303 	bic.w	r3, r5, r3
 8005676:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel < ADC_CHANNEL_10)
 800567a:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SQR5,
 800567c:	6403      	str	r3, [r0, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 800567e:	d9dc      	bls.n	800563a <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8005680:	2c13      	cmp	r4, #19
 8005682:	d844      	bhi.n	800570e <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 8005684:	f04f 0c07 	mov.w	ip, #7
 8005688:	688d      	ldr	r5, [r1, #8]
 800568a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800568e:	6903      	ldr	r3, [r0, #16]
 8005690:	391e      	subs	r1, #30
 8005692:	408d      	lsls	r5, r1
 8005694:	fa0c f101 	lsl.w	r1, ip, r1
 8005698:	ea23 0301 	bic.w	r3, r3, r1
 800569c:	432b      	orrs	r3, r5
 800569e:	6103      	str	r3, [r0, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80056a0:	f1a4 0310 	sub.w	r3, r4, #16
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d8d3      	bhi.n	8005650 <HAL_ADC_ConfigChannel+0x60>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80056a8:	4b34      	ldr	r3, [pc, #208]	; (800577c <HAL_ADC_ConfigChannel+0x18c>)
 80056aa:	6859      	ldr	r1, [r3, #4]
 80056ac:	0209      	lsls	r1, r1, #8
 80056ae:	d4cf      	bmi.n	8005650 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80056b0:	6859      	ldr	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056b2:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80056b4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80056b8:	6059      	str	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056ba:	d1c9      	bne.n	8005650 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80056bc:	4b30      	ldr	r3, [pc, #192]	; (8005780 <HAL_ADC_ConfigChannel+0x190>)
 80056be:	4931      	ldr	r1, [pc, #196]	; (8005784 <HAL_ADC_ConfigChannel+0x194>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	fba1 1303 	umull	r1, r3, r1, r3
 80056c6:	0c9b      	lsrs	r3, r3, #18
 80056c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80056d0:	9b01      	ldr	r3, [sp, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0bc      	beq.n	8005650 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80056d6:	9b01      	ldr	r3, [sp, #4]
 80056d8:	3b01      	subs	r3, #1
 80056da:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f9      	bne.n	80056d6 <HAL_ADC_ConfigChannel+0xe6>
 80056e2:	e7b5      	b.n	8005650 <HAL_ADC_ConfigChannel+0x60>
  else if (sConfig->Rank < 19)
 80056e4:	2b12      	cmp	r3, #18
 80056e6:	d925      	bls.n	8005734 <HAL_ADC_ConfigChannel+0x144>
  else if (sConfig->Rank < 25)
 80056e8:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 80056ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 80056ee:	d835      	bhi.n	800575c <HAL_ADC_ConfigChannel+0x16c>
    MODIFY_REG(hadc->Instance->SQR2,
 80056f0:	f04f 0c1f 	mov.w	ip, #31
 80056f4:	680c      	ldr	r4, [r1, #0]
 80056f6:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80056f8:	3b5f      	subs	r3, #95	; 0x5f
 80056fa:	fa04 fe03 	lsl.w	lr, r4, r3
 80056fe:	fa0c f303 	lsl.w	r3, ip, r3
 8005702:	ea25 0303 	bic.w	r3, r5, r3
 8005706:	ea43 030e 	orr.w	r3, r3, lr
 800570a:	6343      	str	r3, [r0, #52]	; 0x34
 800570c:	e793      	b.n	8005636 <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800570e:	2c1a      	cmp	r4, #26
 8005710:	d80d      	bhi.n	800572e <HAL_ADC_ConfigChannel+0x13e>
    MODIFY_REG(hadc->Instance->SMPR1,
 8005712:	2507      	movs	r5, #7
 8005714:	6889      	ldr	r1, [r1, #8]
 8005716:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800571a:	68c3      	ldr	r3, [r0, #12]
 800571c:	3c3c      	subs	r4, #60	; 0x3c
 800571e:	40a1      	lsls	r1, r4
 8005720:	fa05 f404 	lsl.w	r4, r5, r4
 8005724:	ea23 0304 	bic.w	r3, r3, r4
 8005728:	430b      	orrs	r3, r1
 800572a:	60c3      	str	r3, [r0, #12]
 800572c:	e790      	b.n	8005650 <HAL_ADC_ConfigChannel+0x60>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800572e:	bf00      	nop
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005730:	680c      	ldr	r4, [r1, #0]
 8005732:	e7b5      	b.n	80056a0 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR3,
 8005734:	f04f 0c1f 	mov.w	ip, #31
 8005738:	680c      	ldr	r4, [r1, #0]
 800573a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800573e:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8005740:	3b41      	subs	r3, #65	; 0x41
 8005742:	fa04 fe03 	lsl.w	lr, r4, r3
 8005746:	fa0c f303 	lsl.w	r3, ip, r3
 800574a:	ea25 0303 	bic.w	r3, r5, r3
 800574e:	ea43 030e 	orr.w	r3, r3, lr
 8005752:	6383      	str	r3, [r0, #56]	; 0x38
 8005754:	e76f      	b.n	8005636 <HAL_ADC_ConfigChannel+0x46>
  __HAL_LOCK(hadc);
 8005756:	2002      	movs	r0, #2
}
 8005758:	b003      	add	sp, #12
 800575a:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR1,
 800575c:	f04f 0c1f 	mov.w	ip, #31
 8005760:	680c      	ldr	r4, [r1, #0]
 8005762:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8005764:	3b7d      	subs	r3, #125	; 0x7d
 8005766:	fa04 fe03 	lsl.w	lr, r4, r3
 800576a:	fa0c f303 	lsl.w	r3, ip, r3
 800576e:	ea25 0303 	bic.w	r3, r5, r3
 8005772:	ea43 030e 	orr.w	r3, r3, lr
 8005776:	6303      	str	r3, [r0, #48]	; 0x30
 8005778:	e75d      	b.n	8005636 <HAL_ADC_ConfigChannel+0x46>
 800577a:	bf00      	nop
 800577c:	40012700 	.word	0x40012700
 8005780:	20000024 	.word	0x20000024
 8005784:	431bde83 	.word	0x431bde83

08005788 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8005788:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800578c:	680a      	ldr	r2, [r1, #0]
  __HAL_LOCK(hadc);
 800578e:	2b01      	cmp	r3, #1
 8005790:	d024      	beq.n	80057dc <HAL_ADC_AnalogWDGConfig+0x54>
 8005792:	2301      	movs	r3, #1
{
 8005794:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8005796:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if(AnalogWDGConfig->ITMode == ENABLE)
 800579a:	7a0b      	ldrb	r3, [r1, #8]
 800579c:	4686      	mov	lr, r0
 800579e:	2b01      	cmp	r3, #1
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80057a0:	6803      	ldr	r3, [r0, #0]
  if(AnalogWDGConfig->ITMode == ENABLE)
 80057a2:	d016      	beq.n	80057d2 <HAL_ADC_AnalogWDGConfig+0x4a>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80057a4:	685c      	ldr	r4, [r3, #4]
 80057a6:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 80057aa:	605c      	str	r4, [r3, #4]
  __HAL_UNLOCK(hadc);
 80057ac:	f04f 0c00 	mov.w	ip, #0
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 80057b0:	6858      	ldr	r0, [r3, #4]
 80057b2:	4c0b      	ldr	r4, [pc, #44]	; (80057e0 <HAL_ADC_AnalogWDGConfig+0x58>)
 80057b4:	4004      	ands	r4, r0
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 80057b6:	6848      	ldr	r0, [r1, #4]
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 80057b8:	605c      	str	r4, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 80057ba:	4302      	orrs	r2, r0
 80057bc:	6858      	ldr	r0, [r3, #4]
 80057be:	4302      	orrs	r2, r0
 80057c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80057c2:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 80057c6:	6298      	str	r0, [r3, #40]	; 0x28
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80057c8:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_UNLOCK(hadc);
 80057ca:	f88e c048 	strb.w	ip, [lr, #72]	; 0x48
  return HAL_OK;
 80057ce:	4660      	mov	r0, ip
}
 80057d0:	bd10      	pop	{r4, pc}
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80057d2:	6858      	ldr	r0, [r3, #4]
 80057d4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80057d8:	6058      	str	r0, [r3, #4]
 80057da:	e7e7      	b.n	80057ac <HAL_ADC_AnalogWDGConfig+0x24>
  __HAL_LOCK(hadc);
 80057dc:	2002      	movs	r0, #2
}
 80057de:	4770      	bx	lr
 80057e0:	ff3ffde0 	.word	0xff3ffde0

080057e4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 80057e4:	2300      	movs	r3, #0
{
 80057e6:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80057e8:	6802      	ldr	r2, [r0, #0]
{
 80057ea:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80057ec:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80057ee:	6813      	ldr	r3, [r2, #0]
 80057f0:	0659      	lsls	r1, r3, #25
 80057f2:	d429      	bmi.n	8005848 <ADC_Enable+0x64>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80057f4:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <ADC_Enable+0x84>)
 80057f6:	4604      	mov	r4, r0
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	481c      	ldr	r0, [pc, #112]	; (800586c <ADC_Enable+0x88>)
    __HAL_ADC_ENABLE(hadc);
 80057fc:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80057fe:	fba0 0303 	umull	r0, r3, r0, r3
 8005802:	0c9b      	lsrs	r3, r3, #18
 8005804:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8005808:	f041 0101 	orr.w	r1, r1, #1
 800580c:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800580e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8005810:	9b01      	ldr	r3, [sp, #4]
 8005812:	b12b      	cbz	r3, 8005820 <ADC_Enable+0x3c>
      wait_loop_index--;
 8005814:	9b01      	ldr	r3, [sp, #4]
 8005816:	3b01      	subs	r3, #1
 8005818:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800581a:	9b01      	ldr	r3, [sp, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f9      	bne.n	8005814 <ADC_Enable+0x30>
    tickstart = HAL_GetTick();    
 8005820:	f7ff fc94 	bl	800514c <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005824:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();    
 8005826:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	065a      	lsls	r2, r3, #25
 800582c:	d40c      	bmi.n	8005848 <ADC_Enable+0x64>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800582e:	f7ff fc8d 	bl	800514c <HAL_GetTick>
 8005832:	1b43      	subs	r3, r0, r5
 8005834:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005836:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8005838:	d903      	bls.n	8005842 <ADC_Enable+0x5e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8005840:	d005      	beq.n	800584e <ADC_Enable+0x6a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	065b      	lsls	r3, r3, #25
 8005846:	d5f2      	bpl.n	800582e <ADC_Enable+0x4a>
  return HAL_OK;
 8005848:	2000      	movs	r0, #0
}
 800584a:	b003      	add	sp, #12
 800584c:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 800584e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005850:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 8005852:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005856:	f043 0310 	orr.w	r3, r3, #16
 800585a:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800585c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800585e:	4303      	orrs	r3, r0
 8005860:	6523      	str	r3, [r4, #80]	; 0x50
}
 8005862:	b003      	add	sp, #12
 8005864:	bd30      	pop	{r4, r5, pc}
 8005866:	bf00      	nop
 8005868:	20000024 	.word	0x20000024
 800586c:	431bde83 	.word	0x431bde83

08005870 <HAL_ADC_Start_DMA>:
{
 8005870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8005874:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 8005878:	2d01      	cmp	r5, #1
 800587a:	d04c      	beq.n	8005916 <HAL_ADC_Start_DMA+0xa6>
 800587c:	2301      	movs	r3, #1
 800587e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8005882:	4604      	mov	r4, r0
 8005884:	4688      	mov	r8, r1
 8005886:	4617      	mov	r7, r2
 8005888:	f7ff ffac 	bl	80057e4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800588c:	4605      	mov	r5, r0
 800588e:	2800      	cmp	r0, #0
 8005890:	d13e      	bne.n	8005910 <HAL_ADC_Start_DMA+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 8005892:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005894:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8005896:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800589a:	f020 0001 	bic.w	r0, r0, #1
 800589e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80058a2:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058a4:	6873      	ldr	r3, [r6, #4]
 80058a6:	055b      	lsls	r3, r3, #21
 80058a8:	d505      	bpl.n	80058b6 <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80058aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80058ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058b4:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 80058b6:	2100      	movs	r1, #0
 80058b8:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80058bc:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80058c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058c4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80058c8:	bf18      	it	ne
 80058ca:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80058cc:	4642      	mov	r2, r8
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80058ce:	bf18      	it	ne
 80058d0:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80058d4:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80058d6:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80058d8:	4f11      	ldr	r7, [pc, #68]	; (8005920 <HAL_ADC_Start_DMA+0xb0>)
 80058da:	6287      	str	r7, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80058dc:	4f11      	ldr	r7, [pc, #68]	; (8005924 <HAL_ADC_Start_DMA+0xb4>)
 80058de:	62c7      	str	r7, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80058e0:	4f11      	ldr	r7, [pc, #68]	; (8005928 <HAL_ADC_Start_DMA+0xb8>)
 80058e2:	6307      	str	r7, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80058e4:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80058e6:	6871      	ldr	r1, [r6, #4]
 80058e8:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80058ec:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80058ee:	68b1      	ldr	r1, [r6, #8]
 80058f0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80058f4:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80058f6:	f106 0158 	add.w	r1, r6, #88	; 0x58
 80058fa:	f000 f98f 	bl	8005c1c <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8005906:	d103      	bne.n	8005910 <HAL_ADC_Start_DMA+0xa0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800590e:	609a      	str	r2, [r3, #8]
}
 8005910:	4628      	mov	r0, r5
 8005912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 8005916:	2502      	movs	r5, #2
}
 8005918:	4628      	mov	r0, r5
 800591a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800591e:	bf00      	nop
 8005920:	08005439 	.word	0x08005439
 8005924:	08005499 	.word	0x08005499
 8005928:	080054a9 	.word	0x080054a9

0800592c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop

08005930 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005930:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005934:	4906      	ldr	r1, [pc, #24]	; (8005950 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005936:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005938:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800593a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800593e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800594c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800594e:	4770      	bx	lr
 8005950:	e000ed00 	.word	0xe000ed00

08005954 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005954:	4b1c      	ldr	r3, [pc, #112]	; (80059c8 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005956:	b500      	push	{lr}
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800595e:	f1c3 0e07 	rsb	lr, r3, #7
 8005962:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005966:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800596a:	bf28      	it	cs
 800596c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005970:	f1bc 0f06 	cmp.w	ip, #6
 8005974:	d91b      	bls.n	80059ae <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005976:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800597a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800597c:	fa0c fc03 	lsl.w	ip, ip, r3
 8005980:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005984:	f04f 3cff 	mov.w	ip, #4294967295
 8005988:	fa0c fc0e 	lsl.w	ip, ip, lr
 800598c:	ea21 010c 	bic.w	r1, r1, ip
 8005990:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005992:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005994:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005998:	db0c      	blt.n	80059b4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800599a:	0109      	lsls	r1, r1, #4
 800599c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80059a0:	b2c9      	uxtb	r1, r1
 80059a2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80059a6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80059aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80059ae:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059b0:	4613      	mov	r3, r2
 80059b2:	e7e7      	b.n	8005984 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <HAL_NVIC_SetPriority+0x78>)
 80059b6:	f000 000f 	and.w	r0, r0, #15
 80059ba:	0109      	lsls	r1, r1, #4
 80059bc:	b2c9      	uxtb	r1, r1
 80059be:	4403      	add	r3, r0
 80059c0:	7619      	strb	r1, [r3, #24]
 80059c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80059c6:	bf00      	nop
 80059c8:	e000ed00 	.word	0xe000ed00
 80059cc:	e000ecfc 	.word	0xe000ecfc

080059d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80059d0:	2800      	cmp	r0, #0
 80059d2:	db07      	blt.n	80059e4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059d4:	2301      	movs	r3, #1
 80059d6:	f000 011f 	and.w	r1, r0, #31
 80059da:	4a03      	ldr	r2, [pc, #12]	; (80059e8 <HAL_NVIC_EnableIRQ+0x18>)
 80059dc:	0940      	lsrs	r0, r0, #5
 80059de:	408b      	lsls	r3, r1
 80059e0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	e000e100 	.word	0xe000e100

080059ec <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80059ec:	2800      	cmp	r0, #0
 80059ee:	db0d      	blt.n	8005a0c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059f0:	2201      	movs	r2, #1
 80059f2:	4907      	ldr	r1, [pc, #28]	; (8005a10 <HAL_NVIC_DisableIRQ+0x24>)
 80059f4:	0943      	lsrs	r3, r0, #5
 80059f6:	f000 001f 	and.w	r0, r0, #31
 80059fa:	3320      	adds	r3, #32
 80059fc:	fa02 f000 	lsl.w	r0, r2, r0
 8005a00:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005a08:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	e000e100 	.word	0xe000e100

08005a14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a14:	3801      	subs	r0, #1
 8005a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005a1a:	d20f      	bcs.n	8005a3c <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a20:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a24:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a26:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a28:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a2a:	4c05      	ldr	r4, [pc, #20]	; (8005a40 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a2c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a2e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a32:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a34:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8005a36:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a38:	6119      	str	r1, [r3, #16]
 8005a3a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005a3c:	2001      	movs	r0, #1
 8005a3e:	4770      	bx	lr
 8005a40:	e000ed00 	.word	0xe000ed00

08005a44 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8005a44:	b188      	cbz	r0, 8005a6a <HAL_DAC_Init+0x26>
{
 8005a46:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005a48:	7903      	ldrb	r3, [r0, #4]
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a50:	b13b      	cbz	r3, 8005a62 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005a52:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a54:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005a56:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a58:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005a5a:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005a5c:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8005a5e:	4618      	mov	r0, r3
}
 8005a60:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005a62:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005a64:	f7ff f8d4 	bl	8004c10 <HAL_DAC_MspInit>
 8005a68:	e7f3      	b.n	8005a52 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8005a6a:	2001      	movs	r0, #1
}
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop

08005a70 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a70:	7942      	ldrb	r2, [r0, #5]
 8005a72:	2a01      	cmp	r2, #1
 8005a74:	d02a      	beq.n	8005acc <HAL_DAC_Start+0x5c>
{
 8005a76:	b410      	push	{r4}
 8005a78:	4603      	mov	r3, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a7a:	2402      	movs	r4, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a80:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8005a82:	6804      	ldr	r4, [r0, #0]
 8005a84:	f001 0c10 	and.w	ip, r1, #16
 8005a88:	fa02 f20c 	lsl.w	r2, r2, ip
 8005a8c:	4322      	orrs	r2, r4
 8005a8e:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 8005a90:	b979      	cbnz	r1, 8005ab2 <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005a92:	6802      	ldr	r2, [r0, #0]
 8005a94:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8005a98:	2a3c      	cmp	r2, #60	; 0x3c
 8005a9a:	d103      	bne.n	8005aa4 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005a9c:	6842      	ldr	r2, [r0, #4]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005aa4:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005aa6:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8005aa8:	715a      	strb	r2, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8005aaa:	7119      	strb	r1, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005aac:	4610      	mov	r0, r2
}
 8005aae:	bc10      	pop	{r4}
 8005ab0:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005ab2:	223c      	movs	r2, #60	; 0x3c
 8005ab4:	6801      	ldr	r1, [r0, #0]
 8005ab6:	fa02 fc0c 	lsl.w	ip, r2, ip
 8005aba:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8005abe:	4561      	cmp	r1, ip
 8005ac0:	d1f0      	bne.n	8005aa4 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005ac2:	6842      	ldr	r2, [r0, #4]
 8005ac4:	f042 0202 	orr.w	r2, r2, #2
 8005ac8:	6042      	str	r2, [r0, #4]
 8005aca:	e7eb      	b.n	8005aa4 <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 8005acc:	2002      	movs	r0, #2
}
 8005ace:	4770      	bx	lr

08005ad0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005ad0:	b410      	push	{r4}
  __IO uint32_t tmp = 0UL;
 8005ad2:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005ad4:	6800      	ldr	r0, [r0, #0]
{
 8005ad6:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8005ad8:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8005ada:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8005adc:	b949      	cbnz	r1, 8005af2 <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005ade:	9901      	ldr	r1, [sp, #4]
 8005ae0:	3108      	adds	r1, #8
 8005ae2:	440a      	add	r2, r1
 8005ae4:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
}
 8005ae6:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8005ae8:	9a01      	ldr	r2, [sp, #4]
 8005aea:	6013      	str	r3, [r2, #0]
}
 8005aec:	b003      	add	sp, #12
 8005aee:	bc10      	pop	{r4}
 8005af0:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005af2:	9901      	ldr	r1, [sp, #4]
 8005af4:	3114      	adds	r1, #20
 8005af6:	440a      	add	r2, r1
 8005af8:	9201      	str	r2, [sp, #4]
 8005afa:	e7f4      	b.n	8005ae6 <HAL_DAC_SetValue+0x16>

08005afc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005afc:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005afe:	7940      	ldrb	r0, [r0, #5]
 8005b00:	2801      	cmp	r0, #1
 8005b02:	d022      	beq.n	8005b4a <HAL_DAC_ConfigChannel+0x4e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b04:	2002      	movs	r0, #2
{
 8005b06:	b570      	push	{r4, r5, r6, lr}
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005b08:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005b0c:	f640 76fe 	movw	r6, #4094	; 0xffe

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b10:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005b14:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b16:	7118      	strb	r0, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8005b18:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005b1e:	f002 0210 	and.w	r2, r2, #16
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005b22:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005b24:	4096      	lsls	r6, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005b26:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b2a:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 = hdac->Instance->CR;
 8005b2e:	6821      	ldr	r1, [r4, #0]

  /* Return function status */
  return HAL_OK;
 8005b30:	4670      	mov	r0, lr
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005b32:	ea21 0106 	bic.w	r1, r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b36:	430a      	orrs	r2, r1
  hdac->Instance->CR = tmpreg1;
 8005b38:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005b3a:	6822      	ldr	r2, [r4, #0]
 8005b3c:	ea22 020c 	bic.w	r2, r2, ip
 8005b40:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8005b42:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8005b44:	f883 e005 	strb.w	lr, [r3, #5]
}
 8005b48:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 8005b4a:	2002      	movs	r0, #2
}
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop

08005b50 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005b50:	b370      	cbz	r0, 8005bb0 <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b52:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b54:	2202      	movs	r2, #2
{
 8005b56:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005b58:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b5c:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b5e:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8005b64:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b66:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8005b68:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
  tmp |=  hdma->Init.Direction        |
 8005b6c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8005b70:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b72:	4910      	ldr	r1, [pc, #64]	; (8005bb4 <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b74:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b76:	4d10      	ldr	r5, [pc, #64]	; (8005bb8 <HAL_DMA_Init+0x68>)
 8005b78:	4401      	add	r1, r0
 8005b7a:	fba5 5101 	umull	r5, r1, r5, r1
 8005b7e:	0909      	lsrs	r1, r1, #4
 8005b80:	0089      	lsls	r1, r1, #2
 8005b82:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b84:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8005b86:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b8a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b8c:	6959      	ldr	r1, [r3, #20]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	6999      	ldr	r1, [r3, #24]
 8005b92:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b94:	69d9      	ldr	r1, [r3, #28]
 8005b96:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8005b98:	4908      	ldr	r1, [pc, #32]	; (8005bbc <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 8005b9a:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 8005b9e:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8005ba0:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ba2:	639c      	str	r4, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ba4:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8005ba8:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 8005bac:	4620      	mov	r0, r4
}
 8005bae:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005bb0:	2001      	movs	r0, #1
}
 8005bb2:	4770      	bx	lr
 8005bb4:	bffd9ff8 	.word	0xbffd9ff8
 8005bb8:	cccccccd 	.word	0xcccccccd
 8005bbc:	40026000 	.word	0x40026000

08005bc0 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8005bc0:	b320      	cbz	r0, 8005c0c <HAL_DMA_DeInit+0x4c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005bc2:	4603      	mov	r3, r0

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bc4:	2101      	movs	r1, #1
{
 8005bc6:	b430      	push	{r4, r5}
  hdma->Instance->CCR = 0U;
 8005bc8:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8005bca:	6805      	ldr	r5, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005bcc:	4810      	ldr	r0, [pc, #64]	; (8005c10 <HAL_DMA_DeInit+0x50>)
  __HAL_DMA_DISABLE(hdma);
 8005bce:	682a      	ldr	r2, [r5, #0]
 8005bd0:	f022 0201 	bic.w	r2, r2, #1
 8005bd4:	602a      	str	r2, [r5, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005bd6:	4a0f      	ldr	r2, [pc, #60]	; (8005c14 <HAL_DMA_DeInit+0x54>)
 8005bd8:	442a      	add	r2, r5
 8005bda:	fba0 0202 	umull	r0, r2, r0, r2
 8005bde:	0912      	lsrs	r2, r2, #4
 8005be0:	0092      	lsls	r2, r2, #2
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005be4:	f002 021c 	and.w	r2, r2, #28
 8005be8:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8005bec:	490a      	ldr	r1, [pc, #40]	; (8005c18 <HAL_DMA_DeInit+0x58>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8005bee:	4620      	mov	r0, r4
  hdma->DmaBaseAddress = DMA1;
 8005bf0:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = 0U;
 8005bf2:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bf4:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bf6:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdma);
 8005bf8:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 8005bfc:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 8005c00:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8005c04:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
}
 8005c08:	bc30      	pop	{r4, r5}
 8005c0a:	4770      	bx	lr
    return HAL_ERROR;
 8005c0c:	2001      	movs	r0, #1
}
 8005c0e:	4770      	bx	lr
 8005c10:	cccccccd 	.word	0xcccccccd
 8005c14:	bffd9ff8 	.word	0xbffd9ff8
 8005c18:	40026000 	.word	0x40026000

08005c1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c1c:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c1e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8005c22:	2801      	cmp	r0, #1
 8005c24:	d042      	beq.n	8005cac <HAL_DMA_Start_IT+0x90>
{
 8005c26:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8005c28:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c2a:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8005c2e:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c32:	42a0      	cmp	r0, r4
 8005c34:	fa5f fe80 	uxtb.w	lr, r0
 8005c38:	d004      	beq.n	8005c44 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c40:	2002      	movs	r0, #2
  }
  return status;
}
 8005c42:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c44:	2002      	movs	r0, #2
 8005c46:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c4a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8005c4c:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c50:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8005c54:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c56:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8005c5a:	f025 0501 	bic.w	r5, r5, #1
 8005c5e:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c60:	f000 001c 	and.w	r0, r0, #28
 8005c64:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8005c68:	fa0e f000 	lsl.w	r0, lr, r0
 8005c6c:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c6e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c70:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8005c74:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8005c76:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c7a:	bf0b      	itete	eq
 8005c7c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005c7e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005c80:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005c82:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8005c84:	b14b      	cbz	r3, 8005c9a <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f043 030e 	orr.w	r3, r3, #14
 8005c8c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005c8e:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c90:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	6023      	str	r3, [r4, #0]
}
 8005c98:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	f023 0304 	bic.w	r3, r3, #4
 8005ca0:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	f043 030a 	orr.w	r3, r3, #10
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	e7f0      	b.n	8005c8e <HAL_DMA_Start_IT+0x72>
  __HAL_LOCK(hdma);
 8005cac:	2002      	movs	r0, #2
}
 8005cae:	4770      	bx	lr

08005cb0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cb0:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8005cb4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cb6:	2a02      	cmp	r2, #2
 8005cb8:	d006      	beq.n	8005cc8 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cba:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8005cbc:	2200      	movs	r2, #0
    return HAL_ERROR;
 8005cbe:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cc0:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8005cc2:	f883 2020 	strb.w	r2, [r3, #32]
}
 8005cc6:	4770      	bx	lr
{
 8005cc8:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cca:	f04f 0e01 	mov.w	lr, #1
    __HAL_UNLOCK(hdma);
 8005cce:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cd2:	6802      	ldr	r2, [r0, #0]
 8005cd4:	6811      	ldr	r1, [r2, #0]
 8005cd6:	f021 010e 	bic.w	r1, r1, #14
 8005cda:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005cdc:	6811      	ldr	r1, [r2, #0]
 8005cde:	f021 0101 	bic.w	r1, r1, #1
 8005ce2:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ce4:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8005ce8:	f002 021c 	and.w	r2, r2, #28
 8005cec:	fa0e f202 	lsl.w	r2, lr, r2
 8005cf0:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005cf2:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8005cf6:	f883 c020 	strb.w	ip, [r3, #32]
    return status;
 8005cfa:	4660      	mov	r0, ip
}
 8005cfc:	f85d fb04 	ldr.w	pc, [sp], #4

08005d00 <HAL_DMA_Abort_IT>:
{
 8005d00:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005d02:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8005d06:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005d08:	2a02      	cmp	r2, #2
 8005d0a:	d003      	beq.n	8005d14 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d0c:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8005d0e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005d12:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d14:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d16:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d1a:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d1c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d1e:	f024 040e 	bic.w	r4, r4, #14
 8005d22:	600c      	str	r4, [r1, #0]
    __HAL_UNLOCK(hdma);
 8005d24:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8005d26:	680d      	ldr	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d28:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 8005d2c:	f025 0501 	bic.w	r5, r5, #1
 8005d30:	600d      	str	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d32:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8005d34:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d36:	fa0c f202 	lsl.w	r2, ip, r2
 8005d3a:	606a      	str	r2, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005d3c:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8005d40:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8005d44:	b111      	cbz	r1, 8005d4c <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8005d46:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8005d48:	4620      	mov	r0, r4
}
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005d4c:	4608      	mov	r0, r1
}
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}

08005d50 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d50:	2204      	movs	r2, #4
{
 8005d52:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d54:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d56:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d58:	f003 031c 	and.w	r3, r3, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d5c:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005d5e:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d60:	409a      	lsls	r2, r3
 8005d62:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8005d64:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d66:	d00e      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x36>
 8005d68:	f014 0f04 	tst.w	r4, #4
 8005d6c:	d00b      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	069b      	lsls	r3, r3, #26
 8005d72:	d403      	bmi.n	8005d7c <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	f023 0304 	bic.w	r3, r3, #4
 8005d7a:	602b      	str	r3, [r5, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005d7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005d7e:	6072      	str	r2, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005d80:	b1cb      	cbz	r3, 8005db6 <HAL_DMA_IRQHandler+0x66>
}
 8005d82:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8005d84:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005d86:	2202      	movs	r2, #2
 8005d88:	409a      	lsls	r2, r3
 8005d8a:	420a      	tst	r2, r1
 8005d8c:	d015      	beq.n	8005dba <HAL_DMA_IRQHandler+0x6a>
 8005d8e:	f014 0f02 	tst.w	r4, #2
 8005d92:	d012      	beq.n	8005dba <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d94:	682b      	ldr	r3, [r5, #0]
 8005d96:	0699      	lsls	r1, r3, #26
 8005d98:	d406      	bmi.n	8005da8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d9a:	682b      	ldr	r3, [r5, #0]
 8005d9c:	f023 030a 	bic.w	r3, r3, #10
 8005da0:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8005da8:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 8005daa:	6a83      	ldr	r3, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005dac:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8005dae:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e5      	bne.n	8005d82 <HAL_DMA_IRQHandler+0x32>
}
 8005db6:	bc70      	pop	{r4, r5, r6}
 8005db8:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005dba:	2208      	movs	r2, #8
 8005dbc:	409a      	lsls	r2, r3
 8005dbe:	420a      	tst	r2, r1
 8005dc0:	d0f9      	beq.n	8005db6 <HAL_DMA_IRQHandler+0x66>
 8005dc2:	0722      	lsls	r2, r4, #28
 8005dc4:	d5f7      	bpl.n	8005db6 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dc6:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 8005dc8:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dca:	f022 020e 	bic.w	r2, r2, #14
 8005dce:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005dd0:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8005dd2:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dda:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8005ddc:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 8005de0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 8005de4:	2900      	cmp	r1, #0
 8005de6:	d0e6      	beq.n	8005db6 <HAL_DMA_IRQHandler+0x66>
}
 8005de8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005dea:	4708      	bx	r1

08005dec <HAL_EXTI_SetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d041      	beq.n	8005e74 <HAL_EXTI_SetConfigLine+0x88>
 8005df0:	2900      	cmp	r1, #0
 8005df2:	d03f      	beq.n	8005e74 <HAL_EXTI_SetConfigLine+0x88>
  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
  maskline = (1uL << linepos);
 8005df4:	f04f 0c01 	mov.w	ip, #1
  hexti->Line = pExtiConfig->Line;
 8005df8:	680b      	ldr	r3, [r1, #0]
{
 8005dfa:	b430      	push	{r4, r5}
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8005dfc:	f003 021f 	and.w	r2, r3, #31
  hexti->Line = pExtiConfig->Line;
 8005e00:	6003      	str	r3, [r0, #0]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8005e02:	0198      	lsls	r0, r3, #6
  maskline = (1uL << linepos);
 8005e04:	fa0c fc02 	lsl.w	ip, ip, r2
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8005e08:	d519      	bpl.n	8005e3e <HAL_EXTI_SetConfigLine+0x52>

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
    {
      EXTI->RTSR |= maskline;
 8005e0a:	4d25      	ldr	r5, [pc, #148]	; (8005ea0 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8005e0c:	6888      	ldr	r0, [r1, #8]
      EXTI->RTSR |= maskline;
 8005e0e:	68ac      	ldr	r4, [r5, #8]
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8005e10:	f010 0f01 	tst.w	r0, #1
      EXTI->RTSR |= maskline;
 8005e14:	bf14      	ite	ne
 8005e16:	ea44 040c 	orrne.w	r4, r4, ip
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8005e1a:	ea24 040c 	biceq.w	r4, r4, ip
 8005e1e:	60ac      	str	r4, [r5, #8]

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
    {
      EXTI->FTSR |= maskline;
 8005e20:	4c1f      	ldr	r4, [pc, #124]	; (8005ea0 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8005e22:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR |= maskline;
 8005e26:	68e0      	ldr	r0, [r4, #12]
 8005e28:	bf14      	ite	ne
 8005e2a:	ea40 000c 	orrne.w	r0, r0, ip
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8005e2e:	ea20 000c 	biceq.w	r0, r0, ip
 8005e32:	60e0      	str	r0, [r4, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8005e34:	f003 60c0 	and.w	r0, r3, #100663296	; 0x6000000
 8005e38:	f1b0 6fc0 	cmp.w	r0, #100663296	; 0x6000000
 8005e3c:	d01c      	beq.n	8005e78 <HAL_EXTI_SetConfigLine+0x8c>

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
  {
    EXTI->IMR |= maskline;
 8005e3e:	4a18      	ldr	r2, [pc, #96]	; (8005ea0 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8005e40:	6848      	ldr	r0, [r1, #4]
    EXTI->IMR |= maskline;
 8005e42:	6813      	ldr	r3, [r2, #0]
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8005e44:	07c1      	lsls	r1, r0, #31
    EXTI->IMR |= maskline;
 8005e46:	bf4c      	ite	mi
 8005e48:	ea43 030c 	orrmi.w	r3, r3, ip
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8005e4c:	ea23 030c 	bicpl.w	r3, r3, ip
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8005e50:	f010 0002 	ands.w	r0, r0, #2
    EXTI->IMR &= ~maskline;
 8005e54:	6013      	str	r3, [r2, #0]
  {
    EXTI->EMR |= maskline;
 8005e56:	4a12      	ldr	r2, [pc, #72]	; (8005ea0 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8005e58:	d105      	bne.n	8005e66 <HAL_EXTI_SetConfigLine+0x7a>
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
}
 8005e5a:	bc30      	pop	{r4, r5}
    EXTI->EMR &= ~maskline;
 8005e5c:	6853      	ldr	r3, [r2, #4]
 8005e5e:	ea23 030c 	bic.w	r3, r3, ip
 8005e62:	6053      	str	r3, [r2, #4]
}
 8005e64:	4770      	bx	lr
    EXTI->EMR |= maskline;
 8005e66:	6853      	ldr	r3, [r2, #4]
  return HAL_OK;
 8005e68:	2000      	movs	r0, #0
}
 8005e6a:	bc30      	pop	{r4, r5}
    EXTI->EMR |= maskline;
 8005e6c:	ea43 030c 	orr.w	r3, r3, ip
 8005e70:	6053      	str	r3, [r2, #4]
}
 8005e72:	4770      	bx	lr
    return HAL_ERROR;
 8005e74:	2001      	movs	r0, #1
}
 8005e76:	4770      	bx	lr
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005e78:	250f      	movs	r5, #15
 8005e7a:	f002 021c 	and.w	r2, r2, #28
 8005e7e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005e82:	68c8      	ldr	r0, [r1, #12]
 8005e84:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005e88:	f003 0303 	and.w	r3, r3, #3
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8005e8c:	6894      	ldr	r4, [r2, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005e8e:	009b      	lsls	r3, r3, #2
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005e90:	4098      	lsls	r0, r3
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005e92:	fa05 f303 	lsl.w	r3, r5, r3
 8005e96:	ea24 0303 	bic.w	r3, r4, r3
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005e9a:	4318      	orrs	r0, r3
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8005e9c:	6090      	str	r0, [r2, #8]
 8005e9e:	e7ce      	b.n	8005e3e <HAL_EXTI_SetConfigLine+0x52>
 8005ea0:	40010400 	.word	0x40010400

08005ea4 <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	6802      	ldr	r2, [r0, #0]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8005ea8:	4902      	ldr	r1, [pc, #8]	; (8005eb4 <HAL_EXTI_GenerateSWI+0x10>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005eaa:	f002 021f 	and.w	r2, r2, #31
 8005eae:	4093      	lsls	r3, r2
  EXTI->SWIER = maskline;
 8005eb0:	610b      	str	r3, [r1, #16]
}
 8005eb2:	4770      	bx	lr
 8005eb4:	40010400 	.word	0x40010400

08005eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005ebc:	680c      	ldr	r4, [r1, #0]
{
 8005ebe:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8005ec0:	2c00      	cmp	r4, #0
 8005ec2:	d07c      	beq.n	8005fbe <HAL_GPIO_Init+0x106>
 8005ec4:	f04f 0e00 	mov.w	lr, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005ec8:	f04f 0b01 	mov.w	fp, #1
  uint32_t position = 0x00;
 8005ecc:	4673      	mov	r3, lr
 8005ece:	468c      	mov	ip, r1
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005ed0:	fa0b f503 	lsl.w	r5, fp, r3

    if (iocurrent)
 8005ed4:	ea15 0a04 	ands.w	sl, r5, r4
 8005ed8:	d06b      	beq.n	8005fb2 <HAL_GPIO_Init+0xfa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005eda:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8005ede:	f001 0203 	and.w	r2, r1, #3
 8005ee2:	1e57      	subs	r7, r2, #1
 8005ee4:	2f01      	cmp	r7, #1
 8005ee6:	d96d      	bls.n	8005fc4 <HAL_GPIO_Init+0x10c>
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ee8:	2a03      	cmp	r2, #3
 8005eea:	f040 80ae 	bne.w	800604a <HAL_GPIO_Init+0x192>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005eee:	fa02 f20e 	lsl.w	r2, r2, lr
 8005ef2:	43d7      	mvns	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ef4:	6805      	ldr	r5, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ef6:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8005efa:	ea07 0705 	and.w	r7, r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005efe:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 8005f02:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f04:	d055      	beq.n	8005fb2 <HAL_GPIO_Init+0xfa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8005f06:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f08:	4d5a      	ldr	r5, [pc, #360]	; (8006074 <HAL_GPIO_Init+0x1bc>)
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8005f0a:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f0e:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8005f10:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	622a      	str	r2, [r5, #32]
 8005f18:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8005f1a:	fa06 f807 	lsl.w	r8, r6, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f1e:	f002 0201 	and.w	r2, r2, #1
 8005f22:	9203      	str	r2, [sp, #12]
 8005f24:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8005f26:	f023 0203 	bic.w	r2, r3, #3
 8005f2a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005f2e:	4e52      	ldr	r6, [pc, #328]	; (8006078 <HAL_GPIO_Init+0x1c0>)
 8005f30:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2];
 8005f34:	6895      	ldr	r5, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005f36:	42b0      	cmp	r0, r6
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8005f38:	ea25 0508 	bic.w	r5, r5, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005f3c:	d015      	beq.n	8005f6a <HAL_GPIO_Init+0xb2>
 8005f3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005f42:	42b0      	cmp	r0, r6
 8005f44:	f000 808c 	beq.w	8006060 <HAL_GPIO_Init+0x1a8>
 8005f48:	4e4c      	ldr	r6, [pc, #304]	; (800607c <HAL_GPIO_Init+0x1c4>)
 8005f4a:	42b0      	cmp	r0, r6
 8005f4c:	f000 808c 	beq.w	8006068 <HAL_GPIO_Init+0x1b0>
 8005f50:	4e4b      	ldr	r6, [pc, #300]	; (8006080 <HAL_GPIO_Init+0x1c8>)
 8005f52:	42b0      	cmp	r0, r6
 8005f54:	d07e      	beq.n	8006054 <HAL_GPIO_Init+0x19c>
 8005f56:	4e4b      	ldr	r6, [pc, #300]	; (8006084 <HAL_GPIO_Init+0x1cc>)
 8005f58:	42b0      	cmp	r0, r6
 8005f5a:	bf0c      	ite	eq
 8005f5c:	f04f 0804 	moveq.w	r8, #4
 8005f60:	f04f 0805 	movne.w	r8, #5
 8005f64:	fa08 f707 	lsl.w	r7, r8, r7
 8005f68:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005f6a:	ea6f 070a 	mvn.w	r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8005f6e:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8005f70:	4a45      	ldr	r2, [pc, #276]	; (8006088 <HAL_GPIO_Init+0x1d0>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f72:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 8005f74:	6812      	ldr	r2, [r2, #0]
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->IMR = temp;
 8005f76:	4d44      	ldr	r5, [pc, #272]	; (8006088 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005f78:	bf54      	ite	pl
 8005f7a:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8005f7c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 8005f80:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 8005f82:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f84:	038a      	lsls	r2, r1, #14
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->EMR = temp;
 8005f86:	4a40      	ldr	r2, [pc, #256]	; (8006088 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005f88:	bf54      	ite	pl
 8005f8a:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8005f8c:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR = temp;
 8005f90:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f92:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f94:	02ce      	lsls	r6, r1, #11
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->RTSR = temp;
 8005f96:	4a3c      	ldr	r2, [pc, #240]	; (8006088 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005f98:	bf54      	ite	pl
 8005f9a:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8005f9c:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR = temp;
 8005fa0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8005fa2:	68d2      	ldr	r2, [r2, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fa4:	0289      	lsls	r1, r1, #10
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->FTSR = temp;
 8005fa6:	4938      	ldr	r1, [pc, #224]	; (8006088 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005fa8:	bf54      	ite	pl
 8005faa:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8005fac:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 8005fb0:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 8005fb2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8005fb4:	fa34 f203 	lsrs.w	r2, r4, r3
 8005fb8:	f10e 0e02 	add.w	lr, lr, #2
 8005fbc:	d188      	bne.n	8005ed0 <HAL_GPIO_Init+0x18>
  }
}
 8005fbe:	b005      	add	sp, #20
 8005fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005fc4:	f04f 0903 	mov.w	r9, #3
        temp = GPIOx->OSPEEDR;
 8005fc8:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8005fca:	f8dc 700c 	ldr.w	r7, [ip, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005fce:	fa09 f90e 	lsl.w	r9, r9, lr
 8005fd2:	ea26 0609 	bic.w	r6, r6, r9
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8005fd6:	fa07 f70e 	lsl.w	r7, r7, lr
 8005fda:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 8005fdc:	6087      	str	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005fde:	ea6f 0709 	mvn.w	r7, r9
        temp = GPIOx->OTYPER;
 8005fe2:	f8d0 9004 	ldr.w	r9, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fe6:	f3c1 1800 	ubfx	r8, r1, #4, #1
 8005fea:	fa08 f803 	lsl.w	r8, r8, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8005fee:	ea29 0505 	bic.w	r5, r9, r5
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ff2:	ea48 0505 	orr.w	r5, r8, r5
        GPIOx->OTYPER = temp;
 8005ff6:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8005ff8:	68c5      	ldr	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ffa:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8005ffc:	ea05 0807 	and.w	r8, r5, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8006000:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8006004:	fa02 f20e 	lsl.w	r2, r2, lr
 8006008:	fa05 f50e 	lsl.w	r5, r5, lr
 800600c:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->PUPDR = temp;
 8006010:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006012:	f47f af6f 	bne.w	8005ef4 <HAL_GPIO_Init+0x3c>
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8006016:	f8dc 5010 	ldr.w	r5, [ip, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800601a:	f003 0807 	and.w	r8, r3, #7
 800601e:	ea4f 0888 	mov.w	r8, r8, lsl #2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8006022:	fa05 f508 	lsl.w	r5, r5, r8
 8006026:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8006028:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3];
 800602a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800602e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8006032:	f8d9 6020 	ldr.w	r6, [r9, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8006036:	fa05 f808 	lsl.w	r8, r5, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800603a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800603c:	ea26 0808 	bic.w	r8, r6, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8006040:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->AFR[position >> 3] = temp;
 8006044:	f8c9 5020 	str.w	r5, [r9, #32]
 8006048:	e754      	b.n	8005ef4 <HAL_GPIO_Init+0x3c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800604a:	2703      	movs	r7, #3
 800604c:	fa07 f70e 	lsl.w	r7, r7, lr
 8006050:	43ff      	mvns	r7, r7
 8006052:	e7d1      	b.n	8005ff8 <HAL_GPIO_Init+0x140>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006054:	f04f 0803 	mov.w	r8, #3
 8006058:	fa08 f707 	lsl.w	r7, r8, r7
 800605c:	433d      	orrs	r5, r7
 800605e:	e784      	b.n	8005f6a <HAL_GPIO_Init+0xb2>
 8006060:	fa0b f707 	lsl.w	r7, fp, r7
 8006064:	433d      	orrs	r5, r7
 8006066:	e780      	b.n	8005f6a <HAL_GPIO_Init+0xb2>
 8006068:	f04f 0802 	mov.w	r8, #2
 800606c:	fa08 f707 	lsl.w	r7, r8, r7
 8006070:	433d      	orrs	r5, r7
 8006072:	e77a      	b.n	8005f6a <HAL_GPIO_Init+0xb2>
 8006074:	40023800 	.word	0x40023800
 8006078:	40020000 	.word	0x40020000
 800607c:	40020800 	.word	0x40020800
 8006080:	40020c00 	.word	0x40020c00
 8006084:	40021000 	.word	0x40021000
 8006088:	40010400 	.word	0x40010400

0800608c <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800608c:	2900      	cmp	r1, #0
 800608e:	f000 8083 	beq.w	8006198 <HAL_GPIO_DeInit+0x10c>
{
 8006092:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 8006096:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8006098:	2701      	movs	r7, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800609a:	f04f 090f 	mov.w	r9, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 800609e:	f04f 0a03 	mov.w	sl, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80060a2:	4e3e      	ldr	r6, [pc, #248]	; (800619c <HAL_GPIO_DeInit+0x110>)
 80060a4:	e051      	b.n	800614a <HAL_GPIO_DeInit+0xbe>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80060a6:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80060aa:	4558      	cmp	r0, fp
 80060ac:	d069      	beq.n	8006182 <HAL_GPIO_DeInit+0xf6>
 80060ae:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 80061a0 <HAL_GPIO_DeInit+0x114>
 80060b2:	4558      	cmp	r0, fp
 80060b4:	d068      	beq.n	8006188 <HAL_GPIO_DeInit+0xfc>
 80060b6:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 80061a4 <HAL_GPIO_DeInit+0x118>
 80060ba:	4558      	cmp	r0, fp
 80060bc:	d069      	beq.n	8006192 <HAL_GPIO_DeInit+0x106>
 80060be:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 80061a8 <HAL_GPIO_DeInit+0x11c>
 80060c2:	4558      	cmp	r0, fp
 80060c4:	bf14      	ite	ne
 80060c6:	f04f 0b05 	movne.w	fp, #5
 80060ca:	f04f 0b04 	moveq.w	fp, #4
 80060ce:	fa0b f404 	lsl.w	r4, fp, r4
 80060d2:	45a4      	cmp	ip, r4
 80060d4:	d113      	bne.n	80060fe <HAL_GPIO_DeInit+0x72>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80060d6:	6834      	ldr	r4, [r6, #0]
 80060d8:	ea24 040e 	bic.w	r4, r4, lr
 80060dc:	6034      	str	r4, [r6, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80060de:	6874      	ldr	r4, [r6, #4]
 80060e0:	ea24 040e 	bic.w	r4, r4, lr
 80060e4:	6074      	str	r4, [r6, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80060e6:	68b4      	ldr	r4, [r6, #8]
 80060e8:	ea24 040e 	bic.w	r4, r4, lr
 80060ec:	60b4      	str	r4, [r6, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80060ee:	68f4      	ldr	r4, [r6, #12]
 80060f0:	ea24 040e 	bic.w	r4, r4, lr
 80060f4:	60f4      	str	r4, [r6, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80060f6:	68ac      	ldr	r4, [r5, #8]
 80060f8:	ea24 0408 	bic.w	r4, r4, r8
 80060fc:	60ac      	str	r4, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80060fe:	6805      	ldr	r5, [r0, #0]
 8006100:	005c      	lsls	r4, r3, #1
 8006102:	fa0a f404 	lsl.w	r4, sl, r4
 8006106:	ea25 0504 	bic.w	r5, r5, r4

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800610a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 800610e:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8006110:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006114:	f003 0507 	and.w	r5, r3, #7
 8006118:	f8dc e020 	ldr.w	lr, [ip, #32]
 800611c:	00ad      	lsls	r5, r5, #2
 800611e:	fa09 f505 	lsl.w	r5, r9, r5
 8006122:	ea2e 0505 	bic.w	r5, lr, r5
 8006126:	f8cc 5020 	str.w	r5, [ip, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 800612a:	68c5      	ldr	r5, [r0, #12]
 800612c:	ea25 0504 	bic.w	r5, r5, r4
 8006130:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8006132:	6845      	ldr	r5, [r0, #4]
 8006134:	ea25 0202 	bic.w	r2, r5, r2
 8006138:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800613a:	6882      	ldr	r2, [r0, #8]
 800613c:	ea22 0404 	bic.w	r4, r2, r4
 8006140:	6084      	str	r4, [r0, #8]
    }

    position++;
 8006142:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 8006144:	fa31 f203 	lsrs.w	r2, r1, r3
 8006148:	d019      	beq.n	800617e <HAL_GPIO_DeInit+0xf2>
    iocurrent = (GPIO_Pin) & (1U << position);
 800614a:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 800614e:	ea12 0e01 	ands.w	lr, r2, r1
 8006152:	d0f6      	beq.n	8006142 <HAL_GPIO_DeInit+0xb6>
      tmp = SYSCFG->EXTICR[position >> 2];
 8006154:	f023 0503 	bic.w	r5, r3, #3
 8006158:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800615c:	f8df b04c 	ldr.w	fp, [pc, #76]	; 80061ac <HAL_GPIO_DeInit+0x120>
 8006160:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8006164:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8006168:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800616c:	00a4      	lsls	r4, r4, #2
 800616e:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8006172:	4558      	cmp	r0, fp
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8006174:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8006178:	d195      	bne.n	80060a6 <HAL_GPIO_DeInit+0x1a>
 800617a:	2400      	movs	r4, #0
 800617c:	e7a9      	b.n	80060d2 <HAL_GPIO_DeInit+0x46>
  }
}
 800617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8006182:	fa07 f404 	lsl.w	r4, r7, r4
 8006186:	e7a4      	b.n	80060d2 <HAL_GPIO_DeInit+0x46>
 8006188:	f04f 0b02 	mov.w	fp, #2
 800618c:	fa0b f404 	lsl.w	r4, fp, r4
 8006190:	e79f      	b.n	80060d2 <HAL_GPIO_DeInit+0x46>
 8006192:	fa0a f404 	lsl.w	r4, sl, r4
 8006196:	e79c      	b.n	80060d2 <HAL_GPIO_DeInit+0x46>
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40010400 	.word	0x40010400
 80061a0:	40020800 	.word	0x40020800
 80061a4:	40020c00 	.word	0x40020c00
 80061a8:	40021000 	.word	0x40021000
 80061ac:	40020000 	.word	0x40020000

080061b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061b0:	6903      	ldr	r3, [r0, #16]
 80061b2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80061b4:	bf14      	ite	ne
 80061b6:	2001      	movne	r0, #1
 80061b8:	2000      	moveq	r0, #0
 80061ba:	4770      	bx	lr

080061bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061bc:	b902      	cbnz	r2, 80061c0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80061be:	0409      	lsls	r1, r1, #16
 80061c0:	6181      	str	r1, [r0, #24]
  }
}
 80061c2:	4770      	bx	lr

080061c4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80061c4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80061c6:	ea01 0203 	and.w	r2, r1, r3
 80061ca:	ea21 0103 	bic.w	r1, r1, r3
 80061ce:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80061d2:	6181      	str	r1, [r0, #24]
}
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop

080061d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80061d8:	4a04      	ldr	r2, [pc, #16]	; (80061ec <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80061da:	6951      	ldr	r1, [r2, #20]
 80061dc:	4201      	tst	r1, r0
 80061de:	d100      	bne.n	80061e2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80061e0:	4770      	bx	lr
{
 80061e2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061e4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061e6:	f7fe f969 	bl	80044bc <HAL_GPIO_EXTI_Callback>
  }
}
 80061ea:	bd08      	pop	{r3, pc}
 80061ec:	40010400 	.word	0x40010400

080061f0 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061f0:	2800      	cmp	r0, #0
 80061f2:	f000 80b9 	beq.w	8006368 <HAL_I2C_Init+0x178>
{
 80061f6:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80061fc:	4604      	mov	r4, r0
 80061fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 8098 	beq.w	8006338 <HAL_I2C_Init+0x148>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006208:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800620a:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800620c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	f022 0201 	bic.w	r2, r2, #1
 8006216:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800621e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006228:	f001 fd1c 	bl	8007c64 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800622c:	6863      	ldr	r3, [r4, #4]
 800622e:	494f      	ldr	r1, [pc, #316]	; (800636c <HAL_I2C_Init+0x17c>)
 8006230:	428b      	cmp	r3, r1
 8006232:	d84f      	bhi.n	80062d4 <HAL_I2C_Init+0xe4>
 8006234:	4a4e      	ldr	r2, [pc, #312]	; (8006370 <HAL_I2C_Init+0x180>)
 8006236:	4290      	cmp	r0, r2
 8006238:	d97c      	bls.n	8006334 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800623a:	4d4e      	ldr	r5, [pc, #312]	; (8006374 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800623c:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800623e:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006242:	1e43      	subs	r3, r0, #1
 8006244:	fbb3 f3f2 	udiv	r3, r3, r2
 8006248:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800624c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800624e:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006250:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006252:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006256:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800625a:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 800625e:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006260:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006262:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006264:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006268:	ea41 010c 	orr.w	r1, r1, ip
 800626c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800626e:	69d1      	ldr	r1, [r2, #28]
 8006270:	ea13 0f0e 	tst.w	r3, lr
 8006274:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8006278:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800627c:	d161      	bne.n	8006342 <HAL_I2C_Init+0x152>
 800627e:	2304      	movs	r3, #4
 8006280:	430b      	orrs	r3, r1
 8006282:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006284:	6811      	ldr	r1, [r2, #0]
 8006286:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800628a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800628e:	4303      	orrs	r3, r0
 8006290:	430b      	orrs	r3, r1
 8006292:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006294:	6891      	ldr	r1, [r2, #8]
 8006296:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800629a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800629e:	4303      	orrs	r3, r0
 80062a0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80062a4:	430b      	orrs	r3, r1
 80062a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062a8:	68d0      	ldr	r0, [r2, #12]
 80062aa:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80062ae:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80062b2:	430b      	orrs	r3, r1
 80062b4:	4303      	orrs	r3, r0
 80062b6:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062b8:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ba:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 80062bc:	f043 0301 	orr.w	r3, r3, #1
 80062c0:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80062c2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062c4:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062ca:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062cc:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e

  return HAL_OK;
 80062d0:	4608      	mov	r0, r1
}
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062d4:	4a28      	ldr	r2, [pc, #160]	; (8006378 <HAL_I2C_Init+0x188>)
 80062d6:	4290      	cmp	r0, r2
 80062d8:	d92c      	bls.n	8006334 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80062da:	4d26      	ldr	r5, [pc, #152]	; (8006374 <HAL_I2C_Init+0x184>)
 80062dc:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80062e4:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062e8:	fb02 f101 	mul.w	r1, r2, r1
 80062ec:	4d23      	ldr	r5, [pc, #140]	; (800637c <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062ee:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062f0:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062f4:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062f6:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062f8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80062fc:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8006300:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006302:	6a15      	ldr	r5, [r2, #32]
 8006304:	3101      	adds	r1, #1
 8006306:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800630a:	4329      	orrs	r1, r5
 800630c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800630e:	69d1      	ldr	r1, [r2, #28]
 8006310:	68a5      	ldr	r5, [r4, #8]
 8006312:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8006316:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800631a:	b9ad      	cbnz	r5, 8006348 <HAL_I2C_Init+0x158>
 800631c:	3801      	subs	r0, #1
 800631e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006322:	fbb0 f3f3 	udiv	r3, r0, r3
 8006326:	3301      	adds	r3, #1
 8006328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800632c:	b1d3      	cbz	r3, 8006364 <HAL_I2C_Init+0x174>
 800632e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006332:	e7a5      	b.n	8006280 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8006334:	2001      	movs	r0, #1
}
 8006336:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006338:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800633c:	f7fe fc9a 	bl	8004c74 <HAL_I2C_MspInit>
 8006340:	e762      	b.n	8006208 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006346:	e79b      	b.n	8006280 <HAL_I2C_Init+0x90>
 8006348:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800634c:	3801      	subs	r0, #1
 800634e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006352:	fbb0 f3f3 	udiv	r3, r0, r3
 8006356:	3301      	adds	r3, #1
 8006358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800635c:	b113      	cbz	r3, 8006364 <HAL_I2C_Init+0x174>
 800635e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006362:	e78d      	b.n	8006280 <HAL_I2C_Init+0x90>
 8006364:	2301      	movs	r3, #1
 8006366:	e78b      	b.n	8006280 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8006368:	2001      	movs	r0, #1
}
 800636a:	4770      	bx	lr
 800636c:	000186a0 	.word	0x000186a0
 8006370:	001e847f 	.word	0x001e847f
 8006374:	431bde83 	.word	0x431bde83
 8006378:	003d08ff 	.word	0x003d08ff
 800637c:	10624dd3 	.word	0x10624dd3

08006380 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	4605      	mov	r5, r0
 8006386:	b083      	sub	sp, #12
 8006388:	4699      	mov	r9, r3
 800638a:	4688      	mov	r8, r1
 800638c:	4692      	mov	sl, r2
 800638e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006390:	f7fe fedc 	bl	800514c <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006394:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8006398:	2b20      	cmp	r3, #32
 800639a:	d003      	beq.n	80063a4 <HAL_I2C_Master_Transmit+0x24>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800639c:	2002      	movs	r0, #2
  }
}
 800639e:	b003      	add	sp, #12
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	4606      	mov	r6, r0
 80063a6:	e005      	b.n	80063b4 <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a8:	f7fe fed0 	bl	800514c <HAL_GetTick>
 80063ac:	1b80      	subs	r0, r0, r6
 80063ae:	2819      	cmp	r0, #25
 80063b0:	f200 80f8 	bhi.w	80065a4 <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063b4:	682c      	ldr	r4, [r5, #0]
 80063b6:	69a3      	ldr	r3, [r4, #24]
 80063b8:	ea6f 0c03 	mvn.w	ip, r3
 80063bc:	f01c 0b02 	ands.w	fp, ip, #2
 80063c0:	d0f2      	beq.n	80063a8 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 80063c2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d0e8      	beq.n	800639c <HAL_I2C_Master_Transmit+0x1c>
 80063ca:	2301      	movs	r3, #1
 80063cc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	07d9      	lsls	r1, r3, #31
 80063d4:	d571      	bpl.n	80064ba <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80063d6:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80063d8:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80063da:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063e2:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80063e4:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80063e8:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80063ec:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 80063ee:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063f2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063f4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80063f8:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80063fa:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80063fe:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006402:	2b08      	cmp	r3, #8
 8006404:	d006      	beq.n	8006414 <HAL_I2C_Master_Transmit+0x94>
 8006406:	2b01      	cmp	r3, #1
 8006408:	d004      	beq.n	8006414 <HAL_I2C_Master_Transmit+0x94>
 800640a:	4293      	cmp	r3, r2
 800640c:	d002      	beq.n	8006414 <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800640e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006410:	2b12      	cmp	r3, #18
 8006412:	d103      	bne.n	800641c <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800641a:	6023      	str	r3, [r4, #0]
 800641c:	1c7b      	adds	r3, r7, #1
 800641e:	d13e      	bne.n	800649e <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006420:	6963      	ldr	r3, [r4, #20]
 8006422:	07d8      	lsls	r0, r3, #31
 8006424:	d5fc      	bpl.n	8006420 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006426:	692b      	ldr	r3, [r5, #16]
 8006428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800642c:	d14a      	bne.n	80064c4 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800642e:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8006432:	6121      	str	r1, [r4, #16]
 8006434:	1c78      	adds	r0, r7, #1
 8006436:	d004      	beq.n	8006442 <HAL_I2C_Master_Transmit+0xc2>
 8006438:	e0dd      	b.n	80065f6 <HAL_I2C_Master_Transmit+0x276>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800643a:	6963      	ldr	r3, [r4, #20]
 800643c:	055a      	lsls	r2, r3, #21
 800643e:	f100 80c2 	bmi.w	80065c6 <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006442:	6963      	ldr	r3, [r4, #20]
 8006444:	0799      	lsls	r1, r3, #30
 8006446:	d5f8      	bpl.n	800643a <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006448:	2200      	movs	r2, #0
 800644a:	9201      	str	r2, [sp, #4]
 800644c:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 800644e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006450:	9201      	str	r2, [sp, #4]
 8006452:	69a2      	ldr	r2, [r4, #24]
 8006454:	9201      	str	r2, [sp, #4]
 8006456:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8006458:	2b00      	cmp	r3, #0
 800645a:	d075      	beq.n	8006548 <HAL_I2C_Master_Transmit+0x1c8>
 800645c:	1c79      	adds	r1, r7, #1
 800645e:	f040 8081 	bne.w	8006564 <HAL_I2C_Master_Transmit+0x1e4>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006462:	6963      	ldr	r3, [r4, #20]
 8006464:	061a      	lsls	r2, r3, #24
 8006466:	d441      	bmi.n	80064ec <HAL_I2C_Master_Transmit+0x16c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006468:	6963      	ldr	r3, [r4, #20]
 800646a:	055b      	lsls	r3, r3, #21
 800646c:	d5f9      	bpl.n	8006462 <HAL_I2C_Master_Transmit+0xe2>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 800646e:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8006470:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006472:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8006476:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006478:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800647a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800647e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006482:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006484:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006488:	f043 0304 	orr.w	r3, r3, #4
 800648c:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800648e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006490:	2b04      	cmp	r3, #4
 8006492:	f000 80e6 	beq.w	8006662 <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 8006496:	2001      	movs	r0, #1
}
 8006498:	b003      	add	sp, #12
 800649a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800649e:	6963      	ldr	r3, [r4, #20]
 80064a0:	07d9      	lsls	r1, r3, #31
 80064a2:	d4c0      	bmi.n	8006426 <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a4:	f7fe fe52 	bl	800514c <HAL_GetTick>
 80064a8:	1b80      	subs	r0, r0, r6
 80064aa:	4287      	cmp	r7, r0
 80064ac:	f0c0 80b3 	bcc.w	8006616 <HAL_I2C_Master_Transmit+0x296>
 80064b0:	2f00      	cmp	r7, #0
 80064b2:	f000 80b0 	beq.w	8006616 <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064b6:	682c      	ldr	r4, [r5, #0]
 80064b8:	e7b0      	b.n	800641c <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	f043 0301 	orr.w	r3, r3, #1
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	e788      	b.n	80063d6 <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80064c4:	ea4f 13e8 	mov.w	r3, r8, asr #7
 80064c8:	f003 0306 	and.w	r3, r3, #6
 80064cc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80064d0:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80064d2:	1c7b      	adds	r3, r7, #1
 80064d4:	d003      	beq.n	80064de <HAL_I2C_Master_Transmit+0x15e>
 80064d6:	e0b5      	b.n	8006644 <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064d8:	6963      	ldr	r3, [r4, #20]
 80064da:	0559      	lsls	r1, r3, #21
 80064dc:	d473      	bmi.n	80065c6 <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064de:	6963      	ldr	r3, [r4, #20]
 80064e0:	0718      	lsls	r0, r3, #28
 80064e2:	d5f9      	bpl.n	80064d8 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80064e4:	fa5f f388 	uxtb.w	r3, r8
 80064e8:	6123      	str	r3, [r4, #16]
 80064ea:	e7a3      	b.n	8006434 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064ec:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 80064ee:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064f2:	4601      	mov	r1, r0
 80064f4:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 80064f8:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064fc:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 80064fe:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8006500:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006502:	3b01      	subs	r3, #1
 8006504:	b29b      	uxth	r3, r3
 8006506:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006508:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 800650a:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800650c:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 800650e:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006510:	d50c      	bpl.n	800652c <HAL_I2C_Master_Transmit+0x1ac>
 8006512:	b15a      	cbz	r2, 800652c <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006514:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 8006516:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800651a:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 800651c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 800651e:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8006520:	3b01      	subs	r3, #1
 8006522:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8006524:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8006528:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 800652a:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 800652c:	1c78      	adds	r0, r7, #1
 800652e:	d129      	bne.n	8006584 <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006530:	6963      	ldr	r3, [r4, #20]
 8006532:	0759      	lsls	r1, r3, #29
 8006534:	d405      	bmi.n	8006542 <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006536:	6963      	ldr	r3, [r4, #20]
 8006538:	055a      	lsls	r2, r3, #21
 800653a:	d498      	bmi.n	800646e <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800653c:	6963      	ldr	r3, [r4, #20]
 800653e:	0759      	lsls	r1, r3, #29
 8006540:	d5f9      	bpl.n	8006536 <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 8006542:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8006544:	2b00      	cmp	r3, #0
 8006546:	d189      	bne.n	800645c <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006548:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800654a:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654c:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 800654e:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006554:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006556:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800655a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800655e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 8006562:	e71c      	b.n	800639e <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006564:	6963      	ldr	r3, [r4, #20]
 8006566:	0618      	lsls	r0, r3, #24
 8006568:	d4c0      	bmi.n	80064ec <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800656a:	6963      	ldr	r3, [r4, #20]
 800656c:	0558      	lsls	r0, r3, #21
 800656e:	f53f af7e 	bmi.w	800646e <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006572:	f7fe fdeb 	bl	800514c <HAL_GetTick>
 8006576:	1b80      	subs	r0, r0, r6
 8006578:	4287      	cmp	r7, r0
 800657a:	d379      	bcc.n	8006670 <HAL_I2C_Master_Transmit+0x2f0>
 800657c:	2f00      	cmp	r7, #0
 800657e:	d077      	beq.n	8006670 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006580:	682c      	ldr	r4, [r5, #0]
 8006582:	e76b      	b.n	800645c <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006584:	6963      	ldr	r3, [r4, #20]
 8006586:	075b      	lsls	r3, r3, #29
 8006588:	d4db      	bmi.n	8006542 <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800658a:	6963      	ldr	r3, [r4, #20]
 800658c:	055b      	lsls	r3, r3, #21
 800658e:	f53f af6e 	bmi.w	800646e <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006592:	f7fe fddb 	bl	800514c <HAL_GetTick>
 8006596:	1b80      	subs	r0, r0, r6
 8006598:	4287      	cmp	r7, r0
 800659a:	d369      	bcc.n	8006670 <HAL_I2C_Master_Transmit+0x2f0>
 800659c:	2f00      	cmp	r7, #0
 800659e:	d067      	beq.n	8006670 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065a0:	682c      	ldr	r4, [r5, #0]
 80065a2:	e7c3      	b.n	800652c <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 80065a4:	2320      	movs	r3, #32
      return HAL_BUSY;
 80065a6:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 80065a8:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80065ac:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065b0:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065b4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80065b6:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065ba:	f043 0320 	orr.w	r3, r3, #32
 80065be:	642b      	str	r3, [r5, #64]	; 0x40
}
 80065c0:	b003      	add	sp, #12
 80065c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80065c6:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065c8:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80065cc:	2120      	movs	r1, #32
      return HAL_ERROR;
 80065ce:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065d6:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d8:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80065da:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065dc:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065e0:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065e4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80065e6:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065ea:	f043 0304 	orr.w	r3, r3, #4
 80065ee:	642b      	str	r3, [r5, #64]	; 0x40
}
 80065f0:	b003      	add	sp, #12
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065f6:	6963      	ldr	r3, [r4, #20]
 80065f8:	079b      	lsls	r3, r3, #30
 80065fa:	f53f af25 	bmi.w	8006448 <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065fe:	6963      	ldr	r3, [r4, #20]
 8006600:	055b      	lsls	r3, r3, #21
 8006602:	d4e0      	bmi.n	80065c6 <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006604:	f7fe fda2 	bl	800514c <HAL_GetTick>
 8006608:	1b80      	subs	r0, r0, r6
 800660a:	4287      	cmp	r7, r0
 800660c:	d33e      	bcc.n	800668c <HAL_I2C_Master_Transmit+0x30c>
 800660e:	2f00      	cmp	r7, #0
 8006610:	d03c      	beq.n	800668c <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006612:	682c      	ldr	r4, [r5, #0]
 8006614:	e70e      	b.n	8006434 <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006616:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006618:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800661a:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800661c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006620:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006624:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006626:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006628:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800662c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006630:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006632:	680b      	ldr	r3, [r1, #0]
 8006634:	05da      	lsls	r2, r3, #23
 8006636:	f57f af2e 	bpl.w	8006496 <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800663a:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 800663e:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006640:	642b      	str	r3, [r5, #64]	; 0x40
 8006642:	e6ac      	b.n	800639e <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006644:	6963      	ldr	r3, [r4, #20]
 8006646:	071a      	lsls	r2, r3, #28
 8006648:	f53f af4c 	bmi.w	80064e4 <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800664c:	6963      	ldr	r3, [r4, #20]
 800664e:	055a      	lsls	r2, r3, #21
 8006650:	d4b9      	bmi.n	80065c6 <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006652:	f7fe fd7b 	bl	800514c <HAL_GetTick>
 8006656:	1b83      	subs	r3, r0, r6
 8006658:	429f      	cmp	r7, r3
 800665a:	d317      	bcc.n	800668c <HAL_I2C_Master_Transmit+0x30c>
 800665c:	b1b7      	cbz	r7, 800668c <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800665e:	682c      	ldr	r4, [r5, #0]
 8006660:	e737      	b.n	80064d2 <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006662:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 8006664:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006666:	6813      	ldr	r3, [r2, #0]
 8006668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e696      	b.n	800639e <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006670:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006672:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006674:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006676:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800667a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800667e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006680:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006684:	f043 0320 	orr.w	r3, r3, #32
 8006688:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800668a:	e700      	b.n	800648e <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800668c:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800668e:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006690:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006692:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006696:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800669a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800669c:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800669e:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80066a2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066a6:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80066a8:	e679      	b.n	800639e <HAL_I2C_Master_Transmit+0x1e>
 80066aa:	bf00      	nop

080066ac <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d05d      	beq.n	800676c <HAL_PCD_Init+0xc0>
{
 80066b0:	b570      	push	{r4, r5, r6, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066b2:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80066b6:	4604      	mov	r4, r0
{
 80066b8:	b086      	sub	sp, #24
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d04f      	beq.n	8006762 <HAL_PCD_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80066c2:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80066c4:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 80066c6:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80066ca:	f002 f831 	bl	8008730 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066ce:	6860      	ldr	r0, [r4, #4]
 80066d0:	b368      	cbz	r0, 800672e <HAL_PCD_Init+0x82>
 80066d2:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80066d4:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80066d8:	4611      	mov	r1, r2
    hpcd->IN_ep[i].is_in = 1U;
 80066da:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80066de:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066e2:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 80066e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80066ea:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066ec:	fa5f f28c 	uxtb.w	r2, ip
 80066f0:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 80066f2:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80066f6:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80066fa:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80066fe:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006700:	d3eb      	bcc.n	80066da <HAL_PCD_Init+0x2e>
 8006702:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006704:	4611      	mov	r1, r2
 8006706:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800670a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800670e:	f102 0c01 	add.w	ip, r2, #1
    hpcd->OUT_ep[i].num = i;
 8006712:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006716:	fa5f f28c 	uxtb.w	r2, ip
 800671a:	4282      	cmp	r2, r0
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800671c:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8006720:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006724:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006728:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800672c:	d3eb      	bcc.n	8006706 <HAL_PCD_Init+0x5a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800672e:	46a4      	mov	ip, r4
 8006730:	46ee      	mov	lr, sp
 8006732:	f85c 6b10 	ldr.w	r6, [ip], #16
 8006736:	1d25      	adds	r5, r4, #4
 8006738:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800673c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006740:	f8dc 3000 	ldr.w	r3, [ip]
 8006744:	4630      	mov	r0, r6
 8006746:	f8ce 3000 	str.w	r3, [lr]
 800674a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800674e:	f001 fff9 	bl	8008744 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006752:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8006754:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8006756:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800675a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 800675e:	b006      	add	sp, #24
 8006760:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8006762:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8006766:	f003 fd1b 	bl	800a1a0 <HAL_PCD_MspInit>
 800676a:	e7aa      	b.n	80066c2 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 800676c:	2001      	movs	r0, #1
}
 800676e:	4770      	bx	lr

08006770 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006770:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8006772:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8006776:	2b01      	cmp	r3, #1
 8006778:	d012      	beq.n	80067a0 <HAL_PCD_Start+0x30>
 800677a:	4604      	mov	r4, r0
 800677c:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 800677e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8006780:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006784:	f001 ffca 	bl	800871c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006788:	4629      	mov	r1, r5
 800678a:	4620      	mov	r0, r4
 800678c:	f003 fcfc 	bl	800a188 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	f002 fdc7 	bl	8009324 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006796:	2300      	movs	r3, #0
 8006798:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8

  return HAL_OK;
 800679c:	4618      	mov	r0, r3
}
 800679e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80067a0:	2002      	movs	r0, #2
}
 80067a2:	bd38      	pop	{r3, r4, r5, pc}

080067a4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80067a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80067aa:	6800      	ldr	r0, [r0, #0]
 80067ac:	f002 fdbc 	bl	8009328 <USB_ReadInterrupts>
 80067b0:	0406      	lsls	r6, r0, #16
 80067b2:	d443      	bmi.n	800683c <HAL_PCD_IRQHandler+0x98>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80067b4:	6820      	ldr	r0, [r4, #0]
 80067b6:	f002 fdb7 	bl	8009328 <USB_ReadInterrupts>
 80067ba:	0545      	lsls	r5, r0, #21
 80067bc:	f100 8180 	bmi.w	8006ac0 <HAL_PCD_IRQHandler+0x31c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80067c0:	6820      	ldr	r0, [r4, #0]
 80067c2:	f002 fdb1 	bl	8009328 <USB_ReadInterrupts>
 80067c6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80067ca:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80067cc:	d007      	beq.n	80067de <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80067ce:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80067d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d6:	041b      	lsls	r3, r3, #16
 80067d8:	0c1b      	lsrs	r3, r3, #16
 80067da:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80067de:	f002 fda3 	bl	8009328 <USB_ReadInterrupts>
 80067e2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80067e6:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80067e8:	d007      	beq.n	80067fa <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80067ea:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80067ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067f2:	041b      	lsls	r3, r3, #16
 80067f4:	0c1b      	lsrs	r3, r3, #16
 80067f6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80067fa:	f002 fd95 	bl	8009328 <USB_ReadInterrupts>
 80067fe:	04c0      	lsls	r0, r0, #19
 8006800:	f100 81f6 	bmi.w	8006bf0 <HAL_PCD_IRQHandler+0x44c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	f002 fd8f 	bl	8009328 <USB_ReadInterrupts>
 800680a:	0501      	lsls	r1, r0, #20
 800680c:	f100 81d5 	bmi.w	8006bba <HAL_PCD_IRQHandler+0x416>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006810:	6820      	ldr	r0, [r4, #0]
 8006812:	f002 fd89 	bl	8009328 <USB_ReadInterrupts>
 8006816:	0582      	lsls	r2, r0, #22
 8006818:	f100 81c2 	bmi.w	8006ba0 <HAL_PCD_IRQHandler+0x3fc>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800681c:	6820      	ldr	r0, [r4, #0]
 800681e:	f002 fd83 	bl	8009328 <USB_ReadInterrupts>
 8006822:	05c3      	lsls	r3, r0, #23
 8006824:	d508      	bpl.n	8006838 <HAL_PCD_IRQHandler+0x94>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006826:	6822      	ldr	r2, [r4, #0]
 8006828:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800682c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006830:	041b      	lsls	r3, r3, #16
 8006832:	0c1b      	lsrs	r3, r3, #16
 8006834:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8006838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800683c:	6822      	ldr	r2, [r4, #0]
 800683e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006842:	4610      	mov	r0, r2
 8006844:	041d      	lsls	r5, r3, #16
 8006846:	d5b6      	bpl.n	80067b6 <HAL_PCD_IRQHandler+0x12>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006848:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8006b98 <HAL_PCD_IRQHandler+0x3f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800684c:	f8df a34c 	ldr.w	sl, [pc, #844]	; 8006b9c <HAL_PCD_IRQHandler+0x3f8>
 8006850:	e011      	b.n	8006876 <HAL_PCD_IRQHandler+0xd2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006852:	f011 0110 	ands.w	r1, r1, #16
 8006856:	f000 8151 	beq.w	8006afc <HAL_PCD_IRQHandler+0x358>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800685a:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800685c:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006860:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006862:	f040 8176 	bne.w	8006b52 <HAL_PCD_IRQHandler+0x3ae>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006866:	0419      	lsls	r1, r3, #16
 8006868:	f100 821b 	bmi.w	8006ca2 <HAL_PCD_IRQHandler+0x4fe>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800686c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006870:	041e      	lsls	r6, r3, #16
 8006872:	f140 811f 	bpl.w	8006ab4 <HAL_PCD_IRQHandler+0x310>
    wIstr = hpcd->Instance->ISTR;
 8006876:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 800687a:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 800687c:	f015 050f 	ands.w	r5, r5, #15
 8006880:	d0e7      	beq.n	8006852 <HAL_PCD_IRQHandler+0xae>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006882:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8006886:	00ae      	lsls	r6, r5, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006888:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800688a:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800688e:	f100 80a0 	bmi.w	80069d2 <HAL_PCD_IRQHandler+0x22e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006892:	f018 0f80 	tst.w	r8, #128	; 0x80
 8006896:	d0e9      	beq.n	800686c <HAL_PCD_IRQHandler+0xc8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006898:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800689c:	1977      	adds	r7, r6, r5
 800689e:	b29b      	uxth	r3, r3
 80068a0:	ea03 0309 	and.w	r3, r3, r9
 80068a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a8:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80068ac:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 80068b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	f000 80d0 	beq.w	8006a5a <HAL_PCD_IRQHandler+0x2b6>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 80cd 	beq.w	8006a5a <HAL_PCD_IRQHandler+0x2b6>
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d103      	bne.n	80068cc <HAL_PCD_IRQHandler+0x128>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80068c4:	f418 7f80 	tst.w	r8, #256	; 0x100
 80068c8:	f000 80c7 	beq.w	8006a5a <HAL_PCD_IRQHandler+0x2b6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80068cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80068d0:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80068da:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80068de:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80068e2:	f000 8255 	beq.w	8006d90 <HAL_PCD_IRQHandler+0x5ec>
    if (ep->xfer_len > TxByteNbre)
 80068e6:	eb06 0c05 	add.w	ip, r6, r5
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80068ea:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 80068ee:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80068f2:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80068f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 80068fa:	459e      	cmp	lr, r3
 80068fc:	f240 834b 	bls.w	8006f96 <HAL_PCD_IRQHandler+0x7f2>
      ep->xfer_len -= TxByteNbre;
 8006900:	ebae 0e03 	sub.w	lr, lr, r3
 8006904:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8006908:	f1be 0f00 	cmp.w	lr, #0
 800690c:	f000 8346 	beq.w	8006f9c <HAL_PCD_IRQHandler+0x7f8>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006910:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8006914:	d00f      	beq.n	8006936 <HAL_PCD_IRQHandler+0x192>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006916:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 800691a:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 800691e:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8006922:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8006926:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800692a:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 800692e:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8006932:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8006936:	eb06 0e05 	add.w	lr, r6, r5
 800693a:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 800693e:	f89e c04c 	ldrb.w	ip, [lr, #76]	; 0x4c
 8006942:	f1bc 0f01 	cmp.w	ip, #1
 8006946:	f040 8316 	bne.w	8006f76 <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 800694a:	f8de 203c 	ldr.w	r2, [lr, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800694e:	f8de 8038 	ldr.w	r8, [lr, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8006952:	eb02 0c03 	add.w	ip, r2, r3
        ep->xfer_count += TxByteNbre;
 8006956:	f8de 2044 	ldr.w	r2, [lr, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800695a:	f8ce c03c 	str.w	ip, [lr, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800695e:	441a      	add	r2, r3
 8006960:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8006964:	f8de 2048 	ldr.w	r2, [lr, #72]	; 0x48
 8006968:	4542      	cmp	r2, r8
 800696a:	f0c0 83e4 	bcc.w	8007136 <HAL_PCD_IRQHandler+0x992>
          ep->xfer_len_db -= len;
 800696e:	eba2 0208 	sub.w	r2, r2, r8
 8006972:	f8ce 2048 	str.w	r2, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006976:	fa1f f388 	uxth.w	r3, r8
 800697a:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 800697e:	f1be 0f00 	cmp.w	lr, #0
 8006982:	f040 83cb 	bne.w	800711c <HAL_PCD_IRQHandler+0x978>
 8006986:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800698a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800698e:	f201 4e04 	addw	lr, r1, #1028	; 0x404
 8006992:	b292      	uxth	r2, r2
 8006994:	eb0e 0102 	add.w	r1, lr, r2
 8006998:	f1b8 0f00 	cmp.w	r8, #0
 800699c:	f040 83f8 	bne.w	8007190 <HAL_PCD_IRQHandler+0x9ec>
 80069a0:	f83e 1002 	ldrh.w	r1, [lr, r2]
 80069a4:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80069a8:	0409      	lsls	r1, r1, #16
 80069aa:	0c09      	lsrs	r1, r1, #16
 80069ac:	f82e 1002 	strh.w	r1, [lr, r2]
 80069b0:	f83e 1002 	ldrh.w	r1, [lr, r2]
 80069b4:	b289      	uxth	r1, r1
 80069b6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80069ba:	f82e 1002 	strh.w	r1, [lr, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80069be:	1972      	adds	r2, r6, r5
 80069c0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80069c4:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80069c6:	4661      	mov	r1, ip
 80069c8:	f002 fcb2 	bl	8009330 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80069cc:	6820      	ldr	r0, [r4, #0]
 80069ce:	4602      	mov	r2, r0
 80069d0:	e2d1      	b.n	8006f76 <HAL_PCD_IRQHandler+0x7d2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80069d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80069d6:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80069da:	1971      	adds	r1, r6, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80069dc:	4013      	ands	r3, r2
 80069de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e2:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80069e6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80069ea:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f040 811c 	bne.w	8006c2c <HAL_PCD_IRQHandler+0x488>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80069f4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80069f8:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3306      	adds	r3, #6
 8006a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a04:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006a08:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8006a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8006a10:	461f      	mov	r7, r3
          if (count != 0U)
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f040 81ac 	bne.w	8006d70 <HAL_PCD_IRQHandler+0x5cc>
        ep->xfer_count += count;
 8006a18:	1971      	adds	r1, r6, r5
 8006a1a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8006a1e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8006a22:	00c9      	lsls	r1, r1, #3
 8006a24:	443a      	add	r2, r7
 8006a26:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8006a2a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8006a2e:	443a      	add	r2, r7
 8006a30:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006a34:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8006a38:	b122      	cbz	r2, 8006a44 <HAL_PCD_IRQHandler+0x2a0>
 8006a3a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8006a3e:	42bb      	cmp	r3, r7
 8006a40:	f240 819d 	bls.w	8006d7e <HAL_PCD_IRQHandler+0x5da>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006a44:	1973      	adds	r3, r6, r5
 8006a46:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8006a50:	f003 fbce 	bl	800a1f0 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006a54:	6820      	ldr	r0, [r4, #0]
 8006a56:	4602      	mov	r2, r0
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006a58:	e71b      	b.n	8006892 <HAL_PCD_IRQHandler+0xee>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006a5a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006a5e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          if (ep->xfer_len > TxByteNbre)
 8006a68:	442e      	add	r6, r5
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006a6a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006a6e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
          if (ep->xfer_len > TxByteNbre)
 8006a72:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8006a76:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8006a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	f240 8108 	bls.w	8006c92 <HAL_PCD_IRQHandler+0x4ee>
            ep->xfer_len -= TxByteNbre;
 8006a82:	1ad2      	subs	r2, r2, r3
 8006a84:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8006a86:	2a00      	cmp	r2, #0
 8006a88:	f000 8105 	beq.w	8006c96 <HAL_PCD_IRQHandler+0x4f2>
            ep->xfer_buff += TxByteNbre;
 8006a8c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8006a8e:	3501      	adds	r5, #1
            ep->xfer_buff += TxByteNbre;
 8006a90:	441a      	add	r2, r3
 8006a92:	63f2      	str	r2, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8006a94:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8006a96:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8006a9a:	4413      	add	r3, r2
 8006a9c:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006aa2:	f002 f8b7 	bl	8008c14 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006aa6:	6820      	ldr	r0, [r4, #0]
 8006aa8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006aac:	4602      	mov	r2, r0
 8006aae:	041e      	lsls	r6, r3, #16
 8006ab0:	f53f aee1 	bmi.w	8006876 <HAL_PCD_IRQHandler+0xd2>
 8006ab4:	4610      	mov	r0, r2
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006ab6:	f002 fc37 	bl	8009328 <USB_ReadInterrupts>
 8006aba:	0545      	lsls	r5, r0, #21
 8006abc:	f57f ae80 	bpl.w	80067c0 <HAL_PCD_IRQHandler+0x1c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006ac0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8006ac2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006ac4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006ac8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006acc:	041b      	lsls	r3, r3, #16
 8006ace:	0c1b      	lsrs	r3, r3, #16
 8006ad0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8006ad4:	f003 fba4 	bl	800a220 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8006ad8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	f43f ae6f 	beq.w	80067c0 <HAL_PCD_IRQHandler+0x1c>
  hpcd->USB_Address = address;
 8006ae2:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8006ae4:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006aea:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006aee:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006af2:	f002 fc11 	bl	8009318 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006af6:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8006afa:	e661      	b.n	80067c0 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006afc:	8803      	ldrh	r3, [r0, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	ea03 0309 	and.w	r3, r3, r9
 8006b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b08:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006b0a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006b0e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b18:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006b1c:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8006b20:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b26:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8006b28:	4413      	add	r3, r2
 8006b2a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f003 fb69 	bl	800a204 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006b32:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006b36:	b363      	cbz	r3, 8006b92 <HAL_PCD_IRQHandler+0x3ee>
 8006b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b3a:	bb53      	cbnz	r3, 8006b92 <HAL_PCD_IRQHandler+0x3ee>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006b3c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8006b40:	6820      	ldr	r0, [r4, #0]
 8006b42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b46:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 8006b4a:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 8006b4c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8006b50:	e68c      	b.n	800686c <HAL_PCD_IRQHandler+0xc8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b52:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006b56:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b60:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006b64:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b68:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8006b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b70:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b74:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8006b78:	f002 fbea 	bl	8009350 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006b80:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8006b82:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b84:	8811      	ldrh	r1, [r2, #0]
 8006b86:	400b      	ands	r3, r1
 8006b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8006b8e:	f003 fb27 	bl	800a1e0 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006b92:	6820      	ldr	r0, [r4, #0]
 8006b94:	4602      	mov	r2, r0
 8006b96:	e669      	b.n	800686c <HAL_PCD_IRQHandler+0xc8>
 8006b98:	ffff8f0f 	.word	0xffff8f0f
 8006b9c:	ffff8fbf 	.word	0xffff8fbf
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006ba0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8006ba2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006ba4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bac:	041b      	lsls	r3, r3, #16
 8006bae:	0c1b      	lsrs	r3, r3, #16
 8006bb0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8006bb4:	f003 fb30 	bl	800a218 <HAL_PCD_SOFCallback>
 8006bb8:	e630      	b.n	800681c <HAL_PCD_IRQHandler+0x78>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006bba:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SuspendCallback(hpcd);
 8006bbc:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006bbe:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	f043 0308 	orr.w	r3, r3, #8
 8006bc8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006bcc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bd4:	041b      	lsls	r3, r3, #16
 8006bd6:	0c1b      	lsrs	r3, r3, #16
 8006bd8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006bdc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f043 0304 	orr.w	r3, r3, #4
 8006be6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8006bea:	f003 fb2b 	bl	800a244 <HAL_PCD_SuspendCallback>
 8006bee:	e60f      	b.n	8006810 <HAL_PCD_IRQHandler+0x6c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006bf0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8006bf2:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006bf4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006bf8:	f023 0304 	bic.w	r3, r3, #4
 8006bfc:	041b      	lsls	r3, r3, #16
 8006bfe:	0c1b      	lsrs	r3, r3, #16
 8006c00:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006c04:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006c08:	f023 0308 	bic.w	r3, r3, #8
 8006c0c:	041b      	lsls	r3, r3, #16
 8006c0e:	0c1b      	lsrs	r3, r3, #16
 8006c10:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8006c14:	f003 fb26 	bl	800a264 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006c18:	6820      	ldr	r0, [r4, #0]
 8006c1a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c22:	041b      	lsls	r3, r3, #16
 8006c24:	0c1b      	lsrs	r3, r3, #16
 8006c26:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8006c2a:	e5ec      	b.n	8006806 <HAL_PCD_IRQHandler+0x62>
          if (ep->type == EP_TYPE_BULK)
 8006c2c:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	f000 8120 	beq.w	8006e76 <HAL_PCD_IRQHandler+0x6d2>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006c36:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8006c3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006c56:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8006c5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c5e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006c62:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006c66:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006c68:	d06e      	beq.n	8006d48 <HAL_PCD_IRQHandler+0x5a4>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006c6a:	3302      	adds	r3, #2
 8006c6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c70:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006c74:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8006c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8006c7c:	461f      	mov	r7, r3
              if (count != 0U)
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f43f aeca 	beq.w	8006a18 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006c84:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8006c88:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8006c8c:	f002 fb60 	bl	8009350 <USB_ReadPMA>
 8006c90:	e6c2      	b.n	8006a18 <HAL_PCD_IRQHandler+0x274>
 8006c92:	2300      	movs	r3, #0
 8006c94:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006c96:	4620      	mov	r0, r4
 8006c98:	f003 fab4 	bl	800a204 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006c9c:	6820      	ldr	r0, [r4, #0]
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	e5e4      	b.n	800686c <HAL_PCD_IRQHandler+0xc8>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006ca2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006ca6:	8802      	ldrh	r2, [r0, #0]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cae:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006cb0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006cb4:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cbe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006cc2:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8006cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cca:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006cce:	b193      	cbz	r3, 8006cf6 <HAL_PCD_IRQHandler+0x552>
 8006cd0:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8006cd4:	b179      	cbz	r1, 8006cf6 <HAL_PCD_IRQHandler+0x552>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006cd6:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8006cda:	f002 fb39 	bl	8009350 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8006cde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ce2:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006ce6:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8006ce8:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006cea:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8006cec:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006cf0:	f003 fa7e 	bl	800a1f0 <HAL_PCD_DataOutStageCallback>
 8006cf4:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006cf6:	8803      	ldrh	r3, [r0, #0]
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	051b      	lsls	r3, r3, #20
 8006cfc:	f53f adb6 	bmi.w	800686c <HAL_PCD_IRQHandler+0xc8>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006d00:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006d04:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 8006d0e:	2900      	cmp	r1, #0
 8006d10:	f040 80a6 	bne.w	8006e60 <HAL_PCD_IRQHandler+0x6bc>
 8006d14:	5ae9      	ldrh	r1, [r5, r3]
 8006d16:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8006d1a:	0409      	lsls	r1, r1, #16
 8006d1c:	0c09      	lsrs	r1, r1, #16
 8006d1e:	52e9      	strh	r1, [r5, r3]
 8006d20:	5ae9      	ldrh	r1, [r5, r3]
 8006d22:	b289      	uxth	r1, r1
 8006d24:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006d28:	52e9      	strh	r1, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006d2a:	8803      	ldrh	r3, [r0, #0]
 8006d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d34:	041b      	lsls	r3, r3, #16
 8006d36:	0c1b      	lsrs	r3, r3, #16
 8006d38:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d44:	8003      	strh	r3, [r0, #0]
 8006d46:	e591      	b.n	800686c <HAL_PCD_IRQHandler+0xc8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d48:	3306      	adds	r3, #6
 8006d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006d52:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8006d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8006d5a:	461f      	mov	r7, r3
              if (count != 0U)
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f43f ae5b 	beq.w	8006a18 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d62:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8006d66:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8006d6a:	f002 faf1 	bl	8009350 <USB_ReadPMA>
 8006d6e:	e653      	b.n	8006a18 <HAL_PCD_IRQHandler+0x274>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006d70:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8006d74:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8006d78:	f002 faea 	bl	8009350 <USB_ReadPMA>
 8006d7c:	e64c      	b.n	8006a18 <HAL_PCD_IRQHandler+0x274>
        ep = &hpcd->OUT_ep[epindex];
 8006d7e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006d82:	6820      	ldr	r0, [r4, #0]
 8006d84:	4421      	add	r1, r4
 8006d86:	f001 ff45 	bl	8008c14 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006d8a:	6820      	ldr	r0, [r4, #0]
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	e580      	b.n	8006892 <HAL_PCD_IRQHandler+0xee>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d90:	f8b3 e40c 	ldrh.w	lr, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 8006d94:	1973      	adds	r3, r6, r5
 8006d96:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006d9a:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d9e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8006da2:	45f3      	cmp	fp, lr
 8006da4:	f0c0 80a5 	bcc.w	8006ef2 <HAL_PCD_IRQHandler+0x74e>
      ep->xfer_len -= TxByteNbre;
 8006da8:	ebab 0c0e 	sub.w	ip, fp, lr
 8006dac:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8006db0:	f1bc 0f00 	cmp.w	ip, #0
 8006db4:	f000 809f 	beq.w	8006ef6 <HAL_PCD_IRQHandler+0x752>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006db8:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8006dbc:	d10d      	bne.n	8006dda <HAL_PCD_IRQHandler+0x636>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006dbe:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8006dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dca:	041b      	lsls	r3, r3, #16
 8006dcc:	0c1b      	lsrs	r3, r3, #16
 8006dce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd6:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8006dda:	1973      	adds	r3, r6, r5
 8006ddc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006de0:	f893 c04c 	ldrb.w	ip, [r3, #76]	; 0x4c
 8006de4:	f1bc 0f01 	cmp.w	ip, #1
 8006de8:	f040 80c5 	bne.w	8006f76 <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 8006dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8006dee:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8006df2:	eb02 0c0e 	add.w	ip, r2, lr
        ep->xfer_count += TxByteNbre;
 8006df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8006df8:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8006dfc:	4472      	add	r2, lr
 8006dfe:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8006e00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e02:	4542      	cmp	r2, r8
 8006e04:	f0c0 81ab 	bcc.w	800715e <HAL_PCD_IRQHandler+0x9ba>
          ep->xfer_len_db -= len;
 8006e08:	eba2 0208 	sub.w	r2, r2, r8
 8006e0c:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006e0e:	fa1f fe88 	uxth.w	lr, r8
 8006e12:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 8194 	bne.w	8007144 <HAL_PCD_IRQHandler+0x9a0>
 8006e1c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006e20:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006e24:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8006e28:	b292      	uxth	r2, r2
 8006e2a:	188b      	adds	r3, r1, r2
 8006e2c:	f1b8 0f00 	cmp.w	r8, #0
 8006e30:	f040 81d0 	bne.w	80071d4 <HAL_PCD_IRQHandler+0xa30>
 8006e34:	5a8b      	ldrh	r3, [r1, r2]
 8006e36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e3a:	041b      	lsls	r3, r3, #16
 8006e3c:	0c1b      	lsrs	r3, r3, #16
 8006e3e:	528b      	strh	r3, [r1, r2]
 8006e40:	5a8b      	ldrh	r3, [r1, r2]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e48:	528b      	strh	r3, [r1, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006e4a:	1972      	adds	r2, r6, r5
 8006e4c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8006e50:	4673      	mov	r3, lr
 8006e52:	4661      	mov	r1, ip
 8006e54:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006e56:	f002 fa6b 	bl	8009330 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006e5a:	6820      	ldr	r0, [r4, #0]
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	e08a      	b.n	8006f76 <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006e60:	293e      	cmp	r1, #62	; 0x3e
 8006e62:	f200 80cb 	bhi.w	8006ffc <HAL_PCD_IRQHandler+0x858>
 8006e66:	084e      	lsrs	r6, r1, #1
 8006e68:	07cf      	lsls	r7, r1, #31
 8006e6a:	bf48      	it	mi
 8006e6c:	3601      	addmi	r6, #1
 8006e6e:	02b1      	lsls	r1, r6, #10
 8006e70:	b289      	uxth	r1, r1
 8006e72:	52e9      	strh	r1, [r5, r3]
 8006e74:	e759      	b.n	8006d2a <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006e76:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006e7a:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006e7e:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006e80:	f000 80c7 	beq.w	8007012 <HAL_PCD_IRQHandler+0x86e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006e84:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8006e88:	3302      	adds	r3, #2
 8006e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e8e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006e92:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8006e96:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8006e9e:	459c      	cmp	ip, r3
 8006ea0:	461f      	mov	r7, r3
 8006ea2:	f0c0 8112 	bcc.w	80070ca <HAL_PCD_IRQHandler+0x926>
      ep->xfer_len -= count;
 8006ea6:	ebac 0c03 	sub.w	ip, ip, r3
 8006eaa:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8006eae:	f1bc 0f00 	cmp.w	ip, #0
 8006eb2:	f000 810e 	beq.w	80070d2 <HAL_PCD_IRQHandler+0x92e>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006eb6:	f018 0f40 	tst.w	r8, #64	; 0x40
 8006eba:	d00d      	beq.n	8006ed8 <HAL_PCD_IRQHandler+0x734>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006ebc:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8006ec0:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8006ec4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006ec8:	0409      	lsls	r1, r1, #16
 8006eca:	0c09      	lsrs	r1, r1, #16
 8006ecc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006ed0:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8006ed4:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 80c3 	beq.w	8007064 <HAL_PCD_IRQHandler+0x8c0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006ede:	1971      	adds	r1, r6, r5
 8006ee0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8006ee4:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8006ee8:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8006eec:	f002 fa30 	bl	8009350 <USB_ReadPMA>
 8006ef0:	e592      	b.n	8006a18 <HAL_PCD_IRQHandler+0x274>
 8006ef2:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ef6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 80be 	bne.w	800707c <HAL_PCD_IRQHandler+0x8d8>
 8006f00:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8006f04:	010b      	lsls	r3, r1, #4
 8006f06:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8006f0a:	4406      	add	r6, r0
 8006f0c:	b2ad      	uxth	r5, r5
 8006f0e:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f14:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006f18:	0412      	lsls	r2, r2, #16
 8006f1a:	0c12      	lsrs	r2, r2, #16
 8006f1c:	5372      	strh	r2, [r6, r5]
 8006f1e:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f20:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f22:	b292      	uxth	r2, r2
 8006f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f28:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f2a:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8006f2e:	b280      	uxth	r0, r0
 8006f30:	5a1a      	ldrh	r2, [r3, r0]
 8006f32:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006f36:	0412      	lsls	r2, r2, #16
 8006f38:	0c12      	lsrs	r2, r2, #16
 8006f3a:	521a      	strh	r2, [r3, r0]
 8006f3c:	5a1a      	ldrh	r2, [r3, r0]
 8006f3e:	b292      	uxth	r2, r2
 8006f40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f44:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f46:	4620      	mov	r0, r4
 8006f48:	f003 f95c 	bl	800a204 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006f4c:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006f50:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006f52:	d183      	bne.n	8006e5c <HAL_PCD_IRQHandler+0x6b8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006f54:	4602      	mov	r2, r0
 8006f56:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8006f5a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8006f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f66:	041b      	lsls	r3, r3, #16
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f72:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006f76:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8006f7a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	ea03 030a 	and.w	r3, r3, sl
 8006f84:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8006f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f90:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 8006f94:	e46a      	b.n	800686c <HAL_PCD_IRQHandler+0xc8>
 8006f96:	2300      	movs	r3, #0
 8006f98:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f9c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d17f      	bne.n	80070a4 <HAL_PCD_IRQHandler+0x900>
 8006fa4:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8006fa8:	010b      	lsls	r3, r1, #4
 8006faa:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8006fae:	4406      	add	r6, r0
 8006fb0:	b2ad      	uxth	r5, r5
 8006fb2:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006fb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006fb8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006fbc:	0412      	lsls	r2, r2, #16
 8006fbe:	0c12      	lsrs	r2, r2, #16
 8006fc0:	5372      	strh	r2, [r6, r5]
 8006fc2:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006fc4:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006fc6:	b292      	uxth	r2, r2
 8006fc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fcc:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006fce:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8006fd2:	b280      	uxth	r0, r0
 8006fd4:	5a1a      	ldrh	r2, [r3, r0]
 8006fd6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006fda:	0412      	lsls	r2, r2, #16
 8006fdc:	0c12      	lsrs	r2, r2, #16
 8006fde:	521a      	strh	r2, [r3, r0]
 8006fe0:	5a1a      	ldrh	r2, [r3, r0]
 8006fe2:	b292      	uxth	r2, r2
 8006fe4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fe8:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006fea:	4620      	mov	r0, r4
 8006fec:	f003 f90a 	bl	800a204 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ff0:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006ff4:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ff6:	d1ad      	bne.n	8006f54 <HAL_PCD_IRQHandler+0x7b0>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	e7bc      	b.n	8006f76 <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006ffc:	094e      	lsrs	r6, r1, #5
 8006ffe:	06c9      	lsls	r1, r1, #27
 8007000:	4989      	ldr	r1, [pc, #548]	; (8007228 <HAL_PCD_IRQHandler+0xa84>)
 8007002:	bf08      	it	eq
 8007004:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007008:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800700c:	b289      	uxth	r1, r1
 800700e:	52e9      	strh	r1, [r5, r3]
 8007010:	e68b      	b.n	8006d2a <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007012:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8007016:	3306      	adds	r3, #6
 8007018:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800701c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007020:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8007024:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007028:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 800702c:	459e      	cmp	lr, r3
 800702e:	461f      	mov	r7, r3
 8007030:	d360      	bcc.n	80070f4 <HAL_PCD_IRQHandler+0x950>
      ep->xfer_len -= count;
 8007032:	ebae 0e03 	sub.w	lr, lr, r3
 8007036:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800703a:	f1be 0f00 	cmp.w	lr, #0
 800703e:	d05b      	beq.n	80070f8 <HAL_PCD_IRQHandler+0x954>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007040:	f018 0f40 	tst.w	r8, #64	; 0x40
 8007044:	d10d      	bne.n	8007062 <HAL_PCD_IRQHandler+0x8be>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007046:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800704a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800704e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007052:	0409      	lsls	r1, r1, #16
 8007054:	0c09      	lsrs	r1, r1, #16
 8007056:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800705a:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800705e:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8007062:	b90b      	cbnz	r3, 8007068 <HAL_PCD_IRQHandler+0x8c4>
 8007064:	461f      	mov	r7, r3
 8007066:	e4d7      	b.n	8006a18 <HAL_PCD_IRQHandler+0x274>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007068:	1971      	adds	r1, r6, r5
 800706a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800706e:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8007072:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8007076:	f002 f96b 	bl	8009350 <USB_ReadPMA>
 800707a:	e4cd      	b.n	8006a18 <HAL_PCD_IRQHandler+0x274>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800707c:	2b01      	cmp	r3, #1
 800707e:	f47f af62 	bne.w	8006f46 <HAL_PCD_IRQHandler+0x7a2>
 8007082:	2500      	movs	r5, #0
 8007084:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007088:	010b      	lsls	r3, r1, #4
 800708a:	f203 4604 	addw	r6, r3, #1028	; 0x404
 800708e:	b292      	uxth	r2, r2
 8007090:	4406      	add	r6, r0
 8007092:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007094:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007098:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800709c:	4403      	add	r3, r0
 800709e:	b292      	uxth	r2, r2
 80070a0:	529d      	strh	r5, [r3, r2]
 80070a2:	e750      	b.n	8006f46 <HAL_PCD_IRQHandler+0x7a2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d1a0      	bne.n	8006fea <HAL_PCD_IRQHandler+0x846>
 80070a8:	2500      	movs	r5, #0
 80070aa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80070ae:	010b      	lsls	r3, r1, #4
 80070b0:	f203 4604 	addw	r6, r3, #1028	; 0x404
 80070b4:	b292      	uxth	r2, r2
 80070b6:	4406      	add	r6, r0
 80070b8:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80070ba:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80070be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070c2:	4403      	add	r3, r0
 80070c4:	b292      	uxth	r2, r2
 80070c6:	529d      	strh	r5, [r3, r2]
 80070c8:	e78f      	b.n	8006fea <HAL_PCD_IRQHandler+0x846>
 80070ca:	f04f 0c00 	mov.w	ip, #0
 80070ce:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80070d2:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80070d6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80070da:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80070de:	0409      	lsls	r1, r1, #16
 80070e0:	0c09      	lsrs	r1, r1, #16
 80070e2:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80070e6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80070ea:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80070ee:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 80070f2:	e6e0      	b.n	8006eb6 <HAL_PCD_IRQHandler+0x712>
 80070f4:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80070f8:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80070fc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8007100:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007104:	0409      	lsls	r1, r1, #16
 8007106:	0c09      	lsrs	r1, r1, #16
 8007108:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800710c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007110:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007114:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8007118:	e792      	b.n	8007040 <HAL_PCD_IRQHandler+0x89c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800711a:	b293      	uxth	r3, r2
 800711c:	f1be 0f01 	cmp.w	lr, #1
 8007120:	f47f ac4d 	bne.w	80069be <HAL_PCD_IRQHandler+0x21a>
 8007124:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007128:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800712c:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8007130:	b292      	uxth	r2, r2
 8007132:	528b      	strh	r3, [r1, r2]
 8007134:	e443      	b.n	80069be <HAL_PCD_IRQHandler+0x21a>
        else if (ep->xfer_len_db == 0U)
 8007136:	b9ba      	cbnz	r2, 8007168 <HAL_PCD_IRQHandler+0x9c4>
          ep->xfer_fill_db = 0U;
 8007138:	4698      	mov	r8, r3
 800713a:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
 800713e:	e41c      	b.n	800697a <HAL_PCD_IRQHandler+0x1d6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007140:	fa1f fe82 	uxth.w	lr, r2
 8007144:	2b01      	cmp	r3, #1
 8007146:	f47f ae80 	bne.w	8006e4a <HAL_PCD_IRQHandler+0x6a6>
 800714a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800714e:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 8007152:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8007156:	b29b      	uxth	r3, r3
 8007158:	f822 e003 	strh.w	lr, [r2, r3]
 800715c:	e675      	b.n	8006e4a <HAL_PCD_IRQHandler+0x6a6>
        else if (ep->xfer_len_db == 0U)
 800715e:	bb22      	cbnz	r2, 80071aa <HAL_PCD_IRQHandler+0xa06>
          ep->xfer_fill_db = 0U;
 8007160:	46f0      	mov	r8, lr
 8007162:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8007166:	e654      	b.n	8006e12 <HAL_PCD_IRQHandler+0x66e>
          ep->xfer_fill_db = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	f88e 304c 	strb.w	r3, [lr, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800716e:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007172:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 8007176:	f1be 0f00 	cmp.w	lr, #0
 800717a:	d1ce      	bne.n	800711a <HAL_PCD_IRQHandler+0x976>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800717c:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800717e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007182:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007186:	b29b      	uxth	r3, r3
 8007188:	f201 4104 	addw	r1, r1, #1028	; 0x404
 800718c:	4419      	add	r1, r3
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800718e:	b293      	uxth	r3, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007190:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 8007194:	d82b      	bhi.n	80071ee <HAL_PCD_IRQHandler+0xa4a>
 8007196:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800719a:	f018 0f01 	tst.w	r8, #1
 800719e:	bf18      	it	ne
 80071a0:	3201      	addne	r2, #1
 80071a2:	0292      	lsls	r2, r2, #10
 80071a4:	b292      	uxth	r2, r2
 80071a6:	800a      	strh	r2, [r1, #0]
 80071a8:	e409      	b.n	80069be <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_len_db = 0U;
 80071aa:	f04f 0e00 	mov.w	lr, #0
 80071ae:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80071b2:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80071b6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1c0      	bne.n	8007140 <HAL_PCD_IRQHandler+0x99c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80071be:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80071c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80071c4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80071c8:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	440b      	add	r3, r1
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80071d0:	fa1f fe82 	uxth.w	lr, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80071d4:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 80071d8:	d818      	bhi.n	800720c <HAL_PCD_IRQHandler+0xa68>
 80071da:	ea4f 0258 	mov.w	r2, r8, lsr #1
 80071de:	f018 0f01 	tst.w	r8, #1
 80071e2:	bf18      	it	ne
 80071e4:	3201      	addne	r2, #1
 80071e6:	0292      	lsls	r2, r2, #10
 80071e8:	b292      	uxth	r2, r2
 80071ea:	801a      	strh	r2, [r3, #0]
 80071ec:	e62d      	b.n	8006e4a <HAL_PCD_IRQHandler+0x6a6>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80071ee:	ea4f 1258 	mov.w	r2, r8, lsr #5
 80071f2:	f8df e034 	ldr.w	lr, [pc, #52]	; 8007228 <HAL_PCD_IRQHandler+0xa84>
 80071f6:	f018 0f1f 	tst.w	r8, #31
 80071fa:	bf08      	it	eq
 80071fc:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8007200:	ea4e 2282 	orr.w	r2, lr, r2, lsl #10
 8007204:	b292      	uxth	r2, r2
 8007206:	800a      	strh	r2, [r1, #0]
 8007208:	f7ff bbd9 	b.w	80069be <HAL_PCD_IRQHandler+0x21a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800720c:	ea4f 1258 	mov.w	r2, r8, lsr #5
 8007210:	4905      	ldr	r1, [pc, #20]	; (8007228 <HAL_PCD_IRQHandler+0xa84>)
 8007212:	f018 0f1f 	tst.w	r8, #31
 8007216:	bf08      	it	eq
 8007218:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800721c:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 8007220:	b292      	uxth	r2, r2
 8007222:	801a      	strh	r2, [r3, #0]
 8007224:	e611      	b.n	8006e4a <HAL_PCD_IRQHandler+0x6a6>
 8007226:	bf00      	nop
 8007228:	ffff8000 	.word	0xffff8000

0800722c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800722c:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8007230:	2a01      	cmp	r2, #1
 8007232:	d00e      	beq.n	8007252 <HAL_PCD_SetAddress+0x26>
{
 8007234:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8007236:	2201      	movs	r2, #1
 8007238:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800723a:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800723c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8007240:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007244:	f002 f868 	bl	8009318 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007248:	2300      	movs	r3, #0
 800724a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800724e:	4618      	mov	r0, r3
}
 8007250:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007252:	2002      	movs	r0, #2
}
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop

08007258 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8007258:	f001 0c07 	and.w	ip, r1, #7
 800725c:	0609      	lsls	r1, r1, #24
{
 800725e:	b510      	push	{r4, lr}
 8007260:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8007262:	d425      	bmi.n	80072b0 <HAL_PCD_EP_Open+0x58>
    ep->is_in = 0U;
 8007264:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007268:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 800726c:	00c0      	lsls	r0, r0, #3
 800726e:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 8007272:	4420      	add	r0, r4
 8007274:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007278:	4421      	add	r1, r4
  ep->maxpacket = ep_mps;
 800727a:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800727c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800727e:	f881 c000 	strb.w	ip, [r1]
  ep->type = ep_type;
 8007282:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007284:	b10a      	cbz	r2, 800728a <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8007286:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800728a:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800728c:	bf04      	itt	eq
 800728e:	2300      	moveq	r3, #0
 8007290:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8007292:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8007296:	2b01      	cmp	r3, #1
 8007298:	d019      	beq.n	80072ce <HAL_PCD_EP_Open+0x76>
 800729a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800729c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800729e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80072a2:	f001 fa63 	bl	800876c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072a6:	2300      	movs	r3, #0
 80072a8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return ret;
 80072ac:	4618      	mov	r0, r3
}
 80072ae:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072b0:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 80072b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80072b8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80072bc:	2001      	movs	r0, #1
 80072be:	7048      	strb	r0, [r1, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072c0:	eb0c 0100 	add.w	r1, ip, r0
 80072c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80072c8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 80072cc:	e7d5      	b.n	800727a <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 80072ce:	2002      	movs	r0, #2
}
 80072d0:	bd10      	pop	{r4, pc}
 80072d2:	bf00      	nop

080072d4 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80072d4:	060b      	lsls	r3, r1, #24
{
 80072d6:	b510      	push	{r4, lr}
 80072d8:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80072da:	d41b      	bmi.n	8007314 <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072dc:	f001 0307 	and.w	r3, r1, #7
 80072e0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80072e4:	00d2      	lsls	r2, r2, #3
 80072e6:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 80072ea:	4401      	add	r1, r0
    ep->is_in = 0U;
 80072ec:	4402      	add	r2, r0
 80072ee:	2000      	movs	r0, #0
 80072f0:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 80072f4:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80072f6:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d019      	beq.n	8007332 <HAL_PCD_EP_Close+0x5e>
 80072fe:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007300:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007302:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007306:	f001 fba5 	bl	8008a54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800730a:	2300      	movs	r3, #0
 800730c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8007310:	4618      	mov	r0, r3
}
 8007312:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8007314:	2001      	movs	r0, #1
 8007316:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800731a:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 800731c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007320:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007324:	4611      	mov	r1, r2
    ep->is_in = 1U;
 8007326:	7050      	strb	r0, [r2, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007328:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800732a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800732e:	2b01      	cmp	r3, #1
 8007330:	d1e5      	bne.n	80072fe <HAL_PCD_EP_Close+0x2a>
 8007332:	2002      	movs	r0, #2
}
 8007334:	bd10      	pop	{r4, pc}
 8007336:	bf00      	nop

08007338 <HAL_PCD_EP_Receive>:
{
 8007338:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 800733a:	2400      	movs	r4, #0
 800733c:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8007340:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 8007344:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 8007348:	e9cc 235f 	strd	r2, r3, [ip, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800734c:	6800      	ldr	r0, [r0, #0]
 800734e:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
  ep->xfer_count = 0U;
 8007352:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 8007356:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800735a:	f88c e168 	strb.w	lr, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800735e:	f001 fc59 	bl	8008c14 <USB_EPStartXfer>
}
 8007362:	4620      	mov	r0, r4
 8007364:	bd10      	pop	{r4, pc}
 8007366:	bf00      	nop

08007368 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007368:	f001 0107 	and.w	r1, r1, #7
 800736c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007370:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8007374:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop

0800737c <HAL_PCD_EP_Transmit>:
{
 800737c:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 800737e:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8007380:	2500      	movs	r5, #0
{
 8007382:	4604      	mov	r4, r0
 8007384:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8007388:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800738c:	eb0e 0106 	add.w	r1, lr, r6
  ep->xfer_buff = pBuf;
 8007390:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007394:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  ep->xfer_buff = pBuf;
 8007398:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->num = ep_addr & EP_ADDR_MSK;
 800739c:	f88c e028 	strb.w	lr, [ip, #40]	; 0x28
  ep->xfer_len = len;
 80073a0:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 80073a4:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_fill_db = 1U;
 80073a8:	f88c 604c 	strb.w	r6, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 80073ac:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
  ep->is_in = 1U;
 80073b0:	f88c 6029 	strb.w	r6, [ip, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80073b4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80073b8:	6800      	ldr	r0, [r0, #0]
 80073ba:	f001 fc2b 	bl	8008c14 <USB_EPStartXfer>
}
 80073be:	4628      	mov	r0, r5
 80073c0:	bd70      	pop	{r4, r5, r6, pc}
 80073c2:	bf00      	nop

080073c4 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80073c4:	6843      	ldr	r3, [r0, #4]
{
 80073c6:	b510      	push	{r4, lr}
 80073c8:	4604      	mov	r4, r0
 80073ca:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80073ce:	4298      	cmp	r0, r3
 80073d0:	d82d      	bhi.n	800742e <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 80073d2:	060b      	lsls	r3, r1, #24
 80073d4:	d41a      	bmi.n	800740c <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 80073d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80073da:	00c9      	lsls	r1, r1, #3
 80073dc:	f501 72b4 	add.w	r2, r1, #360	; 0x168
    ep->is_in = 0U;
 80073e0:	1863      	adds	r3, r4, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80073e2:	18a1      	adds	r1, r4, r2
    ep->is_in = 0U;
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 80073ea:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80073ec:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 80073ee:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80073f0:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d018      	beq.n	800742a <HAL_PCD_EP_SetStall+0x66>
 80073f8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80073fc:	6820      	ldr	r0, [r4, #0]
 80073fe:	f001 ff13 	bl	8009228 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8007402:	2300      	movs	r3, #0
 8007404:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8007408:	4618      	mov	r0, r3
}
 800740a:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800740c:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800740e:	1883      	adds	r3, r0, r2
    ep->is_in = 1U;
 8007410:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007414:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8007418:	705a      	strb	r2, [r3, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800741a:	4619      	mov	r1, r3
  ep->is_stall = 1U;
 800741c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800741e:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 8007420:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007422:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8007426:	429a      	cmp	r2, r3
 8007428:	d1e6      	bne.n	80073f8 <HAL_PCD_EP_SetStall+0x34>
 800742a:	2002      	movs	r0, #2
}
 800742c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800742e:	2001      	movs	r0, #1
}
 8007430:	bd10      	pop	{r4, pc}
 8007432:	bf00      	nop

08007434 <HAL_PCD_EP_ClrStall>:
{
 8007434:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007436:	6843      	ldr	r3, [r0, #4]
 8007438:	f001 020f 	and.w	r2, r1, #15
 800743c:	429a      	cmp	r2, r3
 800743e:	d832      	bhi.n	80074a6 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8007440:	060b      	lsls	r3, r1, #24
 8007442:	4604      	mov	r4, r0
 8007444:	d41c      	bmi.n	8007480 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007446:	f001 0307 	and.w	r3, r1, #7
 800744a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800744e:	00d2      	lsls	r2, r2, #3
 8007450:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8007454:	4401      	add	r1, r0
    ep->is_in = 0U;
 8007456:	4402      	add	r2, r0
  ep->is_stall = 0U;
 8007458:	2500      	movs	r5, #0
    ep->is_in = 0U;
 800745a:	2000      	movs	r0, #0
 800745c:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8007460:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8007462:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007464:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8007468:	2b01      	cmp	r3, #1
 800746a:	d01a      	beq.n	80074a2 <HAL_PCD_EP_ClrStall+0x6e>
 800746c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800746e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007470:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007474:	f001 ff00 	bl	8009278 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007478:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 800747c:	4628      	mov	r0, r5
}
 800747e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8007480:	2001      	movs	r0, #1
 8007482:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007486:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 8007488:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800748c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007490:	4611      	mov	r1, r2
  ep->is_stall = 0U;
 8007492:	2500      	movs	r5, #0
    ep->is_in = 1U;
 8007494:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007496:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8007498:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800749a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d1e4      	bne.n	800746c <HAL_PCD_EP_ClrStall+0x38>
 80074a2:	2002      	movs	r0, #2
}
 80074a4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80074a6:	2001      	movs	r0, #1
}
 80074a8:	bd38      	pop	{r3, r4, r5, pc}
 80074aa:	bf00      	nop

080074ac <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80074ac:	f011 0f80 	tst.w	r1, #128	; 0x80
 80074b0:	d00b      	beq.n	80074ca <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074b2:	f001 0107 	and.w	r1, r1, #7
 80074b6:	3101      	adds	r1, #1
 80074b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80074bc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80074c0:	b95a      	cbnz	r2, 80074da <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80074c2:	2000      	movs	r0, #0
    ep->pmaadress = (uint16_t)pmaadress;
 80074c4:	80cb      	strh	r3, [r1, #6]
 80074c6:	730a      	strb	r2, [r1, #12]
}
 80074c8:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80074ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80074ce:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80074d2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 80074d6:	2a00      	cmp	r2, #0
 80074d8:	d0f3      	beq.n	80074c2 <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 80074da:	2201      	movs	r2, #1
}
 80074dc:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80074de:	608b      	str	r3, [r1, #8]
 80074e0:	730a      	strb	r2, [r1, #12]
}
 80074e2:	4770      	bx	lr

080074e4 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80074e4:	4b1d      	ldr	r3, [pc, #116]	; (800755c <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 80074e6:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80074ee:	d116      	bne.n	800751e <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80074f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074f2:	00d2      	lsls	r2, r2, #3
 80074f4:	d420      	bmi.n	8007538 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80074f8:	4919      	ldr	r1, [pc, #100]	; (8007560 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80074fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80074fe:	625a      	str	r2, [r3, #36]	; 0x24
 8007500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007502:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8007506:	9201      	str	r2, [sp, #4]
 8007508:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800750a:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 800750c:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800750e:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8007512:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8007516:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800751a:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800751c:	d013      	beq.n	8007546 <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800751e:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007520:	4a10      	ldr	r2, [pc, #64]	; (8007564 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8007522:	6813      	ldr	r3, [r2, #0]
 8007524:	f023 0301 	bic.w	r3, r3, #1
 8007528:	4303      	orrs	r3, r0
 800752a:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800752c:	6813      	ldr	r3, [r2, #0]
 800752e:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8007532:	4058      	eors	r0, r3
 8007534:	b002      	add	sp, #8
 8007536:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007538:	4b09      	ldr	r3, [pc, #36]	; (8007560 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8007540:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8007544:	d1eb      	bne.n	800751e <RCC_SetFlashLatencyFromMSIRange+0x3a>
 8007546:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800754a:	d1e8      	bne.n	800751e <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 800754c:	4a05      	ldr	r2, [pc, #20]	; (8007564 <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 800754e:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 8007550:	6813      	ldr	r3, [r2, #0]
 8007552:	f043 0304 	orr.w	r3, r3, #4
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	e7e2      	b.n	8007520 <RCC_SetFlashLatencyFromMSIRange+0x3c>
 800755a:	bf00      	nop
 800755c:	40023800 	.word	0x40023800
 8007560:	40007000 	.word	0x40007000
 8007564:	40023c00 	.word	0x40023c00

08007568 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8007568:	2800      	cmp	r0, #0
 800756a:	f000 81f8 	beq.w	800795e <HAL_RCC_OscConfig+0x3f6>
{
 800756e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007572:	4aa2      	ldr	r2, [pc, #648]	; (80077fc <HAL_RCC_OscConfig+0x294>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007574:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007576:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007578:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800757a:	07d9      	lsls	r1, r3, #31
 800757c:	4604      	mov	r4, r0
{
 800757e:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007580:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007584:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007588:	d52e      	bpl.n	80075e8 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800758a:	2d08      	cmp	r5, #8
 800758c:	f000 8128 	beq.w	80077e0 <HAL_RCC_OscConfig+0x278>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007590:	2d0c      	cmp	r5, #12
 8007592:	f000 8122 	beq.w	80077da <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007596:	6863      	ldr	r3, [r4, #4]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d00f      	beq.n	80075bc <HAL_RCC_OscConfig+0x54>
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8180 	beq.w	80078a2 <HAL_RCC_OscConfig+0x33a>
 80075a2:	2b05      	cmp	r3, #5
 80075a4:	4b95      	ldr	r3, [pc, #596]	; (80077fc <HAL_RCC_OscConfig+0x294>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	f000 81db 	beq.w	8007962 <HAL_RCC_OscConfig+0x3fa>
 80075ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	e004      	b.n	80075c6 <HAL_RCC_OscConfig+0x5e>
 80075bc:	4a8f      	ldr	r2, [pc, #572]	; (80077fc <HAL_RCC_OscConfig+0x294>)
 80075be:	6813      	ldr	r3, [r2, #0]
 80075c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80075c6:	f7fd fdc1 	bl	800514c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075ca:	f8df 8230 	ldr.w	r8, [pc, #560]	; 80077fc <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 80075ce:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075d0:	e005      	b.n	80075de <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075d2:	f7fd fdbb 	bl	800514c <HAL_GetTick>
 80075d6:	1bc0      	subs	r0, r0, r7
 80075d8:	2864      	cmp	r0, #100	; 0x64
 80075da:	f200 815e 	bhi.w	800789a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075de:	f8d8 3000 	ldr.w	r3, [r8]
 80075e2:	039b      	lsls	r3, r3, #14
 80075e4:	d5f5      	bpl.n	80075d2 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	0799      	lsls	r1, r3, #30
 80075ea:	d522      	bpl.n	8007632 <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80075ec:	2d04      	cmp	r5, #4
 80075ee:	f000 8114 	beq.w	800781a <HAL_RCC_OscConfig+0x2b2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80075f2:	2d0c      	cmp	r5, #12
 80075f4:	f000 810e 	beq.w	8007814 <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075f8:	68e3      	ldr	r3, [r4, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 8179 	beq.w	80078f2 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 8007600:	2201      	movs	r2, #1
 8007602:	4b7f      	ldr	r3, [pc, #508]	; (8007800 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007604:	4f7d      	ldr	r7, [pc, #500]	; (80077fc <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_ENABLE();
 8007606:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007608:	f7fd fda0 	bl	800514c <HAL_GetTick>
 800760c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800760e:	e005      	b.n	800761c <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007610:	f7fd fd9c 	bl	800514c <HAL_GetTick>
 8007614:	1b80      	subs	r0, r0, r6
 8007616:	2802      	cmp	r0, #2
 8007618:	f200 813f 	bhi.w	800789a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	079b      	lsls	r3, r3, #30
 8007620:	d5f6      	bpl.n	8007610 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6922      	ldr	r2, [r4, #16]
 8007626:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800762a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800762e:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	06d9      	lsls	r1, r3, #27
 8007634:	d525      	bpl.n	8007682 <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007636:	2d00      	cmp	r5, #0
 8007638:	f000 8098 	beq.w	800776c <HAL_RCC_OscConfig+0x204>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800763c:	69a3      	ldr	r3, [r4, #24]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 816a 	beq.w	8007918 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_MSI_ENABLE();
 8007644:	2201      	movs	r2, #1
 8007646:	4b6e      	ldr	r3, [pc, #440]	; (8007800 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007648:	4e6c      	ldr	r6, [pc, #432]	; (80077fc <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_MSI_ENABLE();
 800764a:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 800764c:	f7fd fd7e 	bl	800514c <HAL_GetTick>
 8007650:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007652:	e005      	b.n	8007660 <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007654:	f7fd fd7a 	bl	800514c <HAL_GetTick>
 8007658:	1bc0      	subs	r0, r0, r7
 800765a:	2802      	cmp	r0, #2
 800765c:	f200 811d 	bhi.w	800789a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007660:	6833      	ldr	r3, [r6, #0]
 8007662:	059b      	lsls	r3, r3, #22
 8007664:	d5f6      	bpl.n	8007654 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007666:	6873      	ldr	r3, [r6, #4]
 8007668:	6a22      	ldr	r2, [r4, #32]
 800766a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800766e:	4313      	orrs	r3, r2
 8007670:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007672:	6873      	ldr	r3, [r6, #4]
 8007674:	69e2      	ldr	r2, [r4, #28]
 8007676:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800767a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800767e:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	0719      	lsls	r1, r3, #28
 8007684:	d516      	bpl.n	80076b4 <HAL_RCC_OscConfig+0x14c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007686:	6963      	ldr	r3, [r4, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8121 	beq.w	80078d0 <HAL_RCC_OscConfig+0x368>
      __HAL_RCC_LSI_ENABLE();
 800768e:	2201      	movs	r2, #1
 8007690:	4b5b      	ldr	r3, [pc, #364]	; (8007800 <HAL_RCC_OscConfig+0x298>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007692:	4f5a      	ldr	r7, [pc, #360]	; (80077fc <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_LSI_ENABLE();
 8007694:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8007698:	f7fd fd58 	bl	800514c <HAL_GetTick>
 800769c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800769e:	e005      	b.n	80076ac <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076a0:	f7fd fd54 	bl	800514c <HAL_GetTick>
 80076a4:	1b80      	subs	r0, r0, r6
 80076a6:	2802      	cmp	r0, #2
 80076a8:	f200 80f7 	bhi.w	800789a <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ae:	079a      	lsls	r2, r3, #30
 80076b0:	d5f6      	bpl.n	80076a0 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	075e      	lsls	r6, r3, #29
 80076b6:	d53b      	bpl.n	8007730 <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076b8:	4b50      	ldr	r3, [pc, #320]	; (80077fc <HAL_RCC_OscConfig+0x294>)
 80076ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076bc:	00d0      	lsls	r0, r2, #3
 80076be:	f100 8129 	bmi.w	8007914 <HAL_RCC_OscConfig+0x3ac>
      pwrclkchanged = SET;
 80076c2:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80076c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80076ca:	625a      	str	r2, [r3, #36]	; 0x24
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076d2:	9301      	str	r3, [sp, #4]
 80076d4:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076d6:	4f4b      	ldr	r7, [pc, #300]	; (8007804 <HAL_RCC_OscConfig+0x29c>)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	05d9      	lsls	r1, r3, #23
 80076dc:	f140 80cc 	bpl.w	8007878 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076e0:	68a3      	ldr	r3, [r4, #8]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	f000 8175 	beq.w	80079d2 <HAL_RCC_OscConfig+0x46a>
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 80a9 	beq.w	8007840 <HAL_RCC_OscConfig+0x2d8>
 80076ee:	2b05      	cmp	r3, #5
 80076f0:	4b42      	ldr	r3, [pc, #264]	; (80077fc <HAL_RCC_OscConfig+0x294>)
 80076f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076f4:	f000 818b 	beq.w	8007a0e <HAL_RCC_OscConfig+0x4a6>
 80076f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076fc:	635a      	str	r2, [r3, #52]	; 0x34
 80076fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007704:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8007706:	f7fd fd21 	bl	800514c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800770a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800770e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007710:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80077fc <HAL_RCC_OscConfig+0x294>
 8007714:	e005      	b.n	8007722 <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007716:	f7fd fd19 	bl	800514c <HAL_GetTick>
 800771a:	1bc0      	subs	r0, r0, r7
 800771c:	4548      	cmp	r0, r9
 800771e:	f200 80bc 	bhi.w	800789a <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007722:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8007726:	059b      	lsls	r3, r3, #22
 8007728:	d5f5      	bpl.n	8007716 <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 800772a:	2e00      	cmp	r6, #0
 800772c:	f040 814b 	bne.w	80079c6 <HAL_RCC_OscConfig+0x45e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007730:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007732:	b1b8      	cbz	r0, 8007764 <HAL_RCC_OscConfig+0x1fc>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007734:	2d0c      	cmp	r5, #12
 8007736:	f000 8152 	beq.w	80079de <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800773a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	4b2f      	ldr	r3, [pc, #188]	; (8007800 <HAL_RCC_OscConfig+0x298>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007742:	f000 8116 	beq.w	8007972 <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_PLL_DISABLE();
 8007746:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8007748:	f7fd fd00 	bl	800514c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800774c:	4d2b      	ldr	r5, [pc, #172]	; (80077fc <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 800774e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007750:	e005      	b.n	800775e <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007752:	f7fd fcfb 	bl	800514c <HAL_GetTick>
 8007756:	1b00      	subs	r0, r0, r4
 8007758:	2802      	cmp	r0, #2
 800775a:	f200 809e 	bhi.w	800789a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800775e:	682b      	ldr	r3, [r5, #0]
 8007760:	019b      	lsls	r3, r3, #6
 8007762:	d4f6      	bmi.n	8007752 <HAL_RCC_OscConfig+0x1ea>
  return HAL_OK;
 8007764:	2000      	movs	r0, #0
}
 8007766:	b003      	add	sp, #12
 8007768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800776c:	4b23      	ldr	r3, [pc, #140]	; (80077fc <HAL_RCC_OscConfig+0x294>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	059a      	lsls	r2, r3, #22
 8007772:	d502      	bpl.n	800777a <HAL_RCC_OscConfig+0x212>
 8007774:	69a3      	ldr	r3, [r4, #24]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d03b      	beq.n	80077f2 <HAL_RCC_OscConfig+0x28a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800777a:	4e20      	ldr	r6, [pc, #128]	; (80077fc <HAL_RCC_OscConfig+0x294>)
 800777c:	6a20      	ldr	r0, [r4, #32]
 800777e:	6873      	ldr	r3, [r6, #4]
 8007780:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007784:	4298      	cmp	r0, r3
 8007786:	f240 80d7 	bls.w	8007938 <HAL_RCC_OscConfig+0x3d0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800778a:	f7ff feab 	bl	80074e4 <RCC_SetFlashLatencyFromMSIRange>
 800778e:	2800      	cmp	r0, #0
 8007790:	d12f      	bne.n	80077f2 <HAL_RCC_OscConfig+0x28a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007792:	6872      	ldr	r2, [r6, #4]
 8007794:	6a23      	ldr	r3, [r4, #32]
 8007796:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800779a:	431a      	orrs	r2, r3
 800779c:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800779e:	6872      	ldr	r2, [r6, #4]
 80077a0:	69e1      	ldr	r1, [r4, #28]
 80077a2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80077a6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80077aa:	6072      	str	r2, [r6, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80077ac:	4a13      	ldr	r2, [pc, #76]	; (80077fc <HAL_RCC_OscConfig+0x294>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80077ae:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80077b0:	6891      	ldr	r1, [r2, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80077b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80077b6:	3301      	adds	r3, #1
 80077b8:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80077bc:	4a12      	ldr	r2, [pc, #72]	; (8007808 <HAL_RCC_OscConfig+0x2a0>)
 80077be:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80077c2:	5c52      	ldrb	r2, [r2, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80077c4:	4811      	ldr	r0, [pc, #68]	; (800780c <HAL_RCC_OscConfig+0x2a4>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80077c6:	40d3      	lsrs	r3, r2
        status = HAL_InitTick(uwTickPrio);
 80077c8:	4a11      	ldr	r2, [pc, #68]	; (8007810 <HAL_RCC_OscConfig+0x2a8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80077ca:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick(uwTickPrio);
 80077cc:	6810      	ldr	r0, [r2, #0]
 80077ce:	f7fd fc7b 	bl	80050c8 <HAL_InitTick>
        if(status != HAL_OK)
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d1c7      	bne.n	8007766 <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	e753      	b.n	8007682 <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80077da:	2e00      	cmp	r6, #0
 80077dc:	f43f aedb 	beq.w	8007596 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077e0:	4a06      	ldr	r2, [pc, #24]	; (80077fc <HAL_RCC_OscConfig+0x294>)
 80077e2:	6812      	ldr	r2, [r2, #0]
 80077e4:	0392      	lsls	r2, r2, #14
 80077e6:	f57f aeff 	bpl.w	80075e8 <HAL_RCC_OscConfig+0x80>
 80077ea:	6862      	ldr	r2, [r4, #4]
 80077ec:	2a00      	cmp	r2, #0
 80077ee:	f47f aefb 	bne.w	80075e8 <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 80077f2:	2001      	movs	r0, #1
}
 80077f4:	b003      	add	sp, #12
 80077f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077fa:	bf00      	nop
 80077fc:	40023800 	.word	0x40023800
 8007800:	42470000 	.word	0x42470000
 8007804:	40007000 	.word	0x40007000
 8007808:	0800d350 	.word	0x0800d350
 800780c:	20000024 	.word	0x20000024
 8007810:	2000002c 	.word	0x2000002c
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007814:	2e00      	cmp	r6, #0
 8007816:	f47f aeef 	bne.w	80075f8 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800781a:	4a81      	ldr	r2, [pc, #516]	; (8007a20 <HAL_RCC_OscConfig+0x4b8>)
 800781c:	6812      	ldr	r2, [r2, #0]
 800781e:	0792      	lsls	r2, r2, #30
 8007820:	d502      	bpl.n	8007828 <HAL_RCC_OscConfig+0x2c0>
 8007822:	68e2      	ldr	r2, [r4, #12]
 8007824:	2a01      	cmp	r2, #1
 8007826:	d1e4      	bne.n	80077f2 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007828:	497d      	ldr	r1, [pc, #500]	; (8007a20 <HAL_RCC_OscConfig+0x4b8>)
 800782a:	6920      	ldr	r0, [r4, #16]
 800782c:	684a      	ldr	r2, [r1, #4]
 800782e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8007832:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007836:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007838:	06d9      	lsls	r1, r3, #27
 800783a:	f57f af22 	bpl.w	8007682 <HAL_RCC_OscConfig+0x11a>
 800783e:	e6fa      	b.n	8007636 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007840:	4f77      	ldr	r7, [pc, #476]	; (8007a20 <HAL_RCC_OscConfig+0x4b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007842:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800784c:	637b      	str	r3, [r7, #52]	; 0x34
 800784e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007850:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007854:	637b      	str	r3, [r7, #52]	; 0x34
      tickstart = HAL_GetTick();
 8007856:	f7fd fc79 	bl	800514c <HAL_GetTick>
 800785a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800785c:	e005      	b.n	800786a <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800785e:	f7fd fc75 	bl	800514c <HAL_GetTick>
 8007862:	eba0 0008 	sub.w	r0, r0, r8
 8007866:	4548      	cmp	r0, r9
 8007868:	d817      	bhi.n	800789a <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800786a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786c:	0598      	lsls	r0, r3, #22
 800786e:	d4f6      	bmi.n	800785e <HAL_RCC_OscConfig+0x2f6>
    if(pwrclkchanged == SET)
 8007870:	2e00      	cmp	r6, #0
 8007872:	f43f af5d 	beq.w	8007730 <HAL_RCC_OscConfig+0x1c8>
 8007876:	e0a6      	b.n	80079c6 <HAL_RCC_OscConfig+0x45e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800787e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8007880:	f7fd fc64 	bl	800514c <HAL_GetTick>
 8007884:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	05da      	lsls	r2, r3, #23
 800788a:	f53f af29 	bmi.w	80076e0 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800788e:	f7fd fc5d 	bl	800514c <HAL_GetTick>
 8007892:	eba0 0008 	sub.w	r0, r0, r8
 8007896:	2864      	cmp	r0, #100	; 0x64
 8007898:	d9f5      	bls.n	8007886 <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 800789a:	2003      	movs	r0, #3
}
 800789c:	b003      	add	sp, #12
 800789e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078a2:	4f5f      	ldr	r7, [pc, #380]	; (8007a20 <HAL_RCC_OscConfig+0x4b8>)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078b2:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80078b4:	f7fd fc4a 	bl	800514c <HAL_GetTick>
 80078b8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078ba:	e005      	b.n	80078c8 <HAL_RCC_OscConfig+0x360>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078bc:	f7fd fc46 	bl	800514c <HAL_GetTick>
 80078c0:	eba0 0008 	sub.w	r0, r0, r8
 80078c4:	2864      	cmp	r0, #100	; 0x64
 80078c6:	d8e8      	bhi.n	800789a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	0398      	lsls	r0, r3, #14
 80078cc:	d4f6      	bmi.n	80078bc <HAL_RCC_OscConfig+0x354>
 80078ce:	e68a      	b.n	80075e6 <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 80078d0:	4a54      	ldr	r2, [pc, #336]	; (8007a24 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078d2:	4f53      	ldr	r7, [pc, #332]	; (8007a20 <HAL_RCC_OscConfig+0x4b8>)
      __HAL_RCC_LSI_DISABLE();
 80078d4:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
      tickstart = HAL_GetTick();
 80078d8:	f7fd fc38 	bl	800514c <HAL_GetTick>
 80078dc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078de:	e004      	b.n	80078ea <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078e0:	f7fd fc34 	bl	800514c <HAL_GetTick>
 80078e4:	1b80      	subs	r0, r0, r6
 80078e6:	2802      	cmp	r0, #2
 80078e8:	d8d7      	bhi.n	800789a <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ec:	079b      	lsls	r3, r3, #30
 80078ee:	d4f7      	bmi.n	80078e0 <HAL_RCC_OscConfig+0x378>
 80078f0:	e6df      	b.n	80076b2 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 80078f2:	4a4c      	ldr	r2, [pc, #304]	; (8007a24 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80078f4:	4f4a      	ldr	r7, [pc, #296]	; (8007a20 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_HSI_DISABLE();
 80078f6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80078f8:	f7fd fc28 	bl	800514c <HAL_GetTick>
 80078fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80078fe:	e004      	b.n	800790a <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007900:	f7fd fc24 	bl	800514c <HAL_GetTick>
 8007904:	1b80      	subs	r0, r0, r6
 8007906:	2802      	cmp	r0, #2
 8007908:	d8c7      	bhi.n	800789a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	0798      	lsls	r0, r3, #30
 800790e:	d4f7      	bmi.n	8007900 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	e68e      	b.n	8007632 <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 8007914:	2600      	movs	r6, #0
 8007916:	e6de      	b.n	80076d6 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_MSI_DISABLE();
 8007918:	4a42      	ldr	r2, [pc, #264]	; (8007a24 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800791a:	4f41      	ldr	r7, [pc, #260]	; (8007a20 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_MSI_DISABLE();
 800791c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800791e:	f7fd fc15 	bl	800514c <HAL_GetTick>
 8007922:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007924:	e004      	b.n	8007930 <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007926:	f7fd fc11 	bl	800514c <HAL_GetTick>
 800792a:	1b80      	subs	r0, r0, r6
 800792c:	2802      	cmp	r0, #2
 800792e:	d8b4      	bhi.n	800789a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	0598      	lsls	r0, r3, #22
 8007934:	d4f7      	bmi.n	8007926 <HAL_RCC_OscConfig+0x3be>
 8007936:	e74e      	b.n	80077d6 <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007938:	6873      	ldr	r3, [r6, #4]
 800793a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800793e:	4303      	orrs	r3, r0
 8007940:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007942:	6873      	ldr	r3, [r6, #4]
 8007944:	69e2      	ldr	r2, [r4, #28]
 8007946:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800794a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800794e:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007950:	f7ff fdc8 	bl	80074e4 <RCC_SetFlashLatencyFromMSIRange>
 8007954:	2800      	cmp	r0, #0
 8007956:	f47f af4c 	bne.w	80077f2 <HAL_RCC_OscConfig+0x28a>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800795a:	6a23      	ldr	r3, [r4, #32]
 800795c:	e726      	b.n	80077ac <HAL_RCC_OscConfig+0x244>
    return HAL_ERROR;
 800795e:	2001      	movs	r0, #1
}
 8007960:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007962:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	e629      	b.n	80075c6 <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 8007972:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8007974:	f7fd fbea 	bl	800514c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007978:	4e29      	ldr	r6, [pc, #164]	; (8007a20 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 800797a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800797c:	e004      	b.n	8007988 <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800797e:	f7fd fbe5 	bl	800514c <HAL_GetTick>
 8007982:	1b40      	subs	r0, r0, r5
 8007984:	2802      	cmp	r0, #2
 8007986:	d888      	bhi.n	800789a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007988:	6833      	ldr	r3, [r6, #0]
 800798a:	0199      	lsls	r1, r3, #6
 800798c:	d4f7      	bmi.n	800797e <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800798e:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 8007992:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 8007994:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007996:	68b2      	ldr	r2, [r6, #8]
 8007998:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800799a:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800799e:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80079a0:	4a20      	ldr	r2, [pc, #128]	; (8007a24 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079a2:	4303      	orrs	r3, r0
 80079a4:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 80079a6:	6611      	str	r1, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 80079a8:	f7fd fbd0 	bl	800514c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079ac:	4d1c      	ldr	r5, [pc, #112]	; (8007a20 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 80079ae:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079b0:	e005      	b.n	80079be <HAL_RCC_OscConfig+0x456>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079b2:	f7fd fbcb 	bl	800514c <HAL_GetTick>
 80079b6:	1b00      	subs	r0, r0, r4
 80079b8:	2802      	cmp	r0, #2
 80079ba:	f63f af6e 	bhi.w	800789a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079be:	682b      	ldr	r3, [r5, #0]
 80079c0:	019a      	lsls	r2, r3, #6
 80079c2:	d5f6      	bpl.n	80079b2 <HAL_RCC_OscConfig+0x44a>
 80079c4:	e6ce      	b.n	8007764 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80079c6:	4a16      	ldr	r2, [pc, #88]	; (8007a20 <HAL_RCC_OscConfig+0x4b8>)
 80079c8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80079ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079ce:	6253      	str	r3, [r2, #36]	; 0x24
 80079d0:	e6ae      	b.n	8007730 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079d2:	4a13      	ldr	r2, [pc, #76]	; (8007a20 <HAL_RCC_OscConfig+0x4b8>)
 80079d4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80079d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079da:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079dc:	e693      	b.n	8007706 <HAL_RCC_OscConfig+0x19e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079de:	2801      	cmp	r0, #1
 80079e0:	f43f aec1 	beq.w	8007766 <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 80079e4:	4b0e      	ldr	r3, [pc, #56]	; (8007a20 <HAL_RCC_OscConfig+0x4b8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 80079e8:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ea:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80079ee:	4291      	cmp	r1, r2
 80079f0:	f47f aeff 	bne.w	80077f2 <HAL_RCC_OscConfig+0x28a>
 80079f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80079f6:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079fa:	4291      	cmp	r1, r2
 80079fc:	f47f aef9 	bne.w	80077f2 <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007a00:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007a02:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 8007a06:	1a18      	subs	r0, r3, r0
 8007a08:	bf18      	it	ne
 8007a0a:	2001      	movne	r0, #1
 8007a0c:	e6ab      	b.n	8007766 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a12:	635a      	str	r2, [r3, #52]	; 0x34
 8007a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a1a:	635a      	str	r2, [r3, #52]	; 0x34
 8007a1c:	e673      	b.n	8007706 <HAL_RCC_OscConfig+0x19e>
 8007a1e:	bf00      	nop
 8007a20:	40023800 	.word	0x40023800
 8007a24:	42470000 	.word	0x42470000

08007a28 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	f000 80c2 	beq.w	8007bb2 <HAL_RCC_ClockConfig+0x18a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a2e:	4a85      	ldr	r2, [pc, #532]	; (8007c44 <HAL_RCC_ClockConfig+0x21c>)
{
 8007a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a34:	6813      	ldr	r3, [r2, #0]
 8007a36:	4604      	mov	r4, r0
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	428b      	cmp	r3, r1
 8007a3e:	460d      	mov	r5, r1
 8007a40:	d213      	bcs.n	8007a6a <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a42:	2901      	cmp	r1, #1
 8007a44:	d103      	bne.n	8007a4e <HAL_RCC_ClockConfig+0x26>
 8007a46:	6813      	ldr	r3, [r2, #0]
 8007a48:	f043 0304 	orr.w	r3, r3, #4
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	4a7d      	ldr	r2, [pc, #500]	; (8007c44 <HAL_RCC_ClockConfig+0x21c>)
 8007a50:	6813      	ldr	r3, [r2, #0]
 8007a52:	f023 0301 	bic.w	r3, r3, #1
 8007a56:	432b      	orrs	r3, r5
 8007a58:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a5a:	6813      	ldr	r3, [r2, #0]
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	42ab      	cmp	r3, r5
 8007a62:	d002      	beq.n	8007a6a <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 8007a64:	2001      	movs	r0, #1
}
 8007a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	0799      	lsls	r1, r3, #30
 8007a6e:	d506      	bpl.n	8007a7e <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a70:	4975      	ldr	r1, [pc, #468]	; (8007c48 <HAL_RCC_ClockConfig+0x220>)
 8007a72:	68a0      	ldr	r0, [r4, #8]
 8007a74:	688a      	ldr	r2, [r1, #8]
 8007a76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007a7a:	4302      	orrs	r2, r0
 8007a7c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a7e:	07da      	lsls	r2, r3, #31
 8007a80:	d529      	bpl.n	8007ad6 <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a82:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a84:	4b70      	ldr	r3, [pc, #448]	; (8007c48 <HAL_RCC_ClockConfig+0x220>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a86:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a88:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a8a:	f000 808e 	beq.w	8007baa <HAL_RCC_ClockConfig+0x182>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a8e:	2a03      	cmp	r2, #3
 8007a90:	f000 8085 	beq.w	8007b9e <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007a94:	2a01      	cmp	r2, #1
 8007a96:	f000 80d1 	beq.w	8007c3c <HAL_RCC_ClockConfig+0x214>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007a9a:	0598      	lsls	r0, r3, #22
 8007a9c:	d5e2      	bpl.n	8007a64 <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a9e:	4e6a      	ldr	r6, [pc, #424]	; (8007c48 <HAL_RCC_ClockConfig+0x220>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aa0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007aa4:	68b3      	ldr	r3, [r6, #8]
 8007aa6:	f023 0303 	bic.w	r3, r3, #3
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8007aae:	f7fd fb4d 	bl	800514c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ab2:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8007ab4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d055      	beq.n	8007b66 <HAL_RCC_ClockConfig+0x13e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d05e      	beq.n	8007b7c <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d105      	bne.n	8007ace <HAL_RCC_ClockConfig+0xa6>
 8007ac2:	e066      	b.n	8007b92 <HAL_RCC_ClockConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ac4:	f7fd fb42 	bl	800514c <HAL_GetTick>
 8007ac8:	1bc0      	subs	r0, r0, r7
 8007aca:	4540      	cmp	r0, r8
 8007acc:	d873      	bhi.n	8007bb6 <HAL_RCC_ClockConfig+0x18e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007ace:	68b3      	ldr	r3, [r6, #8]
 8007ad0:	f013 0f0c 	tst.w	r3, #12
 8007ad4:	d1f6      	bne.n	8007ac4 <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ad6:	4a5b      	ldr	r2, [pc, #364]	; (8007c44 <HAL_RCC_ClockConfig+0x21c>)
 8007ad8:	6813      	ldr	r3, [r2, #0]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	42ab      	cmp	r3, r5
 8007ae0:	d906      	bls.n	8007af0 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ae2:	6813      	ldr	r3, [r2, #0]
 8007ae4:	f023 0301 	bic.w	r3, r3, #1
 8007ae8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aea:	6813      	ldr	r3, [r2, #0]
 8007aec:	07da      	lsls	r2, r3, #31
 8007aee:	d4b9      	bmi.n	8007a64 <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	0759      	lsls	r1, r3, #29
 8007af4:	d506      	bpl.n	8007b04 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007af6:	4954      	ldr	r1, [pc, #336]	; (8007c48 <HAL_RCC_ClockConfig+0x220>)
 8007af8:	68e0      	ldr	r0, [r4, #12]
 8007afa:	688a      	ldr	r2, [r1, #8]
 8007afc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b00:	4302      	orrs	r2, r0
 8007b02:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b04:	071b      	lsls	r3, r3, #28
 8007b06:	d420      	bmi.n	8007b4a <HAL_RCC_ClockConfig+0x122>
  tmpreg = RCC->CFGR;
 8007b08:	494f      	ldr	r1, [pc, #316]	; (8007c48 <HAL_RCC_ClockConfig+0x220>)
 8007b0a:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8007b0c:	f002 030c 	and.w	r3, r2, #12
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d079      	beq.n	8007c08 <HAL_RCC_ClockConfig+0x1e0>
 8007b14:	2b0c      	cmp	r3, #12
 8007b16:	d050      	beq.n	8007bba <HAL_RCC_ClockConfig+0x192>
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d044      	beq.n	8007ba6 <HAL_RCC_ClockConfig+0x17e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007b1c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007b20:	684b      	ldr	r3, [r1, #4]
 8007b22:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007b26:	3301      	adds	r3, #1
 8007b28:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b2a:	4b47      	ldr	r3, [pc, #284]	; (8007c48 <HAL_RCC_ClockConfig+0x220>)
 8007b2c:	4a47      	ldr	r2, [pc, #284]	; (8007c4c <HAL_RCC_ClockConfig+0x224>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 8007b30:	4947      	ldr	r1, [pc, #284]	; (8007c50 <HAL_RCC_ClockConfig+0x228>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007b36:	5cd3      	ldrb	r3, [r2, r3]
 8007b38:	4a46      	ldr	r2, [pc, #280]	; (8007c54 <HAL_RCC_ClockConfig+0x22c>)
 8007b3a:	fa20 f303 	lsr.w	r3, r0, r3
}
 8007b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8007b42:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b44:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 8007b46:	f7fd babf 	b.w	80050c8 <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b4a:	4a3f      	ldr	r2, [pc, #252]	; (8007c48 <HAL_RCC_ClockConfig+0x220>)
 8007b4c:	6921      	ldr	r1, [r4, #16]
 8007b4e:	6893      	ldr	r3, [r2, #8]
 8007b50:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007b54:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007b58:	6093      	str	r3, [r2, #8]
 8007b5a:	e7d5      	b.n	8007b08 <HAL_RCC_ClockConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b5c:	f7fd faf6 	bl	800514c <HAL_GetTick>
 8007b60:	1bc3      	subs	r3, r0, r7
 8007b62:	4543      	cmp	r3, r8
 8007b64:	d827      	bhi.n	8007bb6 <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b66:	68b3      	ldr	r3, [r6, #8]
 8007b68:	f003 030c 	and.w	r3, r3, #12
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d1f5      	bne.n	8007b5c <HAL_RCC_ClockConfig+0x134>
 8007b70:	e7b1      	b.n	8007ad6 <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b72:	f7fd faeb 	bl	800514c <HAL_GetTick>
 8007b76:	1bc0      	subs	r0, r0, r7
 8007b78:	4540      	cmp	r0, r8
 8007b7a:	d81c      	bhi.n	8007bb6 <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b7c:	68b3      	ldr	r3, [r6, #8]
 8007b7e:	f003 030c 	and.w	r3, r3, #12
 8007b82:	2b0c      	cmp	r3, #12
 8007b84:	d1f5      	bne.n	8007b72 <HAL_RCC_ClockConfig+0x14a>
 8007b86:	e7a6      	b.n	8007ad6 <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b88:	f7fd fae0 	bl	800514c <HAL_GetTick>
 8007b8c:	1bc0      	subs	r0, r0, r7
 8007b8e:	4540      	cmp	r0, r8
 8007b90:	d811      	bhi.n	8007bb6 <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b92:	68b3      	ldr	r3, [r6, #8]
 8007b94:	f003 030c 	and.w	r3, r3, #12
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d1f5      	bne.n	8007b88 <HAL_RCC_ClockConfig+0x160>
 8007b9c:	e79b      	b.n	8007ad6 <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b9e:	019f      	lsls	r7, r3, #6
 8007ba0:	f53f af7d 	bmi.w	8007a9e <HAL_RCC_ClockConfig+0x76>
 8007ba4:	e75e      	b.n	8007a64 <HAL_RCC_ClockConfig+0x3c>
      sysclockfreq = HSI_VALUE;
 8007ba6:	482c      	ldr	r0, [pc, #176]	; (8007c58 <HAL_RCC_ClockConfig+0x230>)
 8007ba8:	e7bf      	b.n	8007b2a <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007baa:	039b      	lsls	r3, r3, #14
 8007bac:	f53f af77 	bmi.w	8007a9e <HAL_RCC_ClockConfig+0x76>
 8007bb0:	e758      	b.n	8007a64 <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 8007bb2:	2001      	movs	r0, #1
}
 8007bb4:	4770      	bx	lr
          return HAL_TIMEOUT;
 8007bb6:	2003      	movs	r0, #3
 8007bb8:	e755      	b.n	8007a66 <HAL_RCC_ClockConfig+0x3e>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007bba:	4828      	ldr	r0, [pc, #160]	; (8007c5c <HAL_RCC_ClockConfig+0x234>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bbc:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007bbe:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8007bc2:	5c44      	ldrb	r4, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007bc4:	f3c2 5281 	ubfx	r2, r2, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bc8:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007bcc:	f102 0201 	add.w	r2, r2, #1
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007bd0:	ea4f 1144 	mov.w	r1, r4, lsl #5
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bd4:	d01a      	beq.n	8007c0c <HAL_RCC_ClockConfig+0x1e4>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007bd6:	1b09      	subs	r1, r1, r4
 8007bd8:	eb65 0505 	sbc.w	r5, r5, r5
 8007bdc:	01ab      	lsls	r3, r5, #6
 8007bde:	0188      	lsls	r0, r1, #6
 8007be0:	1a40      	subs	r0, r0, r1
 8007be2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007be6:	eb63 0305 	sbc.w	r3, r3, r5
 8007bea:	00c1      	lsls	r1, r0, #3
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	190c      	adds	r4, r1, r4
 8007bf0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007bf4:	f143 0300 	adc.w	r3, r3, #0
 8007bf8:	0259      	lsls	r1, r3, #9
 8007bfa:	0260      	lsls	r0, r4, #9
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	ea41 51d4 	orr.w	r1, r1, r4, lsr #23
 8007c02:	f7f9 fa4d 	bl	80010a0 <__aeabi_uldivmod>
 8007c06:	e790      	b.n	8007b2a <HAL_RCC_ClockConfig+0x102>
  switch (tmpreg & RCC_CFGR_SWS)
 8007c08:	4815      	ldr	r0, [pc, #84]	; (8007c60 <HAL_RCC_ClockConfig+0x238>)
 8007c0a:	e78e      	b.n	8007b2a <HAL_RCC_ClockConfig+0x102>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007c0c:	1b0d      	subs	r5, r1, r4
 8007c0e:	eb66 0606 	sbc.w	r6, r6, r6
 8007c12:	01b0      	lsls	r0, r6, #6
 8007c14:	01a9      	lsls	r1, r5, #6
 8007c16:	1b49      	subs	r1, r1, r5
 8007c18:	ea40 6095 	orr.w	r0, r0, r5, lsr #26
 8007c1c:	eb60 0006 	sbc.w	r0, r0, r6
 8007c20:	00c0      	lsls	r0, r0, #3
 8007c22:	ea40 7051 	orr.w	r0, r0, r1, lsr #29
 8007c26:	00c9      	lsls	r1, r1, #3
 8007c28:	190c      	adds	r4, r1, r4
 8007c2a:	f140 0000 	adc.w	r0, r0, #0
 8007c2e:	0281      	lsls	r1, r0, #10
 8007c30:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 8007c34:	02a0      	lsls	r0, r4, #10
 8007c36:	f7f9 fa33 	bl	80010a0 <__aeabi_uldivmod>
 8007c3a:	e776      	b.n	8007b2a <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c3c:	079e      	lsls	r6, r3, #30
 8007c3e:	f53f af2e 	bmi.w	8007a9e <HAL_RCC_ClockConfig+0x76>
 8007c42:	e70f      	b.n	8007a64 <HAL_RCC_ClockConfig+0x3c>
 8007c44:	40023c00 	.word	0x40023c00
 8007c48:	40023800 	.word	0x40023800
 8007c4c:	0800d350 	.word	0x0800d350
 8007c50:	2000002c 	.word	0x2000002c
 8007c54:	20000024 	.word	0x20000024
 8007c58:	00f42400 	.word	0x00f42400
 8007c5c:	0800d368 	.word	0x0800d368
 8007c60:	007a1200 	.word	0x007a1200

08007c64 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c64:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8007c66:	4a05      	ldr	r2, [pc, #20]	; (8007c7c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	4905      	ldr	r1, [pc, #20]	; (8007c80 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007c6c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007c70:	5ccb      	ldrb	r3, [r1, r3]
 8007c72:	6810      	ldr	r0, [r2, #0]
}
 8007c74:	40d8      	lsrs	r0, r3
 8007c76:	4770      	bx	lr
 8007c78:	40023800 	.word	0x40023800
 8007c7c:	20000024 	.word	0x20000024
 8007c80:	0800d360 	.word	0x0800d360

08007c84 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c84:	4b04      	ldr	r3, [pc, #16]	; (8007c98 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8007c86:	4a05      	ldr	r2, [pc, #20]	; (8007c9c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	4905      	ldr	r1, [pc, #20]	; (8007ca0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007c8c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007c90:	5ccb      	ldrb	r3, [r1, r3]
 8007c92:	6810      	ldr	r0, [r2, #0]
}
 8007c94:	40d8      	lsrs	r0, r3
 8007c96:	4770      	bx	lr
 8007c98:	40023800 	.word	0x40023800
 8007c9c:	20000024 	.word	0x20000024
 8007ca0:	0800d360 	.word	0x0800d360

08007ca4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d049      	beq.n	8007d3c <HAL_TIM_Base_Init+0x98>
{
 8007ca8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007caa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007cae:	4604      	mov	r4, r0
 8007cb0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d03c      	beq.n	8007d32 <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb8:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cba:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007cbc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cc0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8007cc4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cc6:	d013      	beq.n	8007cf0 <HAL_TIM_Base_Init+0x4c>
 8007cc8:	491d      	ldr	r1, [pc, #116]	; (8007d40 <HAL_TIM_Base_Init+0x9c>)
 8007cca:	428a      	cmp	r2, r1
 8007ccc:	d010      	beq.n	8007cf0 <HAL_TIM_Base_Init+0x4c>
 8007cce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007cd2:	428a      	cmp	r2, r1
 8007cd4:	d00c      	beq.n	8007cf0 <HAL_TIM_Base_Init+0x4c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cd6:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8007cda:	428a      	cmp	r2, r1
 8007cdc:	d00c      	beq.n	8007cf8 <HAL_TIM_Base_Init+0x54>
 8007cde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ce2:	428a      	cmp	r2, r1
 8007ce4:	d008      	beq.n	8007cf8 <HAL_TIM_Base_Init+0x54>
 8007ce6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007cea:	428a      	cmp	r2, r1
 8007cec:	d108      	bne.n	8007d00 <HAL_TIM_Base_Init+0x5c>
 8007cee:	e003      	b.n	8007cf8 <HAL_TIM_Base_Init+0x54>
    tmpcr1 |= Structure->CounterMode;
 8007cf0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007cf6:	430b      	orrs	r3, r1
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cf8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cfe:	430b      	orrs	r3, r1
  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d00:	2101      	movs	r1, #1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d02:	6960      	ldr	r0, [r4, #20]
 8007d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d08:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d0a:	68e0      	ldr	r0, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8007d0c:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8007d0e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d10:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007d12:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007d14:	6151      	str	r1, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d16:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d1a:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 8007d1e:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 8007d22:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 8007d26:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 8007d2a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  return HAL_OK;
 8007d2e:	2000      	movs	r0, #0
}
 8007d30:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007d32:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8007d36:	f7fc ffd3 	bl	8004ce0 <HAL_TIM_Base_MspInit>
 8007d3a:	e7bd      	b.n	8007cb8 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8007d3c:	2001      	movs	r0, #1
}
 8007d3e:	4770      	bx	lr
 8007d40:	40000400 	.word	0x40000400

08007d44 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007d44:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d120      	bne.n	8007d8e <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4c:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d4e:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007d50:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d54:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d5a:	f042 0201 	orr.w	r2, r2, #1
 8007d5e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d60:	d00a      	beq.n	8007d78 <HAL_TIM_Base_Start_IT+0x34>
 8007d62:	4a0d      	ldr	r2, [pc, #52]	; (8007d98 <HAL_TIM_Base_Start_IT+0x54>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d007      	beq.n	8007d78 <HAL_TIM_Base_Start_IT+0x34>
 8007d68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d003      	beq.n	8007d78 <HAL_TIM_Base_Start_IT+0x34>
 8007d70:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d104      	bne.n	8007d82 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d7e:	2a06      	cmp	r2, #6
 8007d80:	d007      	beq.n	8007d92 <HAL_TIM_Base_Start_IT+0x4e>
    __HAL_TIM_ENABLE(htim);
 8007d82:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8007d84:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	4770      	bx	lr
    return HAL_ERROR;
 8007d8e:	2001      	movs	r0, #1
 8007d90:	4770      	bx	lr
  return HAL_OK;
 8007d92:	2000      	movs	r0, #0
}
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	40000400 	.word	0x40000400

08007d9c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 8007d9c:	f241 1c11 	movw	ip, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007da0:	6802      	ldr	r2, [r0, #0]
{
 8007da2:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007da4:	68d1      	ldr	r1, [r2, #12]
 8007da6:	f021 0101 	bic.w	r1, r1, #1
 8007daa:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8007dac:	6a11      	ldr	r1, [r2, #32]
 8007dae:	ea11 0f0c 	tst.w	r1, ip
 8007db2:	d103      	bne.n	8007dbc <HAL_TIM_Base_Stop_IT+0x20>
 8007db4:	6811      	ldr	r1, [r2, #0]
 8007db6:	f021 0101 	bic.w	r1, r1, #1
 8007dba:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007dbc:	2201      	movs	r2, #1
}
 8007dbe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop

08007dc8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007dc8:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8007dcc:	2a01      	cmp	r2, #1
 8007dce:	d075      	beq.n	8007ebc <HAL_TIM_ConfigClockSource+0xf4>
{
 8007dd0:	b430      	push	{r4, r5}
 8007dd2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8007dd4:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd6:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8007dd8:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8007dda:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8007dde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8007de2:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007de4:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007de6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8007dea:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8007dee:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8007df0:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007df2:	d065      	beq.n	8007ec0 <HAL_TIM_ConfigClockSource+0xf8>
 8007df4:	d831      	bhi.n	8007e5a <HAL_TIM_ConfigClockSource+0x92>
 8007df6:	2a40      	cmp	r2, #64	; 0x40
 8007df8:	d048      	beq.n	8007e8c <HAL_TIM_ConfigClockSource+0xc4>
 8007dfa:	d921      	bls.n	8007e40 <HAL_TIM_ConfigClockSource+0x78>
 8007dfc:	2a50      	cmp	r2, #80	; 0x50
 8007dfe:	d116      	bne.n	8007e2e <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e00:	684c      	ldr	r4, [r1, #4]
 8007e02:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e04:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e06:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007e0a:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e0c:	6a04      	ldr	r4, [r0, #32]
 8007e0e:	f024 0401 	bic.w	r4, r4, #1
 8007e12:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e14:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e16:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e1a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e1e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007e20:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e22:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e28:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e2c:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 8007e2e:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8007e30:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8007e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8007e36:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  return HAL_OK;
 8007e3a:	4610      	mov	r0, r2
}
 8007e3c:	bc30      	pop	{r4, r5}
 8007e3e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007e40:	2a20      	cmp	r2, #32
 8007e42:	d002      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0x82>
 8007e44:	d91e      	bls.n	8007e84 <HAL_TIM_ConfigClockSource+0xbc>
 8007e46:	2a30      	cmp	r2, #48	; 0x30
 8007e48:	d1f1      	bne.n	8007e2e <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 8007e4a:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e4c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e50:	430a      	orrs	r2, r1
 8007e52:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8007e56:	6082      	str	r2, [r0, #8]
}
 8007e58:	e7e9      	b.n	8007e2e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8007e5a:	2a70      	cmp	r2, #112	; 0x70
 8007e5c:	d049      	beq.n	8007ef2 <HAL_TIM_ConfigClockSource+0x12a>
 8007e5e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007e62:	d1e4      	bne.n	8007e2e <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e64:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007e68:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e6a:	432a      	orrs	r2, r5
 8007e6c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e6e:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e72:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8007e76:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e78:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e7a:	6882      	ldr	r2, [r0, #8]
 8007e7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e80:	6082      	str	r2, [r0, #8]
      break;
 8007e82:	e7d4      	b.n	8007e2e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8007e84:	f032 0110 	bics.w	r1, r2, #16
 8007e88:	d1d1      	bne.n	8007e2e <HAL_TIM_ConfigClockSource+0x66>
 8007e8a:	e7de      	b.n	8007e4a <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e8c:	684c      	ldr	r4, [r1, #4]
 8007e8e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007e90:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e92:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007e96:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e98:	6a04      	ldr	r4, [r0, #32]
 8007e9a:	f024 0401 	bic.w	r4, r4, #1
 8007e9e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ea0:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ea2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ea6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007eaa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007eac:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007eae:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007eb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007eb4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007eb8:	6082      	str	r2, [r0, #8]
}
 8007eba:	e7b8      	b.n	8007e2e <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8007ebc:	2002      	movs	r0, #2
}
 8007ebe:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ec0:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ec2:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ec4:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ec8:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eca:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ecc:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ece:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ed2:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 8007ed6:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8007ed8:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007eda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ede:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8007ee2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007ee4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ee6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007eea:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8007eee:	6082      	str	r2, [r0, #8]
}
 8007ef0:	e79d      	b.n	8007e2e <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ef2:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007ef6:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ef8:	432a      	orrs	r2, r5
 8007efa:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007efc:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f00:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8007f04:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8007f06:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007f08:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f0a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007f0e:	6082      	str	r2, [r0, #8]
      break;
 8007f10:	e78d      	b.n	8007e2e <HAL_TIM_ConfigClockSource+0x66>
 8007f12:	bf00      	nop

08007f14 <HAL_TIM_OC_DelayElapsedCallback>:
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop

08007f18 <HAL_TIM_IC_CaptureCallback>:
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop

08007f1c <HAL_TIM_PWM_PulseFinishedCallback>:
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop

08007f20 <HAL_TIM_TriggerCallback>:
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop

08007f24 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f24:	6803      	ldr	r3, [r0, #0]
{
 8007f26:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f28:	691a      	ldr	r2, [r3, #16]
{
 8007f2a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f2c:	0791      	lsls	r1, r2, #30
 8007f2e:	d502      	bpl.n	8007f36 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	0792      	lsls	r2, r2, #30
 8007f34:	d450      	bmi.n	8007fd8 <HAL_TIM_IRQHandler+0xb4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f36:	691a      	ldr	r2, [r3, #16]
 8007f38:	0752      	lsls	r2, r2, #29
 8007f3a:	d502      	bpl.n	8007f42 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f3c:	68da      	ldr	r2, [r3, #12]
 8007f3e:	0750      	lsls	r0, r2, #29
 8007f40:	d437      	bmi.n	8007fb2 <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f42:	691a      	ldr	r2, [r3, #16]
 8007f44:	0711      	lsls	r1, r2, #28
 8007f46:	d502      	bpl.n	8007f4e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	0712      	lsls	r2, r2, #28
 8007f4c:	d422      	bmi.n	8007f94 <HAL_TIM_IRQHandler+0x70>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	06d0      	lsls	r0, r2, #27
 8007f52:	d502      	bpl.n	8007f5a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f54:	68da      	ldr	r2, [r3, #12]
 8007f56:	06d1      	lsls	r1, r2, #27
 8007f58:	d40c      	bmi.n	8007f74 <HAL_TIM_IRQHandler+0x50>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f5a:	691a      	ldr	r2, [r3, #16]
 8007f5c:	07d2      	lsls	r2, r2, #31
 8007f5e:	d502      	bpl.n	8007f66 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	07d0      	lsls	r0, r2, #31
 8007f64:	d450      	bmi.n	8008008 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	0651      	lsls	r1, r2, #25
 8007f6a:	d502      	bpl.n	8007f72 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	0652      	lsls	r2, r2, #25
 8007f70:	d443      	bmi.n	8007ffa <HAL_TIM_IRQHandler+0xd6>
}
 8007f72:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f74:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f78:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f7a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f7c:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f7e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007f80:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f82:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007f86:	d047      	beq.n	8008018 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8007f88:	f7ff ffc6 	bl	8007f18 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f8e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f90:	7622      	strb	r2, [r4, #24]
 8007f92:	e7e2      	b.n	8007f5a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f94:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f98:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f9a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f9c:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f9e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007fa0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fa2:	079b      	lsls	r3, r3, #30
 8007fa4:	d044      	beq.n	8008030 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 8007fa6:	f7ff ffb7 	bl	8007f18 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007faa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fac:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fae:	7622      	strb	r2, [r4, #24]
 8007fb0:	e7cd      	b.n	8007f4e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fb2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fb6:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fb8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fba:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fbc:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8007fbe:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fc0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007fc4:	d131      	bne.n	800802a <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fc6:	f7ff ffa5 	bl	8007f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f7ff ffa6 	bl	8007f1c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fd2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd4:	7622      	strb	r2, [r4, #24]
 8007fd6:	e7b4      	b.n	8007f42 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fd8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fdc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fde:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fe0:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	0799      	lsls	r1, r3, #30
 8007fe6:	d11d      	bne.n	8008024 <HAL_TIM_IRQHandler+0x100>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe8:	f7ff ff94 	bl	8007f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fec:	4620      	mov	r0, r4
 8007fee:	f7ff ff95 	bl	8007f1c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ff4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff6:	7622      	strb	r2, [r4, #24]
 8007ff8:	e79d      	b.n	8007f36 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ffa:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8007ffe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008000:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008002:	f7ff ff8d 	bl	8007f20 <HAL_TIM_TriggerCallback>
}
 8008006:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008008:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800800c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800800e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008010:	f7fc fab2 	bl	8004578 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	e7a6      	b.n	8007f66 <HAL_TIM_IRQHandler+0x42>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008018:	f7ff ff7c 	bl	8007f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800801c:	4620      	mov	r0, r4
 800801e:	f7ff ff7d 	bl	8007f1c <HAL_TIM_PWM_PulseFinishedCallback>
 8008022:	e7b3      	b.n	8007f8c <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_IC_CaptureCallback(htim);
 8008024:	f7ff ff78 	bl	8007f18 <HAL_TIM_IC_CaptureCallback>
 8008028:	e7e3      	b.n	8007ff2 <HAL_TIM_IRQHandler+0xce>
        HAL_TIM_IC_CaptureCallback(htim);
 800802a:	f7ff ff75 	bl	8007f18 <HAL_TIM_IC_CaptureCallback>
 800802e:	e7cf      	b.n	8007fd0 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008030:	f7ff ff70 	bl	8007f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008034:	4620      	mov	r0, r4
 8008036:	f7ff ff71 	bl	8007f1c <HAL_TIM_PWM_PulseFinishedCallback>
 800803a:	e7b6      	b.n	8007faa <HAL_TIM_IRQHandler+0x86>

0800803c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800803c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8008040:	2a01      	cmp	r2, #1
 8008042:	d028      	beq.n	8008096 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8008044:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008046:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008048:	681a      	ldr	r2, [r3, #0]
{
 800804a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800804c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 8008050:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008052:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008054:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008058:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800805a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 800805e:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8008060:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008062:	d00a      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8008064:	480d      	ldr	r0, [pc, #52]	; (800809c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8008066:	4282      	cmp	r2, r0
 8008068:	d007      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800806a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800806e:	4282      	cmp	r2, r0
 8008070:	d003      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8008072:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8008076:	4282      	cmp	r2, r0
 8008078:	d104      	bne.n	8008084 <HAL_TIMEx_MasterConfigSynchronization+0x48>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800807a:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800807c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008080:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008082:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008084:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8008086:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8008088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800808c:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39

  return HAL_OK;
 8008090:	4610      	mov	r0, r2
}
 8008092:	bc30      	pop	{r4, r5}
 8008094:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008096:	2002      	movs	r0, #2
}
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	40000400 	.word	0x40000400

080080a0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f000 8081 	beq.w	80081a8 <HAL_UART_Init+0x108>
{
 80080a6:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80080ac:	4604      	mov	r4, r0
 80080ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d070      	beq.n	8008198 <HAL_UART_Init+0xf8>
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080b6:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 80080ba:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080bc:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80080be:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080c0:	4302      	orrs	r2, r0
 80080c2:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 80080c4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080c8:	4302      	orrs	r2, r0
 80080ca:	69e0      	ldr	r0, [r4, #28]
 80080cc:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 80080ce:	68d8      	ldr	r0, [r3, #12]
 80080d0:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 80080d4:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080d6:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080d8:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080da:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80080de:	4329      	orrs	r1, r5
 80080e0:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80080e2:	68d9      	ldr	r1, [r3, #12]
 80080e4:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80080e8:	f021 010c 	bic.w	r1, r1, #12
 80080ec:	430a      	orrs	r2, r1
 80080ee:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080f0:	695a      	ldr	r2, [r3, #20]


  if((huart->Instance == USART1))
 80080f2:	492e      	ldr	r1, [pc, #184]	; (80081ac <HAL_UART_Init+0x10c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80080f8:	4302      	orrs	r2, r0
  if((huart->Instance == USART1))
 80080fa:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080fc:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1))
 80080fe:	d050      	beq.n	80081a2 <HAL_UART_Init+0x102>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008100:	f7ff fdb0 	bl	8007c64 <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008104:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008106:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800810a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800810e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008112:	6863      	ldr	r3, [r4, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008114:	d027      	beq.n	8008166 <HAL_UART_Init+0xc6>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	fbb0 f3f3 	udiv	r3, r0, r3
 800811c:	2564      	movs	r5, #100	; 0x64
 800811e:	4824      	ldr	r0, [pc, #144]	; (80081b0 <HAL_UART_Init+0x110>)
 8008120:	6822      	ldr	r2, [r4, #0]
 8008122:	fba0 6103 	umull	r6, r1, r0, r3
 8008126:	0949      	lsrs	r1, r1, #5
 8008128:	fb05 3311 	mls	r3, r5, r1, r3
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	3332      	adds	r3, #50	; 0x32
 8008130:	fba0 0303 	umull	r0, r3, r0, r3
 8008134:	0109      	lsls	r1, r1, #4
 8008136:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800813a:	6093      	str	r3, [r2, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800813c:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800813e:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008140:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 8008142:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008144:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008148:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800814a:	6953      	ldr	r3, [r2, #20]
 800814c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008150:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8008152:	68d3      	ldr	r3, [r2, #12]
 8008154:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008158:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815a:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800815c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008160:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 8008164:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008166:	005b      	lsls	r3, r3, #1
 8008168:	fbb0 f0f3 	udiv	r0, r0, r3
 800816c:	2364      	movs	r3, #100	; 0x64
 800816e:	4e10      	ldr	r6, [pc, #64]	; (80081b0 <HAL_UART_Init+0x110>)
 8008170:	6822      	ldr	r2, [r4, #0]
 8008172:	fba6 5100 	umull	r5, r1, r6, r0
 8008176:	094d      	lsrs	r5, r1, #5
 8008178:	fb03 0315 	mls	r3, r3, r5, r0
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	3332      	adds	r3, #50	; 0x32
 8008180:	fba6 1303 	umull	r1, r3, r6, r3
 8008184:	f3c3 1142 	ubfx	r1, r3, #5, #3
 8008188:	091b      	lsrs	r3, r3, #4
 800818a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800818e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008192:	440b      	add	r3, r1
 8008194:	6093      	str	r3, [r2, #8]
 8008196:	e7d1      	b.n	800813c <HAL_UART_Init+0x9c>
    huart->Lock = HAL_UNLOCKED;
 8008198:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800819c:	f7fc fe26 	bl	8004dec <HAL_UART_MspInit>
 80081a0:	e789      	b.n	80080b6 <HAL_UART_Init+0x16>
    pclk = HAL_RCC_GetPCLK2Freq();
 80081a2:	f7ff fd6f 	bl	8007c84 <HAL_RCC_GetPCLK2Freq>
 80081a6:	e7ad      	b.n	8008104 <HAL_UART_Init+0x64>
    return HAL_ERROR;
 80081a8:	2001      	movs	r0, #1
}
 80081aa:	4770      	bx	lr
 80081ac:	40013800 	.word	0x40013800
 80081b0:	51eb851f 	.word	0x51eb851f

080081b4 <HAL_UART_Transmit_DMA>:
{
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80081b8:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80081bc:	2820      	cmp	r0, #32
 80081be:	d12d      	bne.n	800821c <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 80081c0:	b351      	cbz	r1, 8008218 <HAL_UART_Transmit_DMA+0x64>
 80081c2:	b34a      	cbz	r2, 8008218 <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 80081c4:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80081c8:	2801      	cmp	r0, #1
 80081ca:	d027      	beq.n	800821c <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081cc:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80081ce:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081d2:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80081d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80081d8:	4f11      	ldr	r7, [pc, #68]	; (8008220 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80081da:	4e12      	ldr	r6, [pc, #72]	; (8008224 <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 80081dc:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 80081de:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e0:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 80081e2:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 80081e4:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081e8:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80081ec:	4613      	mov	r3, r2
 80081ee:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80081f0:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80081f4:	4e0c      	ldr	r6, [pc, #48]	; (8008228 <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80081f6:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 80081f8:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80081fa:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80081fc:	f7fd fd0e 	bl	8005c1c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008200:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008204:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8008206:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008208:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800820a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800820e:	695a      	ldr	r2, [r3, #20]
 8008210:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008214:	615a      	str	r2, [r3, #20]
}
 8008216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8008218:	2001      	movs	r0, #1
}
 800821a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800821c:	2002      	movs	r0, #2
}
 800821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008220:	080082cd 	.word	0x080082cd
 8008224:	080082f9 	.word	0x080082f9
 8008228:	08008309 	.word	0x08008309

0800822c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800822c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008230:	2b20      	cmp	r3, #32
 8008232:	d13f      	bne.n	80082b4 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 8008234:	2900      	cmp	r1, #0
 8008236:	d03b      	beq.n	80082b0 <HAL_UART_Receive_DMA+0x84>
 8008238:	2a00      	cmp	r2, #0
 800823a:	d039      	beq.n	80082b0 <HAL_UART_Receive_DMA+0x84>
{
 800823c:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 800823e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008242:	4604      	mov	r4, r0
 8008244:	2b01      	cmp	r3, #1
{
 8008246:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 8008248:	d036      	beq.n	80082b8 <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824a:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800824c:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008250:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 8008254:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8008256:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008258:	4f19      	ldr	r7, [pc, #100]	; (80082c0 <HAL_UART_Receive_DMA+0x94>)
 800825a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800825c:	4e19      	ldr	r6, [pc, #100]	; (80082c4 <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 8008260:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008264:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008266:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008268:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800826c:	460a      	mov	r2, r1
 800826e:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008270:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008274:	4e14      	ldr	r6, [pc, #80]	; (80082c8 <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008276:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 8008278:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800827a:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800827c:	f7fd fcce 	bl	8005c1c <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008280:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	9501      	str	r5, [sp, #4]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	9201      	str	r2, [sp, #4]
 800828a:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 800828c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008290:	9201      	str	r2, [sp, #4]
 8008292:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800829a:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800829c:	695a      	ldr	r2, [r3, #20]
 800829e:	f042 0201 	orr.w	r2, r2, #1
 80082a2:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082a4:	695a      	ldr	r2, [r3, #20]
 80082a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082aa:	615a      	str	r2, [r3, #20]
}
 80082ac:	b003      	add	sp, #12
 80082ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80082b0:	2001      	movs	r0, #1
}
 80082b2:	4770      	bx	lr
    return HAL_BUSY;
 80082b4:	2002      	movs	r0, #2
 80082b6:	4770      	bx	lr
 80082b8:	2002      	movs	r0, #2
}
 80082ba:	b003      	add	sp, #12
 80082bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082be:	bf00      	nop
 80082c0:	080083b5 	.word	0x080083b5
 80082c4:	08008399 	.word	0x08008399
 80082c8:	08008309 	.word	0x08008309

080082cc <UART_DMATransmitCplt>:
{
 80082cc:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80082ce:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f013 0320 	ands.w	r3, r3, #32
 80082d8:	d10a      	bne.n	80082f0 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082da:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 80082dc:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082de:	6953      	ldr	r3, [r2, #20]
 80082e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082e4:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082e6:	68d3      	ldr	r3, [r2, #12]
 80082e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ec:	60d3      	str	r3, [r2, #12]
}
 80082ee:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80082f0:	f7fc fbc8 	bl	8004a84 <HAL_UART_TxCpltCallback>
}
 80082f4:	bd08      	pop	{r3, pc}
 80082f6:	bf00      	nop

080082f8 <UART_DMATxHalfCplt>:
{
 80082f8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80082fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80082fc:	f7fc fbae 	bl	8004a5c <HAL_UART_TxHalfCpltCallback>
}
 8008300:	bd08      	pop	{r3, pc}
 8008302:	bf00      	nop

08008304 <HAL_UART_RxHalfCpltCallback>:
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop

08008308 <UART_DMAError>:
{
 8008308:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800830a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800830c:	6803      	ldr	r3, [r0, #0]
 800830e:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008310:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8008314:	2a21      	cmp	r2, #33	; 0x21
 8008316:	d00b      	beq.n	8008330 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008318:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800831a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800831e:	2a22      	cmp	r2, #34	; 0x22
 8008320:	d016      	beq.n	8008350 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008322:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008324:	f043 0310 	orr.w	r3, r3, #16
 8008328:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 800832a:	f7fc fb8d 	bl	8004a48 <HAL_UART_ErrorCallback>
}
 800832e:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008330:	0609      	lsls	r1, r1, #24
 8008332:	d5f1      	bpl.n	8008318 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8008334:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8008336:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 8008338:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008340:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008342:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008346:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008348:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800834c:	2a22      	cmp	r2, #34	; 0x22
 800834e:	d1e8      	bne.n	8008322 <UART_DMAError+0x1a>
 8008350:	064a      	lsls	r2, r1, #25
 8008352:	d5e6      	bpl.n	8008322 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8008354:	2200      	movs	r2, #0
 8008356:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008358:	68da      	ldr	r2, [r3, #12]
 800835a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800835e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008360:	695a      	ldr	r2, [r3, #20]
 8008362:	f022 0201 	bic.w	r2, r2, #1
 8008366:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008368:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800836a:	2a01      	cmp	r2, #1
 800836c:	d103      	bne.n	8008376 <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800836e:	68da      	ldr	r2, [r3, #12]
 8008370:	f022 0210 	bic.w	r2, r2, #16
 8008374:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 8008376:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008378:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800837a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837e:	6303      	str	r3, [r0, #48]	; 0x30
}
 8008380:	e7cf      	b.n	8008322 <UART_DMAError+0x1a>
 8008382:	bf00      	nop

08008384 <UART_DMAAbortOnError>:
{
 8008384:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8008386:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008388:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800838a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800838c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800838e:	f7fc fb5b 	bl	8004a48 <HAL_UART_ErrorCallback>
}
 8008392:	bd08      	pop	{r3, pc}

08008394 <HAL_UARTEx_RxEventCallback>:
}
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop

08008398 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008398:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800839a:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800839c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d002      	beq.n	80083a8 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80083a2:	f7ff ffaf 	bl	8008304 <HAL_UART_RxHalfCpltCallback>
}
 80083a6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80083a8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80083aa:	0849      	lsrs	r1, r1, #1
 80083ac:	f7ff fff2 	bl	8008394 <HAL_UARTEx_RxEventCallback>
}
 80083b0:	bd08      	pop	{r3, pc}
 80083b2:	bf00      	nop

080083b4 <UART_DMAReceiveCplt>:
{
 80083b4:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80083b6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f013 0320 	ands.w	r3, r3, #32
 80083c0:	d113      	bne.n	80083ea <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 80083c2:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083c4:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 80083c6:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083c8:	68d3      	ldr	r3, [r2, #12]
 80083ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083ce:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d0:	6953      	ldr	r3, [r2, #20]
 80083d2:	f023 0301 	bic.w	r3, r3, #1
 80083d6:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083d8:	6953      	ldr	r3, [r2, #20]
 80083da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083de:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80083e0:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d009      	beq.n	80083fe <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d002      	beq.n	80083f6 <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 80083f0:	f7fc fa0e 	bl	8004810 <HAL_UART_RxCpltCallback>
}
 80083f4:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083f6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80083f8:	f7ff ffcc 	bl	8008394 <HAL_UARTEx_RxEventCallback>
}
 80083fc:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083fe:	68d3      	ldr	r3, [r2, #12]
 8008400:	f023 0310 	bic.w	r3, r3, #16
 8008404:	60d3      	str	r3, [r2, #12]
 8008406:	e7f0      	b.n	80083ea <UART_DMAReceiveCplt+0x36>

08008408 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008408:	6883      	ldr	r3, [r0, #8]
 800840a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840e:	d03b      	beq.n	8008488 <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008410:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008412:	2b00      	cmp	r3, #0
 8008414:	d030      	beq.n	8008478 <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008416:	6803      	ldr	r3, [r0, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8008420:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008422:	3301      	adds	r3, #1
 8008424:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8008426:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8008428:	3b01      	subs	r3, #1
 800842a:	b29b      	uxth	r3, r3
 800842c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800842e:	bb53      	cbnz	r3, 8008486 <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 8008430:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008434:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8008436:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008438:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800843a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800843c:	f021 0120 	bic.w	r1, r1, #32
 8008440:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008442:	68d1      	ldr	r1, [r2, #12]
 8008444:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008448:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800844a:	6951      	ldr	r1, [r2, #20]
 800844c:	f021 0101 	bic.w	r1, r1, #1
 8008450:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8008452:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008456:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008458:	2901      	cmp	r1, #1
 800845a:	d120      	bne.n	800849e <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800845c:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845e:	68d1      	ldr	r1, [r2, #12]
 8008460:	f021 0110 	bic.w	r1, r1, #16
 8008464:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008466:	6811      	ldr	r1, [r2, #0]
 8008468:	06c9      	lsls	r1, r1, #27
 800846a:	d422      	bmi.n	80084b2 <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800846c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800846e:	f7ff ff91 	bl	8008394 <HAL_UARTEx_RxEventCallback>
}
 8008472:	b003      	add	sp, #12
 8008474:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008478:	6903      	ldr	r3, [r0, #16]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1cb      	bne.n	8008416 <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800847e:	6803      	ldr	r3, [r0, #0]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	7013      	strb	r3, [r2, #0]
 8008484:	e7cc      	b.n	8008420 <UART_Receive_IT.part.0.isra.0+0x18>
 8008486:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008488:	6903      	ldr	r3, [r0, #16]
 800848a:	b96b      	cbnz	r3, 80084a8 <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800848c:	6802      	ldr	r2, [r0, #0]
 800848e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008490:	6852      	ldr	r2, [r2, #4]
 8008492:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008496:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800849a:	6283      	str	r3, [r0, #40]	; 0x28
 800849c:	e7c3      	b.n	8008426 <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 800849e:	f7fc f9b7 	bl	8004810 <HAL_UART_RxCpltCallback>
}
 80084a2:	b003      	add	sp, #12
 80084a4:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084a8:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80084aa:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	7013      	strb	r3, [r2, #0]
 80084b0:	e7b6      	b.n	8008420 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	6813      	ldr	r3, [r2, #0]
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	6853      	ldr	r3, [r2, #4]
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	9b01      	ldr	r3, [sp, #4]
 80084be:	e7d5      	b.n	800846c <UART_Receive_IT.part.0.isra.0+0x64>

080084c0 <HAL_UART_IRQHandler>:
{
 80084c0:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084c2:	6803      	ldr	r3, [r0, #0]
{
 80084c4:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084c6:	681a      	ldr	r2, [r3, #0]
{
 80084c8:	b083      	sub	sp, #12
  if (errorflags == RESET)
 80084ca:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084ce:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084d0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80084d2:	d14e      	bne.n	8008572 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084d4:	0695      	lsls	r5, r2, #26
 80084d6:	d502      	bpl.n	80084de <HAL_UART_IRQHandler+0x1e>
 80084d8:	068d      	lsls	r5, r1, #26
 80084da:	f100 8090 	bmi.w	80085fe <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80084e0:	2801      	cmp	r0, #1
 80084e2:	d00b      	beq.n	80084fc <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084e4:	0610      	lsls	r0, r2, #24
 80084e6:	d502      	bpl.n	80084ee <HAL_UART_IRQHandler+0x2e>
 80084e8:	060d      	lsls	r5, r1, #24
 80084ea:	f100 8092 	bmi.w	8008612 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084ee:	0650      	lsls	r0, r2, #25
 80084f0:	d502      	bpl.n	80084f8 <HAL_UART_IRQHandler+0x38>
 80084f2:	064a      	lsls	r2, r1, #25
 80084f4:	f100 80ab 	bmi.w	800864e <HAL_UART_IRQHandler+0x18e>
}
 80084f8:	b003      	add	sp, #12
 80084fa:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 80084fc:	06d0      	lsls	r0, r2, #27
 80084fe:	d5f1      	bpl.n	80084e4 <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008500:	06cd      	lsls	r5, r1, #27
 8008502:	d5ef      	bpl.n	80084e4 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008504:	2100      	movs	r1, #0
 8008506:	9101      	str	r1, [sp, #4]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	9201      	str	r2, [sp, #4]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	9201      	str	r2, [sp, #4]
 8008510:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008512:	695a      	ldr	r2, [r3, #20]
 8008514:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8008518:	f000 80d2 	beq.w	80086c0 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800851c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800851e:	6802      	ldr	r2, [r0, #0]
 8008520:	6852      	ldr	r2, [r2, #4]
 8008522:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8008524:	2a00      	cmp	r2, #0
 8008526:	d0e7      	beq.n	80084f8 <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008528:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800852a:	4295      	cmp	r5, r2
 800852c:	d9e4      	bls.n	80084f8 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800852e:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008530:	6982      	ldr	r2, [r0, #24]
 8008532:	2a20      	cmp	r2, #32
 8008534:	d016      	beq.n	8008564 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800853c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853e:	695a      	ldr	r2, [r3, #20]
 8008540:	f022 0201 	bic.w	r2, r2, #1
 8008544:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008546:	695a      	ldr	r2, [r3, #20]
 8008548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800854c:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800854e:	2220      	movs	r2, #32
 8008550:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008554:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	f022 0210 	bic.w	r2, r2, #16
 800855c:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800855e:	f7fd fba7 	bl	8005cb0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008562:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8008564:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8008566:	4620      	mov	r0, r4
 8008568:	1a69      	subs	r1, r5, r1
 800856a:	b289      	uxth	r1, r1
 800856c:	f7ff ff12 	bl	8008394 <HAL_UARTEx_RxEventCallback>
 8008570:	e7c2      	b.n	80084f8 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008572:	f005 0501 	and.w	r5, r5, #1
 8008576:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800857a:	4328      	orrs	r0, r5
 800857c:	d0af      	beq.n	80084de <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800857e:	07d0      	lsls	r0, r2, #31
 8008580:	d505      	bpl.n	800858e <HAL_UART_IRQHandler+0xce>
 8008582:	05c8      	lsls	r0, r1, #23
 8008584:	d503      	bpl.n	800858e <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008586:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008588:	f040 0001 	orr.w	r0, r0, #1
 800858c:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800858e:	0750      	lsls	r0, r2, #29
 8008590:	d530      	bpl.n	80085f4 <HAL_UART_IRQHandler+0x134>
 8008592:	b14d      	cbz	r5, 80085a8 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008594:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008596:	f040 0002 	orr.w	r0, r0, #2
 800859a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800859c:	0790      	lsls	r0, r2, #30
 800859e:	d503      	bpl.n	80085a8 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085a0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80085a2:	f040 0004 	orr.w	r0, r0, #4
 80085a6:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80085a8:	0710      	lsls	r0, r2, #28
 80085aa:	d507      	bpl.n	80085bc <HAL_UART_IRQHandler+0xfc>
 80085ac:	f001 0020 	and.w	r0, r1, #32
 80085b0:	4328      	orrs	r0, r5
 80085b2:	d003      	beq.n	80085bc <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085b4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80085b6:	f040 0008 	orr.w	r0, r0, #8
 80085ba:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085bc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80085be:	2800      	cmp	r0, #0
 80085c0:	d09a      	beq.n	80084f8 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085c2:	0690      	lsls	r0, r2, #26
 80085c4:	d509      	bpl.n	80085da <HAL_UART_IRQHandler+0x11a>
 80085c6:	068a      	lsls	r2, r1, #26
 80085c8:	d507      	bpl.n	80085da <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085ca:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80085ce:	2a22      	cmp	r2, #34	; 0x22
 80085d0:	d103      	bne.n	80085da <HAL_UART_IRQHandler+0x11a>
 80085d2:	4620      	mov	r0, r4
 80085d4:	f7ff ff18 	bl	8008408 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80085dc:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085de:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80085e2:	f005 0508 	and.w	r5, r5, #8
 80085e6:	4315      	orrs	r5, r2
 80085e8:	d13c      	bne.n	8008664 <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 80085ea:	4620      	mov	r0, r4
 80085ec:	f7fc fa2c 	bl	8004a48 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f0:	6425      	str	r5, [r4, #64]	; 0x40
 80085f2:	e781      	b.n	80084f8 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085f4:	0790      	lsls	r0, r2, #30
 80085f6:	d5d7      	bpl.n	80085a8 <HAL_UART_IRQHandler+0xe8>
 80085f8:	2d00      	cmp	r5, #0
 80085fa:	d1d1      	bne.n	80085a0 <HAL_UART_IRQHandler+0xe0>
 80085fc:	e7d4      	b.n	80085a8 <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085fe:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008602:	2b22      	cmp	r3, #34	; 0x22
 8008604:	f47f af78 	bne.w	80084f8 <HAL_UART_IRQHandler+0x38>
}
 8008608:	b003      	add	sp, #12
 800860a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800860e:	f7ff befb 	b.w	8008408 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008612:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008616:	2a21      	cmp	r2, #33	; 0x21
 8008618:	f47f af6e 	bne.w	80084f8 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800861c:	68a2      	ldr	r2, [r4, #8]
 800861e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008622:	d06e      	beq.n	8008702 <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008624:	6a22      	ldr	r2, [r4, #32]
 8008626:	1c51      	adds	r1, r2, #1
 8008628:	6221      	str	r1, [r4, #32]
 800862a:	7812      	ldrb	r2, [r2, #0]
 800862c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800862e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8008630:	3a01      	subs	r2, #1
 8008632:	b292      	uxth	r2, r2
 8008634:	84e2      	strh	r2, [r4, #38]	; 0x26
 8008636:	2a00      	cmp	r2, #0
 8008638:	f47f af5e 	bne.w	80084f8 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008642:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008644:	68da      	ldr	r2, [r3, #12]
 8008646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800864a:	60da      	str	r2, [r3, #12]
 800864c:	e754      	b.n	80084f8 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 800864e:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008650:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8008652:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008658:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800865a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800865e:	f7fc fa11 	bl	8004a84 <HAL_UART_TxCpltCallback>
    return;
 8008662:	e749      	b.n	80084f8 <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800866a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800866c:	695a      	ldr	r2, [r3, #20]
 800866e:	f022 0201 	bic.w	r2, r2, #1
 8008672:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008674:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008676:	2a01      	cmp	r2, #1
 8008678:	d103      	bne.n	8008682 <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800867a:	68da      	ldr	r2, [r3, #12]
 800867c:	f022 0210 	bic.w	r2, r2, #16
 8008680:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008682:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008684:	2120      	movs	r1, #32
 8008686:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800868a:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800868c:	695a      	ldr	r2, [r3, #20]
 800868e:	0655      	lsls	r5, r2, #25
 8008690:	d512      	bpl.n	80086b8 <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008692:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8008694:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800869a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800869c:	b160      	cbz	r0, 80086b8 <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800869e:	4b1e      	ldr	r3, [pc, #120]	; (8008718 <HAL_UART_IRQHandler+0x258>)
 80086a0:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086a2:	f7fd fb2d 	bl	8005d00 <HAL_DMA_Abort_IT>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	f43f af26 	beq.w	80084f8 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80086ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80086b0:	b003      	add	sp, #12
 80086b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086b6:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80086b8:	4620      	mov	r0, r4
 80086ba:	f7fc f9c5 	bl	8004a48 <HAL_UART_ErrorCallback>
 80086be:	e71b      	b.n	80084f8 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086c0:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 80086c2:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086c4:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 80086c6:	b289      	uxth	r1, r1
 80086c8:	2900      	cmp	r1, #0
 80086ca:	f43f af15 	beq.w	80084f8 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086ce:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80086d0:	1a08      	subs	r0, r1, r0
 80086d2:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 80086d4:	2900      	cmp	r1, #0
 80086d6:	f43f af0f 	beq.w	80084f8 <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 80086da:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086dc:	68d8      	ldr	r0, [r3, #12]
 80086de:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 80086e2:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e4:	6958      	ldr	r0, [r3, #20]
 80086e6:	f020 0001 	bic.w	r0, r0, #1
 80086ea:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80086ec:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f0:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086f2:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086f4:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086f6:	f022 0210 	bic.w	r2, r2, #16
 80086fa:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086fc:	f7ff fe4a 	bl	8008394 <HAL_UARTEx_RxEventCallback>
 8008700:	e6fa      	b.n	80084f8 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008702:	6922      	ldr	r2, [r4, #16]
 8008704:	2a00      	cmp	r2, #0
 8008706:	d18d      	bne.n	8008624 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008708:	6a22      	ldr	r2, [r4, #32]
 800870a:	f832 1b02 	ldrh.w	r1, [r2], #2
 800870e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008712:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008714:	6222      	str	r2, [r4, #32]
 8008716:	e78a      	b.n	800862e <HAL_UART_IRQHandler+0x16e>
 8008718:	08008385 	.word	0x08008385

0800871c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800871c:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800871e:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008720:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8008724:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 8008728:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 800872a:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800872e:	4770      	bx	lr

08008730 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008730:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008732:	f244 02ff 	movw	r2, #16639	; 0x40ff
 8008736:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40

  return HAL_OK;
}
 800873a:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800873c:	400a      	ands	r2, r1
 800873e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8008742:	4770      	bx	lr

08008744 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008744:	b084      	sub	sp, #16
 8008746:	f10d 0c04 	add.w	ip, sp, #4
 800874a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800874e:	4603      	mov	r3, r0
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008750:	2200      	movs	r2, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008752:	2101      	movs	r1, #1

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8008754:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008756:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800875a:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 800875c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 8008760:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8008764:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop

0800876c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800876c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800876e:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008770:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008774:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
{
 8008778:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800877a:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 800877e:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8008782:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8008786:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  switch (ep->type)
 800878a:	f1be 0f03 	cmp.w	lr, #3
 800878e:	f200 815a 	bhi.w	8008a46 <USB_ActivateEndpoint+0x2da>
 8008792:	e8df f00e 	tbb	[pc, lr]
 8008796:	4e52      	.short	0x4e52
 8008798:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800879a:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800879e:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80087a0:	f248 0580 	movw	r5, #32896	; 0x8080
 80087a4:	ea4c 0c05 	orr.w	ip, ip, r5
 80087a8:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80087ac:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 80087b0:	4ca6      	ldr	r4, [pc, #664]	; (8008a4c <USB_ActivateEndpoint+0x2e0>)
 80087b2:	fa1f fc8c 	uxth.w	ip, ip
 80087b6:	ea0c 0c04 	and.w	ip, ip, r4
 80087ba:	ea4c 0c02 	orr.w	ip, ip, r2
 80087be:	ea45 050c 	orr.w	r5, r5, ip
 80087c2:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 80087c6:	7b0d      	ldrb	r5, [r1, #12]
 80087c8:	2d00      	cmp	r5, #0
 80087ca:	d17e      	bne.n	80088ca <USB_ActivateEndpoint+0x15e>
  {
    if (ep->is_in != 0U)
 80087cc:	784d      	ldrb	r5, [r1, #1]
 80087ce:	2d00      	cmp	r5, #0
 80087d0:	f000 80dd 	beq.w	800898e <USB_ActivateEndpoint+0x222>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80087d4:	88c9      	ldrh	r1, [r1, #6]
 80087d6:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80087da:	0849      	lsrs	r1, r1, #1
 80087dc:	eb03 1602 	add.w	r6, r3, r2, lsl #4
 80087e0:	0049      	lsls	r1, r1, #1
 80087e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80087e6:	b2ad      	uxth	r5, r5
 80087e8:	5371      	strh	r1, [r6, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087ea:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80087ee:	064e      	lsls	r6, r1, #25
 80087f0:	d509      	bpl.n	8008806 <USB_ActivateEndpoint+0x9a>
 80087f2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80087f6:	b289      	uxth	r1, r1
 80087f8:	400c      	ands	r4, r1
 80087fa:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80087fe:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8008802:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008806:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800880a:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800880e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8008812:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008816:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800881a:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 800881e:	d04d      	beq.n	80088bc <USB_ActivateEndpoint+0x150>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008820:	f081 0120 	eor.w	r1, r1, #32
 8008824:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008828:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800882c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8008830:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef ret = HAL_OK;
 8008832:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008834:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
      break;
 8008838:	e7b2      	b.n	80087a0 <USB_ActivateEndpoint+0x34>
  HAL_StatusTypeDef ret = HAL_OK;
 800883a:	4670      	mov	r0, lr
      wEpRegVal |= USB_EP_CONTROL;
 800883c:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 8008840:	e7ae      	b.n	80087a0 <USB_ActivateEndpoint+0x34>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008842:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008846:	044d      	lsls	r5, r1, #17
 8008848:	d509      	bpl.n	800885e <USB_ActivateEndpoint+0xf2>
 800884a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800884e:	b289      	uxth	r1, r1
 8008850:	400c      	ands	r4, r1
 8008852:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8008856:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800885a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800885e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008862:	0649      	lsls	r1, r1, #25
 8008864:	d50d      	bpl.n	8008882 <USB_ActivateEndpoint+0x116>
 8008866:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800886a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800886e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008872:	0409      	lsls	r1, r1, #16
 8008874:	0c09      	lsrs	r1, r1, #16
 8008876:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800887a:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800887e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008882:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8008886:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800888a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800888e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008892:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8008896:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800889a:	bf18      	it	ne
 800889c:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088a0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80088a4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80088a8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088ac:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80088b0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80088b4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80088b8:	0409      	lsls	r1, r1, #16
 80088ba:	0c09      	lsrs	r1, r1, #16
 80088bc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80088c0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80088c4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 80088c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF(USBx, ep->num);
 80088ca:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 80088ce:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 80088d2:	fa1f fc8c 	uxth.w	ip, ip
 80088d6:	ea0c 0c04 	and.w	ip, ip, r4
 80088da:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 80088de:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80088e2:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80088e6:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 80088ea:	890e      	ldrh	r6, [r1, #8]
 80088ec:	fa1f fc8c 	uxth.w	ip, ip
 80088f0:	0876      	lsrs	r6, r6, #1
 80088f2:	44bc      	add	ip, r7
 80088f4:	0076      	lsls	r6, r6, #1
 80088f6:	f8ac 6400 	strh.w	r6, [ip, #1024]	; 0x400
 80088fa:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 80088fe:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8008902:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008906:	b2ad      	uxth	r5, r5
 8008908:	443d      	add	r5, r7
 800890a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800890e:	f8a5 c408 	strh.w	ip, [r5, #1032]	; 0x408
    if (ep->is_in == 0U)
 8008912:	7849      	ldrb	r1, [r1, #1]
 8008914:	2900      	cmp	r1, #0
 8008916:	d194      	bne.n	8008842 <USB_ActivateEndpoint+0xd6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008918:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800891c:	044f      	lsls	r7, r1, #17
 800891e:	d509      	bpl.n	8008934 <USB_ActivateEndpoint+0x1c8>
 8008920:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008924:	b289      	uxth	r1, r1
 8008926:	400c      	ands	r4, r1
 8008928:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800892c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8008930:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008934:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008938:	064e      	lsls	r6, r1, #25
 800893a:	d50d      	bpl.n	8008958 <USB_ActivateEndpoint+0x1ec>
 800893c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008940:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8008944:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008948:	0409      	lsls	r1, r1, #16
 800894a:	0c09      	lsrs	r1, r1, #16
 800894c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008950:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8008954:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008958:	f248 0480 	movw	r4, #32896	; 0x8080
 800895c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008960:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8008964:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008968:	0409      	lsls	r1, r1, #16
 800896a:	0c09      	lsrs	r1, r1, #16
 800896c:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8008970:	4321      	orrs	r1, r4
 8008972:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008976:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800897a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800897e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008982:	0409      	lsls	r1, r1, #16
 8008984:	0c09      	lsrs	r1, r1, #16
 8008986:	4321      	orrs	r1, r4
 8008988:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800898c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800898e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8008992:	88cd      	ldrh	r5, [r1, #6]
 8008994:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 8008998:	b2a4      	uxth	r4, r4
 800899a:	086d      	lsrs	r5, r5, #1
 800899c:	006d      	lsls	r5, r5, #1
 800899e:	443c      	add	r4, r7
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80089a0:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089a2:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80089a6:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80089aa:	b289      	uxth	r1, r1
 80089ac:	4439      	add	r1, r7
 80089ae:	b366      	cbz	r6, 8008a0a <USB_ActivateEndpoint+0x29e>
 80089b0:	2e3e      	cmp	r6, #62	; 0x3e
 80089b2:	d83c      	bhi.n	8008a2e <USB_ActivateEndpoint+0x2c2>
 80089b4:	0874      	lsrs	r4, r6, #1
 80089b6:	07f5      	lsls	r5, r6, #31
 80089b8:	bf48      	it	mi
 80089ba:	3401      	addmi	r4, #1
 80089bc:	02a4      	lsls	r4, r4, #10
 80089be:	b2a4      	uxth	r4, r4
 80089c0:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089c4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80089c8:	0449      	lsls	r1, r1, #17
 80089ca:	d50d      	bpl.n	80089e8 <USB_ActivateEndpoint+0x27c>
 80089cc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80089d0:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80089d4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80089d8:	0409      	lsls	r1, r1, #16
 80089da:	0c09      	lsrs	r1, r1, #16
 80089dc:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80089e0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80089e4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089e8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80089ec:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80089f0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80089f4:	0409      	lsls	r1, r1, #16
 80089f6:	0c09      	lsrs	r1, r1, #16
 80089f8:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80089fc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008a00:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8008a04:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8008a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008a0a:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 8008a0e:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8008a12:	0424      	lsls	r4, r4, #16
 8008a14:	0c24      	lsrs	r4, r4, #16
 8008a16:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8008a1a:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 8008a1e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8008a22:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8008a26:	b2a4      	uxth	r4, r4
 8008a28:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8008a2c:	e7ca      	b.n	80089c4 <USB_ActivateEndpoint+0x258>
 8008a2e:	0975      	lsrs	r5, r6, #5
 8008a30:	06f4      	lsls	r4, r6, #27
 8008a32:	4c07      	ldr	r4, [pc, #28]	; (8008a50 <USB_ActivateEndpoint+0x2e4>)
 8008a34:	bf08      	it	eq
 8008a36:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8008a3a:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8008a3e:	b2a4      	uxth	r4, r4
 8008a40:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8008a44:	e7be      	b.n	80089c4 <USB_ActivateEndpoint+0x258>
  switch (ep->type)
 8008a46:	2001      	movs	r0, #1
 8008a48:	e6aa      	b.n	80087a0 <USB_ActivateEndpoint+0x34>
 8008a4a:	bf00      	nop
 8008a4c:	ffff8f8f 	.word	0xffff8f8f
 8008a50:	ffff8000 	.word	0xffff8000

08008a54 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8008a54:	7b0b      	ldrb	r3, [r1, #12]
 8008a56:	b9cb      	cbnz	r3, 8008a8c <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 8008a58:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a5a:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 80b1 	beq.w	8008bc4 <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008a66:	0659      	lsls	r1, r3, #25
 8008a68:	f100 80c5 	bmi.w	8008bf6 <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a78:	041b      	lsls	r3, r3, #16
 8008a7a:	0c1b      	lsrs	r3, r3, #16
 8008a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a84:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8008a88:	2000      	movs	r0, #0
 8008a8a:	4770      	bx	lr
    if (ep->is_in == 0U)
 8008a8c:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a8e:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d14b      	bne.n	8008b2c <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008a98:	0459      	lsls	r1, r3, #17
 8008a9a:	d50d      	bpl.n	8008ab8 <USB_DeactivateEndpoint+0x64>
 8008a9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa8:	041b      	lsls	r3, r3, #16
 8008aaa:	0c1b      	lsrs	r3, r3, #16
 8008aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ab8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008abc:	065b      	lsls	r3, r3, #25
 8008abe:	d50d      	bpl.n	8008adc <USB_DeactivateEndpoint+0x88>
 8008ac0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008acc:	041b      	lsls	r3, r3, #16
 8008ace:	0c1b      	lsrs	r3, r3, #16
 8008ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ad4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ad8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008adc:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8008ae0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aec:	041b      	lsls	r3, r3, #16
 8008aee:	0c1b      	lsrs	r3, r3, #16
 8008af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008af4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008af8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008afc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b08:	041b      	lsls	r3, r3, #16
 8008b0a:	0c1b      	lsrs	r3, r3, #16
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b1e:	041b      	lsls	r3, r3, #16
 8008b20:	0c1b      	lsrs	r3, r3, #16
 8008b22:	430b      	orrs	r3, r1
 8008b24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008b28:	2000      	movs	r0, #0
 8008b2a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b30:	0459      	lsls	r1, r3, #17
 8008b32:	d50d      	bpl.n	8008b50 <USB_DeactivateEndpoint+0xfc>
 8008b34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b40:	041b      	lsls	r3, r3, #16
 8008b42:	0c1b      	lsrs	r3, r3, #16
 8008b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b54:	065b      	lsls	r3, r3, #25
 8008b56:	d50d      	bpl.n	8008b74 <USB_DeactivateEndpoint+0x120>
 8008b58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b64:	041b      	lsls	r3, r3, #16
 8008b66:	0c1b      	lsrs	r3, r3, #16
 8008b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b70:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b74:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8008b78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b84:	041b      	lsls	r3, r3, #16
 8008b86:	0c1b      	lsrs	r3, r3, #16
 8008b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b90:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ba0:	041b      	lsls	r3, r3, #16
 8008ba2:	0c1b      	lsrs	r3, r3, #16
 8008ba4:	430b      	orrs	r3, r1
 8008ba6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008baa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb6:	041b      	lsls	r3, r3, #16
 8008bb8:	0c1b      	lsrs	r3, r3, #16
 8008bba:	430b      	orrs	r3, r1
 8008bbc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008bc8:	045b      	lsls	r3, r3, #17
 8008bca:	d50d      	bpl.n	8008be8 <USB_DeactivateEndpoint+0x194>
 8008bcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd8:	041b      	lsls	r3, r3, #16
 8008bda:	0c1b      	lsrs	r3, r3, #16
 8008bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008be8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf4:	e740      	b.n	8008a78 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bf6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c02:	041b      	lsls	r3, r3, #16
 8008c04:	0c1b      	lsrs	r3, r3, #16
 8008c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c0e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008c12:	e72b      	b.n	8008a6c <USB_DeactivateEndpoint+0x18>

08008c14 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c18:	784b      	ldrb	r3, [r1, #1]
{
 8008c1a:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d06b      	beq.n	8008cf8 <USB_EPStartXfer+0xe4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008c20:	7b08      	ldrb	r0, [r1, #12]
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d037      	beq.n	8008c96 <USB_EPStartXfer+0x82>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c26:	78c8      	ldrb	r0, [r1, #3]
 8008c28:	2802      	cmp	r0, #2
 8008c2a:	f000 812d 	beq.w	8008e88 <USB_EPStartXfer+0x274>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008c2e:	2801      	cmp	r0, #1
 8008c30:	f040 810a 	bne.w	8008e48 <USB_EPStartXfer+0x234>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008c34:	6988      	ldr	r0, [r1, #24]
 8008c36:	690c      	ldr	r4, [r1, #16]
 8008c38:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 8008c3a:	bf94      	ite	ls
 8008c3c:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 8008c3e:	1b05      	subhi	r5, r0, r4
 8008c40:	618d      	str	r5, [r1, #24]
 8008c42:	bf88      	it	hi
 8008c44:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f040 811b 	bne.w	8008e82 <USB_EPStartXfer+0x26e>
 8008c4c:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8008c50:	780b      	ldrb	r3, [r1, #0]
 8008c52:	b2a4      	uxth	r4, r4
 8008c54:	f202 4504 	addw	r5, r2, #1028	; 0x404
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	442c      	add	r4, r5
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	f000 8251 	beq.w	8009104 <USB_EPStartXfer+0x4f0>
 8008c62:	283e      	cmp	r0, #62	; 0x3e
 8008c64:	f200 80f3 	bhi.w	8008e4e <USB_EPStartXfer+0x23a>
 8008c68:	0845      	lsrs	r5, r0, #1
 8008c6a:	462e      	mov	r6, r5
 8008c6c:	f010 0001 	ands.w	r0, r0, #1
 8008c70:	bf18      	it	ne
 8008c72:	1c6e      	addne	r6, r5, #1
 8008c74:	02b6      	lsls	r6, r6, #10
 8008c76:	b2b6      	uxth	r6, r6
 8008c78:	52e6      	strh	r6, [r4, r3]
 8008c7a:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8008c7e:	b2a6      	uxth	r6, r4
 8008c80:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8008c84:	4434      	add	r4, r6
 8008c86:	b100      	cbz	r0, 8008c8a <USB_EPStartXfer+0x76>
 8008c88:	3501      	adds	r5, #1
 8008c8a:	02ad      	lsls	r5, r5, #10
 8008c8c:	b2a8      	uxth	r0, r5
 8008c8e:	52e0      	strh	r0, [r4, r3]
 8008c90:	f891 c000 	ldrb.w	ip, [r1]
 8008c94:	e01d      	b.n	8008cd2 <USB_EPStartXfer+0xbe>
      if (ep->xfer_len > ep->maxpacket)
 8008c96:	698c      	ldr	r4, [r1, #24]
 8008c98:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008c9a:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 8008c9c:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 8008c9e:	bf84      	itt	hi
 8008ca0:	1ae0      	subhi	r0, r4, r3
 8008ca2:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008ca4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8008ca8:	6188      	str	r0, [r1, #24]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8008cb0:	012d      	lsls	r5, r5, #4
 8008cb2:	4403      	add	r3, r0
 8008cb4:	2c00      	cmp	r4, #0
 8008cb6:	f000 80b7 	beq.w	8008e28 <USB_EPStartXfer+0x214>
 8008cba:	2c3e      	cmp	r4, #62	; 0x3e
 8008cbc:	f200 8129 	bhi.w	8008f12 <USB_EPStartXfer+0x2fe>
 8008cc0:	0860      	lsrs	r0, r4, #1
 8008cc2:	07e4      	lsls	r4, r4, #31
 8008cc4:	bf48      	it	mi
 8008cc6:	3001      	addmi	r0, #1
 8008cc8:	0280      	lsls	r0, r0, #10
 8008cca:	b280      	uxth	r0, r0
 8008ccc:	52e8      	strh	r0, [r5, r3]
 8008cce:	f891 c000 	ldrb.w	ip, [r1]
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cd2:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
  }

  return HAL_OK;
 8008cd6:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce0:	041b      	lsls	r3, r3, #16
 8008ce2:	0c1b      	lsrs	r3, r3, #16
 8008ce4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf0:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
}
 8008cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 8008cf8:	690d      	ldr	r5, [r1, #16]
 8008cfa:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 8008cfc:	7b0b      	ldrb	r3, [r1, #12]
 8008cfe:	42a8      	cmp	r0, r5
 8008d00:	bf28      	it	cs
 8008d02:	4628      	movcs	r0, r5
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d05d      	beq.n	8008dc4 <USB_EPStartXfer+0x1b0>
      if (ep->type == EP_TYPE_BULK)
 8008d08:	78cb      	ldrb	r3, [r1, #3]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	f000 810e 	beq.w	8008f2c <USB_EPStartXfer+0x318>
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008d10:	f891 8000 	ldrb.w	r8, [r1]
        ep->xfer_len_db -= len;
 8008d14:	6a0b      	ldr	r3, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008d16:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 8008d1a:	1a1b      	subs	r3, r3, r0
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008d1c:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 8008d20:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8008d24:	0424      	lsls	r4, r4, #16
 8008d26:	0c24      	lsrs	r4, r4, #16
 8008d28:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8008d2c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8008d30:	f822 4028 	strh.w	r4, [r2, r8, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d34:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 8008d38:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d3a:	f014 0f40 	tst.w	r4, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d3e:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8008d42:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8008d46:	b2a6      	uxth	r6, r4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d48:	f000 814a 	beq.w	8008fe0 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d4c:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8008d50:	4434      	add	r4, r6
 8008d52:	b286      	uxth	r6, r0
 8008d54:	f824 6008 	strh.w	r6, [r4, r8]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d58:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008d5a:	3601      	adds	r6, #1
 8008d5c:	f502 6780 	add.w	r7, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8008d60:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d62:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d66:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 8008d6a:	d008      	beq.n	8008d7e <USB_EPStartXfer+0x16a>
  uint8_t *pBuf = pbUsrBuf;
 8008d6c:	46cc      	mov	ip, r9
 8008d6e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  {
    temp1 = *pBuf;
 8008d72:	f83c eb02 	ldrh.w	lr, [ip], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 8008d76:	f824 eb04 	strh.w	lr, [r4], #4
  for (i = n; i != 0U; i--)
 8008d7a:	42a6      	cmp	r6, r4
 8008d7c:	d1f9      	bne.n	8008d72 <USB_EPStartXfer+0x15e>
          ep->xfer_buff += len;
 8008d7e:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 8008d82:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 8008d84:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8008d86:	f0c0 81b7 	bcc.w	80090f8 <USB_EPStartXfer+0x4e4>
            ep->xfer_len_db = 0U;
 8008d8a:	2500      	movs	r5, #0
 8008d8c:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d036      	beq.n	8008e00 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d92:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8008d96:	b285      	uxth	r5, r0
 8008d98:	f202 4004 	addw	r0, r2, #1028	; 0x404
 8008d9c:	4428      	add	r0, r5
 8008d9e:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008da0:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008da2:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008da6:	8908      	ldrh	r0, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008da8:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 8008daa:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008dac:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 8008db0:	d026      	beq.n	8008e00 <USB_EPStartXfer+0x1ec>
 8008db2:	eb00 0583 	add.w	r5, r0, r3, lsl #2
    temp1 = *pBuf;
 8008db6:	f834 3b02 	ldrh.w	r3, [r4], #2
    *pdwVal = (uint16_t)temp2;
 8008dba:	f820 3b04 	strh.w	r3, [r0], #4
  for (i = n; i != 0U; i--)
 8008dbe:	4285      	cmp	r5, r0
 8008dc0:	d1f9      	bne.n	8008db6 <USB_EPStartXfer+0x1a2>
 8008dc2:	e01d      	b.n	8008e00 <USB_EPStartXfer+0x1ec>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008dc4:	b284      	uxth	r4, r0
 8008dc6:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008dc8:	88cd      	ldrh	r5, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008dca:	f104 0e01 	add.w	lr, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008dce:	f502 6080 	add.w	r0, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8008dd2:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008dd6:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (i = n; i != 0U; i--)
 8008dda:	bf18      	it	ne
 8008ddc:	eb03 0e4e 	addne.w	lr, r3, lr, lsl #1
 8008de0:	d005      	beq.n	8008dee <USB_EPStartXfer+0x1da>
    temp1 = *pBuf;
 8008de2:	f833 cb02 	ldrh.w	ip, [r3], #2
  for (i = n; i != 0U; i--)
 8008de6:	4573      	cmp	r3, lr
    *pdwVal = (uint16_t)temp2;
 8008de8:	f820 cb04 	strh.w	ip, [r0], #4
  for (i = n; i != 0U; i--)
 8008dec:	d1f9      	bne.n	8008de2 <USB_EPStartXfer+0x1ce>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008dee:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8008df2:	7808      	ldrb	r0, [r1, #0]
 8008df4:	b29d      	uxth	r5, r3
 8008df6:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8008dfa:	0100      	lsls	r0, r0, #4
 8008dfc:	442b      	add	r3, r5
 8008dfe:	52c4      	strh	r4, [r0, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e00:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 8008e02:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e04:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8008e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e10:	041b      	lsls	r3, r3, #16
 8008e12:	0c1b      	lsrs	r3, r3, #16
 8008e14:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8008e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e20:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 8008e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008e28:	5ae8      	ldrh	r0, [r5, r3]
 8008e2a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8008e2e:	0400      	lsls	r0, r0, #16
 8008e30:	0c00      	lsrs	r0, r0, #16
 8008e32:	52e8      	strh	r0, [r5, r3]
 8008e34:	5ae8      	ldrh	r0, [r5, r3]
 8008e36:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8008e3a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8008e3e:	b280      	uxth	r0, r0
 8008e40:	52e8      	strh	r0, [r5, r3]
 8008e42:	f891 c000 	ldrb.w	ip, [r1]
 8008e46:	e744      	b.n	8008cd2 <USB_EPStartXfer+0xbe>
        return HAL_ERROR;
 8008e48:	2001      	movs	r0, #1
}
 8008e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008e4e:	0945      	lsrs	r5, r0, #5
 8008e50:	462f      	mov	r7, r5
 8008e52:	f010 001f 	ands.w	r0, r0, #31
 8008e56:	bf08      	it	eq
 8008e58:	f105 37ff 	addeq.w	r7, r5, #4294967295
 8008e5c:	462e      	mov	r6, r5
 8008e5e:	4dbb      	ldr	r5, [pc, #748]	; (800914c <USB_EPStartXfer+0x538>)
 8008e60:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8008e64:	b2ad      	uxth	r5, r5
 8008e66:	52e5      	strh	r5, [r4, r3]
 8008e68:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8008e6c:	b2a5      	uxth	r5, r4
 8008e6e:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8008e72:	442c      	add	r4, r5
 8008e74:	b900      	cbnz	r0, 8008e78 <USB_EPStartXfer+0x264>
 8008e76:	3e01      	subs	r6, #1
 8008e78:	48b4      	ldr	r0, [pc, #720]	; (800914c <USB_EPStartXfer+0x538>)
 8008e7a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8008e7e:	b280      	uxth	r0, r0
 8008e80:	52e0      	strh	r0, [r4, r3]
 8008e82:	f891 c000 	ldrb.w	ip, [r1]
 8008e86:	e724      	b.n	8008cd2 <USB_EPStartXfer+0xbe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008e88:	bb13      	cbnz	r3, 8008ed0 <USB_EPStartXfer+0x2bc>
 8008e8a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8008e8e:	780b      	ldrb	r3, [r1, #0]
 8008e90:	b284      	uxth	r4, r0
 8008e92:	f202 4004 	addw	r0, r2, #1028	; 0x404
 8008e96:	4420      	add	r0, r4
 8008e98:	690c      	ldr	r4, [r1, #16]
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	2c00      	cmp	r4, #0
 8008e9e:	f000 8109 	beq.w	80090b4 <USB_EPStartXfer+0x4a0>
 8008ea2:	2c3e      	cmp	r4, #62	; 0x3e
 8008ea4:	f200 818e 	bhi.w	80091c4 <USB_EPStartXfer+0x5b0>
 8008ea8:	0865      	lsrs	r5, r4, #1
 8008eaa:	462e      	mov	r6, r5
 8008eac:	f014 0401 	ands.w	r4, r4, #1
 8008eb0:	bf18      	it	ne
 8008eb2:	1c6e      	addne	r6, r5, #1
 8008eb4:	02b6      	lsls	r6, r6, #10
 8008eb6:	b2b6      	uxth	r6, r6
 8008eb8:	52c6      	strh	r6, [r0, r3]
 8008eba:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8008ebe:	f202 460c 	addw	r6, r2, #1036	; 0x40c
 8008ec2:	b280      	uxth	r0, r0
 8008ec4:	4406      	add	r6, r0
 8008ec6:	b104      	cbz	r4, 8008eca <USB_EPStartXfer+0x2b6>
 8008ec8:	3501      	adds	r5, #1
 8008eca:	02ad      	lsls	r5, r5, #10
 8008ecc:	b2a8      	uxth	r0, r5
 8008ece:	52f0      	strh	r0, [r6, r3]
        if (ep->xfer_count != 0U)
 8008ed0:	69cb      	ldr	r3, [r1, #28]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d0d5      	beq.n	8008e82 <USB_EPStartXfer+0x26e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008ed6:	f244 0340 	movw	r3, #16448	; 0x4040
 8008eda:	f891 c000 	ldrb.w	ip, [r1]
 8008ede:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ee2:	ea03 0400 	and.w	r4, r3, r0
 8008ee6:	4383      	bics	r3, r0
 8008ee8:	d002      	beq.n	8008ef0 <USB_EPStartXfer+0x2dc>
 8008eea:	2c00      	cmp	r4, #0
 8008eec:	f47f aef1 	bne.w	8008cd2 <USB_EPStartXfer+0xbe>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008ef0:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8008ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efc:	041b      	lsls	r3, r3, #16
 8008efe:	0c1b      	lsrs	r3, r3, #16
 8008f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f08:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 8008f0c:	f891 c000 	ldrb.w	ip, [r1]
 8008f10:	e6df      	b.n	8008cd2 <USB_EPStartXfer+0xbe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008f12:	0966      	lsrs	r6, r4, #5
 8008f14:	06e0      	lsls	r0, r4, #27
 8008f16:	488d      	ldr	r0, [pc, #564]	; (800914c <USB_EPStartXfer+0x538>)
 8008f18:	bf08      	it	eq
 8008f1a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8008f1e:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8008f22:	b280      	uxth	r0, r0
 8008f24:	52e8      	strh	r0, [r5, r3]
 8008f26:	f891 c000 	ldrb.w	ip, [r1]
 8008f2a:	e6d2      	b.n	8008cd2 <USB_EPStartXfer+0xbe>
        if (ep->xfer_len_db > ep->maxpacket)
 8008f2c:	6a0c      	ldr	r4, [r1, #32]
 8008f2e:	42a5      	cmp	r5, r4
 8008f30:	f080 8094 	bcs.w	800905c <USB_EPStartXfer+0x448>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008f34:	780e      	ldrb	r6, [r1, #0]
          ep->xfer_len_db -= len;
 8008f36:	1a24      	subs	r4, r4, r0
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008f38:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f3c:	ea4f 1906 	mov.w	r9, r6, lsl #4
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f48:	041b      	lsls	r3, r3, #16
 8008f4a:	0c1b      	lsrs	r3, r3, #16
 8008f4c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f54:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f58:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
          ep->xfer_len_db -= len;
 8008f5c:	620c      	str	r4, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f5e:	f013 0f40 	tst.w	r3, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f62:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8008f66:	b29e      	uxth	r6, r3
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f68:	f000 80f2 	beq.w	8009150 <USB_EPStartXfer+0x53c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f6c:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 8008f70:	4433      	add	r3, r6
 8008f72:	fa1f fa80 	uxth.w	sl, r0
 8008f76:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f7a:	894e      	ldrh	r6, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f7c:	f10a 0801 	add.w	r8, sl, #1
 8008f80:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8008f84:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f88:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f8a:	eb03 0646 	add.w	r6, r3, r6, lsl #1
  for (i = n; i != 0U; i--)
 8008f8e:	d008      	beq.n	8008fa2 <USB_EPStartXfer+0x38e>
  uint8_t *pBuf = pbUsrBuf;
 8008f90:	46bc      	mov	ip, r7
 8008f92:	eb06 0b88 	add.w	fp, r6, r8, lsl #2
    temp1 = *pBuf;
 8008f96:	f83c eb02 	ldrh.w	lr, [ip], #2
    *pdwVal = (uint16_t)temp2;
 8008f9a:	f826 eb04 	strh.w	lr, [r6], #4
  for (i = n; i != 0U; i--)
 8008f9e:	45b3      	cmp	fp, r6
 8008fa0:	d1f9      	bne.n	8008f96 <USB_EPStartXfer+0x382>
            ep->xfer_buff += len;
 8008fa2:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 8008fa4:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 8008fa6:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8008fa8:	f080 8127 	bcs.w	80091fa <USB_EPStartXfer+0x5e6>
              ep->xfer_len_db -= len;
 8008fac:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008fae:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8008fb2:	620c      	str	r4, [r1, #32]
 8008fb4:	b284      	uxth	r4, r0
 8008fb6:	f202 4004 	addw	r0, r2, #1028	; 0x404
 8008fba:	4420      	add	r0, r4
 8008fbc:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fc0:	8908      	ldrh	r0, [r1, #8]
 8008fc2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 8008fc6:	f1b8 0f00 	cmp.w	r8, #0
 8008fca:	f43f af19 	beq.w	8008e00 <USB_EPStartXfer+0x1ec>
 8008fce:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 8008fd2:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 8008fd6:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 8008fda:	429c      	cmp	r4, r3
 8008fdc:	d1f9      	bne.n	8008fd2 <USB_EPStartXfer+0x3be>
 8008fde:	e70f      	b.n	8008e00 <USB_EPStartXfer+0x1ec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008fe0:	f202 4404 	addw	r4, r2, #1028	; 0x404
 8008fe4:	4434      	add	r4, r6
 8008fe6:	b286      	uxth	r6, r0
 8008fe8:	f824 6008 	strh.w	r6, [r4, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fec:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008ff0:	3601      	adds	r6, #1
 8008ff2:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8008ff6:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ff8:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ffc:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
  for (i = n; i != 0U; i--)
 8009000:	d008      	beq.n	8009014 <USB_EPStartXfer+0x400>
  uint8_t *pBuf = pbUsrBuf;
 8009002:	464c      	mov	r4, r9
 8009004:	eb09 0646 	add.w	r6, r9, r6, lsl #1
    temp1 = *pBuf;
 8009008:	f834 eb02 	ldrh.w	lr, [r4], #2
  for (i = n; i != 0U; i--)
 800900c:	42b4      	cmp	r4, r6
    *pdwVal = (uint16_t)temp2;
 800900e:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 8009012:	d1f9      	bne.n	8009008 <USB_EPStartXfer+0x3f4>
          ep->xfer_buff += len;
 8009014:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 8009018:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800901a:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800901c:	d36f      	bcc.n	80090fe <USB_EPStartXfer+0x4ea>
            ep->xfer_len_db = 0U;
 800901e:	2500      	movs	r5, #0
 8009020:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 8009022:	2b00      	cmp	r3, #0
 8009024:	f43f aeec 	beq.w	8008e00 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009028:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800902c:	b285      	uxth	r5, r0
 800902e:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8009032:	4428      	add	r0, r5
 8009034:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009036:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009038:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800903c:	8948      	ldrh	r0, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800903e:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 8009040:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009042:	eb07 0740 	add.w	r7, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 8009046:	f43f aedb 	beq.w	8008e00 <USB_EPStartXfer+0x1ec>
 800904a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    temp1 = *pBuf;
 800904e:	f834 0b02 	ldrh.w	r0, [r4], #2
    *pdwVal = (uint16_t)temp2;
 8009052:	f827 0b04 	strh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8009056:	429f      	cmp	r7, r3
 8009058:	d1f9      	bne.n	800904e <USB_EPStartXfer+0x43a>
 800905a:	e6d1      	b.n	8008e00 <USB_EPStartXfer+0x1ec>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800905c:	7808      	ldrb	r0, [r1, #0]
 800905e:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 8009062:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800906a:	041b      	lsls	r3, r3, #16
 800906c:	0c1b      	lsrs	r3, r3, #16
 800906e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009076:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800907a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800907e:	0100      	lsls	r0, r0, #4
 8009080:	b29d      	uxth	r5, r3
 8009082:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8009086:	442b      	add	r3, r5
 8009088:	b2a5      	uxth	r5, r4
 800908a:	521d      	strh	r5, [r3, r0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800908c:	b2a0      	uxth	r0, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800908e:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009090:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009092:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8009096:	0840      	lsrs	r0, r0, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009098:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800909a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 800909e:	f43f aeaf 	beq.w	8008e00 <USB_EPStartXfer+0x1ec>
 80090a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    temp1 = *pBuf;
 80090a6:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 80090aa:	f823 5b04 	strh.w	r5, [r3], #4
  for (i = n; i != 0U; i--)
 80090ae:	4298      	cmp	r0, r3
 80090b0:	d1f9      	bne.n	80090a6 <USB_EPStartXfer+0x492>
 80090b2:	e6a5      	b.n	8008e00 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80090b4:	5ac4      	ldrh	r4, [r0, r3]
 80090b6:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80090ba:	0424      	lsls	r4, r4, #16
 80090bc:	0c24      	lsrs	r4, r4, #16
 80090be:	52c4      	strh	r4, [r0, r3]
 80090c0:	5ac5      	ldrh	r5, [r0, r3]
 80090c2:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 80090c6:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 80090ca:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 80090ce:	b2ad      	uxth	r5, r5
 80090d0:	52c5      	strh	r5, [r0, r3]
 80090d2:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80090d6:	b285      	uxth	r5, r0
 80090d8:	4620      	mov	r0, r4
 80090da:	4428      	add	r0, r5
 80090dc:	5ac4      	ldrh	r4, [r0, r3]
 80090de:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80090e2:	0424      	lsls	r4, r4, #16
 80090e4:	0c24      	lsrs	r4, r4, #16
 80090e6:	52c4      	strh	r4, [r0, r3]
 80090e8:	5ac4      	ldrh	r4, [r0, r3]
 80090ea:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80090ee:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80090f2:	b2a4      	uxth	r4, r4
 80090f4:	52c4      	strh	r4, [r0, r3]
 80090f6:	e6eb      	b.n	8008ed0 <USB_EPStartXfer+0x2bc>
            ep->xfer_len_db -= len;
 80090f8:	1a1d      	subs	r5, r3, r0
 80090fa:	4603      	mov	r3, r0
 80090fc:	e646      	b.n	8008d8c <USB_EPStartXfer+0x178>
            ep->xfer_len_db -= len;
 80090fe:	1a1d      	subs	r5, r3, r0
 8009100:	4603      	mov	r3, r0
 8009102:	e78d      	b.n	8009020 <USB_EPStartXfer+0x40c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009104:	5ae0      	ldrh	r0, [r4, r3]
 8009106:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800910a:	0400      	lsls	r0, r0, #16
 800910c:	0c00      	lsrs	r0, r0, #16
 800910e:	52e0      	strh	r0, [r4, r3]
 8009110:	5ae5      	ldrh	r5, [r4, r3]
 8009112:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8009116:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800911a:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800911e:	b2ad      	uxth	r5, r5
 8009120:	52e5      	strh	r5, [r4, r3]
 8009122:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8009126:	b2a4      	uxth	r4, r4
 8009128:	4420      	add	r0, r4
 800912a:	5ac4      	ldrh	r4, [r0, r3]
 800912c:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8009130:	0424      	lsls	r4, r4, #16
 8009132:	0c24      	lsrs	r4, r4, #16
 8009134:	52c4      	strh	r4, [r0, r3]
 8009136:	5ac4      	ldrh	r4, [r0, r3]
 8009138:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800913c:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8009140:	b2a4      	uxth	r4, r4
 8009142:	52c4      	strh	r4, [r0, r3]
 8009144:	f891 c000 	ldrb.w	ip, [r1]
 8009148:	e5c3      	b.n	8008cd2 <USB_EPStartXfer+0xbe>
 800914a:	bf00      	nop
 800914c:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009150:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8009154:	4433      	add	r3, r6
 8009156:	fa1f fa80 	uxth.w	sl, r0
 800915a:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800915e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009162:	f10a 0801 	add.w	r8, sl, #1
 8009166:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800916a:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800916e:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009170:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
  for (i = n; i != 0U; i--)
 8009174:	d008      	beq.n	8009188 <USB_EPStartXfer+0x574>
  uint8_t *pBuf = pbUsrBuf;
 8009176:	463e      	mov	r6, r7
 8009178:	eb07 0b48 	add.w	fp, r7, r8, lsl #1
    temp1 = *pBuf;
 800917c:	f836 eb02 	ldrh.w	lr, [r6], #2
  for (i = n; i != 0U; i--)
 8009180:	45b3      	cmp	fp, r6
    *pdwVal = (uint16_t)temp2;
 8009182:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 8009186:	d1f9      	bne.n	800917c <USB_EPStartXfer+0x568>
            ep->xfer_buff += len;
 8009188:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800918a:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800918c:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800918e:	d23e      	bcs.n	800920e <USB_EPStartXfer+0x5fa>
              ep->xfer_len_db -= len;
 8009190:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009192:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8009196:	620c      	str	r4, [r1, #32]
 8009198:	b284      	uxth	r4, r0
 800919a:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800919e:	4420      	add	r0, r4
 80091a0:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091a4:	8948      	ldrh	r0, [r1, #10]
 80091a6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 80091aa:	f1b8 0f00 	cmp.w	r8, #0
 80091ae:	f43f ae27 	beq.w	8008e00 <USB_EPStartXfer+0x1ec>
 80091b2:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 80091b6:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 80091ba:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 80091be:	429c      	cmp	r4, r3
 80091c0:	d1f9      	bne.n	80091b6 <USB_EPStartXfer+0x5a2>
 80091c2:	e61d      	b.n	8008e00 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80091c4:	0965      	lsrs	r5, r4, #5
 80091c6:	462f      	mov	r7, r5
 80091c8:	f014 041f 	ands.w	r4, r4, #31
 80091cc:	bf08      	it	eq
 80091ce:	f105 37ff 	addeq.w	r7, r5, #4294967295
 80091d2:	462e      	mov	r6, r5
 80091d4:	4d13      	ldr	r5, [pc, #76]	; (8009224 <USB_EPStartXfer+0x610>)
 80091d6:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80091da:	b2ad      	uxth	r5, r5
 80091dc:	52c5      	strh	r5, [r0, r3]
 80091de:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80091e2:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 80091e6:	b280      	uxth	r0, r0
 80091e8:	4405      	add	r5, r0
 80091ea:	b904      	cbnz	r4, 80091ee <USB_EPStartXfer+0x5da>
 80091ec:	3e01      	subs	r6, #1
 80091ee:	480d      	ldr	r0, [pc, #52]	; (8009224 <USB_EPStartXfer+0x610>)
 80091f0:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80091f4:	b280      	uxth	r0, r0
 80091f6:	52e8      	strh	r0, [r5, r3]
 80091f8:	e66a      	b.n	8008ed0 <USB_EPStartXfer+0x2bc>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80091fa:	fa1f f884 	uxth.w	r8, r4
 80091fe:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009202:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009206:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800920a:	2400      	movs	r4, #0
 800920c:	e6cf      	b.n	8008fae <USB_EPStartXfer+0x39a>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800920e:	fa1f f884 	uxth.w	r8, r4
 8009212:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009216:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800921a:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800921e:	2400      	movs	r4, #0
 8009220:	e7b7      	b.n	8009192 <USB_EPStartXfer+0x57e>
 8009222:	bf00      	nop
 8009224:	ffff8000 	.word	0xffff8000

08009228 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8009228:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800922a:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800922c:	b18b      	cbz	r3, 8009252 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800922e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800923a:	041b      	lsls	r3, r3, #16
 800923c:	0c1b      	lsrs	r3, r3, #16
 800923e:	f083 0310 	eor.w	r3, r3, #16
 8009242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800924a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800924e:	2000      	movs	r0, #0
 8009250:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009252:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800925a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800925e:	041b      	lsls	r3, r3, #16
 8009260:	0c1b      	lsrs	r3, r3, #16
 8009262:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800926a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800926e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8009272:	2000      	movs	r0, #0
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop

08009278 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8009278:	7b0b      	ldrb	r3, [r1, #12]
 800927a:	bb3b      	cbnz	r3, 80092cc <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 800927c:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800927e:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8009280:	b333      	cbz	r3, 80092d0 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009282:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009286:	065b      	lsls	r3, r3, #25
 8009288:	d50d      	bpl.n	80092a6 <USB_EPClearStall+0x2e>
 800928a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800928e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009296:	041b      	lsls	r3, r3, #16
 8009298:	0c1b      	lsrs	r3, r3, #16
 800929a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800929e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80092a6:	78cb      	ldrb	r3, [r1, #3]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d00f      	beq.n	80092cc <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80092ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80092b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092b8:	041b      	lsls	r3, r3, #16
 80092ba:	0c1b      	lsrs	r3, r3, #16
 80092bc:	f083 0320 	eor.w	r3, r3, #32
 80092c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80092cc:	2000      	movs	r0, #0
 80092ce:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80092d4:	045b      	lsls	r3, r3, #17
 80092d6:	d50d      	bpl.n	80092f4 <USB_EPClearStall+0x7c>
 80092d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80092dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092e4:	041b      	lsls	r3, r3, #16
 80092e6:	0c1b      	lsrs	r3, r3, #16
 80092e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80092f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009300:	041b      	lsls	r3, r3, #16
 8009302:	0c1b      	lsrs	r3, r3, #16
 8009304:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800930c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009310:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8009314:	2000      	movs	r0, #0
 8009316:	4770      	bx	lr

08009318 <USB_SetDevAddress>:
  if (address == 0U)
 8009318:	b911      	cbnz	r1, 8009320 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800931a:	2380      	movs	r3, #128	; 0x80
 800931c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8009320:	2000      	movs	r0, #0
 8009322:	4770      	bx	lr

08009324 <USB_DevConnect>:
}
 8009324:	2000      	movs	r0, #0
 8009326:	4770      	bx	lr

08009328 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8009328:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 800932c:	b280      	uxth	r0, r0
 800932e:	4770      	bx	lr

08009330 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009330:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009332:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 8009336:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009338:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800933c:	d007      	beq.n	800934e <USB_WritePMA+0x1e>
 800933e:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009342:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8009346:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 800934a:	4282      	cmp	r2, r0
 800934c:	d1f9      	bne.n	8009342 <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800934e:	4770      	bx	lr

08009350 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009350:	b570      	push	{r4, r5, r6, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009352:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8009356:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009358:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800935c:	d012      	beq.n	8009384 <USB_ReadPMA+0x34>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800935e:	46ae      	mov	lr, r5
  for (i = n; i != 0U; i--)
 8009360:	46b4      	mov	ip, r6
 8009362:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009364:	f83e 2b04 	ldrh.w	r2, [lr], #4
  for (i = n; i != 0U; i--)
 8009368:	3002      	adds	r0, #2
    temp = *(__IO uint16_t *)pdwVal;
 800936a:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800936c:	0a14      	lsrs	r4, r2, #8
  for (i = n; i != 0U; i--)
 800936e:	f1bc 0c01 	subs.w	ip, ip, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009372:	f800 2c04 	strb.w	r2, [r0, #-4]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009376:	f800 4c03 	strb.w	r4, [r0, #-3]
  for (i = n; i != 0U; i--)
 800937a:	d1f3      	bne.n	8009364 <USB_ReadPMA+0x14>
    pBuf++;
 800937c:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 8009380:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009384:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8009386:	bf44      	itt	mi
 8009388:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800938a:	700b      	strbmi	r3, [r1, #0]
  }
}
 800938c:	bd70      	pop	{r4, r5, r6, pc}
 800938e:	bf00      	nop

08009390 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009390:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8009394:	b183      	cbz	r3, 80093b8 <USBD_CDC_EP0_RxReady+0x28>
{
 8009396:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009398:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800939c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80093a0:	28ff      	cmp	r0, #255	; 0xff
 80093a2:	d007      	beq.n	80093b4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	4621      	mov	r1, r4
 80093a8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80093ac:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 80093ae:	23ff      	movs	r3, #255	; 0xff
 80093b0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80093b4:	2000      	movs	r0, #0
 80093b6:	bd10      	pop	{r4, pc}
 80093b8:	2000      	movs	r0, #0
 80093ba:	4770      	bx	lr

080093bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80093bc:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80093be:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgFSDesc;
}
 80093c0:	4801      	ldr	r0, [pc, #4]	; (80093c8 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80093c2:	801a      	strh	r2, [r3, #0]
}
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	20000068 	.word	0x20000068

080093cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80093cc:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80093ce:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgHSDesc;
}
 80093d0:	4801      	ldr	r0, [pc, #4]	; (80093d8 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80093d2:	801a      	strh	r2, [r3, #0]
}
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	200000ac 	.word	0x200000ac

080093dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80093dc:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80093de:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80093e0:	4801      	ldr	r0, [pc, #4]	; (80093e8 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80093e2:	801a      	strh	r2, [r3, #0]
}
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	200000fc 	.word	0x200000fc

080093ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80093ec:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80093ee:	220a      	movs	r2, #10
  return USBD_CDC_DeviceQualifierDesc;
}
 80093f0:	4801      	ldr	r0, [pc, #4]	; (80093f8 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80093f2:	801a      	strh	r2, [r3, #0]
}
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	200000f0 	.word	0x200000f0

080093fc <USBD_CDC_DataOut>:
{
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009400:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8009404:	f000 fffc 	bl	800a400 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8009408:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800940c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8009410:	b14b      	cbz	r3, 8009426 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009412:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8009416:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8009420:	4798      	blx	r3
    return USBD_OK;
 8009422:	2000      	movs	r0, #0
}
 8009424:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8009426:	2002      	movs	r0, #2
}
 8009428:	bd38      	pop	{r3, r4, r5, pc}
 800942a:	bf00      	nop

0800942c <USBD_CDC_DataIn>:
{
 800942c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800942e:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 8009432:	b1ed      	cbz	r5, 8009470 <USBD_CDC_DataIn+0x44>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009434:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009438:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 800943c:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8009440:	b14a      	cbz	r2, 8009456 <USBD_CDC_DataIn+0x2a>
 8009442:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 8009446:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800944a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800944c:	fbb2 f3f4 	udiv	r3, r2, r4
 8009450:	fb04 2413 	mls	r4, r4, r3, r2
 8009454:	b124      	cbz	r4, 8009460 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8009456:	2300      	movs	r3, #0
    return USBD_OK;
 8009458:	4618      	mov	r0, r3
      hcdc->TxState = 0U;
 800945a:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
}
 800945e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8009460:	4623      	mov	r3, r4
 8009462:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 8009464:	f8cc 401c 	str.w	r4, [ip, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8009468:	f000 ffae 	bl	800a3c8 <USBD_LL_Transmit>
    return USBD_OK;
 800946c:	4620      	mov	r0, r4
}
 800946e:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8009470:	2002      	movs	r0, #2
}
 8009472:	bd38      	pop	{r3, r4, r5, pc}

08009474 <USBD_CDC_Setup>:
{
 8009474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 8009478:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800947a:	780b      	ldrb	r3, [r1, #0]
{
 800947c:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800947e:	f013 0660 	ands.w	r6, r3, #96	; 0x60
{
 8009482:	460c      	mov	r4, r1
 8009484:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009486:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800948a:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800948e:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009492:	d013      	beq.n	80094bc <USBD_CDC_Setup+0x48>
 8009494:	2e20      	cmp	r6, #32
 8009496:	d117      	bne.n	80094c8 <USBD_CDC_Setup+0x54>
    if (req->wLength)
 8009498:	88ce      	ldrh	r6, [r1, #6]
 800949a:	b1f6      	cbz	r6, 80094da <USBD_CDC_Setup+0x66>
      if (req->bmRequest & 0x80U)
 800949c:	061b      	lsls	r3, r3, #24
 800949e:	d53f      	bpl.n	8009520 <USBD_CDC_Setup+0xac>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094a0:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80094a4:	4632      	mov	r2, r6
 80094a6:	4641      	mov	r1, r8
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	7860      	ldrb	r0, [r4, #1]
 80094ac:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80094ae:	4641      	mov	r1, r8
 80094b0:	4628      	mov	r0, r5
 80094b2:	88e2      	ldrh	r2, [r4, #6]
  uint8_t ret = USBD_OK;
 80094b4:	463e      	mov	r6, r7
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80094b6:	f000 fcd5 	bl	8009e64 <USBD_CtlSendData>
 80094ba:	e00a      	b.n	80094d2 <USBD_CDC_Setup+0x5e>
    switch (req->bRequest)
 80094bc:	784b      	ldrb	r3, [r1, #1]
 80094be:	2b0a      	cmp	r3, #10
 80094c0:	d01f      	beq.n	8009502 <USBD_CDC_Setup+0x8e>
 80094c2:	2b0b      	cmp	r3, #11
 80094c4:	d027      	beq.n	8009516 <USBD_CDC_Setup+0xa2>
 80094c6:	b193      	cbz	r3, 80094ee <USBD_CDC_Setup+0x7a>
      USBD_CtlError (pdev, req);
 80094c8:	4621      	mov	r1, r4
 80094ca:	4628      	mov	r0, r5
 80094cc:	f000 fc94 	bl	8009df8 <USBD_CtlError>
      ret = USBD_FAIL;
 80094d0:	2602      	movs	r6, #2
}
 80094d2:	4630      	mov	r0, r6
 80094d4:	b002      	add	sp, #8
 80094d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094da:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80094de:	4632      	mov	r2, r6
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	7848      	ldrb	r0, [r1, #1]
 80094e4:	4798      	blx	r3
}
 80094e6:	4630      	mov	r0, r6
 80094e8:	b002      	add	sp, #8
 80094ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ee:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	d1e8      	bne.n	80094c8 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80094f6:	2202      	movs	r2, #2
 80094f8:	f10d 0106 	add.w	r1, sp, #6
 80094fc:	f000 fcb2 	bl	8009e64 <USBD_CtlSendData>
 8009500:	e7e7      	b.n	80094d2 <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009502:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009506:	2b03      	cmp	r3, #3
 8009508:	d1de      	bne.n	80094c8 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800950a:	2201      	movs	r2, #1
 800950c:	f10d 0105 	add.w	r1, sp, #5
 8009510:	f000 fca8 	bl	8009e64 <USBD_CtlSendData>
 8009514:	e7dd      	b.n	80094d2 <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009516:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800951a:	2b03      	cmp	r3, #3
 800951c:	d0d9      	beq.n	80094d2 <USBD_CDC_Setup+0x5e>
 800951e:	e7d3      	b.n	80094c8 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 8009520:	784b      	ldrb	r3, [r1, #1]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009522:	4632      	mov	r2, r6
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009524:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009528:	4641      	mov	r1, r8
        hcdc->CmdOpCode = req->bRequest;
 800952a:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800952e:	f000 fcb1 	bl	8009e94 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8009532:	463e      	mov	r6, r7
 8009534:	e7cd      	b.n	80094d2 <USBD_CDC_Setup+0x5e>
 8009536:	bf00      	nop

08009538 <USBD_CDC_DeInit>:
{
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800953c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800953e:	2181      	movs	r1, #129	; 0x81
 8009540:	f000 fef6 	bl	800a330 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009544:	2101      	movs	r1, #1
 8009546:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009548:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800954a:	f000 fef1 	bl	800a330 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800954e:	2182      	movs	r1, #130	; 0x82
 8009550:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009552:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009556:	f000 feeb 	bl	800a330 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800955a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800955e:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8009560:	b14b      	cbz	r3, 8009576 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009562:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800956a:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800956e:	f000 ff4f 	bl	800a410 <USBD_static_free>
    pdev->pClassData = NULL;
 8009572:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8009576:	2000      	movs	r0, #0
 8009578:	bd38      	pop	{r3, r4, r5, pc}
 800957a:	bf00      	nop

0800957c <USBD_CDC_Init>:
{
 800957c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009580:	7c03      	ldrb	r3, [r0, #16]
{
 8009582:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009584:	bbbb      	cbnz	r3, 80095f6 <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800958a:	2202      	movs	r2, #2
 800958c:	2181      	movs	r1, #129	; 0x81
 800958e:	f000 febf 	bl	800a310 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009592:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009594:	f44f 7300 	mov.w	r3, #512	; 0x200
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009598:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800959a:	4629      	mov	r1, r5
 800959c:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800959e:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 feb5 	bl	800a310 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80095a6:	2308      	movs	r3, #8
 80095a8:	2203      	movs	r2, #3
 80095aa:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80095ac:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 fead 	bl	800a310 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80095b6:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80095ba:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80095bc:	f000 ff24 	bl	800a408 <USBD_static_malloc>
 80095c0:	4605      	mov	r5, r0
 80095c2:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 80095c6:	b348      	cbz	r0, 800961c <USBD_CDC_Init+0xa0>
    hcdc->TxState = 0U;
 80095c8:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80095cc:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4798      	blx	r3
    hcdc->TxState = 0U;
 80095d4:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 80095d8:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80095dc:	7c26      	ldrb	r6, [r4, #16]
 80095de:	b196      	cbz	r6, 8009606 <USBD_CDC_Init+0x8a>
  uint8_t ret = 0U;
 80095e0:	4646      	mov	r6, r8
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095e2:	2340      	movs	r3, #64	; 0x40
 80095e4:	4639      	mov	r1, r7
 80095e6:	4620      	mov	r0, r4
 80095e8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80095ec:	f000 fefa 	bl	800a3e4 <USBD_LL_PrepareReceive>
}
 80095f0:	4630      	mov	r0, r6
 80095f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80095f6:	2340      	movs	r3, #64	; 0x40
 80095f8:	2202      	movs	r2, #2
 80095fa:	2181      	movs	r1, #129	; 0x81
 80095fc:	f000 fe88 	bl	800a310 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009600:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009602:	2340      	movs	r3, #64	; 0x40
 8009604:	e7c8      	b.n	8009598 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800960a:	4639      	mov	r1, r7
 800960c:	4620      	mov	r0, r4
 800960e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8009612:	f000 fee7 	bl	800a3e4 <USBD_LL_PrepareReceive>
}
 8009616:	4630      	mov	r0, r6
 8009618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 800961c:	463e      	mov	r6, r7
}
 800961e:	4630      	mov	r0, r6
 8009620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009624 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8009624:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8009626:	b119      	cbz	r1, 8009630 <USBD_CDC_RegisterInterface+0xc>
  {
    pdev->pUserData= fops;
    ret = USBD_OK;
 8009628:	2000      	movs	r0, #0
    pdev->pUserData= fops;
 800962a:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
    ret = USBD_OK;
 800962e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8009630:	2002      	movs	r0, #2
  }

  return ret;
}
 8009632:	4770      	bx	lr

08009634 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8009634:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009636:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800963a:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800963c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009640:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop

08009648 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8009648:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800964a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  return USBD_OK;
}
 800964e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8009650:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop

08009658 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009658:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 800965c:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800965e:	b19a      	cbz	r2, 8009688 <USBD_CDC_ReceivePacket+0x30>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009660:	7c04      	ldrb	r4, [r0, #16]
 8009662:	b144      	cbz	r4, 8009676 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009664:	2400      	movs	r4, #0
      USBD_LL_PrepareReceive(pdev,
 8009666:	2340      	movs	r3, #64	; 0x40
 8009668:	2101      	movs	r1, #1
 800966a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800966e:	f000 feb9 	bl	800a3e4 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8009672:	4620      	mov	r0, r4
 8009674:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8009676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800967a:	2101      	movs	r1, #1
 800967c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8009680:	f000 feb0 	bl	800a3e4 <USBD_LL_PrepareReceive>
}
 8009684:	4620      	mov	r0, r4
 8009686:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8009688:	2402      	movs	r4, #2
}
 800968a:	4620      	mov	r0, r4
 800968c:	bd10      	pop	{r4, pc}
 800968e:	bf00      	nop

08009690 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8009690:	b188      	cbz	r0, 80096b6 <USBD_Init+0x26>
{
 8009692:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8009694:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009698:	b113      	cbz	r3, 80096a0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800969a:	2300      	movs	r3, #0
 800969c:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80096a0:	b109      	cbz	r1, 80096a6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80096a2:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80096a6:	2301      	movs	r3, #1
  pdev->id = id;
 80096a8:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80096aa:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80096ae:	f000 fddd 	bl	800a26c <USBD_LL_Init>

  return USBD_OK;
 80096b2:	2000      	movs	r0, #0
}
 80096b4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80096b6:	2002      	movs	r0, #2
}
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop

080096bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096bc:	4603      	mov	r3, r0
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80096be:	b119      	cbz	r1, 80096c8 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 80096c0:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 80096c2:	f8c3 128c 	str.w	r1, [r3, #652]	; 0x28c
    status = USBD_OK;
 80096c6:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80096c8:	2002      	movs	r0, #2
  }

  return status;
}
 80096ca:	4770      	bx	lr

080096cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80096cc:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80096ce:	f000 fe11 	bl	800a2f4 <USBD_LL_Start>

  return USBD_OK;
}
 80096d2:	2000      	movs	r0, #0
 80096d4:	bd08      	pop	{r3, pc}
 80096d6:	bf00      	nop

080096d8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80096d8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 80096da:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80096de:	b11b      	cbz	r3, 80096e8 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4798      	blx	r3
 80096e4:	b900      	cbnz	r0, 80096e8 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80096e6:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80096e8:	2002      	movs	r0, #2
}
 80096ea:	bd08      	pop	{r3, pc}

080096ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80096ec:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80096ee:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	4798      	blx	r3
  return USBD_OK;
}
 80096f6:	2000      	movs	r0, #0
 80096f8:	bd08      	pop	{r3, pc}
 80096fa:	bf00      	nop

080096fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009700:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8009704:	4628      	mov	r0, r5
 8009706:	f000 fb63 	bl	8009dd0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800970a:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 800970c:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286

  switch (pdev->request.bmRequest & 0x1FU)
 8009710:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 8009714:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
 8009718:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 800971c:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 800971e:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 8009722:	d009      	beq.n	8009738 <USBD_LL_SetupStage+0x3c>
 8009724:	2b02      	cmp	r3, #2
 8009726:	d013      	beq.n	8009750 <USBD_LL_SetupStage+0x54>
 8009728:	b163      	cbz	r3, 8009744 <USBD_LL_SetupStage+0x48>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800972a:	4620      	mov	r0, r4
 800972c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8009730:	f000 fe0c 	bl	800a34c <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 8009734:	2000      	movs	r0, #0
 8009736:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8009738:	4629      	mov	r1, r5
 800973a:	4620      	mov	r0, r4
 800973c:	f000 fa78 	bl	8009c30 <USBD_StdItfReq>
}
 8009740:	2000      	movs	r0, #0
 8009742:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 8009744:	4629      	mov	r1, r5
 8009746:	4620      	mov	r0, r4
 8009748:	f000 f8f8 	bl	800993c <USBD_StdDevReq>
}
 800974c:	2000      	movs	r0, #0
 800974e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 8009750:	4629      	mov	r1, r5
 8009752:	4620      	mov	r0, r4
 8009754:	f000 faa0 	bl	8009c98 <USBD_StdEPReq>
}
 8009758:	2000      	movs	r0, #0
 800975a:	bd38      	pop	{r3, r4, r5, pc}

0800975c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8009760:	b969      	cbnz	r1, 800977e <USBD_LL_DataOutStage+0x22>
 8009762:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009764:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8009768:	2a03      	cmp	r2, #3
 800976a:	d015      	beq.n	8009798 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800976c:	2a05      	cmp	r2, #5
 800976e:	460c      	mov	r4, r1
 8009770:	d10e      	bne.n	8009790 <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009772:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8009776:	f000 fde9 	bl	800a34c <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800977a:	4620      	mov	r0, r4
}
 800977c:	bd38      	pop	{r3, r4, r5, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 800977e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	b133      	cbz	r3, 8009794 <USBD_LL_DataOutStage+0x38>
 8009786:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800978a:	2a03      	cmp	r2, #3
 800978c:	d102      	bne.n	8009794 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 800978e:	4798      	blx	r3
  return USBD_OK;
 8009790:	2000      	movs	r0, #0
}
 8009792:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8009794:	2002      	movs	r0, #2
}
 8009796:	bd38      	pop	{r3, r4, r5, pc}
      if(pep->rem_length > pep->maxpacket)
 8009798:	e9d0 1253 	ldrd	r1, r2, [r0, #332]	; 0x14c
 800979c:	4291      	cmp	r1, r2
 800979e:	d90c      	bls.n	80097ba <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -=  pep->maxpacket;
 80097a0:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx (pdev,
 80097a2:	428a      	cmp	r2, r1
 80097a4:	bf88      	it	hi
 80097a6:	b28a      	uxthhi	r2, r1
        pep->rem_length -=  pep->maxpacket;
 80097a8:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80097ac:	bf98      	it	ls
 80097ae:	b292      	uxthls	r2, r2
 80097b0:	4619      	mov	r1, r3
 80097b2:	f000 fb7d 	bl	8009eb0 <USBD_CtlContinueRx>
  return USBD_OK;
 80097b6:	2000      	movs	r0, #0
}
 80097b8:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80097ba:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	b11b      	cbz	r3, 80097ca <USBD_LL_DataOutStage+0x6e>
 80097c2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80097c6:	2a03      	cmp	r2, #3
 80097c8:	d004      	beq.n	80097d4 <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 80097ca:	4628      	mov	r0, r5
 80097cc:	f000 fb7a 	bl	8009ec4 <USBD_CtlSendStatus>
  return USBD_OK;
 80097d0:	2000      	movs	r0, #0
}
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 80097d4:	4798      	blx	r3
 80097d6:	e7f8      	b.n	80097ca <USBD_LL_DataOutStage+0x6e>

080097d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80097d8:	b570      	push	{r4, r5, r6, lr}
 80097da:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80097dc:	b961      	cbnz	r1, 80097f8 <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80097de:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d015      	beq.n	8009812 <USBD_LL_DataInStage+0x3a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80097e6:	f033 0304 	bics.w	r3, r3, #4
 80097ea:	d02e      	beq.n	800984a <USBD_LL_DataInStage+0x72>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80097ec:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d031      	beq.n	8009858 <USBD_LL_DataInStage+0x80>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80097f4:	2000      	movs	r0, #0
}
 80097f6:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 80097f8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	b133      	cbz	r3, 800980e <USBD_LL_DataInStage+0x36>
 8009800:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8009804:	2a03      	cmp	r2, #3
 8009806:	d102      	bne.n	800980e <USBD_LL_DataInStage+0x36>
    pdev->pClass->DataIn(pdev, epnum);
 8009808:	4798      	blx	r3
  return USBD_OK;
 800980a:	2000      	movs	r0, #0
}
 800980c:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800980e:	2002      	movs	r0, #2
}
 8009810:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 8009812:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8009816:	429e      	cmp	r6, r3
 8009818:	d833      	bhi.n	8009882 <USBD_LL_DataInStage+0xaa>
        if((pep->total_length % pep->maxpacket == 0U) &&
 800981a:	69c2      	ldr	r2, [r0, #28]
 800981c:	fbb2 f5f3 	udiv	r5, r2, r3
 8009820:	fb03 2515 	mls	r5, r3, r5, r2
 8009824:	b9ed      	cbnz	r5, 8009862 <USBD_LL_DataInStage+0x8a>
 8009826:	4293      	cmp	r3, r2
 8009828:	d81b      	bhi.n	8009862 <USBD_LL_DataInStage+0x8a>
           (pep->total_length >= pep->maxpacket) &&
 800982a:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 800982e:	429a      	cmp	r2, r3
 8009830:	d217      	bcs.n	8009862 <USBD_LL_DataInStage+0x8a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009832:	462a      	mov	r2, r5
 8009834:	f000 fb24 	bl	8009e80 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009838:	462b      	mov	r3, r5
 800983a:	462a      	mov	r2, r5
 800983c:	4629      	mov	r1, r5
 800983e:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8009840:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009844:	f000 fdce 	bl	800a3e4 <USBD_LL_PrepareReceive>
 8009848:	e7d0      	b.n	80097ec <USBD_LL_DataInStage+0x14>
        USBD_LL_StallEP(pdev, 0x80U);
 800984a:	2180      	movs	r1, #128	; 0x80
 800984c:	f000 fd7e 	bl	800a34c <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 8009850:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8009854:	2b01      	cmp	r3, #1
 8009856:	d1cd      	bne.n	80097f4 <USBD_LL_DataInStage+0x1c>
      pdev->dev_test_mode = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
  return USBD_OK;
 800985e:	4618      	mov	r0, r3
}
 8009860:	bd70      	pop	{r4, r5, r6, pc}
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009862:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	b11b      	cbz	r3, 8009872 <USBD_LL_DataInStage+0x9a>
 800986a:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800986e:	2a03      	cmp	r2, #3
 8009870:	d015      	beq.n	800989e <USBD_LL_DataInStage+0xc6>
          USBD_LL_StallEP(pdev, 0x80U);
 8009872:	2180      	movs	r1, #128	; 0x80
 8009874:	4620      	mov	r0, r4
 8009876:	f000 fd69 	bl	800a34c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800987a:	4620      	mov	r0, r4
 800987c:	f000 fb2e 	bl	8009edc <USBD_CtlReceiveStatus>
 8009880:	e7b4      	b.n	80097ec <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8009882:	460d      	mov	r5, r1
 8009884:	1af3      	subs	r3, r6, r3
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8009886:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8009888:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800988a:	b29a      	uxth	r2, r3
 800988c:	f000 faf8 	bl	8009e80 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009890:	462b      	mov	r3, r5
 8009892:	462a      	mov	r2, r5
 8009894:	4629      	mov	r1, r5
 8009896:	4620      	mov	r0, r4
 8009898:	f000 fda4 	bl	800a3e4 <USBD_LL_PrepareReceive>
 800989c:	e7a6      	b.n	80097ec <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 800989e:	4620      	mov	r0, r4
 80098a0:	4798      	blx	r3
 80098a2:	e7e6      	b.n	8009872 <USBD_LL_DataInStage+0x9a>

080098a4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80098a4:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098a6:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80098a8:	2640      	movs	r6, #64	; 0x40
{
 80098aa:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80098ac:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098ae:	4611      	mov	r1, r2
 80098b0:	4633      	mov	r3, r6
 80098b2:	f000 fd2d 	bl	800a310 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098b6:	4633      	mov	r3, r6
 80098b8:	2180      	movs	r1, #128	; 0x80
 80098ba:	2200      	movs	r2, #0
 80098bc:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80098be:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80098c2:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098c6:	f000 fd23 	bl	800a310 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80098ca:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80098cc:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80098d0:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80098d2:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098d4:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80098d8:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80098dc:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80098de:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 80098e2:	b123      	cbz	r3, 80098ee <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80098e4:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80098e8:	4620      	mov	r0, r4
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	4798      	blx	r3
  }

  return USBD_OK;
}
 80098ee:	2000      	movs	r0, #0
 80098f0:	bd70      	pop	{r4, r5, r6, pc}
 80098f2:	bf00      	nop

080098f4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80098f4:	4603      	mov	r3, r0
  pdev->dev_speed = speed;
  return USBD_OK;
}
 80098f6:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 80098f8:	7419      	strb	r1, [r3, #16]
}
 80098fa:	4770      	bx	lr

080098fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80098fc:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80098fe:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 8009900:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
}
 8009904:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009906:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
  pdev->dev_old_state =  pdev->dev_state;
 800990a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
}
 800990e:	4770      	bx	lr

08009910 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8009910:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
 8009912:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
  return USBD_OK;
}
 8009916:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 8009918:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop

08009920 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009920:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8009924:	2a03      	cmp	r2, #3
 8009926:	d001      	beq.n	800992c <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8009928:	2000      	movs	r0, #0
 800992a:	4770      	bx	lr
{
 800992c:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 800992e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	b103      	cbz	r3, 8009938 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8009936:	4798      	blx	r3
}
 8009938:	2000      	movs	r0, #0
 800993a:	bd08      	pop	{r3, pc}

0800993c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800993c:	b530      	push	{r4, r5, lr}
 800993e:	780b      	ldrb	r3, [r1, #0]
 8009940:	460d      	mov	r5, r1
 8009942:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009946:	2b20      	cmp	r3, #32
{
 8009948:	4604      	mov	r4, r0
 800994a:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800994c:	d00d      	beq.n	800996a <USBD_StdDevReq+0x2e>
 800994e:	2b40      	cmp	r3, #64	; 0x40
 8009950:	d00b      	beq.n	800996a <USBD_StdDevReq+0x2e>
 8009952:	b19b      	cbz	r3, 800997c <USBD_StdDevReq+0x40>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8009954:	2180      	movs	r1, #128	; 0x80
 8009956:	4620      	mov	r0, r4
 8009958:	f000 fcf8 	bl	800a34c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800995c:	2100      	movs	r1, #0
 800995e:	4620      	mov	r0, r4
 8009960:	f000 fcf4 	bl	800a34c <USBD_LL_StallEP>
}
 8009964:	2000      	movs	r0, #0
 8009966:	b003      	add	sp, #12
 8009968:	bd30      	pop	{r4, r5, pc}
    pdev->pClass->Setup(pdev, req);
 800996a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800996e:	4629      	mov	r1, r5
 8009970:	4620      	mov	r0, r4
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	4798      	blx	r3
}
 8009976:	2000      	movs	r0, #0
 8009978:	b003      	add	sp, #12
 800997a:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 800997c:	784b      	ldrb	r3, [r1, #1]
 800997e:	2b09      	cmp	r3, #9
 8009980:	d8e8      	bhi.n	8009954 <USBD_StdDevReq+0x18>
 8009982:	a201      	add	r2, pc, #4	; (adr r2, 8009988 <USBD_StdDevReq+0x4c>)
 8009984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009988:	080099e3 	.word	0x080099e3
 800998c:	08009a0f 	.word	0x08009a0f
 8009990:	08009955 	.word	0x08009955
 8009994:	08009a2d 	.word	0x08009a2d
 8009998:	08009955 	.word	0x08009955
 800999c:	08009a35 	.word	0x08009a35
 80099a0:	08009a6d 	.word	0x08009a6d
 80099a4:	08009955 	.word	0x08009955
 80099a8:	08009a9d 	.word	0x08009a9d
 80099ac:	080099b1 	.word	0x080099b1
  cfgidx = (uint8_t)(req->wValue);
 80099b0:	7889      	ldrb	r1, [r1, #2]
 80099b2:	4d9e      	ldr	r5, [pc, #632]	; (8009c2c <USBD_StdDevReq+0x2f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099b4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80099b6:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099b8:	d8cc      	bhi.n	8009954 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80099ba:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80099be:	2b02      	cmp	r3, #2
 80099c0:	f000 8111 	beq.w	8009be6 <USBD_StdDevReq+0x2aa>
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	f000 80ff 	beq.w	8009bc8 <USBD_StdDevReq+0x28c>
  USBD_LL_StallEP(pdev , 0x80U);
 80099ca:	2180      	movs	r1, #128	; 0x80
 80099cc:	f000 fcbe 	bl	800a34c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80099d0:	2100      	movs	r1, #0
 80099d2:	4620      	mov	r0, r4
 80099d4:	f000 fcba 	bl	800a34c <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 80099d8:	4620      	mov	r0, r4
 80099da:	7829      	ldrb	r1, [r5, #0]
 80099dc:	f7ff fe86 	bl	80096ec <USBD_ClrClassConfig>
      break;
 80099e0:	e7c0      	b.n	8009964 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80099e2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80099e6:	3b01      	subs	r3, #1
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d8b3      	bhi.n	8009954 <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 80099ec:	88cb      	ldrh	r3, [r1, #6]
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d1b0      	bne.n	8009954 <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80099f2:	2201      	movs	r2, #1
    if (pdev->dev_remote_wakeup)
 80099f4:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80099f8:	60c2      	str	r2, [r0, #12]
    if (pdev->dev_remote_wakeup)
 80099fa:	b10b      	cbz	r3, 8009a00 <USBD_StdDevReq+0xc4>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80099fc:	2303      	movs	r3, #3
 80099fe:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a00:	2202      	movs	r2, #2
 8009a02:	4620      	mov	r0, r4
 8009a04:	f104 010c 	add.w	r1, r4, #12
 8009a08:	f000 fa2c 	bl	8009e64 <USBD_CtlSendData>
    break;
 8009a0c:	e7aa      	b.n	8009964 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8009a0e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009a12:	3b01      	subs	r3, #1
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d89d      	bhi.n	8009954 <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a18:	884b      	ldrh	r3, [r1, #2]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d1a2      	bne.n	8009964 <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 8009a1e:	2300      	movs	r3, #0
      USBD_CtlSendStatus(pdev);
 8009a20:	4620      	mov	r0, r4
      pdev->dev_remote_wakeup = 0U;
 8009a22:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009a26:	f000 fa4d 	bl	8009ec4 <USBD_CtlSendStatus>
 8009a2a:	e79b      	b.n	8009964 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a2c:	884b      	ldrh	r3, [r1, #2]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d198      	bne.n	8009964 <USBD_StdDevReq+0x28>
 8009a32:	e7f5      	b.n	8009a20 <USBD_StdDevReq+0xe4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a34:	888b      	ldrh	r3, [r1, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d18c      	bne.n	8009954 <USBD_StdDevReq+0x18>
 8009a3a:	88cb      	ldrh	r3, [r1, #6]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d189      	bne.n	8009954 <USBD_StdDevReq+0x18>
 8009a40:	884d      	ldrh	r5, [r1, #2]
 8009a42:	2d7f      	cmp	r5, #127	; 0x7f
 8009a44:	d886      	bhi.n	8009954 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a46:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	d082      	beq.n	8009954 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a4e:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8009a50:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a54:	f000 fcaa 	bl	800a3ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 fa33 	bl	8009ec4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8009a5e:	2d00      	cmp	r5, #0
 8009a60:	f000 80df 	beq.w	8009c22 <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a64:	2302      	movs	r3, #2
 8009a66:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8009a6a:	e77b      	b.n	8009964 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 8009a6c:	884a      	ldrh	r2, [r1, #2]
 8009a6e:	0a13      	lsrs	r3, r2, #8
 8009a70:	3b01      	subs	r3, #1
 8009a72:	2b06      	cmp	r3, #6
 8009a74:	f63f af6e 	bhi.w	8009954 <USBD_StdDevReq+0x18>
 8009a78:	a101      	add	r1, pc, #4	; (adr r1, 8009a80 <USBD_StdDevReq+0x144>)
 8009a7a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a7e:	bf00      	nop
 8009a80:	08009b2f 	.word	0x08009b2f
 8009a84:	08009b17 	.word	0x08009b17
 8009a88:	08009b05 	.word	0x08009b05
 8009a8c:	08009955 	.word	0x08009955
 8009a90:	08009955 	.word	0x08009955
 8009a94:	08009aef 	.word	0x08009aef
 8009a98:	08009ac1 	.word	0x08009ac1
  if (req->wLength != 1U)
 8009a9c:	88ca      	ldrh	r2, [r1, #6]
 8009a9e:	2a01      	cmp	r2, #1
 8009aa0:	f47f af58 	bne.w	8009954 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8009aa4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d878      	bhi.n	8009b9e <USBD_StdDevReq+0x262>
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f43f af51 	beq.w	8009954 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 8009ab2:	4601      	mov	r1, r0
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009aba:	f000 f9d3 	bl	8009e64 <USBD_CtlSendData>
      break;
 8009abe:	e751      	b.n	8009964 <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009ac0:	7c03      	ldrb	r3, [r0, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f47f af46 	bne.w	8009954 <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009ac8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009acc:	f10d 0006 	add.w	r0, sp, #6
 8009ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ad4:	2307      	movs	r3, #7
 8009ad6:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 8009ad8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009adc:	2a00      	cmp	r2, #0
 8009ade:	d06e      	beq.n	8009bbe <USBD_StdDevReq+0x282>
 8009ae0:	88eb      	ldrh	r3, [r5, #6]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d162      	bne.n	8009bac <USBD_StdDevReq+0x270>
        USBD_CtlSendStatus(pdev);
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 f9ec 	bl	8009ec4 <USBD_CtlSendStatus>
 8009aec:	e73a      	b.n	8009964 <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009aee:	7c03      	ldrb	r3, [r0, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f47f af2f 	bne.w	8009954 <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009af6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009afa:	f10d 0006 	add.w	r0, sp, #6
 8009afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b00:	4798      	blx	r3
      break;
 8009b02:	e7e9      	b.n	8009ad8 <USBD_StdDevReq+0x19c>
    switch ((uint8_t)(req->wValue))
 8009b04:	b2d2      	uxtb	r2, r2
 8009b06:	2a05      	cmp	r2, #5
 8009b08:	f63f af24 	bhi.w	8009954 <USBD_StdDevReq+0x18>
 8009b0c:	e8df f002 	tbb	[pc, r2]
 8009b10:	272f373f 	.word	0x272f373f
 8009b14:	171f      	.short	0x171f
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009b16:	7c03      	ldrb	r3, [r0, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d172      	bne.n	8009c02 <USBD_StdDevReq+0x2c6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009b1c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009b20:	f10d 0006 	add.w	r0, sp, #6
 8009b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b26:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b28:	2302      	movs	r3, #2
 8009b2a:	7043      	strb	r3, [r0, #1]
 8009b2c:	e7d4      	b.n	8009ad8 <USBD_StdDevReq+0x19c>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b2e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009b32:	f10d 0106 	add.w	r1, sp, #6
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	7c00      	ldrb	r0, [r0, #16]
 8009b3a:	4798      	blx	r3
    break;
 8009b3c:	e7cc      	b.n	8009ad8 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b3e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009b42:	f10d 0106 	add.w	r1, sp, #6
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	7c00      	ldrb	r0, [r0, #16]
 8009b4a:	4798      	blx	r3
      break;
 8009b4c:	e7c4      	b.n	8009ad8 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b4e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009b52:	f10d 0106 	add.w	r1, sp, #6
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	7c00      	ldrb	r0, [r0, #16]
 8009b5a:	4798      	blx	r3
      break;
 8009b5c:	e7bc      	b.n	8009ad8 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b5e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009b62:	f10d 0106 	add.w	r1, sp, #6
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	7c00      	ldrb	r0, [r0, #16]
 8009b6a:	4798      	blx	r3
      break;
 8009b6c:	e7b4      	b.n	8009ad8 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b6e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009b72:	f10d 0106 	add.w	r1, sp, #6
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	7c00      	ldrb	r0, [r0, #16]
 8009b7a:	4798      	blx	r3
      break;
 8009b7c:	e7ac      	b.n	8009ad8 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b7e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009b82:	f10d 0106 	add.w	r1, sp, #6
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	7c00      	ldrb	r0, [r0, #16]
 8009b8a:	4798      	blx	r3
      break;
 8009b8c:	e7a4      	b.n	8009ad8 <USBD_StdDevReq+0x19c>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b8e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009b92:	f10d 0106 	add.w	r1, sp, #6
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	7c00      	ldrb	r0, [r0, #16]
 8009b9a:	4798      	blx	r3
      break;
 8009b9c:	e79c      	b.n	8009ad8 <USBD_StdDevReq+0x19c>
    switch (pdev->dev_state)
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	f47f aed8 	bne.w	8009954 <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009ba4:	1d01      	adds	r1, r0, #4
 8009ba6:	f000 f95d 	bl	8009e64 <USBD_CtlSendData>
      break;
 8009baa:	e6db      	b.n	8009964 <USBD_StdDevReq+0x28>
    len = MIN(len, req->wLength);
 8009bac:	429a      	cmp	r2, r3
 8009bae:	bf28      	it	cs
 8009bb0:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8009bb2:	4601      	mov	r1, r0
 8009bb4:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8009bb6:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8009bba:	f000 f953 	bl	8009e64 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8009bbe:	88eb      	ldrh	r3, [r5, #6]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f47f aecf 	bne.w	8009964 <USBD_StdDevReq+0x28>
 8009bc6:	e78e      	b.n	8009ae6 <USBD_StdDevReq+0x1aa>
      if (cfgidx == 0U)
 8009bc8:	b321      	cbz	r1, 8009c14 <USBD_StdDevReq+0x2d8>
      else if (cfgidx != pdev->dev_config)
 8009bca:	6841      	ldr	r1, [r0, #4]
 8009bcc:	2901      	cmp	r1, #1
 8009bce:	d08a      	beq.n	8009ae6 <USBD_StdDevReq+0x1aa>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bd0:	b2c9      	uxtb	r1, r1
 8009bd2:	f7ff fd8b 	bl	80096ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009bd6:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009bd8:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 8009bda:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009bdc:	f7ff fd7c 	bl	80096d8 <USBD_SetClassConfig>
 8009be0:	2802      	cmp	r0, #2
 8009be2:	d180      	bne.n	8009ae6 <USBD_StdDevReq+0x1aa>
 8009be4:	e6b6      	b.n	8009954 <USBD_StdDevReq+0x18>
      if (cfgidx)
 8009be6:	2900      	cmp	r1, #0
 8009be8:	f43f af7d 	beq.w	8009ae6 <USBD_StdDevReq+0x1aa>
        pdev->dev_config = cfgidx;
 8009bec:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009bee:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8009bf0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009bf2:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009bf6:	f7ff fd6f 	bl	80096d8 <USBD_SetClassConfig>
 8009bfa:	2802      	cmp	r0, #2
 8009bfc:	f47f af73 	bne.w	8009ae6 <USBD_StdDevReq+0x1aa>
 8009c00:	e6a8      	b.n	8009954 <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009c02:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009c06:	f10d 0006 	add.w	r0, sp, #6
 8009c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	7043      	strb	r3, [r0, #1]
 8009c12:	e761      	b.n	8009ad8 <USBD_StdDevReq+0x19c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c14:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8009c16:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c18:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 8009c1c:	f7ff fd66 	bl	80096ec <USBD_ClrClassConfig>
 8009c20:	e761      	b.n	8009ae6 <USBD_StdDevReq+0x1aa>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c22:	2301      	movs	r3, #1
 8009c24:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8009c28:	e69c      	b.n	8009964 <USBD_StdDevReq+0x28>
 8009c2a:	bf00      	nop
 8009c2c:	20000844 	.word	0x20000844

08009c30 <USBD_StdItfReq>:
{
 8009c30:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c32:	780b      	ldrb	r3, [r1, #0]
{
 8009c34:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c36:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8009c3a:	2a40      	cmp	r2, #64	; 0x40
{
 8009c3c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c3e:	d00a      	beq.n	8009c56 <USBD_StdItfReq+0x26>
 8009c40:	065b      	lsls	r3, r3, #25
 8009c42:	d508      	bpl.n	8009c56 <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 8009c44:	2180      	movs	r1, #128	; 0x80
 8009c46:	f000 fb81 	bl	800a34c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f000 fb7d 	bl	800a34c <USBD_LL_StallEP>
}
 8009c52:	2000      	movs	r0, #0
 8009c54:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8009c56:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d811      	bhi.n	8009c84 <USBD_StdItfReq+0x54>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c60:	792b      	ldrb	r3, [r5, #4]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d80e      	bhi.n	8009c84 <USBD_StdItfReq+0x54>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009c66:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	4620      	mov	r0, r4
 8009c70:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c72:	88eb      	ldrh	r3, [r5, #6]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1ec      	bne.n	8009c52 <USBD_StdItfReq+0x22>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d1ea      	bne.n	8009c52 <USBD_StdItfReq+0x22>
          USBD_CtlSendStatus(pdev);
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 f921 	bl	8009ec4 <USBD_CtlSendStatus>
 8009c82:	e7e6      	b.n	8009c52 <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev , 0x80U);
 8009c84:	2180      	movs	r1, #128	; 0x80
 8009c86:	4620      	mov	r0, r4
 8009c88:	f000 fb60 	bl	800a34c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 fb5c 	bl	800a34c <USBD_LL_StallEP>
}
 8009c94:	2000      	movs	r0, #0
 8009c96:	bd38      	pop	{r3, r4, r5, pc}

08009c98 <USBD_StdEPReq>:
{
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	780b      	ldrb	r3, [r1, #0]
 8009c9c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ca2:	2b20      	cmp	r3, #32
 8009ca4:	d00c      	beq.n	8009cc0 <USBD_StdEPReq+0x28>
 8009ca6:	2b40      	cmp	r3, #64	; 0x40
 8009ca8:	d00a      	beq.n	8009cc0 <USBD_StdEPReq+0x28>
 8009caa:	b183      	cbz	r3, 8009cce <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 8009cac:	2180      	movs	r1, #128	; 0x80
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 fb4c 	bl	800a34c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f000 fb48 	bl	800a34c <USBD_LL_StallEP>
}
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->Setup (pdev, req);
 8009cc0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	4798      	blx	r3
}
 8009cca:	2000      	movs	r0, #0
 8009ccc:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8009cce:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8009cd0:	888a      	ldrh	r2, [r1, #4]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	fa5f fc82 	uxtb.w	ip, r2
    switch (req->bRequest)
 8009cd8:	d03e      	beq.n	8009d58 <USBD_StdEPReq+0xc0>
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d02a      	beq.n	8009d34 <USBD_StdEPReq+0x9c>
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1e4      	bne.n	8009cac <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 8009ce2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d051      	beq.n	8009d8e <USBD_StdEPReq+0xf6>
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d1de      	bne.n	8009cac <USBD_StdEPReq+0x14>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cee:	f00c 030f 	and.w	r3, ip, #15
 8009cf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 8009cf6:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cf8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 8009cfc:	d456      	bmi.n	8009dac <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009cfe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0d2      	beq.n	8009cac <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009d06:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 8009d0a:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8009d0e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8009d12:	f505 75a0 	add.w	r5, r5, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d16:	b133      	cbz	r3, 8009d26 <USBD_StdEPReq+0x8e>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009d18:	4661      	mov	r1, ip
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f000 fb32 	bl	800a384 <USBD_LL_IsStallEP>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	d04f      	beq.n	8009dc4 <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 8009d24:	2301      	movs	r3, #1
 8009d26:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d28:	2202      	movs	r2, #2
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 f899 	bl	8009e64 <USBD_CtlSendData>
          break;
 8009d32:	e7c3      	b.n	8009cbc <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 8009d34:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d01d      	beq.n	8009d78 <USBD_StdEPReq+0xe0>
 8009d3c:	2b03      	cmp	r3, #3
 8009d3e:	d1b5      	bne.n	8009cac <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009d40:	884b      	ldrh	r3, [r1, #2]
 8009d42:	b92b      	cbnz	r3, 8009d50 <USBD_StdEPReq+0xb8>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d44:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8009d48:	d002      	beq.n	8009d50 <USBD_StdEPReq+0xb8>
 8009d4a:	88cb      	ldrh	r3, [r1, #6]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d03b      	beq.n	8009dc8 <USBD_StdEPReq+0x130>
        USBD_CtlSendStatus(pdev);
 8009d50:	4620      	mov	r0, r4
 8009d52:	f000 f8b7 	bl	8009ec4 <USBD_CtlSendStatus>
        break;
 8009d56:	e7b1      	b.n	8009cbc <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 8009d58:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d00b      	beq.n	8009d78 <USBD_StdEPReq+0xe0>
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d1a3      	bne.n	8009cac <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009d64:	884b      	ldrh	r3, [r1, #2]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1a8      	bne.n	8009cbc <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 8009d6a:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8009d6e:	d0ef      	beq.n	8009d50 <USBD_StdEPReq+0xb8>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d70:	4661      	mov	r1, ip
 8009d72:	f000 faf9 	bl	800a368 <USBD_LL_ClearStallEP>
 8009d76:	e7eb      	b.n	8009d50 <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d78:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8009d7c:	d096      	beq.n	8009cac <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 8009d7e:	4661      	mov	r1, ip
 8009d80:	f000 fae4 	bl	800a34c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009d84:	2180      	movs	r1, #128	; 0x80
 8009d86:	4620      	mov	r0, r4
 8009d88:	f000 fae0 	bl	800a34c <USBD_LL_StallEP>
 8009d8c:	e796      	b.n	8009cbc <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d8e:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8009d92:	d18b      	bne.n	8009cac <USBD_StdEPReq+0x14>
          pep->status = 0x0000U;
 8009d94:	2300      	movs	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009d96:	0611      	lsls	r1, r2, #24
 8009d98:	bf4c      	ite	mi
 8009d9a:	f100 0114 	addmi.w	r1, r0, #20
 8009d9e:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009da2:	2202      	movs	r2, #2
          pep->status = 0x0000U;
 8009da4:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009da6:	f000 f85d 	bl	8009e64 <USBD_CtlSendData>
          break;
 8009daa:	e787      	b.n	8009cbc <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f43f af7c 	beq.w	8009cac <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009db4:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 8009db8:	1c5d      	adds	r5, r3, #1
 8009dba:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8009dbe:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8009dc2:	e7a8      	b.n	8009d16 <USBD_StdEPReq+0x7e>
            pep->status = 0x0000U;
 8009dc4:	6028      	str	r0, [r5, #0]
 8009dc6:	e7af      	b.n	8009d28 <USBD_StdEPReq+0x90>
            USBD_LL_StallEP(pdev, ep_addr);
 8009dc8:	4661      	mov	r1, ip
 8009dca:	f000 fabf 	bl	800a34c <USBD_LL_StallEP>
 8009dce:	e7bf      	b.n	8009d50 <USBD_StdEPReq+0xb8>

08009dd0 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009dd0:	780b      	ldrb	r3, [r1, #0]
 8009dd2:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009dd4:	784b      	ldrb	r3, [r1, #1]
 8009dd6:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009dd8:	78ca      	ldrb	r2, [r1, #3]
 8009dda:	788b      	ldrb	r3, [r1, #2]
 8009ddc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009de0:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009de2:	794a      	ldrb	r2, [r1, #5]
 8009de4:	790b      	ldrb	r3, [r1, #4]
 8009de6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009dea:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009dec:	79ca      	ldrb	r2, [r1, #7]
 8009dee:	798b      	ldrb	r3, [r1, #6]
 8009df0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009df4:	80c3      	strh	r3, [r0, #6]
}
 8009df6:	4770      	bx	lr

08009df8 <USBD_CtlError>:
{
 8009df8:	b510      	push	{r4, lr}
 8009dfa:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8009dfc:	2180      	movs	r1, #128	; 0x80
 8009dfe:	f000 faa5 	bl	800a34c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009e02:	4620      	mov	r0, r4
}
 8009e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8009e08:	2100      	movs	r1, #0
 8009e0a:	f000 ba9f 	b.w	800a34c <USBD_LL_StallEP>
 8009e0e:	bf00      	nop

08009e10 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8009e10:	b318      	cbz	r0, 8009e5a <USBD_GetString+0x4a>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8009e12:	7803      	ldrb	r3, [r0, #0]
{
 8009e14:	b430      	push	{r4, r5}
    while (*buf != '\0')
 8009e16:	b30b      	cbz	r3, 8009e5c <USBD_GetString+0x4c>
 8009e18:	4604      	mov	r4, r0
 8009e1a:	f1c0 0c01 	rsb	ip, r0, #1
    {
        len++;
 8009e1e:	eb04 030c 	add.w	r3, r4, ip
    while (*buf != '\0')
 8009e22:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2d00      	cmp	r5, #0
 8009e2a:	d1f8      	bne.n	8009e1e <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	005b      	lsls	r3, r3, #1
 8009e30:	b2dc      	uxtb	r4, r3
 8009e32:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009e34:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009e36:	700c      	strb	r4, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009e38:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 8009e3a:	7804      	ldrb	r4, [r0, #0]
 8009e3c:	b15c      	cbz	r4, 8009e56 <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009e3e:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8009e40:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8009e42:	1c5a      	adds	r2, r3, #1
 8009e44:	b2d2      	uxtb	r2, r2
 8009e46:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8009e48:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8009e4a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8009e4e:	3302      	adds	r3, #2
 8009e50:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8009e52:	2c00      	cmp	r4, #0
 8009e54:	d1f5      	bne.n	8009e42 <USBD_GetString+0x32>
}
 8009e56:	bc30      	pop	{r4, r5}
 8009e58:	4770      	bx	lr
 8009e5a:	4770      	bx	lr
    while (*buf != '\0')
 8009e5c:	2402      	movs	r4, #2
 8009e5e:	4623      	mov	r3, r4
 8009e60:	e7e7      	b.n	8009e32 <USBD_GetString+0x22>
 8009e62:	bf00      	nop

08009e64 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009e64:	b510      	push	{r4, lr}
 8009e66:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e68:	2402      	movs	r4, #2
{
 8009e6a:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8009e6c:	e9c0 3307 	strd	r3, r3, [r0, #28]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009e70:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e72:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009e76:	f000 faa7 	bl	800a3c8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	bd10      	pop	{r4, pc}
 8009e7e:	bf00      	nop

08009e80 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009e80:	468c      	mov	ip, r1
 8009e82:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009e84:	2100      	movs	r1, #0
{
 8009e86:	4613      	mov	r3, r2
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009e88:	4662      	mov	r2, ip
 8009e8a:	f000 fa9d 	bl	800a3c8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009e8e:	2000      	movs	r0, #0
 8009e90:	bd08      	pop	{r3, pc}
 8009e92:	bf00      	nop

08009e94 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009e94:	b510      	push	{r4, lr}
 8009e96:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e98:	2403      	movs	r4, #3
{
 8009e9a:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8009e9c:	e9c0 3352 	strd	r3, r3, [r0, #328]	; 0x148

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009ea0:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ea2:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009ea6:	f000 fa9d 	bl	800a3e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009eaa:	2000      	movs	r0, #0
 8009eac:	bd10      	pop	{r4, pc}
 8009eae:	bf00      	nop

08009eb0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009eb0:	468c      	mov	ip, r1
 8009eb2:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009eb4:	2100      	movs	r1, #0
{
 8009eb6:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009eb8:	4662      	mov	r2, ip
 8009eba:	f000 fa93 	bl	800a3e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	bd08      	pop	{r3, pc}
 8009ec2:	bf00      	nop

08009ec4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009ec4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ec6:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ec8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009eca:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ece:	461a      	mov	r2, r3
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	f000 fa79 	bl	800a3c8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	bd08      	pop	{r3, pc}
 8009eda:	bf00      	nop

08009edc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009edc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ede:	2105      	movs	r1, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009ee0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ee2:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	4619      	mov	r1, r3
 8009eea:	f000 fa7b 	bl	800a3e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009eee:	2000      	movs	r0, #0
 8009ef0:	bd08      	pop	{r3, pc}
 8009ef2:	bf00      	nop

08009ef4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ef4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4917      	ldr	r1, [pc, #92]	; (8009f58 <MX_USB_DEVICE_Init+0x64>)
 8009efa:	4818      	ldr	r0, [pc, #96]	; (8009f5c <MX_USB_DEVICE_Init+0x68>)
 8009efc:	f7ff fbc8 	bl	8009690 <USBD_Init>
 8009f00:	b970      	cbnz	r0, 8009f20 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f02:	4917      	ldr	r1, [pc, #92]	; (8009f60 <MX_USB_DEVICE_Init+0x6c>)
 8009f04:	4815      	ldr	r0, [pc, #84]	; (8009f5c <MX_USB_DEVICE_Init+0x68>)
 8009f06:	f7ff fbd9 	bl	80096bc <USBD_RegisterClass>
 8009f0a:	b988      	cbnz	r0, 8009f30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f0c:	4915      	ldr	r1, [pc, #84]	; (8009f64 <MX_USB_DEVICE_Init+0x70>)
 8009f0e:	4813      	ldr	r0, [pc, #76]	; (8009f5c <MX_USB_DEVICE_Init+0x68>)
 8009f10:	f7ff fb88 	bl	8009624 <USBD_CDC_RegisterInterface>
 8009f14:	b9a0      	cbnz	r0, 8009f40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f16:	4811      	ldr	r0, [pc, #68]	; (8009f5c <MX_USB_DEVICE_Init+0x68>)
 8009f18:	f7ff fbd8 	bl	80096cc <USBD_Start>
 8009f1c:	b9b8      	cbnz	r0, 8009f4e <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f1e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009f20:	f7fa fdde 	bl	8004ae0 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f24:	490e      	ldr	r1, [pc, #56]	; (8009f60 <MX_USB_DEVICE_Init+0x6c>)
 8009f26:	480d      	ldr	r0, [pc, #52]	; (8009f5c <MX_USB_DEVICE_Init+0x68>)
 8009f28:	f7ff fbc8 	bl	80096bc <USBD_RegisterClass>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d0ed      	beq.n	8009f0c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8009f30:	f7fa fdd6 	bl	8004ae0 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f34:	490b      	ldr	r1, [pc, #44]	; (8009f64 <MX_USB_DEVICE_Init+0x70>)
 8009f36:	4809      	ldr	r0, [pc, #36]	; (8009f5c <MX_USB_DEVICE_Init+0x68>)
 8009f38:	f7ff fb74 	bl	8009624 <USBD_CDC_RegisterInterface>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d0ea      	beq.n	8009f16 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8009f40:	f7fa fdce 	bl	8004ae0 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f44:	4805      	ldr	r0, [pc, #20]	; (8009f5c <MX_USB_DEVICE_Init+0x68>)
 8009f46:	f7ff fbc1 	bl	80096cc <USBD_Start>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d0e7      	beq.n	8009f1e <MX_USB_DEVICE_Init+0x2a>
}
 8009f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8009f52:	f7fa bdc5 	b.w	8004ae0 <Error_Handler>
 8009f56:	bf00      	nop
 8009f58:	20000150 	.word	0x20000150
 8009f5c:	20000848 	.word	0x20000848
 8009f60:	20000030 	.word	0x20000030
 8009f64:	20000140 	.word	0x20000140

08009f68 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8009f68:	2000      	movs	r0, #0
 8009f6a:	4770      	bx	lr

08009f6c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	4770      	bx	lr

08009f70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	4604      	mov	r4, r0
 8009f74:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f76:	4f0f      	ldr	r7, [pc, #60]	; (8009fb4 <CDC_Receive_FS+0x44>)
 8009f78:	4621      	mov	r1, r4
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);

	memset (usbbuffer, '\0', 128);  // clear the buffer
 8009f7a:	4e0f      	ldr	r6, [pc, #60]	; (8009fb8 <CDC_Receive_FS+0x48>)
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	f7ff fb63 	bl	8009648 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f82:	4638      	mov	r0, r7
 8009f84:	f7ff fb68 	bl	8009658 <USBD_CDC_ReceivePacket>
	memset (usbbuffer, '\0', 128);  // clear the buffer
 8009f88:	2280      	movs	r2, #128	; 0x80
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f000 fa79 	bl	800a484 <memset>
	uint8_t len = (uint8_t)*Len;
	memcpy(usbbuffer, Buf, len);  // copy the data to the buffer
 8009f92:	782d      	ldrb	r5, [r5, #0]
 8009f94:	4621      	mov	r1, r4
 8009f96:	462a      	mov	r2, r5
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f000 fa65 	bl	800a468 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8009f9e:	462a      	mov	r2, r5
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 fa6e 	bl	800a484 <memset>

	HAL_EXTI_GenerateSWI(&hexti1);
 8009fa8:	4804      	ldr	r0, [pc, #16]	; (8009fbc <CDC_Receive_FS+0x4c>)
 8009faa:	f7fb ff7b 	bl	8005ea4 <HAL_EXTI_GenerateSWI>

	return (USBD_OK);
  /* USER CODE END 6 */
}
 8009fae:	2000      	movs	r0, #0
 8009fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20000848 	.word	0x20000848
 8009fb8:	200007ac 	.word	0x200007ac
 8009fbc:	200004f4 	.word	0x200004f4

08009fc0 <CDC_Init_FS>:
{
 8009fc0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009fc2:	4c06      	ldr	r4, [pc, #24]	; (8009fdc <CDC_Init_FS+0x1c>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	4905      	ldr	r1, [pc, #20]	; (8009fe0 <CDC_Init_FS+0x20>)
 8009fca:	f7ff fb33 	bl	8009634 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009fce:	4620      	mov	r0, r4
 8009fd0:	4904      	ldr	r1, [pc, #16]	; (8009fe4 <CDC_Init_FS+0x24>)
 8009fd2:	f7ff fb39 	bl	8009648 <USBD_CDC_SetRxBuffer>
}
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	bd10      	pop	{r4, pc}
 8009fda:	bf00      	nop
 8009fdc:	20000848 	.word	0x20000848
 8009fe0:	20000ecc 	.word	0x20000ecc
 8009fe4:	20000ae4 	.word	0x20000ae4

08009fe8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009fe8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8009fea:	4801      	ldr	r0, [pc, #4]	; (8009ff0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8009fec:	800b      	strh	r3, [r1, #0]
}
 8009fee:	4770      	bx	lr
 8009ff0:	2000016c 	.word	0x2000016c

08009ff4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ff4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8009ff6:	4801      	ldr	r0, [pc, #4]	; (8009ffc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8009ff8:	800b      	strh	r3, [r1, #0]
}
 8009ffa:	4770      	bx	lr
 8009ffc:	20000180 	.word	0x20000180

0800a000 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a000:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a002:	4c04      	ldr	r4, [pc, #16]	; (800a014 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800a004:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a006:	4804      	ldr	r0, [pc, #16]	; (800a018 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800a008:	4621      	mov	r1, r4
 800a00a:	f7ff ff01 	bl	8009e10 <USBD_GetString>
  return USBD_StrDesc;
}
 800a00e:	4620      	mov	r0, r4
 800a010:	bd10      	pop	{r4, pc}
 800a012:	bf00      	nop
 800a014:	200012b4 	.word	0x200012b4
 800a018:	0800d374 	.word	0x0800d374

0800a01c <USBD_FS_ProductStrDescriptor>:
{
 800a01c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a01e:	4c04      	ldr	r4, [pc, #16]	; (800a030 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800a020:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a022:	4804      	ldr	r0, [pc, #16]	; (800a034 <USBD_FS_ProductStrDescriptor+0x18>)
 800a024:	4621      	mov	r1, r4
 800a026:	f7ff fef3 	bl	8009e10 <USBD_GetString>
}
 800a02a:	4620      	mov	r0, r4
 800a02c:	bd10      	pop	{r4, pc}
 800a02e:	bf00      	nop
 800a030:	200012b4 	.word	0x200012b4
 800a034:	0800d388 	.word	0x0800d388

0800a038 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a038:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a03a:	4c04      	ldr	r4, [pc, #16]	; (800a04c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800a03c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a03e:	4804      	ldr	r0, [pc, #16]	; (800a050 <USBD_FS_ConfigStrDescriptor+0x18>)
 800a040:	4621      	mov	r1, r4
 800a042:	f7ff fee5 	bl	8009e10 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800a046:	4620      	mov	r0, r4
 800a048:	bd10      	pop	{r4, pc}
 800a04a:	bf00      	nop
 800a04c:	200012b4 	.word	0x200012b4
 800a050:	0800d3a0 	.word	0x0800d3a0

0800a054 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a054:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a056:	4c04      	ldr	r4, [pc, #16]	; (800a068 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800a058:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a05a:	4804      	ldr	r0, [pc, #16]	; (800a06c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800a05c:	4621      	mov	r1, r4
 800a05e:	f7ff fed7 	bl	8009e10 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800a062:	4620      	mov	r0, r4
 800a064:	bd10      	pop	{r4, pc}
 800a066:	bf00      	nop
 800a068:	200012b4 	.word	0x200012b4
 800a06c:	0800d3ac 	.word	0x0800d3ac

0800a070 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800a070:	f04f 0c1a 	mov.w	ip, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a074:	4a42      	ldr	r2, [pc, #264]	; (800a180 <USBD_FS_SerialStrDescriptor+0x110>)
 800a076:	6d10      	ldr	r0, [r2, #80]	; 0x50
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800a078:	6d93      	ldr	r3, [r2, #88]	; 0x58
  *length = USB_SIZ_STRING_SERIAL;
 800a07a:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800a07e:	18c3      	adds	r3, r0, r3
 800a080:	d101      	bne.n	800a086 <USBD_FS_SerialStrDescriptor+0x16>
}
 800a082:	4840      	ldr	r0, [pc, #256]	; (800a184 <USBD_FS_SerialStrDescriptor+0x114>)
 800a084:	4770      	bx	lr
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800a086:	f04f 0c00 	mov.w	ip, #0
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a08a:	6d51      	ldr	r1, [r2, #84]	; 0x54
    if (((value >> 28)) < 0xA)
 800a08c:	0f18      	lsrs	r0, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800a08e:	4a3d      	ldr	r2, [pc, #244]	; (800a184 <USBD_FS_SerialStrDescriptor+0x114>)
    if (((value >> 28)) < 0xA)
 800a090:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a094:	bf2c      	ite	cs
 800a096:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a098:	3030      	addcc	r0, #48	; 0x30
 800a09a:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800a09c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800a0a0:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0a2:	bf8c      	ite	hi
 800a0a4:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0a6:	3030      	addls	r0, #48	; 0x30
 800a0a8:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800a0aa:	f3c3 5003 	ubfx	r0, r3, #20, #4
 800a0ae:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0b0:	bf8c      	ite	hi
 800a0b2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0b4:	3030      	addls	r0, #48	; 0x30
 800a0b6:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800a0b8:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800a0bc:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0be:	bf8c      	ite	hi
 800a0c0:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0c2:	3030      	addls	r0, #48	; 0x30
 800a0c4:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800a0c6:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800a0ca:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0cc:	bf8c      	ite	hi
 800a0ce:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0d0:	3030      	addls	r0, #48	; 0x30
 800a0d2:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800a0d4:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800a0d8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0da:	bf8c      	ite	hi
 800a0dc:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0de:	3030      	addls	r0, #48	; 0x30
 800a0e0:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800a0e2:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800a0e6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0e8:	bf8c      	ite	hi
 800a0ea:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0ec:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800a0ee:	f882 c003 	strb.w	ip, [r2, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0f2:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800a0f4:	f04f 0c00 	mov.w	ip, #0
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	f882 c005 	strb.w	ip, [r2, #5]
 800a0fe:	73d0      	strb	r0, [r2, #15]
 800a100:	f04f 0c00 	mov.w	ip, #0
 800a104:	2000      	movs	r0, #0
 800a106:	f882 c007 	strb.w	ip, [r2, #7]
 800a10a:	7450      	strb	r0, [r2, #17]
 800a10c:	f04f 0c00 	mov.w	ip, #0
 800a110:	2000      	movs	r0, #0
 800a112:	f882 c009 	strb.w	ip, [r2, #9]
 800a116:	74d0      	strb	r0, [r2, #19]
 800a118:	f04f 0c00 	mov.w	ip, #0
 800a11c:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800a11e:	f003 030f 	and.w	r3, r3, #15
 800a122:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800a124:	bf94      	ite	ls
 800a126:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a128:	3337      	addhi	r3, #55	; 0x37
 800a12a:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800a12c:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 800a130:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a134:	bf2c      	ite	cs
 800a136:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a138:	3330      	addcc	r3, #48	; 0x30
 800a13a:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800a13c:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800a140:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a142:	bf8c      	ite	hi
 800a144:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a146:	3330      	addls	r3, #48	; 0x30
 800a148:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800a14a:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800a14e:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a150:	bf8c      	ite	hi
 800a152:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a154:	3330      	addls	r3, #48	; 0x30
 800a156:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800a158:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800a15c:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800a15e:	bf94      	ite	ls
 800a160:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a162:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 800a164:	f882 c00b 	strb.w	ip, [r2, #11]
 800a168:	7550      	strb	r0, [r2, #21]
 800a16a:	f04f 0c00 	mov.w	ip, #0
 800a16e:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a170:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800a172:	2300      	movs	r3, #0
 800a174:	75d0      	strb	r0, [r2, #23]
 800a176:	f882 c00d 	strb.w	ip, [r2, #13]
}
 800a17a:	4802      	ldr	r0, [pc, #8]	; (800a184 <USBD_FS_SerialStrDescriptor+0x114>)
    pbuf[2 * idx + 1] = 0;
 800a17c:	7653      	strb	r3, [r2, #25]
}
 800a17e:	4770      	bx	lr
 800a180:	1ff80000 	.word	0x1ff80000
 800a184:	20000184 	.word	0x20000184

0800a188 <HAL_PCDEx_SetConnectionState>:
{
  /* USER CODE BEGIN 6 */
  if (state == 1)
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800a188:	4a04      	ldr	r2, [pc, #16]	; (800a19c <HAL_PCDEx_SetConnectionState+0x14>)
  if (state == 1)
 800a18a:	2901      	cmp	r1, #1
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800a18c:	6853      	ldr	r3, [r2, #4]
 800a18e:	bf0c      	ite	eq
 800a190:	f043 0301 	orreq.w	r3, r3, #1
  }
  else
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800a194:	f023 0301 	bicne.w	r3, r3, #1
 800a198:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END 6 */
}
 800a19a:	4770      	bx	lr
 800a19c:	40010000 	.word	0x40010000

0800a1a0 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 800a1a0:	4b0e      	ldr	r3, [pc, #56]	; (800a1dc <HAL_PCD_MspInit+0x3c>)
 800a1a2:	6802      	ldr	r2, [r0, #0]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d000      	beq.n	800a1aa <HAL_PCD_MspInit+0xa>
 800a1a8:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a1aa:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800a1ac:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 800a1b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
{
 800a1b2:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 800a1b4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800a1b8:	6259      	str	r1, [r3, #36]	; 0x24
 800a1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 800a1bc:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800a1be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1c2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a1c4:	2014      	movs	r0, #20
 800a1c6:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800a1c8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a1ca:	f7fb fbc3 	bl	8005954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a1ce:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a1d0:	b003      	add	sp, #12
 800a1d2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a1d6:	f7fb bbfb 	b.w	80059d0 <HAL_NVIC_EnableIRQ>
 800a1da:	bf00      	nop
 800a1dc:	40005c00 	.word	0x40005c00

0800a1e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1e0:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a1e2:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a1e6:	f501 712c 	add.w	r1, r1, #688	; 0x2b0
 800a1ea:	f7ff ba87 	b.w	80096fc <USBD_LL_SetupStage>
 800a1ee:	bf00      	nop

0800a1f0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a1f0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800a1f4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a1f8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800a1fc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a200:	f7ff baac 	b.w	800975c <USBD_LL_DataOutStage>

0800a204 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a204:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800a208:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a20c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a20e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a212:	f7ff bae1 	b.w	80097d8 <USBD_LL_DataInStage>
 800a216:	bf00      	nop

0800a218 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a218:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a21c:	f7ff bb80 	b.w	8009920 <USBD_LL_SOF>

0800a220 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a220:	6883      	ldr	r3, [r0, #8]
{
 800a222:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a224:	2b02      	cmp	r3, #2
{
 800a226:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a228:	d001      	beq.n	800a22e <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800a22a:	f7fa fc59 	bl	8004ae0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a22e:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800a232:	2101      	movs	r1, #1
 800a234:	f7ff fb5e 	bl	80098f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a238:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800a23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a240:	f7ff bb30 	b.w	80098a4 <USBD_LL_Reset>

0800a244 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a244:	b510      	push	{r4, lr}
 800a246:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a248:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a24c:	f7ff fb56 	bl	80098fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a250:	69a3      	ldr	r3, [r4, #24]
 800a252:	b123      	cbz	r3, 800a25e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a254:	4a02      	ldr	r2, [pc, #8]	; (800a260 <HAL_PCD_SuspendCallback+0x1c>)
 800a256:	6913      	ldr	r3, [r2, #16]
 800a258:	f043 0306 	orr.w	r3, r3, #6
 800a25c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a25e:	bd10      	pop	{r4, pc}
 800a260:	e000ed00 	.word	0xe000ed00

0800a264 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a264:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a268:	f7ff bb52 	b.w	8009910 <USBD_LL_Resume>

0800a26c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a26c:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a26e:	2408      	movs	r4, #8
  hpcd_USB_FS.pData = pdev;
 800a270:	4b1e      	ldr	r3, [pc, #120]	; (800a2ec <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a272:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a274:	605c      	str	r4, [r3, #4]
{
 800a276:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a278:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a27a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a27c:	621a      	str	r2, [r3, #32]
  hpcd_USB_FS.Instance = USB;
 800a27e:	4a1c      	ldr	r2, [pc, #112]	; (800a2f0 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 800a280:	f8c3 42e8 	str.w	r4, [r3, #744]	; 0x2e8
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a284:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 800a286:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a28a:	6099      	str	r1, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a28c:	6119      	str	r1, [r3, #16]
  hpcd_USB_FS.Instance = USB;
 800a28e:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a290:	f7fc fa0c 	bl	80066ac <HAL_PCD_Init>
 800a294:	bb30      	cbnz	r0, 800a2e4 <USBD_LL_Init+0x78>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a296:	2200      	movs	r2, #0
 800a298:	2318      	movs	r3, #24
 800a29a:	4611      	mov	r1, r2
 800a29c:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800a2a0:	f7fd f904 	bl	80074ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a2a4:	2358      	movs	r3, #88	; 0x58
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2180      	movs	r1, #128	; 0x80
 800a2aa:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800a2ae:	f7fd f8fd 	bl	80074ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a2b2:	23c0      	movs	r3, #192	; 0xc0
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	2181      	movs	r1, #129	; 0x81
 800a2b8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800a2bc:	f7fd f8f6 	bl	80074ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a2c0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800a2cc:	f7fd f8ee 	bl	80074ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a2d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	2182      	movs	r1, #130	; 0x82
 800a2d8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800a2dc:	f7fd f8e6 	bl	80074ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800a2e4:	f7fa fbfc 	bl	8004ae0 <Error_Handler>
 800a2e8:	e7d5      	b.n	800a296 <USBD_LL_Init+0x2a>
 800a2ea:	bf00      	nop
 800a2ec:	200014b4 	.word	0x200014b4
 800a2f0:	40005c00 	.word	0x40005c00

0800a2f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a2f4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800a2f6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a2fa:	f7fc fa39 	bl	8006770 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800a2fe:	2803      	cmp	r0, #3
 800a300:	bf96      	itet	ls
 800a302:	4b02      	ldrls	r3, [pc, #8]	; (800a30c <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 800a304:	2002      	movhi	r0, #2
 800a306:	5c18      	ldrbls	r0, [r3, r0]
}
 800a308:	bd08      	pop	{r3, pc}
 800a30a:	bf00      	nop
 800a30c:	0800d3bc 	.word	0x0800d3bc

0800a310 <USBD_LL_OpenEP>:
{
 800a310:	4694      	mov	ip, r2
 800a312:	b508      	push	{r3, lr}
 800a314:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a316:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a31a:	4663      	mov	r3, ip
 800a31c:	f7fc ff9c 	bl	8007258 <HAL_PCD_EP_Open>
  switch (hal_status)
 800a320:	2803      	cmp	r0, #3
 800a322:	bf96      	itet	ls
 800a324:	4b01      	ldrls	r3, [pc, #4]	; (800a32c <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a326:	2002      	movhi	r0, #2
 800a328:	5c18      	ldrbls	r0, [r3, r0]
}
 800a32a:	bd08      	pop	{r3, pc}
 800a32c:	0800d3bc 	.word	0x0800d3bc

0800a330 <USBD_LL_CloseEP>:
{
 800a330:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a332:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a336:	f7fc ffcd 	bl	80072d4 <HAL_PCD_EP_Close>
  switch (hal_status)
 800a33a:	2803      	cmp	r0, #3
 800a33c:	bf96      	itet	ls
 800a33e:	4b02      	ldrls	r3, [pc, #8]	; (800a348 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a340:	2002      	movhi	r0, #2
 800a342:	5c18      	ldrbls	r0, [r3, r0]
}
 800a344:	bd08      	pop	{r3, pc}
 800a346:	bf00      	nop
 800a348:	0800d3bc 	.word	0x0800d3bc

0800a34c <USBD_LL_StallEP>:
{
 800a34c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a34e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a352:	f7fd f837 	bl	80073c4 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800a356:	2803      	cmp	r0, #3
 800a358:	bf96      	itet	ls
 800a35a:	4b02      	ldrls	r3, [pc, #8]	; (800a364 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a35c:	2002      	movhi	r0, #2
 800a35e:	5c18      	ldrbls	r0, [r3, r0]
}
 800a360:	bd08      	pop	{r3, pc}
 800a362:	bf00      	nop
 800a364:	0800d3bc 	.word	0x0800d3bc

0800a368 <USBD_LL_ClearStallEP>:
{
 800a368:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a36a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a36e:	f7fd f861 	bl	8007434 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800a372:	2803      	cmp	r0, #3
 800a374:	bf96      	itet	ls
 800a376:	4b02      	ldrls	r3, [pc, #8]	; (800a380 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a378:	2002      	movhi	r0, #2
 800a37a:	5c18      	ldrbls	r0, [r3, r0]
}
 800a37c:	bd08      	pop	{r3, pc}
 800a37e:	bf00      	nop
 800a380:	0800d3bc 	.word	0x0800d3bc

0800a384 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800a384:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a386:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 800a38a:	d406      	bmi.n	800a39a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a38c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a390:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a394:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800a398:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a39a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a39e:	3101      	adds	r1, #1
 800a3a0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a3a4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a3a8:	7888      	ldrb	r0, [r1, #2]
 800a3aa:	4770      	bx	lr

0800a3ac <USBD_LL_SetUSBAddress>:
{
 800a3ac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3ae:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a3b2:	f7fc ff3b 	bl	800722c <HAL_PCD_SetAddress>
  switch (hal_status)
 800a3b6:	2803      	cmp	r0, #3
 800a3b8:	bf96      	itet	ls
 800a3ba:	4b02      	ldrls	r3, [pc, #8]	; (800a3c4 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3bc:	2002      	movhi	r0, #2
 800a3be:	5c18      	ldrbls	r0, [r3, r0]
}
 800a3c0:	bd08      	pop	{r3, pc}
 800a3c2:	bf00      	nop
 800a3c4:	0800d3bc 	.word	0x0800d3bc

0800a3c8 <USBD_LL_Transmit>:
{
 800a3c8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3ca:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a3ce:	f7fc ffd5 	bl	800737c <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800a3d2:	2803      	cmp	r0, #3
 800a3d4:	bf96      	itet	ls
 800a3d6:	4b02      	ldrls	r3, [pc, #8]	; (800a3e0 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3d8:	2002      	movhi	r0, #2
 800a3da:	5c18      	ldrbls	r0, [r3, r0]
}
 800a3dc:	bd08      	pop	{r3, pc}
 800a3de:	bf00      	nop
 800a3e0:	0800d3bc 	.word	0x0800d3bc

0800a3e4 <USBD_LL_PrepareReceive>:
{
 800a3e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3e6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a3ea:	f7fc ffa5 	bl	8007338 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800a3ee:	2803      	cmp	r0, #3
 800a3f0:	bf96      	itet	ls
 800a3f2:	4b02      	ldrls	r3, [pc, #8]	; (800a3fc <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3f4:	2002      	movhi	r0, #2
 800a3f6:	5c18      	ldrbls	r0, [r3, r0]
}
 800a3f8:	bd08      	pop	{r3, pc}
 800a3fa:	bf00      	nop
 800a3fc:	0800d3bc 	.word	0x0800d3bc

0800a400 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a400:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a404:	f7fc bfb0 	b.w	8007368 <HAL_PCD_EP_GetRxCount>

0800a408 <USBD_static_malloc>:
}
 800a408:	4800      	ldr	r0, [pc, #0]	; (800a40c <USBD_static_malloc+0x4>)
 800a40a:	4770      	bx	lr
 800a40c:	200017a0 	.word	0x200017a0

0800a410 <USBD_static_free>:
}
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop

0800a414 <__errno>:
 800a414:	4b01      	ldr	r3, [pc, #4]	; (800a41c <__errno+0x8>)
 800a416:	6818      	ldr	r0, [r3, #0]
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	200001a0 	.word	0x200001a0

0800a420 <__libc_init_array>:
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	2600      	movs	r6, #0
 800a424:	4d0c      	ldr	r5, [pc, #48]	; (800a458 <__libc_init_array+0x38>)
 800a426:	4c0d      	ldr	r4, [pc, #52]	; (800a45c <__libc_init_array+0x3c>)
 800a428:	1b64      	subs	r4, r4, r5
 800a42a:	10a4      	asrs	r4, r4, #2
 800a42c:	42a6      	cmp	r6, r4
 800a42e:	d109      	bne.n	800a444 <__libc_init_array+0x24>
 800a430:	f002 ff10 	bl	800d254 <_init>
 800a434:	2600      	movs	r6, #0
 800a436:	4d0a      	ldr	r5, [pc, #40]	; (800a460 <__libc_init_array+0x40>)
 800a438:	4c0a      	ldr	r4, [pc, #40]	; (800a464 <__libc_init_array+0x44>)
 800a43a:	1b64      	subs	r4, r4, r5
 800a43c:	10a4      	asrs	r4, r4, #2
 800a43e:	42a6      	cmp	r6, r4
 800a440:	d105      	bne.n	800a44e <__libc_init_array+0x2e>
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	f855 3b04 	ldr.w	r3, [r5], #4
 800a448:	4798      	blx	r3
 800a44a:	3601      	adds	r6, #1
 800a44c:	e7ee      	b.n	800a42c <__libc_init_array+0xc>
 800a44e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a452:	4798      	blx	r3
 800a454:	3601      	adds	r6, #1
 800a456:	e7f2      	b.n	800a43e <__libc_init_array+0x1e>
 800a458:	0800d7a4 	.word	0x0800d7a4
 800a45c:	0800d7a4 	.word	0x0800d7a4
 800a460:	0800d7a4 	.word	0x0800d7a4
 800a464:	0800d7a8 	.word	0x0800d7a8

0800a468 <memcpy>:
 800a468:	440a      	add	r2, r1
 800a46a:	4291      	cmp	r1, r2
 800a46c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a470:	d100      	bne.n	800a474 <memcpy+0xc>
 800a472:	4770      	bx	lr
 800a474:	b510      	push	{r4, lr}
 800a476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a47a:	4291      	cmp	r1, r2
 800a47c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a480:	d1f9      	bne.n	800a476 <memcpy+0xe>
 800a482:	bd10      	pop	{r4, pc}

0800a484 <memset>:
 800a484:	4603      	mov	r3, r0
 800a486:	4402      	add	r2, r0
 800a488:	4293      	cmp	r3, r2
 800a48a:	d100      	bne.n	800a48e <memset+0xa>
 800a48c:	4770      	bx	lr
 800a48e:	f803 1b01 	strb.w	r1, [r3], #1
 800a492:	e7f9      	b.n	800a488 <memset+0x4>

0800a494 <__cvt>:
 800a494:	2b00      	cmp	r3, #0
 800a496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a49a:	461f      	mov	r7, r3
 800a49c:	bfbb      	ittet	lt
 800a49e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a4a2:	461f      	movlt	r7, r3
 800a4a4:	2300      	movge	r3, #0
 800a4a6:	232d      	movlt	r3, #45	; 0x2d
 800a4a8:	b088      	sub	sp, #32
 800a4aa:	4614      	mov	r4, r2
 800a4ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a4b0:	7013      	strb	r3, [r2, #0]
 800a4b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a4b8:	f023 0820 	bic.w	r8, r3, #32
 800a4bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4c0:	d005      	beq.n	800a4ce <__cvt+0x3a>
 800a4c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4c6:	d100      	bne.n	800a4ca <__cvt+0x36>
 800a4c8:	3501      	adds	r5, #1
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	e000      	b.n	800a4d0 <__cvt+0x3c>
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	aa07      	add	r2, sp, #28
 800a4d2:	9204      	str	r2, [sp, #16]
 800a4d4:	aa06      	add	r2, sp, #24
 800a4d6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a4da:	e9cd 3500 	strd	r3, r5, [sp]
 800a4de:	4622      	mov	r2, r4
 800a4e0:	463b      	mov	r3, r7
 800a4e2:	f000 fcf9 	bl	800aed8 <_dtoa_r>
 800a4e6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	d102      	bne.n	800a4f4 <__cvt+0x60>
 800a4ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4f0:	07db      	lsls	r3, r3, #31
 800a4f2:	d522      	bpl.n	800a53a <__cvt+0xa6>
 800a4f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4f8:	eb06 0905 	add.w	r9, r6, r5
 800a4fc:	d110      	bne.n	800a520 <__cvt+0x8c>
 800a4fe:	7833      	ldrb	r3, [r6, #0]
 800a500:	2b30      	cmp	r3, #48	; 0x30
 800a502:	d10a      	bne.n	800a51a <__cvt+0x86>
 800a504:	2200      	movs	r2, #0
 800a506:	2300      	movs	r3, #0
 800a508:	4620      	mov	r0, r4
 800a50a:	4639      	mov	r1, r7
 800a50c:	f7f6 fa64 	bl	80009d8 <__aeabi_dcmpeq>
 800a510:	b918      	cbnz	r0, 800a51a <__cvt+0x86>
 800a512:	f1c5 0501 	rsb	r5, r5, #1
 800a516:	f8ca 5000 	str.w	r5, [sl]
 800a51a:	f8da 3000 	ldr.w	r3, [sl]
 800a51e:	4499      	add	r9, r3
 800a520:	2200      	movs	r2, #0
 800a522:	2300      	movs	r3, #0
 800a524:	4620      	mov	r0, r4
 800a526:	4639      	mov	r1, r7
 800a528:	f7f6 fa56 	bl	80009d8 <__aeabi_dcmpeq>
 800a52c:	b108      	cbz	r0, 800a532 <__cvt+0x9e>
 800a52e:	f8cd 901c 	str.w	r9, [sp, #28]
 800a532:	2230      	movs	r2, #48	; 0x30
 800a534:	9b07      	ldr	r3, [sp, #28]
 800a536:	454b      	cmp	r3, r9
 800a538:	d307      	bcc.n	800a54a <__cvt+0xb6>
 800a53a:	4630      	mov	r0, r6
 800a53c:	9b07      	ldr	r3, [sp, #28]
 800a53e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a540:	1b9b      	subs	r3, r3, r6
 800a542:	6013      	str	r3, [r2, #0]
 800a544:	b008      	add	sp, #32
 800a546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54a:	1c59      	adds	r1, r3, #1
 800a54c:	9107      	str	r1, [sp, #28]
 800a54e:	701a      	strb	r2, [r3, #0]
 800a550:	e7f0      	b.n	800a534 <__cvt+0xa0>

0800a552 <__exponent>:
 800a552:	4603      	mov	r3, r0
 800a554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a556:	2900      	cmp	r1, #0
 800a558:	f803 2b02 	strb.w	r2, [r3], #2
 800a55c:	bfb6      	itet	lt
 800a55e:	222d      	movlt	r2, #45	; 0x2d
 800a560:	222b      	movge	r2, #43	; 0x2b
 800a562:	4249      	neglt	r1, r1
 800a564:	2909      	cmp	r1, #9
 800a566:	7042      	strb	r2, [r0, #1]
 800a568:	dd2b      	ble.n	800a5c2 <__exponent+0x70>
 800a56a:	f10d 0407 	add.w	r4, sp, #7
 800a56e:	46a4      	mov	ip, r4
 800a570:	270a      	movs	r7, #10
 800a572:	fb91 f6f7 	sdiv	r6, r1, r7
 800a576:	460a      	mov	r2, r1
 800a578:	46a6      	mov	lr, r4
 800a57a:	fb07 1516 	mls	r5, r7, r6, r1
 800a57e:	2a63      	cmp	r2, #99	; 0x63
 800a580:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a584:	4631      	mov	r1, r6
 800a586:	f104 34ff 	add.w	r4, r4, #4294967295
 800a58a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a58e:	dcf0      	bgt.n	800a572 <__exponent+0x20>
 800a590:	3130      	adds	r1, #48	; 0x30
 800a592:	f1ae 0502 	sub.w	r5, lr, #2
 800a596:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a59a:	4629      	mov	r1, r5
 800a59c:	1c44      	adds	r4, r0, #1
 800a59e:	4561      	cmp	r1, ip
 800a5a0:	d30a      	bcc.n	800a5b8 <__exponent+0x66>
 800a5a2:	f10d 0209 	add.w	r2, sp, #9
 800a5a6:	eba2 020e 	sub.w	r2, r2, lr
 800a5aa:	4565      	cmp	r5, ip
 800a5ac:	bf88      	it	hi
 800a5ae:	2200      	movhi	r2, #0
 800a5b0:	4413      	add	r3, r2
 800a5b2:	1a18      	subs	r0, r3, r0
 800a5b4:	b003      	add	sp, #12
 800a5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5bc:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a5c0:	e7ed      	b.n	800a59e <__exponent+0x4c>
 800a5c2:	2330      	movs	r3, #48	; 0x30
 800a5c4:	3130      	adds	r1, #48	; 0x30
 800a5c6:	7083      	strb	r3, [r0, #2]
 800a5c8:	70c1      	strb	r1, [r0, #3]
 800a5ca:	1d03      	adds	r3, r0, #4
 800a5cc:	e7f1      	b.n	800a5b2 <__exponent+0x60>
	...

0800a5d0 <_printf_float>:
 800a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	b091      	sub	sp, #68	; 0x44
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a5dc:	4616      	mov	r6, r2
 800a5de:	461f      	mov	r7, r3
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	f001 fa67 	bl	800bab4 <_localeconv_r>
 800a5e6:	6803      	ldr	r3, [r0, #0]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ec:	f7f5 fdc8 	bl	8000180 <strlen>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	930e      	str	r3, [sp, #56]	; 0x38
 800a5f4:	f8d8 3000 	ldr.w	r3, [r8]
 800a5f8:	900a      	str	r0, [sp, #40]	; 0x28
 800a5fa:	3307      	adds	r3, #7
 800a5fc:	f023 0307 	bic.w	r3, r3, #7
 800a600:	f103 0208 	add.w	r2, r3, #8
 800a604:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a608:	f8d4 b000 	ldr.w	fp, [r4]
 800a60c:	f8c8 2000 	str.w	r2, [r8]
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a618:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a61c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a620:	930b      	str	r3, [sp, #44]	; 0x2c
 800a622:	f04f 32ff 	mov.w	r2, #4294967295
 800a626:	4640      	mov	r0, r8
 800a628:	4b9c      	ldr	r3, [pc, #624]	; (800a89c <_printf_float+0x2cc>)
 800a62a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a62c:	f7f6 fa06 	bl	8000a3c <__aeabi_dcmpun>
 800a630:	bb70      	cbnz	r0, 800a690 <_printf_float+0xc0>
 800a632:	f04f 32ff 	mov.w	r2, #4294967295
 800a636:	4640      	mov	r0, r8
 800a638:	4b98      	ldr	r3, [pc, #608]	; (800a89c <_printf_float+0x2cc>)
 800a63a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a63c:	f7f6 f9e0 	bl	8000a00 <__aeabi_dcmple>
 800a640:	bb30      	cbnz	r0, 800a690 <_printf_float+0xc0>
 800a642:	2200      	movs	r2, #0
 800a644:	2300      	movs	r3, #0
 800a646:	4640      	mov	r0, r8
 800a648:	4651      	mov	r1, sl
 800a64a:	f7f6 f9cf 	bl	80009ec <__aeabi_dcmplt>
 800a64e:	b110      	cbz	r0, 800a656 <_printf_float+0x86>
 800a650:	232d      	movs	r3, #45	; 0x2d
 800a652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a656:	4b92      	ldr	r3, [pc, #584]	; (800a8a0 <_printf_float+0x2d0>)
 800a658:	4892      	ldr	r0, [pc, #584]	; (800a8a4 <_printf_float+0x2d4>)
 800a65a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a65e:	bf94      	ite	ls
 800a660:	4698      	movls	r8, r3
 800a662:	4680      	movhi	r8, r0
 800a664:	2303      	movs	r3, #3
 800a666:	f04f 0a00 	mov.w	sl, #0
 800a66a:	6123      	str	r3, [r4, #16]
 800a66c:	f02b 0304 	bic.w	r3, fp, #4
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	4633      	mov	r3, r6
 800a674:	4621      	mov	r1, r4
 800a676:	4628      	mov	r0, r5
 800a678:	9700      	str	r7, [sp, #0]
 800a67a:	aa0f      	add	r2, sp, #60	; 0x3c
 800a67c:	f000 f9d4 	bl	800aa28 <_printf_common>
 800a680:	3001      	adds	r0, #1
 800a682:	f040 8090 	bne.w	800a7a6 <_printf_float+0x1d6>
 800a686:	f04f 30ff 	mov.w	r0, #4294967295
 800a68a:	b011      	add	sp, #68	; 0x44
 800a68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a690:	4642      	mov	r2, r8
 800a692:	4653      	mov	r3, sl
 800a694:	4640      	mov	r0, r8
 800a696:	4651      	mov	r1, sl
 800a698:	f7f6 f9d0 	bl	8000a3c <__aeabi_dcmpun>
 800a69c:	b148      	cbz	r0, 800a6b2 <_printf_float+0xe2>
 800a69e:	f1ba 0f00 	cmp.w	sl, #0
 800a6a2:	bfb8      	it	lt
 800a6a4:	232d      	movlt	r3, #45	; 0x2d
 800a6a6:	4880      	ldr	r0, [pc, #512]	; (800a8a8 <_printf_float+0x2d8>)
 800a6a8:	bfb8      	it	lt
 800a6aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a6ae:	4b7f      	ldr	r3, [pc, #508]	; (800a8ac <_printf_float+0x2dc>)
 800a6b0:	e7d3      	b.n	800a65a <_printf_float+0x8a>
 800a6b2:	6863      	ldr	r3, [r4, #4]
 800a6b4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	d142      	bne.n	800a742 <_printf_float+0x172>
 800a6bc:	2306      	movs	r3, #6
 800a6be:	6063      	str	r3, [r4, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	9206      	str	r2, [sp, #24]
 800a6c4:	aa0e      	add	r2, sp, #56	; 0x38
 800a6c6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a6ca:	aa0d      	add	r2, sp, #52	; 0x34
 800a6cc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a6d0:	9203      	str	r2, [sp, #12]
 800a6d2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a6d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a6da:	6023      	str	r3, [r4, #0]
 800a6dc:	6863      	ldr	r3, [r4, #4]
 800a6de:	4642      	mov	r2, r8
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	4653      	mov	r3, sl
 800a6e6:	910b      	str	r1, [sp, #44]	; 0x2c
 800a6e8:	f7ff fed4 	bl	800a494 <__cvt>
 800a6ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6ee:	4680      	mov	r8, r0
 800a6f0:	2947      	cmp	r1, #71	; 0x47
 800a6f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a6f4:	d108      	bne.n	800a708 <_printf_float+0x138>
 800a6f6:	1cc8      	adds	r0, r1, #3
 800a6f8:	db02      	blt.n	800a700 <_printf_float+0x130>
 800a6fa:	6863      	ldr	r3, [r4, #4]
 800a6fc:	4299      	cmp	r1, r3
 800a6fe:	dd40      	ble.n	800a782 <_printf_float+0x1b2>
 800a700:	f1a9 0902 	sub.w	r9, r9, #2
 800a704:	fa5f f989 	uxtb.w	r9, r9
 800a708:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a70c:	d81f      	bhi.n	800a74e <_printf_float+0x17e>
 800a70e:	464a      	mov	r2, r9
 800a710:	3901      	subs	r1, #1
 800a712:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a716:	910d      	str	r1, [sp, #52]	; 0x34
 800a718:	f7ff ff1b 	bl	800a552 <__exponent>
 800a71c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a71e:	4682      	mov	sl, r0
 800a720:	1813      	adds	r3, r2, r0
 800a722:	2a01      	cmp	r2, #1
 800a724:	6123      	str	r3, [r4, #16]
 800a726:	dc02      	bgt.n	800a72e <_printf_float+0x15e>
 800a728:	6822      	ldr	r2, [r4, #0]
 800a72a:	07d2      	lsls	r2, r2, #31
 800a72c:	d501      	bpl.n	800a732 <_printf_float+0x162>
 800a72e:	3301      	adds	r3, #1
 800a730:	6123      	str	r3, [r4, #16]
 800a732:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a736:	2b00      	cmp	r3, #0
 800a738:	d09b      	beq.n	800a672 <_printf_float+0xa2>
 800a73a:	232d      	movs	r3, #45	; 0x2d
 800a73c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a740:	e797      	b.n	800a672 <_printf_float+0xa2>
 800a742:	2947      	cmp	r1, #71	; 0x47
 800a744:	d1bc      	bne.n	800a6c0 <_printf_float+0xf0>
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1ba      	bne.n	800a6c0 <_printf_float+0xf0>
 800a74a:	2301      	movs	r3, #1
 800a74c:	e7b7      	b.n	800a6be <_printf_float+0xee>
 800a74e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a752:	d118      	bne.n	800a786 <_printf_float+0x1b6>
 800a754:	2900      	cmp	r1, #0
 800a756:	6863      	ldr	r3, [r4, #4]
 800a758:	dd0b      	ble.n	800a772 <_printf_float+0x1a2>
 800a75a:	6121      	str	r1, [r4, #16]
 800a75c:	b913      	cbnz	r3, 800a764 <_printf_float+0x194>
 800a75e:	6822      	ldr	r2, [r4, #0]
 800a760:	07d0      	lsls	r0, r2, #31
 800a762:	d502      	bpl.n	800a76a <_printf_float+0x19a>
 800a764:	3301      	adds	r3, #1
 800a766:	440b      	add	r3, r1
 800a768:	6123      	str	r3, [r4, #16]
 800a76a:	f04f 0a00 	mov.w	sl, #0
 800a76e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a770:	e7df      	b.n	800a732 <_printf_float+0x162>
 800a772:	b913      	cbnz	r3, 800a77a <_printf_float+0x1aa>
 800a774:	6822      	ldr	r2, [r4, #0]
 800a776:	07d2      	lsls	r2, r2, #31
 800a778:	d501      	bpl.n	800a77e <_printf_float+0x1ae>
 800a77a:	3302      	adds	r3, #2
 800a77c:	e7f4      	b.n	800a768 <_printf_float+0x198>
 800a77e:	2301      	movs	r3, #1
 800a780:	e7f2      	b.n	800a768 <_printf_float+0x198>
 800a782:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a788:	4299      	cmp	r1, r3
 800a78a:	db05      	blt.n	800a798 <_printf_float+0x1c8>
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	6121      	str	r1, [r4, #16]
 800a790:	07d8      	lsls	r0, r3, #31
 800a792:	d5ea      	bpl.n	800a76a <_printf_float+0x19a>
 800a794:	1c4b      	adds	r3, r1, #1
 800a796:	e7e7      	b.n	800a768 <_printf_float+0x198>
 800a798:	2900      	cmp	r1, #0
 800a79a:	bfcc      	ite	gt
 800a79c:	2201      	movgt	r2, #1
 800a79e:	f1c1 0202 	rsble	r2, r1, #2
 800a7a2:	4413      	add	r3, r2
 800a7a4:	e7e0      	b.n	800a768 <_printf_float+0x198>
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	055a      	lsls	r2, r3, #21
 800a7aa:	d407      	bmi.n	800a7bc <_printf_float+0x1ec>
 800a7ac:	6923      	ldr	r3, [r4, #16]
 800a7ae:	4642      	mov	r2, r8
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	47b8      	blx	r7
 800a7b6:	3001      	adds	r0, #1
 800a7b8:	d12b      	bne.n	800a812 <_printf_float+0x242>
 800a7ba:	e764      	b.n	800a686 <_printf_float+0xb6>
 800a7bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a7c0:	f240 80dd 	bls.w	800a97e <_printf_float+0x3ae>
 800a7c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f7f6 f904 	bl	80009d8 <__aeabi_dcmpeq>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d033      	beq.n	800a83c <_printf_float+0x26c>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	4631      	mov	r1, r6
 800a7d8:	4628      	mov	r0, r5
 800a7da:	4a35      	ldr	r2, [pc, #212]	; (800a8b0 <_printf_float+0x2e0>)
 800a7dc:	47b8      	blx	r7
 800a7de:	3001      	adds	r0, #1
 800a7e0:	f43f af51 	beq.w	800a686 <_printf_float+0xb6>
 800a7e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	db02      	blt.n	800a7f2 <_printf_float+0x222>
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	07d8      	lsls	r0, r3, #31
 800a7f0:	d50f      	bpl.n	800a812 <_printf_float+0x242>
 800a7f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	47b8      	blx	r7
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	f43f af42 	beq.w	800a686 <_printf_float+0xb6>
 800a802:	f04f 0800 	mov.w	r8, #0
 800a806:	f104 091a 	add.w	r9, r4, #26
 800a80a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a80c:	3b01      	subs	r3, #1
 800a80e:	4543      	cmp	r3, r8
 800a810:	dc09      	bgt.n	800a826 <_printf_float+0x256>
 800a812:	6823      	ldr	r3, [r4, #0]
 800a814:	079b      	lsls	r3, r3, #30
 800a816:	f100 8102 	bmi.w	800aa1e <_printf_float+0x44e>
 800a81a:	68e0      	ldr	r0, [r4, #12]
 800a81c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a81e:	4298      	cmp	r0, r3
 800a820:	bfb8      	it	lt
 800a822:	4618      	movlt	r0, r3
 800a824:	e731      	b.n	800a68a <_printf_float+0xba>
 800a826:	2301      	movs	r3, #1
 800a828:	464a      	mov	r2, r9
 800a82a:	4631      	mov	r1, r6
 800a82c:	4628      	mov	r0, r5
 800a82e:	47b8      	blx	r7
 800a830:	3001      	adds	r0, #1
 800a832:	f43f af28 	beq.w	800a686 <_printf_float+0xb6>
 800a836:	f108 0801 	add.w	r8, r8, #1
 800a83a:	e7e6      	b.n	800a80a <_printf_float+0x23a>
 800a83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a83e:	2b00      	cmp	r3, #0
 800a840:	dc38      	bgt.n	800a8b4 <_printf_float+0x2e4>
 800a842:	2301      	movs	r3, #1
 800a844:	4631      	mov	r1, r6
 800a846:	4628      	mov	r0, r5
 800a848:	4a19      	ldr	r2, [pc, #100]	; (800a8b0 <_printf_float+0x2e0>)
 800a84a:	47b8      	blx	r7
 800a84c:	3001      	adds	r0, #1
 800a84e:	f43f af1a 	beq.w	800a686 <_printf_float+0xb6>
 800a852:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a856:	4313      	orrs	r3, r2
 800a858:	d102      	bne.n	800a860 <_printf_float+0x290>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	07d9      	lsls	r1, r3, #31
 800a85e:	d5d8      	bpl.n	800a812 <_printf_float+0x242>
 800a860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a864:	4631      	mov	r1, r6
 800a866:	4628      	mov	r0, r5
 800a868:	47b8      	blx	r7
 800a86a:	3001      	adds	r0, #1
 800a86c:	f43f af0b 	beq.w	800a686 <_printf_float+0xb6>
 800a870:	f04f 0900 	mov.w	r9, #0
 800a874:	f104 0a1a 	add.w	sl, r4, #26
 800a878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a87a:	425b      	negs	r3, r3
 800a87c:	454b      	cmp	r3, r9
 800a87e:	dc01      	bgt.n	800a884 <_printf_float+0x2b4>
 800a880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a882:	e794      	b.n	800a7ae <_printf_float+0x1de>
 800a884:	2301      	movs	r3, #1
 800a886:	4652      	mov	r2, sl
 800a888:	4631      	mov	r1, r6
 800a88a:	4628      	mov	r0, r5
 800a88c:	47b8      	blx	r7
 800a88e:	3001      	adds	r0, #1
 800a890:	f43f aef9 	beq.w	800a686 <_printf_float+0xb6>
 800a894:	f109 0901 	add.w	r9, r9, #1
 800a898:	e7ee      	b.n	800a878 <_printf_float+0x2a8>
 800a89a:	bf00      	nop
 800a89c:	7fefffff 	.word	0x7fefffff
 800a8a0:	0800d3c4 	.word	0x0800d3c4
 800a8a4:	0800d3c8 	.word	0x0800d3c8
 800a8a8:	0800d3d0 	.word	0x0800d3d0
 800a8ac:	0800d3cc 	.word	0x0800d3cc
 800a8b0:	0800d3d4 	.word	0x0800d3d4
 800a8b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	bfa8      	it	ge
 800a8bc:	461a      	movge	r2, r3
 800a8be:	2a00      	cmp	r2, #0
 800a8c0:	4691      	mov	r9, r2
 800a8c2:	dc37      	bgt.n	800a934 <_printf_float+0x364>
 800a8c4:	f04f 0b00 	mov.w	fp, #0
 800a8c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8cc:	f104 021a 	add.w	r2, r4, #26
 800a8d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a8d4:	ebaa 0309 	sub.w	r3, sl, r9
 800a8d8:	455b      	cmp	r3, fp
 800a8da:	dc33      	bgt.n	800a944 <_printf_float+0x374>
 800a8dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	db3b      	blt.n	800a95c <_printf_float+0x38c>
 800a8e4:	6823      	ldr	r3, [r4, #0]
 800a8e6:	07da      	lsls	r2, r3, #31
 800a8e8:	d438      	bmi.n	800a95c <_printf_float+0x38c>
 800a8ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a8ee:	eba3 020a 	sub.w	r2, r3, sl
 800a8f2:	eba3 0901 	sub.w	r9, r3, r1
 800a8f6:	4591      	cmp	r9, r2
 800a8f8:	bfa8      	it	ge
 800a8fa:	4691      	movge	r9, r2
 800a8fc:	f1b9 0f00 	cmp.w	r9, #0
 800a900:	dc34      	bgt.n	800a96c <_printf_float+0x39c>
 800a902:	f04f 0800 	mov.w	r8, #0
 800a906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a90a:	f104 0a1a 	add.w	sl, r4, #26
 800a90e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a912:	1a9b      	subs	r3, r3, r2
 800a914:	eba3 0309 	sub.w	r3, r3, r9
 800a918:	4543      	cmp	r3, r8
 800a91a:	f77f af7a 	ble.w	800a812 <_printf_float+0x242>
 800a91e:	2301      	movs	r3, #1
 800a920:	4652      	mov	r2, sl
 800a922:	4631      	mov	r1, r6
 800a924:	4628      	mov	r0, r5
 800a926:	47b8      	blx	r7
 800a928:	3001      	adds	r0, #1
 800a92a:	f43f aeac 	beq.w	800a686 <_printf_float+0xb6>
 800a92e:	f108 0801 	add.w	r8, r8, #1
 800a932:	e7ec      	b.n	800a90e <_printf_float+0x33e>
 800a934:	4613      	mov	r3, r2
 800a936:	4631      	mov	r1, r6
 800a938:	4642      	mov	r2, r8
 800a93a:	4628      	mov	r0, r5
 800a93c:	47b8      	blx	r7
 800a93e:	3001      	adds	r0, #1
 800a940:	d1c0      	bne.n	800a8c4 <_printf_float+0x2f4>
 800a942:	e6a0      	b.n	800a686 <_printf_float+0xb6>
 800a944:	2301      	movs	r3, #1
 800a946:	4631      	mov	r1, r6
 800a948:	4628      	mov	r0, r5
 800a94a:	920b      	str	r2, [sp, #44]	; 0x2c
 800a94c:	47b8      	blx	r7
 800a94e:	3001      	adds	r0, #1
 800a950:	f43f ae99 	beq.w	800a686 <_printf_float+0xb6>
 800a954:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a956:	f10b 0b01 	add.w	fp, fp, #1
 800a95a:	e7b9      	b.n	800a8d0 <_printf_float+0x300>
 800a95c:	4631      	mov	r1, r6
 800a95e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a962:	4628      	mov	r0, r5
 800a964:	47b8      	blx	r7
 800a966:	3001      	adds	r0, #1
 800a968:	d1bf      	bne.n	800a8ea <_printf_float+0x31a>
 800a96a:	e68c      	b.n	800a686 <_printf_float+0xb6>
 800a96c:	464b      	mov	r3, r9
 800a96e:	4631      	mov	r1, r6
 800a970:	4628      	mov	r0, r5
 800a972:	eb08 020a 	add.w	r2, r8, sl
 800a976:	47b8      	blx	r7
 800a978:	3001      	adds	r0, #1
 800a97a:	d1c2      	bne.n	800a902 <_printf_float+0x332>
 800a97c:	e683      	b.n	800a686 <_printf_float+0xb6>
 800a97e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a980:	2a01      	cmp	r2, #1
 800a982:	dc01      	bgt.n	800a988 <_printf_float+0x3b8>
 800a984:	07db      	lsls	r3, r3, #31
 800a986:	d537      	bpl.n	800a9f8 <_printf_float+0x428>
 800a988:	2301      	movs	r3, #1
 800a98a:	4642      	mov	r2, r8
 800a98c:	4631      	mov	r1, r6
 800a98e:	4628      	mov	r0, r5
 800a990:	47b8      	blx	r7
 800a992:	3001      	adds	r0, #1
 800a994:	f43f ae77 	beq.w	800a686 <_printf_float+0xb6>
 800a998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a99c:	4631      	mov	r1, r6
 800a99e:	4628      	mov	r0, r5
 800a9a0:	47b8      	blx	r7
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	f43f ae6f 	beq.w	800a686 <_printf_float+0xb6>
 800a9a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f7f6 f812 	bl	80009d8 <__aeabi_dcmpeq>
 800a9b4:	b9d8      	cbnz	r0, 800a9ee <_printf_float+0x41e>
 800a9b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9b8:	f108 0201 	add.w	r2, r8, #1
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	4631      	mov	r1, r6
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	47b8      	blx	r7
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	d10e      	bne.n	800a9e6 <_printf_float+0x416>
 800a9c8:	e65d      	b.n	800a686 <_printf_float+0xb6>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	464a      	mov	r2, r9
 800a9ce:	4631      	mov	r1, r6
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	47b8      	blx	r7
 800a9d4:	3001      	adds	r0, #1
 800a9d6:	f43f ae56 	beq.w	800a686 <_printf_float+0xb6>
 800a9da:	f108 0801 	add.w	r8, r8, #1
 800a9de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	4543      	cmp	r3, r8
 800a9e4:	dcf1      	bgt.n	800a9ca <_printf_float+0x3fa>
 800a9e6:	4653      	mov	r3, sl
 800a9e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9ec:	e6e0      	b.n	800a7b0 <_printf_float+0x1e0>
 800a9ee:	f04f 0800 	mov.w	r8, #0
 800a9f2:	f104 091a 	add.w	r9, r4, #26
 800a9f6:	e7f2      	b.n	800a9de <_printf_float+0x40e>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	4642      	mov	r2, r8
 800a9fc:	e7df      	b.n	800a9be <_printf_float+0x3ee>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	464a      	mov	r2, r9
 800aa02:	4631      	mov	r1, r6
 800aa04:	4628      	mov	r0, r5
 800aa06:	47b8      	blx	r7
 800aa08:	3001      	adds	r0, #1
 800aa0a:	f43f ae3c 	beq.w	800a686 <_printf_float+0xb6>
 800aa0e:	f108 0801 	add.w	r8, r8, #1
 800aa12:	68e3      	ldr	r3, [r4, #12]
 800aa14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aa16:	1a5b      	subs	r3, r3, r1
 800aa18:	4543      	cmp	r3, r8
 800aa1a:	dcf0      	bgt.n	800a9fe <_printf_float+0x42e>
 800aa1c:	e6fd      	b.n	800a81a <_printf_float+0x24a>
 800aa1e:	f04f 0800 	mov.w	r8, #0
 800aa22:	f104 0919 	add.w	r9, r4, #25
 800aa26:	e7f4      	b.n	800aa12 <_printf_float+0x442>

0800aa28 <_printf_common>:
 800aa28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa2c:	4616      	mov	r6, r2
 800aa2e:	4699      	mov	r9, r3
 800aa30:	688a      	ldr	r2, [r1, #8]
 800aa32:	690b      	ldr	r3, [r1, #16]
 800aa34:	4607      	mov	r7, r0
 800aa36:	4293      	cmp	r3, r2
 800aa38:	bfb8      	it	lt
 800aa3a:	4613      	movlt	r3, r2
 800aa3c:	6033      	str	r3, [r6, #0]
 800aa3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa42:	460c      	mov	r4, r1
 800aa44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa48:	b10a      	cbz	r2, 800aa4e <_printf_common+0x26>
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	6033      	str	r3, [r6, #0]
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	0699      	lsls	r1, r3, #26
 800aa52:	bf42      	ittt	mi
 800aa54:	6833      	ldrmi	r3, [r6, #0]
 800aa56:	3302      	addmi	r3, #2
 800aa58:	6033      	strmi	r3, [r6, #0]
 800aa5a:	6825      	ldr	r5, [r4, #0]
 800aa5c:	f015 0506 	ands.w	r5, r5, #6
 800aa60:	d106      	bne.n	800aa70 <_printf_common+0x48>
 800aa62:	f104 0a19 	add.w	sl, r4, #25
 800aa66:	68e3      	ldr	r3, [r4, #12]
 800aa68:	6832      	ldr	r2, [r6, #0]
 800aa6a:	1a9b      	subs	r3, r3, r2
 800aa6c:	42ab      	cmp	r3, r5
 800aa6e:	dc28      	bgt.n	800aac2 <_printf_common+0x9a>
 800aa70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa74:	1e13      	subs	r3, r2, #0
 800aa76:	6822      	ldr	r2, [r4, #0]
 800aa78:	bf18      	it	ne
 800aa7a:	2301      	movne	r3, #1
 800aa7c:	0692      	lsls	r2, r2, #26
 800aa7e:	d42d      	bmi.n	800aadc <_printf_common+0xb4>
 800aa80:	4649      	mov	r1, r9
 800aa82:	4638      	mov	r0, r7
 800aa84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa88:	47c0      	blx	r8
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	d020      	beq.n	800aad0 <_printf_common+0xa8>
 800aa8e:	6823      	ldr	r3, [r4, #0]
 800aa90:	68e5      	ldr	r5, [r4, #12]
 800aa92:	f003 0306 	and.w	r3, r3, #6
 800aa96:	2b04      	cmp	r3, #4
 800aa98:	bf18      	it	ne
 800aa9a:	2500      	movne	r5, #0
 800aa9c:	6832      	ldr	r2, [r6, #0]
 800aa9e:	f04f 0600 	mov.w	r6, #0
 800aaa2:	68a3      	ldr	r3, [r4, #8]
 800aaa4:	bf08      	it	eq
 800aaa6:	1aad      	subeq	r5, r5, r2
 800aaa8:	6922      	ldr	r2, [r4, #16]
 800aaaa:	bf08      	it	eq
 800aaac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aab0:	4293      	cmp	r3, r2
 800aab2:	bfc4      	itt	gt
 800aab4:	1a9b      	subgt	r3, r3, r2
 800aab6:	18ed      	addgt	r5, r5, r3
 800aab8:	341a      	adds	r4, #26
 800aaba:	42b5      	cmp	r5, r6
 800aabc:	d11a      	bne.n	800aaf4 <_printf_common+0xcc>
 800aabe:	2000      	movs	r0, #0
 800aac0:	e008      	b.n	800aad4 <_printf_common+0xac>
 800aac2:	2301      	movs	r3, #1
 800aac4:	4652      	mov	r2, sl
 800aac6:	4649      	mov	r1, r9
 800aac8:	4638      	mov	r0, r7
 800aaca:	47c0      	blx	r8
 800aacc:	3001      	adds	r0, #1
 800aace:	d103      	bne.n	800aad8 <_printf_common+0xb0>
 800aad0:	f04f 30ff 	mov.w	r0, #4294967295
 800aad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad8:	3501      	adds	r5, #1
 800aada:	e7c4      	b.n	800aa66 <_printf_common+0x3e>
 800aadc:	2030      	movs	r0, #48	; 0x30
 800aade:	18e1      	adds	r1, r4, r3
 800aae0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aae4:	1c5a      	adds	r2, r3, #1
 800aae6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaea:	4422      	add	r2, r4
 800aaec:	3302      	adds	r3, #2
 800aaee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaf2:	e7c5      	b.n	800aa80 <_printf_common+0x58>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	4622      	mov	r2, r4
 800aaf8:	4649      	mov	r1, r9
 800aafa:	4638      	mov	r0, r7
 800aafc:	47c0      	blx	r8
 800aafe:	3001      	adds	r0, #1
 800ab00:	d0e6      	beq.n	800aad0 <_printf_common+0xa8>
 800ab02:	3601      	adds	r6, #1
 800ab04:	e7d9      	b.n	800aaba <_printf_common+0x92>
	...

0800ab08 <_printf_i>:
 800ab08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab0c:	7e0f      	ldrb	r7, [r1, #24]
 800ab0e:	4691      	mov	r9, r2
 800ab10:	2f78      	cmp	r7, #120	; 0x78
 800ab12:	4680      	mov	r8, r0
 800ab14:	460c      	mov	r4, r1
 800ab16:	469a      	mov	sl, r3
 800ab18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab1e:	d807      	bhi.n	800ab30 <_printf_i+0x28>
 800ab20:	2f62      	cmp	r7, #98	; 0x62
 800ab22:	d80a      	bhi.n	800ab3a <_printf_i+0x32>
 800ab24:	2f00      	cmp	r7, #0
 800ab26:	f000 80d9 	beq.w	800acdc <_printf_i+0x1d4>
 800ab2a:	2f58      	cmp	r7, #88	; 0x58
 800ab2c:	f000 80a4 	beq.w	800ac78 <_printf_i+0x170>
 800ab30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab38:	e03a      	b.n	800abb0 <_printf_i+0xa8>
 800ab3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab3e:	2b15      	cmp	r3, #21
 800ab40:	d8f6      	bhi.n	800ab30 <_printf_i+0x28>
 800ab42:	a101      	add	r1, pc, #4	; (adr r1, 800ab48 <_printf_i+0x40>)
 800ab44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab48:	0800aba1 	.word	0x0800aba1
 800ab4c:	0800abb5 	.word	0x0800abb5
 800ab50:	0800ab31 	.word	0x0800ab31
 800ab54:	0800ab31 	.word	0x0800ab31
 800ab58:	0800ab31 	.word	0x0800ab31
 800ab5c:	0800ab31 	.word	0x0800ab31
 800ab60:	0800abb5 	.word	0x0800abb5
 800ab64:	0800ab31 	.word	0x0800ab31
 800ab68:	0800ab31 	.word	0x0800ab31
 800ab6c:	0800ab31 	.word	0x0800ab31
 800ab70:	0800ab31 	.word	0x0800ab31
 800ab74:	0800acc3 	.word	0x0800acc3
 800ab78:	0800abe5 	.word	0x0800abe5
 800ab7c:	0800aca5 	.word	0x0800aca5
 800ab80:	0800ab31 	.word	0x0800ab31
 800ab84:	0800ab31 	.word	0x0800ab31
 800ab88:	0800ace5 	.word	0x0800ace5
 800ab8c:	0800ab31 	.word	0x0800ab31
 800ab90:	0800abe5 	.word	0x0800abe5
 800ab94:	0800ab31 	.word	0x0800ab31
 800ab98:	0800ab31 	.word	0x0800ab31
 800ab9c:	0800acad 	.word	0x0800acad
 800aba0:	682b      	ldr	r3, [r5, #0]
 800aba2:	1d1a      	adds	r2, r3, #4
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	602a      	str	r2, [r5, #0]
 800aba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abb0:	2301      	movs	r3, #1
 800abb2:	e0a4      	b.n	800acfe <_printf_i+0x1f6>
 800abb4:	6820      	ldr	r0, [r4, #0]
 800abb6:	6829      	ldr	r1, [r5, #0]
 800abb8:	0606      	lsls	r6, r0, #24
 800abba:	f101 0304 	add.w	r3, r1, #4
 800abbe:	d50a      	bpl.n	800abd6 <_printf_i+0xce>
 800abc0:	680e      	ldr	r6, [r1, #0]
 800abc2:	602b      	str	r3, [r5, #0]
 800abc4:	2e00      	cmp	r6, #0
 800abc6:	da03      	bge.n	800abd0 <_printf_i+0xc8>
 800abc8:	232d      	movs	r3, #45	; 0x2d
 800abca:	4276      	negs	r6, r6
 800abcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd0:	230a      	movs	r3, #10
 800abd2:	485e      	ldr	r0, [pc, #376]	; (800ad4c <_printf_i+0x244>)
 800abd4:	e019      	b.n	800ac0a <_printf_i+0x102>
 800abd6:	680e      	ldr	r6, [r1, #0]
 800abd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abdc:	602b      	str	r3, [r5, #0]
 800abde:	bf18      	it	ne
 800abe0:	b236      	sxthne	r6, r6
 800abe2:	e7ef      	b.n	800abc4 <_printf_i+0xbc>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	6820      	ldr	r0, [r4, #0]
 800abe8:	1d19      	adds	r1, r3, #4
 800abea:	6029      	str	r1, [r5, #0]
 800abec:	0601      	lsls	r1, r0, #24
 800abee:	d501      	bpl.n	800abf4 <_printf_i+0xec>
 800abf0:	681e      	ldr	r6, [r3, #0]
 800abf2:	e002      	b.n	800abfa <_printf_i+0xf2>
 800abf4:	0646      	lsls	r6, r0, #25
 800abf6:	d5fb      	bpl.n	800abf0 <_printf_i+0xe8>
 800abf8:	881e      	ldrh	r6, [r3, #0]
 800abfa:	2f6f      	cmp	r7, #111	; 0x6f
 800abfc:	bf0c      	ite	eq
 800abfe:	2308      	moveq	r3, #8
 800ac00:	230a      	movne	r3, #10
 800ac02:	4852      	ldr	r0, [pc, #328]	; (800ad4c <_printf_i+0x244>)
 800ac04:	2100      	movs	r1, #0
 800ac06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac0a:	6865      	ldr	r5, [r4, #4]
 800ac0c:	2d00      	cmp	r5, #0
 800ac0e:	bfa8      	it	ge
 800ac10:	6821      	ldrge	r1, [r4, #0]
 800ac12:	60a5      	str	r5, [r4, #8]
 800ac14:	bfa4      	itt	ge
 800ac16:	f021 0104 	bicge.w	r1, r1, #4
 800ac1a:	6021      	strge	r1, [r4, #0]
 800ac1c:	b90e      	cbnz	r6, 800ac22 <_printf_i+0x11a>
 800ac1e:	2d00      	cmp	r5, #0
 800ac20:	d04d      	beq.n	800acbe <_printf_i+0x1b6>
 800ac22:	4615      	mov	r5, r2
 800ac24:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac28:	fb03 6711 	mls	r7, r3, r1, r6
 800ac2c:	5dc7      	ldrb	r7, [r0, r7]
 800ac2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac32:	4637      	mov	r7, r6
 800ac34:	42bb      	cmp	r3, r7
 800ac36:	460e      	mov	r6, r1
 800ac38:	d9f4      	bls.n	800ac24 <_printf_i+0x11c>
 800ac3a:	2b08      	cmp	r3, #8
 800ac3c:	d10b      	bne.n	800ac56 <_printf_i+0x14e>
 800ac3e:	6823      	ldr	r3, [r4, #0]
 800ac40:	07de      	lsls	r6, r3, #31
 800ac42:	d508      	bpl.n	800ac56 <_printf_i+0x14e>
 800ac44:	6923      	ldr	r3, [r4, #16]
 800ac46:	6861      	ldr	r1, [r4, #4]
 800ac48:	4299      	cmp	r1, r3
 800ac4a:	bfde      	ittt	le
 800ac4c:	2330      	movle	r3, #48	; 0x30
 800ac4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac52:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac56:	1b52      	subs	r2, r2, r5
 800ac58:	6122      	str	r2, [r4, #16]
 800ac5a:	464b      	mov	r3, r9
 800ac5c:	4621      	mov	r1, r4
 800ac5e:	4640      	mov	r0, r8
 800ac60:	f8cd a000 	str.w	sl, [sp]
 800ac64:	aa03      	add	r2, sp, #12
 800ac66:	f7ff fedf 	bl	800aa28 <_printf_common>
 800ac6a:	3001      	adds	r0, #1
 800ac6c:	d14c      	bne.n	800ad08 <_printf_i+0x200>
 800ac6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac72:	b004      	add	sp, #16
 800ac74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac78:	4834      	ldr	r0, [pc, #208]	; (800ad4c <_printf_i+0x244>)
 800ac7a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac7e:	6829      	ldr	r1, [r5, #0]
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac86:	6029      	str	r1, [r5, #0]
 800ac88:	061d      	lsls	r5, r3, #24
 800ac8a:	d514      	bpl.n	800acb6 <_printf_i+0x1ae>
 800ac8c:	07df      	lsls	r7, r3, #31
 800ac8e:	bf44      	itt	mi
 800ac90:	f043 0320 	orrmi.w	r3, r3, #32
 800ac94:	6023      	strmi	r3, [r4, #0]
 800ac96:	b91e      	cbnz	r6, 800aca0 <_printf_i+0x198>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	f023 0320 	bic.w	r3, r3, #32
 800ac9e:	6023      	str	r3, [r4, #0]
 800aca0:	2310      	movs	r3, #16
 800aca2:	e7af      	b.n	800ac04 <_printf_i+0xfc>
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	f043 0320 	orr.w	r3, r3, #32
 800acaa:	6023      	str	r3, [r4, #0]
 800acac:	2378      	movs	r3, #120	; 0x78
 800acae:	4828      	ldr	r0, [pc, #160]	; (800ad50 <_printf_i+0x248>)
 800acb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acb4:	e7e3      	b.n	800ac7e <_printf_i+0x176>
 800acb6:	0659      	lsls	r1, r3, #25
 800acb8:	bf48      	it	mi
 800acba:	b2b6      	uxthmi	r6, r6
 800acbc:	e7e6      	b.n	800ac8c <_printf_i+0x184>
 800acbe:	4615      	mov	r5, r2
 800acc0:	e7bb      	b.n	800ac3a <_printf_i+0x132>
 800acc2:	682b      	ldr	r3, [r5, #0]
 800acc4:	6826      	ldr	r6, [r4, #0]
 800acc6:	1d18      	adds	r0, r3, #4
 800acc8:	6961      	ldr	r1, [r4, #20]
 800acca:	6028      	str	r0, [r5, #0]
 800accc:	0635      	lsls	r5, r6, #24
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	d501      	bpl.n	800acd6 <_printf_i+0x1ce>
 800acd2:	6019      	str	r1, [r3, #0]
 800acd4:	e002      	b.n	800acdc <_printf_i+0x1d4>
 800acd6:	0670      	lsls	r0, r6, #25
 800acd8:	d5fb      	bpl.n	800acd2 <_printf_i+0x1ca>
 800acda:	8019      	strh	r1, [r3, #0]
 800acdc:	2300      	movs	r3, #0
 800acde:	4615      	mov	r5, r2
 800ace0:	6123      	str	r3, [r4, #16]
 800ace2:	e7ba      	b.n	800ac5a <_printf_i+0x152>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	2100      	movs	r1, #0
 800ace8:	1d1a      	adds	r2, r3, #4
 800acea:	602a      	str	r2, [r5, #0]
 800acec:	681d      	ldr	r5, [r3, #0]
 800acee:	6862      	ldr	r2, [r4, #4]
 800acf0:	4628      	mov	r0, r5
 800acf2:	f000 feeb 	bl	800bacc <memchr>
 800acf6:	b108      	cbz	r0, 800acfc <_printf_i+0x1f4>
 800acf8:	1b40      	subs	r0, r0, r5
 800acfa:	6060      	str	r0, [r4, #4]
 800acfc:	6863      	ldr	r3, [r4, #4]
 800acfe:	6123      	str	r3, [r4, #16]
 800ad00:	2300      	movs	r3, #0
 800ad02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad06:	e7a8      	b.n	800ac5a <_printf_i+0x152>
 800ad08:	462a      	mov	r2, r5
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	4640      	mov	r0, r8
 800ad0e:	6923      	ldr	r3, [r4, #16]
 800ad10:	47d0      	blx	sl
 800ad12:	3001      	adds	r0, #1
 800ad14:	d0ab      	beq.n	800ac6e <_printf_i+0x166>
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	079b      	lsls	r3, r3, #30
 800ad1a:	d413      	bmi.n	800ad44 <_printf_i+0x23c>
 800ad1c:	68e0      	ldr	r0, [r4, #12]
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	4298      	cmp	r0, r3
 800ad22:	bfb8      	it	lt
 800ad24:	4618      	movlt	r0, r3
 800ad26:	e7a4      	b.n	800ac72 <_printf_i+0x16a>
 800ad28:	2301      	movs	r3, #1
 800ad2a:	4632      	mov	r2, r6
 800ad2c:	4649      	mov	r1, r9
 800ad2e:	4640      	mov	r0, r8
 800ad30:	47d0      	blx	sl
 800ad32:	3001      	adds	r0, #1
 800ad34:	d09b      	beq.n	800ac6e <_printf_i+0x166>
 800ad36:	3501      	adds	r5, #1
 800ad38:	68e3      	ldr	r3, [r4, #12]
 800ad3a:	9903      	ldr	r1, [sp, #12]
 800ad3c:	1a5b      	subs	r3, r3, r1
 800ad3e:	42ab      	cmp	r3, r5
 800ad40:	dcf2      	bgt.n	800ad28 <_printf_i+0x220>
 800ad42:	e7eb      	b.n	800ad1c <_printf_i+0x214>
 800ad44:	2500      	movs	r5, #0
 800ad46:	f104 0619 	add.w	r6, r4, #25
 800ad4a:	e7f5      	b.n	800ad38 <_printf_i+0x230>
 800ad4c:	0800d3d6 	.word	0x0800d3d6
 800ad50:	0800d3e7 	.word	0x0800d3e7

0800ad54 <sniprintf>:
 800ad54:	b40c      	push	{r2, r3}
 800ad56:	b530      	push	{r4, r5, lr}
 800ad58:	4b17      	ldr	r3, [pc, #92]	; (800adb8 <sniprintf+0x64>)
 800ad5a:	1e0c      	subs	r4, r1, #0
 800ad5c:	681d      	ldr	r5, [r3, #0]
 800ad5e:	b09d      	sub	sp, #116	; 0x74
 800ad60:	da08      	bge.n	800ad74 <sniprintf+0x20>
 800ad62:	238b      	movs	r3, #139	; 0x8b
 800ad64:	f04f 30ff 	mov.w	r0, #4294967295
 800ad68:	602b      	str	r3, [r5, #0]
 800ad6a:	b01d      	add	sp, #116	; 0x74
 800ad6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad70:	b002      	add	sp, #8
 800ad72:	4770      	bx	lr
 800ad74:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ad78:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ad7c:	bf0c      	ite	eq
 800ad7e:	4623      	moveq	r3, r4
 800ad80:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ad84:	9304      	str	r3, [sp, #16]
 800ad86:	9307      	str	r3, [sp, #28]
 800ad88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad8c:	9002      	str	r0, [sp, #8]
 800ad8e:	9006      	str	r0, [sp, #24]
 800ad90:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad94:	4628      	mov	r0, r5
 800ad96:	ab21      	add	r3, sp, #132	; 0x84
 800ad98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad9a:	a902      	add	r1, sp, #8
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	f001 fb71 	bl	800c484 <_svfiprintf_r>
 800ada2:	1c43      	adds	r3, r0, #1
 800ada4:	bfbc      	itt	lt
 800ada6:	238b      	movlt	r3, #139	; 0x8b
 800ada8:	602b      	strlt	r3, [r5, #0]
 800adaa:	2c00      	cmp	r4, #0
 800adac:	d0dd      	beq.n	800ad6a <sniprintf+0x16>
 800adae:	2200      	movs	r2, #0
 800adb0:	9b02      	ldr	r3, [sp, #8]
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	e7d9      	b.n	800ad6a <sniprintf+0x16>
 800adb6:	bf00      	nop
 800adb8:	200001a0 	.word	0x200001a0

0800adbc <quorem>:
 800adbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc0:	6903      	ldr	r3, [r0, #16]
 800adc2:	690c      	ldr	r4, [r1, #16]
 800adc4:	4607      	mov	r7, r0
 800adc6:	42a3      	cmp	r3, r4
 800adc8:	f2c0 8082 	blt.w	800aed0 <quorem+0x114>
 800adcc:	3c01      	subs	r4, #1
 800adce:	f100 0514 	add.w	r5, r0, #20
 800add2:	f101 0814 	add.w	r8, r1, #20
 800add6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adda:	9301      	str	r3, [sp, #4]
 800addc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ade0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ade4:	3301      	adds	r3, #1
 800ade6:	429a      	cmp	r2, r3
 800ade8:	fbb2 f6f3 	udiv	r6, r2, r3
 800adec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800adf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800adf4:	d331      	bcc.n	800ae5a <quorem+0x9e>
 800adf6:	f04f 0e00 	mov.w	lr, #0
 800adfa:	4640      	mov	r0, r8
 800adfc:	46ac      	mov	ip, r5
 800adfe:	46f2      	mov	sl, lr
 800ae00:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae04:	b293      	uxth	r3, r2
 800ae06:	fb06 e303 	mla	r3, r6, r3, lr
 800ae0a:	0c12      	lsrs	r2, r2, #16
 800ae0c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	fb06 e202 	mla	r2, r6, r2, lr
 800ae16:	ebaa 0303 	sub.w	r3, sl, r3
 800ae1a:	f8dc a000 	ldr.w	sl, [ip]
 800ae1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae22:	fa1f fa8a 	uxth.w	sl, sl
 800ae26:	4453      	add	r3, sl
 800ae28:	f8dc a000 	ldr.w	sl, [ip]
 800ae2c:	b292      	uxth	r2, r2
 800ae2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae3c:	4581      	cmp	r9, r0
 800ae3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae42:	f84c 3b04 	str.w	r3, [ip], #4
 800ae46:	d2db      	bcs.n	800ae00 <quorem+0x44>
 800ae48:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae4c:	b92b      	cbnz	r3, 800ae5a <quorem+0x9e>
 800ae4e:	9b01      	ldr	r3, [sp, #4]
 800ae50:	3b04      	subs	r3, #4
 800ae52:	429d      	cmp	r5, r3
 800ae54:	461a      	mov	r2, r3
 800ae56:	d32f      	bcc.n	800aeb8 <quorem+0xfc>
 800ae58:	613c      	str	r4, [r7, #16]
 800ae5a:	4638      	mov	r0, r7
 800ae5c:	f001 f8c2 	bl	800bfe4 <__mcmp>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	db25      	blt.n	800aeb0 <quorem+0xf4>
 800ae64:	4628      	mov	r0, r5
 800ae66:	f04f 0c00 	mov.w	ip, #0
 800ae6a:	3601      	adds	r6, #1
 800ae6c:	f858 1b04 	ldr.w	r1, [r8], #4
 800ae70:	f8d0 e000 	ldr.w	lr, [r0]
 800ae74:	b28b      	uxth	r3, r1
 800ae76:	ebac 0303 	sub.w	r3, ip, r3
 800ae7a:	fa1f f28e 	uxth.w	r2, lr
 800ae7e:	4413      	add	r3, r2
 800ae80:	0c0a      	lsrs	r2, r1, #16
 800ae82:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae90:	45c1      	cmp	r9, r8
 800ae92:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae96:	f840 3b04 	str.w	r3, [r0], #4
 800ae9a:	d2e7      	bcs.n	800ae6c <quorem+0xb0>
 800ae9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aea0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aea4:	b922      	cbnz	r2, 800aeb0 <quorem+0xf4>
 800aea6:	3b04      	subs	r3, #4
 800aea8:	429d      	cmp	r5, r3
 800aeaa:	461a      	mov	r2, r3
 800aeac:	d30a      	bcc.n	800aec4 <quorem+0x108>
 800aeae:	613c      	str	r4, [r7, #16]
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	b003      	add	sp, #12
 800aeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb8:	6812      	ldr	r2, [r2, #0]
 800aeba:	3b04      	subs	r3, #4
 800aebc:	2a00      	cmp	r2, #0
 800aebe:	d1cb      	bne.n	800ae58 <quorem+0x9c>
 800aec0:	3c01      	subs	r4, #1
 800aec2:	e7c6      	b.n	800ae52 <quorem+0x96>
 800aec4:	6812      	ldr	r2, [r2, #0]
 800aec6:	3b04      	subs	r3, #4
 800aec8:	2a00      	cmp	r2, #0
 800aeca:	d1f0      	bne.n	800aeae <quorem+0xf2>
 800aecc:	3c01      	subs	r4, #1
 800aece:	e7eb      	b.n	800aea8 <quorem+0xec>
 800aed0:	2000      	movs	r0, #0
 800aed2:	e7ee      	b.n	800aeb2 <quorem+0xf6>
 800aed4:	0000      	movs	r0, r0
	...

0800aed8 <_dtoa_r>:
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	4616      	mov	r6, r2
 800aede:	461f      	mov	r7, r3
 800aee0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aee2:	b099      	sub	sp, #100	; 0x64
 800aee4:	4605      	mov	r5, r0
 800aee6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800aeea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800aeee:	b974      	cbnz	r4, 800af0e <_dtoa_r+0x36>
 800aef0:	2010      	movs	r0, #16
 800aef2:	f000 fde3 	bl	800babc <malloc>
 800aef6:	4602      	mov	r2, r0
 800aef8:	6268      	str	r0, [r5, #36]	; 0x24
 800aefa:	b920      	cbnz	r0, 800af06 <_dtoa_r+0x2e>
 800aefc:	21ea      	movs	r1, #234	; 0xea
 800aefe:	4ba8      	ldr	r3, [pc, #672]	; (800b1a0 <_dtoa_r+0x2c8>)
 800af00:	48a8      	ldr	r0, [pc, #672]	; (800b1a4 <_dtoa_r+0x2cc>)
 800af02:	f001 fbcf 	bl	800c6a4 <__assert_func>
 800af06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af0a:	6004      	str	r4, [r0, #0]
 800af0c:	60c4      	str	r4, [r0, #12]
 800af0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af10:	6819      	ldr	r1, [r3, #0]
 800af12:	b151      	cbz	r1, 800af2a <_dtoa_r+0x52>
 800af14:	685a      	ldr	r2, [r3, #4]
 800af16:	2301      	movs	r3, #1
 800af18:	4093      	lsls	r3, r2
 800af1a:	604a      	str	r2, [r1, #4]
 800af1c:	608b      	str	r3, [r1, #8]
 800af1e:	4628      	mov	r0, r5
 800af20:	f000 fe22 	bl	800bb68 <_Bfree>
 800af24:	2200      	movs	r2, #0
 800af26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	1e3b      	subs	r3, r7, #0
 800af2c:	bfaf      	iteee	ge
 800af2e:	2300      	movge	r3, #0
 800af30:	2201      	movlt	r2, #1
 800af32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af36:	9305      	strlt	r3, [sp, #20]
 800af38:	bfa8      	it	ge
 800af3a:	f8c8 3000 	strge.w	r3, [r8]
 800af3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800af42:	4b99      	ldr	r3, [pc, #612]	; (800b1a8 <_dtoa_r+0x2d0>)
 800af44:	bfb8      	it	lt
 800af46:	f8c8 2000 	strlt.w	r2, [r8]
 800af4a:	ea33 0309 	bics.w	r3, r3, r9
 800af4e:	d119      	bne.n	800af84 <_dtoa_r+0xac>
 800af50:	f242 730f 	movw	r3, #9999	; 0x270f
 800af54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af56:	6013      	str	r3, [r2, #0]
 800af58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af5c:	4333      	orrs	r3, r6
 800af5e:	f000 857f 	beq.w	800ba60 <_dtoa_r+0xb88>
 800af62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af64:	b953      	cbnz	r3, 800af7c <_dtoa_r+0xa4>
 800af66:	4b91      	ldr	r3, [pc, #580]	; (800b1ac <_dtoa_r+0x2d4>)
 800af68:	e022      	b.n	800afb0 <_dtoa_r+0xd8>
 800af6a:	4b91      	ldr	r3, [pc, #580]	; (800b1b0 <_dtoa_r+0x2d8>)
 800af6c:	9303      	str	r3, [sp, #12]
 800af6e:	3308      	adds	r3, #8
 800af70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800af72:	6013      	str	r3, [r2, #0]
 800af74:	9803      	ldr	r0, [sp, #12]
 800af76:	b019      	add	sp, #100	; 0x64
 800af78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7c:	4b8b      	ldr	r3, [pc, #556]	; (800b1ac <_dtoa_r+0x2d4>)
 800af7e:	9303      	str	r3, [sp, #12]
 800af80:	3303      	adds	r3, #3
 800af82:	e7f5      	b.n	800af70 <_dtoa_r+0x98>
 800af84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800af88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800af8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af90:	2200      	movs	r2, #0
 800af92:	2300      	movs	r3, #0
 800af94:	f7f5 fd20 	bl	80009d8 <__aeabi_dcmpeq>
 800af98:	4680      	mov	r8, r0
 800af9a:	b158      	cbz	r0, 800afb4 <_dtoa_r+0xdc>
 800af9c:	2301      	movs	r3, #1
 800af9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800afa0:	6013      	str	r3, [r2, #0]
 800afa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 8558 	beq.w	800ba5a <_dtoa_r+0xb82>
 800afaa:	4882      	ldr	r0, [pc, #520]	; (800b1b4 <_dtoa_r+0x2dc>)
 800afac:	6018      	str	r0, [r3, #0]
 800afae:	1e43      	subs	r3, r0, #1
 800afb0:	9303      	str	r3, [sp, #12]
 800afb2:	e7df      	b.n	800af74 <_dtoa_r+0x9c>
 800afb4:	ab16      	add	r3, sp, #88	; 0x58
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	ab17      	add	r3, sp, #92	; 0x5c
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	4628      	mov	r0, r5
 800afbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800afc2:	f001 f8b7 	bl	800c134 <__d2b>
 800afc6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800afca:	4683      	mov	fp, r0
 800afcc:	2c00      	cmp	r4, #0
 800afce:	d07f      	beq.n	800b0d0 <_dtoa_r+0x1f8>
 800afd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afd6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800afda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afde:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800afe2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800afe6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800afea:	2200      	movs	r2, #0
 800afec:	4b72      	ldr	r3, [pc, #456]	; (800b1b8 <_dtoa_r+0x2e0>)
 800afee:	f7f5 f8d3 	bl	8000198 <__aeabi_dsub>
 800aff2:	a365      	add	r3, pc, #404	; (adr r3, 800b188 <_dtoa_r+0x2b0>)
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	f7f5 fa86 	bl	8000508 <__aeabi_dmul>
 800affc:	a364      	add	r3, pc, #400	; (adr r3, 800b190 <_dtoa_r+0x2b8>)
 800affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b002:	f7f5 f8cb 	bl	800019c <__adddf3>
 800b006:	4606      	mov	r6, r0
 800b008:	4620      	mov	r0, r4
 800b00a:	460f      	mov	r7, r1
 800b00c:	f7f5 fa12 	bl	8000434 <__aeabi_i2d>
 800b010:	a361      	add	r3, pc, #388	; (adr r3, 800b198 <_dtoa_r+0x2c0>)
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	f7f5 fa77 	bl	8000508 <__aeabi_dmul>
 800b01a:	4602      	mov	r2, r0
 800b01c:	460b      	mov	r3, r1
 800b01e:	4630      	mov	r0, r6
 800b020:	4639      	mov	r1, r7
 800b022:	f7f5 f8bb 	bl	800019c <__adddf3>
 800b026:	4606      	mov	r6, r0
 800b028:	460f      	mov	r7, r1
 800b02a:	f7f5 fd1d 	bl	8000a68 <__aeabi_d2iz>
 800b02e:	2200      	movs	r2, #0
 800b030:	4682      	mov	sl, r0
 800b032:	2300      	movs	r3, #0
 800b034:	4630      	mov	r0, r6
 800b036:	4639      	mov	r1, r7
 800b038:	f7f5 fcd8 	bl	80009ec <__aeabi_dcmplt>
 800b03c:	b148      	cbz	r0, 800b052 <_dtoa_r+0x17a>
 800b03e:	4650      	mov	r0, sl
 800b040:	f7f5 f9f8 	bl	8000434 <__aeabi_i2d>
 800b044:	4632      	mov	r2, r6
 800b046:	463b      	mov	r3, r7
 800b048:	f7f5 fcc6 	bl	80009d8 <__aeabi_dcmpeq>
 800b04c:	b908      	cbnz	r0, 800b052 <_dtoa_r+0x17a>
 800b04e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b052:	f1ba 0f16 	cmp.w	sl, #22
 800b056:	d858      	bhi.n	800b10a <_dtoa_r+0x232>
 800b058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b05c:	4b57      	ldr	r3, [pc, #348]	; (800b1bc <_dtoa_r+0x2e4>)
 800b05e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	f7f5 fcc1 	bl	80009ec <__aeabi_dcmplt>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d04f      	beq.n	800b10e <_dtoa_r+0x236>
 800b06e:	2300      	movs	r3, #0
 800b070:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b074:	930f      	str	r3, [sp, #60]	; 0x3c
 800b076:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b078:	1b1c      	subs	r4, r3, r4
 800b07a:	1e63      	subs	r3, r4, #1
 800b07c:	9309      	str	r3, [sp, #36]	; 0x24
 800b07e:	bf49      	itett	mi
 800b080:	f1c4 0301 	rsbmi	r3, r4, #1
 800b084:	2300      	movpl	r3, #0
 800b086:	9306      	strmi	r3, [sp, #24]
 800b088:	2300      	movmi	r3, #0
 800b08a:	bf54      	ite	pl
 800b08c:	9306      	strpl	r3, [sp, #24]
 800b08e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b090:	f1ba 0f00 	cmp.w	sl, #0
 800b094:	db3d      	blt.n	800b112 <_dtoa_r+0x23a>
 800b096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b098:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b09c:	4453      	add	r3, sl
 800b09e:	9309      	str	r3, [sp, #36]	; 0x24
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	930a      	str	r3, [sp, #40]	; 0x28
 800b0a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0a6:	2b09      	cmp	r3, #9
 800b0a8:	f200 808c 	bhi.w	800b1c4 <_dtoa_r+0x2ec>
 800b0ac:	2b05      	cmp	r3, #5
 800b0ae:	bfc4      	itt	gt
 800b0b0:	3b04      	subgt	r3, #4
 800b0b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b0b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0b6:	bfc8      	it	gt
 800b0b8:	2400      	movgt	r4, #0
 800b0ba:	f1a3 0302 	sub.w	r3, r3, #2
 800b0be:	bfd8      	it	le
 800b0c0:	2401      	movle	r4, #1
 800b0c2:	2b03      	cmp	r3, #3
 800b0c4:	f200 808a 	bhi.w	800b1dc <_dtoa_r+0x304>
 800b0c8:	e8df f003 	tbb	[pc, r3]
 800b0cc:	5b4d4f2d 	.word	0x5b4d4f2d
 800b0d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b0d4:	441c      	add	r4, r3
 800b0d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b0da:	2b20      	cmp	r3, #32
 800b0dc:	bfc3      	ittte	gt
 800b0de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0e2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b0e6:	fa09 f303 	lslgt.w	r3, r9, r3
 800b0ea:	f1c3 0320 	rsble	r3, r3, #32
 800b0ee:	bfc6      	itte	gt
 800b0f0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b0f4:	4318      	orrgt	r0, r3
 800b0f6:	fa06 f003 	lslle.w	r0, r6, r3
 800b0fa:	f7f5 f98b 	bl	8000414 <__aeabi_ui2d>
 800b0fe:	2301      	movs	r3, #1
 800b100:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b104:	3c01      	subs	r4, #1
 800b106:	9313      	str	r3, [sp, #76]	; 0x4c
 800b108:	e76f      	b.n	800afea <_dtoa_r+0x112>
 800b10a:	2301      	movs	r3, #1
 800b10c:	e7b2      	b.n	800b074 <_dtoa_r+0x19c>
 800b10e:	900f      	str	r0, [sp, #60]	; 0x3c
 800b110:	e7b1      	b.n	800b076 <_dtoa_r+0x19e>
 800b112:	9b06      	ldr	r3, [sp, #24]
 800b114:	eba3 030a 	sub.w	r3, r3, sl
 800b118:	9306      	str	r3, [sp, #24]
 800b11a:	f1ca 0300 	rsb	r3, sl, #0
 800b11e:	930a      	str	r3, [sp, #40]	; 0x28
 800b120:	2300      	movs	r3, #0
 800b122:	930e      	str	r3, [sp, #56]	; 0x38
 800b124:	e7be      	b.n	800b0a4 <_dtoa_r+0x1cc>
 800b126:	2300      	movs	r3, #0
 800b128:	930b      	str	r3, [sp, #44]	; 0x2c
 800b12a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	dc58      	bgt.n	800b1e2 <_dtoa_r+0x30a>
 800b130:	f04f 0901 	mov.w	r9, #1
 800b134:	464b      	mov	r3, r9
 800b136:	f8cd 9020 	str.w	r9, [sp, #32]
 800b13a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b13e:	2200      	movs	r2, #0
 800b140:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b142:	6042      	str	r2, [r0, #4]
 800b144:	2204      	movs	r2, #4
 800b146:	f102 0614 	add.w	r6, r2, #20
 800b14a:	429e      	cmp	r6, r3
 800b14c:	6841      	ldr	r1, [r0, #4]
 800b14e:	d94e      	bls.n	800b1ee <_dtoa_r+0x316>
 800b150:	4628      	mov	r0, r5
 800b152:	f000 fcc9 	bl	800bae8 <_Balloc>
 800b156:	9003      	str	r0, [sp, #12]
 800b158:	2800      	cmp	r0, #0
 800b15a:	d14c      	bne.n	800b1f6 <_dtoa_r+0x31e>
 800b15c:	4602      	mov	r2, r0
 800b15e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b162:	4b17      	ldr	r3, [pc, #92]	; (800b1c0 <_dtoa_r+0x2e8>)
 800b164:	e6cc      	b.n	800af00 <_dtoa_r+0x28>
 800b166:	2301      	movs	r3, #1
 800b168:	e7de      	b.n	800b128 <_dtoa_r+0x250>
 800b16a:	2300      	movs	r3, #0
 800b16c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b16e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b170:	eb0a 0903 	add.w	r9, sl, r3
 800b174:	f109 0301 	add.w	r3, r9, #1
 800b178:	2b01      	cmp	r3, #1
 800b17a:	9308      	str	r3, [sp, #32]
 800b17c:	bfb8      	it	lt
 800b17e:	2301      	movlt	r3, #1
 800b180:	e7dd      	b.n	800b13e <_dtoa_r+0x266>
 800b182:	2301      	movs	r3, #1
 800b184:	e7f2      	b.n	800b16c <_dtoa_r+0x294>
 800b186:	bf00      	nop
 800b188:	636f4361 	.word	0x636f4361
 800b18c:	3fd287a7 	.word	0x3fd287a7
 800b190:	8b60c8b3 	.word	0x8b60c8b3
 800b194:	3fc68a28 	.word	0x3fc68a28
 800b198:	509f79fb 	.word	0x509f79fb
 800b19c:	3fd34413 	.word	0x3fd34413
 800b1a0:	0800d405 	.word	0x0800d405
 800b1a4:	0800d41c 	.word	0x0800d41c
 800b1a8:	7ff00000 	.word	0x7ff00000
 800b1ac:	0800d401 	.word	0x0800d401
 800b1b0:	0800d3f8 	.word	0x0800d3f8
 800b1b4:	0800d3d5 	.word	0x0800d3d5
 800b1b8:	3ff80000 	.word	0x3ff80000
 800b1bc:	0800d510 	.word	0x0800d510
 800b1c0:	0800d477 	.word	0x0800d477
 800b1c4:	2401      	movs	r4, #1
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	940b      	str	r4, [sp, #44]	; 0x2c
 800b1ca:	9322      	str	r3, [sp, #136]	; 0x88
 800b1cc:	f04f 39ff 	mov.w	r9, #4294967295
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2312      	movs	r3, #18
 800b1d4:	f8cd 9020 	str.w	r9, [sp, #32]
 800b1d8:	9223      	str	r2, [sp, #140]	; 0x8c
 800b1da:	e7b0      	b.n	800b13e <_dtoa_r+0x266>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1e0:	e7f4      	b.n	800b1cc <_dtoa_r+0x2f4>
 800b1e2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b1e6:	464b      	mov	r3, r9
 800b1e8:	f8cd 9020 	str.w	r9, [sp, #32]
 800b1ec:	e7a7      	b.n	800b13e <_dtoa_r+0x266>
 800b1ee:	3101      	adds	r1, #1
 800b1f0:	6041      	str	r1, [r0, #4]
 800b1f2:	0052      	lsls	r2, r2, #1
 800b1f4:	e7a7      	b.n	800b146 <_dtoa_r+0x26e>
 800b1f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1f8:	9a03      	ldr	r2, [sp, #12]
 800b1fa:	601a      	str	r2, [r3, #0]
 800b1fc:	9b08      	ldr	r3, [sp, #32]
 800b1fe:	2b0e      	cmp	r3, #14
 800b200:	f200 80a8 	bhi.w	800b354 <_dtoa_r+0x47c>
 800b204:	2c00      	cmp	r4, #0
 800b206:	f000 80a5 	beq.w	800b354 <_dtoa_r+0x47c>
 800b20a:	f1ba 0f00 	cmp.w	sl, #0
 800b20e:	dd34      	ble.n	800b27a <_dtoa_r+0x3a2>
 800b210:	4a9a      	ldr	r2, [pc, #616]	; (800b47c <_dtoa_r+0x5a4>)
 800b212:	f00a 030f 	and.w	r3, sl, #15
 800b216:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b21a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b21e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b222:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b226:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b22a:	d016      	beq.n	800b25a <_dtoa_r+0x382>
 800b22c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b230:	4b93      	ldr	r3, [pc, #588]	; (800b480 <_dtoa_r+0x5a8>)
 800b232:	2703      	movs	r7, #3
 800b234:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b238:	f7f5 fa90 	bl	800075c <__aeabi_ddiv>
 800b23c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b240:	f004 040f 	and.w	r4, r4, #15
 800b244:	4e8e      	ldr	r6, [pc, #568]	; (800b480 <_dtoa_r+0x5a8>)
 800b246:	b954      	cbnz	r4, 800b25e <_dtoa_r+0x386>
 800b248:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b24c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b250:	f7f5 fa84 	bl	800075c <__aeabi_ddiv>
 800b254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b258:	e029      	b.n	800b2ae <_dtoa_r+0x3d6>
 800b25a:	2702      	movs	r7, #2
 800b25c:	e7f2      	b.n	800b244 <_dtoa_r+0x36c>
 800b25e:	07e1      	lsls	r1, r4, #31
 800b260:	d508      	bpl.n	800b274 <_dtoa_r+0x39c>
 800b262:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b266:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b26a:	f7f5 f94d 	bl	8000508 <__aeabi_dmul>
 800b26e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b272:	3701      	adds	r7, #1
 800b274:	1064      	asrs	r4, r4, #1
 800b276:	3608      	adds	r6, #8
 800b278:	e7e5      	b.n	800b246 <_dtoa_r+0x36e>
 800b27a:	f000 80a5 	beq.w	800b3c8 <_dtoa_r+0x4f0>
 800b27e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b282:	f1ca 0400 	rsb	r4, sl, #0
 800b286:	4b7d      	ldr	r3, [pc, #500]	; (800b47c <_dtoa_r+0x5a4>)
 800b288:	f004 020f 	and.w	r2, r4, #15
 800b28c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	f7f5 f938 	bl	8000508 <__aeabi_dmul>
 800b298:	2702      	movs	r7, #2
 800b29a:	2300      	movs	r3, #0
 800b29c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2a0:	4e77      	ldr	r6, [pc, #476]	; (800b480 <_dtoa_r+0x5a8>)
 800b2a2:	1124      	asrs	r4, r4, #4
 800b2a4:	2c00      	cmp	r4, #0
 800b2a6:	f040 8084 	bne.w	800b3b2 <_dtoa_r+0x4da>
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1d2      	bne.n	800b254 <_dtoa_r+0x37c>
 800b2ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f000 808b 	beq.w	800b3cc <_dtoa_r+0x4f4>
 800b2b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b2ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b2be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	4b6f      	ldr	r3, [pc, #444]	; (800b484 <_dtoa_r+0x5ac>)
 800b2c6:	f7f5 fb91 	bl	80009ec <__aeabi_dcmplt>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d07e      	beq.n	800b3cc <_dtoa_r+0x4f4>
 800b2ce:	9b08      	ldr	r3, [sp, #32]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d07b      	beq.n	800b3cc <_dtoa_r+0x4f4>
 800b2d4:	f1b9 0f00 	cmp.w	r9, #0
 800b2d8:	dd38      	ble.n	800b34c <_dtoa_r+0x474>
 800b2da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2de:	2200      	movs	r2, #0
 800b2e0:	4b69      	ldr	r3, [pc, #420]	; (800b488 <_dtoa_r+0x5b0>)
 800b2e2:	f7f5 f911 	bl	8000508 <__aeabi_dmul>
 800b2e6:	464c      	mov	r4, r9
 800b2e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2ec:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b2f0:	3701      	adds	r7, #1
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	f7f5 f89e 	bl	8000434 <__aeabi_i2d>
 800b2f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2fc:	f7f5 f904 	bl	8000508 <__aeabi_dmul>
 800b300:	2200      	movs	r2, #0
 800b302:	4b62      	ldr	r3, [pc, #392]	; (800b48c <_dtoa_r+0x5b4>)
 800b304:	f7f4 ff4a 	bl	800019c <__adddf3>
 800b308:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b30c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b310:	9611      	str	r6, [sp, #68]	; 0x44
 800b312:	2c00      	cmp	r4, #0
 800b314:	d15d      	bne.n	800b3d2 <_dtoa_r+0x4fa>
 800b316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b31a:	2200      	movs	r2, #0
 800b31c:	4b5c      	ldr	r3, [pc, #368]	; (800b490 <_dtoa_r+0x5b8>)
 800b31e:	f7f4 ff3b 	bl	8000198 <__aeabi_dsub>
 800b322:	4602      	mov	r2, r0
 800b324:	460b      	mov	r3, r1
 800b326:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b32a:	4633      	mov	r3, r6
 800b32c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b32e:	f7f5 fb7b 	bl	8000a28 <__aeabi_dcmpgt>
 800b332:	2800      	cmp	r0, #0
 800b334:	f040 829c 	bne.w	800b870 <_dtoa_r+0x998>
 800b338:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b33c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b33e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b342:	f7f5 fb53 	bl	80009ec <__aeabi_dcmplt>
 800b346:	2800      	cmp	r0, #0
 800b348:	f040 8290 	bne.w	800b86c <_dtoa_r+0x994>
 800b34c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b350:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b356:	2b00      	cmp	r3, #0
 800b358:	f2c0 8152 	blt.w	800b600 <_dtoa_r+0x728>
 800b35c:	f1ba 0f0e 	cmp.w	sl, #14
 800b360:	f300 814e 	bgt.w	800b600 <_dtoa_r+0x728>
 800b364:	4b45      	ldr	r3, [pc, #276]	; (800b47c <_dtoa_r+0x5a4>)
 800b366:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b36a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b36e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b372:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b374:	2b00      	cmp	r3, #0
 800b376:	f280 80db 	bge.w	800b530 <_dtoa_r+0x658>
 800b37a:	9b08      	ldr	r3, [sp, #32]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f300 80d7 	bgt.w	800b530 <_dtoa_r+0x658>
 800b382:	f040 8272 	bne.w	800b86a <_dtoa_r+0x992>
 800b386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b38a:	2200      	movs	r2, #0
 800b38c:	4b40      	ldr	r3, [pc, #256]	; (800b490 <_dtoa_r+0x5b8>)
 800b38e:	f7f5 f8bb 	bl	8000508 <__aeabi_dmul>
 800b392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b396:	f7f5 fb3d 	bl	8000a14 <__aeabi_dcmpge>
 800b39a:	9c08      	ldr	r4, [sp, #32]
 800b39c:	4626      	mov	r6, r4
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	f040 8248 	bne.w	800b834 <_dtoa_r+0x95c>
 800b3a4:	2331      	movs	r3, #49	; 0x31
 800b3a6:	9f03      	ldr	r7, [sp, #12]
 800b3a8:	f10a 0a01 	add.w	sl, sl, #1
 800b3ac:	f807 3b01 	strb.w	r3, [r7], #1
 800b3b0:	e244      	b.n	800b83c <_dtoa_r+0x964>
 800b3b2:	07e2      	lsls	r2, r4, #31
 800b3b4:	d505      	bpl.n	800b3c2 <_dtoa_r+0x4ea>
 800b3b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3ba:	f7f5 f8a5 	bl	8000508 <__aeabi_dmul>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	3701      	adds	r7, #1
 800b3c2:	1064      	asrs	r4, r4, #1
 800b3c4:	3608      	adds	r6, #8
 800b3c6:	e76d      	b.n	800b2a4 <_dtoa_r+0x3cc>
 800b3c8:	2702      	movs	r7, #2
 800b3ca:	e770      	b.n	800b2ae <_dtoa_r+0x3d6>
 800b3cc:	46d0      	mov	r8, sl
 800b3ce:	9c08      	ldr	r4, [sp, #32]
 800b3d0:	e78f      	b.n	800b2f2 <_dtoa_r+0x41a>
 800b3d2:	9903      	ldr	r1, [sp, #12]
 800b3d4:	4b29      	ldr	r3, [pc, #164]	; (800b47c <_dtoa_r+0x5a4>)
 800b3d6:	4421      	add	r1, r4
 800b3d8:	9112      	str	r1, [sp, #72]	; 0x48
 800b3da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b3e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b3e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3e8:	2900      	cmp	r1, #0
 800b3ea:	d055      	beq.n	800b498 <_dtoa_r+0x5c0>
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	4929      	ldr	r1, [pc, #164]	; (800b494 <_dtoa_r+0x5bc>)
 800b3f0:	f7f5 f9b4 	bl	800075c <__aeabi_ddiv>
 800b3f4:	463b      	mov	r3, r7
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	f7f4 fece 	bl	8000198 <__aeabi_dsub>
 800b3fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b400:	9f03      	ldr	r7, [sp, #12]
 800b402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b406:	f7f5 fb2f 	bl	8000a68 <__aeabi_d2iz>
 800b40a:	4604      	mov	r4, r0
 800b40c:	f7f5 f812 	bl	8000434 <__aeabi_i2d>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b418:	f7f4 febe 	bl	8000198 <__aeabi_dsub>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	3430      	adds	r4, #48	; 0x30
 800b422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b426:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b42a:	f807 4b01 	strb.w	r4, [r7], #1
 800b42e:	f7f5 fadd 	bl	80009ec <__aeabi_dcmplt>
 800b432:	2800      	cmp	r0, #0
 800b434:	d174      	bne.n	800b520 <_dtoa_r+0x648>
 800b436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b43a:	2000      	movs	r0, #0
 800b43c:	4911      	ldr	r1, [pc, #68]	; (800b484 <_dtoa_r+0x5ac>)
 800b43e:	f7f4 feab 	bl	8000198 <__aeabi_dsub>
 800b442:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b446:	f7f5 fad1 	bl	80009ec <__aeabi_dcmplt>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	f040 80b7 	bne.w	800b5be <_dtoa_r+0x6e6>
 800b450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b452:	429f      	cmp	r7, r3
 800b454:	f43f af7a 	beq.w	800b34c <_dtoa_r+0x474>
 800b458:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b45c:	2200      	movs	r2, #0
 800b45e:	4b0a      	ldr	r3, [pc, #40]	; (800b488 <_dtoa_r+0x5b0>)
 800b460:	f7f5 f852 	bl	8000508 <__aeabi_dmul>
 800b464:	2200      	movs	r2, #0
 800b466:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b46a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b46e:	4b06      	ldr	r3, [pc, #24]	; (800b488 <_dtoa_r+0x5b0>)
 800b470:	f7f5 f84a 	bl	8000508 <__aeabi_dmul>
 800b474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b478:	e7c3      	b.n	800b402 <_dtoa_r+0x52a>
 800b47a:	bf00      	nop
 800b47c:	0800d510 	.word	0x0800d510
 800b480:	0800d4e8 	.word	0x0800d4e8
 800b484:	3ff00000 	.word	0x3ff00000
 800b488:	40240000 	.word	0x40240000
 800b48c:	401c0000 	.word	0x401c0000
 800b490:	40140000 	.word	0x40140000
 800b494:	3fe00000 	.word	0x3fe00000
 800b498:	4630      	mov	r0, r6
 800b49a:	4639      	mov	r1, r7
 800b49c:	f7f5 f834 	bl	8000508 <__aeabi_dmul>
 800b4a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4a6:	9c03      	ldr	r4, [sp, #12]
 800b4a8:	9314      	str	r3, [sp, #80]	; 0x50
 800b4aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4ae:	f7f5 fadb 	bl	8000a68 <__aeabi_d2iz>
 800b4b2:	9015      	str	r0, [sp, #84]	; 0x54
 800b4b4:	f7f4 ffbe 	bl	8000434 <__aeabi_i2d>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4c0:	f7f4 fe6a 	bl	8000198 <__aeabi_dsub>
 800b4c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	3330      	adds	r3, #48	; 0x30
 800b4ca:	f804 3b01 	strb.w	r3, [r4], #1
 800b4ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4d0:	460f      	mov	r7, r1
 800b4d2:	429c      	cmp	r4, r3
 800b4d4:	f04f 0200 	mov.w	r2, #0
 800b4d8:	d124      	bne.n	800b524 <_dtoa_r+0x64c>
 800b4da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4de:	4bb0      	ldr	r3, [pc, #704]	; (800b7a0 <_dtoa_r+0x8c8>)
 800b4e0:	f7f4 fe5c 	bl	800019c <__adddf3>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	4639      	mov	r1, r7
 800b4ec:	f7f5 fa9c 	bl	8000a28 <__aeabi_dcmpgt>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d163      	bne.n	800b5bc <_dtoa_r+0x6e4>
 800b4f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	49a9      	ldr	r1, [pc, #676]	; (800b7a0 <_dtoa_r+0x8c8>)
 800b4fc:	f7f4 fe4c 	bl	8000198 <__aeabi_dsub>
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	4630      	mov	r0, r6
 800b506:	4639      	mov	r1, r7
 800b508:	f7f5 fa70 	bl	80009ec <__aeabi_dcmplt>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	f43f af1d 	beq.w	800b34c <_dtoa_r+0x474>
 800b512:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b514:	1e7b      	subs	r3, r7, #1
 800b516:	9314      	str	r3, [sp, #80]	; 0x50
 800b518:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b51c:	2b30      	cmp	r3, #48	; 0x30
 800b51e:	d0f8      	beq.n	800b512 <_dtoa_r+0x63a>
 800b520:	46c2      	mov	sl, r8
 800b522:	e03b      	b.n	800b59c <_dtoa_r+0x6c4>
 800b524:	4b9f      	ldr	r3, [pc, #636]	; (800b7a4 <_dtoa_r+0x8cc>)
 800b526:	f7f4 ffef 	bl	8000508 <__aeabi_dmul>
 800b52a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b52e:	e7bc      	b.n	800b4aa <_dtoa_r+0x5d2>
 800b530:	9f03      	ldr	r7, [sp, #12]
 800b532:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b536:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b53a:	4640      	mov	r0, r8
 800b53c:	4649      	mov	r1, r9
 800b53e:	f7f5 f90d 	bl	800075c <__aeabi_ddiv>
 800b542:	f7f5 fa91 	bl	8000a68 <__aeabi_d2iz>
 800b546:	4604      	mov	r4, r0
 800b548:	f7f4 ff74 	bl	8000434 <__aeabi_i2d>
 800b54c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b550:	f7f4 ffda 	bl	8000508 <__aeabi_dmul>
 800b554:	4602      	mov	r2, r0
 800b556:	460b      	mov	r3, r1
 800b558:	4640      	mov	r0, r8
 800b55a:	4649      	mov	r1, r9
 800b55c:	f7f4 fe1c 	bl	8000198 <__aeabi_dsub>
 800b560:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b564:	f807 6b01 	strb.w	r6, [r7], #1
 800b568:	9e03      	ldr	r6, [sp, #12]
 800b56a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b56e:	1bbe      	subs	r6, r7, r6
 800b570:	45b4      	cmp	ip, r6
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	d136      	bne.n	800b5e6 <_dtoa_r+0x70e>
 800b578:	f7f4 fe10 	bl	800019c <__adddf3>
 800b57c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b580:	4680      	mov	r8, r0
 800b582:	4689      	mov	r9, r1
 800b584:	f7f5 fa50 	bl	8000a28 <__aeabi_dcmpgt>
 800b588:	bb58      	cbnz	r0, 800b5e2 <_dtoa_r+0x70a>
 800b58a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b58e:	4640      	mov	r0, r8
 800b590:	4649      	mov	r1, r9
 800b592:	f7f5 fa21 	bl	80009d8 <__aeabi_dcmpeq>
 800b596:	b108      	cbz	r0, 800b59c <_dtoa_r+0x6c4>
 800b598:	07e1      	lsls	r1, r4, #31
 800b59a:	d422      	bmi.n	800b5e2 <_dtoa_r+0x70a>
 800b59c:	4628      	mov	r0, r5
 800b59e:	4659      	mov	r1, fp
 800b5a0:	f000 fae2 	bl	800bb68 <_Bfree>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	703b      	strb	r3, [r7, #0]
 800b5a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b5aa:	f10a 0001 	add.w	r0, sl, #1
 800b5ae:	6018      	str	r0, [r3, #0]
 800b5b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f43f acde 	beq.w	800af74 <_dtoa_r+0x9c>
 800b5b8:	601f      	str	r7, [r3, #0]
 800b5ba:	e4db      	b.n	800af74 <_dtoa_r+0x9c>
 800b5bc:	4627      	mov	r7, r4
 800b5be:	463b      	mov	r3, r7
 800b5c0:	461f      	mov	r7, r3
 800b5c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5c6:	2a39      	cmp	r2, #57	; 0x39
 800b5c8:	d107      	bne.n	800b5da <_dtoa_r+0x702>
 800b5ca:	9a03      	ldr	r2, [sp, #12]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d1f7      	bne.n	800b5c0 <_dtoa_r+0x6e8>
 800b5d0:	2230      	movs	r2, #48	; 0x30
 800b5d2:	9903      	ldr	r1, [sp, #12]
 800b5d4:	f108 0801 	add.w	r8, r8, #1
 800b5d8:	700a      	strb	r2, [r1, #0]
 800b5da:	781a      	ldrb	r2, [r3, #0]
 800b5dc:	3201      	adds	r2, #1
 800b5de:	701a      	strb	r2, [r3, #0]
 800b5e0:	e79e      	b.n	800b520 <_dtoa_r+0x648>
 800b5e2:	46d0      	mov	r8, sl
 800b5e4:	e7eb      	b.n	800b5be <_dtoa_r+0x6e6>
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	4b6e      	ldr	r3, [pc, #440]	; (800b7a4 <_dtoa_r+0x8cc>)
 800b5ea:	f7f4 ff8d 	bl	8000508 <__aeabi_dmul>
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	4680      	mov	r8, r0
 800b5f4:	4689      	mov	r9, r1
 800b5f6:	f7f5 f9ef 	bl	80009d8 <__aeabi_dcmpeq>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d09b      	beq.n	800b536 <_dtoa_r+0x65e>
 800b5fe:	e7cd      	b.n	800b59c <_dtoa_r+0x6c4>
 800b600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b602:	2a00      	cmp	r2, #0
 800b604:	f000 80d0 	beq.w	800b7a8 <_dtoa_r+0x8d0>
 800b608:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b60a:	2a01      	cmp	r2, #1
 800b60c:	f300 80ae 	bgt.w	800b76c <_dtoa_r+0x894>
 800b610:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b612:	2a00      	cmp	r2, #0
 800b614:	f000 80a6 	beq.w	800b764 <_dtoa_r+0x88c>
 800b618:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b61c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b61e:	9f06      	ldr	r7, [sp, #24]
 800b620:	9a06      	ldr	r2, [sp, #24]
 800b622:	2101      	movs	r1, #1
 800b624:	441a      	add	r2, r3
 800b626:	9206      	str	r2, [sp, #24]
 800b628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b62a:	4628      	mov	r0, r5
 800b62c:	441a      	add	r2, r3
 800b62e:	9209      	str	r2, [sp, #36]	; 0x24
 800b630:	f000 fb50 	bl	800bcd4 <__i2b>
 800b634:	4606      	mov	r6, r0
 800b636:	2f00      	cmp	r7, #0
 800b638:	dd0c      	ble.n	800b654 <_dtoa_r+0x77c>
 800b63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	dd09      	ble.n	800b654 <_dtoa_r+0x77c>
 800b640:	42bb      	cmp	r3, r7
 800b642:	bfa8      	it	ge
 800b644:	463b      	movge	r3, r7
 800b646:	9a06      	ldr	r2, [sp, #24]
 800b648:	1aff      	subs	r7, r7, r3
 800b64a:	1ad2      	subs	r2, r2, r3
 800b64c:	9206      	str	r2, [sp, #24]
 800b64e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	9309      	str	r3, [sp, #36]	; 0x24
 800b654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b656:	b1f3      	cbz	r3, 800b696 <_dtoa_r+0x7be>
 800b658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	f000 80a8 	beq.w	800b7b0 <_dtoa_r+0x8d8>
 800b660:	2c00      	cmp	r4, #0
 800b662:	dd10      	ble.n	800b686 <_dtoa_r+0x7ae>
 800b664:	4631      	mov	r1, r6
 800b666:	4622      	mov	r2, r4
 800b668:	4628      	mov	r0, r5
 800b66a:	f000 fbf1 	bl	800be50 <__pow5mult>
 800b66e:	465a      	mov	r2, fp
 800b670:	4601      	mov	r1, r0
 800b672:	4606      	mov	r6, r0
 800b674:	4628      	mov	r0, r5
 800b676:	f000 fb43 	bl	800bd00 <__multiply>
 800b67a:	4680      	mov	r8, r0
 800b67c:	4659      	mov	r1, fp
 800b67e:	4628      	mov	r0, r5
 800b680:	f000 fa72 	bl	800bb68 <_Bfree>
 800b684:	46c3      	mov	fp, r8
 800b686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b688:	1b1a      	subs	r2, r3, r4
 800b68a:	d004      	beq.n	800b696 <_dtoa_r+0x7be>
 800b68c:	4659      	mov	r1, fp
 800b68e:	4628      	mov	r0, r5
 800b690:	f000 fbde 	bl	800be50 <__pow5mult>
 800b694:	4683      	mov	fp, r0
 800b696:	2101      	movs	r1, #1
 800b698:	4628      	mov	r0, r5
 800b69a:	f000 fb1b 	bl	800bcd4 <__i2b>
 800b69e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f340 8086 	ble.w	800b7b4 <_dtoa_r+0x8dc>
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	4601      	mov	r1, r0
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	f000 fbcf 	bl	800be50 <__pow5mult>
 800b6b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	dd7f      	ble.n	800b7ba <_dtoa_r+0x8e2>
 800b6ba:	f04f 0800 	mov.w	r8, #0
 800b6be:	6923      	ldr	r3, [r4, #16]
 800b6c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6c4:	6918      	ldr	r0, [r3, #16]
 800b6c6:	f000 fab7 	bl	800bc38 <__hi0bits>
 800b6ca:	f1c0 0020 	rsb	r0, r0, #32
 800b6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d0:	4418      	add	r0, r3
 800b6d2:	f010 001f 	ands.w	r0, r0, #31
 800b6d6:	f000 8092 	beq.w	800b7fe <_dtoa_r+0x926>
 800b6da:	f1c0 0320 	rsb	r3, r0, #32
 800b6de:	2b04      	cmp	r3, #4
 800b6e0:	f340 808a 	ble.w	800b7f8 <_dtoa_r+0x920>
 800b6e4:	f1c0 001c 	rsb	r0, r0, #28
 800b6e8:	9b06      	ldr	r3, [sp, #24]
 800b6ea:	4407      	add	r7, r0
 800b6ec:	4403      	add	r3, r0
 800b6ee:	9306      	str	r3, [sp, #24]
 800b6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f2:	4403      	add	r3, r0
 800b6f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6f6:	9b06      	ldr	r3, [sp, #24]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	dd05      	ble.n	800b708 <_dtoa_r+0x830>
 800b6fc:	4659      	mov	r1, fp
 800b6fe:	461a      	mov	r2, r3
 800b700:	4628      	mov	r0, r5
 800b702:	f000 fbff 	bl	800bf04 <__lshift>
 800b706:	4683      	mov	fp, r0
 800b708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	dd05      	ble.n	800b71a <_dtoa_r+0x842>
 800b70e:	4621      	mov	r1, r4
 800b710:	461a      	mov	r2, r3
 800b712:	4628      	mov	r0, r5
 800b714:	f000 fbf6 	bl	800bf04 <__lshift>
 800b718:	4604      	mov	r4, r0
 800b71a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d070      	beq.n	800b802 <_dtoa_r+0x92a>
 800b720:	4621      	mov	r1, r4
 800b722:	4658      	mov	r0, fp
 800b724:	f000 fc5e 	bl	800bfe4 <__mcmp>
 800b728:	2800      	cmp	r0, #0
 800b72a:	da6a      	bge.n	800b802 <_dtoa_r+0x92a>
 800b72c:	2300      	movs	r3, #0
 800b72e:	4659      	mov	r1, fp
 800b730:	220a      	movs	r2, #10
 800b732:	4628      	mov	r0, r5
 800b734:	f000 fa3a 	bl	800bbac <__multadd>
 800b738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b73a:	4683      	mov	fp, r0
 800b73c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 8194 	beq.w	800ba6e <_dtoa_r+0xb96>
 800b746:	4631      	mov	r1, r6
 800b748:	2300      	movs	r3, #0
 800b74a:	220a      	movs	r2, #10
 800b74c:	4628      	mov	r0, r5
 800b74e:	f000 fa2d 	bl	800bbac <__multadd>
 800b752:	f1b9 0f00 	cmp.w	r9, #0
 800b756:	4606      	mov	r6, r0
 800b758:	f300 8093 	bgt.w	800b882 <_dtoa_r+0x9aa>
 800b75c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b75e:	2b02      	cmp	r3, #2
 800b760:	dc57      	bgt.n	800b812 <_dtoa_r+0x93a>
 800b762:	e08e      	b.n	800b882 <_dtoa_r+0x9aa>
 800b764:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b766:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b76a:	e757      	b.n	800b61c <_dtoa_r+0x744>
 800b76c:	9b08      	ldr	r3, [sp, #32]
 800b76e:	1e5c      	subs	r4, r3, #1
 800b770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b772:	42a3      	cmp	r3, r4
 800b774:	bfb7      	itett	lt
 800b776:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b778:	1b1c      	subge	r4, r3, r4
 800b77a:	1ae2      	sublt	r2, r4, r3
 800b77c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b77e:	bfbe      	ittt	lt
 800b780:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b782:	189b      	addlt	r3, r3, r2
 800b784:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b786:	9b08      	ldr	r3, [sp, #32]
 800b788:	bfb8      	it	lt
 800b78a:	2400      	movlt	r4, #0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bfbb      	ittet	lt
 800b790:	9b06      	ldrlt	r3, [sp, #24]
 800b792:	9a08      	ldrlt	r2, [sp, #32]
 800b794:	9f06      	ldrge	r7, [sp, #24]
 800b796:	1a9f      	sublt	r7, r3, r2
 800b798:	bfac      	ite	ge
 800b79a:	9b08      	ldrge	r3, [sp, #32]
 800b79c:	2300      	movlt	r3, #0
 800b79e:	e73f      	b.n	800b620 <_dtoa_r+0x748>
 800b7a0:	3fe00000 	.word	0x3fe00000
 800b7a4:	40240000 	.word	0x40240000
 800b7a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b7aa:	9f06      	ldr	r7, [sp, #24]
 800b7ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b7ae:	e742      	b.n	800b636 <_dtoa_r+0x75e>
 800b7b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7b2:	e76b      	b.n	800b68c <_dtoa_r+0x7b4>
 800b7b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	dc19      	bgt.n	800b7ee <_dtoa_r+0x916>
 800b7ba:	9b04      	ldr	r3, [sp, #16]
 800b7bc:	b9bb      	cbnz	r3, 800b7ee <_dtoa_r+0x916>
 800b7be:	9b05      	ldr	r3, [sp, #20]
 800b7c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7c4:	b99b      	cbnz	r3, 800b7ee <_dtoa_r+0x916>
 800b7c6:	9b05      	ldr	r3, [sp, #20]
 800b7c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7cc:	0d1b      	lsrs	r3, r3, #20
 800b7ce:	051b      	lsls	r3, r3, #20
 800b7d0:	b183      	cbz	r3, 800b7f4 <_dtoa_r+0x91c>
 800b7d2:	f04f 0801 	mov.w	r8, #1
 800b7d6:	9b06      	ldr	r3, [sp, #24]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	9306      	str	r3, [sp, #24]
 800b7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7de:	3301      	adds	r3, #1
 800b7e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f47f af6a 	bne.w	800b6be <_dtoa_r+0x7e6>
 800b7ea:	2001      	movs	r0, #1
 800b7ec:	e76f      	b.n	800b6ce <_dtoa_r+0x7f6>
 800b7ee:	f04f 0800 	mov.w	r8, #0
 800b7f2:	e7f6      	b.n	800b7e2 <_dtoa_r+0x90a>
 800b7f4:	4698      	mov	r8, r3
 800b7f6:	e7f4      	b.n	800b7e2 <_dtoa_r+0x90a>
 800b7f8:	f43f af7d 	beq.w	800b6f6 <_dtoa_r+0x81e>
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	301c      	adds	r0, #28
 800b800:	e772      	b.n	800b6e8 <_dtoa_r+0x810>
 800b802:	9b08      	ldr	r3, [sp, #32]
 800b804:	2b00      	cmp	r3, #0
 800b806:	dc36      	bgt.n	800b876 <_dtoa_r+0x99e>
 800b808:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	dd33      	ble.n	800b876 <_dtoa_r+0x99e>
 800b80e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b812:	f1b9 0f00 	cmp.w	r9, #0
 800b816:	d10d      	bne.n	800b834 <_dtoa_r+0x95c>
 800b818:	4621      	mov	r1, r4
 800b81a:	464b      	mov	r3, r9
 800b81c:	2205      	movs	r2, #5
 800b81e:	4628      	mov	r0, r5
 800b820:	f000 f9c4 	bl	800bbac <__multadd>
 800b824:	4601      	mov	r1, r0
 800b826:	4604      	mov	r4, r0
 800b828:	4658      	mov	r0, fp
 800b82a:	f000 fbdb 	bl	800bfe4 <__mcmp>
 800b82e:	2800      	cmp	r0, #0
 800b830:	f73f adb8 	bgt.w	800b3a4 <_dtoa_r+0x4cc>
 800b834:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b836:	9f03      	ldr	r7, [sp, #12]
 800b838:	ea6f 0a03 	mvn.w	sl, r3
 800b83c:	f04f 0800 	mov.w	r8, #0
 800b840:	4621      	mov	r1, r4
 800b842:	4628      	mov	r0, r5
 800b844:	f000 f990 	bl	800bb68 <_Bfree>
 800b848:	2e00      	cmp	r6, #0
 800b84a:	f43f aea7 	beq.w	800b59c <_dtoa_r+0x6c4>
 800b84e:	f1b8 0f00 	cmp.w	r8, #0
 800b852:	d005      	beq.n	800b860 <_dtoa_r+0x988>
 800b854:	45b0      	cmp	r8, r6
 800b856:	d003      	beq.n	800b860 <_dtoa_r+0x988>
 800b858:	4641      	mov	r1, r8
 800b85a:	4628      	mov	r0, r5
 800b85c:	f000 f984 	bl	800bb68 <_Bfree>
 800b860:	4631      	mov	r1, r6
 800b862:	4628      	mov	r0, r5
 800b864:	f000 f980 	bl	800bb68 <_Bfree>
 800b868:	e698      	b.n	800b59c <_dtoa_r+0x6c4>
 800b86a:	2400      	movs	r4, #0
 800b86c:	4626      	mov	r6, r4
 800b86e:	e7e1      	b.n	800b834 <_dtoa_r+0x95c>
 800b870:	46c2      	mov	sl, r8
 800b872:	4626      	mov	r6, r4
 800b874:	e596      	b.n	800b3a4 <_dtoa_r+0x4cc>
 800b876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 80fd 	beq.w	800ba7c <_dtoa_r+0xba4>
 800b882:	2f00      	cmp	r7, #0
 800b884:	dd05      	ble.n	800b892 <_dtoa_r+0x9ba>
 800b886:	4631      	mov	r1, r6
 800b888:	463a      	mov	r2, r7
 800b88a:	4628      	mov	r0, r5
 800b88c:	f000 fb3a 	bl	800bf04 <__lshift>
 800b890:	4606      	mov	r6, r0
 800b892:	f1b8 0f00 	cmp.w	r8, #0
 800b896:	d05c      	beq.n	800b952 <_dtoa_r+0xa7a>
 800b898:	4628      	mov	r0, r5
 800b89a:	6871      	ldr	r1, [r6, #4]
 800b89c:	f000 f924 	bl	800bae8 <_Balloc>
 800b8a0:	4607      	mov	r7, r0
 800b8a2:	b928      	cbnz	r0, 800b8b0 <_dtoa_r+0x9d8>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b8aa:	4b7f      	ldr	r3, [pc, #508]	; (800baa8 <_dtoa_r+0xbd0>)
 800b8ac:	f7ff bb28 	b.w	800af00 <_dtoa_r+0x28>
 800b8b0:	6932      	ldr	r2, [r6, #16]
 800b8b2:	f106 010c 	add.w	r1, r6, #12
 800b8b6:	3202      	adds	r2, #2
 800b8b8:	0092      	lsls	r2, r2, #2
 800b8ba:	300c      	adds	r0, #12
 800b8bc:	f7fe fdd4 	bl	800a468 <memcpy>
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	4639      	mov	r1, r7
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	f000 fb1d 	bl	800bf04 <__lshift>
 800b8ca:	46b0      	mov	r8, r6
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	9b03      	ldr	r3, [sp, #12]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	9308      	str	r3, [sp, #32]
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	444b      	add	r3, r9
 800b8d8:	930a      	str	r3, [sp, #40]	; 0x28
 800b8da:	9b04      	ldr	r3, [sp, #16]
 800b8dc:	f003 0301 	and.w	r3, r3, #1
 800b8e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e2:	9b08      	ldr	r3, [sp, #32]
 800b8e4:	4621      	mov	r1, r4
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	4658      	mov	r0, fp
 800b8ea:	9304      	str	r3, [sp, #16]
 800b8ec:	f7ff fa66 	bl	800adbc <quorem>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	4641      	mov	r1, r8
 800b8f4:	3330      	adds	r3, #48	; 0x30
 800b8f6:	9006      	str	r0, [sp, #24]
 800b8f8:	4658      	mov	r0, fp
 800b8fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8fc:	f000 fb72 	bl	800bfe4 <__mcmp>
 800b900:	4632      	mov	r2, r6
 800b902:	4681      	mov	r9, r0
 800b904:	4621      	mov	r1, r4
 800b906:	4628      	mov	r0, r5
 800b908:	f000 fb88 	bl	800c01c <__mdiff>
 800b90c:	68c2      	ldr	r2, [r0, #12]
 800b90e:	4607      	mov	r7, r0
 800b910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b912:	bb02      	cbnz	r2, 800b956 <_dtoa_r+0xa7e>
 800b914:	4601      	mov	r1, r0
 800b916:	4658      	mov	r0, fp
 800b918:	f000 fb64 	bl	800bfe4 <__mcmp>
 800b91c:	4602      	mov	r2, r0
 800b91e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b920:	4639      	mov	r1, r7
 800b922:	4628      	mov	r0, r5
 800b924:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b928:	f000 f91e 	bl	800bb68 <_Bfree>
 800b92c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b92e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b930:	9f08      	ldr	r7, [sp, #32]
 800b932:	ea43 0102 	orr.w	r1, r3, r2
 800b936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b938:	430b      	orrs	r3, r1
 800b93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b93c:	d10d      	bne.n	800b95a <_dtoa_r+0xa82>
 800b93e:	2b39      	cmp	r3, #57	; 0x39
 800b940:	d029      	beq.n	800b996 <_dtoa_r+0xabe>
 800b942:	f1b9 0f00 	cmp.w	r9, #0
 800b946:	dd01      	ble.n	800b94c <_dtoa_r+0xa74>
 800b948:	9b06      	ldr	r3, [sp, #24]
 800b94a:	3331      	adds	r3, #49	; 0x31
 800b94c:	9a04      	ldr	r2, [sp, #16]
 800b94e:	7013      	strb	r3, [r2, #0]
 800b950:	e776      	b.n	800b840 <_dtoa_r+0x968>
 800b952:	4630      	mov	r0, r6
 800b954:	e7b9      	b.n	800b8ca <_dtoa_r+0x9f2>
 800b956:	2201      	movs	r2, #1
 800b958:	e7e2      	b.n	800b920 <_dtoa_r+0xa48>
 800b95a:	f1b9 0f00 	cmp.w	r9, #0
 800b95e:	db06      	blt.n	800b96e <_dtoa_r+0xa96>
 800b960:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b962:	ea41 0909 	orr.w	r9, r1, r9
 800b966:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b968:	ea59 0101 	orrs.w	r1, r9, r1
 800b96c:	d120      	bne.n	800b9b0 <_dtoa_r+0xad8>
 800b96e:	2a00      	cmp	r2, #0
 800b970:	ddec      	ble.n	800b94c <_dtoa_r+0xa74>
 800b972:	4659      	mov	r1, fp
 800b974:	2201      	movs	r2, #1
 800b976:	4628      	mov	r0, r5
 800b978:	9308      	str	r3, [sp, #32]
 800b97a:	f000 fac3 	bl	800bf04 <__lshift>
 800b97e:	4621      	mov	r1, r4
 800b980:	4683      	mov	fp, r0
 800b982:	f000 fb2f 	bl	800bfe4 <__mcmp>
 800b986:	2800      	cmp	r0, #0
 800b988:	9b08      	ldr	r3, [sp, #32]
 800b98a:	dc02      	bgt.n	800b992 <_dtoa_r+0xaba>
 800b98c:	d1de      	bne.n	800b94c <_dtoa_r+0xa74>
 800b98e:	07da      	lsls	r2, r3, #31
 800b990:	d5dc      	bpl.n	800b94c <_dtoa_r+0xa74>
 800b992:	2b39      	cmp	r3, #57	; 0x39
 800b994:	d1d8      	bne.n	800b948 <_dtoa_r+0xa70>
 800b996:	2339      	movs	r3, #57	; 0x39
 800b998:	9a04      	ldr	r2, [sp, #16]
 800b99a:	7013      	strb	r3, [r2, #0]
 800b99c:	463b      	mov	r3, r7
 800b99e:	461f      	mov	r7, r3
 800b9a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	2a39      	cmp	r2, #57	; 0x39
 800b9a8:	d050      	beq.n	800ba4c <_dtoa_r+0xb74>
 800b9aa:	3201      	adds	r2, #1
 800b9ac:	701a      	strb	r2, [r3, #0]
 800b9ae:	e747      	b.n	800b840 <_dtoa_r+0x968>
 800b9b0:	2a00      	cmp	r2, #0
 800b9b2:	dd03      	ble.n	800b9bc <_dtoa_r+0xae4>
 800b9b4:	2b39      	cmp	r3, #57	; 0x39
 800b9b6:	d0ee      	beq.n	800b996 <_dtoa_r+0xabe>
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	e7c7      	b.n	800b94c <_dtoa_r+0xa74>
 800b9bc:	9a08      	ldr	r2, [sp, #32]
 800b9be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b9c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b9c4:	428a      	cmp	r2, r1
 800b9c6:	d02a      	beq.n	800ba1e <_dtoa_r+0xb46>
 800b9c8:	4659      	mov	r1, fp
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	220a      	movs	r2, #10
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f000 f8ec 	bl	800bbac <__multadd>
 800b9d4:	45b0      	cmp	r8, r6
 800b9d6:	4683      	mov	fp, r0
 800b9d8:	f04f 0300 	mov.w	r3, #0
 800b9dc:	f04f 020a 	mov.w	r2, #10
 800b9e0:	4641      	mov	r1, r8
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	d107      	bne.n	800b9f6 <_dtoa_r+0xb1e>
 800b9e6:	f000 f8e1 	bl	800bbac <__multadd>
 800b9ea:	4680      	mov	r8, r0
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	9b08      	ldr	r3, [sp, #32]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	9308      	str	r3, [sp, #32]
 800b9f4:	e775      	b.n	800b8e2 <_dtoa_r+0xa0a>
 800b9f6:	f000 f8d9 	bl	800bbac <__multadd>
 800b9fa:	4631      	mov	r1, r6
 800b9fc:	4680      	mov	r8, r0
 800b9fe:	2300      	movs	r3, #0
 800ba00:	220a      	movs	r2, #10
 800ba02:	4628      	mov	r0, r5
 800ba04:	f000 f8d2 	bl	800bbac <__multadd>
 800ba08:	4606      	mov	r6, r0
 800ba0a:	e7f0      	b.n	800b9ee <_dtoa_r+0xb16>
 800ba0c:	f1b9 0f00 	cmp.w	r9, #0
 800ba10:	bfcc      	ite	gt
 800ba12:	464f      	movgt	r7, r9
 800ba14:	2701      	movle	r7, #1
 800ba16:	f04f 0800 	mov.w	r8, #0
 800ba1a:	9a03      	ldr	r2, [sp, #12]
 800ba1c:	4417      	add	r7, r2
 800ba1e:	4659      	mov	r1, fp
 800ba20:	2201      	movs	r2, #1
 800ba22:	4628      	mov	r0, r5
 800ba24:	9308      	str	r3, [sp, #32]
 800ba26:	f000 fa6d 	bl	800bf04 <__lshift>
 800ba2a:	4621      	mov	r1, r4
 800ba2c:	4683      	mov	fp, r0
 800ba2e:	f000 fad9 	bl	800bfe4 <__mcmp>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	dcb2      	bgt.n	800b99c <_dtoa_r+0xac4>
 800ba36:	d102      	bne.n	800ba3e <_dtoa_r+0xb66>
 800ba38:	9b08      	ldr	r3, [sp, #32]
 800ba3a:	07db      	lsls	r3, r3, #31
 800ba3c:	d4ae      	bmi.n	800b99c <_dtoa_r+0xac4>
 800ba3e:	463b      	mov	r3, r7
 800ba40:	461f      	mov	r7, r3
 800ba42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba46:	2a30      	cmp	r2, #48	; 0x30
 800ba48:	d0fa      	beq.n	800ba40 <_dtoa_r+0xb68>
 800ba4a:	e6f9      	b.n	800b840 <_dtoa_r+0x968>
 800ba4c:	9a03      	ldr	r2, [sp, #12]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d1a5      	bne.n	800b99e <_dtoa_r+0xac6>
 800ba52:	2331      	movs	r3, #49	; 0x31
 800ba54:	f10a 0a01 	add.w	sl, sl, #1
 800ba58:	e779      	b.n	800b94e <_dtoa_r+0xa76>
 800ba5a:	4b14      	ldr	r3, [pc, #80]	; (800baac <_dtoa_r+0xbd4>)
 800ba5c:	f7ff baa8 	b.w	800afb0 <_dtoa_r+0xd8>
 800ba60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f47f aa81 	bne.w	800af6a <_dtoa_r+0x92>
 800ba68:	4b11      	ldr	r3, [pc, #68]	; (800bab0 <_dtoa_r+0xbd8>)
 800ba6a:	f7ff baa1 	b.w	800afb0 <_dtoa_r+0xd8>
 800ba6e:	f1b9 0f00 	cmp.w	r9, #0
 800ba72:	dc03      	bgt.n	800ba7c <_dtoa_r+0xba4>
 800ba74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	f73f aecb 	bgt.w	800b812 <_dtoa_r+0x93a>
 800ba7c:	9f03      	ldr	r7, [sp, #12]
 800ba7e:	4621      	mov	r1, r4
 800ba80:	4658      	mov	r0, fp
 800ba82:	f7ff f99b 	bl	800adbc <quorem>
 800ba86:	9a03      	ldr	r2, [sp, #12]
 800ba88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ba8c:	f807 3b01 	strb.w	r3, [r7], #1
 800ba90:	1aba      	subs	r2, r7, r2
 800ba92:	4591      	cmp	r9, r2
 800ba94:	ddba      	ble.n	800ba0c <_dtoa_r+0xb34>
 800ba96:	4659      	mov	r1, fp
 800ba98:	2300      	movs	r3, #0
 800ba9a:	220a      	movs	r2, #10
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	f000 f885 	bl	800bbac <__multadd>
 800baa2:	4683      	mov	fp, r0
 800baa4:	e7eb      	b.n	800ba7e <_dtoa_r+0xba6>
 800baa6:	bf00      	nop
 800baa8:	0800d477 	.word	0x0800d477
 800baac:	0800d3d4 	.word	0x0800d3d4
 800bab0:	0800d3f8 	.word	0x0800d3f8

0800bab4 <_localeconv_r>:
 800bab4:	4800      	ldr	r0, [pc, #0]	; (800bab8 <_localeconv_r+0x4>)
 800bab6:	4770      	bx	lr
 800bab8:	200002f4 	.word	0x200002f4

0800babc <malloc>:
 800babc:	4b02      	ldr	r3, [pc, #8]	; (800bac8 <malloc+0xc>)
 800babe:	4601      	mov	r1, r0
 800bac0:	6818      	ldr	r0, [r3, #0]
 800bac2:	f000 bc0f 	b.w	800c2e4 <_malloc_r>
 800bac6:	bf00      	nop
 800bac8:	200001a0 	.word	0x200001a0

0800bacc <memchr>:
 800bacc:	4603      	mov	r3, r0
 800bace:	b510      	push	{r4, lr}
 800bad0:	b2c9      	uxtb	r1, r1
 800bad2:	4402      	add	r2, r0
 800bad4:	4293      	cmp	r3, r2
 800bad6:	4618      	mov	r0, r3
 800bad8:	d101      	bne.n	800bade <memchr+0x12>
 800bada:	2000      	movs	r0, #0
 800badc:	e003      	b.n	800bae6 <memchr+0x1a>
 800bade:	7804      	ldrb	r4, [r0, #0]
 800bae0:	3301      	adds	r3, #1
 800bae2:	428c      	cmp	r4, r1
 800bae4:	d1f6      	bne.n	800bad4 <memchr+0x8>
 800bae6:	bd10      	pop	{r4, pc}

0800bae8 <_Balloc>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800baec:	4604      	mov	r4, r0
 800baee:	460d      	mov	r5, r1
 800baf0:	b976      	cbnz	r6, 800bb10 <_Balloc+0x28>
 800baf2:	2010      	movs	r0, #16
 800baf4:	f7ff ffe2 	bl	800babc <malloc>
 800baf8:	4602      	mov	r2, r0
 800bafa:	6260      	str	r0, [r4, #36]	; 0x24
 800bafc:	b920      	cbnz	r0, 800bb08 <_Balloc+0x20>
 800bafe:	2166      	movs	r1, #102	; 0x66
 800bb00:	4b17      	ldr	r3, [pc, #92]	; (800bb60 <_Balloc+0x78>)
 800bb02:	4818      	ldr	r0, [pc, #96]	; (800bb64 <_Balloc+0x7c>)
 800bb04:	f000 fdce 	bl	800c6a4 <__assert_func>
 800bb08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb0c:	6006      	str	r6, [r0, #0]
 800bb0e:	60c6      	str	r6, [r0, #12]
 800bb10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb12:	68f3      	ldr	r3, [r6, #12]
 800bb14:	b183      	cbz	r3, 800bb38 <_Balloc+0x50>
 800bb16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb1e:	b9b8      	cbnz	r0, 800bb50 <_Balloc+0x68>
 800bb20:	2101      	movs	r1, #1
 800bb22:	fa01 f605 	lsl.w	r6, r1, r5
 800bb26:	1d72      	adds	r2, r6, #5
 800bb28:	4620      	mov	r0, r4
 800bb2a:	0092      	lsls	r2, r2, #2
 800bb2c:	f000 fb5e 	bl	800c1ec <_calloc_r>
 800bb30:	b160      	cbz	r0, 800bb4c <_Balloc+0x64>
 800bb32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb36:	e00e      	b.n	800bb56 <_Balloc+0x6e>
 800bb38:	2221      	movs	r2, #33	; 0x21
 800bb3a:	2104      	movs	r1, #4
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f000 fb55 	bl	800c1ec <_calloc_r>
 800bb42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb44:	60f0      	str	r0, [r6, #12]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1e4      	bne.n	800bb16 <_Balloc+0x2e>
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	bd70      	pop	{r4, r5, r6, pc}
 800bb50:	6802      	ldr	r2, [r0, #0]
 800bb52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb56:	2300      	movs	r3, #0
 800bb58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb5c:	e7f7      	b.n	800bb4e <_Balloc+0x66>
 800bb5e:	bf00      	nop
 800bb60:	0800d405 	.word	0x0800d405
 800bb64:	0800d488 	.word	0x0800d488

0800bb68 <_Bfree>:
 800bb68:	b570      	push	{r4, r5, r6, lr}
 800bb6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb6c:	4605      	mov	r5, r0
 800bb6e:	460c      	mov	r4, r1
 800bb70:	b976      	cbnz	r6, 800bb90 <_Bfree+0x28>
 800bb72:	2010      	movs	r0, #16
 800bb74:	f7ff ffa2 	bl	800babc <malloc>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	6268      	str	r0, [r5, #36]	; 0x24
 800bb7c:	b920      	cbnz	r0, 800bb88 <_Bfree+0x20>
 800bb7e:	218a      	movs	r1, #138	; 0x8a
 800bb80:	4b08      	ldr	r3, [pc, #32]	; (800bba4 <_Bfree+0x3c>)
 800bb82:	4809      	ldr	r0, [pc, #36]	; (800bba8 <_Bfree+0x40>)
 800bb84:	f000 fd8e 	bl	800c6a4 <__assert_func>
 800bb88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb8c:	6006      	str	r6, [r0, #0]
 800bb8e:	60c6      	str	r6, [r0, #12]
 800bb90:	b13c      	cbz	r4, 800bba2 <_Bfree+0x3a>
 800bb92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb94:	6862      	ldr	r2, [r4, #4]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb9c:	6021      	str	r1, [r4, #0]
 800bb9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bba2:	bd70      	pop	{r4, r5, r6, pc}
 800bba4:	0800d405 	.word	0x0800d405
 800bba8:	0800d488 	.word	0x0800d488

0800bbac <__multadd>:
 800bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	4607      	mov	r7, r0
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	461e      	mov	r6, r3
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	690d      	ldr	r5, [r1, #16]
 800bbba:	f101 0c14 	add.w	ip, r1, #20
 800bbbe:	f8dc 3000 	ldr.w	r3, [ip]
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	b299      	uxth	r1, r3
 800bbc6:	fb02 6101 	mla	r1, r2, r1, r6
 800bbca:	0c1e      	lsrs	r6, r3, #16
 800bbcc:	0c0b      	lsrs	r3, r1, #16
 800bbce:	fb02 3306 	mla	r3, r2, r6, r3
 800bbd2:	b289      	uxth	r1, r1
 800bbd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bbd8:	4285      	cmp	r5, r0
 800bbda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bbde:	f84c 1b04 	str.w	r1, [ip], #4
 800bbe2:	dcec      	bgt.n	800bbbe <__multadd+0x12>
 800bbe4:	b30e      	cbz	r6, 800bc2a <__multadd+0x7e>
 800bbe6:	68a3      	ldr	r3, [r4, #8]
 800bbe8:	42ab      	cmp	r3, r5
 800bbea:	dc19      	bgt.n	800bc20 <__multadd+0x74>
 800bbec:	6861      	ldr	r1, [r4, #4]
 800bbee:	4638      	mov	r0, r7
 800bbf0:	3101      	adds	r1, #1
 800bbf2:	f7ff ff79 	bl	800bae8 <_Balloc>
 800bbf6:	4680      	mov	r8, r0
 800bbf8:	b928      	cbnz	r0, 800bc06 <__multadd+0x5a>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	21b5      	movs	r1, #181	; 0xb5
 800bbfe:	4b0c      	ldr	r3, [pc, #48]	; (800bc30 <__multadd+0x84>)
 800bc00:	480c      	ldr	r0, [pc, #48]	; (800bc34 <__multadd+0x88>)
 800bc02:	f000 fd4f 	bl	800c6a4 <__assert_func>
 800bc06:	6922      	ldr	r2, [r4, #16]
 800bc08:	f104 010c 	add.w	r1, r4, #12
 800bc0c:	3202      	adds	r2, #2
 800bc0e:	0092      	lsls	r2, r2, #2
 800bc10:	300c      	adds	r0, #12
 800bc12:	f7fe fc29 	bl	800a468 <memcpy>
 800bc16:	4621      	mov	r1, r4
 800bc18:	4638      	mov	r0, r7
 800bc1a:	f7ff ffa5 	bl	800bb68 <_Bfree>
 800bc1e:	4644      	mov	r4, r8
 800bc20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc24:	3501      	adds	r5, #1
 800bc26:	615e      	str	r6, [r3, #20]
 800bc28:	6125      	str	r5, [r4, #16]
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc30:	0800d477 	.word	0x0800d477
 800bc34:	0800d488 	.word	0x0800d488

0800bc38 <__hi0bits>:
 800bc38:	0c02      	lsrs	r2, r0, #16
 800bc3a:	0412      	lsls	r2, r2, #16
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	b9ca      	cbnz	r2, 800bc74 <__hi0bits+0x3c>
 800bc40:	0403      	lsls	r3, r0, #16
 800bc42:	2010      	movs	r0, #16
 800bc44:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bc48:	bf04      	itt	eq
 800bc4a:	021b      	lsleq	r3, r3, #8
 800bc4c:	3008      	addeq	r0, #8
 800bc4e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bc52:	bf04      	itt	eq
 800bc54:	011b      	lsleq	r3, r3, #4
 800bc56:	3004      	addeq	r0, #4
 800bc58:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bc5c:	bf04      	itt	eq
 800bc5e:	009b      	lsleq	r3, r3, #2
 800bc60:	3002      	addeq	r0, #2
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	db05      	blt.n	800bc72 <__hi0bits+0x3a>
 800bc66:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bc6a:	f100 0001 	add.w	r0, r0, #1
 800bc6e:	bf08      	it	eq
 800bc70:	2020      	moveq	r0, #32
 800bc72:	4770      	bx	lr
 800bc74:	2000      	movs	r0, #0
 800bc76:	e7e5      	b.n	800bc44 <__hi0bits+0xc>

0800bc78 <__lo0bits>:
 800bc78:	6803      	ldr	r3, [r0, #0]
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	f013 0007 	ands.w	r0, r3, #7
 800bc80:	d00b      	beq.n	800bc9a <__lo0bits+0x22>
 800bc82:	07d9      	lsls	r1, r3, #31
 800bc84:	d421      	bmi.n	800bcca <__lo0bits+0x52>
 800bc86:	0798      	lsls	r0, r3, #30
 800bc88:	bf49      	itett	mi
 800bc8a:	085b      	lsrmi	r3, r3, #1
 800bc8c:	089b      	lsrpl	r3, r3, #2
 800bc8e:	2001      	movmi	r0, #1
 800bc90:	6013      	strmi	r3, [r2, #0]
 800bc92:	bf5c      	itt	pl
 800bc94:	2002      	movpl	r0, #2
 800bc96:	6013      	strpl	r3, [r2, #0]
 800bc98:	4770      	bx	lr
 800bc9a:	b299      	uxth	r1, r3
 800bc9c:	b909      	cbnz	r1, 800bca2 <__lo0bits+0x2a>
 800bc9e:	2010      	movs	r0, #16
 800bca0:	0c1b      	lsrs	r3, r3, #16
 800bca2:	b2d9      	uxtb	r1, r3
 800bca4:	b909      	cbnz	r1, 800bcaa <__lo0bits+0x32>
 800bca6:	3008      	adds	r0, #8
 800bca8:	0a1b      	lsrs	r3, r3, #8
 800bcaa:	0719      	lsls	r1, r3, #28
 800bcac:	bf04      	itt	eq
 800bcae:	091b      	lsreq	r3, r3, #4
 800bcb0:	3004      	addeq	r0, #4
 800bcb2:	0799      	lsls	r1, r3, #30
 800bcb4:	bf04      	itt	eq
 800bcb6:	089b      	lsreq	r3, r3, #2
 800bcb8:	3002      	addeq	r0, #2
 800bcba:	07d9      	lsls	r1, r3, #31
 800bcbc:	d403      	bmi.n	800bcc6 <__lo0bits+0x4e>
 800bcbe:	085b      	lsrs	r3, r3, #1
 800bcc0:	f100 0001 	add.w	r0, r0, #1
 800bcc4:	d003      	beq.n	800bcce <__lo0bits+0x56>
 800bcc6:	6013      	str	r3, [r2, #0]
 800bcc8:	4770      	bx	lr
 800bcca:	2000      	movs	r0, #0
 800bccc:	4770      	bx	lr
 800bcce:	2020      	movs	r0, #32
 800bcd0:	4770      	bx	lr
	...

0800bcd4 <__i2b>:
 800bcd4:	b510      	push	{r4, lr}
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	2101      	movs	r1, #1
 800bcda:	f7ff ff05 	bl	800bae8 <_Balloc>
 800bcde:	4602      	mov	r2, r0
 800bce0:	b928      	cbnz	r0, 800bcee <__i2b+0x1a>
 800bce2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bce6:	4b04      	ldr	r3, [pc, #16]	; (800bcf8 <__i2b+0x24>)
 800bce8:	4804      	ldr	r0, [pc, #16]	; (800bcfc <__i2b+0x28>)
 800bcea:	f000 fcdb 	bl	800c6a4 <__assert_func>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	6144      	str	r4, [r0, #20]
 800bcf2:	6103      	str	r3, [r0, #16]
 800bcf4:	bd10      	pop	{r4, pc}
 800bcf6:	bf00      	nop
 800bcf8:	0800d477 	.word	0x0800d477
 800bcfc:	0800d488 	.word	0x0800d488

0800bd00 <__multiply>:
 800bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd04:	4691      	mov	r9, r2
 800bd06:	690a      	ldr	r2, [r1, #16]
 800bd08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd0c:	460c      	mov	r4, r1
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	bfbe      	ittt	lt
 800bd12:	460b      	movlt	r3, r1
 800bd14:	464c      	movlt	r4, r9
 800bd16:	4699      	movlt	r9, r3
 800bd18:	6927      	ldr	r7, [r4, #16]
 800bd1a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd1e:	68a3      	ldr	r3, [r4, #8]
 800bd20:	6861      	ldr	r1, [r4, #4]
 800bd22:	eb07 060a 	add.w	r6, r7, sl
 800bd26:	42b3      	cmp	r3, r6
 800bd28:	b085      	sub	sp, #20
 800bd2a:	bfb8      	it	lt
 800bd2c:	3101      	addlt	r1, #1
 800bd2e:	f7ff fedb 	bl	800bae8 <_Balloc>
 800bd32:	b930      	cbnz	r0, 800bd42 <__multiply+0x42>
 800bd34:	4602      	mov	r2, r0
 800bd36:	f240 115d 	movw	r1, #349	; 0x15d
 800bd3a:	4b43      	ldr	r3, [pc, #268]	; (800be48 <__multiply+0x148>)
 800bd3c:	4843      	ldr	r0, [pc, #268]	; (800be4c <__multiply+0x14c>)
 800bd3e:	f000 fcb1 	bl	800c6a4 <__assert_func>
 800bd42:	f100 0514 	add.w	r5, r0, #20
 800bd46:	462b      	mov	r3, r5
 800bd48:	2200      	movs	r2, #0
 800bd4a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd4e:	4543      	cmp	r3, r8
 800bd50:	d321      	bcc.n	800bd96 <__multiply+0x96>
 800bd52:	f104 0314 	add.w	r3, r4, #20
 800bd56:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd5a:	f109 0314 	add.w	r3, r9, #20
 800bd5e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd62:	9202      	str	r2, [sp, #8]
 800bd64:	1b3a      	subs	r2, r7, r4
 800bd66:	3a15      	subs	r2, #21
 800bd68:	f022 0203 	bic.w	r2, r2, #3
 800bd6c:	3204      	adds	r2, #4
 800bd6e:	f104 0115 	add.w	r1, r4, #21
 800bd72:	428f      	cmp	r7, r1
 800bd74:	bf38      	it	cc
 800bd76:	2204      	movcc	r2, #4
 800bd78:	9201      	str	r2, [sp, #4]
 800bd7a:	9a02      	ldr	r2, [sp, #8]
 800bd7c:	9303      	str	r3, [sp, #12]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d80c      	bhi.n	800bd9c <__multiply+0x9c>
 800bd82:	2e00      	cmp	r6, #0
 800bd84:	dd03      	ble.n	800bd8e <__multiply+0x8e>
 800bd86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d059      	beq.n	800be42 <__multiply+0x142>
 800bd8e:	6106      	str	r6, [r0, #16]
 800bd90:	b005      	add	sp, #20
 800bd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd96:	f843 2b04 	str.w	r2, [r3], #4
 800bd9a:	e7d8      	b.n	800bd4e <__multiply+0x4e>
 800bd9c:	f8b3 a000 	ldrh.w	sl, [r3]
 800bda0:	f1ba 0f00 	cmp.w	sl, #0
 800bda4:	d023      	beq.n	800bdee <__multiply+0xee>
 800bda6:	46a9      	mov	r9, r5
 800bda8:	f04f 0c00 	mov.w	ip, #0
 800bdac:	f104 0e14 	add.w	lr, r4, #20
 800bdb0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bdb4:	f8d9 1000 	ldr.w	r1, [r9]
 800bdb8:	fa1f fb82 	uxth.w	fp, r2
 800bdbc:	b289      	uxth	r1, r1
 800bdbe:	fb0a 110b 	mla	r1, sl, fp, r1
 800bdc2:	4461      	add	r1, ip
 800bdc4:	f8d9 c000 	ldr.w	ip, [r9]
 800bdc8:	0c12      	lsrs	r2, r2, #16
 800bdca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bdce:	fb0a c202 	mla	r2, sl, r2, ip
 800bdd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bdd6:	b289      	uxth	r1, r1
 800bdd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bddc:	4577      	cmp	r7, lr
 800bdde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bde2:	f849 1b04 	str.w	r1, [r9], #4
 800bde6:	d8e3      	bhi.n	800bdb0 <__multiply+0xb0>
 800bde8:	9a01      	ldr	r2, [sp, #4]
 800bdea:	f845 c002 	str.w	ip, [r5, r2]
 800bdee:	9a03      	ldr	r2, [sp, #12]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bdf6:	f1b9 0f00 	cmp.w	r9, #0
 800bdfa:	d020      	beq.n	800be3e <__multiply+0x13e>
 800bdfc:	46ae      	mov	lr, r5
 800bdfe:	f04f 0a00 	mov.w	sl, #0
 800be02:	6829      	ldr	r1, [r5, #0]
 800be04:	f104 0c14 	add.w	ip, r4, #20
 800be08:	f8bc b000 	ldrh.w	fp, [ip]
 800be0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be10:	b289      	uxth	r1, r1
 800be12:	fb09 220b 	mla	r2, r9, fp, r2
 800be16:	4492      	add	sl, r2
 800be18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800be1c:	f84e 1b04 	str.w	r1, [lr], #4
 800be20:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be24:	f8be 1000 	ldrh.w	r1, [lr]
 800be28:	0c12      	lsrs	r2, r2, #16
 800be2a:	fb09 1102 	mla	r1, r9, r2, r1
 800be2e:	4567      	cmp	r7, ip
 800be30:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be38:	d8e6      	bhi.n	800be08 <__multiply+0x108>
 800be3a:	9a01      	ldr	r2, [sp, #4]
 800be3c:	50a9      	str	r1, [r5, r2]
 800be3e:	3504      	adds	r5, #4
 800be40:	e79b      	b.n	800bd7a <__multiply+0x7a>
 800be42:	3e01      	subs	r6, #1
 800be44:	e79d      	b.n	800bd82 <__multiply+0x82>
 800be46:	bf00      	nop
 800be48:	0800d477 	.word	0x0800d477
 800be4c:	0800d488 	.word	0x0800d488

0800be50 <__pow5mult>:
 800be50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be54:	4615      	mov	r5, r2
 800be56:	f012 0203 	ands.w	r2, r2, #3
 800be5a:	4606      	mov	r6, r0
 800be5c:	460f      	mov	r7, r1
 800be5e:	d007      	beq.n	800be70 <__pow5mult+0x20>
 800be60:	4c25      	ldr	r4, [pc, #148]	; (800bef8 <__pow5mult+0xa8>)
 800be62:	3a01      	subs	r2, #1
 800be64:	2300      	movs	r3, #0
 800be66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be6a:	f7ff fe9f 	bl	800bbac <__multadd>
 800be6e:	4607      	mov	r7, r0
 800be70:	10ad      	asrs	r5, r5, #2
 800be72:	d03d      	beq.n	800bef0 <__pow5mult+0xa0>
 800be74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be76:	b97c      	cbnz	r4, 800be98 <__pow5mult+0x48>
 800be78:	2010      	movs	r0, #16
 800be7a:	f7ff fe1f 	bl	800babc <malloc>
 800be7e:	4602      	mov	r2, r0
 800be80:	6270      	str	r0, [r6, #36]	; 0x24
 800be82:	b928      	cbnz	r0, 800be90 <__pow5mult+0x40>
 800be84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be88:	4b1c      	ldr	r3, [pc, #112]	; (800befc <__pow5mult+0xac>)
 800be8a:	481d      	ldr	r0, [pc, #116]	; (800bf00 <__pow5mult+0xb0>)
 800be8c:	f000 fc0a 	bl	800c6a4 <__assert_func>
 800be90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be94:	6004      	str	r4, [r0, #0]
 800be96:	60c4      	str	r4, [r0, #12]
 800be98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bea0:	b94c      	cbnz	r4, 800beb6 <__pow5mult+0x66>
 800bea2:	f240 2171 	movw	r1, #625	; 0x271
 800bea6:	4630      	mov	r0, r6
 800bea8:	f7ff ff14 	bl	800bcd4 <__i2b>
 800beac:	2300      	movs	r3, #0
 800beae:	4604      	mov	r4, r0
 800beb0:	f8c8 0008 	str.w	r0, [r8, #8]
 800beb4:	6003      	str	r3, [r0, #0]
 800beb6:	f04f 0900 	mov.w	r9, #0
 800beba:	07eb      	lsls	r3, r5, #31
 800bebc:	d50a      	bpl.n	800bed4 <__pow5mult+0x84>
 800bebe:	4639      	mov	r1, r7
 800bec0:	4622      	mov	r2, r4
 800bec2:	4630      	mov	r0, r6
 800bec4:	f7ff ff1c 	bl	800bd00 <__multiply>
 800bec8:	4680      	mov	r8, r0
 800beca:	4639      	mov	r1, r7
 800becc:	4630      	mov	r0, r6
 800bece:	f7ff fe4b 	bl	800bb68 <_Bfree>
 800bed2:	4647      	mov	r7, r8
 800bed4:	106d      	asrs	r5, r5, #1
 800bed6:	d00b      	beq.n	800bef0 <__pow5mult+0xa0>
 800bed8:	6820      	ldr	r0, [r4, #0]
 800beda:	b938      	cbnz	r0, 800beec <__pow5mult+0x9c>
 800bedc:	4622      	mov	r2, r4
 800bede:	4621      	mov	r1, r4
 800bee0:	4630      	mov	r0, r6
 800bee2:	f7ff ff0d 	bl	800bd00 <__multiply>
 800bee6:	6020      	str	r0, [r4, #0]
 800bee8:	f8c0 9000 	str.w	r9, [r0]
 800beec:	4604      	mov	r4, r0
 800beee:	e7e4      	b.n	800beba <__pow5mult+0x6a>
 800bef0:	4638      	mov	r0, r7
 800bef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bef6:	bf00      	nop
 800bef8:	0800d5d8 	.word	0x0800d5d8
 800befc:	0800d405 	.word	0x0800d405
 800bf00:	0800d488 	.word	0x0800d488

0800bf04 <__lshift>:
 800bf04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf08:	460c      	mov	r4, r1
 800bf0a:	4607      	mov	r7, r0
 800bf0c:	4691      	mov	r9, r2
 800bf0e:	6923      	ldr	r3, [r4, #16]
 800bf10:	6849      	ldr	r1, [r1, #4]
 800bf12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf16:	68a3      	ldr	r3, [r4, #8]
 800bf18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf1c:	f108 0601 	add.w	r6, r8, #1
 800bf20:	42b3      	cmp	r3, r6
 800bf22:	db0b      	blt.n	800bf3c <__lshift+0x38>
 800bf24:	4638      	mov	r0, r7
 800bf26:	f7ff fddf 	bl	800bae8 <_Balloc>
 800bf2a:	4605      	mov	r5, r0
 800bf2c:	b948      	cbnz	r0, 800bf42 <__lshift+0x3e>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf34:	4b29      	ldr	r3, [pc, #164]	; (800bfdc <__lshift+0xd8>)
 800bf36:	482a      	ldr	r0, [pc, #168]	; (800bfe0 <__lshift+0xdc>)
 800bf38:	f000 fbb4 	bl	800c6a4 <__assert_func>
 800bf3c:	3101      	adds	r1, #1
 800bf3e:	005b      	lsls	r3, r3, #1
 800bf40:	e7ee      	b.n	800bf20 <__lshift+0x1c>
 800bf42:	2300      	movs	r3, #0
 800bf44:	f100 0114 	add.w	r1, r0, #20
 800bf48:	f100 0210 	add.w	r2, r0, #16
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	4553      	cmp	r3, sl
 800bf50:	db37      	blt.n	800bfc2 <__lshift+0xbe>
 800bf52:	6920      	ldr	r0, [r4, #16]
 800bf54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf58:	f104 0314 	add.w	r3, r4, #20
 800bf5c:	f019 091f 	ands.w	r9, r9, #31
 800bf60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf68:	d02f      	beq.n	800bfca <__lshift+0xc6>
 800bf6a:	468a      	mov	sl, r1
 800bf6c:	f04f 0c00 	mov.w	ip, #0
 800bf70:	f1c9 0e20 	rsb	lr, r9, #32
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	fa02 f209 	lsl.w	r2, r2, r9
 800bf7a:	ea42 020c 	orr.w	r2, r2, ip
 800bf7e:	f84a 2b04 	str.w	r2, [sl], #4
 800bf82:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf86:	4298      	cmp	r0, r3
 800bf88:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf8c:	d8f2      	bhi.n	800bf74 <__lshift+0x70>
 800bf8e:	1b03      	subs	r3, r0, r4
 800bf90:	3b15      	subs	r3, #21
 800bf92:	f023 0303 	bic.w	r3, r3, #3
 800bf96:	3304      	adds	r3, #4
 800bf98:	f104 0215 	add.w	r2, r4, #21
 800bf9c:	4290      	cmp	r0, r2
 800bf9e:	bf38      	it	cc
 800bfa0:	2304      	movcc	r3, #4
 800bfa2:	f841 c003 	str.w	ip, [r1, r3]
 800bfa6:	f1bc 0f00 	cmp.w	ip, #0
 800bfaa:	d001      	beq.n	800bfb0 <__lshift+0xac>
 800bfac:	f108 0602 	add.w	r6, r8, #2
 800bfb0:	3e01      	subs	r6, #1
 800bfb2:	4638      	mov	r0, r7
 800bfb4:	4621      	mov	r1, r4
 800bfb6:	612e      	str	r6, [r5, #16]
 800bfb8:	f7ff fdd6 	bl	800bb68 <_Bfree>
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfc2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	e7c1      	b.n	800bf4e <__lshift+0x4a>
 800bfca:	3904      	subs	r1, #4
 800bfcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfd0:	4298      	cmp	r0, r3
 800bfd2:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfd6:	d8f9      	bhi.n	800bfcc <__lshift+0xc8>
 800bfd8:	e7ea      	b.n	800bfb0 <__lshift+0xac>
 800bfda:	bf00      	nop
 800bfdc:	0800d477 	.word	0x0800d477
 800bfe0:	0800d488 	.word	0x0800d488

0800bfe4 <__mcmp>:
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	690a      	ldr	r2, [r1, #16]
 800bfe8:	6900      	ldr	r0, [r0, #16]
 800bfea:	b530      	push	{r4, r5, lr}
 800bfec:	1a80      	subs	r0, r0, r2
 800bfee:	d10d      	bne.n	800c00c <__mcmp+0x28>
 800bff0:	3314      	adds	r3, #20
 800bff2:	3114      	adds	r1, #20
 800bff4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bff8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c004:	4295      	cmp	r5, r2
 800c006:	d002      	beq.n	800c00e <__mcmp+0x2a>
 800c008:	d304      	bcc.n	800c014 <__mcmp+0x30>
 800c00a:	2001      	movs	r0, #1
 800c00c:	bd30      	pop	{r4, r5, pc}
 800c00e:	42a3      	cmp	r3, r4
 800c010:	d3f4      	bcc.n	800bffc <__mcmp+0x18>
 800c012:	e7fb      	b.n	800c00c <__mcmp+0x28>
 800c014:	f04f 30ff 	mov.w	r0, #4294967295
 800c018:	e7f8      	b.n	800c00c <__mcmp+0x28>
	...

0800c01c <__mdiff>:
 800c01c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c020:	460d      	mov	r5, r1
 800c022:	4607      	mov	r7, r0
 800c024:	4611      	mov	r1, r2
 800c026:	4628      	mov	r0, r5
 800c028:	4614      	mov	r4, r2
 800c02a:	f7ff ffdb 	bl	800bfe4 <__mcmp>
 800c02e:	1e06      	subs	r6, r0, #0
 800c030:	d111      	bne.n	800c056 <__mdiff+0x3a>
 800c032:	4631      	mov	r1, r6
 800c034:	4638      	mov	r0, r7
 800c036:	f7ff fd57 	bl	800bae8 <_Balloc>
 800c03a:	4602      	mov	r2, r0
 800c03c:	b928      	cbnz	r0, 800c04a <__mdiff+0x2e>
 800c03e:	f240 2132 	movw	r1, #562	; 0x232
 800c042:	4b3a      	ldr	r3, [pc, #232]	; (800c12c <__mdiff+0x110>)
 800c044:	483a      	ldr	r0, [pc, #232]	; (800c130 <__mdiff+0x114>)
 800c046:	f000 fb2d 	bl	800c6a4 <__assert_func>
 800c04a:	2301      	movs	r3, #1
 800c04c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c050:	4610      	mov	r0, r2
 800c052:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c056:	bfa4      	itt	ge
 800c058:	4623      	movge	r3, r4
 800c05a:	462c      	movge	r4, r5
 800c05c:	4638      	mov	r0, r7
 800c05e:	6861      	ldr	r1, [r4, #4]
 800c060:	bfa6      	itte	ge
 800c062:	461d      	movge	r5, r3
 800c064:	2600      	movge	r6, #0
 800c066:	2601      	movlt	r6, #1
 800c068:	f7ff fd3e 	bl	800bae8 <_Balloc>
 800c06c:	4602      	mov	r2, r0
 800c06e:	b918      	cbnz	r0, 800c078 <__mdiff+0x5c>
 800c070:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c074:	4b2d      	ldr	r3, [pc, #180]	; (800c12c <__mdiff+0x110>)
 800c076:	e7e5      	b.n	800c044 <__mdiff+0x28>
 800c078:	f102 0814 	add.w	r8, r2, #20
 800c07c:	46c2      	mov	sl, r8
 800c07e:	f04f 0c00 	mov.w	ip, #0
 800c082:	6927      	ldr	r7, [r4, #16]
 800c084:	60c6      	str	r6, [r0, #12]
 800c086:	692e      	ldr	r6, [r5, #16]
 800c088:	f104 0014 	add.w	r0, r4, #20
 800c08c:	f105 0914 	add.w	r9, r5, #20
 800c090:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c094:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c098:	3410      	adds	r4, #16
 800c09a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c09e:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0a2:	fa1f f18b 	uxth.w	r1, fp
 800c0a6:	448c      	add	ip, r1
 800c0a8:	b299      	uxth	r1, r3
 800c0aa:	0c1b      	lsrs	r3, r3, #16
 800c0ac:	ebac 0101 	sub.w	r1, ip, r1
 800c0b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0b4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c0b8:	b289      	uxth	r1, r1
 800c0ba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c0be:	454e      	cmp	r6, r9
 800c0c0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c0c4:	f84a 3b04 	str.w	r3, [sl], #4
 800c0c8:	d8e7      	bhi.n	800c09a <__mdiff+0x7e>
 800c0ca:	1b73      	subs	r3, r6, r5
 800c0cc:	3b15      	subs	r3, #21
 800c0ce:	f023 0303 	bic.w	r3, r3, #3
 800c0d2:	3515      	adds	r5, #21
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	42ae      	cmp	r6, r5
 800c0d8:	bf38      	it	cc
 800c0da:	2304      	movcc	r3, #4
 800c0dc:	4418      	add	r0, r3
 800c0de:	4443      	add	r3, r8
 800c0e0:	461e      	mov	r6, r3
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	4575      	cmp	r5, lr
 800c0e6:	d30e      	bcc.n	800c106 <__mdiff+0xea>
 800c0e8:	f10e 0103 	add.w	r1, lr, #3
 800c0ec:	1a09      	subs	r1, r1, r0
 800c0ee:	f021 0103 	bic.w	r1, r1, #3
 800c0f2:	3803      	subs	r0, #3
 800c0f4:	4586      	cmp	lr, r0
 800c0f6:	bf38      	it	cc
 800c0f8:	2100      	movcc	r1, #0
 800c0fa:	4419      	add	r1, r3
 800c0fc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c100:	b18b      	cbz	r3, 800c126 <__mdiff+0x10a>
 800c102:	6117      	str	r7, [r2, #16]
 800c104:	e7a4      	b.n	800c050 <__mdiff+0x34>
 800c106:	f855 8b04 	ldr.w	r8, [r5], #4
 800c10a:	fa1f f188 	uxth.w	r1, r8
 800c10e:	4461      	add	r1, ip
 800c110:	140c      	asrs	r4, r1, #16
 800c112:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c116:	b289      	uxth	r1, r1
 800c118:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c11c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c120:	f846 1b04 	str.w	r1, [r6], #4
 800c124:	e7de      	b.n	800c0e4 <__mdiff+0xc8>
 800c126:	3f01      	subs	r7, #1
 800c128:	e7e8      	b.n	800c0fc <__mdiff+0xe0>
 800c12a:	bf00      	nop
 800c12c:	0800d477 	.word	0x0800d477
 800c130:	0800d488 	.word	0x0800d488

0800c134 <__d2b>:
 800c134:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c138:	2101      	movs	r1, #1
 800c13a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c13e:	4690      	mov	r8, r2
 800c140:	461d      	mov	r5, r3
 800c142:	f7ff fcd1 	bl	800bae8 <_Balloc>
 800c146:	4604      	mov	r4, r0
 800c148:	b930      	cbnz	r0, 800c158 <__d2b+0x24>
 800c14a:	4602      	mov	r2, r0
 800c14c:	f240 310a 	movw	r1, #778	; 0x30a
 800c150:	4b24      	ldr	r3, [pc, #144]	; (800c1e4 <__d2b+0xb0>)
 800c152:	4825      	ldr	r0, [pc, #148]	; (800c1e8 <__d2b+0xb4>)
 800c154:	f000 faa6 	bl	800c6a4 <__assert_func>
 800c158:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c15c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c160:	bb2d      	cbnz	r5, 800c1ae <__d2b+0x7a>
 800c162:	9301      	str	r3, [sp, #4]
 800c164:	f1b8 0300 	subs.w	r3, r8, #0
 800c168:	d026      	beq.n	800c1b8 <__d2b+0x84>
 800c16a:	4668      	mov	r0, sp
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	f7ff fd83 	bl	800bc78 <__lo0bits>
 800c172:	9900      	ldr	r1, [sp, #0]
 800c174:	b1f0      	cbz	r0, 800c1b4 <__d2b+0x80>
 800c176:	9a01      	ldr	r2, [sp, #4]
 800c178:	f1c0 0320 	rsb	r3, r0, #32
 800c17c:	fa02 f303 	lsl.w	r3, r2, r3
 800c180:	430b      	orrs	r3, r1
 800c182:	40c2      	lsrs	r2, r0
 800c184:	6163      	str	r3, [r4, #20]
 800c186:	9201      	str	r2, [sp, #4]
 800c188:	9b01      	ldr	r3, [sp, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	bf14      	ite	ne
 800c18e:	2102      	movne	r1, #2
 800c190:	2101      	moveq	r1, #1
 800c192:	61a3      	str	r3, [r4, #24]
 800c194:	6121      	str	r1, [r4, #16]
 800c196:	b1c5      	cbz	r5, 800c1ca <__d2b+0x96>
 800c198:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c19c:	4405      	add	r5, r0
 800c19e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1a2:	603d      	str	r5, [r7, #0]
 800c1a4:	6030      	str	r0, [r6, #0]
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	b002      	add	sp, #8
 800c1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1b2:	e7d6      	b.n	800c162 <__d2b+0x2e>
 800c1b4:	6161      	str	r1, [r4, #20]
 800c1b6:	e7e7      	b.n	800c188 <__d2b+0x54>
 800c1b8:	a801      	add	r0, sp, #4
 800c1ba:	f7ff fd5d 	bl	800bc78 <__lo0bits>
 800c1be:	2101      	movs	r1, #1
 800c1c0:	9b01      	ldr	r3, [sp, #4]
 800c1c2:	6121      	str	r1, [r4, #16]
 800c1c4:	6163      	str	r3, [r4, #20]
 800c1c6:	3020      	adds	r0, #32
 800c1c8:	e7e5      	b.n	800c196 <__d2b+0x62>
 800c1ca:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c1ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1d2:	6038      	str	r0, [r7, #0]
 800c1d4:	6918      	ldr	r0, [r3, #16]
 800c1d6:	f7ff fd2f 	bl	800bc38 <__hi0bits>
 800c1da:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c1de:	6031      	str	r1, [r6, #0]
 800c1e0:	e7e1      	b.n	800c1a6 <__d2b+0x72>
 800c1e2:	bf00      	nop
 800c1e4:	0800d477 	.word	0x0800d477
 800c1e8:	0800d488 	.word	0x0800d488

0800c1ec <_calloc_r>:
 800c1ec:	b570      	push	{r4, r5, r6, lr}
 800c1ee:	fba1 5402 	umull	r5, r4, r1, r2
 800c1f2:	b934      	cbnz	r4, 800c202 <_calloc_r+0x16>
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	f000 f875 	bl	800c2e4 <_malloc_r>
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	b928      	cbnz	r0, 800c20a <_calloc_r+0x1e>
 800c1fe:	4630      	mov	r0, r6
 800c200:	bd70      	pop	{r4, r5, r6, pc}
 800c202:	220c      	movs	r2, #12
 800c204:	2600      	movs	r6, #0
 800c206:	6002      	str	r2, [r0, #0]
 800c208:	e7f9      	b.n	800c1fe <_calloc_r+0x12>
 800c20a:	462a      	mov	r2, r5
 800c20c:	4621      	mov	r1, r4
 800c20e:	f7fe f939 	bl	800a484 <memset>
 800c212:	e7f4      	b.n	800c1fe <_calloc_r+0x12>

0800c214 <_free_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4605      	mov	r5, r0
 800c218:	2900      	cmp	r1, #0
 800c21a:	d040      	beq.n	800c29e <_free_r+0x8a>
 800c21c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c220:	1f0c      	subs	r4, r1, #4
 800c222:	2b00      	cmp	r3, #0
 800c224:	bfb8      	it	lt
 800c226:	18e4      	addlt	r4, r4, r3
 800c228:	f000 fa98 	bl	800c75c <__malloc_lock>
 800c22c:	4a1c      	ldr	r2, [pc, #112]	; (800c2a0 <_free_r+0x8c>)
 800c22e:	6813      	ldr	r3, [r2, #0]
 800c230:	b933      	cbnz	r3, 800c240 <_free_r+0x2c>
 800c232:	6063      	str	r3, [r4, #4]
 800c234:	6014      	str	r4, [r2, #0]
 800c236:	4628      	mov	r0, r5
 800c238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c23c:	f000 ba94 	b.w	800c768 <__malloc_unlock>
 800c240:	42a3      	cmp	r3, r4
 800c242:	d908      	bls.n	800c256 <_free_r+0x42>
 800c244:	6820      	ldr	r0, [r4, #0]
 800c246:	1821      	adds	r1, r4, r0
 800c248:	428b      	cmp	r3, r1
 800c24a:	bf01      	itttt	eq
 800c24c:	6819      	ldreq	r1, [r3, #0]
 800c24e:	685b      	ldreq	r3, [r3, #4]
 800c250:	1809      	addeq	r1, r1, r0
 800c252:	6021      	streq	r1, [r4, #0]
 800c254:	e7ed      	b.n	800c232 <_free_r+0x1e>
 800c256:	461a      	mov	r2, r3
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	b10b      	cbz	r3, 800c260 <_free_r+0x4c>
 800c25c:	42a3      	cmp	r3, r4
 800c25e:	d9fa      	bls.n	800c256 <_free_r+0x42>
 800c260:	6811      	ldr	r1, [r2, #0]
 800c262:	1850      	adds	r0, r2, r1
 800c264:	42a0      	cmp	r0, r4
 800c266:	d10b      	bne.n	800c280 <_free_r+0x6c>
 800c268:	6820      	ldr	r0, [r4, #0]
 800c26a:	4401      	add	r1, r0
 800c26c:	1850      	adds	r0, r2, r1
 800c26e:	4283      	cmp	r3, r0
 800c270:	6011      	str	r1, [r2, #0]
 800c272:	d1e0      	bne.n	800c236 <_free_r+0x22>
 800c274:	6818      	ldr	r0, [r3, #0]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	4401      	add	r1, r0
 800c27a:	6011      	str	r1, [r2, #0]
 800c27c:	6053      	str	r3, [r2, #4]
 800c27e:	e7da      	b.n	800c236 <_free_r+0x22>
 800c280:	d902      	bls.n	800c288 <_free_r+0x74>
 800c282:	230c      	movs	r3, #12
 800c284:	602b      	str	r3, [r5, #0]
 800c286:	e7d6      	b.n	800c236 <_free_r+0x22>
 800c288:	6820      	ldr	r0, [r4, #0]
 800c28a:	1821      	adds	r1, r4, r0
 800c28c:	428b      	cmp	r3, r1
 800c28e:	bf01      	itttt	eq
 800c290:	6819      	ldreq	r1, [r3, #0]
 800c292:	685b      	ldreq	r3, [r3, #4]
 800c294:	1809      	addeq	r1, r1, r0
 800c296:	6021      	streq	r1, [r4, #0]
 800c298:	6063      	str	r3, [r4, #4]
 800c29a:	6054      	str	r4, [r2, #4]
 800c29c:	e7cb      	b.n	800c236 <_free_r+0x22>
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	200019c0 	.word	0x200019c0

0800c2a4 <sbrk_aligned>:
 800c2a4:	b570      	push	{r4, r5, r6, lr}
 800c2a6:	4e0e      	ldr	r6, [pc, #56]	; (800c2e0 <sbrk_aligned+0x3c>)
 800c2a8:	460c      	mov	r4, r1
 800c2aa:	6831      	ldr	r1, [r6, #0]
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	b911      	cbnz	r1, 800c2b6 <sbrk_aligned+0x12>
 800c2b0:	f000 f9e8 	bl	800c684 <_sbrk_r>
 800c2b4:	6030      	str	r0, [r6, #0]
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	f000 f9e3 	bl	800c684 <_sbrk_r>
 800c2be:	1c43      	adds	r3, r0, #1
 800c2c0:	d00a      	beq.n	800c2d8 <sbrk_aligned+0x34>
 800c2c2:	1cc4      	adds	r4, r0, #3
 800c2c4:	f024 0403 	bic.w	r4, r4, #3
 800c2c8:	42a0      	cmp	r0, r4
 800c2ca:	d007      	beq.n	800c2dc <sbrk_aligned+0x38>
 800c2cc:	1a21      	subs	r1, r4, r0
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	f000 f9d8 	bl	800c684 <_sbrk_r>
 800c2d4:	3001      	adds	r0, #1
 800c2d6:	d101      	bne.n	800c2dc <sbrk_aligned+0x38>
 800c2d8:	f04f 34ff 	mov.w	r4, #4294967295
 800c2dc:	4620      	mov	r0, r4
 800c2de:	bd70      	pop	{r4, r5, r6, pc}
 800c2e0:	200019c4 	.word	0x200019c4

0800c2e4 <_malloc_r>:
 800c2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e8:	1ccd      	adds	r5, r1, #3
 800c2ea:	f025 0503 	bic.w	r5, r5, #3
 800c2ee:	3508      	adds	r5, #8
 800c2f0:	2d0c      	cmp	r5, #12
 800c2f2:	bf38      	it	cc
 800c2f4:	250c      	movcc	r5, #12
 800c2f6:	2d00      	cmp	r5, #0
 800c2f8:	4607      	mov	r7, r0
 800c2fa:	db01      	blt.n	800c300 <_malloc_r+0x1c>
 800c2fc:	42a9      	cmp	r1, r5
 800c2fe:	d905      	bls.n	800c30c <_malloc_r+0x28>
 800c300:	230c      	movs	r3, #12
 800c302:	2600      	movs	r6, #0
 800c304:	603b      	str	r3, [r7, #0]
 800c306:	4630      	mov	r0, r6
 800c308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c30c:	4e2e      	ldr	r6, [pc, #184]	; (800c3c8 <_malloc_r+0xe4>)
 800c30e:	f000 fa25 	bl	800c75c <__malloc_lock>
 800c312:	6833      	ldr	r3, [r6, #0]
 800c314:	461c      	mov	r4, r3
 800c316:	bb34      	cbnz	r4, 800c366 <_malloc_r+0x82>
 800c318:	4629      	mov	r1, r5
 800c31a:	4638      	mov	r0, r7
 800c31c:	f7ff ffc2 	bl	800c2a4 <sbrk_aligned>
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	4604      	mov	r4, r0
 800c324:	d14d      	bne.n	800c3c2 <_malloc_r+0xde>
 800c326:	6834      	ldr	r4, [r6, #0]
 800c328:	4626      	mov	r6, r4
 800c32a:	2e00      	cmp	r6, #0
 800c32c:	d140      	bne.n	800c3b0 <_malloc_r+0xcc>
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	4631      	mov	r1, r6
 800c332:	4638      	mov	r0, r7
 800c334:	eb04 0803 	add.w	r8, r4, r3
 800c338:	f000 f9a4 	bl	800c684 <_sbrk_r>
 800c33c:	4580      	cmp	r8, r0
 800c33e:	d13a      	bne.n	800c3b6 <_malloc_r+0xd2>
 800c340:	6821      	ldr	r1, [r4, #0]
 800c342:	3503      	adds	r5, #3
 800c344:	1a6d      	subs	r5, r5, r1
 800c346:	f025 0503 	bic.w	r5, r5, #3
 800c34a:	3508      	adds	r5, #8
 800c34c:	2d0c      	cmp	r5, #12
 800c34e:	bf38      	it	cc
 800c350:	250c      	movcc	r5, #12
 800c352:	4638      	mov	r0, r7
 800c354:	4629      	mov	r1, r5
 800c356:	f7ff ffa5 	bl	800c2a4 <sbrk_aligned>
 800c35a:	3001      	adds	r0, #1
 800c35c:	d02b      	beq.n	800c3b6 <_malloc_r+0xd2>
 800c35e:	6823      	ldr	r3, [r4, #0]
 800c360:	442b      	add	r3, r5
 800c362:	6023      	str	r3, [r4, #0]
 800c364:	e00e      	b.n	800c384 <_malloc_r+0xa0>
 800c366:	6822      	ldr	r2, [r4, #0]
 800c368:	1b52      	subs	r2, r2, r5
 800c36a:	d41e      	bmi.n	800c3aa <_malloc_r+0xc6>
 800c36c:	2a0b      	cmp	r2, #11
 800c36e:	d916      	bls.n	800c39e <_malloc_r+0xba>
 800c370:	1961      	adds	r1, r4, r5
 800c372:	42a3      	cmp	r3, r4
 800c374:	6025      	str	r5, [r4, #0]
 800c376:	bf18      	it	ne
 800c378:	6059      	strne	r1, [r3, #4]
 800c37a:	6863      	ldr	r3, [r4, #4]
 800c37c:	bf08      	it	eq
 800c37e:	6031      	streq	r1, [r6, #0]
 800c380:	5162      	str	r2, [r4, r5]
 800c382:	604b      	str	r3, [r1, #4]
 800c384:	4638      	mov	r0, r7
 800c386:	f104 060b 	add.w	r6, r4, #11
 800c38a:	f000 f9ed 	bl	800c768 <__malloc_unlock>
 800c38e:	f026 0607 	bic.w	r6, r6, #7
 800c392:	1d23      	adds	r3, r4, #4
 800c394:	1af2      	subs	r2, r6, r3
 800c396:	d0b6      	beq.n	800c306 <_malloc_r+0x22>
 800c398:	1b9b      	subs	r3, r3, r6
 800c39a:	50a3      	str	r3, [r4, r2]
 800c39c:	e7b3      	b.n	800c306 <_malloc_r+0x22>
 800c39e:	6862      	ldr	r2, [r4, #4]
 800c3a0:	42a3      	cmp	r3, r4
 800c3a2:	bf0c      	ite	eq
 800c3a4:	6032      	streq	r2, [r6, #0]
 800c3a6:	605a      	strne	r2, [r3, #4]
 800c3a8:	e7ec      	b.n	800c384 <_malloc_r+0xa0>
 800c3aa:	4623      	mov	r3, r4
 800c3ac:	6864      	ldr	r4, [r4, #4]
 800c3ae:	e7b2      	b.n	800c316 <_malloc_r+0x32>
 800c3b0:	4634      	mov	r4, r6
 800c3b2:	6876      	ldr	r6, [r6, #4]
 800c3b4:	e7b9      	b.n	800c32a <_malloc_r+0x46>
 800c3b6:	230c      	movs	r3, #12
 800c3b8:	4638      	mov	r0, r7
 800c3ba:	603b      	str	r3, [r7, #0]
 800c3bc:	f000 f9d4 	bl	800c768 <__malloc_unlock>
 800c3c0:	e7a1      	b.n	800c306 <_malloc_r+0x22>
 800c3c2:	6025      	str	r5, [r4, #0]
 800c3c4:	e7de      	b.n	800c384 <_malloc_r+0xa0>
 800c3c6:	bf00      	nop
 800c3c8:	200019c0 	.word	0x200019c0

0800c3cc <__ssputs_r>:
 800c3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d0:	688e      	ldr	r6, [r1, #8]
 800c3d2:	4682      	mov	sl, r0
 800c3d4:	429e      	cmp	r6, r3
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	4690      	mov	r8, r2
 800c3da:	461f      	mov	r7, r3
 800c3dc:	d838      	bhi.n	800c450 <__ssputs_r+0x84>
 800c3de:	898a      	ldrh	r2, [r1, #12]
 800c3e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3e4:	d032      	beq.n	800c44c <__ssputs_r+0x80>
 800c3e6:	6825      	ldr	r5, [r4, #0]
 800c3e8:	6909      	ldr	r1, [r1, #16]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	eba5 0901 	sub.w	r9, r5, r1
 800c3f0:	6965      	ldr	r5, [r4, #20]
 800c3f2:	444b      	add	r3, r9
 800c3f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3fc:	106d      	asrs	r5, r5, #1
 800c3fe:	429d      	cmp	r5, r3
 800c400:	bf38      	it	cc
 800c402:	461d      	movcc	r5, r3
 800c404:	0553      	lsls	r3, r2, #21
 800c406:	d531      	bpl.n	800c46c <__ssputs_r+0xa0>
 800c408:	4629      	mov	r1, r5
 800c40a:	f7ff ff6b 	bl	800c2e4 <_malloc_r>
 800c40e:	4606      	mov	r6, r0
 800c410:	b950      	cbnz	r0, 800c428 <__ssputs_r+0x5c>
 800c412:	230c      	movs	r3, #12
 800c414:	f04f 30ff 	mov.w	r0, #4294967295
 800c418:	f8ca 3000 	str.w	r3, [sl]
 800c41c:	89a3      	ldrh	r3, [r4, #12]
 800c41e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c422:	81a3      	strh	r3, [r4, #12]
 800c424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c428:	464a      	mov	r2, r9
 800c42a:	6921      	ldr	r1, [r4, #16]
 800c42c:	f7fe f81c 	bl	800a468 <memcpy>
 800c430:	89a3      	ldrh	r3, [r4, #12]
 800c432:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c43a:	81a3      	strh	r3, [r4, #12]
 800c43c:	6126      	str	r6, [r4, #16]
 800c43e:	444e      	add	r6, r9
 800c440:	6026      	str	r6, [r4, #0]
 800c442:	463e      	mov	r6, r7
 800c444:	6165      	str	r5, [r4, #20]
 800c446:	eba5 0509 	sub.w	r5, r5, r9
 800c44a:	60a5      	str	r5, [r4, #8]
 800c44c:	42be      	cmp	r6, r7
 800c44e:	d900      	bls.n	800c452 <__ssputs_r+0x86>
 800c450:	463e      	mov	r6, r7
 800c452:	4632      	mov	r2, r6
 800c454:	4641      	mov	r1, r8
 800c456:	6820      	ldr	r0, [r4, #0]
 800c458:	f000 f966 	bl	800c728 <memmove>
 800c45c:	68a3      	ldr	r3, [r4, #8]
 800c45e:	2000      	movs	r0, #0
 800c460:	1b9b      	subs	r3, r3, r6
 800c462:	60a3      	str	r3, [r4, #8]
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	4433      	add	r3, r6
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	e7db      	b.n	800c424 <__ssputs_r+0x58>
 800c46c:	462a      	mov	r2, r5
 800c46e:	f000 f981 	bl	800c774 <_realloc_r>
 800c472:	4606      	mov	r6, r0
 800c474:	2800      	cmp	r0, #0
 800c476:	d1e1      	bne.n	800c43c <__ssputs_r+0x70>
 800c478:	4650      	mov	r0, sl
 800c47a:	6921      	ldr	r1, [r4, #16]
 800c47c:	f7ff feca 	bl	800c214 <_free_r>
 800c480:	e7c7      	b.n	800c412 <__ssputs_r+0x46>
	...

0800c484 <_svfiprintf_r>:
 800c484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c488:	4698      	mov	r8, r3
 800c48a:	898b      	ldrh	r3, [r1, #12]
 800c48c:	4607      	mov	r7, r0
 800c48e:	061b      	lsls	r3, r3, #24
 800c490:	460d      	mov	r5, r1
 800c492:	4614      	mov	r4, r2
 800c494:	b09d      	sub	sp, #116	; 0x74
 800c496:	d50e      	bpl.n	800c4b6 <_svfiprintf_r+0x32>
 800c498:	690b      	ldr	r3, [r1, #16]
 800c49a:	b963      	cbnz	r3, 800c4b6 <_svfiprintf_r+0x32>
 800c49c:	2140      	movs	r1, #64	; 0x40
 800c49e:	f7ff ff21 	bl	800c2e4 <_malloc_r>
 800c4a2:	6028      	str	r0, [r5, #0]
 800c4a4:	6128      	str	r0, [r5, #16]
 800c4a6:	b920      	cbnz	r0, 800c4b2 <_svfiprintf_r+0x2e>
 800c4a8:	230c      	movs	r3, #12
 800c4aa:	603b      	str	r3, [r7, #0]
 800c4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b0:	e0d1      	b.n	800c656 <_svfiprintf_r+0x1d2>
 800c4b2:	2340      	movs	r3, #64	; 0x40
 800c4b4:	616b      	str	r3, [r5, #20]
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ba:	2320      	movs	r3, #32
 800c4bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4c0:	2330      	movs	r3, #48	; 0x30
 800c4c2:	f04f 0901 	mov.w	r9, #1
 800c4c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c670 <_svfiprintf_r+0x1ec>
 800c4ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4d2:	4623      	mov	r3, r4
 800c4d4:	469a      	mov	sl, r3
 800c4d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4da:	b10a      	cbz	r2, 800c4e0 <_svfiprintf_r+0x5c>
 800c4dc:	2a25      	cmp	r2, #37	; 0x25
 800c4de:	d1f9      	bne.n	800c4d4 <_svfiprintf_r+0x50>
 800c4e0:	ebba 0b04 	subs.w	fp, sl, r4
 800c4e4:	d00b      	beq.n	800c4fe <_svfiprintf_r+0x7a>
 800c4e6:	465b      	mov	r3, fp
 800c4e8:	4622      	mov	r2, r4
 800c4ea:	4629      	mov	r1, r5
 800c4ec:	4638      	mov	r0, r7
 800c4ee:	f7ff ff6d 	bl	800c3cc <__ssputs_r>
 800c4f2:	3001      	adds	r0, #1
 800c4f4:	f000 80aa 	beq.w	800c64c <_svfiprintf_r+0x1c8>
 800c4f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4fa:	445a      	add	r2, fp
 800c4fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c4fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c502:	2b00      	cmp	r3, #0
 800c504:	f000 80a2 	beq.w	800c64c <_svfiprintf_r+0x1c8>
 800c508:	2300      	movs	r3, #0
 800c50a:	f04f 32ff 	mov.w	r2, #4294967295
 800c50e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c512:	f10a 0a01 	add.w	sl, sl, #1
 800c516:	9304      	str	r3, [sp, #16]
 800c518:	9307      	str	r3, [sp, #28]
 800c51a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c51e:	931a      	str	r3, [sp, #104]	; 0x68
 800c520:	4654      	mov	r4, sl
 800c522:	2205      	movs	r2, #5
 800c524:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c528:	4851      	ldr	r0, [pc, #324]	; (800c670 <_svfiprintf_r+0x1ec>)
 800c52a:	f7ff facf 	bl	800bacc <memchr>
 800c52e:	9a04      	ldr	r2, [sp, #16]
 800c530:	b9d8      	cbnz	r0, 800c56a <_svfiprintf_r+0xe6>
 800c532:	06d0      	lsls	r0, r2, #27
 800c534:	bf44      	itt	mi
 800c536:	2320      	movmi	r3, #32
 800c538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c53c:	0711      	lsls	r1, r2, #28
 800c53e:	bf44      	itt	mi
 800c540:	232b      	movmi	r3, #43	; 0x2b
 800c542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c546:	f89a 3000 	ldrb.w	r3, [sl]
 800c54a:	2b2a      	cmp	r3, #42	; 0x2a
 800c54c:	d015      	beq.n	800c57a <_svfiprintf_r+0xf6>
 800c54e:	4654      	mov	r4, sl
 800c550:	2000      	movs	r0, #0
 800c552:	f04f 0c0a 	mov.w	ip, #10
 800c556:	9a07      	ldr	r2, [sp, #28]
 800c558:	4621      	mov	r1, r4
 800c55a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c55e:	3b30      	subs	r3, #48	; 0x30
 800c560:	2b09      	cmp	r3, #9
 800c562:	d94e      	bls.n	800c602 <_svfiprintf_r+0x17e>
 800c564:	b1b0      	cbz	r0, 800c594 <_svfiprintf_r+0x110>
 800c566:	9207      	str	r2, [sp, #28]
 800c568:	e014      	b.n	800c594 <_svfiprintf_r+0x110>
 800c56a:	eba0 0308 	sub.w	r3, r0, r8
 800c56e:	fa09 f303 	lsl.w	r3, r9, r3
 800c572:	4313      	orrs	r3, r2
 800c574:	46a2      	mov	sl, r4
 800c576:	9304      	str	r3, [sp, #16]
 800c578:	e7d2      	b.n	800c520 <_svfiprintf_r+0x9c>
 800c57a:	9b03      	ldr	r3, [sp, #12]
 800c57c:	1d19      	adds	r1, r3, #4
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	9103      	str	r1, [sp, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	bfbb      	ittet	lt
 800c586:	425b      	neglt	r3, r3
 800c588:	f042 0202 	orrlt.w	r2, r2, #2
 800c58c:	9307      	strge	r3, [sp, #28]
 800c58e:	9307      	strlt	r3, [sp, #28]
 800c590:	bfb8      	it	lt
 800c592:	9204      	strlt	r2, [sp, #16]
 800c594:	7823      	ldrb	r3, [r4, #0]
 800c596:	2b2e      	cmp	r3, #46	; 0x2e
 800c598:	d10c      	bne.n	800c5b4 <_svfiprintf_r+0x130>
 800c59a:	7863      	ldrb	r3, [r4, #1]
 800c59c:	2b2a      	cmp	r3, #42	; 0x2a
 800c59e:	d135      	bne.n	800c60c <_svfiprintf_r+0x188>
 800c5a0:	9b03      	ldr	r3, [sp, #12]
 800c5a2:	3402      	adds	r4, #2
 800c5a4:	1d1a      	adds	r2, r3, #4
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	9203      	str	r2, [sp, #12]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	bfb8      	it	lt
 800c5ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5b2:	9305      	str	r3, [sp, #20]
 800c5b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c674 <_svfiprintf_r+0x1f0>
 800c5b8:	2203      	movs	r2, #3
 800c5ba:	4650      	mov	r0, sl
 800c5bc:	7821      	ldrb	r1, [r4, #0]
 800c5be:	f7ff fa85 	bl	800bacc <memchr>
 800c5c2:	b140      	cbz	r0, 800c5d6 <_svfiprintf_r+0x152>
 800c5c4:	2340      	movs	r3, #64	; 0x40
 800c5c6:	eba0 000a 	sub.w	r0, r0, sl
 800c5ca:	fa03 f000 	lsl.w	r0, r3, r0
 800c5ce:	9b04      	ldr	r3, [sp, #16]
 800c5d0:	3401      	adds	r4, #1
 800c5d2:	4303      	orrs	r3, r0
 800c5d4:	9304      	str	r3, [sp, #16]
 800c5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5da:	2206      	movs	r2, #6
 800c5dc:	4826      	ldr	r0, [pc, #152]	; (800c678 <_svfiprintf_r+0x1f4>)
 800c5de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5e2:	f7ff fa73 	bl	800bacc <memchr>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d038      	beq.n	800c65c <_svfiprintf_r+0x1d8>
 800c5ea:	4b24      	ldr	r3, [pc, #144]	; (800c67c <_svfiprintf_r+0x1f8>)
 800c5ec:	bb1b      	cbnz	r3, 800c636 <_svfiprintf_r+0x1b2>
 800c5ee:	9b03      	ldr	r3, [sp, #12]
 800c5f0:	3307      	adds	r3, #7
 800c5f2:	f023 0307 	bic.w	r3, r3, #7
 800c5f6:	3308      	adds	r3, #8
 800c5f8:	9303      	str	r3, [sp, #12]
 800c5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5fc:	4433      	add	r3, r6
 800c5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c600:	e767      	b.n	800c4d2 <_svfiprintf_r+0x4e>
 800c602:	460c      	mov	r4, r1
 800c604:	2001      	movs	r0, #1
 800c606:	fb0c 3202 	mla	r2, ip, r2, r3
 800c60a:	e7a5      	b.n	800c558 <_svfiprintf_r+0xd4>
 800c60c:	2300      	movs	r3, #0
 800c60e:	f04f 0c0a 	mov.w	ip, #10
 800c612:	4619      	mov	r1, r3
 800c614:	3401      	adds	r4, #1
 800c616:	9305      	str	r3, [sp, #20]
 800c618:	4620      	mov	r0, r4
 800c61a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c61e:	3a30      	subs	r2, #48	; 0x30
 800c620:	2a09      	cmp	r2, #9
 800c622:	d903      	bls.n	800c62c <_svfiprintf_r+0x1a8>
 800c624:	2b00      	cmp	r3, #0
 800c626:	d0c5      	beq.n	800c5b4 <_svfiprintf_r+0x130>
 800c628:	9105      	str	r1, [sp, #20]
 800c62a:	e7c3      	b.n	800c5b4 <_svfiprintf_r+0x130>
 800c62c:	4604      	mov	r4, r0
 800c62e:	2301      	movs	r3, #1
 800c630:	fb0c 2101 	mla	r1, ip, r1, r2
 800c634:	e7f0      	b.n	800c618 <_svfiprintf_r+0x194>
 800c636:	ab03      	add	r3, sp, #12
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	462a      	mov	r2, r5
 800c63c:	4638      	mov	r0, r7
 800c63e:	4b10      	ldr	r3, [pc, #64]	; (800c680 <_svfiprintf_r+0x1fc>)
 800c640:	a904      	add	r1, sp, #16
 800c642:	f7fd ffc5 	bl	800a5d0 <_printf_float>
 800c646:	1c42      	adds	r2, r0, #1
 800c648:	4606      	mov	r6, r0
 800c64a:	d1d6      	bne.n	800c5fa <_svfiprintf_r+0x176>
 800c64c:	89ab      	ldrh	r3, [r5, #12]
 800c64e:	065b      	lsls	r3, r3, #25
 800c650:	f53f af2c 	bmi.w	800c4ac <_svfiprintf_r+0x28>
 800c654:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c656:	b01d      	add	sp, #116	; 0x74
 800c658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65c:	ab03      	add	r3, sp, #12
 800c65e:	9300      	str	r3, [sp, #0]
 800c660:	462a      	mov	r2, r5
 800c662:	4638      	mov	r0, r7
 800c664:	4b06      	ldr	r3, [pc, #24]	; (800c680 <_svfiprintf_r+0x1fc>)
 800c666:	a904      	add	r1, sp, #16
 800c668:	f7fe fa4e 	bl	800ab08 <_printf_i>
 800c66c:	e7eb      	b.n	800c646 <_svfiprintf_r+0x1c2>
 800c66e:	bf00      	nop
 800c670:	0800d5e4 	.word	0x0800d5e4
 800c674:	0800d5ea 	.word	0x0800d5ea
 800c678:	0800d5ee 	.word	0x0800d5ee
 800c67c:	0800a5d1 	.word	0x0800a5d1
 800c680:	0800c3cd 	.word	0x0800c3cd

0800c684 <_sbrk_r>:
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	2300      	movs	r3, #0
 800c688:	4d05      	ldr	r5, [pc, #20]	; (800c6a0 <_sbrk_r+0x1c>)
 800c68a:	4604      	mov	r4, r0
 800c68c:	4608      	mov	r0, r1
 800c68e:	602b      	str	r3, [r5, #0]
 800c690:	f7f8 fcce 	bl	8005030 <_sbrk>
 800c694:	1c43      	adds	r3, r0, #1
 800c696:	d102      	bne.n	800c69e <_sbrk_r+0x1a>
 800c698:	682b      	ldr	r3, [r5, #0]
 800c69a:	b103      	cbz	r3, 800c69e <_sbrk_r+0x1a>
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	bd38      	pop	{r3, r4, r5, pc}
 800c6a0:	200019c8 	.word	0x200019c8

0800c6a4 <__assert_func>:
 800c6a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6a6:	4614      	mov	r4, r2
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <__assert_func+0x2c>)
 800c6ac:	4605      	mov	r5, r0
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	68d8      	ldr	r0, [r3, #12]
 800c6b2:	b14c      	cbz	r4, 800c6c8 <__assert_func+0x24>
 800c6b4:	4b07      	ldr	r3, [pc, #28]	; (800c6d4 <__assert_func+0x30>)
 800c6b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6ba:	9100      	str	r1, [sp, #0]
 800c6bc:	462b      	mov	r3, r5
 800c6be:	4906      	ldr	r1, [pc, #24]	; (800c6d8 <__assert_func+0x34>)
 800c6c0:	f000 f80e 	bl	800c6e0 <fiprintf>
 800c6c4:	f000 faaa 	bl	800cc1c <abort>
 800c6c8:	4b04      	ldr	r3, [pc, #16]	; (800c6dc <__assert_func+0x38>)
 800c6ca:	461c      	mov	r4, r3
 800c6cc:	e7f3      	b.n	800c6b6 <__assert_func+0x12>
 800c6ce:	bf00      	nop
 800c6d0:	200001a0 	.word	0x200001a0
 800c6d4:	0800d5f5 	.word	0x0800d5f5
 800c6d8:	0800d602 	.word	0x0800d602
 800c6dc:	0800d630 	.word	0x0800d630

0800c6e0 <fiprintf>:
 800c6e0:	b40e      	push	{r1, r2, r3}
 800c6e2:	b503      	push	{r0, r1, lr}
 800c6e4:	4601      	mov	r1, r0
 800c6e6:	ab03      	add	r3, sp, #12
 800c6e8:	4805      	ldr	r0, [pc, #20]	; (800c700 <fiprintf+0x20>)
 800c6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ee:	6800      	ldr	r0, [r0, #0]
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	f000 f895 	bl	800c820 <_vfiprintf_r>
 800c6f6:	b002      	add	sp, #8
 800c6f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6fc:	b003      	add	sp, #12
 800c6fe:	4770      	bx	lr
 800c700:	200001a0 	.word	0x200001a0

0800c704 <__ascii_mbtowc>:
 800c704:	b082      	sub	sp, #8
 800c706:	b901      	cbnz	r1, 800c70a <__ascii_mbtowc+0x6>
 800c708:	a901      	add	r1, sp, #4
 800c70a:	b142      	cbz	r2, 800c71e <__ascii_mbtowc+0x1a>
 800c70c:	b14b      	cbz	r3, 800c722 <__ascii_mbtowc+0x1e>
 800c70e:	7813      	ldrb	r3, [r2, #0]
 800c710:	600b      	str	r3, [r1, #0]
 800c712:	7812      	ldrb	r2, [r2, #0]
 800c714:	1e10      	subs	r0, r2, #0
 800c716:	bf18      	it	ne
 800c718:	2001      	movne	r0, #1
 800c71a:	b002      	add	sp, #8
 800c71c:	4770      	bx	lr
 800c71e:	4610      	mov	r0, r2
 800c720:	e7fb      	b.n	800c71a <__ascii_mbtowc+0x16>
 800c722:	f06f 0001 	mvn.w	r0, #1
 800c726:	e7f8      	b.n	800c71a <__ascii_mbtowc+0x16>

0800c728 <memmove>:
 800c728:	4288      	cmp	r0, r1
 800c72a:	b510      	push	{r4, lr}
 800c72c:	eb01 0402 	add.w	r4, r1, r2
 800c730:	d902      	bls.n	800c738 <memmove+0x10>
 800c732:	4284      	cmp	r4, r0
 800c734:	4623      	mov	r3, r4
 800c736:	d807      	bhi.n	800c748 <memmove+0x20>
 800c738:	1e43      	subs	r3, r0, #1
 800c73a:	42a1      	cmp	r1, r4
 800c73c:	d008      	beq.n	800c750 <memmove+0x28>
 800c73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c742:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c746:	e7f8      	b.n	800c73a <memmove+0x12>
 800c748:	4601      	mov	r1, r0
 800c74a:	4402      	add	r2, r0
 800c74c:	428a      	cmp	r2, r1
 800c74e:	d100      	bne.n	800c752 <memmove+0x2a>
 800c750:	bd10      	pop	{r4, pc}
 800c752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c75a:	e7f7      	b.n	800c74c <memmove+0x24>

0800c75c <__malloc_lock>:
 800c75c:	4801      	ldr	r0, [pc, #4]	; (800c764 <__malloc_lock+0x8>)
 800c75e:	f000 bc19 	b.w	800cf94 <__retarget_lock_acquire_recursive>
 800c762:	bf00      	nop
 800c764:	200019cc 	.word	0x200019cc

0800c768 <__malloc_unlock>:
 800c768:	4801      	ldr	r0, [pc, #4]	; (800c770 <__malloc_unlock+0x8>)
 800c76a:	f000 bc14 	b.w	800cf96 <__retarget_lock_release_recursive>
 800c76e:	bf00      	nop
 800c770:	200019cc 	.word	0x200019cc

0800c774 <_realloc_r>:
 800c774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c778:	4680      	mov	r8, r0
 800c77a:	4614      	mov	r4, r2
 800c77c:	460e      	mov	r6, r1
 800c77e:	b921      	cbnz	r1, 800c78a <_realloc_r+0x16>
 800c780:	4611      	mov	r1, r2
 800c782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c786:	f7ff bdad 	b.w	800c2e4 <_malloc_r>
 800c78a:	b92a      	cbnz	r2, 800c798 <_realloc_r+0x24>
 800c78c:	f7ff fd42 	bl	800c214 <_free_r>
 800c790:	4625      	mov	r5, r4
 800c792:	4628      	mov	r0, r5
 800c794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c798:	f000 fc64 	bl	800d064 <_malloc_usable_size_r>
 800c79c:	4284      	cmp	r4, r0
 800c79e:	4607      	mov	r7, r0
 800c7a0:	d802      	bhi.n	800c7a8 <_realloc_r+0x34>
 800c7a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7a6:	d812      	bhi.n	800c7ce <_realloc_r+0x5a>
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	4640      	mov	r0, r8
 800c7ac:	f7ff fd9a 	bl	800c2e4 <_malloc_r>
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d0ed      	beq.n	800c792 <_realloc_r+0x1e>
 800c7b6:	42bc      	cmp	r4, r7
 800c7b8:	4622      	mov	r2, r4
 800c7ba:	4631      	mov	r1, r6
 800c7bc:	bf28      	it	cs
 800c7be:	463a      	movcs	r2, r7
 800c7c0:	f7fd fe52 	bl	800a468 <memcpy>
 800c7c4:	4631      	mov	r1, r6
 800c7c6:	4640      	mov	r0, r8
 800c7c8:	f7ff fd24 	bl	800c214 <_free_r>
 800c7cc:	e7e1      	b.n	800c792 <_realloc_r+0x1e>
 800c7ce:	4635      	mov	r5, r6
 800c7d0:	e7df      	b.n	800c792 <_realloc_r+0x1e>

0800c7d2 <__sfputc_r>:
 800c7d2:	6893      	ldr	r3, [r2, #8]
 800c7d4:	b410      	push	{r4}
 800c7d6:	3b01      	subs	r3, #1
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	6093      	str	r3, [r2, #8]
 800c7dc:	da07      	bge.n	800c7ee <__sfputc_r+0x1c>
 800c7de:	6994      	ldr	r4, [r2, #24]
 800c7e0:	42a3      	cmp	r3, r4
 800c7e2:	db01      	blt.n	800c7e8 <__sfputc_r+0x16>
 800c7e4:	290a      	cmp	r1, #10
 800c7e6:	d102      	bne.n	800c7ee <__sfputc_r+0x1c>
 800c7e8:	bc10      	pop	{r4}
 800c7ea:	f000 b949 	b.w	800ca80 <__swbuf_r>
 800c7ee:	6813      	ldr	r3, [r2, #0]
 800c7f0:	1c58      	adds	r0, r3, #1
 800c7f2:	6010      	str	r0, [r2, #0]
 800c7f4:	7019      	strb	r1, [r3, #0]
 800c7f6:	4608      	mov	r0, r1
 800c7f8:	bc10      	pop	{r4}
 800c7fa:	4770      	bx	lr

0800c7fc <__sfputs_r>:
 800c7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fe:	4606      	mov	r6, r0
 800c800:	460f      	mov	r7, r1
 800c802:	4614      	mov	r4, r2
 800c804:	18d5      	adds	r5, r2, r3
 800c806:	42ac      	cmp	r4, r5
 800c808:	d101      	bne.n	800c80e <__sfputs_r+0x12>
 800c80a:	2000      	movs	r0, #0
 800c80c:	e007      	b.n	800c81e <__sfputs_r+0x22>
 800c80e:	463a      	mov	r2, r7
 800c810:	4630      	mov	r0, r6
 800c812:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c816:	f7ff ffdc 	bl	800c7d2 <__sfputc_r>
 800c81a:	1c43      	adds	r3, r0, #1
 800c81c:	d1f3      	bne.n	800c806 <__sfputs_r+0xa>
 800c81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c820 <_vfiprintf_r>:
 800c820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c824:	460d      	mov	r5, r1
 800c826:	4614      	mov	r4, r2
 800c828:	4698      	mov	r8, r3
 800c82a:	4606      	mov	r6, r0
 800c82c:	b09d      	sub	sp, #116	; 0x74
 800c82e:	b118      	cbz	r0, 800c838 <_vfiprintf_r+0x18>
 800c830:	6983      	ldr	r3, [r0, #24]
 800c832:	b90b      	cbnz	r3, 800c838 <_vfiprintf_r+0x18>
 800c834:	f000 fb10 	bl	800ce58 <__sinit>
 800c838:	4b89      	ldr	r3, [pc, #548]	; (800ca60 <_vfiprintf_r+0x240>)
 800c83a:	429d      	cmp	r5, r3
 800c83c:	d11b      	bne.n	800c876 <_vfiprintf_r+0x56>
 800c83e:	6875      	ldr	r5, [r6, #4]
 800c840:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c842:	07d9      	lsls	r1, r3, #31
 800c844:	d405      	bmi.n	800c852 <_vfiprintf_r+0x32>
 800c846:	89ab      	ldrh	r3, [r5, #12]
 800c848:	059a      	lsls	r2, r3, #22
 800c84a:	d402      	bmi.n	800c852 <_vfiprintf_r+0x32>
 800c84c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c84e:	f000 fba1 	bl	800cf94 <__retarget_lock_acquire_recursive>
 800c852:	89ab      	ldrh	r3, [r5, #12]
 800c854:	071b      	lsls	r3, r3, #28
 800c856:	d501      	bpl.n	800c85c <_vfiprintf_r+0x3c>
 800c858:	692b      	ldr	r3, [r5, #16]
 800c85a:	b9eb      	cbnz	r3, 800c898 <_vfiprintf_r+0x78>
 800c85c:	4629      	mov	r1, r5
 800c85e:	4630      	mov	r0, r6
 800c860:	f000 f96e 	bl	800cb40 <__swsetup_r>
 800c864:	b1c0      	cbz	r0, 800c898 <_vfiprintf_r+0x78>
 800c866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c868:	07dc      	lsls	r4, r3, #31
 800c86a:	d50e      	bpl.n	800c88a <_vfiprintf_r+0x6a>
 800c86c:	f04f 30ff 	mov.w	r0, #4294967295
 800c870:	b01d      	add	sp, #116	; 0x74
 800c872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c876:	4b7b      	ldr	r3, [pc, #492]	; (800ca64 <_vfiprintf_r+0x244>)
 800c878:	429d      	cmp	r5, r3
 800c87a:	d101      	bne.n	800c880 <_vfiprintf_r+0x60>
 800c87c:	68b5      	ldr	r5, [r6, #8]
 800c87e:	e7df      	b.n	800c840 <_vfiprintf_r+0x20>
 800c880:	4b79      	ldr	r3, [pc, #484]	; (800ca68 <_vfiprintf_r+0x248>)
 800c882:	429d      	cmp	r5, r3
 800c884:	bf08      	it	eq
 800c886:	68f5      	ldreq	r5, [r6, #12]
 800c888:	e7da      	b.n	800c840 <_vfiprintf_r+0x20>
 800c88a:	89ab      	ldrh	r3, [r5, #12]
 800c88c:	0598      	lsls	r0, r3, #22
 800c88e:	d4ed      	bmi.n	800c86c <_vfiprintf_r+0x4c>
 800c890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c892:	f000 fb80 	bl	800cf96 <__retarget_lock_release_recursive>
 800c896:	e7e9      	b.n	800c86c <_vfiprintf_r+0x4c>
 800c898:	2300      	movs	r3, #0
 800c89a:	9309      	str	r3, [sp, #36]	; 0x24
 800c89c:	2320      	movs	r3, #32
 800c89e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8a2:	2330      	movs	r3, #48	; 0x30
 800c8a4:	f04f 0901 	mov.w	r9, #1
 800c8a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8ac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ca6c <_vfiprintf_r+0x24c>
 800c8b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8b4:	4623      	mov	r3, r4
 800c8b6:	469a      	mov	sl, r3
 800c8b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8bc:	b10a      	cbz	r2, 800c8c2 <_vfiprintf_r+0xa2>
 800c8be:	2a25      	cmp	r2, #37	; 0x25
 800c8c0:	d1f9      	bne.n	800c8b6 <_vfiprintf_r+0x96>
 800c8c2:	ebba 0b04 	subs.w	fp, sl, r4
 800c8c6:	d00b      	beq.n	800c8e0 <_vfiprintf_r+0xc0>
 800c8c8:	465b      	mov	r3, fp
 800c8ca:	4622      	mov	r2, r4
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f7ff ff94 	bl	800c7fc <__sfputs_r>
 800c8d4:	3001      	adds	r0, #1
 800c8d6:	f000 80aa 	beq.w	800ca2e <_vfiprintf_r+0x20e>
 800c8da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8dc:	445a      	add	r2, fp
 800c8de:	9209      	str	r2, [sp, #36]	; 0x24
 800c8e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f000 80a2 	beq.w	800ca2e <_vfiprintf_r+0x20e>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8f4:	f10a 0a01 	add.w	sl, sl, #1
 800c8f8:	9304      	str	r3, [sp, #16]
 800c8fa:	9307      	str	r3, [sp, #28]
 800c8fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c900:	931a      	str	r3, [sp, #104]	; 0x68
 800c902:	4654      	mov	r4, sl
 800c904:	2205      	movs	r2, #5
 800c906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c90a:	4858      	ldr	r0, [pc, #352]	; (800ca6c <_vfiprintf_r+0x24c>)
 800c90c:	f7ff f8de 	bl	800bacc <memchr>
 800c910:	9a04      	ldr	r2, [sp, #16]
 800c912:	b9d8      	cbnz	r0, 800c94c <_vfiprintf_r+0x12c>
 800c914:	06d1      	lsls	r1, r2, #27
 800c916:	bf44      	itt	mi
 800c918:	2320      	movmi	r3, #32
 800c91a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c91e:	0713      	lsls	r3, r2, #28
 800c920:	bf44      	itt	mi
 800c922:	232b      	movmi	r3, #43	; 0x2b
 800c924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c928:	f89a 3000 	ldrb.w	r3, [sl]
 800c92c:	2b2a      	cmp	r3, #42	; 0x2a
 800c92e:	d015      	beq.n	800c95c <_vfiprintf_r+0x13c>
 800c930:	4654      	mov	r4, sl
 800c932:	2000      	movs	r0, #0
 800c934:	f04f 0c0a 	mov.w	ip, #10
 800c938:	9a07      	ldr	r2, [sp, #28]
 800c93a:	4621      	mov	r1, r4
 800c93c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c940:	3b30      	subs	r3, #48	; 0x30
 800c942:	2b09      	cmp	r3, #9
 800c944:	d94e      	bls.n	800c9e4 <_vfiprintf_r+0x1c4>
 800c946:	b1b0      	cbz	r0, 800c976 <_vfiprintf_r+0x156>
 800c948:	9207      	str	r2, [sp, #28]
 800c94a:	e014      	b.n	800c976 <_vfiprintf_r+0x156>
 800c94c:	eba0 0308 	sub.w	r3, r0, r8
 800c950:	fa09 f303 	lsl.w	r3, r9, r3
 800c954:	4313      	orrs	r3, r2
 800c956:	46a2      	mov	sl, r4
 800c958:	9304      	str	r3, [sp, #16]
 800c95a:	e7d2      	b.n	800c902 <_vfiprintf_r+0xe2>
 800c95c:	9b03      	ldr	r3, [sp, #12]
 800c95e:	1d19      	adds	r1, r3, #4
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	9103      	str	r1, [sp, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	bfbb      	ittet	lt
 800c968:	425b      	neglt	r3, r3
 800c96a:	f042 0202 	orrlt.w	r2, r2, #2
 800c96e:	9307      	strge	r3, [sp, #28]
 800c970:	9307      	strlt	r3, [sp, #28]
 800c972:	bfb8      	it	lt
 800c974:	9204      	strlt	r2, [sp, #16]
 800c976:	7823      	ldrb	r3, [r4, #0]
 800c978:	2b2e      	cmp	r3, #46	; 0x2e
 800c97a:	d10c      	bne.n	800c996 <_vfiprintf_r+0x176>
 800c97c:	7863      	ldrb	r3, [r4, #1]
 800c97e:	2b2a      	cmp	r3, #42	; 0x2a
 800c980:	d135      	bne.n	800c9ee <_vfiprintf_r+0x1ce>
 800c982:	9b03      	ldr	r3, [sp, #12]
 800c984:	3402      	adds	r4, #2
 800c986:	1d1a      	adds	r2, r3, #4
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	9203      	str	r2, [sp, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	bfb8      	it	lt
 800c990:	f04f 33ff 	movlt.w	r3, #4294967295
 800c994:	9305      	str	r3, [sp, #20]
 800c996:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ca70 <_vfiprintf_r+0x250>
 800c99a:	2203      	movs	r2, #3
 800c99c:	4650      	mov	r0, sl
 800c99e:	7821      	ldrb	r1, [r4, #0]
 800c9a0:	f7ff f894 	bl	800bacc <memchr>
 800c9a4:	b140      	cbz	r0, 800c9b8 <_vfiprintf_r+0x198>
 800c9a6:	2340      	movs	r3, #64	; 0x40
 800c9a8:	eba0 000a 	sub.w	r0, r0, sl
 800c9ac:	fa03 f000 	lsl.w	r0, r3, r0
 800c9b0:	9b04      	ldr	r3, [sp, #16]
 800c9b2:	3401      	adds	r4, #1
 800c9b4:	4303      	orrs	r3, r0
 800c9b6:	9304      	str	r3, [sp, #16]
 800c9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9bc:	2206      	movs	r2, #6
 800c9be:	482d      	ldr	r0, [pc, #180]	; (800ca74 <_vfiprintf_r+0x254>)
 800c9c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9c4:	f7ff f882 	bl	800bacc <memchr>
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d03f      	beq.n	800ca4c <_vfiprintf_r+0x22c>
 800c9cc:	4b2a      	ldr	r3, [pc, #168]	; (800ca78 <_vfiprintf_r+0x258>)
 800c9ce:	bb1b      	cbnz	r3, 800ca18 <_vfiprintf_r+0x1f8>
 800c9d0:	9b03      	ldr	r3, [sp, #12]
 800c9d2:	3307      	adds	r3, #7
 800c9d4:	f023 0307 	bic.w	r3, r3, #7
 800c9d8:	3308      	adds	r3, #8
 800c9da:	9303      	str	r3, [sp, #12]
 800c9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9de:	443b      	add	r3, r7
 800c9e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c9e2:	e767      	b.n	800c8b4 <_vfiprintf_r+0x94>
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	2001      	movs	r0, #1
 800c9e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9ec:	e7a5      	b.n	800c93a <_vfiprintf_r+0x11a>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	f04f 0c0a 	mov.w	ip, #10
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	3401      	adds	r4, #1
 800c9f8:	9305      	str	r3, [sp, #20]
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca00:	3a30      	subs	r2, #48	; 0x30
 800ca02:	2a09      	cmp	r2, #9
 800ca04:	d903      	bls.n	800ca0e <_vfiprintf_r+0x1ee>
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d0c5      	beq.n	800c996 <_vfiprintf_r+0x176>
 800ca0a:	9105      	str	r1, [sp, #20]
 800ca0c:	e7c3      	b.n	800c996 <_vfiprintf_r+0x176>
 800ca0e:	4604      	mov	r4, r0
 800ca10:	2301      	movs	r3, #1
 800ca12:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca16:	e7f0      	b.n	800c9fa <_vfiprintf_r+0x1da>
 800ca18:	ab03      	add	r3, sp, #12
 800ca1a:	9300      	str	r3, [sp, #0]
 800ca1c:	462a      	mov	r2, r5
 800ca1e:	4630      	mov	r0, r6
 800ca20:	4b16      	ldr	r3, [pc, #88]	; (800ca7c <_vfiprintf_r+0x25c>)
 800ca22:	a904      	add	r1, sp, #16
 800ca24:	f7fd fdd4 	bl	800a5d0 <_printf_float>
 800ca28:	4607      	mov	r7, r0
 800ca2a:	1c78      	adds	r0, r7, #1
 800ca2c:	d1d6      	bne.n	800c9dc <_vfiprintf_r+0x1bc>
 800ca2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca30:	07d9      	lsls	r1, r3, #31
 800ca32:	d405      	bmi.n	800ca40 <_vfiprintf_r+0x220>
 800ca34:	89ab      	ldrh	r3, [r5, #12]
 800ca36:	059a      	lsls	r2, r3, #22
 800ca38:	d402      	bmi.n	800ca40 <_vfiprintf_r+0x220>
 800ca3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca3c:	f000 faab 	bl	800cf96 <__retarget_lock_release_recursive>
 800ca40:	89ab      	ldrh	r3, [r5, #12]
 800ca42:	065b      	lsls	r3, r3, #25
 800ca44:	f53f af12 	bmi.w	800c86c <_vfiprintf_r+0x4c>
 800ca48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca4a:	e711      	b.n	800c870 <_vfiprintf_r+0x50>
 800ca4c:	ab03      	add	r3, sp, #12
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	462a      	mov	r2, r5
 800ca52:	4630      	mov	r0, r6
 800ca54:	4b09      	ldr	r3, [pc, #36]	; (800ca7c <_vfiprintf_r+0x25c>)
 800ca56:	a904      	add	r1, sp, #16
 800ca58:	f7fe f856 	bl	800ab08 <_printf_i>
 800ca5c:	e7e4      	b.n	800ca28 <_vfiprintf_r+0x208>
 800ca5e:	bf00      	nop
 800ca60:	0800d75c 	.word	0x0800d75c
 800ca64:	0800d77c 	.word	0x0800d77c
 800ca68:	0800d73c 	.word	0x0800d73c
 800ca6c:	0800d5e4 	.word	0x0800d5e4
 800ca70:	0800d5ea 	.word	0x0800d5ea
 800ca74:	0800d5ee 	.word	0x0800d5ee
 800ca78:	0800a5d1 	.word	0x0800a5d1
 800ca7c:	0800c7fd 	.word	0x0800c7fd

0800ca80 <__swbuf_r>:
 800ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca82:	460e      	mov	r6, r1
 800ca84:	4614      	mov	r4, r2
 800ca86:	4605      	mov	r5, r0
 800ca88:	b118      	cbz	r0, 800ca92 <__swbuf_r+0x12>
 800ca8a:	6983      	ldr	r3, [r0, #24]
 800ca8c:	b90b      	cbnz	r3, 800ca92 <__swbuf_r+0x12>
 800ca8e:	f000 f9e3 	bl	800ce58 <__sinit>
 800ca92:	4b21      	ldr	r3, [pc, #132]	; (800cb18 <__swbuf_r+0x98>)
 800ca94:	429c      	cmp	r4, r3
 800ca96:	d12b      	bne.n	800caf0 <__swbuf_r+0x70>
 800ca98:	686c      	ldr	r4, [r5, #4]
 800ca9a:	69a3      	ldr	r3, [r4, #24]
 800ca9c:	60a3      	str	r3, [r4, #8]
 800ca9e:	89a3      	ldrh	r3, [r4, #12]
 800caa0:	071a      	lsls	r2, r3, #28
 800caa2:	d52f      	bpl.n	800cb04 <__swbuf_r+0x84>
 800caa4:	6923      	ldr	r3, [r4, #16]
 800caa6:	b36b      	cbz	r3, 800cb04 <__swbuf_r+0x84>
 800caa8:	6923      	ldr	r3, [r4, #16]
 800caaa:	6820      	ldr	r0, [r4, #0]
 800caac:	b2f6      	uxtb	r6, r6
 800caae:	1ac0      	subs	r0, r0, r3
 800cab0:	6963      	ldr	r3, [r4, #20]
 800cab2:	4637      	mov	r7, r6
 800cab4:	4283      	cmp	r3, r0
 800cab6:	dc04      	bgt.n	800cac2 <__swbuf_r+0x42>
 800cab8:	4621      	mov	r1, r4
 800caba:	4628      	mov	r0, r5
 800cabc:	f000 f938 	bl	800cd30 <_fflush_r>
 800cac0:	bb30      	cbnz	r0, 800cb10 <__swbuf_r+0x90>
 800cac2:	68a3      	ldr	r3, [r4, #8]
 800cac4:	3001      	adds	r0, #1
 800cac6:	3b01      	subs	r3, #1
 800cac8:	60a3      	str	r3, [r4, #8]
 800caca:	6823      	ldr	r3, [r4, #0]
 800cacc:	1c5a      	adds	r2, r3, #1
 800cace:	6022      	str	r2, [r4, #0]
 800cad0:	701e      	strb	r6, [r3, #0]
 800cad2:	6963      	ldr	r3, [r4, #20]
 800cad4:	4283      	cmp	r3, r0
 800cad6:	d004      	beq.n	800cae2 <__swbuf_r+0x62>
 800cad8:	89a3      	ldrh	r3, [r4, #12]
 800cada:	07db      	lsls	r3, r3, #31
 800cadc:	d506      	bpl.n	800caec <__swbuf_r+0x6c>
 800cade:	2e0a      	cmp	r6, #10
 800cae0:	d104      	bne.n	800caec <__swbuf_r+0x6c>
 800cae2:	4621      	mov	r1, r4
 800cae4:	4628      	mov	r0, r5
 800cae6:	f000 f923 	bl	800cd30 <_fflush_r>
 800caea:	b988      	cbnz	r0, 800cb10 <__swbuf_r+0x90>
 800caec:	4638      	mov	r0, r7
 800caee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caf0:	4b0a      	ldr	r3, [pc, #40]	; (800cb1c <__swbuf_r+0x9c>)
 800caf2:	429c      	cmp	r4, r3
 800caf4:	d101      	bne.n	800cafa <__swbuf_r+0x7a>
 800caf6:	68ac      	ldr	r4, [r5, #8]
 800caf8:	e7cf      	b.n	800ca9a <__swbuf_r+0x1a>
 800cafa:	4b09      	ldr	r3, [pc, #36]	; (800cb20 <__swbuf_r+0xa0>)
 800cafc:	429c      	cmp	r4, r3
 800cafe:	bf08      	it	eq
 800cb00:	68ec      	ldreq	r4, [r5, #12]
 800cb02:	e7ca      	b.n	800ca9a <__swbuf_r+0x1a>
 800cb04:	4621      	mov	r1, r4
 800cb06:	4628      	mov	r0, r5
 800cb08:	f000 f81a 	bl	800cb40 <__swsetup_r>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d0cb      	beq.n	800caa8 <__swbuf_r+0x28>
 800cb10:	f04f 37ff 	mov.w	r7, #4294967295
 800cb14:	e7ea      	b.n	800caec <__swbuf_r+0x6c>
 800cb16:	bf00      	nop
 800cb18:	0800d75c 	.word	0x0800d75c
 800cb1c:	0800d77c 	.word	0x0800d77c
 800cb20:	0800d73c 	.word	0x0800d73c

0800cb24 <__ascii_wctomb>:
 800cb24:	4603      	mov	r3, r0
 800cb26:	4608      	mov	r0, r1
 800cb28:	b141      	cbz	r1, 800cb3c <__ascii_wctomb+0x18>
 800cb2a:	2aff      	cmp	r2, #255	; 0xff
 800cb2c:	d904      	bls.n	800cb38 <__ascii_wctomb+0x14>
 800cb2e:	228a      	movs	r2, #138	; 0x8a
 800cb30:	f04f 30ff 	mov.w	r0, #4294967295
 800cb34:	601a      	str	r2, [r3, #0]
 800cb36:	4770      	bx	lr
 800cb38:	2001      	movs	r0, #1
 800cb3a:	700a      	strb	r2, [r1, #0]
 800cb3c:	4770      	bx	lr
	...

0800cb40 <__swsetup_r>:
 800cb40:	4b32      	ldr	r3, [pc, #200]	; (800cc0c <__swsetup_r+0xcc>)
 800cb42:	b570      	push	{r4, r5, r6, lr}
 800cb44:	681d      	ldr	r5, [r3, #0]
 800cb46:	4606      	mov	r6, r0
 800cb48:	460c      	mov	r4, r1
 800cb4a:	b125      	cbz	r5, 800cb56 <__swsetup_r+0x16>
 800cb4c:	69ab      	ldr	r3, [r5, #24]
 800cb4e:	b913      	cbnz	r3, 800cb56 <__swsetup_r+0x16>
 800cb50:	4628      	mov	r0, r5
 800cb52:	f000 f981 	bl	800ce58 <__sinit>
 800cb56:	4b2e      	ldr	r3, [pc, #184]	; (800cc10 <__swsetup_r+0xd0>)
 800cb58:	429c      	cmp	r4, r3
 800cb5a:	d10f      	bne.n	800cb7c <__swsetup_r+0x3c>
 800cb5c:	686c      	ldr	r4, [r5, #4]
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb64:	0719      	lsls	r1, r3, #28
 800cb66:	d42c      	bmi.n	800cbc2 <__swsetup_r+0x82>
 800cb68:	06dd      	lsls	r5, r3, #27
 800cb6a:	d411      	bmi.n	800cb90 <__swsetup_r+0x50>
 800cb6c:	2309      	movs	r3, #9
 800cb6e:	6033      	str	r3, [r6, #0]
 800cb70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb74:	f04f 30ff 	mov.w	r0, #4294967295
 800cb78:	81a3      	strh	r3, [r4, #12]
 800cb7a:	e03e      	b.n	800cbfa <__swsetup_r+0xba>
 800cb7c:	4b25      	ldr	r3, [pc, #148]	; (800cc14 <__swsetup_r+0xd4>)
 800cb7e:	429c      	cmp	r4, r3
 800cb80:	d101      	bne.n	800cb86 <__swsetup_r+0x46>
 800cb82:	68ac      	ldr	r4, [r5, #8]
 800cb84:	e7eb      	b.n	800cb5e <__swsetup_r+0x1e>
 800cb86:	4b24      	ldr	r3, [pc, #144]	; (800cc18 <__swsetup_r+0xd8>)
 800cb88:	429c      	cmp	r4, r3
 800cb8a:	bf08      	it	eq
 800cb8c:	68ec      	ldreq	r4, [r5, #12]
 800cb8e:	e7e6      	b.n	800cb5e <__swsetup_r+0x1e>
 800cb90:	0758      	lsls	r0, r3, #29
 800cb92:	d512      	bpl.n	800cbba <__swsetup_r+0x7a>
 800cb94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb96:	b141      	cbz	r1, 800cbaa <__swsetup_r+0x6a>
 800cb98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb9c:	4299      	cmp	r1, r3
 800cb9e:	d002      	beq.n	800cba6 <__swsetup_r+0x66>
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7ff fb37 	bl	800c214 <_free_r>
 800cba6:	2300      	movs	r3, #0
 800cba8:	6363      	str	r3, [r4, #52]	; 0x34
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbb0:	81a3      	strh	r3, [r4, #12]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	6063      	str	r3, [r4, #4]
 800cbb6:	6923      	ldr	r3, [r4, #16]
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	f043 0308 	orr.w	r3, r3, #8
 800cbc0:	81a3      	strh	r3, [r4, #12]
 800cbc2:	6923      	ldr	r3, [r4, #16]
 800cbc4:	b94b      	cbnz	r3, 800cbda <__swsetup_r+0x9a>
 800cbc6:	89a3      	ldrh	r3, [r4, #12]
 800cbc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbd0:	d003      	beq.n	800cbda <__swsetup_r+0x9a>
 800cbd2:	4621      	mov	r1, r4
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f000 fa05 	bl	800cfe4 <__smakebuf_r>
 800cbda:	89a0      	ldrh	r0, [r4, #12]
 800cbdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbe0:	f010 0301 	ands.w	r3, r0, #1
 800cbe4:	d00a      	beq.n	800cbfc <__swsetup_r+0xbc>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	60a3      	str	r3, [r4, #8]
 800cbea:	6963      	ldr	r3, [r4, #20]
 800cbec:	425b      	negs	r3, r3
 800cbee:	61a3      	str	r3, [r4, #24]
 800cbf0:	6923      	ldr	r3, [r4, #16]
 800cbf2:	b943      	cbnz	r3, 800cc06 <__swsetup_r+0xc6>
 800cbf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbf8:	d1ba      	bne.n	800cb70 <__swsetup_r+0x30>
 800cbfa:	bd70      	pop	{r4, r5, r6, pc}
 800cbfc:	0781      	lsls	r1, r0, #30
 800cbfe:	bf58      	it	pl
 800cc00:	6963      	ldrpl	r3, [r4, #20]
 800cc02:	60a3      	str	r3, [r4, #8]
 800cc04:	e7f4      	b.n	800cbf0 <__swsetup_r+0xb0>
 800cc06:	2000      	movs	r0, #0
 800cc08:	e7f7      	b.n	800cbfa <__swsetup_r+0xba>
 800cc0a:	bf00      	nop
 800cc0c:	200001a0 	.word	0x200001a0
 800cc10:	0800d75c 	.word	0x0800d75c
 800cc14:	0800d77c 	.word	0x0800d77c
 800cc18:	0800d73c 	.word	0x0800d73c

0800cc1c <abort>:
 800cc1c:	2006      	movs	r0, #6
 800cc1e:	b508      	push	{r3, lr}
 800cc20:	f000 fa50 	bl	800d0c4 <raise>
 800cc24:	2001      	movs	r0, #1
 800cc26:	f7f8 f9d3 	bl	8004fd0 <_exit>
	...

0800cc2c <__sflush_r>:
 800cc2c:	898a      	ldrh	r2, [r1, #12]
 800cc2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc30:	4605      	mov	r5, r0
 800cc32:	0710      	lsls	r0, r2, #28
 800cc34:	460c      	mov	r4, r1
 800cc36:	d457      	bmi.n	800cce8 <__sflush_r+0xbc>
 800cc38:	684b      	ldr	r3, [r1, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	dc04      	bgt.n	800cc48 <__sflush_r+0x1c>
 800cc3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	dc01      	bgt.n	800cc48 <__sflush_r+0x1c>
 800cc44:	2000      	movs	r0, #0
 800cc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc4a:	2e00      	cmp	r6, #0
 800cc4c:	d0fa      	beq.n	800cc44 <__sflush_r+0x18>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc54:	682f      	ldr	r7, [r5, #0]
 800cc56:	602b      	str	r3, [r5, #0]
 800cc58:	d032      	beq.n	800ccc0 <__sflush_r+0x94>
 800cc5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc5c:	89a3      	ldrh	r3, [r4, #12]
 800cc5e:	075a      	lsls	r2, r3, #29
 800cc60:	d505      	bpl.n	800cc6e <__sflush_r+0x42>
 800cc62:	6863      	ldr	r3, [r4, #4]
 800cc64:	1ac0      	subs	r0, r0, r3
 800cc66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc68:	b10b      	cbz	r3, 800cc6e <__sflush_r+0x42>
 800cc6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc6c:	1ac0      	subs	r0, r0, r3
 800cc6e:	2300      	movs	r3, #0
 800cc70:	4602      	mov	r2, r0
 800cc72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc74:	4628      	mov	r0, r5
 800cc76:	6a21      	ldr	r1, [r4, #32]
 800cc78:	47b0      	blx	r6
 800cc7a:	1c43      	adds	r3, r0, #1
 800cc7c:	89a3      	ldrh	r3, [r4, #12]
 800cc7e:	d106      	bne.n	800cc8e <__sflush_r+0x62>
 800cc80:	6829      	ldr	r1, [r5, #0]
 800cc82:	291d      	cmp	r1, #29
 800cc84:	d82c      	bhi.n	800cce0 <__sflush_r+0xb4>
 800cc86:	4a29      	ldr	r2, [pc, #164]	; (800cd2c <__sflush_r+0x100>)
 800cc88:	40ca      	lsrs	r2, r1
 800cc8a:	07d6      	lsls	r6, r2, #31
 800cc8c:	d528      	bpl.n	800cce0 <__sflush_r+0xb4>
 800cc8e:	2200      	movs	r2, #0
 800cc90:	6062      	str	r2, [r4, #4]
 800cc92:	6922      	ldr	r2, [r4, #16]
 800cc94:	04d9      	lsls	r1, r3, #19
 800cc96:	6022      	str	r2, [r4, #0]
 800cc98:	d504      	bpl.n	800cca4 <__sflush_r+0x78>
 800cc9a:	1c42      	adds	r2, r0, #1
 800cc9c:	d101      	bne.n	800cca2 <__sflush_r+0x76>
 800cc9e:	682b      	ldr	r3, [r5, #0]
 800cca0:	b903      	cbnz	r3, 800cca4 <__sflush_r+0x78>
 800cca2:	6560      	str	r0, [r4, #84]	; 0x54
 800cca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cca6:	602f      	str	r7, [r5, #0]
 800cca8:	2900      	cmp	r1, #0
 800ccaa:	d0cb      	beq.n	800cc44 <__sflush_r+0x18>
 800ccac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccb0:	4299      	cmp	r1, r3
 800ccb2:	d002      	beq.n	800ccba <__sflush_r+0x8e>
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	f7ff faad 	bl	800c214 <_free_r>
 800ccba:	2000      	movs	r0, #0
 800ccbc:	6360      	str	r0, [r4, #52]	; 0x34
 800ccbe:	e7c2      	b.n	800cc46 <__sflush_r+0x1a>
 800ccc0:	6a21      	ldr	r1, [r4, #32]
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	47b0      	blx	r6
 800ccc8:	1c41      	adds	r1, r0, #1
 800ccca:	d1c7      	bne.n	800cc5c <__sflush_r+0x30>
 800cccc:	682b      	ldr	r3, [r5, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d0c4      	beq.n	800cc5c <__sflush_r+0x30>
 800ccd2:	2b1d      	cmp	r3, #29
 800ccd4:	d001      	beq.n	800ccda <__sflush_r+0xae>
 800ccd6:	2b16      	cmp	r3, #22
 800ccd8:	d101      	bne.n	800ccde <__sflush_r+0xb2>
 800ccda:	602f      	str	r7, [r5, #0]
 800ccdc:	e7b2      	b.n	800cc44 <__sflush_r+0x18>
 800ccde:	89a3      	ldrh	r3, [r4, #12]
 800cce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cce4:	81a3      	strh	r3, [r4, #12]
 800cce6:	e7ae      	b.n	800cc46 <__sflush_r+0x1a>
 800cce8:	690f      	ldr	r7, [r1, #16]
 800ccea:	2f00      	cmp	r7, #0
 800ccec:	d0aa      	beq.n	800cc44 <__sflush_r+0x18>
 800ccee:	0793      	lsls	r3, r2, #30
 800ccf0:	bf18      	it	ne
 800ccf2:	2300      	movne	r3, #0
 800ccf4:	680e      	ldr	r6, [r1, #0]
 800ccf6:	bf08      	it	eq
 800ccf8:	694b      	ldreq	r3, [r1, #20]
 800ccfa:	1bf6      	subs	r6, r6, r7
 800ccfc:	600f      	str	r7, [r1, #0]
 800ccfe:	608b      	str	r3, [r1, #8]
 800cd00:	2e00      	cmp	r6, #0
 800cd02:	dd9f      	ble.n	800cc44 <__sflush_r+0x18>
 800cd04:	4633      	mov	r3, r6
 800cd06:	463a      	mov	r2, r7
 800cd08:	4628      	mov	r0, r5
 800cd0a:	6a21      	ldr	r1, [r4, #32]
 800cd0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cd10:	47e0      	blx	ip
 800cd12:	2800      	cmp	r0, #0
 800cd14:	dc06      	bgt.n	800cd24 <__sflush_r+0xf8>
 800cd16:	89a3      	ldrh	r3, [r4, #12]
 800cd18:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd20:	81a3      	strh	r3, [r4, #12]
 800cd22:	e790      	b.n	800cc46 <__sflush_r+0x1a>
 800cd24:	4407      	add	r7, r0
 800cd26:	1a36      	subs	r6, r6, r0
 800cd28:	e7ea      	b.n	800cd00 <__sflush_r+0xd4>
 800cd2a:	bf00      	nop
 800cd2c:	20400001 	.word	0x20400001

0800cd30 <_fflush_r>:
 800cd30:	b538      	push	{r3, r4, r5, lr}
 800cd32:	690b      	ldr	r3, [r1, #16]
 800cd34:	4605      	mov	r5, r0
 800cd36:	460c      	mov	r4, r1
 800cd38:	b913      	cbnz	r3, 800cd40 <_fflush_r+0x10>
 800cd3a:	2500      	movs	r5, #0
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	bd38      	pop	{r3, r4, r5, pc}
 800cd40:	b118      	cbz	r0, 800cd4a <_fflush_r+0x1a>
 800cd42:	6983      	ldr	r3, [r0, #24]
 800cd44:	b90b      	cbnz	r3, 800cd4a <_fflush_r+0x1a>
 800cd46:	f000 f887 	bl	800ce58 <__sinit>
 800cd4a:	4b14      	ldr	r3, [pc, #80]	; (800cd9c <_fflush_r+0x6c>)
 800cd4c:	429c      	cmp	r4, r3
 800cd4e:	d11b      	bne.n	800cd88 <_fflush_r+0x58>
 800cd50:	686c      	ldr	r4, [r5, #4]
 800cd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d0ef      	beq.n	800cd3a <_fflush_r+0xa>
 800cd5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd5c:	07d0      	lsls	r0, r2, #31
 800cd5e:	d404      	bmi.n	800cd6a <_fflush_r+0x3a>
 800cd60:	0599      	lsls	r1, r3, #22
 800cd62:	d402      	bmi.n	800cd6a <_fflush_r+0x3a>
 800cd64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd66:	f000 f915 	bl	800cf94 <__retarget_lock_acquire_recursive>
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	4621      	mov	r1, r4
 800cd6e:	f7ff ff5d 	bl	800cc2c <__sflush_r>
 800cd72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd74:	4605      	mov	r5, r0
 800cd76:	07da      	lsls	r2, r3, #31
 800cd78:	d4e0      	bmi.n	800cd3c <_fflush_r+0xc>
 800cd7a:	89a3      	ldrh	r3, [r4, #12]
 800cd7c:	059b      	lsls	r3, r3, #22
 800cd7e:	d4dd      	bmi.n	800cd3c <_fflush_r+0xc>
 800cd80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd82:	f000 f908 	bl	800cf96 <__retarget_lock_release_recursive>
 800cd86:	e7d9      	b.n	800cd3c <_fflush_r+0xc>
 800cd88:	4b05      	ldr	r3, [pc, #20]	; (800cda0 <_fflush_r+0x70>)
 800cd8a:	429c      	cmp	r4, r3
 800cd8c:	d101      	bne.n	800cd92 <_fflush_r+0x62>
 800cd8e:	68ac      	ldr	r4, [r5, #8]
 800cd90:	e7df      	b.n	800cd52 <_fflush_r+0x22>
 800cd92:	4b04      	ldr	r3, [pc, #16]	; (800cda4 <_fflush_r+0x74>)
 800cd94:	429c      	cmp	r4, r3
 800cd96:	bf08      	it	eq
 800cd98:	68ec      	ldreq	r4, [r5, #12]
 800cd9a:	e7da      	b.n	800cd52 <_fflush_r+0x22>
 800cd9c:	0800d75c 	.word	0x0800d75c
 800cda0:	0800d77c 	.word	0x0800d77c
 800cda4:	0800d73c 	.word	0x0800d73c

0800cda8 <std>:
 800cda8:	2300      	movs	r3, #0
 800cdaa:	b510      	push	{r4, lr}
 800cdac:	4604      	mov	r4, r0
 800cdae:	e9c0 3300 	strd	r3, r3, [r0]
 800cdb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdb6:	6083      	str	r3, [r0, #8]
 800cdb8:	8181      	strh	r1, [r0, #12]
 800cdba:	6643      	str	r3, [r0, #100]	; 0x64
 800cdbc:	81c2      	strh	r2, [r0, #14]
 800cdbe:	6183      	str	r3, [r0, #24]
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	2208      	movs	r2, #8
 800cdc4:	305c      	adds	r0, #92	; 0x5c
 800cdc6:	f7fd fb5d 	bl	800a484 <memset>
 800cdca:	4b05      	ldr	r3, [pc, #20]	; (800cde0 <std+0x38>)
 800cdcc:	6224      	str	r4, [r4, #32]
 800cdce:	6263      	str	r3, [r4, #36]	; 0x24
 800cdd0:	4b04      	ldr	r3, [pc, #16]	; (800cde4 <std+0x3c>)
 800cdd2:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdd4:	4b04      	ldr	r3, [pc, #16]	; (800cde8 <std+0x40>)
 800cdd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdd8:	4b04      	ldr	r3, [pc, #16]	; (800cdec <std+0x44>)
 800cdda:	6323      	str	r3, [r4, #48]	; 0x30
 800cddc:	bd10      	pop	{r4, pc}
 800cdde:	bf00      	nop
 800cde0:	0800d0fd 	.word	0x0800d0fd
 800cde4:	0800d11f 	.word	0x0800d11f
 800cde8:	0800d157 	.word	0x0800d157
 800cdec:	0800d17b 	.word	0x0800d17b

0800cdf0 <_cleanup_r>:
 800cdf0:	4901      	ldr	r1, [pc, #4]	; (800cdf8 <_cleanup_r+0x8>)
 800cdf2:	f000 b8af 	b.w	800cf54 <_fwalk_reent>
 800cdf6:	bf00      	nop
 800cdf8:	0800cd31 	.word	0x0800cd31

0800cdfc <__sfmoreglue>:
 800cdfc:	2268      	movs	r2, #104	; 0x68
 800cdfe:	b570      	push	{r4, r5, r6, lr}
 800ce00:	1e4d      	subs	r5, r1, #1
 800ce02:	4355      	muls	r5, r2
 800ce04:	460e      	mov	r6, r1
 800ce06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce0a:	f7ff fa6b 	bl	800c2e4 <_malloc_r>
 800ce0e:	4604      	mov	r4, r0
 800ce10:	b140      	cbz	r0, 800ce24 <__sfmoreglue+0x28>
 800ce12:	2100      	movs	r1, #0
 800ce14:	e9c0 1600 	strd	r1, r6, [r0]
 800ce18:	300c      	adds	r0, #12
 800ce1a:	60a0      	str	r0, [r4, #8]
 800ce1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce20:	f7fd fb30 	bl	800a484 <memset>
 800ce24:	4620      	mov	r0, r4
 800ce26:	bd70      	pop	{r4, r5, r6, pc}

0800ce28 <__sfp_lock_acquire>:
 800ce28:	4801      	ldr	r0, [pc, #4]	; (800ce30 <__sfp_lock_acquire+0x8>)
 800ce2a:	f000 b8b3 	b.w	800cf94 <__retarget_lock_acquire_recursive>
 800ce2e:	bf00      	nop
 800ce30:	200019cd 	.word	0x200019cd

0800ce34 <__sfp_lock_release>:
 800ce34:	4801      	ldr	r0, [pc, #4]	; (800ce3c <__sfp_lock_release+0x8>)
 800ce36:	f000 b8ae 	b.w	800cf96 <__retarget_lock_release_recursive>
 800ce3a:	bf00      	nop
 800ce3c:	200019cd 	.word	0x200019cd

0800ce40 <__sinit_lock_acquire>:
 800ce40:	4801      	ldr	r0, [pc, #4]	; (800ce48 <__sinit_lock_acquire+0x8>)
 800ce42:	f000 b8a7 	b.w	800cf94 <__retarget_lock_acquire_recursive>
 800ce46:	bf00      	nop
 800ce48:	200019ce 	.word	0x200019ce

0800ce4c <__sinit_lock_release>:
 800ce4c:	4801      	ldr	r0, [pc, #4]	; (800ce54 <__sinit_lock_release+0x8>)
 800ce4e:	f000 b8a2 	b.w	800cf96 <__retarget_lock_release_recursive>
 800ce52:	bf00      	nop
 800ce54:	200019ce 	.word	0x200019ce

0800ce58 <__sinit>:
 800ce58:	b510      	push	{r4, lr}
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	f7ff fff0 	bl	800ce40 <__sinit_lock_acquire>
 800ce60:	69a3      	ldr	r3, [r4, #24]
 800ce62:	b11b      	cbz	r3, 800ce6c <__sinit+0x14>
 800ce64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce68:	f7ff bff0 	b.w	800ce4c <__sinit_lock_release>
 800ce6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce70:	6523      	str	r3, [r4, #80]	; 0x50
 800ce72:	4b13      	ldr	r3, [pc, #76]	; (800cec0 <__sinit+0x68>)
 800ce74:	4a13      	ldr	r2, [pc, #76]	; (800cec4 <__sinit+0x6c>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce7a:	42a3      	cmp	r3, r4
 800ce7c:	bf08      	it	eq
 800ce7e:	2301      	moveq	r3, #1
 800ce80:	4620      	mov	r0, r4
 800ce82:	bf08      	it	eq
 800ce84:	61a3      	streq	r3, [r4, #24]
 800ce86:	f000 f81f 	bl	800cec8 <__sfp>
 800ce8a:	6060      	str	r0, [r4, #4]
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f000 f81b 	bl	800cec8 <__sfp>
 800ce92:	60a0      	str	r0, [r4, #8]
 800ce94:	4620      	mov	r0, r4
 800ce96:	f000 f817 	bl	800cec8 <__sfp>
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	2104      	movs	r1, #4
 800ce9e:	60e0      	str	r0, [r4, #12]
 800cea0:	6860      	ldr	r0, [r4, #4]
 800cea2:	f7ff ff81 	bl	800cda8 <std>
 800cea6:	2201      	movs	r2, #1
 800cea8:	2109      	movs	r1, #9
 800ceaa:	68a0      	ldr	r0, [r4, #8]
 800ceac:	f7ff ff7c 	bl	800cda8 <std>
 800ceb0:	2202      	movs	r2, #2
 800ceb2:	2112      	movs	r1, #18
 800ceb4:	68e0      	ldr	r0, [r4, #12]
 800ceb6:	f7ff ff77 	bl	800cda8 <std>
 800ceba:	2301      	movs	r3, #1
 800cebc:	61a3      	str	r3, [r4, #24]
 800cebe:	e7d1      	b.n	800ce64 <__sinit+0xc>
 800cec0:	0800d3c0 	.word	0x0800d3c0
 800cec4:	0800cdf1 	.word	0x0800cdf1

0800cec8 <__sfp>:
 800cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceca:	4607      	mov	r7, r0
 800cecc:	f7ff ffac 	bl	800ce28 <__sfp_lock_acquire>
 800ced0:	4b1e      	ldr	r3, [pc, #120]	; (800cf4c <__sfp+0x84>)
 800ced2:	681e      	ldr	r6, [r3, #0]
 800ced4:	69b3      	ldr	r3, [r6, #24]
 800ced6:	b913      	cbnz	r3, 800cede <__sfp+0x16>
 800ced8:	4630      	mov	r0, r6
 800ceda:	f7ff ffbd 	bl	800ce58 <__sinit>
 800cede:	3648      	adds	r6, #72	; 0x48
 800cee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cee4:	3b01      	subs	r3, #1
 800cee6:	d503      	bpl.n	800cef0 <__sfp+0x28>
 800cee8:	6833      	ldr	r3, [r6, #0]
 800ceea:	b30b      	cbz	r3, 800cf30 <__sfp+0x68>
 800ceec:	6836      	ldr	r6, [r6, #0]
 800ceee:	e7f7      	b.n	800cee0 <__sfp+0x18>
 800cef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cef4:	b9d5      	cbnz	r5, 800cf2c <__sfp+0x64>
 800cef6:	4b16      	ldr	r3, [pc, #88]	; (800cf50 <__sfp+0x88>)
 800cef8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cefc:	60e3      	str	r3, [r4, #12]
 800cefe:	6665      	str	r5, [r4, #100]	; 0x64
 800cf00:	f000 f847 	bl	800cf92 <__retarget_lock_init_recursive>
 800cf04:	f7ff ff96 	bl	800ce34 <__sfp_lock_release>
 800cf08:	2208      	movs	r2, #8
 800cf0a:	4629      	mov	r1, r5
 800cf0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf14:	6025      	str	r5, [r4, #0]
 800cf16:	61a5      	str	r5, [r4, #24]
 800cf18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf1c:	f7fd fab2 	bl	800a484 <memset>
 800cf20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf28:	4620      	mov	r0, r4
 800cf2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf2c:	3468      	adds	r4, #104	; 0x68
 800cf2e:	e7d9      	b.n	800cee4 <__sfp+0x1c>
 800cf30:	2104      	movs	r1, #4
 800cf32:	4638      	mov	r0, r7
 800cf34:	f7ff ff62 	bl	800cdfc <__sfmoreglue>
 800cf38:	4604      	mov	r4, r0
 800cf3a:	6030      	str	r0, [r6, #0]
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	d1d5      	bne.n	800ceec <__sfp+0x24>
 800cf40:	f7ff ff78 	bl	800ce34 <__sfp_lock_release>
 800cf44:	230c      	movs	r3, #12
 800cf46:	603b      	str	r3, [r7, #0]
 800cf48:	e7ee      	b.n	800cf28 <__sfp+0x60>
 800cf4a:	bf00      	nop
 800cf4c:	0800d3c0 	.word	0x0800d3c0
 800cf50:	ffff0001 	.word	0xffff0001

0800cf54 <_fwalk_reent>:
 800cf54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf58:	4606      	mov	r6, r0
 800cf5a:	4688      	mov	r8, r1
 800cf5c:	2700      	movs	r7, #0
 800cf5e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf66:	f1b9 0901 	subs.w	r9, r9, #1
 800cf6a:	d505      	bpl.n	800cf78 <_fwalk_reent+0x24>
 800cf6c:	6824      	ldr	r4, [r4, #0]
 800cf6e:	2c00      	cmp	r4, #0
 800cf70:	d1f7      	bne.n	800cf62 <_fwalk_reent+0xe>
 800cf72:	4638      	mov	r0, r7
 800cf74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf78:	89ab      	ldrh	r3, [r5, #12]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d907      	bls.n	800cf8e <_fwalk_reent+0x3a>
 800cf7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf82:	3301      	adds	r3, #1
 800cf84:	d003      	beq.n	800cf8e <_fwalk_reent+0x3a>
 800cf86:	4629      	mov	r1, r5
 800cf88:	4630      	mov	r0, r6
 800cf8a:	47c0      	blx	r8
 800cf8c:	4307      	orrs	r7, r0
 800cf8e:	3568      	adds	r5, #104	; 0x68
 800cf90:	e7e9      	b.n	800cf66 <_fwalk_reent+0x12>

0800cf92 <__retarget_lock_init_recursive>:
 800cf92:	4770      	bx	lr

0800cf94 <__retarget_lock_acquire_recursive>:
 800cf94:	4770      	bx	lr

0800cf96 <__retarget_lock_release_recursive>:
 800cf96:	4770      	bx	lr

0800cf98 <__swhatbuf_r>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	460e      	mov	r6, r1
 800cf9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa0:	4614      	mov	r4, r2
 800cfa2:	2900      	cmp	r1, #0
 800cfa4:	461d      	mov	r5, r3
 800cfa6:	b096      	sub	sp, #88	; 0x58
 800cfa8:	da08      	bge.n	800cfbc <__swhatbuf_r+0x24>
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cfb0:	602a      	str	r2, [r5, #0]
 800cfb2:	061a      	lsls	r2, r3, #24
 800cfb4:	d410      	bmi.n	800cfd8 <__swhatbuf_r+0x40>
 800cfb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfba:	e00e      	b.n	800cfda <__swhatbuf_r+0x42>
 800cfbc:	466a      	mov	r2, sp
 800cfbe:	f000 f903 	bl	800d1c8 <_fstat_r>
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	dbf1      	blt.n	800cfaa <__swhatbuf_r+0x12>
 800cfc6:	9a01      	ldr	r2, [sp, #4]
 800cfc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cfcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cfd0:	425a      	negs	r2, r3
 800cfd2:	415a      	adcs	r2, r3
 800cfd4:	602a      	str	r2, [r5, #0]
 800cfd6:	e7ee      	b.n	800cfb6 <__swhatbuf_r+0x1e>
 800cfd8:	2340      	movs	r3, #64	; 0x40
 800cfda:	2000      	movs	r0, #0
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	b016      	add	sp, #88	; 0x58
 800cfe0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cfe4 <__smakebuf_r>:
 800cfe4:	898b      	ldrh	r3, [r1, #12]
 800cfe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfe8:	079d      	lsls	r5, r3, #30
 800cfea:	4606      	mov	r6, r0
 800cfec:	460c      	mov	r4, r1
 800cfee:	d507      	bpl.n	800d000 <__smakebuf_r+0x1c>
 800cff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cff4:	6023      	str	r3, [r4, #0]
 800cff6:	6123      	str	r3, [r4, #16]
 800cff8:	2301      	movs	r3, #1
 800cffa:	6163      	str	r3, [r4, #20]
 800cffc:	b002      	add	sp, #8
 800cffe:	bd70      	pop	{r4, r5, r6, pc}
 800d000:	466a      	mov	r2, sp
 800d002:	ab01      	add	r3, sp, #4
 800d004:	f7ff ffc8 	bl	800cf98 <__swhatbuf_r>
 800d008:	9900      	ldr	r1, [sp, #0]
 800d00a:	4605      	mov	r5, r0
 800d00c:	4630      	mov	r0, r6
 800d00e:	f7ff f969 	bl	800c2e4 <_malloc_r>
 800d012:	b948      	cbnz	r0, 800d028 <__smakebuf_r+0x44>
 800d014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d018:	059a      	lsls	r2, r3, #22
 800d01a:	d4ef      	bmi.n	800cffc <__smakebuf_r+0x18>
 800d01c:	f023 0303 	bic.w	r3, r3, #3
 800d020:	f043 0302 	orr.w	r3, r3, #2
 800d024:	81a3      	strh	r3, [r4, #12]
 800d026:	e7e3      	b.n	800cff0 <__smakebuf_r+0xc>
 800d028:	4b0d      	ldr	r3, [pc, #52]	; (800d060 <__smakebuf_r+0x7c>)
 800d02a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d02c:	89a3      	ldrh	r3, [r4, #12]
 800d02e:	6020      	str	r0, [r4, #0]
 800d030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d034:	81a3      	strh	r3, [r4, #12]
 800d036:	9b00      	ldr	r3, [sp, #0]
 800d038:	6120      	str	r0, [r4, #16]
 800d03a:	6163      	str	r3, [r4, #20]
 800d03c:	9b01      	ldr	r3, [sp, #4]
 800d03e:	b15b      	cbz	r3, 800d058 <__smakebuf_r+0x74>
 800d040:	4630      	mov	r0, r6
 800d042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d046:	f000 f8d1 	bl	800d1ec <_isatty_r>
 800d04a:	b128      	cbz	r0, 800d058 <__smakebuf_r+0x74>
 800d04c:	89a3      	ldrh	r3, [r4, #12]
 800d04e:	f023 0303 	bic.w	r3, r3, #3
 800d052:	f043 0301 	orr.w	r3, r3, #1
 800d056:	81a3      	strh	r3, [r4, #12]
 800d058:	89a0      	ldrh	r0, [r4, #12]
 800d05a:	4305      	orrs	r5, r0
 800d05c:	81a5      	strh	r5, [r4, #12]
 800d05e:	e7cd      	b.n	800cffc <__smakebuf_r+0x18>
 800d060:	0800cdf1 	.word	0x0800cdf1

0800d064 <_malloc_usable_size_r>:
 800d064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d068:	1f18      	subs	r0, r3, #4
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	bfbc      	itt	lt
 800d06e:	580b      	ldrlt	r3, [r1, r0]
 800d070:	18c0      	addlt	r0, r0, r3
 800d072:	4770      	bx	lr

0800d074 <_raise_r>:
 800d074:	291f      	cmp	r1, #31
 800d076:	b538      	push	{r3, r4, r5, lr}
 800d078:	4604      	mov	r4, r0
 800d07a:	460d      	mov	r5, r1
 800d07c:	d904      	bls.n	800d088 <_raise_r+0x14>
 800d07e:	2316      	movs	r3, #22
 800d080:	6003      	str	r3, [r0, #0]
 800d082:	f04f 30ff 	mov.w	r0, #4294967295
 800d086:	bd38      	pop	{r3, r4, r5, pc}
 800d088:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d08a:	b112      	cbz	r2, 800d092 <_raise_r+0x1e>
 800d08c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d090:	b94b      	cbnz	r3, 800d0a6 <_raise_r+0x32>
 800d092:	4620      	mov	r0, r4
 800d094:	f000 f830 	bl	800d0f8 <_getpid_r>
 800d098:	462a      	mov	r2, r5
 800d09a:	4601      	mov	r1, r0
 800d09c:	4620      	mov	r0, r4
 800d09e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0a2:	f000 b817 	b.w	800d0d4 <_kill_r>
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d00a      	beq.n	800d0c0 <_raise_r+0x4c>
 800d0aa:	1c59      	adds	r1, r3, #1
 800d0ac:	d103      	bne.n	800d0b6 <_raise_r+0x42>
 800d0ae:	2316      	movs	r3, #22
 800d0b0:	6003      	str	r3, [r0, #0]
 800d0b2:	2001      	movs	r0, #1
 800d0b4:	e7e7      	b.n	800d086 <_raise_r+0x12>
 800d0b6:	2400      	movs	r4, #0
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0be:	4798      	blx	r3
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	e7e0      	b.n	800d086 <_raise_r+0x12>

0800d0c4 <raise>:
 800d0c4:	4b02      	ldr	r3, [pc, #8]	; (800d0d0 <raise+0xc>)
 800d0c6:	4601      	mov	r1, r0
 800d0c8:	6818      	ldr	r0, [r3, #0]
 800d0ca:	f7ff bfd3 	b.w	800d074 <_raise_r>
 800d0ce:	bf00      	nop
 800d0d0:	200001a0 	.word	0x200001a0

0800d0d4 <_kill_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	4d06      	ldr	r5, [pc, #24]	; (800d0f4 <_kill_r+0x20>)
 800d0da:	4604      	mov	r4, r0
 800d0dc:	4608      	mov	r0, r1
 800d0de:	4611      	mov	r1, r2
 800d0e0:	602b      	str	r3, [r5, #0]
 800d0e2:	f7f7 ff6b 	bl	8004fbc <_kill>
 800d0e6:	1c43      	adds	r3, r0, #1
 800d0e8:	d102      	bne.n	800d0f0 <_kill_r+0x1c>
 800d0ea:	682b      	ldr	r3, [r5, #0]
 800d0ec:	b103      	cbz	r3, 800d0f0 <_kill_r+0x1c>
 800d0ee:	6023      	str	r3, [r4, #0]
 800d0f0:	bd38      	pop	{r3, r4, r5, pc}
 800d0f2:	bf00      	nop
 800d0f4:	200019c8 	.word	0x200019c8

0800d0f8 <_getpid_r>:
 800d0f8:	f7f7 bf5e 	b.w	8004fb8 <_getpid>

0800d0fc <__sread>:
 800d0fc:	b510      	push	{r4, lr}
 800d0fe:	460c      	mov	r4, r1
 800d100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d104:	f000 f894 	bl	800d230 <_read_r>
 800d108:	2800      	cmp	r0, #0
 800d10a:	bfab      	itete	ge
 800d10c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d10e:	89a3      	ldrhlt	r3, [r4, #12]
 800d110:	181b      	addge	r3, r3, r0
 800d112:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d116:	bfac      	ite	ge
 800d118:	6563      	strge	r3, [r4, #84]	; 0x54
 800d11a:	81a3      	strhlt	r3, [r4, #12]
 800d11c:	bd10      	pop	{r4, pc}

0800d11e <__swrite>:
 800d11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d122:	461f      	mov	r7, r3
 800d124:	898b      	ldrh	r3, [r1, #12]
 800d126:	4605      	mov	r5, r0
 800d128:	05db      	lsls	r3, r3, #23
 800d12a:	460c      	mov	r4, r1
 800d12c:	4616      	mov	r6, r2
 800d12e:	d505      	bpl.n	800d13c <__swrite+0x1e>
 800d130:	2302      	movs	r3, #2
 800d132:	2200      	movs	r2, #0
 800d134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d138:	f000 f868 	bl	800d20c <_lseek_r>
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	4632      	mov	r2, r6
 800d140:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d144:	81a3      	strh	r3, [r4, #12]
 800d146:	4628      	mov	r0, r5
 800d148:	463b      	mov	r3, r7
 800d14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d152:	f000 b817 	b.w	800d184 <_write_r>

0800d156 <__sseek>:
 800d156:	b510      	push	{r4, lr}
 800d158:	460c      	mov	r4, r1
 800d15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d15e:	f000 f855 	bl	800d20c <_lseek_r>
 800d162:	1c43      	adds	r3, r0, #1
 800d164:	89a3      	ldrh	r3, [r4, #12]
 800d166:	bf15      	itete	ne
 800d168:	6560      	strne	r0, [r4, #84]	; 0x54
 800d16a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d16e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d172:	81a3      	strheq	r3, [r4, #12]
 800d174:	bf18      	it	ne
 800d176:	81a3      	strhne	r3, [r4, #12]
 800d178:	bd10      	pop	{r4, pc}

0800d17a <__sclose>:
 800d17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d17e:	f000 b813 	b.w	800d1a8 <_close_r>
	...

0800d184 <_write_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	4604      	mov	r4, r0
 800d188:	4608      	mov	r0, r1
 800d18a:	4611      	mov	r1, r2
 800d18c:	2200      	movs	r2, #0
 800d18e:	4d05      	ldr	r5, [pc, #20]	; (800d1a4 <_write_r+0x20>)
 800d190:	602a      	str	r2, [r5, #0]
 800d192:	461a      	mov	r2, r3
 800d194:	f7f7 ff30 	bl	8004ff8 <_write>
 800d198:	1c43      	adds	r3, r0, #1
 800d19a:	d102      	bne.n	800d1a2 <_write_r+0x1e>
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	b103      	cbz	r3, 800d1a2 <_write_r+0x1e>
 800d1a0:	6023      	str	r3, [r4, #0]
 800d1a2:	bd38      	pop	{r3, r4, r5, pc}
 800d1a4:	200019c8 	.word	0x200019c8

0800d1a8 <_close_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	4d05      	ldr	r5, [pc, #20]	; (800d1c4 <_close_r+0x1c>)
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	4608      	mov	r0, r1
 800d1b2:	602b      	str	r3, [r5, #0]
 800d1b4:	f7f7 ff2e 	bl	8005014 <_close>
 800d1b8:	1c43      	adds	r3, r0, #1
 800d1ba:	d102      	bne.n	800d1c2 <_close_r+0x1a>
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	b103      	cbz	r3, 800d1c2 <_close_r+0x1a>
 800d1c0:	6023      	str	r3, [r4, #0]
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	200019c8 	.word	0x200019c8

0800d1c8 <_fstat_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	4d06      	ldr	r5, [pc, #24]	; (800d1e8 <_fstat_r+0x20>)
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	4608      	mov	r0, r1
 800d1d2:	4611      	mov	r1, r2
 800d1d4:	602b      	str	r3, [r5, #0]
 800d1d6:	f7f7 ff21 	bl	800501c <_fstat>
 800d1da:	1c43      	adds	r3, r0, #1
 800d1dc:	d102      	bne.n	800d1e4 <_fstat_r+0x1c>
 800d1de:	682b      	ldr	r3, [r5, #0]
 800d1e0:	b103      	cbz	r3, 800d1e4 <_fstat_r+0x1c>
 800d1e2:	6023      	str	r3, [r4, #0]
 800d1e4:	bd38      	pop	{r3, r4, r5, pc}
 800d1e6:	bf00      	nop
 800d1e8:	200019c8 	.word	0x200019c8

0800d1ec <_isatty_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	4d05      	ldr	r5, [pc, #20]	; (800d208 <_isatty_r+0x1c>)
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	4608      	mov	r0, r1
 800d1f6:	602b      	str	r3, [r5, #0]
 800d1f8:	f7f7 ff16 	bl	8005028 <_isatty>
 800d1fc:	1c43      	adds	r3, r0, #1
 800d1fe:	d102      	bne.n	800d206 <_isatty_r+0x1a>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	b103      	cbz	r3, 800d206 <_isatty_r+0x1a>
 800d204:	6023      	str	r3, [r4, #0]
 800d206:	bd38      	pop	{r3, r4, r5, pc}
 800d208:	200019c8 	.word	0x200019c8

0800d20c <_lseek_r>:
 800d20c:	b538      	push	{r3, r4, r5, lr}
 800d20e:	4604      	mov	r4, r0
 800d210:	4608      	mov	r0, r1
 800d212:	4611      	mov	r1, r2
 800d214:	2200      	movs	r2, #0
 800d216:	4d05      	ldr	r5, [pc, #20]	; (800d22c <_lseek_r+0x20>)
 800d218:	602a      	str	r2, [r5, #0]
 800d21a:	461a      	mov	r2, r3
 800d21c:	f7f7 ff06 	bl	800502c <_lseek>
 800d220:	1c43      	adds	r3, r0, #1
 800d222:	d102      	bne.n	800d22a <_lseek_r+0x1e>
 800d224:	682b      	ldr	r3, [r5, #0]
 800d226:	b103      	cbz	r3, 800d22a <_lseek_r+0x1e>
 800d228:	6023      	str	r3, [r4, #0]
 800d22a:	bd38      	pop	{r3, r4, r5, pc}
 800d22c:	200019c8 	.word	0x200019c8

0800d230 <_read_r>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	4604      	mov	r4, r0
 800d234:	4608      	mov	r0, r1
 800d236:	4611      	mov	r1, r2
 800d238:	2200      	movs	r2, #0
 800d23a:	4d05      	ldr	r5, [pc, #20]	; (800d250 <_read_r+0x20>)
 800d23c:	602a      	str	r2, [r5, #0]
 800d23e:	461a      	mov	r2, r3
 800d240:	f7f7 fecc 	bl	8004fdc <_read>
 800d244:	1c43      	adds	r3, r0, #1
 800d246:	d102      	bne.n	800d24e <_read_r+0x1e>
 800d248:	682b      	ldr	r3, [r5, #0]
 800d24a:	b103      	cbz	r3, 800d24e <_read_r+0x1e>
 800d24c:	6023      	str	r3, [r4, #0]
 800d24e:	bd38      	pop	{r3, r4, r5, pc}
 800d250:	200019c8 	.word	0x200019c8

0800d254 <_init>:
 800d254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d256:	bf00      	nop
 800d258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d25a:	bc08      	pop	{r3}
 800d25c:	469e      	mov	lr, r3
 800d25e:	4770      	bx	lr

0800d260 <_fini>:
 800d260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d262:	bf00      	nop
 800d264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d266:	bc08      	pop	{r3}
 800d268:	469e      	mov	lr, r3
 800d26a:	4770      	bx	lr
