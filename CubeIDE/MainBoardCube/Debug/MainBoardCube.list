
MainBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2f4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800f438  0800f438  0001f438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9a4  0800f9a4  00020360  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9a4  0800f9a4  0001f9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9ac  0800f9ac  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9ac  0800f9ac  0001f9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9b0  0800f9b0  0001f9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0800f9b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a8  20000360  0800fd14  00020360  2**2
                  ALLOC
 10 ._user_heap_stack 00003000  20001a08  0800fd14  00021a08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c1f2  00000000  00000000  00020389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052c3  00000000  00000000  0004c57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000210f9  00000000  00000000  0005183e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00072938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00006b48  00000000  00000000  00073ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a14b  00000000  00000000  0007a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031226  00000000  00000000  0009493b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090a11  00000000  00000000  000c5b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156572  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053a4  00000000  00000000  001565c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000360 	.word	0x20000360
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f41c 	.word	0x0800f41c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000364 	.word	0x20000364
 800017c:	0800f41c 	.word	0x0800f41c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__gesf2>:
 8000f74:	f04f 3cff 	mov.w	ip, #4294967295
 8000f78:	e006      	b.n	8000f88 <__cmpsf2+0x4>
 8000f7a:	bf00      	nop

08000f7c <__lesf2>:
 8000f7c:	f04f 0c01 	mov.w	ip, #1
 8000f80:	e002      	b.n	8000f88 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__cmpsf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	bf18      	it	ne
 8000f9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9e:	d011      	beq.n	8000fc4 <__cmpsf2+0x40>
 8000fa0:	b001      	add	sp, #4
 8000fa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa6:	bf18      	it	ne
 8000fa8:	ea90 0f01 	teqne	r0, r1
 8000fac:	bf58      	it	pl
 8000fae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fb2:	bf88      	it	hi
 8000fb4:	17c8      	asrhi	r0, r1, #31
 8000fb6:	bf38      	it	cc
 8000fb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fbc:	bf18      	it	ne
 8000fbe:	f040 0001 	orrne.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	d102      	bne.n	8000fd0 <__cmpsf2+0x4c>
 8000fca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fce:	d105      	bne.n	8000fdc <__cmpsf2+0x58>
 8000fd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd4:	d1e4      	bne.n	8000fa0 <__cmpsf2+0x1c>
 8000fd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fda:	d0e1      	beq.n	8000fa0 <__cmpsf2+0x1c>
 8000fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_cfrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4661      	mov	r1, ip
 8000fea:	e7ff      	b.n	8000fec <__aeabi_cfcmpeq>

08000fec <__aeabi_cfcmpeq>:
 8000fec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fee:	f7ff ffc9 	bl	8000f84 <__cmpsf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	bf48      	it	mi
 8000ff6:	f110 0f00 	cmnmi.w	r0, #0
 8000ffa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ffc <__aeabi_fcmpeq>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff fff4 	bl	8000fec <__aeabi_cfcmpeq>
 8001004:	bf0c      	ite	eq
 8001006:	2001      	moveq	r0, #1
 8001008:	2000      	movne	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmplt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffea 	bl	8000fec <__aeabi_cfcmpeq>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmple>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffe0 	bl	8000fec <__aeabi_cfcmpeq>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpge>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffd2 	bl	8000fe4 <__aeabi_cfrcmple>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpgt>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffc8 	bl	8000fe4 <__aeabi_cfrcmple>
 8001054:	bf34      	ite	cc
 8001056:	2001      	movcc	r0, #1
 8001058:	2000      	movcs	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_f2iz>:
 8001060:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001064:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001068:	d30f      	bcc.n	800108a <__aeabi_f2iz+0x2a>
 800106a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001072:	d90d      	bls.n	8001090 <__aeabi_f2iz+0x30>
 8001074:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800107c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001080:	fa23 f002 	lsr.w	r0, r3, r2
 8001084:	bf18      	it	ne
 8001086:	4240      	negne	r0, r0
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr
 8001090:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001094:	d101      	bne.n	800109a <__aeabi_f2iz+0x3a>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	d105      	bne.n	80010a6 <__aeabi_f2iz+0x46>
 800109a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800109e:	bf08      	it	eq
 80010a0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010a4:	4770      	bx	lr
 80010a6:	f04f 0000 	mov.w	r0, #0
 80010aa:	4770      	bx	lr

080010ac <__aeabi_f2uiz>:
 80010ac:	0042      	lsls	r2, r0, #1
 80010ae:	d20e      	bcs.n	80010ce <__aeabi_f2uiz+0x22>
 80010b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b4:	d30b      	bcc.n	80010ce <__aeabi_f2uiz+0x22>
 80010b6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010be:	d409      	bmi.n	80010d4 <__aeabi_f2uiz+0x28>
 80010c0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c8:	fa23 f002 	lsr.w	r0, r3, r2
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr
 80010d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d8:	d101      	bne.n	80010de <__aeabi_f2uiz+0x32>
 80010da:	0242      	lsls	r2, r0, #9
 80010dc:	d102      	bne.n	80010e4 <__aeabi_f2uiz+0x38>
 80010de:	f04f 30ff 	mov.w	r0, #4294967295
 80010e2:	4770      	bx	lr
 80010e4:	f04f 0000 	mov.w	r0, #0
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <__aeabi_uldivmod>:
 80010ec:	b953      	cbnz	r3, 8001104 <__aeabi_uldivmod+0x18>
 80010ee:	b94a      	cbnz	r2, 8001104 <__aeabi_uldivmod+0x18>
 80010f0:	2900      	cmp	r1, #0
 80010f2:	bf08      	it	eq
 80010f4:	2800      	cmpeq	r0, #0
 80010f6:	bf1c      	itt	ne
 80010f8:	f04f 31ff 	movne.w	r1, #4294967295
 80010fc:	f04f 30ff 	movne.w	r0, #4294967295
 8001100:	f000 b976 	b.w	80013f0 <__aeabi_idiv0>
 8001104:	f1ad 0c08 	sub.w	ip, sp, #8
 8001108:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800110c:	f000 f806 	bl	800111c <__udivmoddi4>
 8001110:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001118:	b004      	add	sp, #16
 800111a:	4770      	bx	lr

0800111c <__udivmoddi4>:
 800111c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001120:	9e08      	ldr	r6, [sp, #32]
 8001122:	460d      	mov	r5, r1
 8001124:	4604      	mov	r4, r0
 8001126:	4688      	mov	r8, r1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d14d      	bne.n	80011c8 <__udivmoddi4+0xac>
 800112c:	428a      	cmp	r2, r1
 800112e:	4694      	mov	ip, r2
 8001130:	d968      	bls.n	8001204 <__udivmoddi4+0xe8>
 8001132:	fab2 f282 	clz	r2, r2
 8001136:	b152      	cbz	r2, 800114e <__udivmoddi4+0x32>
 8001138:	fa01 f302 	lsl.w	r3, r1, r2
 800113c:	f1c2 0120 	rsb	r1, r2, #32
 8001140:	fa20 f101 	lsr.w	r1, r0, r1
 8001144:	fa0c fc02 	lsl.w	ip, ip, r2
 8001148:	ea41 0803 	orr.w	r8, r1, r3
 800114c:	4094      	lsls	r4, r2
 800114e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001152:	fbb8 f7f1 	udiv	r7, r8, r1
 8001156:	fa1f fe8c 	uxth.w	lr, ip
 800115a:	fb01 8817 	mls	r8, r1, r7, r8
 800115e:	fb07 f00e 	mul.w	r0, r7, lr
 8001162:	0c23      	lsrs	r3, r4, #16
 8001164:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001168:	4298      	cmp	r0, r3
 800116a:	d90a      	bls.n	8001182 <__udivmoddi4+0x66>
 800116c:	eb1c 0303 	adds.w	r3, ip, r3
 8001170:	f107 35ff 	add.w	r5, r7, #4294967295
 8001174:	f080 811e 	bcs.w	80013b4 <__udivmoddi4+0x298>
 8001178:	4298      	cmp	r0, r3
 800117a:	f240 811b 	bls.w	80013b4 <__udivmoddi4+0x298>
 800117e:	3f02      	subs	r7, #2
 8001180:	4463      	add	r3, ip
 8001182:	1a1b      	subs	r3, r3, r0
 8001184:	fbb3 f0f1 	udiv	r0, r3, r1
 8001188:	fb01 3310 	mls	r3, r1, r0, r3
 800118c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001190:	b2a4      	uxth	r4, r4
 8001192:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001196:	45a6      	cmp	lr, r4
 8001198:	d90a      	bls.n	80011b0 <__udivmoddi4+0x94>
 800119a:	eb1c 0404 	adds.w	r4, ip, r4
 800119e:	f100 33ff 	add.w	r3, r0, #4294967295
 80011a2:	f080 8109 	bcs.w	80013b8 <__udivmoddi4+0x29c>
 80011a6:	45a6      	cmp	lr, r4
 80011a8:	f240 8106 	bls.w	80013b8 <__udivmoddi4+0x29c>
 80011ac:	4464      	add	r4, ip
 80011ae:	3802      	subs	r0, #2
 80011b0:	2100      	movs	r1, #0
 80011b2:	eba4 040e 	sub.w	r4, r4, lr
 80011b6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80011ba:	b11e      	cbz	r6, 80011c4 <__udivmoddi4+0xa8>
 80011bc:	2300      	movs	r3, #0
 80011be:	40d4      	lsrs	r4, r2
 80011c0:	e9c6 4300 	strd	r4, r3, [r6]
 80011c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011c8:	428b      	cmp	r3, r1
 80011ca:	d908      	bls.n	80011de <__udivmoddi4+0xc2>
 80011cc:	2e00      	cmp	r6, #0
 80011ce:	f000 80ee 	beq.w	80013ae <__udivmoddi4+0x292>
 80011d2:	2100      	movs	r1, #0
 80011d4:	e9c6 0500 	strd	r0, r5, [r6]
 80011d8:	4608      	mov	r0, r1
 80011da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011de:	fab3 f183 	clz	r1, r3
 80011e2:	2900      	cmp	r1, #0
 80011e4:	d14a      	bne.n	800127c <__udivmoddi4+0x160>
 80011e6:	42ab      	cmp	r3, r5
 80011e8:	d302      	bcc.n	80011f0 <__udivmoddi4+0xd4>
 80011ea:	4282      	cmp	r2, r0
 80011ec:	f200 80fc 	bhi.w	80013e8 <__udivmoddi4+0x2cc>
 80011f0:	1a84      	subs	r4, r0, r2
 80011f2:	eb65 0303 	sbc.w	r3, r5, r3
 80011f6:	2001      	movs	r0, #1
 80011f8:	4698      	mov	r8, r3
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d0e2      	beq.n	80011c4 <__udivmoddi4+0xa8>
 80011fe:	e9c6 4800 	strd	r4, r8, [r6]
 8001202:	e7df      	b.n	80011c4 <__udivmoddi4+0xa8>
 8001204:	b902      	cbnz	r2, 8001208 <__udivmoddi4+0xec>
 8001206:	deff      	udf	#255	; 0xff
 8001208:	fab2 f282 	clz	r2, r2
 800120c:	2a00      	cmp	r2, #0
 800120e:	f040 8091 	bne.w	8001334 <__udivmoddi4+0x218>
 8001212:	eba1 000c 	sub.w	r0, r1, ip
 8001216:	2101      	movs	r1, #1
 8001218:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800121c:	fa1f fe8c 	uxth.w	lr, ip
 8001220:	fbb0 f3f7 	udiv	r3, r0, r7
 8001224:	fb07 0013 	mls	r0, r7, r3, r0
 8001228:	0c25      	lsrs	r5, r4, #16
 800122a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800122e:	fb0e f003 	mul.w	r0, lr, r3
 8001232:	42a8      	cmp	r0, r5
 8001234:	d908      	bls.n	8001248 <__udivmoddi4+0x12c>
 8001236:	eb1c 0505 	adds.w	r5, ip, r5
 800123a:	f103 38ff 	add.w	r8, r3, #4294967295
 800123e:	d202      	bcs.n	8001246 <__udivmoddi4+0x12a>
 8001240:	42a8      	cmp	r0, r5
 8001242:	f200 80ce 	bhi.w	80013e2 <__udivmoddi4+0x2c6>
 8001246:	4643      	mov	r3, r8
 8001248:	1a2d      	subs	r5, r5, r0
 800124a:	fbb5 f0f7 	udiv	r0, r5, r7
 800124e:	fb07 5510 	mls	r5, r7, r0, r5
 8001252:	fb0e fe00 	mul.w	lr, lr, r0
 8001256:	b2a4      	uxth	r4, r4
 8001258:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800125c:	45a6      	cmp	lr, r4
 800125e:	d908      	bls.n	8001272 <__udivmoddi4+0x156>
 8001260:	eb1c 0404 	adds.w	r4, ip, r4
 8001264:	f100 35ff 	add.w	r5, r0, #4294967295
 8001268:	d202      	bcs.n	8001270 <__udivmoddi4+0x154>
 800126a:	45a6      	cmp	lr, r4
 800126c:	f200 80b6 	bhi.w	80013dc <__udivmoddi4+0x2c0>
 8001270:	4628      	mov	r0, r5
 8001272:	eba4 040e 	sub.w	r4, r4, lr
 8001276:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800127a:	e79e      	b.n	80011ba <__udivmoddi4+0x9e>
 800127c:	f1c1 0720 	rsb	r7, r1, #32
 8001280:	408b      	lsls	r3, r1
 8001282:	fa22 fc07 	lsr.w	ip, r2, r7
 8001286:	ea4c 0c03 	orr.w	ip, ip, r3
 800128a:	fa25 fa07 	lsr.w	sl, r5, r7
 800128e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001292:	fbba f8f9 	udiv	r8, sl, r9
 8001296:	fa20 f307 	lsr.w	r3, r0, r7
 800129a:	fb09 aa18 	mls	sl, r9, r8, sl
 800129e:	408d      	lsls	r5, r1
 80012a0:	fa1f fe8c 	uxth.w	lr, ip
 80012a4:	431d      	orrs	r5, r3
 80012a6:	fa00 f301 	lsl.w	r3, r0, r1
 80012aa:	fb08 f00e 	mul.w	r0, r8, lr
 80012ae:	0c2c      	lsrs	r4, r5, #16
 80012b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012b4:	42a0      	cmp	r0, r4
 80012b6:	fa02 f201 	lsl.w	r2, r2, r1
 80012ba:	d90b      	bls.n	80012d4 <__udivmoddi4+0x1b8>
 80012bc:	eb1c 0404 	adds.w	r4, ip, r4
 80012c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80012c4:	f080 8088 	bcs.w	80013d8 <__udivmoddi4+0x2bc>
 80012c8:	42a0      	cmp	r0, r4
 80012ca:	f240 8085 	bls.w	80013d8 <__udivmoddi4+0x2bc>
 80012ce:	f1a8 0802 	sub.w	r8, r8, #2
 80012d2:	4464      	add	r4, ip
 80012d4:	1a24      	subs	r4, r4, r0
 80012d6:	fbb4 f0f9 	udiv	r0, r4, r9
 80012da:	fb09 4410 	mls	r4, r9, r0, r4
 80012de:	fb00 fe0e 	mul.w	lr, r0, lr
 80012e2:	b2ad      	uxth	r5, r5
 80012e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012e8:	45a6      	cmp	lr, r4
 80012ea:	d908      	bls.n	80012fe <__udivmoddi4+0x1e2>
 80012ec:	eb1c 0404 	adds.w	r4, ip, r4
 80012f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80012f4:	d26c      	bcs.n	80013d0 <__udivmoddi4+0x2b4>
 80012f6:	45a6      	cmp	lr, r4
 80012f8:	d96a      	bls.n	80013d0 <__udivmoddi4+0x2b4>
 80012fa:	3802      	subs	r0, #2
 80012fc:	4464      	add	r4, ip
 80012fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001302:	fba0 9502 	umull	r9, r5, r0, r2
 8001306:	eba4 040e 	sub.w	r4, r4, lr
 800130a:	42ac      	cmp	r4, r5
 800130c:	46c8      	mov	r8, r9
 800130e:	46ae      	mov	lr, r5
 8001310:	d356      	bcc.n	80013c0 <__udivmoddi4+0x2a4>
 8001312:	d053      	beq.n	80013bc <__udivmoddi4+0x2a0>
 8001314:	2e00      	cmp	r6, #0
 8001316:	d069      	beq.n	80013ec <__udivmoddi4+0x2d0>
 8001318:	ebb3 0208 	subs.w	r2, r3, r8
 800131c:	eb64 040e 	sbc.w	r4, r4, lr
 8001320:	fa22 f301 	lsr.w	r3, r2, r1
 8001324:	fa04 f707 	lsl.w	r7, r4, r7
 8001328:	431f      	orrs	r7, r3
 800132a:	40cc      	lsrs	r4, r1
 800132c:	e9c6 7400 	strd	r7, r4, [r6]
 8001330:	2100      	movs	r1, #0
 8001332:	e747      	b.n	80011c4 <__udivmoddi4+0xa8>
 8001334:	fa0c fc02 	lsl.w	ip, ip, r2
 8001338:	f1c2 0120 	rsb	r1, r2, #32
 800133c:	fa25 f301 	lsr.w	r3, r5, r1
 8001340:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001344:	fa20 f101 	lsr.w	r1, r0, r1
 8001348:	4095      	lsls	r5, r2
 800134a:	430d      	orrs	r5, r1
 800134c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001350:	fb07 3311 	mls	r3, r7, r1, r3
 8001354:	fa1f fe8c 	uxth.w	lr, ip
 8001358:	0c28      	lsrs	r0, r5, #16
 800135a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800135e:	fb01 f30e 	mul.w	r3, r1, lr
 8001362:	4283      	cmp	r3, r0
 8001364:	fa04 f402 	lsl.w	r4, r4, r2
 8001368:	d908      	bls.n	800137c <__udivmoddi4+0x260>
 800136a:	eb1c 0000 	adds.w	r0, ip, r0
 800136e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001372:	d22f      	bcs.n	80013d4 <__udivmoddi4+0x2b8>
 8001374:	4283      	cmp	r3, r0
 8001376:	d92d      	bls.n	80013d4 <__udivmoddi4+0x2b8>
 8001378:	3902      	subs	r1, #2
 800137a:	4460      	add	r0, ip
 800137c:	1ac0      	subs	r0, r0, r3
 800137e:	fbb0 f3f7 	udiv	r3, r0, r7
 8001382:	fb07 0013 	mls	r0, r7, r3, r0
 8001386:	b2ad      	uxth	r5, r5
 8001388:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800138c:	fb03 f00e 	mul.w	r0, r3, lr
 8001390:	42a8      	cmp	r0, r5
 8001392:	d908      	bls.n	80013a6 <__udivmoddi4+0x28a>
 8001394:	eb1c 0505 	adds.w	r5, ip, r5
 8001398:	f103 38ff 	add.w	r8, r3, #4294967295
 800139c:	d216      	bcs.n	80013cc <__udivmoddi4+0x2b0>
 800139e:	42a8      	cmp	r0, r5
 80013a0:	d914      	bls.n	80013cc <__udivmoddi4+0x2b0>
 80013a2:	3b02      	subs	r3, #2
 80013a4:	4465      	add	r5, ip
 80013a6:	1a28      	subs	r0, r5, r0
 80013a8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80013ac:	e738      	b.n	8001220 <__udivmoddi4+0x104>
 80013ae:	4631      	mov	r1, r6
 80013b0:	4630      	mov	r0, r6
 80013b2:	e707      	b.n	80011c4 <__udivmoddi4+0xa8>
 80013b4:	462f      	mov	r7, r5
 80013b6:	e6e4      	b.n	8001182 <__udivmoddi4+0x66>
 80013b8:	4618      	mov	r0, r3
 80013ba:	e6f9      	b.n	80011b0 <__udivmoddi4+0x94>
 80013bc:	454b      	cmp	r3, r9
 80013be:	d2a9      	bcs.n	8001314 <__udivmoddi4+0x1f8>
 80013c0:	ebb9 0802 	subs.w	r8, r9, r2
 80013c4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80013c8:	3801      	subs	r0, #1
 80013ca:	e7a3      	b.n	8001314 <__udivmoddi4+0x1f8>
 80013cc:	4643      	mov	r3, r8
 80013ce:	e7ea      	b.n	80013a6 <__udivmoddi4+0x28a>
 80013d0:	4628      	mov	r0, r5
 80013d2:	e794      	b.n	80012fe <__udivmoddi4+0x1e2>
 80013d4:	4641      	mov	r1, r8
 80013d6:	e7d1      	b.n	800137c <__udivmoddi4+0x260>
 80013d8:	46d0      	mov	r8, sl
 80013da:	e77b      	b.n	80012d4 <__udivmoddi4+0x1b8>
 80013dc:	4464      	add	r4, ip
 80013de:	3802      	subs	r0, #2
 80013e0:	e747      	b.n	8001272 <__udivmoddi4+0x156>
 80013e2:	3b02      	subs	r3, #2
 80013e4:	4465      	add	r5, ip
 80013e6:	e72f      	b.n	8001248 <__udivmoddi4+0x12c>
 80013e8:	4608      	mov	r0, r1
 80013ea:	e706      	b.n	80011fa <__udivmoddi4+0xde>
 80013ec:	4631      	mov	r1, r6
 80013ee:	e6e9      	b.n	80011c4 <__udivmoddi4+0xa8>

080013f0 <__aeabi_idiv0>:
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop

080013f4 <MX_ADC_Init>:

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80013f4:	2300      	movs	r3, #0
{
 80013f6:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80013f8:	4c3f      	ldr	r4, [pc, #252]	; (80014f8 <MX_ADC_Init+0x104>)
{
 80013fa:	b08a      	sub	sp, #40	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fc:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001400:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001404:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001408:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800140c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001410:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001414:	9304      	str	r3, [sp, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001416:	9300      	str	r3, [sp, #0]
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 6;
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001418:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141c:	63a3      	str	r3, [r4, #56]	; 0x38
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800141e:	9309      	str	r3, [sp, #36]	; 0x24
  hadc.Instance = ADC1;
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <MX_ADC_Init+0x108>)
  hadc.Init.ContinuousConvMode = ENABLE;
 8001422:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001424:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001428:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc.Init.NbrOfConversion = 6;
 800142c:	2606      	movs	r6, #6
  hadc.Instance = ADC1;
 800142e:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001430:	2310      	movs	r3, #16
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001432:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001434:	6061      	str	r1, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001436:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001438:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc.Init.NbrOfConversion = 6;
 800143c:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 800143e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001442:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001444:	f005 ff7e 	bl	8007344 <HAL_ADC_Init>
 8001448:	b108      	cbz	r0, 800144e <MX_ADC_Init+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	e7fe      	b.n	800144c <MX_ADC_Init+0x58>
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800144e:	2302      	movs	r3, #2
 8001450:	4a2b      	ldr	r2, [pc, #172]	; (8001500 <MX_ADC_Init+0x10c>)
  AnalogWDGConfig.LowThreshold = 0;
 8001452:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8001456:	a904      	add	r1, sp, #16
 8001458:	4620      	mov	r0, r4
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800145a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  AnalogWDGConfig.ITMode = ENABLE;
 800145e:	f88d 5018 	strb.w	r5, [sp, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8001462:	f006 fa75 	bl	8007950 <HAL_ADC_AnalogWDGConfig>
 8001466:	b108      	cbz	r0, 800146c <MX_ADC_Init+0x78>
 8001468:	b672      	cpsid	i
  while (1)
 800146a:	e7fe      	b.n	800146a <MX_ADC_Init+0x76>
  sConfig.Channel = ADC_CHANNEL_0;
 800146c:	2200      	movs	r2, #0
 800146e:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001470:	4669      	mov	r1, sp
 8001472:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8001474:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8001478:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800147a:	f006 f99d 	bl	80077b8 <HAL_ADC_ConfigChannel>
 800147e:	b108      	cbz	r0, 8001484 <MX_ADC_Init+0x90>
 8001480:	b672      	cpsid	i
  while (1)
 8001482:	e7fe      	b.n	8001482 <MX_ADC_Init+0x8e>
  sConfig.Channel = ADC_CHANNEL_1;
 8001484:	2201      	movs	r2, #1
 8001486:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001488:	4669      	mov	r1, sp
 800148a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 800148c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001490:	f006 f992 	bl	80077b8 <HAL_ADC_ConfigChannel>
 8001494:	b108      	cbz	r0, 800149a <MX_ADC_Init+0xa6>
 8001496:	b672      	cpsid	i
  while (1)
 8001498:	e7fe      	b.n	8001498 <MX_ADC_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_2;
 800149a:	2202      	movs	r2, #2
 800149c:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800149e:	4669      	mov	r1, sp
 80014a0:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80014a2:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014a6:	f006 f987 	bl	80077b8 <HAL_ADC_ConfigChannel>
 80014aa:	b108      	cbz	r0, 80014b0 <MX_ADC_Init+0xbc>
 80014ac:	b672      	cpsid	i
  while (1)
 80014ae:	e7fe      	b.n	80014ae <MX_ADC_Init+0xba>
  sConfig.Channel = ADC_CHANNEL_3;
 80014b0:	2203      	movs	r2, #3
 80014b2:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014b4:	4669      	mov	r1, sp
 80014b6:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80014b8:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014bc:	f006 f97c 	bl	80077b8 <HAL_ADC_ConfigChannel>
 80014c0:	b108      	cbz	r0, 80014c6 <MX_ADC_Init+0xd2>
 80014c2:	b672      	cpsid	i
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MX_ADC_Init+0xd0>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014c6:	2211      	movs	r2, #17
 80014c8:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014ca:	4669      	mov	r1, sp
 80014cc:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014ce:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014d2:	f006 f971 	bl	80077b8 <HAL_ADC_ConfigChannel>
 80014d6:	b108      	cbz	r0, 80014dc <MX_ADC_Init+0xe8>
 80014d8:	b672      	cpsid	i
  while (1)
 80014da:	e7fe      	b.n	80014da <MX_ADC_Init+0xe6>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014dc:	2210      	movs	r2, #16
 80014de:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014e0:	4669      	mov	r1, sp
 80014e2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014e4:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014e8:	f006 f966 	bl	80077b8 <HAL_ADC_ConfigChannel>
 80014ec:	b108      	cbz	r0, 80014f2 <MX_ADC_Init+0xfe>
 80014ee:	b672      	cpsid	i
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MX_ADC_Init+0xfc>
}
 80014f2:	b00a      	add	sp, #40	; 0x28
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
 80014f6:	bf00      	nop
 80014f8:	200003b0 	.word	0x200003b0
 80014fc:	40012400 	.word	0x40012400
 8001500:	00800200 	.word	0x00800200

08001504 <update_keypad.part.0>:
	else if(num == '.'){
 8001504:	282e      	cmp	r0, #46	; 0x2e
 8001506:	d00e      	beq.n	8001526 <update_keypad.part.0+0x22>
	else if(num >= '0' && num <= '9'){
 8001508:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800150c:	2b09      	cmp	r3, #9
 800150e:	d809      	bhi.n	8001524 <update_keypad.part.0+0x20>
		if(kpenum == V1 || kpenum == V2){
 8001510:	4b59      	ldr	r3, [pc, #356]	; (8001678 <update_keypad.part.0+0x174>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8001518:	2a01      	cmp	r2, #1
 800151a:	d05f      	beq.n	80015dc <update_keypad.part.0+0xd8>
		else if(kpenum == A1 || kpenum == A2){
 800151c:	2b02      	cmp	r3, #2
 800151e:	d02e      	beq.n	800157e <update_keypad.part.0+0x7a>
 8001520:	2b04      	cmp	r3, #4
 8001522:	d02c      	beq.n	800157e <update_keypad.part.0+0x7a>
}
 8001524:	4770      	bx	lr
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8001526:	4a55      	ldr	r2, [pc, #340]	; (800167c <update_keypad.part.0+0x178>)
 8001528:	7813      	ldrb	r3, [r2, #0]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	2b01      	cmp	r3, #1
 800152e:	ddf9      	ble.n	8001524 <update_keypad.part.0+0x20>
 8001530:	4953      	ldr	r1, [pc, #332]	; (8001680 <update_keypad.part.0+0x17c>)
 8001532:	780b      	ldrb	r3, [r1, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f5      	bne.n	8001524 <update_keypad.part.0+0x20>
				keypadarr[i-1] = keypadarr[i];
 8001538:	4b52      	ldr	r3, [pc, #328]	; (8001684 <update_keypad.part.0+0x180>)
 800153a:	f893 c001 	ldrb.w	ip, [r3, #1]
 800153e:	fa5f fc8c 	uxtb.w	ip, ip
 8001542:	f883 c000 	strb.w	ip, [r3]
 8001546:	f893 c002 	ldrb.w	ip, [r3, #2]
 800154a:	fa5f fc8c 	uxtb.w	ip, ip
 800154e:	f883 c001 	strb.w	ip, [r3, #1]
 8001552:	f893 c003 	ldrb.w	ip, [r3, #3]
 8001556:	fa5f fc8c 	uxtb.w	ip, ip
 800155a:	f883 c002 	strb.w	ip, [r3, #2]
 800155e:	f893 c004 	ldrb.w	ip, [r3, #4]
 8001562:	fa5f fc8c 	uxtb.w	ip, ip
 8001566:	f883 c003 	strb.w	ip, [r3, #3]
			keypaddecimal = 1;
 800156a:	f04f 0c01 	mov.w	ip, #1
			keypadarr[keypadlength-1] = num;
 800156e:	7118      	strb	r0, [r3, #4]
			keypaddecimal = 1;
 8001570:	f881 c000 	strb.w	ip, [r1]
			keypaditerator--;
 8001574:	7813      	ldrb	r3, [r2, #0]
 8001576:	3b01      	subs	r3, #1
 8001578:	b25b      	sxtb	r3, r3
 800157a:	7013      	strb	r3, [r2, #0]
 800157c:	4770      	bx	lr
			if(keypaditerator > 3){
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <update_keypad.part.0+0x178>)
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	b252      	sxtb	r2, r2
 8001584:	2a03      	cmp	r2, #3
 8001586:	dc16      	bgt.n	80015b6 <update_keypad.part.0+0xb2>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	2a03      	cmp	r2, #3
 800158c:	d05b      	beq.n	8001646 <update_keypad.part.0+0x142>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	2a02      	cmp	r2, #2
 8001592:	d05d      	beq.n	8001650 <update_keypad.part.0+0x14c>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	2a01      	cmp	r2, #1
 8001598:	d05f      	beq.n	800165a <update_keypad.part.0+0x156>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	2a02      	cmp	r2, #2
 800159e:	d061      	beq.n	8001664 <update_keypad.part.0+0x160>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	2a01      	cmp	r2, #1
 80015a4:	d063      	beq.n	800166e <update_keypad.part.0+0x16a>
			else if(keypaditerator == 0 && keypadarr[2] == '.'){
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d1bb      	bne.n	8001524 <update_keypad.part.0+0x20>
 80015ac:	4a35      	ldr	r2, [pc, #212]	; (8001684 <update_keypad.part.0+0x180>)
 80015ae:	7891      	ldrb	r1, [r2, #2]
 80015b0:	292e      	cmp	r1, #46	; 0x2e
 80015b2:	d1b7      	bne.n	8001524 <update_keypad.part.0+0x20>
 80015b4:	e000      	b.n	80015b8 <update_keypad.part.0+0xb4>
					keypadarr[i-1] = keypadarr[i];
 80015b6:	4a33      	ldr	r2, [pc, #204]	; (8001684 <update_keypad.part.0+0x180>)
					keypadarr[i-1] = keypadarr[i];
 80015b8:	7851      	ldrb	r1, [r2, #1]
 80015ba:	b2c9      	uxtb	r1, r1
 80015bc:	7011      	strb	r1, [r2, #0]
 80015be:	7891      	ldrb	r1, [r2, #2]
 80015c0:	b2c9      	uxtb	r1, r1
 80015c2:	7051      	strb	r1, [r2, #1]
 80015c4:	78d1      	ldrb	r1, [r2, #3]
 80015c6:	b2c9      	uxtb	r1, r1
 80015c8:	7091      	strb	r1, [r2, #2]
 80015ca:	7911      	ldrb	r1, [r2, #4]
 80015cc:	b2c9      	uxtb	r1, r1
 80015ce:	70d1      	strb	r1, [r2, #3]
				keypadarr[keypadlength-1] = num;
 80015d0:	7110      	strb	r0, [r2, #4]
				keypaditerator--;
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	3a01      	subs	r2, #1
 80015d6:	b252      	sxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]
}
 80015da:	4770      	bx	lr
			if(keypaditerator > 2){
 80015dc:	4b27      	ldr	r3, [pc, #156]	; (800167c <update_keypad.part.0+0x178>)
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	b252      	sxtb	r2, r2
 80015e2:	2a02      	cmp	r2, #2
 80015e4:	dce7      	bgt.n	80015b6 <update_keypad.part.0+0xb2>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	2a03      	cmp	r2, #3
 80015ea:	d022      	beq.n	8001632 <update_keypad.part.0+0x12e>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	2a02      	cmp	r2, #2
 80015f0:	d024      	beq.n	800163c <update_keypad.part.0+0x138>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	2a02      	cmp	r2, #2
 80015f6:	d00d      	beq.n	8001614 <update_keypad.part.0+0x110>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80015f8:	781a      	ldrb	r2, [r3, #0]
 80015fa:	2a01      	cmp	r2, #1
 80015fc:	d00f      	beq.n	800161e <update_keypad.part.0+0x11a>
			else if(keypaditerator == 1 && keypadarr[4] == '.'){
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	2a01      	cmp	r2, #1
 8001602:	d011      	beq.n	8001628 <update_keypad.part.0+0x124>
			else if(keypaditerator == 0 && keypadarr[3] == '.'){
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	2a00      	cmp	r2, #0
 8001608:	d18c      	bne.n	8001524 <update_keypad.part.0+0x20>
 800160a:	4a1e      	ldr	r2, [pc, #120]	; (8001684 <update_keypad.part.0+0x180>)
 800160c:	78d1      	ldrb	r1, [r2, #3]
 800160e:	292e      	cmp	r1, #46	; 0x2e
 8001610:	d188      	bne.n	8001524 <update_keypad.part.0+0x20>
 8001612:	e7d1      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <update_keypad.part.0+0x180>)
 8001616:	7911      	ldrb	r1, [r2, #4]
 8001618:	292e      	cmp	r1, #46	; 0x2e
 800161a:	d1ed      	bne.n	80015f8 <update_keypad.part.0+0xf4>
 800161c:	e7cc      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 800161e:	4a19      	ldr	r2, [pc, #100]	; (8001684 <update_keypad.part.0+0x180>)
 8001620:	78d1      	ldrb	r1, [r2, #3]
 8001622:	292e      	cmp	r1, #46	; 0x2e
 8001624:	d1eb      	bne.n	80015fe <update_keypad.part.0+0xfa>
 8001626:	e7c7      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 1 && keypadarr[4] == '.'){
 8001628:	4a16      	ldr	r2, [pc, #88]	; (8001684 <update_keypad.part.0+0x180>)
 800162a:	7911      	ldrb	r1, [r2, #4]
 800162c:	292e      	cmp	r1, #46	; 0x2e
 800162e:	d1e9      	bne.n	8001604 <update_keypad.part.0+0x100>
 8001630:	e7c2      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 8001632:	4a14      	ldr	r2, [pc, #80]	; (8001684 <update_keypad.part.0+0x180>)
 8001634:	7911      	ldrb	r1, [r2, #4]
 8001636:	292e      	cmp	r1, #46	; 0x2e
 8001638:	d1d8      	bne.n	80015ec <update_keypad.part.0+0xe8>
 800163a:	e7bd      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 800163c:	4a11      	ldr	r2, [pc, #68]	; (8001684 <update_keypad.part.0+0x180>)
 800163e:	78d1      	ldrb	r1, [r2, #3]
 8001640:	292e      	cmp	r1, #46	; 0x2e
 8001642:	d1d6      	bne.n	80015f2 <update_keypad.part.0+0xee>
 8001644:	e7b8      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <update_keypad.part.0+0x180>)
 8001648:	7911      	ldrb	r1, [r2, #4]
 800164a:	292e      	cmp	r1, #46	; 0x2e
 800164c:	d19f      	bne.n	800158e <update_keypad.part.0+0x8a>
 800164e:	e7b3      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <update_keypad.part.0+0x180>)
 8001652:	78d1      	ldrb	r1, [r2, #3]
 8001654:	292e      	cmp	r1, #46	; 0x2e
 8001656:	d19d      	bne.n	8001594 <update_keypad.part.0+0x90>
 8001658:	e7ae      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <update_keypad.part.0+0x180>)
 800165c:	7891      	ldrb	r1, [r2, #2]
 800165e:	292e      	cmp	r1, #46	; 0x2e
 8001660:	d19b      	bne.n	800159a <update_keypad.part.0+0x96>
 8001662:	e7a9      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <update_keypad.part.0+0x180>)
 8001666:	7911      	ldrb	r1, [r2, #4]
 8001668:	292e      	cmp	r1, #46	; 0x2e
 800166a:	d199      	bne.n	80015a0 <update_keypad.part.0+0x9c>
 800166c:	e7a4      	b.n	80015b8 <update_keypad.part.0+0xb4>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <update_keypad.part.0+0x180>)
 8001670:	78d1      	ldrb	r1, [r2, #3]
 8001672:	292e      	cmp	r1, #46	; 0x2e
 8001674:	d197      	bne.n	80015a6 <update_keypad.part.0+0xa2>
 8001676:	e79f      	b.n	80015b8 <update_keypad.part.0+0xb4>
 8001678:	20000705 	.word	0x20000705
 800167c:	20000005 	.word	0x20000005
 8001680:	20000704 	.word	0x20000704
 8001684:	20000000 	.word	0x20000000

08001688 <update_keypad.constprop.0>:
		if(keypaditerator < keypadlength-1){
 8001688:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <update_keypad.constprop.0+0x40>)
 800168a:	7813      	ldrb	r3, [r2, #0]
 800168c:	b25b      	sxtb	r3, r3
 800168e:	2b03      	cmp	r3, #3
 8001690:	dc15      	bgt.n	80016be <update_keypad.constprop.0+0x36>
			if(keypadarr[4] == '.'){
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <update_keypad.constprop.0+0x44>)
 8001694:	7919      	ldrb	r1, [r3, #4]
 8001696:	292e      	cmp	r1, #46	; 0x2e
 8001698:	d012      	beq.n	80016c0 <update_keypad.constprop.0+0x38>
			keypadarr[0] = num;
 800169a:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 800169c:	78d9      	ldrb	r1, [r3, #3]
 800169e:	b2c9      	uxtb	r1, r1
 80016a0:	7119      	strb	r1, [r3, #4]
 80016a2:	7899      	ldrb	r1, [r3, #2]
 80016a4:	b2c9      	uxtb	r1, r1
 80016a6:	70d9      	strb	r1, [r3, #3]
 80016a8:	7859      	ldrb	r1, [r3, #1]
 80016aa:	b2c9      	uxtb	r1, r1
 80016ac:	7099      	strb	r1, [r3, #2]
 80016ae:	7819      	ldrb	r1, [r3, #0]
 80016b0:	b2c9      	uxtb	r1, r1
 80016b2:	7059      	strb	r1, [r3, #1]
			keypadarr[0] = num;
 80016b4:	7018      	strb	r0, [r3, #0]
			keypaditerator++;
 80016b6:	7813      	ldrb	r3, [r2, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	7013      	strb	r3, [r2, #0]
}
 80016be:	4770      	bx	lr
				keypaddecimal = 0;
 80016c0:	2000      	movs	r0, #0
 80016c2:	4903      	ldr	r1, [pc, #12]	; (80016d0 <update_keypad.constprop.0+0x48>)
 80016c4:	7008      	strb	r0, [r1, #0]
 80016c6:	e7e8      	b.n	800169a <update_keypad.constprop.0+0x12>
 80016c8:	20000005 	.word	0x20000005
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000704 	.word	0x20000704

080016d4 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d4:	2300      	movs	r3, #0
{
 80016d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016da:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80016de:	2403      	movs	r4, #3
 80016e0:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e2:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e4:	f04f 0810 	mov.w	r8, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e8:	f04f 0e02 	mov.w	lr, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80016ec:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80016f0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
{
 80016f4:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80016fa:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 80016fe:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001702:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001706:	e9cd 3303 	strd	r3, r3, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800170a:	4a16      	ldr	r2, [pc, #88]	; (8001764 <SystemClock_Config+0x90>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170e:	9300      	str	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001712:	a806      	add	r0, sp, #24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001718:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800171c:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800171e:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001722:	e9cd ec0f 	strd	lr, ip, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001726:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800172a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172e:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	f007 fffe 	bl	8009730 <HAL_RCC_OscConfig>
 8001734:	b108      	cbz	r0, 800173a <SystemClock_Config+0x66>
 8001736:	b672      	cpsid	i
  while (1)
 8001738:	e7fe      	b.n	8001738 <SystemClock_Config+0x64>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800173a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173c:	240f      	movs	r4, #15
 800173e:	2503      	movs	r5, #3
 8001740:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001742:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001744:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001746:	4631      	mov	r1, r6
 8001748:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174a:	e9cd 4500 	strd	r4, r5, [sp]
 800174e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001752:	f008 fa4d 	bl	8009bf0 <HAL_RCC_ClockConfig>
 8001756:	b108      	cbz	r0, 800175c <SystemClock_Config+0x88>
 8001758:	b672      	cpsid	i
  while (1)
 800175a:	e7fe      	b.n	800175a <SystemClock_Config+0x86>
}
 800175c:	b014      	add	sp, #80	; 0x50
 800175e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001762:	bf00      	nop
 8001764:	40007000 	.word	0x40007000

08001768 <EXTI1_IRQHandler>:
{
 8001768:	b410      	push	{r4}
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 800176a:	2407      	movs	r4, #7
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <EXTI1_IRQHandler+0x14>)
	memset (usbbuffer, '\0', 128); // clear the buffer
 800176e:	2280      	movs	r2, #128	; 0x80
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 8001770:	615c      	str	r4, [r3, #20]
	memset (usbbuffer, '\0', 128); // clear the buffer
 8001772:	2100      	movs	r1, #0
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <EXTI1_IRQHandler+0x18>)
}
 8001776:	bc10      	pop	{r4}
	memset (usbbuffer, '\0', 128); // clear the buffer
 8001778:	f00a bf68 	b.w	800c64c <memset>
 800177c:	40010400 	.word	0x40010400
 8001780:	200007e4 	.word	0x200007e4

08001784 <update_ADC_watchdog>:
void update_ADC_watchdog(float val){
 8001784:	b570      	push	{r4, r5, r6, lr}
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <update_ADC_watchdog+0x78>)
void update_ADC_watchdog(float val){
 8001788:	b082      	sub	sp, #8
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800178a:	491d      	ldr	r1, [pc, #116]	; (8001800 <update_ADC_watchdog+0x7c>)
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800178c:	891e      	ldrh	r6, [r3, #8]
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800178e:	f7ff faa1 	bl	8000cd4 <__aeabi_fmul>
 8001792:	491c      	ldr	r1, [pc, #112]	; (8001804 <update_ADC_watchdog+0x80>)
 8001794:	f7ff fa9e 	bl	8000cd4 <__aeabi_fmul>
 8001798:	491b      	ldr	r1, [pc, #108]	; (8001808 <update_ADC_watchdog+0x84>)
 800179a:	f7ff fa9b 	bl	8000cd4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <update_ADC_watchdog+0x88>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80017a0:	4604      	mov	r4, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 80017a2:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80017a4:	b2b6      	uxth	r6, r6
 80017a6:	8818      	ldrh	r0, [r3, #0]
 80017a8:	f7ff fa3c 	bl	8000c24 <__aeabi_ui2f>
 80017ac:	4605      	mov	r5, r0
 80017ae:	4630      	mov	r0, r6
 80017b0:	f7ff fa38 	bl	8000c24 <__aeabi_ui2f>
 80017b4:	4601      	mov	r1, r0
 80017b6:	4628      	mov	r0, r5
 80017b8:	f7ff fb40 	bl	8000e3c <__aeabi_fdiv>
 80017bc:	4914      	ldr	r1, [pc, #80]	; (8001810 <update_ADC_watchdog+0x8c>)
 80017be:	f7ff fa89 	bl	8000cd4 <__aeabi_fmul>
 80017c2:	4601      	mov	r1, r0
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80017c4:	4620      	mov	r0, r4
 80017c6:	f7ff fb39 	bl	8000e3c <__aeabi_fdiv>
 80017ca:	f7ff fc6f 	bl	80010ac <__aeabi_f2uiz>
	if(amp >= 4095){
 80017ce:	f640 72fe 	movw	r2, #4094	; 0xffe
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80017d2:	b280      	uxth	r0, r0
 80017d4:	f8ad 0006 	strh.w	r0, [sp, #6]
	if(amp >= 4095){
 80017d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	4293      	cmp	r3, r2
 80017e0:	d905      	bls.n	80017ee <update_ADC_watchdog+0x6a>
		ADC1->HTR = 4095;
 80017e2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <update_ADC_watchdog+0x90>)
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017ea:	b002      	add	sp, #8
 80017ec:	bd70      	pop	{r4, r5, r6, pc}
		ADC1->HTR = amp;
 80017ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <update_ADC_watchdog+0x90>)
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80017f8:	b002      	add	sp, #8
 80017fa:	bd70      	pop	{r4, r5, r6, pc}
 80017fc:	20000388 	.word	0x20000388
 8001800:	3e19999a 	.word	0x3e19999a
 8001804:	41a00000 	.word	0x41a00000
 8001808:	457ff000 	.word	0x457ff000
 800180c:	20000010 	.word	0x20000010
 8001810:	40400000 	.word	0x40400000
 8001814:	40012400 	.word	0x40012400

08001818 <lcd_createChar>:
{
 8001818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800181c:	2564      	movs	r5, #100	; 0x64
 800181e:	482d      	ldr	r0, [pc, #180]	; (80018d4 <lcd_createChar+0xbc>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001820:	492d      	ldr	r1, [pc, #180]	; (80018d8 <lcd_createChar+0xc0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001822:	4607      	mov	r7, r0
{
 8001824:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001826:	2304      	movs	r3, #4
 8001828:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800182a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800182c:	9500      	str	r5, [sp, #0]
 800182e:	214e      	movs	r1, #78	; 0x4e
 8001830:	f006 fe8a 	bl	8008548 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001834:	2001      	movs	r0, #1
 8001836:	f005 fd73 	bl	8007320 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800183c:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800183e:	9303      	str	r3, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001840:	4638      	mov	r0, r7
 8001842:	2304      	movs	r3, #4
 8001844:	4c26      	ldr	r4, [pc, #152]	; (80018e0 <lcd_createChar+0xc8>)
 8001846:	9500      	str	r5, [sp, #0]
 8001848:	aa03      	add	r2, sp, #12
 800184a:	f006 fe7d 	bl	8008548 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8001854:	f005 fd64 	bl	8007320 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001858:	2304      	movs	r3, #4
		lcd_send_data(customChar[i]);
 800185a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800185e:	4638      	mov	r0, r7
	data_l = ((data<<4)&0xf0);
 8001860:	fa02 f103 	lsl.w	r1, r2, r3
 8001864:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8001866:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800186a:	f042 0c09 	orr.w	ip, r2, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800186e:	f041 0e09 	orr.w	lr, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001872:	f042 090d 	orr.w	r9, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001876:	f041 080d 	orr.w	r8, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800187a:	aa03      	add	r2, sp, #12
 800187c:	214e      	movs	r1, #78	; 0x4e
 800187e:	9500      	str	r5, [sp, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001880:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001884:	f88d e00f 	strb.w	lr, [sp, #15]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001888:	f88d 900c 	strb.w	r9, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800188c:	f88d 800e 	strb.w	r8, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001890:	f006 fe5a 	bl	8008548 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8001894:	2001      	movs	r0, #1
 8001896:	f005 fd43 	bl	8007320 <HAL_Delay>
	for(int i = 0; i <= 63 ; i++){
 800189a:	42a6      	cmp	r6, r4
 800189c:	d1dc      	bne.n	8001858 <lcd_createChar+0x40>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800189e:	490f      	ldr	r1, [pc, #60]	; (80018dc <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018a0:	aa03      	add	r2, sp, #12
 80018a2:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018a4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018a6:	9500      	str	r5, [sp, #0]
 80018a8:	214e      	movs	r1, #78	; 0x4e
 80018aa:	480a      	ldr	r0, [pc, #40]	; (80018d4 <lcd_createChar+0xbc>)
 80018ac:	f006 fe4c 	bl	8008548 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80018b0:	2001      	movs	r0, #1
 80018b2:	f005 fd35 	bl	8007320 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018b6:	480b      	ldr	r0, [pc, #44]	; (80018e4 <lcd_createChar+0xcc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018b8:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018ba:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018bc:	214e      	movs	r1, #78	; 0x4e
 80018be:	aa03      	add	r2, sp, #12
 80018c0:	9500      	str	r5, [sp, #0]
 80018c2:	4804      	ldr	r0, [pc, #16]	; (80018d4 <lcd_createChar+0xbc>)
 80018c4:	f006 fe40 	bl	8008548 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80018c8:	2001      	movs	r0, #1
}
 80018ca:	b005      	add	sp, #20
 80018cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 80018d0:	f005 bd26 	b.w	8007320 <HAL_Delay>
 80018d4:	200004ec 	.word	0x200004ec
 80018d8:	080c484c 	.word	0x080c484c
 80018dc:	080c080c 	.word	0x080c080c
 80018e0:	0800f503 	.word	0x0800f503
 80018e4:	282c080c 	.word	0x282c080c

080018e8 <lcd_init>:
{
 80018e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 80018ea:	2064      	movs	r0, #100	; 0x64
{
 80018ec:	b085      	sub	sp, #20
	HAL_Delay(100);
 80018ee:	f005 fd17 	bl	8007320 <HAL_Delay>
 80018f2:	2403      	movs	r4, #3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018f4:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018f6:	4f2e      	ldr	r7, [pc, #184]	; (80019b0 <lcd_init+0xc8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018f8:	4e2e      	ldr	r6, [pc, #184]	; (80019b4 <lcd_init+0xcc>)
 80018fa:	2304      	movs	r3, #4
 80018fc:	214e      	movs	r1, #78	; 0x4e
 80018fe:	aa03      	add	r2, sp, #12
 8001900:	4630      	mov	r0, r6
 8001902:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001904:	9703      	str	r7, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001906:	f006 fe1f 	bl	8008548 <HAL_I2C_Master_Transmit>
		HAL_Delay(45);
 800190a:	202d      	movs	r0, #45	; 0x2d
 800190c:	f005 fd08 	bl	8007320 <HAL_Delay>
	for(i=0;i<3;i++){//sending 3 times: select 4-bit mode
 8001910:	1e63      	subs	r3, r4, #1
 8001912:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001916:	d1f0      	bne.n	80018fa <lcd_init+0x12>
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001918:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800191a:	4927      	ldr	r1, [pc, #156]	; (80019b8 <lcd_init+0xd0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800191c:	2304      	movs	r3, #4
 800191e:	aa03      	add	r2, sp, #12
 8001920:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001922:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001924:	4823      	ldr	r0, [pc, #140]	; (80019b4 <lcd_init+0xcc>)
 8001926:	214e      	movs	r1, #78	; 0x4e
 8001928:	f006 fe0e 	bl	8008548 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 800192c:	4620      	mov	r0, r4
 800192e:	f005 fcf7 	bl	8007320 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001932:	4a22      	ldr	r2, [pc, #136]	; (80019bc <lcd_init+0xd4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001934:	2304      	movs	r3, #4
 8001936:	214e      	movs	r1, #78	; 0x4e
 8001938:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800193a:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800193c:	481d      	ldr	r0, [pc, #116]	; (80019b4 <lcd_init+0xcc>)
 800193e:	aa03      	add	r2, sp, #12
 8001940:	f006 fe02 	bl	8008548 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001944:	2001      	movs	r0, #1
 8001946:	f005 fceb 	bl	8007320 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800194a:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <lcd_init+0xd8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800194c:	2304      	movs	r3, #4
 800194e:	214e      	movs	r1, #78	; 0x4e
 8001950:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001952:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001954:	4817      	ldr	r0, [pc, #92]	; (80019b4 <lcd_init+0xcc>)
 8001956:	aa03      	add	r2, sp, #12
 8001958:	f006 fdf6 	bl	8008548 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800195c:	2001      	movs	r0, #1
 800195e:	f005 fcdf 	bl	8007320 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001962:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <lcd_init+0xdc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001964:	2304      	movs	r3, #4
 8001966:	214e      	movs	r1, #78	; 0x4e
 8001968:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800196a:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800196c:	4811      	ldr	r0, [pc, #68]	; (80019b4 <lcd_init+0xcc>)
 800196e:	aa03      	add	r2, sp, #12
 8001970:	f006 fdea 	bl	8008548 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f005 fcd3 	bl	8007320 <HAL_Delay>
	lcd_createChar();
 800197a:	f7ff ff4d 	bl	8001818 <lcd_createChar>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <lcd_init+0xe0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001980:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001982:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001984:	2304      	movs	r3, #4
 8001986:	214e      	movs	r1, #78	; 0x4e
 8001988:	480a      	ldr	r0, [pc, #40]	; (80019b4 <lcd_init+0xcc>)
 800198a:	aa03      	add	r2, sp, #12
 800198c:	f006 fddc 	bl	8008548 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001990:	4627      	mov	r7, r4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001992:	4e0e      	ldr	r6, [pc, #56]	; (80019cc <lcd_init+0xe4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001994:	4d07      	ldr	r5, [pc, #28]	; (80019b4 <lcd_init+0xcc>)
 8001996:	2304      	movs	r3, #4
 8001998:	214e      	movs	r1, #78	; 0x4e
 800199a:	4628      	mov	r0, r5
 800199c:	aa03      	add	r2, sp, #12
 800199e:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019a0:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019a2:	f006 fdd1 	bl	8008548 <HAL_I2C_Master_Transmit>
	for (int i=0; i<100; i++)
 80019a6:	3c01      	subs	r4, #1
 80019a8:	d1f5      	bne.n	8001996 <lcd_init+0xae>
}
 80019aa:	b005      	add	sp, #20
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	383c080c 	.word	0x383c080c
 80019b4:	200004ec 	.word	0x200004ec
 80019b8:	282c080c 	.word	0x282c080c
 80019bc:	888c282c 	.word	0x888c282c
 80019c0:	c8cc080c 	.word	0xc8cc080c
 80019c4:	080c888c 	.word	0x080c888c
 80019c8:	080c080c 	.word	0x080c080c
 80019cc:	090d292d 	.word	0x090d292d

080019d0 <ourInit>:
void ourInit(void){
 80019d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 80019d4:	2201      	movs	r2, #1
void ourInit(void){
 80019d6:	b08c      	sub	sp, #48	; 0x30
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 80019d8:	2140      	movs	r1, #64	; 0x40
 80019da:	487a      	ldr	r0, [pc, #488]	; (8001bc4 <ourInit+0x1f4>)
 80019dc:	f006 fcd2 	bl	8008384 <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 80019e0:	4879      	ldr	r0, [pc, #484]	; (8001bc8 <ourInit+0x1f8>)
 80019e2:	f005 fd7f 	bl	80074e4 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 80019e6:	4879      	ldr	r0, [pc, #484]	; (8001bcc <ourInit+0x1fc>)
 80019e8:	f006 f9ce 	bl	8007d88 <HAL_DMA_DeInit>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019ec:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ee:	4b78      	ldr	r3, [pc, #480]	; (8001bd0 <ourInit+0x200>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019f0:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019f2:	69d9      	ldr	r1, [r3, #28]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019f4:	2664      	movs	r6, #100	; 0x64
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019f6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80019fa:	61d9      	str	r1, [r3, #28]
 80019fc:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019fe:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a04:	9307      	str	r3, [sp, #28]
 8001a06:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a08:	f006 f888 	bl	8007b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a0c:	200b      	movs	r0, #11
 8001a0e:	f006 f8c3 	bl	8007b98 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	200e      	movs	r0, #14
 8001a16:	4611      	mov	r1, r2
 8001a18:	f006 f880 	bl	8007b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a1c:	200e      	movs	r0, #14
 8001a1e:	f006 f8bb 	bl	8007b98 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	200f      	movs	r0, #15
 8001a26:	4611      	mov	r1, r2
 8001a28:	f006 f878 	bl	8007b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a2c:	200f      	movs	r0, #15
 8001a2e:	f006 f8b3 	bl	8007b98 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 8001a32:	f7ff fcdf 	bl	80013f4 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_values, 6);// start the adc in dma mode
 8001a36:	2206      	movs	r2, #6
 8001a38:	4966      	ldr	r1, [pc, #408]	; (8001bd4 <ourInit+0x204>)
 8001a3a:	4863      	ldr	r0, [pc, #396]	; (8001bc8 <ourInit+0x1f8>)
 8001a3c:	f005 fffc 	bl	8007a38 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001a40:	2100      	movs	r1, #0
 8001a42:	4865      	ldr	r0, [pc, #404]	; (8001bd8 <ourInit+0x208>)
 8001a44:	f006 f8f8 	bl	8007c38 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001a48:	2110      	movs	r1, #16
 8001a4a:	4863      	ldr	r0, [pc, #396]	; (8001bd8 <ourInit+0x208>)
 8001a4c:	f006 f8f4 	bl	8007c38 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001a50:	2300      	movs	r3, #0
 8001a52:	4861      	ldr	r0, [pc, #388]	; (8001bd8 <ourInit+0x208>)
 8001a54:	461a      	mov	r2, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	f006 f91e 	bl	8007c98 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2110      	movs	r1, #16
 8001a60:	461a      	mov	r2, r3
 8001a62:	485d      	ldr	r0, [pc, #372]	; (8001bd8 <ourInit+0x208>)
 8001a64:	f006 f918 	bl	8007c98 <HAL_DAC_SetValue>
	ExtiConfig.Line = EXTI_LINE_1;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	4a5c      	ldr	r2, [pc, #368]	; (8001bdc <ourInit+0x20c>)
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001a6c:	a908      	add	r1, sp, #32
	ExtiConfig.Line = EXTI_LINE_1;
 8001a6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001a72:	2303      	movs	r3, #3
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001a74:	485a      	ldr	r0, [pc, #360]	; (8001be0 <ourInit+0x210>)
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001a76:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001a78:	f006 fa9c 	bl	8007fb4 <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2007      	movs	r0, #7
 8001a80:	4611      	mov	r1, r2
 8001a82:	f006 f84b 	bl	8007b1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a86:	2007      	movs	r0, #7
 8001a88:	f006 f886 	bl	8007b98 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001a92:	4854      	ldr	r0, [pc, #336]	; (8001be4 <ourInit+0x214>)
 8001a94:	f006 fc76 	bl	8008384 <HAL_GPIO_WritePin>
	memset (usbbuffer, '\0', 128);  // clear the buffer
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4852      	ldr	r0, [pc, #328]	; (8001be8 <ourInit+0x218>)
 8001a9e:	f00a fdd5 	bl	800c64c <memset>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001aa2:	2240      	movs	r2, #64	; 0x40
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4851      	ldr	r0, [pc, #324]	; (8001bec <ourInit+0x21c>)
 8001aa8:	f00a fdd0 	bl	800c64c <memset>
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001aac:	2240      	movs	r2, #64	; 0x40
 8001aae:	2100      	movs	r1, #0
 8001ab0:	484f      	ldr	r0, [pc, #316]	; (8001bf0 <ourInit+0x220>)
 8001ab2:	f00a fdcb 	bl	800c64c <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001ab6:	2240      	movs	r2, #64	; 0x40
 8001ab8:	2100      	movs	r1, #0
 8001aba:	484e      	ldr	r0, [pc, #312]	; (8001bf4 <ourInit+0x224>)
 8001abc:	f00a fdc6 	bl	800c64c <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001ac0:	2240      	movs	r2, #64	; 0x40
 8001ac2:	494c      	ldr	r1, [pc, #304]	; (8001bf4 <ourInit+0x224>)
 8001ac4:	484c      	ldr	r0, [pc, #304]	; (8001bf8 <ourInit+0x228>)
 8001ac6:	f008 fc95 	bl	800a3f4 <HAL_UART_Receive_DMA>
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001aca:	4b4c      	ldr	r3, [pc, #304]	; (8001bfc <ourInit+0x22c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001acc:	4f4c      	ldr	r7, [pc, #304]	; (8001c00 <ourInit+0x230>)
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001ace:	681c      	ldr	r4, [r3, #0]
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <ourInit+0x234>)
 8001ad2:	4d4d      	ldr	r5, [pc, #308]	; (8001c08 <ourInit+0x238>)
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	4b4d      	ldr	r3, [pc, #308]	; (8001c0c <ourInit+0x23c>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	9304      	str	r3, [sp, #16]
 8001ade:	f7fe fcbb 	bl	8000458 <__aeabi_f2d>
 8001ae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f7fe fcb6 	bl	8000458 <__aeabi_f2d>
 8001aec:	4a48      	ldr	r2, [pc, #288]	; (8001c10 <ourInit+0x240>)
 8001aee:	e9cd 0100 	strd	r0, r1, [sp]
 8001af2:	2120      	movs	r1, #32
 8001af4:	483d      	ldr	r0, [pc, #244]	; (8001bec <ourInit+0x21c>)
 8001af6:	f00b fa11 	bl	800cf1c <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001afa:	2240      	movs	r2, #64	; 0x40
 8001afc:	493b      	ldr	r1, [pc, #236]	; (8001bec <ourInit+0x21c>)
 8001afe:	483e      	ldr	r0, [pc, #248]	; (8001bf8 <ourInit+0x228>)
 8001b00:	f008 fc3c 	bl	800a37c <HAL_UART_Transmit_DMA>
	lcd_init();
 8001b04:	f7ff fef0 	bl	80018e8 <lcd_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b08:	4b42      	ldr	r3, [pc, #264]	; (8001c14 <ourInit+0x244>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b0a:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b0c:	9308      	str	r3, [sp, #32]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b0e:	4638      	mov	r0, r7
 8001b10:	2304      	movs	r3, #4
 8001b12:	9600      	str	r6, [sp, #0]
 8001b14:	aa08      	add	r2, sp, #32
 8001b16:	f006 fd17 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001b1a:	2334      	movs	r3, #52	; 0x34
	data_l = ((data<<4)&0xf0);
 8001b1c:	011a      	lsls	r2, r3, #4
 8001b1e:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b24:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b28:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b2c:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b30:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b34:	2304      	movs	r3, #4
 8001b36:	214e      	movs	r1, #78	; 0x4e
 8001b38:	4638      	mov	r0, r7
 8001b3a:	aa08      	add	r2, sp, #32
 8001b3c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b3e:	f88d 8020 	strb.w	r8, [sp, #32]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b42:	f88d c021 	strb.w	ip, [sp, #33]	; 0x21
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b46:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b4a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b4e:	f006 fcfb 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001b52:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1e0      	bne.n	8001b1c <ourInit+0x14c>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b5a:	492f      	ldr	r1, [pc, #188]	; (8001c18 <ourInit+0x248>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b60:	9108      	str	r1, [sp, #32]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b62:	4827      	ldr	r0, [pc, #156]	; (8001c00 <ourInit+0x230>)
 8001b64:	214e      	movs	r1, #78	; 0x4e
 8001b66:	aa08      	add	r2, sp, #32
 8001b68:	f006 fcee 	bl	8008548 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b6c:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001b6e:	2320      	movs	r3, #32
 8001b70:	4c2a      	ldr	r4, [pc, #168]	; (8001c1c <ourInit+0x24c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b72:	4d23      	ldr	r5, [pc, #140]	; (8001c00 <ourInit+0x230>)
	data_l = ((data<<4)&0xf0);
 8001b74:	011a      	lsls	r2, r3, #4
 8001b76:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b7c:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b80:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b84:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b88:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	214e      	movs	r1, #78	; 0x4e
 8001b90:	4628      	mov	r0, r5
 8001b92:	aa08      	add	r2, sp, #32
 8001b94:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b96:	f88d 8020 	strb.w	r8, [sp, #32]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b9a:	f88d c021 	strb.w	ip, [sp, #33]	; 0x21
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b9e:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001ba2:	f88d e023 	strb.w	lr, [sp, #35]	; 0x23
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ba6:	f006 fccf 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001baa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1e0      	bne.n	8001b74 <ourInit+0x1a4>
	HAL_TIM_Base_Start_IT(&htim11);
 8001bb2:	481b      	ldr	r0, [pc, #108]	; (8001c20 <ourInit+0x250>)
 8001bb4:	f008 f9aa 	bl	8009f0c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001bb8:	481a      	ldr	r0, [pc, #104]	; (8001c24 <ourInit+0x254>)
}
 8001bba:	b00c      	add	sp, #48	; 0x30
 8001bbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_TIM_Base_Start_IT(&htim4);
 8001bc0:	f008 b9a4 	b.w	8009f0c <HAL_TIM_Base_Start_IT>
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	200003b0 	.word	0x200003b0
 8001bcc:	20000418 	.word	0x20000418
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	2000037c 	.word	0x2000037c
 8001bd8:	20000404 	.word	0x20000404
 8001bdc:	06000001 	.word	0x06000001
 8001be0:	200004e4 	.word	0x200004e4
 8001be4:	40020800 	.word	0x40020800
 8001be8:	200007e4 	.word	0x200007e4
 8001bec:	20000764 	.word	0x20000764
 8001bf0:	200007a4 	.word	0x200007a4
 8001bf4:	20000718 	.word	0x20000718
 8001bf8:	200006c0 	.word	0x200006c0
 8001bfc:	20000868 	.word	0x20000868
 8001c00:	200004ec 	.word	0x200004ec
 8001c04:	20000394 	.word	0x20000394
 8001c08:	0800f438 	.word	0x0800f438
 8001c0c:	200003a2 	.word	0x200003a2
 8001c10:	0800f468 	.word	0x0800f468
 8001c14:	080cc8cc 	.word	0x080cc8cc
 8001c18:	484c989c 	.word	0x484c989c
 8001c1c:	0800f450 	.word	0x0800f450
 8001c20:	20000580 	.word	0x20000580
 8001c24:	20000640 	.word	0x20000640

08001c28 <main>:
{
 8001c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	2400      	movs	r4, #0
{
 8001c2e:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8001c30:	f005 fb54 	bl	80072dc <HAL_Init>
  SystemClock_Config();
 8001c34:	f7ff fd4e 	bl	80016d4 <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c3a:	2602      	movs	r6, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8001c40:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c44:	4dac      	ldr	r5, [pc, #688]	; (8001ef8 <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	9414      	str	r4, [sp, #80]	; 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c48:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001c4a:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	61eb      	str	r3, [r5, #28]
 8001c52:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001c54:	48a9      	ldr	r0, [pc, #676]	; (8001efc <main+0x2d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8001c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c5e:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c60:	4692      	mov	sl, r2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c62:	f043 0320 	orr.w	r3, r3, #32
 8001c66:	61eb      	str	r3, [r5, #28]
 8001c68:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001c6a:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	930a      	str	r3, [sp, #40]	; 0x28
 8001c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001c78:	f04f 0900 	mov.w	r9, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61eb      	str	r3, [r5, #28]
 8001c80:	69eb      	ldr	r3, [r5, #28]
  hdac.Instance = DAC;
 8001c82:	4f9f      	ldr	r7, [pc, #636]	; (8001f00 <main+0x2d8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4013      	ands	r3, r2
 8001c86:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	69eb      	ldr	r3, [r5, #28]
 8001c8c:	4333      	orrs	r3, r6
 8001c8e:	61eb      	str	r3, [r5, #28]
 8001c90:	69eb      	ldr	r3, [r5, #28]
 8001c92:	4033      	ands	r3, r6
 8001c94:	930c      	str	r3, [sp, #48]	; 0x30
 8001c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c98:	69eb      	ldr	r3, [r5, #28]
 8001c9a:	f043 0308 	orr.w	r3, r3, #8
 8001c9e:	61eb      	str	r3, [r5, #28]
 8001ca0:	69eb      	ldr	r3, [r5, #28]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8001ca8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001caa:	f006 fb6b 	bl	8008384 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001cae:	4622      	mov	r2, r4
 8001cb0:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001cb4:	4893      	ldr	r0, [pc, #588]	; (8001f04 <main+0x2dc>)
 8001cb6:	f006 fb65 	bl	8008384 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin|Unused_Pin_4_Pin
 8001cba:	f64f 420f 	movw	r2, #64527	; 0xfc0f
 8001cbe:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc0:	4890      	ldr	r0, [pc, #576]	; (8001f04 <main+0x2dc>)
 8001cc2:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin|Unused_Pin_4_Pin
 8001cc4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cc8:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cca:	f006 f9d9 	bl	8008080 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001cce:	2240      	movs	r2, #64	; 0x40
 8001cd0:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	488a      	ldr	r0, [pc, #552]	; (8001efc <main+0x2d4>)
 8001cd4:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001cd6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001cda:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f006 f9cf 	bl	8008080 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_8_Pin|Unused_Pin_10_Pin|Unused_Pin_11_Pin;
 8001ce2:	f248 1280 	movw	r2, #33152	; 0x8180
 8001ce6:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	4884      	ldr	r0, [pc, #528]	; (8001efc <main+0x2d4>)
 8001cea:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Unused_Pin_8_Pin|Unused_Pin_10_Pin|Unused_Pin_11_Pin;
 8001cec:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cf0:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f006 f9c5 	bl	8008080 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001cf6:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8001cfa:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfc:	4881      	ldr	r0, [pc, #516]	; (8001f04 <main+0x2dc>)
 8001cfe:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001d00:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001d04:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	f006 f9ba 	bl	8008080 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 8001d0c:	f647 4205 	movw	r2, #31749	; 0x7c05
 8001d10:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	487c      	ldr	r0, [pc, #496]	; (8001f08 <main+0x2e0>)
 8001d16:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 8001d18:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1c:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d20:	f006 f9ae 	bl	8008080 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001d24:	2202      	movs	r2, #2
 8001d26:	2300      	movs	r3, #0
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001d28:	4877      	ldr	r0, [pc, #476]	; (8001f08 <main+0x2e0>)
 8001d2a:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001d2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d30:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001d34:	f006 f9a4 	bl	8008080 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_9_Pin|Unused_Pin_16_Pin|Unused_Pin_17_Pin|Unused_Pin_18_Pin
 8001d38:	f248 3238 	movw	r2, #33592	; 0x8338
 8001d3c:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	4872      	ldr	r0, [pc, #456]	; (8001f08 <main+0x2e0>)
 8001d40:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Unused_Pin_9_Pin|Unused_Pin_16_Pin|Unused_Pin_17_Pin|Unused_Pin_18_Pin
 8001d42:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d46:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f006 f99a 	bl	8008080 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_15_Pin;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2204      	movs	r2, #4
  HAL_GPIO_Init(Unused_Pin_15_GPIO_Port, &GPIO_InitStruct);
 8001d50:	486e      	ldr	r0, [pc, #440]	; (8001f0c <main+0x2e4>)
 8001d52:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Unused_Pin_15_Pin;
 8001d54:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d58:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(Unused_Pin_15_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f006 f991 	bl	8008080 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d5e:	4622      	mov	r2, r4
 8001d60:	4621      	mov	r1, r4
 8001d62:	2006      	movs	r0, #6
 8001d64:	f005 feda 	bl	8007b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d68:	2006      	movs	r0, #6
 8001d6a:	f005 ff15 	bl	8007b98 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d6e:	4622      	mov	r2, r4
 8001d70:	4621      	mov	r1, r4
 8001d72:	2008      	movs	r0, #8
 8001d74:	f005 fed2 	bl	8007b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d78:	2008      	movs	r0, #8
 8001d7a:	f005 ff0d 	bl	8007b98 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d7e:	4622      	mov	r2, r4
 8001d80:	4621      	mov	r1, r4
 8001d82:	2028      	movs	r0, #40	; 0x28
 8001d84:	f005 feca 	bl	8007b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d88:	2028      	movs	r0, #40	; 0x28
 8001d8a:	f005 ff05 	bl	8007b98 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d8e:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d90:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d96:	61eb      	str	r3, [r5, #28]
 8001d98:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d9a:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001da0:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001da2:	9308      	str	r3, [sp, #32]
 8001da4:	9b08      	ldr	r3, [sp, #32]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001da6:	f005 feb9 	bl	8007b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001daa:	200b      	movs	r0, #11
 8001dac:	f005 fef4 	bl	8007b98 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001db0:	4622      	mov	r2, r4
 8001db2:	4621      	mov	r1, r4
 8001db4:	200e      	movs	r0, #14
 8001db6:	f005 feb1 	bl	8007b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001dba:	200e      	movs	r0, #14
 8001dbc:	f005 feec 	bl	8007b98 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	200f      	movs	r0, #15
 8001dc6:	f005 fea9 	bl	8007b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001dca:	200f      	movs	r0, #15
 8001dcc:	f005 fee4 	bl	8007b98 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 8001dd0:	f7ff fb10 	bl	80013f4 <MX_ADC_Init>
  hdac.Instance = DAC;
 8001dd4:	4b4e      	ldr	r3, [pc, #312]	; (8001f10 <main+0x2e8>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001dd6:	4638      	mov	r0, r7
  DAC_ChannelConfTypeDef sConfig = {0};
 8001dd8:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  hdac.Instance = DAC;
 8001ddc:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001dde:	f005 ff15 	bl	8007c0c <HAL_DAC_Init>
 8001de2:	b108      	cbz	r0, 8001de8 <main+0x1c0>
 8001de4:	b672      	cpsid	i
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <main+0x1be>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001de8:	4602      	mov	r2, r0
 8001dea:	a910      	add	r1, sp, #64	; 0x40
 8001dec:	4638      	mov	r0, r7
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001dee:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001df2:	f005 ff67 	bl	8007cc4 <HAL_DAC_ConfigChannel>
 8001df6:	b108      	cbz	r0, 8001dfc <main+0x1d4>
 8001df8:	b672      	cpsid	i
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <main+0x1d2>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	4638      	mov	r0, r7
 8001e00:	a910      	add	r1, sp, #64	; 0x40
 8001e02:	f005 ff5f 	bl	8007cc4 <HAL_DAC_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	b108      	cbz	r0, 8001e0e <main+0x1e6>
 8001e0a:	b672      	cpsid	i
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <main+0x1e4>
  hi2c1.Instance = I2C1;
 8001e0e:	4841      	ldr	r0, [pc, #260]	; (8001f14 <main+0x2ec>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e10:	219c      	movs	r1, #156	; 0x9c
  hi2c1.Init.OwnAddress2 = 0;
 8001e12:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e16:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e1a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001e20:	4c3d      	ldr	r4, [pc, #244]	; (8001f18 <main+0x2f0>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e22:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hi2c1.Init.ClockSpeed = 100000;
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <main+0x2f4>)
 8001e28:	e9c0 4300 	strd	r4, r3, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e2c:	f006 fac4 	bl	80083b8 <HAL_I2C_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b9b0      	cbnz	r0, 8001e62 <main+0x23a>
  huart1.Instance = USART1;
 8001e34:	483a      	ldr	r0, [pc, #232]	; (8001f20 <main+0x2f8>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001e36:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e3a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e3e:	60c3      	str	r3, [r0, #12]
  huart1.Init.BaudRate = 9600;
 8001e40:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001e44:	6043      	str	r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001e46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e4a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e4c:	230c      	movs	r3, #12
 8001e4e:	6143      	str	r3, [r0, #20]
  huart1.Instance = USART1;
 8001e50:	4b34      	ldr	r3, [pc, #208]	; (8001f24 <main+0x2fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001e52:	6086      	str	r6, [r0, #8]
  huart1.Instance = USART1;
 8001e54:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e56:	f008 fa07 	bl	800a268 <HAL_UART_Init>
 8001e5a:	4604      	mov	r4, r0
 8001e5c:	b118      	cbz	r0, 8001e66 <main+0x23e>
 8001e5e:	b672      	cpsid	i
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <main+0x238>
 8001e62:	b672      	cpsid	i
 8001e64:	e7fe      	b.n	8001e64 <main+0x23c>
  MX_USB_DEVICE_Init();
 8001e66:	f00a f929 	bl	800c0bc <MX_USB_DEVICE_Init>
  htim2.Init.Prescaler = 32000;
 8001e6a:	f44f 47fa 	mov.w	r7, #32000	; 0x7d00
  htim2.Instance = TIM2;
 8001e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 20;
 8001e72:	2314      	movs	r3, #20
  htim2.Instance = TIM2;
 8001e74:	4d2c      	ldr	r5, [pc, #176]	; (8001f28 <main+0x300>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e76:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e7a:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7c:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e88:	60ac      	str	r4, [r5, #8]
  htim2.Instance = TIM2;
 8001e8a:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = 20;
 8001e8c:	60eb      	str	r3, [r5, #12]
  htim2.Init.Prescaler = 32000;
 8001e8e:	606f      	str	r7, [r5, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e90:	f007 ffec 	bl	8009e6c <HAL_TIM_Base_Init>
 8001e94:	b108      	cbz	r0, 8001e9a <main+0x272>
 8001e96:	b672      	cpsid	i
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <main+0x270>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e9e:	9610      	str	r6, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ea0:	f008 f876 	bl	8009f90 <HAL_TIM_ConfigClockSource>
 8001ea4:	b108      	cbz	r0, 8001eaa <main+0x282>
 8001ea6:	b672      	cpsid	i
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <main+0x280>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eaa:	4628      	mov	r0, r5
 8001eac:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eae:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb2:	f008 f9a7 	bl	800a204 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb6:	b108      	cbz	r0, 8001ebc <main+0x294>
 8001eb8:	b672      	cpsid	i
  while (1)
 8001eba:	e7fe      	b.n	8001eba <main+0x292>
  htim3.Init.Period = 500;
 8001ebc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  htim3.Instance = TIM3;
 8001ec0:	4c1a      	ldr	r4, [pc, #104]	; (8001f2c <main+0x304>)
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <main+0x308>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec4:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8001ec8:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ecc:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	e9c4 7001 	strd	r7, r0, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed4:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ed8:	4620      	mov	r0, r4
  htim3.Init.Period = 500;
 8001eda:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 8001edc:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ede:	f007 ffc5 	bl	8009e6c <HAL_TIM_Base_Init>
 8001ee2:	b108      	cbz	r0, 8001ee8 <main+0x2c0>
 8001ee4:	b672      	cpsid	i
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <main+0x2be>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ee8:	4620      	mov	r0, r4
 8001eea:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eec:	9610      	str	r6, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eee:	f008 f84f 	bl	8009f90 <HAL_TIM_ConfigClockSource>
 8001ef2:	b1f8      	cbz	r0, 8001f34 <main+0x30c>
 8001ef4:	b672      	cpsid	i
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <main+0x2ce>
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	20000404 	.word	0x20000404
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40020c00 	.word	0x40020c00
 8001f10:	40007400 	.word	0x40007400
 8001f14:	200004ec 	.word	0x200004ec
 8001f18:	40005400 	.word	0x40005400
 8001f1c:	000186a0 	.word	0x000186a0
 8001f20:	200006c0 	.word	0x200006c0
 8001f24:	40013800 	.word	0x40013800
 8001f28:	200005c0 	.word	0x200005c0
 8001f2c:	20000600 	.word	0x20000600
 8001f30:	40000400 	.word	0x40000400
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f34:	2600      	movs	r6, #0
 8001f36:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f38:	4851      	ldr	r0, [pc, #324]	; (8002080 <main+0x458>)
 8001f3a:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f40:	f008 f960 	bl	800a204 <HAL_TIMEx_MasterConfigSynchronization>
 8001f44:	b108      	cbz	r0, 8001f4a <main+0x322>
 8001f46:	b672      	cpsid	i
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <main+0x320>
  htim11.Init.Prescaler = 32000;
 8001f4a:	f44f 45fa 	mov.w	r5, #32000	; 0x7d00
  htim11.Init.Period = 100;
 8001f4e:	2264      	movs	r2, #100	; 0x64
  htim11.Instance = TIM11;
 8001f50:	4c4c      	ldr	r4, [pc, #304]	; (8002084 <main+0x45c>)
 8001f52:	4b4d      	ldr	r3, [pc, #308]	; (8002088 <main+0x460>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f54:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8001f58:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5c:	e9c4 0004 	strd	r0, r0, [r4, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f60:	60a0      	str	r0, [r4, #8]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001f62:	4620      	mov	r0, r4
  htim11.Init.Period = 100;
 8001f64:	60e2      	str	r2, [r4, #12]
  htim11.Init.Prescaler = 32000;
 8001f66:	6065      	str	r5, [r4, #4]
  htim11.Instance = TIM11;
 8001f68:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001f6a:	f007 ff7f 	bl	8009e6c <HAL_TIM_Base_Init>
 8001f6e:	b108      	cbz	r0, 8001f74 <main+0x34c>
 8001f70:	b672      	cpsid	i
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <main+0x34a>
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8001f74:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f76:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8001f7a:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f7c:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8001f7e:	f008 f807 	bl	8009f90 <HAL_TIM_ConfigClockSource>
 8001f82:	b108      	cbz	r0, 8001f88 <main+0x360>
 8001f84:	b672      	cpsid	i
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <main+0x35e>
  htim9.Init.Period = 200;
 8001f88:	22c8      	movs	r2, #200	; 0xc8
  htim9.Instance = TIM9;
 8001f8a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800208c <main+0x464>
 8001f8e:	4b40      	ldr	r3, [pc, #256]	; (8002090 <main+0x468>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f90:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8001f94:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9c:	e9c8 5001 	strd	r5, r0, [r8, #4]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa0:	e9c8 0004 	strd	r0, r0, [r8, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001fa4:	4640      	mov	r0, r8
  htim9.Init.Period = 200;
 8001fa6:	f8c8 200c 	str.w	r2, [r8, #12]
  htim9.Instance = TIM9;
 8001faa:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001fae:	f007 ff5d 	bl	8009e6c <HAL_TIM_Base_Init>
 8001fb2:	b108      	cbz	r0, 8001fb8 <main+0x390>
 8001fb4:	b672      	cpsid	i
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <main+0x38e>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001fb8:	4640      	mov	r0, r8
 8001fba:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fbc:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001fbe:	f007 ffe7 	bl	8009f90 <HAL_TIM_ConfigClockSource>
 8001fc2:	b108      	cbz	r0, 8001fc8 <main+0x3a0>
 8001fc4:	b672      	cpsid	i
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <main+0x39e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8001fc8:	4640      	mov	r0, r8
 8001fca:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fcc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8001fd0:	f008 f918 	bl	800a204 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd4:	b108      	cbz	r0, 8001fda <main+0x3b2>
 8001fd6:	b672      	cpsid	i
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <main+0x3b0>
  htim10.Init.Period = 10;
 8001fda:	220a      	movs	r2, #10
  htim10.Instance = TIM10;
 8001fdc:	4e2d      	ldr	r6, [pc, #180]	; (8002094 <main+0x46c>)
 8001fde:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <main+0x470>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fe0:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8001fe4:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe8:	e9c6 5001 	strd	r5, r0, [r6, #4]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fec:	e9c6 0004 	strd	r0, r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ff0:	4630      	mov	r0, r6
  htim10.Init.Period = 10;
 8001ff2:	60f2      	str	r2, [r6, #12]
  htim10.Instance = TIM10;
 8001ff4:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ff6:	f007 ff39 	bl	8009e6c <HAL_TIM_Base_Init>
 8001ffa:	b108      	cbz	r0, 8002000 <main+0x3d8>
 8001ffc:	b672      	cpsid	i
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <main+0x3d6>
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002000:	4630      	mov	r0, r6
 8002002:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002006:	f007 ffc3 	bl	8009f90 <HAL_TIM_ConfigClockSource>
 800200a:	b108      	cbz	r0, 8002010 <main+0x3e8>
 800200c:	b672      	cpsid	i
  while (1)
 800200e:	e7fe      	b.n	800200e <main+0x3e6>
  htim4.Init.Period = 2500;
 8002010:	f640 12c4 	movw	r2, #2500	; 0x9c4
  htim4.Instance = TIM4;
 8002014:	4e21      	ldr	r6, [pc, #132]	; (800209c <main+0x474>)
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <main+0x478>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002018:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 800201c:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002024:	e9c6 5001 	strd	r5, r0, [r6, #4]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002028:	e9c6 0004 	strd	r0, r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800202c:	4630      	mov	r0, r6
  htim4.Init.Period = 2500;
 800202e:	60f2      	str	r2, [r6, #12]
  htim4.Instance = TIM4;
 8002030:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002032:	f007 ff1b 	bl	8009e6c <HAL_TIM_Base_Init>
 8002036:	b108      	cbz	r0, 800203c <main+0x414>
 8002038:	b672      	cpsid	i
  while (1)
 800203a:	e7fe      	b.n	800203a <main+0x412>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800203c:	4630      	mov	r0, r6
 800203e:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002040:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002042:	f007 ffa5 	bl	8009f90 <HAL_TIM_ConfigClockSource>
 8002046:	b108      	cbz	r0, 800204c <main+0x424>
 8002048:	b672      	cpsid	i
  while (1)
 800204a:	e7fe      	b.n	800204a <main+0x422>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204c:	2200      	movs	r2, #0
 800204e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002050:	4812      	ldr	r0, [pc, #72]	; (800209c <main+0x474>)
 8002052:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002054:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002058:	f008 f8d4 	bl	800a204 <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	b108      	cbz	r0, 8002062 <main+0x43a>
 800205e:	b672      	cpsid	i
  while (1)
 8002060:	e7fe      	b.n	8002060 <main+0x438>
  volatile float error = 0;
 8002062:	2500      	movs	r5, #0
  ourInit();
 8002064:	f7ff fcb4 	bl	80019d0 <ourInit>
  volatile float error = 0;
 8002068:	f8df b038 	ldr.w	fp, [pc, #56]	; 80020a4 <main+0x47c>
 800206c:	9504      	str	r5, [sp, #16]
  volatile float derivative = 0;
 800206e:	4c0e      	ldr	r4, [pc, #56]	; (80020a8 <main+0x480>)
 8002070:	9505      	str	r5, [sp, #20]
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8002072:	f8df a038 	ldr.w	sl, [pc, #56]	; 80020ac <main+0x484>
  volatile float integral = 0;
 8002076:	9506      	str	r5, [sp, #24]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002078:	4e0d      	ldr	r6, [pc, #52]	; (80020b0 <main+0x488>)
  volatile float error_previous = 0;
 800207a:	9507      	str	r5, [sp, #28]
  volatile float correction = 0;
 800207c:	950e      	str	r5, [sp, #56]	; 0x38
 800207e:	e0f4      	b.n	800226a <main+0x642>
 8002080:	20000600 	.word	0x20000600
 8002084:	20000580 	.word	0x20000580
 8002088:	40011000 	.word	0x40011000
 800208c:	20000680 	.word	0x20000680
 8002090:	40010800 	.word	0x40010800
 8002094:	20000540 	.word	0x20000540
 8002098:	40010c00 	.word	0x40010c00
 800209c:	20000640 	.word	0x20000640
 80020a0:	40000800 	.word	0x40000800
 80020a4:	20000388 	.word	0x20000388
 80020a8:	20000864 	.word	0x20000864
 80020ac:	457ff000 	.word	0x457ff000
 80020b0:	20000404 	.word	0x20000404
		  if(op_num > (volt_set_main - 0.5) + margin){
 80020b4:	4bb4      	ldr	r3, [pc, #720]	; (8002388 <main+0x760>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	f7fe f9ce 	bl	8000458 <__aeabi_f2d>
 80020bc:	4bb3      	ldr	r3, [pc, #716]	; (800238c <main+0x764>)
 80020be:	4680      	mov	r8, r0
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	4689      	mov	r9, r1
 80020c4:	f7fe f9c8 	bl	8000458 <__aeabi_f2d>
 80020c8:	2200      	movs	r2, #0
 80020ca:	4bb1      	ldr	r3, [pc, #708]	; (8002390 <main+0x768>)
 80020cc:	f7fe f864 	bl	8000198 <__aeabi_dsub>
 80020d0:	a3ab      	add	r3, pc, #684	; (adr r3, 8002380 <main+0x758>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	f7fe f861 	bl	800019c <__adddf3>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4640      	mov	r0, r8
 80020e0:	4649      	mov	r1, r9
 80020e2:	f7fe fca1 	bl	8000a28 <__aeabi_dcmpgt>
 80020e6:	2800      	cmp	r0, #0
 80020e8:	f040 81d5 	bne.w	8002496 <main+0x86e>
		  else if(op_num < (volt_set_main - 0.5) - margin){
 80020ec:	4ba6      	ldr	r3, [pc, #664]	; (8002388 <main+0x760>)
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	f7fe f9b2 	bl	8000458 <__aeabi_f2d>
 80020f4:	4ba5      	ldr	r3, [pc, #660]	; (800238c <main+0x764>)
 80020f6:	4680      	mov	r8, r0
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	4689      	mov	r9, r1
 80020fc:	f7fe f9ac 	bl	8000458 <__aeabi_f2d>
 8002100:	2200      	movs	r2, #0
 8002102:	4ba3      	ldr	r3, [pc, #652]	; (8002390 <main+0x768>)
 8002104:	f7fe f848 	bl	8000198 <__aeabi_dsub>
 8002108:	a39d      	add	r3, pc, #628	; (adr r3, 8002380 <main+0x758>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	f7fe f843 	bl	8000198 <__aeabi_dsub>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4640      	mov	r0, r8
 8002118:	4649      	mov	r1, r9
 800211a:	f7fe fc67 	bl	80009ec <__aeabi_dcmplt>
 800211e:	b180      	cbz	r0, 8002142 <main+0x51a>
			  if(v1 <= 4094){
 8002120:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002124:	8823      	ldrh	r3, [r4, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	4293      	cmp	r3, r2
 800212a:	d803      	bhi.n	8002134 <main+0x50c>
				  v1++;
 800212c:	8823      	ldrh	r3, [r4, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	b29b      	uxth	r3, r3
 8002132:	8023      	strh	r3, [r4, #0]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002134:	2200      	movs	r2, #0
 8002136:	8823      	ldrh	r3, [r4, #0]
 8002138:	4630      	mov	r0, r6
 800213a:	4611      	mov	r1, r2
 800213c:	b29b      	uxth	r3, r3
 800213e:	f005 fdab 	bl	8007c98 <HAL_DAC_SetValue>
	  volatile float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)0.5))) * (float)4095 / (float)vddcalc);
 8002142:	4b92      	ldr	r3, [pc, #584]	; (800238c <main+0x764>)
 8002144:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	f7fe fcbb 	bl	8000ac4 <__addsf3>
 800214e:	4991      	ldr	r1, [pc, #580]	; (8002394 <main+0x76c>)
 8002150:	f7fe fdc0 	bl	8000cd4 <__aeabi_fmul>
 8002154:	4601      	mov	r1, r0
 8002156:	4890      	ldr	r0, [pc, #576]	; (8002398 <main+0x770>)
 8002158:	f7fe fcb2 	bl	8000ac0 <__aeabi_fsub>
 800215c:	4651      	mov	r1, sl
 800215e:	f7fe fdb9 	bl	8000cd4 <__aeabi_fmul>
 8002162:	4639      	mov	r1, r7
 8002164:	f7fe fe6a 	bl	8000e3c <__aeabi_fdiv>
 8002168:	9010      	str	r0, [sp, #64]	; 0x40
	  if(temp <= 0){
 800216a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800216c:	4629      	mov	r1, r5
 800216e:	f7fe ff59 	bl	8001024 <__aeabi_fcmple>
 8002172:	2800      	cmp	r0, #0
 8002174:	f040 81bd 	bne.w	80024f2 <main+0x8ca>
	  else if(temp >= 4095){
 8002178:	9810      	ldr	r0, [sp, #64]	; 0x40
 800217a:	4651      	mov	r1, sl
 800217c:	f7fe ff5c 	bl	8001038 <__aeabi_fcmpge>
 8002180:	2800      	cmp	r0, #0
 8002182:	f000 81af 	beq.w	80024e4 <main+0x8bc>
		  v2 = 4095;
 8002186:	f640 73ff 	movw	r3, #4095	; 0xfff
 800218a:	4a84      	ldr	r2, [pc, #528]	; (800239c <main+0x774>)
 800218c:	8013      	strh	r3, [r2, #0]
	  if(volt_set_main > volt_set_main_old){
 800218e:	4b7f      	ldr	r3, [pc, #508]	; (800238c <main+0x764>)
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	4b83      	ldr	r3, [pc, #524]	; (80023a0 <main+0x778>)
 8002194:	6819      	ldr	r1, [r3, #0]
 8002196:	f7fe ff59 	bl	800104c <__aeabi_fcmpgt>
 800219a:	4680      	mov	r8, r0
 800219c:	2800      	cmp	r0, #0
 800219e:	f040 8191 	bne.w	80024c4 <main+0x89c>
	  else if(volt_set_main < volt_set_main_old){
 80021a2:	4b7a      	ldr	r3, [pc, #488]	; (800238c <main+0x764>)
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	4b7e      	ldr	r3, [pc, #504]	; (80023a0 <main+0x778>)
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	f7fe ff31 	bl	8001010 <__aeabi_fcmplt>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80021ae:	8823      	ldrh	r3, [r4, #0]
	  else if(volt_set_main < volt_set_main_old){
 80021b0:	4607      	mov	r7, r0
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80021b2:	b29b      	uxth	r3, r3
	  else if(volt_set_main < volt_set_main_old){
 80021b4:	2800      	cmp	r0, #0
 80021b6:	f000 817e 	beq.w	80024b6 <main+0x88e>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80021ba:	4642      	mov	r2, r8
 80021bc:	4641      	mov	r1, r8
 80021be:	4630      	mov	r0, r6
 80021c0:	f005 fd6a 	bl	8007c98 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 80021c4:	4642      	mov	r2, r8
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 80021c6:	4b75      	ldr	r3, [pc, #468]	; (800239c <main+0x774>)
 80021c8:	2110      	movs	r1, #16
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	4630      	mov	r0, r6
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	f005 fd62 	bl	8007c98 <HAL_DAC_SetValue>
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 80021d4:	4b73      	ldr	r3, [pc, #460]	; (80023a4 <main+0x77c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	f040 8166 	bne.w	80024aa <main+0x882>
 80021de:	f8bb 3000 	ldrh.w	r3, [fp]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	f240 8160 	bls.w	80024aa <main+0x882>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2140      	movs	r1, #64	; 0x40
 80021ee:	486e      	ldr	r0, [pc, #440]	; (80023a8 <main+0x780>)
 80021f0:	f006 f8c8 	bl	8008384 <HAL_GPIO_WritePin>
	  update_ADC_watchdog(amp_set_main);
 80021f4:	4b6d      	ldr	r3, [pc, #436]	; (80023ac <main+0x784>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80021f6:	496e      	ldr	r1, [pc, #440]	; (80023b0 <main+0x788>)
	  update_ADC_watchdog(amp_set_main);
 80021f8:	6818      	ldr	r0, [r3, #0]
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80021fa:	f7fe fd6b 	bl	8000cd4 <__aeabi_fmul>
 80021fe:	496d      	ldr	r1, [pc, #436]	; (80023b4 <main+0x78c>)
 8002200:	f7fe fd68 	bl	8000cd4 <__aeabi_fmul>
 8002204:	4651      	mov	r1, sl
 8002206:	f7fe fd65 	bl	8000cd4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800220a:	4b6b      	ldr	r3, [pc, #428]	; (80023b8 <main+0x790>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800220c:	4607      	mov	r7, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800220e:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002210:	f8bb 9008 	ldrh.w	r9, [fp, #8]
 8002214:	8818      	ldrh	r0, [r3, #0]
 8002216:	f7fe fd05 	bl	8000c24 <__aeabi_ui2f>
 800221a:	fa1f f989 	uxth.w	r9, r9
 800221e:	4680      	mov	r8, r0
 8002220:	4648      	mov	r0, r9
 8002222:	f7fe fcff 	bl	8000c24 <__aeabi_ui2f>
 8002226:	4601      	mov	r1, r0
 8002228:	4640      	mov	r0, r8
 800222a:	f7fe fe07 	bl	8000e3c <__aeabi_fdiv>
 800222e:	4963      	ldr	r1, [pc, #396]	; (80023bc <main+0x794>)
 8002230:	f7fe fd50 	bl	8000cd4 <__aeabi_fmul>
 8002234:	4601      	mov	r1, r0
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002236:	4638      	mov	r0, r7
 8002238:	f7fe fe00 	bl	8000e3c <__aeabi_fdiv>
 800223c:	f7fe ff36 	bl	80010ac <__aeabi_f2uiz>
	if(amp >= 4095){
 8002240:	f640 72fe 	movw	r2, #4094	; 0xffe
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002244:	b283      	uxth	r3, r0
 8002246:	f8ad 300e 	strh.w	r3, [sp, #14]
	if(amp >= 4095){
 800224a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	  HAL_Delay(1);
 800224e:	2001      	movs	r0, #1
	if(amp >= 4095){
 8002250:	b29b      	uxth	r3, r3
 8002252:	4293      	cmp	r3, r2
		ADC1->HTR = 4095;
 8002254:	bf8c      	ite	hi
 8002256:	f640 73ff 	movwhi	r3, #4095	; 0xfff
		ADC1->HTR = amp;
 800225a:	f8bd 300e 	ldrhls.w	r3, [sp, #14]
 800225e:	4a58      	ldr	r2, [pc, #352]	; (80023c0 <main+0x798>)
 8002260:	bf98      	it	ls
 8002262:	b29b      	uxthls	r3, r3
 8002264:	6293      	str	r3, [r2, #40]	; 0x28
	  HAL_Delay(1);
 8002266:	f005 f85b 	bl	8007320 <HAL_Delay>
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 800226a:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <main+0x790>)
 800226c:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800226e:	8818      	ldrh	r0, [r3, #0]
 8002270:	f7fe fcd8 	bl	8000c24 <__aeabi_ui2f>
 8002274:	4680      	mov	r8, r0
 8002276:	f8bb 0008 	ldrh.w	r0, [fp, #8]
 800227a:	b280      	uxth	r0, r0
 800227c:	f7fe fcd2 	bl	8000c24 <__aeabi_ui2f>
 8002280:	4601      	mov	r1, r0
 8002282:	4640      	mov	r0, r8
 8002284:	f7fe fdda 	bl	8000e3c <__aeabi_fdiv>
 8002288:	494c      	ldr	r1, [pc, #304]	; (80023bc <main+0x794>)
 800228a:	f7fe fd23 	bl	8000cd4 <__aeabi_fmul>
 800228e:	4607      	mov	r7, r0
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8002290:	f8bb 0004 	ldrh.w	r0, [fp, #4]
 8002294:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8002298:	b280      	uxth	r0, r0
 800229a:	b29b      	uxth	r3, r3
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	f7fe fcc1 	bl	8000c24 <__aeabi_ui2f>
 80022a2:	4946      	ldr	r1, [pc, #280]	; (80023bc <main+0x794>)
 80022a4:	f7fe fd16 	bl	8000cd4 <__aeabi_fmul>
 80022a8:	4641      	mov	r1, r8
 80022aa:	f7fe fd13 	bl	8000cd4 <__aeabi_fmul>
 80022ae:	9b01      	ldr	r3, [sp, #4]
 80022b0:	4681      	mov	r9, r0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fcb6 	bl	8000c24 <__aeabi_ui2f>
 80022b8:	4651      	mov	r1, sl
 80022ba:	f7fe fd0b 	bl	8000cd4 <__aeabi_fmul>
 80022be:	4601      	mov	r1, r0
 80022c0:	4648      	mov	r0, r9
 80022c2:	f7fe fdbb 	bl	8000e3c <__aeabi_fdiv>
 80022c6:	493b      	ldr	r1, [pc, #236]	; (80023b4 <main+0x78c>)
 80022c8:	f7fe fdb8 	bl	8000e3c <__aeabi_fdiv>
 80022cc:	4938      	ldr	r1, [pc, #224]	; (80023b0 <main+0x788>)
 80022ce:	f7fe fdb5 	bl	8000e3c <__aeabi_fdiv>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80022d2:	4629      	mov	r1, r5
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 80022d4:	4681      	mov	r9, r0
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80022d6:	f7fe feaf 	bl	8001038 <__aeabi_fcmpge>
 80022da:	b900      	cbnz	r0, 80022de <main+0x6b6>
 80022dc:	46a9      	mov	r9, r5
 80022de:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <main+0x79c>)
 80022e0:	f8c3 9000 	str.w	r9, [r3]
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80022e4:	f8bb 0000 	ldrh.w	r0, [fp]
 80022e8:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 80022ec:	b280      	uxth	r0, r0
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	f7fe fc97 	bl	8000c24 <__aeabi_ui2f>
 80022f6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80022fa:	f7fe fceb 	bl	8000cd4 <__aeabi_fmul>
 80022fe:	492f      	ldr	r1, [pc, #188]	; (80023bc <main+0x794>)
 8002300:	f7fe fce8 	bl	8000cd4 <__aeabi_fmul>
 8002304:	4641      	mov	r1, r8
 8002306:	f7fe fce5 	bl	8000cd4 <__aeabi_fmul>
 800230a:	9b01      	ldr	r3, [sp, #4]
 800230c:	4681      	mov	r9, r0
 800230e:	4618      	mov	r0, r3
 8002310:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <main+0x79c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	f7fe fc85 	bl	8000c24 <__aeabi_ui2f>
 800231a:	4651      	mov	r1, sl
 800231c:	f7fe fcda 	bl	8000cd4 <__aeabi_fmul>
 8002320:	4601      	mov	r1, r0
 8002322:	4648      	mov	r0, r9
 8002324:	f7fe fd8a 	bl	8000e3c <__aeabi_fdiv>
 8002328:	9b01      	ldr	r3, [sp, #4]
 800232a:	4681      	mov	r9, r0
 800232c:	4926      	ldr	r1, [pc, #152]	; (80023c8 <main+0x7a0>)
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fcd0 	bl	8000cd4 <__aeabi_fmul>
 8002334:	4601      	mov	r1, r0
 8002336:	4648      	mov	r0, r9
 8002338:	f7fe fbc2 	bl	8000ac0 <__aeabi_fsub>
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 800233c:	4629      	mov	r1, r5
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 800233e:	4681      	mov	r9, r0
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 8002340:	f7fe fe7a 	bl	8001038 <__aeabi_fcmpge>
 8002344:	b900      	cbnz	r0, 8002348 <main+0x720>
 8002346:	46a9      	mov	r9, r5
 8002348:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <main+0x760>)
 800234a:	f8c3 9000 	str.w	r9, [r3]
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 800234e:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 8002352:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8002356:	b280      	uxth	r0, r0
 8002358:	b29b      	uxth	r3, r3
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	f7fe fc62 	bl	8000c24 <__aeabi_ui2f>
 8002360:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002364:	f7fe fcb6 	bl	8000cd4 <__aeabi_fmul>
 8002368:	4914      	ldr	r1, [pc, #80]	; (80023bc <main+0x794>)
 800236a:	f7fe fcb3 	bl	8000cd4 <__aeabi_fmul>
 800236e:	4641      	mov	r1, r8
 8002370:	f7fe fcb0 	bl	8000cd4 <__aeabi_fmul>
 8002374:	9b01      	ldr	r3, [sp, #4]
 8002376:	4681      	mov	r9, r0
 8002378:	4618      	mov	r0, r3
 800237a:	e027      	b.n	80023cc <main+0x7a4>
 800237c:	f3af 8000 	nop.w
 8002380:	e0000000 	.word	0xe0000000
 8002384:	3f60624d 	.word	0x3f60624d
 8002388:	20000710 	.word	0x20000710
 800238c:	2000086c 	.word	0x2000086c
 8002390:	3fe00000 	.word	0x3fe00000
 8002394:	3e75c28f 	.word	0x3e75c28f
 8002398:	40800b78 	.word	0x40800b78
 800239c:	20000866 	.word	0x20000866
 80023a0:	20000870 	.word	0x20000870
 80023a4:	200003a3 	.word	0x200003a3
 80023a8:	40020000 	.word	0x40020000
 80023ac:	20000398 	.word	0x20000398
 80023b0:	3e19999a 	.word	0x3e19999a
 80023b4:	41a00000 	.word	0x41a00000
 80023b8:	20000010 	.word	0x20000010
 80023bc:	40400000 	.word	0x40400000
 80023c0:	40012400 	.word	0x40012400
 80023c4:	200003a4 	.word	0x200003a4
 80023c8:	3eb33333 	.word	0x3eb33333
 80023cc:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <main+0x8d4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	f7fe fc27 	bl	8000c24 <__aeabi_ui2f>
 80023d6:	4651      	mov	r1, sl
 80023d8:	f7fe fc7c 	bl	8000cd4 <__aeabi_fmul>
 80023dc:	4601      	mov	r1, r0
 80023de:	4648      	mov	r0, r9
 80023e0:	f7fe fd2c 	bl	8000e3c <__aeabi_fdiv>
 80023e4:	9b01      	ldr	r3, [sp, #4]
 80023e6:	4681      	mov	r9, r0
 80023e8:	4945      	ldr	r1, [pc, #276]	; (8002500 <main+0x8d8>)
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fc72 	bl	8000cd4 <__aeabi_fmul>
 80023f0:	4601      	mov	r1, r0
 80023f2:	4648      	mov	r0, r9
 80023f4:	f7fe fb64 	bl	8000ac0 <__aeabi_fsub>
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 80023f8:	4629      	mov	r1, r5
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80023fa:	4681      	mov	r9, r0
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 80023fc:	f7fe fe1c 	bl	8001038 <__aeabi_fcmpge>
 8002400:	b900      	cbnz	r0, 8002404 <main+0x7dc>
 8002402:	46a9      	mov	r9, r5
 8002404:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <main+0x8dc>)
 8002406:	f8c3 9000 	str.w	r9, [r3]
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 800240a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800240e:	f8bb 9008 	ldrh.w	r9, [fp, #8]
 8002412:	b280      	uxth	r0, r0
 8002414:	f7fe fc06 	bl	8000c24 <__aeabi_ui2f>
 8002418:	493b      	ldr	r1, [pc, #236]	; (8002508 <main+0x8e0>)
 800241a:	f7fe fc5b 	bl	8000cd4 <__aeabi_fmul>
 800241e:	493b      	ldr	r1, [pc, #236]	; (800250c <main+0x8e4>)
 8002420:	f7fe fc58 	bl	8000cd4 <__aeabi_fmul>
 8002424:	4641      	mov	r1, r8
 8002426:	f7fe fc55 	bl	8000cd4 <__aeabi_fmul>
 800242a:	fa1f f989 	uxth.w	r9, r9
 800242e:	4680      	mov	r8, r0
 8002430:	4648      	mov	r0, r9
 8002432:	f7fe fbf7 	bl	8000c24 <__aeabi_ui2f>
 8002436:	4651      	mov	r1, sl
 8002438:	f7fe fc4c 	bl	8000cd4 <__aeabi_fmul>
 800243c:	4601      	mov	r1, r0
 800243e:	4640      	mov	r0, r8
 8002440:	f7fe fcfc 	bl	8000e3c <__aeabi_fdiv>
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 8002444:	4629      	mov	r1, r5
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 8002446:	4680      	mov	r8, r0
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 8002448:	f7fe fdf6 	bl	8001038 <__aeabi_fcmpge>
 800244c:	b900      	cbnz	r0, 8002450 <main+0x828>
 800244e:	46a8      	mov	r8, r5
 8002450:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <main+0x8e8>)
 8002452:	f8c3 8000 	str.w	r8, [r3]
	  if(chstat_main == 1){
 8002456:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <main+0x8ec>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	f47f ae2a 	bne.w	80020b4 <main+0x48c>
		  if(lin_num > volt_set_main + margin){
 8002460:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <main+0x8f0>)
 8002462:	492e      	ldr	r1, [pc, #184]	; (800251c <main+0x8f4>)
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	4b27      	ldr	r3, [pc, #156]	; (8002504 <main+0x8dc>)
 8002468:	f8d3 8000 	ldr.w	r8, [r3]
 800246c:	f7fe fb2a 	bl	8000ac4 <__addsf3>
 8002470:	4641      	mov	r1, r8
 8002472:	f7fe fdcd 	bl	8001010 <__aeabi_fcmplt>
 8002476:	b970      	cbnz	r0, 8002496 <main+0x86e>
		  else if(lin_num < volt_set_main - margin){
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <main+0x8f0>)
 800247a:	4928      	ldr	r1, [pc, #160]	; (800251c <main+0x8f4>)
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	4b21      	ldr	r3, [pc, #132]	; (8002504 <main+0x8dc>)
 8002480:	f8d3 8000 	ldr.w	r8, [r3]
 8002484:	f7fe fb1c 	bl	8000ac0 <__aeabi_fsub>
 8002488:	4641      	mov	r1, r8
 800248a:	f7fe fddf 	bl	800104c <__aeabi_fcmpgt>
 800248e:	2800      	cmp	r0, #0
 8002490:	f43f ae57 	beq.w	8002142 <main+0x51a>
 8002494:	e644      	b.n	8002120 <main+0x4f8>
			  if(v1 >= 1){
 8002496:	8823      	ldrh	r3, [r4, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	f43f ae4a 	beq.w	8002134 <main+0x50c>
				  v1--;
 80024a0:	8823      	ldrh	r3, [r4, #0]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	8023      	strh	r3, [r4, #0]
 80024a8:	e644      	b.n	8002134 <main+0x50c>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80024aa:	2201      	movs	r2, #1
 80024ac:	2140      	movs	r1, #64	; 0x40
 80024ae:	481c      	ldr	r0, [pc, #112]	; (8002520 <main+0x8f8>)
 80024b0:	f005 ff68 	bl	8008384 <HAL_GPIO_WritePin>
 80024b4:	e69e      	b.n	80021f4 <main+0x5cc>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80024b6:	4602      	mov	r2, r0
 80024b8:	4601      	mov	r1, r0
 80024ba:	4630      	mov	r0, r6
 80024bc:	f005 fbec 	bl	8007c98 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 80024c0:	463a      	mov	r2, r7
 80024c2:	e680      	b.n	80021c6 <main+0x59e>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <main+0x8fc>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	2110      	movs	r1, #16
 80024cc:	4630      	mov	r0, r6
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	f005 fbe2 	bl	8007c98 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80024d4:	2200      	movs	r2, #0
 80024d6:	8823      	ldrh	r3, [r4, #0]
 80024d8:	4630      	mov	r0, r6
 80024da:	4611      	mov	r1, r2
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f005 fbdb 	bl	8007c98 <HAL_DAC_SetValue>
 80024e2:	e677      	b.n	80021d4 <main+0x5ac>
		  v2 = (uint16_t)temp;
 80024e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80024e6:	f7fe fde1 	bl	80010ac <__aeabi_f2uiz>
 80024ea:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <main+0x8fc>)
 80024ec:	b283      	uxth	r3, r0
 80024ee:	8013      	strh	r3, [r2, #0]
 80024f0:	e64d      	b.n	800218e <main+0x566>
		  v2 = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <main+0x8fc>)
 80024f6:	8013      	strh	r3, [r2, #0]
 80024f8:	e649      	b.n	800218e <main+0x566>
 80024fa:	bf00      	nop
 80024fc:	200003a4 	.word	0x200003a4
 8002500:	3eb33333 	.word	0x3eb33333
 8002504:	20000708 	.word	0x20000708
 8002508:	40a00000 	.word	0x40a00000
 800250c:	40400000 	.word	0x40400000
 8002510:	2000075c 	.word	0x2000075c
 8002514:	200003a3 	.word	0x200003a3
 8002518:	2000086c 	.word	0x2000086c
 800251c:	3b03126f 	.word	0x3b03126f
 8002520:	40020000 	.word	0x40020000
 8002524:	20000866 	.word	0x20000866

08002528 <lcd_psu_init>:
void lcd_psu_init(void){
 8002528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800252c:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800252e:	49c7      	ldr	r1, [pc, #796]	; (800284c <lcd_psu_init+0x324>)
void lcd_psu_init(void){
 8002530:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002532:	48c7      	ldr	r0, [pc, #796]	; (8002850 <lcd_psu_init+0x328>)
 8002534:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002536:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002538:	aa03      	add	r2, sp, #12
 800253a:	214e      	movs	r1, #78	; 0x4e
 800253c:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800253e:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002540:	f006 f802 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002544:	2356      	movs	r3, #86	; 0x56
 8002546:	4dc3      	ldr	r5, [pc, #780]	; (8002854 <lcd_psu_init+0x32c>)
	data_l = ((data<<4)&0xf0);
 8002548:	011a      	lsls	r2, r3, #4
 800254a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800254c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002550:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002554:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002558:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800255c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002560:	2304      	movs	r3, #4
 8002562:	214e      	movs	r1, #78	; 0x4e
 8002564:	4638      	mov	r0, r7
 8002566:	aa03      	add	r2, sp, #12
 8002568:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800256a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800256e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002572:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002576:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800257a:	f005 ffe5 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800257e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1e0      	bne.n	8002548 <lcd_psu_init+0x20>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002586:	49b4      	ldr	r1, [pc, #720]	; (8002858 <lcd_psu_init+0x330>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002588:	2304      	movs	r3, #4
 800258a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800258c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800258e:	48b0      	ldr	r0, [pc, #704]	; (8002850 <lcd_psu_init+0x328>)
 8002590:	214e      	movs	r1, #78	; 0x4e
 8002592:	aa03      	add	r2, sp, #12
 8002594:	f005 ffd8 	bl	8008548 <HAL_I2C_Master_Transmit>
 8002598:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 800259a:	2356      	movs	r3, #86	; 0x56
 800259c:	4daf      	ldr	r5, [pc, #700]	; (800285c <lcd_psu_init+0x334>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800259e:	4fac      	ldr	r7, [pc, #688]	; (8002850 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 80025a0:	011a      	lsls	r2, r3, #4
 80025a2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80025a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80025a8:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80025ac:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80025b0:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80025b4:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025b8:	2304      	movs	r3, #4
 80025ba:	214e      	movs	r1, #78	; 0x4e
 80025bc:	4638      	mov	r0, r7
 80025be:	aa03      	add	r2, sp, #12
 80025c0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80025c2:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80025c6:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80025ca:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80025ce:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025d2:	f005 ffb9 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80025d6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1e0      	bne.n	80025a0 <lcd_psu_init+0x78>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80025de:	49a0      	ldr	r1, [pc, #640]	; (8002860 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025e0:	2304      	movs	r3, #4
 80025e2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80025e4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025e6:	489a      	ldr	r0, [pc, #616]	; (8002850 <lcd_psu_init+0x328>)
 80025e8:	214e      	movs	r1, #78	; 0x4e
 80025ea:	aa03      	add	r2, sp, #12
 80025ec:	f005 ffac 	bl	8008548 <HAL_I2C_Master_Transmit>
 80025f0:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80025f2:	233a      	movs	r3, #58	; 0x3a
 80025f4:	4d9b      	ldr	r5, [pc, #620]	; (8002864 <lcd_psu_init+0x33c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025f6:	4f96      	ldr	r7, [pc, #600]	; (8002850 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 80025f8:	011a      	lsls	r2, r3, #4
 80025fa:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80025fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002600:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002604:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002608:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800260c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002610:	2304      	movs	r3, #4
 8002612:	214e      	movs	r1, #78	; 0x4e
 8002614:	4638      	mov	r0, r7
 8002616:	aa03      	add	r2, sp, #12
 8002618:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800261a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800261e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002622:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002626:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800262a:	f005 ff8d 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800262e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1e0      	bne.n	80025f8 <lcd_psu_init+0xd0>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002636:	498c      	ldr	r1, [pc, #560]	; (8002868 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002638:	2304      	movs	r3, #4
 800263a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800263c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800263e:	4884      	ldr	r0, [pc, #528]	; (8002850 <lcd_psu_init+0x328>)
 8002640:	214e      	movs	r1, #78	; 0x4e
 8002642:	aa03      	add	r2, sp, #12
 8002644:	f005 ff80 	bl	8008548 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002648:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 800264a:	2341      	movs	r3, #65	; 0x41
 800264c:	4d87      	ldr	r5, [pc, #540]	; (800286c <lcd_psu_init+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800264e:	4f80      	ldr	r7, [pc, #512]	; (8002850 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 8002650:	011a      	lsls	r2, r3, #4
 8002652:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002658:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800265c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002660:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002664:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002668:	2304      	movs	r3, #4
 800266a:	214e      	movs	r1, #78	; 0x4e
 800266c:	4638      	mov	r0, r7
 800266e:	aa03      	add	r2, sp, #12
 8002670:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002672:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002676:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800267a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800267e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002682:	f005 ff61 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002686:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e0      	bne.n	8002650 <lcd_psu_init+0x128>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800268e:	4972      	ldr	r1, [pc, #456]	; (8002858 <lcd_psu_init+0x330>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002690:	2304      	movs	r3, #4
 8002692:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002694:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002696:	486e      	ldr	r0, [pc, #440]	; (8002850 <lcd_psu_init+0x328>)
 8002698:	214e      	movs	r1, #78	; 0x4e
 800269a:	aa03      	add	r2, sp, #12
 800269c:	f005 ff54 	bl	8008548 <HAL_I2C_Master_Transmit>
 80026a0:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80026a2:	2341      	movs	r3, #65	; 0x41
 80026a4:	4d72      	ldr	r5, [pc, #456]	; (8002870 <lcd_psu_init+0x348>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026a6:	4f6a      	ldr	r7, [pc, #424]	; (8002850 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 80026a8:	011a      	lsls	r2, r3, #4
 80026aa:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80026ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80026b0:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80026b4:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80026b8:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80026bc:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026c0:	2304      	movs	r3, #4
 80026c2:	214e      	movs	r1, #78	; 0x4e
 80026c4:	4638      	mov	r0, r7
 80026c6:	aa03      	add	r2, sp, #12
 80026c8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80026ca:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80026ce:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80026d2:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80026d6:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026da:	f005 ff35 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80026de:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1e0      	bne.n	80026a8 <lcd_psu_init+0x180>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80026e6:	495e      	ldr	r1, [pc, #376]	; (8002860 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026e8:	2304      	movs	r3, #4
 80026ea:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80026ec:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026ee:	4858      	ldr	r0, [pc, #352]	; (8002850 <lcd_psu_init+0x328>)
 80026f0:	214e      	movs	r1, #78	; 0x4e
 80026f2:	aa03      	add	r2, sp, #12
 80026f4:	f005 ff28 	bl	8008548 <HAL_I2C_Master_Transmit>
 80026f8:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80026fa:	233a      	movs	r3, #58	; 0x3a
 80026fc:	4d5d      	ldr	r5, [pc, #372]	; (8002874 <lcd_psu_init+0x34c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026fe:	4f54      	ldr	r7, [pc, #336]	; (8002850 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 8002700:	011a      	lsls	r2, r3, #4
 8002702:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002708:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800270c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002710:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002714:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002718:	2304      	movs	r3, #4
 800271a:	214e      	movs	r1, #78	; 0x4e
 800271c:	4638      	mov	r0, r7
 800271e:	aa03      	add	r2, sp, #12
 8002720:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002722:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002726:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800272a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800272e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002732:	f005 ff09 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002736:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e0      	bne.n	8002700 <lcd_psu_init+0x1d8>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800273e:	494e      	ldr	r1, [pc, #312]	; (8002878 <lcd_psu_init+0x350>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002740:	2304      	movs	r3, #4
 8002742:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002744:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002746:	4842      	ldr	r0, [pc, #264]	; (8002850 <lcd_psu_init+0x328>)
 8002748:	214e      	movs	r1, #78	; 0x4e
 800274a:	aa03      	add	r2, sp, #12
 800274c:	f005 fefc 	bl	8008548 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002750:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002752:	2356      	movs	r3, #86	; 0x56
 8002754:	4d49      	ldr	r5, [pc, #292]	; (800287c <lcd_psu_init+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002756:	4f3e      	ldr	r7, [pc, #248]	; (8002850 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 8002758:	011a      	lsls	r2, r3, #4
 800275a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800275c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002760:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002764:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002768:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800276c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002770:	2304      	movs	r3, #4
 8002772:	214e      	movs	r1, #78	; 0x4e
 8002774:	4638      	mov	r0, r7
 8002776:	aa03      	add	r2, sp, #12
 8002778:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800277a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800277e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002782:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002786:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800278a:	f005 fedd 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800278e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1e0      	bne.n	8002758 <lcd_psu_init+0x230>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002796:	4930      	ldr	r1, [pc, #192]	; (8002858 <lcd_psu_init+0x330>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002798:	2304      	movs	r3, #4
 800279a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800279c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800279e:	482c      	ldr	r0, [pc, #176]	; (8002850 <lcd_psu_init+0x328>)
 80027a0:	214e      	movs	r1, #78	; 0x4e
 80027a2:	aa03      	add	r2, sp, #12
 80027a4:	f005 fed0 	bl	8008548 <HAL_I2C_Master_Transmit>
 80027a8:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80027aa:	2356      	movs	r3, #86	; 0x56
 80027ac:	4d34      	ldr	r5, [pc, #208]	; (8002880 <lcd_psu_init+0x358>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027ae:	4f28      	ldr	r7, [pc, #160]	; (8002850 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 80027b0:	011a      	lsls	r2, r3, #4
 80027b2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80027b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80027b8:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80027bc:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80027c0:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80027c4:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027c8:	2304      	movs	r3, #4
 80027ca:	214e      	movs	r1, #78	; 0x4e
 80027cc:	4638      	mov	r0, r7
 80027ce:	aa03      	add	r2, sp, #12
 80027d0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80027d2:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80027d6:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80027da:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80027de:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027e2:	f005 feb1 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80027e6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1e0      	bne.n	80027b0 <lcd_psu_init+0x288>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80027ee:	491c      	ldr	r1, [pc, #112]	; (8002860 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027f0:	2304      	movs	r3, #4
 80027f2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80027f4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027f6:	4816      	ldr	r0, [pc, #88]	; (8002850 <lcd_psu_init+0x328>)
 80027f8:	214e      	movs	r1, #78	; 0x4e
 80027fa:	aa03      	add	r2, sp, #12
 80027fc:	f005 fea4 	bl	8008548 <HAL_I2C_Master_Transmit>
 8002800:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002802:	233a      	movs	r3, #58	; 0x3a
 8002804:	4d17      	ldr	r5, [pc, #92]	; (8002864 <lcd_psu_init+0x33c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002806:	4f12      	ldr	r7, [pc, #72]	; (8002850 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 8002808:	011a      	lsls	r2, r3, #4
 800280a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800280c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002810:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002814:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002818:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800281c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002820:	2304      	movs	r3, #4
 8002822:	214e      	movs	r1, #78	; 0x4e
 8002824:	4638      	mov	r0, r7
 8002826:	aa03      	add	r2, sp, #12
 8002828:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800282a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800282e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002832:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002836:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800283a:	f005 fe85 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800283e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1e0      	bne.n	8002808 <lcd_psu_init+0x2e0>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002846:	490f      	ldr	r1, [pc, #60]	; (8002884 <lcd_psu_init+0x35c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002848:	2304      	movs	r3, #4
 800284a:	e01d      	b.n	8002888 <lcd_psu_init+0x360>
 800284c:	080c888c 	.word	0x080c888c
 8002850:	200004ec 	.word	0x200004ec
 8002854:	0800f484 	.word	0x0800f484
 8002858:	191d090d 	.word	0x191d090d
 800285c:	0800f490 	.word	0x0800f490
 8002860:	090d090d 	.word	0x090d090d
 8002864:	0800f494 	.word	0x0800f494
 8002868:	080cc8cc 	.word	0x080cc8cc
 800286c:	0800f49c 	.word	0x0800f49c
 8002870:	0800f4a8 	.word	0x0800f4a8
 8002874:	0800f4ac 	.word	0x0800f4ac
 8002878:	484c989c 	.word	0x484c989c
 800287c:	0800f4b4 	.word	0x0800f4b4
 8002880:	0800f4c0 	.word	0x0800f4c0
 8002884:	484cd8dc 	.word	0x484cd8dc
 8002888:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800288a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800288c:	4841      	ldr	r0, [pc, #260]	; (8002994 <lcd_psu_init+0x46c>)
 800288e:	214e      	movs	r1, #78	; 0x4e
 8002890:	aa03      	add	r2, sp, #12
 8002892:	f005 fe59 	bl	8008548 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002896:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002898:	2341      	movs	r3, #65	; 0x41
 800289a:	4d3f      	ldr	r5, [pc, #252]	; (8002998 <lcd_psu_init+0x470>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800289c:	4f3d      	ldr	r7, [pc, #244]	; (8002994 <lcd_psu_init+0x46c>)
	data_l = ((data<<4)&0xf0);
 800289e:	011a      	lsls	r2, r3, #4
 80028a0:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80028a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80028a6:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80028aa:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028ae:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80028b2:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028b6:	2304      	movs	r3, #4
 80028b8:	214e      	movs	r1, #78	; 0x4e
 80028ba:	4638      	mov	r0, r7
 80028bc:	aa03      	add	r2, sp, #12
 80028be:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028c0:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80028c4:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80028c8:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80028cc:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028d0:	f005 fe3a 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80028d4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e0      	bne.n	800289e <lcd_psu_init+0x376>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028dc:	492f      	ldr	r1, [pc, #188]	; (800299c <lcd_psu_init+0x474>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028de:	2304      	movs	r3, #4
 80028e0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028e2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028e4:	482b      	ldr	r0, [pc, #172]	; (8002994 <lcd_psu_init+0x46c>)
 80028e6:	214e      	movs	r1, #78	; 0x4e
 80028e8:	aa03      	add	r2, sp, #12
 80028ea:	f005 fe2d 	bl	8008548 <HAL_I2C_Master_Transmit>
 80028ee:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80028f0:	2341      	movs	r3, #65	; 0x41
 80028f2:	4d2b      	ldr	r5, [pc, #172]	; (80029a0 <lcd_psu_init+0x478>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028f4:	4f27      	ldr	r7, [pc, #156]	; (8002994 <lcd_psu_init+0x46c>)
	data_l = ((data<<4)&0xf0);
 80028f6:	011a      	lsls	r2, r3, #4
 80028f8:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80028fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80028fe:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002902:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002906:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800290a:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800290e:	2304      	movs	r3, #4
 8002910:	214e      	movs	r1, #78	; 0x4e
 8002912:	4638      	mov	r0, r7
 8002914:	aa03      	add	r2, sp, #12
 8002916:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002918:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800291c:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002920:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002924:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002928:	f005 fe0e 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800292c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e0      	bne.n	80028f6 <lcd_psu_init+0x3ce>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002934:	491b      	ldr	r1, [pc, #108]	; (80029a4 <lcd_psu_init+0x47c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002936:	2304      	movs	r3, #4
 8002938:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800293a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800293c:	4815      	ldr	r0, [pc, #84]	; (8002994 <lcd_psu_init+0x46c>)
 800293e:	214e      	movs	r1, #78	; 0x4e
 8002940:	aa03      	add	r2, sp, #12
 8002942:	f005 fe01 	bl	8008548 <HAL_I2C_Master_Transmit>
 8002946:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002948:	233a      	movs	r3, #58	; 0x3a
 800294a:	4c17      	ldr	r4, [pc, #92]	; (80029a8 <lcd_psu_init+0x480>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800294c:	4d11      	ldr	r5, [pc, #68]	; (8002994 <lcd_psu_init+0x46c>)
	data_l = ((data<<4)&0xf0);
 800294e:	011a      	lsls	r2, r3, #4
 8002950:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002956:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800295a:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800295e:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002962:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002966:	2304      	movs	r3, #4
 8002968:	214e      	movs	r1, #78	; 0x4e
 800296a:	4628      	mov	r0, r5
 800296c:	aa03      	add	r2, sp, #12
 800296e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002970:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002974:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002978:	f88d 700e 	strb.w	r7, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800297c:	f88d e00f 	strb.w	lr, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002980:	f005 fde2 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002984:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e0      	bne.n	800294e <lcd_psu_init+0x426>
}
 800298c:	b004      	add	sp, #16
 800298e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002992:	bf00      	nop
 8002994:	200004ec 	.word	0x200004ec
 8002998:	0800f4c4 	.word	0x0800f4c4
 800299c:	191d090d 	.word	0x191d090d
 80029a0:	0800f4d0 	.word	0x0800f4d0
 80029a4:	090d090d 	.word	0x090d090d
 80029a8:	0800f4ac 	.word	0x0800f4ac

080029ac <lcd_update_voltage>:
void lcd_update_voltage(uint8_t channel, float num){
 80029ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ae:	4605      	mov	r5, r0
 80029b0:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.2f", num);
 80029b2:	4608      	mov	r0, r1
 80029b4:	f7fd fd50 	bl	8000458 <__aeabi_f2d>
 80029b8:	4606      	mov	r6, r0
 80029ba:	460f      	mov	r7, r1
 80029bc:	4a9a      	ldr	r2, [pc, #616]	; (8002c28 <lcd_update_voltage+0x27c>)
 80029be:	2106      	movs	r1, #6
 80029c0:	e9cd 6700 	strd	r6, r7, [sp]
 80029c4:	a804      	add	r0, sp, #16
 80029c6:	f00a faa9 	bl	800cf1c <sniprintf>
	if(channel == 1){
 80029ca:	2d01      	cmp	r5, #1
 80029cc:	d009      	beq.n	80029e2 <lcd_update_voltage+0x36>
	else if(channel == 2){
 80029ce:	2d02      	cmp	r5, #2
 80029d0:	f000 80cb 	beq.w	8002b6a <lcd_update_voltage+0x1be>
	else if(channel == 3){
 80029d4:	2d03      	cmp	r5, #3
 80029d6:	f000 8135 	beq.w	8002c44 <lcd_update_voltage+0x298>
	else if(channel == 4){
 80029da:	2d04      	cmp	r5, #4
 80029dc:	d068      	beq.n	8002ab0 <lcd_update_voltage+0x104>
}
 80029de:	b007      	add	sp, #28
 80029e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029e2:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029e4:	4a91      	ldr	r2, [pc, #580]	; (8002c2c <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029e6:	4892      	ldr	r0, [pc, #584]	; (8002c30 <lcd_update_voltage+0x284>)
 80029e8:	ac03      	add	r4, sp, #12
 80029ea:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029ec:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029ee:	214e      	movs	r1, #78	; 0x4e
 80029f0:	4622      	mov	r2, r4
 80029f2:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029f4:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029f6:	f005 fda7 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80029fa:	2320      	movs	r3, #32
 80029fc:	4d8d      	ldr	r5, [pc, #564]	; (8002c34 <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 80029fe:	011a      	lsls	r2, r3, #4
 8002a00:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a06:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a0a:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a0e:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a12:	f043 0309 	orr.w	r3, r3, #9
 8002a16:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a1a:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a1e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a20:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a24:	4622      	mov	r2, r4
 8002a26:	214e      	movs	r1, #78	; 0x4e
 8002a28:	4638      	mov	r0, r7
 8002a2a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a2c:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a30:	f005 fd8a 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a34:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e0      	bne.n	80029fe <lcd_update_voltage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a3c:	4a7b      	ldr	r2, [pc, #492]	; (8002c2c <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a3e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a40:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a42:	214e      	movs	r1, #78	; 0x4e
 8002a44:	4622      	mov	r2, r4
 8002a46:	487a      	ldr	r0, [pc, #488]	; (8002c30 <lcd_update_voltage+0x284>)
 8002a48:	9600      	str	r6, [sp, #0]
 8002a4a:	f005 fd7d 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a4e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002a52:	b30b      	cbz	r3, 8002a98 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a54:	2764      	movs	r7, #100	; 0x64
 8002a56:	4e76      	ldr	r6, [pc, #472]	; (8002c30 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002a58:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002a5a:	011a      	lsls	r2, r3, #4
 8002a5c:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a62:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a66:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a6a:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a6e:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a72:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a74:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a78:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a7c:	4622      	mov	r2, r4
 8002a7e:	214e      	movs	r1, #78	; 0x4e
 8002a80:	4630      	mov	r0, r6
 8002a82:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a84:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a88:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a8c:	f005 fd5c 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a90:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e0      	bne.n	8002a5a <lcd_update_voltage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a98:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a9a:	4867      	ldr	r0, [pc, #412]	; (8002c38 <lcd_update_voltage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a9c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a9e:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	214e      	movs	r1, #78	; 0x4e
 8002aa4:	9500      	str	r5, [sp, #0]
 8002aa6:	4862      	ldr	r0, [pc, #392]	; (8002c30 <lcd_update_voltage+0x284>)
 8002aa8:	f005 fd4e 	bl	8008548 <HAL_I2C_Master_Transmit>
}
 8002aac:	b007      	add	sp, #28
 8002aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ab0:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ab2:	4a62      	ldr	r2, [pc, #392]	; (8002c3c <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ab4:	485e      	ldr	r0, [pc, #376]	; (8002c30 <lcd_update_voltage+0x284>)
 8002ab6:	ac03      	add	r4, sp, #12
 8002ab8:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002aba:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002abc:	214e      	movs	r1, #78	; 0x4e
 8002abe:	4622      	mov	r2, r4
 8002ac0:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ac2:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ac4:	f005 fd40 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002ac8:	2320      	movs	r3, #32
 8002aca:	4d5a      	ldr	r5, [pc, #360]	; (8002c34 <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002acc:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ad2:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002ad6:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ad8:	f043 0309 	orr.w	r3, r3, #9
 8002adc:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ae0:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ae4:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ae8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002aec:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002af0:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002af4:	2304      	movs	r3, #4
 8002af6:	4622      	mov	r2, r4
 8002af8:	214e      	movs	r1, #78	; 0x4e
 8002afa:	4638      	mov	r0, r7
 8002afc:	9600      	str	r6, [sp, #0]
 8002afe:	f005 fd23 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b02:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e0      	bne.n	8002acc <lcd_update_voltage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b0a:	4a4c      	ldr	r2, [pc, #304]	; (8002c3c <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b0c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b0e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b10:	214e      	movs	r1, #78	; 0x4e
 8002b12:	4622      	mov	r2, r4
 8002b14:	4846      	ldr	r0, [pc, #280]	; (8002c30 <lcd_update_voltage+0x284>)
 8002b16:	9600      	str	r6, [sp, #0]
 8002b18:	f005 fd16 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b1c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0b9      	beq.n	8002a98 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b24:	2764      	movs	r7, #100	; 0x64
 8002b26:	4e42      	ldr	r6, [pc, #264]	; (8002c30 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002b28:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002b2a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b30:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002b34:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002b36:	f043 0309 	orr.w	r3, r3, #9
 8002b3a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b3e:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b42:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b46:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b4a:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b4e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b52:	2304      	movs	r3, #4
 8002b54:	4622      	mov	r2, r4
 8002b56:	214e      	movs	r1, #78	; 0x4e
 8002b58:	4630      	mov	r0, r6
 8002b5a:	9700      	str	r7, [sp, #0]
 8002b5c:	f005 fcf4 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b60:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e0      	bne.n	8002b2a <lcd_update_voltage+0x17e>
 8002b68:	e796      	b.n	8002a98 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b6a:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b6c:	4a34      	ldr	r2, [pc, #208]	; (8002c40 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b6e:	4830      	ldr	r0, [pc, #192]	; (8002c30 <lcd_update_voltage+0x284>)
 8002b70:	ac03      	add	r4, sp, #12
 8002b72:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b74:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b76:	214e      	movs	r1, #78	; 0x4e
 8002b78:	4622      	mov	r2, r4
 8002b7a:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b7c:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b7e:	f005 fce3 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b82:	2320      	movs	r3, #32
 8002b84:	4d2b      	ldr	r5, [pc, #172]	; (8002c34 <lcd_update_voltage+0x288>)
	data_u = (data&0xf0);
 8002b86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b8e:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002b92:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b96:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002b9a:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b9e:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ba2:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ba6:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002baa:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002bac:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bb0:	214e      	movs	r1, #78	; 0x4e
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	4638      	mov	r0, r7
 8002bb6:	9600      	str	r6, [sp, #0]
 8002bb8:	f005 fcc6 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002bbc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1e0      	bne.n	8002b86 <lcd_update_voltage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002bc4:	4a1e      	ldr	r2, [pc, #120]	; (8002c40 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bc6:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002bc8:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bca:	214e      	movs	r1, #78	; 0x4e
 8002bcc:	4622      	mov	r2, r4
 8002bce:	4818      	ldr	r0, [pc, #96]	; (8002c30 <lcd_update_voltage+0x284>)
 8002bd0:	9600      	str	r6, [sp, #0]
 8002bd2:	f005 fcb9 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002bd6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f43f af5c 	beq.w	8002a98 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002be0:	2764      	movs	r7, #100	; 0x64
 8002be2:	4e13      	ldr	r6, [pc, #76]	; (8002c30 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002be4:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002be6:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002bec:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002bee:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002bf2:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002bf6:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002bfa:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002bfe:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c02:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c06:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c0a:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c0c:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c10:	4622      	mov	r2, r4
 8002c12:	214e      	movs	r1, #78	; 0x4e
 8002c14:	4630      	mov	r0, r6
 8002c16:	9700      	str	r7, [sp, #0]
 8002c18:	f005 fc96 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c1c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1e0      	bne.n	8002be6 <lcd_update_voltage+0x23a>
 8002c24:	e738      	b.n	8002a98 <lcd_update_voltage+0xec>
 8002c26:	bf00      	nop
 8002c28:	0800f4dc 	.word	0x0800f4dc
 8002c2c:	383c888c 	.word	0x383c888c
 8002c30:	200004ec 	.word	0x200004ec
 8002c34:	0800f4d4 	.word	0x0800f4d4
 8002c38:	696d595d 	.word	0x696d595d
 8002c3c:	282ca8ac 	.word	0x282ca8ac
 8002c40:	e8ec888c 	.word	0xe8ec888c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c44:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c46:	4a2e      	ldr	r2, [pc, #184]	; (8002d00 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c48:	482e      	ldr	r0, [pc, #184]	; (8002d04 <lcd_update_voltage+0x358>)
 8002c4a:	ac03      	add	r4, sp, #12
 8002c4c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c4e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c50:	214e      	movs	r1, #78	; 0x4e
 8002c52:	4622      	mov	r2, r4
 8002c54:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c56:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c58:	f005 fc76 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	4d2a      	ldr	r5, [pc, #168]	; (8002d08 <lcd_update_voltage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8002c60:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c66:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002c6a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c6c:	f043 0309 	orr.w	r3, r3, #9
 8002c70:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c74:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c78:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c7c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c80:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c84:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c88:	2304      	movs	r3, #4
 8002c8a:	4622      	mov	r2, r4
 8002c8c:	214e      	movs	r1, #78	; 0x4e
 8002c8e:	4638      	mov	r0, r7
 8002c90:	9600      	str	r6, [sp, #0]
 8002c92:	f005 fc59 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c96:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e0      	bne.n	8002c60 <lcd_update_voltage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c9e:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ca0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ca2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ca4:	214e      	movs	r1, #78	; 0x4e
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	4816      	ldr	r0, [pc, #88]	; (8002d04 <lcd_update_voltage+0x358>)
 8002caa:	9600      	str	r6, [sp, #0]
 8002cac:	f005 fc4c 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002cb0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f43f aeef 	beq.w	8002a98 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cba:	2764      	movs	r7, #100	; 0x64
 8002cbc:	4e11      	ldr	r6, [pc, #68]	; (8002d04 <lcd_update_voltage+0x358>)
	while (*str) lcd_send_data (*str++);
 8002cbe:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 8002cc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cc8:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ccc:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cd0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002cd4:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002cd8:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002cdc:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ce0:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ce4:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ce6:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cea:	214e      	movs	r1, #78	; 0x4e
 8002cec:	4622      	mov	r2, r4
 8002cee:	4630      	mov	r0, r6
 8002cf0:	9700      	str	r7, [sp, #0]
 8002cf2:	f005 fc29 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002cf6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1e0      	bne.n	8002cc0 <lcd_update_voltage+0x314>
 8002cfe:	e6cb      	b.n	8002a98 <lcd_update_voltage+0xec>
 8002d00:	787c989c 	.word	0x787c989c
 8002d04:	200004ec 	.word	0x200004ec
 8002d08:	0800f4d4 	.word	0x0800f4d4

08002d0c <lcd_update_amperage>:
void lcd_update_amperage(uint8_t channel, float num){
 8002d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d0e:	4605      	mov	r5, r0
 8002d10:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.3f", num);
 8002d12:	4608      	mov	r0, r1
 8002d14:	f7fd fba0 	bl	8000458 <__aeabi_f2d>
 8002d18:	4606      	mov	r6, r0
 8002d1a:	460f      	mov	r7, r1
 8002d1c:	4a9a      	ldr	r2, [pc, #616]	; (8002f88 <lcd_update_amperage+0x27c>)
 8002d1e:	2106      	movs	r1, #6
 8002d20:	e9cd 6700 	strd	r6, r7, [sp]
 8002d24:	a804      	add	r0, sp, #16
 8002d26:	f00a f8f9 	bl	800cf1c <sniprintf>
	if(channel == 1){
 8002d2a:	2d01      	cmp	r5, #1
 8002d2c:	d009      	beq.n	8002d42 <lcd_update_amperage+0x36>
	else if(channel == 2){
 8002d2e:	2d02      	cmp	r5, #2
 8002d30:	f000 80cb 	beq.w	8002eca <lcd_update_amperage+0x1be>
	else if(channel == 3){
 8002d34:	2d03      	cmp	r5, #3
 8002d36:	f000 8135 	beq.w	8002fa4 <lcd_update_amperage+0x298>
	else if(channel == 4){
 8002d3a:	2d04      	cmp	r5, #4
 8002d3c:	d068      	beq.n	8002e10 <lcd_update_amperage+0x104>
}
 8002d3e:	b007      	add	sp, #28
 8002d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d42:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d44:	4a91      	ldr	r2, [pc, #580]	; (8002f8c <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d46:	4892      	ldr	r0, [pc, #584]	; (8002f90 <lcd_update_amperage+0x284>)
 8002d48:	ac03      	add	r4, sp, #12
 8002d4a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d4c:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d4e:	214e      	movs	r1, #78	; 0x4e
 8002d50:	4622      	mov	r2, r4
 8002d52:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d54:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d56:	f005 fbf7 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	4d8d      	ldr	r5, [pc, #564]	; (8002f94 <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002d5e:	011a      	lsls	r2, r3, #4
 8002d60:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d66:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d6a:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d6e:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d72:	f043 0309 	orr.w	r3, r3, #9
 8002d76:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d7a:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d7e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d80:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d84:	4622      	mov	r2, r4
 8002d86:	214e      	movs	r1, #78	; 0x4e
 8002d88:	4638      	mov	r0, r7
 8002d8a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d8c:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d90:	f005 fbda 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d94:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e0      	bne.n	8002d5e <lcd_update_amperage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d9c:	4a7b      	ldr	r2, [pc, #492]	; (8002f8c <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d9e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002da0:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002da2:	214e      	movs	r1, #78	; 0x4e
 8002da4:	4622      	mov	r2, r4
 8002da6:	487a      	ldr	r0, [pc, #488]	; (8002f90 <lcd_update_amperage+0x284>)
 8002da8:	9600      	str	r6, [sp, #0]
 8002daa:	f005 fbcd 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002dae:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002db2:	b30b      	cbz	r3, 8002df8 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002db4:	2764      	movs	r7, #100	; 0x64
 8002db6:	4e76      	ldr	r6, [pc, #472]	; (8002f90 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002db8:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002dba:	011a      	lsls	r2, r3, #4
 8002dbc:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002dc2:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002dc6:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dca:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002dce:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dd2:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002dd4:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002dd8:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ddc:	4622      	mov	r2, r4
 8002dde:	214e      	movs	r1, #78	; 0x4e
 8002de0:	4630      	mov	r0, r6
 8002de2:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002de4:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002de8:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dec:	f005 fbac 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002df0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e0      	bne.n	8002dba <lcd_update_amperage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002df8:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dfa:	4867      	ldr	r0, [pc, #412]	; (8002f98 <lcd_update_amperage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dfc:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dfe:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e00:	4622      	mov	r2, r4
 8002e02:	214e      	movs	r1, #78	; 0x4e
 8002e04:	9500      	str	r5, [sp, #0]
 8002e06:	4862      	ldr	r0, [pc, #392]	; (8002f90 <lcd_update_amperage+0x284>)
 8002e08:	f005 fb9e 	bl	8008548 <HAL_I2C_Master_Transmit>
}
 8002e0c:	b007      	add	sp, #28
 8002e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e10:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e12:	4a62      	ldr	r2, [pc, #392]	; (8002f9c <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e14:	485e      	ldr	r0, [pc, #376]	; (8002f90 <lcd_update_amperage+0x284>)
 8002e16:	ac03      	add	r4, sp, #12
 8002e18:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e1a:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e1c:	214e      	movs	r1, #78	; 0x4e
 8002e1e:	4622      	mov	r2, r4
 8002e20:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e22:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e24:	f005 fb90 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e28:	2320      	movs	r3, #32
 8002e2a:	4d5a      	ldr	r5, [pc, #360]	; (8002f94 <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002e2c:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e32:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002e36:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e38:	f043 0309 	orr.w	r3, r3, #9
 8002e3c:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e40:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e44:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e48:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e4c:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e50:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e54:	2304      	movs	r3, #4
 8002e56:	4622      	mov	r2, r4
 8002e58:	214e      	movs	r1, #78	; 0x4e
 8002e5a:	4638      	mov	r0, r7
 8002e5c:	9600      	str	r6, [sp, #0]
 8002e5e:	f005 fb73 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e62:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1e0      	bne.n	8002e2c <lcd_update_amperage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e6a:	4a4c      	ldr	r2, [pc, #304]	; (8002f9c <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e6c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e6e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e70:	214e      	movs	r1, #78	; 0x4e
 8002e72:	4622      	mov	r2, r4
 8002e74:	4846      	ldr	r0, [pc, #280]	; (8002f90 <lcd_update_amperage+0x284>)
 8002e76:	9600      	str	r6, [sp, #0]
 8002e78:	f005 fb66 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e7c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0b9      	beq.n	8002df8 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e84:	2764      	movs	r7, #100	; 0x64
 8002e86:	4e42      	ldr	r6, [pc, #264]	; (8002f90 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002e88:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002e8a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e90:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002e94:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e96:	f043 0309 	orr.w	r3, r3, #9
 8002e9a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e9e:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ea2:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ea6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002eaa:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002eae:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	4622      	mov	r2, r4
 8002eb6:	214e      	movs	r1, #78	; 0x4e
 8002eb8:	4630      	mov	r0, r6
 8002eba:	9700      	str	r7, [sp, #0]
 8002ebc:	f005 fb44 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002ec0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e0      	bne.n	8002e8a <lcd_update_amperage+0x17e>
 8002ec8:	e796      	b.n	8002df8 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eca:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ecc:	4a34      	ldr	r2, [pc, #208]	; (8002fa0 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ece:	4830      	ldr	r0, [pc, #192]	; (8002f90 <lcd_update_amperage+0x284>)
 8002ed0:	ac03      	add	r4, sp, #12
 8002ed2:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ed4:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ed6:	214e      	movs	r1, #78	; 0x4e
 8002ed8:	4622      	mov	r2, r4
 8002eda:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002edc:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ede:	f005 fb33 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	4d2b      	ldr	r5, [pc, #172]	; (8002f94 <lcd_update_amperage+0x288>)
	data_u = (data&0xf0);
 8002ee6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002eee:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ef2:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ef6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002efa:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002efe:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f02:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f06:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f0a:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f0c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f10:	214e      	movs	r1, #78	; 0x4e
 8002f12:	4622      	mov	r2, r4
 8002f14:	4638      	mov	r0, r7
 8002f16:	9600      	str	r6, [sp, #0]
 8002f18:	f005 fb16 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002f1c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e0      	bne.n	8002ee6 <lcd_update_amperage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f24:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f26:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f28:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f2a:	214e      	movs	r1, #78	; 0x4e
 8002f2c:	4622      	mov	r2, r4
 8002f2e:	4818      	ldr	r0, [pc, #96]	; (8002f90 <lcd_update_amperage+0x284>)
 8002f30:	9600      	str	r6, [sp, #0]
 8002f32:	f005 fb09 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002f36:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f43f af5c 	beq.w	8002df8 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f40:	2764      	movs	r7, #100	; 0x64
 8002f42:	4e13      	ldr	r6, [pc, #76]	; (8002f90 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002f44:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8002f46:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002f4c:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f4e:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f52:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f56:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f5a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f5e:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f62:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f66:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f6a:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f6c:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f70:	4622      	mov	r2, r4
 8002f72:	214e      	movs	r1, #78	; 0x4e
 8002f74:	4630      	mov	r0, r6
 8002f76:	9700      	str	r7, [sp, #0]
 8002f78:	f005 fae6 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002f7c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e0      	bne.n	8002f46 <lcd_update_amperage+0x23a>
 8002f84:	e738      	b.n	8002df8 <lcd_update_amperage+0xec>
 8002f86:	bf00      	nop
 8002f88:	0800f4e4 	.word	0x0800f4e4
 8002f8c:	383cc8cc 	.word	0x383cc8cc
 8002f90:	200004ec 	.word	0x200004ec
 8002f94:	0800f4d4 	.word	0x0800f4d4
 8002f98:	191d494d 	.word	0x191d494d
 8002f9c:	282ce8ec 	.word	0x282ce8ec
 8002fa0:	e8ecc8cc 	.word	0xe8ecc8cc
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fa4:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fa6:	4a2e      	ldr	r2, [pc, #184]	; (8003060 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fa8:	482e      	ldr	r0, [pc, #184]	; (8003064 <lcd_update_amperage+0x358>)
 8002faa:	ac03      	add	r4, sp, #12
 8002fac:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fae:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fb0:	214e      	movs	r1, #78	; 0x4e
 8002fb2:	4622      	mov	r2, r4
 8002fb4:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fb6:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fb8:	f005 fac6 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	4d2a      	ldr	r5, [pc, #168]	; (8003068 <lcd_update_amperage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8002fc0:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fc6:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002fca:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002fcc:	f043 0309 	orr.w	r3, r3, #9
 8002fd0:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fd4:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fd8:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fdc:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fe0:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fe4:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fe8:	2304      	movs	r3, #4
 8002fea:	4622      	mov	r2, r4
 8002fec:	214e      	movs	r1, #78	; 0x4e
 8002fee:	4638      	mov	r0, r7
 8002ff0:	9600      	str	r6, [sp, #0]
 8002ff2:	f005 faa9 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002ff6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e0      	bne.n	8002fc0 <lcd_update_amperage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ffe:	4a18      	ldr	r2, [pc, #96]	; (8003060 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003000:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003002:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003004:	214e      	movs	r1, #78	; 0x4e
 8003006:	4622      	mov	r2, r4
 8003008:	4816      	ldr	r0, [pc, #88]	; (8003064 <lcd_update_amperage+0x358>)
 800300a:	9600      	str	r6, [sp, #0]
 800300c:	f005 fa9c 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003010:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f43f aeef 	beq.w	8002df8 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800301a:	2764      	movs	r7, #100	; 0x64
 800301c:	4e11      	ldr	r6, [pc, #68]	; (8003064 <lcd_update_amperage+0x358>)
	while (*str) lcd_send_data (*str++);
 800301e:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 8003020:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003028:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800302c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003030:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003034:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003038:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800303c:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003040:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003044:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003046:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800304a:	214e      	movs	r1, #78	; 0x4e
 800304c:	4622      	mov	r2, r4
 800304e:	4630      	mov	r0, r6
 8003050:	9700      	str	r7, [sp, #0]
 8003052:	f005 fa79 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003056:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1e0      	bne.n	8003020 <lcd_update_amperage+0x314>
 800305e:	e6cb      	b.n	8002df8 <lcd_update_amperage+0xec>
 8003060:	787cd8dc 	.word	0x787cd8dc
 8003064:	200004ec 	.word	0x200004ec
 8003068:	0800f4d4 	.word	0x0800f4d4

0800306c <lcd_psu_update>:
void lcd_psu_update(void){
 800306c:	b570      	push	{r4, r5, r6, lr}
	if(startmessage){
 800306e:	4bad      	ldr	r3, [pc, #692]	; (8003324 <lcd_psu_update+0x2b8>)
void lcd_psu_update(void){
 8003070:	b084      	sub	sp, #16
	if(startmessage){
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	2a00      	cmp	r2, #0
 8003076:	d144      	bne.n	8003102 <lcd_psu_update+0x96>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003078:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800307a:	49ab      	ldr	r1, [pc, #684]	; (8003328 <lcd_psu_update+0x2bc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800307c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800307e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003080:	48aa      	ldr	r0, [pc, #680]	; (800332c <lcd_psu_update+0x2c0>)
 8003082:	214e      	movs	r1, #78	; 0x4e
 8003084:	aa03      	add	r2, sp, #12
 8003086:	9400      	str	r4, [sp, #0]
 8003088:	f005 fa5e 	bl	8008548 <HAL_I2C_Master_Transmit>
	if(kpenum == WAIT){
 800308c:	4ba8      	ldr	r3, [pc, #672]	; (8003330 <lcd_psu_update+0x2c4>)
 800308e:	781d      	ldrb	r5, [r3, #0]
 8003090:	b165      	cbz	r5, 80030ac <lcd_psu_update+0x40>
	else if(kpenum == V1){
 8003092:	2d01      	cmp	r5, #1
 8003094:	f000 816a 	beq.w	800336c <lcd_psu_update+0x300>
	else if(kpenum == V2){
 8003098:	2d03      	cmp	r5, #3
 800309a:	d037      	beq.n	800310c <lcd_psu_update+0xa0>
	else if(kpenum == A1){
 800309c:	2d02      	cmp	r5, #2
 800309e:	f000 82a9 	beq.w	80035f4 <lcd_psu_update+0x588>
	else if(kpenum == A2){
 80030a2:	2d04      	cmp	r5, #4
 80030a4:	f000 8326 	beq.w	80036f4 <lcd_psu_update+0x688>
}
 80030a8:	b004      	add	sp, #16
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
		lcd_update_voltage(1,volt_set_aux);
 80030ac:	4ba1      	ldr	r3, [pc, #644]	; (8003334 <lcd_psu_update+0x2c8>)
 80030ae:	2001      	movs	r0, #1
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	f7ff fc7b 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 80030b6:	4ba0      	ldr	r3, [pc, #640]	; (8003338 <lcd_psu_update+0x2cc>)
 80030b8:	2001      	movs	r0, #1
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	f7ff fe26 	bl	8002d0c <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 80030c0:	4b9e      	ldr	r3, [pc, #632]	; (800333c <lcd_psu_update+0x2d0>)
 80030c2:	2002      	movs	r0, #2
 80030c4:	6819      	ldr	r1, [r3, #0]
 80030c6:	f7ff fc71 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 80030ca:	4b9d      	ldr	r3, [pc, #628]	; (8003340 <lcd_psu_update+0x2d4>)
 80030cc:	2002      	movs	r0, #2
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	f7ff fe1c 	bl	8002d0c <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 80030d4:	4b9b      	ldr	r3, [pc, #620]	; (8003344 <lcd_psu_update+0x2d8>)
 80030d6:	2003      	movs	r0, #3
 80030d8:	6819      	ldr	r1, [r3, #0]
 80030da:	f7ff fc67 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 80030de:	4b9a      	ldr	r3, [pc, #616]	; (8003348 <lcd_psu_update+0x2dc>)
 80030e0:	2003      	movs	r0, #3
 80030e2:	6819      	ldr	r1, [r3, #0]
 80030e4:	f7ff fe12 	bl	8002d0c <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 80030e8:	4b98      	ldr	r3, [pc, #608]	; (800334c <lcd_psu_update+0x2e0>)
 80030ea:	2004      	movs	r0, #4
 80030ec:	6819      	ldr	r1, [r3, #0]
 80030ee:	f7ff fc5d 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 80030f2:	2004      	movs	r0, #4
 80030f4:	4b96      	ldr	r3, [pc, #600]	; (8003350 <lcd_psu_update+0x2e4>)
 80030f6:	6819      	ldr	r1, [r3, #0]
}
 80030f8:	b004      	add	sp, #16
 80030fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lcd_update_amperage(4,cur_num);
 80030fe:	f7ff be05 	b.w	8002d0c <lcd_update_amperage>
		startmessage = 0;
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]
		lcd_psu_init();
 8003106:	f7ff fa0f 	bl	8002528 <lcd_psu_init>
 800310a:	e7b5      	b.n	8003078 <lcd_psu_update+0xc>
		lcd_update_voltage(1,volt_set_aux);
 800310c:	4b89      	ldr	r3, [pc, #548]	; (8003334 <lcd_psu_update+0x2c8>)
 800310e:	2001      	movs	r0, #1
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	f7ff fc4b 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8003116:	4b88      	ldr	r3, [pc, #544]	; (8003338 <lcd_psu_update+0x2cc>)
 8003118:	2001      	movs	r0, #1
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	f7ff fdf6 	bl	8002d0c <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003120:	4b86      	ldr	r3, [pc, #536]	; (800333c <lcd_psu_update+0x2d0>)
 8003122:	2002      	movs	r0, #2
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	f7ff fc41 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 800312a:	4b85      	ldr	r3, [pc, #532]	; (8003340 <lcd_psu_update+0x2d4>)
 800312c:	2002      	movs	r0, #2
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	f7ff fdec 	bl	8002d0c <lcd_update_amperage>
		lcd_update_amperage(3,amp_set_main);
 8003134:	4b84      	ldr	r3, [pc, #528]	; (8003348 <lcd_psu_update+0x2dc>)
 8003136:	4628      	mov	r0, r5
 8003138:	6819      	ldr	r1, [r3, #0]
 800313a:	f7ff fde7 	bl	8002d0c <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 800313e:	4b83      	ldr	r3, [pc, #524]	; (800334c <lcd_psu_update+0x2e0>)
 8003140:	2004      	movs	r0, #4
 8003142:	6819      	ldr	r1, [r3, #0]
 8003144:	f7ff fc32 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003148:	4b81      	ldr	r3, [pc, #516]	; (8003350 <lcd_psu_update+0x2e4>)
 800314a:	2004      	movs	r0, #4
 800314c:	6819      	ldr	r1, [r3, #0]
 800314e:	f7ff fddd 	bl	8002d0c <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003152:	4980      	ldr	r1, [pc, #512]	; (8003354 <lcd_psu_update+0x2e8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003154:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003156:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003158:	4874      	ldr	r0, [pc, #464]	; (800332c <lcd_psu_update+0x2c0>)
 800315a:	214e      	movs	r1, #78	; 0x4e
 800315c:	aa03      	add	r2, sp, #12
 800315e:	9400      	str	r4, [sp, #0]
 8003160:	f005 f9f2 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003164:	2320      	movs	r3, #32
 8003166:	4d7c      	ldr	r5, [pc, #496]	; (8003358 <lcd_psu_update+0x2ec>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003168:	4e70      	ldr	r6, [pc, #448]	; (800332c <lcd_psu_update+0x2c0>)
	data_l = ((data<<4)&0xf0);
 800316a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800316c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003170:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003174:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003176:	f043 0309 	orr.w	r3, r3, #9
 800317a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800317e:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003182:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003186:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800318a:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800318e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003192:	2304      	movs	r3, #4
 8003194:	214e      	movs	r1, #78	; 0x4e
 8003196:	4630      	mov	r0, r6
 8003198:	9400      	str	r4, [sp, #0]
 800319a:	aa03      	add	r2, sp, #12
 800319c:	f005 f9d4 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80031a0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1e0      	bne.n	800316a <lcd_psu_update+0xfe>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031a8:	496a      	ldr	r1, [pc, #424]	; (8003354 <lcd_psu_update+0x2e8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031aa:	2304      	movs	r3, #4
 80031ac:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031ae:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031b0:	485e      	ldr	r0, [pc, #376]	; (800332c <lcd_psu_update+0x2c0>)
 80031b2:	214e      	movs	r1, #78	; 0x4e
 80031b4:	9400      	str	r4, [sp, #0]
 80031b6:	f005 f9c7 	bl	8008548 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031ba:	4968      	ldr	r1, [pc, #416]	; (800335c <lcd_psu_update+0x2f0>)
		if(keypadarr[0] != 'z'){
 80031bc:	4d68      	ldr	r5, [pc, #416]	; (8003360 <lcd_psu_update+0x2f4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031be:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031c0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031c2:	485a      	ldr	r0, [pc, #360]	; (800332c <lcd_psu_update+0x2c0>)
 80031c4:	214e      	movs	r1, #78	; 0x4e
 80031c6:	aa03      	add	r2, sp, #12
 80031c8:	9400      	str	r4, [sp, #0]
 80031ca:	f005 f9bd 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 80031ce:	782b      	ldrb	r3, [r5, #0]
 80031d0:	2b7a      	cmp	r3, #122	; 0x7a
 80031d2:	d01b      	beq.n	800320c <lcd_psu_update+0x1a0>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031d4:	9400      	str	r4, [sp, #0]
			lcd_send_data(keypadarr[0]);
 80031d6:	782b      	ldrb	r3, [r5, #0]
	data_l = ((data<<4)&0xf0);
 80031d8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80031da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80031de:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80031e0:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80031e4:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80031e8:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80031ec:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80031f0:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80031f4:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80031f8:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80031fc:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003200:	2304      	movs	r3, #4
 8003202:	214e      	movs	r1, #78	; 0x4e
 8003204:	4849      	ldr	r0, [pc, #292]	; (800332c <lcd_psu_update+0x2c0>)
 8003206:	aa03      	add	r2, sp, #12
 8003208:	f005 f99e 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 800320c:	786b      	ldrb	r3, [r5, #1]
 800320e:	2b7a      	cmp	r3, #122	; 0x7a
 8003210:	d01c      	beq.n	800324c <lcd_psu_update+0x1e0>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003212:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[1]);
 8003214:	786b      	ldrb	r3, [r5, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003216:	4845      	ldr	r0, [pc, #276]	; (800332c <lcd_psu_update+0x2c0>)
	data_l = ((data<<4)&0xf0);
 8003218:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800321a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800321e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003222:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003224:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003228:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800322c:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003230:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003234:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003238:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800323c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003240:	2304      	movs	r3, #4
 8003242:	214e      	movs	r1, #78	; 0x4e
 8003244:	aa03      	add	r2, sp, #12
 8003246:	9400      	str	r4, [sp, #0]
 8003248:	f005 f97e 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 800324c:	78ab      	ldrb	r3, [r5, #2]
 800324e:	2b7a      	cmp	r3, #122	; 0x7a
 8003250:	d01c      	beq.n	800328c <lcd_psu_update+0x220>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003252:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[2]);
 8003254:	78ab      	ldrb	r3, [r5, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003256:	4835      	ldr	r0, [pc, #212]	; (800332c <lcd_psu_update+0x2c0>)
	data_l = ((data<<4)&0xf0);
 8003258:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800325a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800325e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003262:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003264:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003268:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800326c:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003270:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003274:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003278:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800327c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003280:	2304      	movs	r3, #4
 8003282:	214e      	movs	r1, #78	; 0x4e
 8003284:	aa03      	add	r2, sp, #12
 8003286:	9400      	str	r4, [sp, #0]
 8003288:	f005 f95e 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 800328c:	78eb      	ldrb	r3, [r5, #3]
 800328e:	2b7a      	cmp	r3, #122	; 0x7a
 8003290:	d01c      	beq.n	80032cc <lcd_psu_update+0x260>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003292:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[3]);
 8003294:	78eb      	ldrb	r3, [r5, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003296:	4825      	ldr	r0, [pc, #148]	; (800332c <lcd_psu_update+0x2c0>)
	data_l = ((data<<4)&0xf0);
 8003298:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800329a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800329e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80032a2:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032a4:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032a8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032ac:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032b0:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032b4:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032b8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032bc:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032c0:	2304      	movs	r3, #4
 80032c2:	214e      	movs	r1, #78	; 0x4e
 80032c4:	aa03      	add	r2, sp, #12
 80032c6:	9400      	str	r4, [sp, #0]
 80032c8:	f005 f93e 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 80032cc:	792b      	ldrb	r3, [r5, #4]
 80032ce:	2b7a      	cmp	r3, #122	; 0x7a
 80032d0:	d01c      	beq.n	800330c <lcd_psu_update+0x2a0>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032d2:	2064      	movs	r0, #100	; 0x64
			lcd_send_data(keypadarr[4]);
 80032d4:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032d6:	9000      	str	r0, [sp, #0]
	data_l = ((data<<4)&0xf0);
 80032d8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80032da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80032de:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032e0:	f043 010d 	orr.w	r1, r3, #13
 80032e4:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032e8:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032ec:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032f0:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032f4:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032f8:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032fc:	2304      	movs	r3, #4
 80032fe:	214e      	movs	r1, #78	; 0x4e
 8003300:	480a      	ldr	r0, [pc, #40]	; (800332c <lcd_psu_update+0x2c0>)
 8003302:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003304:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003308:	f005 f91e 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(encmode){
 800330c:	4b15      	ldr	r3, [pc, #84]	; (8003364 <lcd_psu_update+0x2f8>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	f43f aec9 	beq.w	80030a8 <lcd_psu_update+0x3c>
			lcd_put_cur(2, 3 + encpos);
 8003316:	4b14      	ldr	r3, [pc, #80]	; (8003368 <lcd_psu_update+0x2fc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003318:	aa03      	add	r2, sp, #12
			lcd_put_cur(2, 3 + encpos);
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b25b      	sxtb	r3, r3
            col += 0x94;	//0x80|0x14 for row 3 col 2
 800331e:	3397      	adds	r3, #151	; 0x97
	data_u = (cmd&0xf0);
 8003320:	e12e      	b.n	8003580 <lcd_psu_update+0x514>
 8003322:	bf00      	nop
 8003324:	20000758 	.word	0x20000758
 8003328:	c8cc080c 	.word	0xc8cc080c
 800332c:	200004ec 	.word	0x200004ec
 8003330:	20000705 	.word	0x20000705
 8003334:	20000868 	.word	0x20000868
 8003338:	20000394 	.word	0x20000394
 800333c:	2000070c 	.word	0x2000070c
 8003340:	200003a8 	.word	0x200003a8
 8003344:	2000086c 	.word	0x2000086c
 8003348:	20000398 	.word	0x20000398
 800334c:	20000708 	.word	0x20000708
 8003350:	200003a4 	.word	0x200003a4
 8003354:	787c989c 	.word	0x787c989c
 8003358:	0800f4d4 	.word	0x0800f4d4
 800335c:	f8fc080c 	.word	0xf8fc080c
 8003360:	20000000 	.word	0x20000000
 8003364:	200003ac 	.word	0x200003ac
 8003368:	200003ad 	.word	0x200003ad
		lcd_update_amperage(1,amp_set_aux);
 800336c:	4b93      	ldr	r3, [pc, #588]	; (80035bc <lcd_psu_update+0x550>)
 800336e:	4628      	mov	r0, r5
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	f7ff fccb 	bl	8002d0c <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003376:	4b92      	ldr	r3, [pc, #584]	; (80035c0 <lcd_psu_update+0x554>)
 8003378:	2002      	movs	r0, #2
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	f7ff fb16 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003380:	4b90      	ldr	r3, [pc, #576]	; (80035c4 <lcd_psu_update+0x558>)
 8003382:	2002      	movs	r0, #2
 8003384:	6819      	ldr	r1, [r3, #0]
 8003386:	f7ff fcc1 	bl	8002d0c <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 800338a:	4b8f      	ldr	r3, [pc, #572]	; (80035c8 <lcd_psu_update+0x55c>)
 800338c:	2003      	movs	r0, #3
 800338e:	6819      	ldr	r1, [r3, #0]
 8003390:	f7ff fb0c 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8003394:	4b8d      	ldr	r3, [pc, #564]	; (80035cc <lcd_psu_update+0x560>)
 8003396:	2003      	movs	r0, #3
 8003398:	6819      	ldr	r1, [r3, #0]
 800339a:	f7ff fcb7 	bl	8002d0c <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 800339e:	4b8c      	ldr	r3, [pc, #560]	; (80035d0 <lcd_psu_update+0x564>)
 80033a0:	2004      	movs	r0, #4
 80033a2:	6819      	ldr	r1, [r3, #0]
 80033a4:	f7ff fb02 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 80033a8:	4b8a      	ldr	r3, [pc, #552]	; (80035d4 <lcd_psu_update+0x568>)
 80033aa:	2004      	movs	r0, #4
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	f7ff fcad 	bl	8002d0c <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80033b2:	4989      	ldr	r1, [pc, #548]	; (80035d8 <lcd_psu_update+0x56c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033b4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80033b6:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033b8:	4888      	ldr	r0, [pc, #544]	; (80035dc <lcd_psu_update+0x570>)
 80033ba:	214e      	movs	r1, #78	; 0x4e
 80033bc:	aa03      	add	r2, sp, #12
 80033be:	9400      	str	r4, [sp, #0]
 80033c0:	f005 f8c2 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80033c4:	2320      	movs	r3, #32
 80033c6:	4d86      	ldr	r5, [pc, #536]	; (80035e0 <lcd_psu_update+0x574>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033c8:	4e84      	ldr	r6, [pc, #528]	; (80035dc <lcd_psu_update+0x570>)
	data_u = (data&0xf0);
 80033ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80033d2:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80033d6:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80033da:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80033de:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80033e2:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80033e6:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80033ea:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033ee:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80033f0:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033f4:	214e      	movs	r1, #78	; 0x4e
 80033f6:	4630      	mov	r0, r6
 80033f8:	9400      	str	r4, [sp, #0]
 80033fa:	aa03      	add	r2, sp, #12
 80033fc:	f005 f8a4 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003400:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e0      	bne.n	80033ca <lcd_psu_update+0x35e>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003408:	4973      	ldr	r1, [pc, #460]	; (80035d8 <lcd_psu_update+0x56c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800340a:	2304      	movs	r3, #4
 800340c:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800340e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003410:	4872      	ldr	r0, [pc, #456]	; (80035dc <lcd_psu_update+0x570>)
 8003412:	214e      	movs	r1, #78	; 0x4e
 8003414:	9400      	str	r4, [sp, #0]
 8003416:	f005 f897 	bl	8008548 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800341a:	4972      	ldr	r1, [pc, #456]	; (80035e4 <lcd_psu_update+0x578>)
		if(keypadarr[0] != 'z'){
 800341c:	4d72      	ldr	r5, [pc, #456]	; (80035e8 <lcd_psu_update+0x57c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800341e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003420:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003422:	486e      	ldr	r0, [pc, #440]	; (80035dc <lcd_psu_update+0x570>)
 8003424:	214e      	movs	r1, #78	; 0x4e
 8003426:	aa03      	add	r2, sp, #12
 8003428:	9400      	str	r4, [sp, #0]
 800342a:	f005 f88d 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 800342e:	782b      	ldrb	r3, [r5, #0]
 8003430:	2b7a      	cmp	r3, #122	; 0x7a
 8003432:	d01b      	beq.n	800346c <lcd_psu_update+0x400>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003434:	9400      	str	r4, [sp, #0]
			lcd_send_data(keypadarr[0]);
 8003436:	782b      	ldrb	r3, [r5, #0]
	data_l = ((data<<4)&0xf0);
 8003438:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800343a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800343e:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003440:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003444:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003448:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800344c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003450:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003454:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003458:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800345c:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003460:	2304      	movs	r3, #4
 8003462:	214e      	movs	r1, #78	; 0x4e
 8003464:	485d      	ldr	r0, [pc, #372]	; (80035dc <lcd_psu_update+0x570>)
 8003466:	aa03      	add	r2, sp, #12
 8003468:	f005 f86e 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 800346c:	786b      	ldrb	r3, [r5, #1]
 800346e:	2b7a      	cmp	r3, #122	; 0x7a
 8003470:	d01c      	beq.n	80034ac <lcd_psu_update+0x440>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003472:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[1]);
 8003474:	786b      	ldrb	r3, [r5, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003476:	4859      	ldr	r0, [pc, #356]	; (80035dc <lcd_psu_update+0x570>)
	data_l = ((data<<4)&0xf0);
 8003478:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800347a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800347e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003482:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003484:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003488:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800348c:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003490:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003494:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003498:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800349c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034a0:	2304      	movs	r3, #4
 80034a2:	214e      	movs	r1, #78	; 0x4e
 80034a4:	aa03      	add	r2, sp, #12
 80034a6:	9400      	str	r4, [sp, #0]
 80034a8:	f005 f84e 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 80034ac:	78ab      	ldrb	r3, [r5, #2]
 80034ae:	2b7a      	cmp	r3, #122	; 0x7a
 80034b0:	d01c      	beq.n	80034ec <lcd_psu_update+0x480>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034b2:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[2]);
 80034b4:	78ab      	ldrb	r3, [r5, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034b6:	4849      	ldr	r0, [pc, #292]	; (80035dc <lcd_psu_update+0x570>)
	data_l = ((data<<4)&0xf0);
 80034b8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80034ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034be:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80034c2:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80034c4:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034c8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80034cc:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80034d0:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80034d4:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80034d8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80034dc:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034e0:	2304      	movs	r3, #4
 80034e2:	214e      	movs	r1, #78	; 0x4e
 80034e4:	aa03      	add	r2, sp, #12
 80034e6:	9400      	str	r4, [sp, #0]
 80034e8:	f005 f82e 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 80034ec:	78eb      	ldrb	r3, [r5, #3]
 80034ee:	2b7a      	cmp	r3, #122	; 0x7a
 80034f0:	d01c      	beq.n	800352c <lcd_psu_update+0x4c0>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034f2:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[3]);
 80034f4:	78eb      	ldrb	r3, [r5, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034f6:	4839      	ldr	r0, [pc, #228]	; (80035dc <lcd_psu_update+0x570>)
	data_l = ((data<<4)&0xf0);
 80034f8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80034fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034fe:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003502:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003504:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003508:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800350c:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003510:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003514:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003518:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800351c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003520:	2304      	movs	r3, #4
 8003522:	214e      	movs	r1, #78	; 0x4e
 8003524:	aa03      	add	r2, sp, #12
 8003526:	9400      	str	r4, [sp, #0]
 8003528:	f005 f80e 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 800352c:	792b      	ldrb	r3, [r5, #4]
 800352e:	2b7a      	cmp	r3, #122	; 0x7a
 8003530:	d01c      	beq.n	800356c <lcd_psu_update+0x500>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003532:	2064      	movs	r0, #100	; 0x64
			lcd_send_data(keypadarr[4]);
 8003534:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003536:	9000      	str	r0, [sp, #0]
	data_l = ((data<<4)&0xf0);
 8003538:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800353a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800353e:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003540:	f043 010d 	orr.w	r1, r3, #13
 8003544:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003548:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800354c:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003550:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003554:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003558:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800355c:	2304      	movs	r3, #4
 800355e:	214e      	movs	r1, #78	; 0x4e
 8003560:	481e      	ldr	r0, [pc, #120]	; (80035dc <lcd_psu_update+0x570>)
 8003562:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003564:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003568:	f004 ffee 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(encmode){
 800356c:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <lcd_psu_update+0x580>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	f43f ad99 	beq.w	80030a8 <lcd_psu_update+0x3c>
			lcd_put_cur(0, 3 + encpos);
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <lcd_psu_update+0x584>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003578:	aa03      	add	r2, sp, #12
			lcd_put_cur(0, 3 + encpos);
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b25b      	sxtb	r3, r3
            col += 0x80;
 800357e:	3383      	adds	r3, #131	; 0x83
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003580:	2464      	movs	r4, #100	; 0x64
	data_l = ((cmd<<4)&0xf0);
 8003582:	0119      	lsls	r1, r3, #4
	data_u = (cmd&0xf0);
 8003584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8003588:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800358c:	f043 000c 	orr.w	r0, r3, #12
 8003590:	f88d 000c 	strb.w	r0, [sp, #12]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003594:	f043 0308 	orr.w	r3, r3, #8
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003598:	f041 0008 	orr.w	r0, r1, #8
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800359c:	f041 050c 	orr.w	r5, r1, #12
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80035a0:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80035a4:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035a8:	2304      	movs	r3, #4
 80035aa:	214e      	movs	r1, #78	; 0x4e
 80035ac:	9400      	str	r4, [sp, #0]
 80035ae:	480b      	ldr	r0, [pc, #44]	; (80035dc <lcd_psu_update+0x570>)
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80035b0:	f88d 500e 	strb.w	r5, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035b4:	f004 ffc8 	bl	8008548 <HAL_I2C_Master_Transmit>
}
 80035b8:	b004      	add	sp, #16
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
 80035bc:	20000394 	.word	0x20000394
 80035c0:	2000070c 	.word	0x2000070c
 80035c4:	200003a8 	.word	0x200003a8
 80035c8:	2000086c 	.word	0x2000086c
 80035cc:	20000398 	.word	0x20000398
 80035d0:	20000708 	.word	0x20000708
 80035d4:	200003a4 	.word	0x200003a4
 80035d8:	383c888c 	.word	0x383c888c
 80035dc:	200004ec 	.word	0x200004ec
 80035e0:	0800f4d4 	.word	0x0800f4d4
 80035e4:	f8fc080c 	.word	0xf8fc080c
 80035e8:	20000000 	.word	0x20000000
 80035ec:	200003ac 	.word	0x200003ac
 80035f0:	200003ad 	.word	0x200003ad
		lcd_update_voltage(1,volt_set_aux);
 80035f4:	4bac      	ldr	r3, [pc, #688]	; (80038a8 <lcd_psu_update+0x83c>)
 80035f6:	2001      	movs	r0, #1
 80035f8:	6819      	ldr	r1, [r3, #0]
 80035fa:	f7ff f9d7 	bl	80029ac <lcd_update_voltage>
		lcd_update_voltage(2,lin_num_aux);
 80035fe:	4bab      	ldr	r3, [pc, #684]	; (80038ac <lcd_psu_update+0x840>)
 8003600:	4628      	mov	r0, r5
 8003602:	6819      	ldr	r1, [r3, #0]
 8003604:	f7ff f9d2 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003608:	4ba9      	ldr	r3, [pc, #676]	; (80038b0 <lcd_psu_update+0x844>)
 800360a:	4628      	mov	r0, r5
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	f7ff fb7d 	bl	8002d0c <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003612:	4ba8      	ldr	r3, [pc, #672]	; (80038b4 <lcd_psu_update+0x848>)
 8003614:	2003      	movs	r0, #3
 8003616:	6819      	ldr	r1, [r3, #0]
 8003618:	f7ff f9c8 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 800361c:	4ba6      	ldr	r3, [pc, #664]	; (80038b8 <lcd_psu_update+0x84c>)
 800361e:	2003      	movs	r0, #3
 8003620:	6819      	ldr	r1, [r3, #0]
 8003622:	f7ff fb73 	bl	8002d0c <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003626:	4ba5      	ldr	r3, [pc, #660]	; (80038bc <lcd_psu_update+0x850>)
 8003628:	2004      	movs	r0, #4
 800362a:	6819      	ldr	r1, [r3, #0]
 800362c:	f7ff f9be 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003630:	4ba3      	ldr	r3, [pc, #652]	; (80038c0 <lcd_psu_update+0x854>)
 8003632:	2004      	movs	r0, #4
 8003634:	6819      	ldr	r1, [r3, #0]
 8003636:	f7ff fb69 	bl	8002d0c <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800363a:	49a2      	ldr	r1, [pc, #648]	; (80038c4 <lcd_psu_update+0x858>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800363c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800363e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003640:	48a1      	ldr	r0, [pc, #644]	; (80038c8 <lcd_psu_update+0x85c>)
 8003642:	214e      	movs	r1, #78	; 0x4e
 8003644:	aa03      	add	r2, sp, #12
 8003646:	9400      	str	r4, [sp, #0]
 8003648:	f004 ff7e 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800364c:	2320      	movs	r3, #32
 800364e:	4d9f      	ldr	r5, [pc, #636]	; (80038cc <lcd_psu_update+0x860>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003650:	4e9d      	ldr	r6, [pc, #628]	; (80038c8 <lcd_psu_update+0x85c>)
	data_l = ((data<<4)&0xf0);
 8003652:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003658:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800365c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800365e:	f043 0309 	orr.w	r3, r3, #9
 8003662:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003666:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800366a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800366e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003672:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003676:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800367a:	2304      	movs	r3, #4
 800367c:	214e      	movs	r1, #78	; 0x4e
 800367e:	4630      	mov	r0, r6
 8003680:	9400      	str	r4, [sp, #0]
 8003682:	aa03      	add	r2, sp, #12
 8003684:	f004 ff60 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003688:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e0      	bne.n	8003652 <lcd_psu_update+0x5e6>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003690:	498c      	ldr	r1, [pc, #560]	; (80038c4 <lcd_psu_update+0x858>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003692:	2304      	movs	r3, #4
 8003694:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003696:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003698:	488b      	ldr	r0, [pc, #556]	; (80038c8 <lcd_psu_update+0x85c>)
 800369a:	214e      	movs	r1, #78	; 0x4e
 800369c:	9400      	str	r4, [sp, #0]
 800369e:	f004 ff53 	bl	8008548 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036a2:	498b      	ldr	r1, [pc, #556]	; (80038d0 <lcd_psu_update+0x864>)
		if(keypadarr[0] != 'z'){
 80036a4:	4d8b      	ldr	r5, [pc, #556]	; (80038d4 <lcd_psu_update+0x868>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036a6:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036a8:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036aa:	4887      	ldr	r0, [pc, #540]	; (80038c8 <lcd_psu_update+0x85c>)
 80036ac:	214e      	movs	r1, #78	; 0x4e
 80036ae:	aa03      	add	r2, sp, #12
 80036b0:	9400      	str	r4, [sp, #0]
 80036b2:	f004 ff49 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 80036b6:	782b      	ldrb	r3, [r5, #0]
 80036b8:	2b7a      	cmp	r3, #122	; 0x7a
 80036ba:	f040 8133 	bne.w	8003924 <lcd_psu_update+0x8b8>
		if(keypadarr[1] != 'z'){
 80036be:	786b      	ldrb	r3, [r5, #1]
 80036c0:	2b7a      	cmp	r3, #122	; 0x7a
 80036c2:	f040 8111 	bne.w	80038e8 <lcd_psu_update+0x87c>
		if(keypadarr[2] != 'z'){
 80036c6:	78ab      	ldrb	r3, [r5, #2]
 80036c8:	2b7a      	cmp	r3, #122	; 0x7a
 80036ca:	f040 80cf 	bne.w	800386c <lcd_psu_update+0x800>
		if(keypadarr[3] != 'z'){
 80036ce:	78eb      	ldrb	r3, [r5, #3]
 80036d0:	2b7a      	cmp	r3, #122	; 0x7a
 80036d2:	f040 80ad 	bne.w	8003830 <lcd_psu_update+0x7c4>
		if(keypadarr[4] != 'z'){
 80036d6:	792b      	ldrb	r3, [r5, #4]
 80036d8:	2b7a      	cmp	r3, #122	; 0x7a
 80036da:	f040 808b 	bne.w	80037f4 <lcd_psu_update+0x788>
		if(encmode){
 80036de:	4b7e      	ldr	r3, [pc, #504]	; (80038d8 <lcd_psu_update+0x86c>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f43f ace0 	beq.w	80030a8 <lcd_psu_update+0x3c>
			lcd_put_cur(1, 3 + encpos);
 80036e8:	4b7c      	ldr	r3, [pc, #496]	; (80038dc <lcd_psu_update+0x870>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036ea:	aa03      	add	r2, sp, #12
			lcd_put_cur(1, 3 + encpos);
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	b25b      	sxtb	r3, r3
            col += 0xC0;  //C0
 80036f0:	33c3      	adds	r3, #195	; 0xc3
	data_u = (cmd&0xf0);
 80036f2:	e745      	b.n	8003580 <lcd_psu_update+0x514>
		lcd_update_voltage(1,volt_set_aux);
 80036f4:	4b6c      	ldr	r3, [pc, #432]	; (80038a8 <lcd_psu_update+0x83c>)
 80036f6:	2001      	movs	r0, #1
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	f7ff f957 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 80036fe:	4b78      	ldr	r3, [pc, #480]	; (80038e0 <lcd_psu_update+0x874>)
 8003700:	2001      	movs	r0, #1
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	f7ff fb02 	bl	8002d0c <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003708:	4b68      	ldr	r3, [pc, #416]	; (80038ac <lcd_psu_update+0x840>)
 800370a:	2002      	movs	r0, #2
 800370c:	6819      	ldr	r1, [r3, #0]
 800370e:	f7ff f94d 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003712:	4b67      	ldr	r3, [pc, #412]	; (80038b0 <lcd_psu_update+0x844>)
 8003714:	2002      	movs	r0, #2
 8003716:	6819      	ldr	r1, [r3, #0]
 8003718:	f7ff faf8 	bl	8002d0c <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 800371c:	4b65      	ldr	r3, [pc, #404]	; (80038b4 <lcd_psu_update+0x848>)
 800371e:	2003      	movs	r0, #3
 8003720:	6819      	ldr	r1, [r3, #0]
 8003722:	f7ff f943 	bl	80029ac <lcd_update_voltage>
		lcd_update_voltage(4,lin_num);
 8003726:	4b65      	ldr	r3, [pc, #404]	; (80038bc <lcd_psu_update+0x850>)
 8003728:	4628      	mov	r0, r5
 800372a:	6819      	ldr	r1, [r3, #0]
 800372c:	f7ff f93e 	bl	80029ac <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003730:	4b63      	ldr	r3, [pc, #396]	; (80038c0 <lcd_psu_update+0x854>)
 8003732:	4628      	mov	r0, r5
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	f7ff fae9 	bl	8002d0c <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800373a:	496a      	ldr	r1, [pc, #424]	; (80038e4 <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800373c:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800373e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003740:	4861      	ldr	r0, [pc, #388]	; (80038c8 <lcd_psu_update+0x85c>)
 8003742:	214e      	movs	r1, #78	; 0x4e
 8003744:	aa03      	add	r2, sp, #12
 8003746:	9400      	str	r4, [sp, #0]
 8003748:	f004 fefe 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800374c:	2320      	movs	r3, #32
 800374e:	4d5f      	ldr	r5, [pc, #380]	; (80038cc <lcd_psu_update+0x860>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003750:	4e5d      	ldr	r6, [pc, #372]	; (80038c8 <lcd_psu_update+0x85c>)
	data_l = ((data<<4)&0xf0);
 8003752:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003758:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800375c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800375e:	f043 0309 	orr.w	r3, r3, #9
 8003762:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003766:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800376a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800376e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003772:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003776:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800377a:	2304      	movs	r3, #4
 800377c:	214e      	movs	r1, #78	; 0x4e
 800377e:	4630      	mov	r0, r6
 8003780:	9400      	str	r4, [sp, #0]
 8003782:	aa03      	add	r2, sp, #12
 8003784:	f004 fee0 	bl	8008548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003788:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e0      	bne.n	8003752 <lcd_psu_update+0x6e6>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003790:	4954      	ldr	r1, [pc, #336]	; (80038e4 <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003792:	2304      	movs	r3, #4
 8003794:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003796:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003798:	484b      	ldr	r0, [pc, #300]	; (80038c8 <lcd_psu_update+0x85c>)
 800379a:	214e      	movs	r1, #78	; 0x4e
 800379c:	9400      	str	r4, [sp, #0]
 800379e:	f004 fed3 	bl	8008548 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80037a2:	494b      	ldr	r1, [pc, #300]	; (80038d0 <lcd_psu_update+0x864>)
		if(keypadarr[0] != 'z'){
 80037a4:	4d4b      	ldr	r5, [pc, #300]	; (80038d4 <lcd_psu_update+0x868>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037a6:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80037a8:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037aa:	4847      	ldr	r0, [pc, #284]	; (80038c8 <lcd_psu_update+0x85c>)
 80037ac:	214e      	movs	r1, #78	; 0x4e
 80037ae:	aa03      	add	r2, sp, #12
 80037b0:	9400      	str	r4, [sp, #0]
 80037b2:	f004 fec9 	bl	8008548 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 80037b6:	782b      	ldrb	r3, [r5, #0]
 80037b8:	2b7a      	cmp	r3, #122	; 0x7a
 80037ba:	f040 80ee 	bne.w	800399a <lcd_psu_update+0x92e>
		if(keypadarr[1] != 'z'){
 80037be:	786b      	ldrb	r3, [r5, #1]
 80037c0:	2b7a      	cmp	r3, #122	; 0x7a
 80037c2:	f040 80cc 	bne.w	800395e <lcd_psu_update+0x8f2>
		if(keypadarr[2] != 'z'){
 80037c6:	78ab      	ldrb	r3, [r5, #2]
 80037c8:	2b7a      	cmp	r3, #122	; 0x7a
 80037ca:	f040 813f 	bne.w	8003a4c <lcd_psu_update+0x9e0>
		if(keypadarr[3] != 'z'){
 80037ce:	78eb      	ldrb	r3, [r5, #3]
 80037d0:	2b7a      	cmp	r3, #122	; 0x7a
 80037d2:	f040 811d 	bne.w	8003a10 <lcd_psu_update+0x9a4>
		if(keypadarr[4] != 'z'){
 80037d6:	792b      	ldrb	r3, [r5, #4]
 80037d8:	2b7a      	cmp	r3, #122	; 0x7a
 80037da:	f040 80fb 	bne.w	80039d4 <lcd_psu_update+0x968>
		if(encmode){
 80037de:	4b3e      	ldr	r3, [pc, #248]	; (80038d8 <lcd_psu_update+0x86c>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f43f ac60 	beq.w	80030a8 <lcd_psu_update+0x3c>
			lcd_put_cur(3, 3 + encpos);
 80037e8:	4b3c      	ldr	r3, [pc, #240]	; (80038dc <lcd_psu_update+0x870>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037ea:	aa03      	add	r2, sp, #12
			lcd_put_cur(3, 3 + encpos);
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	b25b      	sxtb	r3, r3
            col += 0xD4;
 80037f0:	33d7      	adds	r3, #215	; 0xd7
 80037f2:	e6c5      	b.n	8003580 <lcd_psu_update+0x514>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037f4:	2064      	movs	r0, #100	; 0x64
			lcd_send_data(keypadarr[4]);
 80037f6:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037f8:	9000      	str	r0, [sp, #0]
	data_l = ((data<<4)&0xf0);
 80037fa:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80037fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003800:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003802:	f043 010d 	orr.w	r1, r3, #13
 8003806:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800380a:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800380e:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003812:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003816:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800381a:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800381e:	2304      	movs	r3, #4
 8003820:	214e      	movs	r1, #78	; 0x4e
 8003822:	aa03      	add	r2, sp, #12
 8003824:	4828      	ldr	r0, [pc, #160]	; (80038c8 <lcd_psu_update+0x85c>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003826:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800382a:	f004 fe8d 	bl	8008548 <HAL_I2C_Master_Transmit>
}
 800382e:	e756      	b.n	80036de <lcd_psu_update+0x672>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003830:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[3]);
 8003832:	78eb      	ldrb	r3, [r5, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003834:	4824      	ldr	r0, [pc, #144]	; (80038c8 <lcd_psu_update+0x85c>)
	data_l = ((data<<4)&0xf0);
 8003836:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800383c:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003840:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003842:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003846:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800384a:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800384e:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003852:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003856:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800385a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800385e:	2304      	movs	r3, #4
 8003860:	214e      	movs	r1, #78	; 0x4e
 8003862:	aa03      	add	r2, sp, #12
 8003864:	9400      	str	r4, [sp, #0]
 8003866:	f004 fe6f 	bl	8008548 <HAL_I2C_Master_Transmit>
}
 800386a:	e734      	b.n	80036d6 <lcd_psu_update+0x66a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800386c:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[2]);
 800386e:	78ab      	ldrb	r3, [r5, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003870:	4815      	ldr	r0, [pc, #84]	; (80038c8 <lcd_psu_update+0x85c>)
	data_l = ((data<<4)&0xf0);
 8003872:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003878:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800387c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800387e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003882:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003886:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800388a:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800388e:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003892:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003896:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800389a:	2304      	movs	r3, #4
 800389c:	214e      	movs	r1, #78	; 0x4e
 800389e:	aa03      	add	r2, sp, #12
 80038a0:	9400      	str	r4, [sp, #0]
 80038a2:	f004 fe51 	bl	8008548 <HAL_I2C_Master_Transmit>
}
 80038a6:	e712      	b.n	80036ce <lcd_psu_update+0x662>
 80038a8:	20000868 	.word	0x20000868
 80038ac:	2000070c 	.word	0x2000070c
 80038b0:	200003a8 	.word	0x200003a8
 80038b4:	2000086c 	.word	0x2000086c
 80038b8:	20000398 	.word	0x20000398
 80038bc:	20000708 	.word	0x20000708
 80038c0:	200003a4 	.word	0x200003a4
 80038c4:	383cc8cc 	.word	0x383cc8cc
 80038c8:	200004ec 	.word	0x200004ec
 80038cc:	0800f4d4 	.word	0x0800f4d4
 80038d0:	f8fc080c 	.word	0xf8fc080c
 80038d4:	20000000 	.word	0x20000000
 80038d8:	200003ac 	.word	0x200003ac
 80038dc:	200003ad 	.word	0x200003ad
 80038e0:	20000394 	.word	0x20000394
 80038e4:	787cd8dc 	.word	0x787cd8dc
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038e8:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[1]);
 80038ea:	786b      	ldrb	r3, [r5, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038ec:	4866      	ldr	r0, [pc, #408]	; (8003a88 <lcd_psu_update+0xa1c>)
	data_l = ((data<<4)&0xf0);
 80038ee:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80038f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80038f4:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80038f8:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80038fa:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80038fe:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003902:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003906:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800390a:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800390e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003912:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003916:	2304      	movs	r3, #4
 8003918:	214e      	movs	r1, #78	; 0x4e
 800391a:	aa03      	add	r2, sp, #12
 800391c:	9400      	str	r4, [sp, #0]
 800391e:	f004 fe13 	bl	8008548 <HAL_I2C_Master_Transmit>
}
 8003922:	e6d0      	b.n	80036c6 <lcd_psu_update+0x65a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003924:	9400      	str	r4, [sp, #0]
			lcd_send_data(keypadarr[0]);
 8003926:	782b      	ldrb	r3, [r5, #0]
	data_l = ((data<<4)&0xf0);
 8003928:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800392a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800392e:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003930:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003934:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003938:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800393c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003940:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003944:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003948:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800394c:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003950:	2304      	movs	r3, #4
 8003952:	214e      	movs	r1, #78	; 0x4e
 8003954:	aa03      	add	r2, sp, #12
 8003956:	484c      	ldr	r0, [pc, #304]	; (8003a88 <lcd_psu_update+0xa1c>)
 8003958:	f004 fdf6 	bl	8008548 <HAL_I2C_Master_Transmit>
}
 800395c:	e6af      	b.n	80036be <lcd_psu_update+0x652>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800395e:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[1]);
 8003960:	786b      	ldrb	r3, [r5, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003962:	4849      	ldr	r0, [pc, #292]	; (8003a88 <lcd_psu_update+0xa1c>)
	data_l = ((data<<4)&0xf0);
 8003964:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800396a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800396e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003970:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003974:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003978:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800397c:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003980:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003984:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003988:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800398c:	2304      	movs	r3, #4
 800398e:	214e      	movs	r1, #78	; 0x4e
 8003990:	aa03      	add	r2, sp, #12
 8003992:	9400      	str	r4, [sp, #0]
 8003994:	f004 fdd8 	bl	8008548 <HAL_I2C_Master_Transmit>
}
 8003998:	e715      	b.n	80037c6 <lcd_psu_update+0x75a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800399a:	9400      	str	r4, [sp, #0]
			lcd_send_data(keypadarr[0]);
 800399c:	782b      	ldrb	r3, [r5, #0]
	data_l = ((data<<4)&0xf0);
 800399e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80039a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80039a4:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80039a6:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80039aa:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80039ae:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80039b2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80039b6:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80039ba:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80039be:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80039c2:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039c6:	2304      	movs	r3, #4
 80039c8:	214e      	movs	r1, #78	; 0x4e
 80039ca:	aa03      	add	r2, sp, #12
 80039cc:	482e      	ldr	r0, [pc, #184]	; (8003a88 <lcd_psu_update+0xa1c>)
 80039ce:	f004 fdbb 	bl	8008548 <HAL_I2C_Master_Transmit>
}
 80039d2:	e6f4      	b.n	80037be <lcd_psu_update+0x752>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039d4:	2064      	movs	r0, #100	; 0x64
			lcd_send_data(keypadarr[4]);
 80039d6:	792b      	ldrb	r3, [r5, #4]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039d8:	9000      	str	r0, [sp, #0]
	data_l = ((data<<4)&0xf0);
 80039da:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80039dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80039e0:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80039e2:	f043 010d 	orr.w	r1, r3, #13
 80039e6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80039ea:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80039ee:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80039f2:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80039f6:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80039fa:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039fe:	2304      	movs	r3, #4
 8003a00:	214e      	movs	r1, #78	; 0x4e
 8003a02:	aa03      	add	r2, sp, #12
 8003a04:	4820      	ldr	r0, [pc, #128]	; (8003a88 <lcd_psu_update+0xa1c>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a06:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a0a:	f004 fd9d 	bl	8008548 <HAL_I2C_Master_Transmit>
}
 8003a0e:	e6e6      	b.n	80037de <lcd_psu_update+0x772>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a10:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[3]);
 8003a12:	78eb      	ldrb	r3, [r5, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a14:	481c      	ldr	r0, [pc, #112]	; (8003a88 <lcd_psu_update+0xa1c>)
	data_l = ((data<<4)&0xf0);
 8003a16:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a1c:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003a20:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a22:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a26:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a2a:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a2e:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a32:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a36:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a3a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a3e:	2304      	movs	r3, #4
 8003a40:	214e      	movs	r1, #78	; 0x4e
 8003a42:	aa03      	add	r2, sp, #12
 8003a44:	9400      	str	r4, [sp, #0]
 8003a46:	f004 fd7f 	bl	8008548 <HAL_I2C_Master_Transmit>
}
 8003a4a:	e6c4      	b.n	80037d6 <lcd_psu_update+0x76a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a4c:	2464      	movs	r4, #100	; 0x64
			lcd_send_data(keypadarr[2]);
 8003a4e:	78ab      	ldrb	r3, [r5, #2]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a50:	480d      	ldr	r0, [pc, #52]	; (8003a88 <lcd_psu_update+0xa1c>)
	data_l = ((data<<4)&0xf0);
 8003a52:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a58:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003a5c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a5e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a62:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a66:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a6a:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a6e:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a72:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a76:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	214e      	movs	r1, #78	; 0x4e
 8003a7e:	aa03      	add	r2, sp, #12
 8003a80:	9400      	str	r4, [sp, #0]
 8003a82:	f004 fd61 	bl	8008548 <HAL_I2C_Master_Transmit>
}
 8003a86:	e6a2      	b.n	80037ce <lcd_psu_update+0x762>
 8003a88:	200004ec 	.word	0x200004ec

08003a8c <translate_keypad>:
float translate_keypad(void){
 8003a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if(keypadarr[i] == '.'){
 8003a90:	4ca6      	ldr	r4, [pc, #664]	; (8003d2c <translate_keypad+0x2a0>)
 8003a92:	7823      	ldrb	r3, [r4, #0]
 8003a94:	7861      	ldrb	r1, [r4, #1]
 8003a96:	3b2e      	subs	r3, #46	; 0x2e
 8003a98:	78a2      	ldrb	r2, [r4, #2]
 8003a9a:	bf18      	it	ne
 8003a9c:	f04f 33ff 	movne.w	r3, #4294967295
	for(int i = 0; i < keypadlength; i++){
 8003aa0:	292e      	cmp	r1, #46	; 0x2e
 8003aa2:	bf08      	it	eq
 8003aa4:	2301      	moveq	r3, #1
		if(keypadarr[i] == '.'){
 8003aa6:	2a2e      	cmp	r2, #46	; 0x2e
 8003aa8:	f000 8103 	beq.w	8003cb2 <translate_keypad+0x226>
 8003aac:	78e2      	ldrb	r2, [r4, #3]
 8003aae:	2a2e      	cmp	r2, #46	; 0x2e
 8003ab0:	d018      	beq.n	8003ae4 <translate_keypad+0x58>
 8003ab2:	7922      	ldrb	r2, [r4, #4]
 8003ab4:	2a2e      	cmp	r2, #46	; 0x2e
 8003ab6:	f000 816b 	beq.w	8003d90 <translate_keypad+0x304>
	if(decimallocation == -1){
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	f040 816a 	bne.w	8003d94 <translate_keypad+0x308>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003ac0:	7923      	ldrb	r3, [r4, #4]
 8003ac2:	2b2f      	cmp	r3, #47	; 0x2f
 8003ac4:	f240 80a5 	bls.w	8003c12 <translate_keypad+0x186>
 8003ac8:	7923      	ldrb	r3, [r4, #4]
 8003aca:	2b39      	cmp	r3, #57	; 0x39
 8003acc:	f200 80a1 	bhi.w	8003c12 <translate_keypad+0x186>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003ad0:	7920      	ldrb	r0, [r4, #4]
				count = count * 10;
 8003ad2:	260a      	movs	r6, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003ad4:	3830      	subs	r0, #48	; 0x30
 8003ad6:	f7fd f8a9 	bl	8000c2c <__aeabi_i2f>
 8003ada:	2100      	movs	r1, #0
 8003adc:	f7fc fff2 	bl	8000ac4 <__addsf3>
 8003ae0:	4605      	mov	r5, r0
				count = count * 10;
 8003ae2:	e098      	b.n	8003c16 <translate_keypad+0x18a>
		if(keypadarr[i] == '.'){
 8003ae4:	7923      	ldrb	r3, [r4, #4]
	for(int i = 0; i < keypadlength; i++){
 8003ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ae8:	bf0c      	ite	eq
 8003aea:	2704      	moveq	r7, #4
 8003aec:	2703      	movne	r7, #3
		for(int i = decimallocation-1; i >=0; i--){
 8003aee:	1e7e      	subs	r6, r7, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003af0:	5da3      	ldrb	r3, [r4, r6]
 8003af2:	2b2f      	cmp	r3, #47	; 0x2f
 8003af4:	d903      	bls.n	8003afe <translate_keypad+0x72>
 8003af6:	5da3      	ldrb	r3, [r4, r6]
 8003af8:	2b39      	cmp	r3, #57	; 0x39
 8003afa:	f240 80fb 	bls.w	8003cf4 <translate_keypad+0x268>
		int count = 1;
 8003afe:	f04f 0801 	mov.w	r8, #1
	float num = 0;
 8003b02:	2500      	movs	r5, #0
		for(int i = decimallocation-1; i >=0; i--){
 8003b04:	1e73      	subs	r3, r6, #1
 8003b06:	2e00      	cmp	r6, #0
 8003b08:	f000 80e2 	beq.w	8003cd0 <translate_keypad+0x244>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003b0c:	5ce2      	ldrb	r2, [r4, r3]
 8003b0e:	2a2f      	cmp	r2, #47	; 0x2f
 8003b10:	d903      	bls.n	8003b1a <translate_keypad+0x8e>
 8003b12:	5ce2      	ldrb	r2, [r4, r3]
 8003b14:	2a39      	cmp	r2, #57	; 0x39
 8003b16:	f240 80f8 	bls.w	8003d0a <translate_keypad+0x27e>
		for(int i = decimallocation-1; i >=0; i--){
 8003b1a:	2e01      	cmp	r6, #1
 8003b1c:	f1a6 0902 	sub.w	r9, r6, #2
 8003b20:	f000 80d6 	beq.w	8003cd0 <translate_keypad+0x244>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003b24:	f814 3009 	ldrb.w	r3, [r4, r9]
 8003b28:	2b2f      	cmp	r3, #47	; 0x2f
 8003b2a:	d913      	bls.n	8003b54 <translate_keypad+0xc8>
 8003b2c:	f814 3009 	ldrb.w	r3, [r4, r9]
 8003b30:	2b39      	cmp	r3, #57	; 0x39
 8003b32:	d80f      	bhi.n	8003b54 <translate_keypad+0xc8>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003b34:	f814 0009 	ldrb.w	r0, [r4, r9]
 8003b38:	3830      	subs	r0, #48	; 0x30
 8003b3a:	fb08 f000 	mul.w	r0, r8, r0
 8003b3e:	f7fd f875 	bl	8000c2c <__aeabi_i2f>
 8003b42:	4601      	mov	r1, r0
 8003b44:	4628      	mov	r0, r5
 8003b46:	f7fc ffbd 	bl	8000ac4 <__addsf3>
 8003b4a:	4605      	mov	r5, r0
				count = count * 10;
 8003b4c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8003b50:	ea4f 0848 	mov.w	r8, r8, lsl #1
		for(int i = decimallocation-1; i >=0; i--){
 8003b54:	f1b9 0f00 	cmp.w	r9, #0
 8003b58:	f000 80ba 	beq.w	8003cd0 <translate_keypad+0x244>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003b5c:	7823      	ldrb	r3, [r4, #0]
 8003b5e:	2b2f      	cmp	r3, #47	; 0x2f
 8003b60:	f200 80b8 	bhi.w	8003cd4 <translate_keypad+0x248>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003b64:	2f04      	cmp	r7, #4
 8003b66:	f107 0601 	add.w	r6, r7, #1
 8003b6a:	d04f      	beq.n	8003c0c <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003b6c:	5da3      	ldrb	r3, [r4, r6]
 8003b6e:	2b2f      	cmp	r3, #47	; 0x2f
 8003b70:	d903      	bls.n	8003b7a <translate_keypad+0xee>
 8003b72:	5da3      	ldrb	r3, [r4, r6]
 8003b74:	2b39      	cmp	r3, #57	; 0x39
 8003b76:	f240 80fa 	bls.w	8003d6e <translate_keypad+0x2e2>
 8003b7a:	f04f 080a 	mov.w	r8, #10
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003b7e:	2e04      	cmp	r6, #4
 8003b80:	f106 0701 	add.w	r7, r6, #1
 8003b84:	d042      	beq.n	8003c0c <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003b86:	5de3      	ldrb	r3, [r4, r7]
 8003b88:	2b2f      	cmp	r3, #47	; 0x2f
 8003b8a:	d903      	bls.n	8003b94 <translate_keypad+0x108>
 8003b8c:	5de3      	ldrb	r3, [r4, r7]
 8003b8e:	2b39      	cmp	r3, #57	; 0x39
 8003b90:	f240 80d0 	bls.w	8003d34 <translate_keypad+0x2a8>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003b94:	2f04      	cmp	r7, #4
 8003b96:	f107 0601 	add.w	r6, r7, #1
 8003b9a:	d037      	beq.n	8003c0c <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003b9c:	5da3      	ldrb	r3, [r4, r6]
 8003b9e:	2b2f      	cmp	r3, #47	; 0x2f
 8003ba0:	d919      	bls.n	8003bd6 <translate_keypad+0x14a>
 8003ba2:	5da3      	ldrb	r3, [r4, r6]
 8003ba4:	2b39      	cmp	r3, #57	; 0x39
 8003ba6:	d816      	bhi.n	8003bd6 <translate_keypad+0x14a>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003ba8:	5da0      	ldrb	r0, [r4, r6]
 8003baa:	f7fd f83f 	bl	8000c2c <__aeabi_i2f>
 8003bae:	4960      	ldr	r1, [pc, #384]	; (8003d30 <translate_keypad+0x2a4>)
 8003bb0:	f7fc ff86 	bl	8000ac0 <__aeabi_fsub>
 8003bb4:	4607      	mov	r7, r0
 8003bb6:	4640      	mov	r0, r8
 8003bb8:	f7fd f838 	bl	8000c2c <__aeabi_i2f>
 8003bbc:	4601      	mov	r1, r0
 8003bbe:	4638      	mov	r0, r7
 8003bc0:	f7fd f93c 	bl	8000e3c <__aeabi_fdiv>
 8003bc4:	4601      	mov	r1, r0
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	f7fc ff7c 	bl	8000ac4 <__addsf3>
 8003bcc:	4605      	mov	r5, r0
				count = count * 10;
 8003bce:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8003bd2:	ea4f 0848 	mov.w	r8, r8, lsl #1
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003bd6:	2e03      	cmp	r6, #3
 8003bd8:	d118      	bne.n	8003c0c <translate_keypad+0x180>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003bda:	7923      	ldrb	r3, [r4, #4]
 8003bdc:	2b2f      	cmp	r3, #47	; 0x2f
 8003bde:	d915      	bls.n	8003c0c <translate_keypad+0x180>
 8003be0:	7923      	ldrb	r3, [r4, #4]
 8003be2:	2b39      	cmp	r3, #57	; 0x39
 8003be4:	d812      	bhi.n	8003c0c <translate_keypad+0x180>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003be6:	7920      	ldrb	r0, [r4, #4]
 8003be8:	f7fd f820 	bl	8000c2c <__aeabi_i2f>
 8003bec:	4950      	ldr	r1, [pc, #320]	; (8003d30 <translate_keypad+0x2a4>)
 8003bee:	f7fc ff67 	bl	8000ac0 <__aeabi_fsub>
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4640      	mov	r0, r8
 8003bf6:	f7fd f819 	bl	8000c2c <__aeabi_i2f>
 8003bfa:	4601      	mov	r1, r0
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f7fd f91d 	bl	8000e3c <__aeabi_fdiv>
 8003c02:	4601      	mov	r1, r0
 8003c04:	4628      	mov	r0, r5
 8003c06:	f7fc ff5d 	bl	8000ac4 <__addsf3>
 8003c0a:	4605      	mov	r5, r0
}
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		int count = 1;
 8003c12:	2601      	movs	r6, #1
	float num = 0;
 8003c14:	2500      	movs	r5, #0
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003c16:	78e3      	ldrb	r3, [r4, #3]
 8003c18:	2b2f      	cmp	r3, #47	; 0x2f
 8003c1a:	d910      	bls.n	8003c3e <translate_keypad+0x1b2>
 8003c1c:	78e3      	ldrb	r3, [r4, #3]
 8003c1e:	2b39      	cmp	r3, #57	; 0x39
 8003c20:	d80d      	bhi.n	8003c3e <translate_keypad+0x1b2>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003c22:	78e0      	ldrb	r0, [r4, #3]
 8003c24:	3830      	subs	r0, #48	; 0x30
 8003c26:	fb06 f000 	mul.w	r0, r6, r0
 8003c2a:	f7fc ffff 	bl	8000c2c <__aeabi_i2f>
 8003c2e:	4601      	mov	r1, r0
 8003c30:	4628      	mov	r0, r5
 8003c32:	f7fc ff47 	bl	8000ac4 <__addsf3>
 8003c36:	4605      	mov	r5, r0
				count = count * 10;
 8003c38:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003c3c:	0076      	lsls	r6, r6, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003c3e:	78a3      	ldrb	r3, [r4, #2]
 8003c40:	2b2f      	cmp	r3, #47	; 0x2f
 8003c42:	d910      	bls.n	8003c66 <translate_keypad+0x1da>
 8003c44:	78a3      	ldrb	r3, [r4, #2]
 8003c46:	2b39      	cmp	r3, #57	; 0x39
 8003c48:	d80d      	bhi.n	8003c66 <translate_keypad+0x1da>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003c4a:	78a0      	ldrb	r0, [r4, #2]
 8003c4c:	3830      	subs	r0, #48	; 0x30
 8003c4e:	fb06 f000 	mul.w	r0, r6, r0
 8003c52:	f7fc ffeb 	bl	8000c2c <__aeabi_i2f>
 8003c56:	4601      	mov	r1, r0
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f7fc ff33 	bl	8000ac4 <__addsf3>
 8003c5e:	4605      	mov	r5, r0
				count = count * 10;
 8003c60:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003c64:	0076      	lsls	r6, r6, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003c66:	7863      	ldrb	r3, [r4, #1]
 8003c68:	2b2f      	cmp	r3, #47	; 0x2f
 8003c6a:	d910      	bls.n	8003c8e <translate_keypad+0x202>
 8003c6c:	7863      	ldrb	r3, [r4, #1]
 8003c6e:	2b39      	cmp	r3, #57	; 0x39
 8003c70:	d80d      	bhi.n	8003c8e <translate_keypad+0x202>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003c72:	7860      	ldrb	r0, [r4, #1]
 8003c74:	3830      	subs	r0, #48	; 0x30
 8003c76:	fb06 f000 	mul.w	r0, r6, r0
 8003c7a:	f7fc ffd7 	bl	8000c2c <__aeabi_i2f>
 8003c7e:	4601      	mov	r1, r0
 8003c80:	4628      	mov	r0, r5
 8003c82:	f7fc ff1f 	bl	8000ac4 <__addsf3>
 8003c86:	4605      	mov	r5, r0
				count = count * 10;
 8003c88:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003c8c:	0076      	lsls	r6, r6, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003c8e:	7823      	ldrb	r3, [r4, #0]
 8003c90:	2b2f      	cmp	r3, #47	; 0x2f
 8003c92:	d9bb      	bls.n	8003c0c <translate_keypad+0x180>
 8003c94:	7823      	ldrb	r3, [r4, #0]
 8003c96:	2b39      	cmp	r3, #57	; 0x39
 8003c98:	d8b8      	bhi.n	8003c0c <translate_keypad+0x180>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003c9a:	7820      	ldrb	r0, [r4, #0]
 8003c9c:	3830      	subs	r0, #48	; 0x30
 8003c9e:	fb06 f000 	mul.w	r0, r6, r0
 8003ca2:	f7fc ffc3 	bl	8000c2c <__aeabi_i2f>
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	4628      	mov	r0, r5
 8003caa:	f7fc ff0b 	bl	8000ac4 <__addsf3>
 8003cae:	4605      	mov	r5, r0
		for(int i = keypadlength-1; i >=0; i--){
 8003cb0:	e7ac      	b.n	8003c0c <translate_keypad+0x180>
		if(keypadarr[i] == '.'){
 8003cb2:	78e3      	ldrb	r3, [r4, #3]
 8003cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8003cb6:	f43f af15 	beq.w	8003ae4 <translate_keypad+0x58>
 8003cba:	7923      	ldrb	r3, [r4, #4]
	for(int i = 0; i < keypadlength; i++){
 8003cbc:	2b2e      	cmp	r3, #46	; 0x2e
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2704      	moveq	r7, #4
 8003cc2:	2702      	movne	r7, #2
 8003cc4:	e713      	b.n	8003aee <translate_keypad+0x62>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003cc6:	7823      	ldrb	r3, [r4, #0]
 8003cc8:	2b2f      	cmp	r3, #47	; 0x2f
 8003cca:	d87a      	bhi.n	8003dc2 <translate_keypad+0x336>
 8003ccc:	2701      	movs	r7, #1
	float num = 0;
 8003cce:	2500      	movs	r5, #0
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003cd0:	1c7e      	adds	r6, r7, #1
 8003cd2:	e74b      	b.n	8003b6c <translate_keypad+0xe0>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003cd4:	7823      	ldrb	r3, [r4, #0]
 8003cd6:	2b39      	cmp	r3, #57	; 0x39
 8003cd8:	f63f af44 	bhi.w	8003b64 <translate_keypad+0xd8>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003cdc:	7820      	ldrb	r0, [r4, #0]
 8003cde:	3830      	subs	r0, #48	; 0x30
 8003ce0:	fb08 f000 	mul.w	r0, r8, r0
 8003ce4:	f7fc ffa2 	bl	8000c2c <__aeabi_i2f>
 8003ce8:	4601      	mov	r1, r0
 8003cea:	4628      	mov	r0, r5
 8003cec:	f7fc feea 	bl	8000ac4 <__addsf3>
 8003cf0:	4605      	mov	r5, r0
				count = count * 10;
 8003cf2:	e737      	b.n	8003b64 <translate_keypad+0xd8>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003cf4:	5da0      	ldrb	r0, [r4, r6]
				count = count * 10;
 8003cf6:	f04f 080a 	mov.w	r8, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003cfa:	3830      	subs	r0, #48	; 0x30
 8003cfc:	f7fc ff96 	bl	8000c2c <__aeabi_i2f>
 8003d00:	2100      	movs	r1, #0
 8003d02:	f7fc fedf 	bl	8000ac4 <__addsf3>
 8003d06:	4605      	mov	r5, r0
				count = count * 10;
 8003d08:	e6fc      	b.n	8003b04 <translate_keypad+0x78>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003d0a:	5ce0      	ldrb	r0, [r4, r3]
 8003d0c:	3830      	subs	r0, #48	; 0x30
 8003d0e:	fb08 f000 	mul.w	r0, r8, r0
 8003d12:	f7fc ff8b 	bl	8000c2c <__aeabi_i2f>
 8003d16:	4601      	mov	r1, r0
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f7fc fed3 	bl	8000ac4 <__addsf3>
				count = count * 10;
 8003d1e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003d22:	4605      	mov	r5, r0
				count = count * 10;
 8003d24:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8003d28:	e6f7      	b.n	8003b1a <translate_keypad+0x8e>
 8003d2a:	bf00      	nop
 8003d2c:	20000000 	.word	0x20000000
 8003d30:	42400000 	.word	0x42400000
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003d34:	5de0      	ldrb	r0, [r4, r7]
 8003d36:	f7fc ff79 	bl	8000c2c <__aeabi_i2f>
 8003d3a:	4923      	ldr	r1, [pc, #140]	; (8003dc8 <translate_keypad+0x33c>)
 8003d3c:	f7fc fec0 	bl	8000ac0 <__aeabi_fsub>
 8003d40:	4606      	mov	r6, r0
 8003d42:	4640      	mov	r0, r8
 8003d44:	f7fc ff72 	bl	8000c2c <__aeabi_i2f>
 8003d48:	4601      	mov	r1, r0
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f7fd f876 	bl	8000e3c <__aeabi_fdiv>
 8003d50:	4601      	mov	r1, r0
 8003d52:	4628      	mov	r0, r5
 8003d54:	f7fc feb6 	bl	8000ac4 <__addsf3>
				count = count * 10;
 8003d58:	eb08 0888 	add.w	r8, r8, r8, lsl #2
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003d5c:	4605      	mov	r5, r0
				count = count * 10;
 8003d5e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8003d62:	e717      	b.n	8003b94 <translate_keypad+0x108>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003d64:	7863      	ldrb	r3, [r4, #1]
 8003d66:	2b39      	cmp	r3, #57	; 0x39
 8003d68:	d821      	bhi.n	8003dae <translate_keypad+0x322>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003d6a:	2601      	movs	r6, #1
	float num = 0;
 8003d6c:	2500      	movs	r5, #0
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003d6e:	5da0      	ldrb	r0, [r4, r6]
 8003d70:	f7fc ff5c 	bl	8000c2c <__aeabi_i2f>
 8003d74:	4914      	ldr	r1, [pc, #80]	; (8003dc8 <translate_keypad+0x33c>)
 8003d76:	f7fc fea3 	bl	8000ac0 <__aeabi_fsub>
 8003d7a:	4914      	ldr	r1, [pc, #80]	; (8003dcc <translate_keypad+0x340>)
 8003d7c:	f7fd f85e 	bl	8000e3c <__aeabi_fdiv>
 8003d80:	4601      	mov	r1, r0
 8003d82:	4628      	mov	r0, r5
 8003d84:	f7fc fe9e 	bl	8000ac4 <__addsf3>
				count = count * 10;
 8003d88:	f04f 0864 	mov.w	r8, #100	; 0x64
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003d8c:	4605      	mov	r5, r0
				count = count * 10;
 8003d8e:	e6f6      	b.n	8003b7e <translate_keypad+0xf2>
	for(int i = 0; i < keypadlength; i++){
 8003d90:	2704      	movs	r7, #4
 8003d92:	e6ac      	b.n	8003aee <translate_keypad+0x62>
		for(int i = decimallocation-1; i >=0; i--){
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d196      	bne.n	8003cc6 <translate_keypad+0x23a>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003d98:	7863      	ldrb	r3, [r4, #1]
 8003d9a:	2b2f      	cmp	r3, #47	; 0x2f
 8003d9c:	d8e2      	bhi.n	8003d64 <translate_keypad+0x2d8>
 8003d9e:	78a3      	ldrb	r3, [r4, #2]
 8003da0:	2b2f      	cmp	r3, #47	; 0x2f
 8003da2:	d909      	bls.n	8003db8 <translate_keypad+0x32c>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003da4:	2702      	movs	r7, #2
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003da6:	f04f 080a 	mov.w	r8, #10
	float num = 0;
 8003daa:	2500      	movs	r5, #0
 8003dac:	e6ee      	b.n	8003b8c <translate_keypad+0x100>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003dae:	2702      	movs	r7, #2
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003db0:	f04f 080a 	mov.w	r8, #10
	float num = 0;
 8003db4:	2500      	movs	r5, #0
 8003db6:	e6e6      	b.n	8003b86 <translate_keypad+0xfa>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003db8:	2603      	movs	r6, #3
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003dba:	f04f 080a 	mov.w	r8, #10
	float num = 0;
 8003dbe:	2500      	movs	r5, #0
 8003dc0:	e6ec      	b.n	8003b9c <translate_keypad+0x110>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	2701      	movs	r7, #1
 8003dc6:	e696      	b.n	8003af6 <translate_keypad+0x6a>
 8003dc8:	42400000 	.word	0x42400000
 8003dcc:	41200000 	.word	0x41200000

08003dd0 <fill_keypad>:
void fill_keypad(uint8_t va, float num){
 8003dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
				keypaddecimal = 0;
 8003dd2:	f04f 0c00 	mov.w	ip, #0
			keypadarr[0] = num;
 8003dd6:	277a      	movs	r7, #122	; 0x7a
void fill_keypad(uint8_t va, float num){
 8003dd8:	460e      	mov	r6, r1
 8003dda:	4c85      	ldr	r4, [pc, #532]	; (8003ff0 <fill_keypad+0x220>)
			if(keypadarr[4] == '.'){
 8003ddc:	4b85      	ldr	r3, [pc, #532]	; (8003ff4 <fill_keypad+0x224>)
				keypaddecimal = 0;
 8003dde:	4d86      	ldr	r5, [pc, #536]	; (8003ff8 <fill_keypad+0x228>)
void fill_keypad(uint8_t va, float num){
 8003de0:	b083      	sub	sp, #12
	while(keypaditerator < 4){
 8003de2:	7822      	ldrb	r2, [r4, #0]
 8003de4:	b252      	sxtb	r2, r2
 8003de6:	2a03      	cmp	r2, #3
 8003de8:	dc1d      	bgt.n	8003e26 <fill_keypad+0x56>
		if(keypaditerator < keypadlength-1){
 8003dea:	7822      	ldrb	r2, [r4, #0]
 8003dec:	b252      	sxtb	r2, r2
 8003dee:	2a03      	cmp	r2, #3
 8003df0:	dcf7      	bgt.n	8003de2 <fill_keypad+0x12>
			if(keypadarr[4] == '.'){
 8003df2:	791a      	ldrb	r2, [r3, #4]
 8003df4:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8003df6:	bf08      	it	eq
 8003df8:	f885 c000 	strbeq.w	ip, [r5]
				keypadarr[i+1] = keypadarr[i];
 8003dfc:	78da      	ldrb	r2, [r3, #3]
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	711a      	strb	r2, [r3, #4]
 8003e02:	789a      	ldrb	r2, [r3, #2]
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	70da      	strb	r2, [r3, #3]
 8003e08:	785a      	ldrb	r2, [r3, #1]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	709a      	strb	r2, [r3, #2]
 8003e0e:	781a      	ldrb	r2, [r3, #0]
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	705a      	strb	r2, [r3, #1]
			keypadarr[0] = num;
 8003e14:	701f      	strb	r7, [r3, #0]
			keypaditerator++;
 8003e16:	7822      	ldrb	r2, [r4, #0]
 8003e18:	3201      	adds	r2, #1
 8003e1a:	b252      	sxtb	r2, r2
 8003e1c:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8003e1e:	7822      	ldrb	r2, [r4, #0]
 8003e20:	b252      	sxtb	r2, r2
 8003e22:	2a03      	cmp	r2, #3
 8003e24:	dde1      	ble.n	8003dea <fill_keypad+0x1a>
	if(va){
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d054      	beq.n	8003ed4 <fill_keypad+0x104>
		volatile int temp = (int)(num * 1000);
 8003e2a:	4974      	ldr	r1, [pc, #464]	; (8003ffc <fill_keypad+0x22c>)
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	f7fc ff51 	bl	8000cd4 <__aeabi_fmul>
 8003e32:	f7fd f915 	bl	8001060 <__aeabi_f2iz>
 8003e36:	4603      	mov	r3, r0
		if(num <= 0.0001){
 8003e38:	4630      	mov	r0, r6
		volatile int temp = (int)(num * 1000);
 8003e3a:	9300      	str	r3, [sp, #0]
		if(num <= 0.0001){
 8003e3c:	f7fc fb0c 	bl	8000458 <__aeabi_f2d>
 8003e40:	a363      	add	r3, pc, #396	; (adr r3, 8003fd0 <fill_keypad+0x200>)
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	4606      	mov	r6, r0
 8003e48:	460f      	mov	r7, r1
 8003e4a:	f7fc fdd9 	bl	8000a00 <__aeabi_dcmple>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	f040 809e 	bne.w	8003f90 <fill_keypad+0x1c0>
					keypadarr[keypaditerator] = '.';
 8003e54:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8003e58:	4969      	ldr	r1, [pc, #420]	; (8004000 <fill_keypad+0x230>)
 8003e5a:	4866      	ldr	r0, [pc, #408]	; (8003ff4 <fill_keypad+0x224>)
 8003e5c:	e020      	b.n	8003ea0 <fill_keypad+0xd0>
			while(temp != 0 && keypaditerator >= 0){
 8003e5e:	7823      	ldrb	r3, [r4, #0]
 8003e60:	061b      	lsls	r3, r3, #24
 8003e62:	d420      	bmi.n	8003ea6 <fill_keypad+0xd6>
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8003e64:	9b00      	ldr	r3, [sp, #0]
 8003e66:	7825      	ldrb	r5, [r4, #0]
 8003e68:	fb81 2e03 	smull	r2, lr, r1, r3
 8003e6c:	17da      	asrs	r2, r3, #31
 8003e6e:	ebc2 02ae 	rsb	r2, r2, lr, asr #2
 8003e72:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003e76:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8003e7a:	3330      	adds	r3, #48	; 0x30
 8003e7c:	b26d      	sxtb	r5, r5
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	5543      	strb	r3, [r0, r5]
				temp = temp / 10;
 8003e82:	9b00      	ldr	r3, [sp, #0]
 8003e84:	fb81 5203 	smull	r5, r2, r1, r3
 8003e88:	17db      	asrs	r3, r3, #31
 8003e8a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8003e8e:	9300      	str	r3, [sp, #0]
				keypaditerator--;
 8003e90:	7823      	ldrb	r3, [r4, #0]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	7023      	strb	r3, [r4, #0]
				if(keypaditerator == 1){
 8003e98:	7823      	ldrb	r3, [r4, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	f000 8084 	beq.w	8003fa8 <fill_keypad+0x1d8>
			while(temp != 0 && keypaditerator >= 0){
 8003ea0:	9b00      	ldr	r3, [sp, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1db      	bne.n	8003e5e <fill_keypad+0x8e>
			if(keypaditerator >= 0 && num <= 0.999999){
 8003ea6:	7823      	ldrb	r3, [r4, #0]
 8003ea8:	061b      	lsls	r3, r3, #24
 8003eaa:	d46f      	bmi.n	8003f8c <fill_keypad+0x1bc>
 8003eac:	a34a      	add	r3, pc, #296	; (adr r3, 8003fd8 <fill_keypad+0x208>)
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	4639      	mov	r1, r7
 8003eb6:	f7fc fda3 	bl	8000a00 <__aeabi_dcmple>
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	d066      	beq.n	8003f8c <fill_keypad+0x1bc>
				keypadarr[keypaditerator] = '0';
 8003ebe:	2130      	movs	r1, #48	; 0x30
 8003ec0:	7823      	ldrb	r3, [r4, #0]
 8003ec2:	4a4c      	ldr	r2, [pc, #304]	; (8003ff4 <fill_keypad+0x224>)
 8003ec4:	b25b      	sxtb	r3, r3
 8003ec6:	54d1      	strb	r1, [r2, r3]
				keypaditerator--;
 8003ec8:	7823      	ldrb	r3, [r4, #0]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b25b      	sxtb	r3, r3
 8003ece:	7023      	strb	r3, [r4, #0]
}
 8003ed0:	b003      	add	sp, #12
 8003ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		volatile int temp = (int)(num * 100);
 8003ed4:	494b      	ldr	r1, [pc, #300]	; (8004004 <fill_keypad+0x234>)
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	f7fc fefc 	bl	8000cd4 <__aeabi_fmul>
 8003edc:	f7fd f8c0 	bl	8001060 <__aeabi_f2iz>
 8003ee0:	4603      	mov	r3, r0
		if(num <= 0.001){
 8003ee2:	4630      	mov	r0, r6
		volatile int temp = (int)(num * 100);
 8003ee4:	9301      	str	r3, [sp, #4]
		if(num <= 0.001){
 8003ee6:	f7fc fab7 	bl	8000458 <__aeabi_f2d>
 8003eea:	a33d      	add	r3, pc, #244	; (adr r3, 8003fe0 <fill_keypad+0x210>)
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	4606      	mov	r6, r0
 8003ef2:	460f      	mov	r7, r1
 8003ef4:	f7fc fd84 	bl	8000a00 <__aeabi_dcmple>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d13d      	bne.n	8003f78 <fill_keypad+0x1a8>
					keypadarr[keypaditerator] = '.';
 8003efc:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8003f00:	493f      	ldr	r1, [pc, #252]	; (8004000 <fill_keypad+0x230>)
 8003f02:	483c      	ldr	r0, [pc, #240]	; (8003ff4 <fill_keypad+0x224>)
 8003f04:	e01f      	b.n	8003f46 <fill_keypad+0x176>
			while(temp != 0 && keypaditerator >= 0){
 8003f06:	7823      	ldrb	r3, [r4, #0]
 8003f08:	061d      	lsls	r5, r3, #24
 8003f0a:	d41f      	bmi.n	8003f4c <fill_keypad+0x17c>
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8003f0c:	9b01      	ldr	r3, [sp, #4]
 8003f0e:	7825      	ldrb	r5, [r4, #0]
 8003f10:	fb81 2e03 	smull	r2, lr, r1, r3
 8003f14:	17da      	asrs	r2, r3, #31
 8003f16:	ebc2 02ae 	rsb	r2, r2, lr, asr #2
 8003f1a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f1e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8003f22:	3330      	adds	r3, #48	; 0x30
 8003f24:	b26d      	sxtb	r5, r5
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	5543      	strb	r3, [r0, r5]
				temp = temp / 10;
 8003f2a:	9b01      	ldr	r3, [sp, #4]
 8003f2c:	fb81 5203 	smull	r5, r2, r1, r3
 8003f30:	17db      	asrs	r3, r3, #31
 8003f32:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8003f36:	9301      	str	r3, [sp, #4]
				keypaditerator--;
 8003f38:	7823      	ldrb	r3, [r4, #0]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b25b      	sxtb	r3, r3
 8003f3e:	7023      	strb	r3, [r4, #0]
				if(keypaditerator == 2){
 8003f40:	7823      	ldrb	r3, [r4, #0]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d039      	beq.n	8003fba <fill_keypad+0x1ea>
			while(temp != 0 && keypaditerator >= 0){
 8003f46:	9b01      	ldr	r3, [sp, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1dc      	bne.n	8003f06 <fill_keypad+0x136>
			if(keypaditerator >= 0 && num <= 9.999999){
 8003f4c:	7823      	ldrb	r3, [r4, #0]
 8003f4e:	061a      	lsls	r2, r3, #24
 8003f50:	d4a9      	bmi.n	8003ea6 <fill_keypad+0xd6>
 8003f52:	a325      	add	r3, pc, #148	; (adr r3, 8003fe8 <fill_keypad+0x218>)
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	4630      	mov	r0, r6
 8003f5a:	4639      	mov	r1, r7
 8003f5c:	f7fc fd50 	bl	8000a00 <__aeabi_dcmple>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d0a0      	beq.n	8003ea6 <fill_keypad+0xd6>
				keypadarr[keypaditerator] = '0';
 8003f64:	2130      	movs	r1, #48	; 0x30
 8003f66:	7823      	ldrb	r3, [r4, #0]
 8003f68:	4a22      	ldr	r2, [pc, #136]	; (8003ff4 <fill_keypad+0x224>)
 8003f6a:	b25b      	sxtb	r3, r3
 8003f6c:	54d1      	strb	r1, [r2, r3]
				keypaditerator--;
 8003f6e:	7823      	ldrb	r3, [r4, #0]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b25b      	sxtb	r3, r3
 8003f74:	7023      	strb	r3, [r4, #0]
 8003f76:	e796      	b.n	8003ea6 <fill_keypad+0xd6>
			keypadarr[0] = '0';
 8003f78:	2230      	movs	r2, #48	; 0x30
			keypadarr[2] = '.';
 8003f7a:	202e      	movs	r0, #46	; 0x2e
			keypaditerator = -1;
 8003f7c:	21ff      	movs	r1, #255	; 0xff
			keypadarr[0] = '0';
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <fill_keypad+0x224>)
 8003f80:	701a      	strb	r2, [r3, #0]
			keypadarr[1] = '0';
 8003f82:	705a      	strb	r2, [r3, #1]
			keypadarr[2] = '.';
 8003f84:	7098      	strb	r0, [r3, #2]
			keypadarr[3] = '0';
 8003f86:	70da      	strb	r2, [r3, #3]
			keypadarr[4] = '0';
 8003f88:	711a      	strb	r2, [r3, #4]
			keypaditerator = -1;
 8003f8a:	7021      	strb	r1, [r4, #0]
}
 8003f8c:	b003      	add	sp, #12
 8003f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			keypadarr[0] = '0';
 8003f90:	2230      	movs	r2, #48	; 0x30
			keypadarr[1] = '.';
 8003f92:	202e      	movs	r0, #46	; 0x2e
			keypaditerator = -1;
 8003f94:	21ff      	movs	r1, #255	; 0xff
			keypadarr[0] = '0';
 8003f96:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <fill_keypad+0x224>)
 8003f98:	701a      	strb	r2, [r3, #0]
			keypadarr[1] = '.';
 8003f9a:	7058      	strb	r0, [r3, #1]
			keypadarr[2] = '0';
 8003f9c:	709a      	strb	r2, [r3, #2]
			keypadarr[3] = '0';
 8003f9e:	70da      	strb	r2, [r3, #3]
			keypadarr[4] = '0';
 8003fa0:	711a      	strb	r2, [r3, #4]
			keypaditerator = -1;
 8003fa2:	7021      	strb	r1, [r4, #0]
}
 8003fa4:	b003      	add	sp, #12
 8003fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					keypadarr[keypaditerator] = '.';
 8003fa8:	7823      	ldrb	r3, [r4, #0]
 8003faa:	b25b      	sxtb	r3, r3
 8003fac:	f800 c003 	strb.w	ip, [r0, r3]
					keypaditerator--;
 8003fb0:	7823      	ldrb	r3, [r4, #0]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b25b      	sxtb	r3, r3
 8003fb6:	7023      	strb	r3, [r4, #0]
 8003fb8:	e772      	b.n	8003ea0 <fill_keypad+0xd0>
					keypadarr[keypaditerator] = '.';
 8003fba:	7823      	ldrb	r3, [r4, #0]
 8003fbc:	b25b      	sxtb	r3, r3
 8003fbe:	f800 c003 	strb.w	ip, [r0, r3]
					keypaditerator--;
 8003fc2:	7823      	ldrb	r3, [r4, #0]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b25b      	sxtb	r3, r3
 8003fc8:	7023      	strb	r3, [r4, #0]
 8003fca:	e7bc      	b.n	8003f46 <fill_keypad+0x176>
 8003fcc:	f3af 8000 	nop.w
 8003fd0:	eb1c432d 	.word	0xeb1c432d
 8003fd4:	3f1a36e2 	.word	0x3f1a36e2
 8003fd8:	e7210be9 	.word	0xe7210be9
 8003fdc:	3feffffd 	.word	0x3feffffd
 8003fe0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003fe4:	3f50624d 	.word	0x3f50624d
 8003fe8:	de7210bf 	.word	0xde7210bf
 8003fec:	4023ffff 	.word	0x4023ffff
 8003ff0:	20000005 	.word	0x20000005
 8003ff4:	20000000 	.word	0x20000000
 8003ff8:	20000704 	.word	0x20000704
 8003ffc:	447a0000 	.word	0x447a0000
 8004000:	66666667 	.word	0x66666667
 8004004:	42c80000 	.word	0x42c80000

08004008 <inc_arr_v>:
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004008:	4603      	mov	r3, r0
void inc_arr_v(int8_t pos){
 800400a:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 800400c:	bb70      	cbnz	r0, 800406c <inc_arr_v+0x64>
 800400e:	4c59      	ldr	r4, [pc, #356]	; (8004174 <inc_arr_v+0x16c>)
 8004010:	7822      	ldrb	r2, [r4, #0]
 8004012:	2a31      	cmp	r2, #49	; 0x31
 8004014:	d06a      	beq.n	80040ec <inc_arr_v+0xe4>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004016:	7822      	ldrb	r2, [r4, #0]
 8004018:	2a30      	cmp	r2, #48	; 0x30
 800401a:	f000 8081 	beq.w	8004120 <inc_arr_v+0x118>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800401e:	7822      	ldrb	r2, [r4, #0]
 8004020:	2a30      	cmp	r2, #48	; 0x30
 8004022:	f000 8089 	beq.w	8004138 <inc_arr_v+0x130>
			if(keypadarr[pos] < '9'){
 8004026:	5ce2      	ldrb	r2, [r4, r3]
 8004028:	2a38      	cmp	r2, #56	; 0x38
 800402a:	f200 808a 	bhi.w	8004142 <inc_arr_v+0x13a>
				keypadarr[pos]++;
 800402e:	5ce2      	ldrb	r2, [r4, r3]
 8004030:	3201      	adds	r2, #1
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	54e2      	strb	r2, [r4, r3]
		if(keypadarr[i] != 'z'){
 8004036:	7823      	ldrb	r3, [r4, #0]
 8004038:	2b7a      	cmp	r3, #122	; 0x7a
 800403a:	d111      	bne.n	8004060 <inc_arr_v+0x58>
 800403c:	7863      	ldrb	r3, [r4, #1]
 800403e:	2b7a      	cmp	r3, #122	; 0x7a
 8004040:	f040 8090 	bne.w	8004164 <inc_arr_v+0x15c>
 8004044:	78a3      	ldrb	r3, [r4, #2]
 8004046:	2b7a      	cmp	r3, #122	; 0x7a
 8004048:	f040 808e 	bne.w	8004168 <inc_arr_v+0x160>
 800404c:	78e3      	ldrb	r3, [r4, #3]
 800404e:	2b7a      	cmp	r3, #122	; 0x7a
 8004050:	f040 808c 	bne.w	800416c <inc_arr_v+0x164>
 8004054:	7923      	ldrb	r3, [r4, #4]
 8004056:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004058:	bf18      	it	ne
 800405a:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 800405c:	d101      	bne.n	8004062 <inc_arr_v+0x5a>
}
 800405e:	bd10      	pop	{r4, pc}
	for(int i = 0; i < keypadlength; i++){
 8004060:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8004062:	4a45      	ldr	r2, [pc, #276]	; (8004178 <inc_arr_v+0x170>)
 8004064:	3b01      	subs	r3, #1
 8004066:	b25b      	sxtb	r3, r3
 8004068:	7013      	strb	r3, [r2, #0]
}
 800406a:	bd10      	pop	{r4, pc}
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800406c:	2801      	cmp	r0, #1
 800406e:	d119      	bne.n	80040a4 <inc_arr_v+0x9c>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8004070:	4c40      	ldr	r4, [pc, #256]	; (8004174 <inc_arr_v+0x16c>)
 8004072:	7822      	ldrb	r2, [r4, #0]
 8004074:	2a31      	cmp	r2, #49	; 0x31
 8004076:	d06b      	beq.n	8004150 <inc_arr_v+0x148>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004078:	7822      	ldrb	r2, [r4, #0]
 800407a:	2a31      	cmp	r2, #49	; 0x31
 800407c:	d1d3      	bne.n	8004026 <inc_arr_v+0x1e>
 800407e:	7862      	ldrb	r2, [r4, #1]
 8004080:	2a31      	cmp	r2, #49	; 0x31
 8004082:	d1d0      	bne.n	8004026 <inc_arr_v+0x1e>
 8004084:	78e2      	ldrb	r2, [r4, #3]
 8004086:	2a30      	cmp	r2, #48	; 0x30
 8004088:	d802      	bhi.n	8004090 <inc_arr_v+0x88>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 800408a:	7922      	ldrb	r2, [r4, #4]
 800408c:	2a30      	cmp	r2, #48	; 0x30
 800408e:	d9ca      	bls.n	8004026 <inc_arr_v+0x1e>
		keypadarr[3] = '0';
 8004090:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '1';
 8004092:	2031      	movs	r0, #49	; 0x31
		keypadarr[1] = '2';
 8004094:	2132      	movs	r1, #50	; 0x32
		keypadarr[2] = '.';
 8004096:	222e      	movs	r2, #46	; 0x2e
		keypadarr[0] = '1';
 8004098:	7020      	strb	r0, [r4, #0]
		keypadarr[1] = '2';
 800409a:	7061      	strb	r1, [r4, #1]
		keypadarr[2] = '.';
 800409c:	70a2      	strb	r2, [r4, #2]
		keypadarr[3] = '0';
 800409e:	70e3      	strb	r3, [r4, #3]
		keypadarr[4] = '0';
 80040a0:	7123      	strb	r3, [r4, #4]
 80040a2:	e7c8      	b.n	8004036 <inc_arr_v+0x2e>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80040a4:	2803      	cmp	r0, #3
 80040a6:	d10d      	bne.n	80040c4 <inc_arr_v+0xbc>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 80040a8:	4c32      	ldr	r4, [pc, #200]	; (8004174 <inc_arr_v+0x16c>)
 80040aa:	7822      	ldrb	r2, [r4, #0]
 80040ac:	2a31      	cmp	r2, #49	; 0x31
 80040ae:	d027      	beq.n	8004100 <inc_arr_v+0xf8>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 80040b0:	7822      	ldrb	r2, [r4, #0]
 80040b2:	2a31      	cmp	r2, #49	; 0x31
 80040b4:	d1b7      	bne.n	8004026 <inc_arr_v+0x1e>
 80040b6:	7862      	ldrb	r2, [r4, #1]
 80040b8:	2a31      	cmp	r2, #49	; 0x31
 80040ba:	d1b4      	bne.n	8004026 <inc_arr_v+0x1e>
 80040bc:	78e2      	ldrb	r2, [r4, #3]
 80040be:	2a39      	cmp	r2, #57	; 0x39
 80040c0:	d1b1      	bne.n	8004026 <inc_arr_v+0x1e>
 80040c2:	e7e2      	b.n	800408a <inc_arr_v+0x82>
 80040c4:	2804      	cmp	r0, #4
 80040c6:	d10d      	bne.n	80040e4 <inc_arr_v+0xdc>
		!(pos == 4 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 80040c8:	4c2a      	ldr	r4, [pc, #168]	; (8004174 <inc_arr_v+0x16c>)
 80040ca:	7822      	ldrb	r2, [r4, #0]
 80040cc:	2a31      	cmp	r2, #49	; 0x31
 80040ce:	d1aa      	bne.n	8004026 <inc_arr_v+0x1e>
 80040d0:	7862      	ldrb	r2, [r4, #1]
 80040d2:	2a32      	cmp	r2, #50	; 0x32
 80040d4:	d1a7      	bne.n	8004026 <inc_arr_v+0x1e>
 80040d6:	78e2      	ldrb	r2, [r4, #3]
 80040d8:	2a30      	cmp	r2, #48	; 0x30
 80040da:	d1a4      	bne.n	8004026 <inc_arr_v+0x1e>
 80040dc:	7922      	ldrb	r2, [r4, #4]
 80040de:	2a30      	cmp	r2, #48	; 0x30
 80040e0:	d1a1      	bne.n	8004026 <inc_arr_v+0x1e>
 80040e2:	e7d5      	b.n	8004090 <inc_arr_v+0x88>
		if(pos >= 0 && pos != 2){
 80040e4:	2800      	cmp	r0, #0
 80040e6:	da15      	bge.n	8004114 <inc_arr_v+0x10c>
 80040e8:	4c22      	ldr	r4, [pc, #136]	; (8004174 <inc_arr_v+0x16c>)
 80040ea:	e7a4      	b.n	8004036 <inc_arr_v+0x2e>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80040ec:	7862      	ldrb	r2, [r4, #1]
 80040ee:	2a2f      	cmp	r2, #47	; 0x2f
 80040f0:	d991      	bls.n	8004016 <inc_arr_v+0xe>
 80040f2:	78e2      	ldrb	r2, [r4, #3]
 80040f4:	2a2f      	cmp	r2, #47	; 0x2f
 80040f6:	d98e      	bls.n	8004016 <inc_arr_v+0xe>
 80040f8:	7922      	ldrb	r2, [r4, #4]
 80040fa:	2a2f      	cmp	r2, #47	; 0x2f
 80040fc:	d8c8      	bhi.n	8004090 <inc_arr_v+0x88>
 80040fe:	e78a      	b.n	8004016 <inc_arr_v+0xe>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004100:	7862      	ldrb	r2, [r4, #1]
 8004102:	2a32      	cmp	r2, #50	; 0x32
 8004104:	d1d4      	bne.n	80040b0 <inc_arr_v+0xa8>
 8004106:	78e2      	ldrb	r2, [r4, #3]
 8004108:	2a30      	cmp	r2, #48	; 0x30
 800410a:	d1d1      	bne.n	80040b0 <inc_arr_v+0xa8>
 800410c:	7922      	ldrb	r2, [r4, #4]
 800410e:	2a2f      	cmp	r2, #47	; 0x2f
 8004110:	d8be      	bhi.n	8004090 <inc_arr_v+0x88>
 8004112:	e7cd      	b.n	80040b0 <inc_arr_v+0xa8>
		if(pos >= 0 && pos != 2){
 8004114:	2802      	cmp	r0, #2
 8004116:	d12b      	bne.n	8004170 <inc_arr_v+0x168>
			inc_arr_v(pos-1);
 8004118:	2001      	movs	r0, #1
 800411a:	f7ff ff75 	bl	8004008 <inc_arr_v>
 800411e:	e7e3      	b.n	80040e8 <inc_arr_v+0xe0>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004120:	7862      	ldrb	r2, [r4, #1]
 8004122:	2a32      	cmp	r2, #50	; 0x32
 8004124:	f67f af7b 	bls.w	800401e <inc_arr_v+0x16>
 8004128:	78e2      	ldrb	r2, [r4, #3]
 800412a:	2a2f      	cmp	r2, #47	; 0x2f
 800412c:	f67f af77 	bls.w	800401e <inc_arr_v+0x16>
 8004130:	7922      	ldrb	r2, [r4, #4]
 8004132:	2a2f      	cmp	r2, #47	; 0x2f
 8004134:	d8ac      	bhi.n	8004090 <inc_arr_v+0x88>
 8004136:	e772      	b.n	800401e <inc_arr_v+0x16>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004138:	7862      	ldrb	r2, [r4, #1]
 800413a:	2a31      	cmp	r2, #49	; 0x31
 800413c:	f67f af73 	bls.w	8004026 <inc_arr_v+0x1e>
 8004140:	e7a0      	b.n	8004084 <inc_arr_v+0x7c>
				keypadarr[pos] = '0';
 8004142:	2230      	movs	r2, #48	; 0x30
				inc_arr_v(pos-1);
 8004144:	1e58      	subs	r0, r3, #1
 8004146:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 8004148:	54e2      	strb	r2, [r4, r3]
				inc_arr_v(pos-1);
 800414a:	f7ff ff5d 	bl	8004008 <inc_arr_v>
 800414e:	e772      	b.n	8004036 <inc_arr_v+0x2e>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8004150:	7862      	ldrb	r2, [r4, #1]
 8004152:	2a32      	cmp	r2, #50	; 0x32
 8004154:	d190      	bne.n	8004078 <inc_arr_v+0x70>
 8004156:	78e2      	ldrb	r2, [r4, #3]
 8004158:	2a30      	cmp	r2, #48	; 0x30
 800415a:	d18d      	bne.n	8004078 <inc_arr_v+0x70>
 800415c:	7922      	ldrb	r2, [r4, #4]
 800415e:	2a30      	cmp	r2, #48	; 0x30
 8004160:	d18a      	bne.n	8004078 <inc_arr_v+0x70>
 8004162:	e795      	b.n	8004090 <inc_arr_v+0x88>
	for(int i = 0; i < keypadlength; i++){
 8004164:	2301      	movs	r3, #1
 8004166:	e77c      	b.n	8004062 <inc_arr_v+0x5a>
 8004168:	2302      	movs	r3, #2
 800416a:	e77a      	b.n	8004062 <inc_arr_v+0x5a>
 800416c:	2303      	movs	r3, #3
 800416e:	e778      	b.n	8004062 <inc_arr_v+0x5a>
 8004170:	4c00      	ldr	r4, [pc, #0]	; (8004174 <inc_arr_v+0x16c>)
 8004172:	e758      	b.n	8004026 <inc_arr_v+0x1e>
 8004174:	20000000 	.word	0x20000000
 8004178:	20000005 	.word	0x20000005

0800417c <inc_arr_a>:
void inc_arr_a(int8_t pos){
 800417c:	b510      	push	{r4, lr}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 800417e:	b9d0      	cbnz	r0, 80041b6 <inc_arr_a+0x3a>
 8004180:	4c45      	ldr	r4, [pc, #276]	; (8004298 <inc_arr_a+0x11c>)
		keypadarr[0] = '0';
 8004182:	2330      	movs	r3, #48	; 0x30
		keypadarr[1] = '.';
 8004184:	212e      	movs	r1, #46	; 0x2e
		keypadarr[2] = '8';
 8004186:	2238      	movs	r2, #56	; 0x38
		keypadarr[0] = '0';
 8004188:	7023      	strb	r3, [r4, #0]
		keypadarr[1] = '.';
 800418a:	7061      	strb	r1, [r4, #1]
		keypadarr[2] = '8';
 800418c:	70a2      	strb	r2, [r4, #2]
		keypadarr[3] = '0';
 800418e:	70e3      	strb	r3, [r4, #3]
		keypadarr[4] = '0';
 8004190:	7123      	strb	r3, [r4, #4]
		if(keypadarr[i] != 'z'){
 8004192:	7823      	ldrb	r3, [r4, #0]
 8004194:	2b7a      	cmp	r3, #122	; 0x7a
 8004196:	d119      	bne.n	80041cc <inc_arr_a+0x50>
 8004198:	7863      	ldrb	r3, [r4, #1]
 800419a:	2b7a      	cmp	r3, #122	; 0x7a
 800419c:	d173      	bne.n	8004286 <inc_arr_a+0x10a>
 800419e:	78a3      	ldrb	r3, [r4, #2]
 80041a0:	2b7a      	cmp	r3, #122	; 0x7a
 80041a2:	d172      	bne.n	800428a <inc_arr_a+0x10e>
 80041a4:	78e3      	ldrb	r3, [r4, #3]
 80041a6:	2b7a      	cmp	r3, #122	; 0x7a
 80041a8:	d171      	bne.n	800428e <inc_arr_a+0x112>
 80041aa:	7923      	ldrb	r3, [r4, #4]
 80041ac:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 80041ae:	bf18      	it	ne
 80041b0:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 80041b2:	d10c      	bne.n	80041ce <inc_arr_a+0x52>
}
 80041b4:	bd10      	pop	{r4, pc}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 80041b6:	2802      	cmp	r0, #2
 80041b8:	4603      	mov	r3, r0
 80041ba:	d00d      	beq.n	80041d8 <inc_arr_a+0x5c>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80041bc:	2803      	cmp	r0, #3
 80041be:	d020      	beq.n	8004202 <inc_arr_a+0x86>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 80041c0:	2804      	cmp	r0, #4
 80041c2:	d02c      	beq.n	800421e <inc_arr_a+0xa2>
		if(pos >= 0 && pos != 1){
 80041c4:	2800      	cmp	r0, #0
 80041c6:	da16      	bge.n	80041f6 <inc_arr_a+0x7a>
 80041c8:	4c33      	ldr	r4, [pc, #204]	; (8004298 <inc_arr_a+0x11c>)
 80041ca:	e7e2      	b.n	8004192 <inc_arr_a+0x16>
	for(int i = 0; i < keypadlength; i++){
 80041cc:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 80041ce:	4a33      	ldr	r2, [pc, #204]	; (800429c <inc_arr_a+0x120>)
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b25b      	sxtb	r3, r3
 80041d4:	7013      	strb	r3, [r2, #0]
}
 80041d6:	bd10      	pop	{r4, pc}
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 80041d8:	4c2f      	ldr	r4, [pc, #188]	; (8004298 <inc_arr_a+0x11c>)
 80041da:	7822      	ldrb	r2, [r4, #0]
 80041dc:	2a30      	cmp	r2, #48	; 0x30
 80041de:	d033      	beq.n	8004248 <inc_arr_a+0xcc>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80041e0:	7822      	ldrb	r2, [r4, #0]
 80041e2:	2a30      	cmp	r2, #48	; 0x30
 80041e4:	d03a      	beq.n	800425c <inc_arr_a+0xe0>
			if(keypadarr[pos] < '9'){
 80041e6:	5ce2      	ldrb	r2, [r4, r3]
 80041e8:	2a38      	cmp	r2, #56	; 0x38
 80041ea:	d826      	bhi.n	800423a <inc_arr_a+0xbe>
				keypadarr[pos]++;
 80041ec:	5ce2      	ldrb	r2, [r4, r3]
 80041ee:	3201      	adds	r2, #1
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	54e2      	strb	r2, [r4, r3]
 80041f4:	e7cd      	b.n	8004192 <inc_arr_a+0x16>
		if(pos >= 0 && pos != 1){
 80041f6:	2801      	cmp	r0, #1
 80041f8:	d14b      	bne.n	8004292 <inc_arr_a+0x116>
			inc_arr_a(pos-1);
 80041fa:	2000      	movs	r0, #0
 80041fc:	f7ff ffbe 	bl	800417c <inc_arr_a>
 8004200:	e7e2      	b.n	80041c8 <inc_arr_a+0x4c>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004202:	4c25      	ldr	r4, [pc, #148]	; (8004298 <inc_arr_a+0x11c>)
 8004204:	7822      	ldrb	r2, [r4, #0]
 8004206:	2a30      	cmp	r2, #48	; 0x30
 8004208:	d032      	beq.n	8004270 <inc_arr_a+0xf4>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 800420a:	7822      	ldrb	r2, [r4, #0]
 800420c:	2a30      	cmp	r2, #48	; 0x30
 800420e:	d1ea      	bne.n	80041e6 <inc_arr_a+0x6a>
 8004210:	78a2      	ldrb	r2, [r4, #2]
 8004212:	2a37      	cmp	r2, #55	; 0x37
 8004214:	d1e7      	bne.n	80041e6 <inc_arr_a+0x6a>
 8004216:	78e2      	ldrb	r2, [r4, #3]
 8004218:	2a39      	cmp	r2, #57	; 0x39
 800421a:	d1e4      	bne.n	80041e6 <inc_arr_a+0x6a>
 800421c:	e024      	b.n	8004268 <inc_arr_a+0xec>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 800421e:	4c1e      	ldr	r4, [pc, #120]	; (8004298 <inc_arr_a+0x11c>)
 8004220:	7822      	ldrb	r2, [r4, #0]
 8004222:	2a30      	cmp	r2, #48	; 0x30
 8004224:	d1df      	bne.n	80041e6 <inc_arr_a+0x6a>
 8004226:	78a2      	ldrb	r2, [r4, #2]
 8004228:	2a38      	cmp	r2, #56	; 0x38
 800422a:	d1dc      	bne.n	80041e6 <inc_arr_a+0x6a>
 800422c:	78e2      	ldrb	r2, [r4, #3]
 800422e:	2a30      	cmp	r2, #48	; 0x30
 8004230:	d1d9      	bne.n	80041e6 <inc_arr_a+0x6a>
 8004232:	7922      	ldrb	r2, [r4, #4]
 8004234:	2a30      	cmp	r2, #48	; 0x30
 8004236:	d1d6      	bne.n	80041e6 <inc_arr_a+0x6a>
 8004238:	e7a3      	b.n	8004182 <inc_arr_a+0x6>
				keypadarr[pos] = '0';
 800423a:	2230      	movs	r2, #48	; 0x30
				inc_arr_a(pos-1);
 800423c:	1e58      	subs	r0, r3, #1
 800423e:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 8004240:	54e2      	strb	r2, [r4, r3]
				inc_arr_a(pos-1);
 8004242:	f7ff ff9b 	bl	800417c <inc_arr_a>
 8004246:	e7a4      	b.n	8004192 <inc_arr_a+0x16>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8004248:	78a2      	ldrb	r2, [r4, #2]
 800424a:	2a38      	cmp	r2, #56	; 0x38
 800424c:	d1c8      	bne.n	80041e0 <inc_arr_a+0x64>
 800424e:	78e2      	ldrb	r2, [r4, #3]
 8004250:	2a30      	cmp	r2, #48	; 0x30
 8004252:	d1c5      	bne.n	80041e0 <inc_arr_a+0x64>
 8004254:	7922      	ldrb	r2, [r4, #4]
 8004256:	2a30      	cmp	r2, #48	; 0x30
 8004258:	d1c2      	bne.n	80041e0 <inc_arr_a+0x64>
 800425a:	e792      	b.n	8004182 <inc_arr_a+0x6>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800425c:	78a2      	ldrb	r2, [r4, #2]
 800425e:	2a37      	cmp	r2, #55	; 0x37
 8004260:	d1c1      	bne.n	80041e6 <inc_arr_a+0x6a>
 8004262:	78e2      	ldrb	r2, [r4, #3]
 8004264:	2a30      	cmp	r2, #48	; 0x30
 8004266:	d88c      	bhi.n	8004182 <inc_arr_a+0x6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 8004268:	7922      	ldrb	r2, [r4, #4]
 800426a:	2a30      	cmp	r2, #48	; 0x30
 800426c:	d9bb      	bls.n	80041e6 <inc_arr_a+0x6a>
 800426e:	e788      	b.n	8004182 <inc_arr_a+0x6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004270:	78a2      	ldrb	r2, [r4, #2]
 8004272:	2a38      	cmp	r2, #56	; 0x38
 8004274:	d1c9      	bne.n	800420a <inc_arr_a+0x8e>
 8004276:	78e2      	ldrb	r2, [r4, #3]
 8004278:	2a30      	cmp	r2, #48	; 0x30
 800427a:	d1c6      	bne.n	800420a <inc_arr_a+0x8e>
 800427c:	7922      	ldrb	r2, [r4, #4]
 800427e:	2a2f      	cmp	r2, #47	; 0x2f
 8004280:	f63f af7f 	bhi.w	8004182 <inc_arr_a+0x6>
 8004284:	e7c1      	b.n	800420a <inc_arr_a+0x8e>
	for(int i = 0; i < keypadlength; i++){
 8004286:	2301      	movs	r3, #1
 8004288:	e7a1      	b.n	80041ce <inc_arr_a+0x52>
 800428a:	2302      	movs	r3, #2
 800428c:	e79f      	b.n	80041ce <inc_arr_a+0x52>
 800428e:	2303      	movs	r3, #3
 8004290:	e79d      	b.n	80041ce <inc_arr_a+0x52>
 8004292:	4c01      	ldr	r4, [pc, #4]	; (8004298 <inc_arr_a+0x11c>)
 8004294:	e7a7      	b.n	80041e6 <inc_arr_a+0x6a>
 8004296:	bf00      	nop
 8004298:	20000000 	.word	0x20000000
 800429c:	20000005 	.word	0x20000005

080042a0 <dec_arr_v>:
void dec_arr_v(int8_t pos){
 80042a0:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 80042a2:	4603      	mov	r3, r0
 80042a4:	4c4b      	ldr	r4, [pc, #300]	; (80043d4 <dec_arr_v+0x134>)
 80042a6:	b9d8      	cbnz	r0, 80042e0 <dec_arr_v+0x40>
 80042a8:	7822      	ldrb	r2, [r4, #0]
 80042aa:	2a30      	cmp	r2, #48	; 0x30
 80042ac:	d020      	beq.n	80042f0 <dec_arr_v+0x50>
			if(keypadarr[pos] > '0'){
 80042ae:	5ce2      	ldrb	r2, [r4, r3]
 80042b0:	2a30      	cmp	r2, #48	; 0x30
 80042b2:	d969      	bls.n	8004388 <dec_arr_v+0xe8>
				keypadarr[pos]--;
 80042b4:	5ce2      	ldrb	r2, [r4, r3]
 80042b6:	3a01      	subs	r2, #1
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	54e2      	strb	r2, [r4, r3]
		if(keypadarr[i] != 'z'){
 80042bc:	7823      	ldrb	r3, [r4, #0]
 80042be:	2b7a      	cmp	r3, #122	; 0x7a
 80042c0:	d15c      	bne.n	800437c <dec_arr_v+0xdc>
 80042c2:	7863      	ldrb	r3, [r4, #1]
 80042c4:	2b7a      	cmp	r3, #122	; 0x7a
 80042c6:	d166      	bne.n	8004396 <dec_arr_v+0xf6>
 80042c8:	78a3      	ldrb	r3, [r4, #2]
 80042ca:	2b7a      	cmp	r3, #122	; 0x7a
 80042cc:	d165      	bne.n	800439a <dec_arr_v+0xfa>
 80042ce:	78e3      	ldrb	r3, [r4, #3]
 80042d0:	2b7a      	cmp	r3, #122	; 0x7a
 80042d2:	d164      	bne.n	800439e <dec_arr_v+0xfe>
 80042d4:	7923      	ldrb	r3, [r4, #4]
 80042d6:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 80042d8:	bf18      	it	ne
 80042da:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 80042dc:	d14f      	bne.n	800437e <dec_arr_v+0xde>
}
 80042de:	bd10      	pop	{r4, pc}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 80042e0:	2801      	cmp	r0, #1
 80042e2:	d10d      	bne.n	8004300 <dec_arr_v+0x60>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 80042e4:	7822      	ldrb	r2, [r4, #0]
 80042e6:	2a30      	cmp	r2, #48	; 0x30
 80042e8:	d1e1      	bne.n	80042ae <dec_arr_v+0xe>
 80042ea:	7862      	ldrb	r2, [r4, #1]
 80042ec:	2a30      	cmp	r2, #48	; 0x30
 80042ee:	d1de      	bne.n	80042ae <dec_arr_v+0xe>
		keypadarr[0] = '0';
 80042f0:	2330      	movs	r3, #48	; 0x30
		keypadarr[2] = '.';
 80042f2:	222e      	movs	r2, #46	; 0x2e
		keypadarr[0] = '0';
 80042f4:	7023      	strb	r3, [r4, #0]
		keypadarr[1] = '0';
 80042f6:	7063      	strb	r3, [r4, #1]
		keypadarr[2] = '.';
 80042f8:	70a2      	strb	r2, [r4, #2]
		keypadarr[3] = '0';
 80042fa:	70e3      	strb	r3, [r4, #3]
		keypadarr[4] = '0';
 80042fc:	7123      	strb	r3, [r4, #4]
 80042fe:	e7dd      	b.n	80042bc <dec_arr_v+0x1c>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004300:	2803      	cmp	r0, #3
 8004302:	d031      	beq.n	8004368 <dec_arr_v+0xc8>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 8004304:	2804      	cmp	r0, #4
 8004306:	d10c      	bne.n	8004322 <dec_arr_v+0x82>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 8004308:	7822      	ldrb	r2, [r4, #0]
 800430a:	2a30      	cmp	r2, #48	; 0x30
 800430c:	d1cf      	bne.n	80042ae <dec_arr_v+0xe>
 800430e:	7862      	ldrb	r2, [r4, #1]
 8004310:	2a30      	cmp	r2, #48	; 0x30
 8004312:	d1cc      	bne.n	80042ae <dec_arr_v+0xe>
 8004314:	78e2      	ldrb	r2, [r4, #3]
 8004316:	2a30      	cmp	r2, #48	; 0x30
 8004318:	d1c9      	bne.n	80042ae <dec_arr_v+0xe>
 800431a:	7922      	ldrb	r2, [r4, #4]
 800431c:	2a30      	cmp	r2, #48	; 0x30
 800431e:	d1c6      	bne.n	80042ae <dec_arr_v+0xe>
 8004320:	e7e6      	b.n	80042f0 <dec_arr_v+0x50>
		if(pos <= 4 && pos != 2){
 8004322:	dccb      	bgt.n	80042bc <dec_arr_v+0x1c>
 8004324:	2802      	cmp	r0, #2
 8004326:	d1c2      	bne.n	80042ae <dec_arr_v+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004328:	7823      	ldrb	r3, [r4, #0]
 800432a:	2b30      	cmp	r3, #48	; 0x30
 800432c:	d039      	beq.n	80043a2 <dec_arr_v+0x102>
			if(keypadarr[pos] > '0'){
 800432e:	7863      	ldrb	r3, [r4, #1]
 8004330:	2b30      	cmp	r3, #48	; 0x30
 8004332:	d941      	bls.n	80043b8 <dec_arr_v+0x118>
				keypadarr[pos]--;
 8004334:	7863      	ldrb	r3, [r4, #1]
 8004336:	3b01      	subs	r3, #1
 8004338:	b2db      	uxtb	r3, r3
 800433a:	7063      	strb	r3, [r4, #1]
		if(keypadarr[i] != 'z'){
 800433c:	7823      	ldrb	r3, [r4, #0]
 800433e:	2b7a      	cmp	r3, #122	; 0x7a
 8004340:	d140      	bne.n	80043c4 <dec_arr_v+0x124>
 8004342:	7863      	ldrb	r3, [r4, #1]
 8004344:	2b7a      	cmp	r3, #122	; 0x7a
 8004346:	d13f      	bne.n	80043c8 <dec_arr_v+0x128>
 8004348:	78a3      	ldrb	r3, [r4, #2]
 800434a:	2b7a      	cmp	r3, #122	; 0x7a
 800434c:	d13e      	bne.n	80043cc <dec_arr_v+0x12c>
 800434e:	78e3      	ldrb	r3, [r4, #3]
 8004350:	2b7a      	cmp	r3, #122	; 0x7a
 8004352:	d13d      	bne.n	80043d0 <dec_arr_v+0x130>
 8004354:	7923      	ldrb	r3, [r4, #4]
 8004356:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004358:	bf18      	it	ne
 800435a:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 800435c:	d0ae      	beq.n	80042bc <dec_arr_v+0x1c>
			keypaditerator = i - 1;
 800435e:	4a1e      	ldr	r2, [pc, #120]	; (80043d8 <dec_arr_v+0x138>)
 8004360:	3b01      	subs	r3, #1
 8004362:	b25b      	sxtb	r3, r3
 8004364:	7013      	strb	r3, [r2, #0]
			break;
 8004366:	e7a9      	b.n	80042bc <dec_arr_v+0x1c>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 8004368:	7822      	ldrb	r2, [r4, #0]
 800436a:	2a30      	cmp	r2, #48	; 0x30
 800436c:	d19f      	bne.n	80042ae <dec_arr_v+0xe>
 800436e:	7862      	ldrb	r2, [r4, #1]
 8004370:	2a30      	cmp	r2, #48	; 0x30
 8004372:	d19c      	bne.n	80042ae <dec_arr_v+0xe>
 8004374:	78e2      	ldrb	r2, [r4, #3]
 8004376:	2a30      	cmp	r2, #48	; 0x30
 8004378:	d199      	bne.n	80042ae <dec_arr_v+0xe>
 800437a:	e7b9      	b.n	80042f0 <dec_arr_v+0x50>
	for(int i = 0; i < keypadlength; i++){
 800437c:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 800437e:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <dec_arr_v+0x138>)
 8004380:	3b01      	subs	r3, #1
 8004382:	b25b      	sxtb	r3, r3
 8004384:	7013      	strb	r3, [r2, #0]
}
 8004386:	bd10      	pop	{r4, pc}
				keypadarr[pos] = '9';
 8004388:	2239      	movs	r2, #57	; 0x39
				dec_arr_v(pos-1);
 800438a:	1e58      	subs	r0, r3, #1
 800438c:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 800438e:	54e2      	strb	r2, [r4, r3]
				dec_arr_v(pos-1);
 8004390:	f7ff ff86 	bl	80042a0 <dec_arr_v>
 8004394:	e792      	b.n	80042bc <dec_arr_v+0x1c>
	for(int i = 0; i < keypadlength; i++){
 8004396:	2301      	movs	r3, #1
 8004398:	e7f1      	b.n	800437e <dec_arr_v+0xde>
 800439a:	2302      	movs	r3, #2
 800439c:	e7ef      	b.n	800437e <dec_arr_v+0xde>
 800439e:	2303      	movs	r3, #3
 80043a0:	e7ed      	b.n	800437e <dec_arr_v+0xde>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 80043a2:	7863      	ldrb	r3, [r4, #1]
 80043a4:	2b30      	cmp	r3, #48	; 0x30
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	d1c1      	bne.n	800432e <dec_arr_v+0x8e>
		keypadarr[2] = '.';
 80043aa:	232e      	movs	r3, #46	; 0x2e
		keypadarr[0] = '0';
 80043ac:	7022      	strb	r2, [r4, #0]
		keypadarr[1] = '0';
 80043ae:	7062      	strb	r2, [r4, #1]
		keypadarr[2] = '.';
 80043b0:	70a3      	strb	r3, [r4, #2]
		keypadarr[3] = '0';
 80043b2:	70e2      	strb	r2, [r4, #3]
		keypadarr[4] = '0';
 80043b4:	7122      	strb	r2, [r4, #4]
 80043b6:	e7c1      	b.n	800433c <dec_arr_v+0x9c>
				keypadarr[pos] = '9';
 80043b8:	2339      	movs	r3, #57	; 0x39
				dec_arr_v(pos-1);
 80043ba:	2000      	movs	r0, #0
				keypadarr[pos] = '9';
 80043bc:	7063      	strb	r3, [r4, #1]
				dec_arr_v(pos-1);
 80043be:	f7ff ff6f 	bl	80042a0 <dec_arr_v>
 80043c2:	e7bb      	b.n	800433c <dec_arr_v+0x9c>
	for(int i = 0; i < keypadlength; i++){
 80043c4:	2300      	movs	r3, #0
 80043c6:	e7ca      	b.n	800435e <dec_arr_v+0xbe>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e7c8      	b.n	800435e <dec_arr_v+0xbe>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e7c6      	b.n	800435e <dec_arr_v+0xbe>
 80043d0:	2303      	movs	r3, #3
 80043d2:	e7c4      	b.n	800435e <dec_arr_v+0xbe>
 80043d4:	20000000 	.word	0x20000000
 80043d8:	20000005 	.word	0x20000005

080043dc <dec_arr_a>:
void dec_arr_a(int8_t pos){
 80043dc:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 80043de:	4603      	mov	r3, r0
 80043e0:	4c4a      	ldr	r4, [pc, #296]	; (800450c <dec_arr_a+0x130>)
 80043e2:	b950      	cbnz	r0, 80043fa <dec_arr_a+0x1e>
 80043e4:	7822      	ldrb	r2, [r4, #0]
 80043e6:	2a30      	cmp	r2, #48	; 0x30
 80043e8:	d03d      	beq.n	8004466 <dec_arr_a+0x8a>
			if(keypadarr[pos] > '0'){
 80043ea:	5ce2      	ldrb	r2, [r4, r3]
 80043ec:	2a30      	cmp	r2, #48	; 0x30
 80043ee:	d969      	bls.n	80044c4 <dec_arr_a+0xe8>
				keypadarr[pos]--;
 80043f0:	5ce2      	ldrb	r2, [r4, r3]
 80043f2:	3a01      	subs	r2, #1
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	54e2      	strb	r2, [r4, r3]
 80043f8:	e03c      	b.n	8004474 <dec_arr_a+0x98>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 80043fa:	2801      	cmp	r0, #1
 80043fc:	d123      	bne.n	8004446 <dec_arr_a+0x6a>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 80043fe:	7823      	ldrb	r3, [r4, #0]
 8004400:	2b30      	cmp	r3, #48	; 0x30
 8004402:	d05b      	beq.n	80044bc <dec_arr_a+0xe0>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004404:	7823      	ldrb	r3, [r4, #0]
 8004406:	2b30      	cmp	r3, #48	; 0x30
 8004408:	b2da      	uxtb	r2, r3
 800440a:	d06f      	beq.n	80044ec <dec_arr_a+0x110>
			if(keypadarr[pos] > '0'){
 800440c:	7823      	ldrb	r3, [r4, #0]
 800440e:	2b30      	cmp	r3, #48	; 0x30
 8004410:	d961      	bls.n	80044d6 <dec_arr_a+0xfa>
				keypadarr[pos]--;
 8004412:	7823      	ldrb	r3, [r4, #0]
 8004414:	3b01      	subs	r3, #1
 8004416:	b2db      	uxtb	r3, r3
 8004418:	7023      	strb	r3, [r4, #0]
		if(keypadarr[i] != 'z'){
 800441a:	7823      	ldrb	r3, [r4, #0]
 800441c:	2b7a      	cmp	r3, #122	; 0x7a
 800441e:	d16e      	bne.n	80044fe <dec_arr_a+0x122>
 8004420:	7863      	ldrb	r3, [r4, #1]
 8004422:	2b7a      	cmp	r3, #122	; 0x7a
 8004424:	d169      	bne.n	80044fa <dec_arr_a+0x11e>
 8004426:	78a3      	ldrb	r3, [r4, #2]
 8004428:	2b7a      	cmp	r3, #122	; 0x7a
 800442a:	d16a      	bne.n	8004502 <dec_arr_a+0x126>
 800442c:	78e3      	ldrb	r3, [r4, #3]
 800442e:	2b7a      	cmp	r3, #122	; 0x7a
 8004430:	d169      	bne.n	8004506 <dec_arr_a+0x12a>
 8004432:	7923      	ldrb	r3, [r4, #4]
 8004434:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004436:	bf18      	it	ne
 8004438:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 800443a:	d01b      	beq.n	8004474 <dec_arr_a+0x98>
			keypaditerator = i - 1;
 800443c:	4a34      	ldr	r2, [pc, #208]	; (8004510 <dec_arr_a+0x134>)
 800443e:	3b01      	subs	r3, #1
 8004440:	b25b      	sxtb	r3, r3
 8004442:	7013      	strb	r3, [r2, #0]
			break;
 8004444:	e016      	b.n	8004474 <dec_arr_a+0x98>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 8004446:	2803      	cmp	r0, #3
 8004448:	d026      	beq.n	8004498 <dec_arr_a+0xbc>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 800444a:	2804      	cmp	r0, #4
 800444c:	d134      	bne.n	80044b8 <dec_arr_a+0xdc>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 800444e:	7822      	ldrb	r2, [r4, #0]
 8004450:	2a30      	cmp	r2, #48	; 0x30
 8004452:	d1ca      	bne.n	80043ea <dec_arr_a+0xe>
 8004454:	78a2      	ldrb	r2, [r4, #2]
 8004456:	2a30      	cmp	r2, #48	; 0x30
 8004458:	d1c7      	bne.n	80043ea <dec_arr_a+0xe>
 800445a:	78e2      	ldrb	r2, [r4, #3]
 800445c:	2a30      	cmp	r2, #48	; 0x30
 800445e:	d1c4      	bne.n	80043ea <dec_arr_a+0xe>
 8004460:	7922      	ldrb	r2, [r4, #4]
 8004462:	2a30      	cmp	r2, #48	; 0x30
 8004464:	d1c1      	bne.n	80043ea <dec_arr_a+0xe>
		keypadarr[0] = '0';
 8004466:	2330      	movs	r3, #48	; 0x30
		keypadarr[1] = '.';
 8004468:	222e      	movs	r2, #46	; 0x2e
		keypadarr[0] = '0';
 800446a:	7023      	strb	r3, [r4, #0]
		keypadarr[1] = '.';
 800446c:	7062      	strb	r2, [r4, #1]
		keypadarr[2] = '0';
 800446e:	70a3      	strb	r3, [r4, #2]
		keypadarr[3] = '0';
 8004470:	70e3      	strb	r3, [r4, #3]
		keypadarr[4] = '0';
 8004472:	7123      	strb	r3, [r4, #4]
		if(keypadarr[i] != 'z'){
 8004474:	7823      	ldrb	r3, [r4, #0]
 8004476:	2b7a      	cmp	r3, #122	; 0x7a
 8004478:	d118      	bne.n	80044ac <dec_arr_a+0xd0>
 800447a:	7863      	ldrb	r3, [r4, #1]
 800447c:	2b7a      	cmp	r3, #122	; 0x7a
 800447e:	d128      	bne.n	80044d2 <dec_arr_a+0xf6>
 8004480:	78a3      	ldrb	r3, [r4, #2]
 8004482:	2b7a      	cmp	r3, #122	; 0x7a
 8004484:	d12e      	bne.n	80044e4 <dec_arr_a+0x108>
 8004486:	78e3      	ldrb	r3, [r4, #3]
 8004488:	2b7a      	cmp	r3, #122	; 0x7a
 800448a:	d12d      	bne.n	80044e8 <dec_arr_a+0x10c>
 800448c:	7923      	ldrb	r3, [r4, #4]
 800448e:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004490:	bf18      	it	ne
 8004492:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004494:	d10b      	bne.n	80044ae <dec_arr_a+0xd2>
}
 8004496:	bd10      	pop	{r4, pc}
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 8004498:	7822      	ldrb	r2, [r4, #0]
 800449a:	2a30      	cmp	r2, #48	; 0x30
 800449c:	d1a5      	bne.n	80043ea <dec_arr_a+0xe>
 800449e:	78a2      	ldrb	r2, [r4, #2]
 80044a0:	2a30      	cmp	r2, #48	; 0x30
 80044a2:	d1a2      	bne.n	80043ea <dec_arr_a+0xe>
 80044a4:	78e2      	ldrb	r2, [r4, #3]
 80044a6:	2a30      	cmp	r2, #48	; 0x30
 80044a8:	d19f      	bne.n	80043ea <dec_arr_a+0xe>
 80044aa:	e7dc      	b.n	8004466 <dec_arr_a+0x8a>
	for(int i = 0; i < keypadlength; i++){
 80044ac:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 80044ae:	4a18      	ldr	r2, [pc, #96]	; (8004510 <dec_arr_a+0x134>)
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b25b      	sxtb	r3, r3
 80044b4:	7013      	strb	r3, [r2, #0]
}
 80044b6:	bd10      	pop	{r4, pc}
		if(pos <= 4 && pos != 1){
 80044b8:	dcdc      	bgt.n	8004474 <dec_arr_a+0x98>
 80044ba:	e796      	b.n	80043ea <dec_arr_a+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 80044bc:	78a3      	ldrb	r3, [r4, #2]
 80044be:	2b30      	cmp	r3, #48	; 0x30
 80044c0:	d1a0      	bne.n	8004404 <dec_arr_a+0x28>
 80044c2:	e7d0      	b.n	8004466 <dec_arr_a+0x8a>
				keypadarr[pos] = '9';
 80044c4:	2239      	movs	r2, #57	; 0x39
				dec_arr_a(pos-1);
 80044c6:	1e58      	subs	r0, r3, #1
 80044c8:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 80044ca:	54e2      	strb	r2, [r4, r3]
				dec_arr_a(pos-1);
 80044cc:	f7ff ff86 	bl	80043dc <dec_arr_a>
 80044d0:	e7d0      	b.n	8004474 <dec_arr_a+0x98>
	for(int i = 0; i < keypadlength; i++){
 80044d2:	2301      	movs	r3, #1
 80044d4:	e7eb      	b.n	80044ae <dec_arr_a+0xd2>
				keypadarr[pos] = '9';
 80044d6:	2339      	movs	r3, #57	; 0x39
				dec_arr_a(pos-1);
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
				keypadarr[pos] = '9';
 80044dc:	7023      	strb	r3, [r4, #0]
				dec_arr_a(pos-1);
 80044de:	f7ff ff7d 	bl	80043dc <dec_arr_a>
 80044e2:	e79a      	b.n	800441a <dec_arr_a+0x3e>
	for(int i = 0; i < keypadlength; i++){
 80044e4:	2302      	movs	r3, #2
 80044e6:	e7e2      	b.n	80044ae <dec_arr_a+0xd2>
 80044e8:	2303      	movs	r3, #3
 80044ea:	e7e0      	b.n	80044ae <dec_arr_a+0xd2>
		keypadarr[1] = '.';
 80044ec:	232e      	movs	r3, #46	; 0x2e
		keypadarr[0] = '0';
 80044ee:	7022      	strb	r2, [r4, #0]
		keypadarr[1] = '.';
 80044f0:	7063      	strb	r3, [r4, #1]
		keypadarr[2] = '0';
 80044f2:	70a2      	strb	r2, [r4, #2]
		keypadarr[3] = '0';
 80044f4:	70e2      	strb	r2, [r4, #3]
		keypadarr[4] = '0';
 80044f6:	7122      	strb	r2, [r4, #4]
 80044f8:	e78f      	b.n	800441a <dec_arr_a+0x3e>
	for(int i = 0; i < keypadlength; i++){
 80044fa:	2301      	movs	r3, #1
 80044fc:	e79e      	b.n	800443c <dec_arr_a+0x60>
 80044fe:	2300      	movs	r3, #0
 8004500:	e79c      	b.n	800443c <dec_arr_a+0x60>
 8004502:	2302      	movs	r3, #2
 8004504:	e79a      	b.n	800443c <dec_arr_a+0x60>
 8004506:	2303      	movs	r3, #3
 8004508:	e798      	b.n	800443c <dec_arr_a+0x60>
 800450a:	bf00      	nop
 800450c:	20000000 	.word	0x20000000
 8004510:	20000005 	.word	0x20000005
 8004514:	00000000 	.word	0x00000000

08004518 <keypad_sm>:
void keypad_sm(char num){
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(kpenum == WAIT){
 800451a:	4e9b      	ldr	r6, [pc, #620]	; (8004788 <keypad_sm+0x270>)
 800451c:	7834      	ldrb	r4, [r6, #0]
 800451e:	b994      	cbnz	r4, 8004546 <keypad_sm+0x2e>
		if(num == 'A'){
 8004520:	2841      	cmp	r0, #65	; 0x41
 8004522:	f000 80a6 	beq.w	8004672 <keypad_sm+0x15a>
		else if(num == 'B'){
 8004526:	2842      	cmp	r0, #66	; 0x42
 8004528:	f000 813c 	beq.w	80047a4 <keypad_sm+0x28c>
		else if(num == 'C'){
 800452c:	2843      	cmp	r0, #67	; 0x43
 800452e:	f000 8101 	beq.w	8004734 <keypad_sm+0x21c>
		else if(num == 'D'){
 8004532:	2844      	cmp	r0, #68	; 0x44
 8004534:	f000 8303 	beq.w	8004b3e <keypad_sm+0x626>
		else if(num == '*'){
 8004538:	282a      	cmp	r0, #42	; 0x2a
 800453a:	f000 8329 	beq.w	8004b90 <keypad_sm+0x678>
		else if(num == '/'){
 800453e:	282f      	cmp	r0, #47	; 0x2f
 8004540:	f000 82a2 	beq.w	8004a88 <keypad_sm+0x570>
}
 8004544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(kpenum == V1){
 8004546:	2c01      	cmp	r4, #1
 8004548:	d04d      	beq.n	80045e6 <keypad_sm+0xce>
	else if(kpenum == A1){
 800454a:	2c02      	cmp	r4, #2
 800454c:	f000 8153 	beq.w	80047f6 <keypad_sm+0x2de>
	else if(kpenum == V2){
 8004550:	2c03      	cmp	r4, #3
 8004552:	f000 80b7 	beq.w	80046c4 <keypad_sm+0x1ac>
	else if(kpenum == A2){
 8004556:	2c04      	cmp	r4, #4
 8004558:	d1f4      	bne.n	8004544 <keypad_sm+0x2c>
		if(encmode){
 800455a:	4c8c      	ldr	r4, [pc, #560]	; (800478c <keypad_sm+0x274>)
 800455c:	7823      	ldrb	r3, [r4, #0]
 800455e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 831c 	beq.w	8004ba0 <keypad_sm+0x688>
			if(num == 'A'){
 8004568:	2841      	cmp	r0, #65	; 0x41
 800456a:	f000 8565 	beq.w	8005038 <keypad_sm+0xb20>
			else if(num == 'B'){
 800456e:	2842      	cmp	r0, #66	; 0x42
 8004570:	f000 8736 	beq.w	80053e0 <keypad_sm+0xec8>
			else if(num == 'C'){
 8004574:	2843      	cmp	r0, #67	; 0x43
 8004576:	f001 8018 	beq.w	80055aa <keypad_sm+0x1092>
			else if(num == 'D'){
 800457a:	2844      	cmp	r0, #68	; 0x44
 800457c:	f001 82d0 	beq.w	8005b20 <keypad_sm+0x1608>
			else if(num == '.'){
 8004580:	282e      	cmp	r0, #46	; 0x2e
 8004582:	f001 81d4 	beq.w	800592e <keypad_sm+0x1416>
			else if(num >= '0' && num <= '9'){
 8004586:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800458a:	2b09      	cmp	r3, #9
 800458c:	f201 8254 	bhi.w	8005a38 <keypad_sm+0x1520>
				keypaddecimal = 0;
 8004590:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8004592:	207a      	movs	r0, #122	; 0x7a
 8004594:	4b7e      	ldr	r3, [pc, #504]	; (8004790 <keypad_sm+0x278>)
			if(keypadarr[4] == '.'){
 8004596:	4a7f      	ldr	r2, [pc, #508]	; (8004794 <keypad_sm+0x27c>)
				keypaddecimal = 0;
 8004598:	4d7f      	ldr	r5, [pc, #508]	; (8004798 <keypad_sm+0x280>)
	while(keypaditerator < 4){
 800459a:	7819      	ldrb	r1, [r3, #0]
 800459c:	b249      	sxtb	r1, r1
 800459e:	2903      	cmp	r1, #3
 80045a0:	dc1c      	bgt.n	80045dc <keypad_sm+0xc4>
		if(keypaditerator < keypadlength-1){
 80045a2:	7819      	ldrb	r1, [r3, #0]
 80045a4:	b249      	sxtb	r1, r1
 80045a6:	2903      	cmp	r1, #3
 80045a8:	dcf7      	bgt.n	800459a <keypad_sm+0x82>
			if(keypadarr[4] == '.'){
 80045aa:	7911      	ldrb	r1, [r2, #4]
 80045ac:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80045ae:	bf08      	it	eq
 80045b0:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80045b2:	78d1      	ldrb	r1, [r2, #3]
 80045b4:	b2c9      	uxtb	r1, r1
 80045b6:	7111      	strb	r1, [r2, #4]
 80045b8:	7891      	ldrb	r1, [r2, #2]
 80045ba:	b2c9      	uxtb	r1, r1
 80045bc:	70d1      	strb	r1, [r2, #3]
 80045be:	7851      	ldrb	r1, [r2, #1]
 80045c0:	b2c9      	uxtb	r1, r1
 80045c2:	7091      	strb	r1, [r2, #2]
 80045c4:	7811      	ldrb	r1, [r2, #0]
 80045c6:	b2c9      	uxtb	r1, r1
 80045c8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80045ca:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80045cc:	7819      	ldrb	r1, [r3, #0]
 80045ce:	3101      	adds	r1, #1
 80045d0:	b249      	sxtb	r1, r1
 80045d2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80045d4:	7819      	ldrb	r1, [r3, #0]
 80045d6:	b249      	sxtb	r1, r1
 80045d8:	2903      	cmp	r1, #3
 80045da:	dde2      	ble.n	80045a2 <keypad_sm+0x8a>
				encmode = 0;
 80045dc:	2300      	movs	r3, #0
				encpos = 0;
 80045de:	4a6f      	ldr	r2, [pc, #444]	; (800479c <keypad_sm+0x284>)
				encmode = 0;
 80045e0:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80045e2:	7013      	strb	r3, [r2, #0]
}
 80045e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(encmode){
 80045e6:	4c69      	ldr	r4, [pc, #420]	; (800478c <keypad_sm+0x274>)
 80045e8:	7823      	ldrb	r3, [r4, #0]
 80045ea:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8146 	beq.w	8004880 <keypad_sm+0x368>
			if(num == 'A'){
 80045f4:	2841      	cmp	r0, #65	; 0x41
 80045f6:	f000 8304 	beq.w	8004c02 <keypad_sm+0x6ea>
			else if(num == 'B'){
 80045fa:	2842      	cmp	r0, #66	; 0x42
 80045fc:	f000 81e1 	beq.w	80049c2 <keypad_sm+0x4aa>
			else if(num == 'C'){
 8004600:	2843      	cmp	r0, #67	; 0x43
 8004602:	f000 83b4 	beq.w	8004d6e <keypad_sm+0x856>
			else if(num == 'D'){
 8004606:	2844      	cmp	r0, #68	; 0x44
 8004608:	f000 845c 	beq.w	8004ec4 <keypad_sm+0x9ac>
			else if(num == '.'){
 800460c:	282e      	cmp	r0, #46	; 0x2e
 800460e:	f000 8659 	beq.w	80052c4 <keypad_sm+0xdac>
			else if(num >= '0' && num <= '9'){
 8004612:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004616:	2b09      	cmp	r3, #9
 8004618:	f200 863b 	bhi.w	8005292 <keypad_sm+0xd7a>
				keypaddecimal = 0;
 800461c:	2600      	movs	r6, #0
			keypadarr[0] = num;
 800461e:	207a      	movs	r0, #122	; 0x7a
 8004620:	4b5b      	ldr	r3, [pc, #364]	; (8004790 <keypad_sm+0x278>)
			if(keypadarr[4] == '.'){
 8004622:	4a5c      	ldr	r2, [pc, #368]	; (8004794 <keypad_sm+0x27c>)
				keypaddecimal = 0;
 8004624:	4d5c      	ldr	r5, [pc, #368]	; (8004798 <keypad_sm+0x280>)
	while(keypaditerator < 4){
 8004626:	7819      	ldrb	r1, [r3, #0]
 8004628:	b249      	sxtb	r1, r1
 800462a:	2903      	cmp	r1, #3
 800462c:	dc1c      	bgt.n	8004668 <keypad_sm+0x150>
		if(keypaditerator < keypadlength-1){
 800462e:	7819      	ldrb	r1, [r3, #0]
 8004630:	b249      	sxtb	r1, r1
 8004632:	2903      	cmp	r1, #3
 8004634:	dcf7      	bgt.n	8004626 <keypad_sm+0x10e>
			if(keypadarr[4] == '.'){
 8004636:	7911      	ldrb	r1, [r2, #4]
 8004638:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800463a:	bf08      	it	eq
 800463c:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800463e:	78d1      	ldrb	r1, [r2, #3]
 8004640:	b2c9      	uxtb	r1, r1
 8004642:	7111      	strb	r1, [r2, #4]
 8004644:	7891      	ldrb	r1, [r2, #2]
 8004646:	b2c9      	uxtb	r1, r1
 8004648:	70d1      	strb	r1, [r2, #3]
 800464a:	7851      	ldrb	r1, [r2, #1]
 800464c:	b2c9      	uxtb	r1, r1
 800464e:	7091      	strb	r1, [r2, #2]
 8004650:	7811      	ldrb	r1, [r2, #0]
 8004652:	b2c9      	uxtb	r1, r1
 8004654:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004656:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004658:	7819      	ldrb	r1, [r3, #0]
 800465a:	3101      	adds	r1, #1
 800465c:	b249      	sxtb	r1, r1
 800465e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004660:	7819      	ldrb	r1, [r3, #0]
 8004662:	b249      	sxtb	r1, r1
 8004664:	2903      	cmp	r1, #3
 8004666:	dde2      	ble.n	800462e <keypad_sm+0x116>
				encmode = 0;
 8004668:	2300      	movs	r3, #0
				encpos = 0;
 800466a:	4a4c      	ldr	r2, [pc, #304]	; (800479c <keypad_sm+0x284>)
				encmode = 0;
 800466c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800466e:	7013      	strb	r3, [r2, #0]
}
 8004670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			kpenum = V1;
 8004672:	2101      	movs	r1, #1
			keypadarr[0] = num;
 8004674:	207a      	movs	r0, #122	; 0x7a
 8004676:	4b46      	ldr	r3, [pc, #280]	; (8004790 <keypad_sm+0x278>)
			if(keypadarr[4] == '.'){
 8004678:	4a46      	ldr	r2, [pc, #280]	; (8004794 <keypad_sm+0x27c>)
				keypaddecimal = 0;
 800467a:	4d47      	ldr	r5, [pc, #284]	; (8004798 <keypad_sm+0x280>)
			kpenum = V1;
 800467c:	7031      	strb	r1, [r6, #0]
	while(keypaditerator < 4){
 800467e:	7819      	ldrb	r1, [r3, #0]
 8004680:	b249      	sxtb	r1, r1
 8004682:	2903      	cmp	r1, #3
 8004684:	f73f af5e 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004688:	7819      	ldrb	r1, [r3, #0]
 800468a:	b249      	sxtb	r1, r1
 800468c:	2903      	cmp	r1, #3
 800468e:	dcf6      	bgt.n	800467e <keypad_sm+0x166>
			if(keypadarr[4] == '.'){
 8004690:	7911      	ldrb	r1, [r2, #4]
 8004692:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004694:	bf08      	it	eq
 8004696:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004698:	78d1      	ldrb	r1, [r2, #3]
 800469a:	b2c9      	uxtb	r1, r1
 800469c:	7111      	strb	r1, [r2, #4]
 800469e:	7891      	ldrb	r1, [r2, #2]
 80046a0:	b2c9      	uxtb	r1, r1
 80046a2:	70d1      	strb	r1, [r2, #3]
 80046a4:	7851      	ldrb	r1, [r2, #1]
 80046a6:	b2c9      	uxtb	r1, r1
 80046a8:	7091      	strb	r1, [r2, #2]
 80046aa:	7811      	ldrb	r1, [r2, #0]
 80046ac:	b2c9      	uxtb	r1, r1
 80046ae:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80046b0:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80046b2:	7819      	ldrb	r1, [r3, #0]
 80046b4:	3101      	adds	r1, #1
 80046b6:	b249      	sxtb	r1, r1
 80046b8:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80046ba:	7819      	ldrb	r1, [r3, #0]
 80046bc:	b249      	sxtb	r1, r1
 80046be:	2903      	cmp	r1, #3
 80046c0:	dde2      	ble.n	8004688 <keypad_sm+0x170>
}
 80046c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(encmode){
 80046c4:	4c31      	ldr	r4, [pc, #196]	; (800478c <keypad_sm+0x274>)
 80046c6:	7823      	ldrb	r3, [r4, #0]
 80046c8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f040 8139 	bne.w	8004944 <keypad_sm+0x42c>
			if(num == 'A'){
 80046d2:	2841      	cmp	r0, #65	; 0x41
 80046d4:	f000 83a3 	beq.w	8004e1e <keypad_sm+0x906>
			else if(num == 'B'){
 80046d8:	2842      	cmp	r0, #66	; 0x42
 80046da:	f000 8505 	beq.w	80050e8 <keypad_sm+0xbd0>
			else if(num == 'C'){
 80046de:	2843      	cmp	r0, #67	; 0x43
 80046e0:	f000 87ff 	beq.w	80056e2 <keypad_sm+0x11ca>
			else if(num == 'D'){
 80046e4:	2844      	cmp	r0, #68	; 0x44
 80046e6:	f000 86fe 	beq.w	80054e6 <keypad_sm+0xfce>
			else if(num == '.'){
 80046ea:	282e      	cmp	r0, #46	; 0x2e
 80046ec:	f001 814a 	beq.w	8005984 <keypad_sm+0x146c>
			else if(num >= '0' && num <= '9'){
 80046f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80046f4:	2b09      	cmp	r3, #9
 80046f6:	f240 8473 	bls.w	8004fe0 <keypad_sm+0xac8>
			else if(num == '#'){
 80046fa:	2823      	cmp	r0, #35	; 0x23
 80046fc:	f001 81b6 	beq.w	8005a6c <keypad_sm+0x1554>
			else if(num == '+'){
 8004700:	282b      	cmp	r0, #43	; 0x2b
 8004702:	f001 83dc 	beq.w	8005ebe <keypad_sm+0x19a6>
			else if(num == '-'){
 8004706:	282d      	cmp	r0, #45	; 0x2d
 8004708:	f001 82bc 	beq.w	8005c84 <keypad_sm+0x176c>
			else if(num == 's'){
 800470c:	2873      	cmp	r0, #115	; 0x73
 800470e:	f001 869a 	beq.w	8006446 <keypad_sm+0x1f2e>
			else if(num == '['){
 8004712:	285b      	cmp	r0, #91	; 0x5b
 8004714:	f001 8604 	beq.w	8006320 <keypad_sm+0x1e08>
			else if(num == ']'){
 8004718:	285d      	cmp	r0, #93	; 0x5d
 800471a:	f47f af13 	bne.w	8004544 <keypad_sm+0x2c>
				fill_keypad(0, volt_set_main);
 800471e:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <keypad_sm+0x288>)
 8004720:	2000      	movs	r0, #0
 8004722:	6819      	ldr	r1, [r3, #0]
 8004724:	f7ff fb54 	bl	8003dd0 <fill_keypad>
				encmode = 1;
 8004728:	2101      	movs	r1, #1
				encpos = 0;
 800472a:	2200      	movs	r2, #0
 800472c:	4b1b      	ldr	r3, [pc, #108]	; (800479c <keypad_sm+0x284>)
				encmode = 1;
 800472e:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8004730:	701a      	strb	r2, [r3, #0]
}
 8004732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			kpenum = V2;
 8004734:	2203      	movs	r2, #3
			keypadarr[0] = num;
 8004736:	207a      	movs	r0, #122	; 0x7a
 8004738:	4b15      	ldr	r3, [pc, #84]	; (8004790 <keypad_sm+0x278>)
			if(keypadarr[4] == '.'){
 800473a:	4916      	ldr	r1, [pc, #88]	; (8004794 <keypad_sm+0x27c>)
				keypaddecimal = 0;
 800473c:	4d16      	ldr	r5, [pc, #88]	; (8004798 <keypad_sm+0x280>)
			kpenum = V2;
 800473e:	7032      	strb	r2, [r6, #0]
	while(keypaditerator < 4){
 8004740:	781a      	ldrb	r2, [r3, #0]
 8004742:	b252      	sxtb	r2, r2
 8004744:	2a03      	cmp	r2, #3
 8004746:	f73f aefd 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800474a:	781a      	ldrb	r2, [r3, #0]
 800474c:	b252      	sxtb	r2, r2
 800474e:	2a03      	cmp	r2, #3
 8004750:	dcf6      	bgt.n	8004740 <keypad_sm+0x228>
			if(keypadarr[4] == '.'){
 8004752:	790a      	ldrb	r2, [r1, #4]
 8004754:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8004756:	bf08      	it	eq
 8004758:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800475a:	78ca      	ldrb	r2, [r1, #3]
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	710a      	strb	r2, [r1, #4]
 8004760:	788a      	ldrb	r2, [r1, #2]
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	70ca      	strb	r2, [r1, #3]
 8004766:	784a      	ldrb	r2, [r1, #1]
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	708a      	strb	r2, [r1, #2]
 800476c:	780a      	ldrb	r2, [r1, #0]
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8004772:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	3201      	adds	r2, #1
 8004778:	b252      	sxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 800477c:	781a      	ldrb	r2, [r3, #0]
 800477e:	b252      	sxtb	r2, r2
 8004780:	2a03      	cmp	r2, #3
 8004782:	dde2      	ble.n	800474a <keypad_sm+0x232>
}
 8004784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004786:	bf00      	nop
 8004788:	20000705 	.word	0x20000705
 800478c:	200003ac 	.word	0x200003ac
 8004790:	20000005 	.word	0x20000005
 8004794:	20000000 	.word	0x20000000
 8004798:	20000704 	.word	0x20000704
 800479c:	200003ad 	.word	0x200003ad
 80047a0:	2000086c 	.word	0x2000086c
			kpenum = A1;
 80047a4:	2202      	movs	r2, #2
			keypadarr[0] = num;
 80047a6:	207a      	movs	r0, #122	; 0x7a
 80047a8:	4b9c      	ldr	r3, [pc, #624]	; (8004a1c <keypad_sm+0x504>)
			if(keypadarr[4] == '.'){
 80047aa:	499d      	ldr	r1, [pc, #628]	; (8004a20 <keypad_sm+0x508>)
				keypaddecimal = 0;
 80047ac:	4d9d      	ldr	r5, [pc, #628]	; (8004a24 <keypad_sm+0x50c>)
			kpenum = A1;
 80047ae:	7032      	strb	r2, [r6, #0]
	while(keypaditerator < 4){
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	b252      	sxtb	r2, r2
 80047b4:	2a03      	cmp	r2, #3
 80047b6:	f73f aec5 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	b252      	sxtb	r2, r2
 80047be:	2a03      	cmp	r2, #3
 80047c0:	dcf6      	bgt.n	80047b0 <keypad_sm+0x298>
			if(keypadarr[4] == '.'){
 80047c2:	790a      	ldrb	r2, [r1, #4]
 80047c4:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 80047c6:	bf08      	it	eq
 80047c8:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80047ca:	78ca      	ldrb	r2, [r1, #3]
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	710a      	strb	r2, [r1, #4]
 80047d0:	788a      	ldrb	r2, [r1, #2]
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	70ca      	strb	r2, [r1, #3]
 80047d6:	784a      	ldrb	r2, [r1, #1]
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	708a      	strb	r2, [r1, #2]
 80047dc:	780a      	ldrb	r2, [r1, #0]
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 80047e2:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	3201      	adds	r2, #1
 80047e8:	b252      	sxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 80047ec:	781a      	ldrb	r2, [r3, #0]
 80047ee:	b252      	sxtb	r2, r2
 80047f0:	2a03      	cmp	r2, #3
 80047f2:	dde2      	ble.n	80047ba <keypad_sm+0x2a2>
}
 80047f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(encmode){
 80047f6:	4c8c      	ldr	r4, [pc, #560]	; (8004a28 <keypad_sm+0x510>)
 80047f8:	7823      	ldrb	r3, [r4, #0]
 80047fa:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d06f      	beq.n	80048e2 <keypad_sm+0x3ca>
			if(num == 'A'){
 8004802:	2841      	cmp	r0, #65	; 0x41
 8004804:	f000 8147 	beq.w	8004a96 <keypad_sm+0x57e>
			else if(num == 'B'){
 8004808:	2842      	cmp	r0, #66	; 0x42
 800480a:	f000 84da 	beq.w	80051c2 <keypad_sm+0xcaa>
			else if(num == 'C'){
 800480e:	2843      	cmp	r0, #67	; 0x43
 8004810:	f000 8392 	beq.w	8004f38 <keypad_sm+0xa20>
			else if(num == 'D'){
 8004814:	2844      	cmp	r0, #68	; 0x44
 8004816:	f000 8510 	beq.w	800523a <keypad_sm+0xd22>
			else if(num == '.'){
 800481a:	282e      	cmp	r0, #46	; 0x2e
 800481c:	f000 860c 	beq.w	8005438 <keypad_sm+0xf20>
			else if(num >= '0' && num <= '9'){
 8004820:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004824:	2b09      	cmp	r3, #9
 8004826:	f200 8686 	bhi.w	8005536 <keypad_sm+0x101e>
				keypaddecimal = 0;
 800482a:	2600      	movs	r6, #0
			keypadarr[0] = num;
 800482c:	207a      	movs	r0, #122	; 0x7a
 800482e:	4b7b      	ldr	r3, [pc, #492]	; (8004a1c <keypad_sm+0x504>)
			if(keypadarr[4] == '.'){
 8004830:	4a7b      	ldr	r2, [pc, #492]	; (8004a20 <keypad_sm+0x508>)
				keypaddecimal = 0;
 8004832:	4d7c      	ldr	r5, [pc, #496]	; (8004a24 <keypad_sm+0x50c>)
	while(keypaditerator < 4){
 8004834:	7819      	ldrb	r1, [r3, #0]
 8004836:	b249      	sxtb	r1, r1
 8004838:	2903      	cmp	r1, #3
 800483a:	dc1c      	bgt.n	8004876 <keypad_sm+0x35e>
		if(keypaditerator < keypadlength-1){
 800483c:	7819      	ldrb	r1, [r3, #0]
 800483e:	b249      	sxtb	r1, r1
 8004840:	2903      	cmp	r1, #3
 8004842:	dcf7      	bgt.n	8004834 <keypad_sm+0x31c>
			if(keypadarr[4] == '.'){
 8004844:	7911      	ldrb	r1, [r2, #4]
 8004846:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004848:	bf08      	it	eq
 800484a:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800484c:	78d1      	ldrb	r1, [r2, #3]
 800484e:	b2c9      	uxtb	r1, r1
 8004850:	7111      	strb	r1, [r2, #4]
 8004852:	7891      	ldrb	r1, [r2, #2]
 8004854:	b2c9      	uxtb	r1, r1
 8004856:	70d1      	strb	r1, [r2, #3]
 8004858:	7851      	ldrb	r1, [r2, #1]
 800485a:	b2c9      	uxtb	r1, r1
 800485c:	7091      	strb	r1, [r2, #2]
 800485e:	7811      	ldrb	r1, [r2, #0]
 8004860:	b2c9      	uxtb	r1, r1
 8004862:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004864:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004866:	7819      	ldrb	r1, [r3, #0]
 8004868:	3101      	adds	r1, #1
 800486a:	b249      	sxtb	r1, r1
 800486c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800486e:	7819      	ldrb	r1, [r3, #0]
 8004870:	b249      	sxtb	r1, r1
 8004872:	2903      	cmp	r1, #3
 8004874:	dde2      	ble.n	800483c <keypad_sm+0x324>
				encmode = 0;
 8004876:	2300      	movs	r3, #0
				encpos = 0;
 8004878:	4a6c      	ldr	r2, [pc, #432]	; (8004a2c <keypad_sm+0x514>)
				encmode = 0;
 800487a:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800487c:	7013      	strb	r3, [r2, #0]
}
 800487e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(num == 'A'){
 8004880:	2841      	cmp	r0, #65	; 0x41
 8004882:	f000 820f 	beq.w	8004ca4 <keypad_sm+0x78c>
			else if(num == 'B'){
 8004886:	2842      	cmp	r0, #66	; 0x42
 8004888:	f000 80d6 	beq.w	8004a38 <keypad_sm+0x520>
			else if(num == 'C'){
 800488c:	2843      	cmp	r0, #67	; 0x43
 800488e:	f000 8246 	beq.w	8004d1e <keypad_sm+0x806>
			else if(num == 'D'){
 8004892:	2844      	cmp	r0, #68	; 0x44
 8004894:	f000 82ee 	beq.w	8004e74 <keypad_sm+0x95c>
			else if(num == '.'){
 8004898:	282e      	cmp	r0, #46	; 0x2e
 800489a:	f000 8665 	beq.w	8005568 <keypad_sm+0x1050>
			else if(num >= '0' && num <= '9'){
 800489e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80048a2:	2b09      	cmp	r3, #9
 80048a4:	f240 839c 	bls.w	8004fe0 <keypad_sm+0xac8>
			else if(num == '#'){
 80048a8:	2823      	cmp	r0, #35	; 0x23
 80048aa:	f000 87e6 	beq.w	800587a <keypad_sm+0x1362>
			else if(num == '+'){
 80048ae:	282b      	cmp	r0, #43	; 0x2b
 80048b0:	f001 8089 	beq.w	80059c6 <keypad_sm+0x14ae>
			else if(num == '-'){
 80048b4:	282d      	cmp	r0, #45	; 0x2d
 80048b6:	f000 87b7 	beq.w	8005828 <keypad_sm+0x1310>
			else if(num == 's'){
 80048ba:	2873      	cmp	r0, #115	; 0x73
 80048bc:	f001 828b 	beq.w	8005dd6 <keypad_sm+0x18be>
			else if(num == '['){
 80048c0:	285b      	cmp	r0, #91	; 0x5b
 80048c2:	f001 8376 	beq.w	8005fb2 <keypad_sm+0x1a9a>
			else if(num == ']'){
 80048c6:	285d      	cmp	r0, #93	; 0x5d
 80048c8:	f47f ae3c 	bne.w	8004544 <keypad_sm+0x2c>
				fill_keypad(0, volt_set_aux);
 80048cc:	4b58      	ldr	r3, [pc, #352]	; (8004a30 <keypad_sm+0x518>)
 80048ce:	2000      	movs	r0, #0
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	f7ff fa7d 	bl	8003dd0 <fill_keypad>
				encmode = 1;
 80048d6:	2101      	movs	r1, #1
				encpos = 0;
 80048d8:	2200      	movs	r2, #0
 80048da:	4b54      	ldr	r3, [pc, #336]	; (8004a2c <keypad_sm+0x514>)
				encmode = 1;
 80048dc:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 80048de:	701a      	strb	r2, [r3, #0]
}
 80048e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(num == 'A'){
 80048e2:	2841      	cmp	r0, #65	; 0x41
 80048e4:	f000 8103 	beq.w	8004aee <keypad_sm+0x5d6>
			else if(num == 'B'){
 80048e8:	2842      	cmp	r0, #66	; 0x42
 80048ea:	f000 842d 	beq.w	8005148 <keypad_sm+0xc30>
			else if(num == 'C'){
 80048ee:	2843      	cmp	r0, #67	; 0x43
 80048f0:	f000 834e 	beq.w	8004f90 <keypad_sm+0xa78>
			else if(num == 'D'){
 80048f4:	2844      	cmp	r0, #68	; 0x44
 80048f6:	f000 8510 	beq.w	800531a <keypad_sm+0xe02>
			else if(num == '.'){
 80048fa:	282e      	cmp	r0, #46	; 0x2e
 80048fc:	f000 8773 	beq.w	80057e6 <keypad_sm+0x12ce>
			else if(num >= '0' && num <= '9'){
 8004900:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004904:	2b09      	cmp	r3, #9
 8004906:	f240 836b 	bls.w	8004fe0 <keypad_sm+0xac8>
			else if(num == '#'){
 800490a:	2823      	cmp	r0, #35	; 0x23
 800490c:	f001 80db 	beq.w	8005ac6 <keypad_sm+0x15ae>
			else if(num == '+'){
 8004910:	282b      	cmp	r0, #43	; 0x2b
 8004912:	f001 8223 	beq.w	8005d5c <keypad_sm+0x1844>
			else if(num == '-'){
 8004916:	282d      	cmp	r0, #45	; 0x2d
 8004918:	f001 80ac 	beq.w	8005a74 <keypad_sm+0x155c>
			else if(num == 's'){
 800491c:	2873      	cmp	r0, #115	; 0x73
 800491e:	f001 83a6 	beq.w	800606e <keypad_sm+0x1b56>
			else if(num == '['){
 8004922:	285b      	cmp	r0, #91	; 0x5b
 8004924:	f001 857d 	beq.w	8006422 <keypad_sm+0x1f0a>
			else if(num == ']'){
 8004928:	285d      	cmp	r0, #93	; 0x5d
 800492a:	f47f ae0b 	bne.w	8004544 <keypad_sm+0x2c>
				fill_keypad(1, amp_set_aux);
 800492e:	4b41      	ldr	r3, [pc, #260]	; (8004a34 <keypad_sm+0x51c>)
 8004930:	2001      	movs	r0, #1
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	f7ff fa4c 	bl	8003dd0 <fill_keypad>
				encmode = 1;
 8004938:	2101      	movs	r1, #1
				encpos = 0;
 800493a:	2200      	movs	r2, #0
 800493c:	4b3b      	ldr	r3, [pc, #236]	; (8004a2c <keypad_sm+0x514>)
				encmode = 1;
 800493e:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8004940:	701a      	strb	r2, [r3, #0]
}
 8004942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(num == 'A'){
 8004944:	2841      	cmp	r0, #65	; 0x41
 8004946:	f000 823e 	beq.w	8004dc6 <keypad_sm+0x8ae>
			else if(num == 'B'){
 800494a:	2842      	cmp	r0, #66	; 0x42
 800494c:	f000 83a0 	beq.w	8005090 <keypad_sm+0xb78>
			else if(num == 'C'){
 8004950:	2843      	cmp	r0, #67	; 0x43
 8004952:	f000 8687 	beq.w	8005664 <keypad_sm+0x114c>
			else if(num == 'D'){
 8004956:	2844      	cmp	r0, #68	; 0x44
 8004958:	f000 8599 	beq.w	800548e <keypad_sm+0xf76>
			else if(num == '.'){
 800495c:	282e      	cmp	r0, #46	; 0x2e
 800495e:	f000 8717 	beq.w	8005790 <keypad_sm+0x1278>
			else if(num >= '0' && num <= '9'){
 8004962:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004966:	2b09      	cmp	r3, #9
 8004968:	f200 86f7 	bhi.w	800575a <keypad_sm+0x1242>
				keypaddecimal = 0;
 800496c:	2600      	movs	r6, #0
			keypadarr[0] = num;
 800496e:	207a      	movs	r0, #122	; 0x7a
 8004970:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <keypad_sm+0x504>)
			if(keypadarr[4] == '.'){
 8004972:	4a2b      	ldr	r2, [pc, #172]	; (8004a20 <keypad_sm+0x508>)
				keypaddecimal = 0;
 8004974:	4d2b      	ldr	r5, [pc, #172]	; (8004a24 <keypad_sm+0x50c>)
	while(keypaditerator < 4){
 8004976:	7819      	ldrb	r1, [r3, #0]
 8004978:	b249      	sxtb	r1, r1
 800497a:	2903      	cmp	r1, #3
 800497c:	dc1c      	bgt.n	80049b8 <keypad_sm+0x4a0>
		if(keypaditerator < keypadlength-1){
 800497e:	7819      	ldrb	r1, [r3, #0]
 8004980:	b249      	sxtb	r1, r1
 8004982:	2903      	cmp	r1, #3
 8004984:	dcf7      	bgt.n	8004976 <keypad_sm+0x45e>
			if(keypadarr[4] == '.'){
 8004986:	7911      	ldrb	r1, [r2, #4]
 8004988:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800498a:	bf08      	it	eq
 800498c:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800498e:	78d1      	ldrb	r1, [r2, #3]
 8004990:	b2c9      	uxtb	r1, r1
 8004992:	7111      	strb	r1, [r2, #4]
 8004994:	7891      	ldrb	r1, [r2, #2]
 8004996:	b2c9      	uxtb	r1, r1
 8004998:	70d1      	strb	r1, [r2, #3]
 800499a:	7851      	ldrb	r1, [r2, #1]
 800499c:	b2c9      	uxtb	r1, r1
 800499e:	7091      	strb	r1, [r2, #2]
 80049a0:	7811      	ldrb	r1, [r2, #0]
 80049a2:	b2c9      	uxtb	r1, r1
 80049a4:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80049a6:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80049a8:	7819      	ldrb	r1, [r3, #0]
 80049aa:	3101      	adds	r1, #1
 80049ac:	b249      	sxtb	r1, r1
 80049ae:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80049b0:	7819      	ldrb	r1, [r3, #0]
 80049b2:	b249      	sxtb	r1, r1
 80049b4:	2903      	cmp	r1, #3
 80049b6:	dde2      	ble.n	800497e <keypad_sm+0x466>
				encmode = 0;
 80049b8:	2300      	movs	r3, #0
				encpos = 0;
 80049ba:	4a1c      	ldr	r2, [pc, #112]	; (8004a2c <keypad_sm+0x514>)
				encmode = 0;
 80049bc:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80049be:	7013      	strb	r3, [r2, #0]
}
 80049c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80049c2:	2500      	movs	r5, #0
			keypadarr[0] = num;
 80049c4:	207a      	movs	r0, #122	; 0x7a
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <keypad_sm+0x504>)
			if(keypadarr[4] == '.'){
 80049c8:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <keypad_sm+0x508>)
				keypaddecimal = 0;
 80049ca:	4f16      	ldr	r7, [pc, #88]	; (8004a24 <keypad_sm+0x50c>)
				kpenum = WAIT;
 80049cc:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80049ce:	7819      	ldrb	r1, [r3, #0]
 80049d0:	b249      	sxtb	r1, r1
 80049d2:	2903      	cmp	r1, #3
 80049d4:	dc1c      	bgt.n	8004a10 <keypad_sm+0x4f8>
		if(keypaditerator < keypadlength-1){
 80049d6:	7819      	ldrb	r1, [r3, #0]
 80049d8:	b249      	sxtb	r1, r1
 80049da:	2903      	cmp	r1, #3
 80049dc:	dcf7      	bgt.n	80049ce <keypad_sm+0x4b6>
			if(keypadarr[4] == '.'){
 80049de:	7911      	ldrb	r1, [r2, #4]
 80049e0:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80049e2:	bf08      	it	eq
 80049e4:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 80049e6:	78d1      	ldrb	r1, [r2, #3]
 80049e8:	b2c9      	uxtb	r1, r1
 80049ea:	7111      	strb	r1, [r2, #4]
 80049ec:	7891      	ldrb	r1, [r2, #2]
 80049ee:	b2c9      	uxtb	r1, r1
 80049f0:	70d1      	strb	r1, [r2, #3]
 80049f2:	7851      	ldrb	r1, [r2, #1]
 80049f4:	b2c9      	uxtb	r1, r1
 80049f6:	7091      	strb	r1, [r2, #2]
 80049f8:	7811      	ldrb	r1, [r2, #0]
 80049fa:	b2c9      	uxtb	r1, r1
 80049fc:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80049fe:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004a00:	7819      	ldrb	r1, [r3, #0]
 8004a02:	3101      	adds	r1, #1
 8004a04:	b249      	sxtb	r1, r1
 8004a06:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004a08:	7819      	ldrb	r1, [r3, #0]
 8004a0a:	b249      	sxtb	r1, r1
 8004a0c:	2903      	cmp	r1, #3
 8004a0e:	dde2      	ble.n	80049d6 <keypad_sm+0x4be>
				encmode = 0;
 8004a10:	2300      	movs	r3, #0
				encpos = 0;
 8004a12:	4a06      	ldr	r2, [pc, #24]	; (8004a2c <keypad_sm+0x514>)
				encmode = 0;
 8004a14:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004a16:	7013      	strb	r3, [r2, #0]
}
 8004a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000005 	.word	0x20000005
 8004a20:	20000000 	.word	0x20000000
 8004a24:	20000704 	.word	0x20000704
 8004a28:	200003ac 	.word	0x200003ac
 8004a2c:	200003ad 	.word	0x200003ad
 8004a30:	20000868 	.word	0x20000868
 8004a34:	20000394 	.word	0x20000394
			keypadarr[0] = num;
 8004a38:	207a      	movs	r0, #122	; 0x7a
 8004a3a:	4b90      	ldr	r3, [pc, #576]	; (8004c7c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 8004a3c:	4a90      	ldr	r2, [pc, #576]	; (8004c80 <keypad_sm+0x768>)
				keypaddecimal = 0;
 8004a3e:	4c91      	ldr	r4, [pc, #580]	; (8004c84 <keypad_sm+0x76c>)
				kpenum = WAIT;
 8004a40:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004a42:	7819      	ldrb	r1, [r3, #0]
 8004a44:	b249      	sxtb	r1, r1
 8004a46:	2903      	cmp	r1, #3
 8004a48:	f73f ad7c 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004a4c:	7819      	ldrb	r1, [r3, #0]
 8004a4e:	b249      	sxtb	r1, r1
 8004a50:	2903      	cmp	r1, #3
 8004a52:	dcf6      	bgt.n	8004a42 <keypad_sm+0x52a>
			if(keypadarr[4] == '.'){
 8004a54:	7911      	ldrb	r1, [r2, #4]
 8004a56:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004a58:	bf08      	it	eq
 8004a5a:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004a5c:	78d1      	ldrb	r1, [r2, #3]
 8004a5e:	b2c9      	uxtb	r1, r1
 8004a60:	7111      	strb	r1, [r2, #4]
 8004a62:	7891      	ldrb	r1, [r2, #2]
 8004a64:	b2c9      	uxtb	r1, r1
 8004a66:	70d1      	strb	r1, [r2, #3]
 8004a68:	7851      	ldrb	r1, [r2, #1]
 8004a6a:	b2c9      	uxtb	r1, r1
 8004a6c:	7091      	strb	r1, [r2, #2]
 8004a6e:	7811      	ldrb	r1, [r2, #0]
 8004a70:	b2c9      	uxtb	r1, r1
 8004a72:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004a74:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004a76:	7819      	ldrb	r1, [r3, #0]
 8004a78:	3101      	adds	r1, #1
 8004a7a:	b249      	sxtb	r1, r1
 8004a7c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004a7e:	7819      	ldrb	r1, [r3, #0]
 8004a80:	b249      	sxtb	r1, r1
 8004a82:	2903      	cmp	r1, #3
 8004a84:	dde2      	ble.n	8004a4c <keypad_sm+0x534>
}
 8004a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(chstat_main){
 8004a88:	4b7f      	ldr	r3, [pc, #508]	; (8004c88 <keypad_sm+0x770>)
 8004a8a:	781a      	ldrb	r2, [r3, #0]
 8004a8c:	2a00      	cmp	r2, #0
 8004a8e:	f000 81ee 	beq.w	8004e6e <keypad_sm+0x956>
				chstat_main = 0;
 8004a92:	701c      	strb	r4, [r3, #0]
}
 8004a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004a96:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004a98:	207a      	movs	r0, #122	; 0x7a
 8004a9a:	4b78      	ldr	r3, [pc, #480]	; (8004c7c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 8004a9c:	4a78      	ldr	r2, [pc, #480]	; (8004c80 <keypad_sm+0x768>)
				keypaddecimal = 0;
 8004a9e:	4f79      	ldr	r7, [pc, #484]	; (8004c84 <keypad_sm+0x76c>)
				kpenum = WAIT;
 8004aa0:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004aa2:	7819      	ldrb	r1, [r3, #0]
 8004aa4:	b249      	sxtb	r1, r1
 8004aa6:	2903      	cmp	r1, #3
 8004aa8:	dc1c      	bgt.n	8004ae4 <keypad_sm+0x5cc>
		if(keypaditerator < keypadlength-1){
 8004aaa:	7819      	ldrb	r1, [r3, #0]
 8004aac:	b249      	sxtb	r1, r1
 8004aae:	2903      	cmp	r1, #3
 8004ab0:	dcf7      	bgt.n	8004aa2 <keypad_sm+0x58a>
			if(keypadarr[4] == '.'){
 8004ab2:	7911      	ldrb	r1, [r2, #4]
 8004ab4:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004ab6:	bf08      	it	eq
 8004ab8:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004aba:	78d1      	ldrb	r1, [r2, #3]
 8004abc:	b2c9      	uxtb	r1, r1
 8004abe:	7111      	strb	r1, [r2, #4]
 8004ac0:	7891      	ldrb	r1, [r2, #2]
 8004ac2:	b2c9      	uxtb	r1, r1
 8004ac4:	70d1      	strb	r1, [r2, #3]
 8004ac6:	7851      	ldrb	r1, [r2, #1]
 8004ac8:	b2c9      	uxtb	r1, r1
 8004aca:	7091      	strb	r1, [r2, #2]
 8004acc:	7811      	ldrb	r1, [r2, #0]
 8004ace:	b2c9      	uxtb	r1, r1
 8004ad0:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004ad2:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004ad4:	7819      	ldrb	r1, [r3, #0]
 8004ad6:	3101      	adds	r1, #1
 8004ad8:	b249      	sxtb	r1, r1
 8004ada:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004adc:	7819      	ldrb	r1, [r3, #0]
 8004ade:	b249      	sxtb	r1, r1
 8004ae0:	2903      	cmp	r1, #3
 8004ae2:	dde2      	ble.n	8004aaa <keypad_sm+0x592>
				encmode = 0;
 8004ae4:	2300      	movs	r3, #0
				encpos = 0;
 8004ae6:	4a69      	ldr	r2, [pc, #420]	; (8004c8c <keypad_sm+0x774>)
				encmode = 0;
 8004ae8:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004aea:	7013      	strb	r3, [r2, #0]
}
 8004aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004aee:	207a      	movs	r0, #122	; 0x7a
 8004af0:	4b62      	ldr	r3, [pc, #392]	; (8004c7c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 8004af2:	4a63      	ldr	r2, [pc, #396]	; (8004c80 <keypad_sm+0x768>)
				keypaddecimal = 0;
 8004af4:	4c63      	ldr	r4, [pc, #396]	; (8004c84 <keypad_sm+0x76c>)
				kpenum = WAIT;
 8004af6:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004af8:	7819      	ldrb	r1, [r3, #0]
 8004afa:	b249      	sxtb	r1, r1
 8004afc:	2903      	cmp	r1, #3
 8004afe:	f73f ad21 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004b02:	7819      	ldrb	r1, [r3, #0]
 8004b04:	b249      	sxtb	r1, r1
 8004b06:	2903      	cmp	r1, #3
 8004b08:	dcf6      	bgt.n	8004af8 <keypad_sm+0x5e0>
			if(keypadarr[4] == '.'){
 8004b0a:	7911      	ldrb	r1, [r2, #4]
 8004b0c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004b0e:	bf08      	it	eq
 8004b10:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004b12:	78d1      	ldrb	r1, [r2, #3]
 8004b14:	b2c9      	uxtb	r1, r1
 8004b16:	7111      	strb	r1, [r2, #4]
 8004b18:	7891      	ldrb	r1, [r2, #2]
 8004b1a:	b2c9      	uxtb	r1, r1
 8004b1c:	70d1      	strb	r1, [r2, #3]
 8004b1e:	7851      	ldrb	r1, [r2, #1]
 8004b20:	b2c9      	uxtb	r1, r1
 8004b22:	7091      	strb	r1, [r2, #2]
 8004b24:	7811      	ldrb	r1, [r2, #0]
 8004b26:	b2c9      	uxtb	r1, r1
 8004b28:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004b2a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004b2c:	7819      	ldrb	r1, [r3, #0]
 8004b2e:	3101      	adds	r1, #1
 8004b30:	b249      	sxtb	r1, r1
 8004b32:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004b34:	7819      	ldrb	r1, [r3, #0]
 8004b36:	b249      	sxtb	r1, r1
 8004b38:	2903      	cmp	r1, #3
 8004b3a:	dde2      	ble.n	8004b02 <keypad_sm+0x5ea>
}
 8004b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			kpenum = A2;
 8004b3e:	2104      	movs	r1, #4
			keypadarr[0] = num;
 8004b40:	207a      	movs	r0, #122	; 0x7a
 8004b42:	4b4e      	ldr	r3, [pc, #312]	; (8004c7c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 8004b44:	4a4e      	ldr	r2, [pc, #312]	; (8004c80 <keypad_sm+0x768>)
				keypaddecimal = 0;
 8004b46:	4d4f      	ldr	r5, [pc, #316]	; (8004c84 <keypad_sm+0x76c>)
			kpenum = A2;
 8004b48:	7031      	strb	r1, [r6, #0]
	while(keypaditerator < 4){
 8004b4a:	7819      	ldrb	r1, [r3, #0]
 8004b4c:	b249      	sxtb	r1, r1
 8004b4e:	2903      	cmp	r1, #3
 8004b50:	f73f acf8 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004b54:	7819      	ldrb	r1, [r3, #0]
 8004b56:	b249      	sxtb	r1, r1
 8004b58:	2903      	cmp	r1, #3
 8004b5a:	dcf6      	bgt.n	8004b4a <keypad_sm+0x632>
			if(keypadarr[4] == '.'){
 8004b5c:	7911      	ldrb	r1, [r2, #4]
 8004b5e:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004b60:	bf08      	it	eq
 8004b62:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004b64:	78d1      	ldrb	r1, [r2, #3]
 8004b66:	b2c9      	uxtb	r1, r1
 8004b68:	7111      	strb	r1, [r2, #4]
 8004b6a:	7891      	ldrb	r1, [r2, #2]
 8004b6c:	b2c9      	uxtb	r1, r1
 8004b6e:	70d1      	strb	r1, [r2, #3]
 8004b70:	7851      	ldrb	r1, [r2, #1]
 8004b72:	b2c9      	uxtb	r1, r1
 8004b74:	7091      	strb	r1, [r2, #2]
 8004b76:	7811      	ldrb	r1, [r2, #0]
 8004b78:	b2c9      	uxtb	r1, r1
 8004b7a:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004b7c:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004b7e:	7819      	ldrb	r1, [r3, #0]
 8004b80:	3101      	adds	r1, #1
 8004b82:	b249      	sxtb	r1, r1
 8004b84:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004b86:	7819      	ldrb	r1, [r3, #0]
 8004b88:	b249      	sxtb	r1, r1
 8004b8a:	2903      	cmp	r1, #3
 8004b8c:	dde2      	ble.n	8004b54 <keypad_sm+0x63c>
}
 8004b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(chstat_aux_rx){
 8004b90:	4b3f      	ldr	r3, [pc, #252]	; (8004c90 <keypad_sm+0x778>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80be 	beq.w	8004d16 <keypad_sm+0x7fe>
				chstat_aux_tx = 0;
 8004b9a:	4b3e      	ldr	r3, [pc, #248]	; (8004c94 <keypad_sm+0x77c>)
 8004b9c:	701c      	strb	r4, [r3, #0]
}
 8004b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(num == 'A'){
 8004ba0:	2841      	cmp	r0, #65	; 0x41
 8004ba2:	f000 8221 	beq.w	8004fe8 <keypad_sm+0xad0>
			else if(num == 'B'){
 8004ba6:	2842      	cmp	r0, #66	; 0x42
 8004ba8:	f000 83df 	beq.w	800536a <keypad_sm+0xe52>
			else if(num == 'C'){
 8004bac:	2843      	cmp	r0, #67	; 0x43
 8004bae:	f000 8528 	beq.w	8005602 <keypad_sm+0x10ea>
			else if(num == 'D'){
 8004bb2:	2844      	cmp	r0, #68	; 0x44
 8004bb4:	f000 87f8 	beq.w	8005ba8 <keypad_sm+0x1690>
			else if(num == '.'){
 8004bb8:	282e      	cmp	r0, #46	; 0x2e
 8004bba:	f000 8211 	beq.w	8004fe0 <keypad_sm+0xac8>
			else if(num >= '0' && num <= '9'){
 8004bbe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004bc2:	2b09      	cmp	r3, #9
 8004bc4:	f240 820c 	bls.w	8004fe0 <keypad_sm+0xac8>
			else if(num == '#'){
 8004bc8:	2823      	cmp	r0, #35	; 0x23
 8004bca:	f000 874f 	beq.w	8005a6c <keypad_sm+0x1554>
			else if(num == '+'){
 8004bce:	282b      	cmp	r0, #43	; 0x2b
 8004bd0:	f001 82e8 	beq.w	80061a4 <keypad_sm+0x1c8c>
			else if(num == '-'){
 8004bd4:	282d      	cmp	r0, #45	; 0x2d
 8004bd6:	f001 8280 	beq.w	80060da <keypad_sm+0x1bc2>
			else if(num == 's'){
 8004bda:	2873      	cmp	r0, #115	; 0x73
 8004bdc:	f001 8335 	beq.w	800624a <keypad_sm+0x1d32>
			else if(num == '['){
 8004be0:	285b      	cmp	r0, #91	; 0x5b
 8004be2:	f001 8327 	beq.w	8006234 <keypad_sm+0x1d1c>
			else if(num == ']'){
 8004be6:	285d      	cmp	r0, #93	; 0x5d
 8004be8:	f47f acac 	bne.w	8004544 <keypad_sm+0x2c>
				fill_keypad(1, amp_set_main);
 8004bec:	4b2a      	ldr	r3, [pc, #168]	; (8004c98 <keypad_sm+0x780>)
 8004bee:	2001      	movs	r0, #1
 8004bf0:	6819      	ldr	r1, [r3, #0]
 8004bf2:	f7ff f8ed 	bl	8003dd0 <fill_keypad>
				encmode = 1;
 8004bf6:	2101      	movs	r1, #1
				encpos = 0;
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <keypad_sm+0x774>)
				encmode = 1;
 8004bfc:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8004bfe:	701a      	strb	r2, [r3, #0]
}
 8004c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8004c02:	f7fe ff43 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004c06:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8004c08:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004c0a:	f7fc fa15 	bl	8001038 <__aeabi_fcmpge>
 8004c0e:	b140      	cbz	r0, 8004c22 <keypad_sm+0x70a>
 8004c10:	4628      	mov	r0, r5
 8004c12:	4922      	ldr	r1, [pc, #136]	; (8004c9c <keypad_sm+0x784>)
 8004c14:	f7fc fa06 	bl	8001024 <__aeabi_fcmple>
 8004c18:	b118      	cbz	r0, 8004c22 <keypad_sm+0x70a>
					volt_set_aux = translate_keypad();
 8004c1a:	f7fe ff37 	bl	8003a8c <translate_keypad>
 8004c1e:	4a20      	ldr	r2, [pc, #128]	; (8004ca0 <keypad_sm+0x788>)
 8004c20:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8004c22:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004c24:	207a      	movs	r0, #122	; 0x7a
 8004c26:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <keypad_sm+0x764>)
			if(keypadarr[4] == '.'){
 8004c28:	4a15      	ldr	r2, [pc, #84]	; (8004c80 <keypad_sm+0x768>)
				keypaddecimal = 0;
 8004c2a:	4f16      	ldr	r7, [pc, #88]	; (8004c84 <keypad_sm+0x76c>)
				kpenum = WAIT;
 8004c2c:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004c2e:	7819      	ldrb	r1, [r3, #0]
 8004c30:	b249      	sxtb	r1, r1
 8004c32:	2903      	cmp	r1, #3
 8004c34:	dc1c      	bgt.n	8004c70 <keypad_sm+0x758>
		if(keypaditerator < keypadlength-1){
 8004c36:	7819      	ldrb	r1, [r3, #0]
 8004c38:	b249      	sxtb	r1, r1
 8004c3a:	2903      	cmp	r1, #3
 8004c3c:	dcf7      	bgt.n	8004c2e <keypad_sm+0x716>
			if(keypadarr[4] == '.'){
 8004c3e:	7911      	ldrb	r1, [r2, #4]
 8004c40:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004c42:	bf08      	it	eq
 8004c44:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004c46:	78d1      	ldrb	r1, [r2, #3]
 8004c48:	b2c9      	uxtb	r1, r1
 8004c4a:	7111      	strb	r1, [r2, #4]
 8004c4c:	7891      	ldrb	r1, [r2, #2]
 8004c4e:	b2c9      	uxtb	r1, r1
 8004c50:	70d1      	strb	r1, [r2, #3]
 8004c52:	7851      	ldrb	r1, [r2, #1]
 8004c54:	b2c9      	uxtb	r1, r1
 8004c56:	7091      	strb	r1, [r2, #2]
 8004c58:	7811      	ldrb	r1, [r2, #0]
 8004c5a:	b2c9      	uxtb	r1, r1
 8004c5c:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004c5e:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004c60:	7819      	ldrb	r1, [r3, #0]
 8004c62:	3101      	adds	r1, #1
 8004c64:	b249      	sxtb	r1, r1
 8004c66:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004c68:	7819      	ldrb	r1, [r3, #0]
 8004c6a:	b249      	sxtb	r1, r1
 8004c6c:	2903      	cmp	r1, #3
 8004c6e:	dde2      	ble.n	8004c36 <keypad_sm+0x71e>
				encmode = 0;
 8004c70:	2300      	movs	r3, #0
				encpos = 0;
 8004c72:	4a06      	ldr	r2, [pc, #24]	; (8004c8c <keypad_sm+0x774>)
				encmode = 0;
 8004c74:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004c76:	7013      	strb	r3, [r2, #0]
}
 8004c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000005 	.word	0x20000005
 8004c80:	20000000 	.word	0x20000000
 8004c84:	20000704 	.word	0x20000704
 8004c88:	200003a3 	.word	0x200003a3
 8004c8c:	200003ad 	.word	0x200003ad
 8004c90:	200003a1 	.word	0x200003a1
 8004c94:	200003a2 	.word	0x200003a2
 8004c98:	20000398 	.word	0x20000398
 8004c9c:	41400000 	.word	0x41400000
 8004ca0:	20000868 	.word	0x20000868
	float temp = translate_keypad();
 8004ca4:	f7fe fef2 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004ca8:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8004caa:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8004cac:	f7fc f9c4 	bl	8001038 <__aeabi_fcmpge>
 8004cb0:	b140      	cbz	r0, 8004cc4 <keypad_sm+0x7ac>
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	4999      	ldr	r1, [pc, #612]	; (8004f1c <keypad_sm+0xa04>)
 8004cb6:	f7fc f9b5 	bl	8001024 <__aeabi_fcmple>
 8004cba:	b118      	cbz	r0, 8004cc4 <keypad_sm+0x7ac>
					volt_set_aux = translate_keypad();
 8004cbc:	f7fe fee6 	bl	8003a8c <translate_keypad>
 8004cc0:	4a97      	ldr	r2, [pc, #604]	; (8004f20 <keypad_sm+0xa08>)
 8004cc2:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8004cc4:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8004cc6:	207a      	movs	r0, #122	; 0x7a
 8004cc8:	4b96      	ldr	r3, [pc, #600]	; (8004f24 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004cca:	4a97      	ldr	r2, [pc, #604]	; (8004f28 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004ccc:	4d97      	ldr	r5, [pc, #604]	; (8004f2c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004cce:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8004cd0:	7819      	ldrb	r1, [r3, #0]
 8004cd2:	b249      	sxtb	r1, r1
 8004cd4:	2903      	cmp	r1, #3
 8004cd6:	f73f ac35 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004cda:	7819      	ldrb	r1, [r3, #0]
 8004cdc:	b249      	sxtb	r1, r1
 8004cde:	2903      	cmp	r1, #3
 8004ce0:	dcf6      	bgt.n	8004cd0 <keypad_sm+0x7b8>
			if(keypadarr[4] == '.'){
 8004ce2:	7911      	ldrb	r1, [r2, #4]
 8004ce4:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004ce6:	bf08      	it	eq
 8004ce8:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004cea:	78d1      	ldrb	r1, [r2, #3]
 8004cec:	b2c9      	uxtb	r1, r1
 8004cee:	7111      	strb	r1, [r2, #4]
 8004cf0:	7891      	ldrb	r1, [r2, #2]
 8004cf2:	b2c9      	uxtb	r1, r1
 8004cf4:	70d1      	strb	r1, [r2, #3]
 8004cf6:	7851      	ldrb	r1, [r2, #1]
 8004cf8:	b2c9      	uxtb	r1, r1
 8004cfa:	7091      	strb	r1, [r2, #2]
 8004cfc:	7811      	ldrb	r1, [r2, #0]
 8004cfe:	b2c9      	uxtb	r1, r1
 8004d00:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004d02:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004d04:	7819      	ldrb	r1, [r3, #0]
 8004d06:	3101      	adds	r1, #1
 8004d08:	b249      	sxtb	r1, r1
 8004d0a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004d0c:	7819      	ldrb	r1, [r3, #0]
 8004d0e:	b249      	sxtb	r1, r1
 8004d10:	2903      	cmp	r1, #3
 8004d12:	dde2      	ble.n	8004cda <keypad_sm+0x7c2>
}
 8004d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				chstat_aux_tx = 1;
 8004d16:	2201      	movs	r2, #1
 8004d18:	4b85      	ldr	r3, [pc, #532]	; (8004f30 <keypad_sm+0xa18>)
 8004d1a:	701a      	strb	r2, [r3, #0]
}
 8004d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004d1e:	207a      	movs	r0, #122	; 0x7a
 8004d20:	4b80      	ldr	r3, [pc, #512]	; (8004f24 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004d22:	4a81      	ldr	r2, [pc, #516]	; (8004f28 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004d24:	4c81      	ldr	r4, [pc, #516]	; (8004f2c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004d26:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004d28:	7819      	ldrb	r1, [r3, #0]
 8004d2a:	b249      	sxtb	r1, r1
 8004d2c:	2903      	cmp	r1, #3
 8004d2e:	f73f ac09 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004d32:	7819      	ldrb	r1, [r3, #0]
 8004d34:	b249      	sxtb	r1, r1
 8004d36:	2903      	cmp	r1, #3
 8004d38:	dcf6      	bgt.n	8004d28 <keypad_sm+0x810>
			if(keypadarr[4] == '.'){
 8004d3a:	7911      	ldrb	r1, [r2, #4]
 8004d3c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004d3e:	bf08      	it	eq
 8004d40:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004d42:	78d1      	ldrb	r1, [r2, #3]
 8004d44:	b2c9      	uxtb	r1, r1
 8004d46:	7111      	strb	r1, [r2, #4]
 8004d48:	7891      	ldrb	r1, [r2, #2]
 8004d4a:	b2c9      	uxtb	r1, r1
 8004d4c:	70d1      	strb	r1, [r2, #3]
 8004d4e:	7851      	ldrb	r1, [r2, #1]
 8004d50:	b2c9      	uxtb	r1, r1
 8004d52:	7091      	strb	r1, [r2, #2]
 8004d54:	7811      	ldrb	r1, [r2, #0]
 8004d56:	b2c9      	uxtb	r1, r1
 8004d58:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004d5a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004d5c:	7819      	ldrb	r1, [r3, #0]
 8004d5e:	3101      	adds	r1, #1
 8004d60:	b249      	sxtb	r1, r1
 8004d62:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004d64:	7819      	ldrb	r1, [r3, #0]
 8004d66:	b249      	sxtb	r1, r1
 8004d68:	2903      	cmp	r1, #3
 8004d6a:	dde2      	ble.n	8004d32 <keypad_sm+0x81a>
}
 8004d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004d6e:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004d70:	207a      	movs	r0, #122	; 0x7a
 8004d72:	4b6c      	ldr	r3, [pc, #432]	; (8004f24 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004d74:	4a6c      	ldr	r2, [pc, #432]	; (8004f28 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004d76:	4f6d      	ldr	r7, [pc, #436]	; (8004f2c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004d78:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004d7a:	7819      	ldrb	r1, [r3, #0]
 8004d7c:	b249      	sxtb	r1, r1
 8004d7e:	2903      	cmp	r1, #3
 8004d80:	dc1c      	bgt.n	8004dbc <keypad_sm+0x8a4>
		if(keypaditerator < keypadlength-1){
 8004d82:	7819      	ldrb	r1, [r3, #0]
 8004d84:	b249      	sxtb	r1, r1
 8004d86:	2903      	cmp	r1, #3
 8004d88:	dcf7      	bgt.n	8004d7a <keypad_sm+0x862>
			if(keypadarr[4] == '.'){
 8004d8a:	7911      	ldrb	r1, [r2, #4]
 8004d8c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004d8e:	bf08      	it	eq
 8004d90:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004d92:	78d1      	ldrb	r1, [r2, #3]
 8004d94:	b2c9      	uxtb	r1, r1
 8004d96:	7111      	strb	r1, [r2, #4]
 8004d98:	7891      	ldrb	r1, [r2, #2]
 8004d9a:	b2c9      	uxtb	r1, r1
 8004d9c:	70d1      	strb	r1, [r2, #3]
 8004d9e:	7851      	ldrb	r1, [r2, #1]
 8004da0:	b2c9      	uxtb	r1, r1
 8004da2:	7091      	strb	r1, [r2, #2]
 8004da4:	7811      	ldrb	r1, [r2, #0]
 8004da6:	b2c9      	uxtb	r1, r1
 8004da8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004daa:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004dac:	7819      	ldrb	r1, [r3, #0]
 8004dae:	3101      	adds	r1, #1
 8004db0:	b249      	sxtb	r1, r1
 8004db2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004db4:	7819      	ldrb	r1, [r3, #0]
 8004db6:	b249      	sxtb	r1, r1
 8004db8:	2903      	cmp	r1, #3
 8004dba:	dde2      	ble.n	8004d82 <keypad_sm+0x86a>
				encmode = 0;
 8004dbc:	2300      	movs	r3, #0
				encpos = 0;
 8004dbe:	4a5d      	ldr	r2, [pc, #372]	; (8004f34 <keypad_sm+0xa1c>)
				encmode = 0;
 8004dc0:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004dc2:	7013      	strb	r3, [r2, #0]
}
 8004dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004dc6:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004dc8:	207a      	movs	r0, #122	; 0x7a
 8004dca:	4b56      	ldr	r3, [pc, #344]	; (8004f24 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004dcc:	4a56      	ldr	r2, [pc, #344]	; (8004f28 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004dce:	4f57      	ldr	r7, [pc, #348]	; (8004f2c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004dd0:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004dd2:	7819      	ldrb	r1, [r3, #0]
 8004dd4:	b249      	sxtb	r1, r1
 8004dd6:	2903      	cmp	r1, #3
 8004dd8:	dc1c      	bgt.n	8004e14 <keypad_sm+0x8fc>
		if(keypaditerator < keypadlength-1){
 8004dda:	7819      	ldrb	r1, [r3, #0]
 8004ddc:	b249      	sxtb	r1, r1
 8004dde:	2903      	cmp	r1, #3
 8004de0:	dcf7      	bgt.n	8004dd2 <keypad_sm+0x8ba>
			if(keypadarr[4] == '.'){
 8004de2:	7911      	ldrb	r1, [r2, #4]
 8004de4:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004de6:	bf08      	it	eq
 8004de8:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004dea:	78d1      	ldrb	r1, [r2, #3]
 8004dec:	b2c9      	uxtb	r1, r1
 8004dee:	7111      	strb	r1, [r2, #4]
 8004df0:	7891      	ldrb	r1, [r2, #2]
 8004df2:	b2c9      	uxtb	r1, r1
 8004df4:	70d1      	strb	r1, [r2, #3]
 8004df6:	7851      	ldrb	r1, [r2, #1]
 8004df8:	b2c9      	uxtb	r1, r1
 8004dfa:	7091      	strb	r1, [r2, #2]
 8004dfc:	7811      	ldrb	r1, [r2, #0]
 8004dfe:	b2c9      	uxtb	r1, r1
 8004e00:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004e02:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004e04:	7819      	ldrb	r1, [r3, #0]
 8004e06:	3101      	adds	r1, #1
 8004e08:	b249      	sxtb	r1, r1
 8004e0a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004e0c:	7819      	ldrb	r1, [r3, #0]
 8004e0e:	b249      	sxtb	r1, r1
 8004e10:	2903      	cmp	r1, #3
 8004e12:	dde2      	ble.n	8004dda <keypad_sm+0x8c2>
				encmode = 0;
 8004e14:	2300      	movs	r3, #0
				encpos = 0;
 8004e16:	4a47      	ldr	r2, [pc, #284]	; (8004f34 <keypad_sm+0xa1c>)
				encmode = 0;
 8004e18:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004e1a:	7013      	strb	r3, [r2, #0]
}
 8004e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004e1e:	207a      	movs	r0, #122	; 0x7a
 8004e20:	4b40      	ldr	r3, [pc, #256]	; (8004f24 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004e22:	4a41      	ldr	r2, [pc, #260]	; (8004f28 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004e24:	4c41      	ldr	r4, [pc, #260]	; (8004f2c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004e26:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004e28:	7819      	ldrb	r1, [r3, #0]
 8004e2a:	b249      	sxtb	r1, r1
 8004e2c:	2903      	cmp	r1, #3
 8004e2e:	f73f ab89 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004e32:	7819      	ldrb	r1, [r3, #0]
 8004e34:	b249      	sxtb	r1, r1
 8004e36:	2903      	cmp	r1, #3
 8004e38:	dcf6      	bgt.n	8004e28 <keypad_sm+0x910>
			if(keypadarr[4] == '.'){
 8004e3a:	7911      	ldrb	r1, [r2, #4]
 8004e3c:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004e3e:	bf08      	it	eq
 8004e40:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004e42:	78d1      	ldrb	r1, [r2, #3]
 8004e44:	b2c9      	uxtb	r1, r1
 8004e46:	7111      	strb	r1, [r2, #4]
 8004e48:	7891      	ldrb	r1, [r2, #2]
 8004e4a:	b2c9      	uxtb	r1, r1
 8004e4c:	70d1      	strb	r1, [r2, #3]
 8004e4e:	7851      	ldrb	r1, [r2, #1]
 8004e50:	b2c9      	uxtb	r1, r1
 8004e52:	7091      	strb	r1, [r2, #2]
 8004e54:	7811      	ldrb	r1, [r2, #0]
 8004e56:	b2c9      	uxtb	r1, r1
 8004e58:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004e5a:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004e5c:	7819      	ldrb	r1, [r3, #0]
 8004e5e:	3101      	adds	r1, #1
 8004e60:	b249      	sxtb	r1, r1
 8004e62:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004e64:	7819      	ldrb	r1, [r3, #0]
 8004e66:	b249      	sxtb	r1, r1
 8004e68:	2903      	cmp	r1, #3
 8004e6a:	dde2      	ble.n	8004e32 <keypad_sm+0x91a>
}
 8004e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				chstat_main = 1;
 8004e6e:	2201      	movs	r2, #1
 8004e70:	701a      	strb	r2, [r3, #0]
}
 8004e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004e74:	207a      	movs	r0, #122	; 0x7a
 8004e76:	4b2b      	ldr	r3, [pc, #172]	; (8004f24 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004e78:	4a2b      	ldr	r2, [pc, #172]	; (8004f28 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004e7a:	4c2c      	ldr	r4, [pc, #176]	; (8004f2c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004e7c:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004e7e:	7819      	ldrb	r1, [r3, #0]
 8004e80:	b249      	sxtb	r1, r1
 8004e82:	2903      	cmp	r1, #3
 8004e84:	f73f ab5e 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004e88:	7819      	ldrb	r1, [r3, #0]
 8004e8a:	b249      	sxtb	r1, r1
 8004e8c:	2903      	cmp	r1, #3
 8004e8e:	dcf6      	bgt.n	8004e7e <keypad_sm+0x966>
			if(keypadarr[4] == '.'){
 8004e90:	7911      	ldrb	r1, [r2, #4]
 8004e92:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004e94:	bf08      	it	eq
 8004e96:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004e98:	78d1      	ldrb	r1, [r2, #3]
 8004e9a:	b2c9      	uxtb	r1, r1
 8004e9c:	7111      	strb	r1, [r2, #4]
 8004e9e:	7891      	ldrb	r1, [r2, #2]
 8004ea0:	b2c9      	uxtb	r1, r1
 8004ea2:	70d1      	strb	r1, [r2, #3]
 8004ea4:	7851      	ldrb	r1, [r2, #1]
 8004ea6:	b2c9      	uxtb	r1, r1
 8004ea8:	7091      	strb	r1, [r2, #2]
 8004eaa:	7811      	ldrb	r1, [r2, #0]
 8004eac:	b2c9      	uxtb	r1, r1
 8004eae:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004eb0:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004eb2:	7819      	ldrb	r1, [r3, #0]
 8004eb4:	3101      	adds	r1, #1
 8004eb6:	b249      	sxtb	r1, r1
 8004eb8:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004eba:	7819      	ldrb	r1, [r3, #0]
 8004ebc:	b249      	sxtb	r1, r1
 8004ebe:	2903      	cmp	r1, #3
 8004ec0:	dde2      	ble.n	8004e88 <keypad_sm+0x970>
}
 8004ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8004ec4:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004ec6:	207a      	movs	r0, #122	; 0x7a
 8004ec8:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <keypad_sm+0xa0c>)
			if(keypadarr[4] == '.'){
 8004eca:	4a17      	ldr	r2, [pc, #92]	; (8004f28 <keypad_sm+0xa10>)
				keypaddecimal = 0;
 8004ecc:	4f17      	ldr	r7, [pc, #92]	; (8004f2c <keypad_sm+0xa14>)
				kpenum = WAIT;
 8004ece:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004ed0:	7819      	ldrb	r1, [r3, #0]
 8004ed2:	b249      	sxtb	r1, r1
 8004ed4:	2903      	cmp	r1, #3
 8004ed6:	dc1c      	bgt.n	8004f12 <keypad_sm+0x9fa>
		if(keypaditerator < keypadlength-1){
 8004ed8:	7819      	ldrb	r1, [r3, #0]
 8004eda:	b249      	sxtb	r1, r1
 8004edc:	2903      	cmp	r1, #3
 8004ede:	dcf7      	bgt.n	8004ed0 <keypad_sm+0x9b8>
			if(keypadarr[4] == '.'){
 8004ee0:	7911      	ldrb	r1, [r2, #4]
 8004ee2:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004ee4:	bf08      	it	eq
 8004ee6:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004ee8:	78d1      	ldrb	r1, [r2, #3]
 8004eea:	b2c9      	uxtb	r1, r1
 8004eec:	7111      	strb	r1, [r2, #4]
 8004eee:	7891      	ldrb	r1, [r2, #2]
 8004ef0:	b2c9      	uxtb	r1, r1
 8004ef2:	70d1      	strb	r1, [r2, #3]
 8004ef4:	7851      	ldrb	r1, [r2, #1]
 8004ef6:	b2c9      	uxtb	r1, r1
 8004ef8:	7091      	strb	r1, [r2, #2]
 8004efa:	7811      	ldrb	r1, [r2, #0]
 8004efc:	b2c9      	uxtb	r1, r1
 8004efe:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004f00:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004f02:	7819      	ldrb	r1, [r3, #0]
 8004f04:	3101      	adds	r1, #1
 8004f06:	b249      	sxtb	r1, r1
 8004f08:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004f0a:	7819      	ldrb	r1, [r3, #0]
 8004f0c:	b249      	sxtb	r1, r1
 8004f0e:	2903      	cmp	r1, #3
 8004f10:	dde2      	ble.n	8004ed8 <keypad_sm+0x9c0>
				encmode = 0;
 8004f12:	2300      	movs	r3, #0
				encpos = 0;
 8004f14:	4a07      	ldr	r2, [pc, #28]	; (8004f34 <keypad_sm+0xa1c>)
				encmode = 0;
 8004f16:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004f18:	7013      	strb	r3, [r2, #0]
}
 8004f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f1c:	41400000 	.word	0x41400000
 8004f20:	20000868 	.word	0x20000868
 8004f24:	20000005 	.word	0x20000005
 8004f28:	20000000 	.word	0x20000000
 8004f2c:	20000704 	.word	0x20000704
 8004f30:	200003a2 	.word	0x200003a2
 8004f34:	200003ad 	.word	0x200003ad
				kpenum = WAIT;
 8004f38:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8004f3a:	207a      	movs	r0, #122	; 0x7a
 8004f3c:	4b7e      	ldr	r3, [pc, #504]	; (8005138 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 8004f3e:	4a7f      	ldr	r2, [pc, #508]	; (800513c <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8004f40:	4f7f      	ldr	r7, [pc, #508]	; (8005140 <keypad_sm+0xc28>)
				kpenum = WAIT;
 8004f42:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004f44:	7819      	ldrb	r1, [r3, #0]
 8004f46:	b249      	sxtb	r1, r1
 8004f48:	2903      	cmp	r1, #3
 8004f4a:	dc1c      	bgt.n	8004f86 <keypad_sm+0xa6e>
		if(keypaditerator < keypadlength-1){
 8004f4c:	7819      	ldrb	r1, [r3, #0]
 8004f4e:	b249      	sxtb	r1, r1
 8004f50:	2903      	cmp	r1, #3
 8004f52:	dcf7      	bgt.n	8004f44 <keypad_sm+0xa2c>
			if(keypadarr[4] == '.'){
 8004f54:	7911      	ldrb	r1, [r2, #4]
 8004f56:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004f58:	bf08      	it	eq
 8004f5a:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8004f5c:	78d1      	ldrb	r1, [r2, #3]
 8004f5e:	b2c9      	uxtb	r1, r1
 8004f60:	7111      	strb	r1, [r2, #4]
 8004f62:	7891      	ldrb	r1, [r2, #2]
 8004f64:	b2c9      	uxtb	r1, r1
 8004f66:	70d1      	strb	r1, [r2, #3]
 8004f68:	7851      	ldrb	r1, [r2, #1]
 8004f6a:	b2c9      	uxtb	r1, r1
 8004f6c:	7091      	strb	r1, [r2, #2]
 8004f6e:	7811      	ldrb	r1, [r2, #0]
 8004f70:	b2c9      	uxtb	r1, r1
 8004f72:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004f74:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004f76:	7819      	ldrb	r1, [r3, #0]
 8004f78:	3101      	adds	r1, #1
 8004f7a:	b249      	sxtb	r1, r1
 8004f7c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004f7e:	7819      	ldrb	r1, [r3, #0]
 8004f80:	b249      	sxtb	r1, r1
 8004f82:	2903      	cmp	r1, #3
 8004f84:	dde2      	ble.n	8004f4c <keypad_sm+0xa34>
				encmode = 0;
 8004f86:	2300      	movs	r3, #0
				encpos = 0;
 8004f88:	4a6e      	ldr	r2, [pc, #440]	; (8005144 <keypad_sm+0xc2c>)
				encmode = 0;
 8004f8a:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8004f8c:	7013      	strb	r3, [r2, #0]
}
 8004f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8004f90:	207a      	movs	r0, #122	; 0x7a
 8004f92:	4b69      	ldr	r3, [pc, #420]	; (8005138 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 8004f94:	4a69      	ldr	r2, [pc, #420]	; (800513c <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8004f96:	4c6a      	ldr	r4, [pc, #424]	; (8005140 <keypad_sm+0xc28>)
				kpenum = WAIT;
 8004f98:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004f9a:	7819      	ldrb	r1, [r3, #0]
 8004f9c:	b249      	sxtb	r1, r1
 8004f9e:	2903      	cmp	r1, #3
 8004fa0:	f73f aad0 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004fa4:	7819      	ldrb	r1, [r3, #0]
 8004fa6:	b249      	sxtb	r1, r1
 8004fa8:	2903      	cmp	r1, #3
 8004faa:	dcf6      	bgt.n	8004f9a <keypad_sm+0xa82>
			if(keypadarr[4] == '.'){
 8004fac:	7911      	ldrb	r1, [r2, #4]
 8004fae:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8004fb0:	bf08      	it	eq
 8004fb2:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8004fb4:	78d1      	ldrb	r1, [r2, #3]
 8004fb6:	b2c9      	uxtb	r1, r1
 8004fb8:	7111      	strb	r1, [r2, #4]
 8004fba:	7891      	ldrb	r1, [r2, #2]
 8004fbc:	b2c9      	uxtb	r1, r1
 8004fbe:	70d1      	strb	r1, [r2, #3]
 8004fc0:	7851      	ldrb	r1, [r2, #1]
 8004fc2:	b2c9      	uxtb	r1, r1
 8004fc4:	7091      	strb	r1, [r2, #2]
 8004fc6:	7811      	ldrb	r1, [r2, #0]
 8004fc8:	b2c9      	uxtb	r1, r1
 8004fca:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8004fcc:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8004fce:	7819      	ldrb	r1, [r3, #0]
 8004fd0:	3101      	adds	r1, #1
 8004fd2:	b249      	sxtb	r1, r1
 8004fd4:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8004fd6:	7819      	ldrb	r1, [r3, #0]
 8004fd8:	b249      	sxtb	r1, r1
 8004fda:	2903      	cmp	r1, #3
 8004fdc:	dde2      	ble.n	8004fa4 <keypad_sm+0xa8c>
}
 8004fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fe0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004fe4:	f7fc ba8e 	b.w	8001504 <update_keypad.part.0>
			keypadarr[0] = num;
 8004fe8:	207a      	movs	r0, #122	; 0x7a
 8004fea:	4b53      	ldr	r3, [pc, #332]	; (8005138 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 8004fec:	4a53      	ldr	r2, [pc, #332]	; (800513c <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8004fee:	4c54      	ldr	r4, [pc, #336]	; (8005140 <keypad_sm+0xc28>)
				kpenum = WAIT;
 8004ff0:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8004ff2:	7819      	ldrb	r1, [r3, #0]
 8004ff4:	b249      	sxtb	r1, r1
 8004ff6:	2903      	cmp	r1, #3
 8004ff8:	f73f aaa4 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8004ffc:	7819      	ldrb	r1, [r3, #0]
 8004ffe:	b249      	sxtb	r1, r1
 8005000:	2903      	cmp	r1, #3
 8005002:	dcf6      	bgt.n	8004ff2 <keypad_sm+0xada>
			if(keypadarr[4] == '.'){
 8005004:	7911      	ldrb	r1, [r2, #4]
 8005006:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005008:	bf08      	it	eq
 800500a:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 800500c:	78d1      	ldrb	r1, [r2, #3]
 800500e:	b2c9      	uxtb	r1, r1
 8005010:	7111      	strb	r1, [r2, #4]
 8005012:	7891      	ldrb	r1, [r2, #2]
 8005014:	b2c9      	uxtb	r1, r1
 8005016:	70d1      	strb	r1, [r2, #3]
 8005018:	7851      	ldrb	r1, [r2, #1]
 800501a:	b2c9      	uxtb	r1, r1
 800501c:	7091      	strb	r1, [r2, #2]
 800501e:	7811      	ldrb	r1, [r2, #0]
 8005020:	b2c9      	uxtb	r1, r1
 8005022:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005024:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005026:	7819      	ldrb	r1, [r3, #0]
 8005028:	3101      	adds	r1, #1
 800502a:	b249      	sxtb	r1, r1
 800502c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800502e:	7819      	ldrb	r1, [r3, #0]
 8005030:	b249      	sxtb	r1, r1
 8005032:	2903      	cmp	r1, #3
 8005034:	dde2      	ble.n	8004ffc <keypad_sm+0xae4>
}
 8005036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005038:	2500      	movs	r5, #0
			keypadarr[0] = num;
 800503a:	207a      	movs	r0, #122	; 0x7a
 800503c:	4b3e      	ldr	r3, [pc, #248]	; (8005138 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 800503e:	4a3f      	ldr	r2, [pc, #252]	; (800513c <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8005040:	4f3f      	ldr	r7, [pc, #252]	; (8005140 <keypad_sm+0xc28>)
				kpenum = WAIT;
 8005042:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8005044:	7819      	ldrb	r1, [r3, #0]
 8005046:	b249      	sxtb	r1, r1
 8005048:	2903      	cmp	r1, #3
 800504a:	dc1c      	bgt.n	8005086 <keypad_sm+0xb6e>
		if(keypaditerator < keypadlength-1){
 800504c:	7819      	ldrb	r1, [r3, #0]
 800504e:	b249      	sxtb	r1, r1
 8005050:	2903      	cmp	r1, #3
 8005052:	dcf7      	bgt.n	8005044 <keypad_sm+0xb2c>
			if(keypadarr[4] == '.'){
 8005054:	7911      	ldrb	r1, [r2, #4]
 8005056:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005058:	bf08      	it	eq
 800505a:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 800505c:	78d1      	ldrb	r1, [r2, #3]
 800505e:	b2c9      	uxtb	r1, r1
 8005060:	7111      	strb	r1, [r2, #4]
 8005062:	7891      	ldrb	r1, [r2, #2]
 8005064:	b2c9      	uxtb	r1, r1
 8005066:	70d1      	strb	r1, [r2, #3]
 8005068:	7851      	ldrb	r1, [r2, #1]
 800506a:	b2c9      	uxtb	r1, r1
 800506c:	7091      	strb	r1, [r2, #2]
 800506e:	7811      	ldrb	r1, [r2, #0]
 8005070:	b2c9      	uxtb	r1, r1
 8005072:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005074:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005076:	7819      	ldrb	r1, [r3, #0]
 8005078:	3101      	adds	r1, #1
 800507a:	b249      	sxtb	r1, r1
 800507c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800507e:	7819      	ldrb	r1, [r3, #0]
 8005080:	b249      	sxtb	r1, r1
 8005082:	2903      	cmp	r1, #3
 8005084:	dde2      	ble.n	800504c <keypad_sm+0xb34>
				encmode = 0;
 8005086:	2300      	movs	r3, #0
				encpos = 0;
 8005088:	4a2e      	ldr	r2, [pc, #184]	; (8005144 <keypad_sm+0xc2c>)
				encmode = 0;
 800508a:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800508c:	7013      	strb	r3, [r2, #0]
}
 800508e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005090:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8005092:	207a      	movs	r0, #122	; 0x7a
 8005094:	4b28      	ldr	r3, [pc, #160]	; (8005138 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 8005096:	4a29      	ldr	r2, [pc, #164]	; (800513c <keypad_sm+0xc24>)
				keypaddecimal = 0;
 8005098:	4f29      	ldr	r7, [pc, #164]	; (8005140 <keypad_sm+0xc28>)
				kpenum = WAIT;
 800509a:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 800509c:	7819      	ldrb	r1, [r3, #0]
 800509e:	b249      	sxtb	r1, r1
 80050a0:	2903      	cmp	r1, #3
 80050a2:	dc1c      	bgt.n	80050de <keypad_sm+0xbc6>
		if(keypaditerator < keypadlength-1){
 80050a4:	7819      	ldrb	r1, [r3, #0]
 80050a6:	b249      	sxtb	r1, r1
 80050a8:	2903      	cmp	r1, #3
 80050aa:	dcf7      	bgt.n	800509c <keypad_sm+0xb84>
			if(keypadarr[4] == '.'){
 80050ac:	7911      	ldrb	r1, [r2, #4]
 80050ae:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80050b0:	bf08      	it	eq
 80050b2:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 80050b4:	78d1      	ldrb	r1, [r2, #3]
 80050b6:	b2c9      	uxtb	r1, r1
 80050b8:	7111      	strb	r1, [r2, #4]
 80050ba:	7891      	ldrb	r1, [r2, #2]
 80050bc:	b2c9      	uxtb	r1, r1
 80050be:	70d1      	strb	r1, [r2, #3]
 80050c0:	7851      	ldrb	r1, [r2, #1]
 80050c2:	b2c9      	uxtb	r1, r1
 80050c4:	7091      	strb	r1, [r2, #2]
 80050c6:	7811      	ldrb	r1, [r2, #0]
 80050c8:	b2c9      	uxtb	r1, r1
 80050ca:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80050cc:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80050ce:	7819      	ldrb	r1, [r3, #0]
 80050d0:	3101      	adds	r1, #1
 80050d2:	b249      	sxtb	r1, r1
 80050d4:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80050d6:	7819      	ldrb	r1, [r3, #0]
 80050d8:	b249      	sxtb	r1, r1
 80050da:	2903      	cmp	r1, #3
 80050dc:	dde2      	ble.n	80050a4 <keypad_sm+0xb8c>
				encmode = 0;
 80050de:	2300      	movs	r3, #0
				encpos = 0;
 80050e0:	4a18      	ldr	r2, [pc, #96]	; (8005144 <keypad_sm+0xc2c>)
				encmode = 0;
 80050e2:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80050e4:	7013      	strb	r3, [r2, #0]
}
 80050e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 80050e8:	207a      	movs	r0, #122	; 0x7a
 80050ea:	4b13      	ldr	r3, [pc, #76]	; (8005138 <keypad_sm+0xc20>)
			if(keypadarr[4] == '.'){
 80050ec:	4a13      	ldr	r2, [pc, #76]	; (800513c <keypad_sm+0xc24>)
				keypaddecimal = 0;
 80050ee:	4c14      	ldr	r4, [pc, #80]	; (8005140 <keypad_sm+0xc28>)
				kpenum = WAIT;
 80050f0:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80050f2:	7819      	ldrb	r1, [r3, #0]
 80050f4:	b249      	sxtb	r1, r1
 80050f6:	2903      	cmp	r1, #3
 80050f8:	f73f aa24 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80050fc:	7819      	ldrb	r1, [r3, #0]
 80050fe:	b249      	sxtb	r1, r1
 8005100:	2903      	cmp	r1, #3
 8005102:	dcf6      	bgt.n	80050f2 <keypad_sm+0xbda>
			if(keypadarr[4] == '.'){
 8005104:	7911      	ldrb	r1, [r2, #4]
 8005106:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005108:	bf08      	it	eq
 800510a:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 800510c:	78d1      	ldrb	r1, [r2, #3]
 800510e:	b2c9      	uxtb	r1, r1
 8005110:	7111      	strb	r1, [r2, #4]
 8005112:	7891      	ldrb	r1, [r2, #2]
 8005114:	b2c9      	uxtb	r1, r1
 8005116:	70d1      	strb	r1, [r2, #3]
 8005118:	7851      	ldrb	r1, [r2, #1]
 800511a:	b2c9      	uxtb	r1, r1
 800511c:	7091      	strb	r1, [r2, #2]
 800511e:	7811      	ldrb	r1, [r2, #0]
 8005120:	b2c9      	uxtb	r1, r1
 8005122:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005124:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005126:	7819      	ldrb	r1, [r3, #0]
 8005128:	3101      	adds	r1, #1
 800512a:	b249      	sxtb	r1, r1
 800512c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800512e:	7819      	ldrb	r1, [r3, #0]
 8005130:	b249      	sxtb	r1, r1
 8005132:	2903      	cmp	r1, #3
 8005134:	dde2      	ble.n	80050fc <keypad_sm+0xbe4>
}
 8005136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005138:	20000005 	.word	0x20000005
 800513c:	20000000 	.word	0x20000000
 8005140:	20000704 	.word	0x20000704
 8005144:	200003ad 	.word	0x200003ad
	float temp = translate_keypad();
 8005148:	f7fe fca0 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800514c:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800514e:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005150:	f7fb ff72 	bl	8001038 <__aeabi_fcmpge>
 8005154:	b160      	cbz	r0, 8005170 <keypad_sm+0xc58>
 8005156:	4620      	mov	r0, r4
 8005158:	f7fb f97e 	bl	8000458 <__aeabi_f2d>
 800515c:	a398      	add	r3, pc, #608	; (adr r3, 80053c0 <keypad_sm+0xea8>)
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	f7fb fc4d 	bl	8000a00 <__aeabi_dcmple>
 8005166:	b118      	cbz	r0, 8005170 <keypad_sm+0xc58>
					amp_set_aux = translate_keypad();
 8005168:	f7fe fc90 	bl	8003a8c <translate_keypad>
 800516c:	4a96      	ldr	r2, [pc, #600]	; (80053c8 <keypad_sm+0xeb0>)
 800516e:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005170:	2400      	movs	r4, #0
			keypadarr[0] = num;
 8005172:	207a      	movs	r0, #122	; 0x7a
 8005174:	4b95      	ldr	r3, [pc, #596]	; (80053cc <keypad_sm+0xeb4>)
			if(keypadarr[4] == '.'){
 8005176:	4a96      	ldr	r2, [pc, #600]	; (80053d0 <keypad_sm+0xeb8>)
				keypaddecimal = 0;
 8005178:	4d96      	ldr	r5, [pc, #600]	; (80053d4 <keypad_sm+0xebc>)
				kpenum = WAIT;
 800517a:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 800517c:	7819      	ldrb	r1, [r3, #0]
 800517e:	b249      	sxtb	r1, r1
 8005180:	2903      	cmp	r1, #3
 8005182:	f73f a9df 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005186:	7819      	ldrb	r1, [r3, #0]
 8005188:	b249      	sxtb	r1, r1
 800518a:	2903      	cmp	r1, #3
 800518c:	dcf6      	bgt.n	800517c <keypad_sm+0xc64>
			if(keypadarr[4] == '.'){
 800518e:	7911      	ldrb	r1, [r2, #4]
 8005190:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005192:	bf08      	it	eq
 8005194:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005196:	78d1      	ldrb	r1, [r2, #3]
 8005198:	b2c9      	uxtb	r1, r1
 800519a:	7111      	strb	r1, [r2, #4]
 800519c:	7891      	ldrb	r1, [r2, #2]
 800519e:	b2c9      	uxtb	r1, r1
 80051a0:	70d1      	strb	r1, [r2, #3]
 80051a2:	7851      	ldrb	r1, [r2, #1]
 80051a4:	b2c9      	uxtb	r1, r1
 80051a6:	7091      	strb	r1, [r2, #2]
 80051a8:	7811      	ldrb	r1, [r2, #0]
 80051aa:	b2c9      	uxtb	r1, r1
 80051ac:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80051ae:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80051b0:	7819      	ldrb	r1, [r3, #0]
 80051b2:	3101      	adds	r1, #1
 80051b4:	b249      	sxtb	r1, r1
 80051b6:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80051b8:	7819      	ldrb	r1, [r3, #0]
 80051ba:	b249      	sxtb	r1, r1
 80051bc:	2903      	cmp	r1, #3
 80051be:	dde2      	ble.n	8005186 <keypad_sm+0xc6e>
}
 80051c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 80051c2:	f7fe fc63 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80051c6:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80051c8:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80051ca:	f7fb ff35 	bl	8001038 <__aeabi_fcmpge>
 80051ce:	b140      	cbz	r0, 80051e2 <keypad_sm+0xcca>
 80051d0:	4628      	mov	r0, r5
 80051d2:	4981      	ldr	r1, [pc, #516]	; (80053d8 <keypad_sm+0xec0>)
 80051d4:	f7fb ff26 	bl	8001024 <__aeabi_fcmple>
 80051d8:	b118      	cbz	r0, 80051e2 <keypad_sm+0xcca>
					amp_set_aux = translate_keypad();
 80051da:	f7fe fc57 	bl	8003a8c <translate_keypad>
 80051de:	4a7a      	ldr	r2, [pc, #488]	; (80053c8 <keypad_sm+0xeb0>)
 80051e0:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 80051e2:	2500      	movs	r5, #0
			keypadarr[0] = num;
 80051e4:	207a      	movs	r0, #122	; 0x7a
 80051e6:	4b79      	ldr	r3, [pc, #484]	; (80053cc <keypad_sm+0xeb4>)
			if(keypadarr[4] == '.'){
 80051e8:	4a79      	ldr	r2, [pc, #484]	; (80053d0 <keypad_sm+0xeb8>)
				keypaddecimal = 0;
 80051ea:	4f7a      	ldr	r7, [pc, #488]	; (80053d4 <keypad_sm+0xebc>)
				kpenum = WAIT;
 80051ec:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80051ee:	7819      	ldrb	r1, [r3, #0]
 80051f0:	b249      	sxtb	r1, r1
 80051f2:	2903      	cmp	r1, #3
 80051f4:	dc1c      	bgt.n	8005230 <keypad_sm+0xd18>
		if(keypaditerator < keypadlength-1){
 80051f6:	7819      	ldrb	r1, [r3, #0]
 80051f8:	b249      	sxtb	r1, r1
 80051fa:	2903      	cmp	r1, #3
 80051fc:	dcf7      	bgt.n	80051ee <keypad_sm+0xcd6>
			if(keypadarr[4] == '.'){
 80051fe:	7911      	ldrb	r1, [r2, #4]
 8005200:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005202:	bf08      	it	eq
 8005204:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8005206:	78d1      	ldrb	r1, [r2, #3]
 8005208:	b2c9      	uxtb	r1, r1
 800520a:	7111      	strb	r1, [r2, #4]
 800520c:	7891      	ldrb	r1, [r2, #2]
 800520e:	b2c9      	uxtb	r1, r1
 8005210:	70d1      	strb	r1, [r2, #3]
 8005212:	7851      	ldrb	r1, [r2, #1]
 8005214:	b2c9      	uxtb	r1, r1
 8005216:	7091      	strb	r1, [r2, #2]
 8005218:	7811      	ldrb	r1, [r2, #0]
 800521a:	b2c9      	uxtb	r1, r1
 800521c:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800521e:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005220:	7819      	ldrb	r1, [r3, #0]
 8005222:	3101      	adds	r1, #1
 8005224:	b249      	sxtb	r1, r1
 8005226:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005228:	7819      	ldrb	r1, [r3, #0]
 800522a:	b249      	sxtb	r1, r1
 800522c:	2903      	cmp	r1, #3
 800522e:	dde2      	ble.n	80051f6 <keypad_sm+0xcde>
				encmode = 0;
 8005230:	2300      	movs	r3, #0
				encpos = 0;
 8005232:	4a6a      	ldr	r2, [pc, #424]	; (80053dc <keypad_sm+0xec4>)
				encmode = 0;
 8005234:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005236:	7013      	strb	r3, [r2, #0]
}
 8005238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 800523a:	2500      	movs	r5, #0
			keypadarr[0] = num;
 800523c:	207a      	movs	r0, #122	; 0x7a
 800523e:	4b63      	ldr	r3, [pc, #396]	; (80053cc <keypad_sm+0xeb4>)
			if(keypadarr[4] == '.'){
 8005240:	4a63      	ldr	r2, [pc, #396]	; (80053d0 <keypad_sm+0xeb8>)
				keypaddecimal = 0;
 8005242:	4f64      	ldr	r7, [pc, #400]	; (80053d4 <keypad_sm+0xebc>)
				kpenum = WAIT;
 8005244:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8005246:	7819      	ldrb	r1, [r3, #0]
 8005248:	b249      	sxtb	r1, r1
 800524a:	2903      	cmp	r1, #3
 800524c:	dc1c      	bgt.n	8005288 <keypad_sm+0xd70>
		if(keypaditerator < keypadlength-1){
 800524e:	7819      	ldrb	r1, [r3, #0]
 8005250:	b249      	sxtb	r1, r1
 8005252:	2903      	cmp	r1, #3
 8005254:	dcf7      	bgt.n	8005246 <keypad_sm+0xd2e>
			if(keypadarr[4] == '.'){
 8005256:	7911      	ldrb	r1, [r2, #4]
 8005258:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800525a:	bf08      	it	eq
 800525c:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 800525e:	78d1      	ldrb	r1, [r2, #3]
 8005260:	b2c9      	uxtb	r1, r1
 8005262:	7111      	strb	r1, [r2, #4]
 8005264:	7891      	ldrb	r1, [r2, #2]
 8005266:	b2c9      	uxtb	r1, r1
 8005268:	70d1      	strb	r1, [r2, #3]
 800526a:	7851      	ldrb	r1, [r2, #1]
 800526c:	b2c9      	uxtb	r1, r1
 800526e:	7091      	strb	r1, [r2, #2]
 8005270:	7811      	ldrb	r1, [r2, #0]
 8005272:	b2c9      	uxtb	r1, r1
 8005274:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005276:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005278:	7819      	ldrb	r1, [r3, #0]
 800527a:	3101      	adds	r1, #1
 800527c:	b249      	sxtb	r1, r1
 800527e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005280:	7819      	ldrb	r1, [r3, #0]
 8005282:	b249      	sxtb	r1, r1
 8005284:	2903      	cmp	r1, #3
 8005286:	dde2      	ble.n	800524e <keypad_sm+0xd36>
				encmode = 0;
 8005288:	2300      	movs	r3, #0
				encpos = 0;
 800528a:	4a54      	ldr	r2, [pc, #336]	; (80053dc <keypad_sm+0xec4>)
				encmode = 0;
 800528c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800528e:	7013      	strb	r3, [r2, #0]
}
 8005290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(num == '#'){
 8005292:	2823      	cmp	r0, #35	; 0x23
 8005294:	f000 8320 	beq.w	80058d8 <keypad_sm+0x13c0>
			else if(num == '+'){
 8005298:	282b      	cmp	r0, #43	; 0x2b
 800529a:	f000 864c 	beq.w	8005f36 <keypad_sm+0x1a1e>
			else if(num == '-'){
 800529e:	282d      	cmp	r0, #45	; 0x2d
 80052a0:	f000 8519 	beq.w	8005cd6 <keypad_sm+0x17be>
			else if(num == 's'){
 80052a4:	2873      	cmp	r0, #115	; 0x73
 80052a6:	f000 86d3 	beq.w	8006050 <keypad_sm+0x1b38>
			else if(num == '['){
 80052aa:	285b      	cmp	r0, #91	; 0x5b
 80052ac:	f001 8043 	beq.w	8006336 <keypad_sm+0x1e1e>
			else if(num == ']'){
 80052b0:	285d      	cmp	r0, #93	; 0x5d
 80052b2:	f47f a947 	bne.w	8004544 <keypad_sm+0x2c>
				inc_arr_v(encpos);
 80052b6:	4b49      	ldr	r3, [pc, #292]	; (80053dc <keypad_sm+0xec4>)
 80052b8:	7818      	ldrb	r0, [r3, #0]
}
 80052ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				inc_arr_v(encpos);
 80052be:	b240      	sxtb	r0, r0
 80052c0:	f7fe bea2 	b.w	8004008 <inc_arr_v>
				keypaddecimal = 0;
 80052c4:	2600      	movs	r6, #0
			keypadarr[0] = num;
 80052c6:	207a      	movs	r0, #122	; 0x7a
 80052c8:	4b40      	ldr	r3, [pc, #256]	; (80053cc <keypad_sm+0xeb4>)
			if(keypadarr[4] == '.'){
 80052ca:	4a41      	ldr	r2, [pc, #260]	; (80053d0 <keypad_sm+0xeb8>)
				keypaddecimal = 0;
 80052cc:	4d41      	ldr	r5, [pc, #260]	; (80053d4 <keypad_sm+0xebc>)
	while(keypaditerator < 4){
 80052ce:	7819      	ldrb	r1, [r3, #0]
 80052d0:	b249      	sxtb	r1, r1
 80052d2:	2903      	cmp	r1, #3
 80052d4:	dc1c      	bgt.n	8005310 <keypad_sm+0xdf8>
		if(keypaditerator < keypadlength-1){
 80052d6:	7819      	ldrb	r1, [r3, #0]
 80052d8:	b249      	sxtb	r1, r1
 80052da:	2903      	cmp	r1, #3
 80052dc:	dcf7      	bgt.n	80052ce <keypad_sm+0xdb6>
			if(keypadarr[4] == '.'){
 80052de:	7911      	ldrb	r1, [r2, #4]
 80052e0:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80052e2:	bf08      	it	eq
 80052e4:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80052e6:	78d1      	ldrb	r1, [r2, #3]
 80052e8:	b2c9      	uxtb	r1, r1
 80052ea:	7111      	strb	r1, [r2, #4]
 80052ec:	7891      	ldrb	r1, [r2, #2]
 80052ee:	b2c9      	uxtb	r1, r1
 80052f0:	70d1      	strb	r1, [r2, #3]
 80052f2:	7851      	ldrb	r1, [r2, #1]
 80052f4:	b2c9      	uxtb	r1, r1
 80052f6:	7091      	strb	r1, [r2, #2]
 80052f8:	7811      	ldrb	r1, [r2, #0]
 80052fa:	b2c9      	uxtb	r1, r1
 80052fc:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80052fe:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005300:	7819      	ldrb	r1, [r3, #0]
 8005302:	3101      	adds	r1, #1
 8005304:	b249      	sxtb	r1, r1
 8005306:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005308:	7819      	ldrb	r1, [r3, #0]
 800530a:	b249      	sxtb	r1, r1
 800530c:	2903      	cmp	r1, #3
 800530e:	dde2      	ble.n	80052d6 <keypad_sm+0xdbe>
				encmode = 0;
 8005310:	2300      	movs	r3, #0
				encpos = 0;
 8005312:	4a32      	ldr	r2, [pc, #200]	; (80053dc <keypad_sm+0xec4>)
				encmode = 0;
 8005314:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005316:	7013      	strb	r3, [r2, #0]
}
 8005318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 800531a:	207a      	movs	r0, #122	; 0x7a
 800531c:	4b2b      	ldr	r3, [pc, #172]	; (80053cc <keypad_sm+0xeb4>)
			if(keypadarr[4] == '.'){
 800531e:	4a2c      	ldr	r2, [pc, #176]	; (80053d0 <keypad_sm+0xeb8>)
				keypaddecimal = 0;
 8005320:	4c2c      	ldr	r4, [pc, #176]	; (80053d4 <keypad_sm+0xebc>)
				kpenum = WAIT;
 8005322:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8005324:	7819      	ldrb	r1, [r3, #0]
 8005326:	b249      	sxtb	r1, r1
 8005328:	2903      	cmp	r1, #3
 800532a:	f73f a90b 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800532e:	7819      	ldrb	r1, [r3, #0]
 8005330:	b249      	sxtb	r1, r1
 8005332:	2903      	cmp	r1, #3
 8005334:	dcf6      	bgt.n	8005324 <keypad_sm+0xe0c>
			if(keypadarr[4] == '.'){
 8005336:	7911      	ldrb	r1, [r2, #4]
 8005338:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800533a:	bf08      	it	eq
 800533c:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 800533e:	78d1      	ldrb	r1, [r2, #3]
 8005340:	b2c9      	uxtb	r1, r1
 8005342:	7111      	strb	r1, [r2, #4]
 8005344:	7891      	ldrb	r1, [r2, #2]
 8005346:	b2c9      	uxtb	r1, r1
 8005348:	70d1      	strb	r1, [r2, #3]
 800534a:	7851      	ldrb	r1, [r2, #1]
 800534c:	b2c9      	uxtb	r1, r1
 800534e:	7091      	strb	r1, [r2, #2]
 8005350:	7811      	ldrb	r1, [r2, #0]
 8005352:	b2c9      	uxtb	r1, r1
 8005354:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005356:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005358:	7819      	ldrb	r1, [r3, #0]
 800535a:	3101      	adds	r1, #1
 800535c:	b249      	sxtb	r1, r1
 800535e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005360:	7819      	ldrb	r1, [r3, #0]
 8005362:	b249      	sxtb	r1, r1
 8005364:	2903      	cmp	r1, #3
 8005366:	dde2      	ble.n	800532e <keypad_sm+0xe16>
}
 8005368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 800536a:	207a      	movs	r0, #122	; 0x7a
 800536c:	4b17      	ldr	r3, [pc, #92]	; (80053cc <keypad_sm+0xeb4>)
			if(keypadarr[4] == '.'){
 800536e:	4a18      	ldr	r2, [pc, #96]	; (80053d0 <keypad_sm+0xeb8>)
				keypaddecimal = 0;
 8005370:	4c18      	ldr	r4, [pc, #96]	; (80053d4 <keypad_sm+0xebc>)
				kpenum = WAIT;
 8005372:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8005374:	7819      	ldrb	r1, [r3, #0]
 8005376:	b249      	sxtb	r1, r1
 8005378:	2903      	cmp	r1, #3
 800537a:	f73f a8e3 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800537e:	7819      	ldrb	r1, [r3, #0]
 8005380:	b249      	sxtb	r1, r1
 8005382:	2903      	cmp	r1, #3
 8005384:	dcf6      	bgt.n	8005374 <keypad_sm+0xe5c>
			if(keypadarr[4] == '.'){
 8005386:	7911      	ldrb	r1, [r2, #4]
 8005388:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800538a:	bf08      	it	eq
 800538c:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 800538e:	78d1      	ldrb	r1, [r2, #3]
 8005390:	b2c9      	uxtb	r1, r1
 8005392:	7111      	strb	r1, [r2, #4]
 8005394:	7891      	ldrb	r1, [r2, #2]
 8005396:	b2c9      	uxtb	r1, r1
 8005398:	70d1      	strb	r1, [r2, #3]
 800539a:	7851      	ldrb	r1, [r2, #1]
 800539c:	b2c9      	uxtb	r1, r1
 800539e:	7091      	strb	r1, [r2, #2]
 80053a0:	7811      	ldrb	r1, [r2, #0]
 80053a2:	b2c9      	uxtb	r1, r1
 80053a4:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80053a6:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80053a8:	7819      	ldrb	r1, [r3, #0]
 80053aa:	3101      	adds	r1, #1
 80053ac:	b249      	sxtb	r1, r1
 80053ae:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80053b0:	7819      	ldrb	r1, [r3, #0]
 80053b2:	b249      	sxtb	r1, r1
 80053b4:	2903      	cmp	r1, #3
 80053b6:	dde2      	ble.n	800537e <keypad_sm+0xe66>
}
 80053b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ba:	bf00      	nop
 80053bc:	f3af 8000 	nop.w
 80053c0:	50b0f27c 	.word	0x50b0f27c
 80053c4:	3fe99a6b 	.word	0x3fe99a6b
 80053c8:	20000394 	.word	0x20000394
 80053cc:	20000005 	.word	0x20000005
 80053d0:	20000000 	.word	0x20000000
 80053d4:	20000704 	.word	0x20000704
 80053d8:	41400000 	.word	0x41400000
 80053dc:	200003ad 	.word	0x200003ad
				kpenum = WAIT;
 80053e0:	2500      	movs	r5, #0
			keypadarr[0] = num;
 80053e2:	207a      	movs	r0, #122	; 0x7a
 80053e4:	4b9b      	ldr	r3, [pc, #620]	; (8005654 <keypad_sm+0x113c>)
			if(keypadarr[4] == '.'){
 80053e6:	4a9c      	ldr	r2, [pc, #624]	; (8005658 <keypad_sm+0x1140>)
				keypaddecimal = 0;
 80053e8:	4f9c      	ldr	r7, [pc, #624]	; (800565c <keypad_sm+0x1144>)
				kpenum = WAIT;
 80053ea:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80053ec:	7819      	ldrb	r1, [r3, #0]
 80053ee:	b249      	sxtb	r1, r1
 80053f0:	2903      	cmp	r1, #3
 80053f2:	dc1c      	bgt.n	800542e <keypad_sm+0xf16>
		if(keypaditerator < keypadlength-1){
 80053f4:	7819      	ldrb	r1, [r3, #0]
 80053f6:	b249      	sxtb	r1, r1
 80053f8:	2903      	cmp	r1, #3
 80053fa:	dcf7      	bgt.n	80053ec <keypad_sm+0xed4>
			if(keypadarr[4] == '.'){
 80053fc:	7911      	ldrb	r1, [r2, #4]
 80053fe:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005400:	bf08      	it	eq
 8005402:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 8005404:	78d1      	ldrb	r1, [r2, #3]
 8005406:	b2c9      	uxtb	r1, r1
 8005408:	7111      	strb	r1, [r2, #4]
 800540a:	7891      	ldrb	r1, [r2, #2]
 800540c:	b2c9      	uxtb	r1, r1
 800540e:	70d1      	strb	r1, [r2, #3]
 8005410:	7851      	ldrb	r1, [r2, #1]
 8005412:	b2c9      	uxtb	r1, r1
 8005414:	7091      	strb	r1, [r2, #2]
 8005416:	7811      	ldrb	r1, [r2, #0]
 8005418:	b2c9      	uxtb	r1, r1
 800541a:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800541c:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800541e:	7819      	ldrb	r1, [r3, #0]
 8005420:	3101      	adds	r1, #1
 8005422:	b249      	sxtb	r1, r1
 8005424:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005426:	7819      	ldrb	r1, [r3, #0]
 8005428:	b249      	sxtb	r1, r1
 800542a:	2903      	cmp	r1, #3
 800542c:	dde2      	ble.n	80053f4 <keypad_sm+0xedc>
				encmode = 0;
 800542e:	2300      	movs	r3, #0
				encpos = 0;
 8005430:	4a8b      	ldr	r2, [pc, #556]	; (8005660 <keypad_sm+0x1148>)
				encmode = 0;
 8005432:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005434:	7013      	strb	r3, [r2, #0]
}
 8005436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 8005438:	2600      	movs	r6, #0
			keypadarr[0] = num;
 800543a:	207a      	movs	r0, #122	; 0x7a
 800543c:	4b85      	ldr	r3, [pc, #532]	; (8005654 <keypad_sm+0x113c>)
			if(keypadarr[4] == '.'){
 800543e:	4a86      	ldr	r2, [pc, #536]	; (8005658 <keypad_sm+0x1140>)
				keypaddecimal = 0;
 8005440:	4d86      	ldr	r5, [pc, #536]	; (800565c <keypad_sm+0x1144>)
	while(keypaditerator < 4){
 8005442:	7819      	ldrb	r1, [r3, #0]
 8005444:	b249      	sxtb	r1, r1
 8005446:	2903      	cmp	r1, #3
 8005448:	dc1c      	bgt.n	8005484 <keypad_sm+0xf6c>
		if(keypaditerator < keypadlength-1){
 800544a:	7819      	ldrb	r1, [r3, #0]
 800544c:	b249      	sxtb	r1, r1
 800544e:	2903      	cmp	r1, #3
 8005450:	dcf7      	bgt.n	8005442 <keypad_sm+0xf2a>
			if(keypadarr[4] == '.'){
 8005452:	7911      	ldrb	r1, [r2, #4]
 8005454:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005456:	bf08      	it	eq
 8005458:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800545a:	78d1      	ldrb	r1, [r2, #3]
 800545c:	b2c9      	uxtb	r1, r1
 800545e:	7111      	strb	r1, [r2, #4]
 8005460:	7891      	ldrb	r1, [r2, #2]
 8005462:	b2c9      	uxtb	r1, r1
 8005464:	70d1      	strb	r1, [r2, #3]
 8005466:	7851      	ldrb	r1, [r2, #1]
 8005468:	b2c9      	uxtb	r1, r1
 800546a:	7091      	strb	r1, [r2, #2]
 800546c:	7811      	ldrb	r1, [r2, #0]
 800546e:	b2c9      	uxtb	r1, r1
 8005470:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005472:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005474:	7819      	ldrb	r1, [r3, #0]
 8005476:	3101      	adds	r1, #1
 8005478:	b249      	sxtb	r1, r1
 800547a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800547c:	7819      	ldrb	r1, [r3, #0]
 800547e:	b249      	sxtb	r1, r1
 8005480:	2903      	cmp	r1, #3
 8005482:	dde2      	ble.n	800544a <keypad_sm+0xf32>
				encmode = 0;
 8005484:	2300      	movs	r3, #0
				encpos = 0;
 8005486:	4a76      	ldr	r2, [pc, #472]	; (8005660 <keypad_sm+0x1148>)
				encmode = 0;
 8005488:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800548a:	7013      	strb	r3, [r2, #0]
}
 800548c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 800548e:	2500      	movs	r5, #0
			keypadarr[0] = num;
 8005490:	207a      	movs	r0, #122	; 0x7a
 8005492:	4b70      	ldr	r3, [pc, #448]	; (8005654 <keypad_sm+0x113c>)
			if(keypadarr[4] == '.'){
 8005494:	4a70      	ldr	r2, [pc, #448]	; (8005658 <keypad_sm+0x1140>)
				keypaddecimal = 0;
 8005496:	4f71      	ldr	r7, [pc, #452]	; (800565c <keypad_sm+0x1144>)
				kpenum = WAIT;
 8005498:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 800549a:	7819      	ldrb	r1, [r3, #0]
 800549c:	b249      	sxtb	r1, r1
 800549e:	2903      	cmp	r1, #3
 80054a0:	dc1c      	bgt.n	80054dc <keypad_sm+0xfc4>
		if(keypaditerator < keypadlength-1){
 80054a2:	7819      	ldrb	r1, [r3, #0]
 80054a4:	b249      	sxtb	r1, r1
 80054a6:	2903      	cmp	r1, #3
 80054a8:	dcf7      	bgt.n	800549a <keypad_sm+0xf82>
			if(keypadarr[4] == '.'){
 80054aa:	7911      	ldrb	r1, [r2, #4]
 80054ac:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80054ae:	bf08      	it	eq
 80054b0:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 80054b2:	78d1      	ldrb	r1, [r2, #3]
 80054b4:	b2c9      	uxtb	r1, r1
 80054b6:	7111      	strb	r1, [r2, #4]
 80054b8:	7891      	ldrb	r1, [r2, #2]
 80054ba:	b2c9      	uxtb	r1, r1
 80054bc:	70d1      	strb	r1, [r2, #3]
 80054be:	7851      	ldrb	r1, [r2, #1]
 80054c0:	b2c9      	uxtb	r1, r1
 80054c2:	7091      	strb	r1, [r2, #2]
 80054c4:	7811      	ldrb	r1, [r2, #0]
 80054c6:	b2c9      	uxtb	r1, r1
 80054c8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80054ca:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80054cc:	7819      	ldrb	r1, [r3, #0]
 80054ce:	3101      	adds	r1, #1
 80054d0:	b249      	sxtb	r1, r1
 80054d2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80054d4:	7819      	ldrb	r1, [r3, #0]
 80054d6:	b249      	sxtb	r1, r1
 80054d8:	2903      	cmp	r1, #3
 80054da:	dde2      	ble.n	80054a2 <keypad_sm+0xf8a>
				encmode = 0;
 80054dc:	2300      	movs	r3, #0
				encpos = 0;
 80054de:	4a60      	ldr	r2, [pc, #384]	; (8005660 <keypad_sm+0x1148>)
				encmode = 0;
 80054e0:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80054e2:	7013      	strb	r3, [r2, #0]
}
 80054e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 80054e6:	207a      	movs	r0, #122	; 0x7a
 80054e8:	4b5a      	ldr	r3, [pc, #360]	; (8005654 <keypad_sm+0x113c>)
			if(keypadarr[4] == '.'){
 80054ea:	4a5b      	ldr	r2, [pc, #364]	; (8005658 <keypad_sm+0x1140>)
				keypaddecimal = 0;
 80054ec:	4c5b      	ldr	r4, [pc, #364]	; (800565c <keypad_sm+0x1144>)
				kpenum = WAIT;
 80054ee:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80054f0:	7819      	ldrb	r1, [r3, #0]
 80054f2:	b249      	sxtb	r1, r1
 80054f4:	2903      	cmp	r1, #3
 80054f6:	f73f a825 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80054fa:	7819      	ldrb	r1, [r3, #0]
 80054fc:	b249      	sxtb	r1, r1
 80054fe:	2903      	cmp	r1, #3
 8005500:	dcf6      	bgt.n	80054f0 <keypad_sm+0xfd8>
			if(keypadarr[4] == '.'){
 8005502:	7911      	ldrb	r1, [r2, #4]
 8005504:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005506:	bf08      	it	eq
 8005508:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 800550a:	78d1      	ldrb	r1, [r2, #3]
 800550c:	b2c9      	uxtb	r1, r1
 800550e:	7111      	strb	r1, [r2, #4]
 8005510:	7891      	ldrb	r1, [r2, #2]
 8005512:	b2c9      	uxtb	r1, r1
 8005514:	70d1      	strb	r1, [r2, #3]
 8005516:	7851      	ldrb	r1, [r2, #1]
 8005518:	b2c9      	uxtb	r1, r1
 800551a:	7091      	strb	r1, [r2, #2]
 800551c:	7811      	ldrb	r1, [r2, #0]
 800551e:	b2c9      	uxtb	r1, r1
 8005520:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005522:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005524:	7819      	ldrb	r1, [r3, #0]
 8005526:	3101      	adds	r1, #1
 8005528:	b249      	sxtb	r1, r1
 800552a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800552c:	7819      	ldrb	r1, [r3, #0]
 800552e:	b249      	sxtb	r1, r1
 8005530:	2903      	cmp	r1, #3
 8005532:	dde2      	ble.n	80054fa <keypad_sm+0xfe2>
}
 8005534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(num == '#'){
 8005536:	2823      	cmp	r0, #35	; 0x23
 8005538:	f000 8379 	beq.w	8005c2e <keypad_sm+0x1716>
			else if(num == '+'){
 800553c:	282b      	cmp	r0, #43	; 0x2b
 800553e:	f000 8480 	beq.w	8005e42 <keypad_sm+0x192a>
			else if(num == '-'){
 8005542:	282d      	cmp	r0, #45	; 0x2d
 8005544:	f000 8556 	beq.w	8005ff4 <keypad_sm+0x1adc>
			else if(num == 's'){
 8005548:	2873      	cmp	r0, #115	; 0x73
 800554a:	f000 869d 	beq.w	8006288 <keypad_sm+0x1d70>
			else if(num == '['){
 800554e:	285b      	cmp	r0, #91	; 0x5b
 8005550:	f000 8772 	beq.w	8006438 <keypad_sm+0x1f20>
			else if(num == ']'){
 8005554:	285d      	cmp	r0, #93	; 0x5d
 8005556:	f47e aff5 	bne.w	8004544 <keypad_sm+0x2c>
				inc_arr_a(encpos);
 800555a:	4b41      	ldr	r3, [pc, #260]	; (8005660 <keypad_sm+0x1148>)
 800555c:	7818      	ldrb	r0, [r3, #0]
}
 800555e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				inc_arr_a(encpos);
 8005562:	b240      	sxtb	r0, r0
 8005564:	f7fe be0a 	b.w	800417c <inc_arr_a>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8005568:	4b3a      	ldr	r3, [pc, #232]	; (8005654 <keypad_sm+0x113c>)
 800556a:	781a      	ldrb	r2, [r3, #0]
 800556c:	b252      	sxtb	r2, r2
 800556e:	2a01      	cmp	r2, #1
 8005570:	f77e afe8 	ble.w	8004544 <keypad_sm+0x2c>
 8005574:	4839      	ldr	r0, [pc, #228]	; (800565c <keypad_sm+0x1144>)
 8005576:	7802      	ldrb	r2, [r0, #0]
 8005578:	2a00      	cmp	r2, #0
 800557a:	f47e afe3 	bne.w	8004544 <keypad_sm+0x2c>
			keypadarr[keypadlength-1] = num;
 800557e:	252e      	movs	r5, #46	; 0x2e
			keypaddecimal = 1;
 8005580:	2401      	movs	r4, #1
				keypadarr[i-1] = keypadarr[i];
 8005582:	4a35      	ldr	r2, [pc, #212]	; (8005658 <keypad_sm+0x1140>)
 8005584:	7851      	ldrb	r1, [r2, #1]
 8005586:	b2c9      	uxtb	r1, r1
 8005588:	7011      	strb	r1, [r2, #0]
 800558a:	7891      	ldrb	r1, [r2, #2]
 800558c:	b2c9      	uxtb	r1, r1
 800558e:	7051      	strb	r1, [r2, #1]
 8005590:	78d1      	ldrb	r1, [r2, #3]
 8005592:	b2c9      	uxtb	r1, r1
 8005594:	7091      	strb	r1, [r2, #2]
 8005596:	7911      	ldrb	r1, [r2, #4]
 8005598:	b2c9      	uxtb	r1, r1
 800559a:	70d1      	strb	r1, [r2, #3]
			keypadarr[keypadlength-1] = num;
 800559c:	7115      	strb	r5, [r2, #4]
			keypaddecimal = 1;
 800559e:	7004      	strb	r4, [r0, #0]
			keypaditerator--;
 80055a0:	781a      	ldrb	r2, [r3, #0]
 80055a2:	3a01      	subs	r2, #1
 80055a4:	b252      	sxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
}
 80055a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80055aa:	2500      	movs	r5, #0
			keypadarr[0] = num;
 80055ac:	207a      	movs	r0, #122	; 0x7a
 80055ae:	4b29      	ldr	r3, [pc, #164]	; (8005654 <keypad_sm+0x113c>)
			if(keypadarr[4] == '.'){
 80055b0:	4a29      	ldr	r2, [pc, #164]	; (8005658 <keypad_sm+0x1140>)
				keypaddecimal = 0;
 80055b2:	4f2a      	ldr	r7, [pc, #168]	; (800565c <keypad_sm+0x1144>)
				kpenum = WAIT;
 80055b4:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 80055b6:	7819      	ldrb	r1, [r3, #0]
 80055b8:	b249      	sxtb	r1, r1
 80055ba:	2903      	cmp	r1, #3
 80055bc:	dc1c      	bgt.n	80055f8 <keypad_sm+0x10e0>
		if(keypaditerator < keypadlength-1){
 80055be:	7819      	ldrb	r1, [r3, #0]
 80055c0:	b249      	sxtb	r1, r1
 80055c2:	2903      	cmp	r1, #3
 80055c4:	dcf7      	bgt.n	80055b6 <keypad_sm+0x109e>
			if(keypadarr[4] == '.'){
 80055c6:	7911      	ldrb	r1, [r2, #4]
 80055c8:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80055ca:	bf08      	it	eq
 80055cc:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 80055ce:	78d1      	ldrb	r1, [r2, #3]
 80055d0:	b2c9      	uxtb	r1, r1
 80055d2:	7111      	strb	r1, [r2, #4]
 80055d4:	7891      	ldrb	r1, [r2, #2]
 80055d6:	b2c9      	uxtb	r1, r1
 80055d8:	70d1      	strb	r1, [r2, #3]
 80055da:	7851      	ldrb	r1, [r2, #1]
 80055dc:	b2c9      	uxtb	r1, r1
 80055de:	7091      	strb	r1, [r2, #2]
 80055e0:	7811      	ldrb	r1, [r2, #0]
 80055e2:	b2c9      	uxtb	r1, r1
 80055e4:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80055e6:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80055e8:	7819      	ldrb	r1, [r3, #0]
 80055ea:	3101      	adds	r1, #1
 80055ec:	b249      	sxtb	r1, r1
 80055ee:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80055f0:	7819      	ldrb	r1, [r3, #0]
 80055f2:	b249      	sxtb	r1, r1
 80055f4:	2903      	cmp	r1, #3
 80055f6:	dde2      	ble.n	80055be <keypad_sm+0x10a6>
				encmode = 0;
 80055f8:	2300      	movs	r3, #0
				encpos = 0;
 80055fa:	4a19      	ldr	r2, [pc, #100]	; (8005660 <keypad_sm+0x1148>)
				encmode = 0;
 80055fc:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80055fe:	7013      	strb	r3, [r2, #0]
}
 8005600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keypadarr[0] = num;
 8005602:	207a      	movs	r0, #122	; 0x7a
 8005604:	4b13      	ldr	r3, [pc, #76]	; (8005654 <keypad_sm+0x113c>)
			if(keypadarr[4] == '.'){
 8005606:	4a14      	ldr	r2, [pc, #80]	; (8005658 <keypad_sm+0x1140>)
				keypaddecimal = 0;
 8005608:	4c14      	ldr	r4, [pc, #80]	; (800565c <keypad_sm+0x1144>)
				kpenum = WAIT;
 800560a:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 800560c:	7819      	ldrb	r1, [r3, #0]
 800560e:	b249      	sxtb	r1, r1
 8005610:	2903      	cmp	r1, #3
 8005612:	f73e af97 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005616:	7819      	ldrb	r1, [r3, #0]
 8005618:	b249      	sxtb	r1, r1
 800561a:	2903      	cmp	r1, #3
 800561c:	dcf6      	bgt.n	800560c <keypad_sm+0x10f4>
			if(keypadarr[4] == '.'){
 800561e:	7911      	ldrb	r1, [r2, #4]
 8005620:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005622:	bf08      	it	eq
 8005624:	7025      	strbeq	r5, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005626:	78d1      	ldrb	r1, [r2, #3]
 8005628:	b2c9      	uxtb	r1, r1
 800562a:	7111      	strb	r1, [r2, #4]
 800562c:	7891      	ldrb	r1, [r2, #2]
 800562e:	b2c9      	uxtb	r1, r1
 8005630:	70d1      	strb	r1, [r2, #3]
 8005632:	7851      	ldrb	r1, [r2, #1]
 8005634:	b2c9      	uxtb	r1, r1
 8005636:	7091      	strb	r1, [r2, #2]
 8005638:	7811      	ldrb	r1, [r2, #0]
 800563a:	b2c9      	uxtb	r1, r1
 800563c:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 800563e:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005640:	7819      	ldrb	r1, [r3, #0]
 8005642:	3101      	adds	r1, #1
 8005644:	b249      	sxtb	r1, r1
 8005646:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005648:	7819      	ldrb	r1, [r3, #0]
 800564a:	b249      	sxtb	r1, r1
 800564c:	2903      	cmp	r1, #3
 800564e:	dde2      	ble.n	8005616 <keypad_sm+0x10fe>
}
 8005650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005652:	bf00      	nop
 8005654:	20000005 	.word	0x20000005
 8005658:	20000000 	.word	0x20000000
 800565c:	20000704 	.word	0x20000704
 8005660:	200003ad 	.word	0x200003ad
	float temp = translate_keypad();
 8005664:	f7fe fa12 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005668:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800566a:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800566c:	f7fb fce4 	bl	8001038 <__aeabi_fcmpge>
 8005670:	b158      	cbz	r0, 800568a <keypad_sm+0x1172>
 8005672:	4628      	mov	r0, r5
 8005674:	4991      	ldr	r1, [pc, #580]	; (80058bc <keypad_sm+0x13a4>)
 8005676:	f7fb fcd5 	bl	8001024 <__aeabi_fcmple>
 800567a:	b130      	cbz	r0, 800568a <keypad_sm+0x1172>
					volt_set_main_old = volt_set_main;
 800567c:	4d90      	ldr	r5, [pc, #576]	; (80058c0 <keypad_sm+0x13a8>)
 800567e:	4b91      	ldr	r3, [pc, #580]	; (80058c4 <keypad_sm+0x13ac>)
 8005680:	682a      	ldr	r2, [r5, #0]
 8005682:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005684:	f7fe fa02 	bl	8003a8c <translate_keypad>
 8005688:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 800568a:	2500      	movs	r5, #0
			keypadarr[0] = num;
 800568c:	207a      	movs	r0, #122	; 0x7a
 800568e:	4b8e      	ldr	r3, [pc, #568]	; (80058c8 <keypad_sm+0x13b0>)
			if(keypadarr[4] == '.'){
 8005690:	498e      	ldr	r1, [pc, #568]	; (80058cc <keypad_sm+0x13b4>)
				keypaddecimal = 0;
 8005692:	4f8f      	ldr	r7, [pc, #572]	; (80058d0 <keypad_sm+0x13b8>)
				kpenum = WAIT;
 8005694:	7035      	strb	r5, [r6, #0]
	while(keypaditerator < 4){
 8005696:	781a      	ldrb	r2, [r3, #0]
 8005698:	b252      	sxtb	r2, r2
 800569a:	2a03      	cmp	r2, #3
 800569c:	dc1c      	bgt.n	80056d8 <keypad_sm+0x11c0>
		if(keypaditerator < keypadlength-1){
 800569e:	781a      	ldrb	r2, [r3, #0]
 80056a0:	b252      	sxtb	r2, r2
 80056a2:	2a03      	cmp	r2, #3
 80056a4:	dcf7      	bgt.n	8005696 <keypad_sm+0x117e>
			if(keypadarr[4] == '.'){
 80056a6:	790a      	ldrb	r2, [r1, #4]
 80056a8:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 80056aa:	bf08      	it	eq
 80056ac:	703d      	strbeq	r5, [r7, #0]
				keypadarr[i+1] = keypadarr[i];
 80056ae:	78ca      	ldrb	r2, [r1, #3]
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	710a      	strb	r2, [r1, #4]
 80056b4:	788a      	ldrb	r2, [r1, #2]
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	70ca      	strb	r2, [r1, #3]
 80056ba:	784a      	ldrb	r2, [r1, #1]
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	708a      	strb	r2, [r1, #2]
 80056c0:	780a      	ldrb	r2, [r1, #0]
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 80056c6:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 80056c8:	781a      	ldrb	r2, [r3, #0]
 80056ca:	3201      	adds	r2, #1
 80056cc:	b252      	sxtb	r2, r2
 80056ce:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	b252      	sxtb	r2, r2
 80056d4:	2a03      	cmp	r2, #3
 80056d6:	dde2      	ble.n	800569e <keypad_sm+0x1186>
				encmode = 0;
 80056d8:	2300      	movs	r3, #0
				encpos = 0;
 80056da:	4a7e      	ldr	r2, [pc, #504]	; (80058d4 <keypad_sm+0x13bc>)
				encmode = 0;
 80056dc:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80056de:	7013      	strb	r3, [r2, #0]
}
 80056e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 80056e2:	f7fe f9d3 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80056e6:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80056e8:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80056ea:	f7fb fca5 	bl	8001038 <__aeabi_fcmpge>
 80056ee:	b158      	cbz	r0, 8005708 <keypad_sm+0x11f0>
 80056f0:	4620      	mov	r0, r4
 80056f2:	4972      	ldr	r1, [pc, #456]	; (80058bc <keypad_sm+0x13a4>)
 80056f4:	f7fb fc96 	bl	8001024 <__aeabi_fcmple>
 80056f8:	b130      	cbz	r0, 8005708 <keypad_sm+0x11f0>
					volt_set_main_old = volt_set_main;
 80056fa:	4c71      	ldr	r4, [pc, #452]	; (80058c0 <keypad_sm+0x13a8>)
 80056fc:	4b71      	ldr	r3, [pc, #452]	; (80058c4 <keypad_sm+0x13ac>)
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005702:	f7fe f9c3 	bl	8003a8c <translate_keypad>
 8005706:	6020      	str	r0, [r4, #0]
				kpenum = WAIT;
 8005708:	2400      	movs	r4, #0
			keypadarr[0] = num;
 800570a:	207a      	movs	r0, #122	; 0x7a
 800570c:	4b6e      	ldr	r3, [pc, #440]	; (80058c8 <keypad_sm+0x13b0>)
			if(keypadarr[4] == '.'){
 800570e:	496f      	ldr	r1, [pc, #444]	; (80058cc <keypad_sm+0x13b4>)
				keypaddecimal = 0;
 8005710:	4d6f      	ldr	r5, [pc, #444]	; (80058d0 <keypad_sm+0x13b8>)
				kpenum = WAIT;
 8005712:	7034      	strb	r4, [r6, #0]
	while(keypaditerator < 4){
 8005714:	781a      	ldrb	r2, [r3, #0]
 8005716:	b252      	sxtb	r2, r2
 8005718:	2a03      	cmp	r2, #3
 800571a:	f73e af13 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800571e:	781a      	ldrb	r2, [r3, #0]
 8005720:	b252      	sxtb	r2, r2
 8005722:	2a03      	cmp	r2, #3
 8005724:	dcf6      	bgt.n	8005714 <keypad_sm+0x11fc>
			if(keypadarr[4] == '.'){
 8005726:	790a      	ldrb	r2, [r1, #4]
 8005728:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 800572a:	bf08      	it	eq
 800572c:	702c      	strbeq	r4, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800572e:	78ca      	ldrb	r2, [r1, #3]
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	710a      	strb	r2, [r1, #4]
 8005734:	788a      	ldrb	r2, [r1, #2]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	70ca      	strb	r2, [r1, #3]
 800573a:	784a      	ldrb	r2, [r1, #1]
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	708a      	strb	r2, [r1, #2]
 8005740:	780a      	ldrb	r2, [r1, #0]
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005746:	7008      	strb	r0, [r1, #0]
			keypaditerator++;
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	3201      	adds	r2, #1
 800574c:	b252      	sxtb	r2, r2
 800574e:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005750:	781a      	ldrb	r2, [r3, #0]
 8005752:	b252      	sxtb	r2, r2
 8005754:	2a03      	cmp	r2, #3
 8005756:	dde2      	ble.n	800571e <keypad_sm+0x1206>
}
 8005758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(num == '#'){
 800575a:	2823      	cmp	r0, #35	; 0x23
 800575c:	f000 8346 	beq.w	8005dec <keypad_sm+0x18d4>
			else if(num == '+'){
 8005760:	282b      	cmp	r0, #43	; 0x2b
 8005762:	f000 85ef 	beq.w	8006344 <keypad_sm+0x1e2c>
			else if(num == '-'){
 8005766:	282d      	cmp	r0, #45	; 0x2d
 8005768:	f000 862d 	beq.w	80063c6 <keypad_sm+0x1eae>
			else if(num == 's'){
 800576c:	2873      	cmp	r0, #115	; 0x73
 800576e:	f47f ad9c 	bne.w	80052aa <keypad_sm+0xd92>
				if(encpos == 1){
 8005772:	4b58      	ldr	r3, [pc, #352]	; (80058d4 <keypad_sm+0x13bc>)
 8005774:	781a      	ldrb	r2, [r3, #0]
 8005776:	2a01      	cmp	r2, #1
					encpos++;
 8005778:	781a      	ldrb	r2, [r3, #0]
				if(encpos == 1){
 800577a:	f000 8679 	beq.w	8006470 <keypad_sm+0x1f58>
				else if(encpos < 4){
 800577e:	b252      	sxtb	r2, r2
 8005780:	2a03      	cmp	r2, #3
					encpos = 0;
 8005782:	bfcf      	iteee	gt
 8005784:	2200      	movgt	r2, #0
					encpos++;
 8005786:	781a      	ldrble	r2, [r3, #0]
 8005788:	3201      	addle	r2, #1
 800578a:	b252      	sxtble	r2, r2
					encpos = 0;
 800578c:	701a      	strb	r2, [r3, #0]
}
 800578e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 8005790:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8005792:	207a      	movs	r0, #122	; 0x7a
 8005794:	4b4c      	ldr	r3, [pc, #304]	; (80058c8 <keypad_sm+0x13b0>)
			if(keypadarr[4] == '.'){
 8005796:	4a4d      	ldr	r2, [pc, #308]	; (80058cc <keypad_sm+0x13b4>)
				keypaddecimal = 0;
 8005798:	4d4d      	ldr	r5, [pc, #308]	; (80058d0 <keypad_sm+0x13b8>)
	while(keypaditerator < 4){
 800579a:	7819      	ldrb	r1, [r3, #0]
 800579c:	b249      	sxtb	r1, r1
 800579e:	2903      	cmp	r1, #3
 80057a0:	dc1c      	bgt.n	80057dc <keypad_sm+0x12c4>
		if(keypaditerator < keypadlength-1){
 80057a2:	7819      	ldrb	r1, [r3, #0]
 80057a4:	b249      	sxtb	r1, r1
 80057a6:	2903      	cmp	r1, #3
 80057a8:	dcf7      	bgt.n	800579a <keypad_sm+0x1282>
			if(keypadarr[4] == '.'){
 80057aa:	7911      	ldrb	r1, [r2, #4]
 80057ac:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80057ae:	bf08      	it	eq
 80057b0:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80057b2:	78d1      	ldrb	r1, [r2, #3]
 80057b4:	b2c9      	uxtb	r1, r1
 80057b6:	7111      	strb	r1, [r2, #4]
 80057b8:	7891      	ldrb	r1, [r2, #2]
 80057ba:	b2c9      	uxtb	r1, r1
 80057bc:	70d1      	strb	r1, [r2, #3]
 80057be:	7851      	ldrb	r1, [r2, #1]
 80057c0:	b2c9      	uxtb	r1, r1
 80057c2:	7091      	strb	r1, [r2, #2]
 80057c4:	7811      	ldrb	r1, [r2, #0]
 80057c6:	b2c9      	uxtb	r1, r1
 80057c8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80057ca:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80057cc:	7819      	ldrb	r1, [r3, #0]
 80057ce:	3101      	adds	r1, #1
 80057d0:	b249      	sxtb	r1, r1
 80057d2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80057d4:	7819      	ldrb	r1, [r3, #0]
 80057d6:	b249      	sxtb	r1, r1
 80057d8:	2903      	cmp	r1, #3
 80057da:	dde2      	ble.n	80057a2 <keypad_sm+0x128a>
				encmode = 0;
 80057dc:	2300      	movs	r3, #0
				encpos = 0;
 80057de:	4a3d      	ldr	r2, [pc, #244]	; (80058d4 <keypad_sm+0x13bc>)
				encmode = 0;
 80057e0:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80057e2:	7013      	strb	r3, [r2, #0]
}
 80057e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 80057e6:	4b38      	ldr	r3, [pc, #224]	; (80058c8 <keypad_sm+0x13b0>)
 80057e8:	781a      	ldrb	r2, [r3, #0]
 80057ea:	b252      	sxtb	r2, r2
 80057ec:	2a01      	cmp	r2, #1
 80057ee:	f77e aea9 	ble.w	8004544 <keypad_sm+0x2c>
 80057f2:	4837      	ldr	r0, [pc, #220]	; (80058d0 <keypad_sm+0x13b8>)
 80057f4:	7802      	ldrb	r2, [r0, #0]
 80057f6:	2a00      	cmp	r2, #0
 80057f8:	f47e aea4 	bne.w	8004544 <keypad_sm+0x2c>
			keypadarr[keypadlength-1] = num;
 80057fc:	252e      	movs	r5, #46	; 0x2e
			keypaddecimal = 1;
 80057fe:	2401      	movs	r4, #1
				keypadarr[i-1] = keypadarr[i];
 8005800:	4a32      	ldr	r2, [pc, #200]	; (80058cc <keypad_sm+0x13b4>)
 8005802:	7851      	ldrb	r1, [r2, #1]
 8005804:	b2c9      	uxtb	r1, r1
 8005806:	7011      	strb	r1, [r2, #0]
 8005808:	7891      	ldrb	r1, [r2, #2]
 800580a:	b2c9      	uxtb	r1, r1
 800580c:	7051      	strb	r1, [r2, #1]
 800580e:	78d1      	ldrb	r1, [r2, #3]
 8005810:	b2c9      	uxtb	r1, r1
 8005812:	7091      	strb	r1, [r2, #2]
 8005814:	7911      	ldrb	r1, [r2, #4]
 8005816:	b2c9      	uxtb	r1, r1
 8005818:	70d1      	strb	r1, [r2, #3]
			keypadarr[keypadlength-1] = num;
 800581a:	7115      	strb	r5, [r2, #4]
			keypaddecimal = 1;
 800581c:	7004      	strb	r4, [r0, #0]
			keypaditerator--;
 800581e:	781a      	ldrb	r2, [r3, #0]
 8005820:	3a01      	subs	r2, #1
 8005822:	b252      	sxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]
}
 8005826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005828:	2000      	movs	r0, #0
			keypadarr[0] = num;
 800582a:	247a      	movs	r4, #122	; 0x7a
 800582c:	4b26      	ldr	r3, [pc, #152]	; (80058c8 <keypad_sm+0x13b0>)
			if(keypadarr[4] == '.'){
 800582e:	4927      	ldr	r1, [pc, #156]	; (80058cc <keypad_sm+0x13b4>)
				keypaddecimal = 0;
 8005830:	4d27      	ldr	r5, [pc, #156]	; (80058d0 <keypad_sm+0x13b8>)
				kpenum = WAIT;
 8005832:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005834:	781a      	ldrb	r2, [r3, #0]
 8005836:	b252      	sxtb	r2, r2
 8005838:	2a03      	cmp	r2, #3
 800583a:	f73e ae83 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 800583e:	781a      	ldrb	r2, [r3, #0]
 8005840:	b252      	sxtb	r2, r2
 8005842:	2a03      	cmp	r2, #3
 8005844:	dcf6      	bgt.n	8005834 <keypad_sm+0x131c>
			if(keypadarr[4] == '.'){
 8005846:	790a      	ldrb	r2, [r1, #4]
 8005848:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 800584a:	bf08      	it	eq
 800584c:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800584e:	78ca      	ldrb	r2, [r1, #3]
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	710a      	strb	r2, [r1, #4]
 8005854:	788a      	ldrb	r2, [r1, #2]
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	70ca      	strb	r2, [r1, #3]
 800585a:	784a      	ldrb	r2, [r1, #1]
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	708a      	strb	r2, [r1, #2]
 8005860:	780a      	ldrb	r2, [r1, #0]
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005866:	700c      	strb	r4, [r1, #0]
			keypaditerator++;
 8005868:	781a      	ldrb	r2, [r3, #0]
 800586a:	3201      	adds	r2, #1
 800586c:	b252      	sxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005870:	781a      	ldrb	r2, [r3, #0]
 8005872:	b252      	sxtb	r2, r2
 8005874:	2a03      	cmp	r2, #3
 8005876:	dde2      	ble.n	800583e <keypad_sm+0x1326>
}
 8005878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(keypaditerator < keypadlength-1){
 800587a:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <keypad_sm+0x13b0>)
 800587c:	781a      	ldrb	r2, [r3, #0]
 800587e:	b252      	sxtb	r2, r2
 8005880:	2a03      	cmp	r2, #3
 8005882:	f73e ae5f 	bgt.w	8004544 <keypad_sm+0x2c>
			if(keypadarr[4] == '.'){
 8005886:	4a11      	ldr	r2, [pc, #68]	; (80058cc <keypad_sm+0x13b4>)
 8005888:	7911      	ldrb	r1, [r2, #4]
 800588a:	292e      	cmp	r1, #46	; 0x2e
 800588c:	d102      	bne.n	8005894 <keypad_sm+0x137c>
				keypaddecimal = 0;
 800588e:	2000      	movs	r0, #0
 8005890:	490f      	ldr	r1, [pc, #60]	; (80058d0 <keypad_sm+0x13b8>)
 8005892:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 8005894:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8005896:	78d1      	ldrb	r1, [r2, #3]
 8005898:	b2c9      	uxtb	r1, r1
 800589a:	7111      	strb	r1, [r2, #4]
 800589c:	7891      	ldrb	r1, [r2, #2]
 800589e:	b2c9      	uxtb	r1, r1
 80058a0:	70d1      	strb	r1, [r2, #3]
 80058a2:	7851      	ldrb	r1, [r2, #1]
 80058a4:	b2c9      	uxtb	r1, r1
 80058a6:	7091      	strb	r1, [r2, #2]
 80058a8:	7811      	ldrb	r1, [r2, #0]
 80058aa:	b2c9      	uxtb	r1, r1
 80058ac:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80058ae:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 80058b0:	781a      	ldrb	r2, [r3, #0]
 80058b2:	3201      	adds	r2, #1
 80058b4:	b252      	sxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]
}
 80058b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ba:	bf00      	nop
 80058bc:	41400000 	.word	0x41400000
 80058c0:	2000086c 	.word	0x2000086c
 80058c4:	20000870 	.word	0x20000870
 80058c8:	20000005 	.word	0x20000005
 80058cc:	20000000 	.word	0x20000000
 80058d0:	20000704 	.word	0x20000704
 80058d4:	200003ad 	.word	0x200003ad
				keypaddecimal = 0;
 80058d8:	2600      	movs	r6, #0
			keypadarr[0] = num;
 80058da:	207a      	movs	r0, #122	; 0x7a
 80058dc:	4b8a      	ldr	r3, [pc, #552]	; (8005b08 <keypad_sm+0x15f0>)
			if(keypadarr[4] == '.'){
 80058de:	4a8b      	ldr	r2, [pc, #556]	; (8005b0c <keypad_sm+0x15f4>)
				keypaddecimal = 0;
 80058e0:	4d8b      	ldr	r5, [pc, #556]	; (8005b10 <keypad_sm+0x15f8>)
	while(keypaditerator < 4){
 80058e2:	7819      	ldrb	r1, [r3, #0]
 80058e4:	b249      	sxtb	r1, r1
 80058e6:	2903      	cmp	r1, #3
 80058e8:	dc1c      	bgt.n	8005924 <keypad_sm+0x140c>
		if(keypaditerator < keypadlength-1){
 80058ea:	7819      	ldrb	r1, [r3, #0]
 80058ec:	b249      	sxtb	r1, r1
 80058ee:	2903      	cmp	r1, #3
 80058f0:	dcf7      	bgt.n	80058e2 <keypad_sm+0x13ca>
			if(keypadarr[4] == '.'){
 80058f2:	7911      	ldrb	r1, [r2, #4]
 80058f4:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80058f6:	bf08      	it	eq
 80058f8:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80058fa:	78d1      	ldrb	r1, [r2, #3]
 80058fc:	b2c9      	uxtb	r1, r1
 80058fe:	7111      	strb	r1, [r2, #4]
 8005900:	7891      	ldrb	r1, [r2, #2]
 8005902:	b2c9      	uxtb	r1, r1
 8005904:	70d1      	strb	r1, [r2, #3]
 8005906:	7851      	ldrb	r1, [r2, #1]
 8005908:	b2c9      	uxtb	r1, r1
 800590a:	7091      	strb	r1, [r2, #2]
 800590c:	7811      	ldrb	r1, [r2, #0]
 800590e:	b2c9      	uxtb	r1, r1
 8005910:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005912:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005914:	7819      	ldrb	r1, [r3, #0]
 8005916:	3101      	adds	r1, #1
 8005918:	b249      	sxtb	r1, r1
 800591a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800591c:	7819      	ldrb	r1, [r3, #0]
 800591e:	b249      	sxtb	r1, r1
 8005920:	2903      	cmp	r1, #3
 8005922:	dde2      	ble.n	80058ea <keypad_sm+0x13d2>
				encmode = 0;
 8005924:	2300      	movs	r3, #0
				encpos = 0;
 8005926:	4a7b      	ldr	r2, [pc, #492]	; (8005b14 <keypad_sm+0x15fc>)
				encmode = 0;
 8005928:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800592a:	7013      	strb	r3, [r2, #0]
}
 800592c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 800592e:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8005930:	207a      	movs	r0, #122	; 0x7a
 8005932:	4b75      	ldr	r3, [pc, #468]	; (8005b08 <keypad_sm+0x15f0>)
			if(keypadarr[4] == '.'){
 8005934:	4a75      	ldr	r2, [pc, #468]	; (8005b0c <keypad_sm+0x15f4>)
				keypaddecimal = 0;
 8005936:	4d76      	ldr	r5, [pc, #472]	; (8005b10 <keypad_sm+0x15f8>)
	while(keypaditerator < 4){
 8005938:	7819      	ldrb	r1, [r3, #0]
 800593a:	b249      	sxtb	r1, r1
 800593c:	2903      	cmp	r1, #3
 800593e:	dc1c      	bgt.n	800597a <keypad_sm+0x1462>
		if(keypaditerator < keypadlength-1){
 8005940:	7819      	ldrb	r1, [r3, #0]
 8005942:	b249      	sxtb	r1, r1
 8005944:	2903      	cmp	r1, #3
 8005946:	dcf7      	bgt.n	8005938 <keypad_sm+0x1420>
			if(keypadarr[4] == '.'){
 8005948:	7911      	ldrb	r1, [r2, #4]
 800594a:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800594c:	bf08      	it	eq
 800594e:	702e      	strbeq	r6, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005950:	78d1      	ldrb	r1, [r2, #3]
 8005952:	b2c9      	uxtb	r1, r1
 8005954:	7111      	strb	r1, [r2, #4]
 8005956:	7891      	ldrb	r1, [r2, #2]
 8005958:	b2c9      	uxtb	r1, r1
 800595a:	70d1      	strb	r1, [r2, #3]
 800595c:	7851      	ldrb	r1, [r2, #1]
 800595e:	b2c9      	uxtb	r1, r1
 8005960:	7091      	strb	r1, [r2, #2]
 8005962:	7811      	ldrb	r1, [r2, #0]
 8005964:	b2c9      	uxtb	r1, r1
 8005966:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005968:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 800596a:	7819      	ldrb	r1, [r3, #0]
 800596c:	3101      	adds	r1, #1
 800596e:	b249      	sxtb	r1, r1
 8005970:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005972:	7819      	ldrb	r1, [r3, #0]
 8005974:	b249      	sxtb	r1, r1
 8005976:	2903      	cmp	r1, #3
 8005978:	dde2      	ble.n	8005940 <keypad_sm+0x1428>
				encmode = 0;
 800597a:	2300      	movs	r3, #0
				encpos = 0;
 800597c:	4a65      	ldr	r2, [pc, #404]	; (8005b14 <keypad_sm+0x15fc>)
				encmode = 0;
 800597e:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005980:	7013      	strb	r3, [r2, #0]
}
 8005982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8005984:	4a60      	ldr	r2, [pc, #384]	; (8005b08 <keypad_sm+0x15f0>)
 8005986:	7813      	ldrb	r3, [r2, #0]
 8005988:	b25b      	sxtb	r3, r3
 800598a:	2b01      	cmp	r3, #1
 800598c:	f77e adda 	ble.w	8004544 <keypad_sm+0x2c>
 8005990:	485f      	ldr	r0, [pc, #380]	; (8005b10 <keypad_sm+0x15f8>)
 8005992:	7803      	ldrb	r3, [r0, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f47e add5 	bne.w	8004544 <keypad_sm+0x2c>
			keypadarr[keypadlength-1] = num;
 800599a:	252e      	movs	r5, #46	; 0x2e
			keypaddecimal = 1;
 800599c:	2401      	movs	r4, #1
				keypadarr[i-1] = keypadarr[i];
 800599e:	4b5b      	ldr	r3, [pc, #364]	; (8005b0c <keypad_sm+0x15f4>)
 80059a0:	7859      	ldrb	r1, [r3, #1]
 80059a2:	b2c9      	uxtb	r1, r1
 80059a4:	7019      	strb	r1, [r3, #0]
 80059a6:	7899      	ldrb	r1, [r3, #2]
 80059a8:	b2c9      	uxtb	r1, r1
 80059aa:	7059      	strb	r1, [r3, #1]
 80059ac:	78d9      	ldrb	r1, [r3, #3]
 80059ae:	b2c9      	uxtb	r1, r1
 80059b0:	7099      	strb	r1, [r3, #2]
 80059b2:	7919      	ldrb	r1, [r3, #4]
 80059b4:	b2c9      	uxtb	r1, r1
 80059b6:	70d9      	strb	r1, [r3, #3]
			keypadarr[keypadlength-1] = num;
 80059b8:	711d      	strb	r5, [r3, #4]
			keypaddecimal = 1;
 80059ba:	7004      	strb	r4, [r0, #0]
			keypaditerator--;
 80059bc:	7813      	ldrb	r3, [r2, #0]
 80059be:	3b01      	subs	r3, #1
 80059c0:	b25b      	sxtb	r3, r3
 80059c2:	7013      	strb	r3, [r2, #0]
}
 80059c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 80059c6:	f7fe f861 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80059ca:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80059cc:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80059ce:	f7fb fb33 	bl	8001038 <__aeabi_fcmpge>
 80059d2:	b140      	cbz	r0, 80059e6 <keypad_sm+0x14ce>
 80059d4:	4620      	mov	r0, r4
 80059d6:	4950      	ldr	r1, [pc, #320]	; (8005b18 <keypad_sm+0x1600>)
 80059d8:	f7fb fb24 	bl	8001024 <__aeabi_fcmple>
 80059dc:	b118      	cbz	r0, 80059e6 <keypad_sm+0x14ce>
					volt_set_aux = translate_keypad();
 80059de:	f7fe f855 	bl	8003a8c <translate_keypad>
 80059e2:	4a4e      	ldr	r2, [pc, #312]	; (8005b1c <keypad_sm+0x1604>)
 80059e4:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 80059e6:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80059e8:	247a      	movs	r4, #122	; 0x7a
 80059ea:	4b47      	ldr	r3, [pc, #284]	; (8005b08 <keypad_sm+0x15f0>)
			if(keypadarr[4] == '.'){
 80059ec:	4a47      	ldr	r2, [pc, #284]	; (8005b0c <keypad_sm+0x15f4>)
				keypaddecimal = 0;
 80059ee:	4d48      	ldr	r5, [pc, #288]	; (8005b10 <keypad_sm+0x15f8>)
				kpenum = WAIT;
 80059f0:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80059f2:	7819      	ldrb	r1, [r3, #0]
 80059f4:	b249      	sxtb	r1, r1
 80059f6:	2903      	cmp	r1, #3
 80059f8:	f73e ada4 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80059fc:	7819      	ldrb	r1, [r3, #0]
 80059fe:	b249      	sxtb	r1, r1
 8005a00:	2903      	cmp	r1, #3
 8005a02:	dcf6      	bgt.n	80059f2 <keypad_sm+0x14da>
			if(keypadarr[4] == '.'){
 8005a04:	7911      	ldrb	r1, [r2, #4]
 8005a06:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005a08:	bf08      	it	eq
 8005a0a:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005a0c:	78d1      	ldrb	r1, [r2, #3]
 8005a0e:	b2c9      	uxtb	r1, r1
 8005a10:	7111      	strb	r1, [r2, #4]
 8005a12:	7891      	ldrb	r1, [r2, #2]
 8005a14:	b2c9      	uxtb	r1, r1
 8005a16:	70d1      	strb	r1, [r2, #3]
 8005a18:	7851      	ldrb	r1, [r2, #1]
 8005a1a:	b2c9      	uxtb	r1, r1
 8005a1c:	7091      	strb	r1, [r2, #2]
 8005a1e:	7811      	ldrb	r1, [r2, #0]
 8005a20:	b2c9      	uxtb	r1, r1
 8005a22:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005a24:	7014      	strb	r4, [r2, #0]
			keypaditerator++;
 8005a26:	7819      	ldrb	r1, [r3, #0]
 8005a28:	3101      	adds	r1, #1
 8005a2a:	b249      	sxtb	r1, r1
 8005a2c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005a2e:	7819      	ldrb	r1, [r3, #0]
 8005a30:	b249      	sxtb	r1, r1
 8005a32:	2903      	cmp	r1, #3
 8005a34:	dde2      	ble.n	80059fc <keypad_sm+0x14e4>
}
 8005a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(num == '#'){
 8005a38:	2823      	cmp	r0, #35	; 0x23
 8005a3a:	f000 8323 	beq.w	8006084 <keypad_sm+0x1b6c>
			else if(num == '+'){
 8005a3e:	282b      	cmp	r0, #43	; 0x2b
 8005a40:	f000 8374 	beq.w	800612c <keypad_sm+0x1c14>
			else if(num == '-'){
 8005a44:	282d      	cmp	r0, #45	; 0x2d
 8005a46:	f000 843d 	beq.w	80062c4 <keypad_sm+0x1dac>
			else if(num == 's'){
 8005a4a:	2873      	cmp	r0, #115	; 0x73
 8005a4c:	f47f ad7f 	bne.w	800554e <keypad_sm+0x1036>
				if(encpos == 0){
 8005a50:	4b30      	ldr	r3, [pc, #192]	; (8005b14 <keypad_sm+0x15fc>)
 8005a52:	781a      	ldrb	r2, [r3, #0]
 8005a54:	2a00      	cmp	r2, #0
 8005a56:	f040 8501 	bne.w	800645c <keypad_sm+0x1f44>
					encpos++;
 8005a5a:	781a      	ldrb	r2, [r3, #0]
 8005a5c:	3201      	adds	r2, #1
 8005a5e:	b252      	sxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]
					encpos++;
 8005a62:	781a      	ldrb	r2, [r3, #0]
 8005a64:	3201      	adds	r2, #1
 8005a66:	b252      	sxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]
}
 8005a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				update_keypad('z');
 8005a70:	f7fb be0a 	b.w	8001688 <update_keypad.constprop.0>
				kpenum = WAIT;
 8005a74:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005a76:	257a      	movs	r5, #122	; 0x7a
 8005a78:	4b23      	ldr	r3, [pc, #140]	; (8005b08 <keypad_sm+0x15f0>)
			if(keypadarr[4] == '.'){
 8005a7a:	4924      	ldr	r1, [pc, #144]	; (8005b0c <keypad_sm+0x15f4>)
				keypaddecimal = 0;
 8005a7c:	4c24      	ldr	r4, [pc, #144]	; (8005b10 <keypad_sm+0x15f8>)
				kpenum = WAIT;
 8005a7e:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	b252      	sxtb	r2, r2
 8005a84:	2a03      	cmp	r2, #3
 8005a86:	f73e ad5d 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	b252      	sxtb	r2, r2
 8005a8e:	2a03      	cmp	r2, #3
 8005a90:	dcf6      	bgt.n	8005a80 <keypad_sm+0x1568>
			if(keypadarr[4] == '.'){
 8005a92:	790a      	ldrb	r2, [r1, #4]
 8005a94:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8005a96:	bf08      	it	eq
 8005a98:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005a9a:	78ca      	ldrb	r2, [r1, #3]
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	710a      	strb	r2, [r1, #4]
 8005aa0:	788a      	ldrb	r2, [r1, #2]
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	70ca      	strb	r2, [r1, #3]
 8005aa6:	784a      	ldrb	r2, [r1, #1]
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	708a      	strb	r2, [r1, #2]
 8005aac:	780a      	ldrb	r2, [r1, #0]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005ab2:	700d      	strb	r5, [r1, #0]
			keypaditerator++;
 8005ab4:	781a      	ldrb	r2, [r3, #0]
 8005ab6:	3201      	adds	r2, #1
 8005ab8:	b252      	sxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005abc:	781a      	ldrb	r2, [r3, #0]
 8005abe:	b252      	sxtb	r2, r2
 8005ac0:	2a03      	cmp	r2, #3
 8005ac2:	dde2      	ble.n	8005a8a <keypad_sm+0x1572>
}
 8005ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(keypaditerator < keypadlength-1){
 8005ac6:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <keypad_sm+0x15f0>)
 8005ac8:	781a      	ldrb	r2, [r3, #0]
 8005aca:	b252      	sxtb	r2, r2
 8005acc:	2a03      	cmp	r2, #3
 8005ace:	f73e ad39 	bgt.w	8004544 <keypad_sm+0x2c>
			if(keypadarr[4] == '.'){
 8005ad2:	4a0e      	ldr	r2, [pc, #56]	; (8005b0c <keypad_sm+0x15f4>)
 8005ad4:	7911      	ldrb	r1, [r2, #4]
 8005ad6:	292e      	cmp	r1, #46	; 0x2e
 8005ad8:	d102      	bne.n	8005ae0 <keypad_sm+0x15c8>
				keypaddecimal = 0;
 8005ada:	2000      	movs	r0, #0
 8005adc:	490c      	ldr	r1, [pc, #48]	; (8005b10 <keypad_sm+0x15f8>)
 8005ade:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 8005ae0:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8005ae2:	78d1      	ldrb	r1, [r2, #3]
 8005ae4:	b2c9      	uxtb	r1, r1
 8005ae6:	7111      	strb	r1, [r2, #4]
 8005ae8:	7891      	ldrb	r1, [r2, #2]
 8005aea:	b2c9      	uxtb	r1, r1
 8005aec:	70d1      	strb	r1, [r2, #3]
 8005aee:	7851      	ldrb	r1, [r2, #1]
 8005af0:	b2c9      	uxtb	r1, r1
 8005af2:	7091      	strb	r1, [r2, #2]
 8005af4:	7811      	ldrb	r1, [r2, #0]
 8005af6:	b2c9      	uxtb	r1, r1
 8005af8:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005afa:	7010      	strb	r0, [r2, #0]
			keypaditerator++;
 8005afc:	781a      	ldrb	r2, [r3, #0]
 8005afe:	3201      	adds	r2, #1
 8005b00:	b252      	sxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]
}
 8005b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000005 	.word	0x20000005
 8005b0c:	20000000 	.word	0x20000000
 8005b10:	20000704 	.word	0x20000704
 8005b14:	200003ad 	.word	0x200003ad
 8005b18:	41400000 	.word	0x41400000
 8005b1c:	20000868 	.word	0x20000868
	float temp = translate_keypad();
 8005b20:	f7fd ffb4 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005b24:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005b26:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005b28:	f7fb fa86 	bl	8001038 <__aeabi_fcmpge>
 8005b2c:	b170      	cbz	r0, 8005b4c <keypad_sm+0x1634>
 8005b2e:	4628      	mov	r0, r5
 8005b30:	4983      	ldr	r1, [pc, #524]	; (8005d40 <keypad_sm+0x1828>)
 8005b32:	f7fb fa77 	bl	8001024 <__aeabi_fcmple>
 8005b36:	b148      	cbz	r0, 8005b4c <keypad_sm+0x1634>
					amp_set_main_old = amp_set_main;
 8005b38:	4d82      	ldr	r5, [pc, #520]	; (8005d44 <keypad_sm+0x182c>)
 8005b3a:	4b83      	ldr	r3, [pc, #524]	; (8005d48 <keypad_sm+0x1830>)
 8005b3c:	682a      	ldr	r2, [r5, #0]
 8005b3e:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8005b40:	f7fd ffa4 	bl	8003a8c <translate_keypad>
 8005b44:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 8005b46:	6828      	ldr	r0, [r5, #0]
 8005b48:	f7fb fe1c 	bl	8001784 <update_ADC_watchdog>
				kpenum = WAIT;
 8005b4c:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005b4e:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005b52:	4b7e      	ldr	r3, [pc, #504]	; (8005d4c <keypad_sm+0x1834>)
			if(keypadarr[4] == '.'){
 8005b54:	497e      	ldr	r1, [pc, #504]	; (8005d50 <keypad_sm+0x1838>)
				keypaddecimal = 0;
 8005b56:	4d7f      	ldr	r5, [pc, #508]	; (8005d54 <keypad_sm+0x183c>)
				kpenum = WAIT;
 8005b58:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005b5a:	781a      	ldrb	r2, [r3, #0]
 8005b5c:	b252      	sxtb	r2, r2
 8005b5e:	2a03      	cmp	r2, #3
 8005b60:	dc1d      	bgt.n	8005b9e <keypad_sm+0x1686>
		if(keypaditerator < keypadlength-1){
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	b252      	sxtb	r2, r2
 8005b66:	2a03      	cmp	r2, #3
 8005b68:	dcf7      	bgt.n	8005b5a <keypad_sm+0x1642>
			if(keypadarr[4] == '.'){
 8005b6a:	790a      	ldrb	r2, [r1, #4]
 8005b6c:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8005b6e:	bf08      	it	eq
 8005b70:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005b72:	78ca      	ldrb	r2, [r1, #3]
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	710a      	strb	r2, [r1, #4]
 8005b78:	788a      	ldrb	r2, [r1, #2]
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	70ca      	strb	r2, [r1, #3]
 8005b7e:	784a      	ldrb	r2, [r1, #1]
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	708a      	strb	r2, [r1, #2]
 8005b84:	780a      	ldrb	r2, [r1, #0]
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005b8a:	f881 c000 	strb.w	ip, [r1]
			keypaditerator++;
 8005b8e:	781a      	ldrb	r2, [r3, #0]
 8005b90:	3201      	adds	r2, #1
 8005b92:	b252      	sxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005b96:	781a      	ldrb	r2, [r3, #0]
 8005b98:	b252      	sxtb	r2, r2
 8005b9a:	2a03      	cmp	r2, #3
 8005b9c:	dde1      	ble.n	8005b62 <keypad_sm+0x164a>
				encmode = 0;
 8005b9e:	2300      	movs	r3, #0
				encpos = 0;
 8005ba0:	4a6d      	ldr	r2, [pc, #436]	; (8005d58 <keypad_sm+0x1840>)
				encmode = 0;
 8005ba2:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005ba4:	7013      	strb	r3, [r2, #0]
}
 8005ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005ba8:	f7fd ff70 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005bac:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005bae:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005bb0:	f7fb fa42 	bl	8001038 <__aeabi_fcmpge>
 8005bb4:	b190      	cbz	r0, 8005bdc <keypad_sm+0x16c4>
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f7fa fc4e 	bl	8000458 <__aeabi_f2d>
 8005bbc:	a35e      	add	r3, pc, #376	; (adr r3, 8005d38 <keypad_sm+0x1820>)
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	f7fa ff1d 	bl	8000a00 <__aeabi_dcmple>
 8005bc6:	b148      	cbz	r0, 8005bdc <keypad_sm+0x16c4>
					amp_set_main_old = amp_set_main;
 8005bc8:	4c5e      	ldr	r4, [pc, #376]	; (8005d44 <keypad_sm+0x182c>)
 8005bca:	4b5f      	ldr	r3, [pc, #380]	; (8005d48 <keypad_sm+0x1830>)
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8005bd0:	f7fd ff5c 	bl	8003a8c <translate_keypad>
 8005bd4:	6020      	str	r0, [r4, #0]
					update_ADC_watchdog(amp_set_main);
 8005bd6:	6820      	ldr	r0, [r4, #0]
 8005bd8:	f7fb fdd4 	bl	8001784 <update_ADC_watchdog>
				kpenum = WAIT;
 8005bdc:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005bde:	257a      	movs	r5, #122	; 0x7a
 8005be0:	4b5a      	ldr	r3, [pc, #360]	; (8005d4c <keypad_sm+0x1834>)
			if(keypadarr[4] == '.'){
 8005be2:	495b      	ldr	r1, [pc, #364]	; (8005d50 <keypad_sm+0x1838>)
				keypaddecimal = 0;
 8005be4:	4c5b      	ldr	r4, [pc, #364]	; (8005d54 <keypad_sm+0x183c>)
				kpenum = WAIT;
 8005be6:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005be8:	781a      	ldrb	r2, [r3, #0]
 8005bea:	b252      	sxtb	r2, r2
 8005bec:	2a03      	cmp	r2, #3
 8005bee:	f73e aca9 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005bf2:	781a      	ldrb	r2, [r3, #0]
 8005bf4:	b252      	sxtb	r2, r2
 8005bf6:	2a03      	cmp	r2, #3
 8005bf8:	dcf6      	bgt.n	8005be8 <keypad_sm+0x16d0>
			if(keypadarr[4] == '.'){
 8005bfa:	790a      	ldrb	r2, [r1, #4]
 8005bfc:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8005bfe:	bf08      	it	eq
 8005c00:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005c02:	78ca      	ldrb	r2, [r1, #3]
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	710a      	strb	r2, [r1, #4]
 8005c08:	788a      	ldrb	r2, [r1, #2]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	70ca      	strb	r2, [r1, #3]
 8005c0e:	784a      	ldrb	r2, [r1, #1]
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	708a      	strb	r2, [r1, #2]
 8005c14:	780a      	ldrb	r2, [r1, #0]
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005c1a:	700d      	strb	r5, [r1, #0]
			keypaditerator++;
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	3201      	adds	r2, #1
 8005c20:	b252      	sxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	b252      	sxtb	r2, r2
 8005c28:	2a03      	cmp	r2, #3
 8005c2a:	dde2      	ble.n	8005bf2 <keypad_sm+0x16da>
}
 8005c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 8005c2e:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8005c30:	257a      	movs	r5, #122	; 0x7a
 8005c32:	4b46      	ldr	r3, [pc, #280]	; (8005d4c <keypad_sm+0x1834>)
			if(keypadarr[4] == '.'){
 8005c34:	4946      	ldr	r1, [pc, #280]	; (8005d50 <keypad_sm+0x1838>)
				keypaddecimal = 0;
 8005c36:	4847      	ldr	r0, [pc, #284]	; (8005d54 <keypad_sm+0x183c>)
	while(keypaditerator < 4){
 8005c38:	781a      	ldrb	r2, [r3, #0]
 8005c3a:	b252      	sxtb	r2, r2
 8005c3c:	2a03      	cmp	r2, #3
 8005c3e:	dc1c      	bgt.n	8005c7a <keypad_sm+0x1762>
		if(keypaditerator < keypadlength-1){
 8005c40:	781a      	ldrb	r2, [r3, #0]
 8005c42:	b252      	sxtb	r2, r2
 8005c44:	2a03      	cmp	r2, #3
 8005c46:	dcf7      	bgt.n	8005c38 <keypad_sm+0x1720>
			if(keypadarr[4] == '.'){
 8005c48:	790a      	ldrb	r2, [r1, #4]
 8005c4a:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8005c4c:	bf08      	it	eq
 8005c4e:	7006      	strbeq	r6, [r0, #0]
				keypadarr[i+1] = keypadarr[i];
 8005c50:	78ca      	ldrb	r2, [r1, #3]
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	710a      	strb	r2, [r1, #4]
 8005c56:	788a      	ldrb	r2, [r1, #2]
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	70ca      	strb	r2, [r1, #3]
 8005c5c:	784a      	ldrb	r2, [r1, #1]
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	708a      	strb	r2, [r1, #2]
 8005c62:	780a      	ldrb	r2, [r1, #0]
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005c68:	700d      	strb	r5, [r1, #0]
			keypaditerator++;
 8005c6a:	781a      	ldrb	r2, [r3, #0]
 8005c6c:	3201      	adds	r2, #1
 8005c6e:	b252      	sxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005c72:	781a      	ldrb	r2, [r3, #0]
 8005c74:	b252      	sxtb	r2, r2
 8005c76:	2a03      	cmp	r2, #3
 8005c78:	dde2      	ble.n	8005c40 <keypad_sm+0x1728>
				encmode = 0;
 8005c7a:	2300      	movs	r3, #0
				encpos = 0;
 8005c7c:	4a36      	ldr	r2, [pc, #216]	; (8005d58 <keypad_sm+0x1840>)
				encmode = 0;
 8005c7e:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005c80:	7013      	strb	r3, [r2, #0]
}
 8005c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005c84:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005c86:	257a      	movs	r5, #122	; 0x7a
 8005c88:	4b30      	ldr	r3, [pc, #192]	; (8005d4c <keypad_sm+0x1834>)
			if(keypadarr[4] == '.'){
 8005c8a:	4a31      	ldr	r2, [pc, #196]	; (8005d50 <keypad_sm+0x1838>)
				keypaddecimal = 0;
 8005c8c:	4c31      	ldr	r4, [pc, #196]	; (8005d54 <keypad_sm+0x183c>)
				kpenum = WAIT;
 8005c8e:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005c90:	7819      	ldrb	r1, [r3, #0]
 8005c92:	b249      	sxtb	r1, r1
 8005c94:	2903      	cmp	r1, #3
 8005c96:	f73e ac55 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005c9a:	7819      	ldrb	r1, [r3, #0]
 8005c9c:	b249      	sxtb	r1, r1
 8005c9e:	2903      	cmp	r1, #3
 8005ca0:	dcf6      	bgt.n	8005c90 <keypad_sm+0x1778>
			if(keypadarr[4] == '.'){
 8005ca2:	7911      	ldrb	r1, [r2, #4]
 8005ca4:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005ca6:	bf08      	it	eq
 8005ca8:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005caa:	78d1      	ldrb	r1, [r2, #3]
 8005cac:	b2c9      	uxtb	r1, r1
 8005cae:	7111      	strb	r1, [r2, #4]
 8005cb0:	7891      	ldrb	r1, [r2, #2]
 8005cb2:	b2c9      	uxtb	r1, r1
 8005cb4:	70d1      	strb	r1, [r2, #3]
 8005cb6:	7851      	ldrb	r1, [r2, #1]
 8005cb8:	b2c9      	uxtb	r1, r1
 8005cba:	7091      	strb	r1, [r2, #2]
 8005cbc:	7811      	ldrb	r1, [r2, #0]
 8005cbe:	b2c9      	uxtb	r1, r1
 8005cc0:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005cc2:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005cc4:	7819      	ldrb	r1, [r3, #0]
 8005cc6:	3101      	adds	r1, #1
 8005cc8:	b249      	sxtb	r1, r1
 8005cca:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005ccc:	7819      	ldrb	r1, [r3, #0]
 8005cce:	b249      	sxtb	r1, r1
 8005cd0:	2903      	cmp	r1, #3
 8005cd2:	dde2      	ble.n	8005c9a <keypad_sm+0x1782>
}
 8005cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 8005cd6:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005cd8:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005cdc:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <keypad_sm+0x1834>)
			if(keypadarr[4] == '.'){
 8005cde:	491c      	ldr	r1, [pc, #112]	; (8005d50 <keypad_sm+0x1838>)
				keypaddecimal = 0;
 8005ce0:	4d1c      	ldr	r5, [pc, #112]	; (8005d54 <keypad_sm+0x183c>)
				kpenum = WAIT;
 8005ce2:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005ce4:	781a      	ldrb	r2, [r3, #0]
 8005ce6:	b252      	sxtb	r2, r2
 8005ce8:	2a03      	cmp	r2, #3
 8005cea:	dc1d      	bgt.n	8005d28 <keypad_sm+0x1810>
		if(keypaditerator < keypadlength-1){
 8005cec:	781a      	ldrb	r2, [r3, #0]
 8005cee:	b252      	sxtb	r2, r2
 8005cf0:	2a03      	cmp	r2, #3
 8005cf2:	dcf7      	bgt.n	8005ce4 <keypad_sm+0x17cc>
			if(keypadarr[4] == '.'){
 8005cf4:	790a      	ldrb	r2, [r1, #4]
 8005cf6:	2a2e      	cmp	r2, #46	; 0x2e
				keypaddecimal = 0;
 8005cf8:	bf08      	it	eq
 8005cfa:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005cfc:	78ca      	ldrb	r2, [r1, #3]
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	710a      	strb	r2, [r1, #4]
 8005d02:	788a      	ldrb	r2, [r1, #2]
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	70ca      	strb	r2, [r1, #3]
 8005d08:	784a      	ldrb	r2, [r1, #1]
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	708a      	strb	r2, [r1, #2]
 8005d0e:	780a      	ldrb	r2, [r1, #0]
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	704a      	strb	r2, [r1, #1]
			keypadarr[0] = num;
 8005d14:	f881 c000 	strb.w	ip, [r1]
			keypaditerator++;
 8005d18:	781a      	ldrb	r2, [r3, #0]
 8005d1a:	3201      	adds	r2, #1
 8005d1c:	b252      	sxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]
	while(keypaditerator < 4){
 8005d20:	781a      	ldrb	r2, [r3, #0]
 8005d22:	b252      	sxtb	r2, r2
 8005d24:	2a03      	cmp	r2, #3
 8005d26:	dde1      	ble.n	8005cec <keypad_sm+0x17d4>
				encmode = 0;
 8005d28:	2300      	movs	r3, #0
				encpos = 0;
 8005d2a:	4a0b      	ldr	r2, [pc, #44]	; (8005d58 <keypad_sm+0x1840>)
				encmode = 0;
 8005d2c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005d2e:	7013      	strb	r3, [r2, #0]
}
 8005d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d32:	bf00      	nop
 8005d34:	f3af 8000 	nop.w
 8005d38:	50b0f27c 	.word	0x50b0f27c
 8005d3c:	3fe99a6b 	.word	0x3fe99a6b
 8005d40:	41400000 	.word	0x41400000
 8005d44:	20000398 	.word	0x20000398
 8005d48:	2000039c 	.word	0x2000039c
 8005d4c:	20000005 	.word	0x20000005
 8005d50:	20000000 	.word	0x20000000
 8005d54:	20000704 	.word	0x20000704
 8005d58:	200003ad 	.word	0x200003ad
	float temp = translate_keypad();
 8005d5c:	f7fd fe96 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d60:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005d62:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d64:	f7fb f968 	bl	8001038 <__aeabi_fcmpge>
 8005d68:	b160      	cbz	r0, 8005d84 <keypad_sm+0x186c>
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f7fa fb74 	bl	8000458 <__aeabi_f2d>
 8005d70:	a395      	add	r3, pc, #596	; (adr r3, 8005fc8 <keypad_sm+0x1ab0>)
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	f7fa fe43 	bl	8000a00 <__aeabi_dcmple>
 8005d7a:	b118      	cbz	r0, 8005d84 <keypad_sm+0x186c>
					amp_set_aux = translate_keypad();
 8005d7c:	f7fd fe86 	bl	8003a8c <translate_keypad>
 8005d80:	4a93      	ldr	r2, [pc, #588]	; (8005fd0 <keypad_sm+0x1ab8>)
 8005d82:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005d84:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005d86:	257a      	movs	r5, #122	; 0x7a
 8005d88:	4b92      	ldr	r3, [pc, #584]	; (8005fd4 <keypad_sm+0x1abc>)
			if(keypadarr[4] == '.'){
 8005d8a:	4a93      	ldr	r2, [pc, #588]	; (8005fd8 <keypad_sm+0x1ac0>)
				keypaddecimal = 0;
 8005d8c:	4c93      	ldr	r4, [pc, #588]	; (8005fdc <keypad_sm+0x1ac4>)
				kpenum = WAIT;
 8005d8e:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005d90:	7819      	ldrb	r1, [r3, #0]
 8005d92:	b249      	sxtb	r1, r1
 8005d94:	2903      	cmp	r1, #3
 8005d96:	f73e abd5 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005d9a:	7819      	ldrb	r1, [r3, #0]
 8005d9c:	b249      	sxtb	r1, r1
 8005d9e:	2903      	cmp	r1, #3
 8005da0:	dcf6      	bgt.n	8005d90 <keypad_sm+0x1878>
			if(keypadarr[4] == '.'){
 8005da2:	7911      	ldrb	r1, [r2, #4]
 8005da4:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005da6:	bf08      	it	eq
 8005da8:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005daa:	78d1      	ldrb	r1, [r2, #3]
 8005dac:	b2c9      	uxtb	r1, r1
 8005dae:	7111      	strb	r1, [r2, #4]
 8005db0:	7891      	ldrb	r1, [r2, #2]
 8005db2:	b2c9      	uxtb	r1, r1
 8005db4:	70d1      	strb	r1, [r2, #3]
 8005db6:	7851      	ldrb	r1, [r2, #1]
 8005db8:	b2c9      	uxtb	r1, r1
 8005dba:	7091      	strb	r1, [r2, #2]
 8005dbc:	7811      	ldrb	r1, [r2, #0]
 8005dbe:	b2c9      	uxtb	r1, r1
 8005dc0:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005dc2:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005dc4:	7819      	ldrb	r1, [r3, #0]
 8005dc6:	3101      	adds	r1, #1
 8005dc8:	b249      	sxtb	r1, r1
 8005dca:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005dcc:	7819      	ldrb	r1, [r3, #0]
 8005dce:	b249      	sxtb	r1, r1
 8005dd0:	2903      	cmp	r1, #3
 8005dd2:	dde2      	ble.n	8005d9a <keypad_sm+0x1882>
}
 8005dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(0, volt_set_aux);
 8005dd6:	4b82      	ldr	r3, [pc, #520]	; (8005fe0 <keypad_sm+0x1ac8>)
 8005dd8:	2000      	movs	r0, #0
 8005dda:	6819      	ldr	r1, [r3, #0]
 8005ddc:	f7fd fff8 	bl	8003dd0 <fill_keypad>
				encmode = 1;
 8005de0:	2101      	movs	r1, #1
				encpos = 0;
 8005de2:	2200      	movs	r2, #0
 8005de4:	4b7f      	ldr	r3, [pc, #508]	; (8005fe4 <keypad_sm+0x1acc>)
				encmode = 1;
 8005de6:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8005de8:	701a      	strb	r2, [r3, #0]
}
 8005dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 8005dec:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8005dee:	257a      	movs	r5, #122	; 0x7a
 8005df0:	4b78      	ldr	r3, [pc, #480]	; (8005fd4 <keypad_sm+0x1abc>)
			if(keypadarr[4] == '.'){
 8005df2:	4a79      	ldr	r2, [pc, #484]	; (8005fd8 <keypad_sm+0x1ac0>)
				keypaddecimal = 0;
 8005df4:	4879      	ldr	r0, [pc, #484]	; (8005fdc <keypad_sm+0x1ac4>)
	while(keypaditerator < 4){
 8005df6:	7819      	ldrb	r1, [r3, #0]
 8005df8:	b249      	sxtb	r1, r1
 8005dfa:	2903      	cmp	r1, #3
 8005dfc:	dc1c      	bgt.n	8005e38 <keypad_sm+0x1920>
		if(keypaditerator < keypadlength-1){
 8005dfe:	7819      	ldrb	r1, [r3, #0]
 8005e00:	b249      	sxtb	r1, r1
 8005e02:	2903      	cmp	r1, #3
 8005e04:	dcf7      	bgt.n	8005df6 <keypad_sm+0x18de>
			if(keypadarr[4] == '.'){
 8005e06:	7911      	ldrb	r1, [r2, #4]
 8005e08:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005e0a:	bf08      	it	eq
 8005e0c:	7006      	strbeq	r6, [r0, #0]
				keypadarr[i+1] = keypadarr[i];
 8005e0e:	78d1      	ldrb	r1, [r2, #3]
 8005e10:	b2c9      	uxtb	r1, r1
 8005e12:	7111      	strb	r1, [r2, #4]
 8005e14:	7891      	ldrb	r1, [r2, #2]
 8005e16:	b2c9      	uxtb	r1, r1
 8005e18:	70d1      	strb	r1, [r2, #3]
 8005e1a:	7851      	ldrb	r1, [r2, #1]
 8005e1c:	b2c9      	uxtb	r1, r1
 8005e1e:	7091      	strb	r1, [r2, #2]
 8005e20:	7811      	ldrb	r1, [r2, #0]
 8005e22:	b2c9      	uxtb	r1, r1
 8005e24:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005e26:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005e28:	7819      	ldrb	r1, [r3, #0]
 8005e2a:	3101      	adds	r1, #1
 8005e2c:	b249      	sxtb	r1, r1
 8005e2e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005e30:	7819      	ldrb	r1, [r3, #0]
 8005e32:	b249      	sxtb	r1, r1
 8005e34:	2903      	cmp	r1, #3
 8005e36:	dde2      	ble.n	8005dfe <keypad_sm+0x18e6>
				encmode = 0;
 8005e38:	2300      	movs	r3, #0
				encpos = 0;
 8005e3a:	4a6a      	ldr	r2, [pc, #424]	; (8005fe4 <keypad_sm+0x1acc>)
				encmode = 0;
 8005e3c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005e3e:	7013      	strb	r3, [r2, #0]
}
 8005e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005e42:	f7fd fe23 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005e46:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005e48:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005e4a:	f7fb f8f5 	bl	8001038 <__aeabi_fcmpge>
 8005e4e:	b140      	cbz	r0, 8005e62 <keypad_sm+0x194a>
 8005e50:	4628      	mov	r0, r5
 8005e52:	4965      	ldr	r1, [pc, #404]	; (8005fe8 <keypad_sm+0x1ad0>)
 8005e54:	f7fb f8e6 	bl	8001024 <__aeabi_fcmple>
 8005e58:	b118      	cbz	r0, 8005e62 <keypad_sm+0x194a>
					amp_set_aux = translate_keypad();
 8005e5a:	f7fd fe17 	bl	8003a8c <translate_keypad>
 8005e5e:	4a5c      	ldr	r2, [pc, #368]	; (8005fd0 <keypad_sm+0x1ab8>)
 8005e60:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005e62:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005e64:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005e68:	4b5a      	ldr	r3, [pc, #360]	; (8005fd4 <keypad_sm+0x1abc>)
			if(keypadarr[4] == '.'){
 8005e6a:	4a5b      	ldr	r2, [pc, #364]	; (8005fd8 <keypad_sm+0x1ac0>)
				keypaddecimal = 0;
 8005e6c:	4d5b      	ldr	r5, [pc, #364]	; (8005fdc <keypad_sm+0x1ac4>)
				kpenum = WAIT;
 8005e6e:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005e70:	7819      	ldrb	r1, [r3, #0]
 8005e72:	b249      	sxtb	r1, r1
 8005e74:	2903      	cmp	r1, #3
 8005e76:	dc1d      	bgt.n	8005eb4 <keypad_sm+0x199c>
		if(keypaditerator < keypadlength-1){
 8005e78:	7819      	ldrb	r1, [r3, #0]
 8005e7a:	b249      	sxtb	r1, r1
 8005e7c:	2903      	cmp	r1, #3
 8005e7e:	dcf7      	bgt.n	8005e70 <keypad_sm+0x1958>
			if(keypadarr[4] == '.'){
 8005e80:	7911      	ldrb	r1, [r2, #4]
 8005e82:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005e84:	bf08      	it	eq
 8005e86:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005e88:	78d1      	ldrb	r1, [r2, #3]
 8005e8a:	b2c9      	uxtb	r1, r1
 8005e8c:	7111      	strb	r1, [r2, #4]
 8005e8e:	7891      	ldrb	r1, [r2, #2]
 8005e90:	b2c9      	uxtb	r1, r1
 8005e92:	70d1      	strb	r1, [r2, #3]
 8005e94:	7851      	ldrb	r1, [r2, #1]
 8005e96:	b2c9      	uxtb	r1, r1
 8005e98:	7091      	strb	r1, [r2, #2]
 8005e9a:	7811      	ldrb	r1, [r2, #0]
 8005e9c:	b2c9      	uxtb	r1, r1
 8005e9e:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005ea0:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8005ea4:	7819      	ldrb	r1, [r3, #0]
 8005ea6:	3101      	adds	r1, #1
 8005ea8:	b249      	sxtb	r1, r1
 8005eaa:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005eac:	7819      	ldrb	r1, [r3, #0]
 8005eae:	b249      	sxtb	r1, r1
 8005eb0:	2903      	cmp	r1, #3
 8005eb2:	dde1      	ble.n	8005e78 <keypad_sm+0x1960>
				encmode = 0;
 8005eb4:	2300      	movs	r3, #0
				encpos = 0;
 8005eb6:	4a4b      	ldr	r2, [pc, #300]	; (8005fe4 <keypad_sm+0x1acc>)
				encmode = 0;
 8005eb8:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005eba:	7013      	strb	r3, [r2, #0]
}
 8005ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005ebe:	f7fd fde5 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005ec2:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005ec4:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005ec6:	f7fb f8b7 	bl	8001038 <__aeabi_fcmpge>
 8005eca:	b158      	cbz	r0, 8005ee4 <keypad_sm+0x19cc>
 8005ecc:	4620      	mov	r0, r4
 8005ece:	4946      	ldr	r1, [pc, #280]	; (8005fe8 <keypad_sm+0x1ad0>)
 8005ed0:	f7fb f8a8 	bl	8001024 <__aeabi_fcmple>
 8005ed4:	b130      	cbz	r0, 8005ee4 <keypad_sm+0x19cc>
					volt_set_main_old = volt_set_main;
 8005ed6:	4c45      	ldr	r4, [pc, #276]	; (8005fec <keypad_sm+0x1ad4>)
 8005ed8:	4b45      	ldr	r3, [pc, #276]	; (8005ff0 <keypad_sm+0x1ad8>)
 8005eda:	6822      	ldr	r2, [r4, #0]
 8005edc:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005ede:	f7fd fdd5 	bl	8003a8c <translate_keypad>
 8005ee2:	6020      	str	r0, [r4, #0]
				kpenum = WAIT;
 8005ee4:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005ee6:	257a      	movs	r5, #122	; 0x7a
 8005ee8:	4b3a      	ldr	r3, [pc, #232]	; (8005fd4 <keypad_sm+0x1abc>)
			if(keypadarr[4] == '.'){
 8005eea:	4a3b      	ldr	r2, [pc, #236]	; (8005fd8 <keypad_sm+0x1ac0>)
				keypaddecimal = 0;
 8005eec:	4c3b      	ldr	r4, [pc, #236]	; (8005fdc <keypad_sm+0x1ac4>)
				kpenum = WAIT;
 8005eee:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005ef0:	7819      	ldrb	r1, [r3, #0]
 8005ef2:	b249      	sxtb	r1, r1
 8005ef4:	2903      	cmp	r1, #3
 8005ef6:	f73e ab25 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 8005efa:	7819      	ldrb	r1, [r3, #0]
 8005efc:	b249      	sxtb	r1, r1
 8005efe:	2903      	cmp	r1, #3
 8005f00:	dcf6      	bgt.n	8005ef0 <keypad_sm+0x19d8>
			if(keypadarr[4] == '.'){
 8005f02:	7911      	ldrb	r1, [r2, #4]
 8005f04:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005f06:	bf08      	it	eq
 8005f08:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8005f0a:	78d1      	ldrb	r1, [r2, #3]
 8005f0c:	b2c9      	uxtb	r1, r1
 8005f0e:	7111      	strb	r1, [r2, #4]
 8005f10:	7891      	ldrb	r1, [r2, #2]
 8005f12:	b2c9      	uxtb	r1, r1
 8005f14:	70d1      	strb	r1, [r2, #3]
 8005f16:	7851      	ldrb	r1, [r2, #1]
 8005f18:	b2c9      	uxtb	r1, r1
 8005f1a:	7091      	strb	r1, [r2, #2]
 8005f1c:	7811      	ldrb	r1, [r2, #0]
 8005f1e:	b2c9      	uxtb	r1, r1
 8005f20:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005f22:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8005f24:	7819      	ldrb	r1, [r3, #0]
 8005f26:	3101      	adds	r1, #1
 8005f28:	b249      	sxtb	r1, r1
 8005f2a:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005f2c:	7819      	ldrb	r1, [r3, #0]
 8005f2e:	b249      	sxtb	r1, r1
 8005f30:	2903      	cmp	r1, #3
 8005f32:	dde2      	ble.n	8005efa <keypad_sm+0x19e2>
}
 8005f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 8005f36:	f7fd fda9 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005f3a:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005f3c:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005f3e:	f7fb f87b 	bl	8001038 <__aeabi_fcmpge>
 8005f42:	b140      	cbz	r0, 8005f56 <keypad_sm+0x1a3e>
 8005f44:	4628      	mov	r0, r5
 8005f46:	4928      	ldr	r1, [pc, #160]	; (8005fe8 <keypad_sm+0x1ad0>)
 8005f48:	f7fb f86c 	bl	8001024 <__aeabi_fcmple>
 8005f4c:	b118      	cbz	r0, 8005f56 <keypad_sm+0x1a3e>
					volt_set_aux = translate_keypad();
 8005f4e:	f7fd fd9d 	bl	8003a8c <translate_keypad>
 8005f52:	4a23      	ldr	r2, [pc, #140]	; (8005fe0 <keypad_sm+0x1ac8>)
 8005f54:	6010      	str	r0, [r2, #0]
				kpenum = WAIT;
 8005f56:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005f58:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005f5c:	4b1d      	ldr	r3, [pc, #116]	; (8005fd4 <keypad_sm+0x1abc>)
			if(keypadarr[4] == '.'){
 8005f5e:	4a1e      	ldr	r2, [pc, #120]	; (8005fd8 <keypad_sm+0x1ac0>)
				keypaddecimal = 0;
 8005f60:	4d1e      	ldr	r5, [pc, #120]	; (8005fdc <keypad_sm+0x1ac4>)
				kpenum = WAIT;
 8005f62:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8005f64:	7819      	ldrb	r1, [r3, #0]
 8005f66:	b249      	sxtb	r1, r1
 8005f68:	2903      	cmp	r1, #3
 8005f6a:	dc1d      	bgt.n	8005fa8 <keypad_sm+0x1a90>
		if(keypaditerator < keypadlength-1){
 8005f6c:	7819      	ldrb	r1, [r3, #0]
 8005f6e:	b249      	sxtb	r1, r1
 8005f70:	2903      	cmp	r1, #3
 8005f72:	dcf7      	bgt.n	8005f64 <keypad_sm+0x1a4c>
			if(keypadarr[4] == '.'){
 8005f74:	7911      	ldrb	r1, [r2, #4]
 8005f76:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8005f78:	bf08      	it	eq
 8005f7a:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8005f7c:	78d1      	ldrb	r1, [r2, #3]
 8005f7e:	b2c9      	uxtb	r1, r1
 8005f80:	7111      	strb	r1, [r2, #4]
 8005f82:	7891      	ldrb	r1, [r2, #2]
 8005f84:	b2c9      	uxtb	r1, r1
 8005f86:	70d1      	strb	r1, [r2, #3]
 8005f88:	7851      	ldrb	r1, [r2, #1]
 8005f8a:	b2c9      	uxtb	r1, r1
 8005f8c:	7091      	strb	r1, [r2, #2]
 8005f8e:	7811      	ldrb	r1, [r2, #0]
 8005f90:	b2c9      	uxtb	r1, r1
 8005f92:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8005f94:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8005f98:	7819      	ldrb	r1, [r3, #0]
 8005f9a:	3101      	adds	r1, #1
 8005f9c:	b249      	sxtb	r1, r1
 8005f9e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8005fa0:	7819      	ldrb	r1, [r3, #0]
 8005fa2:	b249      	sxtb	r1, r1
 8005fa4:	2903      	cmp	r1, #3
 8005fa6:	dde1      	ble.n	8005f6c <keypad_sm+0x1a54>
				encmode = 0;
 8005fa8:	2300      	movs	r3, #0
				encpos = 0;
 8005faa:	4a0e      	ldr	r2, [pc, #56]	; (8005fe4 <keypad_sm+0x1acc>)
				encmode = 0;
 8005fac:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8005fae:	7013      	strb	r3, [r2, #0]
}
 8005fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(0, volt_set_aux);
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <keypad_sm+0x1ac8>)
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	6819      	ldr	r1, [r3, #0]
 8005fb8:	f7fd ff0a 	bl	8003dd0 <fill_keypad>
				encmode = 1;
 8005fbc:	2101      	movs	r1, #1
				encpos = 0;
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <keypad_sm+0x1acc>)
				encmode = 1;
 8005fc2:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8005fc4:	701a      	strb	r2, [r3, #0]
}
 8005fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc8:	50b0f27c 	.word	0x50b0f27c
 8005fcc:	3fe99a6b 	.word	0x3fe99a6b
 8005fd0:	20000394 	.word	0x20000394
 8005fd4:	20000005 	.word	0x20000005
 8005fd8:	20000000 	.word	0x20000000
 8005fdc:	20000704 	.word	0x20000704
 8005fe0:	20000868 	.word	0x20000868
 8005fe4:	200003ad 	.word	0x200003ad
 8005fe8:	41400000 	.word	0x41400000
 8005fec:	2000086c 	.word	0x2000086c
 8005ff0:	20000870 	.word	0x20000870
				kpenum = WAIT;
 8005ff4:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8005ff6:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8005ffa:	4b9b      	ldr	r3, [pc, #620]	; (8006268 <keypad_sm+0x1d50>)
			if(keypadarr[4] == '.'){
 8005ffc:	4a9b      	ldr	r2, [pc, #620]	; (800626c <keypad_sm+0x1d54>)
				keypaddecimal = 0;
 8005ffe:	4d9c      	ldr	r5, [pc, #624]	; (8006270 <keypad_sm+0x1d58>)
				kpenum = WAIT;
 8006000:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8006002:	7819      	ldrb	r1, [r3, #0]
 8006004:	b249      	sxtb	r1, r1
 8006006:	2903      	cmp	r1, #3
 8006008:	dc1d      	bgt.n	8006046 <keypad_sm+0x1b2e>
		if(keypaditerator < keypadlength-1){
 800600a:	7819      	ldrb	r1, [r3, #0]
 800600c:	b249      	sxtb	r1, r1
 800600e:	2903      	cmp	r1, #3
 8006010:	dcf7      	bgt.n	8006002 <keypad_sm+0x1aea>
			if(keypadarr[4] == '.'){
 8006012:	7911      	ldrb	r1, [r2, #4]
 8006014:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 8006016:	bf08      	it	eq
 8006018:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800601a:	78d1      	ldrb	r1, [r2, #3]
 800601c:	b2c9      	uxtb	r1, r1
 800601e:	7111      	strb	r1, [r2, #4]
 8006020:	7891      	ldrb	r1, [r2, #2]
 8006022:	b2c9      	uxtb	r1, r1
 8006024:	70d1      	strb	r1, [r2, #3]
 8006026:	7851      	ldrb	r1, [r2, #1]
 8006028:	b2c9      	uxtb	r1, r1
 800602a:	7091      	strb	r1, [r2, #2]
 800602c:	7811      	ldrb	r1, [r2, #0]
 800602e:	b2c9      	uxtb	r1, r1
 8006030:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8006032:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8006036:	7819      	ldrb	r1, [r3, #0]
 8006038:	3101      	adds	r1, #1
 800603a:	b249      	sxtb	r1, r1
 800603c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800603e:	7819      	ldrb	r1, [r3, #0]
 8006040:	b249      	sxtb	r1, r1
 8006042:	2903      	cmp	r1, #3
 8006044:	dde1      	ble.n	800600a <keypad_sm+0x1af2>
				encmode = 0;
 8006046:	2300      	movs	r3, #0
				encpos = 0;
 8006048:	4a8a      	ldr	r2, [pc, #552]	; (8006274 <keypad_sm+0x1d5c>)
				encmode = 0;
 800604a:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800604c:	7013      	strb	r3, [r2, #0]
}
 800604e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if(encpos == 1){
 8006050:	4b88      	ldr	r3, [pc, #544]	; (8006274 <keypad_sm+0x1d5c>)
 8006052:	781a      	ldrb	r2, [r3, #0]
 8006054:	2a01      	cmp	r2, #1
					encpos++;
 8006056:	781a      	ldrb	r2, [r3, #0]
				if(encpos == 1){
 8006058:	f000 8122 	beq.w	80062a0 <keypad_sm+0x1d88>
				else if(encpos < 4){
 800605c:	b252      	sxtb	r2, r2
 800605e:	2a03      	cmp	r2, #3
					encpos = 0;
 8006060:	bfcf      	iteee	gt
 8006062:	2200      	movgt	r2, #0
					encpos++;
 8006064:	781a      	ldrble	r2, [r3, #0]
 8006066:	3201      	addle	r2, #1
 8006068:	b252      	sxtble	r2, r2
					encpos = 0;
 800606a:	701a      	strb	r2, [r3, #0]
}
 800606c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(1, amp_set_aux);
 800606e:	4b82      	ldr	r3, [pc, #520]	; (8006278 <keypad_sm+0x1d60>)
 8006070:	2001      	movs	r0, #1
 8006072:	6819      	ldr	r1, [r3, #0]
 8006074:	f7fd feac 	bl	8003dd0 <fill_keypad>
				encmode = 1;
 8006078:	2101      	movs	r1, #1
				encpos = 0;
 800607a:	2200      	movs	r2, #0
 800607c:	4b7d      	ldr	r3, [pc, #500]	; (8006274 <keypad_sm+0x1d5c>)
				encmode = 1;
 800607e:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8006080:	701a      	strb	r2, [r3, #0]
}
 8006082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				keypaddecimal = 0;
 8006084:	2600      	movs	r6, #0
			keypadarr[0] = num;
 8006086:	257a      	movs	r5, #122	; 0x7a
 8006088:	4b77      	ldr	r3, [pc, #476]	; (8006268 <keypad_sm+0x1d50>)
			if(keypadarr[4] == '.'){
 800608a:	4a78      	ldr	r2, [pc, #480]	; (800626c <keypad_sm+0x1d54>)
				keypaddecimal = 0;
 800608c:	4878      	ldr	r0, [pc, #480]	; (8006270 <keypad_sm+0x1d58>)
	while(keypaditerator < 4){
 800608e:	7819      	ldrb	r1, [r3, #0]
 8006090:	b249      	sxtb	r1, r1
 8006092:	2903      	cmp	r1, #3
 8006094:	dc1c      	bgt.n	80060d0 <keypad_sm+0x1bb8>
		if(keypaditerator < keypadlength-1){
 8006096:	7819      	ldrb	r1, [r3, #0]
 8006098:	b249      	sxtb	r1, r1
 800609a:	2903      	cmp	r1, #3
 800609c:	dcf7      	bgt.n	800608e <keypad_sm+0x1b76>
			if(keypadarr[4] == '.'){
 800609e:	7911      	ldrb	r1, [r2, #4]
 80060a0:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80060a2:	bf08      	it	eq
 80060a4:	7006      	strbeq	r6, [r0, #0]
				keypadarr[i+1] = keypadarr[i];
 80060a6:	78d1      	ldrb	r1, [r2, #3]
 80060a8:	b2c9      	uxtb	r1, r1
 80060aa:	7111      	strb	r1, [r2, #4]
 80060ac:	7891      	ldrb	r1, [r2, #2]
 80060ae:	b2c9      	uxtb	r1, r1
 80060b0:	70d1      	strb	r1, [r2, #3]
 80060b2:	7851      	ldrb	r1, [r2, #1]
 80060b4:	b2c9      	uxtb	r1, r1
 80060b6:	7091      	strb	r1, [r2, #2]
 80060b8:	7811      	ldrb	r1, [r2, #0]
 80060ba:	b2c9      	uxtb	r1, r1
 80060bc:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80060be:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 80060c0:	7819      	ldrb	r1, [r3, #0]
 80060c2:	3101      	adds	r1, #1
 80060c4:	b249      	sxtb	r1, r1
 80060c6:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80060c8:	7819      	ldrb	r1, [r3, #0]
 80060ca:	b249      	sxtb	r1, r1
 80060cc:	2903      	cmp	r1, #3
 80060ce:	dde2      	ble.n	8006096 <keypad_sm+0x1b7e>
				encmode = 0;
 80060d0:	2300      	movs	r3, #0
				encpos = 0;
 80060d2:	4a68      	ldr	r2, [pc, #416]	; (8006274 <keypad_sm+0x1d5c>)
				encmode = 0;
 80060d4:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80060d6:	7013      	strb	r3, [r2, #0]
}
 80060d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80060da:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80060dc:	257a      	movs	r5, #122	; 0x7a
 80060de:	4b62      	ldr	r3, [pc, #392]	; (8006268 <keypad_sm+0x1d50>)
			if(keypadarr[4] == '.'){
 80060e0:	4a62      	ldr	r2, [pc, #392]	; (800626c <keypad_sm+0x1d54>)
				keypaddecimal = 0;
 80060e2:	4c63      	ldr	r4, [pc, #396]	; (8006270 <keypad_sm+0x1d58>)
				kpenum = WAIT;
 80060e4:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80060e6:	7819      	ldrb	r1, [r3, #0]
 80060e8:	b249      	sxtb	r1, r1
 80060ea:	2903      	cmp	r1, #3
 80060ec:	f73e aa2a 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80060f0:	7819      	ldrb	r1, [r3, #0]
 80060f2:	b249      	sxtb	r1, r1
 80060f4:	2903      	cmp	r1, #3
 80060f6:	dcf6      	bgt.n	80060e6 <keypad_sm+0x1bce>
			if(keypadarr[4] == '.'){
 80060f8:	7911      	ldrb	r1, [r2, #4]
 80060fa:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80060fc:	bf08      	it	eq
 80060fe:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8006100:	78d1      	ldrb	r1, [r2, #3]
 8006102:	b2c9      	uxtb	r1, r1
 8006104:	7111      	strb	r1, [r2, #4]
 8006106:	7891      	ldrb	r1, [r2, #2]
 8006108:	b2c9      	uxtb	r1, r1
 800610a:	70d1      	strb	r1, [r2, #3]
 800610c:	7851      	ldrb	r1, [r2, #1]
 800610e:	b2c9      	uxtb	r1, r1
 8006110:	7091      	strb	r1, [r2, #2]
 8006112:	7811      	ldrb	r1, [r2, #0]
 8006114:	b2c9      	uxtb	r1, r1
 8006116:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8006118:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 800611a:	7819      	ldrb	r1, [r3, #0]
 800611c:	3101      	adds	r1, #1
 800611e:	b249      	sxtb	r1, r1
 8006120:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8006122:	7819      	ldrb	r1, [r3, #0]
 8006124:	b249      	sxtb	r1, r1
 8006126:	2903      	cmp	r1, #3
 8006128:	dde2      	ble.n	80060f0 <keypad_sm+0x1bd8>
}
 800612a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float temp = translate_keypad();
 800612c:	f7fd fcae 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006130:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006132:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006134:	f7fa ff80 	bl	8001038 <__aeabi_fcmpge>
 8006138:	b170      	cbz	r0, 8006158 <keypad_sm+0x1c40>
 800613a:	4628      	mov	r0, r5
 800613c:	494f      	ldr	r1, [pc, #316]	; (800627c <keypad_sm+0x1d64>)
 800613e:	f7fa ff71 	bl	8001024 <__aeabi_fcmple>
 8006142:	b148      	cbz	r0, 8006158 <keypad_sm+0x1c40>
					amp_set_main_old = amp_set_main;
 8006144:	4d4e      	ldr	r5, [pc, #312]	; (8006280 <keypad_sm+0x1d68>)
 8006146:	4b4f      	ldr	r3, [pc, #316]	; (8006284 <keypad_sm+0x1d6c>)
 8006148:	682a      	ldr	r2, [r5, #0]
 800614a:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 800614c:	f7fd fc9e 	bl	8003a8c <translate_keypad>
 8006150:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 8006152:	6828      	ldr	r0, [r5, #0]
 8006154:	f7fb fb16 	bl	8001784 <update_ADC_watchdog>
				kpenum = WAIT;
 8006158:	2000      	movs	r0, #0
			keypadarr[0] = num;
 800615a:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 800615e:	4b42      	ldr	r3, [pc, #264]	; (8006268 <keypad_sm+0x1d50>)
			if(keypadarr[4] == '.'){
 8006160:	4a42      	ldr	r2, [pc, #264]	; (800626c <keypad_sm+0x1d54>)
				keypaddecimal = 0;
 8006162:	4d43      	ldr	r5, [pc, #268]	; (8006270 <keypad_sm+0x1d58>)
				kpenum = WAIT;
 8006164:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8006166:	7819      	ldrb	r1, [r3, #0]
 8006168:	b249      	sxtb	r1, r1
 800616a:	2903      	cmp	r1, #3
 800616c:	dc5d      	bgt.n	800622a <keypad_sm+0x1d12>
		if(keypaditerator < keypadlength-1){
 800616e:	7819      	ldrb	r1, [r3, #0]
 8006170:	b249      	sxtb	r1, r1
 8006172:	2903      	cmp	r1, #3
 8006174:	dcf7      	bgt.n	8006166 <keypad_sm+0x1c4e>
			if(keypadarr[4] == '.'){
 8006176:	7911      	ldrb	r1, [r2, #4]
 8006178:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800617a:	bf08      	it	eq
 800617c:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800617e:	78d1      	ldrb	r1, [r2, #3]
 8006180:	b2c9      	uxtb	r1, r1
 8006182:	7111      	strb	r1, [r2, #4]
 8006184:	7891      	ldrb	r1, [r2, #2]
 8006186:	b2c9      	uxtb	r1, r1
 8006188:	70d1      	strb	r1, [r2, #3]
 800618a:	7851      	ldrb	r1, [r2, #1]
 800618c:	b2c9      	uxtb	r1, r1
 800618e:	7091      	strb	r1, [r2, #2]
 8006190:	7811      	ldrb	r1, [r2, #0]
 8006192:	b2c9      	uxtb	r1, r1
 8006194:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8006196:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 800619a:	7819      	ldrb	r1, [r3, #0]
 800619c:	3101      	adds	r1, #1
 800619e:	b249      	sxtb	r1, r1
 80061a0:	7019      	strb	r1, [r3, #0]
 80061a2:	e7e0      	b.n	8006166 <keypad_sm+0x1c4e>
	float temp = translate_keypad();
 80061a4:	f7fd fc72 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80061a8:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80061aa:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80061ac:	f7fa ff44 	bl	8001038 <__aeabi_fcmpge>
 80061b0:	b190      	cbz	r0, 80061d8 <keypad_sm+0x1cc0>
 80061b2:	4620      	mov	r0, r4
 80061b4:	f7fa f950 	bl	8000458 <__aeabi_f2d>
 80061b8:	a329      	add	r3, pc, #164	; (adr r3, 8006260 <keypad_sm+0x1d48>)
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f7fa fc1f 	bl	8000a00 <__aeabi_dcmple>
 80061c2:	b148      	cbz	r0, 80061d8 <keypad_sm+0x1cc0>
					amp_set_main_old = amp_set_main;
 80061c4:	4c2e      	ldr	r4, [pc, #184]	; (8006280 <keypad_sm+0x1d68>)
 80061c6:	4b2f      	ldr	r3, [pc, #188]	; (8006284 <keypad_sm+0x1d6c>)
 80061c8:	6822      	ldr	r2, [r4, #0]
 80061ca:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 80061cc:	f7fd fc5e 	bl	8003a8c <translate_keypad>
 80061d0:	6020      	str	r0, [r4, #0]
					update_ADC_watchdog(amp_set_main);
 80061d2:	6820      	ldr	r0, [r4, #0]
 80061d4:	f7fb fad6 	bl	8001784 <update_ADC_watchdog>
				kpenum = WAIT;
 80061d8:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80061da:	257a      	movs	r5, #122	; 0x7a
 80061dc:	4b22      	ldr	r3, [pc, #136]	; (8006268 <keypad_sm+0x1d50>)
			if(keypadarr[4] == '.'){
 80061de:	4a23      	ldr	r2, [pc, #140]	; (800626c <keypad_sm+0x1d54>)
				keypaddecimal = 0;
 80061e0:	4c23      	ldr	r4, [pc, #140]	; (8006270 <keypad_sm+0x1d58>)
				kpenum = WAIT;
 80061e2:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80061e4:	7819      	ldrb	r1, [r3, #0]
 80061e6:	b249      	sxtb	r1, r1
 80061e8:	2903      	cmp	r1, #3
 80061ea:	f73e a9ab 	bgt.w	8004544 <keypad_sm+0x2c>
		if(keypaditerator < keypadlength-1){
 80061ee:	7819      	ldrb	r1, [r3, #0]
 80061f0:	b249      	sxtb	r1, r1
 80061f2:	2903      	cmp	r1, #3
 80061f4:	dcf6      	bgt.n	80061e4 <keypad_sm+0x1ccc>
			if(keypadarr[4] == '.'){
 80061f6:	7911      	ldrb	r1, [r2, #4]
 80061f8:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80061fa:	bf08      	it	eq
 80061fc:	7020      	strbeq	r0, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 80061fe:	78d1      	ldrb	r1, [r2, #3]
 8006200:	b2c9      	uxtb	r1, r1
 8006202:	7111      	strb	r1, [r2, #4]
 8006204:	7891      	ldrb	r1, [r2, #2]
 8006206:	b2c9      	uxtb	r1, r1
 8006208:	70d1      	strb	r1, [r2, #3]
 800620a:	7851      	ldrb	r1, [r2, #1]
 800620c:	b2c9      	uxtb	r1, r1
 800620e:	7091      	strb	r1, [r2, #2]
 8006210:	7811      	ldrb	r1, [r2, #0]
 8006212:	b2c9      	uxtb	r1, r1
 8006214:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8006216:	7015      	strb	r5, [r2, #0]
			keypaditerator++;
 8006218:	7819      	ldrb	r1, [r3, #0]
 800621a:	3101      	adds	r1, #1
 800621c:	b249      	sxtb	r1, r1
 800621e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8006220:	7819      	ldrb	r1, [r3, #0]
 8006222:	b249      	sxtb	r1, r1
 8006224:	2903      	cmp	r1, #3
 8006226:	dde2      	ble.n	80061ee <keypad_sm+0x1cd6>
}
 8006228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				encmode = 0;
 800622a:	2300      	movs	r3, #0
				encpos = 0;
 800622c:	4a11      	ldr	r2, [pc, #68]	; (8006274 <keypad_sm+0x1d5c>)
				encmode = 0;
 800622e:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 8006230:	7013      	strb	r3, [r2, #0]
}
 8006232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(1, amp_set_main);
 8006234:	4b12      	ldr	r3, [pc, #72]	; (8006280 <keypad_sm+0x1d68>)
 8006236:	2001      	movs	r0, #1
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	f7fd fdc9 	bl	8003dd0 <fill_keypad>
				encmode = 1;
 800623e:	2101      	movs	r1, #1
				encpos = 0;
 8006240:	2200      	movs	r2, #0
 8006242:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <keypad_sm+0x1d5c>)
				encmode = 1;
 8006244:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8006246:	701a      	strb	r2, [r3, #0]
}
 8006248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(1, amp_set_main);
 800624a:	4b0d      	ldr	r3, [pc, #52]	; (8006280 <keypad_sm+0x1d68>)
 800624c:	2001      	movs	r0, #1
 800624e:	6819      	ldr	r1, [r3, #0]
 8006250:	f7fd fdbe 	bl	8003dd0 <fill_keypad>
				encmode = 1;
 8006254:	2101      	movs	r1, #1
				encpos = 0;
 8006256:	2200      	movs	r2, #0
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <keypad_sm+0x1d5c>)
				encmode = 1;
 800625a:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 800625c:	701a      	strb	r2, [r3, #0]
}
 800625e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006260:	50b0f27c 	.word	0x50b0f27c
 8006264:	3fe99a6b 	.word	0x3fe99a6b
 8006268:	20000005 	.word	0x20000005
 800626c:	20000000 	.word	0x20000000
 8006270:	20000704 	.word	0x20000704
 8006274:	200003ad 	.word	0x200003ad
 8006278:	20000394 	.word	0x20000394
 800627c:	41400000 	.word	0x41400000
 8006280:	20000398 	.word	0x20000398
 8006284:	2000039c 	.word	0x2000039c
				if(encpos == 0){
 8006288:	4b7d      	ldr	r3, [pc, #500]	; (8006480 <keypad_sm+0x1f68>)
 800628a:	781a      	ldrb	r2, [r3, #0]
 800628c:	b982      	cbnz	r2, 80062b0 <keypad_sm+0x1d98>
					encpos++;
 800628e:	781a      	ldrb	r2, [r3, #0]
 8006290:	3201      	adds	r2, #1
 8006292:	b252      	sxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
					encpos++;
 8006296:	781a      	ldrb	r2, [r3, #0]
 8006298:	3201      	adds	r2, #1
 800629a:	b252      	sxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]
}
 800629e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					encpos++;
 80062a0:	3201      	adds	r2, #1
 80062a2:	b252      	sxtb	r2, r2
 80062a4:	701a      	strb	r2, [r3, #0]
					encpos++;
 80062a6:	781a      	ldrb	r2, [r3, #0]
 80062a8:	3201      	adds	r2, #1
 80062aa:	b252      	sxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
}
 80062ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				else if(encpos < 4){
 80062b0:	781a      	ldrb	r2, [r3, #0]
 80062b2:	b252      	sxtb	r2, r2
 80062b4:	2a03      	cmp	r2, #3
					encpos = 0;
 80062b6:	bfcf      	iteee	gt
 80062b8:	2200      	movgt	r2, #0
					encpos++;
 80062ba:	781a      	ldrble	r2, [r3, #0]
 80062bc:	3201      	addle	r2, #1
 80062be:	b252      	sxtble	r2, r2
					encpos = 0;
 80062c0:	701a      	strb	r2, [r3, #0]
}
 80062c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80062c4:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80062c6:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 80062ca:	4b6e      	ldr	r3, [pc, #440]	; (8006484 <keypad_sm+0x1f6c>)
			if(keypadarr[4] == '.'){
 80062cc:	4a6e      	ldr	r2, [pc, #440]	; (8006488 <keypad_sm+0x1f70>)
				keypaddecimal = 0;
 80062ce:	4d6f      	ldr	r5, [pc, #444]	; (800648c <keypad_sm+0x1f74>)
				kpenum = WAIT;
 80062d0:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80062d2:	7819      	ldrb	r1, [r3, #0]
 80062d4:	b249      	sxtb	r1, r1
 80062d6:	2903      	cmp	r1, #3
 80062d8:	dc1d      	bgt.n	8006316 <keypad_sm+0x1dfe>
		if(keypaditerator < keypadlength-1){
 80062da:	7819      	ldrb	r1, [r3, #0]
 80062dc:	b249      	sxtb	r1, r1
 80062de:	2903      	cmp	r1, #3
 80062e0:	dcf7      	bgt.n	80062d2 <keypad_sm+0x1dba>
			if(keypadarr[4] == '.'){
 80062e2:	7911      	ldrb	r1, [r2, #4]
 80062e4:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80062e6:	bf08      	it	eq
 80062e8:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80062ea:	78d1      	ldrb	r1, [r2, #3]
 80062ec:	b2c9      	uxtb	r1, r1
 80062ee:	7111      	strb	r1, [r2, #4]
 80062f0:	7891      	ldrb	r1, [r2, #2]
 80062f2:	b2c9      	uxtb	r1, r1
 80062f4:	70d1      	strb	r1, [r2, #3]
 80062f6:	7851      	ldrb	r1, [r2, #1]
 80062f8:	b2c9      	uxtb	r1, r1
 80062fa:	7091      	strb	r1, [r2, #2]
 80062fc:	7811      	ldrb	r1, [r2, #0]
 80062fe:	b2c9      	uxtb	r1, r1
 8006300:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8006302:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8006306:	7819      	ldrb	r1, [r3, #0]
 8006308:	3101      	adds	r1, #1
 800630a:	b249      	sxtb	r1, r1
 800630c:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 800630e:	7819      	ldrb	r1, [r3, #0]
 8006310:	b249      	sxtb	r1, r1
 8006312:	2903      	cmp	r1, #3
 8006314:	dde1      	ble.n	80062da <keypad_sm+0x1dc2>
				encmode = 0;
 8006316:	2300      	movs	r3, #0
				encpos = 0;
 8006318:	4a59      	ldr	r2, [pc, #356]	; (8006480 <keypad_sm+0x1f68>)
				encmode = 0;
 800631a:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800631c:	7013      	strb	r3, [r2, #0]
}
 800631e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(0, volt_set_main);
 8006320:	4b5b      	ldr	r3, [pc, #364]	; (8006490 <keypad_sm+0x1f78>)
 8006322:	2000      	movs	r0, #0
 8006324:	6819      	ldr	r1, [r3, #0]
 8006326:	f7fd fd53 	bl	8003dd0 <fill_keypad>
				encmode = 1;
 800632a:	2101      	movs	r1, #1
				encpos = 0;
 800632c:	2200      	movs	r2, #0
 800632e:	4b54      	ldr	r3, [pc, #336]	; (8006480 <keypad_sm+0x1f68>)
				encmode = 1;
 8006330:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8006332:	701a      	strb	r2, [r3, #0]
}
 8006334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				dec_arr_v(encpos);
 8006336:	4b52      	ldr	r3, [pc, #328]	; (8006480 <keypad_sm+0x1f68>)
 8006338:	7818      	ldrb	r0, [r3, #0]
}
 800633a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				dec_arr_v(encpos);
 800633e:	b240      	sxtb	r0, r0
 8006340:	f7fd bfae 	b.w	80042a0 <dec_arr_v>
	float temp = translate_keypad();
 8006344:	f7fd fba2 	bl	8003a8c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006348:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800634a:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800634c:	f7fa fe74 	bl	8001038 <__aeabi_fcmpge>
 8006350:	b158      	cbz	r0, 800636a <keypad_sm+0x1e52>
 8006352:	4628      	mov	r0, r5
 8006354:	494f      	ldr	r1, [pc, #316]	; (8006494 <keypad_sm+0x1f7c>)
 8006356:	f7fa fe65 	bl	8001024 <__aeabi_fcmple>
 800635a:	b130      	cbz	r0, 800636a <keypad_sm+0x1e52>
					volt_set_main_old = volt_set_main;
 800635c:	4d4c      	ldr	r5, [pc, #304]	; (8006490 <keypad_sm+0x1f78>)
 800635e:	4b4e      	ldr	r3, [pc, #312]	; (8006498 <keypad_sm+0x1f80>)
 8006360:	682a      	ldr	r2, [r5, #0]
 8006362:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8006364:	f7fd fb92 	bl	8003a8c <translate_keypad>
 8006368:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 800636a:	2000      	movs	r0, #0
			keypadarr[0] = num;
 800636c:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8006370:	4b44      	ldr	r3, [pc, #272]	; (8006484 <keypad_sm+0x1f6c>)
			if(keypadarr[4] == '.'){
 8006372:	4a45      	ldr	r2, [pc, #276]	; (8006488 <keypad_sm+0x1f70>)
				keypaddecimal = 0;
 8006374:	4d45      	ldr	r5, [pc, #276]	; (800648c <keypad_sm+0x1f74>)
				kpenum = WAIT;
 8006376:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 8006378:	7819      	ldrb	r1, [r3, #0]
 800637a:	b249      	sxtb	r1, r1
 800637c:	2903      	cmp	r1, #3
 800637e:	dc1d      	bgt.n	80063bc <keypad_sm+0x1ea4>
		if(keypaditerator < keypadlength-1){
 8006380:	7819      	ldrb	r1, [r3, #0]
 8006382:	b249      	sxtb	r1, r1
 8006384:	2903      	cmp	r1, #3
 8006386:	dcf7      	bgt.n	8006378 <keypad_sm+0x1e60>
			if(keypadarr[4] == '.'){
 8006388:	7911      	ldrb	r1, [r2, #4]
 800638a:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 800638c:	bf08      	it	eq
 800638e:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8006390:	78d1      	ldrb	r1, [r2, #3]
 8006392:	b2c9      	uxtb	r1, r1
 8006394:	7111      	strb	r1, [r2, #4]
 8006396:	7891      	ldrb	r1, [r2, #2]
 8006398:	b2c9      	uxtb	r1, r1
 800639a:	70d1      	strb	r1, [r2, #3]
 800639c:	7851      	ldrb	r1, [r2, #1]
 800639e:	b2c9      	uxtb	r1, r1
 80063a0:	7091      	strb	r1, [r2, #2]
 80063a2:	7811      	ldrb	r1, [r2, #0]
 80063a4:	b2c9      	uxtb	r1, r1
 80063a6:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 80063a8:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 80063ac:	7819      	ldrb	r1, [r3, #0]
 80063ae:	3101      	adds	r1, #1
 80063b0:	b249      	sxtb	r1, r1
 80063b2:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 80063b4:	7819      	ldrb	r1, [r3, #0]
 80063b6:	b249      	sxtb	r1, r1
 80063b8:	2903      	cmp	r1, #3
 80063ba:	dde1      	ble.n	8006380 <keypad_sm+0x1e68>
				encmode = 0;
 80063bc:	2300      	movs	r3, #0
				encpos = 0;
 80063be:	4a30      	ldr	r2, [pc, #192]	; (8006480 <keypad_sm+0x1f68>)
				encmode = 0;
 80063c0:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 80063c2:	7013      	strb	r3, [r2, #0]
}
 80063c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				kpenum = WAIT;
 80063c6:	2000      	movs	r0, #0
			keypadarr[0] = num;
 80063c8:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 80063cc:	4b2d      	ldr	r3, [pc, #180]	; (8006484 <keypad_sm+0x1f6c>)
			if(keypadarr[4] == '.'){
 80063ce:	4a2e      	ldr	r2, [pc, #184]	; (8006488 <keypad_sm+0x1f70>)
				keypaddecimal = 0;
 80063d0:	4d2e      	ldr	r5, [pc, #184]	; (800648c <keypad_sm+0x1f74>)
				kpenum = WAIT;
 80063d2:	7030      	strb	r0, [r6, #0]
	while(keypaditerator < 4){
 80063d4:	7819      	ldrb	r1, [r3, #0]
 80063d6:	b249      	sxtb	r1, r1
 80063d8:	2903      	cmp	r1, #3
 80063da:	dc1d      	bgt.n	8006418 <keypad_sm+0x1f00>
		if(keypaditerator < keypadlength-1){
 80063dc:	7819      	ldrb	r1, [r3, #0]
 80063de:	b249      	sxtb	r1, r1
 80063e0:	2903      	cmp	r1, #3
 80063e2:	dcf7      	bgt.n	80063d4 <keypad_sm+0x1ebc>
			if(keypadarr[4] == '.'){
 80063e4:	7911      	ldrb	r1, [r2, #4]
 80063e6:	292e      	cmp	r1, #46	; 0x2e
				keypaddecimal = 0;
 80063e8:	bf08      	it	eq
 80063ea:	7028      	strbeq	r0, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80063ec:	78d1      	ldrb	r1, [r2, #3]
 80063ee:	b2c9      	uxtb	r1, r1
 80063f0:	7111      	strb	r1, [r2, #4]
 80063f2:	7891      	ldrb	r1, [r2, #2]
 80063f4:	b2c9      	uxtb	r1, r1
 80063f6:	70d1      	strb	r1, [r2, #3]
 80063f8:	7851      	ldrb	r1, [r2, #1]
 80063fa:	b2c9      	uxtb	r1, r1
 80063fc:	7091      	strb	r1, [r2, #2]
 80063fe:	7811      	ldrb	r1, [r2, #0]
 8006400:	b2c9      	uxtb	r1, r1
 8006402:	7051      	strb	r1, [r2, #1]
			keypadarr[0] = num;
 8006404:	f882 c000 	strb.w	ip, [r2]
			keypaditerator++;
 8006408:	7819      	ldrb	r1, [r3, #0]
 800640a:	3101      	adds	r1, #1
 800640c:	b249      	sxtb	r1, r1
 800640e:	7019      	strb	r1, [r3, #0]
	while(keypaditerator < 4){
 8006410:	7819      	ldrb	r1, [r3, #0]
 8006412:	b249      	sxtb	r1, r1
 8006414:	2903      	cmp	r1, #3
 8006416:	dde1      	ble.n	80063dc <keypad_sm+0x1ec4>
				encmode = 0;
 8006418:	2300      	movs	r3, #0
				encpos = 0;
 800641a:	4a19      	ldr	r2, [pc, #100]	; (8006480 <keypad_sm+0x1f68>)
				encmode = 0;
 800641c:	7023      	strb	r3, [r4, #0]
				encpos = 0;
 800641e:	7013      	strb	r3, [r2, #0]
}
 8006420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fill_keypad(1, amp_set_aux);
 8006422:	4b1e      	ldr	r3, [pc, #120]	; (800649c <keypad_sm+0x1f84>)
 8006424:	2001      	movs	r0, #1
 8006426:	6819      	ldr	r1, [r3, #0]
 8006428:	f7fd fcd2 	bl	8003dd0 <fill_keypad>
				encmode = 1;
 800642c:	2101      	movs	r1, #1
				encpos = 0;
 800642e:	2200      	movs	r2, #0
 8006430:	4b13      	ldr	r3, [pc, #76]	; (8006480 <keypad_sm+0x1f68>)
				encmode = 1;
 8006432:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8006434:	701a      	strb	r2, [r3, #0]
}
 8006436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				dec_arr_a(encpos);
 8006438:	4b11      	ldr	r3, [pc, #68]	; (8006480 <keypad_sm+0x1f68>)
 800643a:	7818      	ldrb	r0, [r3, #0]
}
 800643c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				dec_arr_a(encpos);
 8006440:	b240      	sxtb	r0, r0
 8006442:	f7fd bfcb 	b.w	80043dc <dec_arr_a>
				fill_keypad(0, volt_set_main);
 8006446:	4b12      	ldr	r3, [pc, #72]	; (8006490 <keypad_sm+0x1f78>)
 8006448:	2000      	movs	r0, #0
 800644a:	6819      	ldr	r1, [r3, #0]
 800644c:	f7fd fcc0 	bl	8003dd0 <fill_keypad>
				encmode = 1;
 8006450:	2101      	movs	r1, #1
				encpos = 0;
 8006452:	2200      	movs	r2, #0
 8006454:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <keypad_sm+0x1f68>)
				encmode = 1;
 8006456:	7021      	strb	r1, [r4, #0]
				encpos = 0;
 8006458:	701a      	strb	r2, [r3, #0]
}
 800645a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				else if(encpos < 4){
 800645c:	781a      	ldrb	r2, [r3, #0]
 800645e:	b252      	sxtb	r2, r2
 8006460:	2a03      	cmp	r2, #3
					encpos = 0;
 8006462:	bfcf      	iteee	gt
 8006464:	2200      	movgt	r2, #0
					encpos++;
 8006466:	781a      	ldrble	r2, [r3, #0]
 8006468:	3201      	addle	r2, #1
 800646a:	b252      	sxtble	r2, r2
					encpos = 0;
 800646c:	701a      	strb	r2, [r3, #0]
}
 800646e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					encpos++;
 8006470:	3201      	adds	r2, #1
 8006472:	b252      	sxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
					encpos++;
 8006476:	781a      	ldrb	r2, [r3, #0]
 8006478:	3201      	adds	r2, #1
 800647a:	b252      	sxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
}
 800647e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006480:	200003ad 	.word	0x200003ad
 8006484:	20000005 	.word	0x20000005
 8006488:	20000000 	.word	0x20000000
 800648c:	20000704 	.word	0x20000704
 8006490:	2000086c 	.word	0x2000086c
 8006494:	41400000 	.word	0x41400000
 8006498:	20000870 	.word	0x20000870
 800649c:	20000394 	.word	0x20000394

080064a0 <row_input>:
void row_input(void){
 80064a0:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064a2:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80064a4:	4e30      	ldr	r6, [pc, #192]	; (8006568 <row_input+0xc8>)
void row_input(void){
 80064a6:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80064a8:	4630      	mov	r0, r6
 80064aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064ae:	e9cd 4400 	strd	r4, r4, [sp]
 80064b2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80064b6:	9404      	str	r4, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80064b8:	f001 fecc 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 80064bc:	4630      	mov	r0, r6
 80064be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064c2:	f001 fec7 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80064c6:	4630      	mov	r0, r6
 80064c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80064cc:	4d27      	ldr	r5, [pc, #156]	; (800656c <row_input+0xcc>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80064ce:	f001 fec1 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 80064d2:	4630      	mov	r0, r6
 80064d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064d8:	f001 febc 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 80064dc:	4630      	mov	r0, r6
 80064de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064e2:	f001 feb7 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80064e6:	4628      	mov	r0, r5
 80064e8:	2140      	movs	r1, #64	; 0x40
 80064ea:	f001 feb3 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 80064ee:	4628      	mov	r0, r5
 80064f0:	2180      	movs	r1, #128	; 0x80
 80064f2:	f001 feaf 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 80064f6:	4628      	mov	r0, r5
 80064f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064fc:	f001 feaa 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 8006500:	4628      	mov	r0, r5
 8006502:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006506:	f001 fea5 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 800650a:	4622      	mov	r2, r4
 800650c:	4628      	mov	r0, r5
 800650e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8006512:	f001 ff37 	bl	8008384 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8006516:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800651a:	2301      	movs	r3, #1
 800651c:	e9cd 2300 	strd	r2, r3, [sp]
 8006520:	2200      	movs	r2, #0
 8006522:	2300      	movs	r3, #0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8006524:	4669      	mov	r1, sp
 8006526:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8006528:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800652c:	f001 fda8 	bl	8008080 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8006530:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 8006534:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006538:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800653c:	2301      	movs	r3, #1
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 800653e:	4669      	mov	r1, sp
 8006540:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006542:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8006544:	f001 fd9c 	bl	8008080 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8006548:	4622      	mov	r2, r4
 800654a:	4628      	mov	r0, r5
 800654c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8006550:	f001 ff18 	bl	8008384 <HAL_GPIO_WritePin>
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 8006554:	4622      	mov	r2, r4
 8006556:	4621      	mov	r1, r4
 8006558:	2028      	movs	r0, #40	; 0x28
 800655a:	f001 fadf 	bl	8007b1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Row_1_EXTI_IRQn);
 800655e:	2028      	movs	r0, #40	; 0x28
 8006560:	f001 fb1a 	bl	8007b98 <HAL_NVIC_EnableIRQ>
}
 8006564:	b006      	add	sp, #24
 8006566:	bd70      	pop	{r4, r5, r6, pc}
 8006568:	40020400 	.word	0x40020400
 800656c:	40020800 	.word	0x40020800

08006570 <column_input>:
void column_input(void){
 8006570:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006572:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8006574:	4d2d      	ldr	r5, [pc, #180]	; (800662c <column_input+0xbc>)
void column_input(void){
 8006576:	b086      	sub	sp, #24
	HAL_NVIC_DisableIRQ(Row_1_EXTI_IRQn);
 8006578:	2028      	movs	r0, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800657a:	e9cd 4400 	strd	r4, r4, [sp]
 800657e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006582:	9404      	str	r4, [sp, #16]
	HAL_NVIC_DisableIRQ(Row_1_EXTI_IRQn);
 8006584:	f001 fb16 	bl	8007bb4 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8006588:	4628      	mov	r0, r5
 800658a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800658e:	f001 fe61 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 8006592:	4628      	mov	r0, r5
 8006594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006598:	f001 fe5c 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 800659c:	4628      	mov	r0, r5
 800659e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80065a2:	4e23      	ldr	r6, [pc, #140]	; (8006630 <column_input+0xc0>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80065a4:	f001 fe56 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 80065a8:	4628      	mov	r0, r5
 80065aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065ae:	f001 fe51 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 80065b2:	4628      	mov	r0, r5
 80065b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80065b8:	f001 fe4c 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80065bc:	4630      	mov	r0, r6
 80065be:	2140      	movs	r1, #64	; 0x40
 80065c0:	f001 fe48 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 80065c4:	4630      	mov	r0, r6
 80065c6:	2180      	movs	r1, #128	; 0x80
 80065c8:	f001 fe44 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 80065cc:	4630      	mov	r0, r6
 80065ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065d2:	f001 fe3f 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 80065d6:	4630      	mov	r0, r6
 80065d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065dc:	f001 fe3a 	bl	8008254 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 80065e0:	4622      	mov	r2, r4
 80065e2:	4628      	mov	r0, r5
 80065e4:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 80065e8:	f001 fecc 	bl	8008384 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 80065ec:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 80065f0:	2301      	movs	r3, #1
 80065f2:	e9cd 2300 	strd	r2, r3, [sp]
 80065f6:	2200      	movs	r2, #0
 80065f8:	2300      	movs	r3, #0
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80065fa:	4628      	mov	r0, r5
 80065fc:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 80065fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8006602:	f001 fd3d 	bl	8008080 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006606:	2001      	movs	r0, #1
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8006608:	2300      	movs	r3, #0
 800660a:	f44f 7270 	mov.w	r2, #960	; 0x3c0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800660e:	4669      	mov	r1, sp
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006610:	9002      	str	r0, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8006612:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8006614:	e9cd 2300 	strd	r2, r3, [sp]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8006618:	f001 fd32 	bl	8008080 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 800661c:	4622      	mov	r2, r4
 800661e:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8006622:	4630      	mov	r0, r6
 8006624:	f001 feae 	bl	8008384 <HAL_GPIO_WritePin>
}
 8006628:	b006      	add	sp, #24
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	40020400 	.word	0x40020400
 8006630:	40020800 	.word	0x40020800

08006634 <HAL_GPIO_EXTI_Callback>:
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 8006634:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4604      	mov	r4, r0
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 800663c:	d010      	beq.n	8006660 <HAL_GPIO_EXTI_Callback+0x2c>
 800663e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8006642:	d00d      	beq.n	8006660 <HAL_GPIO_EXTI_Callback+0x2c>
 8006644:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006648:	d00a      	beq.n	8006660 <HAL_GPIO_EXTI_Callback+0x2c>
 800664a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800664e:	d007      	beq.n	8006660 <HAL_GPIO_EXTI_Callback+0x2c>
 8006650:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8006654:	d004      	beq.n	8006660 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == Rot_SW_Pin){
 8006656:	2804      	cmp	r0, #4
 8006658:	d036      	beq.n	80066c8 <HAL_GPIO_EXTI_Callback+0x94>
	else if(GPIO_Pin == Rot_CLK_Pin){
 800665a:	2801      	cmp	r0, #1
 800665c:	d019      	beq.n	8006692 <HAL_GPIO_EXTI_Callback+0x5e>
}
 800665e:	bd38      	pop	{r3, r4, r5, pc}
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, GPIO_Pin) == 0){
 8006660:	4621      	mov	r1, r4
 8006662:	4825      	ldr	r0, [pc, #148]	; (80066f8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8006664:	f001 fe88 	bl	8008378 <HAL_GPIO_ReadPin>
 8006668:	4603      	mov	r3, r0
 800666a:	b130      	cbz	r0, 800667a <HAL_GPIO_EXTI_Callback+0x46>
			if(kpedge != 1){
 800666c:	4b23      	ldr	r3, [pc, #140]	; (80066fc <HAL_GPIO_EXTI_Callback+0xc8>)
 800666e:	781a      	ldrb	r2, [r3, #0]
 8006670:	2a01      	cmp	r2, #1
 8006672:	d0f4      	beq.n	800665e <HAL_GPIO_EXTI_Callback+0x2a>
				swedge = 1;
 8006674:	2201      	movs	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
}
 8006678:	bd38      	pop	{r3, r4, r5, pc}
			if(kpedge != 0){
 800667a:	4a20      	ldr	r2, [pc, #128]	; (80066fc <HAL_GPIO_EXTI_Callback+0xc8>)
 800667c:	7811      	ldrb	r1, [r2, #0]
 800667e:	2900      	cmp	r1, #0
 8006680:	d0ed      	beq.n	800665e <HAL_GPIO_EXTI_Callback+0x2a>
				rowpin = GPIO_Pin;
 8006682:	491f      	ldr	r1, [pc, #124]	; (8006700 <HAL_GPIO_EXTI_Callback+0xcc>)
				kpedge = 0;
 8006684:	7013      	strb	r3, [r2, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 8006686:	481f      	ldr	r0, [pc, #124]	; (8006704 <HAL_GPIO_EXTI_Callback+0xd0>)
				rowpin = GPIO_Pin;
 8006688:	600c      	str	r4, [r1, #0]
}
 800668a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_TIM_Base_Start_IT(&htim2);
 800668e:	f003 bc3d 	b.w	8009f0c <HAL_TIM_Base_Start_IT>
		if (rotenum == NOTURN) {
 8006692:	4d1d      	ldr	r5, [pc, #116]	; (8006708 <HAL_GPIO_EXTI_Callback+0xd4>)
 8006694:	782b      	ldrb	r3, [r5, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e1      	bne.n	800665e <HAL_GPIO_EXTI_Callback+0x2a>
			HAL_NVIC_DisableIRQ(Rot_CLK_EXTI_IRQn);
 800669a:	2006      	movs	r0, #6
 800669c:	f001 fa8a 	bl	8007bb4 <HAL_NVIC_DisableIRQ>
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 80066a0:	4621      	mov	r1, r4
 80066a2:	4815      	ldr	r0, [pc, #84]	; (80066f8 <HAL_GPIO_EXTI_Callback+0xc4>)
 80066a4:	f001 fe68 	bl	8008378 <HAL_GPIO_ReadPin>
 80066a8:	2102      	movs	r1, #2
 80066aa:	4604      	mov	r4, r0
 80066ac:	4812      	ldr	r0, [pc, #72]	; (80066f8 <HAL_GPIO_EXTI_Callback+0xc4>)
 80066ae:	f001 fe63 	bl	8008378 <HAL_GPIO_ReadPin>
 80066b2:	4603      	mov	r3, r0
 80066b4:	429c      	cmp	r4, r3
 80066b6:	bf0c      	ite	eq
 80066b8:	2401      	moveq	r4, #1
 80066ba:	2402      	movne	r4, #2
			HAL_TIM_Base_Start_IT(&htim10);
 80066bc:	4813      	ldr	r0, [pc, #76]	; (800670c <HAL_GPIO_EXTI_Callback+0xd8>)
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 80066be:	702c      	strb	r4, [r5, #0]
}
 80066c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_TIM_Base_Start_IT(&htim10);
 80066c4:	f003 bc22 	b.w	8009f0c <HAL_TIM_Base_Start_IT>
		if(HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin) == 0){
 80066c8:	4601      	mov	r1, r0
 80066ca:	480b      	ldr	r0, [pc, #44]	; (80066f8 <HAL_GPIO_EXTI_Callback+0xc4>)
 80066cc:	f001 fe54 	bl	8008378 <HAL_GPIO_ReadPin>
 80066d0:	4603      	mov	r3, r0
 80066d2:	b960      	cbnz	r0, 80066ee <HAL_GPIO_EXTI_Callback+0xba>
			if(swedge != 0){
 80066d4:	4a0e      	ldr	r2, [pc, #56]	; (8006710 <HAL_GPIO_EXTI_Callback+0xdc>)
 80066d6:	7811      	ldrb	r1, [r2, #0]
 80066d8:	2900      	cmp	r1, #0
 80066da:	d0c0      	beq.n	800665e <HAL_GPIO_EXTI_Callback+0x2a>
				HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 80066dc:	2008      	movs	r0, #8
				swedge = 0;
 80066de:	7013      	strb	r3, [r2, #0]
				HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 80066e0:	f001 fa68 	bl	8007bb4 <HAL_NVIC_DisableIRQ>
}
 80066e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_TIM_Base_Start_IT(&htim9);
 80066e8:	480a      	ldr	r0, [pc, #40]	; (8006714 <HAL_GPIO_EXTI_Callback+0xe0>)
 80066ea:	f003 bc0f 	b.w	8009f0c <HAL_TIM_Base_Start_IT>
			if(swedge != 1){
 80066ee:	4b08      	ldr	r3, [pc, #32]	; (8006710 <HAL_GPIO_EXTI_Callback+0xdc>)
 80066f0:	781a      	ldrb	r2, [r3, #0]
 80066f2:	2a01      	cmp	r2, #1
 80066f4:	d1be      	bne.n	8006674 <HAL_GPIO_EXTI_Callback+0x40>
}
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	40020400 	.word	0x40020400
 80066fc:	20000006 	.word	0x20000006
 8006700:	20000008 	.word	0x20000008
 8006704:	200005c0 	.word	0x200005c0
 8006708:	20000714 	.word	0x20000714
 800670c:	20000540 	.word	0x20000540
 8006710:	2000000c 	.word	0x2000000c
 8006714:	20000680 	.word	0x20000680

08006718 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim2){
 8006718:	4b77      	ldr	r3, [pc, #476]	; (80068f8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
{
 800671a:	b570      	push	{r4, r5, r6, lr}
	if(htim == &htim2){
 800671c:	4298      	cmp	r0, r3
 800671e:	d01f      	beq.n	8006760 <HAL_TIM_PeriodElapsedCallback+0x48>
	else if(htim == &htim3){
 8006720:	4d76      	ldr	r5, [pc, #472]	; (80068fc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8006722:	4604      	mov	r4, r0
 8006724:	42a8      	cmp	r0, r5
 8006726:	d031      	beq.n	800678c <HAL_TIM_PeriodElapsedCallback+0x74>
	else if(htim == &htim4){
 8006728:	4b75      	ldr	r3, [pc, #468]	; (8006900 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800672a:	4298      	cmp	r0, r3
 800672c:	d037      	beq.n	800679e <HAL_TIM_PeriodElapsedCallback+0x86>
	else if(htim == &htim9){
 800672e:	4b75      	ldr	r3, [pc, #468]	; (8006904 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8006730:	4298      	cmp	r0, r3
 8006732:	d006      	beq.n	8006742 <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim == &htim10){
 8006734:	4b74      	ldr	r3, [pc, #464]	; (8006908 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8006736:	4298      	cmp	r0, r3
 8006738:	d03e      	beq.n	80067b8 <HAL_TIM_PeriodElapsedCallback+0xa0>
	else if(htim == &htim11){
 800673a:	4b74      	ldr	r3, [pc, #464]	; (800690c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800673c:	4298      	cmp	r0, r3
 800673e:	d04e      	beq.n	80067de <HAL_TIM_PeriodElapsedCallback+0xc6>
}
 8006740:	bd70      	pop	{r4, r5, r6, pc}
		HAL_TIM_Base_Stop_IT(&htim9);
 8006742:	f003 fc0f 	bl	8009f64 <HAL_TIM_Base_Stop_IT>
		keypad_sm('s');//s for switch
 8006746:	2073      	movs	r0, #115	; 0x73
 8006748:	f7fd fee6 	bl	8004518 <keypad_sm>
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 0, 0);
 800674c:	2200      	movs	r2, #0
 800674e:	2008      	movs	r0, #8
 8006750:	4611      	mov	r1, r2
 8006752:	f001 f9e3 	bl	8007b1c <HAL_NVIC_SetPriority>
}
 8006756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_NVIC_EnableIRQ(Rot_SW_EXTI_IRQn);
 800675a:	2008      	movs	r0, #8
 800675c:	f001 ba1c 	b.w	8007b98 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim2);
 8006760:	f003 fc00 	bl	8009f64 <HAL_TIM_Base_Stop_IT>
		for(int i = 0; i < 4; i++){
 8006764:	2400      	movs	r4, #0
		column_input();
 8006766:	f7ff ff03 	bl	8006570 <column_input>
		for(int i = 0; i < 4; i++){
 800676a:	4e69      	ldr	r6, [pc, #420]	; (8006910 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800676c:	4d69      	ldr	r5, [pc, #420]	; (8006914 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
			if(HAL_GPIO_ReadPin(col_ports[i], col_pins[i]) == 0){
 800676e:	f835 1b02 	ldrh.w	r1, [r5], #2
 8006772:	f856 0b04 	ldr.w	r0, [r6], #4
 8006776:	f001 fdff 	bl	8008378 <HAL_GPIO_ReadPin>
 800677a:	2800      	cmp	r0, #0
 800677c:	d064      	beq.n	8006848 <HAL_TIM_PeriodElapsedCallback+0x130>
		for(int i = 0; i < 4; i++){
 800677e:	3401      	adds	r4, #1
 8006780:	2c04      	cmp	r4, #4
 8006782:	d1f4      	bne.n	800676e <HAL_TIM_PeriodElapsedCallback+0x56>
}
 8006784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		row_input();
 8006788:	f7ff be8a 	b.w	80064a0 <row_input>
		HAL_TIM_Base_Stop_IT(&htim3);
 800678c:	f003 fbea 	bl	8009f64 <HAL_TIM_Base_Stop_IT>
		lcd_psu_update();
 8006790:	f7fc fc6c 	bl	800306c <lcd_psu_update>
		HAL_TIM_Base_Start_IT(&htim3);
 8006794:	4620      	mov	r0, r4
}
 8006796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(&htim3);
 800679a:	f003 bbb7 	b.w	8009f0c <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 800679e:	f003 fbe1 	bl	8009f64 <HAL_TIM_Base_Stop_IT>
		if(!startmessage){
 80067a2:	4b5d      	ldr	r3, [pc, #372]	; (8006918 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80067a4:	781a      	ldrb	r2, [r3, #0]
 80067a6:	2a00      	cmp	r2, #0
 80067a8:	d136      	bne.n	8006818 <HAL_TIM_PeriodElapsedCallback+0x100>
			startmessage = 1;
 80067aa:	2201      	movs	r2, #1
 80067ac:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim4);
 80067ae:	4620      	mov	r0, r4
}
 80067b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_TIM_Base_Start_IT(&htim4);
 80067b4:	f003 bbaa 	b.w	8009f0c <HAL_TIM_Base_Start_IT>
		if(rotenum == CWTURN){
 80067b8:	4c58      	ldr	r4, [pc, #352]	; (800691c <HAL_TIM_PeriodElapsedCallback+0x204>)
		HAL_TIM_Base_Stop_IT(&htim10);
 80067ba:	f003 fbd3 	bl	8009f64 <HAL_TIM_Base_Stop_IT>
		if(rotenum == CWTURN){
 80067be:	7823      	ldrb	r3, [r4, #0]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d067      	beq.n	8006894 <HAL_TIM_PeriodElapsedCallback+0x17c>
		else if(rotenum == CCWTURN){
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d072      	beq.n	80068ae <HAL_TIM_PeriodElapsedCallback+0x196>
		rotenum = NOTURN;
 80067c8:	2200      	movs	r2, #0
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 0, 0);
 80067ca:	2006      	movs	r0, #6
 80067cc:	4611      	mov	r1, r2
		rotenum = NOTURN;
 80067ce:	7022      	strb	r2, [r4, #0]
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 0, 0);
 80067d0:	f001 f9a4 	bl	8007b1c <HAL_NVIC_SetPriority>
}
 80067d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_NVIC_EnableIRQ(Rot_CLK_EXTI_IRQn);
 80067d8:	2006      	movs	r0, #6
 80067da:	f001 b9dd 	b.w	8007b98 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim11);
 80067de:	f003 fbc1 	bl	8009f64 <HAL_TIM_Base_Stop_IT>
		if(chstat_main == 0){
 80067e2:	4b4f      	ldr	r3, [pc, #316]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80067e4:	781a      	ldrb	r2, [r3, #0]
 80067e6:	b1e2      	cbz	r2, 8006822 <HAL_TIM_PeriodElapsedCallback+0x10a>
		else if(chstat_main == 1){
 80067e8:	7819      	ldrb	r1, [r3, #0]
 80067ea:	2901      	cmp	r1, #1
 80067ec:	b24a      	sxtb	r2, r1
 80067ee:	d055      	beq.n	800689c <HAL_TIM_PeriodElapsedCallback+0x184>
		else if(chstat_main == 2){
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d05f      	beq.n	80068b6 <HAL_TIM_PeriodElapsedCallback+0x19e>
		if(chstat_aux_rx == 0){
 80067f6:	4b4b      	ldr	r3, [pc, #300]	; (8006924 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80067f8:	7819      	ldrb	r1, [r3, #0]
 80067fa:	b24a      	sxtb	r2, r1
 80067fc:	2900      	cmp	r1, #0
 80067fe:	d044      	beq.n	800688a <HAL_TIM_PeriodElapsedCallback+0x172>
		else if(chstat_aux_rx == 1){
 8006800:	7819      	ldrb	r1, [r3, #0]
 8006802:	2901      	cmp	r1, #1
 8006804:	b24a      	sxtb	r2, r1
 8006806:	d040      	beq.n	800688a <HAL_TIM_PeriodElapsedCallback+0x172>
		else if(chstat_aux_rx == 2){
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d063      	beq.n	80068d6 <HAL_TIM_PeriodElapsedCallback+0x1be>
}
 800680e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(&htim11);
 8006812:	483e      	ldr	r0, [pc, #248]	; (800690c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8006814:	f003 bb7a 	b.w	8009f0c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
 8006818:	4628      	mov	r0, r5
}
 800681a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_TIM_Base_Start_IT(&htim3);
 800681e:	f003 bb75 	b.w	8009f0c <HAL_TIM_Base_Start_IT>
			if(!timercounter){
 8006822:	4c41      	ldr	r4, [pc, #260]	; (8006928 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8006824:	7823      	ldrb	r3, [r4, #0]
 8006826:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800682a:	2b00      	cmp	r3, #0
 800682c:	d03a      	beq.n	80068a4 <HAL_TIM_PeriodElapsedCallback+0x18c>
			timercounter++;
 800682e:	7823      	ldrb	r3, [r4, #0]
			blink = 0;
 8006830:	2200      	movs	r2, #0
			timercounter++;
 8006832:	3301      	adds	r3, #1
 8006834:	b2db      	uxtb	r3, r3
 8006836:	7023      	strb	r3, [r4, #0]
			if(timercounter >= 7){
 8006838:	7823      	ldrb	r3, [r4, #0]
 800683a:	2b06      	cmp	r3, #6
				timercounter = 0;
 800683c:	bf84      	itt	hi
 800683e:	2300      	movhi	r3, #0
 8006840:	7023      	strbhi	r3, [r4, #0]
			blink = 0;
 8006842:	4b3a      	ldr	r3, [pc, #232]	; (800692c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	e7d6      	b.n	80067f6 <HAL_TIM_PeriodElapsedCallback+0xde>
					if(rowpin == row_pins[j]){
 8006848:	4d39      	ldr	r5, [pc, #228]	; (8006930 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800684a:	682b      	ldr	r3, [r5, #0]
 800684c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006850:	d011      	beq.n	8006876 <HAL_TIM_PeriodElapsedCallback+0x15e>
 8006852:	682b      	ldr	r3, [r5, #0]
 8006854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006858:	d047      	beq.n	80068ea <HAL_TIM_PeriodElapsedCallback+0x1d2>
 800685a:	682b      	ldr	r3, [r5, #0]
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006860:	d047      	beq.n	80068f2 <HAL_TIM_PeriodElapsedCallback+0x1da>
 8006862:	682b      	ldr	r3, [r5, #0]
 8006864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006868:	d041      	beq.n	80068ee <HAL_TIM_PeriodElapsedCallback+0x1d6>
 800686a:	682b      	ldr	r3, [r5, #0]
 800686c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
				for(int j = 0; j < 5; j++){
 8006870:	bf08      	it	eq
 8006872:	2004      	moveq	r0, #4
					if(rowpin == row_pins[j]){
 8006874:	d186      	bne.n	8006784 <HAL_TIM_PeriodElapsedCallback+0x6c>
						keypad_sm(keypad_labels[j][i]);
 8006876:	4b2f      	ldr	r3, [pc, #188]	; (8006934 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8006878:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800687c:	5d00      	ldrb	r0, [r0, r4]
 800687e:	f7fd fe4b 	bl	8004518 <keypad_sm>
						rowpin = -1;
 8006882:	f04f 33ff 	mov.w	r3, #4294967295
 8006886:	602b      	str	r3, [r5, #0]
						break;
 8006888:	e77c      	b.n	8006784 <HAL_TIM_PeriodElapsedCallback+0x6c>
			HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_SET);
 800688a:	2110      	movs	r1, #16
 800688c:	482a      	ldr	r0, [pc, #168]	; (8006938 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800688e:	f001 fd79 	bl	8008384 <HAL_GPIO_WritePin>
 8006892:	e7bc      	b.n	800680e <HAL_TIM_PeriodElapsedCallback+0xf6>
			keypad_sm(']');//right bracket for CW
 8006894:	205d      	movs	r0, #93	; 0x5d
 8006896:	f7fd fe3f 	bl	8004518 <keypad_sm>
 800689a:	e795      	b.n	80067c8 <HAL_TIM_PeriodElapsedCallback+0xb0>
			if(!timercounter){
 800689c:	4c22      	ldr	r4, [pc, #136]	; (8006928 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800689e:	7823      	ldrb	r3, [r4, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1c4      	bne.n	800682e <HAL_TIM_PeriodElapsedCallback+0x116>
				HAL_GPIO_WritePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_SET);
 80068a4:	2120      	movs	r1, #32
 80068a6:	4824      	ldr	r0, [pc, #144]	; (8006938 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80068a8:	f001 fd6c 	bl	8008384 <HAL_GPIO_WritePin>
 80068ac:	e7bf      	b.n	800682e <HAL_TIM_PeriodElapsedCallback+0x116>
			keypad_sm('[');//left bracket for CCW
 80068ae:	205b      	movs	r0, #91	; 0x5b
 80068b0:	f7fd fe32 	bl	8004518 <keypad_sm>
 80068b4:	e788      	b.n	80067c8 <HAL_TIM_PeriodElapsedCallback+0xb0>
			if(blink){
 80068b6:	4c1d      	ldr	r4, [pc, #116]	; (800692c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80068b8:	7823      	ldrb	r3, [r4, #0]
 80068ba:	b98b      	cbnz	r3, 80068e0 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			timercounter++;
 80068bc:	4a1a      	ldr	r2, [pc, #104]	; (8006928 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80068be:	7813      	ldrb	r3, [r2, #0]
 80068c0:	3301      	adds	r3, #1
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	7013      	strb	r3, [r2, #0]
			if(timercounter >= 7){
 80068c6:	7813      	ldrb	r3, [r2, #0]
 80068c8:	2b06      	cmp	r3, #6
 80068ca:	d994      	bls.n	80067f6 <HAL_TIM_PeriodElapsedCallback+0xde>
				timercounter = 0;
 80068cc:	2100      	movs	r1, #0
				blink = 1;
 80068ce:	2301      	movs	r3, #1
				timercounter = 0;
 80068d0:	7011      	strb	r1, [r2, #0]
				blink = 1;
 80068d2:	7023      	strb	r3, [r4, #0]
 80068d4:	e78f      	b.n	80067f6 <HAL_TIM_PeriodElapsedCallback+0xde>
			HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 80068d6:	2110      	movs	r1, #16
 80068d8:	4817      	ldr	r0, [pc, #92]	; (8006938 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80068da:	f001 fd57 	bl	800838c <HAL_GPIO_TogglePin>
 80068de:	e796      	b.n	800680e <HAL_TIM_PeriodElapsedCallback+0xf6>
				HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 80068e0:	2120      	movs	r1, #32
 80068e2:	4815      	ldr	r0, [pc, #84]	; (8006938 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80068e4:	f001 fd52 	bl	800838c <HAL_GPIO_TogglePin>
 80068e8:	e7e8      	b.n	80068bc <HAL_TIM_PeriodElapsedCallback+0x1a4>
				for(int j = 0; j < 5; j++){
 80068ea:	2001      	movs	r0, #1
 80068ec:	e7c3      	b.n	8006876 <HAL_TIM_PeriodElapsedCallback+0x15e>
 80068ee:	2003      	movs	r0, #3
 80068f0:	e7c1      	b.n	8006876 <HAL_TIM_PeriodElapsedCallback+0x15e>
 80068f2:	2002      	movs	r0, #2
 80068f4:	e7bf      	b.n	8006876 <HAL_TIM_PeriodElapsedCallback+0x15e>
 80068f6:	bf00      	nop
 80068f8:	200005c0 	.word	0x200005c0
 80068fc:	20000600 	.word	0x20000600
 8006900:	20000640 	.word	0x20000640
 8006904:	20000680 	.word	0x20000680
 8006908:	20000540 	.word	0x20000540
 800690c:	20000580 	.word	0x20000580
 8006910:	0800f4f4 	.word	0x0800f4f4
 8006914:	0800f4ec 	.word	0x0800f4ec
 8006918:	20000758 	.word	0x20000758
 800691c:	20000714 	.word	0x20000714
 8006920:	200003a3 	.word	0x200003a3
 8006924:	200003a1 	.word	0x200003a1
 8006928:	20000760 	.word	0x20000760
 800692c:	200003a0 	.word	0x200003a0
 8006930:	20000008 	.word	0x20000008
 8006934:	0800f544 	.word	0x0800f544
 8006938:	40020800 	.word	0x40020800

0800693c <HAL_ADC_ConvHalfCpltCallback>:
	adc_values_cpy[0] = adc_values[0];
 800693c:	4a05      	ldr	r2, [pc, #20]	; (8006954 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800693e:	4b06      	ldr	r3, [pc, #24]	; (8006958 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8006940:	8811      	ldrh	r1, [r2, #0]
 8006942:	b289      	uxth	r1, r1
 8006944:	8019      	strh	r1, [r3, #0]
	adc_values_cpy[1] = adc_values[1];
 8006946:	8851      	ldrh	r1, [r2, #2]
 8006948:	b289      	uxth	r1, r1
 800694a:	8059      	strh	r1, [r3, #2]
	adc_values_cpy[2] = adc_values[2];
 800694c:	8892      	ldrh	r2, [r2, #4]
 800694e:	b292      	uxth	r2, r2
 8006950:	809a      	strh	r2, [r3, #4]
}
 8006952:	4770      	bx	lr
 8006954:	2000037c 	.word	0x2000037c
 8006958:	20000388 	.word	0x20000388

0800695c <HAL_ADC_ConvCpltCallback>:
	adc_values_cpy[3] = adc_values[3];
 800695c:	4a05      	ldr	r2, [pc, #20]	; (8006974 <HAL_ADC_ConvCpltCallback+0x18>)
 800695e:	4b06      	ldr	r3, [pc, #24]	; (8006978 <HAL_ADC_ConvCpltCallback+0x1c>)
 8006960:	88d1      	ldrh	r1, [r2, #6]
 8006962:	b289      	uxth	r1, r1
 8006964:	80d9      	strh	r1, [r3, #6]
	adc_values_cpy[4] = adc_values[4];
 8006966:	8911      	ldrh	r1, [r2, #8]
 8006968:	b289      	uxth	r1, r1
 800696a:	8119      	strh	r1, [r3, #8]
	adc_values_cpy[5] = adc_values[5];
 800696c:	8952      	ldrh	r2, [r2, #10]
 800696e:	b292      	uxth	r2, r2
 8006970:	815a      	strh	r2, [r3, #10]
}
 8006972:	4770      	bx	lr
 8006974:	2000037c 	.word	0x2000037c
 8006978:	20000388 	.word	0x20000388

0800697c <HAL_ADC_LevelOutOfWindowCallback>:
{
 800697c:	b510      	push	{r4, lr}
	if(chstat_main == 1){
 800697e:	4c06      	ldr	r4, [pc, #24]	; (8006998 <HAL_ADC_LevelOutOfWindowCallback+0x1c>)
 8006980:	7823      	ldrb	r3, [r4, #0]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d000      	beq.n	8006988 <HAL_ADC_LevelOutOfWindowCallback+0xc>
}
 8006986:	bd10      	pop	{r4, pc}
 8006988:	b25a      	sxtb	r2, r3
		HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 800698a:	2140      	movs	r1, #64	; 0x40
 800698c:	4803      	ldr	r0, [pc, #12]	; (800699c <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 800698e:	f001 fcf9 	bl	8008384 <HAL_GPIO_WritePin>
		chstat_main = 2;
 8006992:	2302      	movs	r3, #2
 8006994:	7023      	strb	r3, [r4, #0]
}
 8006996:	bd10      	pop	{r4, pc}
 8006998:	200003a3 	.word	0x200003a3
 800699c:	40020000 	.word	0x40020000

080069a0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80069a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a4:	4e84      	ldr	r6, [pc, #528]	; (8006bb8 <HAL_UART_RxCpltCallback+0x218>)
	for(int i = 0; i < 64; i++){
 80069a6:	2400      	movs	r4, #0
 80069a8:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80069aa:	b089      	sub	sp, #36	; 0x24
 80069ac:	e003      	b.n	80069b6 <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 80069ae:	3401      	adds	r4, #1
 80069b0:	2c40      	cmp	r4, #64	; 0x40
 80069b2:	f000 80fd 	beq.w	8006bb0 <HAL_UART_RxCpltCallback+0x210>
		if(rxbuffer[i] == '*'){
 80069b6:	f813 5b01 	ldrb.w	r5, [r3], #1
 80069ba:	2d2a      	cmp	r5, #42	; 0x2a
 80069bc:	d1f7      	bne.n	80069ae <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 80069be:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 80069c0:	2220      	movs	r2, #32
 80069c2:	2100      	movs	r1, #0
 80069c4:	4668      	mov	r0, sp
 80069c6:	f005 fe41 	bl	800c64c <memset>
	for(int i = 0; i < 25; i++){
 80069ca:	f10d 33ff 	add.w	r3, sp, #4294967295
 80069ce:	aa06      	add	r2, sp, #24
 80069d0:	e000      	b.n	80069d4 <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 80069d2:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 80069d4:	3401      	adds	r4, #1
 80069d6:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 80069d8:	2c40      	cmp	r4, #64	; 0x40
		rxbuffercpy[i] = rxbuffer[rxiter];
 80069da:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 80069de:	bf28      	it	cs
 80069e0:	2400      	movcs	r4, #0
	for(int i = 0; i < 25; i++){
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d1f5      	bne.n	80069d2 <HAL_UART_RxCpltCallback+0x32>
	if( //Check start condition
 80069e6:	f89d 3000 	ldrb.w	r3, [sp]
 80069ea:	2b2a      	cmp	r3, #42	; 0x2a
 80069ec:	d00c      	beq.n	8006a08 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 80069ee:	2240      	movs	r2, #64	; 0x40
 80069f0:	2100      	movs	r1, #0
 80069f2:	4871      	ldr	r0, [pc, #452]	; (8006bb8 <HAL_UART_RxCpltCallback+0x218>)
 80069f4:	f005 fe2a 	bl	800c64c <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 80069f8:	2240      	movs	r2, #64	; 0x40
 80069fa:	496f      	ldr	r1, [pc, #444]	; (8006bb8 <HAL_UART_RxCpltCallback+0x218>)
 80069fc:	486f      	ldr	r0, [pc, #444]	; (8006bbc <HAL_UART_RxCpltCallback+0x21c>)
}
 80069fe:	b009      	add	sp, #36	; 0x24
 8006a00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8006a04:	f003 bcf6 	b.w	800a3f4 <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 8006a08:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8006a0c:	2b53      	cmp	r3, #83	; 0x53
 8006a0e:	d1ee      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
 8006a10:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8006a14:	2b54      	cmp	r3, #84	; 0x54
 8006a16:	d1ea      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
 8006a18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006a1c:	2b52      	cmp	r3, #82	; 0x52
 8006a1e:	d1e6      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
 8006a20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006a24:	2b54      	cmp	r3, #84	; 0x54
 8006a26:	d1e2      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
 8006a28:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006a2c:	2b46      	cmp	r3, #70	; 0x46
 8006a2e:	d1de      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 8006a30:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8006a34:	2b4e      	cmp	r3, #78	; 0x4e
 8006a36:	d1da      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
 8006a38:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006a3c:	2b53      	cmp	r3, #83	; 0x53
 8006a3e:	d1d6      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
 8006a40:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006a44:	2b48      	cmp	r3, #72	; 0x48
 8006a46:	d1d2      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
 8006a48:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006a4c:	2b21      	cmp	r3, #33	; 0x21
 8006a4e:	d1ce      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
 8006a50:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006a54:	2b2c      	cmp	r3, #44	; 0x2c
 8006a56:	d1ca      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8006a58:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006a5c:	2b2c      	cmp	r3, #44	; 0x2c
 8006a5e:	d1c6      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
 8006a60:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8006a64:	2b2c      	cmp	r3, #44	; 0x2c
 8006a66:	d1c2      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
 8006a68:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006a6c:	2b2c      	cmp	r3, #44	; 0x2c
 8006a6e:	d1be      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8006a70:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8006a74:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8006a76:	b2c3      	uxtb	r3, r0
 8006a78:	2b09      	cmp	r3, #9
 8006a7a:	d8b8      	bhi.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8006a7c:	f89d b007 	ldrb.w	fp, [sp, #7]
 8006a80:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 8006a84:	fa5f f38b 	uxtb.w	r3, fp
 8006a88:	2b09      	cmp	r3, #9
 8006a8a:	d8b0      	bhi.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
 8006a8c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006a90:	2b2e      	cmp	r3, #46	; 0x2e
 8006a92:	d1ac      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8006a94:	f89d a009 	ldrb.w	sl, [sp, #9]
 8006a98:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8006a9c:	fa5f f38a 	uxtb.w	r3, sl
 8006aa0:	2b09      	cmp	r3, #9
 8006aa2:	d8a4      	bhi.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8006aa4:	f89d 900a 	ldrb.w	r9, [sp, #10]
 8006aa8:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8006aac:	fa5f f389 	uxtb.w	r3, r9
 8006ab0:	2b09      	cmp	r3, #9
 8006ab2:	d89c      	bhi.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8006ab4:	f89d 800c 	ldrb.w	r8, [sp, #12]
 8006ab8:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8006abc:	fa5f f388 	uxtb.w	r3, r8
 8006ac0:	2b09      	cmp	r3, #9
 8006ac2:	d894      	bhi.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8006ac4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8006ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8006aca:	d190      	bne.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
 8006acc:	f89d 700e 	ldrb.w	r7, [sp, #14]
 8006ad0:	3f30      	subs	r7, #48	; 0x30
 8006ad2:	b2fb      	uxtb	r3, r7
 8006ad4:	2b09      	cmp	r3, #9
 8006ad6:	d88a      	bhi.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8006ad8:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8006adc:	3e30      	subs	r6, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8006ade:	b2f3      	uxtb	r3, r6
 8006ae0:	2b09      	cmp	r3, #9
 8006ae2:	d884      	bhi.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8006ae4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8006ae8:	3d30      	subs	r5, #48	; 0x30
 8006aea:	b2eb      	uxtb	r3, r5
 8006aec:	2b09      	cmp	r3, #9
 8006aee:	f63f af7e 	bhi.w	80069ee <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 8006af2:	f89d 4012 	ldrb.w	r4, [sp, #18]
 8006af6:	3c30      	subs	r4, #48	; 0x30
 8006af8:	b2e4      	uxtb	r4, r4
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8006afa:	2c02      	cmp	r4, #2
 8006afc:	f63f af77 	bhi.w	80069ee <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8006b00:	f7fa f894 	bl	8000c2c <__aeabi_i2f>
 8006b04:	492e      	ldr	r1, [pc, #184]	; (8006bc0 <HAL_UART_RxCpltCallback+0x220>)
 8006b06:	f7fa f8e5 	bl	8000cd4 <__aeabi_fmul>
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	f7f9 ffda 	bl	8000ac4 <__addsf3>
 8006b10:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8006b12:	4658      	mov	r0, fp
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8006b14:	469b      	mov	fp, r3
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8006b16:	f7fa f889 	bl	8000c2c <__aeabi_i2f>
 8006b1a:	4659      	mov	r1, fp
 8006b1c:	f7f9 ffd2 	bl	8000ac4 <__addsf3>
 8006b20:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8006b22:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8006b24:	469a      	mov	sl, r3
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8006b26:	f7fa f881 	bl	8000c2c <__aeabi_i2f>
 8006b2a:	4925      	ldr	r1, [pc, #148]	; (8006bc0 <HAL_UART_RxCpltCallback+0x220>)
 8006b2c:	f7fa f986 	bl	8000e3c <__aeabi_fdiv>
 8006b30:	4651      	mov	r1, sl
 8006b32:	f7f9 ffc7 	bl	8000ac4 <__addsf3>
 8006b36:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8006b38:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8006b3a:	4699      	mov	r9, r3
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8006b3c:	f7fa f876 	bl	8000c2c <__aeabi_i2f>
 8006b40:	4920      	ldr	r1, [pc, #128]	; (8006bc4 <HAL_UART_RxCpltCallback+0x224>)
 8006b42:	f7fa f97b 	bl	8000e3c <__aeabi_fdiv>
 8006b46:	4649      	mov	r1, r9
 8006b48:	f7f9 ffbc 	bl	8000ac4 <__addsf3>
 8006b4c:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8006b4e:	4640      	mov	r0, r8
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8006b50:	4698      	mov	r8, r3
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8006b52:	f7fa f86b 	bl	8000c2c <__aeabi_i2f>
 8006b56:	2100      	movs	r1, #0
 8006b58:	f7f9 ffb4 	bl	8000ac4 <__addsf3>
 8006b5c:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8006b5e:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8006b60:	461f      	mov	r7, r3
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8006b62:	f7fa f863 	bl	8000c2c <__aeabi_i2f>
 8006b66:	4916      	ldr	r1, [pc, #88]	; (8006bc0 <HAL_UART_RxCpltCallback+0x220>)
 8006b68:	f7fa f968 	bl	8000e3c <__aeabi_fdiv>
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	f7f9 ffa9 	bl	8000ac4 <__addsf3>
 8006b72:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8006b74:	4630      	mov	r0, r6
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8006b76:	461e      	mov	r6, r3
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8006b78:	f7fa f858 	bl	8000c2c <__aeabi_i2f>
 8006b7c:	4911      	ldr	r1, [pc, #68]	; (8006bc4 <HAL_UART_RxCpltCallback+0x224>)
 8006b7e:	f7fa f95d 	bl	8000e3c <__aeabi_fdiv>
 8006b82:	4631      	mov	r1, r6
 8006b84:	f7f9 ff9e 	bl	8000ac4 <__addsf3>
 8006b88:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8006b8a:	4628      	mov	r0, r5
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8006b8c:	461d      	mov	r5, r3
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8006b8e:	f7fa f84d 	bl	8000c2c <__aeabi_i2f>
 8006b92:	490d      	ldr	r1, [pc, #52]	; (8006bc8 <HAL_UART_RxCpltCallback+0x228>)
 8006b94:	f7fa f952 	bl	8000e3c <__aeabi_fdiv>
 8006b98:	4629      	mov	r1, r5
 8006b9a:	f7f9 ff93 	bl	8000ac4 <__addsf3>
		lin_num_aux = tempv2;
 8006b9e:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <HAL_UART_RxCpltCallback+0x22c>)
		cur_num_aux = tempa2;
 8006ba0:	490b      	ldr	r1, [pc, #44]	; (8006bd0 <HAL_UART_RxCpltCallback+0x230>)
		chstat_aux_rx = rxbuffercpy[18]-48;
 8006ba2:	4a0c      	ldr	r2, [pc, #48]	; (8006bd4 <HAL_UART_RxCpltCallback+0x234>)
 8006ba4:	b264      	sxtb	r4, r4
		lin_num_aux = tempv2;
 8006ba6:	f8c3 8000 	str.w	r8, [r3]
		cur_num_aux = tempa2;
 8006baa:	6008      	str	r0, [r1, #0]
		chstat_aux_rx = rxbuffercpy[18]-48;
 8006bac:	7014      	strb	r4, [r2, #0]
 8006bae:	e71e      	b.n	80069ee <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 8006bb0:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 8006bb2:	7835      	ldrb	r5, [r6, #0]
 8006bb4:	e704      	b.n	80069c0 <HAL_UART_RxCpltCallback+0x20>
 8006bb6:	bf00      	nop
 8006bb8:	20000718 	.word	0x20000718
 8006bbc:	200006c0 	.word	0x200006c0
 8006bc0:	41200000 	.word	0x41200000
 8006bc4:	42c80000 	.word	0x42c80000
 8006bc8:	447a0000 	.word	0x447a0000
 8006bcc:	2000070c 	.word	0x2000070c
 8006bd0:	200003a8 	.word	0x200003a8
 8006bd4:	200003a1 	.word	0x200003a1

08006bd8 <HAL_UART_ErrorCallback>:
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64); //Try again!
 8006bd8:	2240      	movs	r2, #64	; 0x40
 8006bda:	4902      	ldr	r1, [pc, #8]	; (8006be4 <HAL_UART_ErrorCallback+0xc>)
 8006bdc:	4802      	ldr	r0, [pc, #8]	; (8006be8 <HAL_UART_ErrorCallback+0x10>)
 8006bde:	f003 bc09 	b.w	800a3f4 <HAL_UART_Receive_DMA>
 8006be2:	bf00      	nop
 8006be4:	20000718 	.word	0x20000718
 8006be8:	200006c0 	.word	0x200006c0

08006bec <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8006bec:	b430      	push	{r4, r5}
	memcpy(txbuffer, txbuffer_cpy, 64);  // copy the data to the buffer
 8006bee:	4c07      	ldr	r4, [pc, #28]	; (8006c0c <HAL_UART_TxHalfCpltCallback+0x20>)
 8006bf0:	4d07      	ldr	r5, [pc, #28]	; (8006c10 <HAL_UART_TxHalfCpltCallback+0x24>)
 8006bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bfe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006c06:	bc30      	pop	{r4, r5}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	20000764 	.word	0x20000764
 8006c10:	200007a4 	.word	0x200007a4

08006c14 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8006c14:	b5d0      	push	{r4, r6, r7, lr}
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8006c16:	4c11      	ldr	r4, [pc, #68]	; (8006c5c <HAL_UART_TxCpltCallback+0x48>)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8006c18:	b086      	sub	sp, #24
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8006c1a:	2240      	movs	r2, #64	; 0x40
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f005 fd14 	bl	800c64c <memset>
	snprintf((char*)txbuffer_cpy, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8006c24:	4a0e      	ldr	r2, [pc, #56]	; (8006c60 <HAL_UART_TxCpltCallback+0x4c>)
 8006c26:	490f      	ldr	r1, [pc, #60]	; (8006c64 <HAL_UART_TxCpltCallback+0x50>)
 8006c28:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <HAL_UART_TxCpltCallback+0x54>)
 8006c2a:	680e      	ldr	r6, [r1, #0]
 8006c2c:	6810      	ldr	r0, [r2, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	b25b      	sxtb	r3, r3
 8006c32:	9304      	str	r3, [sp, #16]
 8006c34:	f7f9 fc10 	bl	8000458 <__aeabi_f2d>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c42:	f7f9 fc09 	bl	8000458 <__aeabi_f2d>
 8006c46:	4606      	mov	r6, r0
 8006c48:	460f      	mov	r7, r1
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	2120      	movs	r1, #32
 8006c4e:	e9cd 6700 	strd	r6, r7, [sp]
 8006c52:	4a06      	ldr	r2, [pc, #24]	; (8006c6c <HAL_UART_TxCpltCallback+0x58>)
 8006c54:	f006 f962 	bl	800cf1c <sniprintf>
}
 8006c58:	b006      	add	sp, #24
 8006c5a:	bdd0      	pop	{r4, r6, r7, pc}
 8006c5c:	200007a4 	.word	0x200007a4
 8006c60:	20000394 	.word	0x20000394
 8006c64:	20000868 	.word	0x20000868
 8006c68:	200003a2 	.word	0x200003a2
 8006c6c:	0800f468 	.word	0x0800f468

08006c70 <Error_Handler>:
 8006c70:	b672      	cpsid	i
  while (1)
 8006c72:	e7fe      	b.n	8006c72 <Error_Handler+0x2>

08006c74 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8006c74:	4b0f      	ldr	r3, [pc, #60]	; (8006cb4 <HAL_MspInit+0x40>)
{
 8006c76:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8006c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c7a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006c7e:	625a      	str	r2, [r3, #36]	; 0x24
 8006c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c82:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006c86:	9201      	str	r2, [sp, #4]
 8006c88:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c8a:	6a1a      	ldr	r2, [r3, #32]
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	621a      	str	r2, [r3, #32]
 8006c92:	6a1a      	ldr	r2, [r3, #32]
 8006c94:	f002 0201 	and.w	r2, r2, #1
 8006c98:	9202      	str	r2, [sp, #8]
 8006c9a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006ca2:	625a      	str	r2, [r3, #36]	; 0x24
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006caa:	9303      	str	r3, [sp, #12]
 8006cac:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006cae:	b004      	add	sp, #16
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	40023800 	.word	0x40023800

08006cb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006cb8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cba:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8006cbc:	4b25      	ldr	r3, [pc, #148]	; (8006d54 <HAL_ADC_MspInit+0x9c>)
 8006cbe:	6802      	ldr	r2, [r0, #0]
{
 8006cc0:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8006cc2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cc4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006cc8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006ccc:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8006cce:	d001      	beq.n	8006cd4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006cd0:	b008      	add	sp, #32
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006cd4:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8006cd8:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cda:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ce0:	621a      	str	r2, [r3, #32]
 8006ce2:	6a1a      	ldr	r2, [r3, #32]
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006cea:	9200      	str	r2, [sp, #0]
 8006cec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cee:	69da      	ldr	r2, [r3, #28]
    hdma_adc.Instance = DMA1_Channel1;
 8006cf0:	4e19      	ldr	r6, [pc, #100]	; (8006d58 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	61da      	str	r2, [r3, #28]
 8006cf8:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006cfa:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006d02:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d04:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d06:	4815      	ldr	r0, [pc, #84]	; (8006d5c <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006d08:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d0c:	f001 f9b8 	bl	8008080 <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8006d10:	2380      	movs	r3, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8006d12:	4913      	ldr	r1, [pc, #76]	; (8006d60 <HAL_ADC_MspInit+0xa8>)
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006d14:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d18:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8006d1c:	60f3      	str	r3, [r6, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8006d22:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8006d24:	4630      	mov	r0, r6
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d26:	60b4      	str	r4, [r6, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8006d28:	61f4      	str	r4, [r6, #28]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d2a:	6171      	str	r1, [r6, #20]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006d2c:	6132      	str	r2, [r6, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8006d2e:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8006d30:	f000 fff2 	bl	8007d18 <HAL_DMA_Init>
 8006d34:	b958      	cbnz	r0, 8006d4e <HAL_ADC_MspInit+0x96>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8006d36:	2200      	movs	r2, #0
 8006d38:	2012      	movs	r0, #18
 8006d3a:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8006d3c:	646e      	str	r6, [r5, #68]	; 0x44
 8006d3e:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8006d40:	f000 feec 	bl	8007b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8006d44:	2012      	movs	r0, #18
 8006d46:	f000 ff27 	bl	8007b98 <HAL_NVIC_EnableIRQ>
}
 8006d4a:	b008      	add	sp, #32
 8006d4c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8006d4e:	f7ff ff8f 	bl	8006c70 <Error_Handler>
 8006d52:	e7f0      	b.n	8006d36 <HAL_ADC_MspInit+0x7e>
 8006d54:	40012400 	.word	0x40012400
 8006d58:	20000418 	.word	0x20000418
 8006d5c:	40020000 	.word	0x40020000
 8006d60:	40026008 	.word	0x40026008

08006d64 <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8006d64:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <HAL_ADC_MspDeInit+0x30>)
 8006d66:	6802      	ldr	r2, [r0, #0]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d000      	beq.n	8006d6e <HAL_ADC_MspDeInit+0xa>
 8006d6c:	4770      	bx	lr
{
 8006d6e:	b510      	push	{r4, lr}
 8006d70:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8006d72:	4a09      	ldr	r2, [pc, #36]	; (8006d98 <HAL_ADC_MspDeInit+0x34>)
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8006d74:	210f      	movs	r1, #15
    __HAL_RCC_ADC1_CLK_DISABLE();
 8006d76:	6a13      	ldr	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8006d78:	4808      	ldr	r0, [pc, #32]	; (8006d9c <HAL_ADC_MspDeInit+0x38>)
    __HAL_RCC_ADC1_CLK_DISABLE();
 8006d7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d7e:	6213      	str	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8006d80:	f001 fa68 	bl	8008254 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8006d84:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006d86:	f000 ffff 	bl	8007d88 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8006d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8006d8e:	2012      	movs	r0, #18
 8006d90:	f000 bf10 	b.w	8007bb4 <HAL_NVIC_DisableIRQ>
 8006d94:	40012400 	.word	0x40012400
 8006d98:	40023800 	.word	0x40023800
 8006d9c:	40020000 	.word	0x40020000

08006da0 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006da0:	2300      	movs	r3, #0
{
 8006da2:	b530      	push	{r4, r5, lr}
  if(hdac->Instance==DAC)
 8006da4:	4a14      	ldr	r2, [pc, #80]	; (8006df8 <HAL_DAC_MspInit+0x58>)
 8006da6:	6801      	ldr	r1, [r0, #0]
{
 8006da8:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 8006daa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006db0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006db4:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8006db6:	d001      	beq.n	8006dbc <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8006db8:	b009      	add	sp, #36	; 0x24
 8006dba:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006dbc:	2430      	movs	r4, #48	; 0x30
 8006dbe:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8006dc0:	4b0e      	ldr	r3, [pc, #56]	; (8006dfc <HAL_DAC_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dc2:	480f      	ldr	r0, [pc, #60]	; (8006e00 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8006dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dc6:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC_CLK_ENABLE();
 8006dc8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006dcc:	625a      	str	r2, [r3, #36]	; 0x24
 8006dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dd0:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8006dd4:	9200      	str	r2, [sp, #0]
 8006dd6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dd8:	69da      	ldr	r2, [r3, #28]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	61da      	str	r2, [r3, #28]
 8006de0:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006de2:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	9301      	str	r3, [sp, #4]
 8006dec:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dee:	f001 f947 	bl	8008080 <HAL_GPIO_Init>
}
 8006df2:	b009      	add	sp, #36	; 0x24
 8006df4:	bd30      	pop	{r4, r5, pc}
 8006df6:	bf00      	nop
 8006df8:	40007400 	.word	0x40007400
 8006dfc:	40023800 	.word	0x40023800
 8006e00:	40020000 	.word	0x40020000

08006e04 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e04:	2300      	movs	r3, #0
{
 8006e06:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8006e08:	4a16      	ldr	r2, [pc, #88]	; (8006e64 <HAL_I2C_MspInit+0x60>)
 8006e0a:	6801      	ldr	r1, [r0, #0]
{
 8006e0c:	b088      	sub	sp, #32
  if(hi2c->Instance==I2C1)
 8006e0e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e14:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006e18:	9306      	str	r3, [sp, #24]
  if(hi2c->Instance==I2C1)
 8006e1a:	d001      	beq.n	8006e20 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006e1c:	b008      	add	sp, #32
 8006e1e:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e20:	2003      	movs	r0, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e22:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006e24:	26c0      	movs	r6, #192	; 0xc0
 8006e26:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e28:	4c0f      	ldr	r4, [pc, #60]	; (8006e68 <HAL_I2C_MspInit+0x64>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e2a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e2c:	69e3      	ldr	r3, [r4, #28]
 8006e2e:	f043 0302 	orr.w	r3, r3, #2
 8006e32:	61e3      	str	r3, [r4, #28]
 8006e34:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e36:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e3e:	480b      	ldr	r0, [pc, #44]	; (8006e6c <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e40:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006e42:	e9cd 6702 	strd	r6, r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e46:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e48:	f001 f91a 	bl	8008080 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e52:	6263      	str	r3, [r4, #36]	; 0x24
 8006e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	9b01      	ldr	r3, [sp, #4]
}
 8006e5e:	b008      	add	sp, #32
 8006e60:	bdd0      	pop	{r4, r6, r7, pc}
 8006e62:	bf00      	nop
 8006e64:	40005400 	.word	0x40005400
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	40020400 	.word	0x40020400

08006e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006e70:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8006e72:	6803      	ldr	r3, [r0, #0]
{
 8006e74:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 8006e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7a:	d026      	beq.n	8006eca <HAL_TIM_Base_MspInit+0x5a>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8006e7c:	4a44      	ldr	r2, [pc, #272]	; (8006f90 <HAL_TIM_Base_MspInit+0x120>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d039      	beq.n	8006ef6 <HAL_TIM_Base_MspInit+0x86>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8006e82:	4a44      	ldr	r2, [pc, #272]	; (8006f94 <HAL_TIM_Base_MspInit+0x124>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d04b      	beq.n	8006f20 <HAL_TIM_Base_MspInit+0xb0>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 8006e88:	4a43      	ldr	r2, [pc, #268]	; (8006f98 <HAL_TIM_Base_MspInit+0x128>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d008      	beq.n	8006ea0 <HAL_TIM_Base_MspInit+0x30>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8006e8e:	4a43      	ldr	r2, [pc, #268]	; (8006f9c <HAL_TIM_Base_MspInit+0x12c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d05a      	beq.n	8006f4a <HAL_TIM_Base_MspInit+0xda>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8006e94:	4a42      	ldr	r2, [pc, #264]	; (8006fa0 <HAL_TIM_Base_MspInit+0x130>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d068      	beq.n	8006f6c <HAL_TIM_Base_MspInit+0xfc>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8006e9a:	b007      	add	sp, #28
 8006e9c:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8006ea0:	2200      	movs	r2, #0
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006ea2:	4b40      	ldr	r3, [pc, #256]	; (8006fa4 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8006ea4:	2019      	movs	r0, #25
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006ea6:	6a19      	ldr	r1, [r3, #32]
 8006ea8:	f041 0104 	orr.w	r1, r1, #4
 8006eac:	6219      	str	r1, [r3, #32]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8006eb0:	4611      	mov	r1, r2
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	9303      	str	r3, [sp, #12]
 8006eb8:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8006eba:	f000 fe2f 	bl	8007b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8006ebe:	2019      	movs	r0, #25
}
 8006ec0:	b007      	add	sp, #28
 8006ec2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006ec6:	f000 be67 	b.w	8007b98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006eca:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006ecc:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8006ed0:	6a59      	ldr	r1, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006ed2:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006ed4:	f041 0101 	orr.w	r1, r1, #1
 8006ed8:	6259      	str	r1, [r3, #36]	; 0x24
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006edc:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006ee6:	f000 fe19 	bl	8007b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006eea:	201c      	movs	r0, #28
}
 8006eec:	b007      	add	sp, #28
 8006eee:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006ef2:	f000 be51 	b.w	8007b98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006ef6:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006ef8:	4b2a      	ldr	r3, [pc, #168]	; (8006fa4 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006efa:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006efc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006efe:	f041 0102 	orr.w	r1, r1, #2
 8006f02:	6259      	str	r1, [r3, #36]	; 0x24
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006f06:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006f10:	f000 fe04 	bl	8007b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006f14:	201d      	movs	r0, #29
}
 8006f16:	b007      	add	sp, #28
 8006f18:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006f1c:	f000 be3c 	b.w	8007b98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006f20:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006f22:	4b20      	ldr	r3, [pc, #128]	; (8006fa4 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006f24:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006f26:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006f28:	f041 0104 	orr.w	r1, r1, #4
 8006f2c:	6259      	str	r1, [r3, #36]	; 0x24
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006f30:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	9302      	str	r3, [sp, #8]
 8006f38:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006f3a:	f000 fdef 	bl	8007b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006f3e:	201e      	movs	r0, #30
}
 8006f40:	b007      	add	sp, #28
 8006f42:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006f46:	f000 be27 	b.w	8007b98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8006f4a:	2200      	movs	r2, #0
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006f4c:	4b15      	ldr	r3, [pc, #84]	; (8006fa4 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8006f4e:	201a      	movs	r0, #26
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006f50:	6a19      	ldr	r1, [r3, #32]
 8006f52:	f041 0108 	orr.w	r1, r1, #8
 8006f56:	6219      	str	r1, [r3, #32]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8006f5a:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8006f64:	f000 fdda 	bl	8007b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 8006f68:	201a      	movs	r0, #26
 8006f6a:	e7a9      	b.n	8006ec0 <HAL_TIM_Base_MspInit+0x50>
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8006f6c:	2200      	movs	r2, #0
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006f6e:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8006f70:	201b      	movs	r0, #27
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006f72:	6a19      	ldr	r1, [r3, #32]
 8006f74:	f041 0110 	orr.w	r1, r1, #16
 8006f78:	6219      	str	r1, [r3, #32]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8006f7c:	4611      	mov	r1, r2
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006f7e:	f003 0310 	and.w	r3, r3, #16
 8006f82:	9305      	str	r3, [sp, #20]
 8006f84:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8006f86:	f000 fdc9 	bl	8007b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8006f8a:	201b      	movs	r0, #27
 8006f8c:	e798      	b.n	8006ec0 <HAL_TIM_Base_MspInit+0x50>
 8006f8e:	bf00      	nop
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40010800 	.word	0x40010800
 8006f9c:	40010c00 	.word	0x40010c00
 8006fa0:	40011000 	.word	0x40011000
 8006fa4:	40023800 	.word	0x40023800

08006fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006fa8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006faa:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8006fac:	4b31      	ldr	r3, [pc, #196]	; (8007074 <HAL_UART_MspInit+0xcc>)
 8006fae:	6802      	ldr	r2, [r0, #0]
{
 8006fb0:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8006fb2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fb4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006fb8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006fbc:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8006fbe:	d001      	beq.n	8006fc4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006fc0:	b008      	add	sp, #32
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8006fc4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006fc8:	6a1a      	ldr	r2, [r3, #32]
 8006fca:	4605      	mov	r5, r0
 8006fcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fd0:	621a      	str	r2, [r3, #32]
 8006fd2:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fd4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8006fd6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006fda:	9200      	str	r2, [sp, #0]
 8006fdc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fde:	69da      	ldr	r2, [r3, #28]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006fe0:	4e25      	ldr	r6, [pc, #148]	; (8007078 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	61da      	str	r2, [r3, #28]
 8006fe8:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006fea:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006ff4:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ff6:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ff8:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006ffa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006ffe:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007000:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007002:	481e      	ldr	r0, [pc, #120]	; (800707c <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007004:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007006:	f001 f83b 	bl	8008080 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800700a:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800700c:	4a1c      	ldr	r2, [pc, #112]	; (8007080 <HAL_UART_MspInit+0xd8>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800700e:	4630      	mov	r0, r6
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007010:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007014:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007018:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800701c:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800701e:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007020:	f000 fe7a 	bl	8007d18 <HAL_DMA_Init>
 8007024:	b9f8      	cbnz	r0, 8007066 <HAL_UART_MspInit+0xbe>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007026:	2210      	movs	r2, #16
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007028:	4c16      	ldr	r4, [pc, #88]	; (8007084 <HAL_UART_MspInit+0xdc>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800702a:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800702c:	2180      	movs	r1, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800702e:	6062      	str	r2, [r4, #4]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8007030:	2220      	movs	r2, #32
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007032:	e9c4 3102 	strd	r3, r1, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007036:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800703a:	61e3      	str	r3, [r4, #28]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800703c:	4b12      	ldr	r3, [pc, #72]	; (8007088 <HAL_UART_MspInit+0xe0>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800703e:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007040:	63ae      	str	r6, [r5, #56]	; 0x38
 8007042:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007044:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8007046:	61a2      	str	r2, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007048:	f000 fe66 	bl	8007d18 <HAL_DMA_Init>
 800704c:	b970      	cbnz	r0, 800706c <HAL_UART_MspInit+0xc4>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800704e:	2200      	movs	r2, #0
 8007050:	2025      	movs	r0, #37	; 0x25
 8007052:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007054:	636c      	str	r4, [r5, #52]	; 0x34
 8007056:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007058:	f000 fd60 	bl	8007b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800705c:	2025      	movs	r0, #37	; 0x25
 800705e:	f000 fd9b 	bl	8007b98 <HAL_NVIC_EnableIRQ>
}
 8007062:	b008      	add	sp, #32
 8007064:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8007066:	f7ff fe03 	bl	8006c70 <Error_Handler>
 800706a:	e7dc      	b.n	8007026 <HAL_UART_MspInit+0x7e>
      Error_Handler();
 800706c:	f7ff fe00 	bl	8006c70 <Error_Handler>
 8007070:	e7ed      	b.n	800704e <HAL_UART_MspInit+0xa6>
 8007072:	bf00      	nop
 8007074:	40013800 	.word	0x40013800
 8007078:	2000045c 	.word	0x2000045c
 800707c:	40020000 	.word	0x40020000
 8007080:	40026058 	.word	0x40026058
 8007084:	200004a0 	.word	0x200004a0
 8007088:	40026044 	.word	0x40026044

0800708c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800708c:	e7fe      	b.n	800708c <NMI_Handler>
 800708e:	bf00      	nop

08007090 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007090:	e7fe      	b.n	8007090 <HardFault_Handler>
 8007092:	bf00      	nop

08007094 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007094:	e7fe      	b.n	8007094 <MemManage_Handler>
 8007096:	bf00      	nop

08007098 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007098:	e7fe      	b.n	8007098 <BusFault_Handler>
 800709a:	bf00      	nop

0800709c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800709c:	e7fe      	b.n	800709c <UsageFault_Handler>
 800709e:	bf00      	nop

080070a0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop

080070a4 <DebugMon_Handler>:
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop

080070a8 <PendSV_Handler>:
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop

080070ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80070ac:	f000 b926 	b.w	80072fc <HAL_IncTick>

080070b0 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_CLK_Pin);
 80070b0:	2001      	movs	r0, #1
 80070b2:	f001 b975 	b.w	80083a0 <HAL_GPIO_EXTI_IRQHandler>
 80070b6:	bf00      	nop

080070b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_SW_Pin);
 80070b8:	2004      	movs	r0, #4
 80070ba:	f001 b971 	b.w	80083a0 <HAL_GPIO_EXTI_IRQHandler>
 80070be:	bf00      	nop

080070c0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80070c0:	4801      	ldr	r0, [pc, #4]	; (80070c8 <DMA1_Channel1_IRQHandler+0x8>)
 80070c2:	f000 bf29 	b.w	8007f18 <HAL_DMA_IRQHandler>
 80070c6:	bf00      	nop
 80070c8:	20000418 	.word	0x20000418

080070cc <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80070cc:	4801      	ldr	r0, [pc, #4]	; (80070d4 <DMA1_Channel4_IRQHandler+0x8>)
 80070ce:	f000 bf23 	b.w	8007f18 <HAL_DMA_IRQHandler>
 80070d2:	bf00      	nop
 80070d4:	200004a0 	.word	0x200004a0

080070d8 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80070d8:	4801      	ldr	r0, [pc, #4]	; (80070e0 <DMA1_Channel5_IRQHandler+0x8>)
 80070da:	f000 bf1d 	b.w	8007f18 <HAL_DMA_IRQHandler>
 80070de:	bf00      	nop
 80070e0:	2000045c 	.word	0x2000045c

080070e4 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80070e4:	4801      	ldr	r0, [pc, #4]	; (80070ec <ADC1_IRQHandler+0x8>)
 80070e6:	f000 bad1 	b.w	800768c <HAL_ADC_IRQHandler>
 80070ea:	bf00      	nop
 80070ec:	200003b0 	.word	0x200003b0

080070f0 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80070f0:	4801      	ldr	r0, [pc, #4]	; (80070f8 <USB_LP_IRQHandler+0x8>)
 80070f2:	f001 bc3b 	b.w	800896c <HAL_PCD_IRQHandler>
 80070f6:	bf00      	nop
 80070f8:	200014ec 	.word	0x200014ec

080070fc <TIM9_IRQHandler>:
void TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM9_IRQn 0 */

  /* USER CODE END TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80070fc:	4801      	ldr	r0, [pc, #4]	; (8007104 <TIM9_IRQHandler+0x8>)
 80070fe:	f002 bff5 	b.w	800a0ec <HAL_TIM_IRQHandler>
 8007102:	bf00      	nop
 8007104:	20000680 	.word	0x20000680

08007108 <TIM10_IRQHandler>:
void TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8007108:	4801      	ldr	r0, [pc, #4]	; (8007110 <TIM10_IRQHandler+0x8>)
 800710a:	f002 bfef 	b.w	800a0ec <HAL_TIM_IRQHandler>
 800710e:	bf00      	nop
 8007110:	20000540 	.word	0x20000540

08007114 <TIM11_IRQHandler>:
void TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8007114:	4801      	ldr	r0, [pc, #4]	; (800711c <TIM11_IRQHandler+0x8>)
 8007116:	f002 bfe9 	b.w	800a0ec <HAL_TIM_IRQHandler>
 800711a:	bf00      	nop
 800711c:	20000580 	.word	0x20000580

08007120 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007120:	4801      	ldr	r0, [pc, #4]	; (8007128 <TIM2_IRQHandler+0x8>)
 8007122:	f002 bfe3 	b.w	800a0ec <HAL_TIM_IRQHandler>
 8007126:	bf00      	nop
 8007128:	200005c0 	.word	0x200005c0

0800712c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800712c:	4801      	ldr	r0, [pc, #4]	; (8007134 <TIM3_IRQHandler+0x8>)
 800712e:	f002 bfdd 	b.w	800a0ec <HAL_TIM_IRQHandler>
 8007132:	bf00      	nop
 8007134:	20000600 	.word	0x20000600

08007138 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007138:	4801      	ldr	r0, [pc, #4]	; (8007140 <TIM4_IRQHandler+0x8>)
 800713a:	f002 bfd7 	b.w	800a0ec <HAL_TIM_IRQHandler>
 800713e:	bf00      	nop
 8007140:	20000640 	.word	0x20000640

08007144 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007144:	4801      	ldr	r0, [pc, #4]	; (800714c <USART1_IRQHandler+0x8>)
 8007146:	f003 ba9f 	b.w	800a688 <HAL_UART_IRQHandler>
 800714a:	bf00      	nop
 800714c:	200006c0 	.word	0x200006c0

08007150 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007150:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Row_1_Pin);
 8007152:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007156:	f001 f923 	bl	80083a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_2_Pin);
 800715a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800715e:	f001 f91f 	bl	80083a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_3_Pin);
 8007162:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007166:	f001 f91b 	bl	80083a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_4_Pin);
 800716a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800716e:	f001 f917 	bl	80083a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
 8007176:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800717a:	f001 b911 	b.w	80083a0 <HAL_GPIO_EXTI_IRQHandler>
 800717e:	bf00      	nop

08007180 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007180:	2001      	movs	r0, #1
 8007182:	4770      	bx	lr

08007184 <_kill>:

int _kill(int pid, int sig)
{
 8007184:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007186:	f005 fa29 	bl	800c5dc <__errno>
 800718a:	2216      	movs	r2, #22
 800718c:	4603      	mov	r3, r0
	return -1;
}
 800718e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8007192:	601a      	str	r2, [r3, #0]
}
 8007194:	bd08      	pop	{r3, pc}
 8007196:	bf00      	nop

08007198 <_exit>:

void _exit (int status)
{
 8007198:	b508      	push	{r3, lr}
	errno = EINVAL;
 800719a:	f005 fa1f 	bl	800c5dc <__errno>
 800719e:	2316      	movs	r3, #22
 80071a0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80071a2:	e7fe      	b.n	80071a2 <_exit+0xa>

080071a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80071a4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071a6:	1e16      	subs	r6, r2, #0
 80071a8:	dd07      	ble.n	80071ba <_read+0x16>
 80071aa:	460c      	mov	r4, r1
 80071ac:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80071ae:	f3af 8000 	nop.w
 80071b2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071b6:	42a5      	cmp	r5, r4
 80071b8:	d1f9      	bne.n	80071ae <_read+0xa>
	}

return len;
}
 80071ba:	4630      	mov	r0, r6
 80071bc:	bd70      	pop	{r4, r5, r6, pc}
 80071be:	bf00      	nop

080071c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80071c0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071c2:	1e16      	subs	r6, r2, #0
 80071c4:	dd07      	ble.n	80071d6 <_write+0x16>
 80071c6:	460c      	mov	r4, r1
 80071c8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80071ca:	f814 0b01 	ldrb.w	r0, [r4], #1
 80071ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071d2:	42ac      	cmp	r4, r5
 80071d4:	d1f9      	bne.n	80071ca <_write+0xa>
	}
	return len;
}
 80071d6:	4630      	mov	r0, r6
 80071d8:	bd70      	pop	{r4, r5, r6, pc}
 80071da:	bf00      	nop

080071dc <_close>:

int _close(int file)
{
	return -1;
}
 80071dc:	f04f 30ff 	mov.w	r0, #4294967295
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop

080071e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80071e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80071e8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80071ea:	604b      	str	r3, [r1, #4]
}
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop

080071f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80071f0:	2001      	movs	r0, #1
 80071f2:	4770      	bx	lr

080071f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80071f4:	2000      	movs	r0, #0
 80071f6:	4770      	bx	lr

080071f8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80071f8:	490d      	ldr	r1, [pc, #52]	; (8007230 <_sbrk+0x38>)
{
 80071fa:	4603      	mov	r3, r0
 80071fc:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80071fe:	4a0d      	ldr	r2, [pc, #52]	; (8007234 <_sbrk+0x3c>)
 8007200:	4c0d      	ldr	r4, [pc, #52]	; (8007238 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8007202:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007204:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8007206:	b120      	cbz	r0, 8007212 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007208:	4403      	add	r3, r0
 800720a:	4293      	cmp	r3, r2
 800720c:	d807      	bhi.n	800721e <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800720e:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8007210:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8007212:	4c0a      	ldr	r4, [pc, #40]	; (800723c <_sbrk+0x44>)
 8007214:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8007216:	4403      	add	r3, r0
 8007218:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800721a:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800721c:	d9f7      	bls.n	800720e <_sbrk+0x16>
    errno = ENOMEM;
 800721e:	f005 f9dd 	bl	800c5dc <__errno>
 8007222:	220c      	movs	r2, #12
 8007224:	4603      	mov	r3, r0
    return (void *)-1;
 8007226:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 800722a:	601a      	str	r2, [r3, #0]
}
 800722c:	bd10      	pop	{r4, pc}
 800722e:	bf00      	nop
 8007230:	20000874 	.word	0x20000874
 8007234:	20008000 	.word	0x20008000
 8007238:	00002000 	.word	0x00002000
 800723c:	20001a08 	.word	0x20001a08

08007240 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop

08007244 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007244:	480c      	ldr	r0, [pc, #48]	; (8007278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007246:	490d      	ldr	r1, [pc, #52]	; (800727c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007248:	4a0d      	ldr	r2, [pc, #52]	; (8007280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800724a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800724c:	e002      	b.n	8007254 <LoopCopyDataInit>

0800724e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800724e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007252:	3304      	adds	r3, #4

08007254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007258:	d3f9      	bcc.n	800724e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800725a:	4a0a      	ldr	r2, [pc, #40]	; (8007284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800725c:	4c0a      	ldr	r4, [pc, #40]	; (8007288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800725e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007260:	e001      	b.n	8007266 <LoopFillZerobss>

08007262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007264:	3204      	adds	r2, #4

08007266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007268:	d3fb      	bcc.n	8007262 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800726a:	f7ff ffe9 	bl	8007240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800726e:	f005 f9bb 	bl	800c5e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007272:	f7fa fcd9 	bl	8001c28 <main>
  bx lr
 8007276:	4770      	bx	lr
  ldr r0, =_sdata
 8007278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800727c:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8007280:	0800f9b4 	.word	0x0800f9b4
  ldr r2, =_sbss
 8007284:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8007288:	20001a08 	.word	0x20001a08

0800728c <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800728c:	e7fe      	b.n	800728c <COMP_IRQHandler>
	...

08007290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007290:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8007292:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <HAL_InitTick+0x40>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	b90b      	cbnz	r3, 800729c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8007298:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800729a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800729c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a4:	490b      	ldr	r1, [pc, #44]	; (80072d4 <HAL_InitTick+0x44>)
 80072a6:	4605      	mov	r5, r0
 80072a8:	6808      	ldr	r0, [r1, #0]
 80072aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80072ae:	f000 fc95 	bl	8007bdc <HAL_SYSTICK_Config>
 80072b2:	4604      	mov	r4, r0
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d1ef      	bne.n	8007298 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072b8:	2d0f      	cmp	r5, #15
 80072ba:	d8ed      	bhi.n	8007298 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80072bc:	4602      	mov	r2, r0
 80072be:	4629      	mov	r1, r5
 80072c0:	f04f 30ff 	mov.w	r0, #4294967295
 80072c4:	f000 fc2a 	bl	8007b1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80072c8:	4b03      	ldr	r3, [pc, #12]	; (80072d8 <HAL_InitTick+0x48>)
 80072ca:	4620      	mov	r0, r4
 80072cc:	601d      	str	r5, [r3, #0]
}
 80072ce:	bd38      	pop	{r3, r4, r5, pc}
 80072d0:	20000018 	.word	0x20000018
 80072d4:	20000014 	.word	0x20000014
 80072d8:	2000001c 	.word	0x2000001c

080072dc <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072dc:	2003      	movs	r0, #3
{
 80072de:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072e0:	f000 fc0a 	bl	8007af8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80072e4:	200f      	movs	r0, #15
 80072e6:	f7ff ffd3 	bl	8007290 <HAL_InitTick>
 80072ea:	b110      	cbz	r0, 80072f2 <HAL_Init+0x16>
    status = HAL_ERROR;
 80072ec:	2401      	movs	r4, #1
}
 80072ee:	4620      	mov	r0, r4
 80072f0:	bd10      	pop	{r4, pc}
 80072f2:	4604      	mov	r4, r0
    HAL_MspInit();
 80072f4:	f7ff fcbe 	bl	8006c74 <HAL_MspInit>
}
 80072f8:	4620      	mov	r0, r4
 80072fa:	bd10      	pop	{r4, pc}

080072fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80072fc:	4a03      	ldr	r2, [pc, #12]	; (800730c <HAL_IncTick+0x10>)
 80072fe:	4904      	ldr	r1, [pc, #16]	; (8007310 <HAL_IncTick+0x14>)
 8007300:	6813      	ldr	r3, [r2, #0]
 8007302:	6809      	ldr	r1, [r1, #0]
 8007304:	440b      	add	r3, r1
 8007306:	6013      	str	r3, [r2, #0]
}
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	20000878 	.word	0x20000878
 8007310:	20000018 	.word	0x20000018

08007314 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007314:	4b01      	ldr	r3, [pc, #4]	; (800731c <HAL_GetTick+0x8>)
 8007316:	6818      	ldr	r0, [r3, #0]
}
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	20000878 	.word	0x20000878

08007320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007324:	f7ff fff6 	bl	8007314 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007328:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800732a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800732c:	d002      	beq.n	8007334 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800732e:	4b04      	ldr	r3, [pc, #16]	; (8007340 <HAL_Delay+0x20>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007334:	f7ff ffee 	bl	8007314 <HAL_GetTick>
 8007338:	1b40      	subs	r0, r0, r5
 800733a:	42a0      	cmp	r0, r4
 800733c:	d3fa      	bcc.n	8007334 <HAL_Delay+0x14>
  {
  }
}
 800733e:	bd38      	pop	{r3, r4, r5, pc}
 8007340:	20000018 	.word	0x20000018

08007344 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007344:	2800      	cmp	r0, #0
 8007346:	f000 80a9 	beq.w	800749c <HAL_ADC_Init+0x158>
{
 800734a:	b530      	push	{r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800734c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800734e:	4604      	mov	r4, r0
{
 8007350:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007352:	2b00      	cmp	r3, #0
 8007354:	d078      	beq.n	8007448 <HAL_ADC_Init+0x104>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007356:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007358:	06d8      	lsls	r0, r3, #27
 800735a:	d453      	bmi.n	8007404 <HAL_ADC_Init+0xc0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800735c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800735e:	4a5c      	ldr	r2, [pc, #368]	; (80074d0 <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 8007360:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007364:	f023 0302 	bic.w	r3, r3, #2
 8007368:	f043 0302 	orr.w	r3, r3, #2
 800736c:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800736e:	6853      	ldr	r3, [r2, #4]
 8007370:	6861      	ldr	r1, [r4, #4]
 8007372:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007376:	430b      	orrs	r3, r1
 8007378:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800737a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800737e:	fa91 f1a1 	rbit	r1, r1
 8007382:	2302      	movs	r3, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007384:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8007388:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800738c:	fa93 f3a3 	rbit	r3, r3
 8007390:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007394:	6965      	ldr	r5, [r4, #20]
 8007396:	68e2      	ldr	r2, [r4, #12]
 8007398:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 800739c:	432a      	orrs	r2, r5
 800739e:	6a25      	ldr	r5, [r4, #32]
 80073a0:	fa0c f101 	lsl.w	r1, ip, r1
 80073a4:	432a      	orrs	r2, r5
 80073a6:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80073a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80073aa:	fa00 f303 	lsl.w	r3, r0, r3
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80073ae:	2910      	cmp	r1, #16
                hadc->Init.ChannelsBank                                        |
 80073b0:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80073b4:	d002      	beq.n	80073bc <HAL_ADC_Init+0x78>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80073b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80073b8:	4311      	orrs	r1, r2
 80073ba:	430b      	orrs	r3, r1
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	6811      	ldr	r1, [r2, #0]
 80073c0:	0649      	lsls	r1, r1, #25
 80073c2:	d551      	bpl.n	8007468 <HAL_ADC_Init+0x124>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80073c4:	6925      	ldr	r5, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80073c6:	6890      	ldr	r0, [r2, #8]
 80073c8:	4942      	ldr	r1, [pc, #264]	; (80074d4 <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80073ca:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 80073ce:	ea01 0100 	and.w	r1, r1, r0
 80073d2:	ea41 0103 	orr.w	r1, r1, r3
 80073d6:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80073d8:	d017      	beq.n	800740a <HAL_ADC_Init+0xc6>
 80073da:	2d01      	cmp	r5, #1
 80073dc:	d015      	beq.n	800740a <HAL_ADC_Init+0xc6>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80073de:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80073e0:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 80073e4:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80073e6:	6891      	ldr	r1, [r2, #8]
 80073e8:	4a3b      	ldr	r2, [pc, #236]	; (80074d8 <HAL_ADC_Init+0x194>)
 80073ea:	400a      	ands	r2, r1
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d11f      	bne.n	8007430 <HAL_ADC_Init+0xec>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80073f0:	2000      	movs	r0, #0
 80073f2:	6520      	str	r0, [r4, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80073f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80073f6:	f023 0303 	bic.w	r3, r3, #3
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8007400:	b003      	add	sp, #12
 8007402:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007404:	2001      	movs	r0, #1
}
 8007406:	b003      	add	sp, #12
 8007408:	bd30      	pop	{r4, r5, pc}
 800740a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800740e:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007410:	fa91 f1a1 	rbit	r1, r1
 8007414:	fab1 f081 	clz	r0, r1
 8007418:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800741a:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 800741e:	3901      	subs	r1, #1
 8007420:	4081      	lsls	r1, r0
 8007422:	4329      	orrs	r1, r5
 8007424:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8007426:	6891      	ldr	r1, [r2, #8]
 8007428:	4a2b      	ldr	r2, [pc, #172]	; (80074d8 <HAL_ADC_Init+0x194>)
 800742a:	400a      	ands	r2, r1
 800742c:	429a      	cmp	r2, r3
 800742e:	d0df      	beq.n	80073f0 <HAL_ADC_Init+0xac>
      tmp_hal_status = HAL_ERROR;
 8007430:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8007432:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007434:	f023 0312 	bic.w	r3, r3, #18
 8007438:	f043 0310 	orr.w	r3, r3, #16
 800743c:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800743e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007440:	4303      	orrs	r3, r0
 8007442:	6523      	str	r3, [r4, #80]	; 0x50
}
 8007444:	b003      	add	sp, #12
 8007446:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007448:	4a24      	ldr	r2, [pc, #144]	; (80074dc <HAL_ADC_Init+0x198>)
    ADC_CLEAR_ERRORCODE(hadc);
 800744a:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 800744c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007450:	6a13      	ldr	r3, [r2, #32]
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	6213      	str	r3, [r2, #32]
 8007458:	6a13      	ldr	r3, [r2, #32]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8007462:	f7ff fc29 	bl	8006cb8 <HAL_ADC_MspInit>
 8007466:	e776      	b.n	8007356 <HAL_ADC_Init+0x12>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8007468:	69a1      	ldr	r1, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800746a:	68a5      	ldr	r5, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800746c:	430b      	orrs	r3, r1
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800746e:	69e1      	ldr	r1, [r4, #28]
 8007470:	ea45 0c01 	orr.w	ip, r5, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8007474:	6925      	ldr	r5, [r4, #16]
 8007476:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800747a:	d00c      	beq.n	8007496 <HAL_ADC_Init+0x152>
 800747c:	2d01      	cmp	r5, #1
 800747e:	d00a      	beq.n	8007496 <HAL_ADC_Init+0x152>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007480:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8007484:	2901      	cmp	r1, #1
 8007486:	d00b      	beq.n	80074a0 <HAL_ADC_Init+0x15c>
        MODIFY_REG(hadc->Instance->CR1,
 8007488:	6850      	ldr	r0, [r2, #4]
 800748a:	4915      	ldr	r1, [pc, #84]	; (80074e0 <HAL_ADC_Init+0x19c>)
 800748c:	4001      	ands	r1, r0
 800748e:	ea41 010c 	orr.w	r1, r1, ip
 8007492:	6051      	str	r1, [r2, #4]
 8007494:	e797      	b.n	80073c6 <HAL_ADC_Init+0x82>
                  hadc->Init.LowPowerAutoPowerOff           |
 8007496:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 800749a:	e7f1      	b.n	8007480 <HAL_ADC_Init+0x13c>
    return HAL_ERROR;
 800749c:	2001      	movs	r0, #1
}
 800749e:	4770      	bx	lr
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80074a0:	b968      	cbnz	r0, 80074be <HAL_ADC_Init+0x17a>
 80074a2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80074a6:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80074aa:	fab1 f081 	clz	r0, r1
 80074ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80074b0:	3901      	subs	r1, #1
 80074b2:	4081      	lsls	r1, r0
 80074b4:	ea41 010c 	orr.w	r1, r1, ip
 80074b8:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 80074bc:	e7e4      	b.n	8007488 <HAL_ADC_Init+0x144>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80074c0:	f041 0120 	orr.w	r1, r1, #32
 80074c4:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074c6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80074c8:	f041 0101 	orr.w	r1, r1, #1
 80074cc:	6521      	str	r1, [r4, #80]	; 0x50
 80074ce:	e7db      	b.n	8007488 <HAL_ADC_Init+0x144>
 80074d0:	40012700 	.word	0x40012700
 80074d4:	c0fff18d 	.word	0xc0fff18d
 80074d8:	bf80fffe 	.word	0xbf80fffe
 80074dc:	40023800 	.word	0x40023800
 80074e0:	fcfc16ff 	.word	0xfcfc16ff

080074e4 <HAL_ADC_DeInit>:
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d075      	beq.n	80075d4 <HAL_ADC_DeInit+0xf0>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80074e8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 80074ea:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80074ec:	f042 0202 	orr.w	r2, r2, #2
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80074f0:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80074f2:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (ADC_IS_ENABLE(hadc) != RESET)
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	4604      	mov	r4, r0
 80074f8:	0655      	lsls	r5, r2, #25
 80074fa:	d453      	bmi.n	80075a4 <HAL_ADC_DeInit+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 80074fc:	f06f 001f 	mvn.w	r0, #31
 8007500:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 8007502:	6858      	ldr	r0, [r3, #4]
 8007504:	4939      	ldr	r1, [pc, #228]	; (80075ec <HAL_ADC_DeInit+0x108>)
    ADC_CR2_CLEAR(hadc);
 8007506:	4a3a      	ldr	r2, [pc, #232]	; (80075f0 <HAL_ADC_DeInit+0x10c>)
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 8007508:	4001      	ands	r1, r0
 800750a:	6059      	str	r1, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 800750c:	6899      	ldr	r1, [r3, #8]
 800750e:	400a      	ands	r2, r1
 8007510:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 8007512:	bf00      	nop
    ADC_SMPR1_CLEAR(hadc);
 8007514:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8007516:	4a37      	ldr	r2, [pc, #220]	; (80075f4 <HAL_ADC_DeInit+0x110>)
    ADC_SMPR1_CLEAR(hadc);
 8007518:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 800751a:	4837      	ldr	r0, [pc, #220]	; (80075f8 <HAL_ADC_DeInit+0x114>)
    ADC_SMPR1_CLEAR(hadc);
 800751c:	0d49      	lsrs	r1, r1, #21
 800751e:	0549      	lsls	r1, r1, #21
 8007520:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 8007522:	6919      	ldr	r1, [r3, #16]
 8007524:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8007528:	6119      	str	r1, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 800752a:	6959      	ldr	r1, [r3, #20]
 800752c:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8007530:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8007532:	6999      	ldr	r1, [r3, #24]
 8007534:	4011      	ands	r1, r2
 8007536:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8007538:	69d9      	ldr	r1, [r3, #28]
 800753a:	4011      	ands	r1, r2
 800753c:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 800753e:	6a19      	ldr	r1, [r3, #32]
 8007540:	4011      	ands	r1, r2
 8007542:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8007544:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007546:	4011      	ands	r1, r2
 8007548:	6259      	str	r1, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 800754a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800754c:	4011      	ands	r1, r2
 800754e:	6299      	str	r1, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8007550:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007552:	400a      	ands	r2, r1
 8007554:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8007556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8007558:	4928      	ldr	r1, [pc, #160]	; (80075fc <HAL_ADC_DeInit+0x118>)
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 800755a:	4010      	ands	r0, r2
 800755c:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 800755e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_ADC_MspDeInit(hadc);
 8007560:	4620      	mov	r0, r4
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8007562:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8007566:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8007568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800756a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800756e:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 8007570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007572:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8007576:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 8007578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800757a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800757e:	641a      	str	r2, [r3, #64]	; 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 8007580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007582:	0d92      	lsrs	r2, r2, #22
 8007584:	0592      	lsls	r2, r2, #22
 8007586:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8007588:	684b      	ldr	r3, [r1, #4]
 800758a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800758e:	604b      	str	r3, [r1, #4]
    HAL_ADC_MspDeInit(hadc);
 8007590:	f7ff fbe8 	bl	8006d64 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8007594:	2300      	movs	r3, #0
    hadc->State = HAL_ADC_STATE_RESET;
 8007596:	4618      	mov	r0, r3
    ADC_CLEAR_ERRORCODE(hadc);
 8007598:	6523      	str	r3, [r4, #80]	; 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 800759a:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 800759c:	2300      	movs	r3, #0
 800759e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	f022 0201 	bic.w	r2, r2, #1
 80075aa:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80075ac:	f7ff feb2 	bl	8007314 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80075b0:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80075b2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	0650      	lsls	r0, r2, #25
 80075b8:	d5a0      	bpl.n	80074fc <HAL_ADC_DeInit+0x18>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80075ba:	f7ff feab 	bl	8007314 <HAL_GetTick>
 80075be:	1b40      	subs	r0, r0, r5
 80075c0:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80075c2:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80075c4:	d902      	bls.n	80075cc <HAL_ADC_DeInit+0xe8>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	0651      	lsls	r1, r2, #25
 80075ca:	d405      	bmi.n	80075d8 <HAL_ADC_DeInit+0xf4>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	0652      	lsls	r2, r2, #25
 80075d0:	d4f3      	bmi.n	80075ba <HAL_ADC_DeInit+0xd6>
 80075d2:	e793      	b.n	80074fc <HAL_ADC_DeInit+0x18>
    return HAL_ERROR;
 80075d4:	2001      	movs	r0, #1
}
 80075d6:	4770      	bx	lr
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075d8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80075dc:	f043 0310 	orr.w	r3, r3, #16
 80075e0:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80075e4:	4303      	orrs	r3, r0
 80075e6:	6523      	str	r3, [r4, #80]	; 0x50
  if (tmp_hal_status == HAL_OK)
 80075e8:	e7d8      	b.n	800759c <HAL_ADC_DeInit+0xb8>
 80075ea:	bf00      	nop
 80075ec:	f83c0000 	.word	0xf83c0000
 80075f0:	8080f08c 	.word	0x8080f08c
 80075f4:	fffff000 	.word	0xfffff000
 80075f8:	fe0f8000 	.word	0xfe0f8000
 80075fc:	40012700 	.word	0x40012700

08007600 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007600:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007604:	f012 0f50 	tst.w	r2, #80	; 0x50
 8007608:	d126      	bne.n	8007658 <ADC_DMAConvCplt+0x58>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800760a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800760c:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800760e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8007612:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007614:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007616:	688a      	ldr	r2, [r1, #8]
 8007618:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800761c:	d118      	bne.n	8007650 <ADC_DMAConvCplt+0x50>
 800761e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8007622:	b9aa      	cbnz	r2, 8007650 <ADC_DMAConvCplt+0x50>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007624:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007626:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 800762a:	d002      	beq.n	8007632 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800762c:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800762e:	0550      	lsls	r0, r2, #21
 8007630:	d40e      	bmi.n	8007650 <ADC_DMAConvCplt+0x50>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007632:	684a      	ldr	r2, [r1, #4]
 8007634:	f022 0220 	bic.w	r2, r2, #32
 8007638:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800763a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800763c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007640:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007644:	04d2      	lsls	r2, r2, #19
 8007646:	d403      	bmi.n	8007650 <ADC_DMAConvCplt+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800764a:	f042 0201 	orr.w	r2, r2, #1
 800764e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff f983 	bl	800695c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8007656:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8007658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765c:	4718      	bx	r3
 800765e:	bf00      	nop

08007660 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007660:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007662:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007664:	f7ff f96a 	bl	800693c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007668:	bd08      	pop	{r3, pc}
 800766a:	bf00      	nop

0800766c <HAL_ADC_ErrorCallback>:
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop

08007670 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007670:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8007672:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007674:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767a:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800767c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800767e:	f043 0304 	orr.w	r3, r3, #4
 8007682:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007684:	f7ff fff2 	bl	800766c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007688:	bd08      	pop	{r3, pc}
 800768a:	bf00      	nop

0800768c <HAL_ADC_IRQHandler>:
{
 800768c:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800768e:	6803      	ldr	r3, [r0, #0]
{
 8007690:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	0691      	lsls	r1, r2, #26
 8007696:	d502      	bpl.n	800769e <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	0792      	lsls	r2, r2, #30
 800769c:	d445      	bmi.n	800772a <HAL_ADC_IRQHandler+0x9e>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	0612      	lsls	r2, r2, #24
 80076a2:	d502      	bpl.n	80076aa <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	0755      	lsls	r5, r2, #29
 80076a8:	d40c      	bmi.n	80076c4 <HAL_ADC_IRQHandler+0x38>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	0655      	lsls	r5, r2, #25
 80076ae:	d502      	bpl.n	80076b6 <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	07d0      	lsls	r0, r2, #31
 80076b4:	d46f      	bmi.n	8007796 <HAL_ADC_IRQHandler+0x10a>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	d502      	bpl.n	80076c2 <HAL_ADC_IRQHandler+0x36>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	0692      	lsls	r2, r2, #26
 80076c0:	d45c      	bmi.n	800777c <HAL_ADC_IRQHandler+0xf0>
}
 80076c2:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80076c4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80076c6:	06d0      	lsls	r0, r2, #27
 80076c8:	d403      	bmi.n	80076d2 <HAL_ADC_IRQHandler+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80076ca:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80076cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076d0:	64e2      	str	r2, [r4, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80076d8:	d11f      	bne.n	800771a <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80076da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80076dc:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80076e0:	d002      	beq.n	80076e8 <HAL_ADC_IRQHandler+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80076e2:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80076e4:	0551      	lsls	r1, r2, #21
 80076e6:	d418      	bmi.n	800771a <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80076e8:	685a      	ldr	r2, [r3, #4]
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80076ea:	0552      	lsls	r2, r2, #21
 80076ec:	d415      	bmi.n	800771a <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80076ee:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80076f0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80076f4:	d111      	bne.n	800771a <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80076f6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80076fa:	b972      	cbnz	r2, 800771a <HAL_ADC_IRQHandler+0x8e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007702:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007704:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800770a:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800770c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800770e:	05db      	lsls	r3, r3, #23
 8007710:	d403      	bmi.n	800771a <HAL_ADC_IRQHandler+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007712:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007714:	f043 0301 	orr.w	r3, r3, #1
 8007718:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800771a:	4620      	mov	r0, r4
 800771c:	f000 f9ea 	bl	8007af4 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007720:	f06f 020c 	mvn.w	r2, #12
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	e7bf      	b.n	80076aa <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800772a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800772c:	06d5      	lsls	r5, r2, #27
 800772e:	d403      	bmi.n	8007738 <HAL_ADC_IRQHandler+0xac>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007730:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007736:	64c2      	str	r2, [r0, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800773e:	d115      	bne.n	800776c <HAL_ADC_IRQHandler+0xe0>
 8007740:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8007744:	b992      	cbnz	r2, 800776c <HAL_ADC_IRQHandler+0xe0>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007748:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 800774c:	d12f      	bne.n	80077ae <HAL_ADC_IRQHandler+0x122>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	f022 0220 	bic.w	r2, r2, #32
 8007754:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007756:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800775c:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800775e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007760:	04d9      	lsls	r1, r3, #19
 8007762:	d403      	bmi.n	800776c <HAL_ADC_IRQHandler+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007764:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007766:	f043 0301 	orr.w	r3, r3, #1
 800776a:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_ConvCpltCallback(hadc);
 800776c:	4620      	mov	r0, r4
 800776e:	f7ff f8f5 	bl	800695c <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007772:	f06f 0212 	mvn.w	r2, #18
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	e790      	b.n	800769e <HAL_ADC_IRQHandler+0x12>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800777c:	f06f 0520 	mvn.w	r5, #32
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007780:	6d22      	ldr	r2, [r4, #80]	; 0x50
      HAL_ADC_ErrorCallback(hadc);
 8007782:	4620      	mov	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007784:	f042 0202 	orr.w	r2, r2, #2
 8007788:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800778a:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800778c:	f7ff ff6e 	bl	800766c <HAL_ADC_ErrorCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	601d      	str	r5, [r3, #0]
}
 8007794:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007796:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007798:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800779a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800779e:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80077a0:	f7ff f8ec 	bl	800697c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80077a4:	f06f 0201 	mvn.w	r2, #1
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e783      	b.n	80076b6 <HAL_ADC_IRQHandler+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80077ae:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80077b0:	0550      	lsls	r0, r2, #21
 80077b2:	d4db      	bmi.n	800776c <HAL_ADC_IRQHandler+0xe0>
 80077b4:	e7cb      	b.n	800774e <HAL_ADC_IRQHandler+0xc2>
 80077b6:	bf00      	nop

080077b8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 80077b8:	2300      	movs	r3, #0
{
 80077ba:	b530      	push	{r4, r5, lr}
 80077bc:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80077be:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80077c0:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	f000 80aa 	beq.w	800791e <HAL_ADC_ConfigChannel+0x166>
 80077ca:	2301      	movs	r3, #1
 80077cc:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 80077d0:	684b      	ldr	r3, [r1, #4]
 80077d2:	4602      	mov	r2, r0
 80077d4:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR5,
 80077d6:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7)
 80077d8:	d924      	bls.n	8007824 <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13)
 80077da:	2b0c      	cmp	r3, #12
 80077dc:	d866      	bhi.n	80078ac <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SQR4,
 80077de:	f04f 0c1f 	mov.w	ip, #31
 80077e2:	680c      	ldr	r4, [r1, #0]
 80077e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80077e8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80077ea:	3b23      	subs	r3, #35	; 0x23
 80077ec:	fa04 fe03 	lsl.w	lr, r4, r3
 80077f0:	fa0c f303 	lsl.w	r3, ip, r3
 80077f4:	ea25 0303 	bic.w	r3, r5, r3
 80077f8:	ea43 030e 	orr.w	r3, r3, lr
 80077fc:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel < ADC_CHANNEL_10)
 80077fe:	2c09      	cmp	r4, #9
 8007800:	d822      	bhi.n	8007848 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR3,
 8007802:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8007806:	2407      	movs	r4, #7
 8007808:	6943      	ldr	r3, [r0, #20]
 800780a:	6889      	ldr	r1, [r1, #8]
 800780c:	40ac      	lsls	r4, r5
 800780e:	40a9      	lsls	r1, r5
 8007810:	ea23 0404 	bic.w	r4, r3, r4
 8007814:	430c      	orrs	r4, r1
 8007816:	6144      	str	r4, [r0, #20]
  __HAL_UNLOCK(hadc);
 8007818:	2300      	movs	r3, #0
  return tmp_hal_status;
 800781a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 800781c:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
}
 8007820:	b003      	add	sp, #12
 8007822:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR5,
 8007824:	f04f 0c1f 	mov.w	ip, #31
 8007828:	680c      	ldr	r4, [r1, #0]
 800782a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800782e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007830:	3b05      	subs	r3, #5
 8007832:	fa04 fe03 	lsl.w	lr, r4, r3
 8007836:	fa0c f303 	lsl.w	r3, ip, r3
 800783a:	ea25 0303 	bic.w	r3, r5, r3
 800783e:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel < ADC_CHANNEL_10)
 8007842:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SQR5,
 8007844:	6403      	str	r3, [r0, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 8007846:	d9dc      	bls.n	8007802 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8007848:	2c13      	cmp	r4, #19
 800784a:	d844      	bhi.n	80078d6 <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 800784c:	f04f 0c07 	mov.w	ip, #7
 8007850:	688d      	ldr	r5, [r1, #8]
 8007852:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8007856:	6903      	ldr	r3, [r0, #16]
 8007858:	391e      	subs	r1, #30
 800785a:	408d      	lsls	r5, r1
 800785c:	fa0c f101 	lsl.w	r1, ip, r1
 8007860:	ea23 0301 	bic.w	r3, r3, r1
 8007864:	432b      	orrs	r3, r5
 8007866:	6103      	str	r3, [r0, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007868:	f1a4 0310 	sub.w	r3, r4, #16
 800786c:	2b01      	cmp	r3, #1
 800786e:	d8d3      	bhi.n	8007818 <HAL_ADC_ConfigChannel+0x60>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8007870:	4b34      	ldr	r3, [pc, #208]	; (8007944 <HAL_ADC_ConfigChannel+0x18c>)
 8007872:	6859      	ldr	r1, [r3, #4]
 8007874:	0209      	lsls	r1, r1, #8
 8007876:	d4cf      	bmi.n	8007818 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8007878:	6859      	ldr	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800787a:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800787c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007880:	6059      	str	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007882:	d1c9      	bne.n	8007818 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007884:	4b30      	ldr	r3, [pc, #192]	; (8007948 <HAL_ADC_ConfigChannel+0x190>)
 8007886:	4931      	ldr	r1, [pc, #196]	; (800794c <HAL_ADC_ConfigChannel+0x194>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	fba1 1303 	umull	r1, r3, r1, r3
 800788e:	0c9b      	lsrs	r3, r3, #18
 8007890:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8007898:	9b01      	ldr	r3, [sp, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d0bc      	beq.n	8007818 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800789e:	9b01      	ldr	r3, [sp, #4]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80078a4:	9b01      	ldr	r3, [sp, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1f9      	bne.n	800789e <HAL_ADC_ConfigChannel+0xe6>
 80078aa:	e7b5      	b.n	8007818 <HAL_ADC_ConfigChannel+0x60>
  else if (sConfig->Rank < 19)
 80078ac:	2b12      	cmp	r3, #18
 80078ae:	d925      	bls.n	80078fc <HAL_ADC_ConfigChannel+0x144>
  else if (sConfig->Rank < 25)
 80078b0:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 80078b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 80078b6:	d835      	bhi.n	8007924 <HAL_ADC_ConfigChannel+0x16c>
    MODIFY_REG(hadc->Instance->SQR2,
 80078b8:	f04f 0c1f 	mov.w	ip, #31
 80078bc:	680c      	ldr	r4, [r1, #0]
 80078be:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80078c0:	3b5f      	subs	r3, #95	; 0x5f
 80078c2:	fa04 fe03 	lsl.w	lr, r4, r3
 80078c6:	fa0c f303 	lsl.w	r3, ip, r3
 80078ca:	ea25 0303 	bic.w	r3, r5, r3
 80078ce:	ea43 030e 	orr.w	r3, r3, lr
 80078d2:	6343      	str	r3, [r0, #52]	; 0x34
 80078d4:	e793      	b.n	80077fe <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80078d6:	2c1a      	cmp	r4, #26
 80078d8:	d80d      	bhi.n	80078f6 <HAL_ADC_ConfigChannel+0x13e>
    MODIFY_REG(hadc->Instance->SMPR1,
 80078da:	2507      	movs	r5, #7
 80078dc:	6889      	ldr	r1, [r1, #8]
 80078de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80078e2:	68c3      	ldr	r3, [r0, #12]
 80078e4:	3c3c      	subs	r4, #60	; 0x3c
 80078e6:	40a1      	lsls	r1, r4
 80078e8:	fa05 f404 	lsl.w	r4, r5, r4
 80078ec:	ea23 0304 	bic.w	r3, r3, r4
 80078f0:	430b      	orrs	r3, r1
 80078f2:	60c3      	str	r3, [r0, #12]
 80078f4:	e790      	b.n	8007818 <HAL_ADC_ConfigChannel+0x60>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80078f6:	bf00      	nop
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80078f8:	680c      	ldr	r4, [r1, #0]
 80078fa:	e7b5      	b.n	8007868 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR3,
 80078fc:	f04f 0c1f 	mov.w	ip, #31
 8007900:	680c      	ldr	r4, [r1, #0]
 8007902:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007906:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8007908:	3b41      	subs	r3, #65	; 0x41
 800790a:	fa04 fe03 	lsl.w	lr, r4, r3
 800790e:	fa0c f303 	lsl.w	r3, ip, r3
 8007912:	ea25 0303 	bic.w	r3, r5, r3
 8007916:	ea43 030e 	orr.w	r3, r3, lr
 800791a:	6383      	str	r3, [r0, #56]	; 0x38
 800791c:	e76f      	b.n	80077fe <HAL_ADC_ConfigChannel+0x46>
  __HAL_LOCK(hadc);
 800791e:	2002      	movs	r0, #2
}
 8007920:	b003      	add	sp, #12
 8007922:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR1,
 8007924:	f04f 0c1f 	mov.w	ip, #31
 8007928:	680c      	ldr	r4, [r1, #0]
 800792a:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800792c:	3b7d      	subs	r3, #125	; 0x7d
 800792e:	fa04 fe03 	lsl.w	lr, r4, r3
 8007932:	fa0c f303 	lsl.w	r3, ip, r3
 8007936:	ea25 0303 	bic.w	r3, r5, r3
 800793a:	ea43 030e 	orr.w	r3, r3, lr
 800793e:	6303      	str	r3, [r0, #48]	; 0x30
 8007940:	e75d      	b.n	80077fe <HAL_ADC_ConfigChannel+0x46>
 8007942:	bf00      	nop
 8007944:	40012700 	.word	0x40012700
 8007948:	20000014 	.word	0x20000014
 800794c:	431bde83 	.word	0x431bde83

08007950 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8007950:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007954:	680a      	ldr	r2, [r1, #0]
  __HAL_LOCK(hadc);
 8007956:	2b01      	cmp	r3, #1
 8007958:	d024      	beq.n	80079a4 <HAL_ADC_AnalogWDGConfig+0x54>
 800795a:	2301      	movs	r3, #1
{
 800795c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800795e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if(AnalogWDGConfig->ITMode == ENABLE)
 8007962:	7a0b      	ldrb	r3, [r1, #8]
 8007964:	4686      	mov	lr, r0
 8007966:	2b01      	cmp	r3, #1
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8007968:	6803      	ldr	r3, [r0, #0]
  if(AnalogWDGConfig->ITMode == ENABLE)
 800796a:	d016      	beq.n	800799a <HAL_ADC_AnalogWDGConfig+0x4a>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800796c:	685c      	ldr	r4, [r3, #4]
 800796e:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8007972:	605c      	str	r4, [r3, #4]
  __HAL_UNLOCK(hadc);
 8007974:	f04f 0c00 	mov.w	ip, #0
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8007978:	6858      	ldr	r0, [r3, #4]
 800797a:	4c0b      	ldr	r4, [pc, #44]	; (80079a8 <HAL_ADC_AnalogWDGConfig+0x58>)
 800797c:	4004      	ands	r4, r0
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 800797e:	6848      	ldr	r0, [r1, #4]
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8007980:	605c      	str	r4, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 8007982:	4302      	orrs	r2, r0
 8007984:	6858      	ldr	r0, [r3, #4]
 8007986:	4302      	orrs	r2, r0
 8007988:	605a      	str	r2, [r3, #4]
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800798a:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 800798e:	6298      	str	r0, [r3, #40]	; 0x28
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8007990:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_UNLOCK(hadc);
 8007992:	f88e c048 	strb.w	ip, [lr, #72]	; 0x48
  return HAL_OK;
 8007996:	4660      	mov	r0, ip
}
 8007998:	bd10      	pop	{r4, pc}
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800799a:	6858      	ldr	r0, [r3, #4]
 800799c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80079a0:	6058      	str	r0, [r3, #4]
 80079a2:	e7e7      	b.n	8007974 <HAL_ADC_AnalogWDGConfig+0x24>
  __HAL_LOCK(hadc);
 80079a4:	2002      	movs	r0, #2
}
 80079a6:	4770      	bx	lr
 80079a8:	ff3ffde0 	.word	0xff3ffde0

080079ac <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 80079ac:	2300      	movs	r3, #0
{
 80079ae:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80079b0:	6802      	ldr	r2, [r0, #0]
{
 80079b2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80079b4:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80079b6:	6813      	ldr	r3, [r2, #0]
 80079b8:	0659      	lsls	r1, r3, #25
 80079ba:	d429      	bmi.n	8007a10 <ADC_Enable+0x64>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80079bc:	4b1c      	ldr	r3, [pc, #112]	; (8007a30 <ADC_Enable+0x84>)
 80079be:	4604      	mov	r4, r0
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	481c      	ldr	r0, [pc, #112]	; (8007a34 <ADC_Enable+0x88>)
    __HAL_ADC_ENABLE(hadc);
 80079c4:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80079c6:	fba0 0303 	umull	r0, r3, r0, r3
 80079ca:	0c9b      	lsrs	r3, r3, #18
 80079cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 80079d0:	f041 0101 	orr.w	r1, r1, #1
 80079d4:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80079d6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80079d8:	9b01      	ldr	r3, [sp, #4]
 80079da:	b12b      	cbz	r3, 80079e8 <ADC_Enable+0x3c>
      wait_loop_index--;
 80079dc:	9b01      	ldr	r3, [sp, #4]
 80079de:	3b01      	subs	r3, #1
 80079e0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80079e2:	9b01      	ldr	r3, [sp, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1f9      	bne.n	80079dc <ADC_Enable+0x30>
    tickstart = HAL_GetTick();    
 80079e8:	f7ff fc94 	bl	8007314 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80079ec:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();    
 80079ee:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	065a      	lsls	r2, r3, #25
 80079f4:	d40c      	bmi.n	8007a10 <ADC_Enable+0x64>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80079f6:	f7ff fc8d 	bl	8007314 <HAL_GetTick>
 80079fa:	1b43      	subs	r3, r0, r5
 80079fc:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 80079fe:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8007a00:	d903      	bls.n	8007a0a <ADC_Enable+0x5e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8007a08:	d005      	beq.n	8007a16 <ADC_Enable+0x6a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	065b      	lsls	r3, r3, #25
 8007a0e:	d5f2      	bpl.n	80079f6 <ADC_Enable+0x4a>
  return HAL_OK;
 8007a10:	2000      	movs	r0, #0
}
 8007a12:	b003      	add	sp, #12
 8007a14:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8007a16:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 8007a1a:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a1e:	f043 0310 	orr.w	r3, r3, #16
 8007a22:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007a26:	4303      	orrs	r3, r0
 8007a28:	6523      	str	r3, [r4, #80]	; 0x50
}
 8007a2a:	b003      	add	sp, #12
 8007a2c:	bd30      	pop	{r4, r5, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000014 	.word	0x20000014
 8007a34:	431bde83 	.word	0x431bde83

08007a38 <HAL_ADC_Start_DMA>:
{
 8007a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8007a3c:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 8007a40:	2d01      	cmp	r5, #1
 8007a42:	d04c      	beq.n	8007ade <HAL_ADC_Start_DMA+0xa6>
 8007a44:	2301      	movs	r3, #1
 8007a46:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4688      	mov	r8, r1
 8007a4e:	4617      	mov	r7, r2
 8007a50:	f7ff ffac 	bl	80079ac <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8007a54:	4605      	mov	r5, r0
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d13e      	bne.n	8007ad8 <HAL_ADC_Start_DMA+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 8007a5a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007a5c:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8007a5e:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8007a62:	f020 0001 	bic.w	r0, r0, #1
 8007a66:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8007a6a:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007a6c:	6873      	ldr	r3, [r6, #4]
 8007a6e:	055b      	lsls	r3, r3, #21
 8007a70:	d505      	bpl.n	8007a7e <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007a72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007a74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007a78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a7c:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 8007a7e:	2100      	movs	r1, #0
 8007a80:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007a84:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007a88:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007a8a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007a8c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007a90:	bf18      	it	ne
 8007a92:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007a94:	4642      	mov	r2, r8
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007a96:	bf18      	it	ne
 8007a98:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8007a9c:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007a9e:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007aa0:	4f11      	ldr	r7, [pc, #68]	; (8007ae8 <HAL_ADC_Start_DMA+0xb0>)
 8007aa2:	6287      	str	r7, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007aa4:	4f11      	ldr	r7, [pc, #68]	; (8007aec <HAL_ADC_Start_DMA+0xb4>)
 8007aa6:	62c7      	str	r7, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007aa8:	4f11      	ldr	r7, [pc, #68]	; (8007af0 <HAL_ADC_Start_DMA+0xb8>)
 8007aaa:	6307      	str	r7, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007aac:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007aae:	6871      	ldr	r1, [r6, #4]
 8007ab0:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8007ab4:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007ab6:	68b1      	ldr	r1, [r6, #8]
 8007ab8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007abc:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007abe:	f106 0158 	add.w	r1, r6, #88	; 0x58
 8007ac2:	f000 f98f 	bl	8007de4 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8007ace:	d103      	bne.n	8007ad8 <HAL_ADC_Start_DMA+0xa0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8007ad0:	689a      	ldr	r2, [r3, #8]
 8007ad2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007ad6:	609a      	str	r2, [r3, #8]
}
 8007ad8:	4628      	mov	r0, r5
 8007ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 8007ade:	2502      	movs	r5, #2
}
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ae6:	bf00      	nop
 8007ae8:	08007601 	.word	0x08007601
 8007aec:	08007661 	.word	0x08007661
 8007af0:	08007671 	.word	0x08007671

08007af4 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop

08007af8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007af8:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007afc:	4906      	ldr	r1, [pc, #24]	; (8007b18 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007afe:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b00:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007b02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b06:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007b14:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007b16:	4770      	bx	lr
 8007b18:	e000ed00 	.word	0xe000ed00

08007b1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b1c:	4b1c      	ldr	r3, [pc, #112]	; (8007b90 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b1e:	b500      	push	{lr}
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b26:	f1c3 0e07 	rsb	lr, r3, #7
 8007b2a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b2e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b32:	bf28      	it	cs
 8007b34:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b38:	f1bc 0f06 	cmp.w	ip, #6
 8007b3c:	d91b      	bls.n	8007b76 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b3e:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b42:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b44:	fa0c fc03 	lsl.w	ip, ip, r3
 8007b48:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8007b50:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007b54:	ea21 010c 	bic.w	r1, r1, ip
 8007b58:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8007b5a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b5c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8007b60:	db0c      	blt.n	8007b7c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b62:	0109      	lsls	r1, r1, #4
 8007b64:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8007b68:	b2c9      	uxtb	r1, r1
 8007b6a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8007b6e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007b72:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b76:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b78:	4613      	mov	r3, r2
 8007b7a:	e7e7      	b.n	8007b4c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b7c:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <HAL_NVIC_SetPriority+0x78>)
 8007b7e:	f000 000f 	and.w	r0, r0, #15
 8007b82:	0109      	lsls	r1, r1, #4
 8007b84:	b2c9      	uxtb	r1, r1
 8007b86:	4403      	add	r3, r0
 8007b88:	7619      	strb	r1, [r3, #24]
 8007b8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b8e:	bf00      	nop
 8007b90:	e000ed00 	.word	0xe000ed00
 8007b94:	e000ecfc 	.word	0xe000ecfc

08007b98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	db07      	blt.n	8007bac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f000 011f 	and.w	r1, r0, #31
 8007ba2:	4a03      	ldr	r2, [pc, #12]	; (8007bb0 <HAL_NVIC_EnableIRQ+0x18>)
 8007ba4:	0940      	lsrs	r0, r0, #5
 8007ba6:	408b      	lsls	r3, r1
 8007ba8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	e000e100 	.word	0xe000e100

08007bb4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	db0d      	blt.n	8007bd4 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bb8:	2201      	movs	r2, #1
 8007bba:	4907      	ldr	r1, [pc, #28]	; (8007bd8 <HAL_NVIC_DisableIRQ+0x24>)
 8007bbc:	0943      	lsrs	r3, r0, #5
 8007bbe:	f000 001f 	and.w	r0, r0, #31
 8007bc2:	3320      	adds	r3, #32
 8007bc4:	fa02 f000 	lsl.w	r0, r2, r0
 8007bc8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007bcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007bd0:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	e000e100 	.word	0xe000e100

08007bdc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007bdc:	3801      	subs	r0, #1
 8007bde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007be2:	d20f      	bcs.n	8007c04 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007be4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007be8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007bec:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007bee:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007bf0:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bf2:	4c05      	ldr	r4, [pc, #20]	; (8007c08 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007bf4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bf6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007bfa:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007bfc:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8007bfe:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c00:	6119      	str	r1, [r3, #16]
 8007c02:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007c04:	2001      	movs	r0, #1
 8007c06:	4770      	bx	lr
 8007c08:	e000ed00 	.word	0xe000ed00

08007c0c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8007c0c:	b188      	cbz	r0, 8007c32 <HAL_DAC_Init+0x26>
{
 8007c0e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007c10:	7903      	ldrb	r3, [r0, #4]
 8007c12:	4604      	mov	r4, r0
 8007c14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007c18:	b13b      	cbz	r3, 8007c2a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007c1a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8007c1c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007c1e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8007c20:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007c22:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8007c24:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8007c26:	4618      	mov	r0, r3
}
 8007c28:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8007c2a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8007c2c:	f7ff f8b8 	bl	8006da0 <HAL_DAC_MspInit>
 8007c30:	e7f3      	b.n	8007c1a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8007c32:	2001      	movs	r0, #1
}
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop

08007c38 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007c38:	7942      	ldrb	r2, [r0, #5]
 8007c3a:	2a01      	cmp	r2, #1
 8007c3c:	d02a      	beq.n	8007c94 <HAL_DAC_Start+0x5c>
{
 8007c3e:	b410      	push	{r4}
 8007c40:	4603      	mov	r3, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007c42:	2402      	movs	r4, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007c44:	2201      	movs	r2, #1
 8007c46:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8007c48:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8007c4a:	6804      	ldr	r4, [r0, #0]
 8007c4c:	f001 0c10 	and.w	ip, r1, #16
 8007c50:	fa02 f20c 	lsl.w	r2, r2, ip
 8007c54:	4322      	orrs	r2, r4
 8007c56:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 8007c58:	b979      	cbnz	r1, 8007c7a <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007c5a:	6802      	ldr	r2, [r0, #0]
 8007c5c:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8007c60:	2a3c      	cmp	r2, #60	; 0x3c
 8007c62:	d103      	bne.n	8007c6c <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007c64:	6842      	ldr	r2, [r0, #4]
 8007c66:	f042 0201 	orr.w	r2, r2, #1
 8007c6a:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007c6c:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8007c6e:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8007c70:	715a      	strb	r2, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8007c72:	7119      	strb	r1, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007c74:	4610      	mov	r0, r2
}
 8007c76:	bc10      	pop	{r4}
 8007c78:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007c7a:	223c      	movs	r2, #60	; 0x3c
 8007c7c:	6801      	ldr	r1, [r0, #0]
 8007c7e:	fa02 fc0c 	lsl.w	ip, r2, ip
 8007c82:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8007c86:	4561      	cmp	r1, ip
 8007c88:	d1f0      	bne.n	8007c6c <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007c8a:	6842      	ldr	r2, [r0, #4]
 8007c8c:	f042 0202 	orr.w	r2, r2, #2
 8007c90:	6042      	str	r2, [r0, #4]
 8007c92:	e7eb      	b.n	8007c6c <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 8007c94:	2002      	movs	r0, #2
}
 8007c96:	4770      	bx	lr

08007c98 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007c98:	b410      	push	{r4}
  __IO uint32_t tmp = 0UL;
 8007c9a:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007c9c:	6800      	ldr	r0, [r0, #0]
{
 8007c9e:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8007ca0:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8007ca2:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8007ca4:	b949      	cbnz	r1, 8007cba <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007ca6:	9901      	ldr	r1, [sp, #4]
 8007ca8:	3108      	adds	r1, #8
 8007caa:	440a      	add	r2, r1
 8007cac:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
}
 8007cae:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8007cb0:	9a01      	ldr	r2, [sp, #4]
 8007cb2:	6013      	str	r3, [r2, #0]
}
 8007cb4:	b003      	add	sp, #12
 8007cb6:	bc10      	pop	{r4}
 8007cb8:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007cba:	9901      	ldr	r1, [sp, #4]
 8007cbc:	3114      	adds	r1, #20
 8007cbe:	440a      	add	r2, r1
 8007cc0:	9201      	str	r2, [sp, #4]
 8007cc2:	e7f4      	b.n	8007cae <HAL_DAC_SetValue+0x16>

08007cc4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007cc4:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007cc6:	7940      	ldrb	r0, [r0, #5]
 8007cc8:	2801      	cmp	r0, #1
 8007cca:	d022      	beq.n	8007d12 <HAL_DAC_ConfigChannel+0x4e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007ccc:	2002      	movs	r0, #2
{
 8007cce:	b570      	push	{r4, r5, r6, lr}
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007cd0:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007cd4:	f640 76fe 	movw	r6, #4094	; 0xffe

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007cd8:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 8007cdc:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8007cde:	7118      	strb	r0, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8007ce0:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007ce2:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007ce6:	f002 0210 	and.w	r2, r2, #16
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007cea:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007cec:	4096      	lsls	r6, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007cee:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007cf2:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 = hdac->Instance->CR;
 8007cf6:	6821      	ldr	r1, [r4, #0]

  /* Return function status */
  return HAL_OK;
 8007cf8:	4670      	mov	r0, lr
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007cfa:	ea21 0106 	bic.w	r1, r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007cfe:	430a      	orrs	r2, r1
  hdac->Instance->CR = tmpreg1;
 8007d00:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007d02:	6822      	ldr	r2, [r4, #0]
 8007d04:	ea22 020c 	bic.w	r2, r2, ip
 8007d08:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8007d0a:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8007d0c:	f883 e005 	strb.w	lr, [r3, #5]
}
 8007d10:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 8007d12:	2002      	movs	r0, #2
}
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop

08007d18 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007d18:	b370      	cbz	r0, 8007d78 <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007d1a:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d1c:	2202      	movs	r2, #2
{
 8007d1e:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007d20:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d24:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007d26:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8007d2c:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d2e:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8007d30:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
  tmp |=  hdma->Init.Direction        |
 8007d34:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8007d38:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007d3a:	4910      	ldr	r1, [pc, #64]	; (8007d7c <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d3c:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007d3e:	4d10      	ldr	r5, [pc, #64]	; (8007d80 <HAL_DMA_Init+0x68>)
 8007d40:	4401      	add	r1, r0
 8007d42:	fba5 5101 	umull	r5, r1, r5, r1
 8007d46:	0909      	lsrs	r1, r1, #4
 8007d48:	0089      	lsls	r1, r1, #2
 8007d4a:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d4c:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8007d4e:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d52:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d54:	6959      	ldr	r1, [r3, #20]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	6999      	ldr	r1, [r3, #24]
 8007d5a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d5c:	69d9      	ldr	r1, [r3, #28]
 8007d5e:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8007d60:	4908      	ldr	r1, [pc, #32]	; (8007d84 <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 8007d62:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 8007d66:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8007d68:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d6a:	639c      	str	r4, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007d6c:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8007d70:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 8007d74:	4620      	mov	r0, r4
}
 8007d76:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007d78:	2001      	movs	r0, #1
}
 8007d7a:	4770      	bx	lr
 8007d7c:	bffd9ff8 	.word	0xbffd9ff8
 8007d80:	cccccccd 	.word	0xcccccccd
 8007d84:	40026000 	.word	0x40026000

08007d88 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8007d88:	b320      	cbz	r0, 8007dd4 <HAL_DMA_DeInit+0x4c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8007d8a:	4603      	mov	r3, r0

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d8c:	2101      	movs	r1, #1
{
 8007d8e:	b430      	push	{r4, r5}
  hdma->Instance->CCR = 0U;
 8007d90:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8007d92:	6805      	ldr	r5, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007d94:	4810      	ldr	r0, [pc, #64]	; (8007dd8 <HAL_DMA_DeInit+0x50>)
  __HAL_DMA_DISABLE(hdma);
 8007d96:	682a      	ldr	r2, [r5, #0]
 8007d98:	f022 0201 	bic.w	r2, r2, #1
 8007d9c:	602a      	str	r2, [r5, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007d9e:	4a0f      	ldr	r2, [pc, #60]	; (8007ddc <HAL_DMA_DeInit+0x54>)
 8007da0:	442a      	add	r2, r5
 8007da2:	fba0 0202 	umull	r0, r2, r0, r2
 8007da6:	0912      	lsrs	r2, r2, #4
 8007da8:	0092      	lsls	r2, r2, #2
 8007daa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007dac:	f002 021c 	and.w	r2, r2, #28
 8007db0:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8007db4:	490a      	ldr	r1, [pc, #40]	; (8007de0 <HAL_DMA_DeInit+0x58>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8007db6:	4620      	mov	r0, r4
  hdma->DmaBaseAddress = DMA1;
 8007db8:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = 0U;
 8007dba:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007dbc:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007dbe:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdma);
 8007dc0:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 8007dc4:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 8007dc8:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8007dcc:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
}
 8007dd0:	bc30      	pop	{r4, r5}
 8007dd2:	4770      	bx	lr
    return HAL_ERROR;
 8007dd4:	2001      	movs	r0, #1
}
 8007dd6:	4770      	bx	lr
 8007dd8:	cccccccd 	.word	0xcccccccd
 8007ddc:	bffd9ff8 	.word	0xbffd9ff8
 8007de0:	40026000 	.word	0x40026000

08007de4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007de4:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007de6:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007dea:	2801      	cmp	r0, #1
 8007dec:	d042      	beq.n	8007e74 <HAL_DMA_Start_IT+0x90>
{
 8007dee:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8007df0:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8007df2:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8007df6:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8007dfa:	42a0      	cmp	r0, r4
 8007dfc:	fa5f fe80 	uxtb.w	lr, r0
 8007e00:	d004      	beq.n	8007e0c <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e02:	2300      	movs	r3, #0
 8007e04:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007e08:	2002      	movs	r0, #2
  }
  return status;
}
 8007e0a:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e0c:	2002      	movs	r0, #2
 8007e0e:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e12:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8007e14:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e18:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8007e1c:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e1e:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8007e22:	f025 0501 	bic.w	r5, r5, #1
 8007e26:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e28:	f000 001c 	and.w	r0, r0, #28
 8007e2c:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8007e30:	fa0e f000 	lsl.w	r0, lr, r0
 8007e34:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007e36:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e38:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007e3c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8007e3e:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007e42:	bf0b      	itete	eq
 8007e44:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8007e46:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007e48:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007e4a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8007e4c:	b14b      	cbz	r3, 8007e62 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	f043 030e 	orr.w	r3, r3, #14
 8007e54:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8007e56:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e58:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	6023      	str	r3, [r4, #0]
}
 8007e60:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	f023 0304 	bic.w	r3, r3, #4
 8007e68:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	f043 030a 	orr.w	r3, r3, #10
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	e7f0      	b.n	8007e56 <HAL_DMA_Start_IT+0x72>
  __HAL_LOCK(hdma);
 8007e74:	2002      	movs	r0, #2
}
 8007e76:	4770      	bx	lr

08007e78 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e78:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8007e7c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e7e:	2a02      	cmp	r2, #2
 8007e80:	d006      	beq.n	8007e90 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e82:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8007e84:	2200      	movs	r2, #0
    return HAL_ERROR;
 8007e86:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e88:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8007e8a:	f883 2020 	strb.w	r2, [r3, #32]
}
 8007e8e:	4770      	bx	lr
{
 8007e90:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e92:	f04f 0e01 	mov.w	lr, #1
    __HAL_UNLOCK(hdma);
 8007e96:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e9a:	6802      	ldr	r2, [r0, #0]
 8007e9c:	6811      	ldr	r1, [r2, #0]
 8007e9e:	f021 010e 	bic.w	r1, r1, #14
 8007ea2:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007ea4:	6811      	ldr	r1, [r2, #0]
 8007ea6:	f021 0101 	bic.w	r1, r1, #1
 8007eaa:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007eac:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8007eb0:	f002 021c 	and.w	r2, r2, #28
 8007eb4:	fa0e f202 	lsl.w	r2, lr, r2
 8007eb8:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007eba:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8007ebe:	f883 c020 	strb.w	ip, [r3, #32]
    return status;
 8007ec2:	4660      	mov	r0, ip
}
 8007ec4:	f85d fb04 	ldr.w	pc, [sp], #4

08007ec8 <HAL_DMA_Abort_IT>:
{
 8007ec8:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007eca:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8007ece:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007ed0:	2a02      	cmp	r2, #2
 8007ed2:	d003      	beq.n	8007edc <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ed4:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8007ed6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ed8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007edc:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007ede:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ee2:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007ee4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ee6:	f024 040e 	bic.w	r4, r4, #14
 8007eea:	600c      	str	r4, [r1, #0]
    __HAL_UNLOCK(hdma);
 8007eec:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8007eee:	680d      	ldr	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007ef0:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 8007ef4:	f025 0501 	bic.w	r5, r5, #1
 8007ef8:	600d      	str	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007efa:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8007efc:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007efe:	fa0c f202 	lsl.w	r2, ip, r2
 8007f02:	606a      	str	r2, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007f04:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8007f08:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8007f0c:	b111      	cbz	r1, 8007f14 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8007f0e:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8007f10:	4620      	mov	r0, r4
}
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8007f14:	4608      	mov	r0, r1
}
 8007f16:	bd38      	pop	{r3, r4, r5, pc}

08007f18 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007f18:	2204      	movs	r2, #4
{
 8007f1a:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007f1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007f1e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007f20:	f003 031c 	and.w	r3, r3, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007f24:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8007f26:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007f28:	409a      	lsls	r2, r3
 8007f2a:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8007f2c:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007f2e:	d00e      	beq.n	8007f4e <HAL_DMA_IRQHandler+0x36>
 8007f30:	f014 0f04 	tst.w	r4, #4
 8007f34:	d00b      	beq.n	8007f4e <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f36:	682b      	ldr	r3, [r5, #0]
 8007f38:	069b      	lsls	r3, r3, #26
 8007f3a:	d403      	bmi.n	8007f44 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	f023 0304 	bic.w	r3, r3, #4
 8007f42:	602b      	str	r3, [r5, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8007f44:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007f46:	6072      	str	r2, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8007f48:	b1cb      	cbz	r3, 8007f7e <HAL_DMA_IRQHandler+0x66>
}
 8007f4a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8007f4c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007f4e:	2202      	movs	r2, #2
 8007f50:	409a      	lsls	r2, r3
 8007f52:	420a      	tst	r2, r1
 8007f54:	d015      	beq.n	8007f82 <HAL_DMA_IRQHandler+0x6a>
 8007f56:	f014 0f02 	tst.w	r4, #2
 8007f5a:	d012      	beq.n	8007f82 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	0699      	lsls	r1, r3, #26
 8007f60:	d406      	bmi.n	8007f70 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f62:	682b      	ldr	r3, [r5, #0]
 8007f64:	f023 030a 	bic.w	r3, r3, #10
 8007f68:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8007f70:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 8007f72:	6a83      	ldr	r3, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007f74:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8007f76:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e5      	bne.n	8007f4a <HAL_DMA_IRQHandler+0x32>
}
 8007f7e:	bc70      	pop	{r4, r5, r6}
 8007f80:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007f82:	2208      	movs	r2, #8
 8007f84:	409a      	lsls	r2, r3
 8007f86:	420a      	tst	r2, r1
 8007f88:	d0f9      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x66>
 8007f8a:	0722      	lsls	r2, r4, #28
 8007f8c:	d5f7      	bpl.n	8007f7e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f8e:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 8007f90:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f92:	f022 020e 	bic.w	r2, r2, #14
 8007f96:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007f98:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8007f9a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa0:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007fa2:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8007fa4:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 8007fa8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 8007fac:	2900      	cmp	r1, #0
 8007fae:	d0e6      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x66>
}
 8007fb0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8007fb2:	4708      	bx	r1

08007fb4 <HAL_EXTI_SetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d041      	beq.n	800803c <HAL_EXTI_SetConfigLine+0x88>
 8007fb8:	2900      	cmp	r1, #0
 8007fba:	d03f      	beq.n	800803c <HAL_EXTI_SetConfigLine+0x88>
  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
  maskline = (1uL << linepos);
 8007fbc:	f04f 0c01 	mov.w	ip, #1
  hexti->Line = pExtiConfig->Line;
 8007fc0:	680b      	ldr	r3, [r1, #0]
{
 8007fc2:	b430      	push	{r4, r5}
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8007fc4:	f003 021f 	and.w	r2, r3, #31
  hexti->Line = pExtiConfig->Line;
 8007fc8:	6003      	str	r3, [r0, #0]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8007fca:	0198      	lsls	r0, r3, #6
  maskline = (1uL << linepos);
 8007fcc:	fa0c fc02 	lsl.w	ip, ip, r2
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8007fd0:	d519      	bpl.n	8008006 <HAL_EXTI_SetConfigLine+0x52>

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
    {
      EXTI->RTSR |= maskline;
 8007fd2:	4d25      	ldr	r5, [pc, #148]	; (8008068 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8007fd4:	6888      	ldr	r0, [r1, #8]
      EXTI->RTSR |= maskline;
 8007fd6:	68ac      	ldr	r4, [r5, #8]
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8007fd8:	f010 0f01 	tst.w	r0, #1
      EXTI->RTSR |= maskline;
 8007fdc:	bf14      	ite	ne
 8007fde:	ea44 040c 	orrne.w	r4, r4, ip
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8007fe2:	ea24 040c 	biceq.w	r4, r4, ip
 8007fe6:	60ac      	str	r4, [r5, #8]

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
    {
      EXTI->FTSR |= maskline;
 8007fe8:	4c1f      	ldr	r4, [pc, #124]	; (8008068 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8007fea:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR |= maskline;
 8007fee:	68e0      	ldr	r0, [r4, #12]
 8007ff0:	bf14      	ite	ne
 8007ff2:	ea40 000c 	orrne.w	r0, r0, ip
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8007ff6:	ea20 000c 	biceq.w	r0, r0, ip
 8007ffa:	60e0      	str	r0, [r4, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8007ffc:	f003 60c0 	and.w	r0, r3, #100663296	; 0x6000000
 8008000:	f1b0 6fc0 	cmp.w	r0, #100663296	; 0x6000000
 8008004:	d01c      	beq.n	8008040 <HAL_EXTI_SetConfigLine+0x8c>

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
  {
    EXTI->IMR |= maskline;
 8008006:	4a18      	ldr	r2, [pc, #96]	; (8008068 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8008008:	6848      	ldr	r0, [r1, #4]
    EXTI->IMR |= maskline;
 800800a:	6813      	ldr	r3, [r2, #0]
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 800800c:	07c1      	lsls	r1, r0, #31
    EXTI->IMR |= maskline;
 800800e:	bf4c      	ite	mi
 8008010:	ea43 030c 	orrmi.w	r3, r3, ip
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8008014:	ea23 030c 	bicpl.w	r3, r3, ip
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8008018:	f010 0002 	ands.w	r0, r0, #2
    EXTI->IMR &= ~maskline;
 800801c:	6013      	str	r3, [r2, #0]
  {
    EXTI->EMR |= maskline;
 800801e:	4a12      	ldr	r2, [pc, #72]	; (8008068 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8008020:	d105      	bne.n	800802e <HAL_EXTI_SetConfigLine+0x7a>
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
}
 8008022:	bc30      	pop	{r4, r5}
    EXTI->EMR &= ~maskline;
 8008024:	6853      	ldr	r3, [r2, #4]
 8008026:	ea23 030c 	bic.w	r3, r3, ip
 800802a:	6053      	str	r3, [r2, #4]
}
 800802c:	4770      	bx	lr
    EXTI->EMR |= maskline;
 800802e:	6853      	ldr	r3, [r2, #4]
  return HAL_OK;
 8008030:	2000      	movs	r0, #0
}
 8008032:	bc30      	pop	{r4, r5}
    EXTI->EMR |= maskline;
 8008034:	ea43 030c 	orr.w	r3, r3, ip
 8008038:	6053      	str	r3, [r2, #4]
}
 800803a:	4770      	bx	lr
    return HAL_ERROR;
 800803c:	2001      	movs	r0, #1
}
 800803e:	4770      	bx	lr
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008040:	250f      	movs	r5, #15
 8008042:	f002 021c 	and.w	r2, r2, #28
 8008046:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800804a:	68c8      	ldr	r0, [r1, #12]
 800804c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008050:	f003 0303 	and.w	r3, r3, #3
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8008054:	6894      	ldr	r4, [r2, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008056:	009b      	lsls	r3, r3, #2
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008058:	4098      	lsls	r0, r3
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800805a:	fa05 f303 	lsl.w	r3, r5, r3
 800805e:	ea24 0303 	bic.w	r3, r4, r3
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008062:	4318      	orrs	r0, r3
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8008064:	6090      	str	r0, [r2, #8]
 8008066:	e7ce      	b.n	8008006 <HAL_EXTI_SetConfigLine+0x52>
 8008068:	40010400 	.word	0x40010400

0800806c <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800806c:	2301      	movs	r3, #1
 800806e:	6802      	ldr	r2, [r0, #0]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8008070:	4902      	ldr	r1, [pc, #8]	; (800807c <HAL_EXTI_GenerateSWI+0x10>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008072:	f002 021f 	and.w	r2, r2, #31
 8008076:	4093      	lsls	r3, r2
  EXTI->SWIER = maskline;
 8008078:	610b      	str	r3, [r1, #16]
}
 800807a:	4770      	bx	lr
 800807c:	40010400 	.word	0x40010400

08008080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8008084:	680c      	ldr	r4, [r1, #0]
{
 8008086:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8008088:	2c00      	cmp	r4, #0
 800808a:	d07c      	beq.n	8008186 <HAL_GPIO_Init+0x106>
 800808c:	f04f 0e00 	mov.w	lr, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008090:	f04f 0b01 	mov.w	fp, #1
  uint32_t position = 0x00;
 8008094:	4673      	mov	r3, lr
 8008096:	468c      	mov	ip, r1
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008098:	fa0b f503 	lsl.w	r5, fp, r3

    if (iocurrent)
 800809c:	ea15 0a04 	ands.w	sl, r5, r4
 80080a0:	d06b      	beq.n	800817a <HAL_GPIO_Init+0xfa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80080a2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80080a6:	f001 0203 	and.w	r2, r1, #3
 80080aa:	1e57      	subs	r7, r2, #1
 80080ac:	2f01      	cmp	r7, #1
 80080ae:	d96d      	bls.n	800818c <HAL_GPIO_Init+0x10c>
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080b0:	2a03      	cmp	r2, #3
 80080b2:	f040 80ae 	bne.w	8008212 <HAL_GPIO_Init+0x192>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80080b6:	fa02 f20e 	lsl.w	r2, r2, lr
 80080ba:	43d7      	mvns	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080bc:	6805      	ldr	r5, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80080be:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80080c2:	ea07 0705 	and.w	r7, r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80080c6:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 80080ca:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80080cc:	d055      	beq.n	800817a <HAL_GPIO_Init+0xfa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80080ce:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080d0:	4d5a      	ldr	r5, [pc, #360]	; (800823c <HAL_GPIO_Init+0x1bc>)
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80080d2:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080d6:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80080d8:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080da:	f042 0201 	orr.w	r2, r2, #1
 80080de:	622a      	str	r2, [r5, #32]
 80080e0:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80080e2:	fa06 f807 	lsl.w	r8, r6, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080e6:	f002 0201 	and.w	r2, r2, #1
 80080ea:	9203      	str	r2, [sp, #12]
 80080ec:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80080ee:	f023 0203 	bic.w	r2, r3, #3
 80080f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80080f6:	4e52      	ldr	r6, [pc, #328]	; (8008240 <HAL_GPIO_Init+0x1c0>)
 80080f8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2];
 80080fc:	6895      	ldr	r5, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80080fe:	42b0      	cmp	r0, r6
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008100:	ea25 0508 	bic.w	r5, r5, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008104:	d015      	beq.n	8008132 <HAL_GPIO_Init+0xb2>
 8008106:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800810a:	42b0      	cmp	r0, r6
 800810c:	f000 808c 	beq.w	8008228 <HAL_GPIO_Init+0x1a8>
 8008110:	4e4c      	ldr	r6, [pc, #304]	; (8008244 <HAL_GPIO_Init+0x1c4>)
 8008112:	42b0      	cmp	r0, r6
 8008114:	f000 808c 	beq.w	8008230 <HAL_GPIO_Init+0x1b0>
 8008118:	4e4b      	ldr	r6, [pc, #300]	; (8008248 <HAL_GPIO_Init+0x1c8>)
 800811a:	42b0      	cmp	r0, r6
 800811c:	d07e      	beq.n	800821c <HAL_GPIO_Init+0x19c>
 800811e:	4e4b      	ldr	r6, [pc, #300]	; (800824c <HAL_GPIO_Init+0x1cc>)
 8008120:	42b0      	cmp	r0, r6
 8008122:	bf0c      	ite	eq
 8008124:	f04f 0804 	moveq.w	r8, #4
 8008128:	f04f 0805 	movne.w	r8, #5
 800812c:	fa08 f707 	lsl.w	r7, r8, r7
 8008130:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008132:	ea6f 070a 	mvn.w	r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8008136:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8008138:	4a45      	ldr	r2, [pc, #276]	; (8008250 <HAL_GPIO_Init+0x1d0>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800813a:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 800813c:	6812      	ldr	r2, [r2, #0]
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->IMR = temp;
 800813e:	4d44      	ldr	r5, [pc, #272]	; (8008250 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008140:	bf54      	ite	pl
 8008142:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8008144:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 8008148:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 800814a:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800814c:	038a      	lsls	r2, r1, #14
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->EMR = temp;
 800814e:	4a40      	ldr	r2, [pc, #256]	; (8008250 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008150:	bf54      	ite	pl
 8008152:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8008154:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR = temp;
 8008158:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800815a:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800815c:	02ce      	lsls	r6, r1, #11
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->RTSR = temp;
 800815e:	4a3c      	ldr	r2, [pc, #240]	; (8008250 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008160:	bf54      	ite	pl
 8008162:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8008164:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR = temp;
 8008168:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800816a:	68d2      	ldr	r2, [r2, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800816c:	0289      	lsls	r1, r1, #10
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->FTSR = temp;
 800816e:	4938      	ldr	r1, [pc, #224]	; (8008250 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008170:	bf54      	ite	pl
 8008172:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8008174:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 8008178:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 800817a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 800817c:	fa34 f203 	lsrs.w	r2, r4, r3
 8008180:	f10e 0e02 	add.w	lr, lr, #2
 8008184:	d188      	bne.n	8008098 <HAL_GPIO_Init+0x18>
  }
}
 8008186:	b005      	add	sp, #20
 8008188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800818c:	f04f 0903 	mov.w	r9, #3
        temp = GPIOx->OSPEEDR;
 8008190:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8008192:	f8dc 700c 	ldr.w	r7, [ip, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008196:	fa09 f90e 	lsl.w	r9, r9, lr
 800819a:	ea26 0609 	bic.w	r6, r6, r9
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800819e:	fa07 f70e 	lsl.w	r7, r7, lr
 80081a2:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 80081a4:	6087      	str	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80081a6:	ea6f 0709 	mvn.w	r7, r9
        temp = GPIOx->OTYPER;
 80081aa:	f8d0 9004 	ldr.w	r9, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081ae:	f3c1 1800 	ubfx	r8, r1, #4, #1
 80081b2:	fa08 f803 	lsl.w	r8, r8, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80081b6:	ea29 0505 	bic.w	r5, r9, r5
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081ba:	ea48 0505 	orr.w	r5, r8, r5
        GPIOx->OTYPER = temp;
 80081be:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 80081c0:	68c5      	ldr	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081c2:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80081c4:	ea05 0807 	and.w	r8, r5, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80081c8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80081cc:	fa02 f20e 	lsl.w	r2, r2, lr
 80081d0:	fa05 f50e 	lsl.w	r5, r5, lr
 80081d4:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->PUPDR = temp;
 80081d8:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081da:	f47f af6f 	bne.w	80080bc <HAL_GPIO_Init+0x3c>
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80081de:	f8dc 5010 	ldr.w	r5, [ip, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80081e2:	f003 0807 	and.w	r8, r3, #7
 80081e6:	ea4f 0888 	mov.w	r8, r8, lsl #2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80081ea:	fa05 f508 	lsl.w	r5, r5, r8
 80081ee:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80081f0:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3];
 80081f2:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80081f6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 80081fa:	f8d9 6020 	ldr.w	r6, [r9, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80081fe:	fa05 f808 	lsl.w	r8, r5, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008202:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008204:	ea26 0808 	bic.w	r8, r6, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008208:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->AFR[position >> 3] = temp;
 800820c:	f8c9 5020 	str.w	r5, [r9, #32]
 8008210:	e754      	b.n	80080bc <HAL_GPIO_Init+0x3c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008212:	2703      	movs	r7, #3
 8008214:	fa07 f70e 	lsl.w	r7, r7, lr
 8008218:	43ff      	mvns	r7, r7
 800821a:	e7d1      	b.n	80081c0 <HAL_GPIO_Init+0x140>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800821c:	f04f 0803 	mov.w	r8, #3
 8008220:	fa08 f707 	lsl.w	r7, r8, r7
 8008224:	433d      	orrs	r5, r7
 8008226:	e784      	b.n	8008132 <HAL_GPIO_Init+0xb2>
 8008228:	fa0b f707 	lsl.w	r7, fp, r7
 800822c:	433d      	orrs	r5, r7
 800822e:	e780      	b.n	8008132 <HAL_GPIO_Init+0xb2>
 8008230:	f04f 0802 	mov.w	r8, #2
 8008234:	fa08 f707 	lsl.w	r7, r8, r7
 8008238:	433d      	orrs	r5, r7
 800823a:	e77a      	b.n	8008132 <HAL_GPIO_Init+0xb2>
 800823c:	40023800 	.word	0x40023800
 8008240:	40020000 	.word	0x40020000
 8008244:	40020800 	.word	0x40020800
 8008248:	40020c00 	.word	0x40020c00
 800824c:	40021000 	.word	0x40021000
 8008250:	40010400 	.word	0x40010400

08008254 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8008254:	2900      	cmp	r1, #0
 8008256:	f000 8083 	beq.w	8008360 <HAL_GPIO_DeInit+0x10c>
{
 800825a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 800825e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8008260:	2701      	movs	r7, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8008262:	f04f 090f 	mov.w	r9, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008266:	f04f 0a03 	mov.w	sl, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800826a:	4e3e      	ldr	r6, [pc, #248]	; (8008364 <HAL_GPIO_DeInit+0x110>)
 800826c:	e051      	b.n	8008312 <HAL_GPIO_DeInit+0xbe>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800826e:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8008272:	4558      	cmp	r0, fp
 8008274:	d069      	beq.n	800834a <HAL_GPIO_DeInit+0xf6>
 8008276:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8008368 <HAL_GPIO_DeInit+0x114>
 800827a:	4558      	cmp	r0, fp
 800827c:	d068      	beq.n	8008350 <HAL_GPIO_DeInit+0xfc>
 800827e:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 800836c <HAL_GPIO_DeInit+0x118>
 8008282:	4558      	cmp	r0, fp
 8008284:	d069      	beq.n	800835a <HAL_GPIO_DeInit+0x106>
 8008286:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8008370 <HAL_GPIO_DeInit+0x11c>
 800828a:	4558      	cmp	r0, fp
 800828c:	bf14      	ite	ne
 800828e:	f04f 0b05 	movne.w	fp, #5
 8008292:	f04f 0b04 	moveq.w	fp, #4
 8008296:	fa0b f404 	lsl.w	r4, fp, r4
 800829a:	45a4      	cmp	ip, r4
 800829c:	d113      	bne.n	80082c6 <HAL_GPIO_DeInit+0x72>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800829e:	6834      	ldr	r4, [r6, #0]
 80082a0:	ea24 040e 	bic.w	r4, r4, lr
 80082a4:	6034      	str	r4, [r6, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80082a6:	6874      	ldr	r4, [r6, #4]
 80082a8:	ea24 040e 	bic.w	r4, r4, lr
 80082ac:	6074      	str	r4, [r6, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80082ae:	68b4      	ldr	r4, [r6, #8]
 80082b0:	ea24 040e 	bic.w	r4, r4, lr
 80082b4:	60b4      	str	r4, [r6, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80082b6:	68f4      	ldr	r4, [r6, #12]
 80082b8:	ea24 040e 	bic.w	r4, r4, lr
 80082bc:	60f4      	str	r4, [r6, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80082be:	68ac      	ldr	r4, [r5, #8]
 80082c0:	ea24 0408 	bic.w	r4, r4, r8
 80082c4:	60ac      	str	r4, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80082c6:	6805      	ldr	r5, [r0, #0]
 80082c8:	005c      	lsls	r4, r3, #1
 80082ca:	fa0a f404 	lsl.w	r4, sl, r4
 80082ce:	ea25 0504 	bic.w	r5, r5, r4

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 80082d2:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80082d6:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 80082d8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80082dc:	f003 0507 	and.w	r5, r3, #7
 80082e0:	f8dc e020 	ldr.w	lr, [ip, #32]
 80082e4:	00ad      	lsls	r5, r5, #2
 80082e6:	fa09 f505 	lsl.w	r5, r9, r5
 80082ea:	ea2e 0505 	bic.w	r5, lr, r5
 80082ee:	f8cc 5020 	str.w	r5, [ip, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80082f2:	68c5      	ldr	r5, [r0, #12]
 80082f4:	ea25 0504 	bic.w	r5, r5, r4
 80082f8:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80082fa:	6845      	ldr	r5, [r0, #4]
 80082fc:	ea25 0202 	bic.w	r2, r5, r2
 8008300:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008302:	6882      	ldr	r2, [r0, #8]
 8008304:	ea22 0404 	bic.w	r4, r2, r4
 8008308:	6084      	str	r4, [r0, #8]
    }

    position++;
 800830a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 800830c:	fa31 f203 	lsrs.w	r2, r1, r3
 8008310:	d019      	beq.n	8008346 <HAL_GPIO_DeInit+0xf2>
    iocurrent = (GPIO_Pin) & (1U << position);
 8008312:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 8008316:	ea12 0e01 	ands.w	lr, r2, r1
 800831a:	d0f6      	beq.n	800830a <HAL_GPIO_DeInit+0xb6>
      tmp = SYSCFG->EXTICR[position >> 2];
 800831c:	f023 0503 	bic.w	r5, r3, #3
 8008320:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8008324:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8008374 <HAL_GPIO_DeInit+0x120>
 8008328:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800832c:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8008330:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8008334:	00a4      	lsls	r4, r4, #2
 8008336:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800833a:	4558      	cmp	r0, fp
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800833c:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8008340:	d195      	bne.n	800826e <HAL_GPIO_DeInit+0x1a>
 8008342:	2400      	movs	r4, #0
 8008344:	e7a9      	b.n	800829a <HAL_GPIO_DeInit+0x46>
  }
}
 8008346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800834a:	fa07 f404 	lsl.w	r4, r7, r4
 800834e:	e7a4      	b.n	800829a <HAL_GPIO_DeInit+0x46>
 8008350:	f04f 0b02 	mov.w	fp, #2
 8008354:	fa0b f404 	lsl.w	r4, fp, r4
 8008358:	e79f      	b.n	800829a <HAL_GPIO_DeInit+0x46>
 800835a:	fa0a f404 	lsl.w	r4, sl, r4
 800835e:	e79c      	b.n	800829a <HAL_GPIO_DeInit+0x46>
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40010400 	.word	0x40010400
 8008368:	40020800 	.word	0x40020800
 800836c:	40020c00 	.word	0x40020c00
 8008370:	40021000 	.word	0x40021000
 8008374:	40020000 	.word	0x40020000

08008378 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008378:	6903      	ldr	r3, [r0, #16]
 800837a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800837c:	bf14      	ite	ne
 800837e:	2001      	movne	r0, #1
 8008380:	2000      	moveq	r0, #0
 8008382:	4770      	bx	lr

08008384 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008384:	b902      	cbnz	r2, 8008388 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8008386:	0409      	lsls	r1, r1, #16
 8008388:	6181      	str	r1, [r0, #24]
  }
}
 800838a:	4770      	bx	lr

0800838c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800838c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800838e:	ea01 0203 	and.w	r2, r1, r3
 8008392:	ea21 0103 	bic.w	r1, r1, r3
 8008396:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800839a:	6181      	str	r1, [r0, #24]
}
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop

080083a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80083a0:	4a04      	ldr	r2, [pc, #16]	; (80083b4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80083a2:	6951      	ldr	r1, [r2, #20]
 80083a4:	4201      	tst	r1, r0
 80083a6:	d100      	bne.n	80083aa <HAL_GPIO_EXTI_IRQHandler+0xa>
 80083a8:	4770      	bx	lr
{
 80083aa:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80083ac:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80083ae:	f7fe f941 	bl	8006634 <HAL_GPIO_EXTI_Callback>
  }
}
 80083b2:	bd08      	pop	{r3, pc}
 80083b4:	40010400 	.word	0x40010400

080083b8 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083b8:	2800      	cmp	r0, #0
 80083ba:	f000 80b9 	beq.w	8008530 <HAL_I2C_Init+0x178>
{
 80083be:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80083c4:	4604      	mov	r4, r0
 80083c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8098 	beq.w	8008500 <HAL_I2C_Init+0x148>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80083d0:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80083d2:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80083d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	f022 0201 	bic.w	r2, r2, #1
 80083de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80083f0:	f001 fd1c 	bl	8009e2c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80083f4:	6863      	ldr	r3, [r4, #4]
 80083f6:	494f      	ldr	r1, [pc, #316]	; (8008534 <HAL_I2C_Init+0x17c>)
 80083f8:	428b      	cmp	r3, r1
 80083fa:	d84f      	bhi.n	800849c <HAL_I2C_Init+0xe4>
 80083fc:	4a4e      	ldr	r2, [pc, #312]	; (8008538 <HAL_I2C_Init+0x180>)
 80083fe:	4290      	cmp	r0, r2
 8008400:	d97c      	bls.n	80084fc <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008402:	4d4e      	ldr	r5, [pc, #312]	; (800853c <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008404:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8008406:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800840a:	1e43      	subs	r3, r0, #1
 800840c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008410:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008414:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8008416:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008418:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800841a:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800841e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8008422:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8008426:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008428:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800842a:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800842c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8008430:	ea41 010c 	orr.w	r1, r1, ip
 8008434:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008436:	69d1      	ldr	r1, [r2, #28]
 8008438:	ea13 0f0e 	tst.w	r3, lr
 800843c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8008440:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008444:	d161      	bne.n	800850a <HAL_I2C_Init+0x152>
 8008446:	2304      	movs	r3, #4
 8008448:	430b      	orrs	r3, r1
 800844a:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800844c:	6811      	ldr	r1, [r2, #0]
 800844e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8008452:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8008456:	4303      	orrs	r3, r0
 8008458:	430b      	orrs	r3, r1
 800845a:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800845c:	6891      	ldr	r1, [r2, #8]
 800845e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8008462:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8008466:	4303      	orrs	r3, r0
 8008468:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800846c:	430b      	orrs	r3, r1
 800846e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008470:	68d0      	ldr	r0, [r2, #12]
 8008472:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8008476:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800847a:	430b      	orrs	r3, r1
 800847c:	4303      	orrs	r3, r0
 800847e:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008480:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008482:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8008484:	f043 0301 	orr.w	r3, r3, #1
 8008488:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800848a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800848c:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800848e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008492:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008494:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e

  return HAL_OK;
 8008498:	4608      	mov	r0, r1
}
 800849a:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800849c:	4a28      	ldr	r2, [pc, #160]	; (8008540 <HAL_I2C_Init+0x188>)
 800849e:	4290      	cmp	r0, r2
 80084a0:	d92c      	bls.n	80084fc <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80084a2:	4d26      	ldr	r5, [pc, #152]	; (800853c <HAL_I2C_Init+0x184>)
 80084a4:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80084ac:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084b0:	fb02 f101 	mul.w	r1, r2, r1
 80084b4:	4d23      	ldr	r5, [pc, #140]	; (8008544 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80084b6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084b8:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80084bc:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084be:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80084c0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80084c4:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 80084c8:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084ca:	6a15      	ldr	r5, [r2, #32]
 80084cc:	3101      	adds	r1, #1
 80084ce:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80084d2:	4329      	orrs	r1, r5
 80084d4:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80084d6:	69d1      	ldr	r1, [r2, #28]
 80084d8:	68a5      	ldr	r5, [r4, #8]
 80084da:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80084de:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80084e2:	b9ad      	cbnz	r5, 8008510 <HAL_I2C_Init+0x158>
 80084e4:	3801      	subs	r0, #1
 80084e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80084ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80084ee:	3301      	adds	r3, #1
 80084f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084f4:	b1d3      	cbz	r3, 800852c <HAL_I2C_Init+0x174>
 80084f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084fa:	e7a5      	b.n	8008448 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80084fc:	2001      	movs	r0, #1
}
 80084fe:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8008500:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8008504:	f7fe fc7e 	bl	8006e04 <HAL_I2C_MspInit>
 8008508:	e762      	b.n	80083d0 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800850a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800850e:	e79b      	b.n	8008448 <HAL_I2C_Init+0x90>
 8008510:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008514:	3801      	subs	r0, #1
 8008516:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800851a:	fbb0 f3f3 	udiv	r3, r0, r3
 800851e:	3301      	adds	r3, #1
 8008520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008524:	b113      	cbz	r3, 800852c <HAL_I2C_Init+0x174>
 8008526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800852a:	e78d      	b.n	8008448 <HAL_I2C_Init+0x90>
 800852c:	2301      	movs	r3, #1
 800852e:	e78b      	b.n	8008448 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8008530:	2001      	movs	r0, #1
}
 8008532:	4770      	bx	lr
 8008534:	000186a0 	.word	0x000186a0
 8008538:	001e847f 	.word	0x001e847f
 800853c:	431bde83 	.word	0x431bde83
 8008540:	003d08ff 	.word	0x003d08ff
 8008544:	10624dd3 	.word	0x10624dd3

08008548 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	4605      	mov	r5, r0
 800854e:	b083      	sub	sp, #12
 8008550:	4699      	mov	r9, r3
 8008552:	4688      	mov	r8, r1
 8008554:	4692      	mov	sl, r2
 8008556:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008558:	f7fe fedc 	bl	8007314 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800855c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8008560:	2b20      	cmp	r3, #32
 8008562:	d003      	beq.n	800856c <HAL_I2C_Master_Transmit+0x24>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8008564:	2002      	movs	r0, #2
  }
}
 8008566:	b003      	add	sp, #12
 8008568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856c:	4606      	mov	r6, r0
 800856e:	e005      	b.n	800857c <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008570:	f7fe fed0 	bl	8007314 <HAL_GetTick>
 8008574:	1b80      	subs	r0, r0, r6
 8008576:	2819      	cmp	r0, #25
 8008578:	f200 80f8 	bhi.w	800876c <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800857c:	682c      	ldr	r4, [r5, #0]
 800857e:	69a3      	ldr	r3, [r4, #24]
 8008580:	ea6f 0c03 	mvn.w	ip, r3
 8008584:	f01c 0b02 	ands.w	fp, ip, #2
 8008588:	d0f2      	beq.n	8008570 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 800858a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800858e:	2b01      	cmp	r3, #1
 8008590:	d0e8      	beq.n	8008564 <HAL_I2C_Master_Transmit+0x1c>
 8008592:	2301      	movs	r3, #1
 8008594:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	07d9      	lsls	r1, r3, #31
 800859c:	d571      	bpl.n	8008682 <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800859e:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80085a0:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80085a2:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085aa:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80085ac:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80085b0:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80085b4:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 80085b6:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085ba:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085bc:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80085c0:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80085c2:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80085c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80085c6:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80085ca:	2b08      	cmp	r3, #8
 80085cc:	d006      	beq.n	80085dc <HAL_I2C_Master_Transmit+0x94>
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d004      	beq.n	80085dc <HAL_I2C_Master_Transmit+0x94>
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d002      	beq.n	80085dc <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80085d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80085d8:	2b12      	cmp	r3, #18
 80085da:	d103      	bne.n	80085e4 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085e2:	6023      	str	r3, [r4, #0]
 80085e4:	1c7b      	adds	r3, r7, #1
 80085e6:	d13e      	bne.n	8008666 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085e8:	6963      	ldr	r3, [r4, #20]
 80085ea:	07d8      	lsls	r0, r3, #31
 80085ec:	d5fc      	bpl.n	80085e8 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80085ee:	692b      	ldr	r3, [r5, #16]
 80085f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085f4:	d14a      	bne.n	800868c <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085f6:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 80085fa:	6121      	str	r1, [r4, #16]
 80085fc:	1c78      	adds	r0, r7, #1
 80085fe:	d004      	beq.n	800860a <HAL_I2C_Master_Transmit+0xc2>
 8008600:	e0dd      	b.n	80087be <HAL_I2C_Master_Transmit+0x276>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008602:	6963      	ldr	r3, [r4, #20]
 8008604:	055a      	lsls	r2, r3, #21
 8008606:	f100 80c2 	bmi.w	800878e <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800860a:	6963      	ldr	r3, [r4, #20]
 800860c:	0799      	lsls	r1, r3, #30
 800860e:	d5f8      	bpl.n	8008602 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008610:	2200      	movs	r2, #0
 8008612:	9201      	str	r2, [sp, #4]
 8008614:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 8008616:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008618:	9201      	str	r2, [sp, #4]
 800861a:	69a2      	ldr	r2, [r4, #24]
 800861c:	9201      	str	r2, [sp, #4]
 800861e:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8008620:	2b00      	cmp	r3, #0
 8008622:	d075      	beq.n	8008710 <HAL_I2C_Master_Transmit+0x1c8>
 8008624:	1c79      	adds	r1, r7, #1
 8008626:	f040 8081 	bne.w	800872c <HAL_I2C_Master_Transmit+0x1e4>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800862a:	6963      	ldr	r3, [r4, #20]
 800862c:	061a      	lsls	r2, r3, #24
 800862e:	d441      	bmi.n	80086b4 <HAL_I2C_Master_Transmit+0x16c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008630:	6963      	ldr	r3, [r4, #20]
 8008632:	055b      	lsls	r3, r3, #21
 8008634:	d5f9      	bpl.n	800862a <HAL_I2C_Master_Transmit+0xe2>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008636:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8008638:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800863a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800863e:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8008640:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008642:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008646:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800864a:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800864c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008650:	f043 0304 	orr.w	r3, r3, #4
 8008654:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008656:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8008658:	2b04      	cmp	r3, #4
 800865a:	f000 80e6 	beq.w	800882a <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 800865e:	2001      	movs	r0, #1
}
 8008660:	b003      	add	sp, #12
 8008662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008666:	6963      	ldr	r3, [r4, #20]
 8008668:	07d9      	lsls	r1, r3, #31
 800866a:	d4c0      	bmi.n	80085ee <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800866c:	f7fe fe52 	bl	8007314 <HAL_GetTick>
 8008670:	1b80      	subs	r0, r0, r6
 8008672:	4287      	cmp	r7, r0
 8008674:	f0c0 80b3 	bcc.w	80087de <HAL_I2C_Master_Transmit+0x296>
 8008678:	2f00      	cmp	r7, #0
 800867a:	f000 80b0 	beq.w	80087de <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800867e:	682c      	ldr	r4, [r5, #0]
 8008680:	e7b0      	b.n	80085e4 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	f043 0301 	orr.w	r3, r3, #1
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	e788      	b.n	800859e <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800868c:	ea4f 13e8 	mov.w	r3, r8, asr #7
 8008690:	f003 0306 	and.w	r3, r3, #6
 8008694:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8008698:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800869a:	1c7b      	adds	r3, r7, #1
 800869c:	d003      	beq.n	80086a6 <HAL_I2C_Master_Transmit+0x15e>
 800869e:	e0b5      	b.n	800880c <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086a0:	6963      	ldr	r3, [r4, #20]
 80086a2:	0559      	lsls	r1, r3, #21
 80086a4:	d473      	bmi.n	800878e <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80086a6:	6963      	ldr	r3, [r4, #20]
 80086a8:	0718      	lsls	r0, r3, #28
 80086aa:	d5f9      	bpl.n	80086a0 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80086ac:	fa5f f388 	uxtb.w	r3, r8
 80086b0:	6123      	str	r3, [r4, #16]
 80086b2:	e7a3      	b.n	80085fc <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086b4:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 80086b6:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086ba:	4601      	mov	r1, r0
 80086bc:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 80086c0:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086c4:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 80086c6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 80086c8:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80086ca:	3b01      	subs	r3, #1
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80086d0:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 80086d2:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80086d4:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 80086d6:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80086d8:	d50c      	bpl.n	80086f4 <HAL_I2C_Master_Transmit+0x1ac>
 80086da:	b15a      	cbz	r2, 80086f4 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086dc:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 80086de:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086e2:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 80086e4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80086e6:	3002      	adds	r0, #2
        hi2c->XferCount--;
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80086ec:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 80086f0:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 80086f2:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 80086f4:	1c78      	adds	r0, r7, #1
 80086f6:	d129      	bne.n	800874c <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086f8:	6963      	ldr	r3, [r4, #20]
 80086fa:	0759      	lsls	r1, r3, #29
 80086fc:	d405      	bmi.n	800870a <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086fe:	6963      	ldr	r3, [r4, #20]
 8008700:	055a      	lsls	r2, r3, #21
 8008702:	d498      	bmi.n	8008636 <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008704:	6963      	ldr	r3, [r4, #20]
 8008706:	0759      	lsls	r1, r3, #29
 8008708:	d5f9      	bpl.n	80086fe <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 800870a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800870c:	2b00      	cmp	r3, #0
 800870e:	d189      	bne.n	8008624 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008710:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8008712:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008714:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8008716:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800871c:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800871e:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8008722:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008726:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 800872a:	e71c      	b.n	8008566 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800872c:	6963      	ldr	r3, [r4, #20]
 800872e:	0618      	lsls	r0, r3, #24
 8008730:	d4c0      	bmi.n	80086b4 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008732:	6963      	ldr	r3, [r4, #20]
 8008734:	0558      	lsls	r0, r3, #21
 8008736:	f53f af7e 	bmi.w	8008636 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800873a:	f7fe fdeb 	bl	8007314 <HAL_GetTick>
 800873e:	1b80      	subs	r0, r0, r6
 8008740:	4287      	cmp	r7, r0
 8008742:	d379      	bcc.n	8008838 <HAL_I2C_Master_Transmit+0x2f0>
 8008744:	2f00      	cmp	r7, #0
 8008746:	d077      	beq.n	8008838 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008748:	682c      	ldr	r4, [r5, #0]
 800874a:	e76b      	b.n	8008624 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800874c:	6963      	ldr	r3, [r4, #20]
 800874e:	075b      	lsls	r3, r3, #29
 8008750:	d4db      	bmi.n	800870a <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008752:	6963      	ldr	r3, [r4, #20]
 8008754:	055b      	lsls	r3, r3, #21
 8008756:	f53f af6e 	bmi.w	8008636 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800875a:	f7fe fddb 	bl	8007314 <HAL_GetTick>
 800875e:	1b80      	subs	r0, r0, r6
 8008760:	4287      	cmp	r7, r0
 8008762:	d369      	bcc.n	8008838 <HAL_I2C_Master_Transmit+0x2f0>
 8008764:	2f00      	cmp	r7, #0
 8008766:	d067      	beq.n	8008838 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008768:	682c      	ldr	r4, [r5, #0]
 800876a:	e7c3      	b.n	80086f4 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 800876c:	2320      	movs	r3, #32
      return HAL_BUSY;
 800876e:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008770:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008774:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008778:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800877c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800877e:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008782:	f043 0320 	orr.w	r3, r3, #32
 8008786:	642b      	str	r3, [r5, #64]	; 0x40
}
 8008788:	b003      	add	sp, #12
 800878a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 800878e:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008790:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8008794:	2120      	movs	r1, #32
      return HAL_ERROR;
 8008796:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800879e:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087a0:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80087a2:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087a4:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087a8:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087ac:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80087ae:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087b2:	f043 0304 	orr.w	r3, r3, #4
 80087b6:	642b      	str	r3, [r5, #64]	; 0x40
}
 80087b8:	b003      	add	sp, #12
 80087ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087be:	6963      	ldr	r3, [r4, #20]
 80087c0:	079b      	lsls	r3, r3, #30
 80087c2:	f53f af25 	bmi.w	8008610 <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087c6:	6963      	ldr	r3, [r4, #20]
 80087c8:	055b      	lsls	r3, r3, #21
 80087ca:	d4e0      	bmi.n	800878e <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087cc:	f7fe fda2 	bl	8007314 <HAL_GetTick>
 80087d0:	1b80      	subs	r0, r0, r6
 80087d2:	4287      	cmp	r7, r0
 80087d4:	d33e      	bcc.n	8008854 <HAL_I2C_Master_Transmit+0x30c>
 80087d6:	2f00      	cmp	r7, #0
 80087d8:	d03c      	beq.n	8008854 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087da:	682c      	ldr	r4, [r5, #0]
 80087dc:	e70e      	b.n	80085fc <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80087de:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80087e0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80087e2:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80087e4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80087e8:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80087ec:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087ee:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80087f0:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80087f4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80087f8:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087fa:	680b      	ldr	r3, [r1, #0]
 80087fc:	05da      	lsls	r2, r3, #23
 80087fe:	f57f af2e 	bpl.w	800865e <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008802:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8008806:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008808:	642b      	str	r3, [r5, #64]	; 0x40
 800880a:	e6ac      	b.n	8008566 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800880c:	6963      	ldr	r3, [r4, #20]
 800880e:	071a      	lsls	r2, r3, #28
 8008810:	f53f af4c 	bmi.w	80086ac <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008814:	6963      	ldr	r3, [r4, #20]
 8008816:	055a      	lsls	r2, r3, #21
 8008818:	d4b9      	bmi.n	800878e <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800881a:	f7fe fd7b 	bl	8007314 <HAL_GetTick>
 800881e:	1b83      	subs	r3, r0, r6
 8008820:	429f      	cmp	r7, r3
 8008822:	d317      	bcc.n	8008854 <HAL_I2C_Master_Transmit+0x30c>
 8008824:	b1b7      	cbz	r7, 8008854 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008826:	682c      	ldr	r4, [r5, #0]
 8008828:	e737      	b.n	800869a <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800882a:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 800882c:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800882e:	6813      	ldr	r3, [r2, #0]
 8008830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	e696      	b.n	8008566 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008838:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800883a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800883c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800883e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008842:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008846:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008848:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800884c:	f043 0320 	orr.w	r3, r3, #32
 8008850:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8008852:	e700      	b.n	8008656 <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008854:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8008856:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008858:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800885a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800885e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008862:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8008864:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008866:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800886a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800886e:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8008870:	e679      	b.n	8008566 <HAL_I2C_Master_Transmit+0x1e>
 8008872:	bf00      	nop

08008874 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008874:	2800      	cmp	r0, #0
 8008876:	d05d      	beq.n	8008934 <HAL_PCD_Init+0xc0>
{
 8008878:	b570      	push	{r4, r5, r6, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800887a:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800887e:	4604      	mov	r4, r0
{
 8008880:	b086      	sub	sp, #24
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008882:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008886:	2b00      	cmp	r3, #0
 8008888:	d04f      	beq.n	800892a <HAL_PCD_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800888a:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800888c:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 800888e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8008892:	f002 f831 	bl	800a8f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008896:	6860      	ldr	r0, [r4, #4]
 8008898:	b368      	cbz	r0, 80088f6 <HAL_PCD_Init+0x82>
 800889a:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800889c:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80088a0:	4611      	mov	r1, r2
    hpcd->IN_ep[i].is_in = 1U;
 80088a2:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80088a6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088aa:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 80088ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80088b2:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088b4:	fa5f f28c 	uxtb.w	r2, ip
 80088b8:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 80088ba:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80088be:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80088c2:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80088c6:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088c8:	d3eb      	bcc.n	80088a2 <HAL_PCD_Init+0x2e>
 80088ca:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80088cc:	4611      	mov	r1, r2
 80088ce:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80088d2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088d6:	f102 0c01 	add.w	ip, r2, #1
    hpcd->OUT_ep[i].num = i;
 80088da:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088de:	fa5f f28c 	uxtb.w	r2, ip
 80088e2:	4282      	cmp	r2, r0
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80088e4:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 80088e8:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80088ec:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80088f0:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088f4:	d3eb      	bcc.n	80088ce <HAL_PCD_Init+0x5a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80088f6:	46a4      	mov	ip, r4
 80088f8:	46ee      	mov	lr, sp
 80088fa:	f85c 6b10 	ldr.w	r6, [ip], #16
 80088fe:	1d25      	adds	r5, r4, #4
 8008900:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008904:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008908:	f8dc 3000 	ldr.w	r3, [ip]
 800890c:	4630      	mov	r0, r6
 800890e:	f8ce 3000 	str.w	r3, [lr]
 8008912:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8008916:	f001 fff9 	bl	800a90c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800891a:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 800891c:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800891e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008922:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 8008926:	b006      	add	sp, #24
 8008928:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800892a:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 800892e:	f003 fd1b 	bl	800c368 <HAL_PCD_MspInit>
 8008932:	e7aa      	b.n	800888a <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8008934:	2001      	movs	r0, #1
}
 8008936:	4770      	bx	lr

08008938 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008938:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 800893a:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800893e:	2b01      	cmp	r3, #1
 8008940:	d012      	beq.n	8008968 <HAL_PCD_Start+0x30>
 8008942:	4604      	mov	r4, r0
 8008944:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 8008946:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008948:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800894c:	f001 ffca 	bl	800a8e4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8008950:	4629      	mov	r1, r5
 8008952:	4620      	mov	r0, r4
 8008954:	f003 fcfc 	bl	800c350 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8008958:	6820      	ldr	r0, [r4, #0]
 800895a:	f002 fdc7 	bl	800b4ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800895e:	2300      	movs	r3, #0
 8008960:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8

  return HAL_OK;
 8008964:	4618      	mov	r0, r3
}
 8008966:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8008968:	2002      	movs	r0, #2
}
 800896a:	bd38      	pop	{r3, r4, r5, pc}

0800896c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800896c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008970:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8008972:	6800      	ldr	r0, [r0, #0]
 8008974:	f002 fdbc 	bl	800b4f0 <USB_ReadInterrupts>
 8008978:	0406      	lsls	r6, r0, #16
 800897a:	d443      	bmi.n	8008a04 <HAL_PCD_IRQHandler+0x98>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800897c:	6820      	ldr	r0, [r4, #0]
 800897e:	f002 fdb7 	bl	800b4f0 <USB_ReadInterrupts>
 8008982:	0545      	lsls	r5, r0, #21
 8008984:	f100 8180 	bmi.w	8008c88 <HAL_PCD_IRQHandler+0x31c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8008988:	6820      	ldr	r0, [r4, #0]
 800898a:	f002 fdb1 	bl	800b4f0 <USB_ReadInterrupts>
 800898e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008992:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8008994:	d007      	beq.n	80089a6 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008996:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800899a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800899e:	041b      	lsls	r3, r3, #16
 80089a0:	0c1b      	lsrs	r3, r3, #16
 80089a2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80089a6:	f002 fda3 	bl	800b4f0 <USB_ReadInterrupts>
 80089aa:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80089ae:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80089b0:	d007      	beq.n	80089c2 <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80089b2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80089b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089ba:	041b      	lsls	r3, r3, #16
 80089bc:	0c1b      	lsrs	r3, r3, #16
 80089be:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80089c2:	f002 fd95 	bl	800b4f0 <USB_ReadInterrupts>
 80089c6:	04c0      	lsls	r0, r0, #19
 80089c8:	f100 81f6 	bmi.w	8008db8 <HAL_PCD_IRQHandler+0x44c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80089cc:	6820      	ldr	r0, [r4, #0]
 80089ce:	f002 fd8f 	bl	800b4f0 <USB_ReadInterrupts>
 80089d2:	0501      	lsls	r1, r0, #20
 80089d4:	f100 81d5 	bmi.w	8008d82 <HAL_PCD_IRQHandler+0x416>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80089d8:	6820      	ldr	r0, [r4, #0]
 80089da:	f002 fd89 	bl	800b4f0 <USB_ReadInterrupts>
 80089de:	0582      	lsls	r2, r0, #22
 80089e0:	f100 81c2 	bmi.w	8008d68 <HAL_PCD_IRQHandler+0x3fc>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80089e4:	6820      	ldr	r0, [r4, #0]
 80089e6:	f002 fd83 	bl	800b4f0 <USB_ReadInterrupts>
 80089ea:	05c3      	lsls	r3, r0, #23
 80089ec:	d508      	bpl.n	8008a00 <HAL_PCD_IRQHandler+0x94>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80089ee:	6822      	ldr	r2, [r4, #0]
 80089f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80089f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089f8:	041b      	lsls	r3, r3, #16
 80089fa:	0c1b      	lsrs	r3, r3, #16
 80089fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8008a00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008a04:	6822      	ldr	r2, [r4, #0]
 8008a06:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	041d      	lsls	r5, r3, #16
 8008a0e:	d5b6      	bpl.n	800897e <HAL_PCD_IRQHandler+0x12>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008a10:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8008d60 <HAL_PCD_IRQHandler+0x3f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008a14:	f8df a34c 	ldr.w	sl, [pc, #844]	; 8008d64 <HAL_PCD_IRQHandler+0x3f8>
 8008a18:	e011      	b.n	8008a3e <HAL_PCD_IRQHandler+0xd2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008a1a:	f011 0110 	ands.w	r1, r1, #16
 8008a1e:	f000 8151 	beq.w	8008cc4 <HAL_PCD_IRQHandler+0x358>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008a22:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008a24:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008a28:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008a2a:	f040 8176 	bne.w	8008d1a <HAL_PCD_IRQHandler+0x3ae>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008a2e:	0419      	lsls	r1, r3, #16
 8008a30:	f100 821b 	bmi.w	8008e6a <HAL_PCD_IRQHandler+0x4fe>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008a34:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8008a38:	041e      	lsls	r6, r3, #16
 8008a3a:	f140 811f 	bpl.w	8008c7c <HAL_PCD_IRQHandler+0x310>
    wIstr = hpcd->Instance->ISTR;
 8008a3e:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8008a42:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8008a44:	f015 050f 	ands.w	r5, r5, #15
 8008a48:	d0e7      	beq.n	8008a1a <HAL_PCD_IRQHandler+0xae>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008a4a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8008a4e:	00ae      	lsls	r6, r5, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008a50:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008a52:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008a56:	f100 80a0 	bmi.w	8008b9a <HAL_PCD_IRQHandler+0x22e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008a5a:	f018 0f80 	tst.w	r8, #128	; 0x80
 8008a5e:	d0e9      	beq.n	8008a34 <HAL_PCD_IRQHandler+0xc8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008a60:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8008a64:	1977      	adds	r7, r6, r5
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	ea03 0309 	and.w	r3, r3, r9
 8008a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a70:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8008a74:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8008a78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	f000 80d0 	beq.w	8008c22 <HAL_PCD_IRQHandler+0x2b6>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 80cd 	beq.w	8008c22 <HAL_PCD_IRQHandler+0x2b6>
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d103      	bne.n	8008a94 <HAL_PCD_IRQHandler+0x128>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8008a8c:	f418 7f80 	tst.w	r8, #256	; 0x100
 8008a90:	f000 80c7 	beq.w	8008c22 <HAL_PCD_IRQHandler+0x2b6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008a94:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008a98:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008aa2:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008aa6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008aaa:	f000 8255 	beq.w	8008f58 <HAL_PCD_IRQHandler+0x5ec>
    if (ep->xfer_len > TxByteNbre)
 8008aae:	eb06 0c05 	add.w	ip, r6, r5
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008ab2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 8008ab6:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8008aba:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 8008ac2:	459e      	cmp	lr, r3
 8008ac4:	f240 834b 	bls.w	800915e <HAL_PCD_IRQHandler+0x7f2>
      ep->xfer_len -= TxByteNbre;
 8008ac8:	ebae 0e03 	sub.w	lr, lr, r3
 8008acc:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8008ad0:	f1be 0f00 	cmp.w	lr, #0
 8008ad4:	f000 8346 	beq.w	8009164 <HAL_PCD_IRQHandler+0x7f8>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008ad8:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8008adc:	d00f      	beq.n	8008afe <HAL_PCD_IRQHandler+0x192>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008ade:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 8008ae2:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8008ae6:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8008aea:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8008aee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008af2:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 8008af6:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8008afa:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8008afe:	eb06 0e05 	add.w	lr, r6, r5
 8008b02:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8008b06:	f89e c04c 	ldrb.w	ip, [lr, #76]	; 0x4c
 8008b0a:	f1bc 0f01 	cmp.w	ip, #1
 8008b0e:	f040 8316 	bne.w	800913e <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 8008b12:	f8de 203c 	ldr.w	r2, [lr, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8008b16:	f8de 8038 	ldr.w	r8, [lr, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8008b1a:	eb02 0c03 	add.w	ip, r2, r3
        ep->xfer_count += TxByteNbre;
 8008b1e:	f8de 2044 	ldr.w	r2, [lr, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8008b22:	f8ce c03c 	str.w	ip, [lr, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8008b26:	441a      	add	r2, r3
 8008b28:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8008b2c:	f8de 2048 	ldr.w	r2, [lr, #72]	; 0x48
 8008b30:	4542      	cmp	r2, r8
 8008b32:	f0c0 83e4 	bcc.w	80092fe <HAL_PCD_IRQHandler+0x992>
          ep->xfer_len_db -= len;
 8008b36:	eba2 0208 	sub.w	r2, r2, r8
 8008b3a:	f8ce 2048 	str.w	r2, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008b3e:	fa1f f388 	uxth.w	r3, r8
 8008b42:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 8008b46:	f1be 0f00 	cmp.w	lr, #0
 8008b4a:	f040 83cb 	bne.w	80092e4 <HAL_PCD_IRQHandler+0x978>
 8008b4e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8008b52:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008b56:	f201 4e04 	addw	lr, r1, #1028	; 0x404
 8008b5a:	b292      	uxth	r2, r2
 8008b5c:	eb0e 0102 	add.w	r1, lr, r2
 8008b60:	f1b8 0f00 	cmp.w	r8, #0
 8008b64:	f040 83f8 	bne.w	8009358 <HAL_PCD_IRQHandler+0x9ec>
 8008b68:	f83e 1002 	ldrh.w	r1, [lr, r2]
 8008b6c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8008b70:	0409      	lsls	r1, r1, #16
 8008b72:	0c09      	lsrs	r1, r1, #16
 8008b74:	f82e 1002 	strh.w	r1, [lr, r2]
 8008b78:	f83e 1002 	ldrh.w	r1, [lr, r2]
 8008b7c:	b289      	uxth	r1, r1
 8008b7e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008b82:	f82e 1002 	strh.w	r1, [lr, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008b86:	1972      	adds	r2, r6, r5
 8008b88:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8008b8c:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8008b8e:	4661      	mov	r1, ip
 8008b90:	f002 fcb2 	bl	800b4f8 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008b94:	6820      	ldr	r0, [r4, #0]
 8008b96:	4602      	mov	r2, r0
 8008b98:	e2d1      	b.n	800913e <HAL_PCD_IRQHandler+0x7d2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008b9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008b9e:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8008ba2:	1971      	adds	r1, r6, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008baa:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8008bae:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008bb2:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f040 811c 	bne.w	8008df4 <HAL_PCD_IRQHandler+0x488>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008bbc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008bc0:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	3306      	adds	r3, #6
 8008bc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bcc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008bd0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8008bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8008bd8:	461f      	mov	r7, r3
          if (count != 0U)
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f040 81ac 	bne.w	8008f38 <HAL_PCD_IRQHandler+0x5cc>
        ep->xfer_count += count;
 8008be0:	1971      	adds	r1, r6, r5
 8008be2:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8008be6:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8008bea:	00c9      	lsls	r1, r1, #3
 8008bec:	443a      	add	r2, r7
 8008bee:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8008bf2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8008bf6:	443a      	add	r2, r7
 8008bf8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008bfc:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8008c00:	b122      	cbz	r2, 8008c0c <HAL_PCD_IRQHandler+0x2a0>
 8008c02:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8008c06:	42bb      	cmp	r3, r7
 8008c08:	f240 819d 	bls.w	8008f46 <HAL_PCD_IRQHandler+0x5da>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008c0c:	1973      	adds	r3, r6, r5
 8008c0e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008c12:	4620      	mov	r0, r4
 8008c14:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8008c18:	f003 fbce 	bl	800c3b8 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008c1c:	6820      	ldr	r0, [r4, #0]
 8008c1e:	4602      	mov	r2, r0
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008c20:	e71b      	b.n	8008a5a <HAL_PCD_IRQHandler+0xee>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008c22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008c26:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          if (ep->xfer_len > TxByteNbre)
 8008c30:	442e      	add	r6, r5
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008c32:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008c36:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
          if (ep->xfer_len > TxByteNbre)
 8008c3a:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8008c3e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8008c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c44:	429a      	cmp	r2, r3
 8008c46:	f240 8108 	bls.w	8008e5a <HAL_PCD_IRQHandler+0x4ee>
            ep->xfer_len -= TxByteNbre;
 8008c4a:	1ad2      	subs	r2, r2, r3
 8008c4c:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8008c4e:	2a00      	cmp	r2, #0
 8008c50:	f000 8105 	beq.w	8008e5e <HAL_PCD_IRQHandler+0x4f2>
            ep->xfer_buff += TxByteNbre;
 8008c54:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8008c56:	3501      	adds	r5, #1
            ep->xfer_buff += TxByteNbre;
 8008c58:	441a      	add	r2, r3
 8008c5a:	63f2      	str	r2, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8008c5c:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8008c5e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8008c62:	4413      	add	r3, r2
 8008c64:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008c66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008c6a:	f002 f8b7 	bl	800addc <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008c6e:	6820      	ldr	r0, [r4, #0]
 8008c70:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8008c74:	4602      	mov	r2, r0
 8008c76:	041e      	lsls	r6, r3, #16
 8008c78:	f53f aee1 	bmi.w	8008a3e <HAL_PCD_IRQHandler+0xd2>
 8008c7c:	4610      	mov	r0, r2
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8008c7e:	f002 fc37 	bl	800b4f0 <USB_ReadInterrupts>
 8008c82:	0545      	lsls	r5, r0, #21
 8008c84:	f57f ae80 	bpl.w	8008988 <HAL_PCD_IRQHandler+0x1c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008c88:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8008c8a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008c8c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c94:	041b      	lsls	r3, r3, #16
 8008c96:	0c1b      	lsrs	r3, r3, #16
 8008c98:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8008c9c:	f003 fba4 	bl	800c3e8 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8008ca0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	f43f ae6f 	beq.w	8008988 <HAL_PCD_IRQHandler+0x1c>
  hpcd->USB_Address = address;
 8008caa:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8008cac:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008cae:	4629      	mov	r1, r5
 8008cb0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008cb2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8008cb6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008cba:	f002 fc11 	bl	800b4e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008cbe:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8008cc2:	e661      	b.n	8008988 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008cc4:	8803      	ldrh	r3, [r0, #0]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	ea03 0309 	and.w	r3, r3, r9
 8008ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd0:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008cd2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008cd6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ce0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008ce4:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8008ce8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cee:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8008cf0:	4413      	add	r3, r2
 8008cf2:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f003 fb69 	bl	800c3cc <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008cfa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8008cfe:	b363      	cbz	r3, 8008d5a <HAL_PCD_IRQHandler+0x3ee>
 8008d00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d02:	bb53      	cbnz	r3, 8008d5a <HAL_PCD_IRQHandler+0x3ee>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008d04:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008d08:	6820      	ldr	r0, [r4, #0]
 8008d0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d0e:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 8008d12:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 8008d14:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8008d18:	e68c      	b.n	8008a34 <HAL_PCD_IRQHandler+0xc8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008d1a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008d1e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d28:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008d2c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008d30:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8008d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008d38:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008d3c:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8008d40:	f002 fbea 	bl	800b518 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008d44:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008d48:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8008d4a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008d4c:	8811      	ldrh	r1, [r2, #0]
 8008d4e:	400b      	ands	r3, r1
 8008d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d54:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8008d56:	f003 fb27 	bl	800c3a8 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008d5a:	6820      	ldr	r0, [r4, #0]
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	e669      	b.n	8008a34 <HAL_PCD_IRQHandler+0xc8>
 8008d60:	ffff8f0f 	.word	0xffff8f0f
 8008d64:	ffff8fbf 	.word	0xffff8fbf
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008d68:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8008d6a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008d6c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d74:	041b      	lsls	r3, r3, #16
 8008d76:	0c1b      	lsrs	r3, r3, #16
 8008d78:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8008d7c:	f003 fb30 	bl	800c3e0 <HAL_PCD_SOFCallback>
 8008d80:	e630      	b.n	80089e4 <HAL_PCD_IRQHandler+0x78>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008d82:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SuspendCallback(hpcd);
 8008d84:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008d86:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	f043 0308 	orr.w	r3, r3, #8
 8008d90:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008d94:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008d98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d9c:	041b      	lsls	r3, r3, #16
 8008d9e:	0c1b      	lsrs	r3, r3, #16
 8008da0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008da4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	f043 0304 	orr.w	r3, r3, #4
 8008dae:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8008db2:	f003 fb2b 	bl	800c40c <HAL_PCD_SuspendCallback>
 8008db6:	e60f      	b.n	80089d8 <HAL_PCD_IRQHandler+0x6c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008db8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8008dba:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008dbc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008dc0:	f023 0304 	bic.w	r3, r3, #4
 8008dc4:	041b      	lsls	r3, r3, #16
 8008dc6:	0c1b      	lsrs	r3, r3, #16
 8008dc8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008dcc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008dd0:	f023 0308 	bic.w	r3, r3, #8
 8008dd4:	041b      	lsls	r3, r3, #16
 8008dd6:	0c1b      	lsrs	r3, r3, #16
 8008dd8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8008ddc:	f003 fb26 	bl	800c42c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008de0:	6820      	ldr	r0, [r4, #0]
 8008de2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8008de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dea:	041b      	lsls	r3, r3, #16
 8008dec:	0c1b      	lsrs	r3, r3, #16
 8008dee:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8008df2:	e5ec      	b.n	80089ce <HAL_PCD_IRQHandler+0x62>
          if (ep->type == EP_TYPE_BULK)
 8008df4:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	f000 8120 	beq.w	800903e <HAL_PCD_IRQHandler+0x6d2>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008dfe:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8008e02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0e:	041b      	lsls	r3, r3, #16
 8008e10:	0c1b      	lsrs	r3, r3, #16
 8008e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e1a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008e1e:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8008e22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008e26:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008e2a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008e2e:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008e30:	d06e      	beq.n	8008f10 <HAL_PCD_IRQHandler+0x5a4>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008e32:	3302      	adds	r3, #2
 8008e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e38:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008e3c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8008e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8008e44:	461f      	mov	r7, r3
              if (count != 0U)
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f43f aeca 	beq.w	8008be0 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008e4c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8008e50:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008e54:	f002 fb60 	bl	800b518 <USB_ReadPMA>
 8008e58:	e6c2      	b.n	8008be0 <HAL_PCD_IRQHandler+0x274>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f003 fab4 	bl	800c3cc <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008e64:	6820      	ldr	r0, [r4, #0]
 8008e66:	4602      	mov	r2, r0
 8008e68:	e5e4      	b.n	8008a34 <HAL_PCD_IRQHandler+0xc8>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008e6a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008e6e:	8802      	ldrh	r2, [r0, #0]
 8008e70:	4013      	ands	r3, r2
 8008e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e76:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008e78:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008e7c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e86:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008e8a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8008e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e92:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008e96:	b193      	cbz	r3, 8008ebe <HAL_PCD_IRQHandler+0x552>
 8008e98:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8008e9c:	b179      	cbz	r1, 8008ebe <HAL_PCD_IRQHandler+0x552>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008e9e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8008ea2:	f002 fb39 	bl	800b518 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8008ea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008eaa:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008eae:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8008eb0:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008eb2:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8008eb4:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008eb8:	f003 fa7e 	bl	800c3b8 <HAL_PCD_DataOutStageCallback>
 8008ebc:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8008ebe:	8803      	ldrh	r3, [r0, #0]
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	051b      	lsls	r3, r3, #20
 8008ec4:	f53f adb6 	bmi.w	8008a34 <HAL_PCD_IRQHandler+0xc8>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008ec8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008ecc:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 8008ed6:	2900      	cmp	r1, #0
 8008ed8:	f040 80a6 	bne.w	8009028 <HAL_PCD_IRQHandler+0x6bc>
 8008edc:	5ae9      	ldrh	r1, [r5, r3]
 8008ede:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8008ee2:	0409      	lsls	r1, r1, #16
 8008ee4:	0c09      	lsrs	r1, r1, #16
 8008ee6:	52e9      	strh	r1, [r5, r3]
 8008ee8:	5ae9      	ldrh	r1, [r5, r3]
 8008eea:	b289      	uxth	r1, r1
 8008eec:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008ef0:	52e9      	strh	r1, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008ef2:	8803      	ldrh	r3, [r0, #0]
 8008ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efc:	041b      	lsls	r3, r3, #16
 8008efe:	0c1b      	lsrs	r3, r3, #16
 8008f00:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f0c:	8003      	strh	r3, [r0, #0]
 8008f0e:	e591      	b.n	8008a34 <HAL_PCD_IRQHandler+0xc8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008f10:	3306      	adds	r3, #6
 8008f12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f16:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008f1a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8008f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8008f22:	461f      	mov	r7, r3
              if (count != 0U)
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f43f ae5b 	beq.w	8008be0 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008f2a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8008f2e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008f32:	f002 faf1 	bl	800b518 <USB_ReadPMA>
 8008f36:	e653      	b.n	8008be0 <HAL_PCD_IRQHandler+0x274>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008f38:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8008f3c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008f40:	f002 faea 	bl	800b518 <USB_ReadPMA>
 8008f44:	e64c      	b.n	8008be0 <HAL_PCD_IRQHandler+0x274>
        ep = &hpcd->OUT_ep[epindex];
 8008f46:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8008f4a:	6820      	ldr	r0, [r4, #0]
 8008f4c:	4421      	add	r1, r4
 8008f4e:	f001 ff45 	bl	800addc <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008f52:	6820      	ldr	r0, [r4, #0]
 8008f54:	4602      	mov	r2, r0
 8008f56:	e580      	b.n	8008a5a <HAL_PCD_IRQHandler+0xee>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008f58:	f8b3 e40c 	ldrh.w	lr, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 8008f5c:	1973      	adds	r3, r6, r5
 8008f5e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008f62:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008f66:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8008f6a:	45f3      	cmp	fp, lr
 8008f6c:	f0c0 80a5 	bcc.w	80090ba <HAL_PCD_IRQHandler+0x74e>
      ep->xfer_len -= TxByteNbre;
 8008f70:	ebab 0c0e 	sub.w	ip, fp, lr
 8008f74:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8008f78:	f1bc 0f00 	cmp.w	ip, #0
 8008f7c:	f000 809f 	beq.w	80090be <HAL_PCD_IRQHandler+0x752>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008f80:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8008f84:	d10d      	bne.n	8008fa2 <HAL_PCD_IRQHandler+0x636>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008f86:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8008f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f92:	041b      	lsls	r3, r3, #16
 8008f94:	0c1b      	lsrs	r3, r3, #16
 8008f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f9e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8008fa2:	1973      	adds	r3, r6, r5
 8008fa4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008fa8:	f893 c04c 	ldrb.w	ip, [r3, #76]	; 0x4c
 8008fac:	f1bc 0f01 	cmp.w	ip, #1
 8008fb0:	f040 80c5 	bne.w	800913e <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 8008fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8008fb6:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8008fba:	eb02 0c0e 	add.w	ip, r2, lr
        ep->xfer_count += TxByteNbre;
 8008fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8008fc0:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8008fc4:	4472      	add	r2, lr
 8008fc6:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8008fc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fca:	4542      	cmp	r2, r8
 8008fcc:	f0c0 81ab 	bcc.w	8009326 <HAL_PCD_IRQHandler+0x9ba>
          ep->xfer_len_db -= len;
 8008fd0:	eba2 0208 	sub.w	r2, r2, r8
 8008fd4:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008fd6:	fa1f fe88 	uxth.w	lr, r8
 8008fda:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f040 8194 	bne.w	800930c <HAL_PCD_IRQHandler+0x9a0>
 8008fe4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8008fe8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008fec:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8008ff0:	b292      	uxth	r2, r2
 8008ff2:	188b      	adds	r3, r1, r2
 8008ff4:	f1b8 0f00 	cmp.w	r8, #0
 8008ff8:	f040 81d0 	bne.w	800939c <HAL_PCD_IRQHandler+0xa30>
 8008ffc:	5a8b      	ldrh	r3, [r1, r2]
 8008ffe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009002:	041b      	lsls	r3, r3, #16
 8009004:	0c1b      	lsrs	r3, r3, #16
 8009006:	528b      	strh	r3, [r1, r2]
 8009008:	5a8b      	ldrh	r3, [r1, r2]
 800900a:	b29b      	uxth	r3, r3
 800900c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009010:	528b      	strh	r3, [r1, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009012:	1972      	adds	r2, r6, r5
 8009014:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8009018:	4673      	mov	r3, lr
 800901a:	4661      	mov	r1, ip
 800901c:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800901e:	f002 fa6b 	bl	800b4f8 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009022:	6820      	ldr	r0, [r4, #0]
 8009024:	4602      	mov	r2, r0
 8009026:	e08a      	b.n	800913e <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009028:	293e      	cmp	r1, #62	; 0x3e
 800902a:	f200 80cb 	bhi.w	80091c4 <HAL_PCD_IRQHandler+0x858>
 800902e:	084e      	lsrs	r6, r1, #1
 8009030:	07cf      	lsls	r7, r1, #31
 8009032:	bf48      	it	mi
 8009034:	3601      	addmi	r6, #1
 8009036:	02b1      	lsls	r1, r6, #10
 8009038:	b289      	uxth	r1, r1
 800903a:	52e9      	strh	r1, [r5, r3]
 800903c:	e759      	b.n	8008ef2 <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800903e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009042:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009046:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009048:	f000 80c7 	beq.w	80091da <HAL_PCD_IRQHandler+0x86e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800904c:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009050:	3302      	adds	r3, #2
 8009052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009056:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800905a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 800905e:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009062:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8009066:	459c      	cmp	ip, r3
 8009068:	461f      	mov	r7, r3
 800906a:	f0c0 8112 	bcc.w	8009292 <HAL_PCD_IRQHandler+0x926>
      ep->xfer_len -= count;
 800906e:	ebac 0c03 	sub.w	ip, ip, r3
 8009072:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009076:	f1bc 0f00 	cmp.w	ip, #0
 800907a:	f000 810e 	beq.w	800929a <HAL_PCD_IRQHandler+0x92e>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800907e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009082:	d00d      	beq.n	80090a0 <HAL_PCD_IRQHandler+0x734>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009084:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009088:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800908c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009090:	0409      	lsls	r1, r1, #16
 8009092:	0c09      	lsrs	r1, r1, #16
 8009094:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009098:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800909c:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 80c3 	beq.w	800922c <HAL_PCD_IRQHandler+0x8c0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80090a6:	1971      	adds	r1, r6, r5
 80090a8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80090ac:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80090b0:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80090b4:	f002 fa30 	bl	800b518 <USB_ReadPMA>
 80090b8:	e592      	b.n	8008be0 <HAL_PCD_IRQHandler+0x274>
 80090ba:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80090be:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f040 80be 	bne.w	8009244 <HAL_PCD_IRQHandler+0x8d8>
 80090c8:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80090cc:	010b      	lsls	r3, r1, #4
 80090ce:	f203 4604 	addw	r6, r3, #1028	; 0x404
 80090d2:	4406      	add	r6, r0
 80090d4:	b2ad      	uxth	r5, r5
 80090d6:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80090d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80090dc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80090e0:	0412      	lsls	r2, r2, #16
 80090e2:	0c12      	lsrs	r2, r2, #16
 80090e4:	5372      	strh	r2, [r6, r5]
 80090e6:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80090e8:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80090ea:	b292      	uxth	r2, r2
 80090ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090f0:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80090f2:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 80090f6:	b280      	uxth	r0, r0
 80090f8:	5a1a      	ldrh	r2, [r3, r0]
 80090fa:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80090fe:	0412      	lsls	r2, r2, #16
 8009100:	0c12      	lsrs	r2, r2, #16
 8009102:	521a      	strh	r2, [r3, r0]
 8009104:	5a1a      	ldrh	r2, [r3, r0]
 8009106:	b292      	uxth	r2, r2
 8009108:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800910c:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800910e:	4620      	mov	r0, r4
 8009110:	f003 f95c 	bl	800c3cc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009114:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009118:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800911a:	d183      	bne.n	8009024 <HAL_PCD_IRQHandler+0x6b8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800911c:	4602      	mov	r2, r0
 800911e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009122:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800912a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912e:	041b      	lsls	r3, r3, #16
 8009130:	0c1b      	lsrs	r3, r3, #16
 8009132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800913a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800913e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009142:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009146:	b29b      	uxth	r3, r3
 8009148:	ea03 030a 	and.w	r3, r3, sl
 800914c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8009150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009158:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 800915c:	e46a      	b.n	8008a34 <HAL_PCD_IRQHandler+0xc8>
 800915e:	2300      	movs	r3, #0
 8009160:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009164:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009168:	2b00      	cmp	r3, #0
 800916a:	d17f      	bne.n	800926c <HAL_PCD_IRQHandler+0x900>
 800916c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009170:	010b      	lsls	r3, r1, #4
 8009172:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009176:	4406      	add	r6, r0
 8009178:	b2ad      	uxth	r5, r5
 800917a:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800917c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009180:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009184:	0412      	lsls	r2, r2, #16
 8009186:	0c12      	lsrs	r2, r2, #16
 8009188:	5372      	strh	r2, [r6, r5]
 800918a:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800918c:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800918e:	b292      	uxth	r2, r2
 8009190:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009194:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009196:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 800919a:	b280      	uxth	r0, r0
 800919c:	5a1a      	ldrh	r2, [r3, r0]
 800919e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80091a2:	0412      	lsls	r2, r2, #16
 80091a4:	0c12      	lsrs	r2, r2, #16
 80091a6:	521a      	strh	r2, [r3, r0]
 80091a8:	5a1a      	ldrh	r2, [r3, r0]
 80091aa:	b292      	uxth	r2, r2
 80091ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091b0:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80091b2:	4620      	mov	r0, r4
 80091b4:	f003 f90a 	bl	800c3cc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80091b8:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80091bc:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80091be:	d1ad      	bne.n	800911c <HAL_PCD_IRQHandler+0x7b0>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80091c0:	4602      	mov	r2, r0
 80091c2:	e7bc      	b.n	800913e <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80091c4:	094e      	lsrs	r6, r1, #5
 80091c6:	06c9      	lsls	r1, r1, #27
 80091c8:	4989      	ldr	r1, [pc, #548]	; (80093f0 <HAL_PCD_IRQHandler+0xa84>)
 80091ca:	bf08      	it	eq
 80091cc:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80091d0:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80091d4:	b289      	uxth	r1, r1
 80091d6:	52e9      	strh	r1, [r5, r3]
 80091d8:	e68b      	b.n	8008ef2 <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80091da:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80091de:	3306      	adds	r3, #6
 80091e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091e4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80091e8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 80091ec:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80091f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 80091f4:	459e      	cmp	lr, r3
 80091f6:	461f      	mov	r7, r3
 80091f8:	d360      	bcc.n	80092bc <HAL_PCD_IRQHandler+0x950>
      ep->xfer_len -= count;
 80091fa:	ebae 0e03 	sub.w	lr, lr, r3
 80091fe:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009202:	f1be 0f00 	cmp.w	lr, #0
 8009206:	d05b      	beq.n	80092c0 <HAL_PCD_IRQHandler+0x954>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009208:	f018 0f40 	tst.w	r8, #64	; 0x40
 800920c:	d10d      	bne.n	800922a <HAL_PCD_IRQHandler+0x8be>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800920e:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009212:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009216:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800921a:	0409      	lsls	r1, r1, #16
 800921c:	0c09      	lsrs	r1, r1, #16
 800921e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009222:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009226:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 800922a:	b90b      	cbnz	r3, 8009230 <HAL_PCD_IRQHandler+0x8c4>
 800922c:	461f      	mov	r7, r3
 800922e:	e4d7      	b.n	8008be0 <HAL_PCD_IRQHandler+0x274>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009230:	1971      	adds	r1, r6, r5
 8009232:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009236:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800923a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800923e:	f002 f96b 	bl	800b518 <USB_ReadPMA>
 8009242:	e4cd      	b.n	8008be0 <HAL_PCD_IRQHandler+0x274>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009244:	2b01      	cmp	r3, #1
 8009246:	f47f af62 	bne.w	800910e <HAL_PCD_IRQHandler+0x7a2>
 800924a:	2500      	movs	r5, #0
 800924c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009250:	010b      	lsls	r3, r1, #4
 8009252:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009256:	b292      	uxth	r2, r2
 8009258:	4406      	add	r6, r0
 800925a:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800925c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009260:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009264:	4403      	add	r3, r0
 8009266:	b292      	uxth	r2, r2
 8009268:	529d      	strh	r5, [r3, r2]
 800926a:	e750      	b.n	800910e <HAL_PCD_IRQHandler+0x7a2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800926c:	2b01      	cmp	r3, #1
 800926e:	d1a0      	bne.n	80091b2 <HAL_PCD_IRQHandler+0x846>
 8009270:	2500      	movs	r5, #0
 8009272:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009276:	010b      	lsls	r3, r1, #4
 8009278:	f203 4604 	addw	r6, r3, #1028	; 0x404
 800927c:	b292      	uxth	r2, r2
 800927e:	4406      	add	r6, r0
 8009280:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009282:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009286:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800928a:	4403      	add	r3, r0
 800928c:	b292      	uxth	r2, r2
 800928e:	529d      	strh	r5, [r3, r2]
 8009290:	e78f      	b.n	80091b2 <HAL_PCD_IRQHandler+0x846>
 8009292:	f04f 0c00 	mov.w	ip, #0
 8009296:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800929a:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800929e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80092a2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80092a6:	0409      	lsls	r1, r1, #16
 80092a8:	0c09      	lsrs	r1, r1, #16
 80092aa:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80092ae:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80092b2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80092b6:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 80092ba:	e6e0      	b.n	800907e <HAL_PCD_IRQHandler+0x712>
 80092bc:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80092c0:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80092c4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80092c8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80092cc:	0409      	lsls	r1, r1, #16
 80092ce:	0c09      	lsrs	r1, r1, #16
 80092d0:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80092d4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80092d8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80092dc:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 80092e0:	e792      	b.n	8009208 <HAL_PCD_IRQHandler+0x89c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80092e2:	b293      	uxth	r3, r2
 80092e4:	f1be 0f01 	cmp.w	lr, #1
 80092e8:	f47f ac4d 	bne.w	8008b86 <HAL_PCD_IRQHandler+0x21a>
 80092ec:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80092f0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80092f4:	f201 4104 	addw	r1, r1, #1028	; 0x404
 80092f8:	b292      	uxth	r2, r2
 80092fa:	528b      	strh	r3, [r1, r2]
 80092fc:	e443      	b.n	8008b86 <HAL_PCD_IRQHandler+0x21a>
        else if (ep->xfer_len_db == 0U)
 80092fe:	b9ba      	cbnz	r2, 8009330 <HAL_PCD_IRQHandler+0x9c4>
          ep->xfer_fill_db = 0U;
 8009300:	4698      	mov	r8, r3
 8009302:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
 8009306:	e41c      	b.n	8008b42 <HAL_PCD_IRQHandler+0x1d6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009308:	fa1f fe82 	uxth.w	lr, r2
 800930c:	2b01      	cmp	r3, #1
 800930e:	f47f ae80 	bne.w	8009012 <HAL_PCD_IRQHandler+0x6a6>
 8009312:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009316:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 800931a:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800931e:	b29b      	uxth	r3, r3
 8009320:	f822 e003 	strh.w	lr, [r2, r3]
 8009324:	e675      	b.n	8009012 <HAL_PCD_IRQHandler+0x6a6>
        else if (ep->xfer_len_db == 0U)
 8009326:	bb22      	cbnz	r2, 8009372 <HAL_PCD_IRQHandler+0xa06>
          ep->xfer_fill_db = 0U;
 8009328:	46f0      	mov	r8, lr
 800932a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800932e:	e654      	b.n	8008fda <HAL_PCD_IRQHandler+0x66e>
          ep->xfer_fill_db = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	f88e 304c 	strb.w	r3, [lr, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8009336:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800933a:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 800933e:	f1be 0f00 	cmp.w	lr, #0
 8009342:	d1ce      	bne.n	80092e2 <HAL_PCD_IRQHandler+0x976>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009344:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009346:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800934a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800934e:	b29b      	uxth	r3, r3
 8009350:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8009354:	4419      	add	r1, r3
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009356:	b293      	uxth	r3, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009358:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 800935c:	d82b      	bhi.n	80093b6 <HAL_PCD_IRQHandler+0xa4a>
 800935e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8009362:	f018 0f01 	tst.w	r8, #1
 8009366:	bf18      	it	ne
 8009368:	3201      	addne	r2, #1
 800936a:	0292      	lsls	r2, r2, #10
 800936c:	b292      	uxth	r2, r2
 800936e:	800a      	strh	r2, [r1, #0]
 8009370:	e409      	b.n	8008b86 <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_len_db = 0U;
 8009372:	f04f 0e00 	mov.w	lr, #0
 8009376:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800937a:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800937e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1c0      	bne.n	8009308 <HAL_PCD_IRQHandler+0x99c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009386:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009388:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800938c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009390:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8009394:	b29b      	uxth	r3, r3
 8009396:	440b      	add	r3, r1
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009398:	fa1f fe82 	uxth.w	lr, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800939c:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 80093a0:	d818      	bhi.n	80093d4 <HAL_PCD_IRQHandler+0xa68>
 80093a2:	ea4f 0258 	mov.w	r2, r8, lsr #1
 80093a6:	f018 0f01 	tst.w	r8, #1
 80093aa:	bf18      	it	ne
 80093ac:	3201      	addne	r2, #1
 80093ae:	0292      	lsls	r2, r2, #10
 80093b0:	b292      	uxth	r2, r2
 80093b2:	801a      	strh	r2, [r3, #0]
 80093b4:	e62d      	b.n	8009012 <HAL_PCD_IRQHandler+0x6a6>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80093b6:	ea4f 1258 	mov.w	r2, r8, lsr #5
 80093ba:	f8df e034 	ldr.w	lr, [pc, #52]	; 80093f0 <HAL_PCD_IRQHandler+0xa84>
 80093be:	f018 0f1f 	tst.w	r8, #31
 80093c2:	bf08      	it	eq
 80093c4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80093c8:	ea4e 2282 	orr.w	r2, lr, r2, lsl #10
 80093cc:	b292      	uxth	r2, r2
 80093ce:	800a      	strh	r2, [r1, #0]
 80093d0:	f7ff bbd9 	b.w	8008b86 <HAL_PCD_IRQHandler+0x21a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80093d4:	ea4f 1258 	mov.w	r2, r8, lsr #5
 80093d8:	4905      	ldr	r1, [pc, #20]	; (80093f0 <HAL_PCD_IRQHandler+0xa84>)
 80093da:	f018 0f1f 	tst.w	r8, #31
 80093de:	bf08      	it	eq
 80093e0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80093e4:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 80093e8:	b292      	uxth	r2, r2
 80093ea:	801a      	strh	r2, [r3, #0]
 80093ec:	e611      	b.n	8009012 <HAL_PCD_IRQHandler+0x6a6>
 80093ee:	bf00      	nop
 80093f0:	ffff8000 	.word	0xffff8000

080093f4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80093f4:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 80093f8:	2a01      	cmp	r2, #1
 80093fa:	d00e      	beq.n	800941a <HAL_PCD_SetAddress+0x26>
{
 80093fc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80093fe:	2201      	movs	r2, #1
 8009400:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009402:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8009404:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8009408:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800940c:	f002 f868 	bl	800b4e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009410:	2300      	movs	r3, #0
 8009412:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8009416:	4618      	mov	r0, r3
}
 8009418:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800941a:	2002      	movs	r0, #2
}
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop

08009420 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8009420:	f001 0c07 	and.w	ip, r1, #7
 8009424:	0609      	lsls	r1, r1, #24
{
 8009426:	b510      	push	{r4, lr}
 8009428:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800942a:	d425      	bmi.n	8009478 <HAL_PCD_EP_Open+0x58>
    ep->is_in = 0U;
 800942c:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009430:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 8009434:	00c0      	lsls	r0, r0, #3
 8009436:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 800943a:	4420      	add	r0, r4
 800943c:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009440:	4421      	add	r1, r4
  ep->maxpacket = ep_mps;
 8009442:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8009444:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009446:	f881 c000 	strb.w	ip, [r1]
  ep->type = ep_type;
 800944a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800944c:	b10a      	cbz	r2, 8009452 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 800944e:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8009452:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8009454:	bf04      	itt	eq
 8009456:	2300      	moveq	r3, #0
 8009458:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800945a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800945e:	2b01      	cmp	r3, #1
 8009460:	d019      	beq.n	8009496 <HAL_PCD_EP_Open+0x76>
 8009462:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009464:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009466:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800946a:	f001 fa63 	bl	800a934 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800946e:	2300      	movs	r3, #0
 8009470:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return ret;
 8009474:	4618      	mov	r0, r3
}
 8009476:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009478:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 800947c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009480:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8009484:	2001      	movs	r0, #1
 8009486:	7048      	strb	r0, [r1, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009488:	eb0c 0100 	add.w	r1, ip, r0
 800948c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009490:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8009494:	e7d5      	b.n	8009442 <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 8009496:	2002      	movs	r0, #2
}
 8009498:	bd10      	pop	{r4, pc}
 800949a:	bf00      	nop

0800949c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800949c:	060b      	lsls	r3, r1, #24
{
 800949e:	b510      	push	{r4, lr}
 80094a0:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80094a2:	d41b      	bmi.n	80094dc <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094a4:	f001 0307 	and.w	r3, r1, #7
 80094a8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80094ac:	00d2      	lsls	r2, r2, #3
 80094ae:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 80094b2:	4401      	add	r1, r0
    ep->is_in = 0U;
 80094b4:	4402      	add	r2, r0
 80094b6:	2000      	movs	r0, #0
 80094b8:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 80094bc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80094be:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d019      	beq.n	80094fa <HAL_PCD_EP_Close+0x5e>
 80094c6:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80094c8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80094ca:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80094ce:	f001 fba5 	bl	800ac1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80094d2:	2300      	movs	r3, #0
 80094d4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 80094d8:	4618      	mov	r0, r3
}
 80094da:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 80094dc:	2001      	movs	r0, #1
 80094de:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094e2:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 80094e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80094e8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094ec:	4611      	mov	r1, r2
    ep->is_in = 1U;
 80094ee:	7050      	strb	r0, [r2, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 80094f0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80094f2:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d1e5      	bne.n	80094c6 <HAL_PCD_EP_Close+0x2a>
 80094fa:	2002      	movs	r0, #2
}
 80094fc:	bd10      	pop	{r4, pc}
 80094fe:	bf00      	nop

08009500 <HAL_PCD_EP_Receive>:
{
 8009500:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 8009502:	2400      	movs	r4, #0
 8009504:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8009508:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 800950c:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 8009510:	e9cc 235f 	strd	r2, r3, [ip, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009514:	6800      	ldr	r0, [r0, #0]
 8009516:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
  ep->xfer_count = 0U;
 800951a:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 800951e:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8009522:	f88c e168 	strb.w	lr, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009526:	f001 fc59 	bl	800addc <USB_EPStartXfer>
}
 800952a:	4620      	mov	r0, r4
 800952c:	bd10      	pop	{r4, pc}
 800952e:	bf00      	nop

08009530 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009530:	f001 0107 	and.w	r1, r1, #7
 8009534:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009538:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800953c:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop

08009544 <HAL_PCD_EP_Transmit>:
{
 8009544:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 8009546:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8009548:	2500      	movs	r5, #0
{
 800954a:	4604      	mov	r4, r0
 800954c:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8009550:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009554:	eb0e 0106 	add.w	r1, lr, r6
  ep->xfer_buff = pBuf;
 8009558:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800955c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  ep->xfer_buff = pBuf;
 8009560:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->num = ep_addr & EP_ADDR_MSK;
 8009564:	f88c e028 	strb.w	lr, [ip, #40]	; 0x28
  ep->xfer_len = len;
 8009568:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 800956c:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_fill_db = 1U;
 8009570:	f88c 604c 	strb.w	r6, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 8009574:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
  ep->is_in = 1U;
 8009578:	f88c 6029 	strb.w	r6, [ip, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800957c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009580:	6800      	ldr	r0, [r0, #0]
 8009582:	f001 fc2b 	bl	800addc <USB_EPStartXfer>
}
 8009586:	4628      	mov	r0, r5
 8009588:	bd70      	pop	{r4, r5, r6, pc}
 800958a:	bf00      	nop

0800958c <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800958c:	6843      	ldr	r3, [r0, #4]
{
 800958e:	b510      	push	{r4, lr}
 8009590:	4604      	mov	r4, r0
 8009592:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009596:	4298      	cmp	r0, r3
 8009598:	d82d      	bhi.n	80095f6 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 800959a:	060b      	lsls	r3, r1, #24
 800959c:	d41a      	bmi.n	80095d4 <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 800959e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80095a2:	00c9      	lsls	r1, r1, #3
 80095a4:	f501 72b4 	add.w	r2, r1, #360	; 0x168
    ep->is_in = 0U;
 80095a8:	1863      	adds	r3, r4, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80095aa:	18a1      	adds	r1, r4, r2
    ep->is_in = 0U;
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 80095b2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80095b4:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 80095b6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80095b8:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80095bc:	429a      	cmp	r2, r3
 80095be:	d018      	beq.n	80095f2 <HAL_PCD_EP_SetStall+0x66>
 80095c0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80095c4:	6820      	ldr	r0, [r4, #0]
 80095c6:	f001 ff13 	bl	800b3f0 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80095ca:	2300      	movs	r3, #0
 80095cc:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 80095d0:	4618      	mov	r0, r3
}
 80095d2:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 80095d4:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095d6:	1883      	adds	r3, r0, r2
    ep->is_in = 1U;
 80095d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80095dc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80095e0:	705a      	strb	r2, [r3, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095e2:	4619      	mov	r1, r3
  ep->is_stall = 1U;
 80095e4:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80095e6:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 80095e8:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80095ea:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d1e6      	bne.n	80095c0 <HAL_PCD_EP_SetStall+0x34>
 80095f2:	2002      	movs	r0, #2
}
 80095f4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80095f6:	2001      	movs	r0, #1
}
 80095f8:	bd10      	pop	{r4, pc}
 80095fa:	bf00      	nop

080095fc <HAL_PCD_EP_ClrStall>:
{
 80095fc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80095fe:	6843      	ldr	r3, [r0, #4]
 8009600:	f001 020f 	and.w	r2, r1, #15
 8009604:	429a      	cmp	r2, r3
 8009606:	d832      	bhi.n	800966e <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8009608:	060b      	lsls	r3, r1, #24
 800960a:	4604      	mov	r4, r0
 800960c:	d41c      	bmi.n	8009648 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800960e:	f001 0307 	and.w	r3, r1, #7
 8009612:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009616:	00d2      	lsls	r2, r2, #3
 8009618:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800961c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800961e:	4402      	add	r2, r0
  ep->is_stall = 0U;
 8009620:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8009622:	2000      	movs	r0, #0
 8009624:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8009628:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800962a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800962c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009630:	2b01      	cmp	r3, #1
 8009632:	d01a      	beq.n	800966a <HAL_PCD_EP_ClrStall+0x6e>
 8009634:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009636:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009638:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800963c:	f001 ff00 	bl	800b440 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009640:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8009644:	4628      	mov	r0, r5
}
 8009646:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8009648:	2001      	movs	r0, #1
 800964a:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800964e:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 8009650:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009654:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009658:	4611      	mov	r1, r2
  ep->is_stall = 0U;
 800965a:	2500      	movs	r5, #0
    ep->is_in = 1U;
 800965c:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800965e:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8009660:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8009662:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009666:	2b01      	cmp	r3, #1
 8009668:	d1e4      	bne.n	8009634 <HAL_PCD_EP_ClrStall+0x38>
 800966a:	2002      	movs	r0, #2
}
 800966c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800966e:	2001      	movs	r0, #1
}
 8009670:	bd38      	pop	{r3, r4, r5, pc}
 8009672:	bf00      	nop

08009674 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8009674:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009678:	d00b      	beq.n	8009692 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800967a:	f001 0107 	and.w	r1, r1, #7
 800967e:	3101      	adds	r1, #1
 8009680:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009684:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009688:	b95a      	cbnz	r2, 80096a2 <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800968a:	2000      	movs	r0, #0
    ep->pmaadress = (uint16_t)pmaadress;
 800968c:	80cb      	strh	r3, [r1, #6]
 800968e:	730a      	strb	r2, [r1, #12]
}
 8009690:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8009692:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009696:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800969a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 800969e:	2a00      	cmp	r2, #0
 80096a0:	d0f3      	beq.n	800968a <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 80096a2:	2201      	movs	r2, #1
}
 80096a4:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80096a6:	608b      	str	r3, [r1, #8]
 80096a8:	730a      	strb	r2, [r1, #12]
}
 80096aa:	4770      	bx	lr

080096ac <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80096ac:	4b1d      	ldr	r3, [pc, #116]	; (8009724 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 80096ae:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80096b0:	689a      	ldr	r2, [r3, #8]
 80096b2:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80096b6:	d116      	bne.n	80096e6 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80096b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096ba:	00d2      	lsls	r2, r2, #3
 80096bc:	d420      	bmi.n	8009700 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80096c0:	4919      	ldr	r1, [pc, #100]	; (8009728 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80096c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80096c6:	625a      	str	r2, [r3, #36]	; 0x24
 80096c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096ca:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80096ce:	9201      	str	r2, [sp, #4]
 80096d0:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80096d2:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80096d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80096d6:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80096da:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80096de:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80096e2:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80096e4:	d013      	beq.n	800970e <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80096e6:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80096e8:	4a10      	ldr	r2, [pc, #64]	; (800972c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80096ea:	6813      	ldr	r3, [r2, #0]
 80096ec:	f023 0301 	bic.w	r3, r3, #1
 80096f0:	4303      	orrs	r3, r0
 80096f2:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80096f4:	6813      	ldr	r3, [r2, #0]
 80096f6:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80096fa:	4058      	eors	r0, r3
 80096fc:	b002      	add	sp, #8
 80096fe:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009700:	4b09      	ldr	r3, [pc, #36]	; (8009728 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8009708:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800970c:	d1eb      	bne.n	80096e6 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 800970e:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8009712:	d1e8      	bne.n	80096e6 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 8009714:	4a05      	ldr	r2, [pc, #20]	; (800972c <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 8009716:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 8009718:	6813      	ldr	r3, [r2, #0]
 800971a:	f043 0304 	orr.w	r3, r3, #4
 800971e:	6013      	str	r3, [r2, #0]
 8009720:	e7e2      	b.n	80096e8 <RCC_SetFlashLatencyFromMSIRange+0x3c>
 8009722:	bf00      	nop
 8009724:	40023800 	.word	0x40023800
 8009728:	40007000 	.word	0x40007000
 800972c:	40023c00 	.word	0x40023c00

08009730 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8009730:	2800      	cmp	r0, #0
 8009732:	f000 81f8 	beq.w	8009b26 <HAL_RCC_OscConfig+0x3f6>
{
 8009736:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800973a:	4aa2      	ldr	r2, [pc, #648]	; (80099c4 <HAL_RCC_OscConfig+0x294>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800973c:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800973e:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009740:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009742:	07d9      	lsls	r1, r3, #31
 8009744:	4604      	mov	r4, r0
{
 8009746:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009748:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800974c:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009750:	d52e      	bpl.n	80097b0 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009752:	2d08      	cmp	r5, #8
 8009754:	f000 8128 	beq.w	80099a8 <HAL_RCC_OscConfig+0x278>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009758:	2d0c      	cmp	r5, #12
 800975a:	f000 8122 	beq.w	80099a2 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800975e:	6863      	ldr	r3, [r4, #4]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d00f      	beq.n	8009784 <HAL_RCC_OscConfig+0x54>
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 8180 	beq.w	8009a6a <HAL_RCC_OscConfig+0x33a>
 800976a:	2b05      	cmp	r3, #5
 800976c:	4b95      	ldr	r3, [pc, #596]	; (80099c4 <HAL_RCC_OscConfig+0x294>)
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	f000 81db 	beq.w	8009b2a <HAL_RCC_OscConfig+0x3fa>
 8009774:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	e004      	b.n	800978e <HAL_RCC_OscConfig+0x5e>
 8009784:	4a8f      	ldr	r2, [pc, #572]	; (80099c4 <HAL_RCC_OscConfig+0x294>)
 8009786:	6813      	ldr	r3, [r2, #0]
 8009788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800978c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800978e:	f7fd fdc1 	bl	8007314 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009792:	f8df 8230 	ldr.w	r8, [pc, #560]	; 80099c4 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 8009796:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009798:	e005      	b.n	80097a6 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800979a:	f7fd fdbb 	bl	8007314 <HAL_GetTick>
 800979e:	1bc0      	subs	r0, r0, r7
 80097a0:	2864      	cmp	r0, #100	; 0x64
 80097a2:	f200 815e 	bhi.w	8009a62 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097a6:	f8d8 3000 	ldr.w	r3, [r8]
 80097aa:	039b      	lsls	r3, r3, #14
 80097ac:	d5f5      	bpl.n	800979a <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	0799      	lsls	r1, r3, #30
 80097b2:	d522      	bpl.n	80097fa <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80097b4:	2d04      	cmp	r5, #4
 80097b6:	f000 8114 	beq.w	80099e2 <HAL_RCC_OscConfig+0x2b2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80097ba:	2d0c      	cmp	r5, #12
 80097bc:	f000 810e 	beq.w	80099dc <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80097c0:	68e3      	ldr	r3, [r4, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 8179 	beq.w	8009aba <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 80097c8:	2201      	movs	r2, #1
 80097ca:	4b7f      	ldr	r3, [pc, #508]	; (80099c8 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097cc:	4f7d      	ldr	r7, [pc, #500]	; (80099c4 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_ENABLE();
 80097ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80097d0:	f7fd fda0 	bl	8007314 <HAL_GetTick>
 80097d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097d6:	e005      	b.n	80097e4 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097d8:	f7fd fd9c 	bl	8007314 <HAL_GetTick>
 80097dc:	1b80      	subs	r0, r0, r6
 80097de:	2802      	cmp	r0, #2
 80097e0:	f200 813f 	bhi.w	8009a62 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	079b      	lsls	r3, r3, #30
 80097e8:	d5f6      	bpl.n	80097d8 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6922      	ldr	r2, [r4, #16]
 80097ee:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80097f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80097f6:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	06d9      	lsls	r1, r3, #27
 80097fc:	d525      	bpl.n	800984a <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80097fe:	2d00      	cmp	r5, #0
 8009800:	f000 8098 	beq.w	8009934 <HAL_RCC_OscConfig+0x204>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009804:	69a3      	ldr	r3, [r4, #24]
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 816a 	beq.w	8009ae0 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_MSI_ENABLE();
 800980c:	2201      	movs	r2, #1
 800980e:	4b6e      	ldr	r3, [pc, #440]	; (80099c8 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009810:	4e6c      	ldr	r6, [pc, #432]	; (80099c4 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_MSI_ENABLE();
 8009812:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8009814:	f7fd fd7e 	bl	8007314 <HAL_GetTick>
 8009818:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800981a:	e005      	b.n	8009828 <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800981c:	f7fd fd7a 	bl	8007314 <HAL_GetTick>
 8009820:	1bc0      	subs	r0, r0, r7
 8009822:	2802      	cmp	r0, #2
 8009824:	f200 811d 	bhi.w	8009a62 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009828:	6833      	ldr	r3, [r6, #0]
 800982a:	059b      	lsls	r3, r3, #22
 800982c:	d5f6      	bpl.n	800981c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800982e:	6873      	ldr	r3, [r6, #4]
 8009830:	6a22      	ldr	r2, [r4, #32]
 8009832:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009836:	4313      	orrs	r3, r2
 8009838:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800983a:	6873      	ldr	r3, [r6, #4]
 800983c:	69e2      	ldr	r2, [r4, #28]
 800983e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009842:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009846:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	0719      	lsls	r1, r3, #28
 800984c:	d516      	bpl.n	800987c <HAL_RCC_OscConfig+0x14c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800984e:	6963      	ldr	r3, [r4, #20]
 8009850:	2b00      	cmp	r3, #0
 8009852:	f000 8121 	beq.w	8009a98 <HAL_RCC_OscConfig+0x368>
      __HAL_RCC_LSI_ENABLE();
 8009856:	2201      	movs	r2, #1
 8009858:	4b5b      	ldr	r3, [pc, #364]	; (80099c8 <HAL_RCC_OscConfig+0x298>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800985a:	4f5a      	ldr	r7, [pc, #360]	; (80099c4 <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_LSI_ENABLE();
 800985c:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8009860:	f7fd fd58 	bl	8007314 <HAL_GetTick>
 8009864:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009866:	e005      	b.n	8009874 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009868:	f7fd fd54 	bl	8007314 <HAL_GetTick>
 800986c:	1b80      	subs	r0, r0, r6
 800986e:	2802      	cmp	r0, #2
 8009870:	f200 80f7 	bhi.w	8009a62 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009876:	079a      	lsls	r2, r3, #30
 8009878:	d5f6      	bpl.n	8009868 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	075e      	lsls	r6, r3, #29
 800987e:	d53b      	bpl.n	80098f8 <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009880:	4b50      	ldr	r3, [pc, #320]	; (80099c4 <HAL_RCC_OscConfig+0x294>)
 8009882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009884:	00d0      	lsls	r0, r2, #3
 8009886:	f100 8129 	bmi.w	8009adc <HAL_RCC_OscConfig+0x3ac>
      pwrclkchanged = SET;
 800988a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800988c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800988e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009892:	625a      	str	r2, [r3, #36]	; 0x24
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800989e:	4f4b      	ldr	r7, [pc, #300]	; (80099cc <HAL_RCC_OscConfig+0x29c>)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	05d9      	lsls	r1, r3, #23
 80098a4:	f140 80cc 	bpl.w	8009a40 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098a8:	68a3      	ldr	r3, [r4, #8]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	f000 8175 	beq.w	8009b9a <HAL_RCC_OscConfig+0x46a>
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 80a9 	beq.w	8009a08 <HAL_RCC_OscConfig+0x2d8>
 80098b6:	2b05      	cmp	r3, #5
 80098b8:	4b42      	ldr	r3, [pc, #264]	; (80099c4 <HAL_RCC_OscConfig+0x294>)
 80098ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098bc:	f000 818b 	beq.w	8009bd6 <HAL_RCC_OscConfig+0x4a6>
 80098c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098c4:	635a      	str	r2, [r3, #52]	; 0x34
 80098c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098cc:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80098ce:	f7fd fd21 	bl	8007314 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098d2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80098d6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098d8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80099c4 <HAL_RCC_OscConfig+0x294>
 80098dc:	e005      	b.n	80098ea <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098de:	f7fd fd19 	bl	8007314 <HAL_GetTick>
 80098e2:	1bc0      	subs	r0, r0, r7
 80098e4:	4548      	cmp	r0, r9
 80098e6:	f200 80bc 	bhi.w	8009a62 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098ea:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 80098ee:	059b      	lsls	r3, r3, #22
 80098f0:	d5f5      	bpl.n	80098de <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 80098f2:	2e00      	cmp	r6, #0
 80098f4:	f040 814b 	bne.w	8009b8e <HAL_RCC_OscConfig+0x45e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80098fa:	b1b8      	cbz	r0, 800992c <HAL_RCC_OscConfig+0x1fc>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80098fc:	2d0c      	cmp	r5, #12
 80098fe:	f000 8152 	beq.w	8009ba6 <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009902:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8009904:	f04f 0200 	mov.w	r2, #0
 8009908:	4b2f      	ldr	r3, [pc, #188]	; (80099c8 <HAL_RCC_OscConfig+0x298>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800990a:	f000 8116 	beq.w	8009b3a <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_PLL_DISABLE();
 800990e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8009910:	f7fd fd00 	bl	8007314 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009914:	4d2b      	ldr	r5, [pc, #172]	; (80099c4 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8009916:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009918:	e005      	b.n	8009926 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800991a:	f7fd fcfb 	bl	8007314 <HAL_GetTick>
 800991e:	1b00      	subs	r0, r0, r4
 8009920:	2802      	cmp	r0, #2
 8009922:	f200 809e 	bhi.w	8009a62 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	019b      	lsls	r3, r3, #6
 800992a:	d4f6      	bmi.n	800991a <HAL_RCC_OscConfig+0x1ea>
  return HAL_OK;
 800992c:	2000      	movs	r0, #0
}
 800992e:	b003      	add	sp, #12
 8009930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009934:	4b23      	ldr	r3, [pc, #140]	; (80099c4 <HAL_RCC_OscConfig+0x294>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	059a      	lsls	r2, r3, #22
 800993a:	d502      	bpl.n	8009942 <HAL_RCC_OscConfig+0x212>
 800993c:	69a3      	ldr	r3, [r4, #24]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d03b      	beq.n	80099ba <HAL_RCC_OscConfig+0x28a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009942:	4e20      	ldr	r6, [pc, #128]	; (80099c4 <HAL_RCC_OscConfig+0x294>)
 8009944:	6a20      	ldr	r0, [r4, #32]
 8009946:	6873      	ldr	r3, [r6, #4]
 8009948:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800994c:	4298      	cmp	r0, r3
 800994e:	f240 80d7 	bls.w	8009b00 <HAL_RCC_OscConfig+0x3d0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009952:	f7ff feab 	bl	80096ac <RCC_SetFlashLatencyFromMSIRange>
 8009956:	2800      	cmp	r0, #0
 8009958:	d12f      	bne.n	80099ba <HAL_RCC_OscConfig+0x28a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800995a:	6872      	ldr	r2, [r6, #4]
 800995c:	6a23      	ldr	r3, [r4, #32]
 800995e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009962:	431a      	orrs	r2, r3
 8009964:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009966:	6872      	ldr	r2, [r6, #4]
 8009968:	69e1      	ldr	r1, [r4, #28]
 800996a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800996e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009972:	6072      	str	r2, [r6, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009974:	4a13      	ldr	r2, [pc, #76]	; (80099c4 <HAL_RCC_OscConfig+0x294>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009976:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009978:	6891      	ldr	r1, [r2, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800997a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800997e:	3301      	adds	r3, #1
 8009980:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009984:	4a12      	ldr	r2, [pc, #72]	; (80099d0 <HAL_RCC_OscConfig+0x2a0>)
 8009986:	f3c1 1103 	ubfx	r1, r1, #4, #4
 800998a:	5c52      	ldrb	r2, [r2, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800998c:	4811      	ldr	r0, [pc, #68]	; (80099d4 <HAL_RCC_OscConfig+0x2a4>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800998e:	40d3      	lsrs	r3, r2
        status = HAL_InitTick(uwTickPrio);
 8009990:	4a11      	ldr	r2, [pc, #68]	; (80099d8 <HAL_RCC_OscConfig+0x2a8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009992:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick(uwTickPrio);
 8009994:	6810      	ldr	r0, [r2, #0]
 8009996:	f7fd fc7b 	bl	8007290 <HAL_InitTick>
        if(status != HAL_OK)
 800999a:	2800      	cmp	r0, #0
 800999c:	d1c7      	bne.n	800992e <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	e753      	b.n	800984a <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80099a2:	2e00      	cmp	r6, #0
 80099a4:	f43f aedb 	beq.w	800975e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099a8:	4a06      	ldr	r2, [pc, #24]	; (80099c4 <HAL_RCC_OscConfig+0x294>)
 80099aa:	6812      	ldr	r2, [r2, #0]
 80099ac:	0392      	lsls	r2, r2, #14
 80099ae:	f57f aeff 	bpl.w	80097b0 <HAL_RCC_OscConfig+0x80>
 80099b2:	6862      	ldr	r2, [r4, #4]
 80099b4:	2a00      	cmp	r2, #0
 80099b6:	f47f aefb 	bne.w	80097b0 <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 80099ba:	2001      	movs	r0, #1
}
 80099bc:	b003      	add	sp, #12
 80099be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099c2:	bf00      	nop
 80099c4:	40023800 	.word	0x40023800
 80099c8:	42470000 	.word	0x42470000
 80099cc:	40007000 	.word	0x40007000
 80099d0:	0800f558 	.word	0x0800f558
 80099d4:	20000014 	.word	0x20000014
 80099d8:	2000001c 	.word	0x2000001c
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80099dc:	2e00      	cmp	r6, #0
 80099de:	f47f aeef 	bne.w	80097c0 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099e2:	4a81      	ldr	r2, [pc, #516]	; (8009be8 <HAL_RCC_OscConfig+0x4b8>)
 80099e4:	6812      	ldr	r2, [r2, #0]
 80099e6:	0792      	lsls	r2, r2, #30
 80099e8:	d502      	bpl.n	80099f0 <HAL_RCC_OscConfig+0x2c0>
 80099ea:	68e2      	ldr	r2, [r4, #12]
 80099ec:	2a01      	cmp	r2, #1
 80099ee:	d1e4      	bne.n	80099ba <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099f0:	497d      	ldr	r1, [pc, #500]	; (8009be8 <HAL_RCC_OscConfig+0x4b8>)
 80099f2:	6920      	ldr	r0, [r4, #16]
 80099f4:	684a      	ldr	r2, [r1, #4]
 80099f6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80099fa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80099fe:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009a00:	06d9      	lsls	r1, r3, #27
 8009a02:	f57f af22 	bpl.w	800984a <HAL_RCC_OscConfig+0x11a>
 8009a06:	e6fa      	b.n	80097fe <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a08:	4f77      	ldr	r7, [pc, #476]	; (8009be8 <HAL_RCC_OscConfig+0x4b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a0a:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a14:	637b      	str	r3, [r7, #52]	; 0x34
 8009a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a1c:	637b      	str	r3, [r7, #52]	; 0x34
      tickstart = HAL_GetTick();
 8009a1e:	f7fd fc79 	bl	8007314 <HAL_GetTick>
 8009a22:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009a24:	e005      	b.n	8009a32 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a26:	f7fd fc75 	bl	8007314 <HAL_GetTick>
 8009a2a:	eba0 0008 	sub.w	r0, r0, r8
 8009a2e:	4548      	cmp	r0, r9
 8009a30:	d817      	bhi.n	8009a62 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a34:	0598      	lsls	r0, r3, #22
 8009a36:	d4f6      	bmi.n	8009a26 <HAL_RCC_OscConfig+0x2f6>
    if(pwrclkchanged == SET)
 8009a38:	2e00      	cmp	r6, #0
 8009a3a:	f43f af5d 	beq.w	80098f8 <HAL_RCC_OscConfig+0x1c8>
 8009a3e:	e0a6      	b.n	8009b8e <HAL_RCC_OscConfig+0x45e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a46:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8009a48:	f7fd fc64 	bl	8007314 <HAL_GetTick>
 8009a4c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	05da      	lsls	r2, r3, #23
 8009a52:	f53f af29 	bmi.w	80098a8 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a56:	f7fd fc5d 	bl	8007314 <HAL_GetTick>
 8009a5a:	eba0 0008 	sub.w	r0, r0, r8
 8009a5e:	2864      	cmp	r0, #100	; 0x64
 8009a60:	d9f5      	bls.n	8009a4e <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 8009a62:	2003      	movs	r0, #3
}
 8009a64:	b003      	add	sp, #12
 8009a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a6a:	4f5f      	ldr	r7, [pc, #380]	; (8009be8 <HAL_RCC_OscConfig+0x4b8>)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a72:	603b      	str	r3, [r7, #0]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a7a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8009a7c:	f7fd fc4a 	bl	8007314 <HAL_GetTick>
 8009a80:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a82:	e005      	b.n	8009a90 <HAL_RCC_OscConfig+0x360>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a84:	f7fd fc46 	bl	8007314 <HAL_GetTick>
 8009a88:	eba0 0008 	sub.w	r0, r0, r8
 8009a8c:	2864      	cmp	r0, #100	; 0x64
 8009a8e:	d8e8      	bhi.n	8009a62 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	0398      	lsls	r0, r3, #14
 8009a94:	d4f6      	bmi.n	8009a84 <HAL_RCC_OscConfig+0x354>
 8009a96:	e68a      	b.n	80097ae <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 8009a98:	4a54      	ldr	r2, [pc, #336]	; (8009bec <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009a9a:	4f53      	ldr	r7, [pc, #332]	; (8009be8 <HAL_RCC_OscConfig+0x4b8>)
      __HAL_RCC_LSI_DISABLE();
 8009a9c:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8009aa0:	f7fd fc38 	bl	8007314 <HAL_GetTick>
 8009aa4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009aa6:	e004      	b.n	8009ab2 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009aa8:	f7fd fc34 	bl	8007314 <HAL_GetTick>
 8009aac:	1b80      	subs	r0, r0, r6
 8009aae:	2802      	cmp	r0, #2
 8009ab0:	d8d7      	bhi.n	8009a62 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab4:	079b      	lsls	r3, r3, #30
 8009ab6:	d4f7      	bmi.n	8009aa8 <HAL_RCC_OscConfig+0x378>
 8009ab8:	e6df      	b.n	800987a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 8009aba:	4a4c      	ldr	r2, [pc, #304]	; (8009bec <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009abc:	4f4a      	ldr	r7, [pc, #296]	; (8009be8 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_HSI_DISABLE();
 8009abe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009ac0:	f7fd fc28 	bl	8007314 <HAL_GetTick>
 8009ac4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ac6:	e004      	b.n	8009ad2 <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ac8:	f7fd fc24 	bl	8007314 <HAL_GetTick>
 8009acc:	1b80      	subs	r0, r0, r6
 8009ace:	2802      	cmp	r0, #2
 8009ad0:	d8c7      	bhi.n	8009a62 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	0798      	lsls	r0, r3, #30
 8009ad6:	d4f7      	bmi.n	8009ac8 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	e68e      	b.n	80097fa <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 8009adc:	2600      	movs	r6, #0
 8009ade:	e6de      	b.n	800989e <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_MSI_DISABLE();
 8009ae0:	4a42      	ldr	r2, [pc, #264]	; (8009bec <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009ae2:	4f41      	ldr	r7, [pc, #260]	; (8009be8 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_MSI_DISABLE();
 8009ae4:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8009ae6:	f7fd fc15 	bl	8007314 <HAL_GetTick>
 8009aea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009aec:	e004      	b.n	8009af8 <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009aee:	f7fd fc11 	bl	8007314 <HAL_GetTick>
 8009af2:	1b80      	subs	r0, r0, r6
 8009af4:	2802      	cmp	r0, #2
 8009af6:	d8b4      	bhi.n	8009a62 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	0598      	lsls	r0, r3, #22
 8009afc:	d4f7      	bmi.n	8009aee <HAL_RCC_OscConfig+0x3be>
 8009afe:	e74e      	b.n	800999e <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009b00:	6873      	ldr	r3, [r6, #4]
 8009b02:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009b06:	4303      	orrs	r3, r0
 8009b08:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009b0a:	6873      	ldr	r3, [r6, #4]
 8009b0c:	69e2      	ldr	r2, [r4, #28]
 8009b0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009b16:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009b18:	f7ff fdc8 	bl	80096ac <RCC_SetFlashLatencyFromMSIRange>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	f47f af4c 	bne.w	80099ba <HAL_RCC_OscConfig+0x28a>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009b22:	6a23      	ldr	r3, [r4, #32]
 8009b24:	e726      	b.n	8009974 <HAL_RCC_OscConfig+0x244>
    return HAL_ERROR;
 8009b26:	2001      	movs	r0, #1
}
 8009b28:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b2a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009b2e:	601a      	str	r2, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	e629      	b.n	800978e <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 8009b3a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8009b3c:	f7fd fbea 	bl	8007314 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b40:	4e29      	ldr	r6, [pc, #164]	; (8009be8 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8009b42:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b44:	e004      	b.n	8009b50 <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b46:	f7fd fbe5 	bl	8007314 <HAL_GetTick>
 8009b4a:	1b40      	subs	r0, r0, r5
 8009b4c:	2802      	cmp	r0, #2
 8009b4e:	d888      	bhi.n	8009a62 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b50:	6833      	ldr	r3, [r6, #0]
 8009b52:	0199      	lsls	r1, r3, #6
 8009b54:	d4f7      	bmi.n	8009b46 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b56:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 8009b5a:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 8009b5c:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b5e:	68b2      	ldr	r2, [r6, #8]
 8009b60:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009b62:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8009b66:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8009b68:	4a20      	ldr	r2, [pc, #128]	; (8009bec <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b6a:	4303      	orrs	r3, r0
 8009b6c:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 8009b6e:	6611      	str	r1, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8009b70:	f7fd fbd0 	bl	8007314 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b74:	4d1c      	ldr	r5, [pc, #112]	; (8009be8 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8009b76:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b78:	e005      	b.n	8009b86 <HAL_RCC_OscConfig+0x456>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b7a:	f7fd fbcb 	bl	8007314 <HAL_GetTick>
 8009b7e:	1b00      	subs	r0, r0, r4
 8009b80:	2802      	cmp	r0, #2
 8009b82:	f63f af6e 	bhi.w	8009a62 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b86:	682b      	ldr	r3, [r5, #0]
 8009b88:	019a      	lsls	r2, r3, #6
 8009b8a:	d5f6      	bpl.n	8009b7a <HAL_RCC_OscConfig+0x44a>
 8009b8c:	e6ce      	b.n	800992c <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b8e:	4a16      	ldr	r2, [pc, #88]	; (8009be8 <HAL_RCC_OscConfig+0x4b8>)
 8009b90:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8009b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b96:	6253      	str	r3, [r2, #36]	; 0x24
 8009b98:	e6ae      	b.n	80098f8 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b9a:	4a13      	ldr	r2, [pc, #76]	; (8009be8 <HAL_RCC_OscConfig+0x4b8>)
 8009b9c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ba2:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009ba4:	e693      	b.n	80098ce <HAL_RCC_OscConfig+0x19e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ba6:	2801      	cmp	r0, #1
 8009ba8:	f43f aec1 	beq.w	800992e <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8009bac:	4b0e      	ldr	r3, [pc, #56]	; (8009be8 <HAL_RCC_OscConfig+0x4b8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 8009bb0:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bb2:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8009bb6:	4291      	cmp	r1, r2
 8009bb8:	f47f aeff 	bne.w	80099ba <HAL_RCC_OscConfig+0x28a>
 8009bbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009bbe:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bc2:	4291      	cmp	r1, r2
 8009bc4:	f47f aef9 	bne.w	80099ba <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009bc8:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009bca:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 8009bce:	1a18      	subs	r0, r3, r0
 8009bd0:	bf18      	it	ne
 8009bd2:	2001      	movne	r0, #1
 8009bd4:	e6ab      	b.n	800992e <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bda:	635a      	str	r2, [r3, #52]	; 0x34
 8009bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009be2:	635a      	str	r2, [r3, #52]	; 0x34
 8009be4:	e673      	b.n	80098ce <HAL_RCC_OscConfig+0x19e>
 8009be6:	bf00      	nop
 8009be8:	40023800 	.word	0x40023800
 8009bec:	42470000 	.word	0x42470000

08009bf0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	f000 80c2 	beq.w	8009d7a <HAL_RCC_ClockConfig+0x18a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009bf6:	4a85      	ldr	r2, [pc, #532]	; (8009e0c <HAL_RCC_ClockConfig+0x21c>)
{
 8009bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009bfc:	6813      	ldr	r3, [r2, #0]
 8009bfe:	4604      	mov	r4, r0
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	428b      	cmp	r3, r1
 8009c06:	460d      	mov	r5, r1
 8009c08:	d213      	bcs.n	8009c32 <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c0a:	2901      	cmp	r1, #1
 8009c0c:	d103      	bne.n	8009c16 <HAL_RCC_ClockConfig+0x26>
 8009c0e:	6813      	ldr	r3, [r2, #0]
 8009c10:	f043 0304 	orr.w	r3, r3, #4
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	4a7d      	ldr	r2, [pc, #500]	; (8009e0c <HAL_RCC_ClockConfig+0x21c>)
 8009c18:	6813      	ldr	r3, [r2, #0]
 8009c1a:	f023 0301 	bic.w	r3, r3, #1
 8009c1e:	432b      	orrs	r3, r5
 8009c20:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c22:	6813      	ldr	r3, [r2, #0]
 8009c24:	f003 0301 	and.w	r3, r3, #1
 8009c28:	42ab      	cmp	r3, r5
 8009c2a:	d002      	beq.n	8009c32 <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 8009c2c:	2001      	movs	r0, #1
}
 8009c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	0799      	lsls	r1, r3, #30
 8009c36:	d506      	bpl.n	8009c46 <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c38:	4975      	ldr	r1, [pc, #468]	; (8009e10 <HAL_RCC_ClockConfig+0x220>)
 8009c3a:	68a0      	ldr	r0, [r4, #8]
 8009c3c:	688a      	ldr	r2, [r1, #8]
 8009c3e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009c42:	4302      	orrs	r2, r0
 8009c44:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c46:	07da      	lsls	r2, r3, #31
 8009c48:	d529      	bpl.n	8009c9e <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c4a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c4c:	4b70      	ldr	r3, [pc, #448]	; (8009e10 <HAL_RCC_ClockConfig+0x220>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c4e:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c50:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c52:	f000 808e 	beq.w	8009d72 <HAL_RCC_ClockConfig+0x182>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c56:	2a03      	cmp	r2, #3
 8009c58:	f000 8085 	beq.w	8009d66 <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009c5c:	2a01      	cmp	r2, #1
 8009c5e:	f000 80d1 	beq.w	8009e04 <HAL_RCC_ClockConfig+0x214>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009c62:	0598      	lsls	r0, r3, #22
 8009c64:	d5e2      	bpl.n	8009c2c <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c66:	4e6a      	ldr	r6, [pc, #424]	; (8009e10 <HAL_RCC_ClockConfig+0x220>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c68:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c6c:	68b3      	ldr	r3, [r6, #8]
 8009c6e:	f023 0303 	bic.w	r3, r3, #3
 8009c72:	4313      	orrs	r3, r2
 8009c74:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8009c76:	f7fd fb4d 	bl	8007314 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c7a:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8009c7c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d055      	beq.n	8009d2e <HAL_RCC_ClockConfig+0x13e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	d05e      	beq.n	8009d44 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d105      	bne.n	8009c96 <HAL_RCC_ClockConfig+0xa6>
 8009c8a:	e066      	b.n	8009d5a <HAL_RCC_ClockConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c8c:	f7fd fb42 	bl	8007314 <HAL_GetTick>
 8009c90:	1bc0      	subs	r0, r0, r7
 8009c92:	4540      	cmp	r0, r8
 8009c94:	d873      	bhi.n	8009d7e <HAL_RCC_ClockConfig+0x18e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009c96:	68b3      	ldr	r3, [r6, #8]
 8009c98:	f013 0f0c 	tst.w	r3, #12
 8009c9c:	d1f6      	bne.n	8009c8c <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c9e:	4a5b      	ldr	r2, [pc, #364]	; (8009e0c <HAL_RCC_ClockConfig+0x21c>)
 8009ca0:	6813      	ldr	r3, [r2, #0]
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	42ab      	cmp	r3, r5
 8009ca8:	d906      	bls.n	8009cb8 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009caa:	6813      	ldr	r3, [r2, #0]
 8009cac:	f023 0301 	bic.w	r3, r3, #1
 8009cb0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cb2:	6813      	ldr	r3, [r2, #0]
 8009cb4:	07da      	lsls	r2, r3, #31
 8009cb6:	d4b9      	bmi.n	8009c2c <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	0759      	lsls	r1, r3, #29
 8009cbc:	d506      	bpl.n	8009ccc <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009cbe:	4954      	ldr	r1, [pc, #336]	; (8009e10 <HAL_RCC_ClockConfig+0x220>)
 8009cc0:	68e0      	ldr	r0, [r4, #12]
 8009cc2:	688a      	ldr	r2, [r1, #8]
 8009cc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009cc8:	4302      	orrs	r2, r0
 8009cca:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ccc:	071b      	lsls	r3, r3, #28
 8009cce:	d420      	bmi.n	8009d12 <HAL_RCC_ClockConfig+0x122>
  tmpreg = RCC->CFGR;
 8009cd0:	494f      	ldr	r1, [pc, #316]	; (8009e10 <HAL_RCC_ClockConfig+0x220>)
 8009cd2:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8009cd4:	f002 030c 	and.w	r3, r2, #12
 8009cd8:	2b08      	cmp	r3, #8
 8009cda:	d079      	beq.n	8009dd0 <HAL_RCC_ClockConfig+0x1e0>
 8009cdc:	2b0c      	cmp	r3, #12
 8009cde:	d050      	beq.n	8009d82 <HAL_RCC_ClockConfig+0x192>
 8009ce0:	2b04      	cmp	r3, #4
 8009ce2:	d044      	beq.n	8009d6e <HAL_RCC_ClockConfig+0x17e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8009ce4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8009ce8:	684b      	ldr	r3, [r1, #4]
 8009cea:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8009cee:	3301      	adds	r3, #1
 8009cf0:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009cf2:	4b47      	ldr	r3, [pc, #284]	; (8009e10 <HAL_RCC_ClockConfig+0x220>)
 8009cf4:	4a47      	ldr	r2, [pc, #284]	; (8009e14 <HAL_RCC_ClockConfig+0x224>)
 8009cf6:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 8009cf8:	4947      	ldr	r1, [pc, #284]	; (8009e18 <HAL_RCC_ClockConfig+0x228>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009cfa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009cfe:	5cd3      	ldrb	r3, [r2, r3]
 8009d00:	4a46      	ldr	r2, [pc, #280]	; (8009e1c <HAL_RCC_ClockConfig+0x22c>)
 8009d02:	fa20 f303 	lsr.w	r3, r0, r3
}
 8009d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8009d0a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009d0c:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 8009d0e:	f7fd babf 	b.w	8007290 <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d12:	4a3f      	ldr	r2, [pc, #252]	; (8009e10 <HAL_RCC_ClockConfig+0x220>)
 8009d14:	6921      	ldr	r1, [r4, #16]
 8009d16:	6893      	ldr	r3, [r2, #8]
 8009d18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8009d1c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009d20:	6093      	str	r3, [r2, #8]
 8009d22:	e7d5      	b.n	8009cd0 <HAL_RCC_ClockConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d24:	f7fd faf6 	bl	8007314 <HAL_GetTick>
 8009d28:	1bc3      	subs	r3, r0, r7
 8009d2a:	4543      	cmp	r3, r8
 8009d2c:	d827      	bhi.n	8009d7e <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009d2e:	68b3      	ldr	r3, [r6, #8]
 8009d30:	f003 030c 	and.w	r3, r3, #12
 8009d34:	2b08      	cmp	r3, #8
 8009d36:	d1f5      	bne.n	8009d24 <HAL_RCC_ClockConfig+0x134>
 8009d38:	e7b1      	b.n	8009c9e <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d3a:	f7fd faeb 	bl	8007314 <HAL_GetTick>
 8009d3e:	1bc0      	subs	r0, r0, r7
 8009d40:	4540      	cmp	r0, r8
 8009d42:	d81c      	bhi.n	8009d7e <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d44:	68b3      	ldr	r3, [r6, #8]
 8009d46:	f003 030c 	and.w	r3, r3, #12
 8009d4a:	2b0c      	cmp	r3, #12
 8009d4c:	d1f5      	bne.n	8009d3a <HAL_RCC_ClockConfig+0x14a>
 8009d4e:	e7a6      	b.n	8009c9e <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d50:	f7fd fae0 	bl	8007314 <HAL_GetTick>
 8009d54:	1bc0      	subs	r0, r0, r7
 8009d56:	4540      	cmp	r0, r8
 8009d58:	d811      	bhi.n	8009d7e <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009d5a:	68b3      	ldr	r3, [r6, #8]
 8009d5c:	f003 030c 	and.w	r3, r3, #12
 8009d60:	2b04      	cmp	r3, #4
 8009d62:	d1f5      	bne.n	8009d50 <HAL_RCC_ClockConfig+0x160>
 8009d64:	e79b      	b.n	8009c9e <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d66:	019f      	lsls	r7, r3, #6
 8009d68:	f53f af7d 	bmi.w	8009c66 <HAL_RCC_ClockConfig+0x76>
 8009d6c:	e75e      	b.n	8009c2c <HAL_RCC_ClockConfig+0x3c>
      sysclockfreq = HSI_VALUE;
 8009d6e:	482c      	ldr	r0, [pc, #176]	; (8009e20 <HAL_RCC_ClockConfig+0x230>)
 8009d70:	e7bf      	b.n	8009cf2 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d72:	039b      	lsls	r3, r3, #14
 8009d74:	f53f af77 	bmi.w	8009c66 <HAL_RCC_ClockConfig+0x76>
 8009d78:	e758      	b.n	8009c2c <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 8009d7a:	2001      	movs	r0, #1
}
 8009d7c:	4770      	bx	lr
          return HAL_TIMEOUT;
 8009d7e:	2003      	movs	r0, #3
 8009d80:	e755      	b.n	8009c2e <HAL_RCC_ClockConfig+0x3e>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009d82:	4828      	ldr	r0, [pc, #160]	; (8009e24 <HAL_RCC_ClockConfig+0x234>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d84:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009d86:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8009d8a:	5c44      	ldrb	r4, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009d8c:	f3c2 5281 	ubfx	r2, r2, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d90:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009d94:	f102 0201 	add.w	r2, r2, #1
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009d98:	ea4f 1144 	mov.w	r1, r4, lsl #5
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d9c:	d01a      	beq.n	8009dd4 <HAL_RCC_ClockConfig+0x1e4>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009d9e:	1b09      	subs	r1, r1, r4
 8009da0:	eb65 0505 	sbc.w	r5, r5, r5
 8009da4:	01ab      	lsls	r3, r5, #6
 8009da6:	0188      	lsls	r0, r1, #6
 8009da8:	1a40      	subs	r0, r0, r1
 8009daa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009dae:	eb63 0305 	sbc.w	r3, r3, r5
 8009db2:	00c1      	lsls	r1, r0, #3
 8009db4:	00db      	lsls	r3, r3, #3
 8009db6:	190c      	adds	r4, r1, r4
 8009db8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009dbc:	f143 0300 	adc.w	r3, r3, #0
 8009dc0:	0259      	lsls	r1, r3, #9
 8009dc2:	0260      	lsls	r0, r4, #9
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	ea41 51d4 	orr.w	r1, r1, r4, lsr #23
 8009dca:	f7f7 f98f 	bl	80010ec <__aeabi_uldivmod>
 8009dce:	e790      	b.n	8009cf2 <HAL_RCC_ClockConfig+0x102>
  switch (tmpreg & RCC_CFGR_SWS)
 8009dd0:	4815      	ldr	r0, [pc, #84]	; (8009e28 <HAL_RCC_ClockConfig+0x238>)
 8009dd2:	e78e      	b.n	8009cf2 <HAL_RCC_ClockConfig+0x102>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009dd4:	1b0d      	subs	r5, r1, r4
 8009dd6:	eb66 0606 	sbc.w	r6, r6, r6
 8009dda:	01b0      	lsls	r0, r6, #6
 8009ddc:	01a9      	lsls	r1, r5, #6
 8009dde:	1b49      	subs	r1, r1, r5
 8009de0:	ea40 6095 	orr.w	r0, r0, r5, lsr #26
 8009de4:	eb60 0006 	sbc.w	r0, r0, r6
 8009de8:	00c0      	lsls	r0, r0, #3
 8009dea:	ea40 7051 	orr.w	r0, r0, r1, lsr #29
 8009dee:	00c9      	lsls	r1, r1, #3
 8009df0:	190c      	adds	r4, r1, r4
 8009df2:	f140 0000 	adc.w	r0, r0, #0
 8009df6:	0281      	lsls	r1, r0, #10
 8009df8:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 8009dfc:	02a0      	lsls	r0, r4, #10
 8009dfe:	f7f7 f975 	bl	80010ec <__aeabi_uldivmod>
 8009e02:	e776      	b.n	8009cf2 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e04:	079e      	lsls	r6, r3, #30
 8009e06:	f53f af2e 	bmi.w	8009c66 <HAL_RCC_ClockConfig+0x76>
 8009e0a:	e70f      	b.n	8009c2c <HAL_RCC_ClockConfig+0x3c>
 8009e0c:	40023c00 	.word	0x40023c00
 8009e10:	40023800 	.word	0x40023800
 8009e14:	0800f558 	.word	0x0800f558
 8009e18:	2000001c 	.word	0x2000001c
 8009e1c:	20000014 	.word	0x20000014
 8009e20:	00f42400 	.word	0x00f42400
 8009e24:	0800f570 	.word	0x0800f570
 8009e28:	007a1200 	.word	0x007a1200

08009e2c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009e2c:	4b04      	ldr	r3, [pc, #16]	; (8009e40 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8009e2e:	4a05      	ldr	r2, [pc, #20]	; (8009e44 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	4905      	ldr	r1, [pc, #20]	; (8009e48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009e34:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009e38:	5ccb      	ldrb	r3, [r1, r3]
 8009e3a:	6810      	ldr	r0, [r2, #0]
}
 8009e3c:	40d8      	lsrs	r0, r3
 8009e3e:	4770      	bx	lr
 8009e40:	40023800 	.word	0x40023800
 8009e44:	20000014 	.word	0x20000014
 8009e48:	0800f568 	.word	0x0800f568

08009e4c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009e4c:	4b04      	ldr	r3, [pc, #16]	; (8009e60 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8009e4e:	4a05      	ldr	r2, [pc, #20]	; (8009e64 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	4905      	ldr	r1, [pc, #20]	; (8009e68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009e54:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009e58:	5ccb      	ldrb	r3, [r1, r3]
 8009e5a:	6810      	ldr	r0, [r2, #0]
}
 8009e5c:	40d8      	lsrs	r0, r3
 8009e5e:	4770      	bx	lr
 8009e60:	40023800 	.word	0x40023800
 8009e64:	20000014 	.word	0x20000014
 8009e68:	0800f568 	.word	0x0800f568

08009e6c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d049      	beq.n	8009f04 <HAL_TIM_Base_Init+0x98>
{
 8009e70:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e72:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009e76:	4604      	mov	r4, r0
 8009e78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d03c      	beq.n	8009efa <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e80:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e82:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009e84:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e88:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8009e8c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e8e:	d013      	beq.n	8009eb8 <HAL_TIM_Base_Init+0x4c>
 8009e90:	491d      	ldr	r1, [pc, #116]	; (8009f08 <HAL_TIM_Base_Init+0x9c>)
 8009e92:	428a      	cmp	r2, r1
 8009e94:	d010      	beq.n	8009eb8 <HAL_TIM_Base_Init+0x4c>
 8009e96:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009e9a:	428a      	cmp	r2, r1
 8009e9c:	d00c      	beq.n	8009eb8 <HAL_TIM_Base_Init+0x4c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e9e:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8009ea2:	428a      	cmp	r2, r1
 8009ea4:	d00c      	beq.n	8009ec0 <HAL_TIM_Base_Init+0x54>
 8009ea6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009eaa:	428a      	cmp	r2, r1
 8009eac:	d008      	beq.n	8009ec0 <HAL_TIM_Base_Init+0x54>
 8009eae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009eb2:	428a      	cmp	r2, r1
 8009eb4:	d108      	bne.n	8009ec8 <HAL_TIM_Base_Init+0x5c>
 8009eb6:	e003      	b.n	8009ec0 <HAL_TIM_Base_Init+0x54>
    tmpcr1 |= Structure->CounterMode;
 8009eb8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009ebe:	430b      	orrs	r3, r1
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ec0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ec6:	430b      	orrs	r3, r1
  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ec8:	2101      	movs	r1, #1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009eca:	6960      	ldr	r0, [r4, #20]
 8009ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ed0:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ed2:	68e0      	ldr	r0, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8009ed4:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8009ed6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ed8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009eda:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8009edc:	6151      	str	r1, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ede:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ee2:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 8009ee6:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 8009eea:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 8009eee:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 8009ef2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  return HAL_OK;
 8009ef6:	2000      	movs	r0, #0
}
 8009ef8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009efa:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8009efe:	f7fc ffb7 	bl	8006e70 <HAL_TIM_Base_MspInit>
 8009f02:	e7bd      	b.n	8009e80 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8009f04:	2001      	movs	r0, #1
}
 8009f06:	4770      	bx	lr
 8009f08:	40000400 	.word	0x40000400

08009f0c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009f0c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d120      	bne.n	8009f56 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8009f14:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f16:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009f18:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f1c:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f22:	f042 0201 	orr.w	r2, r2, #1
 8009f26:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f28:	d00a      	beq.n	8009f40 <HAL_TIM_Base_Start_IT+0x34>
 8009f2a:	4a0d      	ldr	r2, [pc, #52]	; (8009f60 <HAL_TIM_Base_Start_IT+0x54>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d007      	beq.n	8009f40 <HAL_TIM_Base_Start_IT+0x34>
 8009f30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d003      	beq.n	8009f40 <HAL_TIM_Base_Start_IT+0x34>
 8009f38:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d104      	bne.n	8009f4a <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f40:	689a      	ldr	r2, [r3, #8]
 8009f42:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f46:	2a06      	cmp	r2, #6
 8009f48:	d007      	beq.n	8009f5a <HAL_TIM_Base_Start_IT+0x4e>
    __HAL_TIM_ENABLE(htim);
 8009f4a:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8009f4c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8009f4e:	f042 0201 	orr.w	r2, r2, #1
 8009f52:	601a      	str	r2, [r3, #0]
 8009f54:	4770      	bx	lr
    return HAL_ERROR;
 8009f56:	2001      	movs	r0, #1
 8009f58:	4770      	bx	lr
  return HAL_OK;
 8009f5a:	2000      	movs	r0, #0
}
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	40000400 	.word	0x40000400

08009f64 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 8009f64:	f241 1c11 	movw	ip, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009f68:	6802      	ldr	r2, [r0, #0]
{
 8009f6a:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009f6c:	68d1      	ldr	r1, [r2, #12]
 8009f6e:	f021 0101 	bic.w	r1, r1, #1
 8009f72:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8009f74:	6a11      	ldr	r1, [r2, #32]
 8009f76:	ea11 0f0c 	tst.w	r1, ip
 8009f7a:	d103      	bne.n	8009f84 <HAL_TIM_Base_Stop_IT+0x20>
 8009f7c:	6811      	ldr	r1, [r2, #0]
 8009f7e:	f021 0101 	bic.w	r1, r1, #1
 8009f82:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8009f84:	2201      	movs	r2, #1
}
 8009f86:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8009f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop

08009f90 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8009f90:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8009f94:	2a01      	cmp	r2, #1
 8009f96:	d075      	beq.n	800a084 <HAL_TIM_ConfigClockSource+0xf4>
{
 8009f98:	b430      	push	{r4, r5}
 8009f9a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8009f9c:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8009f9e:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8009fa0:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8009fa2:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8009faa:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8009fac:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fae:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8009fb2:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8009fb6:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8009fb8:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8009fba:	d065      	beq.n	800a088 <HAL_TIM_ConfigClockSource+0xf8>
 8009fbc:	d831      	bhi.n	800a022 <HAL_TIM_ConfigClockSource+0x92>
 8009fbe:	2a40      	cmp	r2, #64	; 0x40
 8009fc0:	d048      	beq.n	800a054 <HAL_TIM_ConfigClockSource+0xc4>
 8009fc2:	d921      	bls.n	800a008 <HAL_TIM_ConfigClockSource+0x78>
 8009fc4:	2a50      	cmp	r2, #80	; 0x50
 8009fc6:	d116      	bne.n	8009ff6 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fc8:	684c      	ldr	r4, [r1, #4]
 8009fca:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fcc:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fce:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8009fd2:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fd4:	6a04      	ldr	r4, [r0, #32]
 8009fd6:	f024 0401 	bic.w	r4, r4, #1
 8009fda:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fdc:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fde:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fe2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fe6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009fe8:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fea:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ff0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ff4:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 8009ff6:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8009ff8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8009ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8009ffe:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  return HAL_OK;
 800a002:	4610      	mov	r0, r2
}
 800a004:	bc30      	pop	{r4, r5}
 800a006:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800a008:	2a20      	cmp	r2, #32
 800a00a:	d002      	beq.n	800a012 <HAL_TIM_ConfigClockSource+0x82>
 800a00c:	d91e      	bls.n	800a04c <HAL_TIM_ConfigClockSource+0xbc>
 800a00e:	2a30      	cmp	r2, #48	; 0x30
 800a010:	d1f1      	bne.n	8009ff6 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 800a012:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a014:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a018:	430a      	orrs	r2, r1
 800a01a:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 800a01e:	6082      	str	r2, [r0, #8]
}
 800a020:	e7e9      	b.n	8009ff6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800a022:	2a70      	cmp	r2, #112	; 0x70
 800a024:	d049      	beq.n	800a0ba <HAL_TIM_ConfigClockSource+0x12a>
 800a026:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a02a:	d1e4      	bne.n	8009ff6 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a02c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800a030:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a032:	432a      	orrs	r2, r5
 800a034:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a036:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a03a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800a03e:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a040:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a042:	6882      	ldr	r2, [r0, #8]
 800a044:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a048:	6082      	str	r2, [r0, #8]
      break;
 800a04a:	e7d4      	b.n	8009ff6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800a04c:	f032 0110 	bics.w	r1, r2, #16
 800a050:	d1d1      	bne.n	8009ff6 <HAL_TIM_ConfigClockSource+0x66>
 800a052:	e7de      	b.n	800a012 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a054:	684c      	ldr	r4, [r1, #4]
 800a056:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800a058:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a05a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800a05e:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a060:	6a04      	ldr	r4, [r0, #32]
 800a062:	f024 0401 	bic.w	r4, r4, #1
 800a066:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a068:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a06a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a06e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800a072:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800a074:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800a076:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a078:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a07c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800a080:	6082      	str	r2, [r0, #8]
}
 800a082:	e7b8      	b.n	8009ff6 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 800a084:	2002      	movs	r0, #2
}
 800a086:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a088:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a08a:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a08c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a090:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a092:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a094:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a096:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a09a:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 800a09e:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800a0a0:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0a6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 800a0aa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800a0ac:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0b2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800a0b6:	6082      	str	r2, [r0, #8]
}
 800a0b8:	e79d      	b.n	8009ff6 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0ba:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800a0be:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0c0:	432a      	orrs	r2, r5
 800a0c2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0c4:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0c8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800a0cc:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800a0ce:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 800a0d0:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0d2:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a0d6:	6082      	str	r2, [r0, #8]
      break;
 800a0d8:	e78d      	b.n	8009ff6 <HAL_TIM_ConfigClockSource+0x66>
 800a0da:	bf00      	nop

0800a0dc <HAL_TIM_OC_DelayElapsedCallback>:
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop

0800a0e0 <HAL_TIM_IC_CaptureCallback>:
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop

0800a0e4 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop

0800a0e8 <HAL_TIM_TriggerCallback>:
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop

0800a0ec <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0ec:	6803      	ldr	r3, [r0, #0]
{
 800a0ee:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0f0:	691a      	ldr	r2, [r3, #16]
{
 800a0f2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0f4:	0791      	lsls	r1, r2, #30
 800a0f6:	d502      	bpl.n	800a0fe <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0f8:	68da      	ldr	r2, [r3, #12]
 800a0fa:	0792      	lsls	r2, r2, #30
 800a0fc:	d450      	bmi.n	800a1a0 <HAL_TIM_IRQHandler+0xb4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0fe:	691a      	ldr	r2, [r3, #16]
 800a100:	0752      	lsls	r2, r2, #29
 800a102:	d502      	bpl.n	800a10a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a104:	68da      	ldr	r2, [r3, #12]
 800a106:	0750      	lsls	r0, r2, #29
 800a108:	d437      	bmi.n	800a17a <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a10a:	691a      	ldr	r2, [r3, #16]
 800a10c:	0711      	lsls	r1, r2, #28
 800a10e:	d502      	bpl.n	800a116 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a110:	68da      	ldr	r2, [r3, #12]
 800a112:	0712      	lsls	r2, r2, #28
 800a114:	d422      	bmi.n	800a15c <HAL_TIM_IRQHandler+0x70>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a116:	691a      	ldr	r2, [r3, #16]
 800a118:	06d0      	lsls	r0, r2, #27
 800a11a:	d502      	bpl.n	800a122 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a11c:	68da      	ldr	r2, [r3, #12]
 800a11e:	06d1      	lsls	r1, r2, #27
 800a120:	d40c      	bmi.n	800a13c <HAL_TIM_IRQHandler+0x50>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a122:	691a      	ldr	r2, [r3, #16]
 800a124:	07d2      	lsls	r2, r2, #31
 800a126:	d502      	bpl.n	800a12e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	07d0      	lsls	r0, r2, #31
 800a12c:	d450      	bmi.n	800a1d0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a12e:	691a      	ldr	r2, [r3, #16]
 800a130:	0651      	lsls	r1, r2, #25
 800a132:	d502      	bpl.n	800a13a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a134:	68da      	ldr	r2, [r3, #12]
 800a136:	0652      	lsls	r2, r2, #25
 800a138:	d443      	bmi.n	800a1c2 <HAL_TIM_IRQHandler+0xd6>
}
 800a13a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a13c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a140:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a142:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a144:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a146:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800a148:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a14a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a14e:	d047      	beq.n	800a1e0 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800a150:	f7ff ffc6 	bl	800a0e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a154:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a156:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a158:	7622      	strb	r2, [r4, #24]
 800a15a:	e7e2      	b.n	800a122 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a15c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a160:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a162:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a164:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a166:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800a168:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a16a:	079b      	lsls	r3, r3, #30
 800a16c:	d044      	beq.n	800a1f8 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 800a16e:	f7ff ffb7 	bl	800a0e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a172:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a174:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a176:	7622      	strb	r2, [r4, #24]
 800a178:	e7cd      	b.n	800a116 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a17a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a17e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a180:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a182:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a184:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800a186:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a188:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a18c:	d131      	bne.n	800a1f2 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a18e:	f7ff ffa5 	bl	800a0dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a192:	4620      	mov	r0, r4
 800a194:	f7ff ffa6 	bl	800a0e4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a198:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a19a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a19c:	7622      	strb	r2, [r4, #24]
 800a19e:	e7b4      	b.n	800a10a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1a0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1a4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1a6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1a8:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	0799      	lsls	r1, r3, #30
 800a1ae:	d11d      	bne.n	800a1ec <HAL_TIM_IRQHandler+0x100>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1b0:	f7ff ff94 	bl	800a0dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f7ff ff95 	bl	800a0e4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ba:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a1bc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1be:	7622      	strb	r2, [r4, #24]
 800a1c0:	e79d      	b.n	800a0fe <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800a1c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a1ca:	f7ff ff8d 	bl	800a0e8 <HAL_TIM_TriggerCallback>
}
 800a1ce:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1d0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1d8:	f7fc fa9e 	bl	8006718 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	e7a6      	b.n	800a12e <HAL_TIM_IRQHandler+0x42>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1e0:	f7ff ff7c 	bl	800a0dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f7ff ff7d 	bl	800a0e4 <HAL_TIM_PWM_PulseFinishedCallback>
 800a1ea:	e7b3      	b.n	800a154 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_IC_CaptureCallback(htim);
 800a1ec:	f7ff ff78 	bl	800a0e0 <HAL_TIM_IC_CaptureCallback>
 800a1f0:	e7e3      	b.n	800a1ba <HAL_TIM_IRQHandler+0xce>
        HAL_TIM_IC_CaptureCallback(htim);
 800a1f2:	f7ff ff75 	bl	800a0e0 <HAL_TIM_IC_CaptureCallback>
 800a1f6:	e7cf      	b.n	800a198 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1f8:	f7ff ff70 	bl	800a0dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f7ff ff71 	bl	800a0e4 <HAL_TIM_PWM_PulseFinishedCallback>
 800a202:	e7b6      	b.n	800a172 <HAL_TIM_IRQHandler+0x86>

0800a204 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a204:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800a208:	2a01      	cmp	r2, #1
 800a20a:	d028      	beq.n	800a25e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800a20c:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a20e:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a210:	681a      	ldr	r2, [r3, #0]
{
 800a212:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800a214:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 800a218:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a21a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800a21c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a220:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a222:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 800a226:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 800a228:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a22a:	d00a      	beq.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800a22c:	480d      	ldr	r0, [pc, #52]	; (800a264 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800a22e:	4282      	cmp	r2, r0
 800a230:	d007      	beq.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800a232:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800a236:	4282      	cmp	r2, r0
 800a238:	d003      	beq.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800a23a:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800a23e:	4282      	cmp	r2, r0
 800a240:	d104      	bne.n	800a24c <HAL_TIMEx_MasterConfigSynchronization+0x48>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a242:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a244:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a248:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a24a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800a24c:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800a24e:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800a250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800a254:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39

  return HAL_OK;
 800a258:	4610      	mov	r0, r2
}
 800a25a:	bc30      	pop	{r4, r5}
 800a25c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a25e:	2002      	movs	r0, #2
}
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	40000400 	.word	0x40000400

0800a268 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a268:	2800      	cmp	r0, #0
 800a26a:	f000 8081 	beq.w	800a370 <HAL_UART_Init+0x108>
{
 800a26e:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a270:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a274:	4604      	mov	r4, r0
 800a276:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d070      	beq.n	800a360 <HAL_UART_Init+0xf8>
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a27e:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800a282:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a284:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800a286:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a288:	4302      	orrs	r2, r0
 800a28a:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 800a28c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a290:	4302      	orrs	r2, r0
 800a292:	69e0      	ldr	r0, [r4, #28]
 800a294:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 800a296:	68d8      	ldr	r0, [r3, #12]
 800a298:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 800a29c:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a29e:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2a0:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2a2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800a2a6:	4329      	orrs	r1, r5
 800a2a8:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800a2aa:	68d9      	ldr	r1, [r3, #12]
 800a2ac:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800a2b0:	f021 010c 	bic.w	r1, r1, #12
 800a2b4:	430a      	orrs	r2, r1
 800a2b6:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2b8:	695a      	ldr	r2, [r3, #20]


  if((huart->Instance == USART1))
 800a2ba:	492e      	ldr	r1, [pc, #184]	; (800a374 <HAL_UART_Init+0x10c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a2c0:	4302      	orrs	r2, r0
  if((huart->Instance == USART1))
 800a2c2:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2c4:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1))
 800a2c6:	d050      	beq.n	800a36a <HAL_UART_Init+0x102>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a2c8:	f7ff fdb0 	bl	8009e2c <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2cc:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a2da:	6863      	ldr	r3, [r4, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2dc:	d027      	beq.n	800a32e <HAL_UART_Init+0xc6>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	fbb0 f3f3 	udiv	r3, r0, r3
 800a2e4:	2564      	movs	r5, #100	; 0x64
 800a2e6:	4824      	ldr	r0, [pc, #144]	; (800a378 <HAL_UART_Init+0x110>)
 800a2e8:	6822      	ldr	r2, [r4, #0]
 800a2ea:	fba0 6103 	umull	r6, r1, r0, r3
 800a2ee:	0949      	lsrs	r1, r1, #5
 800a2f0:	fb05 3311 	mls	r3, r5, r1, r3
 800a2f4:	011b      	lsls	r3, r3, #4
 800a2f6:	3332      	adds	r3, #50	; 0x32
 800a2f8:	fba0 0303 	umull	r0, r3, r0, r3
 800a2fc:	0109      	lsls	r1, r1, #4
 800a2fe:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800a302:	6093      	str	r3, [r2, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a304:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800a306:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a308:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800a30a:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a30c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a310:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a312:	6953      	ldr	r3, [r2, #20]
 800a314:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a318:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800a31a:	68d3      	ldr	r3, [r2, #12]
 800a31c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a320:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a322:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a324:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a328:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 800a32c:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a32e:	005b      	lsls	r3, r3, #1
 800a330:	fbb0 f0f3 	udiv	r0, r0, r3
 800a334:	2364      	movs	r3, #100	; 0x64
 800a336:	4e10      	ldr	r6, [pc, #64]	; (800a378 <HAL_UART_Init+0x110>)
 800a338:	6822      	ldr	r2, [r4, #0]
 800a33a:	fba6 5100 	umull	r5, r1, r6, r0
 800a33e:	094d      	lsrs	r5, r1, #5
 800a340:	fb03 0315 	mls	r3, r3, r5, r0
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	3332      	adds	r3, #50	; 0x32
 800a348:	fba6 1303 	umull	r1, r3, r6, r3
 800a34c:	f3c3 1142 	ubfx	r1, r3, #5, #3
 800a350:	091b      	lsrs	r3, r3, #4
 800a352:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800a356:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a35a:	440b      	add	r3, r1
 800a35c:	6093      	str	r3, [r2, #8]
 800a35e:	e7d1      	b.n	800a304 <HAL_UART_Init+0x9c>
    huart->Lock = HAL_UNLOCKED;
 800a360:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800a364:	f7fc fe20 	bl	8006fa8 <HAL_UART_MspInit>
 800a368:	e789      	b.n	800a27e <HAL_UART_Init+0x16>
    pclk = HAL_RCC_GetPCLK2Freq();
 800a36a:	f7ff fd6f 	bl	8009e4c <HAL_RCC_GetPCLK2Freq>
 800a36e:	e7ad      	b.n	800a2cc <HAL_UART_Init+0x64>
    return HAL_ERROR;
 800a370:	2001      	movs	r0, #1
}
 800a372:	4770      	bx	lr
 800a374:	40013800 	.word	0x40013800
 800a378:	51eb851f 	.word	0x51eb851f

0800a37c <HAL_UART_Transmit_DMA>:
{
 800a37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800a380:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800a384:	2820      	cmp	r0, #32
 800a386:	d12d      	bne.n	800a3e4 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 800a388:	b351      	cbz	r1, 800a3e0 <HAL_UART_Transmit_DMA+0x64>
 800a38a:	b34a      	cbz	r2, 800a3e0 <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 800a38c:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800a390:	2801      	cmp	r0, #1
 800a392:	d027      	beq.n	800a3e4 <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a394:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800a396:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a39a:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a39e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a3a0:	4f11      	ldr	r7, [pc, #68]	; (800a3e8 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a3a2:	4e12      	ldr	r6, [pc, #72]	; (800a3ec <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 800a3a4:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 800a3a6:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a8:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 800a3aa:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 800a3ac:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3b0:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a3b8:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a3bc:	4e0c      	ldr	r6, [pc, #48]	; (800a3f0 <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a3be:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 800a3c0:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a3c2:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a3c4:	f7fd fd0e 	bl	8007de4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a3c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3cc:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800a3ce:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a3d0:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800a3d2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3d6:	695a      	ldr	r2, [r3, #20]
 800a3d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a3dc:	615a      	str	r2, [r3, #20]
}
 800a3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a3e0:	2001      	movs	r0, #1
}
 800a3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800a3e4:	2002      	movs	r0, #2
}
 800a3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3e8:	0800a495 	.word	0x0800a495
 800a3ec:	0800a4c1 	.word	0x0800a4c1
 800a3f0:	0800a4d1 	.word	0x0800a4d1

0800a3f4 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3f4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800a3f8:	2b20      	cmp	r3, #32
 800a3fa:	d13f      	bne.n	800a47c <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800a3fc:	2900      	cmp	r1, #0
 800a3fe:	d03b      	beq.n	800a478 <HAL_UART_Receive_DMA+0x84>
 800a400:	2a00      	cmp	r2, #0
 800a402:	d039      	beq.n	800a478 <HAL_UART_Receive_DMA+0x84>
{
 800a404:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 800a406:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a40a:	4604      	mov	r4, r0
 800a40c:	2b01      	cmp	r3, #1
{
 800a40e:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 800a410:	d036      	beq.n	800a480 <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a412:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800a414:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a418:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 800a41c:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800a41e:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a420:	4f19      	ldr	r7, [pc, #100]	; (800a488 <HAL_UART_Receive_DMA+0x94>)
 800a422:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a424:	4e19      	ldr	r6, [pc, #100]	; (800a48c <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a426:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 800a428:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a42c:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a42e:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a430:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a434:	460a      	mov	r2, r1
 800a436:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a438:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a43c:	4e14      	ldr	r6, [pc, #80]	; (800a490 <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a43e:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 800a440:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a442:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a444:	f7fd fcce 	bl	8007de4 <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 800a448:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	9501      	str	r5, [sp, #4]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	9201      	str	r2, [sp, #4]
 800a452:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 800a454:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a458:	9201      	str	r2, [sp, #4]
 800a45a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a462:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a464:	695a      	ldr	r2, [r3, #20]
 800a466:	f042 0201 	orr.w	r2, r2, #1
 800a46a:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a46c:	695a      	ldr	r2, [r3, #20]
 800a46e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a472:	615a      	str	r2, [r3, #20]
}
 800a474:	b003      	add	sp, #12
 800a476:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a478:	2001      	movs	r0, #1
}
 800a47a:	4770      	bx	lr
    return HAL_BUSY;
 800a47c:	2002      	movs	r0, #2
 800a47e:	4770      	bx	lr
 800a480:	2002      	movs	r0, #2
}
 800a482:	b003      	add	sp, #12
 800a484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a486:	bf00      	nop
 800a488:	0800a57d 	.word	0x0800a57d
 800a48c:	0800a561 	.word	0x0800a561
 800a490:	0800a4d1 	.word	0x0800a4d1

0800a494 <UART_DMATransmitCplt>:
{
 800a494:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a496:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a498:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f013 0320 	ands.w	r3, r3, #32
 800a4a0:	d10a      	bne.n	800a4b8 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4a2:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 800a4a4:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4a6:	6953      	ldr	r3, [r2, #20]
 800a4a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4ac:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4ae:	68d3      	ldr	r3, [r2, #12]
 800a4b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b4:	60d3      	str	r3, [r2, #12]
}
 800a4b6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800a4b8:	f7fc fbac 	bl	8006c14 <HAL_UART_TxCpltCallback>
}
 800a4bc:	bd08      	pop	{r3, pc}
 800a4be:	bf00      	nop

0800a4c0 <UART_DMATxHalfCplt>:
{
 800a4c0:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800a4c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a4c4:	f7fc fb92 	bl	8006bec <HAL_UART_TxHalfCpltCallback>
}
 800a4c8:	bd08      	pop	{r3, pc}
 800a4ca:	bf00      	nop

0800a4cc <HAL_UART_RxHalfCpltCallback>:
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop

0800a4d0 <UART_DMAError>:
{
 800a4d0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a4d4:	6803      	ldr	r3, [r0, #0]
 800a4d6:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a4d8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800a4dc:	2a21      	cmp	r2, #33	; 0x21
 800a4de:	d00b      	beq.n	800a4f8 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4e0:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a4e2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800a4e6:	2a22      	cmp	r2, #34	; 0x22
 800a4e8:	d016      	beq.n	800a518 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a4ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a4ec:	f043 0310 	orr.w	r3, r3, #16
 800a4f0:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 800a4f2:	f7fc fb71 	bl	8006bd8 <HAL_UART_ErrorCallback>
}
 800a4f6:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a4f8:	0609      	lsls	r1, r1, #24
 800a4fa:	d5f1      	bpl.n	800a4e0 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800a4fc:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 800a4fe:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 800a500:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a502:	68da      	ldr	r2, [r3, #12]
 800a504:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a508:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800a50a:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a50e:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a510:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800a514:	2a22      	cmp	r2, #34	; 0x22
 800a516:	d1e8      	bne.n	800a4ea <UART_DMAError+0x1a>
 800a518:	064a      	lsls	r2, r1, #25
 800a51a:	d5e6      	bpl.n	800a4ea <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800a51c:	2200      	movs	r2, #0
 800a51e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a526:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a528:	695a      	ldr	r2, [r3, #20]
 800a52a:	f022 0201 	bic.w	r2, r2, #1
 800a52e:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a530:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800a532:	2a01      	cmp	r2, #1
 800a534:	d103      	bne.n	800a53e <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a536:	68da      	ldr	r2, [r3, #12]
 800a538:	f022 0210 	bic.w	r2, r2, #16
 800a53c:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 800a53e:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a540:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a542:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a546:	6303      	str	r3, [r0, #48]	; 0x30
}
 800a548:	e7cf      	b.n	800a4ea <UART_DMAError+0x1a>
 800a54a:	bf00      	nop

0800a54c <UART_DMAAbortOnError>:
{
 800a54c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800a54e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a550:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800a552:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a554:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800a556:	f7fc fb3f 	bl	8006bd8 <HAL_UART_ErrorCallback>
}
 800a55a:	bd08      	pop	{r3, pc}

0800a55c <HAL_UARTEx_RxEventCallback>:
}
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop

0800a560 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a560:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800a562:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a564:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a566:	2b01      	cmp	r3, #1
 800a568:	d002      	beq.n	800a570 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800a56a:	f7ff ffaf 	bl	800a4cc <HAL_UART_RxHalfCpltCallback>
}
 800a56e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a570:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800a572:	0849      	lsrs	r1, r1, #1
 800a574:	f7ff fff2 	bl	800a55c <HAL_UARTEx_RxEventCallback>
}
 800a578:	bd08      	pop	{r3, pc}
 800a57a:	bf00      	nop

0800a57c <UART_DMAReceiveCplt>:
{
 800a57c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a57e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a580:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f013 0320 	ands.w	r3, r3, #32
 800a588:	d113      	bne.n	800a5b2 <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 800a58a:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a58c:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 800a58e:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a590:	68d3      	ldr	r3, [r2, #12]
 800a592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a596:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a598:	6953      	ldr	r3, [r2, #20]
 800a59a:	f023 0301 	bic.w	r3, r3, #1
 800a59e:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5a0:	6953      	ldr	r3, [r2, #20]
 800a5a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5a6:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800a5a8:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d009      	beq.n	800a5c6 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d002      	beq.n	800a5be <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 800a5b8:	f7fc f9f2 	bl	80069a0 <HAL_UART_RxCpltCallback>
}
 800a5bc:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5be:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800a5c0:	f7ff ffcc 	bl	800a55c <HAL_UARTEx_RxEventCallback>
}
 800a5c4:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5c6:	68d3      	ldr	r3, [r2, #12]
 800a5c8:	f023 0310 	bic.w	r3, r3, #16
 800a5cc:	60d3      	str	r3, [r2, #12]
 800a5ce:	e7f0      	b.n	800a5b2 <UART_DMAReceiveCplt+0x36>

0800a5d0 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5d0:	6883      	ldr	r3, [r0, #8]
 800a5d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5d6:	d03b      	beq.n	800a650 <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a5d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d030      	beq.n	800a640 <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5de:	6803      	ldr	r3, [r0, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5e6:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800a5e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800a5ee:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800a5f6:	bb53      	cbnz	r3, 800a64e <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 800a5f8:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a5fc:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800a5fe:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a600:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800a602:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a604:	f021 0120 	bic.w	r1, r1, #32
 800a608:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a60a:	68d1      	ldr	r1, [r2, #12]
 800a60c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a610:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a612:	6951      	ldr	r1, [r2, #20]
 800a614:	f021 0101 	bic.w	r1, r1, #1
 800a618:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800a61a:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a61e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a620:	2901      	cmp	r1, #1
 800a622:	d120      	bne.n	800a666 <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a624:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a626:	68d1      	ldr	r1, [r2, #12]
 800a628:	f021 0110 	bic.w	r1, r1, #16
 800a62c:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a62e:	6811      	ldr	r1, [r2, #0]
 800a630:	06c9      	lsls	r1, r1, #27
 800a632:	d422      	bmi.n	800a67a <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a634:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800a636:	f7ff ff91 	bl	800a55c <HAL_UARTEx_RxEventCallback>
}
 800a63a:	b003      	add	sp, #12
 800a63c:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a640:	6903      	ldr	r3, [r0, #16]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1cb      	bne.n	800a5de <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a646:	6803      	ldr	r3, [r0, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	7013      	strb	r3, [r2, #0]
 800a64c:	e7cc      	b.n	800a5e8 <UART_Receive_IT.part.0.isra.0+0x18>
 800a64e:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a650:	6903      	ldr	r3, [r0, #16]
 800a652:	b96b      	cbnz	r3, 800a670 <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a654:	6802      	ldr	r2, [r0, #0]
 800a656:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a658:	6852      	ldr	r2, [r2, #4]
 800a65a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a65e:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800a662:	6283      	str	r3, [r0, #40]	; 0x28
 800a664:	e7c3      	b.n	800a5ee <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 800a666:	f7fc f99b 	bl	80069a0 <HAL_UART_RxCpltCallback>
}
 800a66a:	b003      	add	sp, #12
 800a66c:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a670:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a672:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	7013      	strb	r3, [r2, #0]
 800a678:	e7b6      	b.n	800a5e8 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a67a:	9301      	str	r3, [sp, #4]
 800a67c:	6813      	ldr	r3, [r2, #0]
 800a67e:	9301      	str	r3, [sp, #4]
 800a680:	6853      	ldr	r3, [r2, #4]
 800a682:	9301      	str	r3, [sp, #4]
 800a684:	9b01      	ldr	r3, [sp, #4]
 800a686:	e7d5      	b.n	800a634 <UART_Receive_IT.part.0.isra.0+0x64>

0800a688 <HAL_UART_IRQHandler>:
{
 800a688:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a68a:	6803      	ldr	r3, [r0, #0]
{
 800a68c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a68e:	681a      	ldr	r2, [r3, #0]
{
 800a690:	b083      	sub	sp, #12
  if (errorflags == RESET)
 800a692:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a696:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a698:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800a69a:	d14e      	bne.n	800a73a <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a69c:	0695      	lsls	r5, r2, #26
 800a69e:	d502      	bpl.n	800a6a6 <HAL_UART_IRQHandler+0x1e>
 800a6a0:	068d      	lsls	r5, r1, #26
 800a6a2:	f100 8090 	bmi.w	800a7c6 <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a6a8:	2801      	cmp	r0, #1
 800a6aa:	d00b      	beq.n	800a6c4 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a6ac:	0610      	lsls	r0, r2, #24
 800a6ae:	d502      	bpl.n	800a6b6 <HAL_UART_IRQHandler+0x2e>
 800a6b0:	060d      	lsls	r5, r1, #24
 800a6b2:	f100 8092 	bmi.w	800a7da <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a6b6:	0650      	lsls	r0, r2, #25
 800a6b8:	d502      	bpl.n	800a6c0 <HAL_UART_IRQHandler+0x38>
 800a6ba:	064a      	lsls	r2, r1, #25
 800a6bc:	f100 80ab 	bmi.w	800a816 <HAL_UART_IRQHandler+0x18e>
}
 800a6c0:	b003      	add	sp, #12
 800a6c2:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a6c4:	06d0      	lsls	r0, r2, #27
 800a6c6:	d5f1      	bpl.n	800a6ac <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a6c8:	06cd      	lsls	r5, r1, #27
 800a6ca:	d5ef      	bpl.n	800a6ac <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	9101      	str	r1, [sp, #4]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	9201      	str	r2, [sp, #4]
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	9201      	str	r2, [sp, #4]
 800a6d8:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6da:	695a      	ldr	r2, [r3, #20]
 800a6dc:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800a6e0:	f000 80d2 	beq.w	800a888 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a6e6:	6802      	ldr	r2, [r0, #0]
 800a6e8:	6852      	ldr	r2, [r2, #4]
 800a6ea:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800a6ec:	2a00      	cmp	r2, #0
 800a6ee:	d0e7      	beq.n	800a6c0 <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a6f0:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800a6f2:	4295      	cmp	r5, r2
 800a6f4:	d9e4      	bls.n	800a6c0 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800a6f6:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a6f8:	6982      	ldr	r2, [r0, #24]
 800a6fa:	2a20      	cmp	r2, #32
 800a6fc:	d016      	beq.n	800a72c <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6fe:	68da      	ldr	r2, [r3, #12]
 800a700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a704:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a706:	695a      	ldr	r2, [r3, #20]
 800a708:	f022 0201 	bic.w	r2, r2, #1
 800a70c:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a70e:	695a      	ldr	r2, [r3, #20]
 800a710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a714:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800a716:	2220      	movs	r2, #32
 800a718:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a71c:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a71e:	68da      	ldr	r2, [r3, #12]
 800a720:	f022 0210 	bic.w	r2, r2, #16
 800a724:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a726:	f7fd fba7 	bl	8007e78 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a72a:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800a72c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800a72e:	4620      	mov	r0, r4
 800a730:	1a69      	subs	r1, r5, r1
 800a732:	b289      	uxth	r1, r1
 800a734:	f7ff ff12 	bl	800a55c <HAL_UARTEx_RxEventCallback>
 800a738:	e7c2      	b.n	800a6c0 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a73a:	f005 0501 	and.w	r5, r5, #1
 800a73e:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800a742:	4328      	orrs	r0, r5
 800a744:	d0af      	beq.n	800a6a6 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a746:	07d0      	lsls	r0, r2, #31
 800a748:	d505      	bpl.n	800a756 <HAL_UART_IRQHandler+0xce>
 800a74a:	05c8      	lsls	r0, r1, #23
 800a74c:	d503      	bpl.n	800a756 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a74e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a750:	f040 0001 	orr.w	r0, r0, #1
 800a754:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a756:	0750      	lsls	r0, r2, #29
 800a758:	d530      	bpl.n	800a7bc <HAL_UART_IRQHandler+0x134>
 800a75a:	b14d      	cbz	r5, 800a770 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a75c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a75e:	f040 0002 	orr.w	r0, r0, #2
 800a762:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a764:	0790      	lsls	r0, r2, #30
 800a766:	d503      	bpl.n	800a770 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a768:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a76a:	f040 0004 	orr.w	r0, r0, #4
 800a76e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a770:	0710      	lsls	r0, r2, #28
 800a772:	d507      	bpl.n	800a784 <HAL_UART_IRQHandler+0xfc>
 800a774:	f001 0020 	and.w	r0, r1, #32
 800a778:	4328      	orrs	r0, r5
 800a77a:	d003      	beq.n	800a784 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a77c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a77e:	f040 0008 	orr.w	r0, r0, #8
 800a782:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a784:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a786:	2800      	cmp	r0, #0
 800a788:	d09a      	beq.n	800a6c0 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a78a:	0690      	lsls	r0, r2, #26
 800a78c:	d509      	bpl.n	800a7a2 <HAL_UART_IRQHandler+0x11a>
 800a78e:	068a      	lsls	r2, r1, #26
 800a790:	d507      	bpl.n	800a7a2 <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a792:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800a796:	2a22      	cmp	r2, #34	; 0x22
 800a798:	d103      	bne.n	800a7a2 <HAL_UART_IRQHandler+0x11a>
 800a79a:	4620      	mov	r0, r4
 800a79c:	f7ff ff18 	bl	800a5d0 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7a0:	6823      	ldr	r3, [r4, #0]
 800a7a2:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a7a4:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7a6:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a7aa:	f005 0508 	and.w	r5, r5, #8
 800a7ae:	4315      	orrs	r5, r2
 800a7b0:	d13c      	bne.n	800a82c <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f7fc fa10 	bl	8006bd8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7b8:	6425      	str	r5, [r4, #64]	; 0x40
 800a7ba:	e781      	b.n	800a6c0 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a7bc:	0790      	lsls	r0, r2, #30
 800a7be:	d5d7      	bpl.n	800a770 <HAL_UART_IRQHandler+0xe8>
 800a7c0:	2d00      	cmp	r5, #0
 800a7c2:	d1d1      	bne.n	800a768 <HAL_UART_IRQHandler+0xe0>
 800a7c4:	e7d4      	b.n	800a770 <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7c6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800a7ca:	2b22      	cmp	r3, #34	; 0x22
 800a7cc:	f47f af78 	bne.w	800a6c0 <HAL_UART_IRQHandler+0x38>
}
 800a7d0:	b003      	add	sp, #12
 800a7d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7d6:	f7ff befb 	b.w	800a5d0 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a7da:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800a7de:	2a21      	cmp	r2, #33	; 0x21
 800a7e0:	f47f af6e 	bne.w	800a6c0 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7e4:	68a2      	ldr	r2, [r4, #8]
 800a7e6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a7ea:	d06e      	beq.n	800a8ca <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a7ec:	6a22      	ldr	r2, [r4, #32]
 800a7ee:	1c51      	adds	r1, r2, #1
 800a7f0:	6221      	str	r1, [r4, #32]
 800a7f2:	7812      	ldrb	r2, [r2, #0]
 800a7f4:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800a7f6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800a7f8:	3a01      	subs	r2, #1
 800a7fa:	b292      	uxth	r2, r2
 800a7fc:	84e2      	strh	r2, [r4, #38]	; 0x26
 800a7fe:	2a00      	cmp	r2, #0
 800a800:	f47f af5e 	bne.w	800a6c0 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a804:	68da      	ldr	r2, [r3, #12]
 800a806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a80a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a80c:	68da      	ldr	r2, [r3, #12]
 800a80e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a812:	60da      	str	r2, [r3, #12]
 800a814:	e754      	b.n	800a6c0 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 800a816:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a818:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800a81a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a81c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a820:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800a822:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800a826:	f7fc f9f5 	bl	8006c14 <HAL_UART_TxCpltCallback>
    return;
 800a82a:	e749      	b.n	800a6c0 <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a832:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a834:	695a      	ldr	r2, [r3, #20]
 800a836:	f022 0201 	bic.w	r2, r2, #1
 800a83a:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a83c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a83e:	2a01      	cmp	r2, #1
 800a840:	d103      	bne.n	800a84a <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a842:	68da      	ldr	r2, [r3, #12]
 800a844:	f022 0210 	bic.w	r2, r2, #16
 800a848:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a84a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a84c:	2120      	movs	r1, #32
 800a84e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a852:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a854:	695a      	ldr	r2, [r3, #20]
 800a856:	0655      	lsls	r5, r2, #25
 800a858:	d512      	bpl.n	800a880 <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a85a:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800a85c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a85e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a862:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800a864:	b160      	cbz	r0, 800a880 <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a866:	4b1e      	ldr	r3, [pc, #120]	; (800a8e0 <HAL_UART_IRQHandler+0x258>)
 800a868:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a86a:	f7fd fb2d 	bl	8007ec8 <HAL_DMA_Abort_IT>
 800a86e:	2800      	cmp	r0, #0
 800a870:	f43f af26 	beq.w	800a6c0 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a874:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a876:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800a878:	b003      	add	sp, #12
 800a87a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a87e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800a880:	4620      	mov	r0, r4
 800a882:	f7fc f9a9 	bl	8006bd8 <HAL_UART_ErrorCallback>
 800a886:	e71b      	b.n	800a6c0 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a888:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 800a88a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a88c:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800a88e:	b289      	uxth	r1, r1
 800a890:	2900      	cmp	r1, #0
 800a892:	f43f af15 	beq.w	800a6c0 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a896:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800a898:	1a08      	subs	r0, r1, r0
 800a89a:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800a89c:	2900      	cmp	r1, #0
 800a89e:	f43f af0f 	beq.w	800a6c0 <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 800a8a2:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8a4:	68d8      	ldr	r0, [r3, #12]
 800a8a6:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800a8aa:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ac:	6958      	ldr	r0, [r3, #20]
 800a8ae:	f020 0001 	bic.w	r0, r0, #1
 800a8b2:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800a8b4:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8b8:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8ba:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8bc:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8be:	f022 0210 	bic.w	r2, r2, #16
 800a8c2:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8c4:	f7ff fe4a 	bl	800a55c <HAL_UARTEx_RxEventCallback>
 800a8c8:	e6fa      	b.n	800a6c0 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8ca:	6922      	ldr	r2, [r4, #16]
 800a8cc:	2a00      	cmp	r2, #0
 800a8ce:	d18d      	bne.n	800a7ec <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a8d0:	6a22      	ldr	r2, [r4, #32]
 800a8d2:	f832 1b02 	ldrh.w	r1, [r2], #2
 800a8d6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800a8da:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a8dc:	6222      	str	r2, [r4, #32]
 800a8de:	e78a      	b.n	800a7f6 <HAL_UART_IRQHandler+0x16e>
 800a8e0:	0800a54d 	.word	0x0800a54d

0800a8e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a8e4:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a8e6:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a8e8:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800a8ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 800a8f0:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 800a8f2:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800a8f6:	4770      	bx	lr

0800a8f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a8f8:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a8fa:	f244 02ff 	movw	r2, #16639	; 0x40ff
 800a8fe:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40

  return HAL_OK;
}
 800a902:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a904:	400a      	ands	r2, r1
 800a906:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800a90a:	4770      	bx	lr

0800a90c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a90c:	b084      	sub	sp, #16
 800a90e:	f10d 0c04 	add.w	ip, sp, #4
 800a912:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800a916:	4603      	mov	r3, r0
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a918:	2200      	movs	r2, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a91a:	2101      	movs	r1, #1

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 800a91c:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a91e:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800a922:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 800a924:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 800a928:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800a92c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop

0800a934 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a934:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a936:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800a938:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a93c:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
{
 800a940:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a942:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 800a946:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800a94a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800a94e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  switch (ep->type)
 800a952:	f1be 0f03 	cmp.w	lr, #3
 800a956:	f200 815a 	bhi.w	800ac0e <USB_ActivateEndpoint+0x2da>
 800a95a:	e8df f00e 	tbb	[pc, lr]
 800a95e:	4e52      	.short	0x4e52
 800a960:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a962:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800a966:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a968:	f248 0580 	movw	r5, #32896	; 0x8080
 800a96c:	ea4c 0c05 	orr.w	ip, ip, r5
 800a970:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a974:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800a978:	4ca6      	ldr	r4, [pc, #664]	; (800ac14 <USB_ActivateEndpoint+0x2e0>)
 800a97a:	fa1f fc8c 	uxth.w	ip, ip
 800a97e:	ea0c 0c04 	and.w	ip, ip, r4
 800a982:	ea4c 0c02 	orr.w	ip, ip, r2
 800a986:	ea45 050c 	orr.w	r5, r5, ip
 800a98a:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800a98e:	7b0d      	ldrb	r5, [r1, #12]
 800a990:	2d00      	cmp	r5, #0
 800a992:	d17e      	bne.n	800aa92 <USB_ActivateEndpoint+0x15e>
  {
    if (ep->is_in != 0U)
 800a994:	784d      	ldrb	r5, [r1, #1]
 800a996:	2d00      	cmp	r5, #0
 800a998:	f000 80dd 	beq.w	800ab56 <USB_ActivateEndpoint+0x222>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a99c:	88c9      	ldrh	r1, [r1, #6]
 800a99e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800a9a2:	0849      	lsrs	r1, r1, #1
 800a9a4:	eb03 1602 	add.w	r6, r3, r2, lsl #4
 800a9a8:	0049      	lsls	r1, r1, #1
 800a9aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a9ae:	b2ad      	uxth	r5, r5
 800a9b0:	5371      	strh	r1, [r6, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9b2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a9b6:	064e      	lsls	r6, r1, #25
 800a9b8:	d509      	bpl.n	800a9ce <USB_ActivateEndpoint+0x9a>
 800a9ba:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800a9be:	b289      	uxth	r1, r1
 800a9c0:	400c      	ands	r4, r1
 800a9c2:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800a9c6:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800a9ca:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a9ce:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800a9d2:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a9d6:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800a9da:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800a9de:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800a9e2:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 800a9e6:	d04d      	beq.n	800aa84 <USB_ActivateEndpoint+0x150>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a9e8:	f081 0120 	eor.w	r1, r1, #32
 800a9ec:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a9f0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a9f4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800a9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef ret = HAL_OK;
 800a9fa:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a9fc:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
      break;
 800aa00:	e7b2      	b.n	800a968 <USB_ActivateEndpoint+0x34>
  HAL_StatusTypeDef ret = HAL_OK;
 800aa02:	4670      	mov	r0, lr
      wEpRegVal |= USB_EP_CONTROL;
 800aa04:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 800aa08:	e7ae      	b.n	800a968 <USB_ActivateEndpoint+0x34>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa0a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800aa0e:	044d      	lsls	r5, r1, #17
 800aa10:	d509      	bpl.n	800aa26 <USB_ActivateEndpoint+0xf2>
 800aa12:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800aa16:	b289      	uxth	r1, r1
 800aa18:	400c      	ands	r4, r1
 800aa1a:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800aa1e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800aa22:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa26:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800aa2a:	0649      	lsls	r1, r1, #25
 800aa2c:	d50d      	bpl.n	800aa4a <USB_ActivateEndpoint+0x116>
 800aa2e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800aa32:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800aa36:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800aa3a:	0409      	lsls	r1, r1, #16
 800aa3c:	0c09      	lsrs	r1, r1, #16
 800aa3e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800aa42:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800aa46:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa4a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800aa4e:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa52:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800aa56:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800aa5a:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800aa5e:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800aa62:	bf18      	it	ne
 800aa64:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa68:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800aa6c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800aa70:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa74:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800aa78:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800aa7c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800aa80:	0409      	lsls	r1, r1, #16
 800aa82:	0c09      	lsrs	r1, r1, #16
 800aa84:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800aa88:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800aa8c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800aa90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF(USBx, ep->num);
 800aa92:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800aa96:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800aa9a:	fa1f fc8c 	uxth.w	ip, ip
 800aa9e:	ea0c 0c04 	and.w	ip, ip, r4
 800aaa2:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 800aaa6:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800aaaa:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800aaae:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 800aab2:	890e      	ldrh	r6, [r1, #8]
 800aab4:	fa1f fc8c 	uxth.w	ip, ip
 800aab8:	0876      	lsrs	r6, r6, #1
 800aaba:	44bc      	add	ip, r7
 800aabc:	0076      	lsls	r6, r6, #1
 800aabe:	f8ac 6400 	strh.w	r6, [ip, #1024]	; 0x400
 800aac2:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800aac6:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800aaca:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800aace:	b2ad      	uxth	r5, r5
 800aad0:	443d      	add	r5, r7
 800aad2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800aad6:	f8a5 c408 	strh.w	ip, [r5, #1032]	; 0x408
    if (ep->is_in == 0U)
 800aada:	7849      	ldrb	r1, [r1, #1]
 800aadc:	2900      	cmp	r1, #0
 800aade:	d194      	bne.n	800aa0a <USB_ActivateEndpoint+0xd6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aae0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800aae4:	044f      	lsls	r7, r1, #17
 800aae6:	d509      	bpl.n	800aafc <USB_ActivateEndpoint+0x1c8>
 800aae8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800aaec:	b289      	uxth	r1, r1
 800aaee:	400c      	ands	r4, r1
 800aaf0:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800aaf4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800aaf8:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aafc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800ab00:	064e      	lsls	r6, r1, #25
 800ab02:	d50d      	bpl.n	800ab20 <USB_ActivateEndpoint+0x1ec>
 800ab04:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800ab08:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800ab0c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800ab10:	0409      	lsls	r1, r1, #16
 800ab12:	0c09      	lsrs	r1, r1, #16
 800ab14:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800ab18:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800ab1c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab20:	f248 0480 	movw	r4, #32896	; 0x8080
 800ab24:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800ab28:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800ab2c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800ab30:	0409      	lsls	r1, r1, #16
 800ab32:	0c09      	lsrs	r1, r1, #16
 800ab34:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800ab38:	4321      	orrs	r1, r4
 800ab3a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ab3e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800ab42:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800ab46:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800ab4a:	0409      	lsls	r1, r1, #16
 800ab4c:	0c09      	lsrs	r1, r1, #16
 800ab4e:	4321      	orrs	r1, r4
 800ab50:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800ab54:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ab56:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800ab5a:	88cd      	ldrh	r5, [r1, #6]
 800ab5c:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800ab60:	b2a4      	uxth	r4, r4
 800ab62:	086d      	lsrs	r5, r5, #1
 800ab64:	006d      	lsls	r5, r5, #1
 800ab66:	443c      	add	r4, r7
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ab68:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ab6a:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ab6e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800ab72:	b289      	uxth	r1, r1
 800ab74:	4439      	add	r1, r7
 800ab76:	b366      	cbz	r6, 800abd2 <USB_ActivateEndpoint+0x29e>
 800ab78:	2e3e      	cmp	r6, #62	; 0x3e
 800ab7a:	d83c      	bhi.n	800abf6 <USB_ActivateEndpoint+0x2c2>
 800ab7c:	0874      	lsrs	r4, r6, #1
 800ab7e:	07f5      	lsls	r5, r6, #31
 800ab80:	bf48      	it	mi
 800ab82:	3401      	addmi	r4, #1
 800ab84:	02a4      	lsls	r4, r4, #10
 800ab86:	b2a4      	uxth	r4, r4
 800ab88:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab8c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800ab90:	0449      	lsls	r1, r1, #17
 800ab92:	d50d      	bpl.n	800abb0 <USB_ActivateEndpoint+0x27c>
 800ab94:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800ab98:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800ab9c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800aba0:	0409      	lsls	r1, r1, #16
 800aba2:	0c09      	lsrs	r1, r1, #16
 800aba4:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800aba8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800abac:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800abb0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800abb4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800abb8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800abbc:	0409      	lsls	r1, r1, #16
 800abbe:	0c09      	lsrs	r1, r1, #16
 800abc0:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800abc4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800abc8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800abcc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800abd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800abd2:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800abd6:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800abda:	0424      	lsls	r4, r4, #16
 800abdc:	0c24      	lsrs	r4, r4, #16
 800abde:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800abe2:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800abe6:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800abea:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800abee:	b2a4      	uxth	r4, r4
 800abf0:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800abf4:	e7ca      	b.n	800ab8c <USB_ActivateEndpoint+0x258>
 800abf6:	0975      	lsrs	r5, r6, #5
 800abf8:	06f4      	lsls	r4, r6, #27
 800abfa:	4c07      	ldr	r4, [pc, #28]	; (800ac18 <USB_ActivateEndpoint+0x2e4>)
 800abfc:	bf08      	it	eq
 800abfe:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800ac02:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800ac06:	b2a4      	uxth	r4, r4
 800ac08:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800ac0c:	e7be      	b.n	800ab8c <USB_ActivateEndpoint+0x258>
  switch (ep->type)
 800ac0e:	2001      	movs	r0, #1
 800ac10:	e6aa      	b.n	800a968 <USB_ActivateEndpoint+0x34>
 800ac12:	bf00      	nop
 800ac14:	ffff8f8f 	.word	0xffff8f8f
 800ac18:	ffff8000 	.word	0xffff8000

0800ac1c <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800ac1c:	7b0b      	ldrb	r3, [r1, #12]
 800ac1e:	b9cb      	cbnz	r3, 800ac54 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 800ac20:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac22:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 80b1 	beq.w	800ad8c <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ac2e:	0659      	lsls	r1, r3, #25
 800ac30:	f100 80c5 	bmi.w	800adbe <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ac38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ac40:	041b      	lsls	r3, r3, #16
 800ac42:	0c1b      	lsrs	r3, r3, #16
 800ac44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800ac50:	2000      	movs	r0, #0
 800ac52:	4770      	bx	lr
    if (ep->is_in == 0U)
 800ac54:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac56:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d14b      	bne.n	800acf4 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ac60:	0459      	lsls	r1, r3, #17
 800ac62:	d50d      	bpl.n	800ac80 <USB_DeactivateEndpoint+0x64>
 800ac64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ac68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac70:	041b      	lsls	r3, r3, #16
 800ac72:	0c1b      	lsrs	r3, r3, #16
 800ac74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ac84:	065b      	lsls	r3, r3, #25
 800ac86:	d50d      	bpl.n	800aca4 <USB_DeactivateEndpoint+0x88>
 800ac88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ac8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac94:	041b      	lsls	r3, r3, #16
 800ac96:	0c1b      	lsrs	r3, r3, #16
 800ac98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aca0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aca4:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 800aca8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800acac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acb4:	041b      	lsls	r3, r3, #16
 800acb6:	0c1b      	lsrs	r3, r3, #16
 800acb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acc0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800acc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800acc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800accc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acd0:	041b      	lsls	r3, r3, #16
 800acd2:	0c1b      	lsrs	r3, r3, #16
 800acd4:	430b      	orrs	r3, r1
 800acd6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800acda:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800acde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ace2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ace6:	041b      	lsls	r3, r3, #16
 800ace8:	0c1b      	lsrs	r3, r3, #16
 800acea:	430b      	orrs	r3, r1
 800acec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800acf0:	2000      	movs	r0, #0
 800acf2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800acf4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800acf8:	0459      	lsls	r1, r3, #17
 800acfa:	d50d      	bpl.n	800ad18 <USB_DeactivateEndpoint+0xfc>
 800acfc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ad00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad08:	041b      	lsls	r3, r3, #16
 800ad0a:	0c1b      	lsrs	r3, r3, #16
 800ad0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ad1c:	065b      	lsls	r3, r3, #25
 800ad1e:	d50d      	bpl.n	800ad3c <USB_DeactivateEndpoint+0x120>
 800ad20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ad24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad2c:	041b      	lsls	r3, r3, #16
 800ad2e:	0c1b      	lsrs	r3, r3, #16
 800ad30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ad3c:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800ad40:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ad44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad4c:	041b      	lsls	r3, r3, #16
 800ad4e:	0c1b      	lsrs	r3, r3, #16
 800ad50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad58:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ad5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ad60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad68:	041b      	lsls	r3, r3, #16
 800ad6a:	0c1b      	lsrs	r3, r3, #16
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad72:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ad76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad7e:	041b      	lsls	r3, r3, #16
 800ad80:	0c1b      	lsrs	r3, r3, #16
 800ad82:	430b      	orrs	r3, r1
 800ad84:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800ad88:	2000      	movs	r0, #0
 800ad8a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad8c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ad90:	045b      	lsls	r3, r3, #17
 800ad92:	d50d      	bpl.n	800adb0 <USB_DeactivateEndpoint+0x194>
 800ad94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ad98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ada0:	041b      	lsls	r3, r3, #16
 800ada2:	0c1b      	lsrs	r3, r3, #16
 800ada4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ada8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800adb0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800adb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adbc:	e740      	b.n	800ac40 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800adbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800adc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adca:	041b      	lsls	r3, r3, #16
 800adcc:	0c1b      	lsrs	r3, r3, #16
 800adce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800add2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800add6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800adda:	e72b      	b.n	800ac34 <USB_DeactivateEndpoint+0x18>

0800addc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ade0:	784b      	ldrb	r3, [r1, #1]
{
 800ade2:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d06b      	beq.n	800aec0 <USB_EPStartXfer+0xe4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ade8:	7b08      	ldrb	r0, [r1, #12]
 800adea:	2800      	cmp	r0, #0
 800adec:	d037      	beq.n	800ae5e <USB_EPStartXfer+0x82>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800adee:	78c8      	ldrb	r0, [r1, #3]
 800adf0:	2802      	cmp	r0, #2
 800adf2:	f000 812d 	beq.w	800b050 <USB_EPStartXfer+0x274>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800adf6:	2801      	cmp	r0, #1
 800adf8:	f040 810a 	bne.w	800b010 <USB_EPStartXfer+0x234>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800adfc:	6988      	ldr	r0, [r1, #24]
 800adfe:	690c      	ldr	r4, [r1, #16]
 800ae00:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 800ae02:	bf94      	ite	ls
 800ae04:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 800ae06:	1b05      	subhi	r5, r0, r4
 800ae08:	618d      	str	r5, [r1, #24]
 800ae0a:	bf88      	it	hi
 800ae0c:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f040 811b 	bne.w	800b04a <USB_EPStartXfer+0x26e>
 800ae14:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800ae18:	780b      	ldrb	r3, [r1, #0]
 800ae1a:	b2a4      	uxth	r4, r4
 800ae1c:	f202 4504 	addw	r5, r2, #1028	; 0x404
 800ae20:	011b      	lsls	r3, r3, #4
 800ae22:	442c      	add	r4, r5
 800ae24:	2800      	cmp	r0, #0
 800ae26:	f000 8251 	beq.w	800b2cc <USB_EPStartXfer+0x4f0>
 800ae2a:	283e      	cmp	r0, #62	; 0x3e
 800ae2c:	f200 80f3 	bhi.w	800b016 <USB_EPStartXfer+0x23a>
 800ae30:	0845      	lsrs	r5, r0, #1
 800ae32:	462e      	mov	r6, r5
 800ae34:	f010 0001 	ands.w	r0, r0, #1
 800ae38:	bf18      	it	ne
 800ae3a:	1c6e      	addne	r6, r5, #1
 800ae3c:	02b6      	lsls	r6, r6, #10
 800ae3e:	b2b6      	uxth	r6, r6
 800ae40:	52e6      	strh	r6, [r4, r3]
 800ae42:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800ae46:	b2a6      	uxth	r6, r4
 800ae48:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800ae4c:	4434      	add	r4, r6
 800ae4e:	b100      	cbz	r0, 800ae52 <USB_EPStartXfer+0x76>
 800ae50:	3501      	adds	r5, #1
 800ae52:	02ad      	lsls	r5, r5, #10
 800ae54:	b2a8      	uxth	r0, r5
 800ae56:	52e0      	strh	r0, [r4, r3]
 800ae58:	f891 c000 	ldrb.w	ip, [r1]
 800ae5c:	e01d      	b.n	800ae9a <USB_EPStartXfer+0xbe>
      if (ep->xfer_len > ep->maxpacket)
 800ae5e:	698c      	ldr	r4, [r1, #24]
 800ae60:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ae62:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 800ae64:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 800ae66:	bf84      	itt	hi
 800ae68:	1ae0      	subhi	r0, r4, r3
 800ae6a:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ae6c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800ae70:	6188      	str	r0, [r1, #24]
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800ae78:	012d      	lsls	r5, r5, #4
 800ae7a:	4403      	add	r3, r0
 800ae7c:	2c00      	cmp	r4, #0
 800ae7e:	f000 80b7 	beq.w	800aff0 <USB_EPStartXfer+0x214>
 800ae82:	2c3e      	cmp	r4, #62	; 0x3e
 800ae84:	f200 8129 	bhi.w	800b0da <USB_EPStartXfer+0x2fe>
 800ae88:	0860      	lsrs	r0, r4, #1
 800ae8a:	07e4      	lsls	r4, r4, #31
 800ae8c:	bf48      	it	mi
 800ae8e:	3001      	addmi	r0, #1
 800ae90:	0280      	lsls	r0, r0, #10
 800ae92:	b280      	uxth	r0, r0
 800ae94:	52e8      	strh	r0, [r5, r3]
 800ae96:	f891 c000 	ldrb.w	ip, [r1]
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae9a:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
  }

  return HAL_OK;
 800ae9e:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aea8:	041b      	lsls	r3, r3, #16
 800aeaa:	0c1b      	lsrs	r3, r3, #16
 800aeac:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800aeb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeb8:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
}
 800aebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 800aec0:	690d      	ldr	r5, [r1, #16]
 800aec2:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 800aec4:	7b0b      	ldrb	r3, [r1, #12]
 800aec6:	42a8      	cmp	r0, r5
 800aec8:	bf28      	it	cs
 800aeca:	4628      	movcs	r0, r5
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d05d      	beq.n	800af8c <USB_EPStartXfer+0x1b0>
      if (ep->type == EP_TYPE_BULK)
 800aed0:	78cb      	ldrb	r3, [r1, #3]
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	f000 810e 	beq.w	800b0f4 <USB_EPStartXfer+0x318>
        PCD_SET_EP_DBUF(USBx, ep->num);
 800aed8:	f891 8000 	ldrb.w	r8, [r1]
        ep->xfer_len_db -= len;
 800aedc:	6a0b      	ldr	r3, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 800aede:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800aee2:	1a1b      	subs	r3, r3, r0
        PCD_SET_EP_DBUF(USBx, ep->num);
 800aee4:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 800aee8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800aeec:	0424      	lsls	r4, r4, #16
 800aeee:	0c24      	lsrs	r4, r4, #16
 800aef0:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800aef4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800aef8:	f822 4028 	strh.w	r4, [r2, r8, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aefc:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800af00:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800af02:	f014 0f40 	tst.w	r4, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800af06:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800af0a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800af0e:	b2a6      	uxth	r6, r4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800af10:	f000 814a 	beq.w	800b1a8 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800af14:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800af18:	4434      	add	r4, r6
 800af1a:	b286      	uxth	r6, r0
 800af1c:	f824 6008 	strh.w	r6, [r4, r8]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af20:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800af22:	3601      	adds	r6, #1
 800af24:	f502 6780 	add.w	r7, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800af28:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af2a:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af2e:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 800af32:	d008      	beq.n	800af46 <USB_EPStartXfer+0x16a>
  uint8_t *pBuf = pbUsrBuf;
 800af34:	46cc      	mov	ip, r9
 800af36:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  {
    temp1 = *pBuf;
 800af3a:	f83c eb02 	ldrh.w	lr, [ip], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 800af3e:	f824 eb04 	strh.w	lr, [r4], #4
  for (i = n; i != 0U; i--)
 800af42:	42a6      	cmp	r6, r4
 800af44:	d1f9      	bne.n	800af3a <USB_EPStartXfer+0x15e>
          ep->xfer_buff += len;
 800af46:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800af4a:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800af4c:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800af4e:	f0c0 81b7 	bcc.w	800b2c0 <USB_EPStartXfer+0x4e4>
            ep->xfer_len_db = 0U;
 800af52:	2500      	movs	r5, #0
 800af54:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800af56:	2b00      	cmp	r3, #0
 800af58:	d036      	beq.n	800afc8 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af5a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800af5e:	b285      	uxth	r5, r0
 800af60:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800af64:	4428      	add	r0, r5
 800af66:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800af68:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af6a:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af6e:	8908      	ldrh	r0, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800af70:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800af72:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af74:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800af78:	d026      	beq.n	800afc8 <USB_EPStartXfer+0x1ec>
 800af7a:	eb00 0583 	add.w	r5, r0, r3, lsl #2
    temp1 = *pBuf;
 800af7e:	f834 3b02 	ldrh.w	r3, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800af82:	f820 3b04 	strh.w	r3, [r0], #4
  for (i = n; i != 0U; i--)
 800af86:	4285      	cmp	r5, r0
 800af88:	d1f9      	bne.n	800af7e <USB_EPStartXfer+0x1a2>
 800af8a:	e01d      	b.n	800afc8 <USB_EPStartXfer+0x1ec>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800af8c:	b284      	uxth	r4, r0
 800af8e:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af90:	88cd      	ldrh	r5, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800af92:	f104 0e01 	add.w	lr, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af96:	f502 6080 	add.w	r0, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800af9a:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af9e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (i = n; i != 0U; i--)
 800afa2:	bf18      	it	ne
 800afa4:	eb03 0e4e 	addne.w	lr, r3, lr, lsl #1
 800afa8:	d005      	beq.n	800afb6 <USB_EPStartXfer+0x1da>
    temp1 = *pBuf;
 800afaa:	f833 cb02 	ldrh.w	ip, [r3], #2
  for (i = n; i != 0U; i--)
 800afae:	4573      	cmp	r3, lr
    *pdwVal = (uint16_t)temp2;
 800afb0:	f820 cb04 	strh.w	ip, [r0], #4
  for (i = n; i != 0U; i--)
 800afb4:	d1f9      	bne.n	800afaa <USB_EPStartXfer+0x1ce>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800afb6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800afba:	7808      	ldrb	r0, [r1, #0]
 800afbc:	b29d      	uxth	r5, r3
 800afbe:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800afc2:	0100      	lsls	r0, r0, #4
 800afc4:	442b      	add	r3, r5
 800afc6:	52c4      	strh	r4, [r0, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800afc8:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 800afca:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800afcc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800afd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afd8:	041b      	lsls	r3, r3, #16
 800afda:	0c1b      	lsrs	r3, r3, #16
 800afdc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800afe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afe8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 800afec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800aff0:	5ae8      	ldrh	r0, [r5, r3]
 800aff2:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800aff6:	0400      	lsls	r0, r0, #16
 800aff8:	0c00      	lsrs	r0, r0, #16
 800affa:	52e8      	strh	r0, [r5, r3]
 800affc:	5ae8      	ldrh	r0, [r5, r3]
 800affe:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800b002:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800b006:	b280      	uxth	r0, r0
 800b008:	52e8      	strh	r0, [r5, r3]
 800b00a:	f891 c000 	ldrb.w	ip, [r1]
 800b00e:	e744      	b.n	800ae9a <USB_EPStartXfer+0xbe>
        return HAL_ERROR;
 800b010:	2001      	movs	r0, #1
}
 800b012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b016:	0945      	lsrs	r5, r0, #5
 800b018:	462f      	mov	r7, r5
 800b01a:	f010 001f 	ands.w	r0, r0, #31
 800b01e:	bf08      	it	eq
 800b020:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800b024:	462e      	mov	r6, r5
 800b026:	4dbb      	ldr	r5, [pc, #748]	; (800b314 <USB_EPStartXfer+0x538>)
 800b028:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800b02c:	b2ad      	uxth	r5, r5
 800b02e:	52e5      	strh	r5, [r4, r3]
 800b030:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800b034:	b2a5      	uxth	r5, r4
 800b036:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800b03a:	442c      	add	r4, r5
 800b03c:	b900      	cbnz	r0, 800b040 <USB_EPStartXfer+0x264>
 800b03e:	3e01      	subs	r6, #1
 800b040:	48b4      	ldr	r0, [pc, #720]	; (800b314 <USB_EPStartXfer+0x538>)
 800b042:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800b046:	b280      	uxth	r0, r0
 800b048:	52e0      	strh	r0, [r4, r3]
 800b04a:	f891 c000 	ldrb.w	ip, [r1]
 800b04e:	e724      	b.n	800ae9a <USB_EPStartXfer+0xbe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b050:	bb13      	cbnz	r3, 800b098 <USB_EPStartXfer+0x2bc>
 800b052:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b056:	780b      	ldrb	r3, [r1, #0]
 800b058:	b284      	uxth	r4, r0
 800b05a:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800b05e:	4420      	add	r0, r4
 800b060:	690c      	ldr	r4, [r1, #16]
 800b062:	011b      	lsls	r3, r3, #4
 800b064:	2c00      	cmp	r4, #0
 800b066:	f000 8109 	beq.w	800b27c <USB_EPStartXfer+0x4a0>
 800b06a:	2c3e      	cmp	r4, #62	; 0x3e
 800b06c:	f200 818e 	bhi.w	800b38c <USB_EPStartXfer+0x5b0>
 800b070:	0865      	lsrs	r5, r4, #1
 800b072:	462e      	mov	r6, r5
 800b074:	f014 0401 	ands.w	r4, r4, #1
 800b078:	bf18      	it	ne
 800b07a:	1c6e      	addne	r6, r5, #1
 800b07c:	02b6      	lsls	r6, r6, #10
 800b07e:	b2b6      	uxth	r6, r6
 800b080:	52c6      	strh	r6, [r0, r3]
 800b082:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b086:	f202 460c 	addw	r6, r2, #1036	; 0x40c
 800b08a:	b280      	uxth	r0, r0
 800b08c:	4406      	add	r6, r0
 800b08e:	b104      	cbz	r4, 800b092 <USB_EPStartXfer+0x2b6>
 800b090:	3501      	adds	r5, #1
 800b092:	02ad      	lsls	r5, r5, #10
 800b094:	b2a8      	uxth	r0, r5
 800b096:	52f0      	strh	r0, [r6, r3]
        if (ep->xfer_count != 0U)
 800b098:	69cb      	ldr	r3, [r1, #28]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d0d5      	beq.n	800b04a <USB_EPStartXfer+0x26e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b09e:	f244 0340 	movw	r3, #16448	; 0x4040
 800b0a2:	f891 c000 	ldrb.w	ip, [r1]
 800b0a6:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b0aa:	ea03 0400 	and.w	r4, r3, r0
 800b0ae:	4383      	bics	r3, r0
 800b0b0:	d002      	beq.n	800b0b8 <USB_EPStartXfer+0x2dc>
 800b0b2:	2c00      	cmp	r4, #0
 800b0b4:	f47f aef1 	bne.w	800ae9a <USB_EPStartXfer+0xbe>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800b0b8:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800b0bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c4:	041b      	lsls	r3, r3, #16
 800b0c6:	0c1b      	lsrs	r3, r3, #16
 800b0c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0d0:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 800b0d4:	f891 c000 	ldrb.w	ip, [r1]
 800b0d8:	e6df      	b.n	800ae9a <USB_EPStartXfer+0xbe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b0da:	0966      	lsrs	r6, r4, #5
 800b0dc:	06e0      	lsls	r0, r4, #27
 800b0de:	488d      	ldr	r0, [pc, #564]	; (800b314 <USB_EPStartXfer+0x538>)
 800b0e0:	bf08      	it	eq
 800b0e2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800b0e6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800b0ea:	b280      	uxth	r0, r0
 800b0ec:	52e8      	strh	r0, [r5, r3]
 800b0ee:	f891 c000 	ldrb.w	ip, [r1]
 800b0f2:	e6d2      	b.n	800ae9a <USB_EPStartXfer+0xbe>
        if (ep->xfer_len_db > ep->maxpacket)
 800b0f4:	6a0c      	ldr	r4, [r1, #32]
 800b0f6:	42a5      	cmp	r5, r4
 800b0f8:	f080 8094 	bcs.w	800b224 <USB_EPStartXfer+0x448>
          PCD_SET_EP_DBUF(USBx, ep->num);
 800b0fc:	780e      	ldrb	r6, [r1, #0]
          ep->xfer_len_db -= len;
 800b0fe:	1a24      	subs	r4, r4, r0
          PCD_SET_EP_DBUF(USBx, ep->num);
 800b100:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b104:	ea4f 1906 	mov.w	r9, r6, lsl #4
          PCD_SET_EP_DBUF(USBx, ep->num);
 800b108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b10c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b110:	041b      	lsls	r3, r3, #16
 800b112:	0c1b      	lsrs	r3, r3, #16
 800b114:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b11c:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b120:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
          ep->xfer_len_db -= len;
 800b124:	620c      	str	r4, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b126:	f013 0f40 	tst.w	r3, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b12a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800b12e:	b29e      	uxth	r6, r3
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b130:	f000 80f2 	beq.w	800b318 <USB_EPStartXfer+0x53c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b134:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800b138:	4433      	add	r3, r6
 800b13a:	fa1f fa80 	uxth.w	sl, r0
 800b13e:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b142:	894e      	ldrh	r6, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b144:	f10a 0801 	add.w	r8, sl, #1
 800b148:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b14c:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b150:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b152:	eb03 0646 	add.w	r6, r3, r6, lsl #1
  for (i = n; i != 0U; i--)
 800b156:	d008      	beq.n	800b16a <USB_EPStartXfer+0x38e>
  uint8_t *pBuf = pbUsrBuf;
 800b158:	46bc      	mov	ip, r7
 800b15a:	eb06 0b88 	add.w	fp, r6, r8, lsl #2
    temp1 = *pBuf;
 800b15e:	f83c eb02 	ldrh.w	lr, [ip], #2
    *pdwVal = (uint16_t)temp2;
 800b162:	f826 eb04 	strh.w	lr, [r6], #4
  for (i = n; i != 0U; i--)
 800b166:	45b3      	cmp	fp, r6
 800b168:	d1f9      	bne.n	800b15e <USB_EPStartXfer+0x382>
            ep->xfer_buff += len;
 800b16a:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800b16c:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800b16e:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800b170:	f080 8127 	bcs.w	800b3c2 <USB_EPStartXfer+0x5e6>
              ep->xfer_len_db -= len;
 800b174:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b176:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b17a:	620c      	str	r4, [r1, #32]
 800b17c:	b284      	uxth	r4, r0
 800b17e:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800b182:	4420      	add	r0, r4
 800b184:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b188:	8908      	ldrh	r0, [r1, #8]
 800b18a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800b18e:	f1b8 0f00 	cmp.w	r8, #0
 800b192:	f43f af19 	beq.w	800afc8 <USB_EPStartXfer+0x1ec>
 800b196:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800b19a:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800b19e:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800b1a2:	429c      	cmp	r4, r3
 800b1a4:	d1f9      	bne.n	800b19a <USB_EPStartXfer+0x3be>
 800b1a6:	e70f      	b.n	800afc8 <USB_EPStartXfer+0x1ec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b1a8:	f202 4404 	addw	r4, r2, #1028	; 0x404
 800b1ac:	4434      	add	r4, r6
 800b1ae:	b286      	uxth	r6, r0
 800b1b0:	f824 6008 	strh.w	r6, [r4, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b1b4:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b1b8:	3601      	adds	r6, #1
 800b1ba:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b1be:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b1c0:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b1c4:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
  for (i = n; i != 0U; i--)
 800b1c8:	d008      	beq.n	800b1dc <USB_EPStartXfer+0x400>
  uint8_t *pBuf = pbUsrBuf;
 800b1ca:	464c      	mov	r4, r9
 800b1cc:	eb09 0646 	add.w	r6, r9, r6, lsl #1
    temp1 = *pBuf;
 800b1d0:	f834 eb02 	ldrh.w	lr, [r4], #2
  for (i = n; i != 0U; i--)
 800b1d4:	42b4      	cmp	r4, r6
    *pdwVal = (uint16_t)temp2;
 800b1d6:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800b1da:	d1f9      	bne.n	800b1d0 <USB_EPStartXfer+0x3f4>
          ep->xfer_buff += len;
 800b1dc:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800b1e0:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800b1e2:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800b1e4:	d36f      	bcc.n	800b2c6 <USB_EPStartXfer+0x4ea>
            ep->xfer_len_db = 0U;
 800b1e6:	2500      	movs	r5, #0
 800b1e8:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f43f aeec 	beq.w	800afc8 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b1f0:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b1f4:	b285      	uxth	r5, r0
 800b1f6:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800b1fa:	4428      	add	r0, r5
 800b1fc:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b1fe:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b200:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b204:	8948      	ldrh	r0, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b206:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800b208:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b20a:	eb07 0740 	add.w	r7, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800b20e:	f43f aedb 	beq.w	800afc8 <USB_EPStartXfer+0x1ec>
 800b212:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    temp1 = *pBuf;
 800b216:	f834 0b02 	ldrh.w	r0, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800b21a:	f827 0b04 	strh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 800b21e:	429f      	cmp	r7, r3
 800b220:	d1f9      	bne.n	800b216 <USB_EPStartXfer+0x43a>
 800b222:	e6d1      	b.n	800afc8 <USB_EPStartXfer+0x1ec>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800b224:	7808      	ldrb	r0, [r1, #0]
 800b226:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 800b22a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b22e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b232:	041b      	lsls	r3, r3, #16
 800b234:	0c1b      	lsrs	r3, r3, #16
 800b236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b23a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b23e:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b242:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800b246:	0100      	lsls	r0, r0, #4
 800b248:	b29d      	uxth	r5, r3
 800b24a:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800b24e:	442b      	add	r3, r5
 800b250:	b2a5      	uxth	r5, r4
 800b252:	521d      	strh	r5, [r3, r0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b254:	b2a0      	uxth	r0, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b256:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b258:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b25a:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b25e:	0840      	lsrs	r0, r0, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b260:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b262:	eb03 0345 	add.w	r3, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 800b266:	f43f aeaf 	beq.w	800afc8 <USB_EPStartXfer+0x1ec>
 800b26a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    temp1 = *pBuf;
 800b26e:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800b272:	f823 5b04 	strh.w	r5, [r3], #4
  for (i = n; i != 0U; i--)
 800b276:	4298      	cmp	r0, r3
 800b278:	d1f9      	bne.n	800b26e <USB_EPStartXfer+0x492>
 800b27a:	e6a5      	b.n	800afc8 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b27c:	5ac4      	ldrh	r4, [r0, r3]
 800b27e:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b282:	0424      	lsls	r4, r4, #16
 800b284:	0c24      	lsrs	r4, r4, #16
 800b286:	52c4      	strh	r4, [r0, r3]
 800b288:	5ac5      	ldrh	r5, [r0, r3]
 800b28a:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800b28e:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800b292:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800b296:	b2ad      	uxth	r5, r5
 800b298:	52c5      	strh	r5, [r0, r3]
 800b29a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b29e:	b285      	uxth	r5, r0
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	4428      	add	r0, r5
 800b2a4:	5ac4      	ldrh	r4, [r0, r3]
 800b2a6:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b2aa:	0424      	lsls	r4, r4, #16
 800b2ac:	0c24      	lsrs	r4, r4, #16
 800b2ae:	52c4      	strh	r4, [r0, r3]
 800b2b0:	5ac4      	ldrh	r4, [r0, r3]
 800b2b2:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800b2b6:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800b2ba:	b2a4      	uxth	r4, r4
 800b2bc:	52c4      	strh	r4, [r0, r3]
 800b2be:	e6eb      	b.n	800b098 <USB_EPStartXfer+0x2bc>
            ep->xfer_len_db -= len;
 800b2c0:	1a1d      	subs	r5, r3, r0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	e646      	b.n	800af54 <USB_EPStartXfer+0x178>
            ep->xfer_len_db -= len;
 800b2c6:	1a1d      	subs	r5, r3, r0
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	e78d      	b.n	800b1e8 <USB_EPStartXfer+0x40c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b2cc:	5ae0      	ldrh	r0, [r4, r3]
 800b2ce:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800b2d2:	0400      	lsls	r0, r0, #16
 800b2d4:	0c00      	lsrs	r0, r0, #16
 800b2d6:	52e0      	strh	r0, [r4, r3]
 800b2d8:	5ae5      	ldrh	r5, [r4, r3]
 800b2da:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800b2de:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800b2e2:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800b2e6:	b2ad      	uxth	r5, r5
 800b2e8:	52e5      	strh	r5, [r4, r3]
 800b2ea:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800b2ee:	b2a4      	uxth	r4, r4
 800b2f0:	4420      	add	r0, r4
 800b2f2:	5ac4      	ldrh	r4, [r0, r3]
 800b2f4:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b2f8:	0424      	lsls	r4, r4, #16
 800b2fa:	0c24      	lsrs	r4, r4, #16
 800b2fc:	52c4      	strh	r4, [r0, r3]
 800b2fe:	5ac4      	ldrh	r4, [r0, r3]
 800b300:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800b304:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800b308:	b2a4      	uxth	r4, r4
 800b30a:	52c4      	strh	r4, [r0, r3]
 800b30c:	f891 c000 	ldrb.w	ip, [r1]
 800b310:	e5c3      	b.n	800ae9a <USB_EPStartXfer+0xbe>
 800b312:	bf00      	nop
 800b314:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b318:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800b31c:	4433      	add	r3, r6
 800b31e:	fa1f fa80 	uxth.w	sl, r0
 800b322:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b326:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b32a:	f10a 0801 	add.w	r8, sl, #1
 800b32e:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b332:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b336:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b338:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
  for (i = n; i != 0U; i--)
 800b33c:	d008      	beq.n	800b350 <USB_EPStartXfer+0x574>
  uint8_t *pBuf = pbUsrBuf;
 800b33e:	463e      	mov	r6, r7
 800b340:	eb07 0b48 	add.w	fp, r7, r8, lsl #1
    temp1 = *pBuf;
 800b344:	f836 eb02 	ldrh.w	lr, [r6], #2
  for (i = n; i != 0U; i--)
 800b348:	45b3      	cmp	fp, r6
    *pdwVal = (uint16_t)temp2;
 800b34a:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800b34e:	d1f9      	bne.n	800b344 <USB_EPStartXfer+0x568>
            ep->xfer_buff += len;
 800b350:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800b352:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800b354:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800b356:	d23e      	bcs.n	800b3d6 <USB_EPStartXfer+0x5fa>
              ep->xfer_len_db -= len;
 800b358:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b35a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b35e:	620c      	str	r4, [r1, #32]
 800b360:	b284      	uxth	r4, r0
 800b362:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800b366:	4420      	add	r0, r4
 800b368:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b36c:	8948      	ldrh	r0, [r1, #10]
 800b36e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800b372:	f1b8 0f00 	cmp.w	r8, #0
 800b376:	f43f ae27 	beq.w	800afc8 <USB_EPStartXfer+0x1ec>
 800b37a:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800b37e:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800b382:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800b386:	429c      	cmp	r4, r3
 800b388:	d1f9      	bne.n	800b37e <USB_EPStartXfer+0x5a2>
 800b38a:	e61d      	b.n	800afc8 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b38c:	0965      	lsrs	r5, r4, #5
 800b38e:	462f      	mov	r7, r5
 800b390:	f014 041f 	ands.w	r4, r4, #31
 800b394:	bf08      	it	eq
 800b396:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800b39a:	462e      	mov	r6, r5
 800b39c:	4d13      	ldr	r5, [pc, #76]	; (800b3ec <USB_EPStartXfer+0x610>)
 800b39e:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800b3a2:	b2ad      	uxth	r5, r5
 800b3a4:	52c5      	strh	r5, [r0, r3]
 800b3a6:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b3aa:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 800b3ae:	b280      	uxth	r0, r0
 800b3b0:	4405      	add	r5, r0
 800b3b2:	b904      	cbnz	r4, 800b3b6 <USB_EPStartXfer+0x5da>
 800b3b4:	3e01      	subs	r6, #1
 800b3b6:	480d      	ldr	r0, [pc, #52]	; (800b3ec <USB_EPStartXfer+0x610>)
 800b3b8:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800b3bc:	b280      	uxth	r0, r0
 800b3be:	52e8      	strh	r0, [r5, r3]
 800b3c0:	e66a      	b.n	800b098 <USB_EPStartXfer+0x2bc>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b3c2:	fa1f f884 	uxth.w	r8, r4
 800b3c6:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b3ca:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b3ce:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800b3d2:	2400      	movs	r4, #0
 800b3d4:	e6cf      	b.n	800b176 <USB_EPStartXfer+0x39a>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b3d6:	fa1f f884 	uxth.w	r8, r4
 800b3da:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b3de:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b3e2:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800b3e6:	2400      	movs	r4, #0
 800b3e8:	e7b7      	b.n	800b35a <USB_EPStartXfer+0x57e>
 800b3ea:	bf00      	nop
 800b3ec:	ffff8000 	.word	0xffff8000

0800b3f0 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 800b3f0:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b3f2:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800b3f4:	b18b      	cbz	r3, 800b41a <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b3f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b3fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b402:	041b      	lsls	r3, r3, #16
 800b404:	0c1b      	lsrs	r3, r3, #16
 800b406:	f083 0310 	eor.w	r3, r3, #16
 800b40a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b40e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b412:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b416:	2000      	movs	r0, #0
 800b418:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b41a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b41e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b426:	041b      	lsls	r3, r3, #16
 800b428:	0c1b      	lsrs	r3, r3, #16
 800b42a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b42e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b436:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b43a:	2000      	movs	r0, #0
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop

0800b440 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 800b440:	7b0b      	ldrb	r3, [r1, #12]
 800b442:	bb3b      	cbnz	r3, 800b494 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 800b444:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b446:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800b448:	b333      	cbz	r3, 800b498 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b44a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b44e:	065b      	lsls	r3, r3, #25
 800b450:	d50d      	bpl.n	800b46e <USB_EPClearStall+0x2e>
 800b452:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b45e:	041b      	lsls	r3, r3, #16
 800b460:	0c1b      	lsrs	r3, r3, #16
 800b462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b466:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b46a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800b46e:	78cb      	ldrb	r3, [r1, #3]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d00f      	beq.n	800b494 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b474:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b47c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b480:	041b      	lsls	r3, r3, #16
 800b482:	0c1b      	lsrs	r3, r3, #16
 800b484:	f083 0320 	eor.w	r3, r3, #32
 800b488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b48c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b490:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b494:	2000      	movs	r0, #0
 800b496:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b498:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b49c:	045b      	lsls	r3, r3, #17
 800b49e:	d50d      	bpl.n	800b4bc <USB_EPClearStall+0x7c>
 800b4a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b4a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ac:	041b      	lsls	r3, r3, #16
 800b4ae:	0c1b      	lsrs	r3, r3, #16
 800b4b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b4b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b4bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b4c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4c8:	041b      	lsls	r3, r3, #16
 800b4ca:	0c1b      	lsrs	r3, r3, #16
 800b4cc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800b4d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b4dc:	2000      	movs	r0, #0
 800b4de:	4770      	bx	lr

0800b4e0 <USB_SetDevAddress>:
  if (address == 0U)
 800b4e0:	b911      	cbnz	r1, 800b4e8 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b4e2:	2380      	movs	r3, #128	; 0x80
 800b4e4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	4770      	bx	lr

0800b4ec <USB_DevConnect>:
}
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	4770      	bx	lr

0800b4f0 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 800b4f0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 800b4f4:	b280      	uxth	r0, r0
 800b4f6:	4770      	bx	lr

0800b4f8 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b4f8:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b4fa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 800b4fe:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b500:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b504:	d007      	beq.n	800b516 <USB_WritePMA+0x1e>
 800b506:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b50a:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800b50e:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 800b512:	4282      	cmp	r2, r0
 800b514:	d1f9      	bne.n	800b50a <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800b516:	4770      	bx	lr

0800b518 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b518:	b570      	push	{r4, r5, r6, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b51a:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 800b51e:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b520:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b524:	d012      	beq.n	800b54c <USB_ReadPMA+0x34>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b526:	46ae      	mov	lr, r5
  for (i = n; i != 0U; i--)
 800b528:	46b4      	mov	ip, r6
 800b52a:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b52c:	f83e 2b04 	ldrh.w	r2, [lr], #4
  for (i = n; i != 0U; i--)
 800b530:	3002      	adds	r0, #2
    temp = *(__IO uint16_t *)pdwVal;
 800b532:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b534:	0a14      	lsrs	r4, r2, #8
  for (i = n; i != 0U; i--)
 800b536:	f1bc 0c01 	subs.w	ip, ip, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b53a:	f800 2c04 	strb.w	r2, [r0, #-4]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b53e:	f800 4c03 	strb.w	r4, [r0, #-3]
  for (i = n; i != 0U; i--)
 800b542:	d1f3      	bne.n	800b52c <USB_ReadPMA+0x14>
    pBuf++;
 800b544:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 800b548:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b54c:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800b54e:	bf44      	itt	mi
 800b550:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b552:	700b      	strbmi	r3, [r1, #0]
  }
}
 800b554:	bd70      	pop	{r4, r5, r6, pc}
 800b556:	bf00      	nop

0800b558 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b558:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800b55c:	b183      	cbz	r3, 800b580 <USBD_CDC_EP0_RxReady+0x28>
{
 800b55e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b560:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b564:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800b568:	28ff      	cmp	r0, #255	; 0xff
 800b56a:	d007      	beq.n	800b57c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	4621      	mov	r1, r4
 800b570:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800b574:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 800b576:	23ff      	movs	r3, #255	; 0xff
 800b578:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800b57c:	2000      	movs	r0, #0
 800b57e:	bd10      	pop	{r4, pc}
 800b580:	2000      	movs	r0, #0
 800b582:	4770      	bx	lr

0800b584 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800b584:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b586:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgFSDesc;
}
 800b588:	4801      	ldr	r0, [pc, #4]	; (800b590 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b58a:	801a      	strh	r2, [r3, #0]
}
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	20000058 	.word	0x20000058

0800b594 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800b594:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b596:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgHSDesc;
}
 800b598:	4801      	ldr	r0, [pc, #4]	; (800b5a0 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b59a:	801a      	strh	r2, [r3, #0]
}
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	2000009c 	.word	0x2000009c

0800b5a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800b5a4:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b5a6:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800b5a8:	4801      	ldr	r0, [pc, #4]	; (800b5b0 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b5aa:	801a      	strh	r2, [r3, #0]
}
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	200000ec 	.word	0x200000ec

0800b5b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800b5b4:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b5b6:	220a      	movs	r2, #10
  return USBD_CDC_DeviceQualifierDesc;
}
 800b5b8:	4801      	ldr	r0, [pc, #4]	; (800b5c0 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b5ba:	801a      	strh	r2, [r3, #0]
}
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	200000e0 	.word	0x200000e0

0800b5c4 <USBD_CDC_DataOut>:
{
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b5c8:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b5cc:	f000 fffc 	bl	800c5c8 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800b5d0:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b5d4:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800b5d8:	b14b      	cbz	r3, 800b5ee <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5da:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800b5de:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800b5e8:	4798      	blx	r3
    return USBD_OK;
 800b5ea:	2000      	movs	r0, #0
}
 800b5ec:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b5ee:	2002      	movs	r0, #2
}
 800b5f0:	bd38      	pop	{r3, r4, r5, pc}
 800b5f2:	bf00      	nop

0800b5f4 <USBD_CDC_DataIn>:
{
 800b5f4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800b5f6:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 800b5fa:	b1ed      	cbz	r5, 800b638 <USBD_CDC_DataIn+0x44>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b5fc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800b600:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 800b604:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800b608:	b14a      	cbz	r2, 800b61e <USBD_CDC_DataIn+0x2a>
 800b60a:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 800b60e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800b612:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800b614:	fbb2 f3f4 	udiv	r3, r2, r4
 800b618:	fb04 2413 	mls	r4, r4, r3, r2
 800b61c:	b124      	cbz	r4, 800b628 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800b61e:	2300      	movs	r3, #0
    return USBD_OK;
 800b620:	4618      	mov	r0, r3
      hcdc->TxState = 0U;
 800b622:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
}
 800b626:	bd38      	pop	{r3, r4, r5, pc}
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800b628:	4623      	mov	r3, r4
 800b62a:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 800b62c:	f8cc 401c 	str.w	r4, [ip, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800b630:	f000 ffae 	bl	800c590 <USBD_LL_Transmit>
    return USBD_OK;
 800b634:	4620      	mov	r0, r4
}
 800b636:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b638:	2002      	movs	r0, #2
}
 800b63a:	bd38      	pop	{r3, r4, r5, pc}

0800b63c <USBD_CDC_Setup>:
{
 800b63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 800b640:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b642:	780b      	ldrb	r3, [r1, #0]
{
 800b644:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b646:	f013 0660 	ands.w	r6, r3, #96	; 0x60
{
 800b64a:	460c      	mov	r4, r1
 800b64c:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b64e:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800b652:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800b656:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b65a:	d013      	beq.n	800b684 <USBD_CDC_Setup+0x48>
 800b65c:	2e20      	cmp	r6, #32
 800b65e:	d117      	bne.n	800b690 <USBD_CDC_Setup+0x54>
    if (req->wLength)
 800b660:	88ce      	ldrh	r6, [r1, #6]
 800b662:	b1f6      	cbz	r6, 800b6a2 <USBD_CDC_Setup+0x66>
      if (req->bmRequest & 0x80U)
 800b664:	061b      	lsls	r3, r3, #24
 800b666:	d53f      	bpl.n	800b6e8 <USBD_CDC_Setup+0xac>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b668:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800b66c:	4632      	mov	r2, r6
 800b66e:	4641      	mov	r1, r8
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	7860      	ldrb	r0, [r4, #1]
 800b674:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b676:	4641      	mov	r1, r8
 800b678:	4628      	mov	r0, r5
 800b67a:	88e2      	ldrh	r2, [r4, #6]
  uint8_t ret = USBD_OK;
 800b67c:	463e      	mov	r6, r7
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b67e:	f000 fcd5 	bl	800c02c <USBD_CtlSendData>
 800b682:	e00a      	b.n	800b69a <USBD_CDC_Setup+0x5e>
    switch (req->bRequest)
 800b684:	784b      	ldrb	r3, [r1, #1]
 800b686:	2b0a      	cmp	r3, #10
 800b688:	d01f      	beq.n	800b6ca <USBD_CDC_Setup+0x8e>
 800b68a:	2b0b      	cmp	r3, #11
 800b68c:	d027      	beq.n	800b6de <USBD_CDC_Setup+0xa2>
 800b68e:	b193      	cbz	r3, 800b6b6 <USBD_CDC_Setup+0x7a>
      USBD_CtlError (pdev, req);
 800b690:	4621      	mov	r1, r4
 800b692:	4628      	mov	r0, r5
 800b694:	f000 fc94 	bl	800bfc0 <USBD_CtlError>
      ret = USBD_FAIL;
 800b698:	2602      	movs	r6, #2
}
 800b69a:	4630      	mov	r0, r6
 800b69c:	b002      	add	sp, #8
 800b69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b6a2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800b6a6:	4632      	mov	r2, r6
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	7848      	ldrb	r0, [r1, #1]
 800b6ac:	4798      	blx	r3
}
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	b002      	add	sp, #8
 800b6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b6ba:	2b03      	cmp	r3, #3
 800b6bc:	d1e8      	bne.n	800b690 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800b6be:	2202      	movs	r2, #2
 800b6c0:	f10d 0106 	add.w	r1, sp, #6
 800b6c4:	f000 fcb2 	bl	800c02c <USBD_CtlSendData>
 800b6c8:	e7e7      	b.n	800b69a <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ca:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b6ce:	2b03      	cmp	r3, #3
 800b6d0:	d1de      	bne.n	800b690 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f10d 0105 	add.w	r1, sp, #5
 800b6d8:	f000 fca8 	bl	800c02c <USBD_CtlSendData>
 800b6dc:	e7dd      	b.n	800b69a <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b6de:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800b6e2:	2b03      	cmp	r3, #3
 800b6e4:	d0d9      	beq.n	800b69a <USBD_CDC_Setup+0x5e>
 800b6e6:	e7d3      	b.n	800b690 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 800b6e8:	784b      	ldrb	r3, [r1, #1]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b6ea:	4632      	mov	r2, r6
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b6ec:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b6f0:	4641      	mov	r1, r8
        hcdc->CmdOpCode = req->bRequest;
 800b6f2:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b6f6:	f000 fcb1 	bl	800c05c <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800b6fa:	463e      	mov	r6, r7
 800b6fc:	e7cd      	b.n	800b69a <USBD_CDC_Setup+0x5e>
 800b6fe:	bf00      	nop

0800b700 <USBD_CDC_DeInit>:
{
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b704:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b706:	2181      	movs	r1, #129	; 0x81
 800b708:	f000 fef6 	bl	800c4f8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b70c:	2101      	movs	r1, #1
 800b70e:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b710:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b712:	f000 fef1 	bl	800c4f8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b716:	2182      	movs	r1, #130	; 0x82
 800b718:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b71a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b71e:	f000 feeb 	bl	800c4f8 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800b722:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b726:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 800b728:	b14b      	cbz	r3, 800b73e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b72a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b732:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800b736:	f000 ff4f 	bl	800c5d8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b73a:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800b73e:	2000      	movs	r0, #0
 800b740:	bd38      	pop	{r3, r4, r5, pc}
 800b742:	bf00      	nop

0800b744 <USBD_CDC_Init>:
{
 800b744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b748:	7c03      	ldrb	r3, [r0, #16]
{
 800b74a:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b74c:	bbbb      	cbnz	r3, 800b7be <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b74e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b752:	2202      	movs	r2, #2
 800b754:	2181      	movs	r1, #129	; 0x81
 800b756:	f000 febf 	bl	800c4d8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b75a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b75c:	f44f 7300 	mov.w	r3, #512	; 0x200
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b760:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b762:	4629      	mov	r1, r5
 800b764:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b766:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b768:	4620      	mov	r0, r4
 800b76a:	f000 feb5 	bl	800c4d8 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b76e:	2308      	movs	r3, #8
 800b770:	2203      	movs	r2, #3
 800b772:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b774:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b778:	4620      	mov	r0, r4
 800b77a:	f000 fead 	bl	800c4d8 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b77e:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b782:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b784:	f000 ff24 	bl	800c5d0 <USBD_static_malloc>
 800b788:	4605      	mov	r5, r0
 800b78a:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800b78e:	b348      	cbz	r0, 800b7e4 <USBD_CDC_Init+0xa0>
    hcdc->TxState = 0U;
 800b790:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b794:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4798      	blx	r3
    hcdc->TxState = 0U;
 800b79c:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800b7a0:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b7a4:	7c26      	ldrb	r6, [r4, #16]
 800b7a6:	b196      	cbz	r6, 800b7ce <USBD_CDC_Init+0x8a>
  uint8_t ret = 0U;
 800b7a8:	4646      	mov	r6, r8
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7aa:	2340      	movs	r3, #64	; 0x40
 800b7ac:	4639      	mov	r1, r7
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b7b4:	f000 fefa 	bl	800c5ac <USBD_LL_PrepareReceive>
}
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b7be:	2340      	movs	r3, #64	; 0x40
 800b7c0:	2202      	movs	r2, #2
 800b7c2:	2181      	movs	r1, #129	; 0x81
 800b7c4:	f000 fe88 	bl	800c4d8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b7c8:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b7ca:	2340      	movs	r3, #64	; 0x40
 800b7cc:	e7c8      	b.n	800b760 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7d2:	4639      	mov	r1, r7
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b7da:	f000 fee7 	bl	800c5ac <USBD_LL_PrepareReceive>
}
 800b7de:	4630      	mov	r0, r6
 800b7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 800b7e4:	463e      	mov	r6, r7
}
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b7ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800b7ec:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 800b7ee:	b119      	cbz	r1, 800b7f8 <USBD_CDC_RegisterInterface+0xc>
  {
    pdev->pUserData= fops;
    ret = USBD_OK;
 800b7f0:	2000      	movs	r0, #0
    pdev->pUserData= fops;
 800b7f2:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
    ret = USBD_OK;
 800b7f6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800b7f8:	2002      	movs	r0, #2
  }

  return ret;
}
 800b7fa:	4770      	bx	lr

0800b7fc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800b7fc:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b7fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800b802:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800b804:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b808:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop

0800b810 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800b810:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800b812:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  return USBD_OK;
}
 800b816:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800b818:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop

0800b820 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b820:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 800b824:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800b826:	b19a      	cbz	r2, 800b850 <USBD_CDC_ReceivePacket+0x30>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800b828:	7c04      	ldrb	r4, [r0, #16]
 800b82a:	b144      	cbz	r4, 800b83e <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b82c:	2400      	movs	r4, #0
      USBD_LL_PrepareReceive(pdev,
 800b82e:	2340      	movs	r3, #64	; 0x40
 800b830:	2101      	movs	r1, #1
 800b832:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800b836:	f000 feb9 	bl	800c5ac <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800b83a:	4620      	mov	r0, r4
 800b83c:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800b83e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b842:	2101      	movs	r1, #1
 800b844:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800b848:	f000 feb0 	bl	800c5ac <USBD_LL_PrepareReceive>
}
 800b84c:	4620      	mov	r0, r4
 800b84e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800b850:	2402      	movs	r4, #2
}
 800b852:	4620      	mov	r0, r4
 800b854:	bd10      	pop	{r4, pc}
 800b856:	bf00      	nop

0800b858 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800b858:	b188      	cbz	r0, 800b87e <USBD_Init+0x26>
{
 800b85a:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800b85c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b860:	b113      	cbz	r3, 800b868 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800b862:	2300      	movs	r3, #0
 800b864:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800b868:	b109      	cbz	r1, 800b86e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800b86a:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b86e:	2301      	movs	r3, #1
  pdev->id = id;
 800b870:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b872:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b876:	f000 fddd 	bl	800c434 <USBD_LL_Init>

  return USBD_OK;
 800b87a:	2000      	movs	r0, #0
}
 800b87c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800b87e:	2002      	movs	r0, #2
}
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop

0800b884 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b884:	4603      	mov	r3, r0
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800b886:	b119      	cbz	r1, 800b890 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 800b888:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 800b88a:	f8c3 128c 	str.w	r1, [r3, #652]	; 0x28c
    status = USBD_OK;
 800b88e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b890:	2002      	movs	r0, #2
  }

  return status;
}
 800b892:	4770      	bx	lr

0800b894 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800b894:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b896:	f000 fe11 	bl	800c4bc <USBD_LL_Start>

  return USBD_OK;
}
 800b89a:	2000      	movs	r0, #0
 800b89c:	bd08      	pop	{r3, pc}
 800b89e:	bf00      	nop

0800b8a0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b8a0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800b8a2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b8a6:	b11b      	cbz	r3, 800b8b0 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4798      	blx	r3
 800b8ac:	b900      	cbnz	r0, 800b8b0 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800b8ae:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800b8b0:	2002      	movs	r0, #2
}
 800b8b2:	bd08      	pop	{r3, pc}

0800b8b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b8b4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b8b6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	4798      	blx	r3
  return USBD_OK;
}
 800b8be:	2000      	movs	r0, #0
 800b8c0:	bd08      	pop	{r3, pc}
 800b8c2:	bf00      	nop

0800b8c4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b8c8:	f500 7520 	add.w	r5, r0, #640	; 0x280
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f000 fb63 	bl	800bf98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b8d2:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 800b8d4:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286

  switch (pdev->request.bmRequest & 0x1FU)
 800b8d8:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 800b8dc:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
 800b8e0:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 800b8e4:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 800b8e6:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 800b8ea:	d009      	beq.n	800b900 <USBD_LL_SetupStage+0x3c>
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d013      	beq.n	800b918 <USBD_LL_SetupStage+0x54>
 800b8f0:	b163      	cbz	r3, 800b90c <USBD_LL_SetupStage+0x48>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b8f8:	f000 fe0c 	bl	800c514 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800b900:	4629      	mov	r1, r5
 800b902:	4620      	mov	r0, r4
 800b904:	f000 fa78 	bl	800bdf8 <USBD_StdItfReq>
}
 800b908:	2000      	movs	r0, #0
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 800b90c:	4629      	mov	r1, r5
 800b90e:	4620      	mov	r0, r4
 800b910:	f000 f8f8 	bl	800bb04 <USBD_StdDevReq>
}
 800b914:	2000      	movs	r0, #0
 800b916:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 800b918:	4629      	mov	r1, r5
 800b91a:	4620      	mov	r0, r4
 800b91c:	f000 faa0 	bl	800be60 <USBD_StdEPReq>
}
 800b920:	2000      	movs	r0, #0
 800b922:	bd38      	pop	{r3, r4, r5, pc}

0800b924 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b924:	b538      	push	{r3, r4, r5, lr}
 800b926:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800b928:	b969      	cbnz	r1, 800b946 <USBD_LL_DataOutStage+0x22>
 800b92a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b92c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800b930:	2a03      	cmp	r2, #3
 800b932:	d015      	beq.n	800b960 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b934:	2a05      	cmp	r2, #5
 800b936:	460c      	mov	r4, r1
 800b938:	d10e      	bne.n	800b958 <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b93a:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800b93e:	f000 fde9 	bl	800c514 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800b942:	4620      	mov	r0, r4
}
 800b944:	bd38      	pop	{r3, r4, r5, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 800b946:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b94a:	699b      	ldr	r3, [r3, #24]
 800b94c:	b133      	cbz	r3, 800b95c <USBD_LL_DataOutStage+0x38>
 800b94e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800b952:	2a03      	cmp	r2, #3
 800b954:	d102      	bne.n	800b95c <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 800b956:	4798      	blx	r3
  return USBD_OK;
 800b958:	2000      	movs	r0, #0
}
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b95c:	2002      	movs	r0, #2
}
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
      if(pep->rem_length > pep->maxpacket)
 800b960:	e9d0 1253 	ldrd	r1, r2, [r0, #332]	; 0x14c
 800b964:	4291      	cmp	r1, r2
 800b966:	d90c      	bls.n	800b982 <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -=  pep->maxpacket;
 800b968:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx (pdev,
 800b96a:	428a      	cmp	r2, r1
 800b96c:	bf88      	it	hi
 800b96e:	b28a      	uxthhi	r2, r1
        pep->rem_length -=  pep->maxpacket;
 800b970:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800b974:	bf98      	it	ls
 800b976:	b292      	uxthls	r2, r2
 800b978:	4619      	mov	r1, r3
 800b97a:	f000 fb7d 	bl	800c078 <USBD_CtlContinueRx>
  return USBD_OK;
 800b97e:	2000      	movs	r0, #0
}
 800b980:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b982:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	b11b      	cbz	r3, 800b992 <USBD_LL_DataOutStage+0x6e>
 800b98a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800b98e:	2a03      	cmp	r2, #3
 800b990:	d004      	beq.n	800b99c <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 800b992:	4628      	mov	r0, r5
 800b994:	f000 fb7a 	bl	800c08c <USBD_CtlSendStatus>
  return USBD_OK;
 800b998:	2000      	movs	r0, #0
}
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 800b99c:	4798      	blx	r3
 800b99e:	e7f8      	b.n	800b992 <USBD_LL_DataOutStage+0x6e>

0800b9a0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800b9a0:	b570      	push	{r4, r5, r6, lr}
 800b9a2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800b9a4:	b961      	cbnz	r1, 800b9c0 <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800b9a6:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d015      	beq.n	800b9da <USBD_LL_DataInStage+0x3a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b9ae:	f033 0304 	bics.w	r3, r3, #4
 800b9b2:	d02e      	beq.n	800ba12 <USBD_LL_DataInStage+0x72>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b9b4:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d031      	beq.n	800ba20 <USBD_LL_DataInStage+0x80>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800b9bc:	2000      	movs	r0, #0
}
 800b9be:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 800b9c0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	b133      	cbz	r3, 800b9d6 <USBD_LL_DataInStage+0x36>
 800b9c8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800b9cc:	2a03      	cmp	r2, #3
 800b9ce:	d102      	bne.n	800b9d6 <USBD_LL_DataInStage+0x36>
    pdev->pClass->DataIn(pdev, epnum);
 800b9d0:	4798      	blx	r3
  return USBD_OK;
 800b9d2:	2000      	movs	r0, #0
}
 800b9d4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800b9d6:	2002      	movs	r0, #2
}
 800b9d8:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 800b9da:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800b9de:	429e      	cmp	r6, r3
 800b9e0:	d833      	bhi.n	800ba4a <USBD_LL_DataInStage+0xaa>
        if((pep->total_length % pep->maxpacket == 0U) &&
 800b9e2:	69c2      	ldr	r2, [r0, #28]
 800b9e4:	fbb2 f5f3 	udiv	r5, r2, r3
 800b9e8:	fb03 2515 	mls	r5, r3, r5, r2
 800b9ec:	b9ed      	cbnz	r5, 800ba2a <USBD_LL_DataInStage+0x8a>
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d81b      	bhi.n	800ba2a <USBD_LL_DataInStage+0x8a>
           (pep->total_length >= pep->maxpacket) &&
 800b9f2:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d217      	bcs.n	800ba2a <USBD_LL_DataInStage+0x8a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b9fa:	462a      	mov	r2, r5
 800b9fc:	f000 fb24 	bl	800c048 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ba00:	462b      	mov	r3, r5
 800ba02:	462a      	mov	r2, r5
 800ba04:	4629      	mov	r1, r5
 800ba06:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800ba08:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ba0c:	f000 fdce 	bl	800c5ac <USBD_LL_PrepareReceive>
 800ba10:	e7d0      	b.n	800b9b4 <USBD_LL_DataInStage+0x14>
        USBD_LL_StallEP(pdev, 0x80U);
 800ba12:	2180      	movs	r1, #128	; 0x80
 800ba14:	f000 fd7e 	bl	800c514 <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 800ba18:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d1cd      	bne.n	800b9bc <USBD_LL_DataInStage+0x1c>
      pdev->dev_test_mode = 0U;
 800ba20:	2300      	movs	r3, #0
 800ba22:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
  return USBD_OK;
 800ba26:	4618      	mov	r0, r3
}
 800ba28:	bd70      	pop	{r4, r5, r6, pc}
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ba2a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	b11b      	cbz	r3, 800ba3a <USBD_LL_DataInStage+0x9a>
 800ba32:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800ba36:	2a03      	cmp	r2, #3
 800ba38:	d015      	beq.n	800ba66 <USBD_LL_DataInStage+0xc6>
          USBD_LL_StallEP(pdev, 0x80U);
 800ba3a:	2180      	movs	r1, #128	; 0x80
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f000 fd69 	bl	800c514 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ba42:	4620      	mov	r0, r4
 800ba44:	f000 fb2e 	bl	800c0a4 <USBD_CtlReceiveStatus>
 800ba48:	e7b4      	b.n	800b9b4 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800ba4a:	460d      	mov	r5, r1
 800ba4c:	1af3      	subs	r3, r6, r3
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800ba4e:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800ba50:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	f000 faf8 	bl	800c048 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ba58:	462b      	mov	r3, r5
 800ba5a:	462a      	mov	r2, r5
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f000 fda4 	bl	800c5ac <USBD_LL_PrepareReceive>
 800ba64:	e7a6      	b.n	800b9b4 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 800ba66:	4620      	mov	r0, r4
 800ba68:	4798      	blx	r3
 800ba6a:	e7e6      	b.n	800ba3a <USBD_LL_DataInStage+0x9a>

0800ba6c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800ba6c:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba6e:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba70:	2640      	movs	r6, #64	; 0x40
{
 800ba72:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba74:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba76:	4611      	mov	r1, r2
 800ba78:	4633      	mov	r3, r6
 800ba7a:	f000 fd2d 	bl	800c4d8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba7e:	4633      	mov	r3, r6
 800ba80:	2180      	movs	r1, #128	; 0x80
 800ba82:	2200      	movs	r2, #0
 800ba84:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba86:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba8a:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba8e:	f000 fd23 	bl	800c4d8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba92:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800ba94:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba98:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba9a:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba9c:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800baa0:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800baa4:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800baa6:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 800baaa:	b123      	cbz	r3, 800bab6 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800baac:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800bab0:	4620      	mov	r0, r4
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	4798      	blx	r3
  }

  return USBD_OK;
}
 800bab6:	2000      	movs	r0, #0
 800bab8:	bd70      	pop	{r4, r5, r6, pc}
 800baba:	bf00      	nop

0800babc <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800babc:	4603      	mov	r3, r0
  pdev->dev_speed = speed;
  return USBD_OK;
}
 800babe:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800bac0:	7419      	strb	r1, [r3, #16]
}
 800bac2:	4770      	bx	lr

0800bac4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800bac4:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bac6:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 800bac8:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
}
 800bacc:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bace:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
  pdev->dev_old_state =  pdev->dev_state;
 800bad2:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
}
 800bad6:	4770      	bx	lr

0800bad8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800bad8:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
 800bada:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
  return USBD_OK;
}
 800bade:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 800bae0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop

0800bae8 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800baec:	2a03      	cmp	r2, #3
 800baee:	d001      	beq.n	800baf4 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800baf0:	2000      	movs	r0, #0
 800baf2:	4770      	bx	lr
{
 800baf4:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 800baf6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800bafa:	69db      	ldr	r3, [r3, #28]
 800bafc:	b103      	cbz	r3, 800bb00 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800bafe:	4798      	blx	r3
}
 800bb00:	2000      	movs	r0, #0
 800bb02:	bd08      	pop	{r3, pc}

0800bb04 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800bb04:	b530      	push	{r4, r5, lr}
 800bb06:	780b      	ldrb	r3, [r1, #0]
 800bb08:	460d      	mov	r5, r1
 800bb0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb0e:	2b20      	cmp	r3, #32
{
 800bb10:	4604      	mov	r4, r0
 800bb12:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb14:	d00d      	beq.n	800bb32 <USBD_StdDevReq+0x2e>
 800bb16:	2b40      	cmp	r3, #64	; 0x40
 800bb18:	d00b      	beq.n	800bb32 <USBD_StdDevReq+0x2e>
 800bb1a:	b19b      	cbz	r3, 800bb44 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800bb1c:	2180      	movs	r1, #128	; 0x80
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f000 fcf8 	bl	800c514 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800bb24:	2100      	movs	r1, #0
 800bb26:	4620      	mov	r0, r4
 800bb28:	f000 fcf4 	bl	800c514 <USBD_LL_StallEP>
}
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	b003      	add	sp, #12
 800bb30:	bd30      	pop	{r4, r5, pc}
    pdev->pClass->Setup(pdev, req);
 800bb32:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800bb36:	4629      	mov	r1, r5
 800bb38:	4620      	mov	r0, r4
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	4798      	blx	r3
}
 800bb3e:	2000      	movs	r0, #0
 800bb40:	b003      	add	sp, #12
 800bb42:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 800bb44:	784b      	ldrb	r3, [r1, #1]
 800bb46:	2b09      	cmp	r3, #9
 800bb48:	d8e8      	bhi.n	800bb1c <USBD_StdDevReq+0x18>
 800bb4a:	a201      	add	r2, pc, #4	; (adr r2, 800bb50 <USBD_StdDevReq+0x4c>)
 800bb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb50:	0800bbab 	.word	0x0800bbab
 800bb54:	0800bbd7 	.word	0x0800bbd7
 800bb58:	0800bb1d 	.word	0x0800bb1d
 800bb5c:	0800bbf5 	.word	0x0800bbf5
 800bb60:	0800bb1d 	.word	0x0800bb1d
 800bb64:	0800bbfd 	.word	0x0800bbfd
 800bb68:	0800bc35 	.word	0x0800bc35
 800bb6c:	0800bb1d 	.word	0x0800bb1d
 800bb70:	0800bc65 	.word	0x0800bc65
 800bb74:	0800bb79 	.word	0x0800bb79
  cfgidx = (uint8_t)(req->wValue);
 800bb78:	7889      	ldrb	r1, [r1, #2]
 800bb7a:	4d9e      	ldr	r5, [pc, #632]	; (800bdf4 <USBD_StdDevReq+0x2f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb7c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800bb7e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb80:	d8cc      	bhi.n	800bb1c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800bb82:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	f000 8111 	beq.w	800bdae <USBD_StdDevReq+0x2aa>
 800bb8c:	2b03      	cmp	r3, #3
 800bb8e:	f000 80ff 	beq.w	800bd90 <USBD_StdDevReq+0x28c>
  USBD_LL_StallEP(pdev , 0x80U);
 800bb92:	2180      	movs	r1, #128	; 0x80
 800bb94:	f000 fcbe 	bl	800c514 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800bb98:	2100      	movs	r1, #0
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 fcba 	bl	800c514 <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 800bba0:	4620      	mov	r0, r4
 800bba2:	7829      	ldrb	r1, [r5, #0]
 800bba4:	f7ff fe86 	bl	800b8b4 <USBD_ClrClassConfig>
      break;
 800bba8:	e7c0      	b.n	800bb2c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800bbaa:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d8b3      	bhi.n	800bb1c <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 800bbb4:	88cb      	ldrh	r3, [r1, #6]
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	d1b0      	bne.n	800bb1c <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bbba:	2201      	movs	r2, #1
    if (pdev->dev_remote_wakeup)
 800bbbc:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bbc0:	60c2      	str	r2, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800bbc2:	b10b      	cbz	r3, 800bbc8 <USBD_StdDevReq+0xc4>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bbc8:	2202      	movs	r2, #2
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f104 010c 	add.w	r1, r4, #12
 800bbd0:	f000 fa2c 	bl	800c02c <USBD_CtlSendData>
    break;
 800bbd4:	e7aa      	b.n	800bb2c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800bbd6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d89d      	bhi.n	800bb1c <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbe0:	884b      	ldrh	r3, [r1, #2]
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d1a2      	bne.n	800bb2c <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 800bbe6:	2300      	movs	r3, #0
      USBD_CtlSendStatus(pdev);
 800bbe8:	4620      	mov	r0, r4
      pdev->dev_remote_wakeup = 0U;
 800bbea:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800bbee:	f000 fa4d 	bl	800c08c <USBD_CtlSendStatus>
 800bbf2:	e79b      	b.n	800bb2c <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbf4:	884b      	ldrh	r3, [r1, #2]
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d198      	bne.n	800bb2c <USBD_StdDevReq+0x28>
 800bbfa:	e7f5      	b.n	800bbe8 <USBD_StdDevReq+0xe4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bbfc:	888b      	ldrh	r3, [r1, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d18c      	bne.n	800bb1c <USBD_StdDevReq+0x18>
 800bc02:	88cb      	ldrh	r3, [r1, #6]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d189      	bne.n	800bb1c <USBD_StdDevReq+0x18>
 800bc08:	884d      	ldrh	r5, [r1, #2]
 800bc0a:	2d7f      	cmp	r5, #127	; 0x7f
 800bc0c:	d886      	bhi.n	800bb1c <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc0e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800bc12:	2b03      	cmp	r3, #3
 800bc14:	d082      	beq.n	800bb1c <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bc16:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800bc18:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bc1c:	f000 fcaa 	bl	800c574 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bc20:	4620      	mov	r0, r4
 800bc22:	f000 fa33 	bl	800c08c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800bc26:	2d00      	cmp	r5, #0
 800bc28:	f000 80df 	beq.w	800bdea <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc2c:	2302      	movs	r3, #2
 800bc2e:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800bc32:	e77b      	b.n	800bb2c <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 800bc34:	884a      	ldrh	r2, [r1, #2]
 800bc36:	0a13      	lsrs	r3, r2, #8
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	2b06      	cmp	r3, #6
 800bc3c:	f63f af6e 	bhi.w	800bb1c <USBD_StdDevReq+0x18>
 800bc40:	a101      	add	r1, pc, #4	; (adr r1, 800bc48 <USBD_StdDevReq+0x144>)
 800bc42:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc46:	bf00      	nop
 800bc48:	0800bcf7 	.word	0x0800bcf7
 800bc4c:	0800bcdf 	.word	0x0800bcdf
 800bc50:	0800bccd 	.word	0x0800bccd
 800bc54:	0800bb1d 	.word	0x0800bb1d
 800bc58:	0800bb1d 	.word	0x0800bb1d
 800bc5c:	0800bcb7 	.word	0x0800bcb7
 800bc60:	0800bc89 	.word	0x0800bc89
  if (req->wLength != 1U)
 800bc64:	88ca      	ldrh	r2, [r1, #6]
 800bc66:	2a01      	cmp	r2, #1
 800bc68:	f47f af58 	bne.w	800bb1c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800bc6c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d878      	bhi.n	800bd66 <USBD_StdDevReq+0x262>
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f43f af51 	beq.w	800bb1c <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 800bc7a:	4601      	mov	r1, r0
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bc82:	f000 f9d3 	bl	800c02c <USBD_CtlSendData>
      break;
 800bc86:	e751      	b.n	800bb2c <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800bc88:	7c03      	ldrb	r3, [r0, #16]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f47f af46 	bne.w	800bb1c <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bc90:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800bc94:	f10d 0006 	add.w	r0, sp, #6
 800bc98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bc9c:	2307      	movs	r3, #7
 800bc9e:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 800bca0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bca4:	2a00      	cmp	r2, #0
 800bca6:	d06e      	beq.n	800bd86 <USBD_StdDevReq+0x282>
 800bca8:	88eb      	ldrh	r3, [r5, #6]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d162      	bne.n	800bd74 <USBD_StdDevReq+0x270>
        USBD_CtlSendStatus(pdev);
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f000 f9ec 	bl	800c08c <USBD_CtlSendStatus>
 800bcb4:	e73a      	b.n	800bb2c <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800bcb6:	7c03      	ldrb	r3, [r0, #16]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	f47f af2f 	bne.w	800bb1c <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bcbe:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800bcc2:	f10d 0006 	add.w	r0, sp, #6
 800bcc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc8:	4798      	blx	r3
      break;
 800bcca:	e7e9      	b.n	800bca0 <USBD_StdDevReq+0x19c>
    switch ((uint8_t)(req->wValue))
 800bccc:	b2d2      	uxtb	r2, r2
 800bcce:	2a05      	cmp	r2, #5
 800bcd0:	f63f af24 	bhi.w	800bb1c <USBD_StdDevReq+0x18>
 800bcd4:	e8df f002 	tbb	[pc, r2]
 800bcd8:	272f373f 	.word	0x272f373f
 800bcdc:	171f      	.short	0x171f
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800bcde:	7c03      	ldrb	r3, [r0, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d172      	bne.n	800bdca <USBD_StdDevReq+0x2c6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800bce4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800bce8:	f10d 0006 	add.w	r0, sp, #6
 800bcec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcee:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	7043      	strb	r3, [r0, #1]
 800bcf4:	e7d4      	b.n	800bca0 <USBD_StdDevReq+0x19c>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bcf6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800bcfa:	f10d 0106 	add.w	r1, sp, #6
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	7c00      	ldrb	r0, [r0, #16]
 800bd02:	4798      	blx	r3
    break;
 800bd04:	e7cc      	b.n	800bca0 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd06:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800bd0a:	f10d 0106 	add.w	r1, sp, #6
 800bd0e:	699b      	ldr	r3, [r3, #24]
 800bd10:	7c00      	ldrb	r0, [r0, #16]
 800bd12:	4798      	blx	r3
      break;
 800bd14:	e7c4      	b.n	800bca0 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd16:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800bd1a:	f10d 0106 	add.w	r1, sp, #6
 800bd1e:	695b      	ldr	r3, [r3, #20]
 800bd20:	7c00      	ldrb	r0, [r0, #16]
 800bd22:	4798      	blx	r3
      break;
 800bd24:	e7bc      	b.n	800bca0 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd26:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800bd2a:	f10d 0106 	add.w	r1, sp, #6
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	7c00      	ldrb	r0, [r0, #16]
 800bd32:	4798      	blx	r3
      break;
 800bd34:	e7b4      	b.n	800bca0 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd36:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800bd3a:	f10d 0106 	add.w	r1, sp, #6
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	7c00      	ldrb	r0, [r0, #16]
 800bd42:	4798      	blx	r3
      break;
 800bd44:	e7ac      	b.n	800bca0 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd46:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800bd4a:	f10d 0106 	add.w	r1, sp, #6
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	7c00      	ldrb	r0, [r0, #16]
 800bd52:	4798      	blx	r3
      break;
 800bd54:	e7a4      	b.n	800bca0 <USBD_StdDevReq+0x19c>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd56:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800bd5a:	f10d 0106 	add.w	r1, sp, #6
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	7c00      	ldrb	r0, [r0, #16]
 800bd62:	4798      	blx	r3
      break;
 800bd64:	e79c      	b.n	800bca0 <USBD_StdDevReq+0x19c>
    switch (pdev->dev_state)
 800bd66:	2b03      	cmp	r3, #3
 800bd68:	f47f aed8 	bne.w	800bb1c <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bd6c:	1d01      	adds	r1, r0, #4
 800bd6e:	f000 f95d 	bl	800c02c <USBD_CtlSendData>
      break;
 800bd72:	e6db      	b.n	800bb2c <USBD_StdDevReq+0x28>
    len = MIN(len, req->wLength);
 800bd74:	429a      	cmp	r2, r3
 800bd76:	bf28      	it	cs
 800bd78:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 800bd7a:	4601      	mov	r1, r0
 800bd7c:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 800bd7e:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800bd82:	f000 f953 	bl	800c02c <USBD_CtlSendData>
  if(req->wLength == 0U)
 800bd86:	88eb      	ldrh	r3, [r5, #6]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f47f aecf 	bne.w	800bb2c <USBD_StdDevReq+0x28>
 800bd8e:	e78e      	b.n	800bcae <USBD_StdDevReq+0x1aa>
      if (cfgidx == 0U)
 800bd90:	b321      	cbz	r1, 800bddc <USBD_StdDevReq+0x2d8>
      else if (cfgidx != pdev->dev_config)
 800bd92:	6841      	ldr	r1, [r0, #4]
 800bd94:	2901      	cmp	r1, #1
 800bd96:	d08a      	beq.n	800bcae <USBD_StdDevReq+0x1aa>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd98:	b2c9      	uxtb	r1, r1
 800bd9a:	f7ff fd8b 	bl	800b8b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bd9e:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bda0:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 800bda2:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bda4:	f7ff fd7c 	bl	800b8a0 <USBD_SetClassConfig>
 800bda8:	2802      	cmp	r0, #2
 800bdaa:	d180      	bne.n	800bcae <USBD_StdDevReq+0x1aa>
 800bdac:	e6b6      	b.n	800bb1c <USBD_StdDevReq+0x18>
      if (cfgidx)
 800bdae:	2900      	cmp	r1, #0
 800bdb0:	f43f af7d 	beq.w	800bcae <USBD_StdDevReq+0x1aa>
        pdev->dev_config = cfgidx;
 800bdb4:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800bdb6:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800bdb8:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800bdba:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bdbe:	f7ff fd6f 	bl	800b8a0 <USBD_SetClassConfig>
 800bdc2:	2802      	cmp	r0, #2
 800bdc4:	f47f af73 	bne.w	800bcae <USBD_StdDevReq+0x1aa>
 800bdc8:	e6a8      	b.n	800bb1c <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bdca:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800bdce:	f10d 0006 	add.w	r0, sp, #6
 800bdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	7043      	strb	r3, [r0, #1]
 800bdda:	e761      	b.n	800bca0 <USBD_StdDevReq+0x19c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bddc:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800bdde:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bde0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 800bde4:	f7ff fd66 	bl	800b8b4 <USBD_ClrClassConfig>
 800bde8:	e761      	b.n	800bcae <USBD_StdDevReq+0x1aa>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bdea:	2301      	movs	r3, #1
 800bdec:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800bdf0:	e69c      	b.n	800bb2c <USBD_StdDevReq+0x28>
 800bdf2:	bf00      	nop
 800bdf4:	2000087c 	.word	0x2000087c

0800bdf8 <USBD_StdItfReq>:
{
 800bdf8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdfa:	780b      	ldrb	r3, [r1, #0]
{
 800bdfc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdfe:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800be02:	2a40      	cmp	r2, #64	; 0x40
{
 800be04:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be06:	d00a      	beq.n	800be1e <USBD_StdItfReq+0x26>
 800be08:	065b      	lsls	r3, r3, #25
 800be0a:	d508      	bpl.n	800be1e <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 800be0c:	2180      	movs	r1, #128	; 0x80
 800be0e:	f000 fb81 	bl	800c514 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800be12:	2100      	movs	r1, #0
 800be14:	4620      	mov	r0, r4
 800be16:	f000 fb7d 	bl	800c514 <USBD_LL_StallEP>
}
 800be1a:	2000      	movs	r0, #0
 800be1c:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 800be1e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800be22:	3b01      	subs	r3, #1
 800be24:	2b02      	cmp	r3, #2
 800be26:	d811      	bhi.n	800be4c <USBD_StdItfReq+0x54>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be28:	792b      	ldrb	r3, [r5, #4]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d80e      	bhi.n	800be4c <USBD_StdItfReq+0x54>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800be2e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800be32:	4629      	mov	r1, r5
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	4620      	mov	r0, r4
 800be38:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800be3a:	88eb      	ldrh	r3, [r5, #6]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1ec      	bne.n	800be1a <USBD_StdItfReq+0x22>
 800be40:	2800      	cmp	r0, #0
 800be42:	d1ea      	bne.n	800be1a <USBD_StdItfReq+0x22>
          USBD_CtlSendStatus(pdev);
 800be44:	4620      	mov	r0, r4
 800be46:	f000 f921 	bl	800c08c <USBD_CtlSendStatus>
 800be4a:	e7e6      	b.n	800be1a <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev , 0x80U);
 800be4c:	2180      	movs	r1, #128	; 0x80
 800be4e:	4620      	mov	r0, r4
 800be50:	f000 fb60 	bl	800c514 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800be54:	2100      	movs	r1, #0
 800be56:	4620      	mov	r0, r4
 800be58:	f000 fb5c 	bl	800c514 <USBD_LL_StallEP>
}
 800be5c:	2000      	movs	r0, #0
 800be5e:	bd38      	pop	{r3, r4, r5, pc}

0800be60 <USBD_StdEPReq>:
{
 800be60:	b538      	push	{r3, r4, r5, lr}
 800be62:	780b      	ldrb	r3, [r1, #0]
 800be64:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be6a:	2b20      	cmp	r3, #32
 800be6c:	d00c      	beq.n	800be88 <USBD_StdEPReq+0x28>
 800be6e:	2b40      	cmp	r3, #64	; 0x40
 800be70:	d00a      	beq.n	800be88 <USBD_StdEPReq+0x28>
 800be72:	b183      	cbz	r3, 800be96 <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 800be74:	2180      	movs	r1, #128	; 0x80
 800be76:	4620      	mov	r0, r4
 800be78:	f000 fb4c 	bl	800c514 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800be7c:	2100      	movs	r1, #0
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 fb48 	bl	800c514 <USBD_LL_StallEP>
}
 800be84:	2000      	movs	r0, #0
 800be86:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->Setup (pdev, req);
 800be88:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800be8c:	4620      	mov	r0, r4
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	4798      	blx	r3
}
 800be92:	2000      	movs	r0, #0
 800be94:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 800be96:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800be98:	888a      	ldrh	r2, [r1, #4]
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	fa5f fc82 	uxtb.w	ip, r2
    switch (req->bRequest)
 800bea0:	d03e      	beq.n	800bf20 <USBD_StdEPReq+0xc0>
 800bea2:	2b03      	cmp	r3, #3
 800bea4:	d02a      	beq.n	800befc <USBD_StdEPReq+0x9c>
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1e4      	bne.n	800be74 <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 800beaa:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d051      	beq.n	800bf56 <USBD_StdEPReq+0xf6>
 800beb2:	2b03      	cmp	r3, #3
 800beb4:	d1de      	bne.n	800be74 <USBD_StdEPReq+0x14>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800beb6:	f00c 030f 	and.w	r3, ip, #15
 800beba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800bebe:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bec0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800bec4:	d456      	bmi.n	800bf74 <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bec6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800beca:	2b00      	cmp	r3, #0
 800becc:	d0d2      	beq.n	800be74 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bece:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800bed2:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800bed6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800beda:	f505 75a0 	add.w	r5, r5, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bede:	b133      	cbz	r3, 800beee <USBD_StdEPReq+0x8e>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800bee0:	4661      	mov	r1, ip
 800bee2:	4620      	mov	r0, r4
 800bee4:	f000 fb32 	bl	800c54c <USBD_LL_IsStallEP>
 800bee8:	2800      	cmp	r0, #0
 800beea:	d04f      	beq.n	800bf8c <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 800beec:	2301      	movs	r3, #1
 800beee:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bef0:	2202      	movs	r2, #2
 800bef2:	4629      	mov	r1, r5
 800bef4:	4620      	mov	r0, r4
 800bef6:	f000 f899 	bl	800c02c <USBD_CtlSendData>
          break;
 800befa:	e7c3      	b.n	800be84 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800befc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d01d      	beq.n	800bf40 <USBD_StdEPReq+0xe0>
 800bf04:	2b03      	cmp	r3, #3
 800bf06:	d1b5      	bne.n	800be74 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bf08:	884b      	ldrh	r3, [r1, #2]
 800bf0a:	b92b      	cbnz	r3, 800bf18 <USBD_StdEPReq+0xb8>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf0c:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800bf10:	d002      	beq.n	800bf18 <USBD_StdEPReq+0xb8>
 800bf12:	88cb      	ldrh	r3, [r1, #6]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d03b      	beq.n	800bf90 <USBD_StdEPReq+0x130>
        USBD_CtlSendStatus(pdev);
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f000 f8b7 	bl	800c08c <USBD_CtlSendStatus>
        break;
 800bf1e:	e7b1      	b.n	800be84 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800bf20:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d00b      	beq.n	800bf40 <USBD_StdEPReq+0xe0>
 800bf28:	2b03      	cmp	r3, #3
 800bf2a:	d1a3      	bne.n	800be74 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bf2c:	884b      	ldrh	r3, [r1, #2]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d1a8      	bne.n	800be84 <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 800bf32:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800bf36:	d0ef      	beq.n	800bf18 <USBD_StdEPReq+0xb8>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800bf38:	4661      	mov	r1, ip
 800bf3a:	f000 faf9 	bl	800c530 <USBD_LL_ClearStallEP>
 800bf3e:	e7eb      	b.n	800bf18 <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf40:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800bf44:	d096      	beq.n	800be74 <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 800bf46:	4661      	mov	r1, ip
 800bf48:	f000 fae4 	bl	800c514 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800bf4c:	2180      	movs	r1, #128	; 0x80
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f000 fae0 	bl	800c514 <USBD_LL_StallEP>
 800bf54:	e796      	b.n	800be84 <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf56:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800bf5a:	d18b      	bne.n	800be74 <USBD_StdEPReq+0x14>
          pep->status = 0x0000U;
 800bf5c:	2300      	movs	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bf5e:	0611      	lsls	r1, r2, #24
 800bf60:	bf4c      	ite	mi
 800bf62:	f100 0114 	addmi.w	r1, r0, #20
 800bf66:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bf6a:	2202      	movs	r2, #2
          pep->status = 0x0000U;
 800bf6c:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bf6e:	f000 f85d 	bl	800c02c <USBD_CtlSendData>
          break;
 800bf72:	e787      	b.n	800be84 <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bf74:	699b      	ldr	r3, [r3, #24]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f43f af7c 	beq.w	800be74 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bf7c:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800bf80:	1c5d      	adds	r5, r3, #1
 800bf82:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800bf86:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800bf8a:	e7a8      	b.n	800bede <USBD_StdEPReq+0x7e>
            pep->status = 0x0000U;
 800bf8c:	6028      	str	r0, [r5, #0]
 800bf8e:	e7af      	b.n	800bef0 <USBD_StdEPReq+0x90>
            USBD_LL_StallEP(pdev, ep_addr);
 800bf90:	4661      	mov	r1, ip
 800bf92:	f000 fabf 	bl	800c514 <USBD_LL_StallEP>
 800bf96:	e7bf      	b.n	800bf18 <USBD_StdEPReq+0xb8>

0800bf98 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800bf98:	780b      	ldrb	r3, [r1, #0]
 800bf9a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800bf9c:	784b      	ldrb	r3, [r1, #1]
 800bf9e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800bfa0:	78ca      	ldrb	r2, [r1, #3]
 800bfa2:	788b      	ldrb	r3, [r1, #2]
 800bfa4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bfa8:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800bfaa:	794a      	ldrb	r2, [r1, #5]
 800bfac:	790b      	ldrb	r3, [r1, #4]
 800bfae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bfb2:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800bfb4:	79ca      	ldrb	r2, [r1, #7]
 800bfb6:	798b      	ldrb	r3, [r1, #6]
 800bfb8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bfbc:	80c3      	strh	r3, [r0, #6]
}
 800bfbe:	4770      	bx	lr

0800bfc0 <USBD_CtlError>:
{
 800bfc0:	b510      	push	{r4, lr}
 800bfc2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800bfc4:	2180      	movs	r1, #128	; 0x80
 800bfc6:	f000 faa5 	bl	800c514 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800bfca:	4620      	mov	r0, r4
}
 800bfcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	f000 ba9f 	b.w	800c514 <USBD_LL_StallEP>
 800bfd6:	bf00      	nop

0800bfd8 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800bfd8:	b318      	cbz	r0, 800c022 <USBD_GetString+0x4a>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800bfda:	7803      	ldrb	r3, [r0, #0]
{
 800bfdc:	b430      	push	{r4, r5}
    while (*buf != '\0')
 800bfde:	b30b      	cbz	r3, 800c024 <USBD_GetString+0x4c>
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	f1c0 0c01 	rsb	ip, r0, #1
    {
        len++;
 800bfe6:	eb04 030c 	add.w	r3, r4, ip
    while (*buf != '\0')
 800bfea:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	2d00      	cmp	r5, #0
 800bff2:	d1f8      	bne.n	800bfe6 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bff4:	3301      	adds	r3, #1
 800bff6:	005b      	lsls	r3, r3, #1
 800bff8:	b2dc      	uxtb	r4, r3
 800bffa:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bffc:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bffe:	700c      	strb	r4, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c000:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 800c002:	7804      	ldrb	r4, [r0, #0]
 800c004:	b15c      	cbz	r4, 800c01e <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c006:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800c008:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	b2d2      	uxtb	r2, r2
 800c00e:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800c010:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800c012:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 800c016:	3302      	adds	r3, #2
 800c018:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 800c01a:	2c00      	cmp	r4, #0
 800c01c:	d1f5      	bne.n	800c00a <USBD_GetString+0x32>
}
 800c01e:	bc30      	pop	{r4, r5}
 800c020:	4770      	bx	lr
 800c022:	4770      	bx	lr
    while (*buf != '\0')
 800c024:	2402      	movs	r4, #2
 800c026:	4623      	mov	r3, r4
 800c028:	e7e7      	b.n	800bffa <USBD_GetString+0x22>
 800c02a:	bf00      	nop

0800c02c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800c02c:	b510      	push	{r4, lr}
 800c02e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c030:	2402      	movs	r4, #2
{
 800c032:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800c034:	e9c0 3307 	strd	r3, r3, [r0, #28]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800c038:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c03a:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800c03e:	f000 faa7 	bl	800c590 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c042:	2000      	movs	r0, #0
 800c044:	bd10      	pop	{r4, pc}
 800c046:	bf00      	nop

0800c048 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800c048:	468c      	mov	ip, r1
 800c04a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800c04c:	2100      	movs	r1, #0
{
 800c04e:	4613      	mov	r3, r2
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800c050:	4662      	mov	r2, ip
 800c052:	f000 fa9d 	bl	800c590 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c056:	2000      	movs	r0, #0
 800c058:	bd08      	pop	{r3, pc}
 800c05a:	bf00      	nop

0800c05c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800c05c:	b510      	push	{r4, lr}
 800c05e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c060:	2403      	movs	r4, #3
{
 800c062:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800c064:	e9c0 3352 	strd	r3, r3, [r0, #328]	; 0x148

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800c068:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c06a:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800c06e:	f000 fa9d 	bl	800c5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c072:	2000      	movs	r0, #0
 800c074:	bd10      	pop	{r4, pc}
 800c076:	bf00      	nop

0800c078 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800c078:	468c      	mov	ip, r1
 800c07a:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c07c:	2100      	movs	r1, #0
{
 800c07e:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c080:	4662      	mov	r2, ip
 800c082:	f000 fa93 	bl	800c5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c086:	2000      	movs	r0, #0
 800c088:	bd08      	pop	{r3, pc}
 800c08a:	bf00      	nop

0800c08c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800c08c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c08e:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c090:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c092:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c096:	461a      	mov	r2, r3
 800c098:	4619      	mov	r1, r3
 800c09a:	f000 fa79 	bl	800c590 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c09e:	2000      	movs	r0, #0
 800c0a0:	bd08      	pop	{r3, pc}
 800c0a2:	bf00      	nop

0800c0a4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800c0a4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c0a6:	2105      	movs	r1, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c0a8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c0aa:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	f000 fa7b 	bl	800c5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	bd08      	pop	{r3, pc}
 800c0ba:	bf00      	nop

0800c0bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c0bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	4917      	ldr	r1, [pc, #92]	; (800c120 <MX_USB_DEVICE_Init+0x64>)
 800c0c2:	4818      	ldr	r0, [pc, #96]	; (800c124 <MX_USB_DEVICE_Init+0x68>)
 800c0c4:	f7ff fbc8 	bl	800b858 <USBD_Init>
 800c0c8:	b970      	cbnz	r0, 800c0e8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c0ca:	4917      	ldr	r1, [pc, #92]	; (800c128 <MX_USB_DEVICE_Init+0x6c>)
 800c0cc:	4815      	ldr	r0, [pc, #84]	; (800c124 <MX_USB_DEVICE_Init+0x68>)
 800c0ce:	f7ff fbd9 	bl	800b884 <USBD_RegisterClass>
 800c0d2:	b988      	cbnz	r0, 800c0f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c0d4:	4915      	ldr	r1, [pc, #84]	; (800c12c <MX_USB_DEVICE_Init+0x70>)
 800c0d6:	4813      	ldr	r0, [pc, #76]	; (800c124 <MX_USB_DEVICE_Init+0x68>)
 800c0d8:	f7ff fb88 	bl	800b7ec <USBD_CDC_RegisterInterface>
 800c0dc:	b9a0      	cbnz	r0, 800c108 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c0de:	4811      	ldr	r0, [pc, #68]	; (800c124 <MX_USB_DEVICE_Init+0x68>)
 800c0e0:	f7ff fbd8 	bl	800b894 <USBD_Start>
 800c0e4:	b9b8      	cbnz	r0, 800c116 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c0e6:	bd08      	pop	{r3, pc}
    Error_Handler();
 800c0e8:	f7fa fdc2 	bl	8006c70 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c0ec:	490e      	ldr	r1, [pc, #56]	; (800c128 <MX_USB_DEVICE_Init+0x6c>)
 800c0ee:	480d      	ldr	r0, [pc, #52]	; (800c124 <MX_USB_DEVICE_Init+0x68>)
 800c0f0:	f7ff fbc8 	bl	800b884 <USBD_RegisterClass>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d0ed      	beq.n	800c0d4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800c0f8:	f7fa fdba 	bl	8006c70 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c0fc:	490b      	ldr	r1, [pc, #44]	; (800c12c <MX_USB_DEVICE_Init+0x70>)
 800c0fe:	4809      	ldr	r0, [pc, #36]	; (800c124 <MX_USB_DEVICE_Init+0x68>)
 800c100:	f7ff fb74 	bl	800b7ec <USBD_CDC_RegisterInterface>
 800c104:	2800      	cmp	r0, #0
 800c106:	d0ea      	beq.n	800c0de <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800c108:	f7fa fdb2 	bl	8006c70 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c10c:	4805      	ldr	r0, [pc, #20]	; (800c124 <MX_USB_DEVICE_Init+0x68>)
 800c10e:	f7ff fbc1 	bl	800b894 <USBD_Start>
 800c112:	2800      	cmp	r0, #0
 800c114:	d0e7      	beq.n	800c0e6 <MX_USB_DEVICE_Init+0x2a>
}
 800c116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800c11a:	f7fa bda9 	b.w	8006c70 <Error_Handler>
 800c11e:	bf00      	nop
 800c120:	20000140 	.word	0x20000140
 800c124:	20000880 	.word	0x20000880
 800c128:	20000020 	.word	0x20000020
 800c12c:	20000130 	.word	0x20000130

0800c130 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800c130:	2000      	movs	r0, #0
 800c132:	4770      	bx	lr

0800c134 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800c134:	2000      	movs	r0, #0
 800c136:	4770      	bx	lr

0800c138 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13a:	4604      	mov	r4, r0
 800c13c:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c13e:	4f0f      	ldr	r7, [pc, #60]	; (800c17c <CDC_Receive_FS+0x44>)
 800c140:	4621      	mov	r1, r4
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);

	memset (usbbuffer, '\0', 128);  // clear the buffer
 800c142:	4e0f      	ldr	r6, [pc, #60]	; (800c180 <CDC_Receive_FS+0x48>)
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c144:	4638      	mov	r0, r7
 800c146:	f7ff fb63 	bl	800b810 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c14a:	4638      	mov	r0, r7
 800c14c:	f7ff fb68 	bl	800b820 <USBD_CDC_ReceivePacket>
	memset (usbbuffer, '\0', 128);  // clear the buffer
 800c150:	2280      	movs	r2, #128	; 0x80
 800c152:	2100      	movs	r1, #0
 800c154:	4630      	mov	r0, r6
 800c156:	f000 fa79 	bl	800c64c <memset>
	uint8_t len = (uint8_t)*Len;
	memcpy(usbbuffer, Buf, len);  // copy the data to the buffer
 800c15a:	782d      	ldrb	r5, [r5, #0]
 800c15c:	4621      	mov	r1, r4
 800c15e:	462a      	mov	r2, r5
 800c160:	4630      	mov	r0, r6
 800c162:	f000 fa65 	bl	800c630 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800c166:	462a      	mov	r2, r5
 800c168:	2100      	movs	r1, #0
 800c16a:	4620      	mov	r0, r4
 800c16c:	f000 fa6e 	bl	800c64c <memset>

	HAL_EXTI_GenerateSWI(&hexti1);
 800c170:	4804      	ldr	r0, [pc, #16]	; (800c184 <CDC_Receive_FS+0x4c>)
 800c172:	f7fb ff7b 	bl	800806c <HAL_EXTI_GenerateSWI>

	return (USBD_OK);
  /* USER CODE END 6 */
}
 800c176:	2000      	movs	r0, #0
 800c178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c17a:	bf00      	nop
 800c17c:	20000880 	.word	0x20000880
 800c180:	200007e4 	.word	0x200007e4
 800c184:	200004e4 	.word	0x200004e4

0800c188 <CDC_Init_FS>:
{
 800c188:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c18a:	4c06      	ldr	r4, [pc, #24]	; (800c1a4 <CDC_Init_FS+0x1c>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	4620      	mov	r0, r4
 800c190:	4905      	ldr	r1, [pc, #20]	; (800c1a8 <CDC_Init_FS+0x20>)
 800c192:	f7ff fb33 	bl	800b7fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c196:	4620      	mov	r0, r4
 800c198:	4904      	ldr	r1, [pc, #16]	; (800c1ac <CDC_Init_FS+0x24>)
 800c19a:	f7ff fb39 	bl	800b810 <USBD_CDC_SetRxBuffer>
}
 800c19e:	2000      	movs	r0, #0
 800c1a0:	bd10      	pop	{r4, pc}
 800c1a2:	bf00      	nop
 800c1a4:	20000880 	.word	0x20000880
 800c1a8:	20000f04 	.word	0x20000f04
 800c1ac:	20000b1c 	.word	0x20000b1c

0800c1b0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1b0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800c1b2:	4801      	ldr	r0, [pc, #4]	; (800c1b8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1b4:	800b      	strh	r3, [r1, #0]
}
 800c1b6:	4770      	bx	lr
 800c1b8:	2000015c 	.word	0x2000015c

0800c1bc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c1bc:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800c1be:	4801      	ldr	r0, [pc, #4]	; (800c1c4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800c1c0:	800b      	strh	r3, [r1, #0]
}
 800c1c2:	4770      	bx	lr
 800c1c4:	20000170 	.word	0x20000170

0800c1c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1c8:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c1ca:	4c04      	ldr	r4, [pc, #16]	; (800c1dc <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800c1cc:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c1ce:	4804      	ldr	r0, [pc, #16]	; (800c1e0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	f7ff ff01 	bl	800bfd8 <USBD_GetString>
  return USBD_StrDesc;
}
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	bd10      	pop	{r4, pc}
 800c1da:	bf00      	nop
 800c1dc:	200012ec 	.word	0x200012ec
 800c1e0:	0800f57c 	.word	0x0800f57c

0800c1e4 <USBD_FS_ProductStrDescriptor>:
{
 800c1e4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1e6:	4c04      	ldr	r4, [pc, #16]	; (800c1f8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800c1e8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1ea:	4804      	ldr	r0, [pc, #16]	; (800c1fc <USBD_FS_ProductStrDescriptor+0x18>)
 800c1ec:	4621      	mov	r1, r4
 800c1ee:	f7ff fef3 	bl	800bfd8 <USBD_GetString>
}
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	bd10      	pop	{r4, pc}
 800c1f6:	bf00      	nop
 800c1f8:	200012ec 	.word	0x200012ec
 800c1fc:	0800f590 	.word	0x0800f590

0800c200 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c200:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c202:	4c04      	ldr	r4, [pc, #16]	; (800c214 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800c204:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c206:	4804      	ldr	r0, [pc, #16]	; (800c218 <USBD_FS_ConfigStrDescriptor+0x18>)
 800c208:	4621      	mov	r1, r4
 800c20a:	f7ff fee5 	bl	800bfd8 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800c20e:	4620      	mov	r0, r4
 800c210:	bd10      	pop	{r4, pc}
 800c212:	bf00      	nop
 800c214:	200012ec 	.word	0x200012ec
 800c218:	0800f5a8 	.word	0x0800f5a8

0800c21c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c21c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c21e:	4c04      	ldr	r4, [pc, #16]	; (800c230 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800c220:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c222:	4804      	ldr	r0, [pc, #16]	; (800c234 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800c224:	4621      	mov	r1, r4
 800c226:	f7ff fed7 	bl	800bfd8 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800c22a:	4620      	mov	r0, r4
 800c22c:	bd10      	pop	{r4, pc}
 800c22e:	bf00      	nop
 800c230:	200012ec 	.word	0x200012ec
 800c234:	0800f5b4 	.word	0x0800f5b4

0800c238 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800c238:	f04f 0c1a 	mov.w	ip, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c23c:	4a42      	ldr	r2, [pc, #264]	; (800c348 <USBD_FS_SerialStrDescriptor+0x110>)
 800c23e:	6d10      	ldr	r0, [r2, #80]	; 0x50
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800c240:	6d93      	ldr	r3, [r2, #88]	; 0x58
  *length = USB_SIZ_STRING_SERIAL;
 800c242:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800c246:	18c3      	adds	r3, r0, r3
 800c248:	d101      	bne.n	800c24e <USBD_FS_SerialStrDescriptor+0x16>
}
 800c24a:	4840      	ldr	r0, [pc, #256]	; (800c34c <USBD_FS_SerialStrDescriptor+0x114>)
 800c24c:	4770      	bx	lr
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800c24e:	f04f 0c00 	mov.w	ip, #0
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c252:	6d51      	ldr	r1, [r2, #84]	; 0x54
    if (((value >> 28)) < 0xA)
 800c254:	0f18      	lsrs	r0, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800c256:	4a3d      	ldr	r2, [pc, #244]	; (800c34c <USBD_FS_SerialStrDescriptor+0x114>)
    if (((value >> 28)) < 0xA)
 800c258:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c25c:	bf2c      	ite	cs
 800c25e:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c260:	3030      	addcc	r0, #48	; 0x30
 800c262:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800c264:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800c268:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c26a:	bf8c      	ite	hi
 800c26c:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c26e:	3030      	addls	r0, #48	; 0x30
 800c270:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800c272:	f3c3 5003 	ubfx	r0, r3, #20, #4
 800c276:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c278:	bf8c      	ite	hi
 800c27a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c27c:	3030      	addls	r0, #48	; 0x30
 800c27e:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800c280:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800c284:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c286:	bf8c      	ite	hi
 800c288:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c28a:	3030      	addls	r0, #48	; 0x30
 800c28c:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800c28e:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800c292:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c294:	bf8c      	ite	hi
 800c296:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c298:	3030      	addls	r0, #48	; 0x30
 800c29a:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800c29c:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800c2a0:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c2a2:	bf8c      	ite	hi
 800c2a4:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c2a6:	3030      	addls	r0, #48	; 0x30
 800c2a8:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800c2aa:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800c2ae:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c2b0:	bf8c      	ite	hi
 800c2b2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c2b4:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800c2b6:	f882 c003 	strb.w	ip, [r2, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 800c2ba:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800c2bc:	f04f 0c00 	mov.w	ip, #0
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	f882 c005 	strb.w	ip, [r2, #5]
 800c2c6:	73d0      	strb	r0, [r2, #15]
 800c2c8:	f04f 0c00 	mov.w	ip, #0
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	f882 c007 	strb.w	ip, [r2, #7]
 800c2d2:	7450      	strb	r0, [r2, #17]
 800c2d4:	f04f 0c00 	mov.w	ip, #0
 800c2d8:	2000      	movs	r0, #0
 800c2da:	f882 c009 	strb.w	ip, [r2, #9]
 800c2de:	74d0      	strb	r0, [r2, #19]
 800c2e0:	f04f 0c00 	mov.w	ip, #0
 800c2e4:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800c2e6:	f003 030f 	and.w	r3, r3, #15
 800c2ea:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800c2ec:	bf94      	ite	ls
 800c2ee:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c2f0:	3337      	addhi	r3, #55	; 0x37
 800c2f2:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800c2f4:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 800c2f8:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c2fc:	bf2c      	ite	cs
 800c2fe:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c300:	3330      	addcc	r3, #48	; 0x30
 800c302:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800c304:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800c308:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c30a:	bf8c      	ite	hi
 800c30c:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c30e:	3330      	addls	r3, #48	; 0x30
 800c310:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800c312:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800c316:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c318:	bf8c      	ite	hi
 800c31a:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800c31c:	3330      	addls	r3, #48	; 0x30
 800c31e:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800c320:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800c324:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800c326:	bf94      	ite	ls
 800c328:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c32a:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 800c32c:	f882 c00b 	strb.w	ip, [r2, #11]
 800c330:	7550      	strb	r0, [r2, #21]
 800c332:	f04f 0c00 	mov.w	ip, #0
 800c336:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c338:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800c33a:	2300      	movs	r3, #0
 800c33c:	75d0      	strb	r0, [r2, #23]
 800c33e:	f882 c00d 	strb.w	ip, [r2, #13]
}
 800c342:	4802      	ldr	r0, [pc, #8]	; (800c34c <USBD_FS_SerialStrDescriptor+0x114>)
    pbuf[2 * idx + 1] = 0;
 800c344:	7653      	strb	r3, [r2, #25]
}
 800c346:	4770      	bx	lr
 800c348:	1ff80000 	.word	0x1ff80000
 800c34c:	20000174 	.word	0x20000174

0800c350 <HAL_PCDEx_SetConnectionState>:
{
  /* USER CODE BEGIN 6 */
  if (state == 1)
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800c350:	4a04      	ldr	r2, [pc, #16]	; (800c364 <HAL_PCDEx_SetConnectionState+0x14>)
  if (state == 1)
 800c352:	2901      	cmp	r1, #1
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800c354:	6853      	ldr	r3, [r2, #4]
 800c356:	bf0c      	ite	eq
 800c358:	f043 0301 	orreq.w	r3, r3, #1
  }
  else
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800c35c:	f023 0301 	bicne.w	r3, r3, #1
 800c360:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END 6 */
}
 800c362:	4770      	bx	lr
 800c364:	40010000 	.word	0x40010000

0800c368 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 800c368:	4b0e      	ldr	r3, [pc, #56]	; (800c3a4 <HAL_PCD_MspInit+0x3c>)
 800c36a:	6802      	ldr	r2, [r0, #0]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d000      	beq.n	800c372 <HAL_PCD_MspInit+0xa>
 800c370:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c372:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800c374:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 800c378:	6a59      	ldr	r1, [r3, #36]	; 0x24
{
 800c37a:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 800c37c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800c380:	6259      	str	r1, [r3, #36]	; 0x24
 800c382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 800c384:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800c386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c38a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c38c:	2014      	movs	r0, #20
 800c38e:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800c390:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c392:	f7fb fbc3 	bl	8007b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c396:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c398:	b003      	add	sp, #12
 800c39a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c39e:	f7fb bbfb 	b.w	8007b98 <HAL_NVIC_EnableIRQ>
 800c3a2:	bf00      	nop
 800c3a4:	40005c00 	.word	0x40005c00

0800c3a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3a8:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c3aa:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c3ae:	f501 712c 	add.w	r1, r1, #688	; 0x2b0
 800c3b2:	f7ff ba87 	b.w	800b8c4 <USBD_LL_SetupStage>
 800c3b6:	bf00      	nop

0800c3b8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c3b8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c3bc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c3c0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800c3c4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c3c8:	f7ff baac 	b.w	800b924 <USBD_LL_DataOutStage>

0800c3cc <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c3cc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c3d0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c3d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3d6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c3da:	f7ff bae1 	b.w	800b9a0 <USBD_LL_DataInStage>
 800c3de:	bf00      	nop

0800c3e0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c3e0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c3e4:	f7ff bb80 	b.w	800bae8 <USBD_LL_SOF>

0800c3e8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c3e8:	6883      	ldr	r3, [r0, #8]
{
 800c3ea:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c3ec:	2b02      	cmp	r3, #2
{
 800c3ee:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c3f0:	d001      	beq.n	800c3f6 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800c3f2:	f7fa fc3d 	bl	8006c70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c3f6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800c3fa:	2101      	movs	r1, #1
 800c3fc:	f7ff fb5e 	bl	800babc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c400:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800c404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c408:	f7ff bb30 	b.w	800ba6c <USBD_LL_Reset>

0800c40c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c40c:	b510      	push	{r4, lr}
 800c40e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c410:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c414:	f7ff fb56 	bl	800bac4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c418:	69a3      	ldr	r3, [r4, #24]
 800c41a:	b123      	cbz	r3, 800c426 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c41c:	4a02      	ldr	r2, [pc, #8]	; (800c428 <HAL_PCD_SuspendCallback+0x1c>)
 800c41e:	6913      	ldr	r3, [r2, #16]
 800c420:	f043 0306 	orr.w	r3, r3, #6
 800c424:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c426:	bd10      	pop	{r4, pc}
 800c428:	e000ed00 	.word	0xe000ed00

0800c42c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c42c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800c430:	f7ff bb52 	b.w	800bad8 <USBD_LL_Resume>

0800c434 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c434:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c436:	2408      	movs	r4, #8
  hpcd_USB_FS.pData = pdev;
 800c438:	4b1e      	ldr	r3, [pc, #120]	; (800c4b4 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c43a:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c43c:	605c      	str	r4, [r3, #4]
{
 800c43e:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c440:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c442:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c444:	621a      	str	r2, [r3, #32]
  hpcd_USB_FS.Instance = USB;
 800c446:	4a1c      	ldr	r2, [pc, #112]	; (800c4b8 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 800c448:	f8c3 42e8 	str.w	r4, [r3, #744]	; 0x2e8
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c44c:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 800c44e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c452:	6099      	str	r1, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c454:	6119      	str	r1, [r3, #16]
  hpcd_USB_FS.Instance = USB;
 800c456:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c458:	f7fc fa0c 	bl	8008874 <HAL_PCD_Init>
 800c45c:	bb30      	cbnz	r0, 800c4ac <USBD_LL_Init+0x78>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c45e:	2200      	movs	r2, #0
 800c460:	2318      	movs	r3, #24
 800c462:	4611      	mov	r1, r2
 800c464:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c468:	f7fd f904 	bl	8009674 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c46c:	2358      	movs	r3, #88	; 0x58
 800c46e:	2200      	movs	r2, #0
 800c470:	2180      	movs	r1, #128	; 0x80
 800c472:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c476:	f7fd f8fd 	bl	8009674 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c47a:	23c0      	movs	r3, #192	; 0xc0
 800c47c:	2200      	movs	r2, #0
 800c47e:	2181      	movs	r1, #129	; 0x81
 800c480:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c484:	f7fd f8f6 	bl	8009674 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c488:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c48c:	2200      	movs	r2, #0
 800c48e:	2101      	movs	r1, #1
 800c490:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c494:	f7fd f8ee 	bl	8009674 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c49c:	2200      	movs	r2, #0
 800c49e:	2182      	movs	r1, #130	; 0x82
 800c4a0:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800c4a4:	f7fd f8e6 	bl	8009674 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800c4ac:	f7fa fbe0 	bl	8006c70 <Error_Handler>
 800c4b0:	e7d5      	b.n	800c45e <USBD_LL_Init+0x2a>
 800c4b2:	bf00      	nop
 800c4b4:	200014ec 	.word	0x200014ec
 800c4b8:	40005c00 	.word	0x40005c00

0800c4bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c4bc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800c4be:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c4c2:	f7fc fa39 	bl	8008938 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800c4c6:	2803      	cmp	r0, #3
 800c4c8:	bf96      	itet	ls
 800c4ca:	4b02      	ldrls	r3, [pc, #8]	; (800c4d4 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 800c4cc:	2002      	movhi	r0, #2
 800c4ce:	5c18      	ldrbls	r0, [r3, r0]
}
 800c4d0:	bd08      	pop	{r3, pc}
 800c4d2:	bf00      	nop
 800c4d4:	0800f5c4 	.word	0x0800f5c4

0800c4d8 <USBD_LL_OpenEP>:
{
 800c4d8:	4694      	mov	ip, r2
 800c4da:	b508      	push	{r3, lr}
 800c4dc:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c4de:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c4e2:	4663      	mov	r3, ip
 800c4e4:	f7fc ff9c 	bl	8009420 <HAL_PCD_EP_Open>
  switch (hal_status)
 800c4e8:	2803      	cmp	r0, #3
 800c4ea:	bf96      	itet	ls
 800c4ec:	4b01      	ldrls	r3, [pc, #4]	; (800c4f4 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c4ee:	2002      	movhi	r0, #2
 800c4f0:	5c18      	ldrbls	r0, [r3, r0]
}
 800c4f2:	bd08      	pop	{r3, pc}
 800c4f4:	0800f5c4 	.word	0x0800f5c4

0800c4f8 <USBD_LL_CloseEP>:
{
 800c4f8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c4fa:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c4fe:	f7fc ffcd 	bl	800949c <HAL_PCD_EP_Close>
  switch (hal_status)
 800c502:	2803      	cmp	r0, #3
 800c504:	bf96      	itet	ls
 800c506:	4b02      	ldrls	r3, [pc, #8]	; (800c510 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c508:	2002      	movhi	r0, #2
 800c50a:	5c18      	ldrbls	r0, [r3, r0]
}
 800c50c:	bd08      	pop	{r3, pc}
 800c50e:	bf00      	nop
 800c510:	0800f5c4 	.word	0x0800f5c4

0800c514 <USBD_LL_StallEP>:
{
 800c514:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c516:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c51a:	f7fd f837 	bl	800958c <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800c51e:	2803      	cmp	r0, #3
 800c520:	bf96      	itet	ls
 800c522:	4b02      	ldrls	r3, [pc, #8]	; (800c52c <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c524:	2002      	movhi	r0, #2
 800c526:	5c18      	ldrbls	r0, [r3, r0]
}
 800c528:	bd08      	pop	{r3, pc}
 800c52a:	bf00      	nop
 800c52c:	0800f5c4 	.word	0x0800f5c4

0800c530 <USBD_LL_ClearStallEP>:
{
 800c530:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c532:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c536:	f7fd f861 	bl	80095fc <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800c53a:	2803      	cmp	r0, #3
 800c53c:	bf96      	itet	ls
 800c53e:	4b02      	ldrls	r3, [pc, #8]	; (800c548 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c540:	2002      	movhi	r0, #2
 800c542:	5c18      	ldrbls	r0, [r3, r0]
}
 800c544:	bd08      	pop	{r3, pc}
 800c546:	bf00      	nop
 800c548:	0800f5c4 	.word	0x0800f5c4

0800c54c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800c54c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c54e:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 800c552:	d406      	bmi.n	800c562 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c554:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c558:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c55c:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800c560:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c562:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800c566:	3101      	adds	r1, #1
 800c568:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c56c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c570:	7888      	ldrb	r0, [r1, #2]
 800c572:	4770      	bx	lr

0800c574 <USBD_LL_SetUSBAddress>:
{
 800c574:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c576:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c57a:	f7fc ff3b 	bl	80093f4 <HAL_PCD_SetAddress>
  switch (hal_status)
 800c57e:	2803      	cmp	r0, #3
 800c580:	bf96      	itet	ls
 800c582:	4b02      	ldrls	r3, [pc, #8]	; (800c58c <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c584:	2002      	movhi	r0, #2
 800c586:	5c18      	ldrbls	r0, [r3, r0]
}
 800c588:	bd08      	pop	{r3, pc}
 800c58a:	bf00      	nop
 800c58c:	0800f5c4 	.word	0x0800f5c4

0800c590 <USBD_LL_Transmit>:
{
 800c590:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c592:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c596:	f7fc ffd5 	bl	8009544 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800c59a:	2803      	cmp	r0, #3
 800c59c:	bf96      	itet	ls
 800c59e:	4b02      	ldrls	r3, [pc, #8]	; (800c5a8 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c5a0:	2002      	movhi	r0, #2
 800c5a2:	5c18      	ldrbls	r0, [r3, r0]
}
 800c5a4:	bd08      	pop	{r3, pc}
 800c5a6:	bf00      	nop
 800c5a8:	0800f5c4 	.word	0x0800f5c4

0800c5ac <USBD_LL_PrepareReceive>:
{
 800c5ac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c5ae:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c5b2:	f7fc ffa5 	bl	8009500 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800c5b6:	2803      	cmp	r0, #3
 800c5b8:	bf96      	itet	ls
 800c5ba:	4b02      	ldrls	r3, [pc, #8]	; (800c5c4 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c5bc:	2002      	movhi	r0, #2
 800c5be:	5c18      	ldrbls	r0, [r3, r0]
}
 800c5c0:	bd08      	pop	{r3, pc}
 800c5c2:	bf00      	nop
 800c5c4:	0800f5c4 	.word	0x0800f5c4

0800c5c8 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c5c8:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800c5cc:	f7fc bfb0 	b.w	8009530 <HAL_PCD_EP_GetRxCount>

0800c5d0 <USBD_static_malloc>:
}
 800c5d0:	4800      	ldr	r0, [pc, #0]	; (800c5d4 <USBD_static_malloc+0x4>)
 800c5d2:	4770      	bx	lr
 800c5d4:	200017d8 	.word	0x200017d8

0800c5d8 <USBD_static_free>:
}
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop

0800c5dc <__errno>:
 800c5dc:	4b01      	ldr	r3, [pc, #4]	; (800c5e4 <__errno+0x8>)
 800c5de:	6818      	ldr	r0, [r3, #0]
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	20000190 	.word	0x20000190

0800c5e8 <__libc_init_array>:
 800c5e8:	b570      	push	{r4, r5, r6, lr}
 800c5ea:	2600      	movs	r6, #0
 800c5ec:	4d0c      	ldr	r5, [pc, #48]	; (800c620 <__libc_init_array+0x38>)
 800c5ee:	4c0d      	ldr	r4, [pc, #52]	; (800c624 <__libc_init_array+0x3c>)
 800c5f0:	1b64      	subs	r4, r4, r5
 800c5f2:	10a4      	asrs	r4, r4, #2
 800c5f4:	42a6      	cmp	r6, r4
 800c5f6:	d109      	bne.n	800c60c <__libc_init_array+0x24>
 800c5f8:	f002 ff10 	bl	800f41c <_init>
 800c5fc:	2600      	movs	r6, #0
 800c5fe:	4d0a      	ldr	r5, [pc, #40]	; (800c628 <__libc_init_array+0x40>)
 800c600:	4c0a      	ldr	r4, [pc, #40]	; (800c62c <__libc_init_array+0x44>)
 800c602:	1b64      	subs	r4, r4, r5
 800c604:	10a4      	asrs	r4, r4, #2
 800c606:	42a6      	cmp	r6, r4
 800c608:	d105      	bne.n	800c616 <__libc_init_array+0x2e>
 800c60a:	bd70      	pop	{r4, r5, r6, pc}
 800c60c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c610:	4798      	blx	r3
 800c612:	3601      	adds	r6, #1
 800c614:	e7ee      	b.n	800c5f4 <__libc_init_array+0xc>
 800c616:	f855 3b04 	ldr.w	r3, [r5], #4
 800c61a:	4798      	blx	r3
 800c61c:	3601      	adds	r6, #1
 800c61e:	e7f2      	b.n	800c606 <__libc_init_array+0x1e>
 800c620:	0800f9ac 	.word	0x0800f9ac
 800c624:	0800f9ac 	.word	0x0800f9ac
 800c628:	0800f9ac 	.word	0x0800f9ac
 800c62c:	0800f9b0 	.word	0x0800f9b0

0800c630 <memcpy>:
 800c630:	440a      	add	r2, r1
 800c632:	4291      	cmp	r1, r2
 800c634:	f100 33ff 	add.w	r3, r0, #4294967295
 800c638:	d100      	bne.n	800c63c <memcpy+0xc>
 800c63a:	4770      	bx	lr
 800c63c:	b510      	push	{r4, lr}
 800c63e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c642:	4291      	cmp	r1, r2
 800c644:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c648:	d1f9      	bne.n	800c63e <memcpy+0xe>
 800c64a:	bd10      	pop	{r4, pc}

0800c64c <memset>:
 800c64c:	4603      	mov	r3, r0
 800c64e:	4402      	add	r2, r0
 800c650:	4293      	cmp	r3, r2
 800c652:	d100      	bne.n	800c656 <memset+0xa>
 800c654:	4770      	bx	lr
 800c656:	f803 1b01 	strb.w	r1, [r3], #1
 800c65a:	e7f9      	b.n	800c650 <memset+0x4>

0800c65c <__cvt>:
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c662:	461f      	mov	r7, r3
 800c664:	bfbb      	ittet	lt
 800c666:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800c66a:	461f      	movlt	r7, r3
 800c66c:	2300      	movge	r3, #0
 800c66e:	232d      	movlt	r3, #45	; 0x2d
 800c670:	b088      	sub	sp, #32
 800c672:	4614      	mov	r4, r2
 800c674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c676:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c678:	7013      	strb	r3, [r2, #0]
 800c67a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c67c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800c680:	f023 0820 	bic.w	r8, r3, #32
 800c684:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c688:	d005      	beq.n	800c696 <__cvt+0x3a>
 800c68a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c68e:	d100      	bne.n	800c692 <__cvt+0x36>
 800c690:	3501      	adds	r5, #1
 800c692:	2302      	movs	r3, #2
 800c694:	e000      	b.n	800c698 <__cvt+0x3c>
 800c696:	2303      	movs	r3, #3
 800c698:	aa07      	add	r2, sp, #28
 800c69a:	9204      	str	r2, [sp, #16]
 800c69c:	aa06      	add	r2, sp, #24
 800c69e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c6a2:	e9cd 3500 	strd	r3, r5, [sp]
 800c6a6:	4622      	mov	r2, r4
 800c6a8:	463b      	mov	r3, r7
 800c6aa:	f000 fcf9 	bl	800d0a0 <_dtoa_r>
 800c6ae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c6b2:	4606      	mov	r6, r0
 800c6b4:	d102      	bne.n	800c6bc <__cvt+0x60>
 800c6b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6b8:	07db      	lsls	r3, r3, #31
 800c6ba:	d522      	bpl.n	800c702 <__cvt+0xa6>
 800c6bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c6c0:	eb06 0905 	add.w	r9, r6, r5
 800c6c4:	d110      	bne.n	800c6e8 <__cvt+0x8c>
 800c6c6:	7833      	ldrb	r3, [r6, #0]
 800c6c8:	2b30      	cmp	r3, #48	; 0x30
 800c6ca:	d10a      	bne.n	800c6e2 <__cvt+0x86>
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	f7f4 f980 	bl	80009d8 <__aeabi_dcmpeq>
 800c6d8:	b918      	cbnz	r0, 800c6e2 <__cvt+0x86>
 800c6da:	f1c5 0501 	rsb	r5, r5, #1
 800c6de:	f8ca 5000 	str.w	r5, [sl]
 800c6e2:	f8da 3000 	ldr.w	r3, [sl]
 800c6e6:	4499      	add	r9, r3
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	4639      	mov	r1, r7
 800c6f0:	f7f4 f972 	bl	80009d8 <__aeabi_dcmpeq>
 800c6f4:	b108      	cbz	r0, 800c6fa <__cvt+0x9e>
 800c6f6:	f8cd 901c 	str.w	r9, [sp, #28]
 800c6fa:	2230      	movs	r2, #48	; 0x30
 800c6fc:	9b07      	ldr	r3, [sp, #28]
 800c6fe:	454b      	cmp	r3, r9
 800c700:	d307      	bcc.n	800c712 <__cvt+0xb6>
 800c702:	4630      	mov	r0, r6
 800c704:	9b07      	ldr	r3, [sp, #28]
 800c706:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c708:	1b9b      	subs	r3, r3, r6
 800c70a:	6013      	str	r3, [r2, #0]
 800c70c:	b008      	add	sp, #32
 800c70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c712:	1c59      	adds	r1, r3, #1
 800c714:	9107      	str	r1, [sp, #28]
 800c716:	701a      	strb	r2, [r3, #0]
 800c718:	e7f0      	b.n	800c6fc <__cvt+0xa0>

0800c71a <__exponent>:
 800c71a:	4603      	mov	r3, r0
 800c71c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c71e:	2900      	cmp	r1, #0
 800c720:	f803 2b02 	strb.w	r2, [r3], #2
 800c724:	bfb6      	itet	lt
 800c726:	222d      	movlt	r2, #45	; 0x2d
 800c728:	222b      	movge	r2, #43	; 0x2b
 800c72a:	4249      	neglt	r1, r1
 800c72c:	2909      	cmp	r1, #9
 800c72e:	7042      	strb	r2, [r0, #1]
 800c730:	dd2b      	ble.n	800c78a <__exponent+0x70>
 800c732:	f10d 0407 	add.w	r4, sp, #7
 800c736:	46a4      	mov	ip, r4
 800c738:	270a      	movs	r7, #10
 800c73a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c73e:	460a      	mov	r2, r1
 800c740:	46a6      	mov	lr, r4
 800c742:	fb07 1516 	mls	r5, r7, r6, r1
 800c746:	2a63      	cmp	r2, #99	; 0x63
 800c748:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800c74c:	4631      	mov	r1, r6
 800c74e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c752:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c756:	dcf0      	bgt.n	800c73a <__exponent+0x20>
 800c758:	3130      	adds	r1, #48	; 0x30
 800c75a:	f1ae 0502 	sub.w	r5, lr, #2
 800c75e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c762:	4629      	mov	r1, r5
 800c764:	1c44      	adds	r4, r0, #1
 800c766:	4561      	cmp	r1, ip
 800c768:	d30a      	bcc.n	800c780 <__exponent+0x66>
 800c76a:	f10d 0209 	add.w	r2, sp, #9
 800c76e:	eba2 020e 	sub.w	r2, r2, lr
 800c772:	4565      	cmp	r5, ip
 800c774:	bf88      	it	hi
 800c776:	2200      	movhi	r2, #0
 800c778:	4413      	add	r3, r2
 800c77a:	1a18      	subs	r0, r3, r0
 800c77c:	b003      	add	sp, #12
 800c77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c780:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c784:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c788:	e7ed      	b.n	800c766 <__exponent+0x4c>
 800c78a:	2330      	movs	r3, #48	; 0x30
 800c78c:	3130      	adds	r1, #48	; 0x30
 800c78e:	7083      	strb	r3, [r0, #2]
 800c790:	70c1      	strb	r1, [r0, #3]
 800c792:	1d03      	adds	r3, r0, #4
 800c794:	e7f1      	b.n	800c77a <__exponent+0x60>
	...

0800c798 <_printf_float>:
 800c798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79c:	b091      	sub	sp, #68	; 0x44
 800c79e:	460c      	mov	r4, r1
 800c7a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c7a4:	4616      	mov	r6, r2
 800c7a6:	461f      	mov	r7, r3
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	f001 fa67 	bl	800dc7c <_localeconv_r>
 800c7ae:	6803      	ldr	r3, [r0, #0]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b4:	f7f3 fce4 	bl	8000180 <strlen>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	930e      	str	r3, [sp, #56]	; 0x38
 800c7bc:	f8d8 3000 	ldr.w	r3, [r8]
 800c7c0:	900a      	str	r0, [sp, #40]	; 0x28
 800c7c2:	3307      	adds	r3, #7
 800c7c4:	f023 0307 	bic.w	r3, r3, #7
 800c7c8:	f103 0208 	add.w	r2, r3, #8
 800c7cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c7d0:	f8d4 b000 	ldr.w	fp, [r4]
 800c7d4:	f8c8 2000 	str.w	r2, [r8]
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c7e0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800c7e4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c7e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ee:	4640      	mov	r0, r8
 800c7f0:	4b9c      	ldr	r3, [pc, #624]	; (800ca64 <_printf_float+0x2cc>)
 800c7f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c7f4:	f7f4 f922 	bl	8000a3c <__aeabi_dcmpun>
 800c7f8:	bb70      	cbnz	r0, 800c858 <_printf_float+0xc0>
 800c7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c7fe:	4640      	mov	r0, r8
 800c800:	4b98      	ldr	r3, [pc, #608]	; (800ca64 <_printf_float+0x2cc>)
 800c802:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c804:	f7f4 f8fc 	bl	8000a00 <__aeabi_dcmple>
 800c808:	bb30      	cbnz	r0, 800c858 <_printf_float+0xc0>
 800c80a:	2200      	movs	r2, #0
 800c80c:	2300      	movs	r3, #0
 800c80e:	4640      	mov	r0, r8
 800c810:	4651      	mov	r1, sl
 800c812:	f7f4 f8eb 	bl	80009ec <__aeabi_dcmplt>
 800c816:	b110      	cbz	r0, 800c81e <_printf_float+0x86>
 800c818:	232d      	movs	r3, #45	; 0x2d
 800c81a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c81e:	4b92      	ldr	r3, [pc, #584]	; (800ca68 <_printf_float+0x2d0>)
 800c820:	4892      	ldr	r0, [pc, #584]	; (800ca6c <_printf_float+0x2d4>)
 800c822:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c826:	bf94      	ite	ls
 800c828:	4698      	movls	r8, r3
 800c82a:	4680      	movhi	r8, r0
 800c82c:	2303      	movs	r3, #3
 800c82e:	f04f 0a00 	mov.w	sl, #0
 800c832:	6123      	str	r3, [r4, #16]
 800c834:	f02b 0304 	bic.w	r3, fp, #4
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	4633      	mov	r3, r6
 800c83c:	4621      	mov	r1, r4
 800c83e:	4628      	mov	r0, r5
 800c840:	9700      	str	r7, [sp, #0]
 800c842:	aa0f      	add	r2, sp, #60	; 0x3c
 800c844:	f000 f9d4 	bl	800cbf0 <_printf_common>
 800c848:	3001      	adds	r0, #1
 800c84a:	f040 8090 	bne.w	800c96e <_printf_float+0x1d6>
 800c84e:	f04f 30ff 	mov.w	r0, #4294967295
 800c852:	b011      	add	sp, #68	; 0x44
 800c854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c858:	4642      	mov	r2, r8
 800c85a:	4653      	mov	r3, sl
 800c85c:	4640      	mov	r0, r8
 800c85e:	4651      	mov	r1, sl
 800c860:	f7f4 f8ec 	bl	8000a3c <__aeabi_dcmpun>
 800c864:	b148      	cbz	r0, 800c87a <_printf_float+0xe2>
 800c866:	f1ba 0f00 	cmp.w	sl, #0
 800c86a:	bfb8      	it	lt
 800c86c:	232d      	movlt	r3, #45	; 0x2d
 800c86e:	4880      	ldr	r0, [pc, #512]	; (800ca70 <_printf_float+0x2d8>)
 800c870:	bfb8      	it	lt
 800c872:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c876:	4b7f      	ldr	r3, [pc, #508]	; (800ca74 <_printf_float+0x2dc>)
 800c878:	e7d3      	b.n	800c822 <_printf_float+0x8a>
 800c87a:	6863      	ldr	r3, [r4, #4]
 800c87c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c880:	1c5a      	adds	r2, r3, #1
 800c882:	d142      	bne.n	800c90a <_printf_float+0x172>
 800c884:	2306      	movs	r3, #6
 800c886:	6063      	str	r3, [r4, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	9206      	str	r2, [sp, #24]
 800c88c:	aa0e      	add	r2, sp, #56	; 0x38
 800c88e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800c892:	aa0d      	add	r2, sp, #52	; 0x34
 800c894:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800c898:	9203      	str	r2, [sp, #12]
 800c89a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c89e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c8a2:	6023      	str	r3, [r4, #0]
 800c8a4:	6863      	ldr	r3, [r4, #4]
 800c8a6:	4642      	mov	r2, r8
 800c8a8:	9300      	str	r3, [sp, #0]
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	4653      	mov	r3, sl
 800c8ae:	910b      	str	r1, [sp, #44]	; 0x2c
 800c8b0:	f7ff fed4 	bl	800c65c <__cvt>
 800c8b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c8b6:	4680      	mov	r8, r0
 800c8b8:	2947      	cmp	r1, #71	; 0x47
 800c8ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c8bc:	d108      	bne.n	800c8d0 <_printf_float+0x138>
 800c8be:	1cc8      	adds	r0, r1, #3
 800c8c0:	db02      	blt.n	800c8c8 <_printf_float+0x130>
 800c8c2:	6863      	ldr	r3, [r4, #4]
 800c8c4:	4299      	cmp	r1, r3
 800c8c6:	dd40      	ble.n	800c94a <_printf_float+0x1b2>
 800c8c8:	f1a9 0902 	sub.w	r9, r9, #2
 800c8cc:	fa5f f989 	uxtb.w	r9, r9
 800c8d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c8d4:	d81f      	bhi.n	800c916 <_printf_float+0x17e>
 800c8d6:	464a      	mov	r2, r9
 800c8d8:	3901      	subs	r1, #1
 800c8da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c8de:	910d      	str	r1, [sp, #52]	; 0x34
 800c8e0:	f7ff ff1b 	bl	800c71a <__exponent>
 800c8e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8e6:	4682      	mov	sl, r0
 800c8e8:	1813      	adds	r3, r2, r0
 800c8ea:	2a01      	cmp	r2, #1
 800c8ec:	6123      	str	r3, [r4, #16]
 800c8ee:	dc02      	bgt.n	800c8f6 <_printf_float+0x15e>
 800c8f0:	6822      	ldr	r2, [r4, #0]
 800c8f2:	07d2      	lsls	r2, r2, #31
 800c8f4:	d501      	bpl.n	800c8fa <_printf_float+0x162>
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	6123      	str	r3, [r4, #16]
 800c8fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d09b      	beq.n	800c83a <_printf_float+0xa2>
 800c902:	232d      	movs	r3, #45	; 0x2d
 800c904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c908:	e797      	b.n	800c83a <_printf_float+0xa2>
 800c90a:	2947      	cmp	r1, #71	; 0x47
 800c90c:	d1bc      	bne.n	800c888 <_printf_float+0xf0>
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d1ba      	bne.n	800c888 <_printf_float+0xf0>
 800c912:	2301      	movs	r3, #1
 800c914:	e7b7      	b.n	800c886 <_printf_float+0xee>
 800c916:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c91a:	d118      	bne.n	800c94e <_printf_float+0x1b6>
 800c91c:	2900      	cmp	r1, #0
 800c91e:	6863      	ldr	r3, [r4, #4]
 800c920:	dd0b      	ble.n	800c93a <_printf_float+0x1a2>
 800c922:	6121      	str	r1, [r4, #16]
 800c924:	b913      	cbnz	r3, 800c92c <_printf_float+0x194>
 800c926:	6822      	ldr	r2, [r4, #0]
 800c928:	07d0      	lsls	r0, r2, #31
 800c92a:	d502      	bpl.n	800c932 <_printf_float+0x19a>
 800c92c:	3301      	adds	r3, #1
 800c92e:	440b      	add	r3, r1
 800c930:	6123      	str	r3, [r4, #16]
 800c932:	f04f 0a00 	mov.w	sl, #0
 800c936:	65a1      	str	r1, [r4, #88]	; 0x58
 800c938:	e7df      	b.n	800c8fa <_printf_float+0x162>
 800c93a:	b913      	cbnz	r3, 800c942 <_printf_float+0x1aa>
 800c93c:	6822      	ldr	r2, [r4, #0]
 800c93e:	07d2      	lsls	r2, r2, #31
 800c940:	d501      	bpl.n	800c946 <_printf_float+0x1ae>
 800c942:	3302      	adds	r3, #2
 800c944:	e7f4      	b.n	800c930 <_printf_float+0x198>
 800c946:	2301      	movs	r3, #1
 800c948:	e7f2      	b.n	800c930 <_printf_float+0x198>
 800c94a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c950:	4299      	cmp	r1, r3
 800c952:	db05      	blt.n	800c960 <_printf_float+0x1c8>
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	6121      	str	r1, [r4, #16]
 800c958:	07d8      	lsls	r0, r3, #31
 800c95a:	d5ea      	bpl.n	800c932 <_printf_float+0x19a>
 800c95c:	1c4b      	adds	r3, r1, #1
 800c95e:	e7e7      	b.n	800c930 <_printf_float+0x198>
 800c960:	2900      	cmp	r1, #0
 800c962:	bfcc      	ite	gt
 800c964:	2201      	movgt	r2, #1
 800c966:	f1c1 0202 	rsble	r2, r1, #2
 800c96a:	4413      	add	r3, r2
 800c96c:	e7e0      	b.n	800c930 <_printf_float+0x198>
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	055a      	lsls	r2, r3, #21
 800c972:	d407      	bmi.n	800c984 <_printf_float+0x1ec>
 800c974:	6923      	ldr	r3, [r4, #16]
 800c976:	4642      	mov	r2, r8
 800c978:	4631      	mov	r1, r6
 800c97a:	4628      	mov	r0, r5
 800c97c:	47b8      	blx	r7
 800c97e:	3001      	adds	r0, #1
 800c980:	d12b      	bne.n	800c9da <_printf_float+0x242>
 800c982:	e764      	b.n	800c84e <_printf_float+0xb6>
 800c984:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c988:	f240 80dd 	bls.w	800cb46 <_printf_float+0x3ae>
 800c98c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c990:	2200      	movs	r2, #0
 800c992:	2300      	movs	r3, #0
 800c994:	f7f4 f820 	bl	80009d8 <__aeabi_dcmpeq>
 800c998:	2800      	cmp	r0, #0
 800c99a:	d033      	beq.n	800ca04 <_printf_float+0x26c>
 800c99c:	2301      	movs	r3, #1
 800c99e:	4631      	mov	r1, r6
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	4a35      	ldr	r2, [pc, #212]	; (800ca78 <_printf_float+0x2e0>)
 800c9a4:	47b8      	blx	r7
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	f43f af51 	beq.w	800c84e <_printf_float+0xb6>
 800c9ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	db02      	blt.n	800c9ba <_printf_float+0x222>
 800c9b4:	6823      	ldr	r3, [r4, #0]
 800c9b6:	07d8      	lsls	r0, r3, #31
 800c9b8:	d50f      	bpl.n	800c9da <_printf_float+0x242>
 800c9ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9be:	4631      	mov	r1, r6
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	47b8      	blx	r7
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	f43f af42 	beq.w	800c84e <_printf_float+0xb6>
 800c9ca:	f04f 0800 	mov.w	r8, #0
 800c9ce:	f104 091a 	add.w	r9, r4, #26
 800c9d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	4543      	cmp	r3, r8
 800c9d8:	dc09      	bgt.n	800c9ee <_printf_float+0x256>
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	079b      	lsls	r3, r3, #30
 800c9de:	f100 8102 	bmi.w	800cbe6 <_printf_float+0x44e>
 800c9e2:	68e0      	ldr	r0, [r4, #12]
 800c9e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9e6:	4298      	cmp	r0, r3
 800c9e8:	bfb8      	it	lt
 800c9ea:	4618      	movlt	r0, r3
 800c9ec:	e731      	b.n	800c852 <_printf_float+0xba>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	464a      	mov	r2, r9
 800c9f2:	4631      	mov	r1, r6
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	47b8      	blx	r7
 800c9f8:	3001      	adds	r0, #1
 800c9fa:	f43f af28 	beq.w	800c84e <_printf_float+0xb6>
 800c9fe:	f108 0801 	add.w	r8, r8, #1
 800ca02:	e7e6      	b.n	800c9d2 <_printf_float+0x23a>
 800ca04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	dc38      	bgt.n	800ca7c <_printf_float+0x2e4>
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	4631      	mov	r1, r6
 800ca0e:	4628      	mov	r0, r5
 800ca10:	4a19      	ldr	r2, [pc, #100]	; (800ca78 <_printf_float+0x2e0>)
 800ca12:	47b8      	blx	r7
 800ca14:	3001      	adds	r0, #1
 800ca16:	f43f af1a 	beq.w	800c84e <_printf_float+0xb6>
 800ca1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	d102      	bne.n	800ca28 <_printf_float+0x290>
 800ca22:	6823      	ldr	r3, [r4, #0]
 800ca24:	07d9      	lsls	r1, r3, #31
 800ca26:	d5d8      	bpl.n	800c9da <_printf_float+0x242>
 800ca28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca2c:	4631      	mov	r1, r6
 800ca2e:	4628      	mov	r0, r5
 800ca30:	47b8      	blx	r7
 800ca32:	3001      	adds	r0, #1
 800ca34:	f43f af0b 	beq.w	800c84e <_printf_float+0xb6>
 800ca38:	f04f 0900 	mov.w	r9, #0
 800ca3c:	f104 0a1a 	add.w	sl, r4, #26
 800ca40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca42:	425b      	negs	r3, r3
 800ca44:	454b      	cmp	r3, r9
 800ca46:	dc01      	bgt.n	800ca4c <_printf_float+0x2b4>
 800ca48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca4a:	e794      	b.n	800c976 <_printf_float+0x1de>
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	4652      	mov	r2, sl
 800ca50:	4631      	mov	r1, r6
 800ca52:	4628      	mov	r0, r5
 800ca54:	47b8      	blx	r7
 800ca56:	3001      	adds	r0, #1
 800ca58:	f43f aef9 	beq.w	800c84e <_printf_float+0xb6>
 800ca5c:	f109 0901 	add.w	r9, r9, #1
 800ca60:	e7ee      	b.n	800ca40 <_printf_float+0x2a8>
 800ca62:	bf00      	nop
 800ca64:	7fefffff 	.word	0x7fefffff
 800ca68:	0800f5cc 	.word	0x0800f5cc
 800ca6c:	0800f5d0 	.word	0x0800f5d0
 800ca70:	0800f5d8 	.word	0x0800f5d8
 800ca74:	0800f5d4 	.word	0x0800f5d4
 800ca78:	0800f5dc 	.word	0x0800f5dc
 800ca7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca80:	429a      	cmp	r2, r3
 800ca82:	bfa8      	it	ge
 800ca84:	461a      	movge	r2, r3
 800ca86:	2a00      	cmp	r2, #0
 800ca88:	4691      	mov	r9, r2
 800ca8a:	dc37      	bgt.n	800cafc <_printf_float+0x364>
 800ca8c:	f04f 0b00 	mov.w	fp, #0
 800ca90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca94:	f104 021a 	add.w	r2, r4, #26
 800ca98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ca9c:	ebaa 0309 	sub.w	r3, sl, r9
 800caa0:	455b      	cmp	r3, fp
 800caa2:	dc33      	bgt.n	800cb0c <_printf_float+0x374>
 800caa4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800caa8:	429a      	cmp	r2, r3
 800caaa:	db3b      	blt.n	800cb24 <_printf_float+0x38c>
 800caac:	6823      	ldr	r3, [r4, #0]
 800caae:	07da      	lsls	r2, r3, #31
 800cab0:	d438      	bmi.n	800cb24 <_printf_float+0x38c>
 800cab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cab4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cab6:	eba3 020a 	sub.w	r2, r3, sl
 800caba:	eba3 0901 	sub.w	r9, r3, r1
 800cabe:	4591      	cmp	r9, r2
 800cac0:	bfa8      	it	ge
 800cac2:	4691      	movge	r9, r2
 800cac4:	f1b9 0f00 	cmp.w	r9, #0
 800cac8:	dc34      	bgt.n	800cb34 <_printf_float+0x39c>
 800caca:	f04f 0800 	mov.w	r8, #0
 800cace:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cad2:	f104 0a1a 	add.w	sl, r4, #26
 800cad6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800cada:	1a9b      	subs	r3, r3, r2
 800cadc:	eba3 0309 	sub.w	r3, r3, r9
 800cae0:	4543      	cmp	r3, r8
 800cae2:	f77f af7a 	ble.w	800c9da <_printf_float+0x242>
 800cae6:	2301      	movs	r3, #1
 800cae8:	4652      	mov	r2, sl
 800caea:	4631      	mov	r1, r6
 800caec:	4628      	mov	r0, r5
 800caee:	47b8      	blx	r7
 800caf0:	3001      	adds	r0, #1
 800caf2:	f43f aeac 	beq.w	800c84e <_printf_float+0xb6>
 800caf6:	f108 0801 	add.w	r8, r8, #1
 800cafa:	e7ec      	b.n	800cad6 <_printf_float+0x33e>
 800cafc:	4613      	mov	r3, r2
 800cafe:	4631      	mov	r1, r6
 800cb00:	4642      	mov	r2, r8
 800cb02:	4628      	mov	r0, r5
 800cb04:	47b8      	blx	r7
 800cb06:	3001      	adds	r0, #1
 800cb08:	d1c0      	bne.n	800ca8c <_printf_float+0x2f4>
 800cb0a:	e6a0      	b.n	800c84e <_printf_float+0xb6>
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	4631      	mov	r1, r6
 800cb10:	4628      	mov	r0, r5
 800cb12:	920b      	str	r2, [sp, #44]	; 0x2c
 800cb14:	47b8      	blx	r7
 800cb16:	3001      	adds	r0, #1
 800cb18:	f43f ae99 	beq.w	800c84e <_printf_float+0xb6>
 800cb1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb1e:	f10b 0b01 	add.w	fp, fp, #1
 800cb22:	e7b9      	b.n	800ca98 <_printf_float+0x300>
 800cb24:	4631      	mov	r1, r6
 800cb26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	47b8      	blx	r7
 800cb2e:	3001      	adds	r0, #1
 800cb30:	d1bf      	bne.n	800cab2 <_printf_float+0x31a>
 800cb32:	e68c      	b.n	800c84e <_printf_float+0xb6>
 800cb34:	464b      	mov	r3, r9
 800cb36:	4631      	mov	r1, r6
 800cb38:	4628      	mov	r0, r5
 800cb3a:	eb08 020a 	add.w	r2, r8, sl
 800cb3e:	47b8      	blx	r7
 800cb40:	3001      	adds	r0, #1
 800cb42:	d1c2      	bne.n	800caca <_printf_float+0x332>
 800cb44:	e683      	b.n	800c84e <_printf_float+0xb6>
 800cb46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb48:	2a01      	cmp	r2, #1
 800cb4a:	dc01      	bgt.n	800cb50 <_printf_float+0x3b8>
 800cb4c:	07db      	lsls	r3, r3, #31
 800cb4e:	d537      	bpl.n	800cbc0 <_printf_float+0x428>
 800cb50:	2301      	movs	r3, #1
 800cb52:	4642      	mov	r2, r8
 800cb54:	4631      	mov	r1, r6
 800cb56:	4628      	mov	r0, r5
 800cb58:	47b8      	blx	r7
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	f43f ae77 	beq.w	800c84e <_printf_float+0xb6>
 800cb60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb64:	4631      	mov	r1, r6
 800cb66:	4628      	mov	r0, r5
 800cb68:	47b8      	blx	r7
 800cb6a:	3001      	adds	r0, #1
 800cb6c:	f43f ae6f 	beq.w	800c84e <_printf_float+0xb6>
 800cb70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb74:	2200      	movs	r2, #0
 800cb76:	2300      	movs	r3, #0
 800cb78:	f7f3 ff2e 	bl	80009d8 <__aeabi_dcmpeq>
 800cb7c:	b9d8      	cbnz	r0, 800cbb6 <_printf_float+0x41e>
 800cb7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb80:	f108 0201 	add.w	r2, r8, #1
 800cb84:	3b01      	subs	r3, #1
 800cb86:	4631      	mov	r1, r6
 800cb88:	4628      	mov	r0, r5
 800cb8a:	47b8      	blx	r7
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	d10e      	bne.n	800cbae <_printf_float+0x416>
 800cb90:	e65d      	b.n	800c84e <_printf_float+0xb6>
 800cb92:	2301      	movs	r3, #1
 800cb94:	464a      	mov	r2, r9
 800cb96:	4631      	mov	r1, r6
 800cb98:	4628      	mov	r0, r5
 800cb9a:	47b8      	blx	r7
 800cb9c:	3001      	adds	r0, #1
 800cb9e:	f43f ae56 	beq.w	800c84e <_printf_float+0xb6>
 800cba2:	f108 0801 	add.w	r8, r8, #1
 800cba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	4543      	cmp	r3, r8
 800cbac:	dcf1      	bgt.n	800cb92 <_printf_float+0x3fa>
 800cbae:	4653      	mov	r3, sl
 800cbb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cbb4:	e6e0      	b.n	800c978 <_printf_float+0x1e0>
 800cbb6:	f04f 0800 	mov.w	r8, #0
 800cbba:	f104 091a 	add.w	r9, r4, #26
 800cbbe:	e7f2      	b.n	800cba6 <_printf_float+0x40e>
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	4642      	mov	r2, r8
 800cbc4:	e7df      	b.n	800cb86 <_printf_float+0x3ee>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	464a      	mov	r2, r9
 800cbca:	4631      	mov	r1, r6
 800cbcc:	4628      	mov	r0, r5
 800cbce:	47b8      	blx	r7
 800cbd0:	3001      	adds	r0, #1
 800cbd2:	f43f ae3c 	beq.w	800c84e <_printf_float+0xb6>
 800cbd6:	f108 0801 	add.w	r8, r8, #1
 800cbda:	68e3      	ldr	r3, [r4, #12]
 800cbdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cbde:	1a5b      	subs	r3, r3, r1
 800cbe0:	4543      	cmp	r3, r8
 800cbe2:	dcf0      	bgt.n	800cbc6 <_printf_float+0x42e>
 800cbe4:	e6fd      	b.n	800c9e2 <_printf_float+0x24a>
 800cbe6:	f04f 0800 	mov.w	r8, #0
 800cbea:	f104 0919 	add.w	r9, r4, #25
 800cbee:	e7f4      	b.n	800cbda <_printf_float+0x442>

0800cbf0 <_printf_common>:
 800cbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf4:	4616      	mov	r6, r2
 800cbf6:	4699      	mov	r9, r3
 800cbf8:	688a      	ldr	r2, [r1, #8]
 800cbfa:	690b      	ldr	r3, [r1, #16]
 800cbfc:	4607      	mov	r7, r0
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	bfb8      	it	lt
 800cc02:	4613      	movlt	r3, r2
 800cc04:	6033      	str	r3, [r6, #0]
 800cc06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc0a:	460c      	mov	r4, r1
 800cc0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc10:	b10a      	cbz	r2, 800cc16 <_printf_common+0x26>
 800cc12:	3301      	adds	r3, #1
 800cc14:	6033      	str	r3, [r6, #0]
 800cc16:	6823      	ldr	r3, [r4, #0]
 800cc18:	0699      	lsls	r1, r3, #26
 800cc1a:	bf42      	ittt	mi
 800cc1c:	6833      	ldrmi	r3, [r6, #0]
 800cc1e:	3302      	addmi	r3, #2
 800cc20:	6033      	strmi	r3, [r6, #0]
 800cc22:	6825      	ldr	r5, [r4, #0]
 800cc24:	f015 0506 	ands.w	r5, r5, #6
 800cc28:	d106      	bne.n	800cc38 <_printf_common+0x48>
 800cc2a:	f104 0a19 	add.w	sl, r4, #25
 800cc2e:	68e3      	ldr	r3, [r4, #12]
 800cc30:	6832      	ldr	r2, [r6, #0]
 800cc32:	1a9b      	subs	r3, r3, r2
 800cc34:	42ab      	cmp	r3, r5
 800cc36:	dc28      	bgt.n	800cc8a <_printf_common+0x9a>
 800cc38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc3c:	1e13      	subs	r3, r2, #0
 800cc3e:	6822      	ldr	r2, [r4, #0]
 800cc40:	bf18      	it	ne
 800cc42:	2301      	movne	r3, #1
 800cc44:	0692      	lsls	r2, r2, #26
 800cc46:	d42d      	bmi.n	800cca4 <_printf_common+0xb4>
 800cc48:	4649      	mov	r1, r9
 800cc4a:	4638      	mov	r0, r7
 800cc4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc50:	47c0      	blx	r8
 800cc52:	3001      	adds	r0, #1
 800cc54:	d020      	beq.n	800cc98 <_printf_common+0xa8>
 800cc56:	6823      	ldr	r3, [r4, #0]
 800cc58:	68e5      	ldr	r5, [r4, #12]
 800cc5a:	f003 0306 	and.w	r3, r3, #6
 800cc5e:	2b04      	cmp	r3, #4
 800cc60:	bf18      	it	ne
 800cc62:	2500      	movne	r5, #0
 800cc64:	6832      	ldr	r2, [r6, #0]
 800cc66:	f04f 0600 	mov.w	r6, #0
 800cc6a:	68a3      	ldr	r3, [r4, #8]
 800cc6c:	bf08      	it	eq
 800cc6e:	1aad      	subeq	r5, r5, r2
 800cc70:	6922      	ldr	r2, [r4, #16]
 800cc72:	bf08      	it	eq
 800cc74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	bfc4      	itt	gt
 800cc7c:	1a9b      	subgt	r3, r3, r2
 800cc7e:	18ed      	addgt	r5, r5, r3
 800cc80:	341a      	adds	r4, #26
 800cc82:	42b5      	cmp	r5, r6
 800cc84:	d11a      	bne.n	800ccbc <_printf_common+0xcc>
 800cc86:	2000      	movs	r0, #0
 800cc88:	e008      	b.n	800cc9c <_printf_common+0xac>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	4652      	mov	r2, sl
 800cc8e:	4649      	mov	r1, r9
 800cc90:	4638      	mov	r0, r7
 800cc92:	47c0      	blx	r8
 800cc94:	3001      	adds	r0, #1
 800cc96:	d103      	bne.n	800cca0 <_printf_common+0xb0>
 800cc98:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cca0:	3501      	adds	r5, #1
 800cca2:	e7c4      	b.n	800cc2e <_printf_common+0x3e>
 800cca4:	2030      	movs	r0, #48	; 0x30
 800cca6:	18e1      	adds	r1, r4, r3
 800cca8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ccac:	1c5a      	adds	r2, r3, #1
 800ccae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ccb2:	4422      	add	r2, r4
 800ccb4:	3302      	adds	r3, #2
 800ccb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ccba:	e7c5      	b.n	800cc48 <_printf_common+0x58>
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	4622      	mov	r2, r4
 800ccc0:	4649      	mov	r1, r9
 800ccc2:	4638      	mov	r0, r7
 800ccc4:	47c0      	blx	r8
 800ccc6:	3001      	adds	r0, #1
 800ccc8:	d0e6      	beq.n	800cc98 <_printf_common+0xa8>
 800ccca:	3601      	adds	r6, #1
 800cccc:	e7d9      	b.n	800cc82 <_printf_common+0x92>
	...

0800ccd0 <_printf_i>:
 800ccd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccd4:	7e0f      	ldrb	r7, [r1, #24]
 800ccd6:	4691      	mov	r9, r2
 800ccd8:	2f78      	cmp	r7, #120	; 0x78
 800ccda:	4680      	mov	r8, r0
 800ccdc:	460c      	mov	r4, r1
 800ccde:	469a      	mov	sl, r3
 800cce0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cce6:	d807      	bhi.n	800ccf8 <_printf_i+0x28>
 800cce8:	2f62      	cmp	r7, #98	; 0x62
 800ccea:	d80a      	bhi.n	800cd02 <_printf_i+0x32>
 800ccec:	2f00      	cmp	r7, #0
 800ccee:	f000 80d9 	beq.w	800cea4 <_printf_i+0x1d4>
 800ccf2:	2f58      	cmp	r7, #88	; 0x58
 800ccf4:	f000 80a4 	beq.w	800ce40 <_printf_i+0x170>
 800ccf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd00:	e03a      	b.n	800cd78 <_printf_i+0xa8>
 800cd02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd06:	2b15      	cmp	r3, #21
 800cd08:	d8f6      	bhi.n	800ccf8 <_printf_i+0x28>
 800cd0a:	a101      	add	r1, pc, #4	; (adr r1, 800cd10 <_printf_i+0x40>)
 800cd0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd10:	0800cd69 	.word	0x0800cd69
 800cd14:	0800cd7d 	.word	0x0800cd7d
 800cd18:	0800ccf9 	.word	0x0800ccf9
 800cd1c:	0800ccf9 	.word	0x0800ccf9
 800cd20:	0800ccf9 	.word	0x0800ccf9
 800cd24:	0800ccf9 	.word	0x0800ccf9
 800cd28:	0800cd7d 	.word	0x0800cd7d
 800cd2c:	0800ccf9 	.word	0x0800ccf9
 800cd30:	0800ccf9 	.word	0x0800ccf9
 800cd34:	0800ccf9 	.word	0x0800ccf9
 800cd38:	0800ccf9 	.word	0x0800ccf9
 800cd3c:	0800ce8b 	.word	0x0800ce8b
 800cd40:	0800cdad 	.word	0x0800cdad
 800cd44:	0800ce6d 	.word	0x0800ce6d
 800cd48:	0800ccf9 	.word	0x0800ccf9
 800cd4c:	0800ccf9 	.word	0x0800ccf9
 800cd50:	0800cead 	.word	0x0800cead
 800cd54:	0800ccf9 	.word	0x0800ccf9
 800cd58:	0800cdad 	.word	0x0800cdad
 800cd5c:	0800ccf9 	.word	0x0800ccf9
 800cd60:	0800ccf9 	.word	0x0800ccf9
 800cd64:	0800ce75 	.word	0x0800ce75
 800cd68:	682b      	ldr	r3, [r5, #0]
 800cd6a:	1d1a      	adds	r2, r3, #4
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	602a      	str	r2, [r5, #0]
 800cd70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e0a4      	b.n	800cec6 <_printf_i+0x1f6>
 800cd7c:	6820      	ldr	r0, [r4, #0]
 800cd7e:	6829      	ldr	r1, [r5, #0]
 800cd80:	0606      	lsls	r6, r0, #24
 800cd82:	f101 0304 	add.w	r3, r1, #4
 800cd86:	d50a      	bpl.n	800cd9e <_printf_i+0xce>
 800cd88:	680e      	ldr	r6, [r1, #0]
 800cd8a:	602b      	str	r3, [r5, #0]
 800cd8c:	2e00      	cmp	r6, #0
 800cd8e:	da03      	bge.n	800cd98 <_printf_i+0xc8>
 800cd90:	232d      	movs	r3, #45	; 0x2d
 800cd92:	4276      	negs	r6, r6
 800cd94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd98:	230a      	movs	r3, #10
 800cd9a:	485e      	ldr	r0, [pc, #376]	; (800cf14 <_printf_i+0x244>)
 800cd9c:	e019      	b.n	800cdd2 <_printf_i+0x102>
 800cd9e:	680e      	ldr	r6, [r1, #0]
 800cda0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cda4:	602b      	str	r3, [r5, #0]
 800cda6:	bf18      	it	ne
 800cda8:	b236      	sxthne	r6, r6
 800cdaa:	e7ef      	b.n	800cd8c <_printf_i+0xbc>
 800cdac:	682b      	ldr	r3, [r5, #0]
 800cdae:	6820      	ldr	r0, [r4, #0]
 800cdb0:	1d19      	adds	r1, r3, #4
 800cdb2:	6029      	str	r1, [r5, #0]
 800cdb4:	0601      	lsls	r1, r0, #24
 800cdb6:	d501      	bpl.n	800cdbc <_printf_i+0xec>
 800cdb8:	681e      	ldr	r6, [r3, #0]
 800cdba:	e002      	b.n	800cdc2 <_printf_i+0xf2>
 800cdbc:	0646      	lsls	r6, r0, #25
 800cdbe:	d5fb      	bpl.n	800cdb8 <_printf_i+0xe8>
 800cdc0:	881e      	ldrh	r6, [r3, #0]
 800cdc2:	2f6f      	cmp	r7, #111	; 0x6f
 800cdc4:	bf0c      	ite	eq
 800cdc6:	2308      	moveq	r3, #8
 800cdc8:	230a      	movne	r3, #10
 800cdca:	4852      	ldr	r0, [pc, #328]	; (800cf14 <_printf_i+0x244>)
 800cdcc:	2100      	movs	r1, #0
 800cdce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cdd2:	6865      	ldr	r5, [r4, #4]
 800cdd4:	2d00      	cmp	r5, #0
 800cdd6:	bfa8      	it	ge
 800cdd8:	6821      	ldrge	r1, [r4, #0]
 800cdda:	60a5      	str	r5, [r4, #8]
 800cddc:	bfa4      	itt	ge
 800cdde:	f021 0104 	bicge.w	r1, r1, #4
 800cde2:	6021      	strge	r1, [r4, #0]
 800cde4:	b90e      	cbnz	r6, 800cdea <_printf_i+0x11a>
 800cde6:	2d00      	cmp	r5, #0
 800cde8:	d04d      	beq.n	800ce86 <_printf_i+0x1b6>
 800cdea:	4615      	mov	r5, r2
 800cdec:	fbb6 f1f3 	udiv	r1, r6, r3
 800cdf0:	fb03 6711 	mls	r7, r3, r1, r6
 800cdf4:	5dc7      	ldrb	r7, [r0, r7]
 800cdf6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cdfa:	4637      	mov	r7, r6
 800cdfc:	42bb      	cmp	r3, r7
 800cdfe:	460e      	mov	r6, r1
 800ce00:	d9f4      	bls.n	800cdec <_printf_i+0x11c>
 800ce02:	2b08      	cmp	r3, #8
 800ce04:	d10b      	bne.n	800ce1e <_printf_i+0x14e>
 800ce06:	6823      	ldr	r3, [r4, #0]
 800ce08:	07de      	lsls	r6, r3, #31
 800ce0a:	d508      	bpl.n	800ce1e <_printf_i+0x14e>
 800ce0c:	6923      	ldr	r3, [r4, #16]
 800ce0e:	6861      	ldr	r1, [r4, #4]
 800ce10:	4299      	cmp	r1, r3
 800ce12:	bfde      	ittt	le
 800ce14:	2330      	movle	r3, #48	; 0x30
 800ce16:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce1e:	1b52      	subs	r2, r2, r5
 800ce20:	6122      	str	r2, [r4, #16]
 800ce22:	464b      	mov	r3, r9
 800ce24:	4621      	mov	r1, r4
 800ce26:	4640      	mov	r0, r8
 800ce28:	f8cd a000 	str.w	sl, [sp]
 800ce2c:	aa03      	add	r2, sp, #12
 800ce2e:	f7ff fedf 	bl	800cbf0 <_printf_common>
 800ce32:	3001      	adds	r0, #1
 800ce34:	d14c      	bne.n	800ced0 <_printf_i+0x200>
 800ce36:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3a:	b004      	add	sp, #16
 800ce3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce40:	4834      	ldr	r0, [pc, #208]	; (800cf14 <_printf_i+0x244>)
 800ce42:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ce46:	6829      	ldr	r1, [r5, #0]
 800ce48:	6823      	ldr	r3, [r4, #0]
 800ce4a:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce4e:	6029      	str	r1, [r5, #0]
 800ce50:	061d      	lsls	r5, r3, #24
 800ce52:	d514      	bpl.n	800ce7e <_printf_i+0x1ae>
 800ce54:	07df      	lsls	r7, r3, #31
 800ce56:	bf44      	itt	mi
 800ce58:	f043 0320 	orrmi.w	r3, r3, #32
 800ce5c:	6023      	strmi	r3, [r4, #0]
 800ce5e:	b91e      	cbnz	r6, 800ce68 <_printf_i+0x198>
 800ce60:	6823      	ldr	r3, [r4, #0]
 800ce62:	f023 0320 	bic.w	r3, r3, #32
 800ce66:	6023      	str	r3, [r4, #0]
 800ce68:	2310      	movs	r3, #16
 800ce6a:	e7af      	b.n	800cdcc <_printf_i+0xfc>
 800ce6c:	6823      	ldr	r3, [r4, #0]
 800ce6e:	f043 0320 	orr.w	r3, r3, #32
 800ce72:	6023      	str	r3, [r4, #0]
 800ce74:	2378      	movs	r3, #120	; 0x78
 800ce76:	4828      	ldr	r0, [pc, #160]	; (800cf18 <_printf_i+0x248>)
 800ce78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce7c:	e7e3      	b.n	800ce46 <_printf_i+0x176>
 800ce7e:	0659      	lsls	r1, r3, #25
 800ce80:	bf48      	it	mi
 800ce82:	b2b6      	uxthmi	r6, r6
 800ce84:	e7e6      	b.n	800ce54 <_printf_i+0x184>
 800ce86:	4615      	mov	r5, r2
 800ce88:	e7bb      	b.n	800ce02 <_printf_i+0x132>
 800ce8a:	682b      	ldr	r3, [r5, #0]
 800ce8c:	6826      	ldr	r6, [r4, #0]
 800ce8e:	1d18      	adds	r0, r3, #4
 800ce90:	6961      	ldr	r1, [r4, #20]
 800ce92:	6028      	str	r0, [r5, #0]
 800ce94:	0635      	lsls	r5, r6, #24
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	d501      	bpl.n	800ce9e <_printf_i+0x1ce>
 800ce9a:	6019      	str	r1, [r3, #0]
 800ce9c:	e002      	b.n	800cea4 <_printf_i+0x1d4>
 800ce9e:	0670      	lsls	r0, r6, #25
 800cea0:	d5fb      	bpl.n	800ce9a <_printf_i+0x1ca>
 800cea2:	8019      	strh	r1, [r3, #0]
 800cea4:	2300      	movs	r3, #0
 800cea6:	4615      	mov	r5, r2
 800cea8:	6123      	str	r3, [r4, #16]
 800ceaa:	e7ba      	b.n	800ce22 <_printf_i+0x152>
 800ceac:	682b      	ldr	r3, [r5, #0]
 800ceae:	2100      	movs	r1, #0
 800ceb0:	1d1a      	adds	r2, r3, #4
 800ceb2:	602a      	str	r2, [r5, #0]
 800ceb4:	681d      	ldr	r5, [r3, #0]
 800ceb6:	6862      	ldr	r2, [r4, #4]
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f000 feeb 	bl	800dc94 <memchr>
 800cebe:	b108      	cbz	r0, 800cec4 <_printf_i+0x1f4>
 800cec0:	1b40      	subs	r0, r0, r5
 800cec2:	6060      	str	r0, [r4, #4]
 800cec4:	6863      	ldr	r3, [r4, #4]
 800cec6:	6123      	str	r3, [r4, #16]
 800cec8:	2300      	movs	r3, #0
 800ceca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cece:	e7a8      	b.n	800ce22 <_printf_i+0x152>
 800ced0:	462a      	mov	r2, r5
 800ced2:	4649      	mov	r1, r9
 800ced4:	4640      	mov	r0, r8
 800ced6:	6923      	ldr	r3, [r4, #16]
 800ced8:	47d0      	blx	sl
 800ceda:	3001      	adds	r0, #1
 800cedc:	d0ab      	beq.n	800ce36 <_printf_i+0x166>
 800cede:	6823      	ldr	r3, [r4, #0]
 800cee0:	079b      	lsls	r3, r3, #30
 800cee2:	d413      	bmi.n	800cf0c <_printf_i+0x23c>
 800cee4:	68e0      	ldr	r0, [r4, #12]
 800cee6:	9b03      	ldr	r3, [sp, #12]
 800cee8:	4298      	cmp	r0, r3
 800ceea:	bfb8      	it	lt
 800ceec:	4618      	movlt	r0, r3
 800ceee:	e7a4      	b.n	800ce3a <_printf_i+0x16a>
 800cef0:	2301      	movs	r3, #1
 800cef2:	4632      	mov	r2, r6
 800cef4:	4649      	mov	r1, r9
 800cef6:	4640      	mov	r0, r8
 800cef8:	47d0      	blx	sl
 800cefa:	3001      	adds	r0, #1
 800cefc:	d09b      	beq.n	800ce36 <_printf_i+0x166>
 800cefe:	3501      	adds	r5, #1
 800cf00:	68e3      	ldr	r3, [r4, #12]
 800cf02:	9903      	ldr	r1, [sp, #12]
 800cf04:	1a5b      	subs	r3, r3, r1
 800cf06:	42ab      	cmp	r3, r5
 800cf08:	dcf2      	bgt.n	800cef0 <_printf_i+0x220>
 800cf0a:	e7eb      	b.n	800cee4 <_printf_i+0x214>
 800cf0c:	2500      	movs	r5, #0
 800cf0e:	f104 0619 	add.w	r6, r4, #25
 800cf12:	e7f5      	b.n	800cf00 <_printf_i+0x230>
 800cf14:	0800f5de 	.word	0x0800f5de
 800cf18:	0800f5ef 	.word	0x0800f5ef

0800cf1c <sniprintf>:
 800cf1c:	b40c      	push	{r2, r3}
 800cf1e:	b530      	push	{r4, r5, lr}
 800cf20:	4b17      	ldr	r3, [pc, #92]	; (800cf80 <sniprintf+0x64>)
 800cf22:	1e0c      	subs	r4, r1, #0
 800cf24:	681d      	ldr	r5, [r3, #0]
 800cf26:	b09d      	sub	sp, #116	; 0x74
 800cf28:	da08      	bge.n	800cf3c <sniprintf+0x20>
 800cf2a:	238b      	movs	r3, #139	; 0x8b
 800cf2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf30:	602b      	str	r3, [r5, #0]
 800cf32:	b01d      	add	sp, #116	; 0x74
 800cf34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf38:	b002      	add	sp, #8
 800cf3a:	4770      	bx	lr
 800cf3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cf40:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cf44:	bf0c      	ite	eq
 800cf46:	4623      	moveq	r3, r4
 800cf48:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cf4c:	9304      	str	r3, [sp, #16]
 800cf4e:	9307      	str	r3, [sp, #28]
 800cf50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf54:	9002      	str	r0, [sp, #8]
 800cf56:	9006      	str	r0, [sp, #24]
 800cf58:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	ab21      	add	r3, sp, #132	; 0x84
 800cf60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cf62:	a902      	add	r1, sp, #8
 800cf64:	9301      	str	r3, [sp, #4]
 800cf66:	f001 fb71 	bl	800e64c <_svfiprintf_r>
 800cf6a:	1c43      	adds	r3, r0, #1
 800cf6c:	bfbc      	itt	lt
 800cf6e:	238b      	movlt	r3, #139	; 0x8b
 800cf70:	602b      	strlt	r3, [r5, #0]
 800cf72:	2c00      	cmp	r4, #0
 800cf74:	d0dd      	beq.n	800cf32 <sniprintf+0x16>
 800cf76:	2200      	movs	r2, #0
 800cf78:	9b02      	ldr	r3, [sp, #8]
 800cf7a:	701a      	strb	r2, [r3, #0]
 800cf7c:	e7d9      	b.n	800cf32 <sniprintf+0x16>
 800cf7e:	bf00      	nop
 800cf80:	20000190 	.word	0x20000190

0800cf84 <quorem>:
 800cf84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf88:	6903      	ldr	r3, [r0, #16]
 800cf8a:	690c      	ldr	r4, [r1, #16]
 800cf8c:	4607      	mov	r7, r0
 800cf8e:	42a3      	cmp	r3, r4
 800cf90:	f2c0 8082 	blt.w	800d098 <quorem+0x114>
 800cf94:	3c01      	subs	r4, #1
 800cf96:	f100 0514 	add.w	r5, r0, #20
 800cf9a:	f101 0814 	add.w	r8, r1, #20
 800cf9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfa2:	9301      	str	r3, [sp, #4]
 800cfa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cfa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfac:	3301      	adds	r3, #1
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	fbb2 f6f3 	udiv	r6, r2, r3
 800cfb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cfb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cfbc:	d331      	bcc.n	800d022 <quorem+0x9e>
 800cfbe:	f04f 0e00 	mov.w	lr, #0
 800cfc2:	4640      	mov	r0, r8
 800cfc4:	46ac      	mov	ip, r5
 800cfc6:	46f2      	mov	sl, lr
 800cfc8:	f850 2b04 	ldr.w	r2, [r0], #4
 800cfcc:	b293      	uxth	r3, r2
 800cfce:	fb06 e303 	mla	r3, r6, r3, lr
 800cfd2:	0c12      	lsrs	r2, r2, #16
 800cfd4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	fb06 e202 	mla	r2, r6, r2, lr
 800cfde:	ebaa 0303 	sub.w	r3, sl, r3
 800cfe2:	f8dc a000 	ldr.w	sl, [ip]
 800cfe6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cfea:	fa1f fa8a 	uxth.w	sl, sl
 800cfee:	4453      	add	r3, sl
 800cff0:	f8dc a000 	ldr.w	sl, [ip]
 800cff4:	b292      	uxth	r2, r2
 800cff6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cffa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cffe:	b29b      	uxth	r3, r3
 800d000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d004:	4581      	cmp	r9, r0
 800d006:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d00a:	f84c 3b04 	str.w	r3, [ip], #4
 800d00e:	d2db      	bcs.n	800cfc8 <quorem+0x44>
 800d010:	f855 300b 	ldr.w	r3, [r5, fp]
 800d014:	b92b      	cbnz	r3, 800d022 <quorem+0x9e>
 800d016:	9b01      	ldr	r3, [sp, #4]
 800d018:	3b04      	subs	r3, #4
 800d01a:	429d      	cmp	r5, r3
 800d01c:	461a      	mov	r2, r3
 800d01e:	d32f      	bcc.n	800d080 <quorem+0xfc>
 800d020:	613c      	str	r4, [r7, #16]
 800d022:	4638      	mov	r0, r7
 800d024:	f001 f8c2 	bl	800e1ac <__mcmp>
 800d028:	2800      	cmp	r0, #0
 800d02a:	db25      	blt.n	800d078 <quorem+0xf4>
 800d02c:	4628      	mov	r0, r5
 800d02e:	f04f 0c00 	mov.w	ip, #0
 800d032:	3601      	adds	r6, #1
 800d034:	f858 1b04 	ldr.w	r1, [r8], #4
 800d038:	f8d0 e000 	ldr.w	lr, [r0]
 800d03c:	b28b      	uxth	r3, r1
 800d03e:	ebac 0303 	sub.w	r3, ip, r3
 800d042:	fa1f f28e 	uxth.w	r2, lr
 800d046:	4413      	add	r3, r2
 800d048:	0c0a      	lsrs	r2, r1, #16
 800d04a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d04e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d052:	b29b      	uxth	r3, r3
 800d054:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d058:	45c1      	cmp	r9, r8
 800d05a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d05e:	f840 3b04 	str.w	r3, [r0], #4
 800d062:	d2e7      	bcs.n	800d034 <quorem+0xb0>
 800d064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d068:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d06c:	b922      	cbnz	r2, 800d078 <quorem+0xf4>
 800d06e:	3b04      	subs	r3, #4
 800d070:	429d      	cmp	r5, r3
 800d072:	461a      	mov	r2, r3
 800d074:	d30a      	bcc.n	800d08c <quorem+0x108>
 800d076:	613c      	str	r4, [r7, #16]
 800d078:	4630      	mov	r0, r6
 800d07a:	b003      	add	sp, #12
 800d07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d080:	6812      	ldr	r2, [r2, #0]
 800d082:	3b04      	subs	r3, #4
 800d084:	2a00      	cmp	r2, #0
 800d086:	d1cb      	bne.n	800d020 <quorem+0x9c>
 800d088:	3c01      	subs	r4, #1
 800d08a:	e7c6      	b.n	800d01a <quorem+0x96>
 800d08c:	6812      	ldr	r2, [r2, #0]
 800d08e:	3b04      	subs	r3, #4
 800d090:	2a00      	cmp	r2, #0
 800d092:	d1f0      	bne.n	800d076 <quorem+0xf2>
 800d094:	3c01      	subs	r4, #1
 800d096:	e7eb      	b.n	800d070 <quorem+0xec>
 800d098:	2000      	movs	r0, #0
 800d09a:	e7ee      	b.n	800d07a <quorem+0xf6>
 800d09c:	0000      	movs	r0, r0
	...

0800d0a0 <_dtoa_r>:
 800d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a4:	4616      	mov	r6, r2
 800d0a6:	461f      	mov	r7, r3
 800d0a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d0aa:	b099      	sub	sp, #100	; 0x64
 800d0ac:	4605      	mov	r5, r0
 800d0ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d0b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800d0b6:	b974      	cbnz	r4, 800d0d6 <_dtoa_r+0x36>
 800d0b8:	2010      	movs	r0, #16
 800d0ba:	f000 fde3 	bl	800dc84 <malloc>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	6268      	str	r0, [r5, #36]	; 0x24
 800d0c2:	b920      	cbnz	r0, 800d0ce <_dtoa_r+0x2e>
 800d0c4:	21ea      	movs	r1, #234	; 0xea
 800d0c6:	4ba8      	ldr	r3, [pc, #672]	; (800d368 <_dtoa_r+0x2c8>)
 800d0c8:	48a8      	ldr	r0, [pc, #672]	; (800d36c <_dtoa_r+0x2cc>)
 800d0ca:	f001 fbcf 	bl	800e86c <__assert_func>
 800d0ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0d2:	6004      	str	r4, [r0, #0]
 800d0d4:	60c4      	str	r4, [r0, #12]
 800d0d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d0d8:	6819      	ldr	r1, [r3, #0]
 800d0da:	b151      	cbz	r1, 800d0f2 <_dtoa_r+0x52>
 800d0dc:	685a      	ldr	r2, [r3, #4]
 800d0de:	2301      	movs	r3, #1
 800d0e0:	4093      	lsls	r3, r2
 800d0e2:	604a      	str	r2, [r1, #4]
 800d0e4:	608b      	str	r3, [r1, #8]
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	f000 fe22 	bl	800dd30 <_Bfree>
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d0f0:	601a      	str	r2, [r3, #0]
 800d0f2:	1e3b      	subs	r3, r7, #0
 800d0f4:	bfaf      	iteee	ge
 800d0f6:	2300      	movge	r3, #0
 800d0f8:	2201      	movlt	r2, #1
 800d0fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d0fe:	9305      	strlt	r3, [sp, #20]
 800d100:	bfa8      	it	ge
 800d102:	f8c8 3000 	strge.w	r3, [r8]
 800d106:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800d10a:	4b99      	ldr	r3, [pc, #612]	; (800d370 <_dtoa_r+0x2d0>)
 800d10c:	bfb8      	it	lt
 800d10e:	f8c8 2000 	strlt.w	r2, [r8]
 800d112:	ea33 0309 	bics.w	r3, r3, r9
 800d116:	d119      	bne.n	800d14c <_dtoa_r+0xac>
 800d118:	f242 730f 	movw	r3, #9999	; 0x270f
 800d11c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d11e:	6013      	str	r3, [r2, #0]
 800d120:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d124:	4333      	orrs	r3, r6
 800d126:	f000 857f 	beq.w	800dc28 <_dtoa_r+0xb88>
 800d12a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d12c:	b953      	cbnz	r3, 800d144 <_dtoa_r+0xa4>
 800d12e:	4b91      	ldr	r3, [pc, #580]	; (800d374 <_dtoa_r+0x2d4>)
 800d130:	e022      	b.n	800d178 <_dtoa_r+0xd8>
 800d132:	4b91      	ldr	r3, [pc, #580]	; (800d378 <_dtoa_r+0x2d8>)
 800d134:	9303      	str	r3, [sp, #12]
 800d136:	3308      	adds	r3, #8
 800d138:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d13a:	6013      	str	r3, [r2, #0]
 800d13c:	9803      	ldr	r0, [sp, #12]
 800d13e:	b019      	add	sp, #100	; 0x64
 800d140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d144:	4b8b      	ldr	r3, [pc, #556]	; (800d374 <_dtoa_r+0x2d4>)
 800d146:	9303      	str	r3, [sp, #12]
 800d148:	3303      	adds	r3, #3
 800d14a:	e7f5      	b.n	800d138 <_dtoa_r+0x98>
 800d14c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d150:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800d154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d158:	2200      	movs	r2, #0
 800d15a:	2300      	movs	r3, #0
 800d15c:	f7f3 fc3c 	bl	80009d8 <__aeabi_dcmpeq>
 800d160:	4680      	mov	r8, r0
 800d162:	b158      	cbz	r0, 800d17c <_dtoa_r+0xdc>
 800d164:	2301      	movs	r3, #1
 800d166:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d168:	6013      	str	r3, [r2, #0]
 800d16a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f000 8558 	beq.w	800dc22 <_dtoa_r+0xb82>
 800d172:	4882      	ldr	r0, [pc, #520]	; (800d37c <_dtoa_r+0x2dc>)
 800d174:	6018      	str	r0, [r3, #0]
 800d176:	1e43      	subs	r3, r0, #1
 800d178:	9303      	str	r3, [sp, #12]
 800d17a:	e7df      	b.n	800d13c <_dtoa_r+0x9c>
 800d17c:	ab16      	add	r3, sp, #88	; 0x58
 800d17e:	9301      	str	r3, [sp, #4]
 800d180:	ab17      	add	r3, sp, #92	; 0x5c
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	4628      	mov	r0, r5
 800d186:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d18a:	f001 f8b7 	bl	800e2fc <__d2b>
 800d18e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d192:	4683      	mov	fp, r0
 800d194:	2c00      	cmp	r4, #0
 800d196:	d07f      	beq.n	800d298 <_dtoa_r+0x1f8>
 800d198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d19c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d19e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d1a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800d1aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d1ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	4b72      	ldr	r3, [pc, #456]	; (800d380 <_dtoa_r+0x2e0>)
 800d1b6:	f7f2 ffef 	bl	8000198 <__aeabi_dsub>
 800d1ba:	a365      	add	r3, pc, #404	; (adr r3, 800d350 <_dtoa_r+0x2b0>)
 800d1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c0:	f7f3 f9a2 	bl	8000508 <__aeabi_dmul>
 800d1c4:	a364      	add	r3, pc, #400	; (adr r3, 800d358 <_dtoa_r+0x2b8>)
 800d1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ca:	f7f2 ffe7 	bl	800019c <__adddf3>
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	460f      	mov	r7, r1
 800d1d4:	f7f3 f92e 	bl	8000434 <__aeabi_i2d>
 800d1d8:	a361      	add	r3, pc, #388	; (adr r3, 800d360 <_dtoa_r+0x2c0>)
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	f7f3 f993 	bl	8000508 <__aeabi_dmul>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	f7f2 ffd7 	bl	800019c <__adddf3>
 800d1ee:	4606      	mov	r6, r0
 800d1f0:	460f      	mov	r7, r1
 800d1f2:	f7f3 fc39 	bl	8000a68 <__aeabi_d2iz>
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	4682      	mov	sl, r0
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	4630      	mov	r0, r6
 800d1fe:	4639      	mov	r1, r7
 800d200:	f7f3 fbf4 	bl	80009ec <__aeabi_dcmplt>
 800d204:	b148      	cbz	r0, 800d21a <_dtoa_r+0x17a>
 800d206:	4650      	mov	r0, sl
 800d208:	f7f3 f914 	bl	8000434 <__aeabi_i2d>
 800d20c:	4632      	mov	r2, r6
 800d20e:	463b      	mov	r3, r7
 800d210:	f7f3 fbe2 	bl	80009d8 <__aeabi_dcmpeq>
 800d214:	b908      	cbnz	r0, 800d21a <_dtoa_r+0x17a>
 800d216:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d21a:	f1ba 0f16 	cmp.w	sl, #22
 800d21e:	d858      	bhi.n	800d2d2 <_dtoa_r+0x232>
 800d220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d224:	4b57      	ldr	r3, [pc, #348]	; (800d384 <_dtoa_r+0x2e4>)
 800d226:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22e:	f7f3 fbdd 	bl	80009ec <__aeabi_dcmplt>
 800d232:	2800      	cmp	r0, #0
 800d234:	d04f      	beq.n	800d2d6 <_dtoa_r+0x236>
 800d236:	2300      	movs	r3, #0
 800d238:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d23c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d23e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d240:	1b1c      	subs	r4, r3, r4
 800d242:	1e63      	subs	r3, r4, #1
 800d244:	9309      	str	r3, [sp, #36]	; 0x24
 800d246:	bf49      	itett	mi
 800d248:	f1c4 0301 	rsbmi	r3, r4, #1
 800d24c:	2300      	movpl	r3, #0
 800d24e:	9306      	strmi	r3, [sp, #24]
 800d250:	2300      	movmi	r3, #0
 800d252:	bf54      	ite	pl
 800d254:	9306      	strpl	r3, [sp, #24]
 800d256:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d258:	f1ba 0f00 	cmp.w	sl, #0
 800d25c:	db3d      	blt.n	800d2da <_dtoa_r+0x23a>
 800d25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d260:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d264:	4453      	add	r3, sl
 800d266:	9309      	str	r3, [sp, #36]	; 0x24
 800d268:	2300      	movs	r3, #0
 800d26a:	930a      	str	r3, [sp, #40]	; 0x28
 800d26c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d26e:	2b09      	cmp	r3, #9
 800d270:	f200 808c 	bhi.w	800d38c <_dtoa_r+0x2ec>
 800d274:	2b05      	cmp	r3, #5
 800d276:	bfc4      	itt	gt
 800d278:	3b04      	subgt	r3, #4
 800d27a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d27c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d27e:	bfc8      	it	gt
 800d280:	2400      	movgt	r4, #0
 800d282:	f1a3 0302 	sub.w	r3, r3, #2
 800d286:	bfd8      	it	le
 800d288:	2401      	movle	r4, #1
 800d28a:	2b03      	cmp	r3, #3
 800d28c:	f200 808a 	bhi.w	800d3a4 <_dtoa_r+0x304>
 800d290:	e8df f003 	tbb	[pc, r3]
 800d294:	5b4d4f2d 	.word	0x5b4d4f2d
 800d298:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d29c:	441c      	add	r4, r3
 800d29e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d2a2:	2b20      	cmp	r3, #32
 800d2a4:	bfc3      	ittte	gt
 800d2a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d2aa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800d2ae:	fa09 f303 	lslgt.w	r3, r9, r3
 800d2b2:	f1c3 0320 	rsble	r3, r3, #32
 800d2b6:	bfc6      	itte	gt
 800d2b8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d2bc:	4318      	orrgt	r0, r3
 800d2be:	fa06 f003 	lslle.w	r0, r6, r3
 800d2c2:	f7f3 f8a7 	bl	8000414 <__aeabi_ui2d>
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d2cc:	3c01      	subs	r4, #1
 800d2ce:	9313      	str	r3, [sp, #76]	; 0x4c
 800d2d0:	e76f      	b.n	800d1b2 <_dtoa_r+0x112>
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e7b2      	b.n	800d23c <_dtoa_r+0x19c>
 800d2d6:	900f      	str	r0, [sp, #60]	; 0x3c
 800d2d8:	e7b1      	b.n	800d23e <_dtoa_r+0x19e>
 800d2da:	9b06      	ldr	r3, [sp, #24]
 800d2dc:	eba3 030a 	sub.w	r3, r3, sl
 800d2e0:	9306      	str	r3, [sp, #24]
 800d2e2:	f1ca 0300 	rsb	r3, sl, #0
 800d2e6:	930a      	str	r3, [sp, #40]	; 0x28
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	930e      	str	r3, [sp, #56]	; 0x38
 800d2ec:	e7be      	b.n	800d26c <_dtoa_r+0x1cc>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	dc58      	bgt.n	800d3aa <_dtoa_r+0x30a>
 800d2f8:	f04f 0901 	mov.w	r9, #1
 800d2fc:	464b      	mov	r3, r9
 800d2fe:	f8cd 9020 	str.w	r9, [sp, #32]
 800d302:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800d306:	2200      	movs	r2, #0
 800d308:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d30a:	6042      	str	r2, [r0, #4]
 800d30c:	2204      	movs	r2, #4
 800d30e:	f102 0614 	add.w	r6, r2, #20
 800d312:	429e      	cmp	r6, r3
 800d314:	6841      	ldr	r1, [r0, #4]
 800d316:	d94e      	bls.n	800d3b6 <_dtoa_r+0x316>
 800d318:	4628      	mov	r0, r5
 800d31a:	f000 fcc9 	bl	800dcb0 <_Balloc>
 800d31e:	9003      	str	r0, [sp, #12]
 800d320:	2800      	cmp	r0, #0
 800d322:	d14c      	bne.n	800d3be <_dtoa_r+0x31e>
 800d324:	4602      	mov	r2, r0
 800d326:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d32a:	4b17      	ldr	r3, [pc, #92]	; (800d388 <_dtoa_r+0x2e8>)
 800d32c:	e6cc      	b.n	800d0c8 <_dtoa_r+0x28>
 800d32e:	2301      	movs	r3, #1
 800d330:	e7de      	b.n	800d2f0 <_dtoa_r+0x250>
 800d332:	2300      	movs	r3, #0
 800d334:	930b      	str	r3, [sp, #44]	; 0x2c
 800d336:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d338:	eb0a 0903 	add.w	r9, sl, r3
 800d33c:	f109 0301 	add.w	r3, r9, #1
 800d340:	2b01      	cmp	r3, #1
 800d342:	9308      	str	r3, [sp, #32]
 800d344:	bfb8      	it	lt
 800d346:	2301      	movlt	r3, #1
 800d348:	e7dd      	b.n	800d306 <_dtoa_r+0x266>
 800d34a:	2301      	movs	r3, #1
 800d34c:	e7f2      	b.n	800d334 <_dtoa_r+0x294>
 800d34e:	bf00      	nop
 800d350:	636f4361 	.word	0x636f4361
 800d354:	3fd287a7 	.word	0x3fd287a7
 800d358:	8b60c8b3 	.word	0x8b60c8b3
 800d35c:	3fc68a28 	.word	0x3fc68a28
 800d360:	509f79fb 	.word	0x509f79fb
 800d364:	3fd34413 	.word	0x3fd34413
 800d368:	0800f60d 	.word	0x0800f60d
 800d36c:	0800f624 	.word	0x0800f624
 800d370:	7ff00000 	.word	0x7ff00000
 800d374:	0800f609 	.word	0x0800f609
 800d378:	0800f600 	.word	0x0800f600
 800d37c:	0800f5dd 	.word	0x0800f5dd
 800d380:	3ff80000 	.word	0x3ff80000
 800d384:	0800f718 	.word	0x0800f718
 800d388:	0800f67f 	.word	0x0800f67f
 800d38c:	2401      	movs	r4, #1
 800d38e:	2300      	movs	r3, #0
 800d390:	940b      	str	r4, [sp, #44]	; 0x2c
 800d392:	9322      	str	r3, [sp, #136]	; 0x88
 800d394:	f04f 39ff 	mov.w	r9, #4294967295
 800d398:	2200      	movs	r2, #0
 800d39a:	2312      	movs	r3, #18
 800d39c:	f8cd 9020 	str.w	r9, [sp, #32]
 800d3a0:	9223      	str	r2, [sp, #140]	; 0x8c
 800d3a2:	e7b0      	b.n	800d306 <_dtoa_r+0x266>
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3a8:	e7f4      	b.n	800d394 <_dtoa_r+0x2f4>
 800d3aa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800d3ae:	464b      	mov	r3, r9
 800d3b0:	f8cd 9020 	str.w	r9, [sp, #32]
 800d3b4:	e7a7      	b.n	800d306 <_dtoa_r+0x266>
 800d3b6:	3101      	adds	r1, #1
 800d3b8:	6041      	str	r1, [r0, #4]
 800d3ba:	0052      	lsls	r2, r2, #1
 800d3bc:	e7a7      	b.n	800d30e <_dtoa_r+0x26e>
 800d3be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d3c0:	9a03      	ldr	r2, [sp, #12]
 800d3c2:	601a      	str	r2, [r3, #0]
 800d3c4:	9b08      	ldr	r3, [sp, #32]
 800d3c6:	2b0e      	cmp	r3, #14
 800d3c8:	f200 80a8 	bhi.w	800d51c <_dtoa_r+0x47c>
 800d3cc:	2c00      	cmp	r4, #0
 800d3ce:	f000 80a5 	beq.w	800d51c <_dtoa_r+0x47c>
 800d3d2:	f1ba 0f00 	cmp.w	sl, #0
 800d3d6:	dd34      	ble.n	800d442 <_dtoa_r+0x3a2>
 800d3d8:	4a9a      	ldr	r2, [pc, #616]	; (800d644 <_dtoa_r+0x5a4>)
 800d3da:	f00a 030f 	and.w	r3, sl, #15
 800d3de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d3e2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d3e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d3ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d3ee:	ea4f 142a 	mov.w	r4, sl, asr #4
 800d3f2:	d016      	beq.n	800d422 <_dtoa_r+0x382>
 800d3f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d3f8:	4b93      	ldr	r3, [pc, #588]	; (800d648 <_dtoa_r+0x5a8>)
 800d3fa:	2703      	movs	r7, #3
 800d3fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d400:	f7f3 f9ac 	bl	800075c <__aeabi_ddiv>
 800d404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d408:	f004 040f 	and.w	r4, r4, #15
 800d40c:	4e8e      	ldr	r6, [pc, #568]	; (800d648 <_dtoa_r+0x5a8>)
 800d40e:	b954      	cbnz	r4, 800d426 <_dtoa_r+0x386>
 800d410:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d418:	f7f3 f9a0 	bl	800075c <__aeabi_ddiv>
 800d41c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d420:	e029      	b.n	800d476 <_dtoa_r+0x3d6>
 800d422:	2702      	movs	r7, #2
 800d424:	e7f2      	b.n	800d40c <_dtoa_r+0x36c>
 800d426:	07e1      	lsls	r1, r4, #31
 800d428:	d508      	bpl.n	800d43c <_dtoa_r+0x39c>
 800d42a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d42e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d432:	f7f3 f869 	bl	8000508 <__aeabi_dmul>
 800d436:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d43a:	3701      	adds	r7, #1
 800d43c:	1064      	asrs	r4, r4, #1
 800d43e:	3608      	adds	r6, #8
 800d440:	e7e5      	b.n	800d40e <_dtoa_r+0x36e>
 800d442:	f000 80a5 	beq.w	800d590 <_dtoa_r+0x4f0>
 800d446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d44a:	f1ca 0400 	rsb	r4, sl, #0
 800d44e:	4b7d      	ldr	r3, [pc, #500]	; (800d644 <_dtoa_r+0x5a4>)
 800d450:	f004 020f 	and.w	r2, r4, #15
 800d454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45c:	f7f3 f854 	bl	8000508 <__aeabi_dmul>
 800d460:	2702      	movs	r7, #2
 800d462:	2300      	movs	r3, #0
 800d464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d468:	4e77      	ldr	r6, [pc, #476]	; (800d648 <_dtoa_r+0x5a8>)
 800d46a:	1124      	asrs	r4, r4, #4
 800d46c:	2c00      	cmp	r4, #0
 800d46e:	f040 8084 	bne.w	800d57a <_dtoa_r+0x4da>
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1d2      	bne.n	800d41c <_dtoa_r+0x37c>
 800d476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 808b 	beq.w	800d594 <_dtoa_r+0x4f4>
 800d47e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d482:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d486:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d48a:	2200      	movs	r2, #0
 800d48c:	4b6f      	ldr	r3, [pc, #444]	; (800d64c <_dtoa_r+0x5ac>)
 800d48e:	f7f3 faad 	bl	80009ec <__aeabi_dcmplt>
 800d492:	2800      	cmp	r0, #0
 800d494:	d07e      	beq.n	800d594 <_dtoa_r+0x4f4>
 800d496:	9b08      	ldr	r3, [sp, #32]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d07b      	beq.n	800d594 <_dtoa_r+0x4f4>
 800d49c:	f1b9 0f00 	cmp.w	r9, #0
 800d4a0:	dd38      	ble.n	800d514 <_dtoa_r+0x474>
 800d4a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	4b69      	ldr	r3, [pc, #420]	; (800d650 <_dtoa_r+0x5b0>)
 800d4aa:	f7f3 f82d 	bl	8000508 <__aeabi_dmul>
 800d4ae:	464c      	mov	r4, r9
 800d4b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4b4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800d4b8:	3701      	adds	r7, #1
 800d4ba:	4638      	mov	r0, r7
 800d4bc:	f7f2 ffba 	bl	8000434 <__aeabi_i2d>
 800d4c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4c4:	f7f3 f820 	bl	8000508 <__aeabi_dmul>
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	4b62      	ldr	r3, [pc, #392]	; (800d654 <_dtoa_r+0x5b4>)
 800d4cc:	f7f2 fe66 	bl	800019c <__adddf3>
 800d4d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d4d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d4d8:	9611      	str	r6, [sp, #68]	; 0x44
 800d4da:	2c00      	cmp	r4, #0
 800d4dc:	d15d      	bne.n	800d59a <_dtoa_r+0x4fa>
 800d4de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	4b5c      	ldr	r3, [pc, #368]	; (800d658 <_dtoa_r+0x5b8>)
 800d4e6:	f7f2 fe57 	bl	8000198 <__aeabi_dsub>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d4f2:	4633      	mov	r3, r6
 800d4f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d4f6:	f7f3 fa97 	bl	8000a28 <__aeabi_dcmpgt>
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	f040 829c 	bne.w	800da38 <_dtoa_r+0x998>
 800d500:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d504:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d506:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d50a:	f7f3 fa6f 	bl	80009ec <__aeabi_dcmplt>
 800d50e:	2800      	cmp	r0, #0
 800d510:	f040 8290 	bne.w	800da34 <_dtoa_r+0x994>
 800d514:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800d518:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d51c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f2c0 8152 	blt.w	800d7c8 <_dtoa_r+0x728>
 800d524:	f1ba 0f0e 	cmp.w	sl, #14
 800d528:	f300 814e 	bgt.w	800d7c8 <_dtoa_r+0x728>
 800d52c:	4b45      	ldr	r3, [pc, #276]	; (800d644 <_dtoa_r+0x5a4>)
 800d52e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d532:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d536:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d53a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f280 80db 	bge.w	800d6f8 <_dtoa_r+0x658>
 800d542:	9b08      	ldr	r3, [sp, #32]
 800d544:	2b00      	cmp	r3, #0
 800d546:	f300 80d7 	bgt.w	800d6f8 <_dtoa_r+0x658>
 800d54a:	f040 8272 	bne.w	800da32 <_dtoa_r+0x992>
 800d54e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d552:	2200      	movs	r2, #0
 800d554:	4b40      	ldr	r3, [pc, #256]	; (800d658 <_dtoa_r+0x5b8>)
 800d556:	f7f2 ffd7 	bl	8000508 <__aeabi_dmul>
 800d55a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d55e:	f7f3 fa59 	bl	8000a14 <__aeabi_dcmpge>
 800d562:	9c08      	ldr	r4, [sp, #32]
 800d564:	4626      	mov	r6, r4
 800d566:	2800      	cmp	r0, #0
 800d568:	f040 8248 	bne.w	800d9fc <_dtoa_r+0x95c>
 800d56c:	2331      	movs	r3, #49	; 0x31
 800d56e:	9f03      	ldr	r7, [sp, #12]
 800d570:	f10a 0a01 	add.w	sl, sl, #1
 800d574:	f807 3b01 	strb.w	r3, [r7], #1
 800d578:	e244      	b.n	800da04 <_dtoa_r+0x964>
 800d57a:	07e2      	lsls	r2, r4, #31
 800d57c:	d505      	bpl.n	800d58a <_dtoa_r+0x4ea>
 800d57e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d582:	f7f2 ffc1 	bl	8000508 <__aeabi_dmul>
 800d586:	2301      	movs	r3, #1
 800d588:	3701      	adds	r7, #1
 800d58a:	1064      	asrs	r4, r4, #1
 800d58c:	3608      	adds	r6, #8
 800d58e:	e76d      	b.n	800d46c <_dtoa_r+0x3cc>
 800d590:	2702      	movs	r7, #2
 800d592:	e770      	b.n	800d476 <_dtoa_r+0x3d6>
 800d594:	46d0      	mov	r8, sl
 800d596:	9c08      	ldr	r4, [sp, #32]
 800d598:	e78f      	b.n	800d4ba <_dtoa_r+0x41a>
 800d59a:	9903      	ldr	r1, [sp, #12]
 800d59c:	4b29      	ldr	r3, [pc, #164]	; (800d644 <_dtoa_r+0x5a4>)
 800d59e:	4421      	add	r1, r4
 800d5a0:	9112      	str	r1, [sp, #72]	; 0x48
 800d5a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d5a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d5ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d5b0:	2900      	cmp	r1, #0
 800d5b2:	d055      	beq.n	800d660 <_dtoa_r+0x5c0>
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	4929      	ldr	r1, [pc, #164]	; (800d65c <_dtoa_r+0x5bc>)
 800d5b8:	f7f3 f8d0 	bl	800075c <__aeabi_ddiv>
 800d5bc:	463b      	mov	r3, r7
 800d5be:	4632      	mov	r2, r6
 800d5c0:	f7f2 fdea 	bl	8000198 <__aeabi_dsub>
 800d5c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d5c8:	9f03      	ldr	r7, [sp, #12]
 800d5ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5ce:	f7f3 fa4b 	bl	8000a68 <__aeabi_d2iz>
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	f7f2 ff2e 	bl	8000434 <__aeabi_i2d>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	460b      	mov	r3, r1
 800d5dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5e0:	f7f2 fdda 	bl	8000198 <__aeabi_dsub>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	3430      	adds	r4, #48	; 0x30
 800d5ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d5ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d5f2:	f807 4b01 	strb.w	r4, [r7], #1
 800d5f6:	f7f3 f9f9 	bl	80009ec <__aeabi_dcmplt>
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	d174      	bne.n	800d6e8 <_dtoa_r+0x648>
 800d5fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d602:	2000      	movs	r0, #0
 800d604:	4911      	ldr	r1, [pc, #68]	; (800d64c <_dtoa_r+0x5ac>)
 800d606:	f7f2 fdc7 	bl	8000198 <__aeabi_dsub>
 800d60a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d60e:	f7f3 f9ed 	bl	80009ec <__aeabi_dcmplt>
 800d612:	2800      	cmp	r0, #0
 800d614:	f040 80b7 	bne.w	800d786 <_dtoa_r+0x6e6>
 800d618:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d61a:	429f      	cmp	r7, r3
 800d61c:	f43f af7a 	beq.w	800d514 <_dtoa_r+0x474>
 800d620:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d624:	2200      	movs	r2, #0
 800d626:	4b0a      	ldr	r3, [pc, #40]	; (800d650 <_dtoa_r+0x5b0>)
 800d628:	f7f2 ff6e 	bl	8000508 <__aeabi_dmul>
 800d62c:	2200      	movs	r2, #0
 800d62e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d636:	4b06      	ldr	r3, [pc, #24]	; (800d650 <_dtoa_r+0x5b0>)
 800d638:	f7f2 ff66 	bl	8000508 <__aeabi_dmul>
 800d63c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d640:	e7c3      	b.n	800d5ca <_dtoa_r+0x52a>
 800d642:	bf00      	nop
 800d644:	0800f718 	.word	0x0800f718
 800d648:	0800f6f0 	.word	0x0800f6f0
 800d64c:	3ff00000 	.word	0x3ff00000
 800d650:	40240000 	.word	0x40240000
 800d654:	401c0000 	.word	0x401c0000
 800d658:	40140000 	.word	0x40140000
 800d65c:	3fe00000 	.word	0x3fe00000
 800d660:	4630      	mov	r0, r6
 800d662:	4639      	mov	r1, r7
 800d664:	f7f2 ff50 	bl	8000508 <__aeabi_dmul>
 800d668:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d66a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d66e:	9c03      	ldr	r4, [sp, #12]
 800d670:	9314      	str	r3, [sp, #80]	; 0x50
 800d672:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d676:	f7f3 f9f7 	bl	8000a68 <__aeabi_d2iz>
 800d67a:	9015      	str	r0, [sp, #84]	; 0x54
 800d67c:	f7f2 feda 	bl	8000434 <__aeabi_i2d>
 800d680:	4602      	mov	r2, r0
 800d682:	460b      	mov	r3, r1
 800d684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d688:	f7f2 fd86 	bl	8000198 <__aeabi_dsub>
 800d68c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d68e:	4606      	mov	r6, r0
 800d690:	3330      	adds	r3, #48	; 0x30
 800d692:	f804 3b01 	strb.w	r3, [r4], #1
 800d696:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d698:	460f      	mov	r7, r1
 800d69a:	429c      	cmp	r4, r3
 800d69c:	f04f 0200 	mov.w	r2, #0
 800d6a0:	d124      	bne.n	800d6ec <_dtoa_r+0x64c>
 800d6a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d6a6:	4bb0      	ldr	r3, [pc, #704]	; (800d968 <_dtoa_r+0x8c8>)
 800d6a8:	f7f2 fd78 	bl	800019c <__adddf3>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	4639      	mov	r1, r7
 800d6b4:	f7f3 f9b8 	bl	8000a28 <__aeabi_dcmpgt>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d163      	bne.n	800d784 <_dtoa_r+0x6e4>
 800d6bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d6c0:	2000      	movs	r0, #0
 800d6c2:	49a9      	ldr	r1, [pc, #676]	; (800d968 <_dtoa_r+0x8c8>)
 800d6c4:	f7f2 fd68 	bl	8000198 <__aeabi_dsub>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	4639      	mov	r1, r7
 800d6d0:	f7f3 f98c 	bl	80009ec <__aeabi_dcmplt>
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	f43f af1d 	beq.w	800d514 <_dtoa_r+0x474>
 800d6da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d6dc:	1e7b      	subs	r3, r7, #1
 800d6de:	9314      	str	r3, [sp, #80]	; 0x50
 800d6e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d6e4:	2b30      	cmp	r3, #48	; 0x30
 800d6e6:	d0f8      	beq.n	800d6da <_dtoa_r+0x63a>
 800d6e8:	46c2      	mov	sl, r8
 800d6ea:	e03b      	b.n	800d764 <_dtoa_r+0x6c4>
 800d6ec:	4b9f      	ldr	r3, [pc, #636]	; (800d96c <_dtoa_r+0x8cc>)
 800d6ee:	f7f2 ff0b 	bl	8000508 <__aeabi_dmul>
 800d6f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6f6:	e7bc      	b.n	800d672 <_dtoa_r+0x5d2>
 800d6f8:	9f03      	ldr	r7, [sp, #12]
 800d6fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d6fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d702:	4640      	mov	r0, r8
 800d704:	4649      	mov	r1, r9
 800d706:	f7f3 f829 	bl	800075c <__aeabi_ddiv>
 800d70a:	f7f3 f9ad 	bl	8000a68 <__aeabi_d2iz>
 800d70e:	4604      	mov	r4, r0
 800d710:	f7f2 fe90 	bl	8000434 <__aeabi_i2d>
 800d714:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d718:	f7f2 fef6 	bl	8000508 <__aeabi_dmul>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	4640      	mov	r0, r8
 800d722:	4649      	mov	r1, r9
 800d724:	f7f2 fd38 	bl	8000198 <__aeabi_dsub>
 800d728:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d72c:	f807 6b01 	strb.w	r6, [r7], #1
 800d730:	9e03      	ldr	r6, [sp, #12]
 800d732:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d736:	1bbe      	subs	r6, r7, r6
 800d738:	45b4      	cmp	ip, r6
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	d136      	bne.n	800d7ae <_dtoa_r+0x70e>
 800d740:	f7f2 fd2c 	bl	800019c <__adddf3>
 800d744:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d748:	4680      	mov	r8, r0
 800d74a:	4689      	mov	r9, r1
 800d74c:	f7f3 f96c 	bl	8000a28 <__aeabi_dcmpgt>
 800d750:	bb58      	cbnz	r0, 800d7aa <_dtoa_r+0x70a>
 800d752:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d756:	4640      	mov	r0, r8
 800d758:	4649      	mov	r1, r9
 800d75a:	f7f3 f93d 	bl	80009d8 <__aeabi_dcmpeq>
 800d75e:	b108      	cbz	r0, 800d764 <_dtoa_r+0x6c4>
 800d760:	07e1      	lsls	r1, r4, #31
 800d762:	d422      	bmi.n	800d7aa <_dtoa_r+0x70a>
 800d764:	4628      	mov	r0, r5
 800d766:	4659      	mov	r1, fp
 800d768:	f000 fae2 	bl	800dd30 <_Bfree>
 800d76c:	2300      	movs	r3, #0
 800d76e:	703b      	strb	r3, [r7, #0]
 800d770:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d772:	f10a 0001 	add.w	r0, sl, #1
 800d776:	6018      	str	r0, [r3, #0]
 800d778:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f43f acde 	beq.w	800d13c <_dtoa_r+0x9c>
 800d780:	601f      	str	r7, [r3, #0]
 800d782:	e4db      	b.n	800d13c <_dtoa_r+0x9c>
 800d784:	4627      	mov	r7, r4
 800d786:	463b      	mov	r3, r7
 800d788:	461f      	mov	r7, r3
 800d78a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d78e:	2a39      	cmp	r2, #57	; 0x39
 800d790:	d107      	bne.n	800d7a2 <_dtoa_r+0x702>
 800d792:	9a03      	ldr	r2, [sp, #12]
 800d794:	429a      	cmp	r2, r3
 800d796:	d1f7      	bne.n	800d788 <_dtoa_r+0x6e8>
 800d798:	2230      	movs	r2, #48	; 0x30
 800d79a:	9903      	ldr	r1, [sp, #12]
 800d79c:	f108 0801 	add.w	r8, r8, #1
 800d7a0:	700a      	strb	r2, [r1, #0]
 800d7a2:	781a      	ldrb	r2, [r3, #0]
 800d7a4:	3201      	adds	r2, #1
 800d7a6:	701a      	strb	r2, [r3, #0]
 800d7a8:	e79e      	b.n	800d6e8 <_dtoa_r+0x648>
 800d7aa:	46d0      	mov	r8, sl
 800d7ac:	e7eb      	b.n	800d786 <_dtoa_r+0x6e6>
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	4b6e      	ldr	r3, [pc, #440]	; (800d96c <_dtoa_r+0x8cc>)
 800d7b2:	f7f2 fea9 	bl	8000508 <__aeabi_dmul>
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	4680      	mov	r8, r0
 800d7bc:	4689      	mov	r9, r1
 800d7be:	f7f3 f90b 	bl	80009d8 <__aeabi_dcmpeq>
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	d09b      	beq.n	800d6fe <_dtoa_r+0x65e>
 800d7c6:	e7cd      	b.n	800d764 <_dtoa_r+0x6c4>
 800d7c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d7ca:	2a00      	cmp	r2, #0
 800d7cc:	f000 80d0 	beq.w	800d970 <_dtoa_r+0x8d0>
 800d7d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d7d2:	2a01      	cmp	r2, #1
 800d7d4:	f300 80ae 	bgt.w	800d934 <_dtoa_r+0x894>
 800d7d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d7da:	2a00      	cmp	r2, #0
 800d7dc:	f000 80a6 	beq.w	800d92c <_dtoa_r+0x88c>
 800d7e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d7e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d7e6:	9f06      	ldr	r7, [sp, #24]
 800d7e8:	9a06      	ldr	r2, [sp, #24]
 800d7ea:	2101      	movs	r1, #1
 800d7ec:	441a      	add	r2, r3
 800d7ee:	9206      	str	r2, [sp, #24]
 800d7f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	441a      	add	r2, r3
 800d7f6:	9209      	str	r2, [sp, #36]	; 0x24
 800d7f8:	f000 fb50 	bl	800de9c <__i2b>
 800d7fc:	4606      	mov	r6, r0
 800d7fe:	2f00      	cmp	r7, #0
 800d800:	dd0c      	ble.n	800d81c <_dtoa_r+0x77c>
 800d802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d804:	2b00      	cmp	r3, #0
 800d806:	dd09      	ble.n	800d81c <_dtoa_r+0x77c>
 800d808:	42bb      	cmp	r3, r7
 800d80a:	bfa8      	it	ge
 800d80c:	463b      	movge	r3, r7
 800d80e:	9a06      	ldr	r2, [sp, #24]
 800d810:	1aff      	subs	r7, r7, r3
 800d812:	1ad2      	subs	r2, r2, r3
 800d814:	9206      	str	r2, [sp, #24]
 800d816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d818:	1ad3      	subs	r3, r2, r3
 800d81a:	9309      	str	r3, [sp, #36]	; 0x24
 800d81c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d81e:	b1f3      	cbz	r3, 800d85e <_dtoa_r+0x7be>
 800d820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d822:	2b00      	cmp	r3, #0
 800d824:	f000 80a8 	beq.w	800d978 <_dtoa_r+0x8d8>
 800d828:	2c00      	cmp	r4, #0
 800d82a:	dd10      	ble.n	800d84e <_dtoa_r+0x7ae>
 800d82c:	4631      	mov	r1, r6
 800d82e:	4622      	mov	r2, r4
 800d830:	4628      	mov	r0, r5
 800d832:	f000 fbf1 	bl	800e018 <__pow5mult>
 800d836:	465a      	mov	r2, fp
 800d838:	4601      	mov	r1, r0
 800d83a:	4606      	mov	r6, r0
 800d83c:	4628      	mov	r0, r5
 800d83e:	f000 fb43 	bl	800dec8 <__multiply>
 800d842:	4680      	mov	r8, r0
 800d844:	4659      	mov	r1, fp
 800d846:	4628      	mov	r0, r5
 800d848:	f000 fa72 	bl	800dd30 <_Bfree>
 800d84c:	46c3      	mov	fp, r8
 800d84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d850:	1b1a      	subs	r2, r3, r4
 800d852:	d004      	beq.n	800d85e <_dtoa_r+0x7be>
 800d854:	4659      	mov	r1, fp
 800d856:	4628      	mov	r0, r5
 800d858:	f000 fbde 	bl	800e018 <__pow5mult>
 800d85c:	4683      	mov	fp, r0
 800d85e:	2101      	movs	r1, #1
 800d860:	4628      	mov	r0, r5
 800d862:	f000 fb1b 	bl	800de9c <__i2b>
 800d866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d868:	4604      	mov	r4, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f340 8086 	ble.w	800d97c <_dtoa_r+0x8dc>
 800d870:	461a      	mov	r2, r3
 800d872:	4601      	mov	r1, r0
 800d874:	4628      	mov	r0, r5
 800d876:	f000 fbcf 	bl	800e018 <__pow5mult>
 800d87a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d87c:	4604      	mov	r4, r0
 800d87e:	2b01      	cmp	r3, #1
 800d880:	dd7f      	ble.n	800d982 <_dtoa_r+0x8e2>
 800d882:	f04f 0800 	mov.w	r8, #0
 800d886:	6923      	ldr	r3, [r4, #16]
 800d888:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d88c:	6918      	ldr	r0, [r3, #16]
 800d88e:	f000 fab7 	bl	800de00 <__hi0bits>
 800d892:	f1c0 0020 	rsb	r0, r0, #32
 800d896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d898:	4418      	add	r0, r3
 800d89a:	f010 001f 	ands.w	r0, r0, #31
 800d89e:	f000 8092 	beq.w	800d9c6 <_dtoa_r+0x926>
 800d8a2:	f1c0 0320 	rsb	r3, r0, #32
 800d8a6:	2b04      	cmp	r3, #4
 800d8a8:	f340 808a 	ble.w	800d9c0 <_dtoa_r+0x920>
 800d8ac:	f1c0 001c 	rsb	r0, r0, #28
 800d8b0:	9b06      	ldr	r3, [sp, #24]
 800d8b2:	4407      	add	r7, r0
 800d8b4:	4403      	add	r3, r0
 800d8b6:	9306      	str	r3, [sp, #24]
 800d8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ba:	4403      	add	r3, r0
 800d8bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d8be:	9b06      	ldr	r3, [sp, #24]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	dd05      	ble.n	800d8d0 <_dtoa_r+0x830>
 800d8c4:	4659      	mov	r1, fp
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	f000 fbff 	bl	800e0cc <__lshift>
 800d8ce:	4683      	mov	fp, r0
 800d8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	dd05      	ble.n	800d8e2 <_dtoa_r+0x842>
 800d8d6:	4621      	mov	r1, r4
 800d8d8:	461a      	mov	r2, r3
 800d8da:	4628      	mov	r0, r5
 800d8dc:	f000 fbf6 	bl	800e0cc <__lshift>
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d070      	beq.n	800d9ca <_dtoa_r+0x92a>
 800d8e8:	4621      	mov	r1, r4
 800d8ea:	4658      	mov	r0, fp
 800d8ec:	f000 fc5e 	bl	800e1ac <__mcmp>
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	da6a      	bge.n	800d9ca <_dtoa_r+0x92a>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	4659      	mov	r1, fp
 800d8f8:	220a      	movs	r2, #10
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	f000 fa3a 	bl	800dd74 <__multadd>
 800d900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d902:	4683      	mov	fp, r0
 800d904:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f000 8194 	beq.w	800dc36 <_dtoa_r+0xb96>
 800d90e:	4631      	mov	r1, r6
 800d910:	2300      	movs	r3, #0
 800d912:	220a      	movs	r2, #10
 800d914:	4628      	mov	r0, r5
 800d916:	f000 fa2d 	bl	800dd74 <__multadd>
 800d91a:	f1b9 0f00 	cmp.w	r9, #0
 800d91e:	4606      	mov	r6, r0
 800d920:	f300 8093 	bgt.w	800da4a <_dtoa_r+0x9aa>
 800d924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d926:	2b02      	cmp	r3, #2
 800d928:	dc57      	bgt.n	800d9da <_dtoa_r+0x93a>
 800d92a:	e08e      	b.n	800da4a <_dtoa_r+0x9aa>
 800d92c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d92e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d932:	e757      	b.n	800d7e4 <_dtoa_r+0x744>
 800d934:	9b08      	ldr	r3, [sp, #32]
 800d936:	1e5c      	subs	r4, r3, #1
 800d938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d93a:	42a3      	cmp	r3, r4
 800d93c:	bfb7      	itett	lt
 800d93e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d940:	1b1c      	subge	r4, r3, r4
 800d942:	1ae2      	sublt	r2, r4, r3
 800d944:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d946:	bfbe      	ittt	lt
 800d948:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d94a:	189b      	addlt	r3, r3, r2
 800d94c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d94e:	9b08      	ldr	r3, [sp, #32]
 800d950:	bfb8      	it	lt
 800d952:	2400      	movlt	r4, #0
 800d954:	2b00      	cmp	r3, #0
 800d956:	bfbb      	ittet	lt
 800d958:	9b06      	ldrlt	r3, [sp, #24]
 800d95a:	9a08      	ldrlt	r2, [sp, #32]
 800d95c:	9f06      	ldrge	r7, [sp, #24]
 800d95e:	1a9f      	sublt	r7, r3, r2
 800d960:	bfac      	ite	ge
 800d962:	9b08      	ldrge	r3, [sp, #32]
 800d964:	2300      	movlt	r3, #0
 800d966:	e73f      	b.n	800d7e8 <_dtoa_r+0x748>
 800d968:	3fe00000 	.word	0x3fe00000
 800d96c:	40240000 	.word	0x40240000
 800d970:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d972:	9f06      	ldr	r7, [sp, #24]
 800d974:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d976:	e742      	b.n	800d7fe <_dtoa_r+0x75e>
 800d978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d97a:	e76b      	b.n	800d854 <_dtoa_r+0x7b4>
 800d97c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d97e:	2b01      	cmp	r3, #1
 800d980:	dc19      	bgt.n	800d9b6 <_dtoa_r+0x916>
 800d982:	9b04      	ldr	r3, [sp, #16]
 800d984:	b9bb      	cbnz	r3, 800d9b6 <_dtoa_r+0x916>
 800d986:	9b05      	ldr	r3, [sp, #20]
 800d988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d98c:	b99b      	cbnz	r3, 800d9b6 <_dtoa_r+0x916>
 800d98e:	9b05      	ldr	r3, [sp, #20]
 800d990:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d994:	0d1b      	lsrs	r3, r3, #20
 800d996:	051b      	lsls	r3, r3, #20
 800d998:	b183      	cbz	r3, 800d9bc <_dtoa_r+0x91c>
 800d99a:	f04f 0801 	mov.w	r8, #1
 800d99e:	9b06      	ldr	r3, [sp, #24]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	9306      	str	r3, [sp, #24]
 800d9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d9aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f47f af6a 	bne.w	800d886 <_dtoa_r+0x7e6>
 800d9b2:	2001      	movs	r0, #1
 800d9b4:	e76f      	b.n	800d896 <_dtoa_r+0x7f6>
 800d9b6:	f04f 0800 	mov.w	r8, #0
 800d9ba:	e7f6      	b.n	800d9aa <_dtoa_r+0x90a>
 800d9bc:	4698      	mov	r8, r3
 800d9be:	e7f4      	b.n	800d9aa <_dtoa_r+0x90a>
 800d9c0:	f43f af7d 	beq.w	800d8be <_dtoa_r+0x81e>
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	301c      	adds	r0, #28
 800d9c8:	e772      	b.n	800d8b0 <_dtoa_r+0x810>
 800d9ca:	9b08      	ldr	r3, [sp, #32]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	dc36      	bgt.n	800da3e <_dtoa_r+0x99e>
 800d9d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d9d2:	2b02      	cmp	r3, #2
 800d9d4:	dd33      	ble.n	800da3e <_dtoa_r+0x99e>
 800d9d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9da:	f1b9 0f00 	cmp.w	r9, #0
 800d9de:	d10d      	bne.n	800d9fc <_dtoa_r+0x95c>
 800d9e0:	4621      	mov	r1, r4
 800d9e2:	464b      	mov	r3, r9
 800d9e4:	2205      	movs	r2, #5
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	f000 f9c4 	bl	800dd74 <__multadd>
 800d9ec:	4601      	mov	r1, r0
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	4658      	mov	r0, fp
 800d9f2:	f000 fbdb 	bl	800e1ac <__mcmp>
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	f73f adb8 	bgt.w	800d56c <_dtoa_r+0x4cc>
 800d9fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d9fe:	9f03      	ldr	r7, [sp, #12]
 800da00:	ea6f 0a03 	mvn.w	sl, r3
 800da04:	f04f 0800 	mov.w	r8, #0
 800da08:	4621      	mov	r1, r4
 800da0a:	4628      	mov	r0, r5
 800da0c:	f000 f990 	bl	800dd30 <_Bfree>
 800da10:	2e00      	cmp	r6, #0
 800da12:	f43f aea7 	beq.w	800d764 <_dtoa_r+0x6c4>
 800da16:	f1b8 0f00 	cmp.w	r8, #0
 800da1a:	d005      	beq.n	800da28 <_dtoa_r+0x988>
 800da1c:	45b0      	cmp	r8, r6
 800da1e:	d003      	beq.n	800da28 <_dtoa_r+0x988>
 800da20:	4641      	mov	r1, r8
 800da22:	4628      	mov	r0, r5
 800da24:	f000 f984 	bl	800dd30 <_Bfree>
 800da28:	4631      	mov	r1, r6
 800da2a:	4628      	mov	r0, r5
 800da2c:	f000 f980 	bl	800dd30 <_Bfree>
 800da30:	e698      	b.n	800d764 <_dtoa_r+0x6c4>
 800da32:	2400      	movs	r4, #0
 800da34:	4626      	mov	r6, r4
 800da36:	e7e1      	b.n	800d9fc <_dtoa_r+0x95c>
 800da38:	46c2      	mov	sl, r8
 800da3a:	4626      	mov	r6, r4
 800da3c:	e596      	b.n	800d56c <_dtoa_r+0x4cc>
 800da3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da44:	2b00      	cmp	r3, #0
 800da46:	f000 80fd 	beq.w	800dc44 <_dtoa_r+0xba4>
 800da4a:	2f00      	cmp	r7, #0
 800da4c:	dd05      	ble.n	800da5a <_dtoa_r+0x9ba>
 800da4e:	4631      	mov	r1, r6
 800da50:	463a      	mov	r2, r7
 800da52:	4628      	mov	r0, r5
 800da54:	f000 fb3a 	bl	800e0cc <__lshift>
 800da58:	4606      	mov	r6, r0
 800da5a:	f1b8 0f00 	cmp.w	r8, #0
 800da5e:	d05c      	beq.n	800db1a <_dtoa_r+0xa7a>
 800da60:	4628      	mov	r0, r5
 800da62:	6871      	ldr	r1, [r6, #4]
 800da64:	f000 f924 	bl	800dcb0 <_Balloc>
 800da68:	4607      	mov	r7, r0
 800da6a:	b928      	cbnz	r0, 800da78 <_dtoa_r+0x9d8>
 800da6c:	4602      	mov	r2, r0
 800da6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800da72:	4b7f      	ldr	r3, [pc, #508]	; (800dc70 <_dtoa_r+0xbd0>)
 800da74:	f7ff bb28 	b.w	800d0c8 <_dtoa_r+0x28>
 800da78:	6932      	ldr	r2, [r6, #16]
 800da7a:	f106 010c 	add.w	r1, r6, #12
 800da7e:	3202      	adds	r2, #2
 800da80:	0092      	lsls	r2, r2, #2
 800da82:	300c      	adds	r0, #12
 800da84:	f7fe fdd4 	bl	800c630 <memcpy>
 800da88:	2201      	movs	r2, #1
 800da8a:	4639      	mov	r1, r7
 800da8c:	4628      	mov	r0, r5
 800da8e:	f000 fb1d 	bl	800e0cc <__lshift>
 800da92:	46b0      	mov	r8, r6
 800da94:	4606      	mov	r6, r0
 800da96:	9b03      	ldr	r3, [sp, #12]
 800da98:	3301      	adds	r3, #1
 800da9a:	9308      	str	r3, [sp, #32]
 800da9c:	9b03      	ldr	r3, [sp, #12]
 800da9e:	444b      	add	r3, r9
 800daa0:	930a      	str	r3, [sp, #40]	; 0x28
 800daa2:	9b04      	ldr	r3, [sp, #16]
 800daa4:	f003 0301 	and.w	r3, r3, #1
 800daa8:	9309      	str	r3, [sp, #36]	; 0x24
 800daaa:	9b08      	ldr	r3, [sp, #32]
 800daac:	4621      	mov	r1, r4
 800daae:	3b01      	subs	r3, #1
 800dab0:	4658      	mov	r0, fp
 800dab2:	9304      	str	r3, [sp, #16]
 800dab4:	f7ff fa66 	bl	800cf84 <quorem>
 800dab8:	4603      	mov	r3, r0
 800daba:	4641      	mov	r1, r8
 800dabc:	3330      	adds	r3, #48	; 0x30
 800dabe:	9006      	str	r0, [sp, #24]
 800dac0:	4658      	mov	r0, fp
 800dac2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dac4:	f000 fb72 	bl	800e1ac <__mcmp>
 800dac8:	4632      	mov	r2, r6
 800daca:	4681      	mov	r9, r0
 800dacc:	4621      	mov	r1, r4
 800dace:	4628      	mov	r0, r5
 800dad0:	f000 fb88 	bl	800e1e4 <__mdiff>
 800dad4:	68c2      	ldr	r2, [r0, #12]
 800dad6:	4607      	mov	r7, r0
 800dad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dada:	bb02      	cbnz	r2, 800db1e <_dtoa_r+0xa7e>
 800dadc:	4601      	mov	r1, r0
 800dade:	4658      	mov	r0, fp
 800dae0:	f000 fb64 	bl	800e1ac <__mcmp>
 800dae4:	4602      	mov	r2, r0
 800dae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dae8:	4639      	mov	r1, r7
 800daea:	4628      	mov	r0, r5
 800daec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800daf0:	f000 f91e 	bl	800dd30 <_Bfree>
 800daf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800daf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800daf8:	9f08      	ldr	r7, [sp, #32]
 800dafa:	ea43 0102 	orr.w	r1, r3, r2
 800dafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db00:	430b      	orrs	r3, r1
 800db02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db04:	d10d      	bne.n	800db22 <_dtoa_r+0xa82>
 800db06:	2b39      	cmp	r3, #57	; 0x39
 800db08:	d029      	beq.n	800db5e <_dtoa_r+0xabe>
 800db0a:	f1b9 0f00 	cmp.w	r9, #0
 800db0e:	dd01      	ble.n	800db14 <_dtoa_r+0xa74>
 800db10:	9b06      	ldr	r3, [sp, #24]
 800db12:	3331      	adds	r3, #49	; 0x31
 800db14:	9a04      	ldr	r2, [sp, #16]
 800db16:	7013      	strb	r3, [r2, #0]
 800db18:	e776      	b.n	800da08 <_dtoa_r+0x968>
 800db1a:	4630      	mov	r0, r6
 800db1c:	e7b9      	b.n	800da92 <_dtoa_r+0x9f2>
 800db1e:	2201      	movs	r2, #1
 800db20:	e7e2      	b.n	800dae8 <_dtoa_r+0xa48>
 800db22:	f1b9 0f00 	cmp.w	r9, #0
 800db26:	db06      	blt.n	800db36 <_dtoa_r+0xa96>
 800db28:	9922      	ldr	r1, [sp, #136]	; 0x88
 800db2a:	ea41 0909 	orr.w	r9, r1, r9
 800db2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db30:	ea59 0101 	orrs.w	r1, r9, r1
 800db34:	d120      	bne.n	800db78 <_dtoa_r+0xad8>
 800db36:	2a00      	cmp	r2, #0
 800db38:	ddec      	ble.n	800db14 <_dtoa_r+0xa74>
 800db3a:	4659      	mov	r1, fp
 800db3c:	2201      	movs	r2, #1
 800db3e:	4628      	mov	r0, r5
 800db40:	9308      	str	r3, [sp, #32]
 800db42:	f000 fac3 	bl	800e0cc <__lshift>
 800db46:	4621      	mov	r1, r4
 800db48:	4683      	mov	fp, r0
 800db4a:	f000 fb2f 	bl	800e1ac <__mcmp>
 800db4e:	2800      	cmp	r0, #0
 800db50:	9b08      	ldr	r3, [sp, #32]
 800db52:	dc02      	bgt.n	800db5a <_dtoa_r+0xaba>
 800db54:	d1de      	bne.n	800db14 <_dtoa_r+0xa74>
 800db56:	07da      	lsls	r2, r3, #31
 800db58:	d5dc      	bpl.n	800db14 <_dtoa_r+0xa74>
 800db5a:	2b39      	cmp	r3, #57	; 0x39
 800db5c:	d1d8      	bne.n	800db10 <_dtoa_r+0xa70>
 800db5e:	2339      	movs	r3, #57	; 0x39
 800db60:	9a04      	ldr	r2, [sp, #16]
 800db62:	7013      	strb	r3, [r2, #0]
 800db64:	463b      	mov	r3, r7
 800db66:	461f      	mov	r7, r3
 800db68:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800db6c:	3b01      	subs	r3, #1
 800db6e:	2a39      	cmp	r2, #57	; 0x39
 800db70:	d050      	beq.n	800dc14 <_dtoa_r+0xb74>
 800db72:	3201      	adds	r2, #1
 800db74:	701a      	strb	r2, [r3, #0]
 800db76:	e747      	b.n	800da08 <_dtoa_r+0x968>
 800db78:	2a00      	cmp	r2, #0
 800db7a:	dd03      	ble.n	800db84 <_dtoa_r+0xae4>
 800db7c:	2b39      	cmp	r3, #57	; 0x39
 800db7e:	d0ee      	beq.n	800db5e <_dtoa_r+0xabe>
 800db80:	3301      	adds	r3, #1
 800db82:	e7c7      	b.n	800db14 <_dtoa_r+0xa74>
 800db84:	9a08      	ldr	r2, [sp, #32]
 800db86:	990a      	ldr	r1, [sp, #40]	; 0x28
 800db88:	f802 3c01 	strb.w	r3, [r2, #-1]
 800db8c:	428a      	cmp	r2, r1
 800db8e:	d02a      	beq.n	800dbe6 <_dtoa_r+0xb46>
 800db90:	4659      	mov	r1, fp
 800db92:	2300      	movs	r3, #0
 800db94:	220a      	movs	r2, #10
 800db96:	4628      	mov	r0, r5
 800db98:	f000 f8ec 	bl	800dd74 <__multadd>
 800db9c:	45b0      	cmp	r8, r6
 800db9e:	4683      	mov	fp, r0
 800dba0:	f04f 0300 	mov.w	r3, #0
 800dba4:	f04f 020a 	mov.w	r2, #10
 800dba8:	4641      	mov	r1, r8
 800dbaa:	4628      	mov	r0, r5
 800dbac:	d107      	bne.n	800dbbe <_dtoa_r+0xb1e>
 800dbae:	f000 f8e1 	bl	800dd74 <__multadd>
 800dbb2:	4680      	mov	r8, r0
 800dbb4:	4606      	mov	r6, r0
 800dbb6:	9b08      	ldr	r3, [sp, #32]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	9308      	str	r3, [sp, #32]
 800dbbc:	e775      	b.n	800daaa <_dtoa_r+0xa0a>
 800dbbe:	f000 f8d9 	bl	800dd74 <__multadd>
 800dbc2:	4631      	mov	r1, r6
 800dbc4:	4680      	mov	r8, r0
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	220a      	movs	r2, #10
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f000 f8d2 	bl	800dd74 <__multadd>
 800dbd0:	4606      	mov	r6, r0
 800dbd2:	e7f0      	b.n	800dbb6 <_dtoa_r+0xb16>
 800dbd4:	f1b9 0f00 	cmp.w	r9, #0
 800dbd8:	bfcc      	ite	gt
 800dbda:	464f      	movgt	r7, r9
 800dbdc:	2701      	movle	r7, #1
 800dbde:	f04f 0800 	mov.w	r8, #0
 800dbe2:	9a03      	ldr	r2, [sp, #12]
 800dbe4:	4417      	add	r7, r2
 800dbe6:	4659      	mov	r1, fp
 800dbe8:	2201      	movs	r2, #1
 800dbea:	4628      	mov	r0, r5
 800dbec:	9308      	str	r3, [sp, #32]
 800dbee:	f000 fa6d 	bl	800e0cc <__lshift>
 800dbf2:	4621      	mov	r1, r4
 800dbf4:	4683      	mov	fp, r0
 800dbf6:	f000 fad9 	bl	800e1ac <__mcmp>
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	dcb2      	bgt.n	800db64 <_dtoa_r+0xac4>
 800dbfe:	d102      	bne.n	800dc06 <_dtoa_r+0xb66>
 800dc00:	9b08      	ldr	r3, [sp, #32]
 800dc02:	07db      	lsls	r3, r3, #31
 800dc04:	d4ae      	bmi.n	800db64 <_dtoa_r+0xac4>
 800dc06:	463b      	mov	r3, r7
 800dc08:	461f      	mov	r7, r3
 800dc0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc0e:	2a30      	cmp	r2, #48	; 0x30
 800dc10:	d0fa      	beq.n	800dc08 <_dtoa_r+0xb68>
 800dc12:	e6f9      	b.n	800da08 <_dtoa_r+0x968>
 800dc14:	9a03      	ldr	r2, [sp, #12]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d1a5      	bne.n	800db66 <_dtoa_r+0xac6>
 800dc1a:	2331      	movs	r3, #49	; 0x31
 800dc1c:	f10a 0a01 	add.w	sl, sl, #1
 800dc20:	e779      	b.n	800db16 <_dtoa_r+0xa76>
 800dc22:	4b14      	ldr	r3, [pc, #80]	; (800dc74 <_dtoa_r+0xbd4>)
 800dc24:	f7ff baa8 	b.w	800d178 <_dtoa_r+0xd8>
 800dc28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f47f aa81 	bne.w	800d132 <_dtoa_r+0x92>
 800dc30:	4b11      	ldr	r3, [pc, #68]	; (800dc78 <_dtoa_r+0xbd8>)
 800dc32:	f7ff baa1 	b.w	800d178 <_dtoa_r+0xd8>
 800dc36:	f1b9 0f00 	cmp.w	r9, #0
 800dc3a:	dc03      	bgt.n	800dc44 <_dtoa_r+0xba4>
 800dc3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	f73f aecb 	bgt.w	800d9da <_dtoa_r+0x93a>
 800dc44:	9f03      	ldr	r7, [sp, #12]
 800dc46:	4621      	mov	r1, r4
 800dc48:	4658      	mov	r0, fp
 800dc4a:	f7ff f99b 	bl	800cf84 <quorem>
 800dc4e:	9a03      	ldr	r2, [sp, #12]
 800dc50:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dc54:	f807 3b01 	strb.w	r3, [r7], #1
 800dc58:	1aba      	subs	r2, r7, r2
 800dc5a:	4591      	cmp	r9, r2
 800dc5c:	ddba      	ble.n	800dbd4 <_dtoa_r+0xb34>
 800dc5e:	4659      	mov	r1, fp
 800dc60:	2300      	movs	r3, #0
 800dc62:	220a      	movs	r2, #10
 800dc64:	4628      	mov	r0, r5
 800dc66:	f000 f885 	bl	800dd74 <__multadd>
 800dc6a:	4683      	mov	fp, r0
 800dc6c:	e7eb      	b.n	800dc46 <_dtoa_r+0xba6>
 800dc6e:	bf00      	nop
 800dc70:	0800f67f 	.word	0x0800f67f
 800dc74:	0800f5dc 	.word	0x0800f5dc
 800dc78:	0800f600 	.word	0x0800f600

0800dc7c <_localeconv_r>:
 800dc7c:	4800      	ldr	r0, [pc, #0]	; (800dc80 <_localeconv_r+0x4>)
 800dc7e:	4770      	bx	lr
 800dc80:	200002e4 	.word	0x200002e4

0800dc84 <malloc>:
 800dc84:	4b02      	ldr	r3, [pc, #8]	; (800dc90 <malloc+0xc>)
 800dc86:	4601      	mov	r1, r0
 800dc88:	6818      	ldr	r0, [r3, #0]
 800dc8a:	f000 bc0f 	b.w	800e4ac <_malloc_r>
 800dc8e:	bf00      	nop
 800dc90:	20000190 	.word	0x20000190

0800dc94 <memchr>:
 800dc94:	4603      	mov	r3, r0
 800dc96:	b510      	push	{r4, lr}
 800dc98:	b2c9      	uxtb	r1, r1
 800dc9a:	4402      	add	r2, r0
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	d101      	bne.n	800dca6 <memchr+0x12>
 800dca2:	2000      	movs	r0, #0
 800dca4:	e003      	b.n	800dcae <memchr+0x1a>
 800dca6:	7804      	ldrb	r4, [r0, #0]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	428c      	cmp	r4, r1
 800dcac:	d1f6      	bne.n	800dc9c <memchr+0x8>
 800dcae:	bd10      	pop	{r4, pc}

0800dcb0 <_Balloc>:
 800dcb0:	b570      	push	{r4, r5, r6, lr}
 800dcb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	460d      	mov	r5, r1
 800dcb8:	b976      	cbnz	r6, 800dcd8 <_Balloc+0x28>
 800dcba:	2010      	movs	r0, #16
 800dcbc:	f7ff ffe2 	bl	800dc84 <malloc>
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	6260      	str	r0, [r4, #36]	; 0x24
 800dcc4:	b920      	cbnz	r0, 800dcd0 <_Balloc+0x20>
 800dcc6:	2166      	movs	r1, #102	; 0x66
 800dcc8:	4b17      	ldr	r3, [pc, #92]	; (800dd28 <_Balloc+0x78>)
 800dcca:	4818      	ldr	r0, [pc, #96]	; (800dd2c <_Balloc+0x7c>)
 800dccc:	f000 fdce 	bl	800e86c <__assert_func>
 800dcd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dcd4:	6006      	str	r6, [r0, #0]
 800dcd6:	60c6      	str	r6, [r0, #12]
 800dcd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dcda:	68f3      	ldr	r3, [r6, #12]
 800dcdc:	b183      	cbz	r3, 800dd00 <_Balloc+0x50>
 800dcde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dce6:	b9b8      	cbnz	r0, 800dd18 <_Balloc+0x68>
 800dce8:	2101      	movs	r1, #1
 800dcea:	fa01 f605 	lsl.w	r6, r1, r5
 800dcee:	1d72      	adds	r2, r6, #5
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	0092      	lsls	r2, r2, #2
 800dcf4:	f000 fb5e 	bl	800e3b4 <_calloc_r>
 800dcf8:	b160      	cbz	r0, 800dd14 <_Balloc+0x64>
 800dcfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dcfe:	e00e      	b.n	800dd1e <_Balloc+0x6e>
 800dd00:	2221      	movs	r2, #33	; 0x21
 800dd02:	2104      	movs	r1, #4
 800dd04:	4620      	mov	r0, r4
 800dd06:	f000 fb55 	bl	800e3b4 <_calloc_r>
 800dd0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd0c:	60f0      	str	r0, [r6, #12]
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d1e4      	bne.n	800dcde <_Balloc+0x2e>
 800dd14:	2000      	movs	r0, #0
 800dd16:	bd70      	pop	{r4, r5, r6, pc}
 800dd18:	6802      	ldr	r2, [r0, #0]
 800dd1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd1e:	2300      	movs	r3, #0
 800dd20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd24:	e7f7      	b.n	800dd16 <_Balloc+0x66>
 800dd26:	bf00      	nop
 800dd28:	0800f60d 	.word	0x0800f60d
 800dd2c:	0800f690 	.word	0x0800f690

0800dd30 <_Bfree>:
 800dd30:	b570      	push	{r4, r5, r6, lr}
 800dd32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd34:	4605      	mov	r5, r0
 800dd36:	460c      	mov	r4, r1
 800dd38:	b976      	cbnz	r6, 800dd58 <_Bfree+0x28>
 800dd3a:	2010      	movs	r0, #16
 800dd3c:	f7ff ffa2 	bl	800dc84 <malloc>
 800dd40:	4602      	mov	r2, r0
 800dd42:	6268      	str	r0, [r5, #36]	; 0x24
 800dd44:	b920      	cbnz	r0, 800dd50 <_Bfree+0x20>
 800dd46:	218a      	movs	r1, #138	; 0x8a
 800dd48:	4b08      	ldr	r3, [pc, #32]	; (800dd6c <_Bfree+0x3c>)
 800dd4a:	4809      	ldr	r0, [pc, #36]	; (800dd70 <_Bfree+0x40>)
 800dd4c:	f000 fd8e 	bl	800e86c <__assert_func>
 800dd50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd54:	6006      	str	r6, [r0, #0]
 800dd56:	60c6      	str	r6, [r0, #12]
 800dd58:	b13c      	cbz	r4, 800dd6a <_Bfree+0x3a>
 800dd5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dd5c:	6862      	ldr	r2, [r4, #4]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd64:	6021      	str	r1, [r4, #0]
 800dd66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd6a:	bd70      	pop	{r4, r5, r6, pc}
 800dd6c:	0800f60d 	.word	0x0800f60d
 800dd70:	0800f690 	.word	0x0800f690

0800dd74 <__multadd>:
 800dd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd78:	4607      	mov	r7, r0
 800dd7a:	460c      	mov	r4, r1
 800dd7c:	461e      	mov	r6, r3
 800dd7e:	2000      	movs	r0, #0
 800dd80:	690d      	ldr	r5, [r1, #16]
 800dd82:	f101 0c14 	add.w	ip, r1, #20
 800dd86:	f8dc 3000 	ldr.w	r3, [ip]
 800dd8a:	3001      	adds	r0, #1
 800dd8c:	b299      	uxth	r1, r3
 800dd8e:	fb02 6101 	mla	r1, r2, r1, r6
 800dd92:	0c1e      	lsrs	r6, r3, #16
 800dd94:	0c0b      	lsrs	r3, r1, #16
 800dd96:	fb02 3306 	mla	r3, r2, r6, r3
 800dd9a:	b289      	uxth	r1, r1
 800dd9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dda0:	4285      	cmp	r5, r0
 800dda2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dda6:	f84c 1b04 	str.w	r1, [ip], #4
 800ddaa:	dcec      	bgt.n	800dd86 <__multadd+0x12>
 800ddac:	b30e      	cbz	r6, 800ddf2 <__multadd+0x7e>
 800ddae:	68a3      	ldr	r3, [r4, #8]
 800ddb0:	42ab      	cmp	r3, r5
 800ddb2:	dc19      	bgt.n	800dde8 <__multadd+0x74>
 800ddb4:	6861      	ldr	r1, [r4, #4]
 800ddb6:	4638      	mov	r0, r7
 800ddb8:	3101      	adds	r1, #1
 800ddba:	f7ff ff79 	bl	800dcb0 <_Balloc>
 800ddbe:	4680      	mov	r8, r0
 800ddc0:	b928      	cbnz	r0, 800ddce <__multadd+0x5a>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	21b5      	movs	r1, #181	; 0xb5
 800ddc6:	4b0c      	ldr	r3, [pc, #48]	; (800ddf8 <__multadd+0x84>)
 800ddc8:	480c      	ldr	r0, [pc, #48]	; (800ddfc <__multadd+0x88>)
 800ddca:	f000 fd4f 	bl	800e86c <__assert_func>
 800ddce:	6922      	ldr	r2, [r4, #16]
 800ddd0:	f104 010c 	add.w	r1, r4, #12
 800ddd4:	3202      	adds	r2, #2
 800ddd6:	0092      	lsls	r2, r2, #2
 800ddd8:	300c      	adds	r0, #12
 800ddda:	f7fe fc29 	bl	800c630 <memcpy>
 800ddde:	4621      	mov	r1, r4
 800dde0:	4638      	mov	r0, r7
 800dde2:	f7ff ffa5 	bl	800dd30 <_Bfree>
 800dde6:	4644      	mov	r4, r8
 800dde8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ddec:	3501      	adds	r5, #1
 800ddee:	615e      	str	r6, [r3, #20]
 800ddf0:	6125      	str	r5, [r4, #16]
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddf8:	0800f67f 	.word	0x0800f67f
 800ddfc:	0800f690 	.word	0x0800f690

0800de00 <__hi0bits>:
 800de00:	0c02      	lsrs	r2, r0, #16
 800de02:	0412      	lsls	r2, r2, #16
 800de04:	4603      	mov	r3, r0
 800de06:	b9ca      	cbnz	r2, 800de3c <__hi0bits+0x3c>
 800de08:	0403      	lsls	r3, r0, #16
 800de0a:	2010      	movs	r0, #16
 800de0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800de10:	bf04      	itt	eq
 800de12:	021b      	lsleq	r3, r3, #8
 800de14:	3008      	addeq	r0, #8
 800de16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800de1a:	bf04      	itt	eq
 800de1c:	011b      	lsleq	r3, r3, #4
 800de1e:	3004      	addeq	r0, #4
 800de20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800de24:	bf04      	itt	eq
 800de26:	009b      	lsleq	r3, r3, #2
 800de28:	3002      	addeq	r0, #2
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	db05      	blt.n	800de3a <__hi0bits+0x3a>
 800de2e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800de32:	f100 0001 	add.w	r0, r0, #1
 800de36:	bf08      	it	eq
 800de38:	2020      	moveq	r0, #32
 800de3a:	4770      	bx	lr
 800de3c:	2000      	movs	r0, #0
 800de3e:	e7e5      	b.n	800de0c <__hi0bits+0xc>

0800de40 <__lo0bits>:
 800de40:	6803      	ldr	r3, [r0, #0]
 800de42:	4602      	mov	r2, r0
 800de44:	f013 0007 	ands.w	r0, r3, #7
 800de48:	d00b      	beq.n	800de62 <__lo0bits+0x22>
 800de4a:	07d9      	lsls	r1, r3, #31
 800de4c:	d421      	bmi.n	800de92 <__lo0bits+0x52>
 800de4e:	0798      	lsls	r0, r3, #30
 800de50:	bf49      	itett	mi
 800de52:	085b      	lsrmi	r3, r3, #1
 800de54:	089b      	lsrpl	r3, r3, #2
 800de56:	2001      	movmi	r0, #1
 800de58:	6013      	strmi	r3, [r2, #0]
 800de5a:	bf5c      	itt	pl
 800de5c:	2002      	movpl	r0, #2
 800de5e:	6013      	strpl	r3, [r2, #0]
 800de60:	4770      	bx	lr
 800de62:	b299      	uxth	r1, r3
 800de64:	b909      	cbnz	r1, 800de6a <__lo0bits+0x2a>
 800de66:	2010      	movs	r0, #16
 800de68:	0c1b      	lsrs	r3, r3, #16
 800de6a:	b2d9      	uxtb	r1, r3
 800de6c:	b909      	cbnz	r1, 800de72 <__lo0bits+0x32>
 800de6e:	3008      	adds	r0, #8
 800de70:	0a1b      	lsrs	r3, r3, #8
 800de72:	0719      	lsls	r1, r3, #28
 800de74:	bf04      	itt	eq
 800de76:	091b      	lsreq	r3, r3, #4
 800de78:	3004      	addeq	r0, #4
 800de7a:	0799      	lsls	r1, r3, #30
 800de7c:	bf04      	itt	eq
 800de7e:	089b      	lsreq	r3, r3, #2
 800de80:	3002      	addeq	r0, #2
 800de82:	07d9      	lsls	r1, r3, #31
 800de84:	d403      	bmi.n	800de8e <__lo0bits+0x4e>
 800de86:	085b      	lsrs	r3, r3, #1
 800de88:	f100 0001 	add.w	r0, r0, #1
 800de8c:	d003      	beq.n	800de96 <__lo0bits+0x56>
 800de8e:	6013      	str	r3, [r2, #0]
 800de90:	4770      	bx	lr
 800de92:	2000      	movs	r0, #0
 800de94:	4770      	bx	lr
 800de96:	2020      	movs	r0, #32
 800de98:	4770      	bx	lr
	...

0800de9c <__i2b>:
 800de9c:	b510      	push	{r4, lr}
 800de9e:	460c      	mov	r4, r1
 800dea0:	2101      	movs	r1, #1
 800dea2:	f7ff ff05 	bl	800dcb0 <_Balloc>
 800dea6:	4602      	mov	r2, r0
 800dea8:	b928      	cbnz	r0, 800deb6 <__i2b+0x1a>
 800deaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800deae:	4b04      	ldr	r3, [pc, #16]	; (800dec0 <__i2b+0x24>)
 800deb0:	4804      	ldr	r0, [pc, #16]	; (800dec4 <__i2b+0x28>)
 800deb2:	f000 fcdb 	bl	800e86c <__assert_func>
 800deb6:	2301      	movs	r3, #1
 800deb8:	6144      	str	r4, [r0, #20]
 800deba:	6103      	str	r3, [r0, #16]
 800debc:	bd10      	pop	{r4, pc}
 800debe:	bf00      	nop
 800dec0:	0800f67f 	.word	0x0800f67f
 800dec4:	0800f690 	.word	0x0800f690

0800dec8 <__multiply>:
 800dec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800decc:	4691      	mov	r9, r2
 800dece:	690a      	ldr	r2, [r1, #16]
 800ded0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ded4:	460c      	mov	r4, r1
 800ded6:	429a      	cmp	r2, r3
 800ded8:	bfbe      	ittt	lt
 800deda:	460b      	movlt	r3, r1
 800dedc:	464c      	movlt	r4, r9
 800dede:	4699      	movlt	r9, r3
 800dee0:	6927      	ldr	r7, [r4, #16]
 800dee2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dee6:	68a3      	ldr	r3, [r4, #8]
 800dee8:	6861      	ldr	r1, [r4, #4]
 800deea:	eb07 060a 	add.w	r6, r7, sl
 800deee:	42b3      	cmp	r3, r6
 800def0:	b085      	sub	sp, #20
 800def2:	bfb8      	it	lt
 800def4:	3101      	addlt	r1, #1
 800def6:	f7ff fedb 	bl	800dcb0 <_Balloc>
 800defa:	b930      	cbnz	r0, 800df0a <__multiply+0x42>
 800defc:	4602      	mov	r2, r0
 800defe:	f240 115d 	movw	r1, #349	; 0x15d
 800df02:	4b43      	ldr	r3, [pc, #268]	; (800e010 <__multiply+0x148>)
 800df04:	4843      	ldr	r0, [pc, #268]	; (800e014 <__multiply+0x14c>)
 800df06:	f000 fcb1 	bl	800e86c <__assert_func>
 800df0a:	f100 0514 	add.w	r5, r0, #20
 800df0e:	462b      	mov	r3, r5
 800df10:	2200      	movs	r2, #0
 800df12:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800df16:	4543      	cmp	r3, r8
 800df18:	d321      	bcc.n	800df5e <__multiply+0x96>
 800df1a:	f104 0314 	add.w	r3, r4, #20
 800df1e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800df22:	f109 0314 	add.w	r3, r9, #20
 800df26:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800df2a:	9202      	str	r2, [sp, #8]
 800df2c:	1b3a      	subs	r2, r7, r4
 800df2e:	3a15      	subs	r2, #21
 800df30:	f022 0203 	bic.w	r2, r2, #3
 800df34:	3204      	adds	r2, #4
 800df36:	f104 0115 	add.w	r1, r4, #21
 800df3a:	428f      	cmp	r7, r1
 800df3c:	bf38      	it	cc
 800df3e:	2204      	movcc	r2, #4
 800df40:	9201      	str	r2, [sp, #4]
 800df42:	9a02      	ldr	r2, [sp, #8]
 800df44:	9303      	str	r3, [sp, #12]
 800df46:	429a      	cmp	r2, r3
 800df48:	d80c      	bhi.n	800df64 <__multiply+0x9c>
 800df4a:	2e00      	cmp	r6, #0
 800df4c:	dd03      	ble.n	800df56 <__multiply+0x8e>
 800df4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800df52:	2b00      	cmp	r3, #0
 800df54:	d059      	beq.n	800e00a <__multiply+0x142>
 800df56:	6106      	str	r6, [r0, #16]
 800df58:	b005      	add	sp, #20
 800df5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5e:	f843 2b04 	str.w	r2, [r3], #4
 800df62:	e7d8      	b.n	800df16 <__multiply+0x4e>
 800df64:	f8b3 a000 	ldrh.w	sl, [r3]
 800df68:	f1ba 0f00 	cmp.w	sl, #0
 800df6c:	d023      	beq.n	800dfb6 <__multiply+0xee>
 800df6e:	46a9      	mov	r9, r5
 800df70:	f04f 0c00 	mov.w	ip, #0
 800df74:	f104 0e14 	add.w	lr, r4, #20
 800df78:	f85e 2b04 	ldr.w	r2, [lr], #4
 800df7c:	f8d9 1000 	ldr.w	r1, [r9]
 800df80:	fa1f fb82 	uxth.w	fp, r2
 800df84:	b289      	uxth	r1, r1
 800df86:	fb0a 110b 	mla	r1, sl, fp, r1
 800df8a:	4461      	add	r1, ip
 800df8c:	f8d9 c000 	ldr.w	ip, [r9]
 800df90:	0c12      	lsrs	r2, r2, #16
 800df92:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800df96:	fb0a c202 	mla	r2, sl, r2, ip
 800df9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df9e:	b289      	uxth	r1, r1
 800dfa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dfa4:	4577      	cmp	r7, lr
 800dfa6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dfaa:	f849 1b04 	str.w	r1, [r9], #4
 800dfae:	d8e3      	bhi.n	800df78 <__multiply+0xb0>
 800dfb0:	9a01      	ldr	r2, [sp, #4]
 800dfb2:	f845 c002 	str.w	ip, [r5, r2]
 800dfb6:	9a03      	ldr	r2, [sp, #12]
 800dfb8:	3304      	adds	r3, #4
 800dfba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dfbe:	f1b9 0f00 	cmp.w	r9, #0
 800dfc2:	d020      	beq.n	800e006 <__multiply+0x13e>
 800dfc4:	46ae      	mov	lr, r5
 800dfc6:	f04f 0a00 	mov.w	sl, #0
 800dfca:	6829      	ldr	r1, [r5, #0]
 800dfcc:	f104 0c14 	add.w	ip, r4, #20
 800dfd0:	f8bc b000 	ldrh.w	fp, [ip]
 800dfd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dfd8:	b289      	uxth	r1, r1
 800dfda:	fb09 220b 	mla	r2, r9, fp, r2
 800dfde:	4492      	add	sl, r2
 800dfe0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dfe4:	f84e 1b04 	str.w	r1, [lr], #4
 800dfe8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dfec:	f8be 1000 	ldrh.w	r1, [lr]
 800dff0:	0c12      	lsrs	r2, r2, #16
 800dff2:	fb09 1102 	mla	r1, r9, r2, r1
 800dff6:	4567      	cmp	r7, ip
 800dff8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dffc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e000:	d8e6      	bhi.n	800dfd0 <__multiply+0x108>
 800e002:	9a01      	ldr	r2, [sp, #4]
 800e004:	50a9      	str	r1, [r5, r2]
 800e006:	3504      	adds	r5, #4
 800e008:	e79b      	b.n	800df42 <__multiply+0x7a>
 800e00a:	3e01      	subs	r6, #1
 800e00c:	e79d      	b.n	800df4a <__multiply+0x82>
 800e00e:	bf00      	nop
 800e010:	0800f67f 	.word	0x0800f67f
 800e014:	0800f690 	.word	0x0800f690

0800e018 <__pow5mult>:
 800e018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e01c:	4615      	mov	r5, r2
 800e01e:	f012 0203 	ands.w	r2, r2, #3
 800e022:	4606      	mov	r6, r0
 800e024:	460f      	mov	r7, r1
 800e026:	d007      	beq.n	800e038 <__pow5mult+0x20>
 800e028:	4c25      	ldr	r4, [pc, #148]	; (800e0c0 <__pow5mult+0xa8>)
 800e02a:	3a01      	subs	r2, #1
 800e02c:	2300      	movs	r3, #0
 800e02e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e032:	f7ff fe9f 	bl	800dd74 <__multadd>
 800e036:	4607      	mov	r7, r0
 800e038:	10ad      	asrs	r5, r5, #2
 800e03a:	d03d      	beq.n	800e0b8 <__pow5mult+0xa0>
 800e03c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e03e:	b97c      	cbnz	r4, 800e060 <__pow5mult+0x48>
 800e040:	2010      	movs	r0, #16
 800e042:	f7ff fe1f 	bl	800dc84 <malloc>
 800e046:	4602      	mov	r2, r0
 800e048:	6270      	str	r0, [r6, #36]	; 0x24
 800e04a:	b928      	cbnz	r0, 800e058 <__pow5mult+0x40>
 800e04c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e050:	4b1c      	ldr	r3, [pc, #112]	; (800e0c4 <__pow5mult+0xac>)
 800e052:	481d      	ldr	r0, [pc, #116]	; (800e0c8 <__pow5mult+0xb0>)
 800e054:	f000 fc0a 	bl	800e86c <__assert_func>
 800e058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e05c:	6004      	str	r4, [r0, #0]
 800e05e:	60c4      	str	r4, [r0, #12]
 800e060:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e064:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e068:	b94c      	cbnz	r4, 800e07e <__pow5mult+0x66>
 800e06a:	f240 2171 	movw	r1, #625	; 0x271
 800e06e:	4630      	mov	r0, r6
 800e070:	f7ff ff14 	bl	800de9c <__i2b>
 800e074:	2300      	movs	r3, #0
 800e076:	4604      	mov	r4, r0
 800e078:	f8c8 0008 	str.w	r0, [r8, #8]
 800e07c:	6003      	str	r3, [r0, #0]
 800e07e:	f04f 0900 	mov.w	r9, #0
 800e082:	07eb      	lsls	r3, r5, #31
 800e084:	d50a      	bpl.n	800e09c <__pow5mult+0x84>
 800e086:	4639      	mov	r1, r7
 800e088:	4622      	mov	r2, r4
 800e08a:	4630      	mov	r0, r6
 800e08c:	f7ff ff1c 	bl	800dec8 <__multiply>
 800e090:	4680      	mov	r8, r0
 800e092:	4639      	mov	r1, r7
 800e094:	4630      	mov	r0, r6
 800e096:	f7ff fe4b 	bl	800dd30 <_Bfree>
 800e09a:	4647      	mov	r7, r8
 800e09c:	106d      	asrs	r5, r5, #1
 800e09e:	d00b      	beq.n	800e0b8 <__pow5mult+0xa0>
 800e0a0:	6820      	ldr	r0, [r4, #0]
 800e0a2:	b938      	cbnz	r0, 800e0b4 <__pow5mult+0x9c>
 800e0a4:	4622      	mov	r2, r4
 800e0a6:	4621      	mov	r1, r4
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	f7ff ff0d 	bl	800dec8 <__multiply>
 800e0ae:	6020      	str	r0, [r4, #0]
 800e0b0:	f8c0 9000 	str.w	r9, [r0]
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	e7e4      	b.n	800e082 <__pow5mult+0x6a>
 800e0b8:	4638      	mov	r0, r7
 800e0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0be:	bf00      	nop
 800e0c0:	0800f7e0 	.word	0x0800f7e0
 800e0c4:	0800f60d 	.word	0x0800f60d
 800e0c8:	0800f690 	.word	0x0800f690

0800e0cc <__lshift>:
 800e0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0d0:	460c      	mov	r4, r1
 800e0d2:	4607      	mov	r7, r0
 800e0d4:	4691      	mov	r9, r2
 800e0d6:	6923      	ldr	r3, [r4, #16]
 800e0d8:	6849      	ldr	r1, [r1, #4]
 800e0da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e0de:	68a3      	ldr	r3, [r4, #8]
 800e0e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e0e4:	f108 0601 	add.w	r6, r8, #1
 800e0e8:	42b3      	cmp	r3, r6
 800e0ea:	db0b      	blt.n	800e104 <__lshift+0x38>
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	f7ff fddf 	bl	800dcb0 <_Balloc>
 800e0f2:	4605      	mov	r5, r0
 800e0f4:	b948      	cbnz	r0, 800e10a <__lshift+0x3e>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e0fc:	4b29      	ldr	r3, [pc, #164]	; (800e1a4 <__lshift+0xd8>)
 800e0fe:	482a      	ldr	r0, [pc, #168]	; (800e1a8 <__lshift+0xdc>)
 800e100:	f000 fbb4 	bl	800e86c <__assert_func>
 800e104:	3101      	adds	r1, #1
 800e106:	005b      	lsls	r3, r3, #1
 800e108:	e7ee      	b.n	800e0e8 <__lshift+0x1c>
 800e10a:	2300      	movs	r3, #0
 800e10c:	f100 0114 	add.w	r1, r0, #20
 800e110:	f100 0210 	add.w	r2, r0, #16
 800e114:	4618      	mov	r0, r3
 800e116:	4553      	cmp	r3, sl
 800e118:	db37      	blt.n	800e18a <__lshift+0xbe>
 800e11a:	6920      	ldr	r0, [r4, #16]
 800e11c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e120:	f104 0314 	add.w	r3, r4, #20
 800e124:	f019 091f 	ands.w	r9, r9, #31
 800e128:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e12c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e130:	d02f      	beq.n	800e192 <__lshift+0xc6>
 800e132:	468a      	mov	sl, r1
 800e134:	f04f 0c00 	mov.w	ip, #0
 800e138:	f1c9 0e20 	rsb	lr, r9, #32
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	fa02 f209 	lsl.w	r2, r2, r9
 800e142:	ea42 020c 	orr.w	r2, r2, ip
 800e146:	f84a 2b04 	str.w	r2, [sl], #4
 800e14a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e14e:	4298      	cmp	r0, r3
 800e150:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e154:	d8f2      	bhi.n	800e13c <__lshift+0x70>
 800e156:	1b03      	subs	r3, r0, r4
 800e158:	3b15      	subs	r3, #21
 800e15a:	f023 0303 	bic.w	r3, r3, #3
 800e15e:	3304      	adds	r3, #4
 800e160:	f104 0215 	add.w	r2, r4, #21
 800e164:	4290      	cmp	r0, r2
 800e166:	bf38      	it	cc
 800e168:	2304      	movcc	r3, #4
 800e16a:	f841 c003 	str.w	ip, [r1, r3]
 800e16e:	f1bc 0f00 	cmp.w	ip, #0
 800e172:	d001      	beq.n	800e178 <__lshift+0xac>
 800e174:	f108 0602 	add.w	r6, r8, #2
 800e178:	3e01      	subs	r6, #1
 800e17a:	4638      	mov	r0, r7
 800e17c:	4621      	mov	r1, r4
 800e17e:	612e      	str	r6, [r5, #16]
 800e180:	f7ff fdd6 	bl	800dd30 <_Bfree>
 800e184:	4628      	mov	r0, r5
 800e186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e18a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e18e:	3301      	adds	r3, #1
 800e190:	e7c1      	b.n	800e116 <__lshift+0x4a>
 800e192:	3904      	subs	r1, #4
 800e194:	f853 2b04 	ldr.w	r2, [r3], #4
 800e198:	4298      	cmp	r0, r3
 800e19a:	f841 2f04 	str.w	r2, [r1, #4]!
 800e19e:	d8f9      	bhi.n	800e194 <__lshift+0xc8>
 800e1a0:	e7ea      	b.n	800e178 <__lshift+0xac>
 800e1a2:	bf00      	nop
 800e1a4:	0800f67f 	.word	0x0800f67f
 800e1a8:	0800f690 	.word	0x0800f690

0800e1ac <__mcmp>:
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	690a      	ldr	r2, [r1, #16]
 800e1b0:	6900      	ldr	r0, [r0, #16]
 800e1b2:	b530      	push	{r4, r5, lr}
 800e1b4:	1a80      	subs	r0, r0, r2
 800e1b6:	d10d      	bne.n	800e1d4 <__mcmp+0x28>
 800e1b8:	3314      	adds	r3, #20
 800e1ba:	3114      	adds	r1, #20
 800e1bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e1c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e1c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e1c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e1cc:	4295      	cmp	r5, r2
 800e1ce:	d002      	beq.n	800e1d6 <__mcmp+0x2a>
 800e1d0:	d304      	bcc.n	800e1dc <__mcmp+0x30>
 800e1d2:	2001      	movs	r0, #1
 800e1d4:	bd30      	pop	{r4, r5, pc}
 800e1d6:	42a3      	cmp	r3, r4
 800e1d8:	d3f4      	bcc.n	800e1c4 <__mcmp+0x18>
 800e1da:	e7fb      	b.n	800e1d4 <__mcmp+0x28>
 800e1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e0:	e7f8      	b.n	800e1d4 <__mcmp+0x28>
	...

0800e1e4 <__mdiff>:
 800e1e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e8:	460d      	mov	r5, r1
 800e1ea:	4607      	mov	r7, r0
 800e1ec:	4611      	mov	r1, r2
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	4614      	mov	r4, r2
 800e1f2:	f7ff ffdb 	bl	800e1ac <__mcmp>
 800e1f6:	1e06      	subs	r6, r0, #0
 800e1f8:	d111      	bne.n	800e21e <__mdiff+0x3a>
 800e1fa:	4631      	mov	r1, r6
 800e1fc:	4638      	mov	r0, r7
 800e1fe:	f7ff fd57 	bl	800dcb0 <_Balloc>
 800e202:	4602      	mov	r2, r0
 800e204:	b928      	cbnz	r0, 800e212 <__mdiff+0x2e>
 800e206:	f240 2132 	movw	r1, #562	; 0x232
 800e20a:	4b3a      	ldr	r3, [pc, #232]	; (800e2f4 <__mdiff+0x110>)
 800e20c:	483a      	ldr	r0, [pc, #232]	; (800e2f8 <__mdiff+0x114>)
 800e20e:	f000 fb2d 	bl	800e86c <__assert_func>
 800e212:	2301      	movs	r3, #1
 800e214:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e218:	4610      	mov	r0, r2
 800e21a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e21e:	bfa4      	itt	ge
 800e220:	4623      	movge	r3, r4
 800e222:	462c      	movge	r4, r5
 800e224:	4638      	mov	r0, r7
 800e226:	6861      	ldr	r1, [r4, #4]
 800e228:	bfa6      	itte	ge
 800e22a:	461d      	movge	r5, r3
 800e22c:	2600      	movge	r6, #0
 800e22e:	2601      	movlt	r6, #1
 800e230:	f7ff fd3e 	bl	800dcb0 <_Balloc>
 800e234:	4602      	mov	r2, r0
 800e236:	b918      	cbnz	r0, 800e240 <__mdiff+0x5c>
 800e238:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e23c:	4b2d      	ldr	r3, [pc, #180]	; (800e2f4 <__mdiff+0x110>)
 800e23e:	e7e5      	b.n	800e20c <__mdiff+0x28>
 800e240:	f102 0814 	add.w	r8, r2, #20
 800e244:	46c2      	mov	sl, r8
 800e246:	f04f 0c00 	mov.w	ip, #0
 800e24a:	6927      	ldr	r7, [r4, #16]
 800e24c:	60c6      	str	r6, [r0, #12]
 800e24e:	692e      	ldr	r6, [r5, #16]
 800e250:	f104 0014 	add.w	r0, r4, #20
 800e254:	f105 0914 	add.w	r9, r5, #20
 800e258:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800e25c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e260:	3410      	adds	r4, #16
 800e262:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800e266:	f859 3b04 	ldr.w	r3, [r9], #4
 800e26a:	fa1f f18b 	uxth.w	r1, fp
 800e26e:	448c      	add	ip, r1
 800e270:	b299      	uxth	r1, r3
 800e272:	0c1b      	lsrs	r3, r3, #16
 800e274:	ebac 0101 	sub.w	r1, ip, r1
 800e278:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e27c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e280:	b289      	uxth	r1, r1
 800e282:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800e286:	454e      	cmp	r6, r9
 800e288:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e28c:	f84a 3b04 	str.w	r3, [sl], #4
 800e290:	d8e7      	bhi.n	800e262 <__mdiff+0x7e>
 800e292:	1b73      	subs	r3, r6, r5
 800e294:	3b15      	subs	r3, #21
 800e296:	f023 0303 	bic.w	r3, r3, #3
 800e29a:	3515      	adds	r5, #21
 800e29c:	3304      	adds	r3, #4
 800e29e:	42ae      	cmp	r6, r5
 800e2a0:	bf38      	it	cc
 800e2a2:	2304      	movcc	r3, #4
 800e2a4:	4418      	add	r0, r3
 800e2a6:	4443      	add	r3, r8
 800e2a8:	461e      	mov	r6, r3
 800e2aa:	4605      	mov	r5, r0
 800e2ac:	4575      	cmp	r5, lr
 800e2ae:	d30e      	bcc.n	800e2ce <__mdiff+0xea>
 800e2b0:	f10e 0103 	add.w	r1, lr, #3
 800e2b4:	1a09      	subs	r1, r1, r0
 800e2b6:	f021 0103 	bic.w	r1, r1, #3
 800e2ba:	3803      	subs	r0, #3
 800e2bc:	4586      	cmp	lr, r0
 800e2be:	bf38      	it	cc
 800e2c0:	2100      	movcc	r1, #0
 800e2c2:	4419      	add	r1, r3
 800e2c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e2c8:	b18b      	cbz	r3, 800e2ee <__mdiff+0x10a>
 800e2ca:	6117      	str	r7, [r2, #16]
 800e2cc:	e7a4      	b.n	800e218 <__mdiff+0x34>
 800e2ce:	f855 8b04 	ldr.w	r8, [r5], #4
 800e2d2:	fa1f f188 	uxth.w	r1, r8
 800e2d6:	4461      	add	r1, ip
 800e2d8:	140c      	asrs	r4, r1, #16
 800e2da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e2de:	b289      	uxth	r1, r1
 800e2e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e2e4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800e2e8:	f846 1b04 	str.w	r1, [r6], #4
 800e2ec:	e7de      	b.n	800e2ac <__mdiff+0xc8>
 800e2ee:	3f01      	subs	r7, #1
 800e2f0:	e7e8      	b.n	800e2c4 <__mdiff+0xe0>
 800e2f2:	bf00      	nop
 800e2f4:	0800f67f 	.word	0x0800f67f
 800e2f8:	0800f690 	.word	0x0800f690

0800e2fc <__d2b>:
 800e2fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e300:	2101      	movs	r1, #1
 800e302:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800e306:	4690      	mov	r8, r2
 800e308:	461d      	mov	r5, r3
 800e30a:	f7ff fcd1 	bl	800dcb0 <_Balloc>
 800e30e:	4604      	mov	r4, r0
 800e310:	b930      	cbnz	r0, 800e320 <__d2b+0x24>
 800e312:	4602      	mov	r2, r0
 800e314:	f240 310a 	movw	r1, #778	; 0x30a
 800e318:	4b24      	ldr	r3, [pc, #144]	; (800e3ac <__d2b+0xb0>)
 800e31a:	4825      	ldr	r0, [pc, #148]	; (800e3b0 <__d2b+0xb4>)
 800e31c:	f000 faa6 	bl	800e86c <__assert_func>
 800e320:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800e324:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800e328:	bb2d      	cbnz	r5, 800e376 <__d2b+0x7a>
 800e32a:	9301      	str	r3, [sp, #4]
 800e32c:	f1b8 0300 	subs.w	r3, r8, #0
 800e330:	d026      	beq.n	800e380 <__d2b+0x84>
 800e332:	4668      	mov	r0, sp
 800e334:	9300      	str	r3, [sp, #0]
 800e336:	f7ff fd83 	bl	800de40 <__lo0bits>
 800e33a:	9900      	ldr	r1, [sp, #0]
 800e33c:	b1f0      	cbz	r0, 800e37c <__d2b+0x80>
 800e33e:	9a01      	ldr	r2, [sp, #4]
 800e340:	f1c0 0320 	rsb	r3, r0, #32
 800e344:	fa02 f303 	lsl.w	r3, r2, r3
 800e348:	430b      	orrs	r3, r1
 800e34a:	40c2      	lsrs	r2, r0
 800e34c:	6163      	str	r3, [r4, #20]
 800e34e:	9201      	str	r2, [sp, #4]
 800e350:	9b01      	ldr	r3, [sp, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	bf14      	ite	ne
 800e356:	2102      	movne	r1, #2
 800e358:	2101      	moveq	r1, #1
 800e35a:	61a3      	str	r3, [r4, #24]
 800e35c:	6121      	str	r1, [r4, #16]
 800e35e:	b1c5      	cbz	r5, 800e392 <__d2b+0x96>
 800e360:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e364:	4405      	add	r5, r0
 800e366:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e36a:	603d      	str	r5, [r7, #0]
 800e36c:	6030      	str	r0, [r6, #0]
 800e36e:	4620      	mov	r0, r4
 800e370:	b002      	add	sp, #8
 800e372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e37a:	e7d6      	b.n	800e32a <__d2b+0x2e>
 800e37c:	6161      	str	r1, [r4, #20]
 800e37e:	e7e7      	b.n	800e350 <__d2b+0x54>
 800e380:	a801      	add	r0, sp, #4
 800e382:	f7ff fd5d 	bl	800de40 <__lo0bits>
 800e386:	2101      	movs	r1, #1
 800e388:	9b01      	ldr	r3, [sp, #4]
 800e38a:	6121      	str	r1, [r4, #16]
 800e38c:	6163      	str	r3, [r4, #20]
 800e38e:	3020      	adds	r0, #32
 800e390:	e7e5      	b.n	800e35e <__d2b+0x62>
 800e392:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800e396:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e39a:	6038      	str	r0, [r7, #0]
 800e39c:	6918      	ldr	r0, [r3, #16]
 800e39e:	f7ff fd2f 	bl	800de00 <__hi0bits>
 800e3a2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800e3a6:	6031      	str	r1, [r6, #0]
 800e3a8:	e7e1      	b.n	800e36e <__d2b+0x72>
 800e3aa:	bf00      	nop
 800e3ac:	0800f67f 	.word	0x0800f67f
 800e3b0:	0800f690 	.word	0x0800f690

0800e3b4 <_calloc_r>:
 800e3b4:	b570      	push	{r4, r5, r6, lr}
 800e3b6:	fba1 5402 	umull	r5, r4, r1, r2
 800e3ba:	b934      	cbnz	r4, 800e3ca <_calloc_r+0x16>
 800e3bc:	4629      	mov	r1, r5
 800e3be:	f000 f875 	bl	800e4ac <_malloc_r>
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	b928      	cbnz	r0, 800e3d2 <_calloc_r+0x1e>
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	bd70      	pop	{r4, r5, r6, pc}
 800e3ca:	220c      	movs	r2, #12
 800e3cc:	2600      	movs	r6, #0
 800e3ce:	6002      	str	r2, [r0, #0]
 800e3d0:	e7f9      	b.n	800e3c6 <_calloc_r+0x12>
 800e3d2:	462a      	mov	r2, r5
 800e3d4:	4621      	mov	r1, r4
 800e3d6:	f7fe f939 	bl	800c64c <memset>
 800e3da:	e7f4      	b.n	800e3c6 <_calloc_r+0x12>

0800e3dc <_free_r>:
 800e3dc:	b538      	push	{r3, r4, r5, lr}
 800e3de:	4605      	mov	r5, r0
 800e3e0:	2900      	cmp	r1, #0
 800e3e2:	d040      	beq.n	800e466 <_free_r+0x8a>
 800e3e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3e8:	1f0c      	subs	r4, r1, #4
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	bfb8      	it	lt
 800e3ee:	18e4      	addlt	r4, r4, r3
 800e3f0:	f000 fa98 	bl	800e924 <__malloc_lock>
 800e3f4:	4a1c      	ldr	r2, [pc, #112]	; (800e468 <_free_r+0x8c>)
 800e3f6:	6813      	ldr	r3, [r2, #0]
 800e3f8:	b933      	cbnz	r3, 800e408 <_free_r+0x2c>
 800e3fa:	6063      	str	r3, [r4, #4]
 800e3fc:	6014      	str	r4, [r2, #0]
 800e3fe:	4628      	mov	r0, r5
 800e400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e404:	f000 ba94 	b.w	800e930 <__malloc_unlock>
 800e408:	42a3      	cmp	r3, r4
 800e40a:	d908      	bls.n	800e41e <_free_r+0x42>
 800e40c:	6820      	ldr	r0, [r4, #0]
 800e40e:	1821      	adds	r1, r4, r0
 800e410:	428b      	cmp	r3, r1
 800e412:	bf01      	itttt	eq
 800e414:	6819      	ldreq	r1, [r3, #0]
 800e416:	685b      	ldreq	r3, [r3, #4]
 800e418:	1809      	addeq	r1, r1, r0
 800e41a:	6021      	streq	r1, [r4, #0]
 800e41c:	e7ed      	b.n	800e3fa <_free_r+0x1e>
 800e41e:	461a      	mov	r2, r3
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	b10b      	cbz	r3, 800e428 <_free_r+0x4c>
 800e424:	42a3      	cmp	r3, r4
 800e426:	d9fa      	bls.n	800e41e <_free_r+0x42>
 800e428:	6811      	ldr	r1, [r2, #0]
 800e42a:	1850      	adds	r0, r2, r1
 800e42c:	42a0      	cmp	r0, r4
 800e42e:	d10b      	bne.n	800e448 <_free_r+0x6c>
 800e430:	6820      	ldr	r0, [r4, #0]
 800e432:	4401      	add	r1, r0
 800e434:	1850      	adds	r0, r2, r1
 800e436:	4283      	cmp	r3, r0
 800e438:	6011      	str	r1, [r2, #0]
 800e43a:	d1e0      	bne.n	800e3fe <_free_r+0x22>
 800e43c:	6818      	ldr	r0, [r3, #0]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	4401      	add	r1, r0
 800e442:	6011      	str	r1, [r2, #0]
 800e444:	6053      	str	r3, [r2, #4]
 800e446:	e7da      	b.n	800e3fe <_free_r+0x22>
 800e448:	d902      	bls.n	800e450 <_free_r+0x74>
 800e44a:	230c      	movs	r3, #12
 800e44c:	602b      	str	r3, [r5, #0]
 800e44e:	e7d6      	b.n	800e3fe <_free_r+0x22>
 800e450:	6820      	ldr	r0, [r4, #0]
 800e452:	1821      	adds	r1, r4, r0
 800e454:	428b      	cmp	r3, r1
 800e456:	bf01      	itttt	eq
 800e458:	6819      	ldreq	r1, [r3, #0]
 800e45a:	685b      	ldreq	r3, [r3, #4]
 800e45c:	1809      	addeq	r1, r1, r0
 800e45e:	6021      	streq	r1, [r4, #0]
 800e460:	6063      	str	r3, [r4, #4]
 800e462:	6054      	str	r4, [r2, #4]
 800e464:	e7cb      	b.n	800e3fe <_free_r+0x22>
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	200019f8 	.word	0x200019f8

0800e46c <sbrk_aligned>:
 800e46c:	b570      	push	{r4, r5, r6, lr}
 800e46e:	4e0e      	ldr	r6, [pc, #56]	; (800e4a8 <sbrk_aligned+0x3c>)
 800e470:	460c      	mov	r4, r1
 800e472:	6831      	ldr	r1, [r6, #0]
 800e474:	4605      	mov	r5, r0
 800e476:	b911      	cbnz	r1, 800e47e <sbrk_aligned+0x12>
 800e478:	f000 f9e8 	bl	800e84c <_sbrk_r>
 800e47c:	6030      	str	r0, [r6, #0]
 800e47e:	4621      	mov	r1, r4
 800e480:	4628      	mov	r0, r5
 800e482:	f000 f9e3 	bl	800e84c <_sbrk_r>
 800e486:	1c43      	adds	r3, r0, #1
 800e488:	d00a      	beq.n	800e4a0 <sbrk_aligned+0x34>
 800e48a:	1cc4      	adds	r4, r0, #3
 800e48c:	f024 0403 	bic.w	r4, r4, #3
 800e490:	42a0      	cmp	r0, r4
 800e492:	d007      	beq.n	800e4a4 <sbrk_aligned+0x38>
 800e494:	1a21      	subs	r1, r4, r0
 800e496:	4628      	mov	r0, r5
 800e498:	f000 f9d8 	bl	800e84c <_sbrk_r>
 800e49c:	3001      	adds	r0, #1
 800e49e:	d101      	bne.n	800e4a4 <sbrk_aligned+0x38>
 800e4a0:	f04f 34ff 	mov.w	r4, #4294967295
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	bd70      	pop	{r4, r5, r6, pc}
 800e4a8:	200019fc 	.word	0x200019fc

0800e4ac <_malloc_r>:
 800e4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b0:	1ccd      	adds	r5, r1, #3
 800e4b2:	f025 0503 	bic.w	r5, r5, #3
 800e4b6:	3508      	adds	r5, #8
 800e4b8:	2d0c      	cmp	r5, #12
 800e4ba:	bf38      	it	cc
 800e4bc:	250c      	movcc	r5, #12
 800e4be:	2d00      	cmp	r5, #0
 800e4c0:	4607      	mov	r7, r0
 800e4c2:	db01      	blt.n	800e4c8 <_malloc_r+0x1c>
 800e4c4:	42a9      	cmp	r1, r5
 800e4c6:	d905      	bls.n	800e4d4 <_malloc_r+0x28>
 800e4c8:	230c      	movs	r3, #12
 800e4ca:	2600      	movs	r6, #0
 800e4cc:	603b      	str	r3, [r7, #0]
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4d4:	4e2e      	ldr	r6, [pc, #184]	; (800e590 <_malloc_r+0xe4>)
 800e4d6:	f000 fa25 	bl	800e924 <__malloc_lock>
 800e4da:	6833      	ldr	r3, [r6, #0]
 800e4dc:	461c      	mov	r4, r3
 800e4de:	bb34      	cbnz	r4, 800e52e <_malloc_r+0x82>
 800e4e0:	4629      	mov	r1, r5
 800e4e2:	4638      	mov	r0, r7
 800e4e4:	f7ff ffc2 	bl	800e46c <sbrk_aligned>
 800e4e8:	1c43      	adds	r3, r0, #1
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	d14d      	bne.n	800e58a <_malloc_r+0xde>
 800e4ee:	6834      	ldr	r4, [r6, #0]
 800e4f0:	4626      	mov	r6, r4
 800e4f2:	2e00      	cmp	r6, #0
 800e4f4:	d140      	bne.n	800e578 <_malloc_r+0xcc>
 800e4f6:	6823      	ldr	r3, [r4, #0]
 800e4f8:	4631      	mov	r1, r6
 800e4fa:	4638      	mov	r0, r7
 800e4fc:	eb04 0803 	add.w	r8, r4, r3
 800e500:	f000 f9a4 	bl	800e84c <_sbrk_r>
 800e504:	4580      	cmp	r8, r0
 800e506:	d13a      	bne.n	800e57e <_malloc_r+0xd2>
 800e508:	6821      	ldr	r1, [r4, #0]
 800e50a:	3503      	adds	r5, #3
 800e50c:	1a6d      	subs	r5, r5, r1
 800e50e:	f025 0503 	bic.w	r5, r5, #3
 800e512:	3508      	adds	r5, #8
 800e514:	2d0c      	cmp	r5, #12
 800e516:	bf38      	it	cc
 800e518:	250c      	movcc	r5, #12
 800e51a:	4638      	mov	r0, r7
 800e51c:	4629      	mov	r1, r5
 800e51e:	f7ff ffa5 	bl	800e46c <sbrk_aligned>
 800e522:	3001      	adds	r0, #1
 800e524:	d02b      	beq.n	800e57e <_malloc_r+0xd2>
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	442b      	add	r3, r5
 800e52a:	6023      	str	r3, [r4, #0]
 800e52c:	e00e      	b.n	800e54c <_malloc_r+0xa0>
 800e52e:	6822      	ldr	r2, [r4, #0]
 800e530:	1b52      	subs	r2, r2, r5
 800e532:	d41e      	bmi.n	800e572 <_malloc_r+0xc6>
 800e534:	2a0b      	cmp	r2, #11
 800e536:	d916      	bls.n	800e566 <_malloc_r+0xba>
 800e538:	1961      	adds	r1, r4, r5
 800e53a:	42a3      	cmp	r3, r4
 800e53c:	6025      	str	r5, [r4, #0]
 800e53e:	bf18      	it	ne
 800e540:	6059      	strne	r1, [r3, #4]
 800e542:	6863      	ldr	r3, [r4, #4]
 800e544:	bf08      	it	eq
 800e546:	6031      	streq	r1, [r6, #0]
 800e548:	5162      	str	r2, [r4, r5]
 800e54a:	604b      	str	r3, [r1, #4]
 800e54c:	4638      	mov	r0, r7
 800e54e:	f104 060b 	add.w	r6, r4, #11
 800e552:	f000 f9ed 	bl	800e930 <__malloc_unlock>
 800e556:	f026 0607 	bic.w	r6, r6, #7
 800e55a:	1d23      	adds	r3, r4, #4
 800e55c:	1af2      	subs	r2, r6, r3
 800e55e:	d0b6      	beq.n	800e4ce <_malloc_r+0x22>
 800e560:	1b9b      	subs	r3, r3, r6
 800e562:	50a3      	str	r3, [r4, r2]
 800e564:	e7b3      	b.n	800e4ce <_malloc_r+0x22>
 800e566:	6862      	ldr	r2, [r4, #4]
 800e568:	42a3      	cmp	r3, r4
 800e56a:	bf0c      	ite	eq
 800e56c:	6032      	streq	r2, [r6, #0]
 800e56e:	605a      	strne	r2, [r3, #4]
 800e570:	e7ec      	b.n	800e54c <_malloc_r+0xa0>
 800e572:	4623      	mov	r3, r4
 800e574:	6864      	ldr	r4, [r4, #4]
 800e576:	e7b2      	b.n	800e4de <_malloc_r+0x32>
 800e578:	4634      	mov	r4, r6
 800e57a:	6876      	ldr	r6, [r6, #4]
 800e57c:	e7b9      	b.n	800e4f2 <_malloc_r+0x46>
 800e57e:	230c      	movs	r3, #12
 800e580:	4638      	mov	r0, r7
 800e582:	603b      	str	r3, [r7, #0]
 800e584:	f000 f9d4 	bl	800e930 <__malloc_unlock>
 800e588:	e7a1      	b.n	800e4ce <_malloc_r+0x22>
 800e58a:	6025      	str	r5, [r4, #0]
 800e58c:	e7de      	b.n	800e54c <_malloc_r+0xa0>
 800e58e:	bf00      	nop
 800e590:	200019f8 	.word	0x200019f8

0800e594 <__ssputs_r>:
 800e594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e598:	688e      	ldr	r6, [r1, #8]
 800e59a:	4682      	mov	sl, r0
 800e59c:	429e      	cmp	r6, r3
 800e59e:	460c      	mov	r4, r1
 800e5a0:	4690      	mov	r8, r2
 800e5a2:	461f      	mov	r7, r3
 800e5a4:	d838      	bhi.n	800e618 <__ssputs_r+0x84>
 800e5a6:	898a      	ldrh	r2, [r1, #12]
 800e5a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e5ac:	d032      	beq.n	800e614 <__ssputs_r+0x80>
 800e5ae:	6825      	ldr	r5, [r4, #0]
 800e5b0:	6909      	ldr	r1, [r1, #16]
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	eba5 0901 	sub.w	r9, r5, r1
 800e5b8:	6965      	ldr	r5, [r4, #20]
 800e5ba:	444b      	add	r3, r9
 800e5bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e5c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e5c4:	106d      	asrs	r5, r5, #1
 800e5c6:	429d      	cmp	r5, r3
 800e5c8:	bf38      	it	cc
 800e5ca:	461d      	movcc	r5, r3
 800e5cc:	0553      	lsls	r3, r2, #21
 800e5ce:	d531      	bpl.n	800e634 <__ssputs_r+0xa0>
 800e5d0:	4629      	mov	r1, r5
 800e5d2:	f7ff ff6b 	bl	800e4ac <_malloc_r>
 800e5d6:	4606      	mov	r6, r0
 800e5d8:	b950      	cbnz	r0, 800e5f0 <__ssputs_r+0x5c>
 800e5da:	230c      	movs	r3, #12
 800e5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e0:	f8ca 3000 	str.w	r3, [sl]
 800e5e4:	89a3      	ldrh	r3, [r4, #12]
 800e5e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5ea:	81a3      	strh	r3, [r4, #12]
 800e5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5f0:	464a      	mov	r2, r9
 800e5f2:	6921      	ldr	r1, [r4, #16]
 800e5f4:	f7fe f81c 	bl	800c630 <memcpy>
 800e5f8:	89a3      	ldrh	r3, [r4, #12]
 800e5fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e602:	81a3      	strh	r3, [r4, #12]
 800e604:	6126      	str	r6, [r4, #16]
 800e606:	444e      	add	r6, r9
 800e608:	6026      	str	r6, [r4, #0]
 800e60a:	463e      	mov	r6, r7
 800e60c:	6165      	str	r5, [r4, #20]
 800e60e:	eba5 0509 	sub.w	r5, r5, r9
 800e612:	60a5      	str	r5, [r4, #8]
 800e614:	42be      	cmp	r6, r7
 800e616:	d900      	bls.n	800e61a <__ssputs_r+0x86>
 800e618:	463e      	mov	r6, r7
 800e61a:	4632      	mov	r2, r6
 800e61c:	4641      	mov	r1, r8
 800e61e:	6820      	ldr	r0, [r4, #0]
 800e620:	f000 f966 	bl	800e8f0 <memmove>
 800e624:	68a3      	ldr	r3, [r4, #8]
 800e626:	2000      	movs	r0, #0
 800e628:	1b9b      	subs	r3, r3, r6
 800e62a:	60a3      	str	r3, [r4, #8]
 800e62c:	6823      	ldr	r3, [r4, #0]
 800e62e:	4433      	add	r3, r6
 800e630:	6023      	str	r3, [r4, #0]
 800e632:	e7db      	b.n	800e5ec <__ssputs_r+0x58>
 800e634:	462a      	mov	r2, r5
 800e636:	f000 f981 	bl	800e93c <_realloc_r>
 800e63a:	4606      	mov	r6, r0
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d1e1      	bne.n	800e604 <__ssputs_r+0x70>
 800e640:	4650      	mov	r0, sl
 800e642:	6921      	ldr	r1, [r4, #16]
 800e644:	f7ff feca 	bl	800e3dc <_free_r>
 800e648:	e7c7      	b.n	800e5da <__ssputs_r+0x46>
	...

0800e64c <_svfiprintf_r>:
 800e64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e650:	4698      	mov	r8, r3
 800e652:	898b      	ldrh	r3, [r1, #12]
 800e654:	4607      	mov	r7, r0
 800e656:	061b      	lsls	r3, r3, #24
 800e658:	460d      	mov	r5, r1
 800e65a:	4614      	mov	r4, r2
 800e65c:	b09d      	sub	sp, #116	; 0x74
 800e65e:	d50e      	bpl.n	800e67e <_svfiprintf_r+0x32>
 800e660:	690b      	ldr	r3, [r1, #16]
 800e662:	b963      	cbnz	r3, 800e67e <_svfiprintf_r+0x32>
 800e664:	2140      	movs	r1, #64	; 0x40
 800e666:	f7ff ff21 	bl	800e4ac <_malloc_r>
 800e66a:	6028      	str	r0, [r5, #0]
 800e66c:	6128      	str	r0, [r5, #16]
 800e66e:	b920      	cbnz	r0, 800e67a <_svfiprintf_r+0x2e>
 800e670:	230c      	movs	r3, #12
 800e672:	603b      	str	r3, [r7, #0]
 800e674:	f04f 30ff 	mov.w	r0, #4294967295
 800e678:	e0d1      	b.n	800e81e <_svfiprintf_r+0x1d2>
 800e67a:	2340      	movs	r3, #64	; 0x40
 800e67c:	616b      	str	r3, [r5, #20]
 800e67e:	2300      	movs	r3, #0
 800e680:	9309      	str	r3, [sp, #36]	; 0x24
 800e682:	2320      	movs	r3, #32
 800e684:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e688:	2330      	movs	r3, #48	; 0x30
 800e68a:	f04f 0901 	mov.w	r9, #1
 800e68e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e692:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e838 <_svfiprintf_r+0x1ec>
 800e696:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e69a:	4623      	mov	r3, r4
 800e69c:	469a      	mov	sl, r3
 800e69e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6a2:	b10a      	cbz	r2, 800e6a8 <_svfiprintf_r+0x5c>
 800e6a4:	2a25      	cmp	r2, #37	; 0x25
 800e6a6:	d1f9      	bne.n	800e69c <_svfiprintf_r+0x50>
 800e6a8:	ebba 0b04 	subs.w	fp, sl, r4
 800e6ac:	d00b      	beq.n	800e6c6 <_svfiprintf_r+0x7a>
 800e6ae:	465b      	mov	r3, fp
 800e6b0:	4622      	mov	r2, r4
 800e6b2:	4629      	mov	r1, r5
 800e6b4:	4638      	mov	r0, r7
 800e6b6:	f7ff ff6d 	bl	800e594 <__ssputs_r>
 800e6ba:	3001      	adds	r0, #1
 800e6bc:	f000 80aa 	beq.w	800e814 <_svfiprintf_r+0x1c8>
 800e6c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6c2:	445a      	add	r2, fp
 800e6c4:	9209      	str	r2, [sp, #36]	; 0x24
 800e6c6:	f89a 3000 	ldrb.w	r3, [sl]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	f000 80a2 	beq.w	800e814 <_svfiprintf_r+0x1c8>
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e6d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6da:	f10a 0a01 	add.w	sl, sl, #1
 800e6de:	9304      	str	r3, [sp, #16]
 800e6e0:	9307      	str	r3, [sp, #28]
 800e6e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6e6:	931a      	str	r3, [sp, #104]	; 0x68
 800e6e8:	4654      	mov	r4, sl
 800e6ea:	2205      	movs	r2, #5
 800e6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6f0:	4851      	ldr	r0, [pc, #324]	; (800e838 <_svfiprintf_r+0x1ec>)
 800e6f2:	f7ff facf 	bl	800dc94 <memchr>
 800e6f6:	9a04      	ldr	r2, [sp, #16]
 800e6f8:	b9d8      	cbnz	r0, 800e732 <_svfiprintf_r+0xe6>
 800e6fa:	06d0      	lsls	r0, r2, #27
 800e6fc:	bf44      	itt	mi
 800e6fe:	2320      	movmi	r3, #32
 800e700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e704:	0711      	lsls	r1, r2, #28
 800e706:	bf44      	itt	mi
 800e708:	232b      	movmi	r3, #43	; 0x2b
 800e70a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e70e:	f89a 3000 	ldrb.w	r3, [sl]
 800e712:	2b2a      	cmp	r3, #42	; 0x2a
 800e714:	d015      	beq.n	800e742 <_svfiprintf_r+0xf6>
 800e716:	4654      	mov	r4, sl
 800e718:	2000      	movs	r0, #0
 800e71a:	f04f 0c0a 	mov.w	ip, #10
 800e71e:	9a07      	ldr	r2, [sp, #28]
 800e720:	4621      	mov	r1, r4
 800e722:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e726:	3b30      	subs	r3, #48	; 0x30
 800e728:	2b09      	cmp	r3, #9
 800e72a:	d94e      	bls.n	800e7ca <_svfiprintf_r+0x17e>
 800e72c:	b1b0      	cbz	r0, 800e75c <_svfiprintf_r+0x110>
 800e72e:	9207      	str	r2, [sp, #28]
 800e730:	e014      	b.n	800e75c <_svfiprintf_r+0x110>
 800e732:	eba0 0308 	sub.w	r3, r0, r8
 800e736:	fa09 f303 	lsl.w	r3, r9, r3
 800e73a:	4313      	orrs	r3, r2
 800e73c:	46a2      	mov	sl, r4
 800e73e:	9304      	str	r3, [sp, #16]
 800e740:	e7d2      	b.n	800e6e8 <_svfiprintf_r+0x9c>
 800e742:	9b03      	ldr	r3, [sp, #12]
 800e744:	1d19      	adds	r1, r3, #4
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	9103      	str	r1, [sp, #12]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	bfbb      	ittet	lt
 800e74e:	425b      	neglt	r3, r3
 800e750:	f042 0202 	orrlt.w	r2, r2, #2
 800e754:	9307      	strge	r3, [sp, #28]
 800e756:	9307      	strlt	r3, [sp, #28]
 800e758:	bfb8      	it	lt
 800e75a:	9204      	strlt	r2, [sp, #16]
 800e75c:	7823      	ldrb	r3, [r4, #0]
 800e75e:	2b2e      	cmp	r3, #46	; 0x2e
 800e760:	d10c      	bne.n	800e77c <_svfiprintf_r+0x130>
 800e762:	7863      	ldrb	r3, [r4, #1]
 800e764:	2b2a      	cmp	r3, #42	; 0x2a
 800e766:	d135      	bne.n	800e7d4 <_svfiprintf_r+0x188>
 800e768:	9b03      	ldr	r3, [sp, #12]
 800e76a:	3402      	adds	r4, #2
 800e76c:	1d1a      	adds	r2, r3, #4
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	9203      	str	r2, [sp, #12]
 800e772:	2b00      	cmp	r3, #0
 800e774:	bfb8      	it	lt
 800e776:	f04f 33ff 	movlt.w	r3, #4294967295
 800e77a:	9305      	str	r3, [sp, #20]
 800e77c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800e83c <_svfiprintf_r+0x1f0>
 800e780:	2203      	movs	r2, #3
 800e782:	4650      	mov	r0, sl
 800e784:	7821      	ldrb	r1, [r4, #0]
 800e786:	f7ff fa85 	bl	800dc94 <memchr>
 800e78a:	b140      	cbz	r0, 800e79e <_svfiprintf_r+0x152>
 800e78c:	2340      	movs	r3, #64	; 0x40
 800e78e:	eba0 000a 	sub.w	r0, r0, sl
 800e792:	fa03 f000 	lsl.w	r0, r3, r0
 800e796:	9b04      	ldr	r3, [sp, #16]
 800e798:	3401      	adds	r4, #1
 800e79a:	4303      	orrs	r3, r0
 800e79c:	9304      	str	r3, [sp, #16]
 800e79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7a2:	2206      	movs	r2, #6
 800e7a4:	4826      	ldr	r0, [pc, #152]	; (800e840 <_svfiprintf_r+0x1f4>)
 800e7a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7aa:	f7ff fa73 	bl	800dc94 <memchr>
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	d038      	beq.n	800e824 <_svfiprintf_r+0x1d8>
 800e7b2:	4b24      	ldr	r3, [pc, #144]	; (800e844 <_svfiprintf_r+0x1f8>)
 800e7b4:	bb1b      	cbnz	r3, 800e7fe <_svfiprintf_r+0x1b2>
 800e7b6:	9b03      	ldr	r3, [sp, #12]
 800e7b8:	3307      	adds	r3, #7
 800e7ba:	f023 0307 	bic.w	r3, r3, #7
 800e7be:	3308      	adds	r3, #8
 800e7c0:	9303      	str	r3, [sp, #12]
 800e7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c4:	4433      	add	r3, r6
 800e7c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e7c8:	e767      	b.n	800e69a <_svfiprintf_r+0x4e>
 800e7ca:	460c      	mov	r4, r1
 800e7cc:	2001      	movs	r0, #1
 800e7ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7d2:	e7a5      	b.n	800e720 <_svfiprintf_r+0xd4>
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	f04f 0c0a 	mov.w	ip, #10
 800e7da:	4619      	mov	r1, r3
 800e7dc:	3401      	adds	r4, #1
 800e7de:	9305      	str	r3, [sp, #20]
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7e6:	3a30      	subs	r2, #48	; 0x30
 800e7e8:	2a09      	cmp	r2, #9
 800e7ea:	d903      	bls.n	800e7f4 <_svfiprintf_r+0x1a8>
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d0c5      	beq.n	800e77c <_svfiprintf_r+0x130>
 800e7f0:	9105      	str	r1, [sp, #20]
 800e7f2:	e7c3      	b.n	800e77c <_svfiprintf_r+0x130>
 800e7f4:	4604      	mov	r4, r0
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7fc:	e7f0      	b.n	800e7e0 <_svfiprintf_r+0x194>
 800e7fe:	ab03      	add	r3, sp, #12
 800e800:	9300      	str	r3, [sp, #0]
 800e802:	462a      	mov	r2, r5
 800e804:	4638      	mov	r0, r7
 800e806:	4b10      	ldr	r3, [pc, #64]	; (800e848 <_svfiprintf_r+0x1fc>)
 800e808:	a904      	add	r1, sp, #16
 800e80a:	f7fd ffc5 	bl	800c798 <_printf_float>
 800e80e:	1c42      	adds	r2, r0, #1
 800e810:	4606      	mov	r6, r0
 800e812:	d1d6      	bne.n	800e7c2 <_svfiprintf_r+0x176>
 800e814:	89ab      	ldrh	r3, [r5, #12]
 800e816:	065b      	lsls	r3, r3, #25
 800e818:	f53f af2c 	bmi.w	800e674 <_svfiprintf_r+0x28>
 800e81c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e81e:	b01d      	add	sp, #116	; 0x74
 800e820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e824:	ab03      	add	r3, sp, #12
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	462a      	mov	r2, r5
 800e82a:	4638      	mov	r0, r7
 800e82c:	4b06      	ldr	r3, [pc, #24]	; (800e848 <_svfiprintf_r+0x1fc>)
 800e82e:	a904      	add	r1, sp, #16
 800e830:	f7fe fa4e 	bl	800ccd0 <_printf_i>
 800e834:	e7eb      	b.n	800e80e <_svfiprintf_r+0x1c2>
 800e836:	bf00      	nop
 800e838:	0800f7ec 	.word	0x0800f7ec
 800e83c:	0800f7f2 	.word	0x0800f7f2
 800e840:	0800f7f6 	.word	0x0800f7f6
 800e844:	0800c799 	.word	0x0800c799
 800e848:	0800e595 	.word	0x0800e595

0800e84c <_sbrk_r>:
 800e84c:	b538      	push	{r3, r4, r5, lr}
 800e84e:	2300      	movs	r3, #0
 800e850:	4d05      	ldr	r5, [pc, #20]	; (800e868 <_sbrk_r+0x1c>)
 800e852:	4604      	mov	r4, r0
 800e854:	4608      	mov	r0, r1
 800e856:	602b      	str	r3, [r5, #0]
 800e858:	f7f8 fcce 	bl	80071f8 <_sbrk>
 800e85c:	1c43      	adds	r3, r0, #1
 800e85e:	d102      	bne.n	800e866 <_sbrk_r+0x1a>
 800e860:	682b      	ldr	r3, [r5, #0]
 800e862:	b103      	cbz	r3, 800e866 <_sbrk_r+0x1a>
 800e864:	6023      	str	r3, [r4, #0]
 800e866:	bd38      	pop	{r3, r4, r5, pc}
 800e868:	20001a00 	.word	0x20001a00

0800e86c <__assert_func>:
 800e86c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e86e:	4614      	mov	r4, r2
 800e870:	461a      	mov	r2, r3
 800e872:	4b09      	ldr	r3, [pc, #36]	; (800e898 <__assert_func+0x2c>)
 800e874:	4605      	mov	r5, r0
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	68d8      	ldr	r0, [r3, #12]
 800e87a:	b14c      	cbz	r4, 800e890 <__assert_func+0x24>
 800e87c:	4b07      	ldr	r3, [pc, #28]	; (800e89c <__assert_func+0x30>)
 800e87e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e882:	9100      	str	r1, [sp, #0]
 800e884:	462b      	mov	r3, r5
 800e886:	4906      	ldr	r1, [pc, #24]	; (800e8a0 <__assert_func+0x34>)
 800e888:	f000 f80e 	bl	800e8a8 <fiprintf>
 800e88c:	f000 faaa 	bl	800ede4 <abort>
 800e890:	4b04      	ldr	r3, [pc, #16]	; (800e8a4 <__assert_func+0x38>)
 800e892:	461c      	mov	r4, r3
 800e894:	e7f3      	b.n	800e87e <__assert_func+0x12>
 800e896:	bf00      	nop
 800e898:	20000190 	.word	0x20000190
 800e89c:	0800f7fd 	.word	0x0800f7fd
 800e8a0:	0800f80a 	.word	0x0800f80a
 800e8a4:	0800f838 	.word	0x0800f838

0800e8a8 <fiprintf>:
 800e8a8:	b40e      	push	{r1, r2, r3}
 800e8aa:	b503      	push	{r0, r1, lr}
 800e8ac:	4601      	mov	r1, r0
 800e8ae:	ab03      	add	r3, sp, #12
 800e8b0:	4805      	ldr	r0, [pc, #20]	; (800e8c8 <fiprintf+0x20>)
 800e8b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8b6:	6800      	ldr	r0, [r0, #0]
 800e8b8:	9301      	str	r3, [sp, #4]
 800e8ba:	f000 f895 	bl	800e9e8 <_vfiprintf_r>
 800e8be:	b002      	add	sp, #8
 800e8c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8c4:	b003      	add	sp, #12
 800e8c6:	4770      	bx	lr
 800e8c8:	20000190 	.word	0x20000190

0800e8cc <__ascii_mbtowc>:
 800e8cc:	b082      	sub	sp, #8
 800e8ce:	b901      	cbnz	r1, 800e8d2 <__ascii_mbtowc+0x6>
 800e8d0:	a901      	add	r1, sp, #4
 800e8d2:	b142      	cbz	r2, 800e8e6 <__ascii_mbtowc+0x1a>
 800e8d4:	b14b      	cbz	r3, 800e8ea <__ascii_mbtowc+0x1e>
 800e8d6:	7813      	ldrb	r3, [r2, #0]
 800e8d8:	600b      	str	r3, [r1, #0]
 800e8da:	7812      	ldrb	r2, [r2, #0]
 800e8dc:	1e10      	subs	r0, r2, #0
 800e8de:	bf18      	it	ne
 800e8e0:	2001      	movne	r0, #1
 800e8e2:	b002      	add	sp, #8
 800e8e4:	4770      	bx	lr
 800e8e6:	4610      	mov	r0, r2
 800e8e8:	e7fb      	b.n	800e8e2 <__ascii_mbtowc+0x16>
 800e8ea:	f06f 0001 	mvn.w	r0, #1
 800e8ee:	e7f8      	b.n	800e8e2 <__ascii_mbtowc+0x16>

0800e8f0 <memmove>:
 800e8f0:	4288      	cmp	r0, r1
 800e8f2:	b510      	push	{r4, lr}
 800e8f4:	eb01 0402 	add.w	r4, r1, r2
 800e8f8:	d902      	bls.n	800e900 <memmove+0x10>
 800e8fa:	4284      	cmp	r4, r0
 800e8fc:	4623      	mov	r3, r4
 800e8fe:	d807      	bhi.n	800e910 <memmove+0x20>
 800e900:	1e43      	subs	r3, r0, #1
 800e902:	42a1      	cmp	r1, r4
 800e904:	d008      	beq.n	800e918 <memmove+0x28>
 800e906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e90a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e90e:	e7f8      	b.n	800e902 <memmove+0x12>
 800e910:	4601      	mov	r1, r0
 800e912:	4402      	add	r2, r0
 800e914:	428a      	cmp	r2, r1
 800e916:	d100      	bne.n	800e91a <memmove+0x2a>
 800e918:	bd10      	pop	{r4, pc}
 800e91a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e91e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e922:	e7f7      	b.n	800e914 <memmove+0x24>

0800e924 <__malloc_lock>:
 800e924:	4801      	ldr	r0, [pc, #4]	; (800e92c <__malloc_lock+0x8>)
 800e926:	f000 bc19 	b.w	800f15c <__retarget_lock_acquire_recursive>
 800e92a:	bf00      	nop
 800e92c:	20001a04 	.word	0x20001a04

0800e930 <__malloc_unlock>:
 800e930:	4801      	ldr	r0, [pc, #4]	; (800e938 <__malloc_unlock+0x8>)
 800e932:	f000 bc14 	b.w	800f15e <__retarget_lock_release_recursive>
 800e936:	bf00      	nop
 800e938:	20001a04 	.word	0x20001a04

0800e93c <_realloc_r>:
 800e93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e940:	4680      	mov	r8, r0
 800e942:	4614      	mov	r4, r2
 800e944:	460e      	mov	r6, r1
 800e946:	b921      	cbnz	r1, 800e952 <_realloc_r+0x16>
 800e948:	4611      	mov	r1, r2
 800e94a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e94e:	f7ff bdad 	b.w	800e4ac <_malloc_r>
 800e952:	b92a      	cbnz	r2, 800e960 <_realloc_r+0x24>
 800e954:	f7ff fd42 	bl	800e3dc <_free_r>
 800e958:	4625      	mov	r5, r4
 800e95a:	4628      	mov	r0, r5
 800e95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e960:	f000 fc64 	bl	800f22c <_malloc_usable_size_r>
 800e964:	4284      	cmp	r4, r0
 800e966:	4607      	mov	r7, r0
 800e968:	d802      	bhi.n	800e970 <_realloc_r+0x34>
 800e96a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e96e:	d812      	bhi.n	800e996 <_realloc_r+0x5a>
 800e970:	4621      	mov	r1, r4
 800e972:	4640      	mov	r0, r8
 800e974:	f7ff fd9a 	bl	800e4ac <_malloc_r>
 800e978:	4605      	mov	r5, r0
 800e97a:	2800      	cmp	r0, #0
 800e97c:	d0ed      	beq.n	800e95a <_realloc_r+0x1e>
 800e97e:	42bc      	cmp	r4, r7
 800e980:	4622      	mov	r2, r4
 800e982:	4631      	mov	r1, r6
 800e984:	bf28      	it	cs
 800e986:	463a      	movcs	r2, r7
 800e988:	f7fd fe52 	bl	800c630 <memcpy>
 800e98c:	4631      	mov	r1, r6
 800e98e:	4640      	mov	r0, r8
 800e990:	f7ff fd24 	bl	800e3dc <_free_r>
 800e994:	e7e1      	b.n	800e95a <_realloc_r+0x1e>
 800e996:	4635      	mov	r5, r6
 800e998:	e7df      	b.n	800e95a <_realloc_r+0x1e>

0800e99a <__sfputc_r>:
 800e99a:	6893      	ldr	r3, [r2, #8]
 800e99c:	b410      	push	{r4}
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	6093      	str	r3, [r2, #8]
 800e9a4:	da07      	bge.n	800e9b6 <__sfputc_r+0x1c>
 800e9a6:	6994      	ldr	r4, [r2, #24]
 800e9a8:	42a3      	cmp	r3, r4
 800e9aa:	db01      	blt.n	800e9b0 <__sfputc_r+0x16>
 800e9ac:	290a      	cmp	r1, #10
 800e9ae:	d102      	bne.n	800e9b6 <__sfputc_r+0x1c>
 800e9b0:	bc10      	pop	{r4}
 800e9b2:	f000 b949 	b.w	800ec48 <__swbuf_r>
 800e9b6:	6813      	ldr	r3, [r2, #0]
 800e9b8:	1c58      	adds	r0, r3, #1
 800e9ba:	6010      	str	r0, [r2, #0]
 800e9bc:	7019      	strb	r1, [r3, #0]
 800e9be:	4608      	mov	r0, r1
 800e9c0:	bc10      	pop	{r4}
 800e9c2:	4770      	bx	lr

0800e9c4 <__sfputs_r>:
 800e9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9c6:	4606      	mov	r6, r0
 800e9c8:	460f      	mov	r7, r1
 800e9ca:	4614      	mov	r4, r2
 800e9cc:	18d5      	adds	r5, r2, r3
 800e9ce:	42ac      	cmp	r4, r5
 800e9d0:	d101      	bne.n	800e9d6 <__sfputs_r+0x12>
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	e007      	b.n	800e9e6 <__sfputs_r+0x22>
 800e9d6:	463a      	mov	r2, r7
 800e9d8:	4630      	mov	r0, r6
 800e9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9de:	f7ff ffdc 	bl	800e99a <__sfputc_r>
 800e9e2:	1c43      	adds	r3, r0, #1
 800e9e4:	d1f3      	bne.n	800e9ce <__sfputs_r+0xa>
 800e9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e9e8 <_vfiprintf_r>:
 800e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	460d      	mov	r5, r1
 800e9ee:	4614      	mov	r4, r2
 800e9f0:	4698      	mov	r8, r3
 800e9f2:	4606      	mov	r6, r0
 800e9f4:	b09d      	sub	sp, #116	; 0x74
 800e9f6:	b118      	cbz	r0, 800ea00 <_vfiprintf_r+0x18>
 800e9f8:	6983      	ldr	r3, [r0, #24]
 800e9fa:	b90b      	cbnz	r3, 800ea00 <_vfiprintf_r+0x18>
 800e9fc:	f000 fb10 	bl	800f020 <__sinit>
 800ea00:	4b89      	ldr	r3, [pc, #548]	; (800ec28 <_vfiprintf_r+0x240>)
 800ea02:	429d      	cmp	r5, r3
 800ea04:	d11b      	bne.n	800ea3e <_vfiprintf_r+0x56>
 800ea06:	6875      	ldr	r5, [r6, #4]
 800ea08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea0a:	07d9      	lsls	r1, r3, #31
 800ea0c:	d405      	bmi.n	800ea1a <_vfiprintf_r+0x32>
 800ea0e:	89ab      	ldrh	r3, [r5, #12]
 800ea10:	059a      	lsls	r2, r3, #22
 800ea12:	d402      	bmi.n	800ea1a <_vfiprintf_r+0x32>
 800ea14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea16:	f000 fba1 	bl	800f15c <__retarget_lock_acquire_recursive>
 800ea1a:	89ab      	ldrh	r3, [r5, #12]
 800ea1c:	071b      	lsls	r3, r3, #28
 800ea1e:	d501      	bpl.n	800ea24 <_vfiprintf_r+0x3c>
 800ea20:	692b      	ldr	r3, [r5, #16]
 800ea22:	b9eb      	cbnz	r3, 800ea60 <_vfiprintf_r+0x78>
 800ea24:	4629      	mov	r1, r5
 800ea26:	4630      	mov	r0, r6
 800ea28:	f000 f96e 	bl	800ed08 <__swsetup_r>
 800ea2c:	b1c0      	cbz	r0, 800ea60 <_vfiprintf_r+0x78>
 800ea2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea30:	07dc      	lsls	r4, r3, #31
 800ea32:	d50e      	bpl.n	800ea52 <_vfiprintf_r+0x6a>
 800ea34:	f04f 30ff 	mov.w	r0, #4294967295
 800ea38:	b01d      	add	sp, #116	; 0x74
 800ea3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3e:	4b7b      	ldr	r3, [pc, #492]	; (800ec2c <_vfiprintf_r+0x244>)
 800ea40:	429d      	cmp	r5, r3
 800ea42:	d101      	bne.n	800ea48 <_vfiprintf_r+0x60>
 800ea44:	68b5      	ldr	r5, [r6, #8]
 800ea46:	e7df      	b.n	800ea08 <_vfiprintf_r+0x20>
 800ea48:	4b79      	ldr	r3, [pc, #484]	; (800ec30 <_vfiprintf_r+0x248>)
 800ea4a:	429d      	cmp	r5, r3
 800ea4c:	bf08      	it	eq
 800ea4e:	68f5      	ldreq	r5, [r6, #12]
 800ea50:	e7da      	b.n	800ea08 <_vfiprintf_r+0x20>
 800ea52:	89ab      	ldrh	r3, [r5, #12]
 800ea54:	0598      	lsls	r0, r3, #22
 800ea56:	d4ed      	bmi.n	800ea34 <_vfiprintf_r+0x4c>
 800ea58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea5a:	f000 fb80 	bl	800f15e <__retarget_lock_release_recursive>
 800ea5e:	e7e9      	b.n	800ea34 <_vfiprintf_r+0x4c>
 800ea60:	2300      	movs	r3, #0
 800ea62:	9309      	str	r3, [sp, #36]	; 0x24
 800ea64:	2320      	movs	r3, #32
 800ea66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea6a:	2330      	movs	r3, #48	; 0x30
 800ea6c:	f04f 0901 	mov.w	r9, #1
 800ea70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea74:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ec34 <_vfiprintf_r+0x24c>
 800ea78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea7c:	4623      	mov	r3, r4
 800ea7e:	469a      	mov	sl, r3
 800ea80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea84:	b10a      	cbz	r2, 800ea8a <_vfiprintf_r+0xa2>
 800ea86:	2a25      	cmp	r2, #37	; 0x25
 800ea88:	d1f9      	bne.n	800ea7e <_vfiprintf_r+0x96>
 800ea8a:	ebba 0b04 	subs.w	fp, sl, r4
 800ea8e:	d00b      	beq.n	800eaa8 <_vfiprintf_r+0xc0>
 800ea90:	465b      	mov	r3, fp
 800ea92:	4622      	mov	r2, r4
 800ea94:	4629      	mov	r1, r5
 800ea96:	4630      	mov	r0, r6
 800ea98:	f7ff ff94 	bl	800e9c4 <__sfputs_r>
 800ea9c:	3001      	adds	r0, #1
 800ea9e:	f000 80aa 	beq.w	800ebf6 <_vfiprintf_r+0x20e>
 800eaa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaa4:	445a      	add	r2, fp
 800eaa6:	9209      	str	r2, [sp, #36]	; 0x24
 800eaa8:	f89a 3000 	ldrb.w	r3, [sl]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	f000 80a2 	beq.w	800ebf6 <_vfiprintf_r+0x20e>
 800eab2:	2300      	movs	r3, #0
 800eab4:	f04f 32ff 	mov.w	r2, #4294967295
 800eab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eabc:	f10a 0a01 	add.w	sl, sl, #1
 800eac0:	9304      	str	r3, [sp, #16]
 800eac2:	9307      	str	r3, [sp, #28]
 800eac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eac8:	931a      	str	r3, [sp, #104]	; 0x68
 800eaca:	4654      	mov	r4, sl
 800eacc:	2205      	movs	r2, #5
 800eace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ead2:	4858      	ldr	r0, [pc, #352]	; (800ec34 <_vfiprintf_r+0x24c>)
 800ead4:	f7ff f8de 	bl	800dc94 <memchr>
 800ead8:	9a04      	ldr	r2, [sp, #16]
 800eada:	b9d8      	cbnz	r0, 800eb14 <_vfiprintf_r+0x12c>
 800eadc:	06d1      	lsls	r1, r2, #27
 800eade:	bf44      	itt	mi
 800eae0:	2320      	movmi	r3, #32
 800eae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eae6:	0713      	lsls	r3, r2, #28
 800eae8:	bf44      	itt	mi
 800eaea:	232b      	movmi	r3, #43	; 0x2b
 800eaec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaf0:	f89a 3000 	ldrb.w	r3, [sl]
 800eaf4:	2b2a      	cmp	r3, #42	; 0x2a
 800eaf6:	d015      	beq.n	800eb24 <_vfiprintf_r+0x13c>
 800eaf8:	4654      	mov	r4, sl
 800eafa:	2000      	movs	r0, #0
 800eafc:	f04f 0c0a 	mov.w	ip, #10
 800eb00:	9a07      	ldr	r2, [sp, #28]
 800eb02:	4621      	mov	r1, r4
 800eb04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb08:	3b30      	subs	r3, #48	; 0x30
 800eb0a:	2b09      	cmp	r3, #9
 800eb0c:	d94e      	bls.n	800ebac <_vfiprintf_r+0x1c4>
 800eb0e:	b1b0      	cbz	r0, 800eb3e <_vfiprintf_r+0x156>
 800eb10:	9207      	str	r2, [sp, #28]
 800eb12:	e014      	b.n	800eb3e <_vfiprintf_r+0x156>
 800eb14:	eba0 0308 	sub.w	r3, r0, r8
 800eb18:	fa09 f303 	lsl.w	r3, r9, r3
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	46a2      	mov	sl, r4
 800eb20:	9304      	str	r3, [sp, #16]
 800eb22:	e7d2      	b.n	800eaca <_vfiprintf_r+0xe2>
 800eb24:	9b03      	ldr	r3, [sp, #12]
 800eb26:	1d19      	adds	r1, r3, #4
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	9103      	str	r1, [sp, #12]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	bfbb      	ittet	lt
 800eb30:	425b      	neglt	r3, r3
 800eb32:	f042 0202 	orrlt.w	r2, r2, #2
 800eb36:	9307      	strge	r3, [sp, #28]
 800eb38:	9307      	strlt	r3, [sp, #28]
 800eb3a:	bfb8      	it	lt
 800eb3c:	9204      	strlt	r2, [sp, #16]
 800eb3e:	7823      	ldrb	r3, [r4, #0]
 800eb40:	2b2e      	cmp	r3, #46	; 0x2e
 800eb42:	d10c      	bne.n	800eb5e <_vfiprintf_r+0x176>
 800eb44:	7863      	ldrb	r3, [r4, #1]
 800eb46:	2b2a      	cmp	r3, #42	; 0x2a
 800eb48:	d135      	bne.n	800ebb6 <_vfiprintf_r+0x1ce>
 800eb4a:	9b03      	ldr	r3, [sp, #12]
 800eb4c:	3402      	adds	r4, #2
 800eb4e:	1d1a      	adds	r2, r3, #4
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	9203      	str	r2, [sp, #12]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	bfb8      	it	lt
 800eb58:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb5c:	9305      	str	r3, [sp, #20]
 800eb5e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ec38 <_vfiprintf_r+0x250>
 800eb62:	2203      	movs	r2, #3
 800eb64:	4650      	mov	r0, sl
 800eb66:	7821      	ldrb	r1, [r4, #0]
 800eb68:	f7ff f894 	bl	800dc94 <memchr>
 800eb6c:	b140      	cbz	r0, 800eb80 <_vfiprintf_r+0x198>
 800eb6e:	2340      	movs	r3, #64	; 0x40
 800eb70:	eba0 000a 	sub.w	r0, r0, sl
 800eb74:	fa03 f000 	lsl.w	r0, r3, r0
 800eb78:	9b04      	ldr	r3, [sp, #16]
 800eb7a:	3401      	adds	r4, #1
 800eb7c:	4303      	orrs	r3, r0
 800eb7e:	9304      	str	r3, [sp, #16]
 800eb80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb84:	2206      	movs	r2, #6
 800eb86:	482d      	ldr	r0, [pc, #180]	; (800ec3c <_vfiprintf_r+0x254>)
 800eb88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb8c:	f7ff f882 	bl	800dc94 <memchr>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	d03f      	beq.n	800ec14 <_vfiprintf_r+0x22c>
 800eb94:	4b2a      	ldr	r3, [pc, #168]	; (800ec40 <_vfiprintf_r+0x258>)
 800eb96:	bb1b      	cbnz	r3, 800ebe0 <_vfiprintf_r+0x1f8>
 800eb98:	9b03      	ldr	r3, [sp, #12]
 800eb9a:	3307      	adds	r3, #7
 800eb9c:	f023 0307 	bic.w	r3, r3, #7
 800eba0:	3308      	adds	r3, #8
 800eba2:	9303      	str	r3, [sp, #12]
 800eba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba6:	443b      	add	r3, r7
 800eba8:	9309      	str	r3, [sp, #36]	; 0x24
 800ebaa:	e767      	b.n	800ea7c <_vfiprintf_r+0x94>
 800ebac:	460c      	mov	r4, r1
 800ebae:	2001      	movs	r0, #1
 800ebb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebb4:	e7a5      	b.n	800eb02 <_vfiprintf_r+0x11a>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	f04f 0c0a 	mov.w	ip, #10
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	3401      	adds	r4, #1
 800ebc0:	9305      	str	r3, [sp, #20]
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebc8:	3a30      	subs	r2, #48	; 0x30
 800ebca:	2a09      	cmp	r2, #9
 800ebcc:	d903      	bls.n	800ebd6 <_vfiprintf_r+0x1ee>
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d0c5      	beq.n	800eb5e <_vfiprintf_r+0x176>
 800ebd2:	9105      	str	r1, [sp, #20]
 800ebd4:	e7c3      	b.n	800eb5e <_vfiprintf_r+0x176>
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	2301      	movs	r3, #1
 800ebda:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebde:	e7f0      	b.n	800ebc2 <_vfiprintf_r+0x1da>
 800ebe0:	ab03      	add	r3, sp, #12
 800ebe2:	9300      	str	r3, [sp, #0]
 800ebe4:	462a      	mov	r2, r5
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	4b16      	ldr	r3, [pc, #88]	; (800ec44 <_vfiprintf_r+0x25c>)
 800ebea:	a904      	add	r1, sp, #16
 800ebec:	f7fd fdd4 	bl	800c798 <_printf_float>
 800ebf0:	4607      	mov	r7, r0
 800ebf2:	1c78      	adds	r0, r7, #1
 800ebf4:	d1d6      	bne.n	800eba4 <_vfiprintf_r+0x1bc>
 800ebf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebf8:	07d9      	lsls	r1, r3, #31
 800ebfa:	d405      	bmi.n	800ec08 <_vfiprintf_r+0x220>
 800ebfc:	89ab      	ldrh	r3, [r5, #12]
 800ebfe:	059a      	lsls	r2, r3, #22
 800ec00:	d402      	bmi.n	800ec08 <_vfiprintf_r+0x220>
 800ec02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec04:	f000 faab 	bl	800f15e <__retarget_lock_release_recursive>
 800ec08:	89ab      	ldrh	r3, [r5, #12]
 800ec0a:	065b      	lsls	r3, r3, #25
 800ec0c:	f53f af12 	bmi.w	800ea34 <_vfiprintf_r+0x4c>
 800ec10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec12:	e711      	b.n	800ea38 <_vfiprintf_r+0x50>
 800ec14:	ab03      	add	r3, sp, #12
 800ec16:	9300      	str	r3, [sp, #0]
 800ec18:	462a      	mov	r2, r5
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	4b09      	ldr	r3, [pc, #36]	; (800ec44 <_vfiprintf_r+0x25c>)
 800ec1e:	a904      	add	r1, sp, #16
 800ec20:	f7fe f856 	bl	800ccd0 <_printf_i>
 800ec24:	e7e4      	b.n	800ebf0 <_vfiprintf_r+0x208>
 800ec26:	bf00      	nop
 800ec28:	0800f964 	.word	0x0800f964
 800ec2c:	0800f984 	.word	0x0800f984
 800ec30:	0800f944 	.word	0x0800f944
 800ec34:	0800f7ec 	.word	0x0800f7ec
 800ec38:	0800f7f2 	.word	0x0800f7f2
 800ec3c:	0800f7f6 	.word	0x0800f7f6
 800ec40:	0800c799 	.word	0x0800c799
 800ec44:	0800e9c5 	.word	0x0800e9c5

0800ec48 <__swbuf_r>:
 800ec48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec4a:	460e      	mov	r6, r1
 800ec4c:	4614      	mov	r4, r2
 800ec4e:	4605      	mov	r5, r0
 800ec50:	b118      	cbz	r0, 800ec5a <__swbuf_r+0x12>
 800ec52:	6983      	ldr	r3, [r0, #24]
 800ec54:	b90b      	cbnz	r3, 800ec5a <__swbuf_r+0x12>
 800ec56:	f000 f9e3 	bl	800f020 <__sinit>
 800ec5a:	4b21      	ldr	r3, [pc, #132]	; (800ece0 <__swbuf_r+0x98>)
 800ec5c:	429c      	cmp	r4, r3
 800ec5e:	d12b      	bne.n	800ecb8 <__swbuf_r+0x70>
 800ec60:	686c      	ldr	r4, [r5, #4]
 800ec62:	69a3      	ldr	r3, [r4, #24]
 800ec64:	60a3      	str	r3, [r4, #8]
 800ec66:	89a3      	ldrh	r3, [r4, #12]
 800ec68:	071a      	lsls	r2, r3, #28
 800ec6a:	d52f      	bpl.n	800eccc <__swbuf_r+0x84>
 800ec6c:	6923      	ldr	r3, [r4, #16]
 800ec6e:	b36b      	cbz	r3, 800eccc <__swbuf_r+0x84>
 800ec70:	6923      	ldr	r3, [r4, #16]
 800ec72:	6820      	ldr	r0, [r4, #0]
 800ec74:	b2f6      	uxtb	r6, r6
 800ec76:	1ac0      	subs	r0, r0, r3
 800ec78:	6963      	ldr	r3, [r4, #20]
 800ec7a:	4637      	mov	r7, r6
 800ec7c:	4283      	cmp	r3, r0
 800ec7e:	dc04      	bgt.n	800ec8a <__swbuf_r+0x42>
 800ec80:	4621      	mov	r1, r4
 800ec82:	4628      	mov	r0, r5
 800ec84:	f000 f938 	bl	800eef8 <_fflush_r>
 800ec88:	bb30      	cbnz	r0, 800ecd8 <__swbuf_r+0x90>
 800ec8a:	68a3      	ldr	r3, [r4, #8]
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	60a3      	str	r3, [r4, #8]
 800ec92:	6823      	ldr	r3, [r4, #0]
 800ec94:	1c5a      	adds	r2, r3, #1
 800ec96:	6022      	str	r2, [r4, #0]
 800ec98:	701e      	strb	r6, [r3, #0]
 800ec9a:	6963      	ldr	r3, [r4, #20]
 800ec9c:	4283      	cmp	r3, r0
 800ec9e:	d004      	beq.n	800ecaa <__swbuf_r+0x62>
 800eca0:	89a3      	ldrh	r3, [r4, #12]
 800eca2:	07db      	lsls	r3, r3, #31
 800eca4:	d506      	bpl.n	800ecb4 <__swbuf_r+0x6c>
 800eca6:	2e0a      	cmp	r6, #10
 800eca8:	d104      	bne.n	800ecb4 <__swbuf_r+0x6c>
 800ecaa:	4621      	mov	r1, r4
 800ecac:	4628      	mov	r0, r5
 800ecae:	f000 f923 	bl	800eef8 <_fflush_r>
 800ecb2:	b988      	cbnz	r0, 800ecd8 <__swbuf_r+0x90>
 800ecb4:	4638      	mov	r0, r7
 800ecb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecb8:	4b0a      	ldr	r3, [pc, #40]	; (800ece4 <__swbuf_r+0x9c>)
 800ecba:	429c      	cmp	r4, r3
 800ecbc:	d101      	bne.n	800ecc2 <__swbuf_r+0x7a>
 800ecbe:	68ac      	ldr	r4, [r5, #8]
 800ecc0:	e7cf      	b.n	800ec62 <__swbuf_r+0x1a>
 800ecc2:	4b09      	ldr	r3, [pc, #36]	; (800ece8 <__swbuf_r+0xa0>)
 800ecc4:	429c      	cmp	r4, r3
 800ecc6:	bf08      	it	eq
 800ecc8:	68ec      	ldreq	r4, [r5, #12]
 800ecca:	e7ca      	b.n	800ec62 <__swbuf_r+0x1a>
 800eccc:	4621      	mov	r1, r4
 800ecce:	4628      	mov	r0, r5
 800ecd0:	f000 f81a 	bl	800ed08 <__swsetup_r>
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	d0cb      	beq.n	800ec70 <__swbuf_r+0x28>
 800ecd8:	f04f 37ff 	mov.w	r7, #4294967295
 800ecdc:	e7ea      	b.n	800ecb4 <__swbuf_r+0x6c>
 800ecde:	bf00      	nop
 800ece0:	0800f964 	.word	0x0800f964
 800ece4:	0800f984 	.word	0x0800f984
 800ece8:	0800f944 	.word	0x0800f944

0800ecec <__ascii_wctomb>:
 800ecec:	4603      	mov	r3, r0
 800ecee:	4608      	mov	r0, r1
 800ecf0:	b141      	cbz	r1, 800ed04 <__ascii_wctomb+0x18>
 800ecf2:	2aff      	cmp	r2, #255	; 0xff
 800ecf4:	d904      	bls.n	800ed00 <__ascii_wctomb+0x14>
 800ecf6:	228a      	movs	r2, #138	; 0x8a
 800ecf8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecfc:	601a      	str	r2, [r3, #0]
 800ecfe:	4770      	bx	lr
 800ed00:	2001      	movs	r0, #1
 800ed02:	700a      	strb	r2, [r1, #0]
 800ed04:	4770      	bx	lr
	...

0800ed08 <__swsetup_r>:
 800ed08:	4b32      	ldr	r3, [pc, #200]	; (800edd4 <__swsetup_r+0xcc>)
 800ed0a:	b570      	push	{r4, r5, r6, lr}
 800ed0c:	681d      	ldr	r5, [r3, #0]
 800ed0e:	4606      	mov	r6, r0
 800ed10:	460c      	mov	r4, r1
 800ed12:	b125      	cbz	r5, 800ed1e <__swsetup_r+0x16>
 800ed14:	69ab      	ldr	r3, [r5, #24]
 800ed16:	b913      	cbnz	r3, 800ed1e <__swsetup_r+0x16>
 800ed18:	4628      	mov	r0, r5
 800ed1a:	f000 f981 	bl	800f020 <__sinit>
 800ed1e:	4b2e      	ldr	r3, [pc, #184]	; (800edd8 <__swsetup_r+0xd0>)
 800ed20:	429c      	cmp	r4, r3
 800ed22:	d10f      	bne.n	800ed44 <__swsetup_r+0x3c>
 800ed24:	686c      	ldr	r4, [r5, #4]
 800ed26:	89a3      	ldrh	r3, [r4, #12]
 800ed28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed2c:	0719      	lsls	r1, r3, #28
 800ed2e:	d42c      	bmi.n	800ed8a <__swsetup_r+0x82>
 800ed30:	06dd      	lsls	r5, r3, #27
 800ed32:	d411      	bmi.n	800ed58 <__swsetup_r+0x50>
 800ed34:	2309      	movs	r3, #9
 800ed36:	6033      	str	r3, [r6, #0]
 800ed38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed40:	81a3      	strh	r3, [r4, #12]
 800ed42:	e03e      	b.n	800edc2 <__swsetup_r+0xba>
 800ed44:	4b25      	ldr	r3, [pc, #148]	; (800eddc <__swsetup_r+0xd4>)
 800ed46:	429c      	cmp	r4, r3
 800ed48:	d101      	bne.n	800ed4e <__swsetup_r+0x46>
 800ed4a:	68ac      	ldr	r4, [r5, #8]
 800ed4c:	e7eb      	b.n	800ed26 <__swsetup_r+0x1e>
 800ed4e:	4b24      	ldr	r3, [pc, #144]	; (800ede0 <__swsetup_r+0xd8>)
 800ed50:	429c      	cmp	r4, r3
 800ed52:	bf08      	it	eq
 800ed54:	68ec      	ldreq	r4, [r5, #12]
 800ed56:	e7e6      	b.n	800ed26 <__swsetup_r+0x1e>
 800ed58:	0758      	lsls	r0, r3, #29
 800ed5a:	d512      	bpl.n	800ed82 <__swsetup_r+0x7a>
 800ed5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed5e:	b141      	cbz	r1, 800ed72 <__swsetup_r+0x6a>
 800ed60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed64:	4299      	cmp	r1, r3
 800ed66:	d002      	beq.n	800ed6e <__swsetup_r+0x66>
 800ed68:	4630      	mov	r0, r6
 800ed6a:	f7ff fb37 	bl	800e3dc <_free_r>
 800ed6e:	2300      	movs	r3, #0
 800ed70:	6363      	str	r3, [r4, #52]	; 0x34
 800ed72:	89a3      	ldrh	r3, [r4, #12]
 800ed74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed78:	81a3      	strh	r3, [r4, #12]
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	6063      	str	r3, [r4, #4]
 800ed7e:	6923      	ldr	r3, [r4, #16]
 800ed80:	6023      	str	r3, [r4, #0]
 800ed82:	89a3      	ldrh	r3, [r4, #12]
 800ed84:	f043 0308 	orr.w	r3, r3, #8
 800ed88:	81a3      	strh	r3, [r4, #12]
 800ed8a:	6923      	ldr	r3, [r4, #16]
 800ed8c:	b94b      	cbnz	r3, 800eda2 <__swsetup_r+0x9a>
 800ed8e:	89a3      	ldrh	r3, [r4, #12]
 800ed90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ed94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed98:	d003      	beq.n	800eda2 <__swsetup_r+0x9a>
 800ed9a:	4621      	mov	r1, r4
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	f000 fa05 	bl	800f1ac <__smakebuf_r>
 800eda2:	89a0      	ldrh	r0, [r4, #12]
 800eda4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eda8:	f010 0301 	ands.w	r3, r0, #1
 800edac:	d00a      	beq.n	800edc4 <__swsetup_r+0xbc>
 800edae:	2300      	movs	r3, #0
 800edb0:	60a3      	str	r3, [r4, #8]
 800edb2:	6963      	ldr	r3, [r4, #20]
 800edb4:	425b      	negs	r3, r3
 800edb6:	61a3      	str	r3, [r4, #24]
 800edb8:	6923      	ldr	r3, [r4, #16]
 800edba:	b943      	cbnz	r3, 800edce <__swsetup_r+0xc6>
 800edbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800edc0:	d1ba      	bne.n	800ed38 <__swsetup_r+0x30>
 800edc2:	bd70      	pop	{r4, r5, r6, pc}
 800edc4:	0781      	lsls	r1, r0, #30
 800edc6:	bf58      	it	pl
 800edc8:	6963      	ldrpl	r3, [r4, #20]
 800edca:	60a3      	str	r3, [r4, #8]
 800edcc:	e7f4      	b.n	800edb8 <__swsetup_r+0xb0>
 800edce:	2000      	movs	r0, #0
 800edd0:	e7f7      	b.n	800edc2 <__swsetup_r+0xba>
 800edd2:	bf00      	nop
 800edd4:	20000190 	.word	0x20000190
 800edd8:	0800f964 	.word	0x0800f964
 800eddc:	0800f984 	.word	0x0800f984
 800ede0:	0800f944 	.word	0x0800f944

0800ede4 <abort>:
 800ede4:	2006      	movs	r0, #6
 800ede6:	b508      	push	{r3, lr}
 800ede8:	f000 fa50 	bl	800f28c <raise>
 800edec:	2001      	movs	r0, #1
 800edee:	f7f8 f9d3 	bl	8007198 <_exit>
	...

0800edf4 <__sflush_r>:
 800edf4:	898a      	ldrh	r2, [r1, #12]
 800edf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edf8:	4605      	mov	r5, r0
 800edfa:	0710      	lsls	r0, r2, #28
 800edfc:	460c      	mov	r4, r1
 800edfe:	d457      	bmi.n	800eeb0 <__sflush_r+0xbc>
 800ee00:	684b      	ldr	r3, [r1, #4]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	dc04      	bgt.n	800ee10 <__sflush_r+0x1c>
 800ee06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	dc01      	bgt.n	800ee10 <__sflush_r+0x1c>
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee12:	2e00      	cmp	r6, #0
 800ee14:	d0fa      	beq.n	800ee0c <__sflush_r+0x18>
 800ee16:	2300      	movs	r3, #0
 800ee18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ee1c:	682f      	ldr	r7, [r5, #0]
 800ee1e:	602b      	str	r3, [r5, #0]
 800ee20:	d032      	beq.n	800ee88 <__sflush_r+0x94>
 800ee22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ee24:	89a3      	ldrh	r3, [r4, #12]
 800ee26:	075a      	lsls	r2, r3, #29
 800ee28:	d505      	bpl.n	800ee36 <__sflush_r+0x42>
 800ee2a:	6863      	ldr	r3, [r4, #4]
 800ee2c:	1ac0      	subs	r0, r0, r3
 800ee2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee30:	b10b      	cbz	r3, 800ee36 <__sflush_r+0x42>
 800ee32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee34:	1ac0      	subs	r0, r0, r3
 800ee36:	2300      	movs	r3, #0
 800ee38:	4602      	mov	r2, r0
 800ee3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	6a21      	ldr	r1, [r4, #32]
 800ee40:	47b0      	blx	r6
 800ee42:	1c43      	adds	r3, r0, #1
 800ee44:	89a3      	ldrh	r3, [r4, #12]
 800ee46:	d106      	bne.n	800ee56 <__sflush_r+0x62>
 800ee48:	6829      	ldr	r1, [r5, #0]
 800ee4a:	291d      	cmp	r1, #29
 800ee4c:	d82c      	bhi.n	800eea8 <__sflush_r+0xb4>
 800ee4e:	4a29      	ldr	r2, [pc, #164]	; (800eef4 <__sflush_r+0x100>)
 800ee50:	40ca      	lsrs	r2, r1
 800ee52:	07d6      	lsls	r6, r2, #31
 800ee54:	d528      	bpl.n	800eea8 <__sflush_r+0xb4>
 800ee56:	2200      	movs	r2, #0
 800ee58:	6062      	str	r2, [r4, #4]
 800ee5a:	6922      	ldr	r2, [r4, #16]
 800ee5c:	04d9      	lsls	r1, r3, #19
 800ee5e:	6022      	str	r2, [r4, #0]
 800ee60:	d504      	bpl.n	800ee6c <__sflush_r+0x78>
 800ee62:	1c42      	adds	r2, r0, #1
 800ee64:	d101      	bne.n	800ee6a <__sflush_r+0x76>
 800ee66:	682b      	ldr	r3, [r5, #0]
 800ee68:	b903      	cbnz	r3, 800ee6c <__sflush_r+0x78>
 800ee6a:	6560      	str	r0, [r4, #84]	; 0x54
 800ee6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee6e:	602f      	str	r7, [r5, #0]
 800ee70:	2900      	cmp	r1, #0
 800ee72:	d0cb      	beq.n	800ee0c <__sflush_r+0x18>
 800ee74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee78:	4299      	cmp	r1, r3
 800ee7a:	d002      	beq.n	800ee82 <__sflush_r+0x8e>
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	f7ff faad 	bl	800e3dc <_free_r>
 800ee82:	2000      	movs	r0, #0
 800ee84:	6360      	str	r0, [r4, #52]	; 0x34
 800ee86:	e7c2      	b.n	800ee0e <__sflush_r+0x1a>
 800ee88:	6a21      	ldr	r1, [r4, #32]
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	4628      	mov	r0, r5
 800ee8e:	47b0      	blx	r6
 800ee90:	1c41      	adds	r1, r0, #1
 800ee92:	d1c7      	bne.n	800ee24 <__sflush_r+0x30>
 800ee94:	682b      	ldr	r3, [r5, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d0c4      	beq.n	800ee24 <__sflush_r+0x30>
 800ee9a:	2b1d      	cmp	r3, #29
 800ee9c:	d001      	beq.n	800eea2 <__sflush_r+0xae>
 800ee9e:	2b16      	cmp	r3, #22
 800eea0:	d101      	bne.n	800eea6 <__sflush_r+0xb2>
 800eea2:	602f      	str	r7, [r5, #0]
 800eea4:	e7b2      	b.n	800ee0c <__sflush_r+0x18>
 800eea6:	89a3      	ldrh	r3, [r4, #12]
 800eea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eeac:	81a3      	strh	r3, [r4, #12]
 800eeae:	e7ae      	b.n	800ee0e <__sflush_r+0x1a>
 800eeb0:	690f      	ldr	r7, [r1, #16]
 800eeb2:	2f00      	cmp	r7, #0
 800eeb4:	d0aa      	beq.n	800ee0c <__sflush_r+0x18>
 800eeb6:	0793      	lsls	r3, r2, #30
 800eeb8:	bf18      	it	ne
 800eeba:	2300      	movne	r3, #0
 800eebc:	680e      	ldr	r6, [r1, #0]
 800eebe:	bf08      	it	eq
 800eec0:	694b      	ldreq	r3, [r1, #20]
 800eec2:	1bf6      	subs	r6, r6, r7
 800eec4:	600f      	str	r7, [r1, #0]
 800eec6:	608b      	str	r3, [r1, #8]
 800eec8:	2e00      	cmp	r6, #0
 800eeca:	dd9f      	ble.n	800ee0c <__sflush_r+0x18>
 800eecc:	4633      	mov	r3, r6
 800eece:	463a      	mov	r2, r7
 800eed0:	4628      	mov	r0, r5
 800eed2:	6a21      	ldr	r1, [r4, #32]
 800eed4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800eed8:	47e0      	blx	ip
 800eeda:	2800      	cmp	r0, #0
 800eedc:	dc06      	bgt.n	800eeec <__sflush_r+0xf8>
 800eede:	89a3      	ldrh	r3, [r4, #12]
 800eee0:	f04f 30ff 	mov.w	r0, #4294967295
 800eee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eee8:	81a3      	strh	r3, [r4, #12]
 800eeea:	e790      	b.n	800ee0e <__sflush_r+0x1a>
 800eeec:	4407      	add	r7, r0
 800eeee:	1a36      	subs	r6, r6, r0
 800eef0:	e7ea      	b.n	800eec8 <__sflush_r+0xd4>
 800eef2:	bf00      	nop
 800eef4:	20400001 	.word	0x20400001

0800eef8 <_fflush_r>:
 800eef8:	b538      	push	{r3, r4, r5, lr}
 800eefa:	690b      	ldr	r3, [r1, #16]
 800eefc:	4605      	mov	r5, r0
 800eefe:	460c      	mov	r4, r1
 800ef00:	b913      	cbnz	r3, 800ef08 <_fflush_r+0x10>
 800ef02:	2500      	movs	r5, #0
 800ef04:	4628      	mov	r0, r5
 800ef06:	bd38      	pop	{r3, r4, r5, pc}
 800ef08:	b118      	cbz	r0, 800ef12 <_fflush_r+0x1a>
 800ef0a:	6983      	ldr	r3, [r0, #24]
 800ef0c:	b90b      	cbnz	r3, 800ef12 <_fflush_r+0x1a>
 800ef0e:	f000 f887 	bl	800f020 <__sinit>
 800ef12:	4b14      	ldr	r3, [pc, #80]	; (800ef64 <_fflush_r+0x6c>)
 800ef14:	429c      	cmp	r4, r3
 800ef16:	d11b      	bne.n	800ef50 <_fflush_r+0x58>
 800ef18:	686c      	ldr	r4, [r5, #4]
 800ef1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d0ef      	beq.n	800ef02 <_fflush_r+0xa>
 800ef22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ef24:	07d0      	lsls	r0, r2, #31
 800ef26:	d404      	bmi.n	800ef32 <_fflush_r+0x3a>
 800ef28:	0599      	lsls	r1, r3, #22
 800ef2a:	d402      	bmi.n	800ef32 <_fflush_r+0x3a>
 800ef2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef2e:	f000 f915 	bl	800f15c <__retarget_lock_acquire_recursive>
 800ef32:	4628      	mov	r0, r5
 800ef34:	4621      	mov	r1, r4
 800ef36:	f7ff ff5d 	bl	800edf4 <__sflush_r>
 800ef3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef3c:	4605      	mov	r5, r0
 800ef3e:	07da      	lsls	r2, r3, #31
 800ef40:	d4e0      	bmi.n	800ef04 <_fflush_r+0xc>
 800ef42:	89a3      	ldrh	r3, [r4, #12]
 800ef44:	059b      	lsls	r3, r3, #22
 800ef46:	d4dd      	bmi.n	800ef04 <_fflush_r+0xc>
 800ef48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef4a:	f000 f908 	bl	800f15e <__retarget_lock_release_recursive>
 800ef4e:	e7d9      	b.n	800ef04 <_fflush_r+0xc>
 800ef50:	4b05      	ldr	r3, [pc, #20]	; (800ef68 <_fflush_r+0x70>)
 800ef52:	429c      	cmp	r4, r3
 800ef54:	d101      	bne.n	800ef5a <_fflush_r+0x62>
 800ef56:	68ac      	ldr	r4, [r5, #8]
 800ef58:	e7df      	b.n	800ef1a <_fflush_r+0x22>
 800ef5a:	4b04      	ldr	r3, [pc, #16]	; (800ef6c <_fflush_r+0x74>)
 800ef5c:	429c      	cmp	r4, r3
 800ef5e:	bf08      	it	eq
 800ef60:	68ec      	ldreq	r4, [r5, #12]
 800ef62:	e7da      	b.n	800ef1a <_fflush_r+0x22>
 800ef64:	0800f964 	.word	0x0800f964
 800ef68:	0800f984 	.word	0x0800f984
 800ef6c:	0800f944 	.word	0x0800f944

0800ef70 <std>:
 800ef70:	2300      	movs	r3, #0
 800ef72:	b510      	push	{r4, lr}
 800ef74:	4604      	mov	r4, r0
 800ef76:	e9c0 3300 	strd	r3, r3, [r0]
 800ef7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef7e:	6083      	str	r3, [r0, #8]
 800ef80:	8181      	strh	r1, [r0, #12]
 800ef82:	6643      	str	r3, [r0, #100]	; 0x64
 800ef84:	81c2      	strh	r2, [r0, #14]
 800ef86:	6183      	str	r3, [r0, #24]
 800ef88:	4619      	mov	r1, r3
 800ef8a:	2208      	movs	r2, #8
 800ef8c:	305c      	adds	r0, #92	; 0x5c
 800ef8e:	f7fd fb5d 	bl	800c64c <memset>
 800ef92:	4b05      	ldr	r3, [pc, #20]	; (800efa8 <std+0x38>)
 800ef94:	6224      	str	r4, [r4, #32]
 800ef96:	6263      	str	r3, [r4, #36]	; 0x24
 800ef98:	4b04      	ldr	r3, [pc, #16]	; (800efac <std+0x3c>)
 800ef9a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef9c:	4b04      	ldr	r3, [pc, #16]	; (800efb0 <std+0x40>)
 800ef9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800efa0:	4b04      	ldr	r3, [pc, #16]	; (800efb4 <std+0x44>)
 800efa2:	6323      	str	r3, [r4, #48]	; 0x30
 800efa4:	bd10      	pop	{r4, pc}
 800efa6:	bf00      	nop
 800efa8:	0800f2c5 	.word	0x0800f2c5
 800efac:	0800f2e7 	.word	0x0800f2e7
 800efb0:	0800f31f 	.word	0x0800f31f
 800efb4:	0800f343 	.word	0x0800f343

0800efb8 <_cleanup_r>:
 800efb8:	4901      	ldr	r1, [pc, #4]	; (800efc0 <_cleanup_r+0x8>)
 800efba:	f000 b8af 	b.w	800f11c <_fwalk_reent>
 800efbe:	bf00      	nop
 800efc0:	0800eef9 	.word	0x0800eef9

0800efc4 <__sfmoreglue>:
 800efc4:	2268      	movs	r2, #104	; 0x68
 800efc6:	b570      	push	{r4, r5, r6, lr}
 800efc8:	1e4d      	subs	r5, r1, #1
 800efca:	4355      	muls	r5, r2
 800efcc:	460e      	mov	r6, r1
 800efce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800efd2:	f7ff fa6b 	bl	800e4ac <_malloc_r>
 800efd6:	4604      	mov	r4, r0
 800efd8:	b140      	cbz	r0, 800efec <__sfmoreglue+0x28>
 800efda:	2100      	movs	r1, #0
 800efdc:	e9c0 1600 	strd	r1, r6, [r0]
 800efe0:	300c      	adds	r0, #12
 800efe2:	60a0      	str	r0, [r4, #8]
 800efe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800efe8:	f7fd fb30 	bl	800c64c <memset>
 800efec:	4620      	mov	r0, r4
 800efee:	bd70      	pop	{r4, r5, r6, pc}

0800eff0 <__sfp_lock_acquire>:
 800eff0:	4801      	ldr	r0, [pc, #4]	; (800eff8 <__sfp_lock_acquire+0x8>)
 800eff2:	f000 b8b3 	b.w	800f15c <__retarget_lock_acquire_recursive>
 800eff6:	bf00      	nop
 800eff8:	20001a05 	.word	0x20001a05

0800effc <__sfp_lock_release>:
 800effc:	4801      	ldr	r0, [pc, #4]	; (800f004 <__sfp_lock_release+0x8>)
 800effe:	f000 b8ae 	b.w	800f15e <__retarget_lock_release_recursive>
 800f002:	bf00      	nop
 800f004:	20001a05 	.word	0x20001a05

0800f008 <__sinit_lock_acquire>:
 800f008:	4801      	ldr	r0, [pc, #4]	; (800f010 <__sinit_lock_acquire+0x8>)
 800f00a:	f000 b8a7 	b.w	800f15c <__retarget_lock_acquire_recursive>
 800f00e:	bf00      	nop
 800f010:	20001a06 	.word	0x20001a06

0800f014 <__sinit_lock_release>:
 800f014:	4801      	ldr	r0, [pc, #4]	; (800f01c <__sinit_lock_release+0x8>)
 800f016:	f000 b8a2 	b.w	800f15e <__retarget_lock_release_recursive>
 800f01a:	bf00      	nop
 800f01c:	20001a06 	.word	0x20001a06

0800f020 <__sinit>:
 800f020:	b510      	push	{r4, lr}
 800f022:	4604      	mov	r4, r0
 800f024:	f7ff fff0 	bl	800f008 <__sinit_lock_acquire>
 800f028:	69a3      	ldr	r3, [r4, #24]
 800f02a:	b11b      	cbz	r3, 800f034 <__sinit+0x14>
 800f02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f030:	f7ff bff0 	b.w	800f014 <__sinit_lock_release>
 800f034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f038:	6523      	str	r3, [r4, #80]	; 0x50
 800f03a:	4b13      	ldr	r3, [pc, #76]	; (800f088 <__sinit+0x68>)
 800f03c:	4a13      	ldr	r2, [pc, #76]	; (800f08c <__sinit+0x6c>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	62a2      	str	r2, [r4, #40]	; 0x28
 800f042:	42a3      	cmp	r3, r4
 800f044:	bf08      	it	eq
 800f046:	2301      	moveq	r3, #1
 800f048:	4620      	mov	r0, r4
 800f04a:	bf08      	it	eq
 800f04c:	61a3      	streq	r3, [r4, #24]
 800f04e:	f000 f81f 	bl	800f090 <__sfp>
 800f052:	6060      	str	r0, [r4, #4]
 800f054:	4620      	mov	r0, r4
 800f056:	f000 f81b 	bl	800f090 <__sfp>
 800f05a:	60a0      	str	r0, [r4, #8]
 800f05c:	4620      	mov	r0, r4
 800f05e:	f000 f817 	bl	800f090 <__sfp>
 800f062:	2200      	movs	r2, #0
 800f064:	2104      	movs	r1, #4
 800f066:	60e0      	str	r0, [r4, #12]
 800f068:	6860      	ldr	r0, [r4, #4]
 800f06a:	f7ff ff81 	bl	800ef70 <std>
 800f06e:	2201      	movs	r2, #1
 800f070:	2109      	movs	r1, #9
 800f072:	68a0      	ldr	r0, [r4, #8]
 800f074:	f7ff ff7c 	bl	800ef70 <std>
 800f078:	2202      	movs	r2, #2
 800f07a:	2112      	movs	r1, #18
 800f07c:	68e0      	ldr	r0, [r4, #12]
 800f07e:	f7ff ff77 	bl	800ef70 <std>
 800f082:	2301      	movs	r3, #1
 800f084:	61a3      	str	r3, [r4, #24]
 800f086:	e7d1      	b.n	800f02c <__sinit+0xc>
 800f088:	0800f5c8 	.word	0x0800f5c8
 800f08c:	0800efb9 	.word	0x0800efb9

0800f090 <__sfp>:
 800f090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f092:	4607      	mov	r7, r0
 800f094:	f7ff ffac 	bl	800eff0 <__sfp_lock_acquire>
 800f098:	4b1e      	ldr	r3, [pc, #120]	; (800f114 <__sfp+0x84>)
 800f09a:	681e      	ldr	r6, [r3, #0]
 800f09c:	69b3      	ldr	r3, [r6, #24]
 800f09e:	b913      	cbnz	r3, 800f0a6 <__sfp+0x16>
 800f0a0:	4630      	mov	r0, r6
 800f0a2:	f7ff ffbd 	bl	800f020 <__sinit>
 800f0a6:	3648      	adds	r6, #72	; 0x48
 800f0a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	d503      	bpl.n	800f0b8 <__sfp+0x28>
 800f0b0:	6833      	ldr	r3, [r6, #0]
 800f0b2:	b30b      	cbz	r3, 800f0f8 <__sfp+0x68>
 800f0b4:	6836      	ldr	r6, [r6, #0]
 800f0b6:	e7f7      	b.n	800f0a8 <__sfp+0x18>
 800f0b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f0bc:	b9d5      	cbnz	r5, 800f0f4 <__sfp+0x64>
 800f0be:	4b16      	ldr	r3, [pc, #88]	; (800f118 <__sfp+0x88>)
 800f0c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f0c4:	60e3      	str	r3, [r4, #12]
 800f0c6:	6665      	str	r5, [r4, #100]	; 0x64
 800f0c8:	f000 f847 	bl	800f15a <__retarget_lock_init_recursive>
 800f0cc:	f7ff ff96 	bl	800effc <__sfp_lock_release>
 800f0d0:	2208      	movs	r2, #8
 800f0d2:	4629      	mov	r1, r5
 800f0d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f0d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f0dc:	6025      	str	r5, [r4, #0]
 800f0de:	61a5      	str	r5, [r4, #24]
 800f0e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f0e4:	f7fd fab2 	bl	800c64c <memset>
 800f0e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f0ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0f4:	3468      	adds	r4, #104	; 0x68
 800f0f6:	e7d9      	b.n	800f0ac <__sfp+0x1c>
 800f0f8:	2104      	movs	r1, #4
 800f0fa:	4638      	mov	r0, r7
 800f0fc:	f7ff ff62 	bl	800efc4 <__sfmoreglue>
 800f100:	4604      	mov	r4, r0
 800f102:	6030      	str	r0, [r6, #0]
 800f104:	2800      	cmp	r0, #0
 800f106:	d1d5      	bne.n	800f0b4 <__sfp+0x24>
 800f108:	f7ff ff78 	bl	800effc <__sfp_lock_release>
 800f10c:	230c      	movs	r3, #12
 800f10e:	603b      	str	r3, [r7, #0]
 800f110:	e7ee      	b.n	800f0f0 <__sfp+0x60>
 800f112:	bf00      	nop
 800f114:	0800f5c8 	.word	0x0800f5c8
 800f118:	ffff0001 	.word	0xffff0001

0800f11c <_fwalk_reent>:
 800f11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f120:	4606      	mov	r6, r0
 800f122:	4688      	mov	r8, r1
 800f124:	2700      	movs	r7, #0
 800f126:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f12a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f12e:	f1b9 0901 	subs.w	r9, r9, #1
 800f132:	d505      	bpl.n	800f140 <_fwalk_reent+0x24>
 800f134:	6824      	ldr	r4, [r4, #0]
 800f136:	2c00      	cmp	r4, #0
 800f138:	d1f7      	bne.n	800f12a <_fwalk_reent+0xe>
 800f13a:	4638      	mov	r0, r7
 800f13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f140:	89ab      	ldrh	r3, [r5, #12]
 800f142:	2b01      	cmp	r3, #1
 800f144:	d907      	bls.n	800f156 <_fwalk_reent+0x3a>
 800f146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f14a:	3301      	adds	r3, #1
 800f14c:	d003      	beq.n	800f156 <_fwalk_reent+0x3a>
 800f14e:	4629      	mov	r1, r5
 800f150:	4630      	mov	r0, r6
 800f152:	47c0      	blx	r8
 800f154:	4307      	orrs	r7, r0
 800f156:	3568      	adds	r5, #104	; 0x68
 800f158:	e7e9      	b.n	800f12e <_fwalk_reent+0x12>

0800f15a <__retarget_lock_init_recursive>:
 800f15a:	4770      	bx	lr

0800f15c <__retarget_lock_acquire_recursive>:
 800f15c:	4770      	bx	lr

0800f15e <__retarget_lock_release_recursive>:
 800f15e:	4770      	bx	lr

0800f160 <__swhatbuf_r>:
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	460e      	mov	r6, r1
 800f164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f168:	4614      	mov	r4, r2
 800f16a:	2900      	cmp	r1, #0
 800f16c:	461d      	mov	r5, r3
 800f16e:	b096      	sub	sp, #88	; 0x58
 800f170:	da08      	bge.n	800f184 <__swhatbuf_r+0x24>
 800f172:	2200      	movs	r2, #0
 800f174:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f178:	602a      	str	r2, [r5, #0]
 800f17a:	061a      	lsls	r2, r3, #24
 800f17c:	d410      	bmi.n	800f1a0 <__swhatbuf_r+0x40>
 800f17e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f182:	e00e      	b.n	800f1a2 <__swhatbuf_r+0x42>
 800f184:	466a      	mov	r2, sp
 800f186:	f000 f903 	bl	800f390 <_fstat_r>
 800f18a:	2800      	cmp	r0, #0
 800f18c:	dbf1      	blt.n	800f172 <__swhatbuf_r+0x12>
 800f18e:	9a01      	ldr	r2, [sp, #4]
 800f190:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f194:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f198:	425a      	negs	r2, r3
 800f19a:	415a      	adcs	r2, r3
 800f19c:	602a      	str	r2, [r5, #0]
 800f19e:	e7ee      	b.n	800f17e <__swhatbuf_r+0x1e>
 800f1a0:	2340      	movs	r3, #64	; 0x40
 800f1a2:	2000      	movs	r0, #0
 800f1a4:	6023      	str	r3, [r4, #0]
 800f1a6:	b016      	add	sp, #88	; 0x58
 800f1a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f1ac <__smakebuf_r>:
 800f1ac:	898b      	ldrh	r3, [r1, #12]
 800f1ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1b0:	079d      	lsls	r5, r3, #30
 800f1b2:	4606      	mov	r6, r0
 800f1b4:	460c      	mov	r4, r1
 800f1b6:	d507      	bpl.n	800f1c8 <__smakebuf_r+0x1c>
 800f1b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f1bc:	6023      	str	r3, [r4, #0]
 800f1be:	6123      	str	r3, [r4, #16]
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	6163      	str	r3, [r4, #20]
 800f1c4:	b002      	add	sp, #8
 800f1c6:	bd70      	pop	{r4, r5, r6, pc}
 800f1c8:	466a      	mov	r2, sp
 800f1ca:	ab01      	add	r3, sp, #4
 800f1cc:	f7ff ffc8 	bl	800f160 <__swhatbuf_r>
 800f1d0:	9900      	ldr	r1, [sp, #0]
 800f1d2:	4605      	mov	r5, r0
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	f7ff f969 	bl	800e4ac <_malloc_r>
 800f1da:	b948      	cbnz	r0, 800f1f0 <__smakebuf_r+0x44>
 800f1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1e0:	059a      	lsls	r2, r3, #22
 800f1e2:	d4ef      	bmi.n	800f1c4 <__smakebuf_r+0x18>
 800f1e4:	f023 0303 	bic.w	r3, r3, #3
 800f1e8:	f043 0302 	orr.w	r3, r3, #2
 800f1ec:	81a3      	strh	r3, [r4, #12]
 800f1ee:	e7e3      	b.n	800f1b8 <__smakebuf_r+0xc>
 800f1f0:	4b0d      	ldr	r3, [pc, #52]	; (800f228 <__smakebuf_r+0x7c>)
 800f1f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f1f4:	89a3      	ldrh	r3, [r4, #12]
 800f1f6:	6020      	str	r0, [r4, #0]
 800f1f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1fc:	81a3      	strh	r3, [r4, #12]
 800f1fe:	9b00      	ldr	r3, [sp, #0]
 800f200:	6120      	str	r0, [r4, #16]
 800f202:	6163      	str	r3, [r4, #20]
 800f204:	9b01      	ldr	r3, [sp, #4]
 800f206:	b15b      	cbz	r3, 800f220 <__smakebuf_r+0x74>
 800f208:	4630      	mov	r0, r6
 800f20a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f20e:	f000 f8d1 	bl	800f3b4 <_isatty_r>
 800f212:	b128      	cbz	r0, 800f220 <__smakebuf_r+0x74>
 800f214:	89a3      	ldrh	r3, [r4, #12]
 800f216:	f023 0303 	bic.w	r3, r3, #3
 800f21a:	f043 0301 	orr.w	r3, r3, #1
 800f21e:	81a3      	strh	r3, [r4, #12]
 800f220:	89a0      	ldrh	r0, [r4, #12]
 800f222:	4305      	orrs	r5, r0
 800f224:	81a5      	strh	r5, [r4, #12]
 800f226:	e7cd      	b.n	800f1c4 <__smakebuf_r+0x18>
 800f228:	0800efb9 	.word	0x0800efb9

0800f22c <_malloc_usable_size_r>:
 800f22c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f230:	1f18      	subs	r0, r3, #4
 800f232:	2b00      	cmp	r3, #0
 800f234:	bfbc      	itt	lt
 800f236:	580b      	ldrlt	r3, [r1, r0]
 800f238:	18c0      	addlt	r0, r0, r3
 800f23a:	4770      	bx	lr

0800f23c <_raise_r>:
 800f23c:	291f      	cmp	r1, #31
 800f23e:	b538      	push	{r3, r4, r5, lr}
 800f240:	4604      	mov	r4, r0
 800f242:	460d      	mov	r5, r1
 800f244:	d904      	bls.n	800f250 <_raise_r+0x14>
 800f246:	2316      	movs	r3, #22
 800f248:	6003      	str	r3, [r0, #0]
 800f24a:	f04f 30ff 	mov.w	r0, #4294967295
 800f24e:	bd38      	pop	{r3, r4, r5, pc}
 800f250:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f252:	b112      	cbz	r2, 800f25a <_raise_r+0x1e>
 800f254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f258:	b94b      	cbnz	r3, 800f26e <_raise_r+0x32>
 800f25a:	4620      	mov	r0, r4
 800f25c:	f000 f830 	bl	800f2c0 <_getpid_r>
 800f260:	462a      	mov	r2, r5
 800f262:	4601      	mov	r1, r0
 800f264:	4620      	mov	r0, r4
 800f266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f26a:	f000 b817 	b.w	800f29c <_kill_r>
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d00a      	beq.n	800f288 <_raise_r+0x4c>
 800f272:	1c59      	adds	r1, r3, #1
 800f274:	d103      	bne.n	800f27e <_raise_r+0x42>
 800f276:	2316      	movs	r3, #22
 800f278:	6003      	str	r3, [r0, #0]
 800f27a:	2001      	movs	r0, #1
 800f27c:	e7e7      	b.n	800f24e <_raise_r+0x12>
 800f27e:	2400      	movs	r4, #0
 800f280:	4628      	mov	r0, r5
 800f282:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f286:	4798      	blx	r3
 800f288:	2000      	movs	r0, #0
 800f28a:	e7e0      	b.n	800f24e <_raise_r+0x12>

0800f28c <raise>:
 800f28c:	4b02      	ldr	r3, [pc, #8]	; (800f298 <raise+0xc>)
 800f28e:	4601      	mov	r1, r0
 800f290:	6818      	ldr	r0, [r3, #0]
 800f292:	f7ff bfd3 	b.w	800f23c <_raise_r>
 800f296:	bf00      	nop
 800f298:	20000190 	.word	0x20000190

0800f29c <_kill_r>:
 800f29c:	b538      	push	{r3, r4, r5, lr}
 800f29e:	2300      	movs	r3, #0
 800f2a0:	4d06      	ldr	r5, [pc, #24]	; (800f2bc <_kill_r+0x20>)
 800f2a2:	4604      	mov	r4, r0
 800f2a4:	4608      	mov	r0, r1
 800f2a6:	4611      	mov	r1, r2
 800f2a8:	602b      	str	r3, [r5, #0]
 800f2aa:	f7f7 ff6b 	bl	8007184 <_kill>
 800f2ae:	1c43      	adds	r3, r0, #1
 800f2b0:	d102      	bne.n	800f2b8 <_kill_r+0x1c>
 800f2b2:	682b      	ldr	r3, [r5, #0]
 800f2b4:	b103      	cbz	r3, 800f2b8 <_kill_r+0x1c>
 800f2b6:	6023      	str	r3, [r4, #0]
 800f2b8:	bd38      	pop	{r3, r4, r5, pc}
 800f2ba:	bf00      	nop
 800f2bc:	20001a00 	.word	0x20001a00

0800f2c0 <_getpid_r>:
 800f2c0:	f7f7 bf5e 	b.w	8007180 <_getpid>

0800f2c4 <__sread>:
 800f2c4:	b510      	push	{r4, lr}
 800f2c6:	460c      	mov	r4, r1
 800f2c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2cc:	f000 f894 	bl	800f3f8 <_read_r>
 800f2d0:	2800      	cmp	r0, #0
 800f2d2:	bfab      	itete	ge
 800f2d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f2d6:	89a3      	ldrhlt	r3, [r4, #12]
 800f2d8:	181b      	addge	r3, r3, r0
 800f2da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f2de:	bfac      	ite	ge
 800f2e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f2e2:	81a3      	strhlt	r3, [r4, #12]
 800f2e4:	bd10      	pop	{r4, pc}

0800f2e6 <__swrite>:
 800f2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ea:	461f      	mov	r7, r3
 800f2ec:	898b      	ldrh	r3, [r1, #12]
 800f2ee:	4605      	mov	r5, r0
 800f2f0:	05db      	lsls	r3, r3, #23
 800f2f2:	460c      	mov	r4, r1
 800f2f4:	4616      	mov	r6, r2
 800f2f6:	d505      	bpl.n	800f304 <__swrite+0x1e>
 800f2f8:	2302      	movs	r3, #2
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f300:	f000 f868 	bl	800f3d4 <_lseek_r>
 800f304:	89a3      	ldrh	r3, [r4, #12]
 800f306:	4632      	mov	r2, r6
 800f308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f30c:	81a3      	strh	r3, [r4, #12]
 800f30e:	4628      	mov	r0, r5
 800f310:	463b      	mov	r3, r7
 800f312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f31a:	f000 b817 	b.w	800f34c <_write_r>

0800f31e <__sseek>:
 800f31e:	b510      	push	{r4, lr}
 800f320:	460c      	mov	r4, r1
 800f322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f326:	f000 f855 	bl	800f3d4 <_lseek_r>
 800f32a:	1c43      	adds	r3, r0, #1
 800f32c:	89a3      	ldrh	r3, [r4, #12]
 800f32e:	bf15      	itete	ne
 800f330:	6560      	strne	r0, [r4, #84]	; 0x54
 800f332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f33a:	81a3      	strheq	r3, [r4, #12]
 800f33c:	bf18      	it	ne
 800f33e:	81a3      	strhne	r3, [r4, #12]
 800f340:	bd10      	pop	{r4, pc}

0800f342 <__sclose>:
 800f342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f346:	f000 b813 	b.w	800f370 <_close_r>
	...

0800f34c <_write_r>:
 800f34c:	b538      	push	{r3, r4, r5, lr}
 800f34e:	4604      	mov	r4, r0
 800f350:	4608      	mov	r0, r1
 800f352:	4611      	mov	r1, r2
 800f354:	2200      	movs	r2, #0
 800f356:	4d05      	ldr	r5, [pc, #20]	; (800f36c <_write_r+0x20>)
 800f358:	602a      	str	r2, [r5, #0]
 800f35a:	461a      	mov	r2, r3
 800f35c:	f7f7 ff30 	bl	80071c0 <_write>
 800f360:	1c43      	adds	r3, r0, #1
 800f362:	d102      	bne.n	800f36a <_write_r+0x1e>
 800f364:	682b      	ldr	r3, [r5, #0]
 800f366:	b103      	cbz	r3, 800f36a <_write_r+0x1e>
 800f368:	6023      	str	r3, [r4, #0]
 800f36a:	bd38      	pop	{r3, r4, r5, pc}
 800f36c:	20001a00 	.word	0x20001a00

0800f370 <_close_r>:
 800f370:	b538      	push	{r3, r4, r5, lr}
 800f372:	2300      	movs	r3, #0
 800f374:	4d05      	ldr	r5, [pc, #20]	; (800f38c <_close_r+0x1c>)
 800f376:	4604      	mov	r4, r0
 800f378:	4608      	mov	r0, r1
 800f37a:	602b      	str	r3, [r5, #0]
 800f37c:	f7f7 ff2e 	bl	80071dc <_close>
 800f380:	1c43      	adds	r3, r0, #1
 800f382:	d102      	bne.n	800f38a <_close_r+0x1a>
 800f384:	682b      	ldr	r3, [r5, #0]
 800f386:	b103      	cbz	r3, 800f38a <_close_r+0x1a>
 800f388:	6023      	str	r3, [r4, #0]
 800f38a:	bd38      	pop	{r3, r4, r5, pc}
 800f38c:	20001a00 	.word	0x20001a00

0800f390 <_fstat_r>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	2300      	movs	r3, #0
 800f394:	4d06      	ldr	r5, [pc, #24]	; (800f3b0 <_fstat_r+0x20>)
 800f396:	4604      	mov	r4, r0
 800f398:	4608      	mov	r0, r1
 800f39a:	4611      	mov	r1, r2
 800f39c:	602b      	str	r3, [r5, #0]
 800f39e:	f7f7 ff21 	bl	80071e4 <_fstat>
 800f3a2:	1c43      	adds	r3, r0, #1
 800f3a4:	d102      	bne.n	800f3ac <_fstat_r+0x1c>
 800f3a6:	682b      	ldr	r3, [r5, #0]
 800f3a8:	b103      	cbz	r3, 800f3ac <_fstat_r+0x1c>
 800f3aa:	6023      	str	r3, [r4, #0]
 800f3ac:	bd38      	pop	{r3, r4, r5, pc}
 800f3ae:	bf00      	nop
 800f3b0:	20001a00 	.word	0x20001a00

0800f3b4 <_isatty_r>:
 800f3b4:	b538      	push	{r3, r4, r5, lr}
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	4d05      	ldr	r5, [pc, #20]	; (800f3d0 <_isatty_r+0x1c>)
 800f3ba:	4604      	mov	r4, r0
 800f3bc:	4608      	mov	r0, r1
 800f3be:	602b      	str	r3, [r5, #0]
 800f3c0:	f7f7 ff16 	bl	80071f0 <_isatty>
 800f3c4:	1c43      	adds	r3, r0, #1
 800f3c6:	d102      	bne.n	800f3ce <_isatty_r+0x1a>
 800f3c8:	682b      	ldr	r3, [r5, #0]
 800f3ca:	b103      	cbz	r3, 800f3ce <_isatty_r+0x1a>
 800f3cc:	6023      	str	r3, [r4, #0]
 800f3ce:	bd38      	pop	{r3, r4, r5, pc}
 800f3d0:	20001a00 	.word	0x20001a00

0800f3d4 <_lseek_r>:
 800f3d4:	b538      	push	{r3, r4, r5, lr}
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	4608      	mov	r0, r1
 800f3da:	4611      	mov	r1, r2
 800f3dc:	2200      	movs	r2, #0
 800f3de:	4d05      	ldr	r5, [pc, #20]	; (800f3f4 <_lseek_r+0x20>)
 800f3e0:	602a      	str	r2, [r5, #0]
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	f7f7 ff06 	bl	80071f4 <_lseek>
 800f3e8:	1c43      	adds	r3, r0, #1
 800f3ea:	d102      	bne.n	800f3f2 <_lseek_r+0x1e>
 800f3ec:	682b      	ldr	r3, [r5, #0]
 800f3ee:	b103      	cbz	r3, 800f3f2 <_lseek_r+0x1e>
 800f3f0:	6023      	str	r3, [r4, #0]
 800f3f2:	bd38      	pop	{r3, r4, r5, pc}
 800f3f4:	20001a00 	.word	0x20001a00

0800f3f8 <_read_r>:
 800f3f8:	b538      	push	{r3, r4, r5, lr}
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	4608      	mov	r0, r1
 800f3fe:	4611      	mov	r1, r2
 800f400:	2200      	movs	r2, #0
 800f402:	4d05      	ldr	r5, [pc, #20]	; (800f418 <_read_r+0x20>)
 800f404:	602a      	str	r2, [r5, #0]
 800f406:	461a      	mov	r2, r3
 800f408:	f7f7 fecc 	bl	80071a4 <_read>
 800f40c:	1c43      	adds	r3, r0, #1
 800f40e:	d102      	bne.n	800f416 <_read_r+0x1e>
 800f410:	682b      	ldr	r3, [r5, #0]
 800f412:	b103      	cbz	r3, 800f416 <_read_r+0x1e>
 800f414:	6023      	str	r3, [r4, #0]
 800f416:	bd38      	pop	{r3, r4, r5, pc}
 800f418:	20001a00 	.word	0x20001a00

0800f41c <_init>:
 800f41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41e:	bf00      	nop
 800f420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f422:	bc08      	pop	{r3}
 800f424:	469e      	mov	lr, r3
 800f426:	4770      	bx	lr

0800f428 <_fini>:
 800f428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f42a:	bf00      	nop
 800f42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f42e:	bc08      	pop	{r3}
 800f430:	469e      	mov	lr, r3
 800f432:	4770      	bx	lr
