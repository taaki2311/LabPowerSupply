
SecondaryBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c08  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08006d48  08006d48  00016d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800717c  0800717c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007184  08007184  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007184  08007184  00017184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800718c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001e4  08007370  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08007370  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9a0  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002357  00000000  00000000  0002bbad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005fb9  00000000  00000000  0002df04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  00033ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f8  00000000  00000000  000346b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015198  00000000  00000000  000358a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d81d  00000000  00000000  0004aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000804f8  00000000  00000000  0005825d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d8755  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002aec  00000000  00000000  000d87a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	08006d30 	.word	0x08006d30

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	08006d30 	.word	0x08006d30

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2uiz>:
 8001100:	0042      	lsls	r2, r0, #1
 8001102:	d20e      	bcs.n	8001122 <__aeabi_f2uiz+0x22>
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001108:	d30b      	bcc.n	8001122 <__aeabi_f2uiz+0x22>
 800110a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d409      	bmi.n	8001128 <__aeabi_f2uiz+0x28>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr
 8001128:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800112c:	d101      	bne.n	8001132 <__aeabi_f2uiz+0x32>
 800112e:	0242      	lsls	r2, r0, #9
 8001130:	d102      	bne.n	8001138 <__aeabi_f2uiz+0x38>
 8001132:	f04f 30ff 	mov.w	r0, #4294967295
 8001136:	4770      	bx	lr
 8001138:	f04f 0000 	mov.w	r0, #0
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <__aeabi_uldivmod>:
 8001140:	b953      	cbnz	r3, 8001158 <__aeabi_uldivmod+0x18>
 8001142:	b94a      	cbnz	r2, 8001158 <__aeabi_uldivmod+0x18>
 8001144:	2900      	cmp	r1, #0
 8001146:	bf08      	it	eq
 8001148:	2800      	cmpeq	r0, #0
 800114a:	bf1c      	itt	ne
 800114c:	f04f 31ff 	movne.w	r1, #4294967295
 8001150:	f04f 30ff 	movne.w	r0, #4294967295
 8001154:	f000 b976 	b.w	8001444 <__aeabi_idiv0>
 8001158:	f1ad 0c08 	sub.w	ip, sp, #8
 800115c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001160:	f000 f806 	bl	8001170 <__udivmoddi4>
 8001164:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800116c:	b004      	add	sp, #16
 800116e:	4770      	bx	lr

08001170 <__udivmoddi4>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	9e08      	ldr	r6, [sp, #32]
 8001176:	460d      	mov	r5, r1
 8001178:	4604      	mov	r4, r0
 800117a:	4688      	mov	r8, r1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14d      	bne.n	800121c <__udivmoddi4+0xac>
 8001180:	428a      	cmp	r2, r1
 8001182:	4694      	mov	ip, r2
 8001184:	d968      	bls.n	8001258 <__udivmoddi4+0xe8>
 8001186:	fab2 f282 	clz	r2, r2
 800118a:	b152      	cbz	r2, 80011a2 <__udivmoddi4+0x32>
 800118c:	fa01 f302 	lsl.w	r3, r1, r2
 8001190:	f1c2 0120 	rsb	r1, r2, #32
 8001194:	fa20 f101 	lsr.w	r1, r0, r1
 8001198:	fa0c fc02 	lsl.w	ip, ip, r2
 800119c:	ea41 0803 	orr.w	r8, r1, r3
 80011a0:	4094      	lsls	r4, r2
 80011a2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80011a6:	fbb8 f7f1 	udiv	r7, r8, r1
 80011aa:	fa1f fe8c 	uxth.w	lr, ip
 80011ae:	fb01 8817 	mls	r8, r1, r7, r8
 80011b2:	fb07 f00e 	mul.w	r0, r7, lr
 80011b6:	0c23      	lsrs	r3, r4, #16
 80011b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011bc:	4298      	cmp	r0, r3
 80011be:	d90a      	bls.n	80011d6 <__udivmoddi4+0x66>
 80011c0:	eb1c 0303 	adds.w	r3, ip, r3
 80011c4:	f107 35ff 	add.w	r5, r7, #4294967295
 80011c8:	f080 811e 	bcs.w	8001408 <__udivmoddi4+0x298>
 80011cc:	4298      	cmp	r0, r3
 80011ce:	f240 811b 	bls.w	8001408 <__udivmoddi4+0x298>
 80011d2:	3f02      	subs	r7, #2
 80011d4:	4463      	add	r3, ip
 80011d6:	1a1b      	subs	r3, r3, r0
 80011d8:	fbb3 f0f1 	udiv	r0, r3, r1
 80011dc:	fb01 3310 	mls	r3, r1, r0, r3
 80011e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80011e4:	b2a4      	uxth	r4, r4
 80011e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011ea:	45a6      	cmp	lr, r4
 80011ec:	d90a      	bls.n	8001204 <__udivmoddi4+0x94>
 80011ee:	eb1c 0404 	adds.w	r4, ip, r4
 80011f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80011f6:	f080 8109 	bcs.w	800140c <__udivmoddi4+0x29c>
 80011fa:	45a6      	cmp	lr, r4
 80011fc:	f240 8106 	bls.w	800140c <__udivmoddi4+0x29c>
 8001200:	4464      	add	r4, ip
 8001202:	3802      	subs	r0, #2
 8001204:	2100      	movs	r1, #0
 8001206:	eba4 040e 	sub.w	r4, r4, lr
 800120a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800120e:	b11e      	cbz	r6, 8001218 <__udivmoddi4+0xa8>
 8001210:	2300      	movs	r3, #0
 8001212:	40d4      	lsrs	r4, r2
 8001214:	e9c6 4300 	strd	r4, r3, [r6]
 8001218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800121c:	428b      	cmp	r3, r1
 800121e:	d908      	bls.n	8001232 <__udivmoddi4+0xc2>
 8001220:	2e00      	cmp	r6, #0
 8001222:	f000 80ee 	beq.w	8001402 <__udivmoddi4+0x292>
 8001226:	2100      	movs	r1, #0
 8001228:	e9c6 0500 	strd	r0, r5, [r6]
 800122c:	4608      	mov	r0, r1
 800122e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001232:	fab3 f183 	clz	r1, r3
 8001236:	2900      	cmp	r1, #0
 8001238:	d14a      	bne.n	80012d0 <__udivmoddi4+0x160>
 800123a:	42ab      	cmp	r3, r5
 800123c:	d302      	bcc.n	8001244 <__udivmoddi4+0xd4>
 800123e:	4282      	cmp	r2, r0
 8001240:	f200 80fc 	bhi.w	800143c <__udivmoddi4+0x2cc>
 8001244:	1a84      	subs	r4, r0, r2
 8001246:	eb65 0303 	sbc.w	r3, r5, r3
 800124a:	2001      	movs	r0, #1
 800124c:	4698      	mov	r8, r3
 800124e:	2e00      	cmp	r6, #0
 8001250:	d0e2      	beq.n	8001218 <__udivmoddi4+0xa8>
 8001252:	e9c6 4800 	strd	r4, r8, [r6]
 8001256:	e7df      	b.n	8001218 <__udivmoddi4+0xa8>
 8001258:	b902      	cbnz	r2, 800125c <__udivmoddi4+0xec>
 800125a:	deff      	udf	#255	; 0xff
 800125c:	fab2 f282 	clz	r2, r2
 8001260:	2a00      	cmp	r2, #0
 8001262:	f040 8091 	bne.w	8001388 <__udivmoddi4+0x218>
 8001266:	eba1 000c 	sub.w	r0, r1, ip
 800126a:	2101      	movs	r1, #1
 800126c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001270:	fa1f fe8c 	uxth.w	lr, ip
 8001274:	fbb0 f3f7 	udiv	r3, r0, r7
 8001278:	fb07 0013 	mls	r0, r7, r3, r0
 800127c:	0c25      	lsrs	r5, r4, #16
 800127e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001282:	fb0e f003 	mul.w	r0, lr, r3
 8001286:	42a8      	cmp	r0, r5
 8001288:	d908      	bls.n	800129c <__udivmoddi4+0x12c>
 800128a:	eb1c 0505 	adds.w	r5, ip, r5
 800128e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001292:	d202      	bcs.n	800129a <__udivmoddi4+0x12a>
 8001294:	42a8      	cmp	r0, r5
 8001296:	f200 80ce 	bhi.w	8001436 <__udivmoddi4+0x2c6>
 800129a:	4643      	mov	r3, r8
 800129c:	1a2d      	subs	r5, r5, r0
 800129e:	fbb5 f0f7 	udiv	r0, r5, r7
 80012a2:	fb07 5510 	mls	r5, r7, r0, r5
 80012a6:	fb0e fe00 	mul.w	lr, lr, r0
 80012aa:	b2a4      	uxth	r4, r4
 80012ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012b0:	45a6      	cmp	lr, r4
 80012b2:	d908      	bls.n	80012c6 <__udivmoddi4+0x156>
 80012b4:	eb1c 0404 	adds.w	r4, ip, r4
 80012b8:	f100 35ff 	add.w	r5, r0, #4294967295
 80012bc:	d202      	bcs.n	80012c4 <__udivmoddi4+0x154>
 80012be:	45a6      	cmp	lr, r4
 80012c0:	f200 80b6 	bhi.w	8001430 <__udivmoddi4+0x2c0>
 80012c4:	4628      	mov	r0, r5
 80012c6:	eba4 040e 	sub.w	r4, r4, lr
 80012ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012ce:	e79e      	b.n	800120e <__udivmoddi4+0x9e>
 80012d0:	f1c1 0720 	rsb	r7, r1, #32
 80012d4:	408b      	lsls	r3, r1
 80012d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80012da:	ea4c 0c03 	orr.w	ip, ip, r3
 80012de:	fa25 fa07 	lsr.w	sl, r5, r7
 80012e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012e6:	fbba f8f9 	udiv	r8, sl, r9
 80012ea:	fa20 f307 	lsr.w	r3, r0, r7
 80012ee:	fb09 aa18 	mls	sl, r9, r8, sl
 80012f2:	408d      	lsls	r5, r1
 80012f4:	fa1f fe8c 	uxth.w	lr, ip
 80012f8:	431d      	orrs	r5, r3
 80012fa:	fa00 f301 	lsl.w	r3, r0, r1
 80012fe:	fb08 f00e 	mul.w	r0, r8, lr
 8001302:	0c2c      	lsrs	r4, r5, #16
 8001304:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001308:	42a0      	cmp	r0, r4
 800130a:	fa02 f201 	lsl.w	r2, r2, r1
 800130e:	d90b      	bls.n	8001328 <__udivmoddi4+0x1b8>
 8001310:	eb1c 0404 	adds.w	r4, ip, r4
 8001314:	f108 3aff 	add.w	sl, r8, #4294967295
 8001318:	f080 8088 	bcs.w	800142c <__udivmoddi4+0x2bc>
 800131c:	42a0      	cmp	r0, r4
 800131e:	f240 8085 	bls.w	800142c <__udivmoddi4+0x2bc>
 8001322:	f1a8 0802 	sub.w	r8, r8, #2
 8001326:	4464      	add	r4, ip
 8001328:	1a24      	subs	r4, r4, r0
 800132a:	fbb4 f0f9 	udiv	r0, r4, r9
 800132e:	fb09 4410 	mls	r4, r9, r0, r4
 8001332:	fb00 fe0e 	mul.w	lr, r0, lr
 8001336:	b2ad      	uxth	r5, r5
 8001338:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800133c:	45a6      	cmp	lr, r4
 800133e:	d908      	bls.n	8001352 <__udivmoddi4+0x1e2>
 8001340:	eb1c 0404 	adds.w	r4, ip, r4
 8001344:	f100 35ff 	add.w	r5, r0, #4294967295
 8001348:	d26c      	bcs.n	8001424 <__udivmoddi4+0x2b4>
 800134a:	45a6      	cmp	lr, r4
 800134c:	d96a      	bls.n	8001424 <__udivmoddi4+0x2b4>
 800134e:	3802      	subs	r0, #2
 8001350:	4464      	add	r4, ip
 8001352:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001356:	fba0 9502 	umull	r9, r5, r0, r2
 800135a:	eba4 040e 	sub.w	r4, r4, lr
 800135e:	42ac      	cmp	r4, r5
 8001360:	46c8      	mov	r8, r9
 8001362:	46ae      	mov	lr, r5
 8001364:	d356      	bcc.n	8001414 <__udivmoddi4+0x2a4>
 8001366:	d053      	beq.n	8001410 <__udivmoddi4+0x2a0>
 8001368:	2e00      	cmp	r6, #0
 800136a:	d069      	beq.n	8001440 <__udivmoddi4+0x2d0>
 800136c:	ebb3 0208 	subs.w	r2, r3, r8
 8001370:	eb64 040e 	sbc.w	r4, r4, lr
 8001374:	fa22 f301 	lsr.w	r3, r2, r1
 8001378:	fa04 f707 	lsl.w	r7, r4, r7
 800137c:	431f      	orrs	r7, r3
 800137e:	40cc      	lsrs	r4, r1
 8001380:	e9c6 7400 	strd	r7, r4, [r6]
 8001384:	2100      	movs	r1, #0
 8001386:	e747      	b.n	8001218 <__udivmoddi4+0xa8>
 8001388:	fa0c fc02 	lsl.w	ip, ip, r2
 800138c:	f1c2 0120 	rsb	r1, r2, #32
 8001390:	fa25 f301 	lsr.w	r3, r5, r1
 8001394:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001398:	fa20 f101 	lsr.w	r1, r0, r1
 800139c:	4095      	lsls	r5, r2
 800139e:	430d      	orrs	r5, r1
 80013a0:	fbb3 f1f7 	udiv	r1, r3, r7
 80013a4:	fb07 3311 	mls	r3, r7, r1, r3
 80013a8:	fa1f fe8c 	uxth.w	lr, ip
 80013ac:	0c28      	lsrs	r0, r5, #16
 80013ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013b2:	fb01 f30e 	mul.w	r3, r1, lr
 80013b6:	4283      	cmp	r3, r0
 80013b8:	fa04 f402 	lsl.w	r4, r4, r2
 80013bc:	d908      	bls.n	80013d0 <__udivmoddi4+0x260>
 80013be:	eb1c 0000 	adds.w	r0, ip, r0
 80013c2:	f101 38ff 	add.w	r8, r1, #4294967295
 80013c6:	d22f      	bcs.n	8001428 <__udivmoddi4+0x2b8>
 80013c8:	4283      	cmp	r3, r0
 80013ca:	d92d      	bls.n	8001428 <__udivmoddi4+0x2b8>
 80013cc:	3902      	subs	r1, #2
 80013ce:	4460      	add	r0, ip
 80013d0:	1ac0      	subs	r0, r0, r3
 80013d2:	fbb0 f3f7 	udiv	r3, r0, r7
 80013d6:	fb07 0013 	mls	r0, r7, r3, r0
 80013da:	b2ad      	uxth	r5, r5
 80013dc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80013e0:	fb03 f00e 	mul.w	r0, r3, lr
 80013e4:	42a8      	cmp	r0, r5
 80013e6:	d908      	bls.n	80013fa <__udivmoddi4+0x28a>
 80013e8:	eb1c 0505 	adds.w	r5, ip, r5
 80013ec:	f103 38ff 	add.w	r8, r3, #4294967295
 80013f0:	d216      	bcs.n	8001420 <__udivmoddi4+0x2b0>
 80013f2:	42a8      	cmp	r0, r5
 80013f4:	d914      	bls.n	8001420 <__udivmoddi4+0x2b0>
 80013f6:	3b02      	subs	r3, #2
 80013f8:	4465      	add	r5, ip
 80013fa:	1a28      	subs	r0, r5, r0
 80013fc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001400:	e738      	b.n	8001274 <__udivmoddi4+0x104>
 8001402:	4631      	mov	r1, r6
 8001404:	4630      	mov	r0, r6
 8001406:	e707      	b.n	8001218 <__udivmoddi4+0xa8>
 8001408:	462f      	mov	r7, r5
 800140a:	e6e4      	b.n	80011d6 <__udivmoddi4+0x66>
 800140c:	4618      	mov	r0, r3
 800140e:	e6f9      	b.n	8001204 <__udivmoddi4+0x94>
 8001410:	454b      	cmp	r3, r9
 8001412:	d2a9      	bcs.n	8001368 <__udivmoddi4+0x1f8>
 8001414:	ebb9 0802 	subs.w	r8, r9, r2
 8001418:	eb65 0e0c 	sbc.w	lr, r5, ip
 800141c:	3801      	subs	r0, #1
 800141e:	e7a3      	b.n	8001368 <__udivmoddi4+0x1f8>
 8001420:	4643      	mov	r3, r8
 8001422:	e7ea      	b.n	80013fa <__udivmoddi4+0x28a>
 8001424:	4628      	mov	r0, r5
 8001426:	e794      	b.n	8001352 <__udivmoddi4+0x1e2>
 8001428:	4641      	mov	r1, r8
 800142a:	e7d1      	b.n	80013d0 <__udivmoddi4+0x260>
 800142c:	46d0      	mov	r8, sl
 800142e:	e77b      	b.n	8001328 <__udivmoddi4+0x1b8>
 8001430:	4464      	add	r4, ip
 8001432:	3802      	subs	r0, #2
 8001434:	e747      	b.n	80012c6 <__udivmoddi4+0x156>
 8001436:	3b02      	subs	r3, #2
 8001438:	4465      	add	r5, ip
 800143a:	e72f      	b.n	800129c <__udivmoddi4+0x12c>
 800143c:	4608      	mov	r0, r1
 800143e:	e706      	b.n	800124e <__udivmoddi4+0xde>
 8001440:	4631      	mov	r1, r6
 8001442:	e6e9      	b.n	8001218 <__udivmoddi4+0xa8>

08001444 <__aeabi_idiv0>:
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <MX_ADC_Init>:
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 5;
 8001448:	2105      	movs	r1, #5
  ADC_ChannelConfTypeDef sConfig = {0};
 800144a:	2300      	movs	r3, #0
{
 800144c:	b5f0      	push	{r4, r5, r6, r7, lr}
  hadc.Instance = ADC1;
 800144e:	4c2f      	ldr	r4, [pc, #188]	; (800150c <MX_ADC_Init+0xc4>)
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001450:	f44f 7080 	mov.w	r0, #256	; 0x100
  hadc.Init.ContinuousConvMode = ENABLE;
 8001454:	2201      	movs	r2, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001456:	f44f 3500 	mov.w	r5, #131072	; 0x20000
  hadc.Init.NbrOfConversion = 5;
 800145a:	62a1      	str	r1, [r4, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800145c:	2110      	movs	r1, #16
{
 800145e:	b085      	sub	sp, #20
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001460:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001464:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001468:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 800146c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001470:	9300      	str	r3, [sp, #0]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001472:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001476:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Instance = ADC1;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_ADC_Init+0xc8>)
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800147a:	6120      	str	r0, [r4, #16]
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800147c:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800147e:	6065      	str	r5, [r4, #4]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001480:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001484:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  hadc.Instance = ADC1;
 8001488:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148a:	6361      	str	r1, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800148c:	f000 ff50 	bl	8002330 <HAL_ADC_Init>
 8001490:	b108      	cbz	r0, 8001496 <MX_ADC_Init+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001492:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	e7fe      	b.n	8001494 <MX_ADC_Init+0x4c>
  sConfig.Channel = ADC_CHANNEL_0;
 8001496:	2600      	movs	r6, #0
 8001498:	2701      	movs	r7, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 800149a:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800149c:	4669      	mov	r1, sp
 800149e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 80014a0:	e9cd 6700 	strd	r6, r7, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 80014a4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014a6:	f001 f8eb 	bl	8002680 <HAL_ADC_ConfigChannel>
 80014aa:	b108      	cbz	r0, 80014b0 <MX_ADC_Init+0x68>
 80014ac:	b672      	cpsid	i
  while (1)
 80014ae:	e7fe      	b.n	80014ae <MX_ADC_Init+0x66>
  sConfig.Channel = ADC_CHANNEL_1;
 80014b0:	2201      	movs	r2, #1
 80014b2:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014b4:	4669      	mov	r1, sp
 80014b6:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80014b8:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014bc:	f001 f8e0 	bl	8002680 <HAL_ADC_ConfigChannel>
 80014c0:	b108      	cbz	r0, 80014c6 <MX_ADC_Init+0x7e>
 80014c2:	b672      	cpsid	i
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MX_ADC_Init+0x7c>
  sConfig.Channel = ADC_CHANNEL_2;
 80014c6:	2202      	movs	r2, #2
 80014c8:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014ca:	4669      	mov	r1, sp
 80014cc:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80014ce:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014d2:	f001 f8d5 	bl	8002680 <HAL_ADC_ConfigChannel>
 80014d6:	b108      	cbz	r0, 80014dc <MX_ADC_Init+0x94>
 80014d8:	b672      	cpsid	i
  while (1)
 80014da:	e7fe      	b.n	80014da <MX_ADC_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_3;
 80014dc:	2203      	movs	r2, #3
 80014de:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014e0:	4669      	mov	r1, sp
 80014e2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80014e4:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014e8:	f001 f8ca 	bl	8002680 <HAL_ADC_ConfigChannel>
 80014ec:	b108      	cbz	r0, 80014f2 <MX_ADC_Init+0xaa>
 80014ee:	b672      	cpsid	i
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MX_ADC_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014f2:	2211      	movs	r2, #17
 80014f4:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014f6:	4669      	mov	r1, sp
 80014f8:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014fa:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014fe:	f001 f8bf 	bl	8002680 <HAL_ADC_ConfigChannel>
 8001502:	b108      	cbz	r0, 8001508 <MX_ADC_Init+0xc0>
 8001504:	b672      	cpsid	i
  while (1)
 8001506:	e7fe      	b.n	8001506 <MX_ADC_Init+0xbe>
}
 8001508:	b005      	add	sp, #20
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	20000240 	.word	0x20000240
 8001510:	40012400 	.word	0x40012400

08001514 <SystemClock_Config>:
{
 8001514:	b530      	push	{r4, r5, lr}
 8001516:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001518:	2230      	movs	r2, #48	; 0x30
 800151a:	2100      	movs	r1, #0
 800151c:	a807      	add	r0, sp, #28
 800151e:	f002 fd11 	bl	8003f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001522:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001524:	2512      	movs	r5, #18
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001526:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	e9cd 3300 	strd	r3, r3, [sp]
 800152c:	e9cd 3302 	strd	r3, r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001530:	4a16      	ldr	r2, [pc, #88]	; (800158c <SystemClock_Config+0x78>)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001532:	9304      	str	r3, [sp, #16]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001534:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001536:	2110      	movs	r1, #16
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001538:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800153c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001540:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001542:	2201      	movs	r2, #1
 8001544:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001546:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001548:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800154a:	2500      	movs	r5, #0
 800154c:	f44f 4420 	mov.w	r4, #40960	; 0xa000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001550:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001552:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001556:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800155a:	910a      	str	r1, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	f001 fdfa 	bl	8003154 <HAL_RCC_OscConfig>
 8001560:	b108      	cbz	r0, 8001566 <SystemClock_Config+0x52>
 8001562:	b672      	cpsid	i
  while (1)
 8001564:	e7fe      	b.n	8001564 <SystemClock_Config+0x50>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001566:	4601      	mov	r1, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001568:	220f      	movs	r2, #15
 800156a:	2300      	movs	r3, #0
 800156c:	2400      	movs	r4, #0
 800156e:	2500      	movs	r5, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001570:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001576:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157a:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800157c:	f002 f84a 	bl	8003614 <HAL_RCC_ClockConfig>
 8001580:	b108      	cbz	r0, 8001586 <SystemClock_Config+0x72>
 8001582:	b672      	cpsid	i
  while (1)
 8001584:	e7fe      	b.n	8001584 <SystemClock_Config+0x70>
}
 8001586:	b015      	add	sp, #84	; 0x54
 8001588:	bd30      	pop	{r4, r5, pc}
 800158a:	bf00      	nop
 800158c:	40007000 	.word	0x40007000

08001590 <our_init>:
void our_init(void){
 8001590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_ADC_DeInit(&hadc);
 8001594:	4f3d      	ldr	r7, [pc, #244]	; (800168c <our_init+0xfc>)
void our_init(void){
 8001596:	b089      	sub	sp, #36	; 0x24
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001598:	2201      	movs	r2, #1
 800159a:	2140      	movs	r1, #64	; 0x40
 800159c:	483c      	ldr	r0, [pc, #240]	; (8001690 <our_init+0x100>)
 800159e:	f001 fd93 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 80015a2:	4638      	mov	r0, r7
 80015a4:	f000 ff94 	bl	80024d0 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 80015a8:	483a      	ldr	r0, [pc, #232]	; (8001694 <our_init+0x104>)
 80015aa:	f001 fb0d 	bl	8002bc8 <HAL_DMA_DeInit>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <our_init+0x108>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015b2:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015b4:	69d9      	ldr	r1, [r3, #28]
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80015b6:	4d39      	ldr	r5, [pc, #228]	; (800169c <our_init+0x10c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015b8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80015bc:	61d9      	str	r1, [r3, #28]
 80015be:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015c0:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015c6:	9307      	str	r3, [sp, #28]
 80015c8:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015ca:	f001 f9db 	bl	8002984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015ce:	200b      	movs	r0, #11
 80015d0:	f001 fa16 	bl	8002a00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	200e      	movs	r0, #14
 80015d8:	4611      	mov	r1, r2
 80015da:	f001 f9d3 	bl	8002984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80015de:	200e      	movs	r0, #14
 80015e0:	f001 fa0e 	bl	8002a00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	200f      	movs	r0, #15
 80015e8:	4611      	mov	r1, r2
 80015ea:	f001 f9cb 	bl	8002984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015ee:	200f      	movs	r0, #15
 80015f0:	f001 fa06 	bl	8002a00 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 80015f4:	f7ff ff28 	bl	8001448 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adcvalues, 5);// start the adc in dma mode
 80015f8:	2205      	movs	r2, #5
 80015fa:	4638      	mov	r0, r7
 80015fc:	4928      	ldr	r1, [pc, #160]	; (80016a0 <our_init+0x110>)
 80015fe:	f001 f951 	bl	80028a4 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001602:	2100      	movs	r1, #0
 8001604:	4628      	mov	r0, r5
 8001606:	f001 fa37 	bl	8002a78 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800160a:	2110      	movs	r1, #16
 800160c:	4628      	mov	r0, r5
 800160e:	f001 fa33 	bl	8002a78 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001612:	2300      	movs	r3, #0
 8001614:	4628      	mov	r0, r5
 8001616:	461a      	mov	r2, r3
 8001618:	4619      	mov	r1, r3
 800161a:	f001 fa5d 	bl	8002ad8 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 800161e:	2300      	movs	r3, #0
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001620:	2440      	movs	r4, #64	; 0x40
 8001622:	4e20      	ldr	r6, [pc, #128]	; (80016a4 <our_init+0x114>)
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001624:	461a      	mov	r2, r3
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001626:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80016a8 <our_init+0x118>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 800162a:	4628      	mov	r0, r5
 800162c:	2110      	movs	r1, #16
 800162e:	f001 fa53 	bl	8002ad8 <HAL_DAC_SetValue>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001632:	4622      	mov	r2, r4
 8001634:	2100      	movs	r1, #0
 8001636:	4630      	mov	r0, r6
 8001638:	f002 fc84 	bl	8003f44 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 800163c:	4622      	mov	r2, r4
 800163e:	2100      	movs	r1, #0
 8001640:	4648      	mov	r0, r9
 8001642:	f002 fc7f 	bl	8003f44 <memset>
	snprintf((char*)txbuffer, 26, "*STRT,%5.2f,%5.3f,%d,FNSH!", lin_num, cur_num, chstat);
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <our_init+0x11c>)
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001648:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80016b0 <our_init+0x120>
	snprintf((char*)txbuffer, 26, "*STRT,%5.2f,%5.3f,%d,FNSH!", lin_num, cur_num, chstat);
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	9304      	str	r3, [sp, #16]
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <our_init+0x124>)
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	f7fe ff00 	bl	8000458 <__aeabi_f2d>
 8001658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800165c:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <our_init+0x128>)
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	f7fe fefa 	bl	8000458 <__aeabi_f2d>
 8001664:	4a15      	ldr	r2, [pc, #84]	; (80016bc <our_init+0x12c>)
 8001666:	e9cd 0100 	strd	r0, r1, [sp]
 800166a:	211a      	movs	r1, #26
 800166c:	4630      	mov	r0, r6
 800166e:	f003 f8d1 	bl	8004814 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001672:	4622      	mov	r2, r4
 8001674:	4631      	mov	r1, r6
 8001676:	4640      	mov	r0, r8
 8001678:	f002 f982 	bl	8003980 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 800167c:	4622      	mov	r2, r4
 800167e:	4649      	mov	r1, r9
 8001680:	4640      	mov	r0, r8
}
 8001682:	b009      	add	sp, #36	; 0x24
 8001684:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001688:	f002 b9b6 	b.w	80039f8 <HAL_UART_Receive_DMA>
 800168c:	20000240 	.word	0x20000240
 8001690:	40020000 	.word	0x40020000
 8001694:	200002a8 	.word	0x200002a8
 8001698:	40023800 	.word	0x40023800
 800169c:	20000294 	.word	0x20000294
 80016a0:	20000214 	.word	0x20000214
 80016a4:	20000408 	.word	0x20000408
 80016a8:	200003c4 	.word	0x200003c4
 80016ac:	20000224 	.word	0x20000224
 80016b0:	20000374 	.word	0x20000374
 80016b4:	20000230 	.word	0x20000230
 80016b8:	200003bc 	.word	0x200003bc
 80016bc:	08006d48 	.word	0x08006d48

080016c0 <main>:
{
 80016c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	2400      	movs	r4, #0
{
 80016c6:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80016c8:	f000 fe10 	bl	80022ec <HAL_Init>
  SystemClock_Config();
 80016cc:	f7ff ff22 	bl	8001514 <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80016d0:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80016d6:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016da:	4d33      	ldr	r5, [pc, #204]	; (80017a8 <main+0xe8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016de:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80016e0:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e2:	f043 0320 	orr.w	r3, r3, #32
 80016e6:	61eb      	str	r3, [r5, #28]
 80016e8:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80016ea:	4830      	ldr	r0, [pc, #192]	; (80017ac <main+0xec>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ec:	f003 0320 	and.w	r3, r3, #32
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 80016f6:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61eb      	str	r3, [r5, #28]
 80016fc:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 80016fe:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001700:	4013      	ands	r3, r2
 8001702:	9303      	str	r3, [sp, #12]
 8001704:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001706:	f001 fcdf 	bl	80030c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 800170a:	2240      	movs	r2, #64	; 0x40
 800170c:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 800170e:	4827      	ldr	r0, [pc, #156]	; (80017ac <main+0xec>)
 8001710:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001712:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001716:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 800171a:	f001 fb6b 	bl	8002df4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800171e:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001720:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001726:	61eb      	str	r3, [r5, #28]
 8001728:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800172a:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800172c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001730:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001736:	f001 f925 	bl	8002984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800173a:	200b      	movs	r0, #11
 800173c:	f001 f960 	bl	8002a00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001740:	4622      	mov	r2, r4
 8001742:	4621      	mov	r1, r4
 8001744:	200e      	movs	r0, #14
 8001746:	f001 f91d 	bl	8002984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800174a:	200e      	movs	r0, #14
 800174c:	f001 f958 	bl	8002a00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001750:	4622      	mov	r2, r4
 8001752:	4621      	mov	r1, r4
 8001754:	200f      	movs	r0, #15
 8001756:	f001 f915 	bl	8002984 <HAL_NVIC_SetPriority>
  hdac.Instance = DAC;
 800175a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80017b0 <main+0xf0>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800175e:	200f      	movs	r0, #15
 8001760:	f001 f94e 	bl	8002a00 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 8001764:	f7ff fe70 	bl	8001448 <MX_ADC_Init>
  hdac.Instance = DAC;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <main+0xf4>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800176a:	4640      	mov	r0, r8
  DAC_ChannelConfTypeDef sConfig = {0};
 800176c:	e9cd 4404 	strd	r4, r4, [sp, #16]
  hdac.Instance = DAC;
 8001770:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001774:	f001 f96a 	bl	8002a4c <HAL_DAC_Init>
 8001778:	b108      	cbz	r0, 800177e <main+0xbe>
 800177a:	b672      	cpsid	i
  while (1)
 800177c:	e7fe      	b.n	800177c <main+0xbc>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800177e:	4602      	mov	r2, r0
 8001780:	a904      	add	r1, sp, #16
 8001782:	4640      	mov	r0, r8
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001784:	e9cd 6704 	strd	r6, r7, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001788:	f001 f9bc 	bl	8002b04 <HAL_DAC_ConfigChannel>
 800178c:	b108      	cbz	r0, 8001792 <main+0xd2>
 800178e:	b672      	cpsid	i
  while (1)
 8001790:	e7fe      	b.n	8001790 <main+0xd0>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001792:	2210      	movs	r2, #16
 8001794:	4640      	mov	r0, r8
 8001796:	eb0d 0102 	add.w	r1, sp, r2
 800179a:	f001 f9b3 	bl	8002b04 <HAL_DAC_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	b150      	cbz	r0, 80017b8 <main+0xf8>
 80017a2:	b672      	cpsid	i
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <main+0xe4>
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	20000294 	.word	0x20000294
 80017b4:	40007400 	.word	0x40007400
  huart1.Instance = USART1;
 80017b8:	48a7      	ldr	r0, [pc, #668]	; (8001a58 <main+0x398>)
  huart1.Init.Parity = UART_PARITY_ODD;
 80017ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  huart1.Init.BaudRate = 4800;
 80017be:	f44f 5496 	mov.w	r4, #4800	; 0x12c0
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80017c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017cc:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_ODD;
 80017ce:	6102      	str	r2, [r0, #16]
  huart1.Instance = USART1;
 80017d0:	4aa2      	ldr	r2, [pc, #648]	; (8001a5c <main+0x39c>)
  huart1.Init.BaudRate = 4800;
 80017d2:	6044      	str	r4, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80017d4:	6081      	str	r1, [r0, #8]
  huart1.Instance = USART1;
 80017d6:	6002      	str	r2, [r0, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017d8:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017da:	f002 f847 	bl	800386c <HAL_UART_Init>
 80017de:	4604      	mov	r4, r0
 80017e0:	2800      	cmp	r0, #0
 80017e2:	f040 812a 	bne.w	8001a3a <main+0x37a>
	  if(voltnum1 <= 0.00){
 80017e6:	f04f 0a00 	mov.w	sl, #0
  our_init();
 80017ea:	f7ff fed1 	bl	8001590 <our_init>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095);
 80017ee:	f640 73ff 	movw	r3, #4095	; 0xfff
 80017f2:	4622      	mov	r2, r4
 80017f4:	2110      	movs	r1, #16
 80017f6:	4640      	mov	r0, r8
 80017f8:	f001 f96e 	bl	8002ad8 <HAL_DAC_SetValue>
  adc_current = &adcvalues[2];
 80017fc:	4b98      	ldr	r3, [pc, #608]	; (8001a60 <main+0x3a0>)
 80017fe:	4999      	ldr	r1, [pc, #612]	; (8001a64 <main+0x3a4>)
 8001800:	1d1a      	adds	r2, r3, #4
 8001802:	600a      	str	r2, [r1, #0]
  adc_opamp = &adcvalues[0];
 8001804:	4a98      	ldr	r2, [pc, #608]	; (8001a68 <main+0x3a8>)
  adc_linear = &adcvalues[1];
 8001806:	4999      	ldr	r1, [pc, #612]	; (8001a6c <main+0x3ac>)
  adc_opamp = &adcvalues[0];
 8001808:	6013      	str	r3, [r2, #0]
  adc_linear = &adcvalues[1];
 800180a:	1c9a      	adds	r2, r3, #2
 800180c:	600a      	str	r2, [r1, #0]
  adc_switching = &adcvalues[3];
 800180e:	4998      	ldr	r1, [pc, #608]	; (8001a70 <main+0x3b0>)
 8001810:	1d9a      	adds	r2, r3, #6
 8001812:	600a      	str	r2, [r1, #0]
  adc_vref = &adcvalues[4];
 8001814:	4a97      	ldr	r2, [pc, #604]	; (8001a74 <main+0x3b4>)
 8001816:	3308      	adds	r3, #8
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)*adc_vref);
 8001818:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8001a78 <main+0x3b8>
  adc_vref = &adcvalues[4];
 800181c:	6013      	str	r3, [r2, #0]
	  if(voltnum1 <= 0.00){
 800181e:	4b97      	ldr	r3, [pc, #604]	; (8001a7c <main+0x3bc>)
 8001820:	f8d3 9000 	ldr.w	r9, [r3]
 8001824:	4651      	mov	r1, sl
 8001826:	4648      	mov	r0, r9
 8001828:	f7ff fc4c 	bl	80010c4 <__aeabi_fcmple>
 800182c:	2800      	cmp	r0, #0
 800182e:	f040 81a9 	bne.w	8001b84 <main+0x4c4>
	  uint16_t vrefvalue = (uint16_t)*vrefptr;
 8001832:	4b93      	ldr	r3, [pc, #588]	; (8001a80 <main+0x3c0>)
 8001834:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)*adc_vref);
 8001836:	8818      	ldrh	r0, [r3, #0]
 8001838:	f7ff fa44 	bl	8000cc4 <__aeabi_ui2f>
 800183c:	4b8d      	ldr	r3, [pc, #564]	; (8001a74 <main+0x3b4>)
 800183e:	4604      	mov	r4, r0
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	8818      	ldrh	r0, [r3, #0]
 8001844:	f7ff fa3e 	bl	8000cc4 <__aeabi_ui2f>
 8001848:	4605      	mov	r5, r0
 800184a:	4620      	mov	r0, r4
 800184c:	4629      	mov	r1, r5
 800184e:	f7ff fb45 	bl	8000edc <__aeabi_fdiv>
 8001852:	4641      	mov	r1, r8
 8001854:	f7ff fa8e 	bl	8000d74 <__aeabi_fmul>
	  float cur_num_temp = ((((float)3.0 * (float)*adc_current * (float)vrefvalue)/((float)*adc_vref * (float)4095) / (float)20) / (float)0.15);
 8001858:	498a      	ldr	r1, [pc, #552]	; (8001a84 <main+0x3c4>)
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)*adc_vref);
 800185a:	4607      	mov	r7, r0
	  float cur_num_temp = ((((float)3.0 * (float)*adc_current * (float)vrefvalue)/((float)*adc_vref * (float)4095) / (float)20) / (float)0.15);
 800185c:	4628      	mov	r0, r5
 800185e:	f7ff fa89 	bl	8000d74 <__aeabi_fmul>
 8001862:	4605      	mov	r5, r0
 8001864:	4b7f      	ldr	r3, [pc, #508]	; (8001a64 <main+0x3a4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	8818      	ldrh	r0, [r3, #0]
 800186a:	f7ff fa2b 	bl	8000cc4 <__aeabi_ui2f>
 800186e:	4641      	mov	r1, r8
 8001870:	f7ff fa80 	bl	8000d74 <__aeabi_fmul>
 8001874:	4621      	mov	r1, r4
 8001876:	f7ff fa7d 	bl	8000d74 <__aeabi_fmul>
 800187a:	4629      	mov	r1, r5
 800187c:	f7ff fb2e 	bl	8000edc <__aeabi_fdiv>
 8001880:	4981      	ldr	r1, [pc, #516]	; (8001a88 <main+0x3c8>)
 8001882:	f7ff fb2b 	bl	8000edc <__aeabi_fdiv>
 8001886:	4981      	ldr	r1, [pc, #516]	; (8001a8c <main+0x3cc>)
 8001888:	f7ff fb28 	bl	8000edc <__aeabi_fdiv>
	  if(cur_num_temp >= 0.0000){
 800188c:	4651      	mov	r1, sl
	  float cur_num_temp = ((((float)3.0 * (float)*adc_current * (float)vrefvalue)/((float)*adc_vref * (float)4095) / (float)20) / (float)0.15);
 800188e:	4606      	mov	r6, r0
	  if(cur_num_temp >= 0.0000){
 8001890:	f7ff fc22 	bl	80010d8 <__aeabi_fcmpge>
 8001894:	2800      	cmp	r0, #0
 8001896:	f000 80d2 	beq.w	8001a3e <main+0x37e>
	  float op_num_temp = ((float)3.0 * ((float)*adc_opamp * (float)4.0) * (float)vrefvalue)/((float)*adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 800189a:	4630      	mov	r0, r6
 800189c:	497c      	ldr	r1, [pc, #496]	; (8001a90 <main+0x3d0>)
 800189e:	f7ff fa69 	bl	8000d74 <__aeabi_fmul>
 80018a2:	4683      	mov	fp, r0
 80018a4:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <main+0x3d4>)
 80018a6:	601e      	str	r6, [r3, #0]
 80018a8:	4b6f      	ldr	r3, [pc, #444]	; (8001a68 <main+0x3a8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	8818      	ldrh	r0, [r3, #0]
 80018ae:	f7ff fa09 	bl	8000cc4 <__aeabi_ui2f>
 80018b2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80018b6:	f7ff fa5d 	bl	8000d74 <__aeabi_fmul>
 80018ba:	4641      	mov	r1, r8
 80018bc:	f7ff fa5a 	bl	8000d74 <__aeabi_fmul>
 80018c0:	4621      	mov	r1, r4
 80018c2:	f7ff fa57 	bl	8000d74 <__aeabi_fmul>
 80018c6:	4629      	mov	r1, r5
 80018c8:	f7ff fb08 	bl	8000edc <__aeabi_fdiv>
 80018cc:	4659      	mov	r1, fp
 80018ce:	f7ff f947 	bl	8000b60 <__aeabi_fsub>
	  if(op_num_temp >= 0.0000){
 80018d2:	4651      	mov	r1, sl
	  float op_num_temp = ((float)3.0 * ((float)*adc_opamp * (float)4.0) * (float)vrefvalue)/((float)*adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 80018d4:	4606      	mov	r6, r0
	  if(op_num_temp >= 0.0000){
 80018d6:	f7ff fbff 	bl	80010d8 <__aeabi_fcmpge>
 80018da:	b900      	cbnz	r0, 80018de <main+0x21e>
		  op_num = 0.0000;
 80018dc:	4656      	mov	r6, sl
 80018de:	4b6e      	ldr	r3, [pc, #440]	; (8001a98 <main+0x3d8>)
 80018e0:	601e      	str	r6, [r3, #0]
	  float lin_num_temp = ((float)3.0 * ((float)*adc_linear * (float)4.0) * (float)vrefvalue)/((float)*adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 80018e2:	4b62      	ldr	r3, [pc, #392]	; (8001a6c <main+0x3ac>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	8818      	ldrh	r0, [r3, #0]
 80018e8:	f7ff f9ec 	bl	8000cc4 <__aeabi_ui2f>
 80018ec:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80018f0:	f7ff fa40 	bl	8000d74 <__aeabi_fmul>
 80018f4:	4641      	mov	r1, r8
 80018f6:	f7ff fa3d 	bl	8000d74 <__aeabi_fmul>
 80018fa:	4621      	mov	r1, r4
 80018fc:	f7ff fa3a 	bl	8000d74 <__aeabi_fmul>
 8001900:	4629      	mov	r1, r5
 8001902:	f7ff faeb 	bl	8000edc <__aeabi_fdiv>
 8001906:	4659      	mov	r1, fp
 8001908:	f7ff f92a 	bl	8000b60 <__aeabi_fsub>
	  if(lin_num_temp >= 0.0000){
 800190c:	4651      	mov	r1, sl
	  float lin_num_temp = ((float)3.0 * ((float)*adc_linear * (float)4.0) * (float)vrefvalue)/((float)*adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 800190e:	4606      	mov	r6, r0
	  if(lin_num_temp >= 0.0000){
 8001910:	f7ff fbe2 	bl	80010d8 <__aeabi_fcmpge>
 8001914:	b900      	cbnz	r0, 8001918 <main+0x258>
		  lin_num = 0.0000;
 8001916:	4656      	mov	r6, sl
 8001918:	4b60      	ldr	r3, [pc, #384]	; (8001a9c <main+0x3dc>)
 800191a:	601e      	str	r6, [r3, #0]
	  float swi_num_temp = ((float)3.0 * ((float)*adc_switching * (float)5.0) * (float)vrefvalue)/((float)*adc_vref * (float)4095);
 800191c:	4b54      	ldr	r3, [pc, #336]	; (8001a70 <main+0x3b0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	8818      	ldrh	r0, [r3, #0]
 8001922:	f7ff f9cf 	bl	8000cc4 <__aeabi_ui2f>
 8001926:	495e      	ldr	r1, [pc, #376]	; (8001aa0 <main+0x3e0>)
 8001928:	f7ff fa24 	bl	8000d74 <__aeabi_fmul>
 800192c:	4641      	mov	r1, r8
 800192e:	f7ff fa21 	bl	8000d74 <__aeabi_fmul>
 8001932:	4621      	mov	r1, r4
 8001934:	f7ff fa1e 	bl	8000d74 <__aeabi_fmul>
 8001938:	4629      	mov	r1, r5
 800193a:	f7ff facf 	bl	8000edc <__aeabi_fdiv>
	  if(swi_num_temp >= 0.0000){
 800193e:	4651      	mov	r1, sl
	  float swi_num_temp = ((float)3.0 * ((float)*adc_switching * (float)5.0) * (float)vrefvalue)/((float)*adc_vref * (float)4095);
 8001940:	4604      	mov	r4, r0
	  if(swi_num_temp >= 0.0000){
 8001942:	f7ff fbc9 	bl	80010d8 <__aeabi_fcmpge>
 8001946:	b900      	cbnz	r0, 800194a <main+0x28a>
		  swi_num = 0.0000;
 8001948:	4654      	mov	r4, sl
 800194a:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <main+0x3e4>)
 800194c:	601c      	str	r4, [r3, #0]
	  if(first_shot){
 800194e:	4b56      	ldr	r3, [pc, #344]	; (8001aa8 <main+0x3e8>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 80ea 	bne.w	8001b2c <main+0x46c>
		  error = lin_num - voltnum1;
 8001958:	4630      	mov	r0, r6
 800195a:	4649      	mov	r1, r9
 800195c:	f7ff f900 	bl	8000b60 <__aeabi_fsub>
		  integral += error;
 8001960:	4d52      	ldr	r5, [pc, #328]	; (8001aac <main+0x3ec>)
		  error = lin_num - voltnum1;
 8001962:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <main+0x3f0>)
		  integral += error;
 8001964:	6829      	ldr	r1, [r5, #0]
		  error = lin_num - voltnum1;
 8001966:	6018      	str	r0, [r3, #0]
 8001968:	4606      	mov	r6, r0
		  integral += error;
 800196a:	f7ff f8fb 	bl	8000b64 <__addsf3>
		  if (integral > (float)4095.0) {
 800196e:	4945      	ldr	r1, [pc, #276]	; (8001a84 <main+0x3c4>)
		  integral += error;
 8001970:	4604      	mov	r4, r0
		  if (integral > (float)4095.0) {
 8001972:	f7ff fbbb 	bl	80010ec <__aeabi_fcmpgt>
 8001976:	2800      	cmp	r0, #0
 8001978:	f000 80c4 	beq.w	8001b04 <main+0x444>
			  integral = (float)4095;
 800197c:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <main+0x3c4>)
 800197e:	602b      	str	r3, [r5, #0]
 8001980:	a531      	add	r5, pc, #196	; (adr r5, 8001a48 <main+0x388>)
 8001982:	e9d5 4500 	ldrd	r4, r5, [r5]
		  derivative = error - error_previous;
 8001986:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <main+0x3f4>)
 8001988:	4630      	mov	r0, r6
 800198a:	6819      	ldr	r1, [r3, #0]
 800198c:	f7ff f8e8 	bl	8000b60 <__aeabi_fsub>
 8001990:	4683      	mov	fp, r0
		  error_previous = error;
 8001992:	4b48      	ldr	r3, [pc, #288]	; (8001ab4 <main+0x3f4>)
		  correction = P * error + I * integral + D * derivative;
 8001994:	4630      	mov	r0, r6
		  error_previous = error;
 8001996:	601e      	str	r6, [r3, #0]
		  derivative = error - error_previous;
 8001998:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <main+0x3f8>)
		  if(correctedvoltnum1 > 12.0){
 800199a:	4e48      	ldr	r6, [pc, #288]	; (8001abc <main+0x3fc>)
		  derivative = error - error_previous;
 800199c:	f8c3 b000 	str.w	fp, [r3]
		  correction = P * error + I * integral + D * derivative;
 80019a0:	f7fe fd5a 	bl	8000458 <__aeabi_f2d>
 80019a4:	a32a      	add	r3, pc, #168	; (adr r3, 8001a50 <main+0x390>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe fdad 	bl	8000508 <__aeabi_dmul>
 80019ae:	4622      	mov	r2, r4
 80019b0:	462b      	mov	r3, r5
 80019b2:	f7fe fbf3 	bl	800019c <__adddf3>
 80019b6:	4604      	mov	r4, r0
 80019b8:	4658      	mov	r0, fp
 80019ba:	460d      	mov	r5, r1
 80019bc:	f7fe fd4c 	bl	8000458 <__aeabi_f2d>
 80019c0:	a323      	add	r3, pc, #140	; (adr r3, 8001a50 <main+0x390>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	f7fe fd9f 	bl	8000508 <__aeabi_dmul>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4620      	mov	r0, r4
 80019d0:	4629      	mov	r1, r5
 80019d2:	f7fe fbe3 	bl	800019c <__adddf3>
 80019d6:	f7ff f86f 	bl	8000ab8 <__aeabi_d2f>
 80019da:	4601      	mov	r1, r0
 80019dc:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <main+0x400>)
		  correctedvoltnum1 = voltnum1 - correction;
 80019de:	4648      	mov	r0, r9
		  correction = P * error + I * integral + D * derivative;
 80019e0:	6019      	str	r1, [r3, #0]
		  correctedvoltnum1 = voltnum1 - correction;
 80019e2:	f7ff f8bd 	bl	8000b60 <__aeabi_fsub>
		  if(correctedvoltnum1 > 12.0){
 80019e6:	4631      	mov	r1, r6
		  correctedvoltnum1 = voltnum1 - correction;
 80019e8:	4604      	mov	r4, r0
		  if(correctedvoltnum1 > 12.0){
 80019ea:	f7ff fb7f 	bl	80010ec <__aeabi_fcmpgt>
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d074      	beq.n	8001adc <main+0x41c>
			  correctedvoltnum1 = 12.0;
 80019f2:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <main+0x404>)
 80019f4:	4834      	ldr	r0, [pc, #208]	; (8001ac8 <main+0x408>)
 80019f6:	601e      	str	r6, [r3, #0]
		  v1 = (uint16_t)((( (correctedvoltnum1 / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 80019f8:	4639      	mov	r1, r7
 80019fa:	f7ff fa6f 	bl	8000edc <__aeabi_fdiv>
 80019fe:	f7ff fb7f 	bl	8001100 <__aeabi_f2uiz>
 8001a02:	4603      	mov	r3, r0
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001a04:	2200      	movs	r2, #0
		  v1 = (uint16_t)((( (correctedvoltnum1 / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8001a06:	4931      	ldr	r1, [pc, #196]	; (8001acc <main+0x40c>)
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	800b      	strh	r3, [r1, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001a0c:	4830      	ldr	r0, [pc, #192]	; (8001ad0 <main+0x410>)
 8001a0e:	4611      	mov	r1, r2
 8001a10:	f001 f862 	bl	8002ad8 <HAL_DAC_SetValue>
	  if(voltnum1 > 0.00){
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <main+0x3bc>)
 8001a16:	f8d3 9000 	ldr.w	r9, [r3]
 8001a1a:	4651      	mov	r1, sl
 8001a1c:	4648      	mov	r0, r9
 8001a1e:	f7ff fb65 	bl	80010ec <__aeabi_fcmpgt>
 8001a22:	2800      	cmp	r0, #0
 8001a24:	f43f aefe 	beq.w	8001824 <main+0x164>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2140      	movs	r1, #64	; 0x40
 8001a2c:	4829      	ldr	r0, [pc, #164]	; (8001ad4 <main+0x414>)
 8001a2e:	f001 fb4b 	bl	80030c8 <HAL_GPIO_WritePin>
		  chstat = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <main+0x418>)
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e6f1      	b.n	800181e <main+0x15e>
 8001a3a:	b672      	cpsid	i
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <main+0x37c>
 8001a3e:	46d3      	mov	fp, sl
		  cur_num = 0.0000;
 8001a40:	4656      	mov	r6, sl
 8001a42:	e72f      	b.n	80018a4 <main+0x1e4>
 8001a44:	f3af 8000 	nop.w
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	40799800 	.word	0x40799800
 8001a50:	9999999a 	.word	0x9999999a
 8001a54:	3fb99999 	.word	0x3fb99999
 8001a58:	20000374 	.word	0x20000374
 8001a5c:	40013800 	.word	0x40013800
 8001a60:	20000214 	.word	0x20000214
 8001a64:	20000200 	.word	0x20000200
 8001a68:	20000208 	.word	0x20000208
 8001a6c:	20000204 	.word	0x20000204
 8001a70:	2000020c 	.word	0x2000020c
 8001a74:	20000210 	.word	0x20000210
 8001a78:	40400000 	.word	0x40400000
 8001a7c:	2000044c 	.word	0x2000044c
 8001a80:	20000004 	.word	0x20000004
 8001a84:	457ff000 	.word	0x457ff000
 8001a88:	41a00000 	.word	0x41a00000
 8001a8c:	3e19999a 	.word	0x3e19999a
 8001a90:	3eb33333 	.word	0x3eb33333
 8001a94:	20000230 	.word	0x20000230
 8001a98:	200003c0 	.word	0x200003c0
 8001a9c:	200003bc 	.word	0x200003bc
 8001aa0:	40a00000 	.word	0x40a00000
 8001aa4:	20000404 	.word	0x20000404
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	200003b8 	.word	0x200003b8
 8001ab0:	20000238 	.word	0x20000238
 8001ab4:	2000023c 	.word	0x2000023c
 8001ab8:	20000234 	.word	0x20000234
 8001abc:	41400000 	.word	0x41400000
 8001ac0:	2000022c 	.word	0x2000022c
 8001ac4:	20000228 	.word	0x20000228
 8001ac8:	46471a5c 	.word	0x46471a5c
 8001acc:	20000448 	.word	0x20000448
 8001ad0:	20000294 	.word	0x20000294
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	20000224 	.word	0x20000224
		  else if(correctedvoltnum1 < 0.0){
 8001adc:	4651      	mov	r1, sl
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff fae6 	bl	80010b0 <__aeabi_fcmplt>
			  correctedvoltnum1 = 0.0;
 8001ae4:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <main+0x500>)
		  else if(correctedvoltnum1 < 0.0){
 8001ae6:	2800      	cmp	r0, #0
 8001ae8:	d15d      	bne.n	8001ba6 <main+0x4e6>
		  correctedvoltnum1 = voltnum1 - correction;
 8001aea:	601c      	str	r4, [r3, #0]
		  v1 = (uint16_t)((( (correctedvoltnum1 / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8001aec:	4620      	mov	r0, r4
 8001aee:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001af2:	f7ff f93f 	bl	8000d74 <__aeabi_fmul>
 8001af6:	4933      	ldr	r1, [pc, #204]	; (8001bc4 <main+0x504>)
 8001af8:	f7ff f834 	bl	8000b64 <__addsf3>
 8001afc:	4932      	ldr	r1, [pc, #200]	; (8001bc8 <main+0x508>)
 8001afe:	f7ff f939 	bl	8000d74 <__aeabi_fmul>
 8001b02:	e779      	b.n	80019f8 <main+0x338>
		  } else if (integral < (float)-4095.0) {
 8001b04:	4d31      	ldr	r5, [pc, #196]	; (8001bcc <main+0x50c>)
 8001b06:	4620      	mov	r0, r4
 8001b08:	4629      	mov	r1, r5
 8001b0a:	f7ff fad1 	bl	80010b0 <__aeabi_fcmplt>
			  integral = (float)-4095.0;
 8001b0e:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <main+0x510>)
		  } else if (integral < (float)-4095.0) {
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d143      	bne.n	8001b9c <main+0x4dc>
		  integral += error;
 8001b14:	601c      	str	r4, [r3, #0]
		  correction = P * error + I * integral + D * derivative;
 8001b16:	4620      	mov	r0, r4
 8001b18:	f7fe fc9e 	bl	8000458 <__aeabi_f2d>
 8001b1c:	a324      	add	r3, pc, #144	; (adr r3, 8001bb0 <main+0x4f0>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fcf1 	bl	8000508 <__aeabi_dmul>
 8001b26:	4604      	mov	r4, r0
 8001b28:	460d      	mov	r5, r1
 8001b2a:	e72c      	b.n	8001986 <main+0x2c6>
		  v1 = (uint16_t)((( (((float)voltnum1) / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8001b2c:	4648      	mov	r0, r9
 8001b2e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001b32:	f7ff f91f 	bl	8000d74 <__aeabi_fmul>
 8001b36:	4923      	ldr	r1, [pc, #140]	; (8001bc4 <main+0x504>)
 8001b38:	f7ff f814 	bl	8000b64 <__addsf3>
 8001b3c:	4922      	ldr	r1, [pc, #136]	; (8001bc8 <main+0x508>)
 8001b3e:	f7ff f919 	bl	8000d74 <__aeabi_fmul>
 8001b42:	4639      	mov	r1, r7
 8001b44:	f7ff f9ca 	bl	8000edc <__aeabi_fdiv>
 8001b48:	f7ff fada 	bl	8001100 <__aeabi_f2uiz>
 8001b4c:	4603      	mov	r3, r0
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001b4e:	2200      	movs	r2, #0
		  v1 = (uint16_t)((( (((float)voltnum1) / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8001b50:	4920      	ldr	r1, [pc, #128]	; (8001bd4 <main+0x514>)
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	800b      	strh	r3, [r1, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001b56:	4820      	ldr	r0, [pc, #128]	; (8001bd8 <main+0x518>)
 8001b58:	4611      	mov	r1, r2
 8001b5a:	f000 ffbd 	bl	8002ad8 <HAL_DAC_SetValue>
		  integral = 0;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <main+0x510>)
		  first_shot = 0;
 8001b60:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <main+0x51c>)
		  integral = 0;
 8001b62:	f8c3 a000 	str.w	sl, [r3]
		  error = 0;
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <main+0x520>)
 8001b68:	f8c3 a000 	str.w	sl, [r3]
		  derivative = 0;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <main+0x524>)
 8001b6e:	f8c3 a000 	str.w	sl, [r3]
		  first_shot = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	7013      	strb	r3, [r2, #0]
		  correctedvoltnum1 = voltnum1;
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <main+0x528>)
 8001b78:	f8d3 9000 	ldr.w	r9, [r3]
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <main+0x500>)
 8001b7e:	f8c3 9000 	str.w	r9, [r3]
		  first_shot = 0;
 8001b82:	e74a      	b.n	8001a1a <main+0x35a>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2140      	movs	r1, #64	; 0x40
 8001b88:	4818      	ldr	r0, [pc, #96]	; (8001bec <main+0x52c>)
 8001b8a:	f001 fa9d 	bl	80030c8 <HAL_GPIO_WritePin>
		  chstat = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <main+0x530>)
 8001b92:	6013      	str	r3, [r2, #0]
		  v1 = (uint16_t)((( (((float)voltnum1) / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <main+0x528>)
 8001b96:	f8d3 9000 	ldr.w	r9, [r3]
 8001b9a:	e64a      	b.n	8001832 <main+0x172>
			  integral = (float)-4095.0;
 8001b9c:	601d      	str	r5, [r3, #0]
 8001b9e:	a506      	add	r5, pc, #24	; (adr r5, 8001bb8 <main+0x4f8>)
 8001ba0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8001ba4:	e6ef      	b.n	8001986 <main+0x2c6>
			  correctedvoltnum1 = 0.0;
 8001ba6:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <main+0x534>)
 8001ba8:	f8c3 a000 	str.w	sl, [r3]
 8001bac:	e724      	b.n	80019f8 <main+0x338>
 8001bae:	bf00      	nop
 8001bb0:	9999999a 	.word	0x9999999a
 8001bb4:	3fb99999 	.word	0x3fb99999
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	c0799800 	.word	0xc0799800
 8001bc0:	20000228 	.word	0x20000228
 8001bc4:	3de4d9c9 	.word	0x3de4d9c9
 8001bc8:	457ff000 	.word	0x457ff000
 8001bcc:	c57ff000 	.word	0xc57ff000
 8001bd0:	200003b8 	.word	0x200003b8
 8001bd4:	20000448 	.word	0x20000448
 8001bd8:	20000294 	.word	0x20000294
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000238 	.word	0x20000238
 8001be4:	20000234 	.word	0x20000234
 8001be8:	2000044c 	.word	0x2000044c
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	20000224 	.word	0x20000224
 8001bf4:	43e4cb7b 	.word	0x43e4cb7b

08001bf8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001bfa:	2540      	movs	r5, #64	; 0x40
 8001bfc:	4c13      	ldr	r4, [pc, #76]	; (8001c4c <HAL_UART_TxCpltCallback+0x54>)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001bfe:	b087      	sub	sp, #28
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001c00:	462a      	mov	r2, r5
 8001c02:	2100      	movs	r1, #0
 8001c04:	4620      	mov	r0, r4
 8001c06:	f002 f99d 	bl	8003f44 <memset>
	snprintf((char*)txbuffer, 26, "*STRT,%05.2f,%5.3f,%d,FNSH!", lin_num, cur_num, chstat);
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_UART_TxCpltCallback+0x58>)
 8001c0c:	4a11      	ldr	r2, [pc, #68]	; (8001c54 <HAL_UART_TxCpltCallback+0x5c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6810      	ldr	r0, [r2, #0]
 8001c12:	9304      	str	r3, [sp, #16]
 8001c14:	f7fe fc20 	bl	8000458 <__aeabi_f2d>
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	490e      	ldr	r1, [pc, #56]	; (8001c58 <HAL_UART_TxCpltCallback+0x60>)
 8001c1e:	6808      	ldr	r0, [r1, #0]
 8001c20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c24:	f7fe fc18 	bl	8000458 <__aeabi_f2d>
 8001c28:	4606      	mov	r6, r0
 8001c2a:	460f      	mov	r7, r1
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	211a      	movs	r1, #26
 8001c30:	e9cd 6700 	strd	r6, r7, [sp]
 8001c34:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_UART_TxCpltCallback+0x64>)
 8001c36:	f002 fded 	bl	8004814 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001c3a:	462a      	mov	r2, r5
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	4808      	ldr	r0, [pc, #32]	; (8001c60 <HAL_UART_TxCpltCallback+0x68>)
}
 8001c40:	b007      	add	sp, #28
 8001c42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001c46:	f001 be9b 	b.w	8003980 <HAL_UART_Transmit_DMA>
 8001c4a:	bf00      	nop
 8001c4c:	20000408 	.word	0x20000408
 8001c50:	20000224 	.word	0x20000224
 8001c54:	20000230 	.word	0x20000230
 8001c58:	200003bc 	.word	0x200003bc
 8001c5c:	08006d64 	.word	0x08006d64
 8001c60:	20000374 	.word	0x20000374
 8001c64:	00000000 	.word	0x00000000

08001c68 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c6c:	4e92      	ldr	r6, [pc, #584]	; (8001eb8 <HAL_UART_RxCpltCallback+0x250>)
	for(int i = 0; i < 64; i++){
 8001c6e:	2400      	movs	r4, #0
 8001c70:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001c72:	b088      	sub	sp, #32
 8001c74:	e003      	b.n	8001c7e <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 8001c76:	3401      	adds	r4, #1
 8001c78:	2c40      	cmp	r4, #64	; 0x40
 8001c7a:	f000 8115 	beq.w	8001ea8 <HAL_UART_RxCpltCallback+0x240>
		if(rxbuffer[i] == '*'){
 8001c7e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8001c82:	2d2a      	cmp	r5, #42	; 0x2a
 8001c84:	d1f7      	bne.n	8001c76 <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 8001c86:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 8001c88:	2220      	movs	r2, #32
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4668      	mov	r0, sp
 8001c8e:	f002 f959 	bl	8003f44 <memset>
	for(int i = 0; i < 25; i++){
 8001c92:	f10d 33ff 	add.w	r3, sp, #4294967295
 8001c96:	aa06      	add	r2, sp, #24
 8001c98:	e000      	b.n	8001c9c <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 8001c9a:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 8001c9c:	3401      	adds	r4, #1
 8001c9e:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 8001ca0:	2c40      	cmp	r4, #64	; 0x40
		rxbuffercpy[i] = rxbuffer[rxiter];
 8001ca2:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 8001ca6:	bf28      	it	cs
 8001ca8:	2400      	movcs	r4, #0
	for(int i = 0; i < 25; i++){
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d1f5      	bne.n	8001c9a <HAL_UART_RxCpltCallback+0x32>
	if( //Check start condition
 8001cae:	f89d 3000 	ldrb.w	r3, [sp]
 8001cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8001cb4:	d00c      	beq.n	8001cd0 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001cb6:	2240      	movs	r2, #64	; 0x40
 8001cb8:	2100      	movs	r1, #0
 8001cba:	487f      	ldr	r0, [pc, #508]	; (8001eb8 <HAL_UART_RxCpltCallback+0x250>)
 8001cbc:	f002 f942 	bl	8003f44 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001cc0:	2240      	movs	r2, #64	; 0x40
 8001cc2:	497d      	ldr	r1, [pc, #500]	; (8001eb8 <HAL_UART_RxCpltCallback+0x250>)
 8001cc4:	487d      	ldr	r0, [pc, #500]	; (8001ebc <HAL_UART_RxCpltCallback+0x254>)
}
 8001cc6:	b008      	add	sp, #32
 8001cc8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001ccc:	f001 be94 	b.w	80039f8 <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 8001cd0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001cd4:	2b53      	cmp	r3, #83	; 0x53
 8001cd6:	d1ee      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
 8001cd8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001cdc:	2b54      	cmp	r3, #84	; 0x54
 8001cde:	d1ea      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
 8001ce0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001ce4:	2b52      	cmp	r3, #82	; 0x52
 8001ce6:	d1e6      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
 8001ce8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001cec:	2b54      	cmp	r3, #84	; 0x54
 8001cee:	d1e2      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
 8001cf0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001cf4:	2b46      	cmp	r3, #70	; 0x46
 8001cf6:	d1de      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 8001cf8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001cfc:	2b4e      	cmp	r3, #78	; 0x4e
 8001cfe:	d1da      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
 8001d00:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8001d04:	2b53      	cmp	r3, #83	; 0x53
 8001d06:	d1d6      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
 8001d08:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001d0c:	2b48      	cmp	r3, #72	; 0x48
 8001d0e:	d1d2      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
 8001d10:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001d14:	2b21      	cmp	r3, #33	; 0x21
 8001d16:	d1ce      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
 8001d18:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001d1c:	2b2c      	cmp	r3, #44	; 0x2c
 8001d1e:	d1ca      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8001d20:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001d24:	2b2c      	cmp	r3, #44	; 0x2c
 8001d26:	d1c6      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
 8001d28:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001d2c:	2b2c      	cmp	r3, #44	; 0x2c
 8001d2e:	d1c2      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
 8001d30:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8001d34:	2b2c      	cmp	r3, #44	; 0x2c
 8001d36:	d1be      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8001d38:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8001d3c:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8001d3e:	b2c3      	uxtb	r3, r0
 8001d40:	2b09      	cmp	r3, #9
 8001d42:	d8b8      	bhi.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8001d44:	f89d a007 	ldrb.w	sl, [sp, #7]
 8001d48:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8001d4c:	fa5f f38a 	uxtb.w	r3, sl
 8001d50:	2b09      	cmp	r3, #9
 8001d52:	d8b0      	bhi.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
 8001d54:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001d58:	2b2e      	cmp	r3, #46	; 0x2e
 8001d5a:	d1ac      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8001d5c:	f89d 9009 	ldrb.w	r9, [sp, #9]
 8001d60:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8001d64:	fa5f f389 	uxtb.w	r3, r9
 8001d68:	2b09      	cmp	r3, #9
 8001d6a:	d8a4      	bhi.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8001d6c:	f89d 800a 	ldrb.w	r8, [sp, #10]
 8001d70:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8001d74:	fa5f f388 	uxtb.w	r3, r8
 8001d78:	2b09      	cmp	r3, #9
 8001d7a:	d89c      	bhi.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8001d7c:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8001d80:	3d30      	subs	r5, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8001d82:	b2eb      	uxtb	r3, r5
 8001d84:	2b09      	cmp	r3, #9
 8001d86:	d896      	bhi.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8001d88:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d8e:	d192      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
 8001d90:	f89d 700e 	ldrb.w	r7, [sp, #14]
 8001d94:	3f30      	subs	r7, #48	; 0x30
 8001d96:	b2fb      	uxtb	r3, r7
 8001d98:	2b09      	cmp	r3, #9
 8001d9a:	d88c      	bhi.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8001d9c:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8001da0:	3e30      	subs	r6, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8001da2:	b2f3      	uxtb	r3, r6
 8001da4:	2b09      	cmp	r3, #9
 8001da6:	d886      	bhi.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8001da8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8001dac:	3c30      	subs	r4, #48	; 0x30
 8001dae:	b2e3      	uxtb	r3, r4
 8001db0:	2b09      	cmp	r3, #9
 8001db2:	d880      	bhi.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 8001db4:	f89d 3012 	ldrb.w	r3, [sp, #18]
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8001db8:	3b30      	subs	r3, #48	; 0x30
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	f63f af7b 	bhi.w	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8001dc0:	f7fe ff84 	bl	8000ccc <__aeabi_i2f>
 8001dc4:	493e      	ldr	r1, [pc, #248]	; (8001ec0 <HAL_UART_RxCpltCallback+0x258>)
 8001dc6:	f7fe ffd5 	bl	8000d74 <__aeabi_fmul>
 8001dca:	2100      	movs	r1, #0
 8001dcc:	f7fe feca 	bl	8000b64 <__addsf3>
 8001dd0:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8001dd2:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8001dd4:	469a      	mov	sl, r3
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8001dd6:	f7fe ff79 	bl	8000ccc <__aeabi_i2f>
 8001dda:	4651      	mov	r1, sl
 8001ddc:	f7fe fec2 	bl	8000b64 <__addsf3>
 8001de0:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8001de2:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8001de4:	4699      	mov	r9, r3
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8001de6:	f7fe ff71 	bl	8000ccc <__aeabi_i2f>
 8001dea:	4935      	ldr	r1, [pc, #212]	; (8001ec0 <HAL_UART_RxCpltCallback+0x258>)
 8001dec:	f7ff f876 	bl	8000edc <__aeabi_fdiv>
 8001df0:	4649      	mov	r1, r9
 8001df2:	f7fe feb7 	bl	8000b64 <__addsf3>
 8001df6:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8001df8:	4640      	mov	r0, r8
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8001dfa:	4698      	mov	r8, r3
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8001dfc:	f7fe ff66 	bl	8000ccc <__aeabi_i2f>
 8001e00:	4930      	ldr	r1, [pc, #192]	; (8001ec4 <HAL_UART_RxCpltCallback+0x25c>)
 8001e02:	f7ff f86b 	bl	8000edc <__aeabi_fdiv>
 8001e06:	4641      	mov	r1, r8
 8001e08:	f7fe feac 	bl	8000b64 <__addsf3>
 8001e0c:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8001e0e:	4628      	mov	r0, r5
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8001e10:	461d      	mov	r5, r3
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8001e12:	f7fe ff5b 	bl	8000ccc <__aeabi_i2f>
 8001e16:	2100      	movs	r1, #0
 8001e18:	f7fe fea4 	bl	8000b64 <__addsf3>
 8001e1c:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8001e1e:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8001e20:	461f      	mov	r7, r3
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8001e22:	f7fe ff53 	bl	8000ccc <__aeabi_i2f>
 8001e26:	4926      	ldr	r1, [pc, #152]	; (8001ec0 <HAL_UART_RxCpltCallback+0x258>)
 8001e28:	f7ff f858 	bl	8000edc <__aeabi_fdiv>
 8001e2c:	4639      	mov	r1, r7
 8001e2e:	f7fe fe99 	bl	8000b64 <__addsf3>
 8001e32:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8001e34:	4630      	mov	r0, r6
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8001e36:	461e      	mov	r6, r3
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8001e38:	f7fe ff48 	bl	8000ccc <__aeabi_i2f>
 8001e3c:	4921      	ldr	r1, [pc, #132]	; (8001ec4 <HAL_UART_RxCpltCallback+0x25c>)
 8001e3e:	f7ff f84d 	bl	8000edc <__aeabi_fdiv>
 8001e42:	4631      	mov	r1, r6
 8001e44:	f7fe fe8e 	bl	8000b64 <__addsf3>
 8001e48:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8001e4a:	4620      	mov	r0, r4
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8001e4c:	461c      	mov	r4, r3
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8001e4e:	f7fe ff3d 	bl	8000ccc <__aeabi_i2f>
 8001e52:	491d      	ldr	r1, [pc, #116]	; (8001ec8 <HAL_UART_RxCpltCallback+0x260>)
 8001e54:	f7ff f842 	bl	8000edc <__aeabi_fdiv>
 8001e58:	4621      	mov	r1, r4
 8001e5a:	f7fe fe83 	bl	8000b64 <__addsf3>
		if(tempv2 >= 0.00 && tempv2 <= 12.00){
 8001e5e:	2100      	movs	r1, #0
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8001e60:	4604      	mov	r4, r0
		if(tempv2 >= 0.00 && tempv2 <= 12.00){
 8001e62:	4628      	mov	r0, r5
 8001e64:	f7ff f938 	bl	80010d8 <__aeabi_fcmpge>
 8001e68:	b148      	cbz	r0, 8001e7e <HAL_UART_RxCpltCallback+0x216>
 8001e6a:	4628      	mov	r0, r5
 8001e6c:	4917      	ldr	r1, [pc, #92]	; (8001ecc <HAL_UART_RxCpltCallback+0x264>)
 8001e6e:	f7ff f929 	bl	80010c4 <__aeabi_fcmple>
 8001e72:	b120      	cbz	r0, 8001e7e <HAL_UART_RxCpltCallback+0x216>
			first_shot = 1;
 8001e74:	2201      	movs	r2, #1
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_UART_RxCpltCallback+0x268>)
			voltnum1 = tempv2;
 8001e78:	4916      	ldr	r1, [pc, #88]	; (8001ed4 <HAL_UART_RxCpltCallback+0x26c>)
			first_shot = 1;
 8001e7a:	701a      	strb	r2, [r3, #0]
			voltnum1 = tempv2;
 8001e7c:	600d      	str	r5, [r1, #0]
		if(tempa2 >= 0.00 && tempa2 <= 0.800){
 8001e7e:	4620      	mov	r0, r4
 8001e80:	2100      	movs	r1, #0
 8001e82:	f7ff f929 	bl	80010d8 <__aeabi_fcmpge>
 8001e86:	2800      	cmp	r0, #0
 8001e88:	f43f af15 	beq.w	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f7fe fae3 	bl	8000458 <__aeabi_f2d>
 8001e92:	a307      	add	r3, pc, #28	; (adr r3, 8001eb0 <HAL_UART_RxCpltCallback+0x248>)
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	f7fe fdb2 	bl	8000a00 <__aeabi_dcmple>
 8001e9c:	2800      	cmp	r0, #0
 8001e9e:	f43f af0a 	beq.w	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
			ampnum1 = tempa2;
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_UART_RxCpltCallback+0x270>)
 8001ea4:	601c      	str	r4, [r3, #0]
 8001ea6:	e706      	b.n	8001cb6 <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 8001ea8:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 8001eaa:	7835      	ldrb	r5, [r6, #0]
 8001eac:	e6ec      	b.n	8001c88 <HAL_UART_RxCpltCallback+0x20>
 8001eae:	bf00      	nop
 8001eb0:	9999999a 	.word	0x9999999a
 8001eb4:	3fe99999 	.word	0x3fe99999
 8001eb8:	200003c4 	.word	0x200003c4
 8001ebc:	20000374 	.word	0x20000374
 8001ec0:	41200000 	.word	0x41200000
 8001ec4:	42c80000 	.word	0x42c80000
 8001ec8:	447a0000 	.word	0x447a0000
 8001ecc:	41400000 	.word	0x41400000
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	2000044c 	.word	0x2000044c
 8001ed8:	20000220 	.word	0x20000220

08001edc <Error_Handler>:
 8001edc:	b672      	cpsid	i
  while (1)
 8001ede:	e7fe      	b.n	8001ede <Error_Handler+0x2>

08001ee0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_MspInit+0x40>)
{
 8001ee2:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8001ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ee6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
 8001eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ef2:	9201      	str	r2, [sp, #4]
 8001ef4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	6a1a      	ldr	r2, [r3, #32]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	621a      	str	r2, [r3, #32]
 8001efe:	6a1a      	ldr	r2, [r3, #32]
 8001f00:	f002 0201 	and.w	r2, r2, #1
 8001f04:	9202      	str	r2, [sp, #8]
 8001f06:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	9303      	str	r3, [sp, #12]
 8001f18:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1a:	b004      	add	sp, #16
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f24:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <HAL_ADC_MspInit+0x8c>)
 8001f2a:	6802      	ldr	r2, [r0, #0]
{
 8001f2c:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8001f2e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001f34:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001f38:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8001f3a:	d001      	beq.n	8001f40 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f3c:	b008      	add	sp, #32
 8001f3e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f40:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8001f44:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4c:	621a      	str	r2, [r3, #32]
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
 8001f50:	4605      	mov	r5, r0
 8001f52:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001f56:	9200      	str	r2, [sp, #0]
 8001f58:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	69da      	ldr	r2, [r3, #28]
    hdma_adc.Instance = DMA1_Channel1;
 8001f5c:	4e15      	ldr	r6, [pc, #84]	; (8001fb4 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	61da      	str	r2, [r3, #28]
 8001f64:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f66:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f6e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f70:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <HAL_ADC_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f74:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f000 ff3c 	bl	8002df4 <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001f7c:	2380      	movs	r3, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8001f7e:	490f      	ldr	r1, [pc, #60]	; (8001fbc <HAL_ADC_MspInit+0x98>)
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f80:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f84:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001f88:	60f3      	str	r3, [r6, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001f8e:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001f90:	4630      	mov	r0, r6
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f92:	60b4      	str	r4, [r6, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001f94:	61f4      	str	r4, [r6, #28]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f96:	6171      	str	r1, [r6, #20]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f98:	6132      	str	r2, [r6, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001f9a:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001f9c:	f000 fddc 	bl	8002b58 <HAL_DMA_Init>
 8001fa0:	b918      	cbnz	r0, 8001faa <HAL_ADC_MspInit+0x86>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001fa2:	646e      	str	r6, [r5, #68]	; 0x44
 8001fa4:	6275      	str	r5, [r6, #36]	; 0x24
}
 8001fa6:	b008      	add	sp, #32
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001faa:	f7ff ff97 	bl	8001edc <Error_Handler>
 8001fae:	e7f8      	b.n	8001fa2 <HAL_ADC_MspInit+0x7e>
 8001fb0:	40012400 	.word	0x40012400
 8001fb4:	200002a8 	.word	0x200002a8
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40026008 	.word	0x40026008

08001fc0 <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_ADC_MspDeInit+0x2c>)
 8001fc2:	6802      	ldr	r2, [r0, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d000      	beq.n	8001fca <HAL_ADC_MspDeInit+0xa>
 8001fc8:	4770      	bx	lr
{
 8001fca:	b510      	push	{r4, lr}
 8001fcc:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001fce:	4a08      	ldr	r2, [pc, #32]	; (8001ff0 <HAL_ADC_MspDeInit+0x30>)
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8001fd0:	4808      	ldr	r0, [pc, #32]	; (8001ff4 <HAL_ADC_MspDeInit+0x34>)
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001fd2:	6a13      	ldr	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8001fd4:	210f      	movs	r1, #15
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001fd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fda:	6213      	str	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8001fdc:	f000 ffec 	bl	8002fb8 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8001fe0:	6c60      	ldr	r0, [r4, #68]	; 0x44
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8001fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8001fe6:	f000 bdef 	b.w	8002bc8 <HAL_DMA_DeInit>
 8001fea:	bf00      	nop
 8001fec:	40012400 	.word	0x40012400
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	2300      	movs	r3, #0
{
 8001ffa:	b530      	push	{r4, r5, lr}
  if(hdac->Instance==DAC)
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <HAL_DAC_MspInit+0x58>)
 8001ffe:	6801      	ldr	r1, [r0, #0]
{
 8002000:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 8002002:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002008:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800200c:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 800200e:	d001      	beq.n	8002014 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002010:	b009      	add	sp, #36	; 0x24
 8002012:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002014:	2430      	movs	r4, #48	; 0x30
 8002016:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_DAC_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201a:	480f      	ldr	r0, [pc, #60]	; (8002058 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800201c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC_CLK_ENABLE();
 8002020:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
 8002026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002028:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800202c:	9200      	str	r2, [sp, #0]
 800202e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	61da      	str	r2, [r3, #28]
 8002038:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800203a:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f000 fed5 	bl	8002df4 <HAL_GPIO_Init>
}
 800204a:	b009      	add	sp, #36	; 0x24
 800204c:	bd30      	pop	{r4, r5, pc}
 800204e:	bf00      	nop
 8002050:	40007400 	.word	0x40007400
 8002054:	40023800 	.word	0x40023800
 8002058:	40020000 	.word	0x40020000

0800205c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800205c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205e:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8002060:	4b30      	ldr	r3, [pc, #192]	; (8002124 <HAL_UART_MspInit+0xc8>)
 8002062:	6802      	ldr	r2, [r0, #0]
{
 8002064:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8002066:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800206c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002070:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8002072:	d001      	beq.n	8002078 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002074:	b008      	add	sp, #32
 8002076:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002078:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800207c:	6a1a      	ldr	r2, [r3, #32]
 800207e:	4605      	mov	r5, r0
 8002080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002084:	621a      	str	r2, [r3, #32]
 8002086:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002088:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800208a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	69da      	ldr	r2, [r3, #28]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002094:	4e24      	ldr	r6, [pc, #144]	; (8002128 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	61da      	str	r2, [r3, #28]
 800209c:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800209e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020a8:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020b2:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	481d      	ldr	r0, [pc, #116]	; (800212c <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020b8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	f000 fe9b 	bl	8002df4 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020be:	2210      	movs	r2, #16
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020c0:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80020c2:	491b      	ldr	r1, [pc, #108]	; (8002130 <HAL_UART_MspInit+0xd4>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020c4:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c6:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020ca:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80020ce:	6031      	str	r1, [r6, #0]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d0:	60b4      	str	r4, [r6, #8]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020d2:	6072      	str	r2, [r6, #4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020d4:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020d6:	f000 fd3f 	bl	8002b58 <HAL_DMA_Init>
 80020da:	b9e8      	cbnz	r0, 8002118 <HAL_UART_MspInit+0xbc>
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020dc:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020de:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80020e0:	4c14      	ldr	r4, [pc, #80]	; (8002134 <HAL_UART_MspInit+0xd8>)
 80020e2:	4915      	ldr	r1, [pc, #84]	; (8002138 <HAL_UART_MspInit+0xdc>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020e4:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80020e6:	636e      	str	r6, [r5, #52]	; 0x34
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e8:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ec:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80020f0:	e9c4 3305 	strd	r3, r3, [r4, #20]
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80020f4:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80020f6:	6021      	str	r1, [r4, #0]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020f8:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020fa:	f000 fd2d 	bl	8002b58 <HAL_DMA_Init>
 80020fe:	b970      	cbnz	r0, 800211e <HAL_UART_MspInit+0xc2>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002100:	2200      	movs	r2, #0
 8002102:	2025      	movs	r0, #37	; 0x25
 8002104:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002106:	63ac      	str	r4, [r5, #56]	; 0x38
 8002108:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800210a:	f000 fc3b 	bl	8002984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800210e:	2025      	movs	r0, #37	; 0x25
 8002110:	f000 fc76 	bl	8002a00 <HAL_NVIC_EnableIRQ>
}
 8002114:	b008      	add	sp, #32
 8002116:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002118:	f7ff fee0 	bl	8001edc <Error_Handler>
 800211c:	e7de      	b.n	80020dc <HAL_UART_MspInit+0x80>
      Error_Handler();
 800211e:	f7ff fedd 	bl	8001edc <Error_Handler>
 8002122:	e7ed      	b.n	8002100 <HAL_UART_MspInit+0xa4>
 8002124:	40013800 	.word	0x40013800
 8002128:	20000330 	.word	0x20000330
 800212c:	40020000 	.word	0x40020000
 8002130:	40026044 	.word	0x40026044
 8002134:	200002ec 	.word	0x200002ec
 8002138:	40026058 	.word	0x40026058

0800213c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800213c:	e7fe      	b.n	800213c <NMI_Handler>
 800213e:	bf00      	nop

08002140 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <HardFault_Handler>
 8002142:	bf00      	nop

08002144 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <MemManage_Handler>
 8002146:	bf00      	nop

08002148 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <BusFault_Handler>
 800214a:	bf00      	nop

0800214c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <UsageFault_Handler>
 800214e:	bf00      	nop

08002150 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop

08002154 <DebugMon_Handler>:
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop

08002158 <PendSV_Handler>:
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop

0800215c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215c:	f000 b8d6 	b.w	800230c <HAL_IncTick>

08002160 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002160:	4801      	ldr	r0, [pc, #4]	; (8002168 <DMA1_Channel1_IRQHandler+0x8>)
 8002162:	f000 bdf9 	b.w	8002d58 <HAL_DMA_IRQHandler>
 8002166:	bf00      	nop
 8002168:	200002a8 	.word	0x200002a8

0800216c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800216c:	4801      	ldr	r0, [pc, #4]	; (8002174 <DMA1_Channel4_IRQHandler+0x8>)
 800216e:	f000 bdf3 	b.w	8002d58 <HAL_DMA_IRQHandler>
 8002172:	bf00      	nop
 8002174:	20000330 	.word	0x20000330

08002178 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002178:	4801      	ldr	r0, [pc, #4]	; (8002180 <DMA1_Channel5_IRQHandler+0x8>)
 800217a:	f000 bded 	b.w	8002d58 <HAL_DMA_IRQHandler>
 800217e:	bf00      	nop
 8002180:	200002ec 	.word	0x200002ec

08002184 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002184:	4801      	ldr	r0, [pc, #4]	; (800218c <USART1_IRQHandler+0x8>)
 8002186:	f001 bd85 	b.w	8003c94 <HAL_UART_IRQHandler>
 800218a:	bf00      	nop
 800218c:	20000374 	.word	0x20000374

08002190 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002190:	2001      	movs	r0, #1
 8002192:	4770      	bx	lr

08002194 <_kill>:

int _kill(int pid, int sig)
{
 8002194:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002196:	f001 feab 	bl	8003ef0 <__errno>
 800219a:	2216      	movs	r2, #22
 800219c:	4603      	mov	r3, r0
	return -1;
}
 800219e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80021a2:	601a      	str	r2, [r3, #0]
}
 80021a4:	bd08      	pop	{r3, pc}
 80021a6:	bf00      	nop

080021a8 <_exit>:

void _exit (int status)
{
 80021a8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80021aa:	f001 fea1 	bl	8003ef0 <__errno>
 80021ae:	2316      	movs	r3, #22
 80021b0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80021b2:	e7fe      	b.n	80021b2 <_exit+0xa>

080021b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b6:	1e16      	subs	r6, r2, #0
 80021b8:	dd07      	ble.n	80021ca <_read+0x16>
 80021ba:	460c      	mov	r4, r1
 80021bc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80021be:	f3af 8000 	nop.w
 80021c2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	42a5      	cmp	r5, r4
 80021c8:	d1f9      	bne.n	80021be <_read+0xa>
	}

return len;
}
 80021ca:	4630      	mov	r0, r6
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
 80021ce:	bf00      	nop

080021d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d2:	1e16      	subs	r6, r2, #0
 80021d4:	dd07      	ble.n	80021e6 <_write+0x16>
 80021d6:	460c      	mov	r4, r1
 80021d8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80021da:	f814 0b01 	ldrb.w	r0, [r4], #1
 80021de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	42ac      	cmp	r4, r5
 80021e4:	d1f9      	bne.n	80021da <_write+0xa>
	}
	return len;
}
 80021e6:	4630      	mov	r0, r6
 80021e8:	bd70      	pop	{r4, r5, r6, pc}
 80021ea:	bf00      	nop

080021ec <_close>:

int _close(int file)
{
	return -1;
}
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop

080021f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80021f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80021f8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80021fa:	604b      	str	r3, [r1, #4]
}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop

08002200 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002200:	2001      	movs	r0, #1
 8002202:	4770      	bx	lr

08002204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002204:	2000      	movs	r0, #0
 8002206:	4770      	bx	lr

08002208 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002208:	490d      	ldr	r1, [pc, #52]	; (8002240 <_sbrk+0x38>)
{
 800220a:	4603      	mov	r3, r0
 800220c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800220e:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <_sbrk+0x3c>)
 8002210:	4c0d      	ldr	r4, [pc, #52]	; (8002248 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8002212:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002214:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002216:	b120      	cbz	r0, 8002222 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002218:	4403      	add	r3, r0
 800221a:	4293      	cmp	r3, r2
 800221c:	d807      	bhi.n	800222e <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800221e:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8002220:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002222:	4c0a      	ldr	r4, [pc, #40]	; (800224c <_sbrk+0x44>)
 8002224:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8002226:	4403      	add	r3, r0
 8002228:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800222a:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800222c:	d9f7      	bls.n	800221e <_sbrk+0x16>
    errno = ENOMEM;
 800222e:	f001 fe5f 	bl	8003ef0 <__errno>
 8002232:	220c      	movs	r2, #12
 8002234:	4603      	mov	r3, r0
    return (void *)-1;
 8002236:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	bd10      	pop	{r4, pc}
 800223e:	bf00      	nop
 8002240:	20000450 	.word	0x20000450
 8002244:	20001000 	.word	0x20001000
 8002248:	00000400 	.word	0x00000400
 800224c:	20000468 	.word	0x20000468

08002250 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop

08002254 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002254:	480c      	ldr	r0, [pc, #48]	; (8002288 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002256:	490d      	ldr	r1, [pc, #52]	; (800228c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002258:	4a0d      	ldr	r2, [pc, #52]	; (8002290 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800225a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800225c:	e002      	b.n	8002264 <LoopCopyDataInit>

0800225e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002262:	3304      	adds	r3, #4

08002264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002268:	d3f9      	bcc.n	800225e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800226c:	4c0a      	ldr	r4, [pc, #40]	; (8002298 <LoopFillZerobss+0x22>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002270:	e001      	b.n	8002276 <LoopFillZerobss>

08002272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002274:	3204      	adds	r2, #4

08002276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002278:	d3fb      	bcc.n	8002272 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800227a:	f7ff ffe9 	bl	8002250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227e:	f001 fe3d 	bl	8003efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002282:	f7ff fa1d 	bl	80016c0 <main>
  bx lr
 8002286:	4770      	bx	lr
  ldr r0, =_sdata
 8002288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800228c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002290:	0800718c 	.word	0x0800718c
  ldr r2, =_sbss
 8002294:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002298:	20000468 	.word	0x20000468

0800229c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800229c:	e7fe      	b.n	800229c <ADC1_IRQHandler>
	...

080022a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_InitTick+0x40>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b90b      	cbnz	r3, 80022ac <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80022a8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80022aa:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80022ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	490b      	ldr	r1, [pc, #44]	; (80022e4 <HAL_InitTick+0x44>)
 80022b6:	4605      	mov	r5, r0
 80022b8:	6808      	ldr	r0, [r1, #0]
 80022ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80022be:	f000 fbad 	bl	8002a1c <HAL_SYSTICK_Config>
 80022c2:	4604      	mov	r4, r0
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d1ef      	bne.n	80022a8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c8:	2d0f      	cmp	r5, #15
 80022ca:	d8ed      	bhi.n	80022a8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022cc:	4602      	mov	r2, r0
 80022ce:	4629      	mov	r1, r5
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f000 fb56 	bl	8002984 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_InitTick+0x48>)
 80022da:	4620      	mov	r0, r4
 80022dc:	601d      	str	r5, [r3, #0]
}
 80022de:	bd38      	pop	{r3, r4, r5, pc}
 80022e0:	2000000c 	.word	0x2000000c
 80022e4:	20000008 	.word	0x20000008
 80022e8:	20000010 	.word	0x20000010

080022ec <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ec:	2003      	movs	r0, #3
{
 80022ee:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	f000 fb36 	bl	8002960 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022f4:	200f      	movs	r0, #15
 80022f6:	f7ff ffd3 	bl	80022a0 <HAL_InitTick>
 80022fa:	b110      	cbz	r0, 8002302 <HAL_Init+0x16>
    status = HAL_ERROR;
 80022fc:	2401      	movs	r4, #1
}
 80022fe:	4620      	mov	r0, r4
 8002300:	bd10      	pop	{r4, pc}
 8002302:	4604      	mov	r4, r0
    HAL_MspInit();
 8002304:	f7ff fdec 	bl	8001ee0 <HAL_MspInit>
}
 8002308:	4620      	mov	r0, r4
 800230a:	bd10      	pop	{r4, pc}

0800230c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800230c:	4a03      	ldr	r2, [pc, #12]	; (800231c <HAL_IncTick+0x10>)
 800230e:	4904      	ldr	r1, [pc, #16]	; (8002320 <HAL_IncTick+0x14>)
 8002310:	6813      	ldr	r3, [r2, #0]
 8002312:	6809      	ldr	r1, [r1, #0]
 8002314:	440b      	add	r3, r1
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000454 	.word	0x20000454
 8002320:	2000000c 	.word	0x2000000c

08002324 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002324:	4b01      	ldr	r3, [pc, #4]	; (800232c <HAL_GetTick+0x8>)
 8002326:	6818      	ldr	r0, [r3, #0]
}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000454 	.word	0x20000454

08002330 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002330:	2800      	cmp	r0, #0
 8002332:	f000 80a9 	beq.w	8002488 <HAL_ADC_Init+0x158>
{
 8002336:	b530      	push	{r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002338:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800233a:	4604      	mov	r4, r0
{
 800233c:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 800233e:	2b00      	cmp	r3, #0
 8002340:	d078      	beq.n	8002434 <HAL_ADC_Init+0x104>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002342:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002344:	06d8      	lsls	r0, r3, #27
 8002346:	d453      	bmi.n	80023f0 <HAL_ADC_Init+0xc0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002348:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800234a:	4a5c      	ldr	r2, [pc, #368]	; (80024bc <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 800234c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002350:	f023 0302 	bic.w	r3, r3, #2
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800235a:	6853      	ldr	r3, [r2, #4]
 800235c:	6861      	ldr	r1, [r4, #4]
 800235e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002362:	430b      	orrs	r3, r1
 8002364:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800236a:	fa91 f1a1 	rbit	r1, r1
 800236e:	2302      	movs	r3, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002370:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002374:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002380:	6965      	ldr	r5, [r4, #20]
 8002382:	68e2      	ldr	r2, [r4, #12]
 8002384:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 8002388:	432a      	orrs	r2, r5
 800238a:	6a25      	ldr	r5, [r4, #32]
 800238c:	fa0c f101 	lsl.w	r1, ip, r1
 8002390:	432a      	orrs	r2, r5
 8002392:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002394:	6b61      	ldr	r1, [r4, #52]	; 0x34
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002396:	fa00 f303 	lsl.w	r3, r0, r3
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800239a:	2910      	cmp	r1, #16
                hadc->Init.ChannelsBank                                        |
 800239c:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023a0:	d002      	beq.n	80023a8 <HAL_ADC_Init+0x78>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80023a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80023a4:	4311      	orrs	r1, r2
 80023a6:	430b      	orrs	r3, r1
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80023a8:	6822      	ldr	r2, [r4, #0]
 80023aa:	6811      	ldr	r1, [r2, #0]
 80023ac:	0649      	lsls	r1, r1, #25
 80023ae:	d551      	bpl.n	8002454 <HAL_ADC_Init+0x124>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80023b0:	6925      	ldr	r5, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80023b2:	6890      	ldr	r0, [r2, #8]
 80023b4:	4942      	ldr	r1, [pc, #264]	; (80024c0 <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023b6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 80023ba:	ea01 0100 	and.w	r1, r1, r0
 80023be:	ea41 0103 	orr.w	r1, r1, r3
 80023c2:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023c4:	d017      	beq.n	80023f6 <HAL_ADC_Init+0xc6>
 80023c6:	2d01      	cmp	r5, #1
 80023c8:	d015      	beq.n	80023f6 <HAL_ADC_Init+0xc6>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80023ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023cc:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 80023d0:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80023d2:	6891      	ldr	r1, [r2, #8]
 80023d4:	4a3b      	ldr	r2, [pc, #236]	; (80024c4 <HAL_ADC_Init+0x194>)
 80023d6:	400a      	ands	r2, r1
 80023d8:	429a      	cmp	r2, r3
 80023da:	d11f      	bne.n	800241c <HAL_ADC_Init+0xec>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023dc:	2000      	movs	r0, #0
 80023de:	6520      	str	r0, [r4, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80023ec:	b003      	add	sp, #12
 80023ee:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80023f0:	2001      	movs	r0, #1
}
 80023f2:	b003      	add	sp, #12
 80023f4:	bd30      	pop	{r4, r5, pc}
 80023f6:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80023fa:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80023fc:	fa91 f1a1 	rbit	r1, r1
 8002400:	fab1 f081 	clz	r0, r1
 8002404:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002406:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 800240a:	3901      	subs	r1, #1
 800240c:	4081      	lsls	r1, r0
 800240e:	4329      	orrs	r1, r5
 8002410:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002412:	6891      	ldr	r1, [r2, #8]
 8002414:	4a2b      	ldr	r2, [pc, #172]	; (80024c4 <HAL_ADC_Init+0x194>)
 8002416:	400a      	ands	r2, r1
 8002418:	429a      	cmp	r2, r3
 800241a:	d0df      	beq.n	80023dc <HAL_ADC_Init+0xac>
      tmp_hal_status = HAL_ERROR;
 800241c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800241e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002420:	f023 0312 	bic.w	r3, r3, #18
 8002424:	f043 0310 	orr.w	r3, r3, #16
 8002428:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800242c:	4303      	orrs	r3, r0
 800242e:	6523      	str	r3, [r4, #80]	; 0x50
}
 8002430:	b003      	add	sp, #12
 8002432:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002434:	4a24      	ldr	r2, [pc, #144]	; (80024c8 <HAL_ADC_Init+0x198>)
    ADC_CLEAR_ERRORCODE(hadc);
 8002436:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 8002438:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243c:	6a13      	ldr	r3, [r2, #32]
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	6a13      	ldr	r3, [r2, #32]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 800244e:	f7ff fd69 	bl	8001f24 <HAL_ADC_MspInit>
 8002452:	e776      	b.n	8002342 <HAL_ADC_Init+0x12>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002454:	69a1      	ldr	r1, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002456:	68a5      	ldr	r5, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002458:	430b      	orrs	r3, r1
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800245a:	69e1      	ldr	r1, [r4, #28]
 800245c:	ea45 0c01 	orr.w	ip, r5, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002460:	6925      	ldr	r5, [r4, #16]
 8002462:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002466:	d00c      	beq.n	8002482 <HAL_ADC_Init+0x152>
 8002468:	2d01      	cmp	r5, #1
 800246a:	d00a      	beq.n	8002482 <HAL_ADC_Init+0x152>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800246c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8002470:	2901      	cmp	r1, #1
 8002472:	d00b      	beq.n	800248c <HAL_ADC_Init+0x15c>
        MODIFY_REG(hadc->Instance->CR1,
 8002474:	6850      	ldr	r0, [r2, #4]
 8002476:	4915      	ldr	r1, [pc, #84]	; (80024cc <HAL_ADC_Init+0x19c>)
 8002478:	4001      	ands	r1, r0
 800247a:	ea41 010c 	orr.w	r1, r1, ip
 800247e:	6051      	str	r1, [r2, #4]
 8002480:	e797      	b.n	80023b2 <HAL_ADC_Init+0x82>
                  hadc->Init.LowPowerAutoPowerOff           |
 8002482:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8002486:	e7f1      	b.n	800246c <HAL_ADC_Init+0x13c>
    return HAL_ERROR;
 8002488:	2001      	movs	r0, #1
}
 800248a:	4770      	bx	lr
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800248c:	b968      	cbnz	r0, 80024aa <HAL_ADC_Init+0x17a>
 800248e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002492:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002496:	fab1 f081 	clz	r0, r1
 800249a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800249c:	3901      	subs	r1, #1
 800249e:	4081      	lsls	r1, r0
 80024a0:	ea41 010c 	orr.w	r1, r1, ip
 80024a4:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 80024a8:	e7e4      	b.n	8002474 <HAL_ADC_Init+0x144>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80024ac:	f041 0120 	orr.w	r1, r1, #32
 80024b0:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80024b4:	f041 0101 	orr.w	r1, r1, #1
 80024b8:	6521      	str	r1, [r4, #80]	; 0x50
 80024ba:	e7db      	b.n	8002474 <HAL_ADC_Init+0x144>
 80024bc:	40012700 	.word	0x40012700
 80024c0:	c0fff18d 	.word	0xc0fff18d
 80024c4:	bf80fffe 	.word	0xbf80fffe
 80024c8:	40023800 	.word	0x40023800
 80024cc:	fcfc16ff 	.word	0xfcfc16ff

080024d0 <HAL_ADC_DeInit>:
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024d0:	2800      	cmp	r0, #0
 80024d2:	d075      	beq.n	80025c0 <HAL_ADC_DeInit+0xf0>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80024d4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 80024d6:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80024d8:	f042 0202 	orr.w	r2, r2, #2
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024dc:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80024de:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4604      	mov	r4, r0
 80024e4:	0655      	lsls	r5, r2, #25
 80024e6:	d453      	bmi.n	8002590 <HAL_ADC_DeInit+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 80024e8:	f06f 001f 	mvn.w	r0, #31
 80024ec:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80024ee:	6858      	ldr	r0, [r3, #4]
 80024f0:	4939      	ldr	r1, [pc, #228]	; (80025d8 <HAL_ADC_DeInit+0x108>)
    ADC_CR2_CLEAR(hadc);
 80024f2:	4a3a      	ldr	r2, [pc, #232]	; (80025dc <HAL_ADC_DeInit+0x10c>)
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80024f4:	4001      	ands	r1, r0
 80024f6:	6059      	str	r1, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 80024f8:	6899      	ldr	r1, [r3, #8]
 80024fa:	400a      	ands	r2, r1
 80024fc:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 80024fe:	bf00      	nop
    ADC_SMPR1_CLEAR(hadc);
 8002500:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8002502:	4a37      	ldr	r2, [pc, #220]	; (80025e0 <HAL_ADC_DeInit+0x110>)
    ADC_SMPR1_CLEAR(hadc);
 8002504:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8002506:	4837      	ldr	r0, [pc, #220]	; (80025e4 <HAL_ADC_DeInit+0x114>)
    ADC_SMPR1_CLEAR(hadc);
 8002508:	0d49      	lsrs	r1, r1, #21
 800250a:	0549      	lsls	r1, r1, #21
 800250c:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 800250e:	6919      	ldr	r1, [r3, #16]
 8002510:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8002514:	6119      	str	r1, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 8002516:	6959      	ldr	r1, [r3, #20]
 8002518:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800251c:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 800251e:	6999      	ldr	r1, [r3, #24]
 8002520:	4011      	ands	r1, r2
 8002522:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8002524:	69d9      	ldr	r1, [r3, #28]
 8002526:	4011      	ands	r1, r2
 8002528:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 800252a:	6a19      	ldr	r1, [r3, #32]
 800252c:	4011      	ands	r1, r2
 800252e:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8002530:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002532:	4011      	ands	r1, r2
 8002534:	6259      	str	r1, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8002536:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002538:	4011      	ands	r1, r2
 800253a:	6299      	str	r1, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 800253c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800253e:	400a      	ands	r2, r1
 8002540:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8002542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8002544:	4928      	ldr	r1, [pc, #160]	; (80025e8 <HAL_ADC_DeInit+0x118>)
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8002546:	4010      	ands	r0, r2
 8002548:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 800254a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_ADC_MspDeInit(hadc);
 800254c:	4620      	mov	r0, r4
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 800254e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002552:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8002554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002556:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800255a:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 800255c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800255e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002562:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 8002564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002566:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 800256c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800256e:	0d92      	lsrs	r2, r2, #22
 8002570:	0592      	lsls	r2, r2, #22
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8002574:	684b      	ldr	r3, [r1, #4]
 8002576:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800257a:	604b      	str	r3, [r1, #4]
    HAL_ADC_MspDeInit(hadc);
 800257c:	f7ff fd20 	bl	8001fc0 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002580:	2300      	movs	r3, #0
    hadc->State = HAL_ADC_STATE_RESET;
 8002582:	4618      	mov	r0, r3
    ADC_CLEAR_ERRORCODE(hadc);
 8002584:	6523      	str	r3, [r4, #80]	; 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 8002586:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 8002588:	2300      	movs	r3, #0
 800258a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 800258e:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002598:	f7ff fec4 	bl	8002324 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800259c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800259e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	0650      	lsls	r0, r2, #25
 80025a4:	d5a0      	bpl.n	80024e8 <HAL_ADC_DeInit+0x18>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80025a6:	f7ff febd 	bl	8002324 <HAL_GetTick>
 80025aa:	1b40      	subs	r0, r0, r5
 80025ac:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80025ae:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80025b0:	d902      	bls.n	80025b8 <HAL_ADC_DeInit+0xe8>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	0651      	lsls	r1, r2, #25
 80025b6:	d405      	bmi.n	80025c4 <HAL_ADC_DeInit+0xf4>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	0652      	lsls	r2, r2, #25
 80025bc:	d4f3      	bmi.n	80025a6 <HAL_ADC_DeInit+0xd6>
 80025be:	e793      	b.n	80024e8 <HAL_ADC_DeInit+0x18>
    return HAL_ERROR;
 80025c0:	2001      	movs	r0, #1
}
 80025c2:	4770      	bx	lr
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c4:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025c8:	f043 0310 	orr.w	r3, r3, #16
 80025cc:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80025d0:	4303      	orrs	r3, r0
 80025d2:	6523      	str	r3, [r4, #80]	; 0x50
  if (tmp_hal_status == HAL_OK)
 80025d4:	e7d8      	b.n	8002588 <HAL_ADC_DeInit+0xb8>
 80025d6:	bf00      	nop
 80025d8:	f83c0000 	.word	0xf83c0000
 80025dc:	8080f08c 	.word	0x8080f08c
 80025e0:	fffff000 	.word	0xfffff000
 80025e4:	fe0f8000 	.word	0xfe0f8000
 80025e8:	40012700 	.word	0x40012700

080025ec <HAL_ADC_ConvCpltCallback>:
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop

080025f0 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025f4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80025f8:	d126      	bne.n	8002648 <ADC_DMAConvCplt+0x58>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025fc:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8002602:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002604:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002606:	688a      	ldr	r2, [r1, #8]
 8002608:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800260c:	d118      	bne.n	8002640 <ADC_DMAConvCplt+0x50>
 800260e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8002612:	b9aa      	cbnz	r2, 8002640 <ADC_DMAConvCplt+0x50>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002614:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002616:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 800261a:	d002      	beq.n	8002622 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800261c:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800261e:	0550      	lsls	r0, r2, #21
 8002620:	d40e      	bmi.n	8002640 <ADC_DMAConvCplt+0x50>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002622:	684a      	ldr	r2, [r1, #4]
 8002624:	f022 0220 	bic.w	r2, r2, #32
 8002628:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800262a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800262c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002630:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002634:	04d2      	lsls	r2, r2, #19
 8002636:	d403      	bmi.n	8002640 <ADC_DMAConvCplt+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002638:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ffd3 	bl	80025ec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002646:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	4718      	bx	r3
 800264e:	bf00      	nop

08002650 <HAL_ADC_ConvHalfCpltCallback>:
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop

08002654 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002654:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002656:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002658:	f7ff fffa 	bl	8002650 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800265c:	bd08      	pop	{r3, pc}
 800265e:	bf00      	nop

08002660 <HAL_ADC_ErrorCallback>:
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop

08002664 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002664:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002666:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002668:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800266a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800266e:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002670:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002678:	f7ff fff2 	bl	8002660 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800267c:	bd08      	pop	{r3, pc}
 800267e:	bf00      	nop

08002680 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8002680:	2300      	movs	r3, #0
{
 8002682:	b530      	push	{r4, r5, lr}
 8002684:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8002686:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002688:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800268c:	2b01      	cmp	r3, #1
 800268e:	f000 80aa 	beq.w	80027e6 <HAL_ADC_ConfigChannel+0x166>
 8002692:	2301      	movs	r3, #1
 8002694:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 8002698:	684b      	ldr	r3, [r1, #4]
 800269a:	4602      	mov	r2, r0
 800269c:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR5,
 800269e:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7)
 80026a0:	d924      	bls.n	80026ec <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13)
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d866      	bhi.n	8002774 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SQR4,
 80026a6:	f04f 0c1f 	mov.w	ip, #31
 80026aa:	680c      	ldr	r4, [r1, #0]
 80026ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026b0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80026b2:	3b23      	subs	r3, #35	; 0x23
 80026b4:	fa04 fe03 	lsl.w	lr, r4, r3
 80026b8:	fa0c f303 	lsl.w	r3, ip, r3
 80026bc:	ea25 0303 	bic.w	r3, r5, r3
 80026c0:	ea43 030e 	orr.w	r3, r3, lr
 80026c4:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel < ADC_CHANNEL_10)
 80026c6:	2c09      	cmp	r4, #9
 80026c8:	d822      	bhi.n	8002710 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR3,
 80026ca:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80026ce:	2407      	movs	r4, #7
 80026d0:	6943      	ldr	r3, [r0, #20]
 80026d2:	6889      	ldr	r1, [r1, #8]
 80026d4:	40ac      	lsls	r4, r5
 80026d6:	40a9      	lsls	r1, r5
 80026d8:	ea23 0404 	bic.w	r4, r3, r4
 80026dc:	430c      	orrs	r4, r1
 80026de:	6144      	str	r4, [r0, #20]
  __HAL_UNLOCK(hadc);
 80026e0:	2300      	movs	r3, #0
  return tmp_hal_status;
 80026e2:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 80026e4:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
}
 80026e8:	b003      	add	sp, #12
 80026ea:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR5,
 80026ec:	f04f 0c1f 	mov.w	ip, #31
 80026f0:	680c      	ldr	r4, [r1, #0]
 80026f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026f6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80026f8:	3b05      	subs	r3, #5
 80026fa:	fa04 fe03 	lsl.w	lr, r4, r3
 80026fe:	fa0c f303 	lsl.w	r3, ip, r3
 8002702:	ea25 0303 	bic.w	r3, r5, r3
 8002706:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel < ADC_CHANNEL_10)
 800270a:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SQR5,
 800270c:	6403      	str	r3, [r0, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 800270e:	d9dc      	bls.n	80026ca <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002710:	2c13      	cmp	r4, #19
 8002712:	d844      	bhi.n	800279e <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 8002714:	f04f 0c07 	mov.w	ip, #7
 8002718:	688d      	ldr	r5, [r1, #8]
 800271a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800271e:	6903      	ldr	r3, [r0, #16]
 8002720:	391e      	subs	r1, #30
 8002722:	408d      	lsls	r5, r1
 8002724:	fa0c f101 	lsl.w	r1, ip, r1
 8002728:	ea23 0301 	bic.w	r3, r3, r1
 800272c:	432b      	orrs	r3, r5
 800272e:	6103      	str	r3, [r0, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002730:	f1a4 0310 	sub.w	r3, r4, #16
 8002734:	2b01      	cmp	r3, #1
 8002736:	d8d3      	bhi.n	80026e0 <HAL_ADC_ConfigChannel+0x60>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002738:	4b34      	ldr	r3, [pc, #208]	; (800280c <HAL_ADC_ConfigChannel+0x18c>)
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	0209      	lsls	r1, r1, #8
 800273e:	d4cf      	bmi.n	80026e0 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002740:	6859      	ldr	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002742:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002744:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002748:	6059      	str	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800274a:	d1c9      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800274c:	4b30      	ldr	r3, [pc, #192]	; (8002810 <HAL_ADC_ConfigChannel+0x190>)
 800274e:	4931      	ldr	r1, [pc, #196]	; (8002814 <HAL_ADC_ConfigChannel+0x194>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	fba1 1303 	umull	r1, r3, r1, r3
 8002756:	0c9b      	lsrs	r3, r3, #18
 8002758:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8002760:	9b01      	ldr	r3, [sp, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0bc      	beq.n	80026e0 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8002766:	9b01      	ldr	r3, [sp, #4]
 8002768:	3b01      	subs	r3, #1
 800276a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800276c:	9b01      	ldr	r3, [sp, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f9      	bne.n	8002766 <HAL_ADC_ConfigChannel+0xe6>
 8002772:	e7b5      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x60>
  else if (sConfig->Rank < 19)
 8002774:	2b12      	cmp	r3, #18
 8002776:	d925      	bls.n	80027c4 <HAL_ADC_ConfigChannel+0x144>
  else if (sConfig->Rank < 25)
 8002778:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 800277a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 800277e:	d835      	bhi.n	80027ec <HAL_ADC_ConfigChannel+0x16c>
    MODIFY_REG(hadc->Instance->SQR2,
 8002780:	f04f 0c1f 	mov.w	ip, #31
 8002784:	680c      	ldr	r4, [r1, #0]
 8002786:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8002788:	3b5f      	subs	r3, #95	; 0x5f
 800278a:	fa04 fe03 	lsl.w	lr, r4, r3
 800278e:	fa0c f303 	lsl.w	r3, ip, r3
 8002792:	ea25 0303 	bic.w	r3, r5, r3
 8002796:	ea43 030e 	orr.w	r3, r3, lr
 800279a:	6343      	str	r3, [r0, #52]	; 0x34
 800279c:	e793      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800279e:	2c1a      	cmp	r4, #26
 80027a0:	d80d      	bhi.n	80027be <HAL_ADC_ConfigChannel+0x13e>
    MODIFY_REG(hadc->Instance->SMPR1,
 80027a2:	2507      	movs	r5, #7
 80027a4:	6889      	ldr	r1, [r1, #8]
 80027a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80027aa:	68c3      	ldr	r3, [r0, #12]
 80027ac:	3c3c      	subs	r4, #60	; 0x3c
 80027ae:	40a1      	lsls	r1, r4
 80027b0:	fa05 f404 	lsl.w	r4, r5, r4
 80027b4:	ea23 0304 	bic.w	r3, r3, r4
 80027b8:	430b      	orrs	r3, r1
 80027ba:	60c3      	str	r3, [r0, #12]
 80027bc:	e790      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x60>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80027be:	bf00      	nop
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027c0:	680c      	ldr	r4, [r1, #0]
 80027c2:	e7b5      	b.n	8002730 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR3,
 80027c4:	f04f 0c1f 	mov.w	ip, #31
 80027c8:	680c      	ldr	r4, [r1, #0]
 80027ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027ce:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80027d0:	3b41      	subs	r3, #65	; 0x41
 80027d2:	fa04 fe03 	lsl.w	lr, r4, r3
 80027d6:	fa0c f303 	lsl.w	r3, ip, r3
 80027da:	ea25 0303 	bic.w	r3, r5, r3
 80027de:	ea43 030e 	orr.w	r3, r3, lr
 80027e2:	6383      	str	r3, [r0, #56]	; 0x38
 80027e4:	e76f      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x46>
  __HAL_LOCK(hadc);
 80027e6:	2002      	movs	r0, #2
}
 80027e8:	b003      	add	sp, #12
 80027ea:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR1,
 80027ec:	f04f 0c1f 	mov.w	ip, #31
 80027f0:	680c      	ldr	r4, [r1, #0]
 80027f2:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80027f4:	3b7d      	subs	r3, #125	; 0x7d
 80027f6:	fa04 fe03 	lsl.w	lr, r4, r3
 80027fa:	fa0c f303 	lsl.w	r3, ip, r3
 80027fe:	ea25 0303 	bic.w	r3, r5, r3
 8002802:	ea43 030e 	orr.w	r3, r3, lr
 8002806:	6303      	str	r3, [r0, #48]	; 0x30
 8002808:	e75d      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x46>
 800280a:	bf00      	nop
 800280c:	40012700 	.word	0x40012700
 8002810:	20000008 	.word	0x20000008
 8002814:	431bde83 	.word	0x431bde83

08002818 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 8002818:	2300      	movs	r3, #0
{
 800281a:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800281c:	6802      	ldr	r2, [r0, #0]
{
 800281e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8002820:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002822:	6813      	ldr	r3, [r2, #0]
 8002824:	0659      	lsls	r1, r3, #25
 8002826:	d429      	bmi.n	800287c <ADC_Enable+0x64>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002828:	4b1c      	ldr	r3, [pc, #112]	; (800289c <ADC_Enable+0x84>)
 800282a:	4604      	mov	r4, r0
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	481c      	ldr	r0, [pc, #112]	; (80028a0 <ADC_Enable+0x88>)
    __HAL_ADC_ENABLE(hadc);
 8002830:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002832:	fba0 0303 	umull	r0, r3, r0, r3
 8002836:	0c9b      	lsrs	r3, r3, #18
 8002838:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 800283c:	f041 0101 	orr.w	r1, r1, #1
 8002840:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002842:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002844:	9b01      	ldr	r3, [sp, #4]
 8002846:	b12b      	cbz	r3, 8002854 <ADC_Enable+0x3c>
      wait_loop_index--;
 8002848:	9b01      	ldr	r3, [sp, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800284e:	9b01      	ldr	r3, [sp, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f9      	bne.n	8002848 <ADC_Enable+0x30>
    tickstart = HAL_GetTick();    
 8002854:	f7ff fd66 	bl	8002324 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002858:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();    
 800285a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	065a      	lsls	r2, r3, #25
 8002860:	d40c      	bmi.n	800287c <ADC_Enable+0x64>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002862:	f7ff fd5f 	bl	8002324 <HAL_GetTick>
 8002866:	1b43      	subs	r3, r0, r5
 8002868:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 800286a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800286c:	d903      	bls.n	8002876 <ADC_Enable+0x5e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8002874:	d005      	beq.n	8002882 <ADC_Enable+0x6a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	065b      	lsls	r3, r3, #25
 800287a:	d5f2      	bpl.n	8002862 <ADC_Enable+0x4a>
  return HAL_OK;
 800287c:	2000      	movs	r0, #0
}
 800287e:	b003      	add	sp, #12
 8002880:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8002882:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002884:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 8002886:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288a:	f043 0310 	orr.w	r3, r3, #16
 800288e:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002890:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002892:	4303      	orrs	r3, r0
 8002894:	6523      	str	r3, [r4, #80]	; 0x50
}
 8002896:	b003      	add	sp, #12
 8002898:	bd30      	pop	{r4, r5, pc}
 800289a:	bf00      	nop
 800289c:	20000008 	.word	0x20000008
 80028a0:	431bde83 	.word	0x431bde83

080028a4 <HAL_ADC_Start_DMA>:
{
 80028a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 80028a8:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 80028ac:	2d01      	cmp	r5, #1
 80028ae:	d04c      	beq.n	800294a <HAL_ADC_Start_DMA+0xa6>
 80028b0:	2301      	movs	r3, #1
 80028b2:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 80028b6:	4604      	mov	r4, r0
 80028b8:	4688      	mov	r8, r1
 80028ba:	4617      	mov	r7, r2
 80028bc:	f7ff ffac 	bl	8002818 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80028c0:	4605      	mov	r5, r0
 80028c2:	2800      	cmp	r0, #0
 80028c4:	d13e      	bne.n	8002944 <HAL_ADC_Start_DMA+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 80028c6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028c8:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80028ca:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80028ce:	f020 0001 	bic.w	r0, r0, #1
 80028d2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80028d6:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028d8:	6873      	ldr	r3, [r6, #4]
 80028da:	055b      	lsls	r3, r3, #21
 80028dc:	d505      	bpl.n	80028ea <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80028e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028e8:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 80028ea:	2100      	movs	r1, #0
 80028ec:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028f0:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028f6:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028fc:	bf18      	it	ne
 80028fe:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002900:	4642      	mov	r2, r8
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002902:	bf18      	it	ne
 8002904:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002908:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800290a:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800290c:	4f11      	ldr	r7, [pc, #68]	; (8002954 <HAL_ADC_Start_DMA+0xb0>)
 800290e:	6287      	str	r7, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002910:	4f11      	ldr	r7, [pc, #68]	; (8002958 <HAL_ADC_Start_DMA+0xb4>)
 8002912:	62c7      	str	r7, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002914:	4f11      	ldr	r7, [pc, #68]	; (800295c <HAL_ADC_Start_DMA+0xb8>)
 8002916:	6307      	str	r7, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002918:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800291a:	6871      	ldr	r1, [r6, #4]
 800291c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8002920:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002922:	68b1      	ldr	r1, [r6, #8]
 8002924:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002928:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800292a:	f106 0158 	add.w	r1, r6, #88	; 0x58
 800292e:	f000 f979 	bl	8002c24 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800293a:	d103      	bne.n	8002944 <HAL_ADC_Start_DMA+0xa0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002942:	609a      	str	r2, [r3, #8]
}
 8002944:	4628      	mov	r0, r5
 8002946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 800294a:	2502      	movs	r5, #2
}
 800294c:	4628      	mov	r0, r5
 800294e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002952:	bf00      	nop
 8002954:	080025f1 	.word	0x080025f1
 8002958:	08002655 	.word	0x08002655
 800295c:	08002665 	.word	0x08002665

08002960 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002960:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4906      	ldr	r1, [pc, #24]	; (8002980 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002966:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002968:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800296a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800297c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002984:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002986:	b500      	push	{lr}
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800298e:	f1c3 0e07 	rsb	lr, r3, #7
 8002992:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002996:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800299a:	bf28      	it	cs
 800299c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a0:	f1bc 0f06 	cmp.w	ip, #6
 80029a4:	d91b      	bls.n	80029de <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a6:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029aa:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	fa0c fc03 	lsl.w	ip, ip, r3
 80029b0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	f04f 3cff 	mov.w	ip, #4294967295
 80029b8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80029bc:	ea21 010c 	bic.w	r1, r1, ip
 80029c0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80029c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80029c8:	db0c      	blt.n	80029e4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ca:	0109      	lsls	r1, r1, #4
 80029cc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80029d0:	b2c9      	uxtb	r1, r1
 80029d2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80029d6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80029da:	f85d fb04 	ldr.w	pc, [sp], #4
 80029de:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e0:	4613      	mov	r3, r2
 80029e2:	e7e7      	b.n	80029b4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_NVIC_SetPriority+0x78>)
 80029e6:	f000 000f 	and.w	r0, r0, #15
 80029ea:	0109      	lsls	r1, r1, #4
 80029ec:	b2c9      	uxtb	r1, r1
 80029ee:	4403      	add	r3, r0
 80029f0:	7619      	strb	r1, [r3, #24]
 80029f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80029f6:	bf00      	nop
 80029f8:	e000ed00 	.word	0xe000ed00
 80029fc:	e000ecfc 	.word	0xe000ecfc

08002a00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a00:	2800      	cmp	r0, #0
 8002a02:	db07      	blt.n	8002a14 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a04:	2301      	movs	r3, #1
 8002a06:	f000 011f 	and.w	r1, r0, #31
 8002a0a:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <HAL_NVIC_EnableIRQ+0x18>)
 8002a0c:	0940      	lsrs	r0, r0, #5
 8002a0e:	408b      	lsls	r3, r1
 8002a10:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	e000e100 	.word	0xe000e100

08002a1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	3801      	subs	r0, #1
 8002a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002a22:	d20f      	bcs.n	8002a44 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a28:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a2c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a30:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	4c05      	ldr	r4, [pc, #20]	; (8002a48 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a34:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a36:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8002a3e:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a40:	6119      	str	r1, [r3, #16]
 8002a42:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002a44:	2001      	movs	r0, #1
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8002a4c:	b188      	cbz	r0, 8002a72 <HAL_DAC_Init+0x26>
{
 8002a4e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a50:	7903      	ldrb	r3, [r0, #4]
 8002a52:	4604      	mov	r4, r0
 8002a54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a58:	b13b      	cbz	r3, 8002a6a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a5a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a5c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a5e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a60:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a62:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002a64:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002a66:	4618      	mov	r0, r3
}
 8002a68:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8002a6a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8002a6c:	f7ff fac4 	bl	8001ff8 <HAL_DAC_MspInit>
 8002a70:	e7f3      	b.n	8002a5a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8002a72:	2001      	movs	r0, #1
}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop

08002a78 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a78:	7942      	ldrb	r2, [r0, #5]
 8002a7a:	2a01      	cmp	r2, #1
 8002a7c:	d02a      	beq.n	8002ad4 <HAL_DAC_Start+0x5c>
{
 8002a7e:	b410      	push	{r4}
 8002a80:	4603      	mov	r3, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a82:	2402      	movs	r4, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002a84:	2201      	movs	r2, #1
 8002a86:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a88:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8002a8a:	6804      	ldr	r4, [r0, #0]
 8002a8c:	f001 0c10 	and.w	ip, r1, #16
 8002a90:	fa02 f20c 	lsl.w	r2, r2, ip
 8002a94:	4322      	orrs	r2, r4
 8002a96:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 8002a98:	b979      	cbnz	r1, 8002aba <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002a9a:	6802      	ldr	r2, [r0, #0]
 8002a9c:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8002aa0:	2a3c      	cmp	r2, #60	; 0x3c
 8002aa2:	d103      	bne.n	8002aac <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002aa4:	6842      	ldr	r2, [r0, #4]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002aac:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002aae:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8002ab0:	715a      	strb	r2, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8002ab2:	7119      	strb	r1, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ab4:	4610      	mov	r0, r2
}
 8002ab6:	bc10      	pop	{r4}
 8002ab8:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002aba:	223c      	movs	r2, #60	; 0x3c
 8002abc:	6801      	ldr	r1, [r0, #0]
 8002abe:	fa02 fc0c 	lsl.w	ip, r2, ip
 8002ac2:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8002ac6:	4561      	cmp	r1, ip
 8002ac8:	d1f0      	bne.n	8002aac <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002aca:	6842      	ldr	r2, [r0, #4]
 8002acc:	f042 0202 	orr.w	r2, r2, #2
 8002ad0:	6042      	str	r2, [r0, #4]
 8002ad2:	e7eb      	b.n	8002aac <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 8002ad4:	2002      	movs	r0, #2
}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002ad8:	b410      	push	{r4}
  __IO uint32_t tmp = 0UL;
 8002ada:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002adc:	6800      	ldr	r0, [r0, #0]
{
 8002ade:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8002ae0:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8002ae2:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8002ae4:	b949      	cbnz	r1, 8002afa <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ae6:	9901      	ldr	r1, [sp, #4]
 8002ae8:	3108      	adds	r1, #8
 8002aea:	440a      	add	r2, r1
 8002aec:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
}
 8002aee:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8002af0:	9a01      	ldr	r2, [sp, #4]
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	b003      	add	sp, #12
 8002af6:	bc10      	pop	{r4}
 8002af8:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002afa:	9901      	ldr	r1, [sp, #4]
 8002afc:	3114      	adds	r1, #20
 8002afe:	440a      	add	r2, r1
 8002b00:	9201      	str	r2, [sp, #4]
 8002b02:	e7f4      	b.n	8002aee <HAL_DAC_SetValue+0x16>

08002b04 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b04:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b06:	7940      	ldrb	r0, [r0, #5]
 8002b08:	2801      	cmp	r0, #1
 8002b0a:	d022      	beq.n	8002b52 <HAL_DAC_ConfigChannel+0x4e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b0c:	2002      	movs	r0, #2
{
 8002b0e:	b570      	push	{r4, r5, r6, lr}
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002b10:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002b14:	f640 76fe 	movw	r6, #4094	; 0xffe

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b18:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002b1c:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b1e:	7118      	strb	r0, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8002b20:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002b22:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002b26:	f002 0210 	and.w	r2, r2, #16
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002b2a:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002b2c:	4096      	lsls	r6, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002b2e:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b32:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 = hdac->Instance->CR;
 8002b36:	6821      	ldr	r1, [r4, #0]

  /* Return function status */
  return HAL_OK;
 8002b38:	4670      	mov	r0, lr
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002b3a:	ea21 0106 	bic.w	r1, r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b3e:	430a      	orrs	r2, r1
  hdac->Instance->CR = tmpreg1;
 8002b40:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002b42:	6822      	ldr	r2, [r4, #0]
 8002b44:	ea22 020c 	bic.w	r2, r2, ip
 8002b48:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002b4a:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8002b4c:	f883 e005 	strb.w	lr, [r3, #5]
}
 8002b50:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 8002b52:	2002      	movs	r0, #2
}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop

08002b58 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b58:	b370      	cbz	r0, 8002bb8 <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b5a:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b5c:	2202      	movs	r2, #2
{
 8002b5e:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b60:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b64:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b66:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8002b6c:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6e:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002b70:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
  tmp |=  hdma->Init.Direction        |
 8002b74:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8002b78:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b7a:	4910      	ldr	r1, [pc, #64]	; (8002bbc <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7c:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b7e:	4d10      	ldr	r5, [pc, #64]	; (8002bc0 <HAL_DMA_Init+0x68>)
 8002b80:	4401      	add	r1, r0
 8002b82:	fba5 5101 	umull	r5, r1, r5, r1
 8002b86:	0909      	lsrs	r1, r1, #4
 8002b88:	0089      	lsls	r1, r1, #2
 8002b8a:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8c:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002b8e:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b92:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b94:	6959      	ldr	r1, [r3, #20]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	6999      	ldr	r1, [r3, #24]
 8002b9a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b9c:	69d9      	ldr	r1, [r3, #28]
 8002b9e:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8002ba0:	4908      	ldr	r1, [pc, #32]	; (8002bc4 <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 8002ba2:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 8002ba6:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8002ba8:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002baa:	639c      	str	r4, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bac:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8002bb0:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 8002bb4:	4620      	mov	r0, r4
}
 8002bb6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002bb8:	2001      	movs	r0, #1
}
 8002bba:	4770      	bx	lr
 8002bbc:	bffd9ff8 	.word	0xbffd9ff8
 8002bc0:	cccccccd 	.word	0xcccccccd
 8002bc4:	40026000 	.word	0x40026000

08002bc8 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002bc8:	b320      	cbz	r0, 8002c14 <HAL_DMA_DeInit+0x4c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002bca:	4603      	mov	r3, r0

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bcc:	2101      	movs	r1, #1
{
 8002bce:	b430      	push	{r4, r5}
  hdma->Instance->CCR = 0U;
 8002bd0:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002bd2:	6805      	ldr	r5, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bd4:	4810      	ldr	r0, [pc, #64]	; (8002c18 <HAL_DMA_DeInit+0x50>)
  __HAL_DMA_DISABLE(hdma);
 8002bd6:	682a      	ldr	r2, [r5, #0]
 8002bd8:	f022 0201 	bic.w	r2, r2, #1
 8002bdc:	602a      	str	r2, [r5, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bde:	4a0f      	ldr	r2, [pc, #60]	; (8002c1c <HAL_DMA_DeInit+0x54>)
 8002be0:	442a      	add	r2, r5
 8002be2:	fba0 0202 	umull	r0, r2, r0, r2
 8002be6:	0912      	lsrs	r2, r2, #4
 8002be8:	0092      	lsls	r2, r2, #2
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bec:	f002 021c 	and.w	r2, r2, #28
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8002bf4:	490a      	ldr	r1, [pc, #40]	; (8002c20 <HAL_DMA_DeInit+0x58>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8002bf6:	4620      	mov	r0, r4
  hdma->DmaBaseAddress = DMA1;
 8002bf8:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = 0U;
 8002bfa:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bfc:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bfe:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdma);
 8002c00:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 8002c04:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 8002c08:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8002c0c:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
}
 8002c10:	bc30      	pop	{r4, r5}
 8002c12:	4770      	bx	lr
    return HAL_ERROR;
 8002c14:	2001      	movs	r0, #1
}
 8002c16:	4770      	bx	lr
 8002c18:	cccccccd 	.word	0xcccccccd
 8002c1c:	bffd9ff8 	.word	0xbffd9ff8
 8002c20:	40026000 	.word	0x40026000

08002c24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c24:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c26:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002c2a:	2801      	cmp	r0, #1
 8002c2c:	d042      	beq.n	8002cb4 <HAL_DMA_Start_IT+0x90>
{
 8002c2e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8002c30:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c32:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002c36:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c3a:	42a0      	cmp	r0, r4
 8002c3c:	fa5f fe80 	uxtb.w	lr, r0
 8002c40:	d004      	beq.n	8002c4c <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c42:	2300      	movs	r3, #0
 8002c44:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c48:	2002      	movs	r0, #2
  }
  return status;
}
 8002c4a:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c4c:	2002      	movs	r0, #2
 8002c4e:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c52:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002c54:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c58:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002c5c:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c5e:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8002c62:	f025 0501 	bic.w	r5, r5, #1
 8002c66:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c68:	f000 001c 	and.w	r0, r0, #28
 8002c6c:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8002c70:	fa0e f000 	lsl.w	r0, lr, r0
 8002c74:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c76:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c78:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002c7c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8002c7e:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c82:	bf0b      	itete	eq
 8002c84:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002c86:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002c88:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002c8a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002c8c:	b14b      	cbz	r3, 8002ca2 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	f043 030e 	orr.w	r3, r3, #14
 8002c94:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002c96:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c98:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6023      	str	r3, [r4, #0]
}
 8002ca0:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	f043 030a 	orr.w	r3, r3, #10
 8002cb0:	6023      	str	r3, [r4, #0]
 8002cb2:	e7f0      	b.n	8002c96 <HAL_DMA_Start_IT+0x72>
  __HAL_LOCK(hdma);
 8002cb4:	2002      	movs	r0, #2
}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8002cbc:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cbe:	2a02      	cmp	r2, #2
 8002cc0:	d006      	beq.n	8002cd0 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc2:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8002cc4:	2200      	movs	r2, #0
    return HAL_ERROR;
 8002cc6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc8:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002cca:	f883 2020 	strb.w	r2, [r3, #32]
}
 8002cce:	4770      	bx	lr
{
 8002cd0:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cd2:	f04f 0e01 	mov.w	lr, #1
    __HAL_UNLOCK(hdma);
 8002cd6:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cda:	6802      	ldr	r2, [r0, #0]
 8002cdc:	6811      	ldr	r1, [r2, #0]
 8002cde:	f021 010e 	bic.w	r1, r1, #14
 8002ce2:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002ce4:	6811      	ldr	r1, [r2, #0]
 8002ce6:	f021 0101 	bic.w	r1, r1, #1
 8002cea:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cec:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8002cf0:	f002 021c 	and.w	r2, r2, #28
 8002cf4:	fa0e f202 	lsl.w	r2, lr, r2
 8002cf8:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002cfe:	f883 c020 	strb.w	ip, [r3, #32]
    return status;
 8002d02:	4660      	mov	r0, ip
}
 8002d04:	f85d fb04 	ldr.w	pc, [sp], #4

08002d08 <HAL_DMA_Abort_IT>:
{
 8002d08:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d0a:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8002d0e:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d10:	2a02      	cmp	r2, #2
 8002d12:	d003      	beq.n	8002d1c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d14:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8002d16:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d1c:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d1e:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d22:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d24:	6c02      	ldr	r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d26:	f024 040e 	bic.w	r4, r4, #14
 8002d2a:	600c      	str	r4, [r1, #0]
    __HAL_UNLOCK(hdma);
 8002d2c:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8002d2e:	680d      	ldr	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d30:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 8002d34:	f025 0501 	bic.w	r5, r5, #1
 8002d38:	600d      	str	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d3a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8002d3c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d3e:	fa0c f202 	lsl.w	r2, ip, r2
 8002d42:	606a      	str	r2, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002d44:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002d48:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002d4c:	b111      	cbz	r1, 8002d54 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8002d4e:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8002d50:	4620      	mov	r0, r4
}
 8002d52:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8002d54:	4608      	mov	r0, r1
}
 8002d56:	bd38      	pop	{r3, r4, r5, pc}

08002d58 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d58:	2204      	movs	r2, #4
{
 8002d5a:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d5e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d60:	f003 031c 	and.w	r3, r3, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d64:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002d66:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8002d6c:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d6e:	d00e      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x36>
 8002d70:	f014 0f04 	tst.w	r4, #4
 8002d74:	d00b      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d76:	682b      	ldr	r3, [r5, #0]
 8002d78:	069b      	lsls	r3, r3, #26
 8002d7a:	d403      	bmi.n	8002d84 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d7c:	682b      	ldr	r3, [r5, #0]
 8002d7e:	f023 0304 	bic.w	r3, r3, #4
 8002d82:	602b      	str	r3, [r5, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002d84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d86:	6072      	str	r2, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002d88:	b1cb      	cbz	r3, 8002dbe <HAL_DMA_IRQHandler+0x66>
}
 8002d8a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8002d8c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d8e:	2202      	movs	r2, #2
 8002d90:	409a      	lsls	r2, r3
 8002d92:	420a      	tst	r2, r1
 8002d94:	d015      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x6a>
 8002d96:	f014 0f02 	tst.w	r4, #2
 8002d9a:	d012      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d9c:	682b      	ldr	r3, [r5, #0]
 8002d9e:	0699      	lsls	r1, r3, #26
 8002da0:	d406      	bmi.n	8002db0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002da2:	682b      	ldr	r3, [r5, #0]
 8002da4:	f023 030a 	bic.w	r3, r3, #10
 8002da8:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002db0:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 8002db2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002db4:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8002db6:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1e5      	bne.n	8002d8a <HAL_DMA_IRQHandler+0x32>
}
 8002dbe:	bc70      	pop	{r4, r5, r6}
 8002dc0:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002dc2:	2208      	movs	r2, #8
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	420a      	tst	r2, r1
 8002dc8:	d0f9      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x66>
 8002dca:	0722      	lsls	r2, r4, #28
 8002dcc:	d5f7      	bpl.n	8002dbe <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dce:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 8002dd0:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dd2:	f022 020e 	bic.w	r2, r2, #14
 8002dd6:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dd8:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8002dda:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002de2:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002de4:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 8002de8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 8002dec:	2900      	cmp	r1, #0
 8002dee:	d0e6      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x66>
}
 8002df0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002df2:	4708      	bx	r1

08002df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002df8:	680c      	ldr	r4, [r1, #0]
{
 8002dfa:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8002dfc:	2c00      	cmp	r4, #0
 8002dfe:	f000 80c4 	beq.w	8002f8a <HAL_GPIO_Init+0x196>
 8002e02:	f04f 0e00 	mov.w	lr, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002e06:	f04f 0b01 	mov.w	fp, #1
  uint32_t position = 0x00;
 8002e0a:	4673      	mov	r3, lr
 8002e0c:	468c      	mov	ip, r1
 8002e0e:	e068      	b.n	8002ee2 <HAL_GPIO_Init+0xee>
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e10:	2a03      	cmp	r2, #3
 8002e12:	f040 80b5 	bne.w	8002f80 <HAL_GPIO_Init+0x18c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e16:	fa02 f20e 	lsl.w	r2, r2, lr
 8002e1a:	43d7      	mvns	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e1c:	6805      	ldr	r5, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e1e:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002e22:	ea07 0705 	and.w	r7, r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e26:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 8002e2a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e2c:	d053      	beq.n	8002ed6 <HAL_GPIO_Init+0xe2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002e2e:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e30:	4d5c      	ldr	r5, [pc, #368]	; (8002fa4 <HAL_GPIO_Init+0x1b0>)
 8002e32:	6a2a      	ldr	r2, [r5, #32]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	622a      	str	r2, [r5, #32]
 8002e3a:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002e3c:	f003 0503 	and.w	r5, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e40:	f002 0201 	and.w	r2, r2, #1
 8002e44:	9203      	str	r2, [sp, #12]
 8002e46:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8002e48:	f023 0203 	bic.w	r2, r3, #3
 8002e4c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002e50:	00ad      	lsls	r5, r5, #2
 8002e52:	fa06 f805 	lsl.w	r8, r6, r5
 8002e56:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e5a:	4e53      	ldr	r6, [pc, #332]	; (8002fa8 <HAL_GPIO_Init+0x1b4>)
        temp = SYSCFG->EXTICR[position >> 2];
 8002e5c:	6897      	ldr	r7, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e5e:	42b0      	cmp	r0, r6
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002e60:	ea27 0708 	bic.w	r7, r7, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e64:	d013      	beq.n	8002e8e <HAL_GPIO_Init+0x9a>
 8002e66:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002e6a:	42b0      	cmp	r0, r6
 8002e6c:	f000 8090 	beq.w	8002f90 <HAL_GPIO_Init+0x19c>
 8002e70:	4e4e      	ldr	r6, [pc, #312]	; (8002fac <HAL_GPIO_Init+0x1b8>)
 8002e72:	42b0      	cmp	r0, r6
 8002e74:	f000 8090 	beq.w	8002f98 <HAL_GPIO_Init+0x1a4>
 8002e78:	4e4d      	ldr	r6, [pc, #308]	; (8002fb0 <HAL_GPIO_Init+0x1bc>)
 8002e7a:	42b0      	cmp	r0, r6
 8002e7c:	bf0b      	itete	eq
 8002e7e:	f04f 0803 	moveq.w	r8, #3
 8002e82:	2605      	movne	r6, #5
 8002e84:	fa08 f505 	lsleq.w	r5, r8, r5
 8002e88:	fa06 f505 	lslne.w	r5, r6, r5
 8002e8c:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e8e:	6097      	str	r7, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e90:	ea6f 070a 	mvn.w	r7, sl
        temp = EXTI->IMR;
 8002e94:	4a47      	ldr	r2, [pc, #284]	; (8002fb4 <HAL_GPIO_Init+0x1c0>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e96:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 8002e98:	6812      	ldr	r2, [r2, #0]
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->IMR = temp;
 8002e9a:	4d46      	ldr	r5, [pc, #280]	; (8002fb4 <HAL_GPIO_Init+0x1c0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e9c:	bf54      	ite	pl
 8002e9e:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8002ea0:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 8002ea4:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 8002ea6:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ea8:	038a      	lsls	r2, r1, #14
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->EMR = temp;
 8002eaa:	4a42      	ldr	r2, [pc, #264]	; (8002fb4 <HAL_GPIO_Init+0x1c0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002eac:	bf54      	ite	pl
 8002eae:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8002eb0:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR = temp;
 8002eb4:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eb6:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eb8:	02ce      	lsls	r6, r1, #11
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->RTSR = temp;
 8002eba:	4a3e      	ldr	r2, [pc, #248]	; (8002fb4 <HAL_GPIO_Init+0x1c0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ebc:	bf54      	ite	pl
 8002ebe:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8002ec0:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR = temp;
 8002ec4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8002ec6:	68d2      	ldr	r2, [r2, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ec8:	0289      	lsls	r1, r1, #10
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->FTSR = temp;
 8002eca:	493a      	ldr	r1, [pc, #232]	; (8002fb4 <HAL_GPIO_Init+0x1c0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ecc:	bf54      	ite	pl
 8002ece:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8002ed0:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 8002ed4:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 8002ed6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ed8:	fa34 f203 	lsrs.w	r2, r4, r3
 8002edc:	f10e 0e02 	add.w	lr, lr, #2
 8002ee0:	d053      	beq.n	8002f8a <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002ee2:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent)
 8002ee6:	ea15 0a04 	ands.w	sl, r5, r4
 8002eea:	d0f4      	beq.n	8002ed6 <HAL_GPIO_Init+0xe2>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002eec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8002ef0:	f001 0203 	and.w	r2, r1, #3
 8002ef4:	1e57      	subs	r7, r2, #1
 8002ef6:	2f01      	cmp	r7, #1
 8002ef8:	d88a      	bhi.n	8002e10 <HAL_GPIO_Init+0x1c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002efa:	f04f 0903 	mov.w	r9, #3
        temp = GPIOx->OSPEEDR;
 8002efe:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002f00:	f8dc 700c 	ldr.w	r7, [ip, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f04:	fa09 f90e 	lsl.w	r9, r9, lr
 8002f08:	ea26 0609 	bic.w	r6, r6, r9
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002f0c:	fa07 f70e 	lsl.w	r7, r7, lr
 8002f10:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 8002f12:	6087      	str	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f14:	ea6f 0709 	mvn.w	r7, r9
        temp = GPIOx->OTYPER;
 8002f18:	f8d0 9004 	ldr.w	r9, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f1c:	f3c1 1800 	ubfx	r8, r1, #4, #1
 8002f20:	fa08 f803 	lsl.w	r8, r8, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002f24:	ea29 0505 	bic.w	r5, r9, r5
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f28:	ea48 0505 	orr.w	r5, r8, r5
        GPIOx->OTYPER = temp;
 8002f2c:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8002f2e:	68c5      	ldr	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f30:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f32:	ea05 0807 	and.w	r8, r5, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002f36:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8002f3a:	fa02 f20e 	lsl.w	r2, r2, lr
 8002f3e:	fa05 f50e 	lsl.w	r5, r5, lr
 8002f42:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->PUPDR = temp;
 8002f46:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f48:	f47f af68 	bne.w	8002e1c <HAL_GPIO_Init+0x28>
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002f4c:	f8dc 5010 	ldr.w	r5, [ip, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002f50:	f003 0807 	and.w	r8, r3, #7
 8002f54:	ea4f 0888 	mov.w	r8, r8, lsl #2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002f58:	fa05 f508 	lsl.w	r5, r5, r8
 8002f5c:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002f5e:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3];
 8002f60:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8002f64:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8002f68:	f8d9 6020 	ldr.w	r6, [r9, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002f6c:	fa05 f808 	lsl.w	r8, r5, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002f70:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002f72:	ea26 0808 	bic.w	r8, r6, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002f76:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->AFR[position >> 3] = temp;
 8002f7a:	f8c9 5020 	str.w	r5, [r9, #32]
 8002f7e:	e74d      	b.n	8002e1c <HAL_GPIO_Init+0x28>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f80:	2703      	movs	r7, #3
 8002f82:	fa07 f70e 	lsl.w	r7, r7, lr
 8002f86:	43ff      	mvns	r7, r7
 8002f88:	e7d1      	b.n	8002f2e <HAL_GPIO_Init+0x13a>
  }
}
 8002f8a:	b005      	add	sp, #20
 8002f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f90:	fa0b f505 	lsl.w	r5, fp, r5
 8002f94:	432f      	orrs	r7, r5
 8002f96:	e77a      	b.n	8002e8e <HAL_GPIO_Init+0x9a>
 8002f98:	f04f 0802 	mov.w	r8, #2
 8002f9c:	fa08 f505 	lsl.w	r5, r8, r5
 8002fa0:	432f      	orrs	r7, r5
 8002fa2:	e774      	b.n	8002e8e <HAL_GPIO_Init+0x9a>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40020800 	.word	0x40020800
 8002fb0:	40020c00 	.word	0x40020c00
 8002fb4:	40010400 	.word	0x40010400

08002fb8 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8002fb8:	2900      	cmp	r1, #0
 8002fba:	d07b      	beq.n	80030b4 <HAL_GPIO_DeInit+0xfc>
{
 8002fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 8002fc0:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8002fc2:	2701      	movs	r7, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8002fc4:	f04f 090f 	mov.w	r9, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8002fc8:	f04f 0a03 	mov.w	sl, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002fcc:	4e3a      	ldr	r6, [pc, #232]	; (80030b8 <HAL_GPIO_DeInit+0x100>)
 8002fce:	e04d      	b.n	800306c <HAL_GPIO_DeInit+0xb4>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8002fd0:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8002fd4:	4558      	cmp	r0, fp
 8002fd6:	d065      	beq.n	80030a4 <HAL_GPIO_DeInit+0xec>
 8002fd8:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 80030bc <HAL_GPIO_DeInit+0x104>
 8002fdc:	4558      	cmp	r0, fp
 8002fde:	d064      	beq.n	80030aa <HAL_GPIO_DeInit+0xf2>
 8002fe0:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80030c0 <HAL_GPIO_DeInit+0x108>
 8002fe4:	4558      	cmp	r0, fp
 8002fe6:	bf16      	itet	ne
 8002fe8:	f04f 0b05 	movne.w	fp, #5
 8002fec:	fa0a f404 	lsleq.w	r4, sl, r4
 8002ff0:	fa0b f404 	lslne.w	r4, fp, r4
 8002ff4:	45a4      	cmp	ip, r4
 8002ff6:	d113      	bne.n	8003020 <HAL_GPIO_DeInit+0x68>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002ff8:	6834      	ldr	r4, [r6, #0]
 8002ffa:	ea24 040e 	bic.w	r4, r4, lr
 8002ffe:	6034      	str	r4, [r6, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003000:	6874      	ldr	r4, [r6, #4]
 8003002:	ea24 040e 	bic.w	r4, r4, lr
 8003006:	6074      	str	r4, [r6, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003008:	68b4      	ldr	r4, [r6, #8]
 800300a:	ea24 040e 	bic.w	r4, r4, lr
 800300e:	60b4      	str	r4, [r6, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003010:	68f4      	ldr	r4, [r6, #12]
 8003012:	ea24 040e 	bic.w	r4, r4, lr
 8003016:	60f4      	str	r4, [r6, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8003018:	68ac      	ldr	r4, [r5, #8]
 800301a:	ea24 0408 	bic.w	r4, r4, r8
 800301e:	60ac      	str	r4, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8003020:	6805      	ldr	r5, [r0, #0]
 8003022:	005c      	lsls	r4, r3, #1
 8003024:	fa0a f404 	lsl.w	r4, sl, r4
 8003028:	ea25 0504 	bic.w	r5, r5, r4

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800302c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8003030:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8003032:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8003036:	f003 0507 	and.w	r5, r3, #7
 800303a:	f8dc e020 	ldr.w	lr, [ip, #32]
 800303e:	00ad      	lsls	r5, r5, #2
 8003040:	fa09 f505 	lsl.w	r5, r9, r5
 8003044:	ea2e 0505 	bic.w	r5, lr, r5
 8003048:	f8cc 5020 	str.w	r5, [ip, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 800304c:	68c5      	ldr	r5, [r0, #12]
 800304e:	ea25 0504 	bic.w	r5, r5, r4
 8003052:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8003054:	6845      	ldr	r5, [r0, #4]
 8003056:	ea25 0202 	bic.w	r2, r5, r2
 800305a:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800305c:	6882      	ldr	r2, [r0, #8]
 800305e:	ea22 0404 	bic.w	r4, r2, r4
 8003062:	6084      	str	r4, [r0, #8]
    }

    position++;
 8003064:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 8003066:	fa31 f203 	lsrs.w	r2, r1, r3
 800306a:	d019      	beq.n	80030a0 <HAL_GPIO_DeInit+0xe8>
    iocurrent = (GPIO_Pin) & (1U << position);
 800306c:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 8003070:	ea12 0e01 	ands.w	lr, r2, r1
 8003074:	d0f6      	beq.n	8003064 <HAL_GPIO_DeInit+0xac>
      tmp = SYSCFG->EXTICR[position >> 2];
 8003076:	f023 0503 	bic.w	r5, r3, #3
 800307a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800307e:	f8df b044 	ldr.w	fp, [pc, #68]	; 80030c4 <HAL_GPIO_DeInit+0x10c>
 8003082:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8003086:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 800308a:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800308e:	00a4      	lsls	r4, r4, #2
 8003090:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8003094:	4558      	cmp	r0, fp
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8003096:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800309a:	d199      	bne.n	8002fd0 <HAL_GPIO_DeInit+0x18>
 800309c:	2400      	movs	r4, #0
 800309e:	e7a9      	b.n	8002ff4 <HAL_GPIO_DeInit+0x3c>
  }
}
 80030a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80030a4:	fa07 f404 	lsl.w	r4, r7, r4
 80030a8:	e7a4      	b.n	8002ff4 <HAL_GPIO_DeInit+0x3c>
 80030aa:	f04f 0b02 	mov.w	fp, #2
 80030ae:	fa0b f404 	lsl.w	r4, fp, r4
 80030b2:	e79f      	b.n	8002ff4 <HAL_GPIO_DeInit+0x3c>
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40010400 	.word	0x40010400
 80030bc:	40020800 	.word	0x40020800
 80030c0:	40020c00 	.word	0x40020c00
 80030c4:	40020000 	.word	0x40020000

080030c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030c8:	b902      	cbnz	r2, 80030cc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80030ca:	0409      	lsls	r1, r1, #16
 80030cc:	6181      	str	r1, [r0, #24]
  }
}
 80030ce:	4770      	bx	lr

080030d0 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 80030d2:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80030da:	d116      	bne.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030de:	00d2      	lsls	r2, r2, #3
 80030e0:	d420      	bmi.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80030e4:	4919      	ldr	r1, [pc, #100]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24
 80030ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ee:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80030f2:	9201      	str	r2, [sp, #4]
 80030f4:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80030f6:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80030fa:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fe:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003102:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8003106:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003108:	d013      	beq.n	8003132 <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800310a:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800310c:	4a10      	ldr	r2, [pc, #64]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800310e:	6813      	ldr	r3, [r2, #0]
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	4303      	orrs	r3, r0
 8003116:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003118:	6813      	ldr	r3, [r2, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800311e:	4058      	eors	r0, r3
 8003120:	b002      	add	sp, #8
 8003122:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800312c:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8003130:	d1eb      	bne.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x3a>
 8003132:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8003136:	d1e8      	bne.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 8003138:	4a05      	ldr	r2, [pc, #20]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 800313a:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 800313c:	6813      	ldr	r3, [r2, #0]
 800313e:	f043 0304 	orr.w	r3, r3, #4
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	e7e2      	b.n	800310c <RCC_SetFlashLatencyFromMSIRange+0x3c>
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800
 800314c:	40007000 	.word	0x40007000
 8003150:	40023c00 	.word	0x40023c00

08003154 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003154:	2800      	cmp	r0, #0
 8003156:	f000 81f8 	beq.w	800354a <HAL_RCC_OscConfig+0x3f6>
{
 800315a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800315e:	4aa2      	ldr	r2, [pc, #648]	; (80033e8 <HAL_RCC_OscConfig+0x294>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003160:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003162:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003164:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	07d9      	lsls	r1, r3, #31
 8003168:	4604      	mov	r4, r0
{
 800316a:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003170:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003174:	d52e      	bpl.n	80031d4 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003176:	2d08      	cmp	r5, #8
 8003178:	f000 8128 	beq.w	80033cc <HAL_RCC_OscConfig+0x278>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800317c:	2d0c      	cmp	r5, #12
 800317e:	f000 8122 	beq.w	80033c6 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003182:	6863      	ldr	r3, [r4, #4]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d00f      	beq.n	80031a8 <HAL_RCC_OscConfig+0x54>
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8180 	beq.w	800348e <HAL_RCC_OscConfig+0x33a>
 800318e:	2b05      	cmp	r3, #5
 8003190:	4b95      	ldr	r3, [pc, #596]	; (80033e8 <HAL_RCC_OscConfig+0x294>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	f000 81db 	beq.w	800354e <HAL_RCC_OscConfig+0x3fa>
 8003198:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e004      	b.n	80031b2 <HAL_RCC_OscConfig+0x5e>
 80031a8:	4a8f      	ldr	r2, [pc, #572]	; (80033e8 <HAL_RCC_OscConfig+0x294>)
 80031aa:	6813      	ldr	r3, [r2, #0]
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80031b2:	f7ff f8b7 	bl	8002324 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031b6:	f8df 8230 	ldr.w	r8, [pc, #560]	; 80033e8 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 80031ba:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031bc:	e005      	b.n	80031ca <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031be:	f7ff f8b1 	bl	8002324 <HAL_GetTick>
 80031c2:	1bc0      	subs	r0, r0, r7
 80031c4:	2864      	cmp	r0, #100	; 0x64
 80031c6:	f200 815e 	bhi.w	8003486 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031ca:	f8d8 3000 	ldr.w	r3, [r8]
 80031ce:	039b      	lsls	r3, r3, #14
 80031d0:	d5f5      	bpl.n	80031be <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	0799      	lsls	r1, r3, #30
 80031d6:	d522      	bpl.n	800321e <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031d8:	2d04      	cmp	r5, #4
 80031da:	f000 8114 	beq.w	8003406 <HAL_RCC_OscConfig+0x2b2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031de:	2d0c      	cmp	r5, #12
 80031e0:	f000 810e 	beq.w	8003400 <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e4:	68e3      	ldr	r3, [r4, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8179 	beq.w	80034de <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 80031ec:	2201      	movs	r2, #1
 80031ee:	4b7f      	ldr	r3, [pc, #508]	; (80033ec <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031f0:	4f7d      	ldr	r7, [pc, #500]	; (80033e8 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_ENABLE();
 80031f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031f4:	f7ff f896 	bl	8002324 <HAL_GetTick>
 80031f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031fa:	e005      	b.n	8003208 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031fc:	f7ff f892 	bl	8002324 <HAL_GetTick>
 8003200:	1b80      	subs	r0, r0, r6
 8003202:	2802      	cmp	r0, #2
 8003204:	f200 813f 	bhi.w	8003486 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	079b      	lsls	r3, r3, #30
 800320c:	d5f6      	bpl.n	80031fc <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6922      	ldr	r2, [r4, #16]
 8003212:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003216:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800321a:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	06d9      	lsls	r1, r3, #27
 8003220:	d525      	bpl.n	800326e <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003222:	2d00      	cmp	r5, #0
 8003224:	f000 8098 	beq.w	8003358 <HAL_RCC_OscConfig+0x204>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003228:	69a3      	ldr	r3, [r4, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 816a 	beq.w	8003504 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_MSI_ENABLE();
 8003230:	2201      	movs	r2, #1
 8003232:	4b6e      	ldr	r3, [pc, #440]	; (80033ec <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003234:	4e6c      	ldr	r6, [pc, #432]	; (80033e8 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_MSI_ENABLE();
 8003236:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8003238:	f7ff f874 	bl	8002324 <HAL_GetTick>
 800323c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800323e:	e005      	b.n	800324c <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003240:	f7ff f870 	bl	8002324 <HAL_GetTick>
 8003244:	1bc0      	subs	r0, r0, r7
 8003246:	2802      	cmp	r0, #2
 8003248:	f200 811d 	bhi.w	8003486 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800324c:	6833      	ldr	r3, [r6, #0]
 800324e:	059b      	lsls	r3, r3, #22
 8003250:	d5f6      	bpl.n	8003240 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003252:	6873      	ldr	r3, [r6, #4]
 8003254:	6a22      	ldr	r2, [r4, #32]
 8003256:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800325a:	4313      	orrs	r3, r2
 800325c:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800325e:	6873      	ldr	r3, [r6, #4]
 8003260:	69e2      	ldr	r2, [r4, #28]
 8003262:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003266:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800326a:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	0719      	lsls	r1, r3, #28
 8003270:	d516      	bpl.n	80032a0 <HAL_RCC_OscConfig+0x14c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003272:	6963      	ldr	r3, [r4, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8121 	beq.w	80034bc <HAL_RCC_OscConfig+0x368>
      __HAL_RCC_LSI_ENABLE();
 800327a:	2201      	movs	r2, #1
 800327c:	4b5b      	ldr	r3, [pc, #364]	; (80033ec <HAL_RCC_OscConfig+0x298>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800327e:	4f5a      	ldr	r7, [pc, #360]	; (80033e8 <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_LSI_ENABLE();
 8003280:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8003284:	f7ff f84e 	bl	8002324 <HAL_GetTick>
 8003288:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800328a:	e005      	b.n	8003298 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328c:	f7ff f84a 	bl	8002324 <HAL_GetTick>
 8003290:	1b80      	subs	r0, r0, r6
 8003292:	2802      	cmp	r0, #2
 8003294:	f200 80f7 	bhi.w	8003486 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329a:	079a      	lsls	r2, r3, #30
 800329c:	d5f6      	bpl.n	800328c <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	075e      	lsls	r6, r3, #29
 80032a2:	d53b      	bpl.n	800331c <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a4:	4b50      	ldr	r3, [pc, #320]	; (80033e8 <HAL_RCC_OscConfig+0x294>)
 80032a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a8:	00d0      	lsls	r0, r2, #3
 80032aa:	f100 8129 	bmi.w	8003500 <HAL_RCC_OscConfig+0x3ac>
      pwrclkchanged = SET;
 80032ae:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032b6:	625a      	str	r2, [r3, #36]	; 0x24
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4f4b      	ldr	r7, [pc, #300]	; (80033f0 <HAL_RCC_OscConfig+0x29c>)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	05d9      	lsls	r1, r3, #23
 80032c8:	f140 80cc 	bpl.w	8003464 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032cc:	68a3      	ldr	r3, [r4, #8]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	f000 8175 	beq.w	80035be <HAL_RCC_OscConfig+0x46a>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80a9 	beq.w	800342c <HAL_RCC_OscConfig+0x2d8>
 80032da:	2b05      	cmp	r3, #5
 80032dc:	4b42      	ldr	r3, [pc, #264]	; (80033e8 <HAL_RCC_OscConfig+0x294>)
 80032de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e0:	f000 818b 	beq.w	80035fa <HAL_RCC_OscConfig+0x4a6>
 80032e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f0:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80032f2:	f7ff f817 	bl	8002324 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80032fa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032fc:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80033e8 <HAL_RCC_OscConfig+0x294>
 8003300:	e005      	b.n	800330e <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7ff f80f 	bl	8002324 <HAL_GetTick>
 8003306:	1bc0      	subs	r0, r0, r7
 8003308:	4548      	cmp	r0, r9
 800330a:	f200 80bc 	bhi.w	8003486 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800330e:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8003312:	059b      	lsls	r3, r3, #22
 8003314:	d5f5      	bpl.n	8003302 <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 8003316:	2e00      	cmp	r6, #0
 8003318:	f040 814b 	bne.w	80035b2 <HAL_RCC_OscConfig+0x45e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800331e:	b1b8      	cbz	r0, 8003350 <HAL_RCC_OscConfig+0x1fc>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003320:	2d0c      	cmp	r5, #12
 8003322:	f000 8152 	beq.w	80035ca <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003326:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_RCC_OscConfig+0x298>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800332e:	f000 8116 	beq.w	800355e <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_PLL_DISABLE();
 8003332:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003334:	f7fe fff6 	bl	8002324 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003338:	4d2b      	ldr	r5, [pc, #172]	; (80033e8 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 800333a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800333c:	e005      	b.n	800334a <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333e:	f7fe fff1 	bl	8002324 <HAL_GetTick>
 8003342:	1b00      	subs	r0, r0, r4
 8003344:	2802      	cmp	r0, #2
 8003346:	f200 809e 	bhi.w	8003486 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800334a:	682b      	ldr	r3, [r5, #0]
 800334c:	019b      	lsls	r3, r3, #6
 800334e:	d4f6      	bmi.n	800333e <HAL_RCC_OscConfig+0x1ea>
  return HAL_OK;
 8003350:	2000      	movs	r0, #0
}
 8003352:	b003      	add	sp, #12
 8003354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003358:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <HAL_RCC_OscConfig+0x294>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	059a      	lsls	r2, r3, #22
 800335e:	d502      	bpl.n	8003366 <HAL_RCC_OscConfig+0x212>
 8003360:	69a3      	ldr	r3, [r4, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d03b      	beq.n	80033de <HAL_RCC_OscConfig+0x28a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003366:	4e20      	ldr	r6, [pc, #128]	; (80033e8 <HAL_RCC_OscConfig+0x294>)
 8003368:	6a20      	ldr	r0, [r4, #32]
 800336a:	6873      	ldr	r3, [r6, #4]
 800336c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003370:	4298      	cmp	r0, r3
 8003372:	f240 80d7 	bls.w	8003524 <HAL_RCC_OscConfig+0x3d0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003376:	f7ff feab 	bl	80030d0 <RCC_SetFlashLatencyFromMSIRange>
 800337a:	2800      	cmp	r0, #0
 800337c:	d12f      	bne.n	80033de <HAL_RCC_OscConfig+0x28a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800337e:	6872      	ldr	r2, [r6, #4]
 8003380:	6a23      	ldr	r3, [r4, #32]
 8003382:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003386:	431a      	orrs	r2, r3
 8003388:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800338a:	6872      	ldr	r2, [r6, #4]
 800338c:	69e1      	ldr	r1, [r4, #28]
 800338e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003392:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003396:	6072      	str	r2, [r6, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003398:	4a13      	ldr	r2, [pc, #76]	; (80033e8 <HAL_RCC_OscConfig+0x294>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800339a:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800339c:	6891      	ldr	r1, [r2, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800339e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033a2:	3301      	adds	r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80033a8:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <HAL_RCC_OscConfig+0x2a0>)
 80033aa:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80033ae:	5c52      	ldrb	r2, [r2, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033b0:	4811      	ldr	r0, [pc, #68]	; (80033f8 <HAL_RCC_OscConfig+0x2a4>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80033b2:	40d3      	lsrs	r3, r2
        status = HAL_InitTick(uwTickPrio);
 80033b4:	4a11      	ldr	r2, [pc, #68]	; (80033fc <HAL_RCC_OscConfig+0x2a8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033b6:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick(uwTickPrio);
 80033b8:	6810      	ldr	r0, [r2, #0]
 80033ba:	f7fe ff71 	bl	80022a0 <HAL_InitTick>
        if(status != HAL_OK)
 80033be:	2800      	cmp	r0, #0
 80033c0:	d1c7      	bne.n	8003352 <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	e753      	b.n	800326e <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033c6:	2e00      	cmp	r6, #0
 80033c8:	f43f aedb 	beq.w	8003182 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	4a06      	ldr	r2, [pc, #24]	; (80033e8 <HAL_RCC_OscConfig+0x294>)
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	0392      	lsls	r2, r2, #14
 80033d2:	f57f aeff 	bpl.w	80031d4 <HAL_RCC_OscConfig+0x80>
 80033d6:	6862      	ldr	r2, [r4, #4]
 80033d8:	2a00      	cmp	r2, #0
 80033da:	f47f aefb 	bne.w	80031d4 <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 80033de:	2001      	movs	r0, #1
}
 80033e0:	b003      	add	sp, #12
 80033e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	42470000 	.word	0x42470000
 80033f0:	40007000 	.word	0x40007000
 80033f4:	08006d80 	.word	0x08006d80
 80033f8:	20000008 	.word	0x20000008
 80033fc:	20000010 	.word	0x20000010
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003400:	2e00      	cmp	r6, #0
 8003402:	f47f aeef 	bne.w	80031e4 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	4a81      	ldr	r2, [pc, #516]	; (800360c <HAL_RCC_OscConfig+0x4b8>)
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	0792      	lsls	r2, r2, #30
 800340c:	d502      	bpl.n	8003414 <HAL_RCC_OscConfig+0x2c0>
 800340e:	68e2      	ldr	r2, [r4, #12]
 8003410:	2a01      	cmp	r2, #1
 8003412:	d1e4      	bne.n	80033de <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003414:	497d      	ldr	r1, [pc, #500]	; (800360c <HAL_RCC_OscConfig+0x4b8>)
 8003416:	6920      	ldr	r0, [r4, #16]
 8003418:	684a      	ldr	r2, [r1, #4]
 800341a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800341e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003422:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003424:	06d9      	lsls	r1, r3, #27
 8003426:	f57f af22 	bpl.w	800326e <HAL_RCC_OscConfig+0x11a>
 800342a:	e6fa      	b.n	8003222 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342c:	4f77      	ldr	r7, [pc, #476]	; (800360c <HAL_RCC_OscConfig+0x4b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
 800343a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003440:	637b      	str	r3, [r7, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003442:	f7fe ff6f 	bl	8002324 <HAL_GetTick>
 8003446:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003448:	e005      	b.n	8003456 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800344a:	f7fe ff6b 	bl	8002324 <HAL_GetTick>
 800344e:	eba0 0008 	sub.w	r0, r0, r8
 8003452:	4548      	cmp	r0, r9
 8003454:	d817      	bhi.n	8003486 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003458:	0598      	lsls	r0, r3, #22
 800345a:	d4f6      	bmi.n	800344a <HAL_RCC_OscConfig+0x2f6>
    if(pwrclkchanged == SET)
 800345c:	2e00      	cmp	r6, #0
 800345e:	f43f af5d 	beq.w	800331c <HAL_RCC_OscConfig+0x1c8>
 8003462:	e0a6      	b.n	80035b2 <HAL_RCC_OscConfig+0x45e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800346c:	f7fe ff5a 	bl	8002324 <HAL_GetTick>
 8003470:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	05da      	lsls	r2, r3, #23
 8003476:	f53f af29 	bmi.w	80032cc <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347a:	f7fe ff53 	bl	8002324 <HAL_GetTick>
 800347e:	eba0 0008 	sub.w	r0, r0, r8
 8003482:	2864      	cmp	r0, #100	; 0x64
 8003484:	d9f5      	bls.n	8003472 <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 8003486:	2003      	movs	r0, #3
}
 8003488:	b003      	add	sp, #12
 800348a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348e:	4f5f      	ldr	r7, [pc, #380]	; (800360c <HAL_RCC_OscConfig+0x4b8>)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800349e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80034a0:	f7fe ff40 	bl	8002324 <HAL_GetTick>
 80034a4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034a6:	e005      	b.n	80034b4 <HAL_RCC_OscConfig+0x360>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a8:	f7fe ff3c 	bl	8002324 <HAL_GetTick>
 80034ac:	eba0 0008 	sub.w	r0, r0, r8
 80034b0:	2864      	cmp	r0, #100	; 0x64
 80034b2:	d8e8      	bhi.n	8003486 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	0398      	lsls	r0, r3, #14
 80034b8:	d4f6      	bmi.n	80034a8 <HAL_RCC_OscConfig+0x354>
 80034ba:	e68a      	b.n	80031d2 <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 80034bc:	4a54      	ldr	r2, [pc, #336]	; (8003610 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034be:	4f53      	ldr	r7, [pc, #332]	; (800360c <HAL_RCC_OscConfig+0x4b8>)
      __HAL_RCC_LSI_DISABLE();
 80034c0:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
      tickstart = HAL_GetTick();
 80034c4:	f7fe ff2e 	bl	8002324 <HAL_GetTick>
 80034c8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034ca:	e004      	b.n	80034d6 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034cc:	f7fe ff2a 	bl	8002324 <HAL_GetTick>
 80034d0:	1b80      	subs	r0, r0, r6
 80034d2:	2802      	cmp	r0, #2
 80034d4:	d8d7      	bhi.n	8003486 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d8:	079b      	lsls	r3, r3, #30
 80034da:	d4f7      	bmi.n	80034cc <HAL_RCC_OscConfig+0x378>
 80034dc:	e6df      	b.n	800329e <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 80034de:	4a4c      	ldr	r2, [pc, #304]	; (8003610 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034e0:	4f4a      	ldr	r7, [pc, #296]	; (800360c <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_HSI_DISABLE();
 80034e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80034e4:	f7fe ff1e 	bl	8002324 <HAL_GetTick>
 80034e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034ea:	e004      	b.n	80034f6 <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ec:	f7fe ff1a 	bl	8002324 <HAL_GetTick>
 80034f0:	1b80      	subs	r0, r0, r6
 80034f2:	2802      	cmp	r0, #2
 80034f4:	d8c7      	bhi.n	8003486 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	0798      	lsls	r0, r3, #30
 80034fa:	d4f7      	bmi.n	80034ec <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	e68e      	b.n	800321e <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 8003500:	2600      	movs	r6, #0
 8003502:	e6de      	b.n	80032c2 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_MSI_DISABLE();
 8003504:	4a42      	ldr	r2, [pc, #264]	; (8003610 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003506:	4f41      	ldr	r7, [pc, #260]	; (800360c <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_MSI_DISABLE();
 8003508:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800350a:	f7fe ff0b 	bl	8002324 <HAL_GetTick>
 800350e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003510:	e004      	b.n	800351c <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003512:	f7fe ff07 	bl	8002324 <HAL_GetTick>
 8003516:	1b80      	subs	r0, r0, r6
 8003518:	2802      	cmp	r0, #2
 800351a:	d8b4      	bhi.n	8003486 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	0598      	lsls	r0, r3, #22
 8003520:	d4f7      	bmi.n	8003512 <HAL_RCC_OscConfig+0x3be>
 8003522:	e74e      	b.n	80033c2 <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003524:	6873      	ldr	r3, [r6, #4]
 8003526:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800352a:	4303      	orrs	r3, r0
 800352c:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800352e:	6873      	ldr	r3, [r6, #4]
 8003530:	69e2      	ldr	r2, [r4, #28]
 8003532:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003536:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800353a:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800353c:	f7ff fdc8 	bl	80030d0 <RCC_SetFlashLatencyFromMSIRange>
 8003540:	2800      	cmp	r0, #0
 8003542:	f47f af4c 	bne.w	80033de <HAL_RCC_OscConfig+0x28a>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003546:	6a23      	ldr	r3, [r4, #32]
 8003548:	e726      	b.n	8003398 <HAL_RCC_OscConfig+0x244>
    return HAL_ERROR;
 800354a:	2001      	movs	r0, #1
}
 800354c:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	e629      	b.n	80031b2 <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 800355e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003560:	f7fe fee0 	bl	8002324 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003564:	4e29      	ldr	r6, [pc, #164]	; (800360c <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8003566:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003568:	e004      	b.n	8003574 <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356a:	f7fe fedb 	bl	8002324 <HAL_GetTick>
 800356e:	1b40      	subs	r0, r0, r5
 8003570:	2802      	cmp	r0, #2
 8003572:	d888      	bhi.n	8003486 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003574:	6833      	ldr	r3, [r6, #0]
 8003576:	0199      	lsls	r1, r3, #6
 8003578:	d4f7      	bmi.n	800356a <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800357a:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 800357e:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 8003580:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003582:	68b2      	ldr	r2, [r6, #8]
 8003584:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003586:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800358a:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800358c:	4a20      	ldr	r2, [pc, #128]	; (8003610 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800358e:	4303      	orrs	r3, r0
 8003590:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 8003592:	6611      	str	r1, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003594:	f7fe fec6 	bl	8002324 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003598:	4d1c      	ldr	r5, [pc, #112]	; (800360c <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 800359a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800359c:	e005      	b.n	80035aa <HAL_RCC_OscConfig+0x456>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359e:	f7fe fec1 	bl	8002324 <HAL_GetTick>
 80035a2:	1b00      	subs	r0, r0, r4
 80035a4:	2802      	cmp	r0, #2
 80035a6:	f63f af6e 	bhi.w	8003486 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035aa:	682b      	ldr	r3, [r5, #0]
 80035ac:	019a      	lsls	r2, r3, #6
 80035ae:	d5f6      	bpl.n	800359e <HAL_RCC_OscConfig+0x44a>
 80035b0:	e6ce      	b.n	8003350 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4a16      	ldr	r2, [pc, #88]	; (800360c <HAL_RCC_OscConfig+0x4b8>)
 80035b4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80035b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6253      	str	r3, [r2, #36]	; 0x24
 80035bc:	e6ae      	b.n	800331c <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035be:	4a13      	ldr	r2, [pc, #76]	; (800360c <HAL_RCC_OscConfig+0x4b8>)
 80035c0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80035c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c6:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c8:	e693      	b.n	80032f2 <HAL_RCC_OscConfig+0x19e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ca:	2801      	cmp	r0, #1
 80035cc:	f43f aec1 	beq.w	8003352 <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 80035d0:	4b0e      	ldr	r3, [pc, #56]	; (800360c <HAL_RCC_OscConfig+0x4b8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 80035d4:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80035da:	4291      	cmp	r1, r2
 80035dc:	f47f aeff 	bne.w	80033de <HAL_RCC_OscConfig+0x28a>
 80035e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035e2:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	4291      	cmp	r1, r2
 80035e8:	f47f aef9 	bne.w	80033de <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80035ee:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 80035f2:	1a18      	subs	r0, r3, r0
 80035f4:	bf18      	it	ne
 80035f6:	2001      	movne	r0, #1
 80035f8:	e6ab      	b.n	8003352 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003606:	635a      	str	r2, [r3, #52]	; 0x34
 8003608:	e673      	b.n	80032f2 <HAL_RCC_OscConfig+0x19e>
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	42470000 	.word	0x42470000

08003614 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003614:	2800      	cmp	r0, #0
 8003616:	f000 80c2 	beq.w	800379e <HAL_RCC_ClockConfig+0x18a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800361a:	4a7c      	ldr	r2, [pc, #496]	; (800380c <HAL_RCC_ClockConfig+0x1f8>)
{
 800361c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003620:	6813      	ldr	r3, [r2, #0]
 8003622:	4604      	mov	r4, r0
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	428b      	cmp	r3, r1
 800362a:	460d      	mov	r5, r1
 800362c:	d213      	bcs.n	8003656 <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	2901      	cmp	r1, #1
 8003630:	d103      	bne.n	800363a <HAL_RCC_ClockConfig+0x26>
 8003632:	6813      	ldr	r3, [r2, #0]
 8003634:	f043 0304 	orr.w	r3, r3, #4
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4a74      	ldr	r2, [pc, #464]	; (800380c <HAL_RCC_ClockConfig+0x1f8>)
 800363c:	6813      	ldr	r3, [r2, #0]
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	432b      	orrs	r3, r5
 8003644:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	6813      	ldr	r3, [r2, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	42ab      	cmp	r3, r5
 800364e:	d002      	beq.n	8003656 <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 8003650:	2001      	movs	r0, #1
}
 8003652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	0799      	lsls	r1, r3, #30
 800365a:	d506      	bpl.n	800366a <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800365c:	496c      	ldr	r1, [pc, #432]	; (8003810 <HAL_RCC_ClockConfig+0x1fc>)
 800365e:	68a0      	ldr	r0, [r4, #8]
 8003660:	688a      	ldr	r2, [r1, #8]
 8003662:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003666:	4302      	orrs	r2, r0
 8003668:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366a:	07da      	lsls	r2, r3, #31
 800366c:	d529      	bpl.n	80036c2 <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003670:	4b67      	ldr	r3, [pc, #412]	; (8003810 <HAL_RCC_ClockConfig+0x1fc>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003672:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003674:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003676:	f000 808e 	beq.w	8003796 <HAL_RCC_ClockConfig+0x182>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800367a:	2a03      	cmp	r2, #3
 800367c:	f000 8085 	beq.w	800378a <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003680:	2a01      	cmp	r2, #1
 8003682:	f000 80be 	beq.w	8003802 <HAL_RCC_ClockConfig+0x1ee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003686:	0598      	lsls	r0, r3, #22
 8003688:	d5e2      	bpl.n	8003650 <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368a:	4e61      	ldr	r6, [pc, #388]	; (8003810 <HAL_RCC_ClockConfig+0x1fc>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003690:	68b3      	ldr	r3, [r6, #8]
 8003692:	f023 0303 	bic.w	r3, r3, #3
 8003696:	4313      	orrs	r3, r2
 8003698:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800369a:	f7fe fe43 	bl	8002324 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369e:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80036a0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d055      	beq.n	8003752 <HAL_RCC_ClockConfig+0x13e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d05e      	beq.n	8003768 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <HAL_RCC_ClockConfig+0xa6>
 80036ae:	e066      	b.n	800377e <HAL_RCC_ClockConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b0:	f7fe fe38 	bl	8002324 <HAL_GetTick>
 80036b4:	1bc0      	subs	r0, r0, r7
 80036b6:	4540      	cmp	r0, r8
 80036b8:	d873      	bhi.n	80037a2 <HAL_RCC_ClockConfig+0x18e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80036ba:	68b3      	ldr	r3, [r6, #8]
 80036bc:	f013 0f0c 	tst.w	r3, #12
 80036c0:	d1f6      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c2:	4a52      	ldr	r2, [pc, #328]	; (800380c <HAL_RCC_ClockConfig+0x1f8>)
 80036c4:	6813      	ldr	r3, [r2, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	42ab      	cmp	r3, r5
 80036cc:	d906      	bls.n	80036dc <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	6813      	ldr	r3, [r2, #0]
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	07da      	lsls	r2, r3, #31
 80036da:	d4b9      	bmi.n	8003650 <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	0759      	lsls	r1, r3, #29
 80036e0:	d506      	bpl.n	80036f0 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e2:	494b      	ldr	r1, [pc, #300]	; (8003810 <HAL_RCC_ClockConfig+0x1fc>)
 80036e4:	68e0      	ldr	r0, [r4, #12]
 80036e6:	688a      	ldr	r2, [r1, #8]
 80036e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036ec:	4302      	orrs	r2, r0
 80036ee:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	071b      	lsls	r3, r3, #28
 80036f2:	d420      	bmi.n	8003736 <HAL_RCC_ClockConfig+0x122>
  tmpreg = RCC->CFGR;
 80036f4:	4946      	ldr	r1, [pc, #280]	; (8003810 <HAL_RCC_ClockConfig+0x1fc>)
 80036f6:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 80036f8:	f002 030c 	and.w	r3, r2, #12
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d065      	beq.n	80037cc <HAL_RCC_ClockConfig+0x1b8>
 8003700:	2b0c      	cmp	r3, #12
 8003702:	d050      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x192>
 8003704:	2b04      	cmp	r3, #4
 8003706:	d044      	beq.n	8003792 <HAL_RCC_ClockConfig+0x17e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003708:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800370c:	684b      	ldr	r3, [r1, #4]
 800370e:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003712:	3301      	adds	r3, #1
 8003714:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003716:	4b3e      	ldr	r3, [pc, #248]	; (8003810 <HAL_RCC_ClockConfig+0x1fc>)
 8003718:	4a3e      	ldr	r2, [pc, #248]	; (8003814 <HAL_RCC_ClockConfig+0x200>)
 800371a:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 800371c:	493e      	ldr	r1, [pc, #248]	; (8003818 <HAL_RCC_ClockConfig+0x204>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800371e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003722:	5cd3      	ldrb	r3, [r2, r3]
 8003724:	4a3d      	ldr	r2, [pc, #244]	; (800381c <HAL_RCC_ClockConfig+0x208>)
 8003726:	fa20 f303 	lsr.w	r3, r0, r3
}
 800372a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800372e:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003730:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 8003732:	f7fe bdb5 	b.w	80022a0 <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003736:	4a36      	ldr	r2, [pc, #216]	; (8003810 <HAL_RCC_ClockConfig+0x1fc>)
 8003738:	6921      	ldr	r1, [r4, #16]
 800373a:	6893      	ldr	r3, [r2, #8]
 800373c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003740:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003744:	6093      	str	r3, [r2, #8]
 8003746:	e7d5      	b.n	80036f4 <HAL_RCC_ClockConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003748:	f7fe fdec 	bl	8002324 <HAL_GetTick>
 800374c:	1bc3      	subs	r3, r0, r7
 800374e:	4543      	cmp	r3, r8
 8003750:	d827      	bhi.n	80037a2 <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003752:	68b3      	ldr	r3, [r6, #8]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b08      	cmp	r3, #8
 800375a:	d1f5      	bne.n	8003748 <HAL_RCC_ClockConfig+0x134>
 800375c:	e7b1      	b.n	80036c2 <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800375e:	f7fe fde1 	bl	8002324 <HAL_GetTick>
 8003762:	1bc0      	subs	r0, r0, r7
 8003764:	4540      	cmp	r0, r8
 8003766:	d81c      	bhi.n	80037a2 <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003768:	68b3      	ldr	r3, [r6, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b0c      	cmp	r3, #12
 8003770:	d1f5      	bne.n	800375e <HAL_RCC_ClockConfig+0x14a>
 8003772:	e7a6      	b.n	80036c2 <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7fe fdd6 	bl	8002324 <HAL_GetTick>
 8003778:	1bc0      	subs	r0, r0, r7
 800377a:	4540      	cmp	r0, r8
 800377c:	d811      	bhi.n	80037a2 <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800377e:	68b3      	ldr	r3, [r6, #8]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b04      	cmp	r3, #4
 8003786:	d1f5      	bne.n	8003774 <HAL_RCC_ClockConfig+0x160>
 8003788:	e79b      	b.n	80036c2 <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800378a:	019f      	lsls	r7, r3, #6
 800378c:	f53f af7d 	bmi.w	800368a <HAL_RCC_ClockConfig+0x76>
 8003790:	e75e      	b.n	8003650 <HAL_RCC_ClockConfig+0x3c>
      sysclockfreq = HSI_VALUE;
 8003792:	4823      	ldr	r0, [pc, #140]	; (8003820 <HAL_RCC_ClockConfig+0x20c>)
 8003794:	e7bf      	b.n	8003716 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003796:	039b      	lsls	r3, r3, #14
 8003798:	f53f af77 	bmi.w	800368a <HAL_RCC_ClockConfig+0x76>
 800379c:	e758      	b.n	8003650 <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 800379e:	2001      	movs	r0, #1
}
 80037a0:	4770      	bx	lr
          return HAL_TIMEOUT;
 80037a2:	2003      	movs	r0, #3
 80037a4:	e755      	b.n	8003652 <HAL_RCC_ClockConfig+0x3e>
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a6:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80037a8:	481e      	ldr	r0, [pc, #120]	; (8003824 <HAL_RCC_ClockConfig+0x210>)
 80037aa:	f3c2 4183 	ubfx	r1, r2, #18, #4
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ae:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80037b2:	f3c2 5281 	ubfx	r2, r2, #22, #2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80037b6:	5c40      	ldrb	r0, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80037b8:	f102 0201 	add.w	r2, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037bc:	d008      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x1bc>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037be:	491a      	ldr	r1, [pc, #104]	; (8003828 <HAL_RCC_ClockConfig+0x214>)
 80037c0:	2300      	movs	r3, #0
 80037c2:	fba0 0101 	umull	r0, r1, r0, r1
 80037c6:	f7fd fcbb 	bl	8001140 <__aeabi_uldivmod>
 80037ca:	e7a4      	b.n	8003716 <HAL_RCC_ClockConfig+0x102>
  switch (tmpreg & RCC_CFGR_SWS)
 80037cc:	4816      	ldr	r0, [pc, #88]	; (8003828 <HAL_RCC_ClockConfig+0x214>)
 80037ce:	e7a2      	b.n	8003716 <HAL_RCC_ClockConfig+0x102>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037d0:	0141      	lsls	r1, r0, #5
 80037d2:	1a0d      	subs	r5, r1, r0
 80037d4:	eb66 0606 	sbc.w	r6, r6, r6
 80037d8:	01b4      	lsls	r4, r6, #6
 80037da:	01a9      	lsls	r1, r5, #6
 80037dc:	1b49      	subs	r1, r1, r5
 80037de:	ea44 6495 	orr.w	r4, r4, r5, lsr #26
 80037e2:	eb64 0406 	sbc.w	r4, r4, r6
 80037e6:	00e4      	lsls	r4, r4, #3
 80037e8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80037ec:	00c9      	lsls	r1, r1, #3
 80037ee:	1809      	adds	r1, r1, r0
 80037f0:	f144 0400 	adc.w	r4, r4, #0
 80037f4:	02a4      	lsls	r4, r4, #10
 80037f6:	0288      	lsls	r0, r1, #10
 80037f8:	ea44 5191 	orr.w	r1, r4, r1, lsr #22
 80037fc:	f7fd fca0 	bl	8001140 <__aeabi_uldivmod>
 8003800:	e789      	b.n	8003716 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003802:	079e      	lsls	r6, r3, #30
 8003804:	f53f af41 	bmi.w	800368a <HAL_RCC_ClockConfig+0x76>
 8003808:	e722      	b.n	8003650 <HAL_RCC_ClockConfig+0x3c>
 800380a:	bf00      	nop
 800380c:	40023c00 	.word	0x40023c00
 8003810:	40023800 	.word	0x40023800
 8003814:	08006d80 	.word	0x08006d80
 8003818:	20000010 	.word	0x20000010
 800381c:	20000008 	.word	0x20000008
 8003820:	00f42400 	.word	0x00f42400
 8003824:	08006d98 	.word	0x08006d98
 8003828:	016e3600 	.word	0x016e3600

0800382c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800382c:	4b04      	ldr	r3, [pc, #16]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800382e:	4a05      	ldr	r2, [pc, #20]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	4905      	ldr	r1, [pc, #20]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003834:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003838:	5ccb      	ldrb	r3, [r1, r3]
 800383a:	6810      	ldr	r0, [r2, #0]
}
 800383c:	40d8      	lsrs	r0, r3
 800383e:	4770      	bx	lr
 8003840:	40023800 	.word	0x40023800
 8003844:	20000008 	.word	0x20000008
 8003848:	08006d90 	.word	0x08006d90

0800384c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800384e:	4a05      	ldr	r2, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	4905      	ldr	r1, [pc, #20]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003854:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003858:	5ccb      	ldrb	r3, [r1, r3]
 800385a:	6810      	ldr	r0, [r2, #0]
}
 800385c:	40d8      	lsrs	r0, r3
 800385e:	4770      	bx	lr
 8003860:	40023800 	.word	0x40023800
 8003864:	20000008 	.word	0x20000008
 8003868:	08006d90 	.word	0x08006d90

0800386c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800386c:	2800      	cmp	r0, #0
 800386e:	f000 8081 	beq.w	8003974 <HAL_UART_Init+0x108>
{
 8003872:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003874:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003878:	4604      	mov	r4, r0
 800387a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800387e:	2b00      	cmp	r3, #0
 8003880:	d070      	beq.n	8003964 <HAL_UART_Init+0xf8>
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003882:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8003886:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003888:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800388a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800388c:	4302      	orrs	r2, r0
 800388e:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 8003890:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003894:	4302      	orrs	r2, r0
 8003896:	69e0      	ldr	r0, [r4, #28]
 8003898:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 800389a:	68d8      	ldr	r0, [r3, #12]
 800389c:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 80038a0:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a2:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038a4:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80038aa:	4329      	orrs	r1, r5
 80038ac:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80038ae:	68d9      	ldr	r1, [r3, #12]
 80038b0:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80038b4:	f021 010c 	bic.w	r1, r1, #12
 80038b8:	430a      	orrs	r2, r1
 80038ba:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038bc:	695a      	ldr	r2, [r3, #20]


  if((huart->Instance == USART1))
 80038be:	492e      	ldr	r1, [pc, #184]	; (8003978 <HAL_UART_Init+0x10c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038c4:	4302      	orrs	r2, r0
  if((huart->Instance == USART1))
 80038c6:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038c8:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1))
 80038ca:	d050      	beq.n	800396e <HAL_UART_Init+0x102>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038cc:	f7ff ffae 	bl	800382c <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038d0:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038de:	6863      	ldr	r3, [r4, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e0:	d027      	beq.n	8003932 <HAL_UART_Init+0xc6>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e8:	2564      	movs	r5, #100	; 0x64
 80038ea:	4824      	ldr	r0, [pc, #144]	; (800397c <HAL_UART_Init+0x110>)
 80038ec:	6822      	ldr	r2, [r4, #0]
 80038ee:	fba0 6103 	umull	r6, r1, r0, r3
 80038f2:	0949      	lsrs	r1, r1, #5
 80038f4:	fb05 3311 	mls	r3, r5, r1, r3
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	3332      	adds	r3, #50	; 0x32
 80038fc:	fba0 0303 	umull	r0, r3, r0, r3
 8003900:	0109      	lsls	r1, r1, #4
 8003902:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8003906:	6093      	str	r3, [r2, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003908:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800390a:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800390c:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800390e:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003910:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003914:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003916:	6953      	ldr	r3, [r2, #20]
 8003918:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800391c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800391e:	68d3      	ldr	r3, [r2, #12]
 8003920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003924:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003926:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003928:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800392c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 8003930:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	fbb0 f0f3 	udiv	r0, r0, r3
 8003938:	2364      	movs	r3, #100	; 0x64
 800393a:	4e10      	ldr	r6, [pc, #64]	; (800397c <HAL_UART_Init+0x110>)
 800393c:	6822      	ldr	r2, [r4, #0]
 800393e:	fba6 5100 	umull	r5, r1, r6, r0
 8003942:	094d      	lsrs	r5, r1, #5
 8003944:	fb03 0315 	mls	r3, r3, r5, r0
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	3332      	adds	r3, #50	; 0x32
 800394c:	fba6 1303 	umull	r1, r3, r6, r3
 8003950:	f3c3 1142 	ubfx	r1, r3, #5, #3
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800395a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800395e:	440b      	add	r3, r1
 8003960:	6093      	str	r3, [r2, #8]
 8003962:	e7d1      	b.n	8003908 <HAL_UART_Init+0x9c>
    huart->Lock = HAL_UNLOCKED;
 8003964:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003968:	f7fe fb78 	bl	800205c <HAL_UART_MspInit>
 800396c:	e789      	b.n	8003882 <HAL_UART_Init+0x16>
    pclk = HAL_RCC_GetPCLK2Freq();
 800396e:	f7ff ff6d 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8003972:	e7ad      	b.n	80038d0 <HAL_UART_Init+0x64>
    return HAL_ERROR;
 8003974:	2001      	movs	r0, #1
}
 8003976:	4770      	bx	lr
 8003978:	40013800 	.word	0x40013800
 800397c:	51eb851f 	.word	0x51eb851f

08003980 <HAL_UART_Transmit_DMA>:
{
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003984:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8003988:	2820      	cmp	r0, #32
 800398a:	d12d      	bne.n	80039e8 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 800398c:	b351      	cbz	r1, 80039e4 <HAL_UART_Transmit_DMA+0x64>
 800398e:	b34a      	cbz	r2, 80039e4 <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 8003990:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8003994:	2801      	cmp	r0, #1
 8003996:	d027      	beq.n	80039e8 <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003998:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800399a:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800399e:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80039a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80039a4:	4f11      	ldr	r7, [pc, #68]	; (80039ec <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80039a6:	4e12      	ldr	r6, [pc, #72]	; (80039f0 <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 80039a8:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 80039aa:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ac:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 80039ae:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 80039b0:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039b4:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80039b8:	4613      	mov	r3, r2
 80039ba:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80039bc:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039c0:	4e0c      	ldr	r6, [pc, #48]	; (80039f4 <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80039c2:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 80039c4:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039c6:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80039c8:	f7ff f92c 	bl	8002c24 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80039cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d0:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 80039d2:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80039d4:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 80039d6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039e0:	615a      	str	r2, [r3, #20]
}
 80039e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80039e4:	2001      	movs	r0, #1
}
 80039e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80039e8:	2002      	movs	r0, #2
}
 80039ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ec:	08003a99 	.word	0x08003a99
 80039f0:	08003ac9 	.word	0x08003ac9
 80039f4:	08003add 	.word	0x08003add

080039f8 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80039f8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d13f      	bne.n	8003a80 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 8003a00:	2900      	cmp	r1, #0
 8003a02:	d03b      	beq.n	8003a7c <HAL_UART_Receive_DMA+0x84>
 8003a04:	2a00      	cmp	r2, #0
 8003a06:	d039      	beq.n	8003a7c <HAL_UART_Receive_DMA+0x84>
{
 8003a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 8003a0a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a0e:	4604      	mov	r4, r0
 8003a10:	2b01      	cmp	r3, #1
{
 8003a12:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 8003a14:	d036      	beq.n	8003a84 <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a16:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003a18:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a1c:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 8003a20:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a22:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a24:	4f19      	ldr	r7, [pc, #100]	; (8003a8c <HAL_UART_Receive_DMA+0x94>)
 8003a26:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a28:	4e19      	ldr	r6, [pc, #100]	; (8003a90 <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 8003a2c:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a30:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a32:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a34:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a38:	460a      	mov	r2, r1
 8003a3a:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a3c:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a40:	4e14      	ldr	r6, [pc, #80]	; (8003a94 <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a42:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 8003a44:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a46:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a48:	f7ff f8ec 	bl	8002c24 <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003a4c:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	9501      	str	r5, [sp, #4]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	9201      	str	r2, [sp, #4]
 8003a56:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 8003a58:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003a5c:	9201      	str	r2, [sp, #4]
 8003a5e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a66:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a76:	615a      	str	r2, [r3, #20]
}
 8003a78:	b003      	add	sp, #12
 8003a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003a7c:	2001      	movs	r0, #1
}
 8003a7e:	4770      	bx	lr
    return HAL_BUSY;
 8003a80:	2002      	movs	r0, #2
 8003a82:	4770      	bx	lr
 8003a84:	2002      	movs	r0, #2
}
 8003a86:	b003      	add	sp, #12
 8003a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	08003b89 	.word	0x08003b89
 8003a90:	08003b6d 	.word	0x08003b6d
 8003a94:	08003add 	.word	0x08003add

08003a98 <UART_DMATransmitCplt>:
{
 8003a98:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a9a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f013 0320 	ands.w	r3, r3, #32
 8003aa4:	d10a      	bne.n	8003abc <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003aa6:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 8003aa8:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003aaa:	6953      	ldr	r3, [r2, #20]
 8003aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab0:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ab2:	68d3      	ldr	r3, [r2, #12]
 8003ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab8:	60d3      	str	r3, [r2, #12]
}
 8003aba:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003abc:	f7fe f89c 	bl	8001bf8 <HAL_UART_TxCpltCallback>
}
 8003ac0:	bd08      	pop	{r3, pc}
 8003ac2:	bf00      	nop

08003ac4 <HAL_UART_TxHalfCpltCallback>:
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop

08003ac8 <UART_DMATxHalfCplt>:
{
 8003ac8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8003aca:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003acc:	f7ff fffa 	bl	8003ac4 <HAL_UART_TxHalfCpltCallback>
}
 8003ad0:	bd08      	pop	{r3, pc}
 8003ad2:	bf00      	nop

08003ad4 <HAL_UART_RxHalfCpltCallback>:
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop

08003ad8 <HAL_UART_ErrorCallback>:
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop

08003adc <UART_DMAError>:
{
 8003adc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ade:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ae0:	6803      	ldr	r3, [r0, #0]
 8003ae2:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ae4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8003ae8:	2a21      	cmp	r2, #33	; 0x21
 8003aea:	d00b      	beq.n	8003b04 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aec:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003aee:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003af2:	2a22      	cmp	r2, #34	; 0x22
 8003af4:	d016      	beq.n	8003b24 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003af6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003af8:	f043 0310 	orr.w	r3, r3, #16
 8003afc:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8003afe:	f7ff ffeb 	bl	8003ad8 <HAL_UART_ErrorCallback>
}
 8003b02:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b04:	0609      	lsls	r1, r1, #24
 8003b06:	d5f1      	bpl.n	8003aec <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8003b08:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8003b0a:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 8003b0c:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003b14:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003b16:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1a:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b1c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003b20:	2a22      	cmp	r2, #34	; 0x22
 8003b22:	d1e8      	bne.n	8003af6 <UART_DMAError+0x1a>
 8003b24:	064a      	lsls	r2, r1, #25
 8003b26:	d5e6      	bpl.n	8003af6 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8003b28:	2200      	movs	r2, #0
 8003b2a:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b3c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003b3e:	2a01      	cmp	r2, #1
 8003b40:	d103      	bne.n	8003b4a <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	f022 0210 	bic.w	r2, r2, #16
 8003b48:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 8003b4a:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b52:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003b54:	e7cf      	b.n	8003af6 <UART_DMAError+0x1a>
 8003b56:	bf00      	nop

08003b58 <UART_DMAAbortOnError>:
{
 8003b58:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003b5a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003b5e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b60:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003b62:	f7ff ffb9 	bl	8003ad8 <HAL_UART_ErrorCallback>
}
 8003b66:	bd08      	pop	{r3, pc}

08003b68 <HAL_UARTEx_RxEventCallback>:
}
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop

08003b6c <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b6c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003b6e:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b70:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d002      	beq.n	8003b7c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b76:	f7ff ffad 	bl	8003ad4 <HAL_UART_RxHalfCpltCallback>
}
 8003b7a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003b7c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003b7e:	0849      	lsrs	r1, r1, #1
 8003b80:	f7ff fff2 	bl	8003b68 <HAL_UARTEx_RxEventCallback>
}
 8003b84:	bd08      	pop	{r3, pc}
 8003b86:	bf00      	nop

08003b88 <UART_DMAReceiveCplt>:
{
 8003b88:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b8a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f013 0320 	ands.w	r3, r3, #32
 8003b94:	d113      	bne.n	8003bbe <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 8003b96:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b98:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8003b9a:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9c:	68d3      	ldr	r3, [r2, #12]
 8003b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba2:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba4:	6953      	ldr	r3, [r2, #20]
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bac:	6953      	ldr	r3, [r2, #20]
 8003bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb2:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d009      	beq.n	8003bd2 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bbe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d002      	beq.n	8003bca <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 8003bc4:	f7fe f850 	bl	8001c68 <HAL_UART_RxCpltCallback>
}
 8003bc8:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bca:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003bcc:	f7ff ffcc 	bl	8003b68 <HAL_UARTEx_RxEventCallback>
}
 8003bd0:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd2:	68d3      	ldr	r3, [r2, #12]
 8003bd4:	f023 0310 	bic.w	r3, r3, #16
 8003bd8:	60d3      	str	r3, [r2, #12]
 8003bda:	e7f0      	b.n	8003bbe <UART_DMAReceiveCplt+0x36>

08003bdc <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bdc:	6883      	ldr	r3, [r0, #8]
 8003bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be2:	d03b      	beq.n	8003c5c <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003be4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d030      	beq.n	8003c4c <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bea:	6803      	ldr	r3, [r0, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003bf4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003bfa:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003c02:	bb53      	cbnz	r3, 8003c5a <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 8003c04:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c08:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003c0a:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c0c:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003c0e:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c10:	f021 0120 	bic.w	r1, r1, #32
 8003c14:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c16:	68d1      	ldr	r1, [r2, #12]
 8003c18:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003c1c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c1e:	6951      	ldr	r1, [r2, #20]
 8003c20:	f021 0101 	bic.w	r1, r1, #1
 8003c24:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003c26:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003c2c:	2901      	cmp	r1, #1
 8003c2e:	d120      	bne.n	8003c72 <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c30:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c32:	68d1      	ldr	r1, [r2, #12]
 8003c34:	f021 0110 	bic.w	r1, r1, #16
 8003c38:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c3a:	6811      	ldr	r1, [r2, #0]
 8003c3c:	06c9      	lsls	r1, r1, #27
 8003c3e:	d422      	bmi.n	8003c86 <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c40:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003c42:	f7ff ff91 	bl	8003b68 <HAL_UARTEx_RxEventCallback>
}
 8003c46:	b003      	add	sp, #12
 8003c48:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c4c:	6903      	ldr	r3, [r0, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1cb      	bne.n	8003bea <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c52:	6803      	ldr	r3, [r0, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	7013      	strb	r3, [r2, #0]
 8003c58:	e7cc      	b.n	8003bf4 <UART_Receive_IT.part.0.isra.0+0x18>
 8003c5a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c5c:	6903      	ldr	r3, [r0, #16]
 8003c5e:	b96b      	cbnz	r3, 8003c7c <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c60:	6802      	ldr	r2, [r0, #0]
 8003c62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003c64:	6852      	ldr	r2, [r2, #4]
 8003c66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c6a:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8003c6e:	6283      	str	r3, [r0, #40]	; 0x28
 8003c70:	e7c3      	b.n	8003bfa <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8003c72:	f7fd fff9 	bl	8001c68 <HAL_UART_RxCpltCallback>
}
 8003c76:	b003      	add	sp, #12
 8003c78:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c7c:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c7e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	7013      	strb	r3, [r2, #0]
 8003c84:	e7b6      	b.n	8003bf4 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	6813      	ldr	r3, [r2, #0]
 8003c8a:	9301      	str	r3, [sp, #4]
 8003c8c:	6853      	ldr	r3, [r2, #4]
 8003c8e:	9301      	str	r3, [sp, #4]
 8003c90:	9b01      	ldr	r3, [sp, #4]
 8003c92:	e7d5      	b.n	8003c40 <UART_Receive_IT.part.0.isra.0+0x64>

08003c94 <HAL_UART_IRQHandler>:
{
 8003c94:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c96:	6803      	ldr	r3, [r0, #0]
{
 8003c98:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c9a:	681a      	ldr	r2, [r3, #0]
{
 8003c9c:	b083      	sub	sp, #12
  if (errorflags == RESET)
 8003c9e:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ca2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ca4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003ca6:	d14e      	bne.n	8003d46 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ca8:	0695      	lsls	r5, r2, #26
 8003caa:	d502      	bpl.n	8003cb2 <HAL_UART_IRQHandler+0x1e>
 8003cac:	068d      	lsls	r5, r1, #26
 8003cae:	f100 8090 	bmi.w	8003dd2 <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003cb4:	2801      	cmp	r0, #1
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cb8:	0610      	lsls	r0, r2, #24
 8003cba:	d502      	bpl.n	8003cc2 <HAL_UART_IRQHandler+0x2e>
 8003cbc:	060d      	lsls	r5, r1, #24
 8003cbe:	f100 8092 	bmi.w	8003de6 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cc2:	0650      	lsls	r0, r2, #25
 8003cc4:	d502      	bpl.n	8003ccc <HAL_UART_IRQHandler+0x38>
 8003cc6:	064a      	lsls	r2, r1, #25
 8003cc8:	f100 80ab 	bmi.w	8003e22 <HAL_UART_IRQHandler+0x18e>
}
 8003ccc:	b003      	add	sp, #12
 8003cce:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003cd0:	06d0      	lsls	r0, r2, #27
 8003cd2:	d5f1      	bpl.n	8003cb8 <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003cd4:	06cd      	lsls	r5, r1, #27
 8003cd6:	d5ef      	bpl.n	8003cb8 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cd8:	2100      	movs	r1, #0
 8003cda:	9101      	str	r1, [sp, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	9201      	str	r2, [sp, #4]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	9201      	str	r2, [sp, #4]
 8003ce4:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003cec:	f000 80d2 	beq.w	8003e94 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cf0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cf2:	6802      	ldr	r2, [r0, #0]
 8003cf4:	6852      	ldr	r2, [r2, #4]
 8003cf6:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8003cf8:	2a00      	cmp	r2, #0
 8003cfa:	d0e7      	beq.n	8003ccc <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003cfc:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8003cfe:	4295      	cmp	r5, r2
 8003d00:	d9e4      	bls.n	8003ccc <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8003d02:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d04:	6982      	ldr	r2, [r0, #24]
 8003d06:	2a20      	cmp	r2, #32
 8003d08:	d016      	beq.n	8003d38 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d10:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d20:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8003d22:	2220      	movs	r2, #32
 8003d24:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d28:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	f022 0210 	bic.w	r2, r2, #16
 8003d30:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d32:	f7fe ffc1 	bl	8002cb8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d36:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8003d38:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	1a69      	subs	r1, r5, r1
 8003d3e:	b289      	uxth	r1, r1
 8003d40:	f7ff ff12 	bl	8003b68 <HAL_UARTEx_RxEventCallback>
 8003d44:	e7c2      	b.n	8003ccc <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d46:	f005 0501 	and.w	r5, r5, #1
 8003d4a:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8003d4e:	4328      	orrs	r0, r5
 8003d50:	d0af      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d52:	07d0      	lsls	r0, r2, #31
 8003d54:	d505      	bpl.n	8003d62 <HAL_UART_IRQHandler+0xce>
 8003d56:	05c8      	lsls	r0, r1, #23
 8003d58:	d503      	bpl.n	8003d62 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d5a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003d5c:	f040 0001 	orr.w	r0, r0, #1
 8003d60:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d62:	0750      	lsls	r0, r2, #29
 8003d64:	d530      	bpl.n	8003dc8 <HAL_UART_IRQHandler+0x134>
 8003d66:	b14d      	cbz	r5, 8003d7c <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d68:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003d6a:	f040 0002 	orr.w	r0, r0, #2
 8003d6e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d70:	0790      	lsls	r0, r2, #30
 8003d72:	d503      	bpl.n	8003d7c <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d74:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003d76:	f040 0004 	orr.w	r0, r0, #4
 8003d7a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d7c:	0710      	lsls	r0, r2, #28
 8003d7e:	d507      	bpl.n	8003d90 <HAL_UART_IRQHandler+0xfc>
 8003d80:	f001 0020 	and.w	r0, r1, #32
 8003d84:	4328      	orrs	r0, r5
 8003d86:	d003      	beq.n	8003d90 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d88:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003d8a:	f040 0008 	orr.w	r0, r0, #8
 8003d8e:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d90:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d09a      	beq.n	8003ccc <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d96:	0690      	lsls	r0, r2, #26
 8003d98:	d509      	bpl.n	8003dae <HAL_UART_IRQHandler+0x11a>
 8003d9a:	068a      	lsls	r2, r1, #26
 8003d9c:	d507      	bpl.n	8003dae <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d9e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003da2:	2a22      	cmp	r2, #34	; 0x22
 8003da4:	d103      	bne.n	8003dae <HAL_UART_IRQHandler+0x11a>
 8003da6:	4620      	mov	r0, r4
 8003da8:	f7ff ff18 	bl	8003bdc <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003db0:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003db2:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003db6:	f005 0508 	and.w	r5, r5, #8
 8003dba:	4315      	orrs	r5, r2
 8003dbc:	d13c      	bne.n	8003e38 <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f7ff fe8a 	bl	8003ad8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc4:	6425      	str	r5, [r4, #64]	; 0x40
 8003dc6:	e781      	b.n	8003ccc <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dc8:	0790      	lsls	r0, r2, #30
 8003dca:	d5d7      	bpl.n	8003d7c <HAL_UART_IRQHandler+0xe8>
 8003dcc:	2d00      	cmp	r5, #0
 8003dce:	d1d1      	bne.n	8003d74 <HAL_UART_IRQHandler+0xe0>
 8003dd0:	e7d4      	b.n	8003d7c <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dd2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003dd6:	2b22      	cmp	r3, #34	; 0x22
 8003dd8:	f47f af78 	bne.w	8003ccc <HAL_UART_IRQHandler+0x38>
}
 8003ddc:	b003      	add	sp, #12
 8003dde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003de2:	f7ff befb 	b.w	8003bdc <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003de6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003dea:	2a21      	cmp	r2, #33	; 0x21
 8003dec:	f47f af6e 	bne.w	8003ccc <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df0:	68a2      	ldr	r2, [r4, #8]
 8003df2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003df6:	d06e      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003df8:	6a22      	ldr	r2, [r4, #32]
 8003dfa:	1c51      	adds	r1, r2, #1
 8003dfc:	6221      	str	r1, [r4, #32]
 8003dfe:	7812      	ldrb	r2, [r2, #0]
 8003e00:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003e02:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003e04:	3a01      	subs	r2, #1
 8003e06:	b292      	uxth	r2, r2
 8003e08:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003e0a:	2a00      	cmp	r2, #0
 8003e0c:	f47f af5e 	bne.w	8003ccc <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e16:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e1e:	60da      	str	r2, [r3, #12]
 8003e20:	e754      	b.n	8003ccc <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8003e22:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e24:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003e26:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e2c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003e2e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8003e32:	f7fd fee1 	bl	8001bf8 <HAL_UART_TxCpltCallback>
    return;
 8003e36:	e749      	b.n	8003ccc <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e48:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003e4a:	2a01      	cmp	r2, #1
 8003e4c:	d103      	bne.n	8003e56 <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	f022 0210 	bic.w	r2, r2, #16
 8003e54:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003e58:	2120      	movs	r1, #32
 8003e5a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	0655      	lsls	r5, r2, #25
 8003e64:	d512      	bpl.n	8003e8c <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e66:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003e68:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003e70:	b160      	cbz	r0, 8003e8c <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <HAL_UART_IRQHandler+0x258>)
 8003e74:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e76:	f7fe ff47 	bl	8002d08 <HAL_DMA_Abort_IT>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	f43f af26 	beq.w	8003ccc <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e80:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e82:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8003e84:	b003      	add	sp, #12
 8003e86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e8a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f7ff fe23 	bl	8003ad8 <HAL_UART_ErrorCallback>
 8003e92:	e71b      	b.n	8003ccc <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e94:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8003e96:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e98:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8003e9a:	b289      	uxth	r1, r1
 8003e9c:	2900      	cmp	r1, #0
 8003e9e:	f43f af15 	beq.w	8003ccc <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ea2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003ea4:	1a08      	subs	r0, r1, r0
 8003ea6:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	f43f af0f 	beq.w	8003ccc <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 8003eae:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb0:	68d8      	ldr	r0, [r3, #12]
 8003eb2:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8003eb6:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb8:	6958      	ldr	r0, [r3, #20]
 8003eba:	f020 0001 	bic.w	r0, r0, #1
 8003ebe:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8003ec0:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec4:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec6:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ec8:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eca:	f022 0210 	bic.w	r2, r2, #16
 8003ece:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ed0:	f7ff fe4a 	bl	8003b68 <HAL_UARTEx_RxEventCallback>
 8003ed4:	e6fa      	b.n	8003ccc <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed6:	6922      	ldr	r2, [r4, #16]
 8003ed8:	2a00      	cmp	r2, #0
 8003eda:	d18d      	bne.n	8003df8 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003edc:	6a22      	ldr	r2, [r4, #32]
 8003ede:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003ee2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003ee6:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ee8:	6222      	str	r2, [r4, #32]
 8003eea:	e78a      	b.n	8003e02 <HAL_UART_IRQHandler+0x16e>
 8003eec:	08003b59 	.word	0x08003b59

08003ef0 <__errno>:
 8003ef0:	4b01      	ldr	r3, [pc, #4]	; (8003ef8 <__errno+0x8>)
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	20000014 	.word	0x20000014

08003efc <__libc_init_array>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	2600      	movs	r6, #0
 8003f00:	4d0c      	ldr	r5, [pc, #48]	; (8003f34 <__libc_init_array+0x38>)
 8003f02:	4c0d      	ldr	r4, [pc, #52]	; (8003f38 <__libc_init_array+0x3c>)
 8003f04:	1b64      	subs	r4, r4, r5
 8003f06:	10a4      	asrs	r4, r4, #2
 8003f08:	42a6      	cmp	r6, r4
 8003f0a:	d109      	bne.n	8003f20 <__libc_init_array+0x24>
 8003f0c:	f002 ff10 	bl	8006d30 <_init>
 8003f10:	2600      	movs	r6, #0
 8003f12:	4d0a      	ldr	r5, [pc, #40]	; (8003f3c <__libc_init_array+0x40>)
 8003f14:	4c0a      	ldr	r4, [pc, #40]	; (8003f40 <__libc_init_array+0x44>)
 8003f16:	1b64      	subs	r4, r4, r5
 8003f18:	10a4      	asrs	r4, r4, #2
 8003f1a:	42a6      	cmp	r6, r4
 8003f1c:	d105      	bne.n	8003f2a <__libc_init_array+0x2e>
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
 8003f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f24:	4798      	blx	r3
 8003f26:	3601      	adds	r6, #1
 8003f28:	e7ee      	b.n	8003f08 <__libc_init_array+0xc>
 8003f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f2e:	4798      	blx	r3
 8003f30:	3601      	adds	r6, #1
 8003f32:	e7f2      	b.n	8003f1a <__libc_init_array+0x1e>
 8003f34:	08007184 	.word	0x08007184
 8003f38:	08007184 	.word	0x08007184
 8003f3c:	08007184 	.word	0x08007184
 8003f40:	08007188 	.word	0x08007188

08003f44 <memset>:
 8003f44:	4603      	mov	r3, r0
 8003f46:	4402      	add	r2, r0
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d100      	bne.n	8003f4e <memset+0xa>
 8003f4c:	4770      	bx	lr
 8003f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f52:	e7f9      	b.n	8003f48 <memset+0x4>

08003f54 <__cvt>:
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f5a:	461f      	mov	r7, r3
 8003f5c:	bfbb      	ittet	lt
 8003f5e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f62:	461f      	movlt	r7, r3
 8003f64:	2300      	movge	r3, #0
 8003f66:	232d      	movlt	r3, #45	; 0x2d
 8003f68:	b088      	sub	sp, #32
 8003f6a:	4614      	mov	r4, r2
 8003f6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f70:	7013      	strb	r3, [r2, #0]
 8003f72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f74:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003f78:	f023 0820 	bic.w	r8, r3, #32
 8003f7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f80:	d005      	beq.n	8003f8e <__cvt+0x3a>
 8003f82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f86:	d100      	bne.n	8003f8a <__cvt+0x36>
 8003f88:	3501      	adds	r5, #1
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e000      	b.n	8003f90 <__cvt+0x3c>
 8003f8e:	2303      	movs	r3, #3
 8003f90:	aa07      	add	r2, sp, #28
 8003f92:	9204      	str	r2, [sp, #16]
 8003f94:	aa06      	add	r2, sp, #24
 8003f96:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f9a:	e9cd 3500 	strd	r3, r5, [sp]
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	463b      	mov	r3, r7
 8003fa2:	f000 fcf9 	bl	8004998 <_dtoa_r>
 8003fa6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003faa:	4606      	mov	r6, r0
 8003fac:	d102      	bne.n	8003fb4 <__cvt+0x60>
 8003fae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003fb0:	07db      	lsls	r3, r3, #31
 8003fb2:	d522      	bpl.n	8003ffa <__cvt+0xa6>
 8003fb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fb8:	eb06 0905 	add.w	r9, r6, r5
 8003fbc:	d110      	bne.n	8003fe0 <__cvt+0x8c>
 8003fbe:	7833      	ldrb	r3, [r6, #0]
 8003fc0:	2b30      	cmp	r3, #48	; 0x30
 8003fc2:	d10a      	bne.n	8003fda <__cvt+0x86>
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	4620      	mov	r0, r4
 8003fca:	4639      	mov	r1, r7
 8003fcc:	f7fc fd04 	bl	80009d8 <__aeabi_dcmpeq>
 8003fd0:	b918      	cbnz	r0, 8003fda <__cvt+0x86>
 8003fd2:	f1c5 0501 	rsb	r5, r5, #1
 8003fd6:	f8ca 5000 	str.w	r5, [sl]
 8003fda:	f8da 3000 	ldr.w	r3, [sl]
 8003fde:	4499      	add	r9, r3
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	4639      	mov	r1, r7
 8003fe8:	f7fc fcf6 	bl	80009d8 <__aeabi_dcmpeq>
 8003fec:	b108      	cbz	r0, 8003ff2 <__cvt+0x9e>
 8003fee:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ff2:	2230      	movs	r2, #48	; 0x30
 8003ff4:	9b07      	ldr	r3, [sp, #28]
 8003ff6:	454b      	cmp	r3, r9
 8003ff8:	d307      	bcc.n	800400a <__cvt+0xb6>
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	9b07      	ldr	r3, [sp, #28]
 8003ffe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004000:	1b9b      	subs	r3, r3, r6
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	b008      	add	sp, #32
 8004006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400a:	1c59      	adds	r1, r3, #1
 800400c:	9107      	str	r1, [sp, #28]
 800400e:	701a      	strb	r2, [r3, #0]
 8004010:	e7f0      	b.n	8003ff4 <__cvt+0xa0>

08004012 <__exponent>:
 8004012:	4603      	mov	r3, r0
 8004014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004016:	2900      	cmp	r1, #0
 8004018:	f803 2b02 	strb.w	r2, [r3], #2
 800401c:	bfb6      	itet	lt
 800401e:	222d      	movlt	r2, #45	; 0x2d
 8004020:	222b      	movge	r2, #43	; 0x2b
 8004022:	4249      	neglt	r1, r1
 8004024:	2909      	cmp	r1, #9
 8004026:	7042      	strb	r2, [r0, #1]
 8004028:	dd2b      	ble.n	8004082 <__exponent+0x70>
 800402a:	f10d 0407 	add.w	r4, sp, #7
 800402e:	46a4      	mov	ip, r4
 8004030:	270a      	movs	r7, #10
 8004032:	fb91 f6f7 	sdiv	r6, r1, r7
 8004036:	460a      	mov	r2, r1
 8004038:	46a6      	mov	lr, r4
 800403a:	fb07 1516 	mls	r5, r7, r6, r1
 800403e:	2a63      	cmp	r2, #99	; 0x63
 8004040:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004044:	4631      	mov	r1, r6
 8004046:	f104 34ff 	add.w	r4, r4, #4294967295
 800404a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800404e:	dcf0      	bgt.n	8004032 <__exponent+0x20>
 8004050:	3130      	adds	r1, #48	; 0x30
 8004052:	f1ae 0502 	sub.w	r5, lr, #2
 8004056:	f804 1c01 	strb.w	r1, [r4, #-1]
 800405a:	4629      	mov	r1, r5
 800405c:	1c44      	adds	r4, r0, #1
 800405e:	4561      	cmp	r1, ip
 8004060:	d30a      	bcc.n	8004078 <__exponent+0x66>
 8004062:	f10d 0209 	add.w	r2, sp, #9
 8004066:	eba2 020e 	sub.w	r2, r2, lr
 800406a:	4565      	cmp	r5, ip
 800406c:	bf88      	it	hi
 800406e:	2200      	movhi	r2, #0
 8004070:	4413      	add	r3, r2
 8004072:	1a18      	subs	r0, r3, r0
 8004074:	b003      	add	sp, #12
 8004076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004078:	f811 2b01 	ldrb.w	r2, [r1], #1
 800407c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004080:	e7ed      	b.n	800405e <__exponent+0x4c>
 8004082:	2330      	movs	r3, #48	; 0x30
 8004084:	3130      	adds	r1, #48	; 0x30
 8004086:	7083      	strb	r3, [r0, #2]
 8004088:	70c1      	strb	r1, [r0, #3]
 800408a:	1d03      	adds	r3, r0, #4
 800408c:	e7f1      	b.n	8004072 <__exponent+0x60>
	...

08004090 <_printf_float>:
 8004090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004094:	b091      	sub	sp, #68	; 0x44
 8004096:	460c      	mov	r4, r1
 8004098:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800409c:	4616      	mov	r6, r2
 800409e:	461f      	mov	r7, r3
 80040a0:	4605      	mov	r5, r0
 80040a2:	f001 fa67 	bl	8005574 <_localeconv_r>
 80040a6:	6803      	ldr	r3, [r0, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	9309      	str	r3, [sp, #36]	; 0x24
 80040ac:	f7fc f868 	bl	8000180 <strlen>
 80040b0:	2300      	movs	r3, #0
 80040b2:	930e      	str	r3, [sp, #56]	; 0x38
 80040b4:	f8d8 3000 	ldr.w	r3, [r8]
 80040b8:	900a      	str	r0, [sp, #40]	; 0x28
 80040ba:	3307      	adds	r3, #7
 80040bc:	f023 0307 	bic.w	r3, r3, #7
 80040c0:	f103 0208 	add.w	r2, r3, #8
 80040c4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80040c8:	f8d4 b000 	ldr.w	fp, [r4]
 80040cc:	f8c8 2000 	str.w	r2, [r8]
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040d8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80040dc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80040e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80040e2:	f04f 32ff 	mov.w	r2, #4294967295
 80040e6:	4640      	mov	r0, r8
 80040e8:	4b9c      	ldr	r3, [pc, #624]	; (800435c <_printf_float+0x2cc>)
 80040ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040ec:	f7fc fca6 	bl	8000a3c <__aeabi_dcmpun>
 80040f0:	bb70      	cbnz	r0, 8004150 <_printf_float+0xc0>
 80040f2:	f04f 32ff 	mov.w	r2, #4294967295
 80040f6:	4640      	mov	r0, r8
 80040f8:	4b98      	ldr	r3, [pc, #608]	; (800435c <_printf_float+0x2cc>)
 80040fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040fc:	f7fc fc80 	bl	8000a00 <__aeabi_dcmple>
 8004100:	bb30      	cbnz	r0, 8004150 <_printf_float+0xc0>
 8004102:	2200      	movs	r2, #0
 8004104:	2300      	movs	r3, #0
 8004106:	4640      	mov	r0, r8
 8004108:	4651      	mov	r1, sl
 800410a:	f7fc fc6f 	bl	80009ec <__aeabi_dcmplt>
 800410e:	b110      	cbz	r0, 8004116 <_printf_float+0x86>
 8004110:	232d      	movs	r3, #45	; 0x2d
 8004112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004116:	4b92      	ldr	r3, [pc, #584]	; (8004360 <_printf_float+0x2d0>)
 8004118:	4892      	ldr	r0, [pc, #584]	; (8004364 <_printf_float+0x2d4>)
 800411a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800411e:	bf94      	ite	ls
 8004120:	4698      	movls	r8, r3
 8004122:	4680      	movhi	r8, r0
 8004124:	2303      	movs	r3, #3
 8004126:	f04f 0a00 	mov.w	sl, #0
 800412a:	6123      	str	r3, [r4, #16]
 800412c:	f02b 0304 	bic.w	r3, fp, #4
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	4633      	mov	r3, r6
 8004134:	4621      	mov	r1, r4
 8004136:	4628      	mov	r0, r5
 8004138:	9700      	str	r7, [sp, #0]
 800413a:	aa0f      	add	r2, sp, #60	; 0x3c
 800413c:	f000 f9d4 	bl	80044e8 <_printf_common>
 8004140:	3001      	adds	r0, #1
 8004142:	f040 8090 	bne.w	8004266 <_printf_float+0x1d6>
 8004146:	f04f 30ff 	mov.w	r0, #4294967295
 800414a:	b011      	add	sp, #68	; 0x44
 800414c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004150:	4642      	mov	r2, r8
 8004152:	4653      	mov	r3, sl
 8004154:	4640      	mov	r0, r8
 8004156:	4651      	mov	r1, sl
 8004158:	f7fc fc70 	bl	8000a3c <__aeabi_dcmpun>
 800415c:	b148      	cbz	r0, 8004172 <_printf_float+0xe2>
 800415e:	f1ba 0f00 	cmp.w	sl, #0
 8004162:	bfb8      	it	lt
 8004164:	232d      	movlt	r3, #45	; 0x2d
 8004166:	4880      	ldr	r0, [pc, #512]	; (8004368 <_printf_float+0x2d8>)
 8004168:	bfb8      	it	lt
 800416a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800416e:	4b7f      	ldr	r3, [pc, #508]	; (800436c <_printf_float+0x2dc>)
 8004170:	e7d3      	b.n	800411a <_printf_float+0x8a>
 8004172:	6863      	ldr	r3, [r4, #4]
 8004174:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	d142      	bne.n	8004202 <_printf_float+0x172>
 800417c:	2306      	movs	r3, #6
 800417e:	6063      	str	r3, [r4, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	9206      	str	r2, [sp, #24]
 8004184:	aa0e      	add	r2, sp, #56	; 0x38
 8004186:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800418a:	aa0d      	add	r2, sp, #52	; 0x34
 800418c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004190:	9203      	str	r2, [sp, #12]
 8004192:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004196:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800419a:	6023      	str	r3, [r4, #0]
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	4642      	mov	r2, r8
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	4628      	mov	r0, r5
 80041a4:	4653      	mov	r3, sl
 80041a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80041a8:	f7ff fed4 	bl	8003f54 <__cvt>
 80041ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041ae:	4680      	mov	r8, r0
 80041b0:	2947      	cmp	r1, #71	; 0x47
 80041b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041b4:	d108      	bne.n	80041c8 <_printf_float+0x138>
 80041b6:	1cc8      	adds	r0, r1, #3
 80041b8:	db02      	blt.n	80041c0 <_printf_float+0x130>
 80041ba:	6863      	ldr	r3, [r4, #4]
 80041bc:	4299      	cmp	r1, r3
 80041be:	dd40      	ble.n	8004242 <_printf_float+0x1b2>
 80041c0:	f1a9 0902 	sub.w	r9, r9, #2
 80041c4:	fa5f f989 	uxtb.w	r9, r9
 80041c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80041cc:	d81f      	bhi.n	800420e <_printf_float+0x17e>
 80041ce:	464a      	mov	r2, r9
 80041d0:	3901      	subs	r1, #1
 80041d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041d6:	910d      	str	r1, [sp, #52]	; 0x34
 80041d8:	f7ff ff1b 	bl	8004012 <__exponent>
 80041dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041de:	4682      	mov	sl, r0
 80041e0:	1813      	adds	r3, r2, r0
 80041e2:	2a01      	cmp	r2, #1
 80041e4:	6123      	str	r3, [r4, #16]
 80041e6:	dc02      	bgt.n	80041ee <_printf_float+0x15e>
 80041e8:	6822      	ldr	r2, [r4, #0]
 80041ea:	07d2      	lsls	r2, r2, #31
 80041ec:	d501      	bpl.n	80041f2 <_printf_float+0x162>
 80041ee:	3301      	adds	r3, #1
 80041f0:	6123      	str	r3, [r4, #16]
 80041f2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d09b      	beq.n	8004132 <_printf_float+0xa2>
 80041fa:	232d      	movs	r3, #45	; 0x2d
 80041fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004200:	e797      	b.n	8004132 <_printf_float+0xa2>
 8004202:	2947      	cmp	r1, #71	; 0x47
 8004204:	d1bc      	bne.n	8004180 <_printf_float+0xf0>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1ba      	bne.n	8004180 <_printf_float+0xf0>
 800420a:	2301      	movs	r3, #1
 800420c:	e7b7      	b.n	800417e <_printf_float+0xee>
 800420e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004212:	d118      	bne.n	8004246 <_printf_float+0x1b6>
 8004214:	2900      	cmp	r1, #0
 8004216:	6863      	ldr	r3, [r4, #4]
 8004218:	dd0b      	ble.n	8004232 <_printf_float+0x1a2>
 800421a:	6121      	str	r1, [r4, #16]
 800421c:	b913      	cbnz	r3, 8004224 <_printf_float+0x194>
 800421e:	6822      	ldr	r2, [r4, #0]
 8004220:	07d0      	lsls	r0, r2, #31
 8004222:	d502      	bpl.n	800422a <_printf_float+0x19a>
 8004224:	3301      	adds	r3, #1
 8004226:	440b      	add	r3, r1
 8004228:	6123      	str	r3, [r4, #16]
 800422a:	f04f 0a00 	mov.w	sl, #0
 800422e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004230:	e7df      	b.n	80041f2 <_printf_float+0x162>
 8004232:	b913      	cbnz	r3, 800423a <_printf_float+0x1aa>
 8004234:	6822      	ldr	r2, [r4, #0]
 8004236:	07d2      	lsls	r2, r2, #31
 8004238:	d501      	bpl.n	800423e <_printf_float+0x1ae>
 800423a:	3302      	adds	r3, #2
 800423c:	e7f4      	b.n	8004228 <_printf_float+0x198>
 800423e:	2301      	movs	r3, #1
 8004240:	e7f2      	b.n	8004228 <_printf_float+0x198>
 8004242:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004248:	4299      	cmp	r1, r3
 800424a:	db05      	blt.n	8004258 <_printf_float+0x1c8>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	6121      	str	r1, [r4, #16]
 8004250:	07d8      	lsls	r0, r3, #31
 8004252:	d5ea      	bpl.n	800422a <_printf_float+0x19a>
 8004254:	1c4b      	adds	r3, r1, #1
 8004256:	e7e7      	b.n	8004228 <_printf_float+0x198>
 8004258:	2900      	cmp	r1, #0
 800425a:	bfcc      	ite	gt
 800425c:	2201      	movgt	r2, #1
 800425e:	f1c1 0202 	rsble	r2, r1, #2
 8004262:	4413      	add	r3, r2
 8004264:	e7e0      	b.n	8004228 <_printf_float+0x198>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	055a      	lsls	r2, r3, #21
 800426a:	d407      	bmi.n	800427c <_printf_float+0x1ec>
 800426c:	6923      	ldr	r3, [r4, #16]
 800426e:	4642      	mov	r2, r8
 8004270:	4631      	mov	r1, r6
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	d12b      	bne.n	80042d2 <_printf_float+0x242>
 800427a:	e764      	b.n	8004146 <_printf_float+0xb6>
 800427c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004280:	f240 80dd 	bls.w	800443e <_printf_float+0x3ae>
 8004284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004288:	2200      	movs	r2, #0
 800428a:	2300      	movs	r3, #0
 800428c:	f7fc fba4 	bl	80009d8 <__aeabi_dcmpeq>
 8004290:	2800      	cmp	r0, #0
 8004292:	d033      	beq.n	80042fc <_printf_float+0x26c>
 8004294:	2301      	movs	r3, #1
 8004296:	4631      	mov	r1, r6
 8004298:	4628      	mov	r0, r5
 800429a:	4a35      	ldr	r2, [pc, #212]	; (8004370 <_printf_float+0x2e0>)
 800429c:	47b8      	blx	r7
 800429e:	3001      	adds	r0, #1
 80042a0:	f43f af51 	beq.w	8004146 <_printf_float+0xb6>
 80042a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042a8:	429a      	cmp	r2, r3
 80042aa:	db02      	blt.n	80042b2 <_printf_float+0x222>
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	07d8      	lsls	r0, r3, #31
 80042b0:	d50f      	bpl.n	80042d2 <_printf_float+0x242>
 80042b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042b6:	4631      	mov	r1, r6
 80042b8:	4628      	mov	r0, r5
 80042ba:	47b8      	blx	r7
 80042bc:	3001      	adds	r0, #1
 80042be:	f43f af42 	beq.w	8004146 <_printf_float+0xb6>
 80042c2:	f04f 0800 	mov.w	r8, #0
 80042c6:	f104 091a 	add.w	r9, r4, #26
 80042ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042cc:	3b01      	subs	r3, #1
 80042ce:	4543      	cmp	r3, r8
 80042d0:	dc09      	bgt.n	80042e6 <_printf_float+0x256>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	079b      	lsls	r3, r3, #30
 80042d6:	f100 8102 	bmi.w	80044de <_printf_float+0x44e>
 80042da:	68e0      	ldr	r0, [r4, #12]
 80042dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042de:	4298      	cmp	r0, r3
 80042e0:	bfb8      	it	lt
 80042e2:	4618      	movlt	r0, r3
 80042e4:	e731      	b.n	800414a <_printf_float+0xba>
 80042e6:	2301      	movs	r3, #1
 80042e8:	464a      	mov	r2, r9
 80042ea:	4631      	mov	r1, r6
 80042ec:	4628      	mov	r0, r5
 80042ee:	47b8      	blx	r7
 80042f0:	3001      	adds	r0, #1
 80042f2:	f43f af28 	beq.w	8004146 <_printf_float+0xb6>
 80042f6:	f108 0801 	add.w	r8, r8, #1
 80042fa:	e7e6      	b.n	80042ca <_printf_float+0x23a>
 80042fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042fe:	2b00      	cmp	r3, #0
 8004300:	dc38      	bgt.n	8004374 <_printf_float+0x2e4>
 8004302:	2301      	movs	r3, #1
 8004304:	4631      	mov	r1, r6
 8004306:	4628      	mov	r0, r5
 8004308:	4a19      	ldr	r2, [pc, #100]	; (8004370 <_printf_float+0x2e0>)
 800430a:	47b8      	blx	r7
 800430c:	3001      	adds	r0, #1
 800430e:	f43f af1a 	beq.w	8004146 <_printf_float+0xb6>
 8004312:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004316:	4313      	orrs	r3, r2
 8004318:	d102      	bne.n	8004320 <_printf_float+0x290>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	07d9      	lsls	r1, r3, #31
 800431e:	d5d8      	bpl.n	80042d2 <_printf_float+0x242>
 8004320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004324:	4631      	mov	r1, r6
 8004326:	4628      	mov	r0, r5
 8004328:	47b8      	blx	r7
 800432a:	3001      	adds	r0, #1
 800432c:	f43f af0b 	beq.w	8004146 <_printf_float+0xb6>
 8004330:	f04f 0900 	mov.w	r9, #0
 8004334:	f104 0a1a 	add.w	sl, r4, #26
 8004338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800433a:	425b      	negs	r3, r3
 800433c:	454b      	cmp	r3, r9
 800433e:	dc01      	bgt.n	8004344 <_printf_float+0x2b4>
 8004340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004342:	e794      	b.n	800426e <_printf_float+0x1de>
 8004344:	2301      	movs	r3, #1
 8004346:	4652      	mov	r2, sl
 8004348:	4631      	mov	r1, r6
 800434a:	4628      	mov	r0, r5
 800434c:	47b8      	blx	r7
 800434e:	3001      	adds	r0, #1
 8004350:	f43f aef9 	beq.w	8004146 <_printf_float+0xb6>
 8004354:	f109 0901 	add.w	r9, r9, #1
 8004358:	e7ee      	b.n	8004338 <_printf_float+0x2a8>
 800435a:	bf00      	nop
 800435c:	7fefffff 	.word	0x7fefffff
 8004360:	08006da8 	.word	0x08006da8
 8004364:	08006dac 	.word	0x08006dac
 8004368:	08006db4 	.word	0x08006db4
 800436c:	08006db0 	.word	0x08006db0
 8004370:	08006db8 	.word	0x08006db8
 8004374:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004376:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004378:	429a      	cmp	r2, r3
 800437a:	bfa8      	it	ge
 800437c:	461a      	movge	r2, r3
 800437e:	2a00      	cmp	r2, #0
 8004380:	4691      	mov	r9, r2
 8004382:	dc37      	bgt.n	80043f4 <_printf_float+0x364>
 8004384:	f04f 0b00 	mov.w	fp, #0
 8004388:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800438c:	f104 021a 	add.w	r2, r4, #26
 8004390:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004394:	ebaa 0309 	sub.w	r3, sl, r9
 8004398:	455b      	cmp	r3, fp
 800439a:	dc33      	bgt.n	8004404 <_printf_float+0x374>
 800439c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043a0:	429a      	cmp	r2, r3
 80043a2:	db3b      	blt.n	800441c <_printf_float+0x38c>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	07da      	lsls	r2, r3, #31
 80043a8:	d438      	bmi.n	800441c <_printf_float+0x38c>
 80043aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80043ae:	eba3 020a 	sub.w	r2, r3, sl
 80043b2:	eba3 0901 	sub.w	r9, r3, r1
 80043b6:	4591      	cmp	r9, r2
 80043b8:	bfa8      	it	ge
 80043ba:	4691      	movge	r9, r2
 80043bc:	f1b9 0f00 	cmp.w	r9, #0
 80043c0:	dc34      	bgt.n	800442c <_printf_float+0x39c>
 80043c2:	f04f 0800 	mov.w	r8, #0
 80043c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043ca:	f104 0a1a 	add.w	sl, r4, #26
 80043ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	eba3 0309 	sub.w	r3, r3, r9
 80043d8:	4543      	cmp	r3, r8
 80043da:	f77f af7a 	ble.w	80042d2 <_printf_float+0x242>
 80043de:	2301      	movs	r3, #1
 80043e0:	4652      	mov	r2, sl
 80043e2:	4631      	mov	r1, r6
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b8      	blx	r7
 80043e8:	3001      	adds	r0, #1
 80043ea:	f43f aeac 	beq.w	8004146 <_printf_float+0xb6>
 80043ee:	f108 0801 	add.w	r8, r8, #1
 80043f2:	e7ec      	b.n	80043ce <_printf_float+0x33e>
 80043f4:	4613      	mov	r3, r2
 80043f6:	4631      	mov	r1, r6
 80043f8:	4642      	mov	r2, r8
 80043fa:	4628      	mov	r0, r5
 80043fc:	47b8      	blx	r7
 80043fe:	3001      	adds	r0, #1
 8004400:	d1c0      	bne.n	8004384 <_printf_float+0x2f4>
 8004402:	e6a0      	b.n	8004146 <_printf_float+0xb6>
 8004404:	2301      	movs	r3, #1
 8004406:	4631      	mov	r1, r6
 8004408:	4628      	mov	r0, r5
 800440a:	920b      	str	r2, [sp, #44]	; 0x2c
 800440c:	47b8      	blx	r7
 800440e:	3001      	adds	r0, #1
 8004410:	f43f ae99 	beq.w	8004146 <_printf_float+0xb6>
 8004414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004416:	f10b 0b01 	add.w	fp, fp, #1
 800441a:	e7b9      	b.n	8004390 <_printf_float+0x300>
 800441c:	4631      	mov	r1, r6
 800441e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004422:	4628      	mov	r0, r5
 8004424:	47b8      	blx	r7
 8004426:	3001      	adds	r0, #1
 8004428:	d1bf      	bne.n	80043aa <_printf_float+0x31a>
 800442a:	e68c      	b.n	8004146 <_printf_float+0xb6>
 800442c:	464b      	mov	r3, r9
 800442e:	4631      	mov	r1, r6
 8004430:	4628      	mov	r0, r5
 8004432:	eb08 020a 	add.w	r2, r8, sl
 8004436:	47b8      	blx	r7
 8004438:	3001      	adds	r0, #1
 800443a:	d1c2      	bne.n	80043c2 <_printf_float+0x332>
 800443c:	e683      	b.n	8004146 <_printf_float+0xb6>
 800443e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004440:	2a01      	cmp	r2, #1
 8004442:	dc01      	bgt.n	8004448 <_printf_float+0x3b8>
 8004444:	07db      	lsls	r3, r3, #31
 8004446:	d537      	bpl.n	80044b8 <_printf_float+0x428>
 8004448:	2301      	movs	r3, #1
 800444a:	4642      	mov	r2, r8
 800444c:	4631      	mov	r1, r6
 800444e:	4628      	mov	r0, r5
 8004450:	47b8      	blx	r7
 8004452:	3001      	adds	r0, #1
 8004454:	f43f ae77 	beq.w	8004146 <_printf_float+0xb6>
 8004458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800445c:	4631      	mov	r1, r6
 800445e:	4628      	mov	r0, r5
 8004460:	47b8      	blx	r7
 8004462:	3001      	adds	r0, #1
 8004464:	f43f ae6f 	beq.w	8004146 <_printf_float+0xb6>
 8004468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800446c:	2200      	movs	r2, #0
 800446e:	2300      	movs	r3, #0
 8004470:	f7fc fab2 	bl	80009d8 <__aeabi_dcmpeq>
 8004474:	b9d8      	cbnz	r0, 80044ae <_printf_float+0x41e>
 8004476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004478:	f108 0201 	add.w	r2, r8, #1
 800447c:	3b01      	subs	r3, #1
 800447e:	4631      	mov	r1, r6
 8004480:	4628      	mov	r0, r5
 8004482:	47b8      	blx	r7
 8004484:	3001      	adds	r0, #1
 8004486:	d10e      	bne.n	80044a6 <_printf_float+0x416>
 8004488:	e65d      	b.n	8004146 <_printf_float+0xb6>
 800448a:	2301      	movs	r3, #1
 800448c:	464a      	mov	r2, r9
 800448e:	4631      	mov	r1, r6
 8004490:	4628      	mov	r0, r5
 8004492:	47b8      	blx	r7
 8004494:	3001      	adds	r0, #1
 8004496:	f43f ae56 	beq.w	8004146 <_printf_float+0xb6>
 800449a:	f108 0801 	add.w	r8, r8, #1
 800449e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044a0:	3b01      	subs	r3, #1
 80044a2:	4543      	cmp	r3, r8
 80044a4:	dcf1      	bgt.n	800448a <_printf_float+0x3fa>
 80044a6:	4653      	mov	r3, sl
 80044a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80044ac:	e6e0      	b.n	8004270 <_printf_float+0x1e0>
 80044ae:	f04f 0800 	mov.w	r8, #0
 80044b2:	f104 091a 	add.w	r9, r4, #26
 80044b6:	e7f2      	b.n	800449e <_printf_float+0x40e>
 80044b8:	2301      	movs	r3, #1
 80044ba:	4642      	mov	r2, r8
 80044bc:	e7df      	b.n	800447e <_printf_float+0x3ee>
 80044be:	2301      	movs	r3, #1
 80044c0:	464a      	mov	r2, r9
 80044c2:	4631      	mov	r1, r6
 80044c4:	4628      	mov	r0, r5
 80044c6:	47b8      	blx	r7
 80044c8:	3001      	adds	r0, #1
 80044ca:	f43f ae3c 	beq.w	8004146 <_printf_float+0xb6>
 80044ce:	f108 0801 	add.w	r8, r8, #1
 80044d2:	68e3      	ldr	r3, [r4, #12]
 80044d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80044d6:	1a5b      	subs	r3, r3, r1
 80044d8:	4543      	cmp	r3, r8
 80044da:	dcf0      	bgt.n	80044be <_printf_float+0x42e>
 80044dc:	e6fd      	b.n	80042da <_printf_float+0x24a>
 80044de:	f04f 0800 	mov.w	r8, #0
 80044e2:	f104 0919 	add.w	r9, r4, #25
 80044e6:	e7f4      	b.n	80044d2 <_printf_float+0x442>

080044e8 <_printf_common>:
 80044e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ec:	4616      	mov	r6, r2
 80044ee:	4699      	mov	r9, r3
 80044f0:	688a      	ldr	r2, [r1, #8]
 80044f2:	690b      	ldr	r3, [r1, #16]
 80044f4:	4607      	mov	r7, r0
 80044f6:	4293      	cmp	r3, r2
 80044f8:	bfb8      	it	lt
 80044fa:	4613      	movlt	r3, r2
 80044fc:	6033      	str	r3, [r6, #0]
 80044fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004502:	460c      	mov	r4, r1
 8004504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004508:	b10a      	cbz	r2, 800450e <_printf_common+0x26>
 800450a:	3301      	adds	r3, #1
 800450c:	6033      	str	r3, [r6, #0]
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	0699      	lsls	r1, r3, #26
 8004512:	bf42      	ittt	mi
 8004514:	6833      	ldrmi	r3, [r6, #0]
 8004516:	3302      	addmi	r3, #2
 8004518:	6033      	strmi	r3, [r6, #0]
 800451a:	6825      	ldr	r5, [r4, #0]
 800451c:	f015 0506 	ands.w	r5, r5, #6
 8004520:	d106      	bne.n	8004530 <_printf_common+0x48>
 8004522:	f104 0a19 	add.w	sl, r4, #25
 8004526:	68e3      	ldr	r3, [r4, #12]
 8004528:	6832      	ldr	r2, [r6, #0]
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	42ab      	cmp	r3, r5
 800452e:	dc28      	bgt.n	8004582 <_printf_common+0x9a>
 8004530:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004534:	1e13      	subs	r3, r2, #0
 8004536:	6822      	ldr	r2, [r4, #0]
 8004538:	bf18      	it	ne
 800453a:	2301      	movne	r3, #1
 800453c:	0692      	lsls	r2, r2, #26
 800453e:	d42d      	bmi.n	800459c <_printf_common+0xb4>
 8004540:	4649      	mov	r1, r9
 8004542:	4638      	mov	r0, r7
 8004544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004548:	47c0      	blx	r8
 800454a:	3001      	adds	r0, #1
 800454c:	d020      	beq.n	8004590 <_printf_common+0xa8>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	68e5      	ldr	r5, [r4, #12]
 8004552:	f003 0306 	and.w	r3, r3, #6
 8004556:	2b04      	cmp	r3, #4
 8004558:	bf18      	it	ne
 800455a:	2500      	movne	r5, #0
 800455c:	6832      	ldr	r2, [r6, #0]
 800455e:	f04f 0600 	mov.w	r6, #0
 8004562:	68a3      	ldr	r3, [r4, #8]
 8004564:	bf08      	it	eq
 8004566:	1aad      	subeq	r5, r5, r2
 8004568:	6922      	ldr	r2, [r4, #16]
 800456a:	bf08      	it	eq
 800456c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004570:	4293      	cmp	r3, r2
 8004572:	bfc4      	itt	gt
 8004574:	1a9b      	subgt	r3, r3, r2
 8004576:	18ed      	addgt	r5, r5, r3
 8004578:	341a      	adds	r4, #26
 800457a:	42b5      	cmp	r5, r6
 800457c:	d11a      	bne.n	80045b4 <_printf_common+0xcc>
 800457e:	2000      	movs	r0, #0
 8004580:	e008      	b.n	8004594 <_printf_common+0xac>
 8004582:	2301      	movs	r3, #1
 8004584:	4652      	mov	r2, sl
 8004586:	4649      	mov	r1, r9
 8004588:	4638      	mov	r0, r7
 800458a:	47c0      	blx	r8
 800458c:	3001      	adds	r0, #1
 800458e:	d103      	bne.n	8004598 <_printf_common+0xb0>
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004598:	3501      	adds	r5, #1
 800459a:	e7c4      	b.n	8004526 <_printf_common+0x3e>
 800459c:	2030      	movs	r0, #48	; 0x30
 800459e:	18e1      	adds	r1, r4, r3
 80045a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045aa:	4422      	add	r2, r4
 80045ac:	3302      	adds	r3, #2
 80045ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045b2:	e7c5      	b.n	8004540 <_printf_common+0x58>
 80045b4:	2301      	movs	r3, #1
 80045b6:	4622      	mov	r2, r4
 80045b8:	4649      	mov	r1, r9
 80045ba:	4638      	mov	r0, r7
 80045bc:	47c0      	blx	r8
 80045be:	3001      	adds	r0, #1
 80045c0:	d0e6      	beq.n	8004590 <_printf_common+0xa8>
 80045c2:	3601      	adds	r6, #1
 80045c4:	e7d9      	b.n	800457a <_printf_common+0x92>
	...

080045c8 <_printf_i>:
 80045c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045cc:	7e0f      	ldrb	r7, [r1, #24]
 80045ce:	4691      	mov	r9, r2
 80045d0:	2f78      	cmp	r7, #120	; 0x78
 80045d2:	4680      	mov	r8, r0
 80045d4:	460c      	mov	r4, r1
 80045d6:	469a      	mov	sl, r3
 80045d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045de:	d807      	bhi.n	80045f0 <_printf_i+0x28>
 80045e0:	2f62      	cmp	r7, #98	; 0x62
 80045e2:	d80a      	bhi.n	80045fa <_printf_i+0x32>
 80045e4:	2f00      	cmp	r7, #0
 80045e6:	f000 80d9 	beq.w	800479c <_printf_i+0x1d4>
 80045ea:	2f58      	cmp	r7, #88	; 0x58
 80045ec:	f000 80a4 	beq.w	8004738 <_printf_i+0x170>
 80045f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045f8:	e03a      	b.n	8004670 <_printf_i+0xa8>
 80045fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045fe:	2b15      	cmp	r3, #21
 8004600:	d8f6      	bhi.n	80045f0 <_printf_i+0x28>
 8004602:	a101      	add	r1, pc, #4	; (adr r1, 8004608 <_printf_i+0x40>)
 8004604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004608:	08004661 	.word	0x08004661
 800460c:	08004675 	.word	0x08004675
 8004610:	080045f1 	.word	0x080045f1
 8004614:	080045f1 	.word	0x080045f1
 8004618:	080045f1 	.word	0x080045f1
 800461c:	080045f1 	.word	0x080045f1
 8004620:	08004675 	.word	0x08004675
 8004624:	080045f1 	.word	0x080045f1
 8004628:	080045f1 	.word	0x080045f1
 800462c:	080045f1 	.word	0x080045f1
 8004630:	080045f1 	.word	0x080045f1
 8004634:	08004783 	.word	0x08004783
 8004638:	080046a5 	.word	0x080046a5
 800463c:	08004765 	.word	0x08004765
 8004640:	080045f1 	.word	0x080045f1
 8004644:	080045f1 	.word	0x080045f1
 8004648:	080047a5 	.word	0x080047a5
 800464c:	080045f1 	.word	0x080045f1
 8004650:	080046a5 	.word	0x080046a5
 8004654:	080045f1 	.word	0x080045f1
 8004658:	080045f1 	.word	0x080045f1
 800465c:	0800476d 	.word	0x0800476d
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	1d1a      	adds	r2, r3, #4
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	602a      	str	r2, [r5, #0]
 8004668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800466c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004670:	2301      	movs	r3, #1
 8004672:	e0a4      	b.n	80047be <_printf_i+0x1f6>
 8004674:	6820      	ldr	r0, [r4, #0]
 8004676:	6829      	ldr	r1, [r5, #0]
 8004678:	0606      	lsls	r6, r0, #24
 800467a:	f101 0304 	add.w	r3, r1, #4
 800467e:	d50a      	bpl.n	8004696 <_printf_i+0xce>
 8004680:	680e      	ldr	r6, [r1, #0]
 8004682:	602b      	str	r3, [r5, #0]
 8004684:	2e00      	cmp	r6, #0
 8004686:	da03      	bge.n	8004690 <_printf_i+0xc8>
 8004688:	232d      	movs	r3, #45	; 0x2d
 800468a:	4276      	negs	r6, r6
 800468c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004690:	230a      	movs	r3, #10
 8004692:	485e      	ldr	r0, [pc, #376]	; (800480c <_printf_i+0x244>)
 8004694:	e019      	b.n	80046ca <_printf_i+0x102>
 8004696:	680e      	ldr	r6, [r1, #0]
 8004698:	f010 0f40 	tst.w	r0, #64	; 0x40
 800469c:	602b      	str	r3, [r5, #0]
 800469e:	bf18      	it	ne
 80046a0:	b236      	sxthne	r6, r6
 80046a2:	e7ef      	b.n	8004684 <_printf_i+0xbc>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	6820      	ldr	r0, [r4, #0]
 80046a8:	1d19      	adds	r1, r3, #4
 80046aa:	6029      	str	r1, [r5, #0]
 80046ac:	0601      	lsls	r1, r0, #24
 80046ae:	d501      	bpl.n	80046b4 <_printf_i+0xec>
 80046b0:	681e      	ldr	r6, [r3, #0]
 80046b2:	e002      	b.n	80046ba <_printf_i+0xf2>
 80046b4:	0646      	lsls	r6, r0, #25
 80046b6:	d5fb      	bpl.n	80046b0 <_printf_i+0xe8>
 80046b8:	881e      	ldrh	r6, [r3, #0]
 80046ba:	2f6f      	cmp	r7, #111	; 0x6f
 80046bc:	bf0c      	ite	eq
 80046be:	2308      	moveq	r3, #8
 80046c0:	230a      	movne	r3, #10
 80046c2:	4852      	ldr	r0, [pc, #328]	; (800480c <_printf_i+0x244>)
 80046c4:	2100      	movs	r1, #0
 80046c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046ca:	6865      	ldr	r5, [r4, #4]
 80046cc:	2d00      	cmp	r5, #0
 80046ce:	bfa8      	it	ge
 80046d0:	6821      	ldrge	r1, [r4, #0]
 80046d2:	60a5      	str	r5, [r4, #8]
 80046d4:	bfa4      	itt	ge
 80046d6:	f021 0104 	bicge.w	r1, r1, #4
 80046da:	6021      	strge	r1, [r4, #0]
 80046dc:	b90e      	cbnz	r6, 80046e2 <_printf_i+0x11a>
 80046de:	2d00      	cmp	r5, #0
 80046e0:	d04d      	beq.n	800477e <_printf_i+0x1b6>
 80046e2:	4615      	mov	r5, r2
 80046e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80046e8:	fb03 6711 	mls	r7, r3, r1, r6
 80046ec:	5dc7      	ldrb	r7, [r0, r7]
 80046ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046f2:	4637      	mov	r7, r6
 80046f4:	42bb      	cmp	r3, r7
 80046f6:	460e      	mov	r6, r1
 80046f8:	d9f4      	bls.n	80046e4 <_printf_i+0x11c>
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d10b      	bne.n	8004716 <_printf_i+0x14e>
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	07de      	lsls	r6, r3, #31
 8004702:	d508      	bpl.n	8004716 <_printf_i+0x14e>
 8004704:	6923      	ldr	r3, [r4, #16]
 8004706:	6861      	ldr	r1, [r4, #4]
 8004708:	4299      	cmp	r1, r3
 800470a:	bfde      	ittt	le
 800470c:	2330      	movle	r3, #48	; 0x30
 800470e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004712:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004716:	1b52      	subs	r2, r2, r5
 8004718:	6122      	str	r2, [r4, #16]
 800471a:	464b      	mov	r3, r9
 800471c:	4621      	mov	r1, r4
 800471e:	4640      	mov	r0, r8
 8004720:	f8cd a000 	str.w	sl, [sp]
 8004724:	aa03      	add	r2, sp, #12
 8004726:	f7ff fedf 	bl	80044e8 <_printf_common>
 800472a:	3001      	adds	r0, #1
 800472c:	d14c      	bne.n	80047c8 <_printf_i+0x200>
 800472e:	f04f 30ff 	mov.w	r0, #4294967295
 8004732:	b004      	add	sp, #16
 8004734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004738:	4834      	ldr	r0, [pc, #208]	; (800480c <_printf_i+0x244>)
 800473a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800473e:	6829      	ldr	r1, [r5, #0]
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	f851 6b04 	ldr.w	r6, [r1], #4
 8004746:	6029      	str	r1, [r5, #0]
 8004748:	061d      	lsls	r5, r3, #24
 800474a:	d514      	bpl.n	8004776 <_printf_i+0x1ae>
 800474c:	07df      	lsls	r7, r3, #31
 800474e:	bf44      	itt	mi
 8004750:	f043 0320 	orrmi.w	r3, r3, #32
 8004754:	6023      	strmi	r3, [r4, #0]
 8004756:	b91e      	cbnz	r6, 8004760 <_printf_i+0x198>
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	f023 0320 	bic.w	r3, r3, #32
 800475e:	6023      	str	r3, [r4, #0]
 8004760:	2310      	movs	r3, #16
 8004762:	e7af      	b.n	80046c4 <_printf_i+0xfc>
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	f043 0320 	orr.w	r3, r3, #32
 800476a:	6023      	str	r3, [r4, #0]
 800476c:	2378      	movs	r3, #120	; 0x78
 800476e:	4828      	ldr	r0, [pc, #160]	; (8004810 <_printf_i+0x248>)
 8004770:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004774:	e7e3      	b.n	800473e <_printf_i+0x176>
 8004776:	0659      	lsls	r1, r3, #25
 8004778:	bf48      	it	mi
 800477a:	b2b6      	uxthmi	r6, r6
 800477c:	e7e6      	b.n	800474c <_printf_i+0x184>
 800477e:	4615      	mov	r5, r2
 8004780:	e7bb      	b.n	80046fa <_printf_i+0x132>
 8004782:	682b      	ldr	r3, [r5, #0]
 8004784:	6826      	ldr	r6, [r4, #0]
 8004786:	1d18      	adds	r0, r3, #4
 8004788:	6961      	ldr	r1, [r4, #20]
 800478a:	6028      	str	r0, [r5, #0]
 800478c:	0635      	lsls	r5, r6, #24
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	d501      	bpl.n	8004796 <_printf_i+0x1ce>
 8004792:	6019      	str	r1, [r3, #0]
 8004794:	e002      	b.n	800479c <_printf_i+0x1d4>
 8004796:	0670      	lsls	r0, r6, #25
 8004798:	d5fb      	bpl.n	8004792 <_printf_i+0x1ca>
 800479a:	8019      	strh	r1, [r3, #0]
 800479c:	2300      	movs	r3, #0
 800479e:	4615      	mov	r5, r2
 80047a0:	6123      	str	r3, [r4, #16]
 80047a2:	e7ba      	b.n	800471a <_printf_i+0x152>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	2100      	movs	r1, #0
 80047a8:	1d1a      	adds	r2, r3, #4
 80047aa:	602a      	str	r2, [r5, #0]
 80047ac:	681d      	ldr	r5, [r3, #0]
 80047ae:	6862      	ldr	r2, [r4, #4]
 80047b0:	4628      	mov	r0, r5
 80047b2:	f000 feeb 	bl	800558c <memchr>
 80047b6:	b108      	cbz	r0, 80047bc <_printf_i+0x1f4>
 80047b8:	1b40      	subs	r0, r0, r5
 80047ba:	6060      	str	r0, [r4, #4]
 80047bc:	6863      	ldr	r3, [r4, #4]
 80047be:	6123      	str	r3, [r4, #16]
 80047c0:	2300      	movs	r3, #0
 80047c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047c6:	e7a8      	b.n	800471a <_printf_i+0x152>
 80047c8:	462a      	mov	r2, r5
 80047ca:	4649      	mov	r1, r9
 80047cc:	4640      	mov	r0, r8
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	47d0      	blx	sl
 80047d2:	3001      	adds	r0, #1
 80047d4:	d0ab      	beq.n	800472e <_printf_i+0x166>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	079b      	lsls	r3, r3, #30
 80047da:	d413      	bmi.n	8004804 <_printf_i+0x23c>
 80047dc:	68e0      	ldr	r0, [r4, #12]
 80047de:	9b03      	ldr	r3, [sp, #12]
 80047e0:	4298      	cmp	r0, r3
 80047e2:	bfb8      	it	lt
 80047e4:	4618      	movlt	r0, r3
 80047e6:	e7a4      	b.n	8004732 <_printf_i+0x16a>
 80047e8:	2301      	movs	r3, #1
 80047ea:	4632      	mov	r2, r6
 80047ec:	4649      	mov	r1, r9
 80047ee:	4640      	mov	r0, r8
 80047f0:	47d0      	blx	sl
 80047f2:	3001      	adds	r0, #1
 80047f4:	d09b      	beq.n	800472e <_printf_i+0x166>
 80047f6:	3501      	adds	r5, #1
 80047f8:	68e3      	ldr	r3, [r4, #12]
 80047fa:	9903      	ldr	r1, [sp, #12]
 80047fc:	1a5b      	subs	r3, r3, r1
 80047fe:	42ab      	cmp	r3, r5
 8004800:	dcf2      	bgt.n	80047e8 <_printf_i+0x220>
 8004802:	e7eb      	b.n	80047dc <_printf_i+0x214>
 8004804:	2500      	movs	r5, #0
 8004806:	f104 0619 	add.w	r6, r4, #25
 800480a:	e7f5      	b.n	80047f8 <_printf_i+0x230>
 800480c:	08006dba 	.word	0x08006dba
 8004810:	08006dcb 	.word	0x08006dcb

08004814 <sniprintf>:
 8004814:	b40c      	push	{r2, r3}
 8004816:	b530      	push	{r4, r5, lr}
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <sniprintf+0x64>)
 800481a:	1e0c      	subs	r4, r1, #0
 800481c:	681d      	ldr	r5, [r3, #0]
 800481e:	b09d      	sub	sp, #116	; 0x74
 8004820:	da08      	bge.n	8004834 <sniprintf+0x20>
 8004822:	238b      	movs	r3, #139	; 0x8b
 8004824:	f04f 30ff 	mov.w	r0, #4294967295
 8004828:	602b      	str	r3, [r5, #0]
 800482a:	b01d      	add	sp, #116	; 0x74
 800482c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004830:	b002      	add	sp, #8
 8004832:	4770      	bx	lr
 8004834:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004838:	f8ad 3014 	strh.w	r3, [sp, #20]
 800483c:	bf0c      	ite	eq
 800483e:	4623      	moveq	r3, r4
 8004840:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004844:	9304      	str	r3, [sp, #16]
 8004846:	9307      	str	r3, [sp, #28]
 8004848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800484c:	9002      	str	r0, [sp, #8]
 800484e:	9006      	str	r0, [sp, #24]
 8004850:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004854:	4628      	mov	r0, r5
 8004856:	ab21      	add	r3, sp, #132	; 0x84
 8004858:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800485a:	a902      	add	r1, sp, #8
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	f001 fb7f 	bl	8005f60 <_svfiprintf_r>
 8004862:	1c43      	adds	r3, r0, #1
 8004864:	bfbc      	itt	lt
 8004866:	238b      	movlt	r3, #139	; 0x8b
 8004868:	602b      	strlt	r3, [r5, #0]
 800486a:	2c00      	cmp	r4, #0
 800486c:	d0dd      	beq.n	800482a <sniprintf+0x16>
 800486e:	2200      	movs	r2, #0
 8004870:	9b02      	ldr	r3, [sp, #8]
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e7d9      	b.n	800482a <sniprintf+0x16>
 8004876:	bf00      	nop
 8004878:	20000014 	.word	0x20000014

0800487c <quorem>:
 800487c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004880:	6903      	ldr	r3, [r0, #16]
 8004882:	690c      	ldr	r4, [r1, #16]
 8004884:	4607      	mov	r7, r0
 8004886:	42a3      	cmp	r3, r4
 8004888:	f2c0 8082 	blt.w	8004990 <quorem+0x114>
 800488c:	3c01      	subs	r4, #1
 800488e:	f100 0514 	add.w	r5, r0, #20
 8004892:	f101 0814 	add.w	r8, r1, #20
 8004896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800489a:	9301      	str	r3, [sp, #4]
 800489c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80048a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048a4:	3301      	adds	r3, #1
 80048a6:	429a      	cmp	r2, r3
 80048a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80048ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80048b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80048b4:	d331      	bcc.n	800491a <quorem+0x9e>
 80048b6:	f04f 0e00 	mov.w	lr, #0
 80048ba:	4640      	mov	r0, r8
 80048bc:	46ac      	mov	ip, r5
 80048be:	46f2      	mov	sl, lr
 80048c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80048c4:	b293      	uxth	r3, r2
 80048c6:	fb06 e303 	mla	r3, r6, r3, lr
 80048ca:	0c12      	lsrs	r2, r2, #16
 80048cc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	fb06 e202 	mla	r2, r6, r2, lr
 80048d6:	ebaa 0303 	sub.w	r3, sl, r3
 80048da:	f8dc a000 	ldr.w	sl, [ip]
 80048de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80048e2:	fa1f fa8a 	uxth.w	sl, sl
 80048e6:	4453      	add	r3, sl
 80048e8:	f8dc a000 	ldr.w	sl, [ip]
 80048ec:	b292      	uxth	r2, r2
 80048ee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80048f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048fc:	4581      	cmp	r9, r0
 80048fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004902:	f84c 3b04 	str.w	r3, [ip], #4
 8004906:	d2db      	bcs.n	80048c0 <quorem+0x44>
 8004908:	f855 300b 	ldr.w	r3, [r5, fp]
 800490c:	b92b      	cbnz	r3, 800491a <quorem+0x9e>
 800490e:	9b01      	ldr	r3, [sp, #4]
 8004910:	3b04      	subs	r3, #4
 8004912:	429d      	cmp	r5, r3
 8004914:	461a      	mov	r2, r3
 8004916:	d32f      	bcc.n	8004978 <quorem+0xfc>
 8004918:	613c      	str	r4, [r7, #16]
 800491a:	4638      	mov	r0, r7
 800491c:	f001 f8d0 	bl	8005ac0 <__mcmp>
 8004920:	2800      	cmp	r0, #0
 8004922:	db25      	blt.n	8004970 <quorem+0xf4>
 8004924:	4628      	mov	r0, r5
 8004926:	f04f 0c00 	mov.w	ip, #0
 800492a:	3601      	adds	r6, #1
 800492c:	f858 1b04 	ldr.w	r1, [r8], #4
 8004930:	f8d0 e000 	ldr.w	lr, [r0]
 8004934:	b28b      	uxth	r3, r1
 8004936:	ebac 0303 	sub.w	r3, ip, r3
 800493a:	fa1f f28e 	uxth.w	r2, lr
 800493e:	4413      	add	r3, r2
 8004940:	0c0a      	lsrs	r2, r1, #16
 8004942:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004946:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800494a:	b29b      	uxth	r3, r3
 800494c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004950:	45c1      	cmp	r9, r8
 8004952:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004956:	f840 3b04 	str.w	r3, [r0], #4
 800495a:	d2e7      	bcs.n	800492c <quorem+0xb0>
 800495c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004960:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004964:	b922      	cbnz	r2, 8004970 <quorem+0xf4>
 8004966:	3b04      	subs	r3, #4
 8004968:	429d      	cmp	r5, r3
 800496a:	461a      	mov	r2, r3
 800496c:	d30a      	bcc.n	8004984 <quorem+0x108>
 800496e:	613c      	str	r4, [r7, #16]
 8004970:	4630      	mov	r0, r6
 8004972:	b003      	add	sp, #12
 8004974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	3b04      	subs	r3, #4
 800497c:	2a00      	cmp	r2, #0
 800497e:	d1cb      	bne.n	8004918 <quorem+0x9c>
 8004980:	3c01      	subs	r4, #1
 8004982:	e7c6      	b.n	8004912 <quorem+0x96>
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	3b04      	subs	r3, #4
 8004988:	2a00      	cmp	r2, #0
 800498a:	d1f0      	bne.n	800496e <quorem+0xf2>
 800498c:	3c01      	subs	r4, #1
 800498e:	e7eb      	b.n	8004968 <quorem+0xec>
 8004990:	2000      	movs	r0, #0
 8004992:	e7ee      	b.n	8004972 <quorem+0xf6>
 8004994:	0000      	movs	r0, r0
	...

08004998 <_dtoa_r>:
 8004998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	4616      	mov	r6, r2
 800499e:	461f      	mov	r7, r3
 80049a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80049a2:	b099      	sub	sp, #100	; 0x64
 80049a4:	4605      	mov	r5, r0
 80049a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80049aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80049ae:	b974      	cbnz	r4, 80049ce <_dtoa_r+0x36>
 80049b0:	2010      	movs	r0, #16
 80049b2:	f000 fde3 	bl	800557c <malloc>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6268      	str	r0, [r5, #36]	; 0x24
 80049ba:	b920      	cbnz	r0, 80049c6 <_dtoa_r+0x2e>
 80049bc:	21ea      	movs	r1, #234	; 0xea
 80049be:	4ba8      	ldr	r3, [pc, #672]	; (8004c60 <_dtoa_r+0x2c8>)
 80049c0:	48a8      	ldr	r0, [pc, #672]	; (8004c64 <_dtoa_r+0x2cc>)
 80049c2:	f001 fbdd 	bl	8006180 <__assert_func>
 80049c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80049ca:	6004      	str	r4, [r0, #0]
 80049cc:	60c4      	str	r4, [r0, #12]
 80049ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049d0:	6819      	ldr	r1, [r3, #0]
 80049d2:	b151      	cbz	r1, 80049ea <_dtoa_r+0x52>
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	2301      	movs	r3, #1
 80049d8:	4093      	lsls	r3, r2
 80049da:	604a      	str	r2, [r1, #4]
 80049dc:	608b      	str	r3, [r1, #8]
 80049de:	4628      	mov	r0, r5
 80049e0:	f000 fe30 	bl	8005644 <_Bfree>
 80049e4:	2200      	movs	r2, #0
 80049e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	1e3b      	subs	r3, r7, #0
 80049ec:	bfaf      	iteee	ge
 80049ee:	2300      	movge	r3, #0
 80049f0:	2201      	movlt	r2, #1
 80049f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80049f6:	9305      	strlt	r3, [sp, #20]
 80049f8:	bfa8      	it	ge
 80049fa:	f8c8 3000 	strge.w	r3, [r8]
 80049fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004a02:	4b99      	ldr	r3, [pc, #612]	; (8004c68 <_dtoa_r+0x2d0>)
 8004a04:	bfb8      	it	lt
 8004a06:	f8c8 2000 	strlt.w	r2, [r8]
 8004a0a:	ea33 0309 	bics.w	r3, r3, r9
 8004a0e:	d119      	bne.n	8004a44 <_dtoa_r+0xac>
 8004a10:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a1c:	4333      	orrs	r3, r6
 8004a1e:	f000 857f 	beq.w	8005520 <_dtoa_r+0xb88>
 8004a22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a24:	b953      	cbnz	r3, 8004a3c <_dtoa_r+0xa4>
 8004a26:	4b91      	ldr	r3, [pc, #580]	; (8004c6c <_dtoa_r+0x2d4>)
 8004a28:	e022      	b.n	8004a70 <_dtoa_r+0xd8>
 8004a2a:	4b91      	ldr	r3, [pc, #580]	; (8004c70 <_dtoa_r+0x2d8>)
 8004a2c:	9303      	str	r3, [sp, #12]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	9803      	ldr	r0, [sp, #12]
 8004a36:	b019      	add	sp, #100	; 0x64
 8004a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a3c:	4b8b      	ldr	r3, [pc, #556]	; (8004c6c <_dtoa_r+0x2d4>)
 8004a3e:	9303      	str	r3, [sp, #12]
 8004a40:	3303      	adds	r3, #3
 8004a42:	e7f5      	b.n	8004a30 <_dtoa_r+0x98>
 8004a44:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a48:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004a4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a50:	2200      	movs	r2, #0
 8004a52:	2300      	movs	r3, #0
 8004a54:	f7fb ffc0 	bl	80009d8 <__aeabi_dcmpeq>
 8004a58:	4680      	mov	r8, r0
 8004a5a:	b158      	cbz	r0, 8004a74 <_dtoa_r+0xdc>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 8558 	beq.w	800551a <_dtoa_r+0xb82>
 8004a6a:	4882      	ldr	r0, [pc, #520]	; (8004c74 <_dtoa_r+0x2dc>)
 8004a6c:	6018      	str	r0, [r3, #0]
 8004a6e:	1e43      	subs	r3, r0, #1
 8004a70:	9303      	str	r3, [sp, #12]
 8004a72:	e7df      	b.n	8004a34 <_dtoa_r+0x9c>
 8004a74:	ab16      	add	r3, sp, #88	; 0x58
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	ab17      	add	r3, sp, #92	; 0x5c
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a82:	f001 f8c5 	bl	8005c10 <__d2b>
 8004a86:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004a8a:	4683      	mov	fp, r0
 8004a8c:	2c00      	cmp	r4, #0
 8004a8e:	d07f      	beq.n	8004b90 <_dtoa_r+0x1f8>
 8004a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a96:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004a9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a9e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004aa2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004aa6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004aaa:	2200      	movs	r2, #0
 8004aac:	4b72      	ldr	r3, [pc, #456]	; (8004c78 <_dtoa_r+0x2e0>)
 8004aae:	f7fb fb73 	bl	8000198 <__aeabi_dsub>
 8004ab2:	a365      	add	r3, pc, #404	; (adr r3, 8004c48 <_dtoa_r+0x2b0>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f7fb fd26 	bl	8000508 <__aeabi_dmul>
 8004abc:	a364      	add	r3, pc, #400	; (adr r3, 8004c50 <_dtoa_r+0x2b8>)
 8004abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac2:	f7fb fb6b 	bl	800019c <__adddf3>
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	4620      	mov	r0, r4
 8004aca:	460f      	mov	r7, r1
 8004acc:	f7fb fcb2 	bl	8000434 <__aeabi_i2d>
 8004ad0:	a361      	add	r3, pc, #388	; (adr r3, 8004c58 <_dtoa_r+0x2c0>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f7fb fd17 	bl	8000508 <__aeabi_dmul>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4630      	mov	r0, r6
 8004ae0:	4639      	mov	r1, r7
 8004ae2:	f7fb fb5b 	bl	800019c <__adddf3>
 8004ae6:	4606      	mov	r6, r0
 8004ae8:	460f      	mov	r7, r1
 8004aea:	f7fb ffbd 	bl	8000a68 <__aeabi_d2iz>
 8004aee:	2200      	movs	r2, #0
 8004af0:	4682      	mov	sl, r0
 8004af2:	2300      	movs	r3, #0
 8004af4:	4630      	mov	r0, r6
 8004af6:	4639      	mov	r1, r7
 8004af8:	f7fb ff78 	bl	80009ec <__aeabi_dcmplt>
 8004afc:	b148      	cbz	r0, 8004b12 <_dtoa_r+0x17a>
 8004afe:	4650      	mov	r0, sl
 8004b00:	f7fb fc98 	bl	8000434 <__aeabi_i2d>
 8004b04:	4632      	mov	r2, r6
 8004b06:	463b      	mov	r3, r7
 8004b08:	f7fb ff66 	bl	80009d8 <__aeabi_dcmpeq>
 8004b0c:	b908      	cbnz	r0, 8004b12 <_dtoa_r+0x17a>
 8004b0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b12:	f1ba 0f16 	cmp.w	sl, #22
 8004b16:	d858      	bhi.n	8004bca <_dtoa_r+0x232>
 8004b18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b1c:	4b57      	ldr	r3, [pc, #348]	; (8004c7c <_dtoa_r+0x2e4>)
 8004b1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	f7fb ff61 	bl	80009ec <__aeabi_dcmplt>
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d04f      	beq.n	8004bce <_dtoa_r+0x236>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b34:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004b38:	1b1c      	subs	r4, r3, r4
 8004b3a:	1e63      	subs	r3, r4, #1
 8004b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b3e:	bf49      	itett	mi
 8004b40:	f1c4 0301 	rsbmi	r3, r4, #1
 8004b44:	2300      	movpl	r3, #0
 8004b46:	9306      	strmi	r3, [sp, #24]
 8004b48:	2300      	movmi	r3, #0
 8004b4a:	bf54      	ite	pl
 8004b4c:	9306      	strpl	r3, [sp, #24]
 8004b4e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004b50:	f1ba 0f00 	cmp.w	sl, #0
 8004b54:	db3d      	blt.n	8004bd2 <_dtoa_r+0x23a>
 8004b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b58:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004b5c:	4453      	add	r3, sl
 8004b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b60:	2300      	movs	r3, #0
 8004b62:	930a      	str	r3, [sp, #40]	; 0x28
 8004b64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b66:	2b09      	cmp	r3, #9
 8004b68:	f200 808c 	bhi.w	8004c84 <_dtoa_r+0x2ec>
 8004b6c:	2b05      	cmp	r3, #5
 8004b6e:	bfc4      	itt	gt
 8004b70:	3b04      	subgt	r3, #4
 8004b72:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004b74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b76:	bfc8      	it	gt
 8004b78:	2400      	movgt	r4, #0
 8004b7a:	f1a3 0302 	sub.w	r3, r3, #2
 8004b7e:	bfd8      	it	le
 8004b80:	2401      	movle	r4, #1
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	f200 808a 	bhi.w	8004c9c <_dtoa_r+0x304>
 8004b88:	e8df f003 	tbb	[pc, r3]
 8004b8c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004b90:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004b94:	441c      	add	r4, r3
 8004b96:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	bfc3      	ittte	gt
 8004b9e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ba2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004ba6:	fa09 f303 	lslgt.w	r3, r9, r3
 8004baa:	f1c3 0320 	rsble	r3, r3, #32
 8004bae:	bfc6      	itte	gt
 8004bb0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004bb4:	4318      	orrgt	r0, r3
 8004bb6:	fa06 f003 	lslle.w	r0, r6, r3
 8004bba:	f7fb fc2b 	bl	8000414 <__aeabi_ui2d>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004bc4:	3c01      	subs	r4, #1
 8004bc6:	9313      	str	r3, [sp, #76]	; 0x4c
 8004bc8:	e76f      	b.n	8004aaa <_dtoa_r+0x112>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e7b2      	b.n	8004b34 <_dtoa_r+0x19c>
 8004bce:	900f      	str	r0, [sp, #60]	; 0x3c
 8004bd0:	e7b1      	b.n	8004b36 <_dtoa_r+0x19e>
 8004bd2:	9b06      	ldr	r3, [sp, #24]
 8004bd4:	eba3 030a 	sub.w	r3, r3, sl
 8004bd8:	9306      	str	r3, [sp, #24]
 8004bda:	f1ca 0300 	rsb	r3, sl, #0
 8004bde:	930a      	str	r3, [sp, #40]	; 0x28
 8004be0:	2300      	movs	r3, #0
 8004be2:	930e      	str	r3, [sp, #56]	; 0x38
 8004be4:	e7be      	b.n	8004b64 <_dtoa_r+0x1cc>
 8004be6:	2300      	movs	r3, #0
 8004be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	dc58      	bgt.n	8004ca2 <_dtoa_r+0x30a>
 8004bf0:	f04f 0901 	mov.w	r9, #1
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	f8cd 9020 	str.w	r9, [sp, #32]
 8004bfa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004bfe:	2200      	movs	r2, #0
 8004c00:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c02:	6042      	str	r2, [r0, #4]
 8004c04:	2204      	movs	r2, #4
 8004c06:	f102 0614 	add.w	r6, r2, #20
 8004c0a:	429e      	cmp	r6, r3
 8004c0c:	6841      	ldr	r1, [r0, #4]
 8004c0e:	d94e      	bls.n	8004cae <_dtoa_r+0x316>
 8004c10:	4628      	mov	r0, r5
 8004c12:	f000 fcd7 	bl	80055c4 <_Balloc>
 8004c16:	9003      	str	r0, [sp, #12]
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	d14c      	bne.n	8004cb6 <_dtoa_r+0x31e>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c22:	4b17      	ldr	r3, [pc, #92]	; (8004c80 <_dtoa_r+0x2e8>)
 8004c24:	e6cc      	b.n	80049c0 <_dtoa_r+0x28>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e7de      	b.n	8004be8 <_dtoa_r+0x250>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c30:	eb0a 0903 	add.w	r9, sl, r3
 8004c34:	f109 0301 	add.w	r3, r9, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	9308      	str	r3, [sp, #32]
 8004c3c:	bfb8      	it	lt
 8004c3e:	2301      	movlt	r3, #1
 8004c40:	e7dd      	b.n	8004bfe <_dtoa_r+0x266>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e7f2      	b.n	8004c2c <_dtoa_r+0x294>
 8004c46:	bf00      	nop
 8004c48:	636f4361 	.word	0x636f4361
 8004c4c:	3fd287a7 	.word	0x3fd287a7
 8004c50:	8b60c8b3 	.word	0x8b60c8b3
 8004c54:	3fc68a28 	.word	0x3fc68a28
 8004c58:	509f79fb 	.word	0x509f79fb
 8004c5c:	3fd34413 	.word	0x3fd34413
 8004c60:	08006de9 	.word	0x08006de9
 8004c64:	08006e00 	.word	0x08006e00
 8004c68:	7ff00000 	.word	0x7ff00000
 8004c6c:	08006de5 	.word	0x08006de5
 8004c70:	08006ddc 	.word	0x08006ddc
 8004c74:	08006db9 	.word	0x08006db9
 8004c78:	3ff80000 	.word	0x3ff80000
 8004c7c:	08006ef0 	.word	0x08006ef0
 8004c80:	08006e5b 	.word	0x08006e5b
 8004c84:	2401      	movs	r4, #1
 8004c86:	2300      	movs	r3, #0
 8004c88:	940b      	str	r4, [sp, #44]	; 0x2c
 8004c8a:	9322      	str	r3, [sp, #136]	; 0x88
 8004c8c:	f04f 39ff 	mov.w	r9, #4294967295
 8004c90:	2200      	movs	r2, #0
 8004c92:	2312      	movs	r3, #18
 8004c94:	f8cd 9020 	str.w	r9, [sp, #32]
 8004c98:	9223      	str	r2, [sp, #140]	; 0x8c
 8004c9a:	e7b0      	b.n	8004bfe <_dtoa_r+0x266>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ca0:	e7f4      	b.n	8004c8c <_dtoa_r+0x2f4>
 8004ca2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	f8cd 9020 	str.w	r9, [sp, #32]
 8004cac:	e7a7      	b.n	8004bfe <_dtoa_r+0x266>
 8004cae:	3101      	adds	r1, #1
 8004cb0:	6041      	str	r1, [r0, #4]
 8004cb2:	0052      	lsls	r2, r2, #1
 8004cb4:	e7a7      	b.n	8004c06 <_dtoa_r+0x26e>
 8004cb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cb8:	9a03      	ldr	r2, [sp, #12]
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	9b08      	ldr	r3, [sp, #32]
 8004cbe:	2b0e      	cmp	r3, #14
 8004cc0:	f200 80a8 	bhi.w	8004e14 <_dtoa_r+0x47c>
 8004cc4:	2c00      	cmp	r4, #0
 8004cc6:	f000 80a5 	beq.w	8004e14 <_dtoa_r+0x47c>
 8004cca:	f1ba 0f00 	cmp.w	sl, #0
 8004cce:	dd34      	ble.n	8004d3a <_dtoa_r+0x3a2>
 8004cd0:	4a9a      	ldr	r2, [pc, #616]	; (8004f3c <_dtoa_r+0x5a4>)
 8004cd2:	f00a 030f 	and.w	r3, sl, #15
 8004cd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004cda:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004cde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ce2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004ce6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004cea:	d016      	beq.n	8004d1a <_dtoa_r+0x382>
 8004cec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cf0:	4b93      	ldr	r3, [pc, #588]	; (8004f40 <_dtoa_r+0x5a8>)
 8004cf2:	2703      	movs	r7, #3
 8004cf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004cf8:	f7fb fd30 	bl	800075c <__aeabi_ddiv>
 8004cfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d00:	f004 040f 	and.w	r4, r4, #15
 8004d04:	4e8e      	ldr	r6, [pc, #568]	; (8004f40 <_dtoa_r+0x5a8>)
 8004d06:	b954      	cbnz	r4, 8004d1e <_dtoa_r+0x386>
 8004d08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d10:	f7fb fd24 	bl	800075c <__aeabi_ddiv>
 8004d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d18:	e029      	b.n	8004d6e <_dtoa_r+0x3d6>
 8004d1a:	2702      	movs	r7, #2
 8004d1c:	e7f2      	b.n	8004d04 <_dtoa_r+0x36c>
 8004d1e:	07e1      	lsls	r1, r4, #31
 8004d20:	d508      	bpl.n	8004d34 <_dtoa_r+0x39c>
 8004d22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d2a:	f7fb fbed 	bl	8000508 <__aeabi_dmul>
 8004d2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d32:	3701      	adds	r7, #1
 8004d34:	1064      	asrs	r4, r4, #1
 8004d36:	3608      	adds	r6, #8
 8004d38:	e7e5      	b.n	8004d06 <_dtoa_r+0x36e>
 8004d3a:	f000 80a5 	beq.w	8004e88 <_dtoa_r+0x4f0>
 8004d3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d42:	f1ca 0400 	rsb	r4, sl, #0
 8004d46:	4b7d      	ldr	r3, [pc, #500]	; (8004f3c <_dtoa_r+0x5a4>)
 8004d48:	f004 020f 	and.w	r2, r4, #15
 8004d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f7fb fbd8 	bl	8000508 <__aeabi_dmul>
 8004d58:	2702      	movs	r7, #2
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d60:	4e77      	ldr	r6, [pc, #476]	; (8004f40 <_dtoa_r+0x5a8>)
 8004d62:	1124      	asrs	r4, r4, #4
 8004d64:	2c00      	cmp	r4, #0
 8004d66:	f040 8084 	bne.w	8004e72 <_dtoa_r+0x4da>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1d2      	bne.n	8004d14 <_dtoa_r+0x37c>
 8004d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 808b 	beq.w	8004e8c <_dtoa_r+0x4f4>
 8004d76:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004d7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d82:	2200      	movs	r2, #0
 8004d84:	4b6f      	ldr	r3, [pc, #444]	; (8004f44 <_dtoa_r+0x5ac>)
 8004d86:	f7fb fe31 	bl	80009ec <__aeabi_dcmplt>
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d07e      	beq.n	8004e8c <_dtoa_r+0x4f4>
 8004d8e:	9b08      	ldr	r3, [sp, #32]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d07b      	beq.n	8004e8c <_dtoa_r+0x4f4>
 8004d94:	f1b9 0f00 	cmp.w	r9, #0
 8004d98:	dd38      	ble.n	8004e0c <_dtoa_r+0x474>
 8004d9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d9e:	2200      	movs	r2, #0
 8004da0:	4b69      	ldr	r3, [pc, #420]	; (8004f48 <_dtoa_r+0x5b0>)
 8004da2:	f7fb fbb1 	bl	8000508 <__aeabi_dmul>
 8004da6:	464c      	mov	r4, r9
 8004da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dac:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004db0:	3701      	adds	r7, #1
 8004db2:	4638      	mov	r0, r7
 8004db4:	f7fb fb3e 	bl	8000434 <__aeabi_i2d>
 8004db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dbc:	f7fb fba4 	bl	8000508 <__aeabi_dmul>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	4b62      	ldr	r3, [pc, #392]	; (8004f4c <_dtoa_r+0x5b4>)
 8004dc4:	f7fb f9ea 	bl	800019c <__adddf3>
 8004dc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004dcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004dd0:	9611      	str	r6, [sp, #68]	; 0x44
 8004dd2:	2c00      	cmp	r4, #0
 8004dd4:	d15d      	bne.n	8004e92 <_dtoa_r+0x4fa>
 8004dd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	4b5c      	ldr	r3, [pc, #368]	; (8004f50 <_dtoa_r+0x5b8>)
 8004dde:	f7fb f9db 	bl	8000198 <__aeabi_dsub>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004dea:	4633      	mov	r3, r6
 8004dec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004dee:	f7fb fe1b 	bl	8000a28 <__aeabi_dcmpgt>
 8004df2:	2800      	cmp	r0, #0
 8004df4:	f040 829c 	bne.w	8005330 <_dtoa_r+0x998>
 8004df8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004dfe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004e02:	f7fb fdf3 	bl	80009ec <__aeabi_dcmplt>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	f040 8290 	bne.w	800532c <_dtoa_r+0x994>
 8004e0c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004e10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004e14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f2c0 8152 	blt.w	80050c0 <_dtoa_r+0x728>
 8004e1c:	f1ba 0f0e 	cmp.w	sl, #14
 8004e20:	f300 814e 	bgt.w	80050c0 <_dtoa_r+0x728>
 8004e24:	4b45      	ldr	r3, [pc, #276]	; (8004f3c <_dtoa_r+0x5a4>)
 8004e26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e2e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004e32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f280 80db 	bge.w	8004ff0 <_dtoa_r+0x658>
 8004e3a:	9b08      	ldr	r3, [sp, #32]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f300 80d7 	bgt.w	8004ff0 <_dtoa_r+0x658>
 8004e42:	f040 8272 	bne.w	800532a <_dtoa_r+0x992>
 8004e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	4b40      	ldr	r3, [pc, #256]	; (8004f50 <_dtoa_r+0x5b8>)
 8004e4e:	f7fb fb5b 	bl	8000508 <__aeabi_dmul>
 8004e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e56:	f7fb fddd 	bl	8000a14 <__aeabi_dcmpge>
 8004e5a:	9c08      	ldr	r4, [sp, #32]
 8004e5c:	4626      	mov	r6, r4
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	f040 8248 	bne.w	80052f4 <_dtoa_r+0x95c>
 8004e64:	2331      	movs	r3, #49	; 0x31
 8004e66:	9f03      	ldr	r7, [sp, #12]
 8004e68:	f10a 0a01 	add.w	sl, sl, #1
 8004e6c:	f807 3b01 	strb.w	r3, [r7], #1
 8004e70:	e244      	b.n	80052fc <_dtoa_r+0x964>
 8004e72:	07e2      	lsls	r2, r4, #31
 8004e74:	d505      	bpl.n	8004e82 <_dtoa_r+0x4ea>
 8004e76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e7a:	f7fb fb45 	bl	8000508 <__aeabi_dmul>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	3701      	adds	r7, #1
 8004e82:	1064      	asrs	r4, r4, #1
 8004e84:	3608      	adds	r6, #8
 8004e86:	e76d      	b.n	8004d64 <_dtoa_r+0x3cc>
 8004e88:	2702      	movs	r7, #2
 8004e8a:	e770      	b.n	8004d6e <_dtoa_r+0x3d6>
 8004e8c:	46d0      	mov	r8, sl
 8004e8e:	9c08      	ldr	r4, [sp, #32]
 8004e90:	e78f      	b.n	8004db2 <_dtoa_r+0x41a>
 8004e92:	9903      	ldr	r1, [sp, #12]
 8004e94:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <_dtoa_r+0x5a4>)
 8004e96:	4421      	add	r1, r4
 8004e98:	9112      	str	r1, [sp, #72]	; 0x48
 8004e9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ea0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004ea4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	d055      	beq.n	8004f58 <_dtoa_r+0x5c0>
 8004eac:	2000      	movs	r0, #0
 8004eae:	4929      	ldr	r1, [pc, #164]	; (8004f54 <_dtoa_r+0x5bc>)
 8004eb0:	f7fb fc54 	bl	800075c <__aeabi_ddiv>
 8004eb4:	463b      	mov	r3, r7
 8004eb6:	4632      	mov	r2, r6
 8004eb8:	f7fb f96e 	bl	8000198 <__aeabi_dsub>
 8004ebc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ec0:	9f03      	ldr	r7, [sp, #12]
 8004ec2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ec6:	f7fb fdcf 	bl	8000a68 <__aeabi_d2iz>
 8004eca:	4604      	mov	r4, r0
 8004ecc:	f7fb fab2 	bl	8000434 <__aeabi_i2d>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ed8:	f7fb f95e 	bl	8000198 <__aeabi_dsub>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	3430      	adds	r4, #48	; 0x30
 8004ee2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ee6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004eea:	f807 4b01 	strb.w	r4, [r7], #1
 8004eee:	f7fb fd7d 	bl	80009ec <__aeabi_dcmplt>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d174      	bne.n	8004fe0 <_dtoa_r+0x648>
 8004ef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004efa:	2000      	movs	r0, #0
 8004efc:	4911      	ldr	r1, [pc, #68]	; (8004f44 <_dtoa_r+0x5ac>)
 8004efe:	f7fb f94b 	bl	8000198 <__aeabi_dsub>
 8004f02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f06:	f7fb fd71 	bl	80009ec <__aeabi_dcmplt>
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	f040 80b7 	bne.w	800507e <_dtoa_r+0x6e6>
 8004f10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f12:	429f      	cmp	r7, r3
 8004f14:	f43f af7a 	beq.w	8004e0c <_dtoa_r+0x474>
 8004f18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <_dtoa_r+0x5b0>)
 8004f20:	f7fb faf2 	bl	8000508 <__aeabi_dmul>
 8004f24:	2200      	movs	r2, #0
 8004f26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <_dtoa_r+0x5b0>)
 8004f30:	f7fb faea 	bl	8000508 <__aeabi_dmul>
 8004f34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f38:	e7c3      	b.n	8004ec2 <_dtoa_r+0x52a>
 8004f3a:	bf00      	nop
 8004f3c:	08006ef0 	.word	0x08006ef0
 8004f40:	08006ec8 	.word	0x08006ec8
 8004f44:	3ff00000 	.word	0x3ff00000
 8004f48:	40240000 	.word	0x40240000
 8004f4c:	401c0000 	.word	0x401c0000
 8004f50:	40140000 	.word	0x40140000
 8004f54:	3fe00000 	.word	0x3fe00000
 8004f58:	4630      	mov	r0, r6
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f7fb fad4 	bl	8000508 <__aeabi_dmul>
 8004f60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f66:	9c03      	ldr	r4, [sp, #12]
 8004f68:	9314      	str	r3, [sp, #80]	; 0x50
 8004f6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f6e:	f7fb fd7b 	bl	8000a68 <__aeabi_d2iz>
 8004f72:	9015      	str	r0, [sp, #84]	; 0x54
 8004f74:	f7fb fa5e 	bl	8000434 <__aeabi_i2d>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f80:	f7fb f90a 	bl	8000198 <__aeabi_dsub>
 8004f84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f86:	4606      	mov	r6, r0
 8004f88:	3330      	adds	r3, #48	; 0x30
 8004f8a:	f804 3b01 	strb.w	r3, [r4], #1
 8004f8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f90:	460f      	mov	r7, r1
 8004f92:	429c      	cmp	r4, r3
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	d124      	bne.n	8004fe4 <_dtoa_r+0x64c>
 8004f9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f9e:	4bb0      	ldr	r3, [pc, #704]	; (8005260 <_dtoa_r+0x8c8>)
 8004fa0:	f7fb f8fc 	bl	800019c <__adddf3>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4630      	mov	r0, r6
 8004faa:	4639      	mov	r1, r7
 8004fac:	f7fb fd3c 	bl	8000a28 <__aeabi_dcmpgt>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	d163      	bne.n	800507c <_dtoa_r+0x6e4>
 8004fb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fb8:	2000      	movs	r0, #0
 8004fba:	49a9      	ldr	r1, [pc, #676]	; (8005260 <_dtoa_r+0x8c8>)
 8004fbc:	f7fb f8ec 	bl	8000198 <__aeabi_dsub>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	4639      	mov	r1, r7
 8004fc8:	f7fb fd10 	bl	80009ec <__aeabi_dcmplt>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	f43f af1d 	beq.w	8004e0c <_dtoa_r+0x474>
 8004fd2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004fd4:	1e7b      	subs	r3, r7, #1
 8004fd6:	9314      	str	r3, [sp, #80]	; 0x50
 8004fd8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004fdc:	2b30      	cmp	r3, #48	; 0x30
 8004fde:	d0f8      	beq.n	8004fd2 <_dtoa_r+0x63a>
 8004fe0:	46c2      	mov	sl, r8
 8004fe2:	e03b      	b.n	800505c <_dtoa_r+0x6c4>
 8004fe4:	4b9f      	ldr	r3, [pc, #636]	; (8005264 <_dtoa_r+0x8cc>)
 8004fe6:	f7fb fa8f 	bl	8000508 <__aeabi_dmul>
 8004fea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fee:	e7bc      	b.n	8004f6a <_dtoa_r+0x5d2>
 8004ff0:	9f03      	ldr	r7, [sp, #12]
 8004ff2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004ff6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	4649      	mov	r1, r9
 8004ffe:	f7fb fbad 	bl	800075c <__aeabi_ddiv>
 8005002:	f7fb fd31 	bl	8000a68 <__aeabi_d2iz>
 8005006:	4604      	mov	r4, r0
 8005008:	f7fb fa14 	bl	8000434 <__aeabi_i2d>
 800500c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005010:	f7fb fa7a 	bl	8000508 <__aeabi_dmul>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4640      	mov	r0, r8
 800501a:	4649      	mov	r1, r9
 800501c:	f7fb f8bc 	bl	8000198 <__aeabi_dsub>
 8005020:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005024:	f807 6b01 	strb.w	r6, [r7], #1
 8005028:	9e03      	ldr	r6, [sp, #12]
 800502a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800502e:	1bbe      	subs	r6, r7, r6
 8005030:	45b4      	cmp	ip, r6
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	d136      	bne.n	80050a6 <_dtoa_r+0x70e>
 8005038:	f7fb f8b0 	bl	800019c <__adddf3>
 800503c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005040:	4680      	mov	r8, r0
 8005042:	4689      	mov	r9, r1
 8005044:	f7fb fcf0 	bl	8000a28 <__aeabi_dcmpgt>
 8005048:	bb58      	cbnz	r0, 80050a2 <_dtoa_r+0x70a>
 800504a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800504e:	4640      	mov	r0, r8
 8005050:	4649      	mov	r1, r9
 8005052:	f7fb fcc1 	bl	80009d8 <__aeabi_dcmpeq>
 8005056:	b108      	cbz	r0, 800505c <_dtoa_r+0x6c4>
 8005058:	07e1      	lsls	r1, r4, #31
 800505a:	d422      	bmi.n	80050a2 <_dtoa_r+0x70a>
 800505c:	4628      	mov	r0, r5
 800505e:	4659      	mov	r1, fp
 8005060:	f000 faf0 	bl	8005644 <_Bfree>
 8005064:	2300      	movs	r3, #0
 8005066:	703b      	strb	r3, [r7, #0]
 8005068:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800506a:	f10a 0001 	add.w	r0, sl, #1
 800506e:	6018      	str	r0, [r3, #0]
 8005070:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005072:	2b00      	cmp	r3, #0
 8005074:	f43f acde 	beq.w	8004a34 <_dtoa_r+0x9c>
 8005078:	601f      	str	r7, [r3, #0]
 800507a:	e4db      	b.n	8004a34 <_dtoa_r+0x9c>
 800507c:	4627      	mov	r7, r4
 800507e:	463b      	mov	r3, r7
 8005080:	461f      	mov	r7, r3
 8005082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005086:	2a39      	cmp	r2, #57	; 0x39
 8005088:	d107      	bne.n	800509a <_dtoa_r+0x702>
 800508a:	9a03      	ldr	r2, [sp, #12]
 800508c:	429a      	cmp	r2, r3
 800508e:	d1f7      	bne.n	8005080 <_dtoa_r+0x6e8>
 8005090:	2230      	movs	r2, #48	; 0x30
 8005092:	9903      	ldr	r1, [sp, #12]
 8005094:	f108 0801 	add.w	r8, r8, #1
 8005098:	700a      	strb	r2, [r1, #0]
 800509a:	781a      	ldrb	r2, [r3, #0]
 800509c:	3201      	adds	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	e79e      	b.n	8004fe0 <_dtoa_r+0x648>
 80050a2:	46d0      	mov	r8, sl
 80050a4:	e7eb      	b.n	800507e <_dtoa_r+0x6e6>
 80050a6:	2200      	movs	r2, #0
 80050a8:	4b6e      	ldr	r3, [pc, #440]	; (8005264 <_dtoa_r+0x8cc>)
 80050aa:	f7fb fa2d 	bl	8000508 <__aeabi_dmul>
 80050ae:	2200      	movs	r2, #0
 80050b0:	2300      	movs	r3, #0
 80050b2:	4680      	mov	r8, r0
 80050b4:	4689      	mov	r9, r1
 80050b6:	f7fb fc8f 	bl	80009d8 <__aeabi_dcmpeq>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d09b      	beq.n	8004ff6 <_dtoa_r+0x65e>
 80050be:	e7cd      	b.n	800505c <_dtoa_r+0x6c4>
 80050c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050c2:	2a00      	cmp	r2, #0
 80050c4:	f000 80d0 	beq.w	8005268 <_dtoa_r+0x8d0>
 80050c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80050ca:	2a01      	cmp	r2, #1
 80050cc:	f300 80ae 	bgt.w	800522c <_dtoa_r+0x894>
 80050d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80050d2:	2a00      	cmp	r2, #0
 80050d4:	f000 80a6 	beq.w	8005224 <_dtoa_r+0x88c>
 80050d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80050de:	9f06      	ldr	r7, [sp, #24]
 80050e0:	9a06      	ldr	r2, [sp, #24]
 80050e2:	2101      	movs	r1, #1
 80050e4:	441a      	add	r2, r3
 80050e6:	9206      	str	r2, [sp, #24]
 80050e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050ea:	4628      	mov	r0, r5
 80050ec:	441a      	add	r2, r3
 80050ee:	9209      	str	r2, [sp, #36]	; 0x24
 80050f0:	f000 fb5e 	bl	80057b0 <__i2b>
 80050f4:	4606      	mov	r6, r0
 80050f6:	2f00      	cmp	r7, #0
 80050f8:	dd0c      	ble.n	8005114 <_dtoa_r+0x77c>
 80050fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	dd09      	ble.n	8005114 <_dtoa_r+0x77c>
 8005100:	42bb      	cmp	r3, r7
 8005102:	bfa8      	it	ge
 8005104:	463b      	movge	r3, r7
 8005106:	9a06      	ldr	r2, [sp, #24]
 8005108:	1aff      	subs	r7, r7, r3
 800510a:	1ad2      	subs	r2, r2, r3
 800510c:	9206      	str	r2, [sp, #24]
 800510e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	9309      	str	r3, [sp, #36]	; 0x24
 8005114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005116:	b1f3      	cbz	r3, 8005156 <_dtoa_r+0x7be>
 8005118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80a8 	beq.w	8005270 <_dtoa_r+0x8d8>
 8005120:	2c00      	cmp	r4, #0
 8005122:	dd10      	ble.n	8005146 <_dtoa_r+0x7ae>
 8005124:	4631      	mov	r1, r6
 8005126:	4622      	mov	r2, r4
 8005128:	4628      	mov	r0, r5
 800512a:	f000 fbff 	bl	800592c <__pow5mult>
 800512e:	465a      	mov	r2, fp
 8005130:	4601      	mov	r1, r0
 8005132:	4606      	mov	r6, r0
 8005134:	4628      	mov	r0, r5
 8005136:	f000 fb51 	bl	80057dc <__multiply>
 800513a:	4680      	mov	r8, r0
 800513c:	4659      	mov	r1, fp
 800513e:	4628      	mov	r0, r5
 8005140:	f000 fa80 	bl	8005644 <_Bfree>
 8005144:	46c3      	mov	fp, r8
 8005146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005148:	1b1a      	subs	r2, r3, r4
 800514a:	d004      	beq.n	8005156 <_dtoa_r+0x7be>
 800514c:	4659      	mov	r1, fp
 800514e:	4628      	mov	r0, r5
 8005150:	f000 fbec 	bl	800592c <__pow5mult>
 8005154:	4683      	mov	fp, r0
 8005156:	2101      	movs	r1, #1
 8005158:	4628      	mov	r0, r5
 800515a:	f000 fb29 	bl	80057b0 <__i2b>
 800515e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005160:	4604      	mov	r4, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	f340 8086 	ble.w	8005274 <_dtoa_r+0x8dc>
 8005168:	461a      	mov	r2, r3
 800516a:	4601      	mov	r1, r0
 800516c:	4628      	mov	r0, r5
 800516e:	f000 fbdd 	bl	800592c <__pow5mult>
 8005172:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005174:	4604      	mov	r4, r0
 8005176:	2b01      	cmp	r3, #1
 8005178:	dd7f      	ble.n	800527a <_dtoa_r+0x8e2>
 800517a:	f04f 0800 	mov.w	r8, #0
 800517e:	6923      	ldr	r3, [r4, #16]
 8005180:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005184:	6918      	ldr	r0, [r3, #16]
 8005186:	f000 fac5 	bl	8005714 <__hi0bits>
 800518a:	f1c0 0020 	rsb	r0, r0, #32
 800518e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005190:	4418      	add	r0, r3
 8005192:	f010 001f 	ands.w	r0, r0, #31
 8005196:	f000 8092 	beq.w	80052be <_dtoa_r+0x926>
 800519a:	f1c0 0320 	rsb	r3, r0, #32
 800519e:	2b04      	cmp	r3, #4
 80051a0:	f340 808a 	ble.w	80052b8 <_dtoa_r+0x920>
 80051a4:	f1c0 001c 	rsb	r0, r0, #28
 80051a8:	9b06      	ldr	r3, [sp, #24]
 80051aa:	4407      	add	r7, r0
 80051ac:	4403      	add	r3, r0
 80051ae:	9306      	str	r3, [sp, #24]
 80051b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b2:	4403      	add	r3, r0
 80051b4:	9309      	str	r3, [sp, #36]	; 0x24
 80051b6:	9b06      	ldr	r3, [sp, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	dd05      	ble.n	80051c8 <_dtoa_r+0x830>
 80051bc:	4659      	mov	r1, fp
 80051be:	461a      	mov	r2, r3
 80051c0:	4628      	mov	r0, r5
 80051c2:	f000 fc0d 	bl	80059e0 <__lshift>
 80051c6:	4683      	mov	fp, r0
 80051c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	dd05      	ble.n	80051da <_dtoa_r+0x842>
 80051ce:	4621      	mov	r1, r4
 80051d0:	461a      	mov	r2, r3
 80051d2:	4628      	mov	r0, r5
 80051d4:	f000 fc04 	bl	80059e0 <__lshift>
 80051d8:	4604      	mov	r4, r0
 80051da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d070      	beq.n	80052c2 <_dtoa_r+0x92a>
 80051e0:	4621      	mov	r1, r4
 80051e2:	4658      	mov	r0, fp
 80051e4:	f000 fc6c 	bl	8005ac0 <__mcmp>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	da6a      	bge.n	80052c2 <_dtoa_r+0x92a>
 80051ec:	2300      	movs	r3, #0
 80051ee:	4659      	mov	r1, fp
 80051f0:	220a      	movs	r2, #10
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 fa48 	bl	8005688 <__multadd>
 80051f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051fa:	4683      	mov	fp, r0
 80051fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8194 	beq.w	800552e <_dtoa_r+0xb96>
 8005206:	4631      	mov	r1, r6
 8005208:	2300      	movs	r3, #0
 800520a:	220a      	movs	r2, #10
 800520c:	4628      	mov	r0, r5
 800520e:	f000 fa3b 	bl	8005688 <__multadd>
 8005212:	f1b9 0f00 	cmp.w	r9, #0
 8005216:	4606      	mov	r6, r0
 8005218:	f300 8093 	bgt.w	8005342 <_dtoa_r+0x9aa>
 800521c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800521e:	2b02      	cmp	r3, #2
 8005220:	dc57      	bgt.n	80052d2 <_dtoa_r+0x93a>
 8005222:	e08e      	b.n	8005342 <_dtoa_r+0x9aa>
 8005224:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005226:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800522a:	e757      	b.n	80050dc <_dtoa_r+0x744>
 800522c:	9b08      	ldr	r3, [sp, #32]
 800522e:	1e5c      	subs	r4, r3, #1
 8005230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005232:	42a3      	cmp	r3, r4
 8005234:	bfb7      	itett	lt
 8005236:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005238:	1b1c      	subge	r4, r3, r4
 800523a:	1ae2      	sublt	r2, r4, r3
 800523c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800523e:	bfbe      	ittt	lt
 8005240:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005242:	189b      	addlt	r3, r3, r2
 8005244:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005246:	9b08      	ldr	r3, [sp, #32]
 8005248:	bfb8      	it	lt
 800524a:	2400      	movlt	r4, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	bfbb      	ittet	lt
 8005250:	9b06      	ldrlt	r3, [sp, #24]
 8005252:	9a08      	ldrlt	r2, [sp, #32]
 8005254:	9f06      	ldrge	r7, [sp, #24]
 8005256:	1a9f      	sublt	r7, r3, r2
 8005258:	bfac      	ite	ge
 800525a:	9b08      	ldrge	r3, [sp, #32]
 800525c:	2300      	movlt	r3, #0
 800525e:	e73f      	b.n	80050e0 <_dtoa_r+0x748>
 8005260:	3fe00000 	.word	0x3fe00000
 8005264:	40240000 	.word	0x40240000
 8005268:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800526a:	9f06      	ldr	r7, [sp, #24]
 800526c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800526e:	e742      	b.n	80050f6 <_dtoa_r+0x75e>
 8005270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005272:	e76b      	b.n	800514c <_dtoa_r+0x7b4>
 8005274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005276:	2b01      	cmp	r3, #1
 8005278:	dc19      	bgt.n	80052ae <_dtoa_r+0x916>
 800527a:	9b04      	ldr	r3, [sp, #16]
 800527c:	b9bb      	cbnz	r3, 80052ae <_dtoa_r+0x916>
 800527e:	9b05      	ldr	r3, [sp, #20]
 8005280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005284:	b99b      	cbnz	r3, 80052ae <_dtoa_r+0x916>
 8005286:	9b05      	ldr	r3, [sp, #20]
 8005288:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800528c:	0d1b      	lsrs	r3, r3, #20
 800528e:	051b      	lsls	r3, r3, #20
 8005290:	b183      	cbz	r3, 80052b4 <_dtoa_r+0x91c>
 8005292:	f04f 0801 	mov.w	r8, #1
 8005296:	9b06      	ldr	r3, [sp, #24]
 8005298:	3301      	adds	r3, #1
 800529a:	9306      	str	r3, [sp, #24]
 800529c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800529e:	3301      	adds	r3, #1
 80052a0:	9309      	str	r3, [sp, #36]	; 0x24
 80052a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f47f af6a 	bne.w	800517e <_dtoa_r+0x7e6>
 80052aa:	2001      	movs	r0, #1
 80052ac:	e76f      	b.n	800518e <_dtoa_r+0x7f6>
 80052ae:	f04f 0800 	mov.w	r8, #0
 80052b2:	e7f6      	b.n	80052a2 <_dtoa_r+0x90a>
 80052b4:	4698      	mov	r8, r3
 80052b6:	e7f4      	b.n	80052a2 <_dtoa_r+0x90a>
 80052b8:	f43f af7d 	beq.w	80051b6 <_dtoa_r+0x81e>
 80052bc:	4618      	mov	r0, r3
 80052be:	301c      	adds	r0, #28
 80052c0:	e772      	b.n	80051a8 <_dtoa_r+0x810>
 80052c2:	9b08      	ldr	r3, [sp, #32]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	dc36      	bgt.n	8005336 <_dtoa_r+0x99e>
 80052c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	dd33      	ble.n	8005336 <_dtoa_r+0x99e>
 80052ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052d2:	f1b9 0f00 	cmp.w	r9, #0
 80052d6:	d10d      	bne.n	80052f4 <_dtoa_r+0x95c>
 80052d8:	4621      	mov	r1, r4
 80052da:	464b      	mov	r3, r9
 80052dc:	2205      	movs	r2, #5
 80052de:	4628      	mov	r0, r5
 80052e0:	f000 f9d2 	bl	8005688 <__multadd>
 80052e4:	4601      	mov	r1, r0
 80052e6:	4604      	mov	r4, r0
 80052e8:	4658      	mov	r0, fp
 80052ea:	f000 fbe9 	bl	8005ac0 <__mcmp>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	f73f adb8 	bgt.w	8004e64 <_dtoa_r+0x4cc>
 80052f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052f6:	9f03      	ldr	r7, [sp, #12]
 80052f8:	ea6f 0a03 	mvn.w	sl, r3
 80052fc:	f04f 0800 	mov.w	r8, #0
 8005300:	4621      	mov	r1, r4
 8005302:	4628      	mov	r0, r5
 8005304:	f000 f99e 	bl	8005644 <_Bfree>
 8005308:	2e00      	cmp	r6, #0
 800530a:	f43f aea7 	beq.w	800505c <_dtoa_r+0x6c4>
 800530e:	f1b8 0f00 	cmp.w	r8, #0
 8005312:	d005      	beq.n	8005320 <_dtoa_r+0x988>
 8005314:	45b0      	cmp	r8, r6
 8005316:	d003      	beq.n	8005320 <_dtoa_r+0x988>
 8005318:	4641      	mov	r1, r8
 800531a:	4628      	mov	r0, r5
 800531c:	f000 f992 	bl	8005644 <_Bfree>
 8005320:	4631      	mov	r1, r6
 8005322:	4628      	mov	r0, r5
 8005324:	f000 f98e 	bl	8005644 <_Bfree>
 8005328:	e698      	b.n	800505c <_dtoa_r+0x6c4>
 800532a:	2400      	movs	r4, #0
 800532c:	4626      	mov	r6, r4
 800532e:	e7e1      	b.n	80052f4 <_dtoa_r+0x95c>
 8005330:	46c2      	mov	sl, r8
 8005332:	4626      	mov	r6, r4
 8005334:	e596      	b.n	8004e64 <_dtoa_r+0x4cc>
 8005336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005338:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80fd 	beq.w	800553c <_dtoa_r+0xba4>
 8005342:	2f00      	cmp	r7, #0
 8005344:	dd05      	ble.n	8005352 <_dtoa_r+0x9ba>
 8005346:	4631      	mov	r1, r6
 8005348:	463a      	mov	r2, r7
 800534a:	4628      	mov	r0, r5
 800534c:	f000 fb48 	bl	80059e0 <__lshift>
 8005350:	4606      	mov	r6, r0
 8005352:	f1b8 0f00 	cmp.w	r8, #0
 8005356:	d05c      	beq.n	8005412 <_dtoa_r+0xa7a>
 8005358:	4628      	mov	r0, r5
 800535a:	6871      	ldr	r1, [r6, #4]
 800535c:	f000 f932 	bl	80055c4 <_Balloc>
 8005360:	4607      	mov	r7, r0
 8005362:	b928      	cbnz	r0, 8005370 <_dtoa_r+0x9d8>
 8005364:	4602      	mov	r2, r0
 8005366:	f240 21ea 	movw	r1, #746	; 0x2ea
 800536a:	4b7f      	ldr	r3, [pc, #508]	; (8005568 <_dtoa_r+0xbd0>)
 800536c:	f7ff bb28 	b.w	80049c0 <_dtoa_r+0x28>
 8005370:	6932      	ldr	r2, [r6, #16]
 8005372:	f106 010c 	add.w	r1, r6, #12
 8005376:	3202      	adds	r2, #2
 8005378:	0092      	lsls	r2, r2, #2
 800537a:	300c      	adds	r0, #12
 800537c:	f000 f914 	bl	80055a8 <memcpy>
 8005380:	2201      	movs	r2, #1
 8005382:	4639      	mov	r1, r7
 8005384:	4628      	mov	r0, r5
 8005386:	f000 fb2b 	bl	80059e0 <__lshift>
 800538a:	46b0      	mov	r8, r6
 800538c:	4606      	mov	r6, r0
 800538e:	9b03      	ldr	r3, [sp, #12]
 8005390:	3301      	adds	r3, #1
 8005392:	9308      	str	r3, [sp, #32]
 8005394:	9b03      	ldr	r3, [sp, #12]
 8005396:	444b      	add	r3, r9
 8005398:	930a      	str	r3, [sp, #40]	; 0x28
 800539a:	9b04      	ldr	r3, [sp, #16]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	9309      	str	r3, [sp, #36]	; 0x24
 80053a2:	9b08      	ldr	r3, [sp, #32]
 80053a4:	4621      	mov	r1, r4
 80053a6:	3b01      	subs	r3, #1
 80053a8:	4658      	mov	r0, fp
 80053aa:	9304      	str	r3, [sp, #16]
 80053ac:	f7ff fa66 	bl	800487c <quorem>
 80053b0:	4603      	mov	r3, r0
 80053b2:	4641      	mov	r1, r8
 80053b4:	3330      	adds	r3, #48	; 0x30
 80053b6:	9006      	str	r0, [sp, #24]
 80053b8:	4658      	mov	r0, fp
 80053ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80053bc:	f000 fb80 	bl	8005ac0 <__mcmp>
 80053c0:	4632      	mov	r2, r6
 80053c2:	4681      	mov	r9, r0
 80053c4:	4621      	mov	r1, r4
 80053c6:	4628      	mov	r0, r5
 80053c8:	f000 fb96 	bl	8005af8 <__mdiff>
 80053cc:	68c2      	ldr	r2, [r0, #12]
 80053ce:	4607      	mov	r7, r0
 80053d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053d2:	bb02      	cbnz	r2, 8005416 <_dtoa_r+0xa7e>
 80053d4:	4601      	mov	r1, r0
 80053d6:	4658      	mov	r0, fp
 80053d8:	f000 fb72 	bl	8005ac0 <__mcmp>
 80053dc:	4602      	mov	r2, r0
 80053de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053e0:	4639      	mov	r1, r7
 80053e2:	4628      	mov	r0, r5
 80053e4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80053e8:	f000 f92c 	bl	8005644 <_Bfree>
 80053ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053f0:	9f08      	ldr	r7, [sp, #32]
 80053f2:	ea43 0102 	orr.w	r1, r3, r2
 80053f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f8:	430b      	orrs	r3, r1
 80053fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053fc:	d10d      	bne.n	800541a <_dtoa_r+0xa82>
 80053fe:	2b39      	cmp	r3, #57	; 0x39
 8005400:	d029      	beq.n	8005456 <_dtoa_r+0xabe>
 8005402:	f1b9 0f00 	cmp.w	r9, #0
 8005406:	dd01      	ble.n	800540c <_dtoa_r+0xa74>
 8005408:	9b06      	ldr	r3, [sp, #24]
 800540a:	3331      	adds	r3, #49	; 0x31
 800540c:	9a04      	ldr	r2, [sp, #16]
 800540e:	7013      	strb	r3, [r2, #0]
 8005410:	e776      	b.n	8005300 <_dtoa_r+0x968>
 8005412:	4630      	mov	r0, r6
 8005414:	e7b9      	b.n	800538a <_dtoa_r+0x9f2>
 8005416:	2201      	movs	r2, #1
 8005418:	e7e2      	b.n	80053e0 <_dtoa_r+0xa48>
 800541a:	f1b9 0f00 	cmp.w	r9, #0
 800541e:	db06      	blt.n	800542e <_dtoa_r+0xa96>
 8005420:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005422:	ea41 0909 	orr.w	r9, r1, r9
 8005426:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005428:	ea59 0101 	orrs.w	r1, r9, r1
 800542c:	d120      	bne.n	8005470 <_dtoa_r+0xad8>
 800542e:	2a00      	cmp	r2, #0
 8005430:	ddec      	ble.n	800540c <_dtoa_r+0xa74>
 8005432:	4659      	mov	r1, fp
 8005434:	2201      	movs	r2, #1
 8005436:	4628      	mov	r0, r5
 8005438:	9308      	str	r3, [sp, #32]
 800543a:	f000 fad1 	bl	80059e0 <__lshift>
 800543e:	4621      	mov	r1, r4
 8005440:	4683      	mov	fp, r0
 8005442:	f000 fb3d 	bl	8005ac0 <__mcmp>
 8005446:	2800      	cmp	r0, #0
 8005448:	9b08      	ldr	r3, [sp, #32]
 800544a:	dc02      	bgt.n	8005452 <_dtoa_r+0xaba>
 800544c:	d1de      	bne.n	800540c <_dtoa_r+0xa74>
 800544e:	07da      	lsls	r2, r3, #31
 8005450:	d5dc      	bpl.n	800540c <_dtoa_r+0xa74>
 8005452:	2b39      	cmp	r3, #57	; 0x39
 8005454:	d1d8      	bne.n	8005408 <_dtoa_r+0xa70>
 8005456:	2339      	movs	r3, #57	; 0x39
 8005458:	9a04      	ldr	r2, [sp, #16]
 800545a:	7013      	strb	r3, [r2, #0]
 800545c:	463b      	mov	r3, r7
 800545e:	461f      	mov	r7, r3
 8005460:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005464:	3b01      	subs	r3, #1
 8005466:	2a39      	cmp	r2, #57	; 0x39
 8005468:	d050      	beq.n	800550c <_dtoa_r+0xb74>
 800546a:	3201      	adds	r2, #1
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	e747      	b.n	8005300 <_dtoa_r+0x968>
 8005470:	2a00      	cmp	r2, #0
 8005472:	dd03      	ble.n	800547c <_dtoa_r+0xae4>
 8005474:	2b39      	cmp	r3, #57	; 0x39
 8005476:	d0ee      	beq.n	8005456 <_dtoa_r+0xabe>
 8005478:	3301      	adds	r3, #1
 800547a:	e7c7      	b.n	800540c <_dtoa_r+0xa74>
 800547c:	9a08      	ldr	r2, [sp, #32]
 800547e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005480:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005484:	428a      	cmp	r2, r1
 8005486:	d02a      	beq.n	80054de <_dtoa_r+0xb46>
 8005488:	4659      	mov	r1, fp
 800548a:	2300      	movs	r3, #0
 800548c:	220a      	movs	r2, #10
 800548e:	4628      	mov	r0, r5
 8005490:	f000 f8fa 	bl	8005688 <__multadd>
 8005494:	45b0      	cmp	r8, r6
 8005496:	4683      	mov	fp, r0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	f04f 020a 	mov.w	r2, #10
 80054a0:	4641      	mov	r1, r8
 80054a2:	4628      	mov	r0, r5
 80054a4:	d107      	bne.n	80054b6 <_dtoa_r+0xb1e>
 80054a6:	f000 f8ef 	bl	8005688 <__multadd>
 80054aa:	4680      	mov	r8, r0
 80054ac:	4606      	mov	r6, r0
 80054ae:	9b08      	ldr	r3, [sp, #32]
 80054b0:	3301      	adds	r3, #1
 80054b2:	9308      	str	r3, [sp, #32]
 80054b4:	e775      	b.n	80053a2 <_dtoa_r+0xa0a>
 80054b6:	f000 f8e7 	bl	8005688 <__multadd>
 80054ba:	4631      	mov	r1, r6
 80054bc:	4680      	mov	r8, r0
 80054be:	2300      	movs	r3, #0
 80054c0:	220a      	movs	r2, #10
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 f8e0 	bl	8005688 <__multadd>
 80054c8:	4606      	mov	r6, r0
 80054ca:	e7f0      	b.n	80054ae <_dtoa_r+0xb16>
 80054cc:	f1b9 0f00 	cmp.w	r9, #0
 80054d0:	bfcc      	ite	gt
 80054d2:	464f      	movgt	r7, r9
 80054d4:	2701      	movle	r7, #1
 80054d6:	f04f 0800 	mov.w	r8, #0
 80054da:	9a03      	ldr	r2, [sp, #12]
 80054dc:	4417      	add	r7, r2
 80054de:	4659      	mov	r1, fp
 80054e0:	2201      	movs	r2, #1
 80054e2:	4628      	mov	r0, r5
 80054e4:	9308      	str	r3, [sp, #32]
 80054e6:	f000 fa7b 	bl	80059e0 <__lshift>
 80054ea:	4621      	mov	r1, r4
 80054ec:	4683      	mov	fp, r0
 80054ee:	f000 fae7 	bl	8005ac0 <__mcmp>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	dcb2      	bgt.n	800545c <_dtoa_r+0xac4>
 80054f6:	d102      	bne.n	80054fe <_dtoa_r+0xb66>
 80054f8:	9b08      	ldr	r3, [sp, #32]
 80054fa:	07db      	lsls	r3, r3, #31
 80054fc:	d4ae      	bmi.n	800545c <_dtoa_r+0xac4>
 80054fe:	463b      	mov	r3, r7
 8005500:	461f      	mov	r7, r3
 8005502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005506:	2a30      	cmp	r2, #48	; 0x30
 8005508:	d0fa      	beq.n	8005500 <_dtoa_r+0xb68>
 800550a:	e6f9      	b.n	8005300 <_dtoa_r+0x968>
 800550c:	9a03      	ldr	r2, [sp, #12]
 800550e:	429a      	cmp	r2, r3
 8005510:	d1a5      	bne.n	800545e <_dtoa_r+0xac6>
 8005512:	2331      	movs	r3, #49	; 0x31
 8005514:	f10a 0a01 	add.w	sl, sl, #1
 8005518:	e779      	b.n	800540e <_dtoa_r+0xa76>
 800551a:	4b14      	ldr	r3, [pc, #80]	; (800556c <_dtoa_r+0xbd4>)
 800551c:	f7ff baa8 	b.w	8004a70 <_dtoa_r+0xd8>
 8005520:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005522:	2b00      	cmp	r3, #0
 8005524:	f47f aa81 	bne.w	8004a2a <_dtoa_r+0x92>
 8005528:	4b11      	ldr	r3, [pc, #68]	; (8005570 <_dtoa_r+0xbd8>)
 800552a:	f7ff baa1 	b.w	8004a70 <_dtoa_r+0xd8>
 800552e:	f1b9 0f00 	cmp.w	r9, #0
 8005532:	dc03      	bgt.n	800553c <_dtoa_r+0xba4>
 8005534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005536:	2b02      	cmp	r3, #2
 8005538:	f73f aecb 	bgt.w	80052d2 <_dtoa_r+0x93a>
 800553c:	9f03      	ldr	r7, [sp, #12]
 800553e:	4621      	mov	r1, r4
 8005540:	4658      	mov	r0, fp
 8005542:	f7ff f99b 	bl	800487c <quorem>
 8005546:	9a03      	ldr	r2, [sp, #12]
 8005548:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800554c:	f807 3b01 	strb.w	r3, [r7], #1
 8005550:	1aba      	subs	r2, r7, r2
 8005552:	4591      	cmp	r9, r2
 8005554:	ddba      	ble.n	80054cc <_dtoa_r+0xb34>
 8005556:	4659      	mov	r1, fp
 8005558:	2300      	movs	r3, #0
 800555a:	220a      	movs	r2, #10
 800555c:	4628      	mov	r0, r5
 800555e:	f000 f893 	bl	8005688 <__multadd>
 8005562:	4683      	mov	fp, r0
 8005564:	e7eb      	b.n	800553e <_dtoa_r+0xba6>
 8005566:	bf00      	nop
 8005568:	08006e5b 	.word	0x08006e5b
 800556c:	08006db8 	.word	0x08006db8
 8005570:	08006ddc 	.word	0x08006ddc

08005574 <_localeconv_r>:
 8005574:	4800      	ldr	r0, [pc, #0]	; (8005578 <_localeconv_r+0x4>)
 8005576:	4770      	bx	lr
 8005578:	20000168 	.word	0x20000168

0800557c <malloc>:
 800557c:	4b02      	ldr	r3, [pc, #8]	; (8005588 <malloc+0xc>)
 800557e:	4601      	mov	r1, r0
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	f000 bc1d 	b.w	8005dc0 <_malloc_r>
 8005586:	bf00      	nop
 8005588:	20000014 	.word	0x20000014

0800558c <memchr>:
 800558c:	4603      	mov	r3, r0
 800558e:	b510      	push	{r4, lr}
 8005590:	b2c9      	uxtb	r1, r1
 8005592:	4402      	add	r2, r0
 8005594:	4293      	cmp	r3, r2
 8005596:	4618      	mov	r0, r3
 8005598:	d101      	bne.n	800559e <memchr+0x12>
 800559a:	2000      	movs	r0, #0
 800559c:	e003      	b.n	80055a6 <memchr+0x1a>
 800559e:	7804      	ldrb	r4, [r0, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	428c      	cmp	r4, r1
 80055a4:	d1f6      	bne.n	8005594 <memchr+0x8>
 80055a6:	bd10      	pop	{r4, pc}

080055a8 <memcpy>:
 80055a8:	440a      	add	r2, r1
 80055aa:	4291      	cmp	r1, r2
 80055ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80055b0:	d100      	bne.n	80055b4 <memcpy+0xc>
 80055b2:	4770      	bx	lr
 80055b4:	b510      	push	{r4, lr}
 80055b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ba:	4291      	cmp	r1, r2
 80055bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055c0:	d1f9      	bne.n	80055b6 <memcpy+0xe>
 80055c2:	bd10      	pop	{r4, pc}

080055c4 <_Balloc>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80055c8:	4604      	mov	r4, r0
 80055ca:	460d      	mov	r5, r1
 80055cc:	b976      	cbnz	r6, 80055ec <_Balloc+0x28>
 80055ce:	2010      	movs	r0, #16
 80055d0:	f7ff ffd4 	bl	800557c <malloc>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6260      	str	r0, [r4, #36]	; 0x24
 80055d8:	b920      	cbnz	r0, 80055e4 <_Balloc+0x20>
 80055da:	2166      	movs	r1, #102	; 0x66
 80055dc:	4b17      	ldr	r3, [pc, #92]	; (800563c <_Balloc+0x78>)
 80055de:	4818      	ldr	r0, [pc, #96]	; (8005640 <_Balloc+0x7c>)
 80055e0:	f000 fdce 	bl	8006180 <__assert_func>
 80055e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055e8:	6006      	str	r6, [r0, #0]
 80055ea:	60c6      	str	r6, [r0, #12]
 80055ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80055ee:	68f3      	ldr	r3, [r6, #12]
 80055f0:	b183      	cbz	r3, 8005614 <_Balloc+0x50>
 80055f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055fa:	b9b8      	cbnz	r0, 800562c <_Balloc+0x68>
 80055fc:	2101      	movs	r1, #1
 80055fe:	fa01 f605 	lsl.w	r6, r1, r5
 8005602:	1d72      	adds	r2, r6, #5
 8005604:	4620      	mov	r0, r4
 8005606:	0092      	lsls	r2, r2, #2
 8005608:	f000 fb5e 	bl	8005cc8 <_calloc_r>
 800560c:	b160      	cbz	r0, 8005628 <_Balloc+0x64>
 800560e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005612:	e00e      	b.n	8005632 <_Balloc+0x6e>
 8005614:	2221      	movs	r2, #33	; 0x21
 8005616:	2104      	movs	r1, #4
 8005618:	4620      	mov	r0, r4
 800561a:	f000 fb55 	bl	8005cc8 <_calloc_r>
 800561e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005620:	60f0      	str	r0, [r6, #12]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e4      	bne.n	80055f2 <_Balloc+0x2e>
 8005628:	2000      	movs	r0, #0
 800562a:	bd70      	pop	{r4, r5, r6, pc}
 800562c:	6802      	ldr	r2, [r0, #0]
 800562e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005632:	2300      	movs	r3, #0
 8005634:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005638:	e7f7      	b.n	800562a <_Balloc+0x66>
 800563a:	bf00      	nop
 800563c:	08006de9 	.word	0x08006de9
 8005640:	08006e6c 	.word	0x08006e6c

08005644 <_Bfree>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005648:	4605      	mov	r5, r0
 800564a:	460c      	mov	r4, r1
 800564c:	b976      	cbnz	r6, 800566c <_Bfree+0x28>
 800564e:	2010      	movs	r0, #16
 8005650:	f7ff ff94 	bl	800557c <malloc>
 8005654:	4602      	mov	r2, r0
 8005656:	6268      	str	r0, [r5, #36]	; 0x24
 8005658:	b920      	cbnz	r0, 8005664 <_Bfree+0x20>
 800565a:	218a      	movs	r1, #138	; 0x8a
 800565c:	4b08      	ldr	r3, [pc, #32]	; (8005680 <_Bfree+0x3c>)
 800565e:	4809      	ldr	r0, [pc, #36]	; (8005684 <_Bfree+0x40>)
 8005660:	f000 fd8e 	bl	8006180 <__assert_func>
 8005664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005668:	6006      	str	r6, [r0, #0]
 800566a:	60c6      	str	r6, [r0, #12]
 800566c:	b13c      	cbz	r4, 800567e <_Bfree+0x3a>
 800566e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005670:	6862      	ldr	r2, [r4, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005678:	6021      	str	r1, [r4, #0]
 800567a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800567e:	bd70      	pop	{r4, r5, r6, pc}
 8005680:	08006de9 	.word	0x08006de9
 8005684:	08006e6c 	.word	0x08006e6c

08005688 <__multadd>:
 8005688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800568c:	4607      	mov	r7, r0
 800568e:	460c      	mov	r4, r1
 8005690:	461e      	mov	r6, r3
 8005692:	2000      	movs	r0, #0
 8005694:	690d      	ldr	r5, [r1, #16]
 8005696:	f101 0c14 	add.w	ip, r1, #20
 800569a:	f8dc 3000 	ldr.w	r3, [ip]
 800569e:	3001      	adds	r0, #1
 80056a0:	b299      	uxth	r1, r3
 80056a2:	fb02 6101 	mla	r1, r2, r1, r6
 80056a6:	0c1e      	lsrs	r6, r3, #16
 80056a8:	0c0b      	lsrs	r3, r1, #16
 80056aa:	fb02 3306 	mla	r3, r2, r6, r3
 80056ae:	b289      	uxth	r1, r1
 80056b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056b4:	4285      	cmp	r5, r0
 80056b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056ba:	f84c 1b04 	str.w	r1, [ip], #4
 80056be:	dcec      	bgt.n	800569a <__multadd+0x12>
 80056c0:	b30e      	cbz	r6, 8005706 <__multadd+0x7e>
 80056c2:	68a3      	ldr	r3, [r4, #8]
 80056c4:	42ab      	cmp	r3, r5
 80056c6:	dc19      	bgt.n	80056fc <__multadd+0x74>
 80056c8:	6861      	ldr	r1, [r4, #4]
 80056ca:	4638      	mov	r0, r7
 80056cc:	3101      	adds	r1, #1
 80056ce:	f7ff ff79 	bl	80055c4 <_Balloc>
 80056d2:	4680      	mov	r8, r0
 80056d4:	b928      	cbnz	r0, 80056e2 <__multadd+0x5a>
 80056d6:	4602      	mov	r2, r0
 80056d8:	21b5      	movs	r1, #181	; 0xb5
 80056da:	4b0c      	ldr	r3, [pc, #48]	; (800570c <__multadd+0x84>)
 80056dc:	480c      	ldr	r0, [pc, #48]	; (8005710 <__multadd+0x88>)
 80056de:	f000 fd4f 	bl	8006180 <__assert_func>
 80056e2:	6922      	ldr	r2, [r4, #16]
 80056e4:	f104 010c 	add.w	r1, r4, #12
 80056e8:	3202      	adds	r2, #2
 80056ea:	0092      	lsls	r2, r2, #2
 80056ec:	300c      	adds	r0, #12
 80056ee:	f7ff ff5b 	bl	80055a8 <memcpy>
 80056f2:	4621      	mov	r1, r4
 80056f4:	4638      	mov	r0, r7
 80056f6:	f7ff ffa5 	bl	8005644 <_Bfree>
 80056fa:	4644      	mov	r4, r8
 80056fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005700:	3501      	adds	r5, #1
 8005702:	615e      	str	r6, [r3, #20]
 8005704:	6125      	str	r5, [r4, #16]
 8005706:	4620      	mov	r0, r4
 8005708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800570c:	08006e5b 	.word	0x08006e5b
 8005710:	08006e6c 	.word	0x08006e6c

08005714 <__hi0bits>:
 8005714:	0c02      	lsrs	r2, r0, #16
 8005716:	0412      	lsls	r2, r2, #16
 8005718:	4603      	mov	r3, r0
 800571a:	b9ca      	cbnz	r2, 8005750 <__hi0bits+0x3c>
 800571c:	0403      	lsls	r3, r0, #16
 800571e:	2010      	movs	r0, #16
 8005720:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005724:	bf04      	itt	eq
 8005726:	021b      	lsleq	r3, r3, #8
 8005728:	3008      	addeq	r0, #8
 800572a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800572e:	bf04      	itt	eq
 8005730:	011b      	lsleq	r3, r3, #4
 8005732:	3004      	addeq	r0, #4
 8005734:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005738:	bf04      	itt	eq
 800573a:	009b      	lsleq	r3, r3, #2
 800573c:	3002      	addeq	r0, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	db05      	blt.n	800574e <__hi0bits+0x3a>
 8005742:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005746:	f100 0001 	add.w	r0, r0, #1
 800574a:	bf08      	it	eq
 800574c:	2020      	moveq	r0, #32
 800574e:	4770      	bx	lr
 8005750:	2000      	movs	r0, #0
 8005752:	e7e5      	b.n	8005720 <__hi0bits+0xc>

08005754 <__lo0bits>:
 8005754:	6803      	ldr	r3, [r0, #0]
 8005756:	4602      	mov	r2, r0
 8005758:	f013 0007 	ands.w	r0, r3, #7
 800575c:	d00b      	beq.n	8005776 <__lo0bits+0x22>
 800575e:	07d9      	lsls	r1, r3, #31
 8005760:	d421      	bmi.n	80057a6 <__lo0bits+0x52>
 8005762:	0798      	lsls	r0, r3, #30
 8005764:	bf49      	itett	mi
 8005766:	085b      	lsrmi	r3, r3, #1
 8005768:	089b      	lsrpl	r3, r3, #2
 800576a:	2001      	movmi	r0, #1
 800576c:	6013      	strmi	r3, [r2, #0]
 800576e:	bf5c      	itt	pl
 8005770:	2002      	movpl	r0, #2
 8005772:	6013      	strpl	r3, [r2, #0]
 8005774:	4770      	bx	lr
 8005776:	b299      	uxth	r1, r3
 8005778:	b909      	cbnz	r1, 800577e <__lo0bits+0x2a>
 800577a:	2010      	movs	r0, #16
 800577c:	0c1b      	lsrs	r3, r3, #16
 800577e:	b2d9      	uxtb	r1, r3
 8005780:	b909      	cbnz	r1, 8005786 <__lo0bits+0x32>
 8005782:	3008      	adds	r0, #8
 8005784:	0a1b      	lsrs	r3, r3, #8
 8005786:	0719      	lsls	r1, r3, #28
 8005788:	bf04      	itt	eq
 800578a:	091b      	lsreq	r3, r3, #4
 800578c:	3004      	addeq	r0, #4
 800578e:	0799      	lsls	r1, r3, #30
 8005790:	bf04      	itt	eq
 8005792:	089b      	lsreq	r3, r3, #2
 8005794:	3002      	addeq	r0, #2
 8005796:	07d9      	lsls	r1, r3, #31
 8005798:	d403      	bmi.n	80057a2 <__lo0bits+0x4e>
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	f100 0001 	add.w	r0, r0, #1
 80057a0:	d003      	beq.n	80057aa <__lo0bits+0x56>
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	4770      	bx	lr
 80057a6:	2000      	movs	r0, #0
 80057a8:	4770      	bx	lr
 80057aa:	2020      	movs	r0, #32
 80057ac:	4770      	bx	lr
	...

080057b0 <__i2b>:
 80057b0:	b510      	push	{r4, lr}
 80057b2:	460c      	mov	r4, r1
 80057b4:	2101      	movs	r1, #1
 80057b6:	f7ff ff05 	bl	80055c4 <_Balloc>
 80057ba:	4602      	mov	r2, r0
 80057bc:	b928      	cbnz	r0, 80057ca <__i2b+0x1a>
 80057be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80057c2:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <__i2b+0x24>)
 80057c4:	4804      	ldr	r0, [pc, #16]	; (80057d8 <__i2b+0x28>)
 80057c6:	f000 fcdb 	bl	8006180 <__assert_func>
 80057ca:	2301      	movs	r3, #1
 80057cc:	6144      	str	r4, [r0, #20]
 80057ce:	6103      	str	r3, [r0, #16]
 80057d0:	bd10      	pop	{r4, pc}
 80057d2:	bf00      	nop
 80057d4:	08006e5b 	.word	0x08006e5b
 80057d8:	08006e6c 	.word	0x08006e6c

080057dc <__multiply>:
 80057dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e0:	4691      	mov	r9, r2
 80057e2:	690a      	ldr	r2, [r1, #16]
 80057e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80057e8:	460c      	mov	r4, r1
 80057ea:	429a      	cmp	r2, r3
 80057ec:	bfbe      	ittt	lt
 80057ee:	460b      	movlt	r3, r1
 80057f0:	464c      	movlt	r4, r9
 80057f2:	4699      	movlt	r9, r3
 80057f4:	6927      	ldr	r7, [r4, #16]
 80057f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80057fa:	68a3      	ldr	r3, [r4, #8]
 80057fc:	6861      	ldr	r1, [r4, #4]
 80057fe:	eb07 060a 	add.w	r6, r7, sl
 8005802:	42b3      	cmp	r3, r6
 8005804:	b085      	sub	sp, #20
 8005806:	bfb8      	it	lt
 8005808:	3101      	addlt	r1, #1
 800580a:	f7ff fedb 	bl	80055c4 <_Balloc>
 800580e:	b930      	cbnz	r0, 800581e <__multiply+0x42>
 8005810:	4602      	mov	r2, r0
 8005812:	f240 115d 	movw	r1, #349	; 0x15d
 8005816:	4b43      	ldr	r3, [pc, #268]	; (8005924 <__multiply+0x148>)
 8005818:	4843      	ldr	r0, [pc, #268]	; (8005928 <__multiply+0x14c>)
 800581a:	f000 fcb1 	bl	8006180 <__assert_func>
 800581e:	f100 0514 	add.w	r5, r0, #20
 8005822:	462b      	mov	r3, r5
 8005824:	2200      	movs	r2, #0
 8005826:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800582a:	4543      	cmp	r3, r8
 800582c:	d321      	bcc.n	8005872 <__multiply+0x96>
 800582e:	f104 0314 	add.w	r3, r4, #20
 8005832:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005836:	f109 0314 	add.w	r3, r9, #20
 800583a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800583e:	9202      	str	r2, [sp, #8]
 8005840:	1b3a      	subs	r2, r7, r4
 8005842:	3a15      	subs	r2, #21
 8005844:	f022 0203 	bic.w	r2, r2, #3
 8005848:	3204      	adds	r2, #4
 800584a:	f104 0115 	add.w	r1, r4, #21
 800584e:	428f      	cmp	r7, r1
 8005850:	bf38      	it	cc
 8005852:	2204      	movcc	r2, #4
 8005854:	9201      	str	r2, [sp, #4]
 8005856:	9a02      	ldr	r2, [sp, #8]
 8005858:	9303      	str	r3, [sp, #12]
 800585a:	429a      	cmp	r2, r3
 800585c:	d80c      	bhi.n	8005878 <__multiply+0x9c>
 800585e:	2e00      	cmp	r6, #0
 8005860:	dd03      	ble.n	800586a <__multiply+0x8e>
 8005862:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005866:	2b00      	cmp	r3, #0
 8005868:	d059      	beq.n	800591e <__multiply+0x142>
 800586a:	6106      	str	r6, [r0, #16]
 800586c:	b005      	add	sp, #20
 800586e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005872:	f843 2b04 	str.w	r2, [r3], #4
 8005876:	e7d8      	b.n	800582a <__multiply+0x4e>
 8005878:	f8b3 a000 	ldrh.w	sl, [r3]
 800587c:	f1ba 0f00 	cmp.w	sl, #0
 8005880:	d023      	beq.n	80058ca <__multiply+0xee>
 8005882:	46a9      	mov	r9, r5
 8005884:	f04f 0c00 	mov.w	ip, #0
 8005888:	f104 0e14 	add.w	lr, r4, #20
 800588c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005890:	f8d9 1000 	ldr.w	r1, [r9]
 8005894:	fa1f fb82 	uxth.w	fp, r2
 8005898:	b289      	uxth	r1, r1
 800589a:	fb0a 110b 	mla	r1, sl, fp, r1
 800589e:	4461      	add	r1, ip
 80058a0:	f8d9 c000 	ldr.w	ip, [r9]
 80058a4:	0c12      	lsrs	r2, r2, #16
 80058a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80058aa:	fb0a c202 	mla	r2, sl, r2, ip
 80058ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80058b2:	b289      	uxth	r1, r1
 80058b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80058b8:	4577      	cmp	r7, lr
 80058ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058be:	f849 1b04 	str.w	r1, [r9], #4
 80058c2:	d8e3      	bhi.n	800588c <__multiply+0xb0>
 80058c4:	9a01      	ldr	r2, [sp, #4]
 80058c6:	f845 c002 	str.w	ip, [r5, r2]
 80058ca:	9a03      	ldr	r2, [sp, #12]
 80058cc:	3304      	adds	r3, #4
 80058ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80058d2:	f1b9 0f00 	cmp.w	r9, #0
 80058d6:	d020      	beq.n	800591a <__multiply+0x13e>
 80058d8:	46ae      	mov	lr, r5
 80058da:	f04f 0a00 	mov.w	sl, #0
 80058de:	6829      	ldr	r1, [r5, #0]
 80058e0:	f104 0c14 	add.w	ip, r4, #20
 80058e4:	f8bc b000 	ldrh.w	fp, [ip]
 80058e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80058ec:	b289      	uxth	r1, r1
 80058ee:	fb09 220b 	mla	r2, r9, fp, r2
 80058f2:	4492      	add	sl, r2
 80058f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80058f8:	f84e 1b04 	str.w	r1, [lr], #4
 80058fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005900:	f8be 1000 	ldrh.w	r1, [lr]
 8005904:	0c12      	lsrs	r2, r2, #16
 8005906:	fb09 1102 	mla	r1, r9, r2, r1
 800590a:	4567      	cmp	r7, ip
 800590c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005910:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005914:	d8e6      	bhi.n	80058e4 <__multiply+0x108>
 8005916:	9a01      	ldr	r2, [sp, #4]
 8005918:	50a9      	str	r1, [r5, r2]
 800591a:	3504      	adds	r5, #4
 800591c:	e79b      	b.n	8005856 <__multiply+0x7a>
 800591e:	3e01      	subs	r6, #1
 8005920:	e79d      	b.n	800585e <__multiply+0x82>
 8005922:	bf00      	nop
 8005924:	08006e5b 	.word	0x08006e5b
 8005928:	08006e6c 	.word	0x08006e6c

0800592c <__pow5mult>:
 800592c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005930:	4615      	mov	r5, r2
 8005932:	f012 0203 	ands.w	r2, r2, #3
 8005936:	4606      	mov	r6, r0
 8005938:	460f      	mov	r7, r1
 800593a:	d007      	beq.n	800594c <__pow5mult+0x20>
 800593c:	4c25      	ldr	r4, [pc, #148]	; (80059d4 <__pow5mult+0xa8>)
 800593e:	3a01      	subs	r2, #1
 8005940:	2300      	movs	r3, #0
 8005942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005946:	f7ff fe9f 	bl	8005688 <__multadd>
 800594a:	4607      	mov	r7, r0
 800594c:	10ad      	asrs	r5, r5, #2
 800594e:	d03d      	beq.n	80059cc <__pow5mult+0xa0>
 8005950:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005952:	b97c      	cbnz	r4, 8005974 <__pow5mult+0x48>
 8005954:	2010      	movs	r0, #16
 8005956:	f7ff fe11 	bl	800557c <malloc>
 800595a:	4602      	mov	r2, r0
 800595c:	6270      	str	r0, [r6, #36]	; 0x24
 800595e:	b928      	cbnz	r0, 800596c <__pow5mult+0x40>
 8005960:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005964:	4b1c      	ldr	r3, [pc, #112]	; (80059d8 <__pow5mult+0xac>)
 8005966:	481d      	ldr	r0, [pc, #116]	; (80059dc <__pow5mult+0xb0>)
 8005968:	f000 fc0a 	bl	8006180 <__assert_func>
 800596c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005970:	6004      	str	r4, [r0, #0]
 8005972:	60c4      	str	r4, [r0, #12]
 8005974:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005978:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800597c:	b94c      	cbnz	r4, 8005992 <__pow5mult+0x66>
 800597e:	f240 2171 	movw	r1, #625	; 0x271
 8005982:	4630      	mov	r0, r6
 8005984:	f7ff ff14 	bl	80057b0 <__i2b>
 8005988:	2300      	movs	r3, #0
 800598a:	4604      	mov	r4, r0
 800598c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005990:	6003      	str	r3, [r0, #0]
 8005992:	f04f 0900 	mov.w	r9, #0
 8005996:	07eb      	lsls	r3, r5, #31
 8005998:	d50a      	bpl.n	80059b0 <__pow5mult+0x84>
 800599a:	4639      	mov	r1, r7
 800599c:	4622      	mov	r2, r4
 800599e:	4630      	mov	r0, r6
 80059a0:	f7ff ff1c 	bl	80057dc <__multiply>
 80059a4:	4680      	mov	r8, r0
 80059a6:	4639      	mov	r1, r7
 80059a8:	4630      	mov	r0, r6
 80059aa:	f7ff fe4b 	bl	8005644 <_Bfree>
 80059ae:	4647      	mov	r7, r8
 80059b0:	106d      	asrs	r5, r5, #1
 80059b2:	d00b      	beq.n	80059cc <__pow5mult+0xa0>
 80059b4:	6820      	ldr	r0, [r4, #0]
 80059b6:	b938      	cbnz	r0, 80059c8 <__pow5mult+0x9c>
 80059b8:	4622      	mov	r2, r4
 80059ba:	4621      	mov	r1, r4
 80059bc:	4630      	mov	r0, r6
 80059be:	f7ff ff0d 	bl	80057dc <__multiply>
 80059c2:	6020      	str	r0, [r4, #0]
 80059c4:	f8c0 9000 	str.w	r9, [r0]
 80059c8:	4604      	mov	r4, r0
 80059ca:	e7e4      	b.n	8005996 <__pow5mult+0x6a>
 80059cc:	4638      	mov	r0, r7
 80059ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059d2:	bf00      	nop
 80059d4:	08006fb8 	.word	0x08006fb8
 80059d8:	08006de9 	.word	0x08006de9
 80059dc:	08006e6c 	.word	0x08006e6c

080059e0 <__lshift>:
 80059e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e4:	460c      	mov	r4, r1
 80059e6:	4607      	mov	r7, r0
 80059e8:	4691      	mov	r9, r2
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	6849      	ldr	r1, [r1, #4]
 80059ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80059f2:	68a3      	ldr	r3, [r4, #8]
 80059f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059f8:	f108 0601 	add.w	r6, r8, #1
 80059fc:	42b3      	cmp	r3, r6
 80059fe:	db0b      	blt.n	8005a18 <__lshift+0x38>
 8005a00:	4638      	mov	r0, r7
 8005a02:	f7ff fddf 	bl	80055c4 <_Balloc>
 8005a06:	4605      	mov	r5, r0
 8005a08:	b948      	cbnz	r0, 8005a1e <__lshift+0x3e>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005a10:	4b29      	ldr	r3, [pc, #164]	; (8005ab8 <__lshift+0xd8>)
 8005a12:	482a      	ldr	r0, [pc, #168]	; (8005abc <__lshift+0xdc>)
 8005a14:	f000 fbb4 	bl	8006180 <__assert_func>
 8005a18:	3101      	adds	r1, #1
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	e7ee      	b.n	80059fc <__lshift+0x1c>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f100 0114 	add.w	r1, r0, #20
 8005a24:	f100 0210 	add.w	r2, r0, #16
 8005a28:	4618      	mov	r0, r3
 8005a2a:	4553      	cmp	r3, sl
 8005a2c:	db37      	blt.n	8005a9e <__lshift+0xbe>
 8005a2e:	6920      	ldr	r0, [r4, #16]
 8005a30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a34:	f104 0314 	add.w	r3, r4, #20
 8005a38:	f019 091f 	ands.w	r9, r9, #31
 8005a3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005a44:	d02f      	beq.n	8005aa6 <__lshift+0xc6>
 8005a46:	468a      	mov	sl, r1
 8005a48:	f04f 0c00 	mov.w	ip, #0
 8005a4c:	f1c9 0e20 	rsb	lr, r9, #32
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	fa02 f209 	lsl.w	r2, r2, r9
 8005a56:	ea42 020c 	orr.w	r2, r2, ip
 8005a5a:	f84a 2b04 	str.w	r2, [sl], #4
 8005a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a62:	4298      	cmp	r0, r3
 8005a64:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005a68:	d8f2      	bhi.n	8005a50 <__lshift+0x70>
 8005a6a:	1b03      	subs	r3, r0, r4
 8005a6c:	3b15      	subs	r3, #21
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	3304      	adds	r3, #4
 8005a74:	f104 0215 	add.w	r2, r4, #21
 8005a78:	4290      	cmp	r0, r2
 8005a7a:	bf38      	it	cc
 8005a7c:	2304      	movcc	r3, #4
 8005a7e:	f841 c003 	str.w	ip, [r1, r3]
 8005a82:	f1bc 0f00 	cmp.w	ip, #0
 8005a86:	d001      	beq.n	8005a8c <__lshift+0xac>
 8005a88:	f108 0602 	add.w	r6, r8, #2
 8005a8c:	3e01      	subs	r6, #1
 8005a8e:	4638      	mov	r0, r7
 8005a90:	4621      	mov	r1, r4
 8005a92:	612e      	str	r6, [r5, #16]
 8005a94:	f7ff fdd6 	bl	8005644 <_Bfree>
 8005a98:	4628      	mov	r0, r5
 8005a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	e7c1      	b.n	8005a2a <__lshift+0x4a>
 8005aa6:	3904      	subs	r1, #4
 8005aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aac:	4298      	cmp	r0, r3
 8005aae:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ab2:	d8f9      	bhi.n	8005aa8 <__lshift+0xc8>
 8005ab4:	e7ea      	b.n	8005a8c <__lshift+0xac>
 8005ab6:	bf00      	nop
 8005ab8:	08006e5b 	.word	0x08006e5b
 8005abc:	08006e6c 	.word	0x08006e6c

08005ac0 <__mcmp>:
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	690a      	ldr	r2, [r1, #16]
 8005ac4:	6900      	ldr	r0, [r0, #16]
 8005ac6:	b530      	push	{r4, r5, lr}
 8005ac8:	1a80      	subs	r0, r0, r2
 8005aca:	d10d      	bne.n	8005ae8 <__mcmp+0x28>
 8005acc:	3314      	adds	r3, #20
 8005ace:	3114      	adds	r1, #20
 8005ad0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ad4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ad8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005adc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ae0:	4295      	cmp	r5, r2
 8005ae2:	d002      	beq.n	8005aea <__mcmp+0x2a>
 8005ae4:	d304      	bcc.n	8005af0 <__mcmp+0x30>
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	bd30      	pop	{r4, r5, pc}
 8005aea:	42a3      	cmp	r3, r4
 8005aec:	d3f4      	bcc.n	8005ad8 <__mcmp+0x18>
 8005aee:	e7fb      	b.n	8005ae8 <__mcmp+0x28>
 8005af0:	f04f 30ff 	mov.w	r0, #4294967295
 8005af4:	e7f8      	b.n	8005ae8 <__mcmp+0x28>
	...

08005af8 <__mdiff>:
 8005af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afc:	460d      	mov	r5, r1
 8005afe:	4607      	mov	r7, r0
 8005b00:	4611      	mov	r1, r2
 8005b02:	4628      	mov	r0, r5
 8005b04:	4614      	mov	r4, r2
 8005b06:	f7ff ffdb 	bl	8005ac0 <__mcmp>
 8005b0a:	1e06      	subs	r6, r0, #0
 8005b0c:	d111      	bne.n	8005b32 <__mdiff+0x3a>
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4638      	mov	r0, r7
 8005b12:	f7ff fd57 	bl	80055c4 <_Balloc>
 8005b16:	4602      	mov	r2, r0
 8005b18:	b928      	cbnz	r0, 8005b26 <__mdiff+0x2e>
 8005b1a:	f240 2132 	movw	r1, #562	; 0x232
 8005b1e:	4b3a      	ldr	r3, [pc, #232]	; (8005c08 <__mdiff+0x110>)
 8005b20:	483a      	ldr	r0, [pc, #232]	; (8005c0c <__mdiff+0x114>)
 8005b22:	f000 fb2d 	bl	8006180 <__assert_func>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b32:	bfa4      	itt	ge
 8005b34:	4623      	movge	r3, r4
 8005b36:	462c      	movge	r4, r5
 8005b38:	4638      	mov	r0, r7
 8005b3a:	6861      	ldr	r1, [r4, #4]
 8005b3c:	bfa6      	itte	ge
 8005b3e:	461d      	movge	r5, r3
 8005b40:	2600      	movge	r6, #0
 8005b42:	2601      	movlt	r6, #1
 8005b44:	f7ff fd3e 	bl	80055c4 <_Balloc>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	b918      	cbnz	r0, 8005b54 <__mdiff+0x5c>
 8005b4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005b50:	4b2d      	ldr	r3, [pc, #180]	; (8005c08 <__mdiff+0x110>)
 8005b52:	e7e5      	b.n	8005b20 <__mdiff+0x28>
 8005b54:	f102 0814 	add.w	r8, r2, #20
 8005b58:	46c2      	mov	sl, r8
 8005b5a:	f04f 0c00 	mov.w	ip, #0
 8005b5e:	6927      	ldr	r7, [r4, #16]
 8005b60:	60c6      	str	r6, [r0, #12]
 8005b62:	692e      	ldr	r6, [r5, #16]
 8005b64:	f104 0014 	add.w	r0, r4, #20
 8005b68:	f105 0914 	add.w	r9, r5, #20
 8005b6c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005b70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005b74:	3410      	adds	r4, #16
 8005b76:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005b7a:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b7e:	fa1f f18b 	uxth.w	r1, fp
 8005b82:	448c      	add	ip, r1
 8005b84:	b299      	uxth	r1, r3
 8005b86:	0c1b      	lsrs	r3, r3, #16
 8005b88:	ebac 0101 	sub.w	r1, ip, r1
 8005b8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005b90:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005b94:	b289      	uxth	r1, r1
 8005b96:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005b9a:	454e      	cmp	r6, r9
 8005b9c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005ba0:	f84a 3b04 	str.w	r3, [sl], #4
 8005ba4:	d8e7      	bhi.n	8005b76 <__mdiff+0x7e>
 8005ba6:	1b73      	subs	r3, r6, r5
 8005ba8:	3b15      	subs	r3, #21
 8005baa:	f023 0303 	bic.w	r3, r3, #3
 8005bae:	3515      	adds	r5, #21
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	42ae      	cmp	r6, r5
 8005bb4:	bf38      	it	cc
 8005bb6:	2304      	movcc	r3, #4
 8005bb8:	4418      	add	r0, r3
 8005bba:	4443      	add	r3, r8
 8005bbc:	461e      	mov	r6, r3
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	4575      	cmp	r5, lr
 8005bc2:	d30e      	bcc.n	8005be2 <__mdiff+0xea>
 8005bc4:	f10e 0103 	add.w	r1, lr, #3
 8005bc8:	1a09      	subs	r1, r1, r0
 8005bca:	f021 0103 	bic.w	r1, r1, #3
 8005bce:	3803      	subs	r0, #3
 8005bd0:	4586      	cmp	lr, r0
 8005bd2:	bf38      	it	cc
 8005bd4:	2100      	movcc	r1, #0
 8005bd6:	4419      	add	r1, r3
 8005bd8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005bdc:	b18b      	cbz	r3, 8005c02 <__mdiff+0x10a>
 8005bde:	6117      	str	r7, [r2, #16]
 8005be0:	e7a4      	b.n	8005b2c <__mdiff+0x34>
 8005be2:	f855 8b04 	ldr.w	r8, [r5], #4
 8005be6:	fa1f f188 	uxth.w	r1, r8
 8005bea:	4461      	add	r1, ip
 8005bec:	140c      	asrs	r4, r1, #16
 8005bee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005bf2:	b289      	uxth	r1, r1
 8005bf4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005bf8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005bfc:	f846 1b04 	str.w	r1, [r6], #4
 8005c00:	e7de      	b.n	8005bc0 <__mdiff+0xc8>
 8005c02:	3f01      	subs	r7, #1
 8005c04:	e7e8      	b.n	8005bd8 <__mdiff+0xe0>
 8005c06:	bf00      	nop
 8005c08:	08006e5b 	.word	0x08006e5b
 8005c0c:	08006e6c 	.word	0x08006e6c

08005c10 <__d2b>:
 8005c10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c14:	2101      	movs	r1, #1
 8005c16:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005c1a:	4690      	mov	r8, r2
 8005c1c:	461d      	mov	r5, r3
 8005c1e:	f7ff fcd1 	bl	80055c4 <_Balloc>
 8005c22:	4604      	mov	r4, r0
 8005c24:	b930      	cbnz	r0, 8005c34 <__d2b+0x24>
 8005c26:	4602      	mov	r2, r0
 8005c28:	f240 310a 	movw	r1, #778	; 0x30a
 8005c2c:	4b24      	ldr	r3, [pc, #144]	; (8005cc0 <__d2b+0xb0>)
 8005c2e:	4825      	ldr	r0, [pc, #148]	; (8005cc4 <__d2b+0xb4>)
 8005c30:	f000 faa6 	bl	8006180 <__assert_func>
 8005c34:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005c38:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005c3c:	bb2d      	cbnz	r5, 8005c8a <__d2b+0x7a>
 8005c3e:	9301      	str	r3, [sp, #4]
 8005c40:	f1b8 0300 	subs.w	r3, r8, #0
 8005c44:	d026      	beq.n	8005c94 <__d2b+0x84>
 8005c46:	4668      	mov	r0, sp
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	f7ff fd83 	bl	8005754 <__lo0bits>
 8005c4e:	9900      	ldr	r1, [sp, #0]
 8005c50:	b1f0      	cbz	r0, 8005c90 <__d2b+0x80>
 8005c52:	9a01      	ldr	r2, [sp, #4]
 8005c54:	f1c0 0320 	rsb	r3, r0, #32
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	40c2      	lsrs	r2, r0
 8005c60:	6163      	str	r3, [r4, #20]
 8005c62:	9201      	str	r2, [sp, #4]
 8005c64:	9b01      	ldr	r3, [sp, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	bf14      	ite	ne
 8005c6a:	2102      	movne	r1, #2
 8005c6c:	2101      	moveq	r1, #1
 8005c6e:	61a3      	str	r3, [r4, #24]
 8005c70:	6121      	str	r1, [r4, #16]
 8005c72:	b1c5      	cbz	r5, 8005ca6 <__d2b+0x96>
 8005c74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c78:	4405      	add	r5, r0
 8005c7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c7e:	603d      	str	r5, [r7, #0]
 8005c80:	6030      	str	r0, [r6, #0]
 8005c82:	4620      	mov	r0, r4
 8005c84:	b002      	add	sp, #8
 8005c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c8e:	e7d6      	b.n	8005c3e <__d2b+0x2e>
 8005c90:	6161      	str	r1, [r4, #20]
 8005c92:	e7e7      	b.n	8005c64 <__d2b+0x54>
 8005c94:	a801      	add	r0, sp, #4
 8005c96:	f7ff fd5d 	bl	8005754 <__lo0bits>
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	9b01      	ldr	r3, [sp, #4]
 8005c9e:	6121      	str	r1, [r4, #16]
 8005ca0:	6163      	str	r3, [r4, #20]
 8005ca2:	3020      	adds	r0, #32
 8005ca4:	e7e5      	b.n	8005c72 <__d2b+0x62>
 8005ca6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005caa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005cae:	6038      	str	r0, [r7, #0]
 8005cb0:	6918      	ldr	r0, [r3, #16]
 8005cb2:	f7ff fd2f 	bl	8005714 <__hi0bits>
 8005cb6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005cba:	6031      	str	r1, [r6, #0]
 8005cbc:	e7e1      	b.n	8005c82 <__d2b+0x72>
 8005cbe:	bf00      	nop
 8005cc0:	08006e5b 	.word	0x08006e5b
 8005cc4:	08006e6c 	.word	0x08006e6c

08005cc8 <_calloc_r>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	fba1 5402 	umull	r5, r4, r1, r2
 8005cce:	b934      	cbnz	r4, 8005cde <_calloc_r+0x16>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	f000 f875 	bl	8005dc0 <_malloc_r>
 8005cd6:	4606      	mov	r6, r0
 8005cd8:	b928      	cbnz	r0, 8005ce6 <_calloc_r+0x1e>
 8005cda:	4630      	mov	r0, r6
 8005cdc:	bd70      	pop	{r4, r5, r6, pc}
 8005cde:	220c      	movs	r2, #12
 8005ce0:	2600      	movs	r6, #0
 8005ce2:	6002      	str	r2, [r0, #0]
 8005ce4:	e7f9      	b.n	8005cda <_calloc_r+0x12>
 8005ce6:	462a      	mov	r2, r5
 8005ce8:	4621      	mov	r1, r4
 8005cea:	f7fe f92b 	bl	8003f44 <memset>
 8005cee:	e7f4      	b.n	8005cda <_calloc_r+0x12>

08005cf0 <_free_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	d040      	beq.n	8005d7a <_free_r+0x8a>
 8005cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cfc:	1f0c      	subs	r4, r1, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	bfb8      	it	lt
 8005d02:	18e4      	addlt	r4, r4, r3
 8005d04:	f000 fa98 	bl	8006238 <__malloc_lock>
 8005d08:	4a1c      	ldr	r2, [pc, #112]	; (8005d7c <_free_r+0x8c>)
 8005d0a:	6813      	ldr	r3, [r2, #0]
 8005d0c:	b933      	cbnz	r3, 8005d1c <_free_r+0x2c>
 8005d0e:	6063      	str	r3, [r4, #4]
 8005d10:	6014      	str	r4, [r2, #0]
 8005d12:	4628      	mov	r0, r5
 8005d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d18:	f000 ba94 	b.w	8006244 <__malloc_unlock>
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	d908      	bls.n	8005d32 <_free_r+0x42>
 8005d20:	6820      	ldr	r0, [r4, #0]
 8005d22:	1821      	adds	r1, r4, r0
 8005d24:	428b      	cmp	r3, r1
 8005d26:	bf01      	itttt	eq
 8005d28:	6819      	ldreq	r1, [r3, #0]
 8005d2a:	685b      	ldreq	r3, [r3, #4]
 8005d2c:	1809      	addeq	r1, r1, r0
 8005d2e:	6021      	streq	r1, [r4, #0]
 8005d30:	e7ed      	b.n	8005d0e <_free_r+0x1e>
 8005d32:	461a      	mov	r2, r3
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	b10b      	cbz	r3, 8005d3c <_free_r+0x4c>
 8005d38:	42a3      	cmp	r3, r4
 8005d3a:	d9fa      	bls.n	8005d32 <_free_r+0x42>
 8005d3c:	6811      	ldr	r1, [r2, #0]
 8005d3e:	1850      	adds	r0, r2, r1
 8005d40:	42a0      	cmp	r0, r4
 8005d42:	d10b      	bne.n	8005d5c <_free_r+0x6c>
 8005d44:	6820      	ldr	r0, [r4, #0]
 8005d46:	4401      	add	r1, r0
 8005d48:	1850      	adds	r0, r2, r1
 8005d4a:	4283      	cmp	r3, r0
 8005d4c:	6011      	str	r1, [r2, #0]
 8005d4e:	d1e0      	bne.n	8005d12 <_free_r+0x22>
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4401      	add	r1, r0
 8005d56:	6011      	str	r1, [r2, #0]
 8005d58:	6053      	str	r3, [r2, #4]
 8005d5a:	e7da      	b.n	8005d12 <_free_r+0x22>
 8005d5c:	d902      	bls.n	8005d64 <_free_r+0x74>
 8005d5e:	230c      	movs	r3, #12
 8005d60:	602b      	str	r3, [r5, #0]
 8005d62:	e7d6      	b.n	8005d12 <_free_r+0x22>
 8005d64:	6820      	ldr	r0, [r4, #0]
 8005d66:	1821      	adds	r1, r4, r0
 8005d68:	428b      	cmp	r3, r1
 8005d6a:	bf01      	itttt	eq
 8005d6c:	6819      	ldreq	r1, [r3, #0]
 8005d6e:	685b      	ldreq	r3, [r3, #4]
 8005d70:	1809      	addeq	r1, r1, r0
 8005d72:	6021      	streq	r1, [r4, #0]
 8005d74:	6063      	str	r3, [r4, #4]
 8005d76:	6054      	str	r4, [r2, #4]
 8005d78:	e7cb      	b.n	8005d12 <_free_r+0x22>
 8005d7a:	bd38      	pop	{r3, r4, r5, pc}
 8005d7c:	20000458 	.word	0x20000458

08005d80 <sbrk_aligned>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	4e0e      	ldr	r6, [pc, #56]	; (8005dbc <sbrk_aligned+0x3c>)
 8005d84:	460c      	mov	r4, r1
 8005d86:	6831      	ldr	r1, [r6, #0]
 8005d88:	4605      	mov	r5, r0
 8005d8a:	b911      	cbnz	r1, 8005d92 <sbrk_aligned+0x12>
 8005d8c:	f000 f9e8 	bl	8006160 <_sbrk_r>
 8005d90:	6030      	str	r0, [r6, #0]
 8005d92:	4621      	mov	r1, r4
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 f9e3 	bl	8006160 <_sbrk_r>
 8005d9a:	1c43      	adds	r3, r0, #1
 8005d9c:	d00a      	beq.n	8005db4 <sbrk_aligned+0x34>
 8005d9e:	1cc4      	adds	r4, r0, #3
 8005da0:	f024 0403 	bic.w	r4, r4, #3
 8005da4:	42a0      	cmp	r0, r4
 8005da6:	d007      	beq.n	8005db8 <sbrk_aligned+0x38>
 8005da8:	1a21      	subs	r1, r4, r0
 8005daa:	4628      	mov	r0, r5
 8005dac:	f000 f9d8 	bl	8006160 <_sbrk_r>
 8005db0:	3001      	adds	r0, #1
 8005db2:	d101      	bne.n	8005db8 <sbrk_aligned+0x38>
 8005db4:	f04f 34ff 	mov.w	r4, #4294967295
 8005db8:	4620      	mov	r0, r4
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	2000045c 	.word	0x2000045c

08005dc0 <_malloc_r>:
 8005dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc4:	1ccd      	adds	r5, r1, #3
 8005dc6:	f025 0503 	bic.w	r5, r5, #3
 8005dca:	3508      	adds	r5, #8
 8005dcc:	2d0c      	cmp	r5, #12
 8005dce:	bf38      	it	cc
 8005dd0:	250c      	movcc	r5, #12
 8005dd2:	2d00      	cmp	r5, #0
 8005dd4:	4607      	mov	r7, r0
 8005dd6:	db01      	blt.n	8005ddc <_malloc_r+0x1c>
 8005dd8:	42a9      	cmp	r1, r5
 8005dda:	d905      	bls.n	8005de8 <_malloc_r+0x28>
 8005ddc:	230c      	movs	r3, #12
 8005dde:	2600      	movs	r6, #0
 8005de0:	603b      	str	r3, [r7, #0]
 8005de2:	4630      	mov	r0, r6
 8005de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005de8:	4e2e      	ldr	r6, [pc, #184]	; (8005ea4 <_malloc_r+0xe4>)
 8005dea:	f000 fa25 	bl	8006238 <__malloc_lock>
 8005dee:	6833      	ldr	r3, [r6, #0]
 8005df0:	461c      	mov	r4, r3
 8005df2:	bb34      	cbnz	r4, 8005e42 <_malloc_r+0x82>
 8005df4:	4629      	mov	r1, r5
 8005df6:	4638      	mov	r0, r7
 8005df8:	f7ff ffc2 	bl	8005d80 <sbrk_aligned>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	4604      	mov	r4, r0
 8005e00:	d14d      	bne.n	8005e9e <_malloc_r+0xde>
 8005e02:	6834      	ldr	r4, [r6, #0]
 8005e04:	4626      	mov	r6, r4
 8005e06:	2e00      	cmp	r6, #0
 8005e08:	d140      	bne.n	8005e8c <_malloc_r+0xcc>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4638      	mov	r0, r7
 8005e10:	eb04 0803 	add.w	r8, r4, r3
 8005e14:	f000 f9a4 	bl	8006160 <_sbrk_r>
 8005e18:	4580      	cmp	r8, r0
 8005e1a:	d13a      	bne.n	8005e92 <_malloc_r+0xd2>
 8005e1c:	6821      	ldr	r1, [r4, #0]
 8005e1e:	3503      	adds	r5, #3
 8005e20:	1a6d      	subs	r5, r5, r1
 8005e22:	f025 0503 	bic.w	r5, r5, #3
 8005e26:	3508      	adds	r5, #8
 8005e28:	2d0c      	cmp	r5, #12
 8005e2a:	bf38      	it	cc
 8005e2c:	250c      	movcc	r5, #12
 8005e2e:	4638      	mov	r0, r7
 8005e30:	4629      	mov	r1, r5
 8005e32:	f7ff ffa5 	bl	8005d80 <sbrk_aligned>
 8005e36:	3001      	adds	r0, #1
 8005e38:	d02b      	beq.n	8005e92 <_malloc_r+0xd2>
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	442b      	add	r3, r5
 8005e3e:	6023      	str	r3, [r4, #0]
 8005e40:	e00e      	b.n	8005e60 <_malloc_r+0xa0>
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	1b52      	subs	r2, r2, r5
 8005e46:	d41e      	bmi.n	8005e86 <_malloc_r+0xc6>
 8005e48:	2a0b      	cmp	r2, #11
 8005e4a:	d916      	bls.n	8005e7a <_malloc_r+0xba>
 8005e4c:	1961      	adds	r1, r4, r5
 8005e4e:	42a3      	cmp	r3, r4
 8005e50:	6025      	str	r5, [r4, #0]
 8005e52:	bf18      	it	ne
 8005e54:	6059      	strne	r1, [r3, #4]
 8005e56:	6863      	ldr	r3, [r4, #4]
 8005e58:	bf08      	it	eq
 8005e5a:	6031      	streq	r1, [r6, #0]
 8005e5c:	5162      	str	r2, [r4, r5]
 8005e5e:	604b      	str	r3, [r1, #4]
 8005e60:	4638      	mov	r0, r7
 8005e62:	f104 060b 	add.w	r6, r4, #11
 8005e66:	f000 f9ed 	bl	8006244 <__malloc_unlock>
 8005e6a:	f026 0607 	bic.w	r6, r6, #7
 8005e6e:	1d23      	adds	r3, r4, #4
 8005e70:	1af2      	subs	r2, r6, r3
 8005e72:	d0b6      	beq.n	8005de2 <_malloc_r+0x22>
 8005e74:	1b9b      	subs	r3, r3, r6
 8005e76:	50a3      	str	r3, [r4, r2]
 8005e78:	e7b3      	b.n	8005de2 <_malloc_r+0x22>
 8005e7a:	6862      	ldr	r2, [r4, #4]
 8005e7c:	42a3      	cmp	r3, r4
 8005e7e:	bf0c      	ite	eq
 8005e80:	6032      	streq	r2, [r6, #0]
 8005e82:	605a      	strne	r2, [r3, #4]
 8005e84:	e7ec      	b.n	8005e60 <_malloc_r+0xa0>
 8005e86:	4623      	mov	r3, r4
 8005e88:	6864      	ldr	r4, [r4, #4]
 8005e8a:	e7b2      	b.n	8005df2 <_malloc_r+0x32>
 8005e8c:	4634      	mov	r4, r6
 8005e8e:	6876      	ldr	r6, [r6, #4]
 8005e90:	e7b9      	b.n	8005e06 <_malloc_r+0x46>
 8005e92:	230c      	movs	r3, #12
 8005e94:	4638      	mov	r0, r7
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	f000 f9d4 	bl	8006244 <__malloc_unlock>
 8005e9c:	e7a1      	b.n	8005de2 <_malloc_r+0x22>
 8005e9e:	6025      	str	r5, [r4, #0]
 8005ea0:	e7de      	b.n	8005e60 <_malloc_r+0xa0>
 8005ea2:	bf00      	nop
 8005ea4:	20000458 	.word	0x20000458

08005ea8 <__ssputs_r>:
 8005ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eac:	688e      	ldr	r6, [r1, #8]
 8005eae:	4682      	mov	sl, r0
 8005eb0:	429e      	cmp	r6, r3
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	4690      	mov	r8, r2
 8005eb6:	461f      	mov	r7, r3
 8005eb8:	d838      	bhi.n	8005f2c <__ssputs_r+0x84>
 8005eba:	898a      	ldrh	r2, [r1, #12]
 8005ebc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ec0:	d032      	beq.n	8005f28 <__ssputs_r+0x80>
 8005ec2:	6825      	ldr	r5, [r4, #0]
 8005ec4:	6909      	ldr	r1, [r1, #16]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	eba5 0901 	sub.w	r9, r5, r1
 8005ecc:	6965      	ldr	r5, [r4, #20]
 8005ece:	444b      	add	r3, r9
 8005ed0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ed4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ed8:	106d      	asrs	r5, r5, #1
 8005eda:	429d      	cmp	r5, r3
 8005edc:	bf38      	it	cc
 8005ede:	461d      	movcc	r5, r3
 8005ee0:	0553      	lsls	r3, r2, #21
 8005ee2:	d531      	bpl.n	8005f48 <__ssputs_r+0xa0>
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	f7ff ff6b 	bl	8005dc0 <_malloc_r>
 8005eea:	4606      	mov	r6, r0
 8005eec:	b950      	cbnz	r0, 8005f04 <__ssputs_r+0x5c>
 8005eee:	230c      	movs	r3, #12
 8005ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef4:	f8ca 3000 	str.w	r3, [sl]
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005efe:	81a3      	strh	r3, [r4, #12]
 8005f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f04:	464a      	mov	r2, r9
 8005f06:	6921      	ldr	r1, [r4, #16]
 8005f08:	f7ff fb4e 	bl	80055a8 <memcpy>
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f16:	81a3      	strh	r3, [r4, #12]
 8005f18:	6126      	str	r6, [r4, #16]
 8005f1a:	444e      	add	r6, r9
 8005f1c:	6026      	str	r6, [r4, #0]
 8005f1e:	463e      	mov	r6, r7
 8005f20:	6165      	str	r5, [r4, #20]
 8005f22:	eba5 0509 	sub.w	r5, r5, r9
 8005f26:	60a5      	str	r5, [r4, #8]
 8005f28:	42be      	cmp	r6, r7
 8005f2a:	d900      	bls.n	8005f2e <__ssputs_r+0x86>
 8005f2c:	463e      	mov	r6, r7
 8005f2e:	4632      	mov	r2, r6
 8005f30:	4641      	mov	r1, r8
 8005f32:	6820      	ldr	r0, [r4, #0]
 8005f34:	f000 f966 	bl	8006204 <memmove>
 8005f38:	68a3      	ldr	r3, [r4, #8]
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	1b9b      	subs	r3, r3, r6
 8005f3e:	60a3      	str	r3, [r4, #8]
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	4433      	add	r3, r6
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	e7db      	b.n	8005f00 <__ssputs_r+0x58>
 8005f48:	462a      	mov	r2, r5
 8005f4a:	f000 f981 	bl	8006250 <_realloc_r>
 8005f4e:	4606      	mov	r6, r0
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d1e1      	bne.n	8005f18 <__ssputs_r+0x70>
 8005f54:	4650      	mov	r0, sl
 8005f56:	6921      	ldr	r1, [r4, #16]
 8005f58:	f7ff feca 	bl	8005cf0 <_free_r>
 8005f5c:	e7c7      	b.n	8005eee <__ssputs_r+0x46>
	...

08005f60 <_svfiprintf_r>:
 8005f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f64:	4698      	mov	r8, r3
 8005f66:	898b      	ldrh	r3, [r1, #12]
 8005f68:	4607      	mov	r7, r0
 8005f6a:	061b      	lsls	r3, r3, #24
 8005f6c:	460d      	mov	r5, r1
 8005f6e:	4614      	mov	r4, r2
 8005f70:	b09d      	sub	sp, #116	; 0x74
 8005f72:	d50e      	bpl.n	8005f92 <_svfiprintf_r+0x32>
 8005f74:	690b      	ldr	r3, [r1, #16]
 8005f76:	b963      	cbnz	r3, 8005f92 <_svfiprintf_r+0x32>
 8005f78:	2140      	movs	r1, #64	; 0x40
 8005f7a:	f7ff ff21 	bl	8005dc0 <_malloc_r>
 8005f7e:	6028      	str	r0, [r5, #0]
 8005f80:	6128      	str	r0, [r5, #16]
 8005f82:	b920      	cbnz	r0, 8005f8e <_svfiprintf_r+0x2e>
 8005f84:	230c      	movs	r3, #12
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8c:	e0d1      	b.n	8006132 <_svfiprintf_r+0x1d2>
 8005f8e:	2340      	movs	r3, #64	; 0x40
 8005f90:	616b      	str	r3, [r5, #20]
 8005f92:	2300      	movs	r3, #0
 8005f94:	9309      	str	r3, [sp, #36]	; 0x24
 8005f96:	2320      	movs	r3, #32
 8005f98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f9c:	2330      	movs	r3, #48	; 0x30
 8005f9e:	f04f 0901 	mov.w	r9, #1
 8005fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fa6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800614c <_svfiprintf_r+0x1ec>
 8005faa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fae:	4623      	mov	r3, r4
 8005fb0:	469a      	mov	sl, r3
 8005fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fb6:	b10a      	cbz	r2, 8005fbc <_svfiprintf_r+0x5c>
 8005fb8:	2a25      	cmp	r2, #37	; 0x25
 8005fba:	d1f9      	bne.n	8005fb0 <_svfiprintf_r+0x50>
 8005fbc:	ebba 0b04 	subs.w	fp, sl, r4
 8005fc0:	d00b      	beq.n	8005fda <_svfiprintf_r+0x7a>
 8005fc2:	465b      	mov	r3, fp
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	4638      	mov	r0, r7
 8005fca:	f7ff ff6d 	bl	8005ea8 <__ssputs_r>
 8005fce:	3001      	adds	r0, #1
 8005fd0:	f000 80aa 	beq.w	8006128 <_svfiprintf_r+0x1c8>
 8005fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fd6:	445a      	add	r2, fp
 8005fd8:	9209      	str	r2, [sp, #36]	; 0x24
 8005fda:	f89a 3000 	ldrb.w	r3, [sl]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 80a2 	beq.w	8006128 <_svfiprintf_r+0x1c8>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fee:	f10a 0a01 	add.w	sl, sl, #1
 8005ff2:	9304      	str	r3, [sp, #16]
 8005ff4:	9307      	str	r3, [sp, #28]
 8005ff6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ffa:	931a      	str	r3, [sp, #104]	; 0x68
 8005ffc:	4654      	mov	r4, sl
 8005ffe:	2205      	movs	r2, #5
 8006000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006004:	4851      	ldr	r0, [pc, #324]	; (800614c <_svfiprintf_r+0x1ec>)
 8006006:	f7ff fac1 	bl	800558c <memchr>
 800600a:	9a04      	ldr	r2, [sp, #16]
 800600c:	b9d8      	cbnz	r0, 8006046 <_svfiprintf_r+0xe6>
 800600e:	06d0      	lsls	r0, r2, #27
 8006010:	bf44      	itt	mi
 8006012:	2320      	movmi	r3, #32
 8006014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006018:	0711      	lsls	r1, r2, #28
 800601a:	bf44      	itt	mi
 800601c:	232b      	movmi	r3, #43	; 0x2b
 800601e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006022:	f89a 3000 	ldrb.w	r3, [sl]
 8006026:	2b2a      	cmp	r3, #42	; 0x2a
 8006028:	d015      	beq.n	8006056 <_svfiprintf_r+0xf6>
 800602a:	4654      	mov	r4, sl
 800602c:	2000      	movs	r0, #0
 800602e:	f04f 0c0a 	mov.w	ip, #10
 8006032:	9a07      	ldr	r2, [sp, #28]
 8006034:	4621      	mov	r1, r4
 8006036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800603a:	3b30      	subs	r3, #48	; 0x30
 800603c:	2b09      	cmp	r3, #9
 800603e:	d94e      	bls.n	80060de <_svfiprintf_r+0x17e>
 8006040:	b1b0      	cbz	r0, 8006070 <_svfiprintf_r+0x110>
 8006042:	9207      	str	r2, [sp, #28]
 8006044:	e014      	b.n	8006070 <_svfiprintf_r+0x110>
 8006046:	eba0 0308 	sub.w	r3, r0, r8
 800604a:	fa09 f303 	lsl.w	r3, r9, r3
 800604e:	4313      	orrs	r3, r2
 8006050:	46a2      	mov	sl, r4
 8006052:	9304      	str	r3, [sp, #16]
 8006054:	e7d2      	b.n	8005ffc <_svfiprintf_r+0x9c>
 8006056:	9b03      	ldr	r3, [sp, #12]
 8006058:	1d19      	adds	r1, r3, #4
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	9103      	str	r1, [sp, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	bfbb      	ittet	lt
 8006062:	425b      	neglt	r3, r3
 8006064:	f042 0202 	orrlt.w	r2, r2, #2
 8006068:	9307      	strge	r3, [sp, #28]
 800606a:	9307      	strlt	r3, [sp, #28]
 800606c:	bfb8      	it	lt
 800606e:	9204      	strlt	r2, [sp, #16]
 8006070:	7823      	ldrb	r3, [r4, #0]
 8006072:	2b2e      	cmp	r3, #46	; 0x2e
 8006074:	d10c      	bne.n	8006090 <_svfiprintf_r+0x130>
 8006076:	7863      	ldrb	r3, [r4, #1]
 8006078:	2b2a      	cmp	r3, #42	; 0x2a
 800607a:	d135      	bne.n	80060e8 <_svfiprintf_r+0x188>
 800607c:	9b03      	ldr	r3, [sp, #12]
 800607e:	3402      	adds	r4, #2
 8006080:	1d1a      	adds	r2, r3, #4
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	9203      	str	r2, [sp, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	bfb8      	it	lt
 800608a:	f04f 33ff 	movlt.w	r3, #4294967295
 800608e:	9305      	str	r3, [sp, #20]
 8006090:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006150 <_svfiprintf_r+0x1f0>
 8006094:	2203      	movs	r2, #3
 8006096:	4650      	mov	r0, sl
 8006098:	7821      	ldrb	r1, [r4, #0]
 800609a:	f7ff fa77 	bl	800558c <memchr>
 800609e:	b140      	cbz	r0, 80060b2 <_svfiprintf_r+0x152>
 80060a0:	2340      	movs	r3, #64	; 0x40
 80060a2:	eba0 000a 	sub.w	r0, r0, sl
 80060a6:	fa03 f000 	lsl.w	r0, r3, r0
 80060aa:	9b04      	ldr	r3, [sp, #16]
 80060ac:	3401      	adds	r4, #1
 80060ae:	4303      	orrs	r3, r0
 80060b0:	9304      	str	r3, [sp, #16]
 80060b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b6:	2206      	movs	r2, #6
 80060b8:	4826      	ldr	r0, [pc, #152]	; (8006154 <_svfiprintf_r+0x1f4>)
 80060ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060be:	f7ff fa65 	bl	800558c <memchr>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d038      	beq.n	8006138 <_svfiprintf_r+0x1d8>
 80060c6:	4b24      	ldr	r3, [pc, #144]	; (8006158 <_svfiprintf_r+0x1f8>)
 80060c8:	bb1b      	cbnz	r3, 8006112 <_svfiprintf_r+0x1b2>
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	3307      	adds	r3, #7
 80060ce:	f023 0307 	bic.w	r3, r3, #7
 80060d2:	3308      	adds	r3, #8
 80060d4:	9303      	str	r3, [sp, #12]
 80060d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d8:	4433      	add	r3, r6
 80060da:	9309      	str	r3, [sp, #36]	; 0x24
 80060dc:	e767      	b.n	8005fae <_svfiprintf_r+0x4e>
 80060de:	460c      	mov	r4, r1
 80060e0:	2001      	movs	r0, #1
 80060e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060e6:	e7a5      	b.n	8006034 <_svfiprintf_r+0xd4>
 80060e8:	2300      	movs	r3, #0
 80060ea:	f04f 0c0a 	mov.w	ip, #10
 80060ee:	4619      	mov	r1, r3
 80060f0:	3401      	adds	r4, #1
 80060f2:	9305      	str	r3, [sp, #20]
 80060f4:	4620      	mov	r0, r4
 80060f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060fa:	3a30      	subs	r2, #48	; 0x30
 80060fc:	2a09      	cmp	r2, #9
 80060fe:	d903      	bls.n	8006108 <_svfiprintf_r+0x1a8>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0c5      	beq.n	8006090 <_svfiprintf_r+0x130>
 8006104:	9105      	str	r1, [sp, #20]
 8006106:	e7c3      	b.n	8006090 <_svfiprintf_r+0x130>
 8006108:	4604      	mov	r4, r0
 800610a:	2301      	movs	r3, #1
 800610c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006110:	e7f0      	b.n	80060f4 <_svfiprintf_r+0x194>
 8006112:	ab03      	add	r3, sp, #12
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	462a      	mov	r2, r5
 8006118:	4638      	mov	r0, r7
 800611a:	4b10      	ldr	r3, [pc, #64]	; (800615c <_svfiprintf_r+0x1fc>)
 800611c:	a904      	add	r1, sp, #16
 800611e:	f7fd ffb7 	bl	8004090 <_printf_float>
 8006122:	1c42      	adds	r2, r0, #1
 8006124:	4606      	mov	r6, r0
 8006126:	d1d6      	bne.n	80060d6 <_svfiprintf_r+0x176>
 8006128:	89ab      	ldrh	r3, [r5, #12]
 800612a:	065b      	lsls	r3, r3, #25
 800612c:	f53f af2c 	bmi.w	8005f88 <_svfiprintf_r+0x28>
 8006130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006132:	b01d      	add	sp, #116	; 0x74
 8006134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006138:	ab03      	add	r3, sp, #12
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	462a      	mov	r2, r5
 800613e:	4638      	mov	r0, r7
 8006140:	4b06      	ldr	r3, [pc, #24]	; (800615c <_svfiprintf_r+0x1fc>)
 8006142:	a904      	add	r1, sp, #16
 8006144:	f7fe fa40 	bl	80045c8 <_printf_i>
 8006148:	e7eb      	b.n	8006122 <_svfiprintf_r+0x1c2>
 800614a:	bf00      	nop
 800614c:	08006fc4 	.word	0x08006fc4
 8006150:	08006fca 	.word	0x08006fca
 8006154:	08006fce 	.word	0x08006fce
 8006158:	08004091 	.word	0x08004091
 800615c:	08005ea9 	.word	0x08005ea9

08006160 <_sbrk_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	2300      	movs	r3, #0
 8006164:	4d05      	ldr	r5, [pc, #20]	; (800617c <_sbrk_r+0x1c>)
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	f7fc f84c 	bl	8002208 <_sbrk>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_sbrk_r+0x1a>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_sbrk_r+0x1a>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20000460 	.word	0x20000460

08006180 <__assert_func>:
 8006180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006182:	4614      	mov	r4, r2
 8006184:	461a      	mov	r2, r3
 8006186:	4b09      	ldr	r3, [pc, #36]	; (80061ac <__assert_func+0x2c>)
 8006188:	4605      	mov	r5, r0
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68d8      	ldr	r0, [r3, #12]
 800618e:	b14c      	cbz	r4, 80061a4 <__assert_func+0x24>
 8006190:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <__assert_func+0x30>)
 8006192:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006196:	9100      	str	r1, [sp, #0]
 8006198:	462b      	mov	r3, r5
 800619a:	4906      	ldr	r1, [pc, #24]	; (80061b4 <__assert_func+0x34>)
 800619c:	f000 f80e 	bl	80061bc <fiprintf>
 80061a0:	f000 faaa 	bl	80066f8 <abort>
 80061a4:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <__assert_func+0x38>)
 80061a6:	461c      	mov	r4, r3
 80061a8:	e7f3      	b.n	8006192 <__assert_func+0x12>
 80061aa:	bf00      	nop
 80061ac:	20000014 	.word	0x20000014
 80061b0:	08006fd5 	.word	0x08006fd5
 80061b4:	08006fe2 	.word	0x08006fe2
 80061b8:	08007010 	.word	0x08007010

080061bc <fiprintf>:
 80061bc:	b40e      	push	{r1, r2, r3}
 80061be:	b503      	push	{r0, r1, lr}
 80061c0:	4601      	mov	r1, r0
 80061c2:	ab03      	add	r3, sp, #12
 80061c4:	4805      	ldr	r0, [pc, #20]	; (80061dc <fiprintf+0x20>)
 80061c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ca:	6800      	ldr	r0, [r0, #0]
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	f000 f895 	bl	80062fc <_vfiprintf_r>
 80061d2:	b002      	add	sp, #8
 80061d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061d8:	b003      	add	sp, #12
 80061da:	4770      	bx	lr
 80061dc:	20000014 	.word	0x20000014

080061e0 <__ascii_mbtowc>:
 80061e0:	b082      	sub	sp, #8
 80061e2:	b901      	cbnz	r1, 80061e6 <__ascii_mbtowc+0x6>
 80061e4:	a901      	add	r1, sp, #4
 80061e6:	b142      	cbz	r2, 80061fa <__ascii_mbtowc+0x1a>
 80061e8:	b14b      	cbz	r3, 80061fe <__ascii_mbtowc+0x1e>
 80061ea:	7813      	ldrb	r3, [r2, #0]
 80061ec:	600b      	str	r3, [r1, #0]
 80061ee:	7812      	ldrb	r2, [r2, #0]
 80061f0:	1e10      	subs	r0, r2, #0
 80061f2:	bf18      	it	ne
 80061f4:	2001      	movne	r0, #1
 80061f6:	b002      	add	sp, #8
 80061f8:	4770      	bx	lr
 80061fa:	4610      	mov	r0, r2
 80061fc:	e7fb      	b.n	80061f6 <__ascii_mbtowc+0x16>
 80061fe:	f06f 0001 	mvn.w	r0, #1
 8006202:	e7f8      	b.n	80061f6 <__ascii_mbtowc+0x16>

08006204 <memmove>:
 8006204:	4288      	cmp	r0, r1
 8006206:	b510      	push	{r4, lr}
 8006208:	eb01 0402 	add.w	r4, r1, r2
 800620c:	d902      	bls.n	8006214 <memmove+0x10>
 800620e:	4284      	cmp	r4, r0
 8006210:	4623      	mov	r3, r4
 8006212:	d807      	bhi.n	8006224 <memmove+0x20>
 8006214:	1e43      	subs	r3, r0, #1
 8006216:	42a1      	cmp	r1, r4
 8006218:	d008      	beq.n	800622c <memmove+0x28>
 800621a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800621e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006222:	e7f8      	b.n	8006216 <memmove+0x12>
 8006224:	4601      	mov	r1, r0
 8006226:	4402      	add	r2, r0
 8006228:	428a      	cmp	r2, r1
 800622a:	d100      	bne.n	800622e <memmove+0x2a>
 800622c:	bd10      	pop	{r4, pc}
 800622e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006232:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006236:	e7f7      	b.n	8006228 <memmove+0x24>

08006238 <__malloc_lock>:
 8006238:	4801      	ldr	r0, [pc, #4]	; (8006240 <__malloc_lock+0x8>)
 800623a:	f000 bc19 	b.w	8006a70 <__retarget_lock_acquire_recursive>
 800623e:	bf00      	nop
 8006240:	20000464 	.word	0x20000464

08006244 <__malloc_unlock>:
 8006244:	4801      	ldr	r0, [pc, #4]	; (800624c <__malloc_unlock+0x8>)
 8006246:	f000 bc14 	b.w	8006a72 <__retarget_lock_release_recursive>
 800624a:	bf00      	nop
 800624c:	20000464 	.word	0x20000464

08006250 <_realloc_r>:
 8006250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006254:	4680      	mov	r8, r0
 8006256:	4614      	mov	r4, r2
 8006258:	460e      	mov	r6, r1
 800625a:	b921      	cbnz	r1, 8006266 <_realloc_r+0x16>
 800625c:	4611      	mov	r1, r2
 800625e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006262:	f7ff bdad 	b.w	8005dc0 <_malloc_r>
 8006266:	b92a      	cbnz	r2, 8006274 <_realloc_r+0x24>
 8006268:	f7ff fd42 	bl	8005cf0 <_free_r>
 800626c:	4625      	mov	r5, r4
 800626e:	4628      	mov	r0, r5
 8006270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006274:	f000 fc64 	bl	8006b40 <_malloc_usable_size_r>
 8006278:	4284      	cmp	r4, r0
 800627a:	4607      	mov	r7, r0
 800627c:	d802      	bhi.n	8006284 <_realloc_r+0x34>
 800627e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006282:	d812      	bhi.n	80062aa <_realloc_r+0x5a>
 8006284:	4621      	mov	r1, r4
 8006286:	4640      	mov	r0, r8
 8006288:	f7ff fd9a 	bl	8005dc0 <_malloc_r>
 800628c:	4605      	mov	r5, r0
 800628e:	2800      	cmp	r0, #0
 8006290:	d0ed      	beq.n	800626e <_realloc_r+0x1e>
 8006292:	42bc      	cmp	r4, r7
 8006294:	4622      	mov	r2, r4
 8006296:	4631      	mov	r1, r6
 8006298:	bf28      	it	cs
 800629a:	463a      	movcs	r2, r7
 800629c:	f7ff f984 	bl	80055a8 <memcpy>
 80062a0:	4631      	mov	r1, r6
 80062a2:	4640      	mov	r0, r8
 80062a4:	f7ff fd24 	bl	8005cf0 <_free_r>
 80062a8:	e7e1      	b.n	800626e <_realloc_r+0x1e>
 80062aa:	4635      	mov	r5, r6
 80062ac:	e7df      	b.n	800626e <_realloc_r+0x1e>

080062ae <__sfputc_r>:
 80062ae:	6893      	ldr	r3, [r2, #8]
 80062b0:	b410      	push	{r4}
 80062b2:	3b01      	subs	r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	6093      	str	r3, [r2, #8]
 80062b8:	da07      	bge.n	80062ca <__sfputc_r+0x1c>
 80062ba:	6994      	ldr	r4, [r2, #24]
 80062bc:	42a3      	cmp	r3, r4
 80062be:	db01      	blt.n	80062c4 <__sfputc_r+0x16>
 80062c0:	290a      	cmp	r1, #10
 80062c2:	d102      	bne.n	80062ca <__sfputc_r+0x1c>
 80062c4:	bc10      	pop	{r4}
 80062c6:	f000 b949 	b.w	800655c <__swbuf_r>
 80062ca:	6813      	ldr	r3, [r2, #0]
 80062cc:	1c58      	adds	r0, r3, #1
 80062ce:	6010      	str	r0, [r2, #0]
 80062d0:	7019      	strb	r1, [r3, #0]
 80062d2:	4608      	mov	r0, r1
 80062d4:	bc10      	pop	{r4}
 80062d6:	4770      	bx	lr

080062d8 <__sfputs_r>:
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	4606      	mov	r6, r0
 80062dc:	460f      	mov	r7, r1
 80062de:	4614      	mov	r4, r2
 80062e0:	18d5      	adds	r5, r2, r3
 80062e2:	42ac      	cmp	r4, r5
 80062e4:	d101      	bne.n	80062ea <__sfputs_r+0x12>
 80062e6:	2000      	movs	r0, #0
 80062e8:	e007      	b.n	80062fa <__sfputs_r+0x22>
 80062ea:	463a      	mov	r2, r7
 80062ec:	4630      	mov	r0, r6
 80062ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f2:	f7ff ffdc 	bl	80062ae <__sfputc_r>
 80062f6:	1c43      	adds	r3, r0, #1
 80062f8:	d1f3      	bne.n	80062e2 <__sfputs_r+0xa>
 80062fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062fc <_vfiprintf_r>:
 80062fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006300:	460d      	mov	r5, r1
 8006302:	4614      	mov	r4, r2
 8006304:	4698      	mov	r8, r3
 8006306:	4606      	mov	r6, r0
 8006308:	b09d      	sub	sp, #116	; 0x74
 800630a:	b118      	cbz	r0, 8006314 <_vfiprintf_r+0x18>
 800630c:	6983      	ldr	r3, [r0, #24]
 800630e:	b90b      	cbnz	r3, 8006314 <_vfiprintf_r+0x18>
 8006310:	f000 fb10 	bl	8006934 <__sinit>
 8006314:	4b89      	ldr	r3, [pc, #548]	; (800653c <_vfiprintf_r+0x240>)
 8006316:	429d      	cmp	r5, r3
 8006318:	d11b      	bne.n	8006352 <_vfiprintf_r+0x56>
 800631a:	6875      	ldr	r5, [r6, #4]
 800631c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800631e:	07d9      	lsls	r1, r3, #31
 8006320:	d405      	bmi.n	800632e <_vfiprintf_r+0x32>
 8006322:	89ab      	ldrh	r3, [r5, #12]
 8006324:	059a      	lsls	r2, r3, #22
 8006326:	d402      	bmi.n	800632e <_vfiprintf_r+0x32>
 8006328:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800632a:	f000 fba1 	bl	8006a70 <__retarget_lock_acquire_recursive>
 800632e:	89ab      	ldrh	r3, [r5, #12]
 8006330:	071b      	lsls	r3, r3, #28
 8006332:	d501      	bpl.n	8006338 <_vfiprintf_r+0x3c>
 8006334:	692b      	ldr	r3, [r5, #16]
 8006336:	b9eb      	cbnz	r3, 8006374 <_vfiprintf_r+0x78>
 8006338:	4629      	mov	r1, r5
 800633a:	4630      	mov	r0, r6
 800633c:	f000 f96e 	bl	800661c <__swsetup_r>
 8006340:	b1c0      	cbz	r0, 8006374 <_vfiprintf_r+0x78>
 8006342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006344:	07dc      	lsls	r4, r3, #31
 8006346:	d50e      	bpl.n	8006366 <_vfiprintf_r+0x6a>
 8006348:	f04f 30ff 	mov.w	r0, #4294967295
 800634c:	b01d      	add	sp, #116	; 0x74
 800634e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006352:	4b7b      	ldr	r3, [pc, #492]	; (8006540 <_vfiprintf_r+0x244>)
 8006354:	429d      	cmp	r5, r3
 8006356:	d101      	bne.n	800635c <_vfiprintf_r+0x60>
 8006358:	68b5      	ldr	r5, [r6, #8]
 800635a:	e7df      	b.n	800631c <_vfiprintf_r+0x20>
 800635c:	4b79      	ldr	r3, [pc, #484]	; (8006544 <_vfiprintf_r+0x248>)
 800635e:	429d      	cmp	r5, r3
 8006360:	bf08      	it	eq
 8006362:	68f5      	ldreq	r5, [r6, #12]
 8006364:	e7da      	b.n	800631c <_vfiprintf_r+0x20>
 8006366:	89ab      	ldrh	r3, [r5, #12]
 8006368:	0598      	lsls	r0, r3, #22
 800636a:	d4ed      	bmi.n	8006348 <_vfiprintf_r+0x4c>
 800636c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800636e:	f000 fb80 	bl	8006a72 <__retarget_lock_release_recursive>
 8006372:	e7e9      	b.n	8006348 <_vfiprintf_r+0x4c>
 8006374:	2300      	movs	r3, #0
 8006376:	9309      	str	r3, [sp, #36]	; 0x24
 8006378:	2320      	movs	r3, #32
 800637a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800637e:	2330      	movs	r3, #48	; 0x30
 8006380:	f04f 0901 	mov.w	r9, #1
 8006384:	f8cd 800c 	str.w	r8, [sp, #12]
 8006388:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006548 <_vfiprintf_r+0x24c>
 800638c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006390:	4623      	mov	r3, r4
 8006392:	469a      	mov	sl, r3
 8006394:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006398:	b10a      	cbz	r2, 800639e <_vfiprintf_r+0xa2>
 800639a:	2a25      	cmp	r2, #37	; 0x25
 800639c:	d1f9      	bne.n	8006392 <_vfiprintf_r+0x96>
 800639e:	ebba 0b04 	subs.w	fp, sl, r4
 80063a2:	d00b      	beq.n	80063bc <_vfiprintf_r+0xc0>
 80063a4:	465b      	mov	r3, fp
 80063a6:	4622      	mov	r2, r4
 80063a8:	4629      	mov	r1, r5
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7ff ff94 	bl	80062d8 <__sfputs_r>
 80063b0:	3001      	adds	r0, #1
 80063b2:	f000 80aa 	beq.w	800650a <_vfiprintf_r+0x20e>
 80063b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063b8:	445a      	add	r2, fp
 80063ba:	9209      	str	r2, [sp, #36]	; 0x24
 80063bc:	f89a 3000 	ldrb.w	r3, [sl]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 80a2 	beq.w	800650a <_vfiprintf_r+0x20e>
 80063c6:	2300      	movs	r3, #0
 80063c8:	f04f 32ff 	mov.w	r2, #4294967295
 80063cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063d0:	f10a 0a01 	add.w	sl, sl, #1
 80063d4:	9304      	str	r3, [sp, #16]
 80063d6:	9307      	str	r3, [sp, #28]
 80063d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063dc:	931a      	str	r3, [sp, #104]	; 0x68
 80063de:	4654      	mov	r4, sl
 80063e0:	2205      	movs	r2, #5
 80063e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e6:	4858      	ldr	r0, [pc, #352]	; (8006548 <_vfiprintf_r+0x24c>)
 80063e8:	f7ff f8d0 	bl	800558c <memchr>
 80063ec:	9a04      	ldr	r2, [sp, #16]
 80063ee:	b9d8      	cbnz	r0, 8006428 <_vfiprintf_r+0x12c>
 80063f0:	06d1      	lsls	r1, r2, #27
 80063f2:	bf44      	itt	mi
 80063f4:	2320      	movmi	r3, #32
 80063f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063fa:	0713      	lsls	r3, r2, #28
 80063fc:	bf44      	itt	mi
 80063fe:	232b      	movmi	r3, #43	; 0x2b
 8006400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006404:	f89a 3000 	ldrb.w	r3, [sl]
 8006408:	2b2a      	cmp	r3, #42	; 0x2a
 800640a:	d015      	beq.n	8006438 <_vfiprintf_r+0x13c>
 800640c:	4654      	mov	r4, sl
 800640e:	2000      	movs	r0, #0
 8006410:	f04f 0c0a 	mov.w	ip, #10
 8006414:	9a07      	ldr	r2, [sp, #28]
 8006416:	4621      	mov	r1, r4
 8006418:	f811 3b01 	ldrb.w	r3, [r1], #1
 800641c:	3b30      	subs	r3, #48	; 0x30
 800641e:	2b09      	cmp	r3, #9
 8006420:	d94e      	bls.n	80064c0 <_vfiprintf_r+0x1c4>
 8006422:	b1b0      	cbz	r0, 8006452 <_vfiprintf_r+0x156>
 8006424:	9207      	str	r2, [sp, #28]
 8006426:	e014      	b.n	8006452 <_vfiprintf_r+0x156>
 8006428:	eba0 0308 	sub.w	r3, r0, r8
 800642c:	fa09 f303 	lsl.w	r3, r9, r3
 8006430:	4313      	orrs	r3, r2
 8006432:	46a2      	mov	sl, r4
 8006434:	9304      	str	r3, [sp, #16]
 8006436:	e7d2      	b.n	80063de <_vfiprintf_r+0xe2>
 8006438:	9b03      	ldr	r3, [sp, #12]
 800643a:	1d19      	adds	r1, r3, #4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	9103      	str	r1, [sp, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	bfbb      	ittet	lt
 8006444:	425b      	neglt	r3, r3
 8006446:	f042 0202 	orrlt.w	r2, r2, #2
 800644a:	9307      	strge	r3, [sp, #28]
 800644c:	9307      	strlt	r3, [sp, #28]
 800644e:	bfb8      	it	lt
 8006450:	9204      	strlt	r2, [sp, #16]
 8006452:	7823      	ldrb	r3, [r4, #0]
 8006454:	2b2e      	cmp	r3, #46	; 0x2e
 8006456:	d10c      	bne.n	8006472 <_vfiprintf_r+0x176>
 8006458:	7863      	ldrb	r3, [r4, #1]
 800645a:	2b2a      	cmp	r3, #42	; 0x2a
 800645c:	d135      	bne.n	80064ca <_vfiprintf_r+0x1ce>
 800645e:	9b03      	ldr	r3, [sp, #12]
 8006460:	3402      	adds	r4, #2
 8006462:	1d1a      	adds	r2, r3, #4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	9203      	str	r2, [sp, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	bfb8      	it	lt
 800646c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006470:	9305      	str	r3, [sp, #20]
 8006472:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800654c <_vfiprintf_r+0x250>
 8006476:	2203      	movs	r2, #3
 8006478:	4650      	mov	r0, sl
 800647a:	7821      	ldrb	r1, [r4, #0]
 800647c:	f7ff f886 	bl	800558c <memchr>
 8006480:	b140      	cbz	r0, 8006494 <_vfiprintf_r+0x198>
 8006482:	2340      	movs	r3, #64	; 0x40
 8006484:	eba0 000a 	sub.w	r0, r0, sl
 8006488:	fa03 f000 	lsl.w	r0, r3, r0
 800648c:	9b04      	ldr	r3, [sp, #16]
 800648e:	3401      	adds	r4, #1
 8006490:	4303      	orrs	r3, r0
 8006492:	9304      	str	r3, [sp, #16]
 8006494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006498:	2206      	movs	r2, #6
 800649a:	482d      	ldr	r0, [pc, #180]	; (8006550 <_vfiprintf_r+0x254>)
 800649c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064a0:	f7ff f874 	bl	800558c <memchr>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d03f      	beq.n	8006528 <_vfiprintf_r+0x22c>
 80064a8:	4b2a      	ldr	r3, [pc, #168]	; (8006554 <_vfiprintf_r+0x258>)
 80064aa:	bb1b      	cbnz	r3, 80064f4 <_vfiprintf_r+0x1f8>
 80064ac:	9b03      	ldr	r3, [sp, #12]
 80064ae:	3307      	adds	r3, #7
 80064b0:	f023 0307 	bic.w	r3, r3, #7
 80064b4:	3308      	adds	r3, #8
 80064b6:	9303      	str	r3, [sp, #12]
 80064b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ba:	443b      	add	r3, r7
 80064bc:	9309      	str	r3, [sp, #36]	; 0x24
 80064be:	e767      	b.n	8006390 <_vfiprintf_r+0x94>
 80064c0:	460c      	mov	r4, r1
 80064c2:	2001      	movs	r0, #1
 80064c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064c8:	e7a5      	b.n	8006416 <_vfiprintf_r+0x11a>
 80064ca:	2300      	movs	r3, #0
 80064cc:	f04f 0c0a 	mov.w	ip, #10
 80064d0:	4619      	mov	r1, r3
 80064d2:	3401      	adds	r4, #1
 80064d4:	9305      	str	r3, [sp, #20]
 80064d6:	4620      	mov	r0, r4
 80064d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064dc:	3a30      	subs	r2, #48	; 0x30
 80064de:	2a09      	cmp	r2, #9
 80064e0:	d903      	bls.n	80064ea <_vfiprintf_r+0x1ee>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0c5      	beq.n	8006472 <_vfiprintf_r+0x176>
 80064e6:	9105      	str	r1, [sp, #20]
 80064e8:	e7c3      	b.n	8006472 <_vfiprintf_r+0x176>
 80064ea:	4604      	mov	r4, r0
 80064ec:	2301      	movs	r3, #1
 80064ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80064f2:	e7f0      	b.n	80064d6 <_vfiprintf_r+0x1da>
 80064f4:	ab03      	add	r3, sp, #12
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	462a      	mov	r2, r5
 80064fa:	4630      	mov	r0, r6
 80064fc:	4b16      	ldr	r3, [pc, #88]	; (8006558 <_vfiprintf_r+0x25c>)
 80064fe:	a904      	add	r1, sp, #16
 8006500:	f7fd fdc6 	bl	8004090 <_printf_float>
 8006504:	4607      	mov	r7, r0
 8006506:	1c78      	adds	r0, r7, #1
 8006508:	d1d6      	bne.n	80064b8 <_vfiprintf_r+0x1bc>
 800650a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800650c:	07d9      	lsls	r1, r3, #31
 800650e:	d405      	bmi.n	800651c <_vfiprintf_r+0x220>
 8006510:	89ab      	ldrh	r3, [r5, #12]
 8006512:	059a      	lsls	r2, r3, #22
 8006514:	d402      	bmi.n	800651c <_vfiprintf_r+0x220>
 8006516:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006518:	f000 faab 	bl	8006a72 <__retarget_lock_release_recursive>
 800651c:	89ab      	ldrh	r3, [r5, #12]
 800651e:	065b      	lsls	r3, r3, #25
 8006520:	f53f af12 	bmi.w	8006348 <_vfiprintf_r+0x4c>
 8006524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006526:	e711      	b.n	800634c <_vfiprintf_r+0x50>
 8006528:	ab03      	add	r3, sp, #12
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	462a      	mov	r2, r5
 800652e:	4630      	mov	r0, r6
 8006530:	4b09      	ldr	r3, [pc, #36]	; (8006558 <_vfiprintf_r+0x25c>)
 8006532:	a904      	add	r1, sp, #16
 8006534:	f7fe f848 	bl	80045c8 <_printf_i>
 8006538:	e7e4      	b.n	8006504 <_vfiprintf_r+0x208>
 800653a:	bf00      	nop
 800653c:	0800713c 	.word	0x0800713c
 8006540:	0800715c 	.word	0x0800715c
 8006544:	0800711c 	.word	0x0800711c
 8006548:	08006fc4 	.word	0x08006fc4
 800654c:	08006fca 	.word	0x08006fca
 8006550:	08006fce 	.word	0x08006fce
 8006554:	08004091 	.word	0x08004091
 8006558:	080062d9 	.word	0x080062d9

0800655c <__swbuf_r>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	460e      	mov	r6, r1
 8006560:	4614      	mov	r4, r2
 8006562:	4605      	mov	r5, r0
 8006564:	b118      	cbz	r0, 800656e <__swbuf_r+0x12>
 8006566:	6983      	ldr	r3, [r0, #24]
 8006568:	b90b      	cbnz	r3, 800656e <__swbuf_r+0x12>
 800656a:	f000 f9e3 	bl	8006934 <__sinit>
 800656e:	4b21      	ldr	r3, [pc, #132]	; (80065f4 <__swbuf_r+0x98>)
 8006570:	429c      	cmp	r4, r3
 8006572:	d12b      	bne.n	80065cc <__swbuf_r+0x70>
 8006574:	686c      	ldr	r4, [r5, #4]
 8006576:	69a3      	ldr	r3, [r4, #24]
 8006578:	60a3      	str	r3, [r4, #8]
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	071a      	lsls	r2, r3, #28
 800657e:	d52f      	bpl.n	80065e0 <__swbuf_r+0x84>
 8006580:	6923      	ldr	r3, [r4, #16]
 8006582:	b36b      	cbz	r3, 80065e0 <__swbuf_r+0x84>
 8006584:	6923      	ldr	r3, [r4, #16]
 8006586:	6820      	ldr	r0, [r4, #0]
 8006588:	b2f6      	uxtb	r6, r6
 800658a:	1ac0      	subs	r0, r0, r3
 800658c:	6963      	ldr	r3, [r4, #20]
 800658e:	4637      	mov	r7, r6
 8006590:	4283      	cmp	r3, r0
 8006592:	dc04      	bgt.n	800659e <__swbuf_r+0x42>
 8006594:	4621      	mov	r1, r4
 8006596:	4628      	mov	r0, r5
 8006598:	f000 f938 	bl	800680c <_fflush_r>
 800659c:	bb30      	cbnz	r0, 80065ec <__swbuf_r+0x90>
 800659e:	68a3      	ldr	r3, [r4, #8]
 80065a0:	3001      	adds	r0, #1
 80065a2:	3b01      	subs	r3, #1
 80065a4:	60a3      	str	r3, [r4, #8]
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	6022      	str	r2, [r4, #0]
 80065ac:	701e      	strb	r6, [r3, #0]
 80065ae:	6963      	ldr	r3, [r4, #20]
 80065b0:	4283      	cmp	r3, r0
 80065b2:	d004      	beq.n	80065be <__swbuf_r+0x62>
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	07db      	lsls	r3, r3, #31
 80065b8:	d506      	bpl.n	80065c8 <__swbuf_r+0x6c>
 80065ba:	2e0a      	cmp	r6, #10
 80065bc:	d104      	bne.n	80065c8 <__swbuf_r+0x6c>
 80065be:	4621      	mov	r1, r4
 80065c0:	4628      	mov	r0, r5
 80065c2:	f000 f923 	bl	800680c <_fflush_r>
 80065c6:	b988      	cbnz	r0, 80065ec <__swbuf_r+0x90>
 80065c8:	4638      	mov	r0, r7
 80065ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <__swbuf_r+0x9c>)
 80065ce:	429c      	cmp	r4, r3
 80065d0:	d101      	bne.n	80065d6 <__swbuf_r+0x7a>
 80065d2:	68ac      	ldr	r4, [r5, #8]
 80065d4:	e7cf      	b.n	8006576 <__swbuf_r+0x1a>
 80065d6:	4b09      	ldr	r3, [pc, #36]	; (80065fc <__swbuf_r+0xa0>)
 80065d8:	429c      	cmp	r4, r3
 80065da:	bf08      	it	eq
 80065dc:	68ec      	ldreq	r4, [r5, #12]
 80065de:	e7ca      	b.n	8006576 <__swbuf_r+0x1a>
 80065e0:	4621      	mov	r1, r4
 80065e2:	4628      	mov	r0, r5
 80065e4:	f000 f81a 	bl	800661c <__swsetup_r>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d0cb      	beq.n	8006584 <__swbuf_r+0x28>
 80065ec:	f04f 37ff 	mov.w	r7, #4294967295
 80065f0:	e7ea      	b.n	80065c8 <__swbuf_r+0x6c>
 80065f2:	bf00      	nop
 80065f4:	0800713c 	.word	0x0800713c
 80065f8:	0800715c 	.word	0x0800715c
 80065fc:	0800711c 	.word	0x0800711c

08006600 <__ascii_wctomb>:
 8006600:	4603      	mov	r3, r0
 8006602:	4608      	mov	r0, r1
 8006604:	b141      	cbz	r1, 8006618 <__ascii_wctomb+0x18>
 8006606:	2aff      	cmp	r2, #255	; 0xff
 8006608:	d904      	bls.n	8006614 <__ascii_wctomb+0x14>
 800660a:	228a      	movs	r2, #138	; 0x8a
 800660c:	f04f 30ff 	mov.w	r0, #4294967295
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	4770      	bx	lr
 8006614:	2001      	movs	r0, #1
 8006616:	700a      	strb	r2, [r1, #0]
 8006618:	4770      	bx	lr
	...

0800661c <__swsetup_r>:
 800661c:	4b32      	ldr	r3, [pc, #200]	; (80066e8 <__swsetup_r+0xcc>)
 800661e:	b570      	push	{r4, r5, r6, lr}
 8006620:	681d      	ldr	r5, [r3, #0]
 8006622:	4606      	mov	r6, r0
 8006624:	460c      	mov	r4, r1
 8006626:	b125      	cbz	r5, 8006632 <__swsetup_r+0x16>
 8006628:	69ab      	ldr	r3, [r5, #24]
 800662a:	b913      	cbnz	r3, 8006632 <__swsetup_r+0x16>
 800662c:	4628      	mov	r0, r5
 800662e:	f000 f981 	bl	8006934 <__sinit>
 8006632:	4b2e      	ldr	r3, [pc, #184]	; (80066ec <__swsetup_r+0xd0>)
 8006634:	429c      	cmp	r4, r3
 8006636:	d10f      	bne.n	8006658 <__swsetup_r+0x3c>
 8006638:	686c      	ldr	r4, [r5, #4]
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006640:	0719      	lsls	r1, r3, #28
 8006642:	d42c      	bmi.n	800669e <__swsetup_r+0x82>
 8006644:	06dd      	lsls	r5, r3, #27
 8006646:	d411      	bmi.n	800666c <__swsetup_r+0x50>
 8006648:	2309      	movs	r3, #9
 800664a:	6033      	str	r3, [r6, #0]
 800664c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006650:	f04f 30ff 	mov.w	r0, #4294967295
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	e03e      	b.n	80066d6 <__swsetup_r+0xba>
 8006658:	4b25      	ldr	r3, [pc, #148]	; (80066f0 <__swsetup_r+0xd4>)
 800665a:	429c      	cmp	r4, r3
 800665c:	d101      	bne.n	8006662 <__swsetup_r+0x46>
 800665e:	68ac      	ldr	r4, [r5, #8]
 8006660:	e7eb      	b.n	800663a <__swsetup_r+0x1e>
 8006662:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <__swsetup_r+0xd8>)
 8006664:	429c      	cmp	r4, r3
 8006666:	bf08      	it	eq
 8006668:	68ec      	ldreq	r4, [r5, #12]
 800666a:	e7e6      	b.n	800663a <__swsetup_r+0x1e>
 800666c:	0758      	lsls	r0, r3, #29
 800666e:	d512      	bpl.n	8006696 <__swsetup_r+0x7a>
 8006670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006672:	b141      	cbz	r1, 8006686 <__swsetup_r+0x6a>
 8006674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006678:	4299      	cmp	r1, r3
 800667a:	d002      	beq.n	8006682 <__swsetup_r+0x66>
 800667c:	4630      	mov	r0, r6
 800667e:	f7ff fb37 	bl	8005cf0 <_free_r>
 8006682:	2300      	movs	r3, #0
 8006684:	6363      	str	r3, [r4, #52]	; 0x34
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800668c:	81a3      	strh	r3, [r4, #12]
 800668e:	2300      	movs	r3, #0
 8006690:	6063      	str	r3, [r4, #4]
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	6023      	str	r3, [r4, #0]
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	f043 0308 	orr.w	r3, r3, #8
 800669c:	81a3      	strh	r3, [r4, #12]
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	b94b      	cbnz	r3, 80066b6 <__swsetup_r+0x9a>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ac:	d003      	beq.n	80066b6 <__swsetup_r+0x9a>
 80066ae:	4621      	mov	r1, r4
 80066b0:	4630      	mov	r0, r6
 80066b2:	f000 fa05 	bl	8006ac0 <__smakebuf_r>
 80066b6:	89a0      	ldrh	r0, [r4, #12]
 80066b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066bc:	f010 0301 	ands.w	r3, r0, #1
 80066c0:	d00a      	beq.n	80066d8 <__swsetup_r+0xbc>
 80066c2:	2300      	movs	r3, #0
 80066c4:	60a3      	str	r3, [r4, #8]
 80066c6:	6963      	ldr	r3, [r4, #20]
 80066c8:	425b      	negs	r3, r3
 80066ca:	61a3      	str	r3, [r4, #24]
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	b943      	cbnz	r3, 80066e2 <__swsetup_r+0xc6>
 80066d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066d4:	d1ba      	bne.n	800664c <__swsetup_r+0x30>
 80066d6:	bd70      	pop	{r4, r5, r6, pc}
 80066d8:	0781      	lsls	r1, r0, #30
 80066da:	bf58      	it	pl
 80066dc:	6963      	ldrpl	r3, [r4, #20]
 80066de:	60a3      	str	r3, [r4, #8]
 80066e0:	e7f4      	b.n	80066cc <__swsetup_r+0xb0>
 80066e2:	2000      	movs	r0, #0
 80066e4:	e7f7      	b.n	80066d6 <__swsetup_r+0xba>
 80066e6:	bf00      	nop
 80066e8:	20000014 	.word	0x20000014
 80066ec:	0800713c 	.word	0x0800713c
 80066f0:	0800715c 	.word	0x0800715c
 80066f4:	0800711c 	.word	0x0800711c

080066f8 <abort>:
 80066f8:	2006      	movs	r0, #6
 80066fa:	b508      	push	{r3, lr}
 80066fc:	f000 fa50 	bl	8006ba0 <raise>
 8006700:	2001      	movs	r0, #1
 8006702:	f7fb fd51 	bl	80021a8 <_exit>
	...

08006708 <__sflush_r>:
 8006708:	898a      	ldrh	r2, [r1, #12]
 800670a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670c:	4605      	mov	r5, r0
 800670e:	0710      	lsls	r0, r2, #28
 8006710:	460c      	mov	r4, r1
 8006712:	d457      	bmi.n	80067c4 <__sflush_r+0xbc>
 8006714:	684b      	ldr	r3, [r1, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	dc04      	bgt.n	8006724 <__sflush_r+0x1c>
 800671a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	dc01      	bgt.n	8006724 <__sflush_r+0x1c>
 8006720:	2000      	movs	r0, #0
 8006722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006726:	2e00      	cmp	r6, #0
 8006728:	d0fa      	beq.n	8006720 <__sflush_r+0x18>
 800672a:	2300      	movs	r3, #0
 800672c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006730:	682f      	ldr	r7, [r5, #0]
 8006732:	602b      	str	r3, [r5, #0]
 8006734:	d032      	beq.n	800679c <__sflush_r+0x94>
 8006736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	075a      	lsls	r2, r3, #29
 800673c:	d505      	bpl.n	800674a <__sflush_r+0x42>
 800673e:	6863      	ldr	r3, [r4, #4]
 8006740:	1ac0      	subs	r0, r0, r3
 8006742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006744:	b10b      	cbz	r3, 800674a <__sflush_r+0x42>
 8006746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006748:	1ac0      	subs	r0, r0, r3
 800674a:	2300      	movs	r3, #0
 800674c:	4602      	mov	r2, r0
 800674e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006750:	4628      	mov	r0, r5
 8006752:	6a21      	ldr	r1, [r4, #32]
 8006754:	47b0      	blx	r6
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	d106      	bne.n	800676a <__sflush_r+0x62>
 800675c:	6829      	ldr	r1, [r5, #0]
 800675e:	291d      	cmp	r1, #29
 8006760:	d82c      	bhi.n	80067bc <__sflush_r+0xb4>
 8006762:	4a29      	ldr	r2, [pc, #164]	; (8006808 <__sflush_r+0x100>)
 8006764:	40ca      	lsrs	r2, r1
 8006766:	07d6      	lsls	r6, r2, #31
 8006768:	d528      	bpl.n	80067bc <__sflush_r+0xb4>
 800676a:	2200      	movs	r2, #0
 800676c:	6062      	str	r2, [r4, #4]
 800676e:	6922      	ldr	r2, [r4, #16]
 8006770:	04d9      	lsls	r1, r3, #19
 8006772:	6022      	str	r2, [r4, #0]
 8006774:	d504      	bpl.n	8006780 <__sflush_r+0x78>
 8006776:	1c42      	adds	r2, r0, #1
 8006778:	d101      	bne.n	800677e <__sflush_r+0x76>
 800677a:	682b      	ldr	r3, [r5, #0]
 800677c:	b903      	cbnz	r3, 8006780 <__sflush_r+0x78>
 800677e:	6560      	str	r0, [r4, #84]	; 0x54
 8006780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006782:	602f      	str	r7, [r5, #0]
 8006784:	2900      	cmp	r1, #0
 8006786:	d0cb      	beq.n	8006720 <__sflush_r+0x18>
 8006788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800678c:	4299      	cmp	r1, r3
 800678e:	d002      	beq.n	8006796 <__sflush_r+0x8e>
 8006790:	4628      	mov	r0, r5
 8006792:	f7ff faad 	bl	8005cf0 <_free_r>
 8006796:	2000      	movs	r0, #0
 8006798:	6360      	str	r0, [r4, #52]	; 0x34
 800679a:	e7c2      	b.n	8006722 <__sflush_r+0x1a>
 800679c:	6a21      	ldr	r1, [r4, #32]
 800679e:	2301      	movs	r3, #1
 80067a0:	4628      	mov	r0, r5
 80067a2:	47b0      	blx	r6
 80067a4:	1c41      	adds	r1, r0, #1
 80067a6:	d1c7      	bne.n	8006738 <__sflush_r+0x30>
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0c4      	beq.n	8006738 <__sflush_r+0x30>
 80067ae:	2b1d      	cmp	r3, #29
 80067b0:	d001      	beq.n	80067b6 <__sflush_r+0xae>
 80067b2:	2b16      	cmp	r3, #22
 80067b4:	d101      	bne.n	80067ba <__sflush_r+0xb2>
 80067b6:	602f      	str	r7, [r5, #0]
 80067b8:	e7b2      	b.n	8006720 <__sflush_r+0x18>
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067c0:	81a3      	strh	r3, [r4, #12]
 80067c2:	e7ae      	b.n	8006722 <__sflush_r+0x1a>
 80067c4:	690f      	ldr	r7, [r1, #16]
 80067c6:	2f00      	cmp	r7, #0
 80067c8:	d0aa      	beq.n	8006720 <__sflush_r+0x18>
 80067ca:	0793      	lsls	r3, r2, #30
 80067cc:	bf18      	it	ne
 80067ce:	2300      	movne	r3, #0
 80067d0:	680e      	ldr	r6, [r1, #0]
 80067d2:	bf08      	it	eq
 80067d4:	694b      	ldreq	r3, [r1, #20]
 80067d6:	1bf6      	subs	r6, r6, r7
 80067d8:	600f      	str	r7, [r1, #0]
 80067da:	608b      	str	r3, [r1, #8]
 80067dc:	2e00      	cmp	r6, #0
 80067de:	dd9f      	ble.n	8006720 <__sflush_r+0x18>
 80067e0:	4633      	mov	r3, r6
 80067e2:	463a      	mov	r2, r7
 80067e4:	4628      	mov	r0, r5
 80067e6:	6a21      	ldr	r1, [r4, #32]
 80067e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80067ec:	47e0      	blx	ip
 80067ee:	2800      	cmp	r0, #0
 80067f0:	dc06      	bgt.n	8006800 <__sflush_r+0xf8>
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f04f 30ff 	mov.w	r0, #4294967295
 80067f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067fc:	81a3      	strh	r3, [r4, #12]
 80067fe:	e790      	b.n	8006722 <__sflush_r+0x1a>
 8006800:	4407      	add	r7, r0
 8006802:	1a36      	subs	r6, r6, r0
 8006804:	e7ea      	b.n	80067dc <__sflush_r+0xd4>
 8006806:	bf00      	nop
 8006808:	20400001 	.word	0x20400001

0800680c <_fflush_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	690b      	ldr	r3, [r1, #16]
 8006810:	4605      	mov	r5, r0
 8006812:	460c      	mov	r4, r1
 8006814:	b913      	cbnz	r3, 800681c <_fflush_r+0x10>
 8006816:	2500      	movs	r5, #0
 8006818:	4628      	mov	r0, r5
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	b118      	cbz	r0, 8006826 <_fflush_r+0x1a>
 800681e:	6983      	ldr	r3, [r0, #24]
 8006820:	b90b      	cbnz	r3, 8006826 <_fflush_r+0x1a>
 8006822:	f000 f887 	bl	8006934 <__sinit>
 8006826:	4b14      	ldr	r3, [pc, #80]	; (8006878 <_fflush_r+0x6c>)
 8006828:	429c      	cmp	r4, r3
 800682a:	d11b      	bne.n	8006864 <_fflush_r+0x58>
 800682c:	686c      	ldr	r4, [r5, #4]
 800682e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0ef      	beq.n	8006816 <_fflush_r+0xa>
 8006836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006838:	07d0      	lsls	r0, r2, #31
 800683a:	d404      	bmi.n	8006846 <_fflush_r+0x3a>
 800683c:	0599      	lsls	r1, r3, #22
 800683e:	d402      	bmi.n	8006846 <_fflush_r+0x3a>
 8006840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006842:	f000 f915 	bl	8006a70 <__retarget_lock_acquire_recursive>
 8006846:	4628      	mov	r0, r5
 8006848:	4621      	mov	r1, r4
 800684a:	f7ff ff5d 	bl	8006708 <__sflush_r>
 800684e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006850:	4605      	mov	r5, r0
 8006852:	07da      	lsls	r2, r3, #31
 8006854:	d4e0      	bmi.n	8006818 <_fflush_r+0xc>
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	059b      	lsls	r3, r3, #22
 800685a:	d4dd      	bmi.n	8006818 <_fflush_r+0xc>
 800685c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800685e:	f000 f908 	bl	8006a72 <__retarget_lock_release_recursive>
 8006862:	e7d9      	b.n	8006818 <_fflush_r+0xc>
 8006864:	4b05      	ldr	r3, [pc, #20]	; (800687c <_fflush_r+0x70>)
 8006866:	429c      	cmp	r4, r3
 8006868:	d101      	bne.n	800686e <_fflush_r+0x62>
 800686a:	68ac      	ldr	r4, [r5, #8]
 800686c:	e7df      	b.n	800682e <_fflush_r+0x22>
 800686e:	4b04      	ldr	r3, [pc, #16]	; (8006880 <_fflush_r+0x74>)
 8006870:	429c      	cmp	r4, r3
 8006872:	bf08      	it	eq
 8006874:	68ec      	ldreq	r4, [r5, #12]
 8006876:	e7da      	b.n	800682e <_fflush_r+0x22>
 8006878:	0800713c 	.word	0x0800713c
 800687c:	0800715c 	.word	0x0800715c
 8006880:	0800711c 	.word	0x0800711c

08006884 <std>:
 8006884:	2300      	movs	r3, #0
 8006886:	b510      	push	{r4, lr}
 8006888:	4604      	mov	r4, r0
 800688a:	e9c0 3300 	strd	r3, r3, [r0]
 800688e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006892:	6083      	str	r3, [r0, #8]
 8006894:	8181      	strh	r1, [r0, #12]
 8006896:	6643      	str	r3, [r0, #100]	; 0x64
 8006898:	81c2      	strh	r2, [r0, #14]
 800689a:	6183      	str	r3, [r0, #24]
 800689c:	4619      	mov	r1, r3
 800689e:	2208      	movs	r2, #8
 80068a0:	305c      	adds	r0, #92	; 0x5c
 80068a2:	f7fd fb4f 	bl	8003f44 <memset>
 80068a6:	4b05      	ldr	r3, [pc, #20]	; (80068bc <std+0x38>)
 80068a8:	6224      	str	r4, [r4, #32]
 80068aa:	6263      	str	r3, [r4, #36]	; 0x24
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <std+0x3c>)
 80068ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <std+0x40>)
 80068b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <std+0x44>)
 80068b6:	6323      	str	r3, [r4, #48]	; 0x30
 80068b8:	bd10      	pop	{r4, pc}
 80068ba:	bf00      	nop
 80068bc:	08006bd9 	.word	0x08006bd9
 80068c0:	08006bfb 	.word	0x08006bfb
 80068c4:	08006c33 	.word	0x08006c33
 80068c8:	08006c57 	.word	0x08006c57

080068cc <_cleanup_r>:
 80068cc:	4901      	ldr	r1, [pc, #4]	; (80068d4 <_cleanup_r+0x8>)
 80068ce:	f000 b8af 	b.w	8006a30 <_fwalk_reent>
 80068d2:	bf00      	nop
 80068d4:	0800680d 	.word	0x0800680d

080068d8 <__sfmoreglue>:
 80068d8:	2268      	movs	r2, #104	; 0x68
 80068da:	b570      	push	{r4, r5, r6, lr}
 80068dc:	1e4d      	subs	r5, r1, #1
 80068de:	4355      	muls	r5, r2
 80068e0:	460e      	mov	r6, r1
 80068e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068e6:	f7ff fa6b 	bl	8005dc0 <_malloc_r>
 80068ea:	4604      	mov	r4, r0
 80068ec:	b140      	cbz	r0, 8006900 <__sfmoreglue+0x28>
 80068ee:	2100      	movs	r1, #0
 80068f0:	e9c0 1600 	strd	r1, r6, [r0]
 80068f4:	300c      	adds	r0, #12
 80068f6:	60a0      	str	r0, [r4, #8]
 80068f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068fc:	f7fd fb22 	bl	8003f44 <memset>
 8006900:	4620      	mov	r0, r4
 8006902:	bd70      	pop	{r4, r5, r6, pc}

08006904 <__sfp_lock_acquire>:
 8006904:	4801      	ldr	r0, [pc, #4]	; (800690c <__sfp_lock_acquire+0x8>)
 8006906:	f000 b8b3 	b.w	8006a70 <__retarget_lock_acquire_recursive>
 800690a:	bf00      	nop
 800690c:	20000465 	.word	0x20000465

08006910 <__sfp_lock_release>:
 8006910:	4801      	ldr	r0, [pc, #4]	; (8006918 <__sfp_lock_release+0x8>)
 8006912:	f000 b8ae 	b.w	8006a72 <__retarget_lock_release_recursive>
 8006916:	bf00      	nop
 8006918:	20000465 	.word	0x20000465

0800691c <__sinit_lock_acquire>:
 800691c:	4801      	ldr	r0, [pc, #4]	; (8006924 <__sinit_lock_acquire+0x8>)
 800691e:	f000 b8a7 	b.w	8006a70 <__retarget_lock_acquire_recursive>
 8006922:	bf00      	nop
 8006924:	20000466 	.word	0x20000466

08006928 <__sinit_lock_release>:
 8006928:	4801      	ldr	r0, [pc, #4]	; (8006930 <__sinit_lock_release+0x8>)
 800692a:	f000 b8a2 	b.w	8006a72 <__retarget_lock_release_recursive>
 800692e:	bf00      	nop
 8006930:	20000466 	.word	0x20000466

08006934 <__sinit>:
 8006934:	b510      	push	{r4, lr}
 8006936:	4604      	mov	r4, r0
 8006938:	f7ff fff0 	bl	800691c <__sinit_lock_acquire>
 800693c:	69a3      	ldr	r3, [r4, #24]
 800693e:	b11b      	cbz	r3, 8006948 <__sinit+0x14>
 8006940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006944:	f7ff bff0 	b.w	8006928 <__sinit_lock_release>
 8006948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800694c:	6523      	str	r3, [r4, #80]	; 0x50
 800694e:	4b13      	ldr	r3, [pc, #76]	; (800699c <__sinit+0x68>)
 8006950:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <__sinit+0x6c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	62a2      	str	r2, [r4, #40]	; 0x28
 8006956:	42a3      	cmp	r3, r4
 8006958:	bf08      	it	eq
 800695a:	2301      	moveq	r3, #1
 800695c:	4620      	mov	r0, r4
 800695e:	bf08      	it	eq
 8006960:	61a3      	streq	r3, [r4, #24]
 8006962:	f000 f81f 	bl	80069a4 <__sfp>
 8006966:	6060      	str	r0, [r4, #4]
 8006968:	4620      	mov	r0, r4
 800696a:	f000 f81b 	bl	80069a4 <__sfp>
 800696e:	60a0      	str	r0, [r4, #8]
 8006970:	4620      	mov	r0, r4
 8006972:	f000 f817 	bl	80069a4 <__sfp>
 8006976:	2200      	movs	r2, #0
 8006978:	2104      	movs	r1, #4
 800697a:	60e0      	str	r0, [r4, #12]
 800697c:	6860      	ldr	r0, [r4, #4]
 800697e:	f7ff ff81 	bl	8006884 <std>
 8006982:	2201      	movs	r2, #1
 8006984:	2109      	movs	r1, #9
 8006986:	68a0      	ldr	r0, [r4, #8]
 8006988:	f7ff ff7c 	bl	8006884 <std>
 800698c:	2202      	movs	r2, #2
 800698e:	2112      	movs	r1, #18
 8006990:	68e0      	ldr	r0, [r4, #12]
 8006992:	f7ff ff77 	bl	8006884 <std>
 8006996:	2301      	movs	r3, #1
 8006998:	61a3      	str	r3, [r4, #24]
 800699a:	e7d1      	b.n	8006940 <__sinit+0xc>
 800699c:	08006da4 	.word	0x08006da4
 80069a0:	080068cd 	.word	0x080068cd

080069a4 <__sfp>:
 80069a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a6:	4607      	mov	r7, r0
 80069a8:	f7ff ffac 	bl	8006904 <__sfp_lock_acquire>
 80069ac:	4b1e      	ldr	r3, [pc, #120]	; (8006a28 <__sfp+0x84>)
 80069ae:	681e      	ldr	r6, [r3, #0]
 80069b0:	69b3      	ldr	r3, [r6, #24]
 80069b2:	b913      	cbnz	r3, 80069ba <__sfp+0x16>
 80069b4:	4630      	mov	r0, r6
 80069b6:	f7ff ffbd 	bl	8006934 <__sinit>
 80069ba:	3648      	adds	r6, #72	; 0x48
 80069bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	d503      	bpl.n	80069cc <__sfp+0x28>
 80069c4:	6833      	ldr	r3, [r6, #0]
 80069c6:	b30b      	cbz	r3, 8006a0c <__sfp+0x68>
 80069c8:	6836      	ldr	r6, [r6, #0]
 80069ca:	e7f7      	b.n	80069bc <__sfp+0x18>
 80069cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069d0:	b9d5      	cbnz	r5, 8006a08 <__sfp+0x64>
 80069d2:	4b16      	ldr	r3, [pc, #88]	; (8006a2c <__sfp+0x88>)
 80069d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069d8:	60e3      	str	r3, [r4, #12]
 80069da:	6665      	str	r5, [r4, #100]	; 0x64
 80069dc:	f000 f847 	bl	8006a6e <__retarget_lock_init_recursive>
 80069e0:	f7ff ff96 	bl	8006910 <__sfp_lock_release>
 80069e4:	2208      	movs	r2, #8
 80069e6:	4629      	mov	r1, r5
 80069e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069f0:	6025      	str	r5, [r4, #0]
 80069f2:	61a5      	str	r5, [r4, #24]
 80069f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069f8:	f7fd faa4 	bl	8003f44 <memset>
 80069fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a04:	4620      	mov	r0, r4
 8006a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a08:	3468      	adds	r4, #104	; 0x68
 8006a0a:	e7d9      	b.n	80069c0 <__sfp+0x1c>
 8006a0c:	2104      	movs	r1, #4
 8006a0e:	4638      	mov	r0, r7
 8006a10:	f7ff ff62 	bl	80068d8 <__sfmoreglue>
 8006a14:	4604      	mov	r4, r0
 8006a16:	6030      	str	r0, [r6, #0]
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d1d5      	bne.n	80069c8 <__sfp+0x24>
 8006a1c:	f7ff ff78 	bl	8006910 <__sfp_lock_release>
 8006a20:	230c      	movs	r3, #12
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	e7ee      	b.n	8006a04 <__sfp+0x60>
 8006a26:	bf00      	nop
 8006a28:	08006da4 	.word	0x08006da4
 8006a2c:	ffff0001 	.word	0xffff0001

08006a30 <_fwalk_reent>:
 8006a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a34:	4606      	mov	r6, r0
 8006a36:	4688      	mov	r8, r1
 8006a38:	2700      	movs	r7, #0
 8006a3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a42:	f1b9 0901 	subs.w	r9, r9, #1
 8006a46:	d505      	bpl.n	8006a54 <_fwalk_reent+0x24>
 8006a48:	6824      	ldr	r4, [r4, #0]
 8006a4a:	2c00      	cmp	r4, #0
 8006a4c:	d1f7      	bne.n	8006a3e <_fwalk_reent+0xe>
 8006a4e:	4638      	mov	r0, r7
 8006a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a54:	89ab      	ldrh	r3, [r5, #12]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d907      	bls.n	8006a6a <_fwalk_reent+0x3a>
 8006a5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	d003      	beq.n	8006a6a <_fwalk_reent+0x3a>
 8006a62:	4629      	mov	r1, r5
 8006a64:	4630      	mov	r0, r6
 8006a66:	47c0      	blx	r8
 8006a68:	4307      	orrs	r7, r0
 8006a6a:	3568      	adds	r5, #104	; 0x68
 8006a6c:	e7e9      	b.n	8006a42 <_fwalk_reent+0x12>

08006a6e <__retarget_lock_init_recursive>:
 8006a6e:	4770      	bx	lr

08006a70 <__retarget_lock_acquire_recursive>:
 8006a70:	4770      	bx	lr

08006a72 <__retarget_lock_release_recursive>:
 8006a72:	4770      	bx	lr

08006a74 <__swhatbuf_r>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	460e      	mov	r6, r1
 8006a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a7c:	4614      	mov	r4, r2
 8006a7e:	2900      	cmp	r1, #0
 8006a80:	461d      	mov	r5, r3
 8006a82:	b096      	sub	sp, #88	; 0x58
 8006a84:	da08      	bge.n	8006a98 <__swhatbuf_r+0x24>
 8006a86:	2200      	movs	r2, #0
 8006a88:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a8c:	602a      	str	r2, [r5, #0]
 8006a8e:	061a      	lsls	r2, r3, #24
 8006a90:	d410      	bmi.n	8006ab4 <__swhatbuf_r+0x40>
 8006a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a96:	e00e      	b.n	8006ab6 <__swhatbuf_r+0x42>
 8006a98:	466a      	mov	r2, sp
 8006a9a:	f000 f903 	bl	8006ca4 <_fstat_r>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	dbf1      	blt.n	8006a86 <__swhatbuf_r+0x12>
 8006aa2:	9a01      	ldr	r2, [sp, #4]
 8006aa4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006aa8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006aac:	425a      	negs	r2, r3
 8006aae:	415a      	adcs	r2, r3
 8006ab0:	602a      	str	r2, [r5, #0]
 8006ab2:	e7ee      	b.n	8006a92 <__swhatbuf_r+0x1e>
 8006ab4:	2340      	movs	r3, #64	; 0x40
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	b016      	add	sp, #88	; 0x58
 8006abc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ac0 <__smakebuf_r>:
 8006ac0:	898b      	ldrh	r3, [r1, #12]
 8006ac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ac4:	079d      	lsls	r5, r3, #30
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	460c      	mov	r4, r1
 8006aca:	d507      	bpl.n	8006adc <__smakebuf_r+0x1c>
 8006acc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	6123      	str	r3, [r4, #16]
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	6163      	str	r3, [r4, #20]
 8006ad8:	b002      	add	sp, #8
 8006ada:	bd70      	pop	{r4, r5, r6, pc}
 8006adc:	466a      	mov	r2, sp
 8006ade:	ab01      	add	r3, sp, #4
 8006ae0:	f7ff ffc8 	bl	8006a74 <__swhatbuf_r>
 8006ae4:	9900      	ldr	r1, [sp, #0]
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	4630      	mov	r0, r6
 8006aea:	f7ff f969 	bl	8005dc0 <_malloc_r>
 8006aee:	b948      	cbnz	r0, 8006b04 <__smakebuf_r+0x44>
 8006af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006af4:	059a      	lsls	r2, r3, #22
 8006af6:	d4ef      	bmi.n	8006ad8 <__smakebuf_r+0x18>
 8006af8:	f023 0303 	bic.w	r3, r3, #3
 8006afc:	f043 0302 	orr.w	r3, r3, #2
 8006b00:	81a3      	strh	r3, [r4, #12]
 8006b02:	e7e3      	b.n	8006acc <__smakebuf_r+0xc>
 8006b04:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <__smakebuf_r+0x7c>)
 8006b06:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	6020      	str	r0, [r4, #0]
 8006b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b10:	81a3      	strh	r3, [r4, #12]
 8006b12:	9b00      	ldr	r3, [sp, #0]
 8006b14:	6120      	str	r0, [r4, #16]
 8006b16:	6163      	str	r3, [r4, #20]
 8006b18:	9b01      	ldr	r3, [sp, #4]
 8006b1a:	b15b      	cbz	r3, 8006b34 <__smakebuf_r+0x74>
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b22:	f000 f8d1 	bl	8006cc8 <_isatty_r>
 8006b26:	b128      	cbz	r0, 8006b34 <__smakebuf_r+0x74>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	f043 0301 	orr.w	r3, r3, #1
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	89a0      	ldrh	r0, [r4, #12]
 8006b36:	4305      	orrs	r5, r0
 8006b38:	81a5      	strh	r5, [r4, #12]
 8006b3a:	e7cd      	b.n	8006ad8 <__smakebuf_r+0x18>
 8006b3c:	080068cd 	.word	0x080068cd

08006b40 <_malloc_usable_size_r>:
 8006b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b44:	1f18      	subs	r0, r3, #4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bfbc      	itt	lt
 8006b4a:	580b      	ldrlt	r3, [r1, r0]
 8006b4c:	18c0      	addlt	r0, r0, r3
 8006b4e:	4770      	bx	lr

08006b50 <_raise_r>:
 8006b50:	291f      	cmp	r1, #31
 8006b52:	b538      	push	{r3, r4, r5, lr}
 8006b54:	4604      	mov	r4, r0
 8006b56:	460d      	mov	r5, r1
 8006b58:	d904      	bls.n	8006b64 <_raise_r+0x14>
 8006b5a:	2316      	movs	r3, #22
 8006b5c:	6003      	str	r3, [r0, #0]
 8006b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b66:	b112      	cbz	r2, 8006b6e <_raise_r+0x1e>
 8006b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b6c:	b94b      	cbnz	r3, 8006b82 <_raise_r+0x32>
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 f830 	bl	8006bd4 <_getpid_r>
 8006b74:	462a      	mov	r2, r5
 8006b76:	4601      	mov	r1, r0
 8006b78:	4620      	mov	r0, r4
 8006b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b7e:	f000 b817 	b.w	8006bb0 <_kill_r>
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d00a      	beq.n	8006b9c <_raise_r+0x4c>
 8006b86:	1c59      	adds	r1, r3, #1
 8006b88:	d103      	bne.n	8006b92 <_raise_r+0x42>
 8006b8a:	2316      	movs	r3, #22
 8006b8c:	6003      	str	r3, [r0, #0]
 8006b8e:	2001      	movs	r0, #1
 8006b90:	e7e7      	b.n	8006b62 <_raise_r+0x12>
 8006b92:	2400      	movs	r4, #0
 8006b94:	4628      	mov	r0, r5
 8006b96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b9a:	4798      	blx	r3
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e7e0      	b.n	8006b62 <_raise_r+0x12>

08006ba0 <raise>:
 8006ba0:	4b02      	ldr	r3, [pc, #8]	; (8006bac <raise+0xc>)
 8006ba2:	4601      	mov	r1, r0
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	f7ff bfd3 	b.w	8006b50 <_raise_r>
 8006baa:	bf00      	nop
 8006bac:	20000014 	.word	0x20000014

08006bb0 <_kill_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4d06      	ldr	r5, [pc, #24]	; (8006bd0 <_kill_r+0x20>)
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	4608      	mov	r0, r1
 8006bba:	4611      	mov	r1, r2
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	f7fb fae9 	bl	8002194 <_kill>
 8006bc2:	1c43      	adds	r3, r0, #1
 8006bc4:	d102      	bne.n	8006bcc <_kill_r+0x1c>
 8006bc6:	682b      	ldr	r3, [r5, #0]
 8006bc8:	b103      	cbz	r3, 8006bcc <_kill_r+0x1c>
 8006bca:	6023      	str	r3, [r4, #0]
 8006bcc:	bd38      	pop	{r3, r4, r5, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000460 	.word	0x20000460

08006bd4 <_getpid_r>:
 8006bd4:	f7fb badc 	b.w	8002190 <_getpid>

08006bd8 <__sread>:
 8006bd8:	b510      	push	{r4, lr}
 8006bda:	460c      	mov	r4, r1
 8006bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be0:	f000 f894 	bl	8006d0c <_read_r>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	bfab      	itete	ge
 8006be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bea:	89a3      	ldrhlt	r3, [r4, #12]
 8006bec:	181b      	addge	r3, r3, r0
 8006bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bf2:	bfac      	ite	ge
 8006bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bf6:	81a3      	strhlt	r3, [r4, #12]
 8006bf8:	bd10      	pop	{r4, pc}

08006bfa <__swrite>:
 8006bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfe:	461f      	mov	r7, r3
 8006c00:	898b      	ldrh	r3, [r1, #12]
 8006c02:	4605      	mov	r5, r0
 8006c04:	05db      	lsls	r3, r3, #23
 8006c06:	460c      	mov	r4, r1
 8006c08:	4616      	mov	r6, r2
 8006c0a:	d505      	bpl.n	8006c18 <__swrite+0x1e>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c14:	f000 f868 	bl	8006ce8 <_lseek_r>
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	4632      	mov	r2, r6
 8006c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	4628      	mov	r0, r5
 8006c24:	463b      	mov	r3, r7
 8006c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2e:	f000 b817 	b.w	8006c60 <_write_r>

08006c32 <__sseek>:
 8006c32:	b510      	push	{r4, lr}
 8006c34:	460c      	mov	r4, r1
 8006c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c3a:	f000 f855 	bl	8006ce8 <_lseek_r>
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	bf15      	itete	ne
 8006c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c4e:	81a3      	strheq	r3, [r4, #12]
 8006c50:	bf18      	it	ne
 8006c52:	81a3      	strhne	r3, [r4, #12]
 8006c54:	bd10      	pop	{r4, pc}

08006c56 <__sclose>:
 8006c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c5a:	f000 b813 	b.w	8006c84 <_close_r>
	...

08006c60 <_write_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	4604      	mov	r4, r0
 8006c64:	4608      	mov	r0, r1
 8006c66:	4611      	mov	r1, r2
 8006c68:	2200      	movs	r2, #0
 8006c6a:	4d05      	ldr	r5, [pc, #20]	; (8006c80 <_write_r+0x20>)
 8006c6c:	602a      	str	r2, [r5, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f7fb faae 	bl	80021d0 <_write>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d102      	bne.n	8006c7e <_write_r+0x1e>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	b103      	cbz	r3, 8006c7e <_write_r+0x1e>
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	20000460 	.word	0x20000460

08006c84 <_close_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	2300      	movs	r3, #0
 8006c88:	4d05      	ldr	r5, [pc, #20]	; (8006ca0 <_close_r+0x1c>)
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	602b      	str	r3, [r5, #0]
 8006c90:	f7fb faac 	bl	80021ec <_close>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_close_r+0x1a>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_close_r+0x1a>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	20000460 	.word	0x20000460

08006ca4 <_fstat_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	4d06      	ldr	r5, [pc, #24]	; (8006cc4 <_fstat_r+0x20>)
 8006caa:	4604      	mov	r4, r0
 8006cac:	4608      	mov	r0, r1
 8006cae:	4611      	mov	r1, r2
 8006cb0:	602b      	str	r3, [r5, #0]
 8006cb2:	f7fb fa9f 	bl	80021f4 <_fstat>
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	d102      	bne.n	8006cc0 <_fstat_r+0x1c>
 8006cba:	682b      	ldr	r3, [r5, #0]
 8006cbc:	b103      	cbz	r3, 8006cc0 <_fstat_r+0x1c>
 8006cbe:	6023      	str	r3, [r4, #0]
 8006cc0:	bd38      	pop	{r3, r4, r5, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000460 	.word	0x20000460

08006cc8 <_isatty_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	2300      	movs	r3, #0
 8006ccc:	4d05      	ldr	r5, [pc, #20]	; (8006ce4 <_isatty_r+0x1c>)
 8006cce:	4604      	mov	r4, r0
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	f7fb fa94 	bl	8002200 <_isatty>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_isatty_r+0x1a>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_isatty_r+0x1a>
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	20000460 	.word	0x20000460

08006ce8 <_lseek_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	4604      	mov	r4, r0
 8006cec:	4608      	mov	r0, r1
 8006cee:	4611      	mov	r1, r2
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4d05      	ldr	r5, [pc, #20]	; (8006d08 <_lseek_r+0x20>)
 8006cf4:	602a      	str	r2, [r5, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f7fb fa84 	bl	8002204 <_lseek>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d102      	bne.n	8006d06 <_lseek_r+0x1e>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	b103      	cbz	r3, 8006d06 <_lseek_r+0x1e>
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	20000460 	.word	0x20000460

08006d0c <_read_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4604      	mov	r4, r0
 8006d10:	4608      	mov	r0, r1
 8006d12:	4611      	mov	r1, r2
 8006d14:	2200      	movs	r2, #0
 8006d16:	4d05      	ldr	r5, [pc, #20]	; (8006d2c <_read_r+0x20>)
 8006d18:	602a      	str	r2, [r5, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f7fb fa4a 	bl	80021b4 <_read>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d102      	bne.n	8006d2a <_read_r+0x1e>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	b103      	cbz	r3, 8006d2a <_read_r+0x1e>
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	20000460 	.word	0x20000460

08006d30 <_init>:
 8006d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d32:	bf00      	nop
 8006d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d36:	bc08      	pop	{r3}
 8006d38:	469e      	mov	lr, r3
 8006d3a:	4770      	bx	lr

08006d3c <_fini>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	bf00      	nop
 8006d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d42:	bc08      	pop	{r3}
 8006d44:	469e      	mov	lr, r3
 8006d46:	4770      	bx	lr
