
SecondaryBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007000  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007140  08007140  00017140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007574  08007574  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007574  08007574  00017574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800757c  0800757c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800757c  0800757c  0001757c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007580  08007580  00017580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001e0  08007764  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08007764  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cccf  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002678  00000000  00000000  0002ced8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000069af  00000000  00000000  0002f550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  00035f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001308  00000000  00000000  00036788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000154ce  00000000  00000000  00037a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e9ed  00000000  00000000  0004cf5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080ee9  00000000  00000000  0005b94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000dc834  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c88  00000000  00000000  000dc884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08007128 	.word	0x08007128

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08007128 	.word	0x08007128

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2uiz>:
 8001100:	0042      	lsls	r2, r0, #1
 8001102:	d20e      	bcs.n	8001122 <__aeabi_f2uiz+0x22>
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001108:	d30b      	bcc.n	8001122 <__aeabi_f2uiz+0x22>
 800110a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d409      	bmi.n	8001128 <__aeabi_f2uiz+0x28>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr
 8001128:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800112c:	d101      	bne.n	8001132 <__aeabi_f2uiz+0x32>
 800112e:	0242      	lsls	r2, r0, #9
 8001130:	d102      	bne.n	8001138 <__aeabi_f2uiz+0x38>
 8001132:	f04f 30ff 	mov.w	r0, #4294967295
 8001136:	4770      	bx	lr
 8001138:	f04f 0000 	mov.w	r0, #0
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <__aeabi_uldivmod>:
 8001140:	b953      	cbnz	r3, 8001158 <__aeabi_uldivmod+0x18>
 8001142:	b94a      	cbnz	r2, 8001158 <__aeabi_uldivmod+0x18>
 8001144:	2900      	cmp	r1, #0
 8001146:	bf08      	it	eq
 8001148:	2800      	cmpeq	r0, #0
 800114a:	bf1c      	itt	ne
 800114c:	f04f 31ff 	movne.w	r1, #4294967295
 8001150:	f04f 30ff 	movne.w	r0, #4294967295
 8001154:	f000 b976 	b.w	8001444 <__aeabi_idiv0>
 8001158:	f1ad 0c08 	sub.w	ip, sp, #8
 800115c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001160:	f000 f806 	bl	8001170 <__udivmoddi4>
 8001164:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800116c:	b004      	add	sp, #16
 800116e:	4770      	bx	lr

08001170 <__udivmoddi4>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	9e08      	ldr	r6, [sp, #32]
 8001176:	460d      	mov	r5, r1
 8001178:	4604      	mov	r4, r0
 800117a:	4688      	mov	r8, r1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14d      	bne.n	800121c <__udivmoddi4+0xac>
 8001180:	428a      	cmp	r2, r1
 8001182:	4694      	mov	ip, r2
 8001184:	d968      	bls.n	8001258 <__udivmoddi4+0xe8>
 8001186:	fab2 f282 	clz	r2, r2
 800118a:	b152      	cbz	r2, 80011a2 <__udivmoddi4+0x32>
 800118c:	fa01 f302 	lsl.w	r3, r1, r2
 8001190:	f1c2 0120 	rsb	r1, r2, #32
 8001194:	fa20 f101 	lsr.w	r1, r0, r1
 8001198:	fa0c fc02 	lsl.w	ip, ip, r2
 800119c:	ea41 0803 	orr.w	r8, r1, r3
 80011a0:	4094      	lsls	r4, r2
 80011a2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80011a6:	fbb8 f7f1 	udiv	r7, r8, r1
 80011aa:	fa1f fe8c 	uxth.w	lr, ip
 80011ae:	fb01 8817 	mls	r8, r1, r7, r8
 80011b2:	fb07 f00e 	mul.w	r0, r7, lr
 80011b6:	0c23      	lsrs	r3, r4, #16
 80011b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011bc:	4298      	cmp	r0, r3
 80011be:	d90a      	bls.n	80011d6 <__udivmoddi4+0x66>
 80011c0:	eb1c 0303 	adds.w	r3, ip, r3
 80011c4:	f107 35ff 	add.w	r5, r7, #4294967295
 80011c8:	f080 811e 	bcs.w	8001408 <__udivmoddi4+0x298>
 80011cc:	4298      	cmp	r0, r3
 80011ce:	f240 811b 	bls.w	8001408 <__udivmoddi4+0x298>
 80011d2:	3f02      	subs	r7, #2
 80011d4:	4463      	add	r3, ip
 80011d6:	1a1b      	subs	r3, r3, r0
 80011d8:	fbb3 f0f1 	udiv	r0, r3, r1
 80011dc:	fb01 3310 	mls	r3, r1, r0, r3
 80011e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80011e4:	b2a4      	uxth	r4, r4
 80011e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011ea:	45a6      	cmp	lr, r4
 80011ec:	d90a      	bls.n	8001204 <__udivmoddi4+0x94>
 80011ee:	eb1c 0404 	adds.w	r4, ip, r4
 80011f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80011f6:	f080 8109 	bcs.w	800140c <__udivmoddi4+0x29c>
 80011fa:	45a6      	cmp	lr, r4
 80011fc:	f240 8106 	bls.w	800140c <__udivmoddi4+0x29c>
 8001200:	4464      	add	r4, ip
 8001202:	3802      	subs	r0, #2
 8001204:	2100      	movs	r1, #0
 8001206:	eba4 040e 	sub.w	r4, r4, lr
 800120a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800120e:	b11e      	cbz	r6, 8001218 <__udivmoddi4+0xa8>
 8001210:	2300      	movs	r3, #0
 8001212:	40d4      	lsrs	r4, r2
 8001214:	e9c6 4300 	strd	r4, r3, [r6]
 8001218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800121c:	428b      	cmp	r3, r1
 800121e:	d908      	bls.n	8001232 <__udivmoddi4+0xc2>
 8001220:	2e00      	cmp	r6, #0
 8001222:	f000 80ee 	beq.w	8001402 <__udivmoddi4+0x292>
 8001226:	2100      	movs	r1, #0
 8001228:	e9c6 0500 	strd	r0, r5, [r6]
 800122c:	4608      	mov	r0, r1
 800122e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001232:	fab3 f183 	clz	r1, r3
 8001236:	2900      	cmp	r1, #0
 8001238:	d14a      	bne.n	80012d0 <__udivmoddi4+0x160>
 800123a:	42ab      	cmp	r3, r5
 800123c:	d302      	bcc.n	8001244 <__udivmoddi4+0xd4>
 800123e:	4282      	cmp	r2, r0
 8001240:	f200 80fc 	bhi.w	800143c <__udivmoddi4+0x2cc>
 8001244:	1a84      	subs	r4, r0, r2
 8001246:	eb65 0303 	sbc.w	r3, r5, r3
 800124a:	2001      	movs	r0, #1
 800124c:	4698      	mov	r8, r3
 800124e:	2e00      	cmp	r6, #0
 8001250:	d0e2      	beq.n	8001218 <__udivmoddi4+0xa8>
 8001252:	e9c6 4800 	strd	r4, r8, [r6]
 8001256:	e7df      	b.n	8001218 <__udivmoddi4+0xa8>
 8001258:	b902      	cbnz	r2, 800125c <__udivmoddi4+0xec>
 800125a:	deff      	udf	#255	; 0xff
 800125c:	fab2 f282 	clz	r2, r2
 8001260:	2a00      	cmp	r2, #0
 8001262:	f040 8091 	bne.w	8001388 <__udivmoddi4+0x218>
 8001266:	eba1 000c 	sub.w	r0, r1, ip
 800126a:	2101      	movs	r1, #1
 800126c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001270:	fa1f fe8c 	uxth.w	lr, ip
 8001274:	fbb0 f3f7 	udiv	r3, r0, r7
 8001278:	fb07 0013 	mls	r0, r7, r3, r0
 800127c:	0c25      	lsrs	r5, r4, #16
 800127e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001282:	fb0e f003 	mul.w	r0, lr, r3
 8001286:	42a8      	cmp	r0, r5
 8001288:	d908      	bls.n	800129c <__udivmoddi4+0x12c>
 800128a:	eb1c 0505 	adds.w	r5, ip, r5
 800128e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001292:	d202      	bcs.n	800129a <__udivmoddi4+0x12a>
 8001294:	42a8      	cmp	r0, r5
 8001296:	f200 80ce 	bhi.w	8001436 <__udivmoddi4+0x2c6>
 800129a:	4643      	mov	r3, r8
 800129c:	1a2d      	subs	r5, r5, r0
 800129e:	fbb5 f0f7 	udiv	r0, r5, r7
 80012a2:	fb07 5510 	mls	r5, r7, r0, r5
 80012a6:	fb0e fe00 	mul.w	lr, lr, r0
 80012aa:	b2a4      	uxth	r4, r4
 80012ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012b0:	45a6      	cmp	lr, r4
 80012b2:	d908      	bls.n	80012c6 <__udivmoddi4+0x156>
 80012b4:	eb1c 0404 	adds.w	r4, ip, r4
 80012b8:	f100 35ff 	add.w	r5, r0, #4294967295
 80012bc:	d202      	bcs.n	80012c4 <__udivmoddi4+0x154>
 80012be:	45a6      	cmp	lr, r4
 80012c0:	f200 80b6 	bhi.w	8001430 <__udivmoddi4+0x2c0>
 80012c4:	4628      	mov	r0, r5
 80012c6:	eba4 040e 	sub.w	r4, r4, lr
 80012ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012ce:	e79e      	b.n	800120e <__udivmoddi4+0x9e>
 80012d0:	f1c1 0720 	rsb	r7, r1, #32
 80012d4:	408b      	lsls	r3, r1
 80012d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80012da:	ea4c 0c03 	orr.w	ip, ip, r3
 80012de:	fa25 fa07 	lsr.w	sl, r5, r7
 80012e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012e6:	fbba f8f9 	udiv	r8, sl, r9
 80012ea:	fa20 f307 	lsr.w	r3, r0, r7
 80012ee:	fb09 aa18 	mls	sl, r9, r8, sl
 80012f2:	408d      	lsls	r5, r1
 80012f4:	fa1f fe8c 	uxth.w	lr, ip
 80012f8:	431d      	orrs	r5, r3
 80012fa:	fa00 f301 	lsl.w	r3, r0, r1
 80012fe:	fb08 f00e 	mul.w	r0, r8, lr
 8001302:	0c2c      	lsrs	r4, r5, #16
 8001304:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001308:	42a0      	cmp	r0, r4
 800130a:	fa02 f201 	lsl.w	r2, r2, r1
 800130e:	d90b      	bls.n	8001328 <__udivmoddi4+0x1b8>
 8001310:	eb1c 0404 	adds.w	r4, ip, r4
 8001314:	f108 3aff 	add.w	sl, r8, #4294967295
 8001318:	f080 8088 	bcs.w	800142c <__udivmoddi4+0x2bc>
 800131c:	42a0      	cmp	r0, r4
 800131e:	f240 8085 	bls.w	800142c <__udivmoddi4+0x2bc>
 8001322:	f1a8 0802 	sub.w	r8, r8, #2
 8001326:	4464      	add	r4, ip
 8001328:	1a24      	subs	r4, r4, r0
 800132a:	fbb4 f0f9 	udiv	r0, r4, r9
 800132e:	fb09 4410 	mls	r4, r9, r0, r4
 8001332:	fb00 fe0e 	mul.w	lr, r0, lr
 8001336:	b2ad      	uxth	r5, r5
 8001338:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800133c:	45a6      	cmp	lr, r4
 800133e:	d908      	bls.n	8001352 <__udivmoddi4+0x1e2>
 8001340:	eb1c 0404 	adds.w	r4, ip, r4
 8001344:	f100 35ff 	add.w	r5, r0, #4294967295
 8001348:	d26c      	bcs.n	8001424 <__udivmoddi4+0x2b4>
 800134a:	45a6      	cmp	lr, r4
 800134c:	d96a      	bls.n	8001424 <__udivmoddi4+0x2b4>
 800134e:	3802      	subs	r0, #2
 8001350:	4464      	add	r4, ip
 8001352:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001356:	fba0 9502 	umull	r9, r5, r0, r2
 800135a:	eba4 040e 	sub.w	r4, r4, lr
 800135e:	42ac      	cmp	r4, r5
 8001360:	46c8      	mov	r8, r9
 8001362:	46ae      	mov	lr, r5
 8001364:	d356      	bcc.n	8001414 <__udivmoddi4+0x2a4>
 8001366:	d053      	beq.n	8001410 <__udivmoddi4+0x2a0>
 8001368:	2e00      	cmp	r6, #0
 800136a:	d069      	beq.n	8001440 <__udivmoddi4+0x2d0>
 800136c:	ebb3 0208 	subs.w	r2, r3, r8
 8001370:	eb64 040e 	sbc.w	r4, r4, lr
 8001374:	fa22 f301 	lsr.w	r3, r2, r1
 8001378:	fa04 f707 	lsl.w	r7, r4, r7
 800137c:	431f      	orrs	r7, r3
 800137e:	40cc      	lsrs	r4, r1
 8001380:	e9c6 7400 	strd	r7, r4, [r6]
 8001384:	2100      	movs	r1, #0
 8001386:	e747      	b.n	8001218 <__udivmoddi4+0xa8>
 8001388:	fa0c fc02 	lsl.w	ip, ip, r2
 800138c:	f1c2 0120 	rsb	r1, r2, #32
 8001390:	fa25 f301 	lsr.w	r3, r5, r1
 8001394:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001398:	fa20 f101 	lsr.w	r1, r0, r1
 800139c:	4095      	lsls	r5, r2
 800139e:	430d      	orrs	r5, r1
 80013a0:	fbb3 f1f7 	udiv	r1, r3, r7
 80013a4:	fb07 3311 	mls	r3, r7, r1, r3
 80013a8:	fa1f fe8c 	uxth.w	lr, ip
 80013ac:	0c28      	lsrs	r0, r5, #16
 80013ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013b2:	fb01 f30e 	mul.w	r3, r1, lr
 80013b6:	4283      	cmp	r3, r0
 80013b8:	fa04 f402 	lsl.w	r4, r4, r2
 80013bc:	d908      	bls.n	80013d0 <__udivmoddi4+0x260>
 80013be:	eb1c 0000 	adds.w	r0, ip, r0
 80013c2:	f101 38ff 	add.w	r8, r1, #4294967295
 80013c6:	d22f      	bcs.n	8001428 <__udivmoddi4+0x2b8>
 80013c8:	4283      	cmp	r3, r0
 80013ca:	d92d      	bls.n	8001428 <__udivmoddi4+0x2b8>
 80013cc:	3902      	subs	r1, #2
 80013ce:	4460      	add	r0, ip
 80013d0:	1ac0      	subs	r0, r0, r3
 80013d2:	fbb0 f3f7 	udiv	r3, r0, r7
 80013d6:	fb07 0013 	mls	r0, r7, r3, r0
 80013da:	b2ad      	uxth	r5, r5
 80013dc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80013e0:	fb03 f00e 	mul.w	r0, r3, lr
 80013e4:	42a8      	cmp	r0, r5
 80013e6:	d908      	bls.n	80013fa <__udivmoddi4+0x28a>
 80013e8:	eb1c 0505 	adds.w	r5, ip, r5
 80013ec:	f103 38ff 	add.w	r8, r3, #4294967295
 80013f0:	d216      	bcs.n	8001420 <__udivmoddi4+0x2b0>
 80013f2:	42a8      	cmp	r0, r5
 80013f4:	d914      	bls.n	8001420 <__udivmoddi4+0x2b0>
 80013f6:	3b02      	subs	r3, #2
 80013f8:	4465      	add	r5, ip
 80013fa:	1a28      	subs	r0, r5, r0
 80013fc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001400:	e738      	b.n	8001274 <__udivmoddi4+0x104>
 8001402:	4631      	mov	r1, r6
 8001404:	4630      	mov	r0, r6
 8001406:	e707      	b.n	8001218 <__udivmoddi4+0xa8>
 8001408:	462f      	mov	r7, r5
 800140a:	e6e4      	b.n	80011d6 <__udivmoddi4+0x66>
 800140c:	4618      	mov	r0, r3
 800140e:	e6f9      	b.n	8001204 <__udivmoddi4+0x94>
 8001410:	454b      	cmp	r3, r9
 8001412:	d2a9      	bcs.n	8001368 <__udivmoddi4+0x1f8>
 8001414:	ebb9 0802 	subs.w	r8, r9, r2
 8001418:	eb65 0e0c 	sbc.w	lr, r5, ip
 800141c:	3801      	subs	r0, #1
 800141e:	e7a3      	b.n	8001368 <__udivmoddi4+0x1f8>
 8001420:	4643      	mov	r3, r8
 8001422:	e7ea      	b.n	80013fa <__udivmoddi4+0x28a>
 8001424:	4628      	mov	r0, r5
 8001426:	e794      	b.n	8001352 <__udivmoddi4+0x1e2>
 8001428:	4641      	mov	r1, r8
 800142a:	e7d1      	b.n	80013d0 <__udivmoddi4+0x260>
 800142c:	46d0      	mov	r8, sl
 800142e:	e77b      	b.n	8001328 <__udivmoddi4+0x1b8>
 8001430:	4464      	add	r4, ip
 8001432:	3802      	subs	r0, #2
 8001434:	e747      	b.n	80012c6 <__udivmoddi4+0x156>
 8001436:	3b02      	subs	r3, #2
 8001438:	4465      	add	r5, ip
 800143a:	e72f      	b.n	800129c <__udivmoddi4+0x12c>
 800143c:	4608      	mov	r0, r1
 800143e:	e706      	b.n	800124e <__udivmoddi4+0xde>
 8001440:	4631      	mov	r1, r6
 8001442:	e6e9      	b.n	8001218 <__udivmoddi4+0xa8>

08001444 <__aeabi_idiv0>:
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <MX_ADC_Init>:

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001448:	2300      	movs	r3, #0
{
 800144a:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800144c:	4c40      	ldr	r4, [pc, #256]	; (8001550 <MX_ADC_Init+0x108>)
{
 800144e:	b08a      	sub	sp, #40	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001450:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001454:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001458:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800145c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001460:	e9cd 3307 	strd	r3, r3, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001464:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001468:	9304      	str	r3, [sp, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	9300      	str	r3, [sp, #0]
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 6;
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800146c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001470:	63a3      	str	r3, [r4, #56]	; 0x38
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001472:	9309      	str	r3, [sp, #36]	; 0x24
  hadc.Instance = ADC1;
 8001474:	4b37      	ldr	r3, [pc, #220]	; (8001554 <MX_ADC_Init+0x10c>)
  hadc.Init.ContinuousConvMode = ENABLE;
 8001476:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001478:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800147c:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc.Init.NbrOfConversion = 6;
 8001480:	2606      	movs	r6, #6
  hadc.Instance = ADC1;
 8001482:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001484:	2310      	movs	r3, #16
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001486:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001488:	6061      	str	r1, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800148a:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 800148c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc.Init.NbrOfConversion = 6;
 8001490:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001492:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001496:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001498:	f001 f878 	bl	800258c <HAL_ADC_Init>
 800149c:	b108      	cbz	r0, 80014a2 <MX_ADC_Init+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MX_ADC_Init+0x58>
  AnalogWDGConfig.HighThreshold = 4095;
 80014a2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80014a6:	9307      	str	r3, [sp, #28]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80014a8:	2302      	movs	r3, #2
 80014aa:	4a2b      	ldr	r2, [pc, #172]	; (8001558 <MX_ADC_Init+0x110>)
  AnalogWDGConfig.LowThreshold = 0;
 80014ac:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80014ae:	a904      	add	r1, sp, #16
 80014b0:	4620      	mov	r0, r4
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80014b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  AnalogWDGConfig.ITMode = ENABLE;
 80014b6:	f88d 5018 	strb.w	r5, [sp, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80014ba:	f001 fb6d 	bl	8002b98 <HAL_ADC_AnalogWDGConfig>
 80014be:	b108      	cbz	r0, 80014c4 <MX_ADC_Init+0x7c>
 80014c0:	b672      	cpsid	i
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <MX_ADC_Init+0x7a>
  sConfig.Channel = ADC_CHANNEL_0;
 80014c4:	2200      	movs	r2, #0
 80014c6:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014c8:	4669      	mov	r1, sp
 80014ca:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 80014cc:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 80014d0:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014d2:	f001 fa95 	bl	8002a00 <HAL_ADC_ConfigChannel>
 80014d6:	b108      	cbz	r0, 80014dc <MX_ADC_Init+0x94>
 80014d8:	b672      	cpsid	i
  while (1)
 80014da:	e7fe      	b.n	80014da <MX_ADC_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_1;
 80014dc:	2201      	movs	r2, #1
 80014de:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014e0:	4669      	mov	r1, sp
 80014e2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80014e4:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014e8:	f001 fa8a 	bl	8002a00 <HAL_ADC_ConfigChannel>
 80014ec:	b108      	cbz	r0, 80014f2 <MX_ADC_Init+0xaa>
 80014ee:	b672      	cpsid	i
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MX_ADC_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_2;
 80014f2:	2202      	movs	r2, #2
 80014f4:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014f6:	4669      	mov	r1, sp
 80014f8:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80014fa:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014fe:	f001 fa7f 	bl	8002a00 <HAL_ADC_ConfigChannel>
 8001502:	b108      	cbz	r0, 8001508 <MX_ADC_Init+0xc0>
 8001504:	b672      	cpsid	i
  while (1)
 8001506:	e7fe      	b.n	8001506 <MX_ADC_Init+0xbe>
  sConfig.Channel = ADC_CHANNEL_3;
 8001508:	2203      	movs	r2, #3
 800150a:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800150c:	4669      	mov	r1, sp
 800150e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8001510:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001514:	f001 fa74 	bl	8002a00 <HAL_ADC_ConfigChannel>
 8001518:	b108      	cbz	r0, 800151e <MX_ADC_Init+0xd6>
 800151a:	b672      	cpsid	i
  while (1)
 800151c:	e7fe      	b.n	800151c <MX_ADC_Init+0xd4>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800151e:	2211      	movs	r2, #17
 8001520:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001522:	4669      	mov	r1, sp
 8001524:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001526:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800152a:	f001 fa69 	bl	8002a00 <HAL_ADC_ConfigChannel>
 800152e:	b108      	cbz	r0, 8001534 <MX_ADC_Init+0xec>
 8001530:	b672      	cpsid	i
  while (1)
 8001532:	e7fe      	b.n	8001532 <MX_ADC_Init+0xea>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001534:	2210      	movs	r2, #16
 8001536:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001538:	4669      	mov	r1, sp
 800153a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800153c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001540:	f001 fa5e 	bl	8002a00 <HAL_ADC_ConfigChannel>
 8001544:	b108      	cbz	r0, 800154a <MX_ADC_Init+0x102>
 8001546:	b672      	cpsid	i
  while (1)
 8001548:	e7fe      	b.n	8001548 <MX_ADC_Init+0x100>
}
 800154a:	b00a      	add	sp, #40	; 0x28
 800154c:	bd70      	pop	{r4, r5, r6, pc}
 800154e:	bf00      	nop
 8001550:	20000224 	.word	0x20000224
 8001554:	40012400 	.word	0x40012400
 8001558:	00800200 	.word	0x00800200

0800155c <SystemClock_Config>:
{
 800155c:	b530      	push	{r4, r5, lr}
 800155e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001560:	2230      	movs	r2, #48	; 0x30
 8001562:	2100      	movs	r1, #0
 8001564:	a807      	add	r0, sp, #28
 8001566:	f002 feeb 	bl	8004340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800156a:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800156c:	2512      	movs	r5, #18
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156e:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	e9cd 3300 	strd	r3, r3, [sp]
 8001574:	e9cd 3302 	strd	r3, r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <SystemClock_Config+0x78>)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157a:	9304      	str	r3, [sp, #16]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800157c:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800157e:	2110      	movs	r1, #16
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001580:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001584:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001588:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800158a:	2201      	movs	r2, #1
 800158c:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800158e:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001590:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001592:	2500      	movs	r5, #0
 8001594:	f44f 4420 	mov.w	r4, #40960	; 0xa000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001598:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800159a:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 800159e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a2:	910a      	str	r1, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a4:	f001 ffda 	bl	800355c <HAL_RCC_OscConfig>
 80015a8:	b108      	cbz	r0, 80015ae <SystemClock_Config+0x52>
 80015aa:	b672      	cpsid	i
  while (1)
 80015ac:	e7fe      	b.n	80015ac <SystemClock_Config+0x50>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ae:	4601      	mov	r1, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b0:	220f      	movs	r2, #15
 80015b2:	2300      	movs	r3, #0
 80015b4:	2400      	movs	r4, #0
 80015b6:	2500      	movs	r5, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015b8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ba:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80015be:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c2:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015c4:	f002 fa2a 	bl	8003a1c <HAL_RCC_ClockConfig>
 80015c8:	b108      	cbz	r0, 80015ce <SystemClock_Config+0x72>
 80015ca:	b672      	cpsid	i
  while (1)
 80015cc:	e7fe      	b.n	80015cc <SystemClock_Config+0x70>
}
 80015ce:	b015      	add	sp, #84	; 0x54
 80015d0:	bd30      	pop	{r4, r5, pc}
 80015d2:	bf00      	nop
 80015d4:	40007000 	.word	0x40007000

080015d8 <ourInit>:
void ourInit(void){
 80015d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_ADC_DeInit(&hadc);
 80015dc:	4f40      	ldr	r7, [pc, #256]	; (80016e0 <ourInit+0x108>)
void ourInit(void){
 80015de:	b089      	sub	sp, #36	; 0x24
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 80015e0:	2201      	movs	r2, #1
 80015e2:	2140      	movs	r1, #64	; 0x40
 80015e4:	483f      	ldr	r0, [pc, #252]	; (80016e4 <ourInit+0x10c>)
 80015e6:	f001 ff73 	bl	80034d0 <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 80015ea:	4638      	mov	r0, r7
 80015ec:	f001 f89e 	bl	800272c <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 80015f0:	483d      	ldr	r0, [pc, #244]	; (80016e8 <ourInit+0x110>)
 80015f2:	f001 fced 	bl	8002fd0 <HAL_DMA_DeInit>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015f8:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <ourInit+0x114>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015fa:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015fc:	69d9      	ldr	r1, [r3, #28]
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80015fe:	4d3c      	ldr	r5, [pc, #240]	; (80016f0 <ourInit+0x118>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001600:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001604:	61d9      	str	r1, [r3, #28]
 8001606:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001608:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800160a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800160e:	9307      	str	r3, [sp, #28]
 8001610:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001612:	f001 fba7 	bl	8002d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001616:	200b      	movs	r0, #11
 8001618:	f001 fbe2 	bl	8002de0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	200e      	movs	r0, #14
 8001620:	4611      	mov	r1, r2
 8001622:	f001 fb9f 	bl	8002d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001626:	200e      	movs	r0, #14
 8001628:	f001 fbda 	bl	8002de0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	200f      	movs	r0, #15
 8001630:	4611      	mov	r1, r2
 8001632:	f001 fb97 	bl	8002d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001636:	200f      	movs	r0, #15
 8001638:	f001 fbd2 	bl	8002de0 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 800163c:	f7ff ff04 	bl	8001448 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_values, 6);// start the adc in dma mode
 8001640:	2206      	movs	r2, #6
 8001642:	4638      	mov	r0, r7
 8001644:	492b      	ldr	r1, [pc, #172]	; (80016f4 <ourInit+0x11c>)
 8001646:	f001 fb1b 	bl	8002c80 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800164a:	2100      	movs	r1, #0
 800164c:	4628      	mov	r0, r5
 800164e:	f001 fc17 	bl	8002e80 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001652:	2110      	movs	r1, #16
 8001654:	4628      	mov	r0, r5
 8001656:	f001 fc13 	bl	8002e80 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 800165a:	2300      	movs	r3, #0
 800165c:	4628      	mov	r0, r5
 800165e:	461a      	mov	r2, r3
 8001660:	4619      	mov	r1, r3
 8001662:	f001 fc3d 	bl	8002ee0 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001666:	2300      	movs	r3, #0
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001668:	2440      	movs	r4, #64	; 0x40
 800166a:	4e23      	ldr	r6, [pc, #140]	; (80016f8 <ourInit+0x120>)
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 800166c:	461a      	mov	r2, r3
 800166e:	4628      	mov	r0, r5
 8001670:	2110      	movs	r1, #16
 8001672:	f001 fc35 	bl	8002ee0 <HAL_DAC_SetValue>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001676:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80016fc <ourInit+0x124>
	memset (txbuffer, '\0', 64);  // clear the buffer
 800167a:	4622      	mov	r2, r4
 800167c:	2100      	movs	r1, #0
 800167e:	4630      	mov	r0, r6
 8001680:	f002 fe5e 	bl	8004340 <memset>
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001684:	4622      	mov	r2, r4
 8001686:	2100      	movs	r1, #0
 8001688:	481d      	ldr	r0, [pc, #116]	; (8001700 <ourInit+0x128>)
 800168a:	f002 fe59 	bl	8004340 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 800168e:	4622      	mov	r2, r4
 8001690:	2100      	movs	r1, #0
 8001692:	4648      	mov	r0, r9
 8001694:	f002 fe54 	bl	8004340 <memset>
	snprintf((char*)txbuffer, 32, "*STRT,%5.2f,%5.3f,%d,FNSH!", lin_num, cur_num, chstat_main);
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <ourInit+0x12c>)
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 800169a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8001708 <ourInit+0x130>
	snprintf((char*)txbuffer, 32, "*STRT,%5.2f,%5.3f,%d,FNSH!", lin_num, cur_num, chstat_main);
 800169e:	f993 3000 	ldrsb.w	r3, [r3]
 80016a2:	9304      	str	r3, [sp, #16]
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <ourInit+0x134>)
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	f7fe fed6 	bl	8000458 <__aeabi_f2d>
 80016ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <ourInit+0x138>)
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	f7fe fed0 	bl	8000458 <__aeabi_f2d>
 80016b8:	4a16      	ldr	r2, [pc, #88]	; (8001714 <ourInit+0x13c>)
 80016ba:	e9cd 0100 	strd	r0, r1, [sp]
 80016be:	2120      	movs	r1, #32
 80016c0:	4630      	mov	r0, r6
 80016c2:	f003 faa5 	bl	8004c10 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 80016c6:	4622      	mov	r2, r4
 80016c8:	4631      	mov	r1, r6
 80016ca:	4640      	mov	r0, r8
 80016cc:	f002 fb5c 	bl	8003d88 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 80016d0:	4622      	mov	r2, r4
 80016d2:	4649      	mov	r1, r9
 80016d4:	4640      	mov	r0, r8
}
 80016d6:	b009      	add	sp, #36	; 0x24
 80016d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 80016dc:	f002 bb90 	b.w	8003e00 <HAL_UART_Receive_DMA>
 80016e0:	20000224 	.word	0x20000224
 80016e4:	40020000 	.word	0x40020000
 80016e8:	2000028c 	.word	0x2000028c
 80016ec:	40023800 	.word	0x40023800
 80016f0:	20000278 	.word	0x20000278
 80016f4:	200001fc 	.word	0x200001fc
 80016f8:	200003e8 	.word	0x200003e8
 80016fc:	200003a4 	.word	0x200003a4
 8001700:	20000428 	.word	0x20000428
 8001704:	2000021c 	.word	0x2000021c
 8001708:	20000358 	.word	0x20000358
 800170c:	20000220 	.word	0x20000220
 8001710:	2000039c 	.word	0x2000039c
 8001714:	08007140 	.word	0x08007140

08001718 <main>:
{
 8001718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	2400      	movs	r4, #0
{
 800171e:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8001720:	f000 ff00 	bl	8002524 <HAL_Init>
  SystemClock_Config();
 8001724:	f7ff ff1a 	bl	800155c <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001728:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800172e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	4d5b      	ldr	r5, [pc, #364]	; (80018a0 <main+0x188>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001736:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001738:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	61eb      	str	r3, [r5, #28]
 8001740:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001742:	4858      	ldr	r0, [pc, #352]	; (80018a4 <main+0x18c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	9306      	str	r3, [sp, #24]
 800174a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174c:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 800174e:	2600      	movs	r6, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001750:	f043 0320 	orr.w	r3, r3, #32
 8001754:	61eb      	str	r3, [r5, #28]
 8001756:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001758:	2700      	movs	r7, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175a:	f003 0320 	and.w	r3, r3, #32
 800175e:	9307      	str	r3, [sp, #28]
 8001760:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	69eb      	ldr	r3, [r5, #28]
  hdac.Instance = DAC;
 8001764:	f8df 8140 	ldr.w	r8, [pc, #320]	; 80018a8 <main+0x190>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4313      	orrs	r3, r2
 800176a:	61eb      	str	r3, [r5, #28]
 800176c:	69eb      	ldr	r3, [r5, #28]
 800176e:	4013      	ands	r3, r2
 8001770:	9308      	str	r3, [sp, #32]
 8001772:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001774:	69eb      	ldr	r3, [r5, #28]
 8001776:	f043 0302 	orr.w	r3, r3, #2
 800177a:	61eb      	str	r3, [r5, #28]
 800177c:	69eb      	ldr	r3, [r5, #28]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	9309      	str	r3, [sp, #36]	; 0x24
 8001784:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001786:	f001 fea3 	bl	80034d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin;
 800178a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800178e:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001790:	4846      	ldr	r0, [pc, #280]	; (80018ac <main+0x194>)
 8001792:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin;
 8001794:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179a:	f001 fd2f 	bl	80031fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 800179e:	2240      	movs	r2, #64	; 0x40
 80017a0:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 80017a2:	4840      	ldr	r0, [pc, #256]	; (80018a4 <main+0x18c>)
 80017a4:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 80017a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80017aa:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f001 fd25 	bl	80031fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_4_Pin|Unused_Pin_14_Pin|Unused_Pin_15_Pin|Unused_Pin_16_Pin
 80017b2:	f649 1280 	movw	r2, #39296	; 0x9980
 80017b6:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	483a      	ldr	r0, [pc, #232]	; (80018a4 <main+0x18c>)
 80017ba:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Unused_Pin_4_Pin|Unused_Pin_14_Pin|Unused_Pin_15_Pin|Unused_Pin_16_Pin
 80017bc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f001 fd1b 	bl	80031fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_5_Pin|Unused_Pin_6_Pin|Unused_Pin_7_Pin|Unused_Pin_8_Pin
 80017c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ca:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	4838      	ldr	r0, [pc, #224]	; (80018b0 <main+0x198>)
 80017ce:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Unused_Pin_5_Pin|Unused_Pin_6_Pin|Unused_Pin_7_Pin|Unused_Pin_8_Pin
 80017d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f001 fd11 	bl	80031fc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017da:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017dc:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e2:	61eb      	str	r3, [r5, #28]
 80017e4:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017e6:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017ec:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ee:	9305      	str	r3, [sp, #20]
 80017f0:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017f2:	f001 fab7 	bl	8002d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017f6:	200b      	movs	r0, #11
 80017f8:	f001 faf2 	bl	8002de0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80017fc:	4622      	mov	r2, r4
 80017fe:	4621      	mov	r1, r4
 8001800:	200e      	movs	r0, #14
 8001802:	f001 faaf 	bl	8002d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001806:	200e      	movs	r0, #14
 8001808:	f001 faea 	bl	8002de0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800180c:	4622      	mov	r2, r4
 800180e:	4621      	mov	r1, r4
 8001810:	200f      	movs	r0, #15
 8001812:	f001 faa7 	bl	8002d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001816:	200f      	movs	r0, #15
 8001818:	f001 fae2 	bl	8002de0 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 800181c:	f7ff fe14 	bl	8001448 <MX_ADC_Init>
  hdac.Instance = DAC;
 8001820:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <main+0x19c>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001822:	4640      	mov	r0, r8
  DAC_ChannelConfTypeDef sConfig = {0};
 8001824:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  hdac.Instance = DAC;
 8001828:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800182c:	f001 fb12 	bl	8002e54 <HAL_DAC_Init>
 8001830:	b108      	cbz	r0, 8001836 <main+0x11e>
 8001832:	b672      	cpsid	i
  while (1)
 8001834:	e7fe      	b.n	8001834 <main+0x11c>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001836:	4602      	mov	r2, r0
 8001838:	a90a      	add	r1, sp, #40	; 0x28
 800183a:	4640      	mov	r0, r8
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800183c:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001840:	f001 fb64 	bl	8002f0c <HAL_DAC_ConfigChannel>
 8001844:	b108      	cbz	r0, 800184a <main+0x132>
 8001846:	b672      	cpsid	i
  while (1)
 8001848:	e7fe      	b.n	8001848 <main+0x130>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800184a:	2210      	movs	r2, #16
 800184c:	4640      	mov	r0, r8
 800184e:	a90a      	add	r1, sp, #40	; 0x28
 8001850:	f001 fb5c 	bl	8002f0c <HAL_DAC_ConfigChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	b108      	cbz	r0, 800185c <main+0x144>
 8001858:	b672      	cpsid	i
  while (1)
 800185a:	e7fe      	b.n	800185a <main+0x142>
  huart1.Init.BaudRate = 9600;
 800185c:	f44f 5516 	mov.w	r5, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001860:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  huart1.Init.Parity = UART_PARITY_ODD;
 8001864:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001868:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 800186a:	4813      	ldr	r0, [pc, #76]	; (80018b8 <main+0x1a0>)
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001870:	60c3      	str	r3, [r0, #12]
  huart1.Instance = USART1;
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <main+0x1a4>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001874:	e9c0 5401 	strd	r5, r4, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001878:	e9c0 1204 	strd	r1, r2, [r0, #16]
  huart1.Instance = USART1;
 800187c:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187e:	f002 f9f9 	bl	8003c74 <HAL_UART_Init>
 8001882:	2800      	cmp	r0, #0
 8001884:	f040 81f9 	bne.w	8001c7a <main+0x562>
  volatile float derivative = 0;
 8001888:	2400      	movs	r4, #0
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800188a:	f8df a034 	ldr.w	sl, [pc, #52]	; 80018c0 <main+0x1a8>
  float error_previous = 0;
 800188e:	9401      	str	r4, [sp, #4]
  float integral = 0;
 8001890:	9400      	str	r4, [sp, #0]
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8001892:	f8df b030 	ldr.w	fp, [pc, #48]	; 80018c4 <main+0x1ac>
  ourInit();
 8001896:	f7ff fe9f 	bl	80015d8 <ourInit>
  volatile float derivative = 0;
 800189a:	9404      	str	r4, [sp, #16]
  float correction = 0;
 800189c:	e111      	b.n	8001ac2 <main+0x3aa>
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	20000278 	.word	0x20000278
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40007400 	.word	0x40007400
 80018b8:	20000358 	.word	0x20000358
 80018bc:	40013800 	.word	0x40013800
 80018c0:	40400000 	.word	0x40400000
 80018c4:	457ff000 	.word	0x457ff000
		  error = lin_num - volt_set_main;
 80018c8:	4bb3      	ldr	r3, [pc, #716]	; (8001b98 <main+0x480>)
 80018ca:	4640      	mov	r0, r8
 80018cc:	681d      	ldr	r5, [r3, #0]
 80018ce:	4629      	mov	r1, r5
 80018d0:	f7ff f946 	bl	8000b60 <__aeabi_fsub>
 80018d4:	4680      	mov	r8, r0
		  integral += error;
 80018d6:	9800      	ldr	r0, [sp, #0]
 80018d8:	4641      	mov	r1, r8
 80018da:	f7ff f943 	bl	8000b64 <__addsf3>
		  if (integral > (float)4095.0) {
 80018de:	4659      	mov	r1, fp
		  integral += error;
 80018e0:	4606      	mov	r6, r0
 80018e2:	9000      	str	r0, [sp, #0]
		  if (integral > (float)4095.0) {
 80018e4:	f7ff fc02 	bl	80010ec <__aeabi_fcmpgt>
 80018e8:	2800      	cmp	r0, #0
 80018ea:	f040 8202 	bne.w	8001cf2 <main+0x5da>
		  } else if (integral < (float)-4095.0) {
 80018ee:	4630      	mov	r0, r6
 80018f0:	49aa      	ldr	r1, [pc, #680]	; (8001b9c <main+0x484>)
 80018f2:	f7ff fbdd 	bl	80010b0 <__aeabi_fcmplt>
 80018f6:	2800      	cmp	r0, #0
 80018f8:	f040 8201 	bne.w	8001cfe <main+0x5e6>
		  correction = P * error + I * integral + D * derivative;
 80018fc:	4630      	mov	r0, r6
 80018fe:	f7fe fdab 	bl	8000458 <__aeabi_f2d>
 8001902:	a3a1      	add	r3, pc, #644	; (adr r3, 8001b88 <main+0x470>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fdfe 	bl	8000508 <__aeabi_dmul>
 800190c:	4606      	mov	r6, r0
 800190e:	460f      	mov	r7, r1
		  derivative = error - error_previous;
 8001910:	9901      	ldr	r1, [sp, #4]
 8001912:	4640      	mov	r0, r8
 8001914:	f7ff f924 	bl	8000b60 <__aeabi_fsub>
 8001918:	4603      	mov	r3, r0
		  correction = P * error + I * integral + D * derivative;
 800191a:	4640      	mov	r0, r8
		  derivative = error - error_previous;
 800191c:	9304      	str	r3, [sp, #16]
		  correction = P * error + I * integral + D * derivative;
 800191e:	f7fe fd9b 	bl	8000458 <__aeabi_f2d>
 8001922:	9b04      	ldr	r3, [sp, #16]
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	a398      	add	r3, pc, #608	; (adr r3, 8001b88 <main+0x470>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fdec 	bl	8000508 <__aeabi_dmul>
 8001930:	4632      	mov	r2, r6
 8001932:	463b      	mov	r3, r7
 8001934:	f7fe fc32 	bl	800019c <__adddf3>
 8001938:	4606      	mov	r6, r0
 800193a:	9801      	ldr	r0, [sp, #4]
 800193c:	460f      	mov	r7, r1
 800193e:	f7fe fd8b 	bl	8000458 <__aeabi_f2d>
 8001942:	a393      	add	r3, pc, #588	; (adr r3, 8001b90 <main+0x478>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe fdde 	bl	8000508 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4630      	mov	r0, r6
 8001952:	4639      	mov	r1, r7
 8001954:	f7fe fc22 	bl	800019c <__adddf3>
 8001958:	f7ff f8ae 	bl	8000ab8 <__aeabi_d2f>
 800195c:	4601      	mov	r1, r0
		  corrected_volt_set_main = volt_set_main - correction;
 800195e:	4628      	mov	r0, r5
 8001960:	f7ff f8fe 	bl	8000b60 <__aeabi_fsub>
		  tmpv1 = (((((float)corrected_volt_set_main / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8001964:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001968:	f7ff fa04 	bl	8000d74 <__aeabi_fmul>
 800196c:	498c      	ldr	r1, [pc, #560]	; (8001ba0 <main+0x488>)
 800196e:	f7ff f8f9 	bl	8000b64 <__addsf3>
 8001972:	4659      	mov	r1, fp
 8001974:	f7ff f9fe 	bl	8000d74 <__aeabi_fmul>
 8001978:	4649      	mov	r1, r9
 800197a:	f7ff faaf 	bl	8000edc <__aeabi_fdiv>
		  if (tmpv1 > 4095) {
 800197e:	4659      	mov	r1, fp
		  tmpv1 = (((((float)corrected_volt_set_main / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8001980:	4606      	mov	r6, r0
		  if (tmpv1 > 4095) {
 8001982:	f7ff fbb3 	bl	80010ec <__aeabi_fcmpgt>
 8001986:	4607      	mov	r7, r0
 8001988:	2800      	cmp	r0, #0
 800198a:	f040 819f 	bne.w	8001ccc <main+0x5b4>
		  } else if (tmpv1 < 0) {
 800198e:	4621      	mov	r1, r4
 8001990:	4630      	mov	r0, r6
 8001992:	f7ff fb8d 	bl	80010b0 <__aeabi_fcmplt>
 8001996:	b918      	cbnz	r0, 80019a0 <main+0x288>
		  v1 = (uint16_t) tmpv1;
 8001998:	4630      	mov	r0, r6
 800199a:	f7ff fbb1 	bl	8001100 <__aeabi_f2uiz>
 800199e:	b287      	uxth	r7, r0
 80019a0:	4b80      	ldr	r3, [pc, #512]	; (8001ba4 <main+0x48c>)
		  error_previous = error;
 80019a2:	f8cd 8004 	str.w	r8, [sp, #4]
		  v1 = (uint16_t) tmpv1;
 80019a6:	801f      	strh	r7, [r3, #0]
	  volatile float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)0.75))) * (float)4095 / (float)vddcalc);
 80019a8:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 80019ac:	4628      	mov	r0, r5
 80019ae:	f7ff f8d9 	bl	8000b64 <__addsf3>
 80019b2:	497d      	ldr	r1, [pc, #500]	; (8001ba8 <main+0x490>)
 80019b4:	f7ff f9de 	bl	8000d74 <__aeabi_fmul>
 80019b8:	4601      	mov	r1, r0
 80019ba:	487c      	ldr	r0, [pc, #496]	; (8001bac <main+0x494>)
 80019bc:	f7ff f8d0 	bl	8000b60 <__aeabi_fsub>
 80019c0:	4659      	mov	r1, fp
 80019c2:	f7ff f9d7 	bl	8000d74 <__aeabi_fmul>
 80019c6:	4649      	mov	r1, r9
 80019c8:	f7ff fa88 	bl	8000edc <__aeabi_fdiv>
 80019cc:	900a      	str	r0, [sp, #40]	; 0x28
	  if(temp <= 0){
 80019ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80019d0:	4621      	mov	r1, r4
 80019d2:	f7ff fb77 	bl	80010c4 <__aeabi_fcmple>
 80019d6:	2800      	cmp	r0, #0
 80019d8:	f040 815f 	bne.w	8001c9a <main+0x582>
	  else if(temp >= 4095){
 80019dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80019de:	4659      	mov	r1, fp
 80019e0:	f7ff fb7a 	bl	80010d8 <__aeabi_fcmpge>
 80019e4:	2800      	cmp	r0, #0
 80019e6:	f000 816a 	beq.w	8001cbe <main+0x5a6>
		  v2 = 4095;
 80019ea:	f640 76ff 	movw	r6, #4095	; 0xfff
 80019ee:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <main+0x498>)
 80019f0:	801e      	strh	r6, [r3, #0]
	  if(volt_set_main > volt_set_main_old){
 80019f2:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <main+0x49c>)
 80019f4:	4629      	mov	r1, r5
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	f7ff fb5a 	bl	80010b0 <__aeabi_fcmplt>
 80019fc:	4605      	mov	r5, r0
 80019fe:	2800      	cmp	r0, #0
 8001a00:	f040 814f 	bne.w	8001ca2 <main+0x58a>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001a04:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <main+0x48c>)
 8001a06:	4602      	mov	r2, r0
 8001a08:	4601      	mov	r1, r0
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	486a      	ldr	r0, [pc, #424]	; (8001bb8 <main+0x4a0>)
 8001a0e:	f001 fa67 	bl	8002ee0 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 8001a12:	4b67      	ldr	r3, [pc, #412]	; (8001bb0 <main+0x498>)
 8001a14:	462a      	mov	r2, r5
 8001a16:	2110      	movs	r1, #16
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	4867      	ldr	r0, [pc, #412]	; (8001bb8 <main+0x4a0>)
 8001a1c:	f001 fa60 	bl	8002ee0 <HAL_DAC_SetValue>
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 8001a20:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <main+0x4a4>)
 8001a22:	f993 3000 	ldrsb.w	r3, [r3]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	f040 812e 	bne.w	8001c88 <main+0x570>
 8001a2c:	4b64      	ldr	r3, [pc, #400]	; (8001bc0 <main+0x4a8>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	f240 8129 	bls.w	8001c88 <main+0x570>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2140      	movs	r1, #64	; 0x40
 8001a3a:	4862      	ldr	r0, [pc, #392]	; (8001bc4 <main+0x4ac>)
 8001a3c:	f001 fd48 	bl	80034d0 <HAL_GPIO_WritePin>
	  update_ADC_watchdog(amp_set_main);
 8001a40:	4b61      	ldr	r3, [pc, #388]	; (8001bc8 <main+0x4b0>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001a42:	4962      	ldr	r1, [pc, #392]	; (8001bcc <main+0x4b4>)
	  update_ADC_watchdog(amp_set_main);
 8001a44:	681f      	ldr	r7, [r3, #0]
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001a46:	4638      	mov	r0, r7
 8001a48:	f7ff f994 	bl	8000d74 <__aeabi_fmul>
 8001a4c:	4960      	ldr	r1, [pc, #384]	; (8001bd0 <main+0x4b8>)
 8001a4e:	f7ff f991 	bl	8000d74 <__aeabi_fmul>
 8001a52:	4659      	mov	r1, fp
 8001a54:	f7ff f98e 	bl	8000d74 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001a58:	4b5e      	ldr	r3, [pc, #376]	; (8001bd4 <main+0x4bc>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001a5a:	4605      	mov	r5, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001a5c:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8001a5e:	8818      	ldrh	r0, [r3, #0]
 8001a60:	f7ff f930 	bl	8000cc4 <__aeabi_ui2f>
 8001a64:	4b56      	ldr	r3, [pc, #344]	; (8001bc0 <main+0x4a8>)
 8001a66:	4606      	mov	r6, r0
 8001a68:	8918      	ldrh	r0, [r3, #8]
 8001a6a:	f7ff f92b 	bl	8000cc4 <__aeabi_ui2f>
 8001a6e:	4601      	mov	r1, r0
 8001a70:	4630      	mov	r0, r6
 8001a72:	f7ff fa33 	bl	8000edc <__aeabi_fdiv>
 8001a76:	4651      	mov	r1, sl
 8001a78:	f7ff f97c 	bl	8000d74 <__aeabi_fmul>
 8001a7c:	4601      	mov	r1, r0
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001a7e:	4628      	mov	r0, r5
 8001a80:	f7ff fa2c 	bl	8000edc <__aeabi_fdiv>
 8001a84:	f7ff fb3c 	bl	8001100 <__aeabi_f2uiz>
 8001a88:	4603      	mov	r3, r0
	if(val == 0.0){
 8001a8a:	4621      	mov	r1, r4
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001a8c:	b29b      	uxth	r3, r3
	if(val == 0.0){
 8001a8e:	4638      	mov	r0, r7
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001a90:	f8ad 300e 	strh.w	r3, [sp, #14]
	if(val == 0.0){
 8001a94:	f7ff fb02 	bl	800109c <__aeabi_fcmpeq>
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	f040 80f0 	bne.w	8001c7e <main+0x566>
	else if(amp >= 4095.0){
 8001a9e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001aa2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	f200 80e8 	bhi.w	8001c7e <main+0x566>
	else if(amp < 0.0){
 8001aae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		ADC1->HTR = amp;
 8001ab2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001ab6:	4a48      	ldr	r2, [pc, #288]	; (8001bd8 <main+0x4c0>)
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	6293      	str	r3, [r2, #40]	; 0x28
	  HAL_Delay(1);
 8001abc:	2001      	movs	r0, #1
 8001abe:	f000 fd53 	bl	8002568 <HAL_Delay>
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001ac2:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <main+0x4bc>)
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8001ac4:	4f3e      	ldr	r7, [pc, #248]	; (8001bc0 <main+0x4a8>)
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001ac6:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8001ac8:	8818      	ldrh	r0, [r3, #0]
 8001aca:	f7ff f8fb 	bl	8000cc4 <__aeabi_ui2f>
 8001ace:	4605      	mov	r5, r0
 8001ad0:	8938      	ldrh	r0, [r7, #8]
 8001ad2:	f7ff f8f7 	bl	8000cc4 <__aeabi_ui2f>
 8001ad6:	4606      	mov	r6, r0
 8001ad8:	4628      	mov	r0, r5
 8001ada:	4631      	mov	r1, r6
 8001adc:	f7ff f9fe 	bl	8000edc <__aeabi_fdiv>
 8001ae0:	4651      	mov	r1, sl
 8001ae2:	f7ff f947 	bl	8000d74 <__aeabi_fmul>
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8001ae6:	4659      	mov	r1, fp
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8001ae8:	4681      	mov	r9, r0
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8001aea:	4630      	mov	r0, r6
 8001aec:	f7ff f942 	bl	8000d74 <__aeabi_fmul>
 8001af0:	4606      	mov	r6, r0
 8001af2:	88b8      	ldrh	r0, [r7, #4]
 8001af4:	f7ff f8e6 	bl	8000cc4 <__aeabi_ui2f>
 8001af8:	4651      	mov	r1, sl
 8001afa:	f7ff f93b 	bl	8000d74 <__aeabi_fmul>
 8001afe:	4629      	mov	r1, r5
 8001b00:	f7ff f938 	bl	8000d74 <__aeabi_fmul>
 8001b04:	4631      	mov	r1, r6
 8001b06:	f7ff f9e9 	bl	8000edc <__aeabi_fdiv>
 8001b0a:	4931      	ldr	r1, [pc, #196]	; (8001bd0 <main+0x4b8>)
 8001b0c:	f7ff f9e6 	bl	8000edc <__aeabi_fdiv>
 8001b10:	492e      	ldr	r1, [pc, #184]	; (8001bcc <main+0x4b4>)
 8001b12:	f7ff f9e3 	bl	8000edc <__aeabi_fdiv>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 8001b16:	4621      	mov	r1, r4
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8001b18:	4607      	mov	r7, r0
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 8001b1a:	f7ff fadd 	bl	80010d8 <__aeabi_fcmpge>
 8001b1e:	2800      	cmp	r0, #0
 8001b20:	f000 80b8 	beq.w	8001c94 <main+0x57c>
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8001b24:	4638      	mov	r0, r7
 8001b26:	492d      	ldr	r1, [pc, #180]	; (8001bdc <main+0x4c4>)
 8001b28:	f7ff f924 	bl	8000d74 <__aeabi_fmul>
 8001b2c:	4680      	mov	r8, r0
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <main+0x4c8>)
 8001b30:	601f      	str	r7, [r3, #0]
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <main+0x4a8>)
 8001b34:	8818      	ldrh	r0, [r3, #0]
 8001b36:	f7ff f8c5 	bl	8000cc4 <__aeabi_ui2f>
 8001b3a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001b3e:	f7ff f919 	bl	8000d74 <__aeabi_fmul>
 8001b42:	4651      	mov	r1, sl
 8001b44:	f7ff f916 	bl	8000d74 <__aeabi_fmul>
 8001b48:	4629      	mov	r1, r5
 8001b4a:	f7ff f913 	bl	8000d74 <__aeabi_fmul>
 8001b4e:	4631      	mov	r1, r6
 8001b50:	f7ff f9c4 	bl	8000edc <__aeabi_fdiv>
 8001b54:	4641      	mov	r1, r8
 8001b56:	f7ff f803 	bl	8000b60 <__aeabi_fsub>
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 8001b5a:	4621      	mov	r1, r4
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8001b5c:	4607      	mov	r7, r0
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 8001b5e:	f7ff fabb 	bl	80010d8 <__aeabi_fcmpge>
 8001b62:	b900      	cbnz	r0, 8001b66 <main+0x44e>
 8001b64:	4627      	mov	r7, r4
 8001b66:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <main+0x4cc>)
 8001b68:	601f      	str	r7, [r3, #0]
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <main+0x4a8>)
 8001b6c:	8858      	ldrh	r0, [r3, #2]
 8001b6e:	f7ff f8a9 	bl	8000cc4 <__aeabi_ui2f>
 8001b72:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001b76:	f7ff f8fd 	bl	8000d74 <__aeabi_fmul>
 8001b7a:	4651      	mov	r1, sl
 8001b7c:	f7ff f8fa 	bl	8000d74 <__aeabi_fmul>
 8001b80:	4629      	mov	r1, r5
 8001b82:	f7ff f8f7 	bl	8000d74 <__aeabi_fmul>
 8001b86:	e02f      	b.n	8001be8 <main+0x4d0>
 8001b88:	33333333 	.word	0x33333333
 8001b8c:	3fc33333 	.word	0x3fc33333
 8001b90:	9999999a 	.word	0x9999999a
 8001b94:	3fc99999 	.word	0x3fc99999
 8001b98:	2000046c 	.word	0x2000046c
 8001b9c:	c57ff000 	.word	0xc57ff000
 8001ba0:	3de4d9c9 	.word	0x3de4d9c9
 8001ba4:	20000468 	.word	0x20000468
 8001ba8:	3e75c28f 	.word	0x3e75c28f
 8001bac:	40800b78 	.word	0x40800b78
 8001bb0:	2000046a 	.word	0x2000046a
 8001bb4:	20000470 	.word	0x20000470
 8001bb8:	20000278 	.word	0x20000278
 8001bbc:	2000021c 	.word	0x2000021c
 8001bc0:	20000208 	.word	0x20000208
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	20000214 	.word	0x20000214
 8001bcc:	3e19999a 	.word	0x3e19999a
 8001bd0:	41a00000 	.word	0x41a00000
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	40012400 	.word	0x40012400
 8001bdc:	3eb33333 	.word	0x3eb33333
 8001be0:	20000220 	.word	0x20000220
 8001be4:	200003a0 	.word	0x200003a0
 8001be8:	4631      	mov	r1, r6
 8001bea:	f7ff f977 	bl	8000edc <__aeabi_fdiv>
 8001bee:	4641      	mov	r1, r8
 8001bf0:	f7fe ffb6 	bl	8000b60 <__aeabi_fsub>
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 8001bf4:	4621      	mov	r1, r4
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8001bf6:	4680      	mov	r8, r0
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 8001bf8:	f7ff fa6e 	bl	80010d8 <__aeabi_fcmpge>
 8001bfc:	b900      	cbnz	r0, 8001c00 <main+0x4e8>
 8001bfe:	46a0      	mov	r8, r4
 8001c00:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <main+0x608>)
 8001c02:	f8c3 8000 	str.w	r8, [r3]
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <main+0x60c>)
 8001c08:	88d8      	ldrh	r0, [r3, #6]
 8001c0a:	f7ff f85b 	bl	8000cc4 <__aeabi_ui2f>
 8001c0e:	4946      	ldr	r1, [pc, #280]	; (8001d28 <main+0x610>)
 8001c10:	f7ff f8b0 	bl	8000d74 <__aeabi_fmul>
 8001c14:	4651      	mov	r1, sl
 8001c16:	f7ff f8ad 	bl	8000d74 <__aeabi_fmul>
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	f7ff f8aa 	bl	8000d74 <__aeabi_fmul>
 8001c20:	4631      	mov	r1, r6
 8001c22:	f7ff f95b 	bl	8000edc <__aeabi_fdiv>
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 8001c26:	4621      	mov	r1, r4
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 8001c28:	4605      	mov	r5, r0
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 8001c2a:	f7ff fa55 	bl	80010d8 <__aeabi_fcmpge>
 8001c2e:	b900      	cbnz	r0, 8001c32 <main+0x51a>
 8001c30:	4625      	mov	r5, r4
 8001c32:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <main+0x614>)
 8001c34:	601d      	str	r5, [r3, #0]
	  if (chstat_main) {
 8001c36:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <main+0x618>)
 8001c38:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f47f ae43 	bne.w	80018c8 <main+0x1b0>
		  if(op_num > (volt_set_main - 1)){
 8001c42:	4b3c      	ldr	r3, [pc, #240]	; (8001d34 <main+0x61c>)
 8001c44:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c48:	681d      	ldr	r5, [r3, #0]
 8001c4a:	4628      	mov	r0, r5
 8001c4c:	f7fe ff88 	bl	8000b60 <__aeabi_fsub>
 8001c50:	4639      	mov	r1, r7
 8001c52:	4606      	mov	r6, r0
 8001c54:	f7ff fa2c 	bl	80010b0 <__aeabi_fcmplt>
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d03a      	beq.n	8001cd2 <main+0x5ba>
			  if(v1 >= 1){
 8001c5c:	4a36      	ldr	r2, [pc, #216]	; (8001d38 <main+0x620>)
 8001c5e:	8813      	ldrh	r3, [r2, #0]
 8001c60:	b10b      	cbz	r3, 8001c66 <main+0x54e>
				  v1--;
 8001c62:	3b01      	subs	r3, #1
 8001c64:	8013      	strh	r3, [r2, #0]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001c66:	2200      	movs	r2, #0
 8001c68:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <main+0x620>)
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	4833      	ldr	r0, [pc, #204]	; (8001d3c <main+0x624>)
 8001c70:	f001 f936 	bl	8002ee0 <HAL_DAC_SetValue>
	  volatile float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)0.75))) * (float)4095 / (float)vddcalc);
 8001c74:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <main+0x61c>)
 8001c76:	681d      	ldr	r5, [r3, #0]
 8001c78:	e696      	b.n	80019a8 <main+0x290>
 8001c7a:	b672      	cpsid	i
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <main+0x564>
		ADC1->HTR = 4095;
 8001c7e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001c82:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <main+0x628>)
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28
 8001c86:	e719      	b.n	8001abc <main+0x3a4>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2140      	movs	r1, #64	; 0x40
 8001c8c:	482d      	ldr	r0, [pc, #180]	; (8001d44 <main+0x62c>)
 8001c8e:	f001 fc1f 	bl	80034d0 <HAL_GPIO_WritePin>
 8001c92:	e6d5      	b.n	8001a40 <main+0x328>
 8001c94:	46a0      	mov	r8, r4
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 8001c96:	4627      	mov	r7, r4
 8001c98:	e749      	b.n	8001b2e <main+0x416>
		  v2 = 0;
 8001c9a:	2600      	movs	r6, #0
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <main+0x630>)
 8001c9e:	801e      	strh	r6, [r3, #0]
 8001ca0:	e6a7      	b.n	80019f2 <main+0x2da>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 8001ca2:	4633      	mov	r3, r6
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2110      	movs	r1, #16
 8001ca8:	4824      	ldr	r0, [pc, #144]	; (8001d3c <main+0x624>)
 8001caa:	f001 f919 	bl	8002ee0 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <main+0x620>)
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	4821      	ldr	r0, [pc, #132]	; (8001d3c <main+0x624>)
 8001cb8:	f001 f912 	bl	8002ee0 <HAL_DAC_SetValue>
 8001cbc:	e6b0      	b.n	8001a20 <main+0x308>
		  v2 = (uint16_t)temp;
 8001cbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001cc0:	f7ff fa1e 	bl	8001100 <__aeabi_f2uiz>
 8001cc4:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <main+0x630>)
 8001cc6:	b286      	uxth	r6, r0
 8001cc8:	801e      	strh	r6, [r3, #0]
 8001cca:	e692      	b.n	80019f2 <main+0x2da>
 8001ccc:	f640 77ff 	movw	r7, #4095	; 0xfff
 8001cd0:	e666      	b.n	80019a0 <main+0x288>
		  else if(op_num < (volt_set_main - 1)){
 8001cd2:	4639      	mov	r1, r7
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	f7ff fa09 	bl	80010ec <__aeabi_fcmpgt>
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	f43f ae64 	beq.w	80019a8 <main+0x290>
			  if(v1 <= 4094){
 8001ce0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ce4:	4914      	ldr	r1, [pc, #80]	; (8001d38 <main+0x620>)
 8001ce6:	880b      	ldrh	r3, [r1, #0]
 8001ce8:	4293      	cmp	r3, r2
				  v1++;
 8001cea:	bf9c      	itt	ls
 8001cec:	3301      	addls	r3, #1
 8001cee:	800b      	strhls	r3, [r1, #0]
 8001cf0:	e7b9      	b.n	8001c66 <main+0x54e>
			  integral = (float)4095;
 8001cf2:	f8cd b000 	str.w	fp, [sp]
 8001cf6:	a706      	add	r7, pc, #24	; (adr r7, 8001d10 <main+0x5f8>)
 8001cf8:	e9d7 6700 	ldrd	r6, r7, [r7]
 8001cfc:	e608      	b.n	8001910 <main+0x1f8>
			  integral = (float)-4095.0;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <main+0x634>)
 8001d00:	a705      	add	r7, pc, #20	; (adr r7, 8001d18 <main+0x600>)
 8001d02:	e9d7 6700 	ldrd	r6, r7, [r7]
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	e602      	b.n	8001910 <main+0x1f8>
 8001d0a:	bf00      	nop
 8001d0c:	f3af 8000 	nop.w
 8001d10:	00000000 	.word	0x00000000
 8001d14:	40833200 	.word	0x40833200
 8001d18:	00000000 	.word	0x00000000
 8001d1c:	c0833200 	.word	0xc0833200
 8001d20:	2000039c 	.word	0x2000039c
 8001d24:	20000208 	.word	0x20000208
 8001d28:	40a00000 	.word	0x40a00000
 8001d2c:	200003e4 	.word	0x200003e4
 8001d30:	2000021c 	.word	0x2000021c
 8001d34:	2000046c 	.word	0x2000046c
 8001d38:	20000468 	.word	0x20000468
 8001d3c:	20000278 	.word	0x20000278
 8001d40:	40012400 	.word	0x40012400
 8001d44:	40020000 	.word	0x40020000
 8001d48:	2000046a 	.word	0x2000046a
 8001d4c:	c57ff000 	.word	0xc57ff000

08001d50 <HAL_ADC_ConvHalfCpltCallback>:
	adc_values_cpy[0] = adc_values[0];
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_ADC_ConvHalfCpltCallback+0x14>)
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001d54:	8810      	ldrh	r0, [r2, #0]
	adc_values_cpy[1] = adc_values[1];
 8001d56:	8851      	ldrh	r1, [r2, #2]
	adc_values_cpy[2] = adc_values[2];
 8001d58:	8892      	ldrh	r2, [r2, #4]
	adc_values_cpy[0] = adc_values[0];
 8001d5a:	8018      	strh	r0, [r3, #0]
	adc_values_cpy[1] = adc_values[1];
 8001d5c:	8059      	strh	r1, [r3, #2]
	adc_values_cpy[2] = adc_values[2];
 8001d5e:	809a      	strh	r2, [r3, #4]
}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	200001fc 	.word	0x200001fc
 8001d68:	20000208 	.word	0x20000208

08001d6c <HAL_ADC_ConvCpltCallback>:
	adc_values_cpy[3] = adc_values[3];
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_ADC_ConvCpltCallback+0x14>)
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_ADC_ConvCpltCallback+0x18>)
 8001d70:	88d0      	ldrh	r0, [r2, #6]
	adc_values_cpy[4] = adc_values[4];
 8001d72:	8911      	ldrh	r1, [r2, #8]
	adc_values_cpy[5] = adc_values[5];
 8001d74:	8952      	ldrh	r2, [r2, #10]
	adc_values_cpy[3] = adc_values[3];
 8001d76:	80d8      	strh	r0, [r3, #6]
	adc_values_cpy[4] = adc_values[4];
 8001d78:	8119      	strh	r1, [r3, #8]
	adc_values_cpy[5] = adc_values[5];
 8001d7a:	815a      	strh	r2, [r3, #10]
}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	200001fc 	.word	0x200001fc
 8001d84:	20000208 	.word	0x20000208

08001d88 <HAL_ADC_LevelOutOfWindowCallback>:
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001d88:	2201      	movs	r2, #1
{
 8001d8a:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001d8c:	2140      	movs	r1, #64	; 0x40
 8001d8e:	4803      	ldr	r0, [pc, #12]	; (8001d9c <HAL_ADC_LevelOutOfWindowCallback+0x14>)
 8001d90:	f001 fb9e 	bl	80034d0 <HAL_GPIO_WritePin>
	chstat_main = 2;
 8001d94:	2202      	movs	r2, #2
 8001d96:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <HAL_ADC_LevelOutOfWindowCallback+0x18>)
 8001d98:	701a      	strb	r2, [r3, #0]
}
 8001d9a:	bd08      	pop	{r3, pc}
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	2000021c 	.word	0x2000021c

08001da4 <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8001da4:	b430      	push	{r4, r5}
	memcpy(txbuffer, txbuffer_cpy, 64);  // copy the data to the buffer
 8001da6:	4c07      	ldr	r4, [pc, #28]	; (8001dc4 <HAL_UART_TxHalfCpltCallback+0x20>)
 8001da8:	4d07      	ldr	r5, [pc, #28]	; (8001dc8 <HAL_UART_TxHalfCpltCallback+0x24>)
 8001daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001dbe:	bc30      	pop	{r4, r5}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	200003e8 	.word	0x200003e8
 8001dc8:	20000428 	.word	0x20000428

08001dcc <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001dcc:	b5d0      	push	{r4, r6, r7, lr}
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001dce:	4c11      	ldr	r4, [pc, #68]	; (8001e14 <HAL_UART_TxCpltCallback+0x48>)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001dd0:	b086      	sub	sp, #24
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001dd2:	2240      	movs	r2, #64	; 0x40
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f002 fab2 	bl	8004340 <memset>
	snprintf((char*)txbuffer_cpy, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", lin_num, cur_num, chstat_main);
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <HAL_UART_TxCpltCallback+0x4c>)
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_UART_TxCpltCallback+0x50>)
 8001de0:	f993 3000 	ldrsb.w	r3, [r3]
 8001de4:	6810      	ldr	r0, [r2, #0]
 8001de6:	9304      	str	r3, [sp, #16]
 8001de8:	f7fe fb36 	bl	8000458 <__aeabi_f2d>
 8001dec:	460b      	mov	r3, r1
 8001dee:	4602      	mov	r2, r0
 8001df0:	490b      	ldr	r1, [pc, #44]	; (8001e20 <HAL_UART_TxCpltCallback+0x54>)
 8001df2:	6808      	ldr	r0, [r1, #0]
 8001df4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001df8:	f7fe fb2e 	bl	8000458 <__aeabi_f2d>
 8001dfc:	4606      	mov	r6, r0
 8001dfe:	460f      	mov	r7, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	2120      	movs	r1, #32
 8001e04:	e9cd 6700 	strd	r6, r7, [sp]
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <HAL_UART_TxCpltCallback+0x58>)
 8001e0a:	f002 ff01 	bl	8004c10 <sniprintf>
}
 8001e0e:	b006      	add	sp, #24
 8001e10:	bdd0      	pop	{r4, r6, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000428 	.word	0x20000428
 8001e18:	2000021c 	.word	0x2000021c
 8001e1c:	20000220 	.word	0x20000220
 8001e20:	2000039c 	.word	0x2000039c
 8001e24:	0800715c 	.word	0x0800715c

08001e28 <HAL_UART_RxHalfCpltCallback>:
}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	0000      	movs	r0, r0
	...

08001e30 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e34:	4e9e      	ldr	r6, [pc, #632]	; (80020b0 <HAL_UART_RxCpltCallback+0x280>)
	for(int i = 0; i < 64; i++){
 8001e36:	2400      	movs	r4, #0
 8001e38:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	e003      	b.n	8001e46 <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 8001e3e:	3401      	adds	r4, #1
 8001e40:	2c40      	cmp	r4, #64	; 0x40
 8001e42:	f000 8120 	beq.w	8002086 <HAL_UART_RxCpltCallback+0x256>
		if(rxbuffer[i] == '*'){
 8001e46:	f813 5b01 	ldrb.w	r5, [r3], #1
 8001e4a:	2d2a      	cmp	r5, #42	; 0x2a
 8001e4c:	d1f7      	bne.n	8001e3e <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 8001e4e:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 8001e50:	2220      	movs	r2, #32
 8001e52:	2100      	movs	r1, #0
 8001e54:	4668      	mov	r0, sp
 8001e56:	f002 fa73 	bl	8004340 <memset>
	for(int i = 0; i < 25; i++){
 8001e5a:	f10d 33ff 	add.w	r3, sp, #4294967295
 8001e5e:	aa06      	add	r2, sp, #24
 8001e60:	e000      	b.n	8001e64 <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 8001e62:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 8001e64:	3401      	adds	r4, #1
 8001e66:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 8001e68:	2c40      	cmp	r4, #64	; 0x40
		rxbuffercpy[i] = rxbuffer[rxiter];
 8001e6a:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 8001e6e:	bf28      	it	cs
 8001e70:	2400      	movcs	r4, #0
	for(int i = 0; i < 25; i++){
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d1f5      	bne.n	8001e62 <HAL_UART_RxCpltCallback+0x32>
	if( //Check start condition
 8001e76:	f89d 3000 	ldrb.w	r3, [sp]
 8001e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8001e7c:	d00c      	beq.n	8001e98 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001e7e:	2240      	movs	r2, #64	; 0x40
 8001e80:	2100      	movs	r1, #0
 8001e82:	488b      	ldr	r0, [pc, #556]	; (80020b0 <HAL_UART_RxCpltCallback+0x280>)
 8001e84:	f002 fa5c 	bl	8004340 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001e88:	2240      	movs	r2, #64	; 0x40
 8001e8a:	4989      	ldr	r1, [pc, #548]	; (80020b0 <HAL_UART_RxCpltCallback+0x280>)
 8001e8c:	4889      	ldr	r0, [pc, #548]	; (80020b4 <HAL_UART_RxCpltCallback+0x284>)
}
 8001e8e:	b009      	add	sp, #36	; 0x24
 8001e90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001e94:	f001 bfb4 	b.w	8003e00 <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 8001e98:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001e9c:	2b53      	cmp	r3, #83	; 0x53
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
 8001ea0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001ea4:	2b54      	cmp	r3, #84	; 0x54
 8001ea6:	d1ea      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
 8001ea8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001eac:	2b52      	cmp	r3, #82	; 0x52
 8001eae:	d1e6      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
 8001eb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001eb4:	2b54      	cmp	r3, #84	; 0x54
 8001eb6:	d1e2      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
 8001eb8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001ebc:	2b46      	cmp	r3, #70	; 0x46
 8001ebe:	d1de      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 8001ec0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001ec4:	2b4e      	cmp	r3, #78	; 0x4e
 8001ec6:	d1da      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
 8001ec8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8001ecc:	2b53      	cmp	r3, #83	; 0x53
 8001ece:	d1d6      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
 8001ed0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001ed4:	2b48      	cmp	r3, #72	; 0x48
 8001ed6:	d1d2      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
 8001ed8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001edc:	2b21      	cmp	r3, #33	; 0x21
 8001ede:	d1ce      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
 8001ee0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001ee4:	2b2c      	cmp	r3, #44	; 0x2c
 8001ee6:	d1ca      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8001ee8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001eec:	2b2c      	cmp	r3, #44	; 0x2c
 8001eee:	d1c6      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
 8001ef0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001ef4:	2b2c      	cmp	r3, #44	; 0x2c
 8001ef6:	d1c2      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
 8001ef8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8001efc:	2b2c      	cmp	r3, #44	; 0x2c
 8001efe:	d1be      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8001f00:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8001f04:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8001f06:	b2c3      	uxtb	r3, r0
 8001f08:	2b09      	cmp	r3, #9
 8001f0a:	d8b8      	bhi.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8001f0c:	f89d b007 	ldrb.w	fp, [sp, #7]
 8001f10:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 8001f14:	fa5f f38b 	uxtb.w	r3, fp
 8001f18:	2b09      	cmp	r3, #9
 8001f1a:	d8b0      	bhi.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
 8001f1c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001f20:	2b2e      	cmp	r3, #46	; 0x2e
 8001f22:	d1ac      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8001f24:	f89d a009 	ldrb.w	sl, [sp, #9]
 8001f28:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8001f2c:	fa5f f38a 	uxtb.w	r3, sl
 8001f30:	2b09      	cmp	r3, #9
 8001f32:	d8a4      	bhi.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8001f34:	f89d 900a 	ldrb.w	r9, [sp, #10]
 8001f38:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8001f3c:	fa5f f389 	uxtb.w	r3, r9
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	d89c      	bhi.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8001f44:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8001f48:	3e30      	subs	r6, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8001f4a:	b2f3      	uxtb	r3, r6
 8001f4c:	2b09      	cmp	r3, #9
 8001f4e:	d896      	bhi.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8001f50:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001f54:	2b2e      	cmp	r3, #46	; 0x2e
 8001f56:	d192      	bne.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
 8001f58:	f89d 800e 	ldrb.w	r8, [sp, #14]
 8001f5c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8001f60:	fa5f f388 	uxtb.w	r3, r8
 8001f64:	2b09      	cmp	r3, #9
 8001f66:	d88a      	bhi.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8001f68:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8001f6c:	3f30      	subs	r7, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8001f6e:	b2fb      	uxtb	r3, r7
 8001f70:	2b09      	cmp	r3, #9
 8001f72:	d884      	bhi.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8001f74:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8001f78:	3d30      	subs	r5, #48	; 0x30
 8001f7a:	b2eb      	uxtb	r3, r5
 8001f7c:	2b09      	cmp	r3, #9
 8001f7e:	f63f af7e 	bhi.w	8001e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 8001f82:	f89d 4012 	ldrb.w	r4, [sp, #18]
 8001f86:	3c30      	subs	r4, #48	; 0x30
 8001f88:	b2e4      	uxtb	r4, r4
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8001f8a:	2c02      	cmp	r4, #2
 8001f8c:	f63f af77 	bhi.w	8001e7e <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8001f90:	f7fe fe9c 	bl	8000ccc <__aeabi_i2f>
 8001f94:	4948      	ldr	r1, [pc, #288]	; (80020b8 <HAL_UART_RxCpltCallback+0x288>)
 8001f96:	f7fe feed 	bl	8000d74 <__aeabi_fmul>
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	f7fe fde2 	bl	8000b64 <__addsf3>
 8001fa0:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8001fa2:	4658      	mov	r0, fp
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8001fa4:	469b      	mov	fp, r3
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8001fa6:	f7fe fe91 	bl	8000ccc <__aeabi_i2f>
 8001faa:	4659      	mov	r1, fp
 8001fac:	f7fe fdda 	bl	8000b64 <__addsf3>
 8001fb0:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8001fb2:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8001fb4:	469a      	mov	sl, r3
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8001fb6:	f7fe fe89 	bl	8000ccc <__aeabi_i2f>
 8001fba:	493f      	ldr	r1, [pc, #252]	; (80020b8 <HAL_UART_RxCpltCallback+0x288>)
 8001fbc:	f7fe ff8e 	bl	8000edc <__aeabi_fdiv>
 8001fc0:	4651      	mov	r1, sl
 8001fc2:	f7fe fdcf 	bl	8000b64 <__addsf3>
 8001fc6:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8001fc8:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8001fca:	4699      	mov	r9, r3
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8001fcc:	f7fe fe7e 	bl	8000ccc <__aeabi_i2f>
 8001fd0:	493a      	ldr	r1, [pc, #232]	; (80020bc <HAL_UART_RxCpltCallback+0x28c>)
 8001fd2:	f7fe ff83 	bl	8000edc <__aeabi_fdiv>
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	f7fe fdc4 	bl	8000b64 <__addsf3>
 8001fdc:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8001fde:	4630      	mov	r0, r6
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8001fe0:	461e      	mov	r6, r3
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8001fe2:	f7fe fe73 	bl	8000ccc <__aeabi_i2f>
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	f7fe fdbc 	bl	8000b64 <__addsf3>
 8001fec:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8001fee:	4640      	mov	r0, r8
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8001ff0:	4698      	mov	r8, r3
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8001ff2:	f7fe fe6b 	bl	8000ccc <__aeabi_i2f>
 8001ff6:	4930      	ldr	r1, [pc, #192]	; (80020b8 <HAL_UART_RxCpltCallback+0x288>)
 8001ff8:	f7fe ff70 	bl	8000edc <__aeabi_fdiv>
 8001ffc:	4641      	mov	r1, r8
 8001ffe:	f7fe fdb1 	bl	8000b64 <__addsf3>
 8002002:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8002004:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8002006:	461f      	mov	r7, r3
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8002008:	f7fe fe60 	bl	8000ccc <__aeabi_i2f>
 800200c:	492b      	ldr	r1, [pc, #172]	; (80020bc <HAL_UART_RxCpltCallback+0x28c>)
 800200e:	f7fe ff65 	bl	8000edc <__aeabi_fdiv>
 8002012:	4639      	mov	r1, r7
 8002014:	f7fe fda6 	bl	8000b64 <__addsf3>
 8002018:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 800201a:	4628      	mov	r0, r5
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 800201c:	461d      	mov	r5, r3
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 800201e:	f7fe fe55 	bl	8000ccc <__aeabi_i2f>
 8002022:	4927      	ldr	r1, [pc, #156]	; (80020c0 <HAL_UART_RxCpltCallback+0x290>)
 8002024:	f7fe ff5a 	bl	8000edc <__aeabi_fdiv>
 8002028:	4629      	mov	r1, r5
 800202a:	f7fe fd9b 	bl	8000b64 <__addsf3>
		if(tempv2 >= 0.00 && tempv2 <= 12.00){
 800202e:	2100      	movs	r1, #0
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8002030:	4605      	mov	r5, r0
		if(tempv2 >= 0.00 && tempv2 <= 12.00){
 8002032:	4630      	mov	r0, r6
 8002034:	f7ff f850 	bl	80010d8 <__aeabi_fcmpge>
 8002038:	b148      	cbz	r0, 800204e <HAL_UART_RxCpltCallback+0x21e>
 800203a:	4630      	mov	r0, r6
 800203c:	4921      	ldr	r1, [pc, #132]	; (80020c4 <HAL_UART_RxCpltCallback+0x294>)
 800203e:	f7ff f841 	bl	80010c4 <__aeabi_fcmple>
 8002042:	b120      	cbz	r0, 800204e <HAL_UART_RxCpltCallback+0x21e>
			volt_set_main_old = volt_set_main;
 8002044:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_UART_RxCpltCallback+0x298>)
 8002046:	4a21      	ldr	r2, [pc, #132]	; (80020cc <HAL_UART_RxCpltCallback+0x29c>)
 8002048:	6819      	ldr	r1, [r3, #0]
			volt_set_main = tempv2;
 800204a:	601e      	str	r6, [r3, #0]
			volt_set_main_old = volt_set_main;
 800204c:	6011      	str	r1, [r2, #0]
		if(tempa2 >= 0.00 && tempa2 <= 0.8001){
 800204e:	4628      	mov	r0, r5
 8002050:	2100      	movs	r1, #0
 8002052:	f7ff f841 	bl	80010d8 <__aeabi_fcmpge>
 8002056:	b168      	cbz	r0, 8002074 <HAL_UART_RxCpltCallback+0x244>
 8002058:	4628      	mov	r0, r5
 800205a:	f7fe f9fd 	bl	8000458 <__aeabi_f2d>
 800205e:	a312      	add	r3, pc, #72	; (adr r3, 80020a8 <HAL_UART_RxCpltCallback+0x278>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	f7fe fccc 	bl	8000a00 <__aeabi_dcmple>
 8002068:	b120      	cbz	r0, 8002074 <HAL_UART_RxCpltCallback+0x244>
			amp_set_main_old = amp_set_main;
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_UART_RxCpltCallback+0x2a0>)
 800206c:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_UART_RxCpltCallback+0x2a4>)
 800206e:	6819      	ldr	r1, [r3, #0]
			amp_set_main = tempa2;
 8002070:	601d      	str	r5, [r3, #0]
			amp_set_main_old = amp_set_main;
 8002072:	6011      	str	r1, [r2, #0]
		if(chstat_main == 0){
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_UART_RxCpltCallback+0x2a8>)
 8002076:	f993 2000 	ldrsb.w	r2, [r3]
 800207a:	b93a      	cbnz	r2, 800208c <HAL_UART_RxCpltCallback+0x25c>
			if(chstat_temp == 1){
 800207c:	2c01      	cmp	r4, #1
 800207e:	f47f aefe 	bne.w	8001e7e <HAL_UART_RxCpltCallback+0x4e>
				chstat_main = chstat_temp;
 8002082:	701c      	strb	r4, [r3, #0]
 8002084:	e6fb      	b.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 8002086:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 8002088:	7835      	ldrb	r5, [r6, #0]
 800208a:	e6e1      	b.n	8001e50 <HAL_UART_RxCpltCallback+0x20>
		else if(chstat_main == 1){
 800208c:	2a01      	cmp	r2, #1
 800208e:	d002      	beq.n	8002096 <HAL_UART_RxCpltCallback+0x266>
		else if(chstat_main == 2){
 8002090:	2a02      	cmp	r2, #2
 8002092:	f47f aef4 	bne.w	8001e7e <HAL_UART_RxCpltCallback+0x4e>
			if(chstat_temp == 0){
 8002096:	2c00      	cmp	r4, #0
 8002098:	f47f aef1 	bne.w	8001e7e <HAL_UART_RxCpltCallback+0x4e>
				chstat_main = 0;
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e6ed      	b.n	8001e7e <HAL_UART_RxCpltCallback+0x4e>
 80020a2:	bf00      	nop
 80020a4:	f3af 8000 	nop.w
 80020a8:	50b0f27c 	.word	0x50b0f27c
 80020ac:	3fe99a6b 	.word	0x3fe99a6b
 80020b0:	200003a4 	.word	0x200003a4
 80020b4:	20000358 	.word	0x20000358
 80020b8:	41200000 	.word	0x41200000
 80020bc:	42c80000 	.word	0x42c80000
 80020c0:	447a0000 	.word	0x447a0000
 80020c4:	41400000 	.word	0x41400000
 80020c8:	2000046c 	.word	0x2000046c
 80020cc:	20000470 	.word	0x20000470
 80020d0:	20000214 	.word	0x20000214
 80020d4:	20000218 	.word	0x20000218
 80020d8:	2000021c 	.word	0x2000021c

080020dc <HAL_UART_ErrorCallback>:
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64); //Try again!
 80020dc:	2240      	movs	r2, #64	; 0x40
 80020de:	4902      	ldr	r1, [pc, #8]	; (80020e8 <HAL_UART_ErrorCallback+0xc>)
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <HAL_UART_ErrorCallback+0x10>)
 80020e2:	f001 be8d 	b.w	8003e00 <HAL_UART_Receive_DMA>
 80020e6:	bf00      	nop
 80020e8:	200003a4 	.word	0x200003a4
 80020ec:	20000358 	.word	0x20000358

080020f0 <Error_Handler>:
 80020f0:	b672      	cpsid	i
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <Error_Handler+0x2>

080020f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <HAL_MspInit+0x40>)
{
 80020f6:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 80020f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24
 8002100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002102:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002106:	9201      	str	r2, [sp, #4]
 8002108:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	6a1a      	ldr	r2, [r3, #32]
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	621a      	str	r2, [r3, #32]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	f002 0201 	and.w	r2, r2, #1
 8002118:	9202      	str	r2, [sp, #8]
 800211a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800211e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002122:	625a      	str	r2, [r3, #36]	; 0x24
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	9303      	str	r3, [sp, #12]
 800212c:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800212e:	b004      	add	sp, #16
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800

08002138 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002138:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213a:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <HAL_ADC_MspInit+0x9c>)
 800213e:	6802      	ldr	r2, [r0, #0]
{
 8002140:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8002142:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002148:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800214c:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 800214e:	d001      	beq.n	8002154 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002150:	b008      	add	sp, #32
 8002152:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002154:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8002158:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215a:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800215c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002160:	621a      	str	r2, [r3, #32]
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	4605      	mov	r5, r0
 8002166:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800216a:	9200      	str	r2, [sp, #0]
 800216c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	69da      	ldr	r2, [r3, #28]
    hdma_adc.Instance = DMA1_Channel1;
 8002170:	4e19      	ldr	r6, [pc, #100]	; (80021d8 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	61da      	str	r2, [r3, #28]
 8002178:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800217a:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002182:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002184:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	4815      	ldr	r0, [pc, #84]	; (80021dc <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002188:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218c:	f001 f836 	bl	80031fc <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002190:	2380      	movs	r3, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8002192:	4913      	ldr	r1, [pc, #76]	; (80021e0 <HAL_ADC_MspInit+0xa8>)
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002194:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002198:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800219c:	60f3      	str	r3, [r6, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800219e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80021a2:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80021a4:	4630      	mov	r0, r6
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a6:	60b4      	str	r4, [r6, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80021a8:	61f4      	str	r4, [r6, #28]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021aa:	6171      	str	r1, [r6, #20]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021ac:	6132      	str	r2, [r6, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80021ae:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80021b0:	f000 fed6 	bl	8002f60 <HAL_DMA_Init>
 80021b4:	b958      	cbnz	r0, 80021ce <HAL_ADC_MspInit+0x96>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2012      	movs	r0, #18
 80021ba:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80021bc:	646e      	str	r6, [r5, #68]	; 0x44
 80021be:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80021c0:	f000 fdd0 	bl	8002d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80021c4:	2012      	movs	r0, #18
 80021c6:	f000 fe0b 	bl	8002de0 <HAL_NVIC_EnableIRQ>
}
 80021ca:	b008      	add	sp, #32
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80021ce:	f7ff ff8f 	bl	80020f0 <Error_Handler>
 80021d2:	e7f0      	b.n	80021b6 <HAL_ADC_MspInit+0x7e>
 80021d4:	40012400 	.word	0x40012400
 80021d8:	2000028c 	.word	0x2000028c
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40026008 	.word	0x40026008

080021e4 <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_ADC_MspDeInit+0x30>)
 80021e6:	6802      	ldr	r2, [r0, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d000      	beq.n	80021ee <HAL_ADC_MspDeInit+0xa>
 80021ec:	4770      	bx	lr
{
 80021ee:	b510      	push	{r4, lr}
 80021f0:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80021f2:	4a09      	ldr	r2, [pc, #36]	; (8002218 <HAL_ADC_MspDeInit+0x34>)
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 80021f4:	210f      	movs	r1, #15
    __HAL_RCC_ADC1_CLK_DISABLE();
 80021f6:	6a13      	ldr	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 80021f8:	4808      	ldr	r0, [pc, #32]	; (800221c <HAL_ADC_MspDeInit+0x38>)
    __HAL_RCC_ADC1_CLK_DISABLE();
 80021fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021fe:	6213      	str	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8002200:	f001 f8de 	bl	80033c0 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8002204:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002206:	f000 fee3 	bl	8002fd0 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 800220a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 800220e:	2012      	movs	r0, #18
 8002210:	f000 bdf4 	b.w	8002dfc <HAL_NVIC_DisableIRQ>
 8002214:	40012400 	.word	0x40012400
 8002218:	40023800 	.word	0x40023800
 800221c:	40020000 	.word	0x40020000

08002220 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	2300      	movs	r3, #0
{
 8002222:	b530      	push	{r4, r5, lr}
  if(hdac->Instance==DAC)
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <HAL_DAC_MspInit+0x58>)
 8002226:	6801      	ldr	r1, [r0, #0]
{
 8002228:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 800222a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002230:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002234:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8002236:	d001      	beq.n	800223c <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002238:	b009      	add	sp, #36	; 0x24
 800223a:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800223c:	2430      	movs	r4, #48	; 0x30
 800223e:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_DAC_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	480f      	ldr	r0, [pc, #60]	; (8002280 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8002244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC_CLK_ENABLE();
 8002248:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
 800224e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002250:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8002254:	9200      	str	r2, [sp, #0]
 8002256:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	61da      	str	r2, [r3, #28]
 8002260:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002262:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f000 ffc5 	bl	80031fc <HAL_GPIO_Init>
}
 8002272:	b009      	add	sp, #36	; 0x24
 8002274:	bd30      	pop	{r4, r5, pc}
 8002276:	bf00      	nop
 8002278:	40007400 	.word	0x40007400
 800227c:	40023800 	.word	0x40023800
 8002280:	40020000 	.word	0x40020000

08002284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002284:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002286:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8002288:	4b31      	ldr	r3, [pc, #196]	; (8002350 <HAL_UART_MspInit+0xcc>)
 800228a:	6802      	ldr	r2, [r0, #0]
{
 800228c:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 800228e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002294:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002298:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 800229a:	d001      	beq.n	80022a0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800229c:	b008      	add	sp, #32
 800229e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80022a4:	6a1a      	ldr	r2, [r3, #32]
 80022a6:	4605      	mov	r5, r0
 80022a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022ac:	621a      	str	r2, [r3, #32]
 80022ae:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80022b2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80022b6:	9200      	str	r2, [sp, #0]
 80022b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	69da      	ldr	r2, [r3, #28]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80022bc:	4e25      	ldr	r6, [pc, #148]	; (8002354 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	61da      	str	r2, [r3, #28]
 80022c4:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022c6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022d0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d4:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022da:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	481e      	ldr	r0, [pc, #120]	; (8002358 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022e0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f000 ff8b 	bl	80031fc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80022e6:	491d      	ldr	r1, [pc, #116]	; (800235c <HAL_UART_MspInit+0xd8>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022e8:	2210      	movs	r2, #16
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022ea:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80022ec:	6031      	str	r1, [r6, #0]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80022ee:	2120      	movs	r1, #32
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022f0:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022f2:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f6:	60b4      	str	r4, [r6, #8]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022f8:	61f4      	str	r4, [r6, #28]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80022fa:	61b1      	str	r1, [r6, #24]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022fc:	6072      	str	r2, [r6, #4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022fe:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002300:	f000 fe2e 	bl	8002f60 <HAL_DMA_Init>
 8002304:	b9e8      	cbnz	r0, 8002342 <HAL_UART_MspInit+0xbe>
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002306:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002308:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800230a:	4c15      	ldr	r4, [pc, #84]	; (8002360 <HAL_UART_MspInit+0xdc>)
 800230c:	4915      	ldr	r1, [pc, #84]	; (8002364 <HAL_UART_MspInit+0xe0>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800230e:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002310:	636e      	str	r6, [r5, #52]	; 0x34
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002312:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002316:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800231a:	e9c4 3305 	strd	r3, r3, [r4, #20]
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800231e:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002320:	6021      	str	r1, [r4, #0]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002322:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002324:	f000 fe1c 	bl	8002f60 <HAL_DMA_Init>
 8002328:	b970      	cbnz	r0, 8002348 <HAL_UART_MspInit+0xc4>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2025      	movs	r0, #37	; 0x25
 800232e:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002330:	63ac      	str	r4, [r5, #56]	; 0x38
 8002332:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002334:	f000 fd16 	bl	8002d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002338:	2025      	movs	r0, #37	; 0x25
 800233a:	f000 fd51 	bl	8002de0 <HAL_NVIC_EnableIRQ>
}
 800233e:	b008      	add	sp, #32
 8002340:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002342:	f7ff fed5 	bl	80020f0 <Error_Handler>
 8002346:	e7de      	b.n	8002306 <HAL_UART_MspInit+0x82>
      Error_Handler();
 8002348:	f7ff fed2 	bl	80020f0 <Error_Handler>
 800234c:	e7ed      	b.n	800232a <HAL_UART_MspInit+0xa6>
 800234e:	bf00      	nop
 8002350:	40013800 	.word	0x40013800
 8002354:	20000314 	.word	0x20000314
 8002358:	40020000 	.word	0x40020000
 800235c:	40026044 	.word	0x40026044
 8002360:	200002d0 	.word	0x200002d0
 8002364:	40026058 	.word	0x40026058

08002368 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <NMI_Handler>
 800236a:	bf00      	nop

0800236c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <HardFault_Handler>
 800236e:	bf00      	nop

08002370 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <MemManage_Handler>
 8002372:	bf00      	nop

08002374 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <BusFault_Handler>
 8002376:	bf00      	nop

08002378 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <UsageFault_Handler>
 800237a:	bf00      	nop

0800237c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop

08002380 <DebugMon_Handler>:
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop

08002384 <PendSV_Handler>:
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop

08002388 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002388:	f000 b8dc 	b.w	8002544 <HAL_IncTick>

0800238c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800238c:	4801      	ldr	r0, [pc, #4]	; (8002394 <DMA1_Channel1_IRQHandler+0x8>)
 800238e:	f000 bee7 	b.w	8003160 <HAL_DMA_IRQHandler>
 8002392:	bf00      	nop
 8002394:	2000028c 	.word	0x2000028c

08002398 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002398:	4801      	ldr	r0, [pc, #4]	; (80023a0 <DMA1_Channel4_IRQHandler+0x8>)
 800239a:	f000 bee1 	b.w	8003160 <HAL_DMA_IRQHandler>
 800239e:	bf00      	nop
 80023a0:	20000314 	.word	0x20000314

080023a4 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023a4:	4801      	ldr	r0, [pc, #4]	; (80023ac <DMA1_Channel5_IRQHandler+0x8>)
 80023a6:	f000 bedb 	b.w	8003160 <HAL_DMA_IRQHandler>
 80023aa:	bf00      	nop
 80023ac:	200002d0 	.word	0x200002d0

080023b0 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80023b0:	4801      	ldr	r0, [pc, #4]	; (80023b8 <ADC1_IRQHandler+0x8>)
 80023b2:	f000 ba8f 	b.w	80028d4 <HAL_ADC_IRQHandler>
 80023b6:	bf00      	nop
 80023b8:	20000224 	.word	0x20000224

080023bc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023bc:	4801      	ldr	r0, [pc, #4]	; (80023c4 <USART1_IRQHandler+0x8>)
 80023be:	f001 be67 	b.w	8004090 <HAL_UART_IRQHandler>
 80023c2:	bf00      	nop
 80023c4:	20000358 	.word	0x20000358

080023c8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80023c8:	2001      	movs	r0, #1
 80023ca:	4770      	bx	lr

080023cc <_kill>:

int _kill(int pid, int sig)
{
 80023cc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80023ce:	f001 ff8d 	bl	80042ec <__errno>
 80023d2:	2216      	movs	r2, #22
 80023d4:	4603      	mov	r3, r0
	return -1;
}
 80023d6:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80023da:	601a      	str	r2, [r3, #0]
}
 80023dc:	bd08      	pop	{r3, pc}
 80023de:	bf00      	nop

080023e0 <_exit>:

void _exit (int status)
{
 80023e0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80023e2:	f001 ff83 	bl	80042ec <__errno>
 80023e6:	2316      	movs	r3, #22
 80023e8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80023ea:	e7fe      	b.n	80023ea <_exit+0xa>

080023ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ec:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ee:	1e16      	subs	r6, r2, #0
 80023f0:	dd07      	ble.n	8002402 <_read+0x16>
 80023f2:	460c      	mov	r4, r1
 80023f4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80023f6:	f3af 8000 	nop.w
 80023fa:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fe:	42a5      	cmp	r5, r4
 8002400:	d1f9      	bne.n	80023f6 <_read+0xa>
	}

return len;
}
 8002402:	4630      	mov	r0, r6
 8002404:	bd70      	pop	{r4, r5, r6, pc}
 8002406:	bf00      	nop

08002408 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002408:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240a:	1e16      	subs	r6, r2, #0
 800240c:	dd07      	ble.n	800241e <_write+0x16>
 800240e:	460c      	mov	r4, r1
 8002410:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8002412:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002416:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241a:	42ac      	cmp	r4, r5
 800241c:	d1f9      	bne.n	8002412 <_write+0xa>
	}
	return len;
}
 800241e:	4630      	mov	r0, r6
 8002420:	bd70      	pop	{r4, r5, r6, pc}
 8002422:	bf00      	nop

08002424 <_close>:

int _close(int file)
{
	return -1;
}
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop

0800242c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800242c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002430:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002432:	604b      	str	r3, [r1, #4]
}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop

08002438 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002438:	2001      	movs	r0, #1
 800243a:	4770      	bx	lr

0800243c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800243c:	2000      	movs	r0, #0
 800243e:	4770      	bx	lr

08002440 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002440:	490d      	ldr	r1, [pc, #52]	; (8002478 <_sbrk+0x38>)
{
 8002442:	4603      	mov	r3, r0
 8002444:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002446:	4a0d      	ldr	r2, [pc, #52]	; (800247c <_sbrk+0x3c>)
 8002448:	4c0d      	ldr	r4, [pc, #52]	; (8002480 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 800244a:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800244c:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800244e:	b120      	cbz	r0, 800245a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002450:	4403      	add	r3, r0
 8002452:	4293      	cmp	r3, r2
 8002454:	d807      	bhi.n	8002466 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002456:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8002458:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800245a:	4c0a      	ldr	r4, [pc, #40]	; (8002484 <_sbrk+0x44>)
 800245c:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 800245e:	4403      	add	r3, r0
 8002460:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8002462:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002464:	d9f7      	bls.n	8002456 <_sbrk+0x16>
    errno = ENOMEM;
 8002466:	f001 ff41 	bl	80042ec <__errno>
 800246a:	220c      	movs	r2, #12
 800246c:	4603      	mov	r3, r0
    return (void *)-1;
 800246e:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8002472:	601a      	str	r2, [r3, #0]
}
 8002474:	bd10      	pop	{r4, pc}
 8002476:	bf00      	nop
 8002478:	20000474 	.word	0x20000474
 800247c:	20001000 	.word	0x20001000
 8002480:	00000400 	.word	0x00000400
 8002484:	20000490 	.word	0x20000490

08002488 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop

0800248c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800248c:	480c      	ldr	r0, [pc, #48]	; (80024c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800248e:	490d      	ldr	r1, [pc, #52]	; (80024c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002490:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002494:	e002      	b.n	800249c <LoopCopyDataInit>

08002496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800249a:	3304      	adds	r3, #4

0800249c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800249c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a0:	d3f9      	bcc.n	8002496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024a4:	4c0a      	ldr	r4, [pc, #40]	; (80024d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a8:	e001      	b.n	80024ae <LoopFillZerobss>

080024aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ac:	3204      	adds	r2, #4

080024ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b0:	d3fb      	bcc.n	80024aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024b2:	f7ff ffe9 	bl	8002488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024b6:	f001 ff1f 	bl	80042f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ba:	f7ff f92d 	bl	8001718 <main>
  bx lr
 80024be:	4770      	bx	lr
  ldr r0, =_sdata
 80024c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80024c8:	08007584 	.word	0x08007584
  ldr r2, =_sbss
 80024cc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80024d0:	2000048c 	.word	0x2000048c

080024d4 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024d4:	e7fe      	b.n	80024d4 <COMP_IRQHandler>
	...

080024d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <HAL_InitTick+0x40>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b90b      	cbnz	r3, 80024e4 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80024e0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80024e2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80024e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	490b      	ldr	r1, [pc, #44]	; (800251c <HAL_InitTick+0x44>)
 80024ee:	4605      	mov	r5, r0
 80024f0:	6808      	ldr	r0, [r1, #0]
 80024f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80024f6:	f000 fc95 	bl	8002e24 <HAL_SYSTICK_Config>
 80024fa:	4604      	mov	r4, r0
 80024fc:	2800      	cmp	r0, #0
 80024fe:	d1ef      	bne.n	80024e0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002500:	2d0f      	cmp	r5, #15
 8002502:	d8ed      	bhi.n	80024e0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002504:	4602      	mov	r2, r0
 8002506:	4629      	mov	r1, r5
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f000 fc2a 	bl	8002d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_InitTick+0x48>)
 8002512:	4620      	mov	r0, r4
 8002514:	601d      	str	r5, [r3, #0]
}
 8002516:	bd38      	pop	{r3, r4, r5, pc}
 8002518:	20000008 	.word	0x20000008
 800251c:	20000004 	.word	0x20000004
 8002520:	2000000c 	.word	0x2000000c

08002524 <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002524:	2003      	movs	r0, #3
{
 8002526:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002528:	f000 fc0a 	bl	8002d40 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800252c:	200f      	movs	r0, #15
 800252e:	f7ff ffd3 	bl	80024d8 <HAL_InitTick>
 8002532:	b110      	cbz	r0, 800253a <HAL_Init+0x16>
    status = HAL_ERROR;
 8002534:	2401      	movs	r4, #1
}
 8002536:	4620      	mov	r0, r4
 8002538:	bd10      	pop	{r4, pc}
 800253a:	4604      	mov	r4, r0
    HAL_MspInit();
 800253c:	f7ff fdda 	bl	80020f4 <HAL_MspInit>
}
 8002540:	4620      	mov	r0, r4
 8002542:	bd10      	pop	{r4, pc}

08002544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002544:	4a03      	ldr	r2, [pc, #12]	; (8002554 <HAL_IncTick+0x10>)
 8002546:	4904      	ldr	r1, [pc, #16]	; (8002558 <HAL_IncTick+0x14>)
 8002548:	6813      	ldr	r3, [r2, #0]
 800254a:	6809      	ldr	r1, [r1, #0]
 800254c:	440b      	add	r3, r1
 800254e:	6013      	str	r3, [r2, #0]
}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000478 	.word	0x20000478
 8002558:	20000008 	.word	0x20000008

0800255c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800255c:	4b01      	ldr	r3, [pc, #4]	; (8002564 <HAL_GetTick+0x8>)
 800255e:	6818      	ldr	r0, [r3, #0]
}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000478 	.word	0x20000478

08002568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002568:	b538      	push	{r3, r4, r5, lr}
 800256a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff fff6 	bl	800255c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002570:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002572:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002574:	d002      	beq.n	800257c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <HAL_Delay+0x20>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800257c:	f7ff ffee 	bl	800255c <HAL_GetTick>
 8002580:	1b40      	subs	r0, r0, r5
 8002582:	42a0      	cmp	r0, r4
 8002584:	d3fa      	bcc.n	800257c <HAL_Delay+0x14>
  {
  }
}
 8002586:	bd38      	pop	{r3, r4, r5, pc}
 8002588:	20000008 	.word	0x20000008

0800258c <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800258c:	2800      	cmp	r0, #0
 800258e:	f000 80a9 	beq.w	80026e4 <HAL_ADC_Init+0x158>
{
 8002592:	b530      	push	{r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002594:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002596:	4604      	mov	r4, r0
{
 8002598:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 800259a:	2b00      	cmp	r3, #0
 800259c:	d078      	beq.n	8002690 <HAL_ADC_Init+0x104>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800259e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025a0:	06d8      	lsls	r0, r3, #27
 80025a2:	d453      	bmi.n	800264c <HAL_ADC_Init+0xc0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80025a6:	4a5c      	ldr	r2, [pc, #368]	; (8002718 <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 80025a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025ac:	f023 0302 	bic.w	r3, r3, #2
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 80025b6:	6853      	ldr	r3, [r2, #4]
 80025b8:	6861      	ldr	r1, [r4, #4]
 80025ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80025be:	430b      	orrs	r3, r1
 80025c0:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025c6:	fa91 f1a1 	rbit	r1, r1
 80025ca:	2302      	movs	r3, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80025cc:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80025d0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80025dc:	6965      	ldr	r5, [r4, #20]
 80025de:	68e2      	ldr	r2, [r4, #12]
 80025e0:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 80025e4:	432a      	orrs	r2, r5
 80025e6:	6a25      	ldr	r5, [r4, #32]
 80025e8:	fa0c f101 	lsl.w	r1, ip, r1
 80025ec:	432a      	orrs	r2, r5
 80025ee:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80025f2:	fa00 f303 	lsl.w	r3, r0, r3
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f6:	2910      	cmp	r1, #16
                hadc->Init.ChannelsBank                                        |
 80025f8:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025fc:	d002      	beq.n	8002604 <HAL_ADC_Init+0x78>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80025fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002600:	4311      	orrs	r1, r2
 8002602:	430b      	orrs	r3, r1
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002604:	6822      	ldr	r2, [r4, #0]
 8002606:	6811      	ldr	r1, [r2, #0]
 8002608:	0649      	lsls	r1, r1, #25
 800260a:	d551      	bpl.n	80026b0 <HAL_ADC_Init+0x124>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800260c:	6925      	ldr	r5, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800260e:	6890      	ldr	r0, [r2, #8]
 8002610:	4942      	ldr	r1, [pc, #264]	; (800271c <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002612:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 8002616:	ea01 0100 	and.w	r1, r1, r0
 800261a:	ea41 0103 	orr.w	r1, r1, r3
 800261e:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002620:	d017      	beq.n	8002652 <HAL_ADC_Init+0xc6>
 8002622:	2d01      	cmp	r5, #1
 8002624:	d015      	beq.n	8002652 <HAL_ADC_Init+0xc6>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002626:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002628:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 800262c:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800262e:	6891      	ldr	r1, [r2, #8]
 8002630:	4a3b      	ldr	r2, [pc, #236]	; (8002720 <HAL_ADC_Init+0x194>)
 8002632:	400a      	ands	r2, r1
 8002634:	429a      	cmp	r2, r3
 8002636:	d11f      	bne.n	8002678 <HAL_ADC_Init+0xec>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002638:	2000      	movs	r0, #0
 800263a:	6520      	str	r0, [r4, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800263c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8002648:	b003      	add	sp, #12
 800264a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800264c:	2001      	movs	r0, #1
}
 800264e:	b003      	add	sp, #12
 8002650:	bd30      	pop	{r4, r5, pc}
 8002652:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002656:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8002658:	fa91 f1a1 	rbit	r1, r1
 800265c:	fab1 f081 	clz	r0, r1
 8002660:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002662:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 8002666:	3901      	subs	r1, #1
 8002668:	4081      	lsls	r1, r0
 800266a:	4329      	orrs	r1, r5
 800266c:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800266e:	6891      	ldr	r1, [r2, #8]
 8002670:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <HAL_ADC_Init+0x194>)
 8002672:	400a      	ands	r2, r1
 8002674:	429a      	cmp	r2, r3
 8002676:	d0df      	beq.n	8002638 <HAL_ADC_Init+0xac>
      tmp_hal_status = HAL_ERROR;
 8002678:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800267a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800267c:	f023 0312 	bic.w	r3, r3, #18
 8002680:	f043 0310 	orr.w	r3, r3, #16
 8002684:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002686:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002688:	4303      	orrs	r3, r0
 800268a:	6523      	str	r3, [r4, #80]	; 0x50
}
 800268c:	b003      	add	sp, #12
 800268e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002690:	4a24      	ldr	r2, [pc, #144]	; (8002724 <HAL_ADC_Init+0x198>)
    ADC_CLEAR_ERRORCODE(hadc);
 8002692:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 8002694:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002698:	6a13      	ldr	r3, [r2, #32]
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6213      	str	r3, [r2, #32]
 80026a0:	6a13      	ldr	r3, [r2, #32]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 80026aa:	f7ff fd45 	bl	8002138 <HAL_ADC_MspInit>
 80026ae:	e776      	b.n	800259e <HAL_ADC_Init+0x12>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80026b0:	69a1      	ldr	r1, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80026b2:	68a5      	ldr	r5, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80026b4:	430b      	orrs	r3, r1
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80026b6:	69e1      	ldr	r1, [r4, #28]
 80026b8:	ea45 0c01 	orr.w	ip, r5, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80026bc:	6925      	ldr	r5, [r4, #16]
 80026be:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80026c2:	d00c      	beq.n	80026de <HAL_ADC_Init+0x152>
 80026c4:	2d01      	cmp	r5, #1
 80026c6:	d00a      	beq.n	80026de <HAL_ADC_Init+0x152>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026c8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80026cc:	2901      	cmp	r1, #1
 80026ce:	d00b      	beq.n	80026e8 <HAL_ADC_Init+0x15c>
        MODIFY_REG(hadc->Instance->CR1,
 80026d0:	6850      	ldr	r0, [r2, #4]
 80026d2:	4915      	ldr	r1, [pc, #84]	; (8002728 <HAL_ADC_Init+0x19c>)
 80026d4:	4001      	ands	r1, r0
 80026d6:	ea41 010c 	orr.w	r1, r1, ip
 80026da:	6051      	str	r1, [r2, #4]
 80026dc:	e797      	b.n	800260e <HAL_ADC_Init+0x82>
                  hadc->Init.LowPowerAutoPowerOff           |
 80026de:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 80026e2:	e7f1      	b.n	80026c8 <HAL_ADC_Init+0x13c>
    return HAL_ERROR;
 80026e4:	2001      	movs	r0, #1
}
 80026e6:	4770      	bx	lr
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80026e8:	b968      	cbnz	r0, 8002706 <HAL_ADC_Init+0x17a>
 80026ea:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80026ee:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026f2:	fab1 f081 	clz	r0, r1
 80026f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80026f8:	3901      	subs	r1, #1
 80026fa:	4081      	lsls	r1, r0
 80026fc:	ea41 010c 	orr.w	r1, r1, ip
 8002700:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 8002704:	e7e4      	b.n	80026d0 <HAL_ADC_Init+0x144>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002706:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002708:	f041 0120 	orr.w	r1, r1, #32
 800270c:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002710:	f041 0101 	orr.w	r1, r1, #1
 8002714:	6521      	str	r1, [r4, #80]	; 0x50
 8002716:	e7db      	b.n	80026d0 <HAL_ADC_Init+0x144>
 8002718:	40012700 	.word	0x40012700
 800271c:	c0fff18d 	.word	0xc0fff18d
 8002720:	bf80fffe 	.word	0xbf80fffe
 8002724:	40023800 	.word	0x40023800
 8002728:	fcfc16ff 	.word	0xfcfc16ff

0800272c <HAL_ADC_DeInit>:
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800272c:	2800      	cmp	r0, #0
 800272e:	d075      	beq.n	800281c <HAL_ADC_DeInit+0xf0>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002730:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 8002732:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002734:	f042 0202 	orr.w	r2, r2, #2
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002738:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800273a:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (ADC_IS_ENABLE(hadc) != RESET)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4604      	mov	r4, r0
 8002740:	0655      	lsls	r5, r2, #25
 8002742:	d453      	bmi.n	80027ec <HAL_ADC_DeInit+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8002744:	f06f 001f 	mvn.w	r0, #31
 8002748:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 800274a:	6858      	ldr	r0, [r3, #4]
 800274c:	4939      	ldr	r1, [pc, #228]	; (8002834 <HAL_ADC_DeInit+0x108>)
    ADC_CR2_CLEAR(hadc);
 800274e:	4a3a      	ldr	r2, [pc, #232]	; (8002838 <HAL_ADC_DeInit+0x10c>)
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 8002750:	4001      	ands	r1, r0
 8002752:	6059      	str	r1, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 8002754:	6899      	ldr	r1, [r3, #8]
 8002756:	400a      	ands	r2, r1
 8002758:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 800275a:	bf00      	nop
    ADC_SMPR1_CLEAR(hadc);
 800275c:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 800275e:	4a37      	ldr	r2, [pc, #220]	; (800283c <HAL_ADC_DeInit+0x110>)
    ADC_SMPR1_CLEAR(hadc);
 8002760:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8002762:	4837      	ldr	r0, [pc, #220]	; (8002840 <HAL_ADC_DeInit+0x114>)
    ADC_SMPR1_CLEAR(hadc);
 8002764:	0d49      	lsrs	r1, r1, #21
 8002766:	0549      	lsls	r1, r1, #21
 8002768:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 800276a:	6919      	ldr	r1, [r3, #16]
 800276c:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8002770:	6119      	str	r1, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 8002772:	6959      	ldr	r1, [r3, #20]
 8002774:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8002778:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 800277a:	6999      	ldr	r1, [r3, #24]
 800277c:	4011      	ands	r1, r2
 800277e:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8002780:	69d9      	ldr	r1, [r3, #28]
 8002782:	4011      	ands	r1, r2
 8002784:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8002786:	6a19      	ldr	r1, [r3, #32]
 8002788:	4011      	ands	r1, r2
 800278a:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 800278c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800278e:	4011      	ands	r1, r2
 8002790:	6259      	str	r1, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8002792:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002794:	4011      	ands	r1, r2
 8002796:	6299      	str	r1, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8002798:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800279a:	400a      	ands	r2, r1
 800279c:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 800279e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 80027a0:	4928      	ldr	r1, [pc, #160]	; (8002844 <HAL_ADC_DeInit+0x118>)
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 80027a2:	4010      	ands	r0, r2
 80027a4:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 80027a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_ADC_MspDeInit(hadc);
 80027a8:	4620      	mov	r0, r4
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 80027aa:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80027ae:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 80027b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027b2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80027b6:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 80027b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ba:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80027be:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 80027c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 80027c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ca:	0d92      	lsrs	r2, r2, #22
 80027cc:	0592      	lsls	r2, r2, #22
 80027ce:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 80027d0:	684b      	ldr	r3, [r1, #4]
 80027d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027d6:	604b      	str	r3, [r1, #4]
    HAL_ADC_MspDeInit(hadc);
 80027d8:	f7ff fd04 	bl	80021e4 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80027dc:	2300      	movs	r3, #0
    hadc->State = HAL_ADC_STATE_RESET;
 80027de:	4618      	mov	r0, r3
    ADC_CLEAR_ERRORCODE(hadc);
 80027e0:	6523      	str	r3, [r4, #80]	; 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 80027e2:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 80027e4:	2300      	movs	r3, #0
 80027e6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 80027ea:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027f4:	f7ff feb2 	bl	800255c <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027f8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80027fa:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	0650      	lsls	r0, r2, #25
 8002800:	d5a0      	bpl.n	8002744 <HAL_ADC_DeInit+0x18>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002802:	f7ff feab 	bl	800255c <HAL_GetTick>
 8002806:	1b40      	subs	r0, r0, r5
 8002808:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800280a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800280c:	d902      	bls.n	8002814 <HAL_ADC_DeInit+0xe8>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	0651      	lsls	r1, r2, #25
 8002812:	d405      	bmi.n	8002820 <HAL_ADC_DeInit+0xf4>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	0652      	lsls	r2, r2, #25
 8002818:	d4f3      	bmi.n	8002802 <HAL_ADC_DeInit+0xd6>
 800281a:	e793      	b.n	8002744 <HAL_ADC_DeInit+0x18>
    return HAL_ERROR;
 800281c:	2001      	movs	r0, #1
}
 800281e:	4770      	bx	lr
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002820:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002824:	f043 0310 	orr.w	r3, r3, #16
 8002828:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800282c:	4303      	orrs	r3, r0
 800282e:	6523      	str	r3, [r4, #80]	; 0x50
  if (tmp_hal_status == HAL_OK)
 8002830:	e7d8      	b.n	80027e4 <HAL_ADC_DeInit+0xb8>
 8002832:	bf00      	nop
 8002834:	f83c0000 	.word	0xf83c0000
 8002838:	8080f08c 	.word	0x8080f08c
 800283c:	fffff000 	.word	0xfffff000
 8002840:	fe0f8000 	.word	0xfe0f8000
 8002844:	40012700 	.word	0x40012700

08002848 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002848:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800284a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800284c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002850:	d126      	bne.n	80028a0 <ADC_DMAConvCplt+0x58>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002854:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 800285a:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800285c:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800285e:	688a      	ldr	r2, [r1, #8]
 8002860:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002864:	d118      	bne.n	8002898 <ADC_DMAConvCplt+0x50>
 8002866:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800286a:	b9aa      	cbnz	r2, 8002898 <ADC_DMAConvCplt+0x50>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800286c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800286e:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8002872:	d002      	beq.n	800287a <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002874:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002876:	0550      	lsls	r0, r2, #21
 8002878:	d40e      	bmi.n	8002898 <ADC_DMAConvCplt+0x50>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800287a:	684a      	ldr	r2, [r1, #4]
 800287c:	f022 0220 	bic.w	r2, r2, #32
 8002880:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002888:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800288a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800288c:	04d2      	lsls	r2, r2, #19
 800288e:	d403      	bmi.n	8002898 <ADC_DMAConvCplt+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002890:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fa67 	bl	8001d6c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800289e:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	4718      	bx	r3
 80028a6:	bf00      	nop

080028a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028a8:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028aa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80028ac:	f7ff fa50 	bl	8001d50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028b0:	bd08      	pop	{r3, pc}
 80028b2:	bf00      	nop

080028b4 <HAL_ADC_ErrorCallback>:
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop

080028b8 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80028ba:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80028be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c2:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028cc:	f7ff fff2 	bl	80028b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028d0:	bd08      	pop	{r3, pc}
 80028d2:	bf00      	nop

080028d4 <HAL_ADC_IRQHandler>:
{
 80028d4:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80028d6:	6803      	ldr	r3, [r0, #0]
{
 80028d8:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	0691      	lsls	r1, r2, #26
 80028de:	d502      	bpl.n	80028e6 <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	0792      	lsls	r2, r2, #30
 80028e4:	d445      	bmi.n	8002972 <HAL_ADC_IRQHandler+0x9e>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	0612      	lsls	r2, r2, #24
 80028ea:	d502      	bpl.n	80028f2 <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	0755      	lsls	r5, r2, #29
 80028f0:	d40c      	bmi.n	800290c <HAL_ADC_IRQHandler+0x38>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	0655      	lsls	r5, r2, #25
 80028f6:	d502      	bpl.n	80028fe <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	07d0      	lsls	r0, r2, #31
 80028fc:	d46f      	bmi.n	80029de <HAL_ADC_IRQHandler+0x10a>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	0151      	lsls	r1, r2, #5
 8002902:	d502      	bpl.n	800290a <HAL_ADC_IRQHandler+0x36>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	0692      	lsls	r2, r2, #26
 8002908:	d45c      	bmi.n	80029c4 <HAL_ADC_IRQHandler+0xf0>
}
 800290a:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800290c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800290e:	06d0      	lsls	r0, r2, #27
 8002910:	d403      	bmi.n	800291a <HAL_ADC_IRQHandler+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002912:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002918:	64e2      	str	r2, [r4, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002920:	d11f      	bne.n	8002962 <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002924:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002928:	d002      	beq.n	8002930 <HAL_ADC_IRQHandler+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800292a:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800292c:	0551      	lsls	r1, r2, #21
 800292e:	d418      	bmi.n	8002962 <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002930:	685a      	ldr	r2, [r3, #4]
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002932:	0552      	lsls	r2, r2, #21
 8002934:	d415      	bmi.n	8002962 <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002936:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002938:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800293c:	d111      	bne.n	8002962 <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800293e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8002942:	b972      	cbnz	r2, 8002962 <HAL_ADC_IRQHandler+0x8e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800294c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800294e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002952:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002954:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002956:	05db      	lsls	r3, r3, #23
 8002958:	d403      	bmi.n	8002962 <HAL_ADC_IRQHandler+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800295a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002962:	4620      	mov	r0, r4
 8002964:	f000 f9ea 	bl	8002d3c <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002968:	f06f 020c 	mvn.w	r2, #12
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e7bf      	b.n	80028f2 <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002972:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002974:	06d5      	lsls	r5, r2, #27
 8002976:	d403      	bmi.n	8002980 <HAL_ADC_IRQHandler+0xac>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002978:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800297a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297e:	64c2      	str	r2, [r0, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002986:	d115      	bne.n	80029b4 <HAL_ADC_IRQHandler+0xe0>
 8002988:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800298c:	b992      	cbnz	r2, 80029b4 <HAL_ADC_IRQHandler+0xe0>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800298e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002990:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8002994:	d12f      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x122>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	f022 0220 	bic.w	r2, r2, #32
 800299c:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800299e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80029a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029a4:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80029a8:	04d9      	lsls	r1, r3, #19
 80029aa:	d403      	bmi.n	80029b4 <HAL_ADC_IRQHandler+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_ConvCpltCallback(hadc);
 80029b4:	4620      	mov	r0, r4
 80029b6:	f7ff f9d9 	bl	8001d6c <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029ba:	f06f 0212 	mvn.w	r2, #18
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	e790      	b.n	80028e6 <HAL_ADC_IRQHandler+0x12>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029c4:	f06f 0520 	mvn.w	r5, #32
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
      HAL_ADC_ErrorCallback(hadc);
 80029ca:	4620      	mov	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029cc:	f042 0202 	orr.w	r2, r2, #2
 80029d0:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029d2:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80029d4:	f7ff ff6e 	bl	80028b4 <HAL_ADC_ErrorCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	601d      	str	r5, [r3, #0]
}
 80029dc:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029e0:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e6:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029e8:	f7ff f9ce 	bl	8001d88 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029ec:	f06f 0201 	mvn.w	r2, #1
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e783      	b.n	80028fe <HAL_ADC_IRQHandler+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029f6:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029f8:	0550      	lsls	r0, r2, #21
 80029fa:	d4db      	bmi.n	80029b4 <HAL_ADC_IRQHandler+0xe0>
 80029fc:	e7cb      	b.n	8002996 <HAL_ADC_IRQHandler+0xc2>
 80029fe:	bf00      	nop

08002a00 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8002a00:	2300      	movs	r3, #0
{
 8002a02:	b530      	push	{r4, r5, lr}
 8002a04:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8002a06:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002a08:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	f000 80aa 	beq.w	8002b66 <HAL_ADC_ConfigChannel+0x166>
 8002a12:	2301      	movs	r3, #1
 8002a14:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 8002a18:	684b      	ldr	r3, [r1, #4]
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR5,
 8002a1e:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7)
 8002a20:	d924      	bls.n	8002a6c <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13)
 8002a22:	2b0c      	cmp	r3, #12
 8002a24:	d866      	bhi.n	8002af4 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SQR4,
 8002a26:	f04f 0c1f 	mov.w	ip, #31
 8002a2a:	680c      	ldr	r4, [r1, #0]
 8002a2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a30:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002a32:	3b23      	subs	r3, #35	; 0x23
 8002a34:	fa04 fe03 	lsl.w	lr, r4, r3
 8002a38:	fa0c f303 	lsl.w	r3, ip, r3
 8002a3c:	ea25 0303 	bic.w	r3, r5, r3
 8002a40:	ea43 030e 	orr.w	r3, r3, lr
 8002a44:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002a46:	2c09      	cmp	r4, #9
 8002a48:	d822      	bhi.n	8002a90 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR3,
 8002a4a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8002a4e:	2407      	movs	r4, #7
 8002a50:	6943      	ldr	r3, [r0, #20]
 8002a52:	6889      	ldr	r1, [r1, #8]
 8002a54:	40ac      	lsls	r4, r5
 8002a56:	40a9      	lsls	r1, r5
 8002a58:	ea23 0404 	bic.w	r4, r3, r4
 8002a5c:	430c      	orrs	r4, r1
 8002a5e:	6144      	str	r4, [r0, #20]
  __HAL_UNLOCK(hadc);
 8002a60:	2300      	movs	r3, #0
  return tmp_hal_status;
 8002a62:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8002a64:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
}
 8002a68:	b003      	add	sp, #12
 8002a6a:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR5,
 8002a6c:	f04f 0c1f 	mov.w	ip, #31
 8002a70:	680c      	ldr	r4, [r1, #0]
 8002a72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a76:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002a78:	3b05      	subs	r3, #5
 8002a7a:	fa04 fe03 	lsl.w	lr, r4, r3
 8002a7e:	fa0c f303 	lsl.w	r3, ip, r3
 8002a82:	ea25 0303 	bic.w	r3, r5, r3
 8002a86:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002a8a:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SQR5,
 8002a8c:	6403      	str	r3, [r0, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002a8e:	d9dc      	bls.n	8002a4a <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002a90:	2c13      	cmp	r4, #19
 8002a92:	d844      	bhi.n	8002b1e <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 8002a94:	f04f 0c07 	mov.w	ip, #7
 8002a98:	688d      	ldr	r5, [r1, #8]
 8002a9a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8002a9e:	6903      	ldr	r3, [r0, #16]
 8002aa0:	391e      	subs	r1, #30
 8002aa2:	408d      	lsls	r5, r1
 8002aa4:	fa0c f101 	lsl.w	r1, ip, r1
 8002aa8:	ea23 0301 	bic.w	r3, r3, r1
 8002aac:	432b      	orrs	r3, r5
 8002aae:	6103      	str	r3, [r0, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ab0:	f1a4 0310 	sub.w	r3, r4, #16
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d8d3      	bhi.n	8002a60 <HAL_ADC_ConfigChannel+0x60>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002ab8:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <HAL_ADC_ConfigChannel+0x18c>)
 8002aba:	6859      	ldr	r1, [r3, #4]
 8002abc:	0209      	lsls	r1, r1, #8
 8002abe:	d4cf      	bmi.n	8002a60 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002ac0:	6859      	ldr	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ac2:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002ac4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002ac8:	6059      	str	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aca:	d1c9      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002acc:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_ADC_ConfigChannel+0x190>)
 8002ace:	4931      	ldr	r1, [pc, #196]	; (8002b94 <HAL_ADC_ConfigChannel+0x194>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	fba1 1303 	umull	r1, r3, r1, r3
 8002ad6:	0c9b      	lsrs	r3, r3, #18
 8002ad8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8002ae0:	9b01      	ldr	r3, [sp, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0bc      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8002ae6:	9b01      	ldr	r3, [sp, #4]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8002aec:	9b01      	ldr	r3, [sp, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f9      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0xe6>
 8002af2:	e7b5      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x60>
  else if (sConfig->Rank < 19)
 8002af4:	2b12      	cmp	r3, #18
 8002af6:	d925      	bls.n	8002b44 <HAL_ADC_ConfigChannel+0x144>
  else if (sConfig->Rank < 25)
 8002af8:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 8002afa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 8002afe:	d835      	bhi.n	8002b6c <HAL_ADC_ConfigChannel+0x16c>
    MODIFY_REG(hadc->Instance->SQR2,
 8002b00:	f04f 0c1f 	mov.w	ip, #31
 8002b04:	680c      	ldr	r4, [r1, #0]
 8002b06:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8002b08:	3b5f      	subs	r3, #95	; 0x5f
 8002b0a:	fa04 fe03 	lsl.w	lr, r4, r3
 8002b0e:	fa0c f303 	lsl.w	r3, ip, r3
 8002b12:	ea25 0303 	bic.w	r3, r5, r3
 8002b16:	ea43 030e 	orr.w	r3, r3, lr
 8002b1a:	6343      	str	r3, [r0, #52]	; 0x34
 8002b1c:	e793      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002b1e:	2c1a      	cmp	r4, #26
 8002b20:	d80d      	bhi.n	8002b3e <HAL_ADC_ConfigChannel+0x13e>
    MODIFY_REG(hadc->Instance->SMPR1,
 8002b22:	2507      	movs	r5, #7
 8002b24:	6889      	ldr	r1, [r1, #8]
 8002b26:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002b2a:	68c3      	ldr	r3, [r0, #12]
 8002b2c:	3c3c      	subs	r4, #60	; 0x3c
 8002b2e:	40a1      	lsls	r1, r4
 8002b30:	fa05 f404 	lsl.w	r4, r5, r4
 8002b34:	ea23 0304 	bic.w	r3, r3, r4
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	60c3      	str	r3, [r0, #12]
 8002b3c:	e790      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x60>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002b3e:	bf00      	nop
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b40:	680c      	ldr	r4, [r1, #0]
 8002b42:	e7b5      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR3,
 8002b44:	f04f 0c1f 	mov.w	ip, #31
 8002b48:	680c      	ldr	r4, [r1, #0]
 8002b4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b4e:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8002b50:	3b41      	subs	r3, #65	; 0x41
 8002b52:	fa04 fe03 	lsl.w	lr, r4, r3
 8002b56:	fa0c f303 	lsl.w	r3, ip, r3
 8002b5a:	ea25 0303 	bic.w	r3, r5, r3
 8002b5e:	ea43 030e 	orr.w	r3, r3, lr
 8002b62:	6383      	str	r3, [r0, #56]	; 0x38
 8002b64:	e76f      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x46>
  __HAL_LOCK(hadc);
 8002b66:	2002      	movs	r0, #2
}
 8002b68:	b003      	add	sp, #12
 8002b6a:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR1,
 8002b6c:	f04f 0c1f 	mov.w	ip, #31
 8002b70:	680c      	ldr	r4, [r1, #0]
 8002b72:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8002b74:	3b7d      	subs	r3, #125	; 0x7d
 8002b76:	fa04 fe03 	lsl.w	lr, r4, r3
 8002b7a:	fa0c f303 	lsl.w	r3, ip, r3
 8002b7e:	ea25 0303 	bic.w	r3, r5, r3
 8002b82:	ea43 030e 	orr.w	r3, r3, lr
 8002b86:	6303      	str	r3, [r0, #48]	; 0x30
 8002b88:	e75d      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x46>
 8002b8a:	bf00      	nop
 8002b8c:	40012700 	.word	0x40012700
 8002b90:	20000004 	.word	0x20000004
 8002b94:	431bde83 	.word	0x431bde83

08002b98 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8002b98:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002b9c:	680a      	ldr	r2, [r1, #0]
  __HAL_LOCK(hadc);
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d024      	beq.n	8002bec <HAL_ADC_AnalogWDGConfig+0x54>
 8002ba2:	2301      	movs	r3, #1
{
 8002ba4:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002ba6:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if(AnalogWDGConfig->ITMode == ENABLE)
 8002baa:	7a0b      	ldrb	r3, [r1, #8]
 8002bac:	4686      	mov	lr, r0
 8002bae:	2b01      	cmp	r3, #1
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8002bb0:	6803      	ldr	r3, [r0, #0]
  if(AnalogWDGConfig->ITMode == ENABLE)
 8002bb2:	d016      	beq.n	8002be2 <HAL_ADC_AnalogWDGConfig+0x4a>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8002bb4:	685c      	ldr	r4, [r3, #4]
 8002bb6:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8002bba:	605c      	str	r4, [r3, #4]
  __HAL_UNLOCK(hadc);
 8002bbc:	f04f 0c00 	mov.w	ip, #0
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8002bc0:	6858      	ldr	r0, [r3, #4]
 8002bc2:	4c0b      	ldr	r4, [pc, #44]	; (8002bf0 <HAL_ADC_AnalogWDGConfig+0x58>)
 8002bc4:	4004      	ands	r4, r0
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 8002bc6:	6848      	ldr	r0, [r1, #4]
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8002bc8:	605c      	str	r4, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 8002bca:	4302      	orrs	r2, r0
 8002bcc:	6858      	ldr	r0, [r3, #4]
 8002bce:	4302      	orrs	r2, r0
 8002bd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8002bd2:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8002bd6:	6298      	str	r0, [r3, #40]	; 0x28
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8002bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_UNLOCK(hadc);
 8002bda:	f88e c048 	strb.w	ip, [lr, #72]	; 0x48
  return HAL_OK;
 8002bde:	4660      	mov	r0, ip
}
 8002be0:	bd10      	pop	{r4, pc}
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8002be2:	6858      	ldr	r0, [r3, #4]
 8002be4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8002be8:	6058      	str	r0, [r3, #4]
 8002bea:	e7e7      	b.n	8002bbc <HAL_ADC_AnalogWDGConfig+0x24>
  __HAL_LOCK(hadc);
 8002bec:	2002      	movs	r0, #2
}
 8002bee:	4770      	bx	lr
 8002bf0:	ff3ffde0 	.word	0xff3ffde0

08002bf4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 8002bf4:	2300      	movs	r3, #0
{
 8002bf6:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bf8:	6802      	ldr	r2, [r0, #0]
{
 8002bfa:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8002bfc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bfe:	6813      	ldr	r3, [r2, #0]
 8002c00:	0659      	lsls	r1, r3, #25
 8002c02:	d429      	bmi.n	8002c58 <ADC_Enable+0x64>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002c04:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <ADC_Enable+0x84>)
 8002c06:	4604      	mov	r4, r0
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	481c      	ldr	r0, [pc, #112]	; (8002c7c <ADC_Enable+0x88>)
    __HAL_ADC_ENABLE(hadc);
 8002c0c:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002c0e:	fba0 0303 	umull	r0, r3, r0, r3
 8002c12:	0c9b      	lsrs	r3, r3, #18
 8002c14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8002c18:	f041 0101 	orr.w	r1, r1, #1
 8002c1c:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002c1e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002c20:	9b01      	ldr	r3, [sp, #4]
 8002c22:	b12b      	cbz	r3, 8002c30 <ADC_Enable+0x3c>
      wait_loop_index--;
 8002c24:	9b01      	ldr	r3, [sp, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002c2a:	9b01      	ldr	r3, [sp, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f9      	bne.n	8002c24 <ADC_Enable+0x30>
    tickstart = HAL_GetTick();    
 8002c30:	f7ff fc94 	bl	800255c <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c34:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();    
 8002c36:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	065a      	lsls	r2, r3, #25
 8002c3c:	d40c      	bmi.n	8002c58 <ADC_Enable+0x64>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002c3e:	f7ff fc8d 	bl	800255c <HAL_GetTick>
 8002c42:	1b43      	subs	r3, r0, r5
 8002c44:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c46:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002c48:	d903      	bls.n	8002c52 <ADC_Enable+0x5e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8002c50:	d005      	beq.n	8002c5e <ADC_Enable+0x6a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	065b      	lsls	r3, r3, #25
 8002c56:	d5f2      	bpl.n	8002c3e <ADC_Enable+0x4a>
  return HAL_OK;
 8002c58:	2000      	movs	r0, #0
}
 8002c5a:	b003      	add	sp, #12
 8002c5c:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8002c5e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 8002c62:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c66:	f043 0310 	orr.w	r3, r3, #16
 8002c6a:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002c6e:	4303      	orrs	r3, r0
 8002c70:	6523      	str	r3, [r4, #80]	; 0x50
}
 8002c72:	b003      	add	sp, #12
 8002c74:	bd30      	pop	{r4, r5, pc}
 8002c76:	bf00      	nop
 8002c78:	20000004 	.word	0x20000004
 8002c7c:	431bde83 	.word	0x431bde83

08002c80 <HAL_ADC_Start_DMA>:
{
 8002c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8002c84:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 8002c88:	2d01      	cmp	r5, #1
 8002c8a:	d04c      	beq.n	8002d26 <HAL_ADC_Start_DMA+0xa6>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8002c92:	4604      	mov	r4, r0
 8002c94:	4688      	mov	r8, r1
 8002c96:	4617      	mov	r7, r2
 8002c98:	f7ff ffac 	bl	8002bf4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002c9c:	4605      	mov	r5, r0
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d13e      	bne.n	8002d20 <HAL_ADC_Start_DMA+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 8002ca2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ca4:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002ca6:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8002caa:	f020 0001 	bic.w	r0, r0, #1
 8002cae:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8002cb2:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cb4:	6873      	ldr	r3, [r6, #4]
 8002cb6:	055b      	lsls	r3, r3, #21
 8002cb8:	d505      	bpl.n	8002cc6 <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002cbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cc4:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ccc:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cd2:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cd8:	bf18      	it	ne
 8002cda:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cdc:	4642      	mov	r2, r8
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cde:	bf18      	it	ne
 8002ce0:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002ce4:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ce6:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ce8:	4f11      	ldr	r7, [pc, #68]	; (8002d30 <HAL_ADC_Start_DMA+0xb0>)
 8002cea:	6287      	str	r7, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cec:	4f11      	ldr	r7, [pc, #68]	; (8002d34 <HAL_ADC_Start_DMA+0xb4>)
 8002cee:	62c7      	str	r7, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cf0:	4f11      	ldr	r7, [pc, #68]	; (8002d38 <HAL_ADC_Start_DMA+0xb8>)
 8002cf2:	6307      	str	r7, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cf4:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cf6:	6871      	ldr	r1, [r6, #4]
 8002cf8:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8002cfc:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002cfe:	68b1      	ldr	r1, [r6, #8]
 8002d00:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002d04:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d06:	f106 0158 	add.w	r1, r6, #88	; 0x58
 8002d0a:	f000 f98f 	bl	800302c <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002d16:	d103      	bne.n	8002d20 <HAL_ADC_Start_DMA+0xa0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d1e:	609a      	str	r2, [r3, #8]
}
 8002d20:	4628      	mov	r0, r5
 8002d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 8002d26:	2502      	movs	r5, #2
}
 8002d28:	4628      	mov	r0, r5
 8002d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d2e:	bf00      	nop
 8002d30:	08002849 	.word	0x08002849
 8002d34:	080028a9 	.word	0x080028a9
 8002d38:	080028b9 	.word	0x080028b9

08002d3c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop

08002d40 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d40:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d44:	4906      	ldr	r1, [pc, #24]	; (8002d60 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d46:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002d5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002d5e:	4770      	bx	lr
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d64:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d66:	b500      	push	{lr}
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d6e:	f1c3 0e07 	rsb	lr, r3, #7
 8002d72:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d76:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d7a:	bf28      	it	cs
 8002d7c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d80:	f1bc 0f06 	cmp.w	ip, #6
 8002d84:	d91b      	bls.n	8002dbe <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d86:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d8a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d8c:	fa0c fc03 	lsl.w	ip, ip, r3
 8002d90:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	f04f 3cff 	mov.w	ip, #4294967295
 8002d98:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002d9c:	ea21 010c 	bic.w	r1, r1, ip
 8002da0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002da2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002da8:	db0c      	blt.n	8002dc4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	0109      	lsls	r1, r1, #4
 8002dac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002db0:	b2c9      	uxtb	r1, r1
 8002db2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002db6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002dba:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dbe:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	e7e7      	b.n	8002d94 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_NVIC_SetPriority+0x78>)
 8002dc6:	f000 000f 	and.w	r0, r0, #15
 8002dca:	0109      	lsls	r1, r1, #4
 8002dcc:	b2c9      	uxtb	r1, r1
 8002dce:	4403      	add	r3, r0
 8002dd0:	7619      	strb	r1, [r3, #24]
 8002dd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dd6:	bf00      	nop
 8002dd8:	e000ed00 	.word	0xe000ed00
 8002ddc:	e000ecfc 	.word	0xe000ecfc

08002de0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002de0:	2800      	cmp	r0, #0
 8002de2:	db07      	blt.n	8002df4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de4:	2301      	movs	r3, #1
 8002de6:	f000 011f 	and.w	r1, r0, #31
 8002dea:	4a03      	ldr	r2, [pc, #12]	; (8002df8 <HAL_NVIC_EnableIRQ+0x18>)
 8002dec:	0940      	lsrs	r0, r0, #5
 8002dee:	408b      	lsls	r3, r1
 8002df0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000e100 	.word	0xe000e100

08002dfc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	db0d      	blt.n	8002e1c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e00:	2201      	movs	r2, #1
 8002e02:	4907      	ldr	r1, [pc, #28]	; (8002e20 <HAL_NVIC_DisableIRQ+0x24>)
 8002e04:	0943      	lsrs	r3, r0, #5
 8002e06:	f000 001f 	and.w	r0, r0, #31
 8002e0a:	3320      	adds	r3, #32
 8002e0c:	fa02 f000 	lsl.w	r0, r2, r0
 8002e10:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e18:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e100 	.word	0xe000e100

08002e24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e24:	3801      	subs	r0, #1
 8002e26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002e2a:	d20f      	bcs.n	8002e4c <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e30:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e34:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e36:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e38:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3a:	4c05      	ldr	r4, [pc, #20]	; (8002e50 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e42:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e44:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8002e46:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e48:	6119      	str	r1, [r3, #16]
 8002e4a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	4770      	bx	lr
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8002e54:	b188      	cbz	r0, 8002e7a <HAL_DAC_Init+0x26>
{
 8002e56:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e58:	7903      	ldrb	r3, [r0, #4]
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e60:	b13b      	cbz	r3, 8002e72 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e62:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e64:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e66:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e68:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e6a:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002e6c:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002e6e:	4618      	mov	r0, r3
}
 8002e70:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8002e72:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8002e74:	f7ff f9d4 	bl	8002220 <HAL_DAC_MspInit>
 8002e78:	e7f3      	b.n	8002e62 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8002e7a:	2001      	movs	r0, #1
}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop

08002e80 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e80:	7942      	ldrb	r2, [r0, #5]
 8002e82:	2a01      	cmp	r2, #1
 8002e84:	d02a      	beq.n	8002edc <HAL_DAC_Start+0x5c>
{
 8002e86:	b410      	push	{r4}
 8002e88:	4603      	mov	r3, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e8a:	2402      	movs	r4, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e90:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e92:	6804      	ldr	r4, [r0, #0]
 8002e94:	f001 0c10 	and.w	ip, r1, #16
 8002e98:	fa02 f20c 	lsl.w	r2, r2, ip
 8002e9c:	4322      	orrs	r2, r4
 8002e9e:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 8002ea0:	b979      	cbnz	r1, 8002ec2 <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002ea2:	6802      	ldr	r2, [r0, #0]
 8002ea4:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8002ea8:	2a3c      	cmp	r2, #60	; 0x3c
 8002eaa:	d103      	bne.n	8002eb4 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002eac:	6842      	ldr	r2, [r0, #4]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002eb4:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002eb6:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8002eb8:	715a      	strb	r2, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8002eba:	7119      	strb	r1, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ebc:	4610      	mov	r0, r2
}
 8002ebe:	bc10      	pop	{r4}
 8002ec0:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002ec2:	223c      	movs	r2, #60	; 0x3c
 8002ec4:	6801      	ldr	r1, [r0, #0]
 8002ec6:	fa02 fc0c 	lsl.w	ip, r2, ip
 8002eca:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8002ece:	4561      	cmp	r1, ip
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002ed2:	6842      	ldr	r2, [r0, #4]
 8002ed4:	f042 0202 	orr.w	r2, r2, #2
 8002ed8:	6042      	str	r2, [r0, #4]
 8002eda:	e7eb      	b.n	8002eb4 <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 8002edc:	2002      	movs	r0, #2
}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002ee0:	b410      	push	{r4}
  __IO uint32_t tmp = 0UL;
 8002ee2:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002ee4:	6800      	ldr	r0, [r0, #0]
{
 8002ee6:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8002ee8:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8002eea:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8002eec:	b949      	cbnz	r1, 8002f02 <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002eee:	9901      	ldr	r1, [sp, #4]
 8002ef0:	3108      	adds	r1, #8
 8002ef2:	440a      	add	r2, r1
 8002ef4:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
}
 8002ef6:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8002ef8:	9a01      	ldr	r2, [sp, #4]
 8002efa:	6013      	str	r3, [r2, #0]
}
 8002efc:	b003      	add	sp, #12
 8002efe:	bc10      	pop	{r4}
 8002f00:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002f02:	9901      	ldr	r1, [sp, #4]
 8002f04:	3114      	adds	r1, #20
 8002f06:	440a      	add	r2, r1
 8002f08:	9201      	str	r2, [sp, #4]
 8002f0a:	e7f4      	b.n	8002ef6 <HAL_DAC_SetValue+0x16>

08002f0c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f0c:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f0e:	7940      	ldrb	r0, [r0, #5]
 8002f10:	2801      	cmp	r0, #1
 8002f12:	d022      	beq.n	8002f5a <HAL_DAC_ConfigChannel+0x4e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f14:	2002      	movs	r0, #2
{
 8002f16:	b570      	push	{r4, r5, r6, lr}
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f18:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002f1c:	f640 76fe 	movw	r6, #4094	; 0xffe

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f20:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002f24:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f26:	7118      	strb	r0, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8002f28:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002f2a:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002f2e:	f002 0210 	and.w	r2, r2, #16
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002f32:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002f34:	4096      	lsls	r6, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f36:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f3a:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 = hdac->Instance->CR;
 8002f3e:	6821      	ldr	r1, [r4, #0]

  /* Return function status */
  return HAL_OK;
 8002f40:	4670      	mov	r0, lr
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002f42:	ea21 0106 	bic.w	r1, r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f46:	430a      	orrs	r2, r1
  hdac->Instance->CR = tmpreg1;
 8002f48:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f4a:	6822      	ldr	r2, [r4, #0]
 8002f4c:	ea22 020c 	bic.w	r2, r2, ip
 8002f50:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002f52:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8002f54:	f883 e005 	strb.w	lr, [r3, #5]
}
 8002f58:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 8002f5a:	2002      	movs	r0, #2
}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop

08002f60 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f60:	b370      	cbz	r0, 8002fc0 <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f62:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f64:	2202      	movs	r2, #2
{
 8002f66:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f68:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f6c:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f6e:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8002f74:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f76:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002f78:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
  tmp |=  hdma->Init.Direction        |
 8002f7c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8002f80:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f82:	4910      	ldr	r1, [pc, #64]	; (8002fc4 <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f84:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f86:	4d10      	ldr	r5, [pc, #64]	; (8002fc8 <HAL_DMA_Init+0x68>)
 8002f88:	4401      	add	r1, r0
 8002f8a:	fba5 5101 	umull	r5, r1, r5, r1
 8002f8e:	0909      	lsrs	r1, r1, #4
 8002f90:	0089      	lsls	r1, r1, #2
 8002f92:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f94:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002f96:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f9c:	6959      	ldr	r1, [r3, #20]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	6999      	ldr	r1, [r3, #24]
 8002fa2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa4:	69d9      	ldr	r1, [r3, #28]
 8002fa6:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8002fa8:	4908      	ldr	r1, [pc, #32]	; (8002fcc <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 8002faa:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 8002fae:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8002fb0:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb2:	639c      	str	r4, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fb4:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8002fb8:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 8002fbc:	4620      	mov	r0, r4
}
 8002fbe:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002fc0:	2001      	movs	r0, #1
}
 8002fc2:	4770      	bx	lr
 8002fc4:	bffd9ff8 	.word	0xbffd9ff8
 8002fc8:	cccccccd 	.word	0xcccccccd
 8002fcc:	40026000 	.word	0x40026000

08002fd0 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002fd0:	b320      	cbz	r0, 800301c <HAL_DMA_DeInit+0x4c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002fd2:	4603      	mov	r3, r0

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fd4:	2101      	movs	r1, #1
{
 8002fd6:	b430      	push	{r4, r5}
  hdma->Instance->CCR = 0U;
 8002fd8:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002fda:	6805      	ldr	r5, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fdc:	4810      	ldr	r0, [pc, #64]	; (8003020 <HAL_DMA_DeInit+0x50>)
  __HAL_DMA_DISABLE(hdma);
 8002fde:	682a      	ldr	r2, [r5, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	602a      	str	r2, [r5, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fe6:	4a0f      	ldr	r2, [pc, #60]	; (8003024 <HAL_DMA_DeInit+0x54>)
 8002fe8:	442a      	add	r2, r5
 8002fea:	fba0 0202 	umull	r0, r2, r0, r2
 8002fee:	0912      	lsrs	r2, r2, #4
 8002ff0:	0092      	lsls	r2, r2, #2
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ff4:	f002 021c 	and.w	r2, r2, #28
 8002ff8:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8002ffc:	490a      	ldr	r1, [pc, #40]	; (8003028 <HAL_DMA_DeInit+0x58>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8002ffe:	4620      	mov	r0, r4
  hdma->DmaBaseAddress = DMA1;
 8003000:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = 0U;
 8003002:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003004:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003006:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdma);
 8003008:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 800300c:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 8003010:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8003014:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
}
 8003018:	bc30      	pop	{r4, r5}
 800301a:	4770      	bx	lr
    return HAL_ERROR;
 800301c:	2001      	movs	r0, #1
}
 800301e:	4770      	bx	lr
 8003020:	cccccccd 	.word	0xcccccccd
 8003024:	bffd9ff8 	.word	0xbffd9ff8
 8003028:	40026000 	.word	0x40026000

0800302c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800302c:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800302e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8003032:	2801      	cmp	r0, #1
 8003034:	d042      	beq.n	80030bc <HAL_DMA_Start_IT+0x90>
{
 8003036:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8003038:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 800303a:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 800303e:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003042:	42a0      	cmp	r0, r4
 8003044:	fa5f fe80 	uxtb.w	lr, r0
 8003048:	d004      	beq.n	8003054 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304a:	2300      	movs	r3, #0
 800304c:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003050:	2002      	movs	r0, #2
  }
  return status;
}
 8003052:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003054:	2002      	movs	r0, #2
 8003056:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800305a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800305c:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003060:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8003064:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003066:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800306a:	f025 0501 	bic.w	r5, r5, #1
 800306e:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003070:	f000 001c 	and.w	r0, r0, #28
 8003074:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8003078:	fa0e f000 	lsl.w	r0, lr, r0
 800307c:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800307e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003080:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003084:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8003086:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800308a:	bf0b      	itete	eq
 800308c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800308e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003090:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003092:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003094:	b14b      	cbz	r3, 80030aa <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	f043 030e 	orr.w	r3, r3, #14
 800309c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800309e:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6023      	str	r3, [r4, #0]
}
 80030a8:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	f043 030a 	orr.w	r3, r3, #10
 80030b8:	6023      	str	r3, [r4, #0]
 80030ba:	e7f0      	b.n	800309e <HAL_DMA_Start_IT+0x72>
  __HAL_LOCK(hdma);
 80030bc:	2002      	movs	r0, #2
}
 80030be:	4770      	bx	lr

080030c0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c0:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80030c4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c6:	2a02      	cmp	r2, #2
 80030c8:	d006      	beq.n	80030d8 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ca:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80030cc:	2200      	movs	r2, #0
    return HAL_ERROR;
 80030ce:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d0:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80030d2:	f883 2020 	strb.w	r2, [r3, #32]
}
 80030d6:	4770      	bx	lr
{
 80030d8:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030da:	f04f 0e01 	mov.w	lr, #1
    __HAL_UNLOCK(hdma);
 80030de:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e2:	6802      	ldr	r2, [r0, #0]
 80030e4:	6811      	ldr	r1, [r2, #0]
 80030e6:	f021 010e 	bic.w	r1, r1, #14
 80030ea:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80030ec:	6811      	ldr	r1, [r2, #0]
 80030ee:	f021 0101 	bic.w	r1, r1, #1
 80030f2:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030f4:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 80030f8:	f002 021c 	and.w	r2, r2, #28
 80030fc:	fa0e f202 	lsl.w	r2, lr, r2
 8003100:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003102:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8003106:	f883 c020 	strb.w	ip, [r3, #32]
    return status;
 800310a:	4660      	mov	r0, ip
}
 800310c:	f85d fb04 	ldr.w	pc, [sp], #4

08003110 <HAL_DMA_Abort_IT>:
{
 8003110:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003112:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8003116:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003118:	2a02      	cmp	r2, #2
 800311a:	d003      	beq.n	8003124 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800311c:	2204      	movs	r2, #4
    status = HAL_ERROR;
 800311e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003122:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003124:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003126:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800312a:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800312c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800312e:	f024 040e 	bic.w	r4, r4, #14
 8003132:	600c      	str	r4, [r1, #0]
    __HAL_UNLOCK(hdma);
 8003134:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8003136:	680d      	ldr	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003138:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 800313c:	f025 0501 	bic.w	r5, r5, #1
 8003140:	600d      	str	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003142:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8003144:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003146:	fa0c f202 	lsl.w	r2, ip, r2
 800314a:	606a      	str	r2, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800314c:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8003150:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8003154:	b111      	cbz	r1, 800315c <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8003156:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8003158:	4620      	mov	r0, r4
}
 800315a:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800315c:	4608      	mov	r0, r1
}
 800315e:	bd38      	pop	{r3, r4, r5, pc}

08003160 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003160:	2204      	movs	r2, #4
{
 8003162:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003164:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003166:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003168:	f003 031c 	and.w	r3, r3, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800316c:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800316e:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003170:	409a      	lsls	r2, r3
 8003172:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8003174:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003176:	d00e      	beq.n	8003196 <HAL_DMA_IRQHandler+0x36>
 8003178:	f014 0f04 	tst.w	r4, #4
 800317c:	d00b      	beq.n	8003196 <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800317e:	682b      	ldr	r3, [r5, #0]
 8003180:	069b      	lsls	r3, r3, #26
 8003182:	d403      	bmi.n	800318c <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003184:	682b      	ldr	r3, [r5, #0]
 8003186:	f023 0304 	bic.w	r3, r3, #4
 800318a:	602b      	str	r3, [r5, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800318c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800318e:	6072      	str	r2, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8003190:	b1cb      	cbz	r3, 80031c6 <HAL_DMA_IRQHandler+0x66>
}
 8003192:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8003194:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003196:	2202      	movs	r2, #2
 8003198:	409a      	lsls	r2, r3
 800319a:	420a      	tst	r2, r1
 800319c:	d015      	beq.n	80031ca <HAL_DMA_IRQHandler+0x6a>
 800319e:	f014 0f02 	tst.w	r4, #2
 80031a2:	d012      	beq.n	80031ca <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	0699      	lsls	r1, r3, #26
 80031a8:	d406      	bmi.n	80031b8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031aa:	682b      	ldr	r3, [r5, #0]
 80031ac:	f023 030a 	bic.w	r3, r3, #10
 80031b0:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80031b8:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 80031ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031bc:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80031be:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e5      	bne.n	8003192 <HAL_DMA_IRQHandler+0x32>
}
 80031c6:	bc70      	pop	{r4, r5, r6}
 80031c8:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031ca:	2208      	movs	r2, #8
 80031cc:	409a      	lsls	r2, r3
 80031ce:	420a      	tst	r2, r1
 80031d0:	d0f9      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x66>
 80031d2:	0722      	lsls	r2, r4, #28
 80031d4:	d5f7      	bpl.n	80031c6 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031d6:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 80031d8:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031da:	f022 020e 	bic.w	r2, r2, #14
 80031de:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031e0:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 80031e2:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031ea:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80031ec:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 80031f0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 80031f4:	2900      	cmp	r1, #0
 80031f6:	d0e6      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x66>
}
 80031f8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80031fa:	4708      	bx	r1

080031fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003200:	680c      	ldr	r4, [r1, #0]
{
 8003202:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8003204:	2c00      	cmp	r4, #0
 8003206:	f000 80c4 	beq.w	8003392 <HAL_GPIO_Init+0x196>
 800320a:	f04f 0e00 	mov.w	lr, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800320e:	f04f 0b01 	mov.w	fp, #1
  uint32_t position = 0x00;
 8003212:	4673      	mov	r3, lr
 8003214:	468c      	mov	ip, r1
 8003216:	e068      	b.n	80032ea <HAL_GPIO_Init+0xee>
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003218:	2a03      	cmp	r2, #3
 800321a:	f040 80b5 	bne.w	8003388 <HAL_GPIO_Init+0x18c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800321e:	fa02 f20e 	lsl.w	r2, r2, lr
 8003222:	43d7      	mvns	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003224:	6805      	ldr	r5, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003226:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800322a:	ea07 0705 	and.w	r7, r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800322e:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 8003232:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003234:	d053      	beq.n	80032de <HAL_GPIO_Init+0xe2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003236:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003238:	4d5c      	ldr	r5, [pc, #368]	; (80033ac <HAL_GPIO_Init+0x1b0>)
 800323a:	6a2a      	ldr	r2, [r5, #32]
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	622a      	str	r2, [r5, #32]
 8003242:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003244:	f003 0503 	and.w	r5, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003248:	f002 0201 	and.w	r2, r2, #1
 800324c:	9203      	str	r2, [sp, #12]
 800324e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8003250:	f023 0203 	bic.w	r2, r3, #3
 8003254:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003258:	00ad      	lsls	r5, r5, #2
 800325a:	fa06 f805 	lsl.w	r8, r6, r5
 800325e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003262:	4e53      	ldr	r6, [pc, #332]	; (80033b0 <HAL_GPIO_Init+0x1b4>)
        temp = SYSCFG->EXTICR[position >> 2];
 8003264:	6897      	ldr	r7, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003266:	42b0      	cmp	r0, r6
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003268:	ea27 0708 	bic.w	r7, r7, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800326c:	d013      	beq.n	8003296 <HAL_GPIO_Init+0x9a>
 800326e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003272:	42b0      	cmp	r0, r6
 8003274:	f000 8090 	beq.w	8003398 <HAL_GPIO_Init+0x19c>
 8003278:	4e4e      	ldr	r6, [pc, #312]	; (80033b4 <HAL_GPIO_Init+0x1b8>)
 800327a:	42b0      	cmp	r0, r6
 800327c:	f000 8090 	beq.w	80033a0 <HAL_GPIO_Init+0x1a4>
 8003280:	4e4d      	ldr	r6, [pc, #308]	; (80033b8 <HAL_GPIO_Init+0x1bc>)
 8003282:	42b0      	cmp	r0, r6
 8003284:	bf0b      	itete	eq
 8003286:	f04f 0803 	moveq.w	r8, #3
 800328a:	2605      	movne	r6, #5
 800328c:	fa08 f505 	lsleq.w	r5, r8, r5
 8003290:	fa06 f505 	lslne.w	r5, r6, r5
 8003294:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8003296:	6097      	str	r7, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003298:	ea6f 070a 	mvn.w	r7, sl
        temp = EXTI->IMR;
 800329c:	4a47      	ldr	r2, [pc, #284]	; (80033bc <HAL_GPIO_Init+0x1c0>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800329e:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 80032a0:	6812      	ldr	r2, [r2, #0]
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->IMR = temp;
 80032a2:	4d46      	ldr	r5, [pc, #280]	; (80033bc <HAL_GPIO_Init+0x1c0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80032a4:	bf54      	ite	pl
 80032a6:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 80032a8:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 80032ac:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 80032ae:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032b0:	038a      	lsls	r2, r1, #14
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->EMR = temp;
 80032b2:	4a42      	ldr	r2, [pc, #264]	; (80033bc <HAL_GPIO_Init+0x1c0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80032b4:	bf54      	ite	pl
 80032b6:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 80032b8:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR = temp;
 80032bc:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032be:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032c0:	02ce      	lsls	r6, r1, #11
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->RTSR = temp;
 80032c2:	4a3e      	ldr	r2, [pc, #248]	; (80033bc <HAL_GPIO_Init+0x1c0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80032c4:	bf54      	ite	pl
 80032c6:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 80032c8:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR = temp;
 80032cc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80032ce:	68d2      	ldr	r2, [r2, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032d0:	0289      	lsls	r1, r1, #10
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->FTSR = temp;
 80032d2:	493a      	ldr	r1, [pc, #232]	; (80033bc <HAL_GPIO_Init+0x1c0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80032d4:	bf54      	ite	pl
 80032d6:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 80032d8:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 80032dc:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 80032de:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80032e0:	fa34 f203 	lsrs.w	r2, r4, r3
 80032e4:	f10e 0e02 	add.w	lr, lr, #2
 80032e8:	d053      	beq.n	8003392 <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80032ea:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent)
 80032ee:	ea15 0a04 	ands.w	sl, r5, r4
 80032f2:	d0f4      	beq.n	80032de <HAL_GPIO_Init+0xe2>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032f4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80032f8:	f001 0203 	and.w	r2, r1, #3
 80032fc:	1e57      	subs	r7, r2, #1
 80032fe:	2f01      	cmp	r7, #1
 8003300:	d88a      	bhi.n	8003218 <HAL_GPIO_Init+0x1c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003302:	f04f 0903 	mov.w	r9, #3
        temp = GPIOx->OSPEEDR;
 8003306:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003308:	f8dc 700c 	ldr.w	r7, [ip, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800330c:	fa09 f90e 	lsl.w	r9, r9, lr
 8003310:	ea26 0609 	bic.w	r6, r6, r9
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003314:	fa07 f70e 	lsl.w	r7, r7, lr
 8003318:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 800331a:	6087      	str	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800331c:	ea6f 0709 	mvn.w	r7, r9
        temp = GPIOx->OTYPER;
 8003320:	f8d0 9004 	ldr.w	r9, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003324:	f3c1 1800 	ubfx	r8, r1, #4, #1
 8003328:	fa08 f803 	lsl.w	r8, r8, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800332c:	ea29 0505 	bic.w	r5, r9, r5
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003330:	ea48 0505 	orr.w	r5, r8, r5
        GPIOx->OTYPER = temp;
 8003334:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8003336:	68c5      	ldr	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003338:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800333a:	ea05 0807 	and.w	r8, r5, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800333e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8003342:	fa02 f20e 	lsl.w	r2, r2, lr
 8003346:	fa05 f50e 	lsl.w	r5, r5, lr
 800334a:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->PUPDR = temp;
 800334e:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003350:	f47f af68 	bne.w	8003224 <HAL_GPIO_Init+0x28>
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003354:	f8dc 5010 	ldr.w	r5, [ip, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003358:	f003 0807 	and.w	r8, r3, #7
 800335c:	ea4f 0888 	mov.w	r8, r8, lsl #2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003360:	fa05 f508 	lsl.w	r5, r5, r8
 8003364:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003366:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3];
 8003368:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800336c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8003370:	f8d9 6020 	ldr.w	r6, [r9, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003374:	fa05 f808 	lsl.w	r8, r5, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003378:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800337a:	ea26 0808 	bic.w	r8, r6, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800337e:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->AFR[position >> 3] = temp;
 8003382:	f8c9 5020 	str.w	r5, [r9, #32]
 8003386:	e74d      	b.n	8003224 <HAL_GPIO_Init+0x28>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003388:	2703      	movs	r7, #3
 800338a:	fa07 f70e 	lsl.w	r7, r7, lr
 800338e:	43ff      	mvns	r7, r7
 8003390:	e7d1      	b.n	8003336 <HAL_GPIO_Init+0x13a>
  }
}
 8003392:	b005      	add	sp, #20
 8003394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003398:	fa0b f505 	lsl.w	r5, fp, r5
 800339c:	432f      	orrs	r7, r5
 800339e:	e77a      	b.n	8003296 <HAL_GPIO_Init+0x9a>
 80033a0:	f04f 0802 	mov.w	r8, #2
 80033a4:	fa08 f505 	lsl.w	r5, r8, r5
 80033a8:	432f      	orrs	r7, r5
 80033aa:	e774      	b.n	8003296 <HAL_GPIO_Init+0x9a>
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40020000 	.word	0x40020000
 80033b4:	40020800 	.word	0x40020800
 80033b8:	40020c00 	.word	0x40020c00
 80033bc:	40010400 	.word	0x40010400

080033c0 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80033c0:	2900      	cmp	r1, #0
 80033c2:	d07b      	beq.n	80034bc <HAL_GPIO_DeInit+0xfc>
{
 80033c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 80033c8:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80033ca:	2701      	movs	r7, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80033cc:	f04f 090f 	mov.w	r9, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80033d0:	f04f 0a03 	mov.w	sl, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80033d4:	4e3a      	ldr	r6, [pc, #232]	; (80034c0 <HAL_GPIO_DeInit+0x100>)
 80033d6:	e04d      	b.n	8003474 <HAL_GPIO_DeInit+0xb4>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80033d8:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80033dc:	4558      	cmp	r0, fp
 80033de:	d065      	beq.n	80034ac <HAL_GPIO_DeInit+0xec>
 80033e0:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 80034c4 <HAL_GPIO_DeInit+0x104>
 80033e4:	4558      	cmp	r0, fp
 80033e6:	d064      	beq.n	80034b2 <HAL_GPIO_DeInit+0xf2>
 80033e8:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80034c8 <HAL_GPIO_DeInit+0x108>
 80033ec:	4558      	cmp	r0, fp
 80033ee:	bf16      	itet	ne
 80033f0:	f04f 0b05 	movne.w	fp, #5
 80033f4:	fa0a f404 	lsleq.w	r4, sl, r4
 80033f8:	fa0b f404 	lslne.w	r4, fp, r4
 80033fc:	45a4      	cmp	ip, r4
 80033fe:	d113      	bne.n	8003428 <HAL_GPIO_DeInit+0x68>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003400:	6834      	ldr	r4, [r6, #0]
 8003402:	ea24 040e 	bic.w	r4, r4, lr
 8003406:	6034      	str	r4, [r6, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003408:	6874      	ldr	r4, [r6, #4]
 800340a:	ea24 040e 	bic.w	r4, r4, lr
 800340e:	6074      	str	r4, [r6, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003410:	68b4      	ldr	r4, [r6, #8]
 8003412:	ea24 040e 	bic.w	r4, r4, lr
 8003416:	60b4      	str	r4, [r6, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003418:	68f4      	ldr	r4, [r6, #12]
 800341a:	ea24 040e 	bic.w	r4, r4, lr
 800341e:	60f4      	str	r4, [r6, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8003420:	68ac      	ldr	r4, [r5, #8]
 8003422:	ea24 0408 	bic.w	r4, r4, r8
 8003426:	60ac      	str	r4, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8003428:	6805      	ldr	r5, [r0, #0]
 800342a:	005c      	lsls	r4, r3, #1
 800342c:	fa0a f404 	lsl.w	r4, sl, r4
 8003430:	ea25 0504 	bic.w	r5, r5, r4

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8003434:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8003438:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800343a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800343e:	f003 0507 	and.w	r5, r3, #7
 8003442:	f8dc e020 	ldr.w	lr, [ip, #32]
 8003446:	00ad      	lsls	r5, r5, #2
 8003448:	fa09 f505 	lsl.w	r5, r9, r5
 800344c:	ea2e 0505 	bic.w	r5, lr, r5
 8003450:	f8cc 5020 	str.w	r5, [ip, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003454:	68c5      	ldr	r5, [r0, #12]
 8003456:	ea25 0504 	bic.w	r5, r5, r4
 800345a:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800345c:	6845      	ldr	r5, [r0, #4]
 800345e:	ea25 0202 	bic.w	r2, r5, r2
 8003462:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003464:	6882      	ldr	r2, [r0, #8]
 8003466:	ea22 0404 	bic.w	r4, r2, r4
 800346a:	6084      	str	r4, [r0, #8]
    }

    position++;
 800346c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 800346e:	fa31 f203 	lsrs.w	r2, r1, r3
 8003472:	d019      	beq.n	80034a8 <HAL_GPIO_DeInit+0xe8>
    iocurrent = (GPIO_Pin) & (1U << position);
 8003474:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 8003478:	ea12 0e01 	ands.w	lr, r2, r1
 800347c:	d0f6      	beq.n	800346c <HAL_GPIO_DeInit+0xac>
      tmp = SYSCFG->EXTICR[position >> 2];
 800347e:	f023 0503 	bic.w	r5, r3, #3
 8003482:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8003486:	f8df b044 	ldr.w	fp, [pc, #68]	; 80034cc <HAL_GPIO_DeInit+0x10c>
 800348a:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800348e:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8003492:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8003496:	00a4      	lsls	r4, r4, #2
 8003498:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800349c:	4558      	cmp	r0, fp
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800349e:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80034a2:	d199      	bne.n	80033d8 <HAL_GPIO_DeInit+0x18>
 80034a4:	2400      	movs	r4, #0
 80034a6:	e7a9      	b.n	80033fc <HAL_GPIO_DeInit+0x3c>
  }
}
 80034a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80034ac:	fa07 f404 	lsl.w	r4, r7, r4
 80034b0:	e7a4      	b.n	80033fc <HAL_GPIO_DeInit+0x3c>
 80034b2:	f04f 0b02 	mov.w	fp, #2
 80034b6:	fa0b f404 	lsl.w	r4, fp, r4
 80034ba:	e79f      	b.n	80033fc <HAL_GPIO_DeInit+0x3c>
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40010400 	.word	0x40010400
 80034c4:	40020800 	.word	0x40020800
 80034c8:	40020c00 	.word	0x40020c00
 80034cc:	40020000 	.word	0x40020000

080034d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034d0:	b902      	cbnz	r2, 80034d4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80034d2:	0409      	lsls	r1, r1, #16
 80034d4:	6181      	str	r1, [r0, #24]
  }
}
 80034d6:	4770      	bx	lr

080034d8 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 80034da:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80034e2:	d116      	bne.n	8003512 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034e6:	00d2      	lsls	r2, r2, #3
 80034e8:	d420      	bmi.n	800352c <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80034ec:	4919      	ldr	r1, [pc, #100]	; (8003554 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24
 80034f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80034fa:	9201      	str	r2, [sp, #4]
 80034fc:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80034fe:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003500:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003502:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8003506:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800350a:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800350e:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003510:	d013      	beq.n	800353a <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003512:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003514:	4a10      	ldr	r2, [pc, #64]	; (8003558 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003516:	6813      	ldr	r3, [r2, #0]
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	4303      	orrs	r3, r0
 800351e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003520:	6813      	ldr	r3, [r2, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003526:	4058      	eors	r0, r3
 8003528:	b002      	add	sp, #8
 800352a:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003534:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8003538:	d1eb      	bne.n	8003512 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 800353a:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800353e:	d1e8      	bne.n	8003512 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 8003540:	4a05      	ldr	r2, [pc, #20]	; (8003558 <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 8003542:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 8003544:	6813      	ldr	r3, [r2, #0]
 8003546:	f043 0304 	orr.w	r3, r3, #4
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	e7e2      	b.n	8003514 <RCC_SetFlashLatencyFromMSIRange+0x3c>
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800
 8003554:	40007000 	.word	0x40007000
 8003558:	40023c00 	.word	0x40023c00

0800355c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800355c:	2800      	cmp	r0, #0
 800355e:	f000 81f8 	beq.w	8003952 <HAL_RCC_OscConfig+0x3f6>
{
 8003562:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003566:	4aa2      	ldr	r2, [pc, #648]	; (80037f0 <HAL_RCC_OscConfig+0x294>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003568:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800356a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800356c:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356e:	07d9      	lsls	r1, r3, #31
 8003570:	4604      	mov	r4, r0
{
 8003572:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003574:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003578:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357c:	d52e      	bpl.n	80035dc <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800357e:	2d08      	cmp	r5, #8
 8003580:	f000 8128 	beq.w	80037d4 <HAL_RCC_OscConfig+0x278>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003584:	2d0c      	cmp	r5, #12
 8003586:	f000 8122 	beq.w	80037ce <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358a:	6863      	ldr	r3, [r4, #4]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d00f      	beq.n	80035b0 <HAL_RCC_OscConfig+0x54>
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8180 	beq.w	8003896 <HAL_RCC_OscConfig+0x33a>
 8003596:	2b05      	cmp	r3, #5
 8003598:	4b95      	ldr	r3, [pc, #596]	; (80037f0 <HAL_RCC_OscConfig+0x294>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	f000 81db 	beq.w	8003956 <HAL_RCC_OscConfig+0x3fa>
 80035a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e004      	b.n	80035ba <HAL_RCC_OscConfig+0x5e>
 80035b0:	4a8f      	ldr	r2, [pc, #572]	; (80037f0 <HAL_RCC_OscConfig+0x294>)
 80035b2:	6813      	ldr	r3, [r2, #0]
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80035ba:	f7fe ffcf 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035be:	f8df 8230 	ldr.w	r8, [pc, #560]	; 80037f0 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 80035c2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035c4:	e005      	b.n	80035d2 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c6:	f7fe ffc9 	bl	800255c <HAL_GetTick>
 80035ca:	1bc0      	subs	r0, r0, r7
 80035cc:	2864      	cmp	r0, #100	; 0x64
 80035ce:	f200 815e 	bhi.w	800388e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035d2:	f8d8 3000 	ldr.w	r3, [r8]
 80035d6:	039b      	lsls	r3, r3, #14
 80035d8:	d5f5      	bpl.n	80035c6 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	0799      	lsls	r1, r3, #30
 80035de:	d522      	bpl.n	8003626 <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035e0:	2d04      	cmp	r5, #4
 80035e2:	f000 8114 	beq.w	800380e <HAL_RCC_OscConfig+0x2b2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035e6:	2d0c      	cmp	r5, #12
 80035e8:	f000 810e 	beq.w	8003808 <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035ec:	68e3      	ldr	r3, [r4, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8179 	beq.w	80038e6 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 80035f4:	2201      	movs	r2, #1
 80035f6:	4b7f      	ldr	r3, [pc, #508]	; (80037f4 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035f8:	4f7d      	ldr	r7, [pc, #500]	; (80037f0 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_ENABLE();
 80035fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80035fc:	f7fe ffae 	bl	800255c <HAL_GetTick>
 8003600:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003602:	e005      	b.n	8003610 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003604:	f7fe ffaa 	bl	800255c <HAL_GetTick>
 8003608:	1b80      	subs	r0, r0, r6
 800360a:	2802      	cmp	r0, #2
 800360c:	f200 813f 	bhi.w	800388e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	079b      	lsls	r3, r3, #30
 8003614:	d5f6      	bpl.n	8003604 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6922      	ldr	r2, [r4, #16]
 800361a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800361e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003622:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	06d9      	lsls	r1, r3, #27
 8003628:	d525      	bpl.n	8003676 <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800362a:	2d00      	cmp	r5, #0
 800362c:	f000 8098 	beq.w	8003760 <HAL_RCC_OscConfig+0x204>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003630:	69a3      	ldr	r3, [r4, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 816a 	beq.w	800390c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_MSI_ENABLE();
 8003638:	2201      	movs	r2, #1
 800363a:	4b6e      	ldr	r3, [pc, #440]	; (80037f4 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800363c:	4e6c      	ldr	r6, [pc, #432]	; (80037f0 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_MSI_ENABLE();
 800363e:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8003640:	f7fe ff8c 	bl	800255c <HAL_GetTick>
 8003644:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003646:	e005      	b.n	8003654 <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003648:	f7fe ff88 	bl	800255c <HAL_GetTick>
 800364c:	1bc0      	subs	r0, r0, r7
 800364e:	2802      	cmp	r0, #2
 8003650:	f200 811d 	bhi.w	800388e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003654:	6833      	ldr	r3, [r6, #0]
 8003656:	059b      	lsls	r3, r3, #22
 8003658:	d5f6      	bpl.n	8003648 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800365a:	6873      	ldr	r3, [r6, #4]
 800365c:	6a22      	ldr	r2, [r4, #32]
 800365e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003662:	4313      	orrs	r3, r2
 8003664:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003666:	6873      	ldr	r3, [r6, #4]
 8003668:	69e2      	ldr	r2, [r4, #28]
 800366a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800366e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003672:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	0719      	lsls	r1, r3, #28
 8003678:	d516      	bpl.n	80036a8 <HAL_RCC_OscConfig+0x14c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800367a:	6963      	ldr	r3, [r4, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8121 	beq.w	80038c4 <HAL_RCC_OscConfig+0x368>
      __HAL_RCC_LSI_ENABLE();
 8003682:	2201      	movs	r2, #1
 8003684:	4b5b      	ldr	r3, [pc, #364]	; (80037f4 <HAL_RCC_OscConfig+0x298>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003686:	4f5a      	ldr	r7, [pc, #360]	; (80037f0 <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_LSI_ENABLE();
 8003688:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 800368c:	f7fe ff66 	bl	800255c <HAL_GetTick>
 8003690:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003692:	e005      	b.n	80036a0 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003694:	f7fe ff62 	bl	800255c <HAL_GetTick>
 8003698:	1b80      	subs	r0, r0, r6
 800369a:	2802      	cmp	r0, #2
 800369c:	f200 80f7 	bhi.w	800388e <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a2:	079a      	lsls	r2, r3, #30
 80036a4:	d5f6      	bpl.n	8003694 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	075e      	lsls	r6, r3, #29
 80036aa:	d53b      	bpl.n	8003724 <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ac:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <HAL_RCC_OscConfig+0x294>)
 80036ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b0:	00d0      	lsls	r0, r2, #3
 80036b2:	f100 8129 	bmi.w	8003908 <HAL_RCC_OscConfig+0x3ac>
      pwrclkchanged = SET;
 80036b6:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036be:	625a      	str	r2, [r3, #36]	; 0x24
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ca:	4f4b      	ldr	r7, [pc, #300]	; (80037f8 <HAL_RCC_OscConfig+0x29c>)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	05d9      	lsls	r1, r3, #23
 80036d0:	f140 80cc 	bpl.w	800386c <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d4:	68a3      	ldr	r3, [r4, #8]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	f000 8175 	beq.w	80039c6 <HAL_RCC_OscConfig+0x46a>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80a9 	beq.w	8003834 <HAL_RCC_OscConfig+0x2d8>
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	4b42      	ldr	r3, [pc, #264]	; (80037f0 <HAL_RCC_OscConfig+0x294>)
 80036e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e8:	f000 818b 	beq.w	8003a02 <HAL_RCC_OscConfig+0x4a6>
 80036ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34
 80036f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80036fa:	f7fe ff2f 	bl	800255c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003702:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003704:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80037f0 <HAL_RCC_OscConfig+0x294>
 8003708:	e005      	b.n	8003716 <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fe ff27 	bl	800255c <HAL_GetTick>
 800370e:	1bc0      	subs	r0, r0, r7
 8003710:	4548      	cmp	r0, r9
 8003712:	f200 80bc 	bhi.w	800388e <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003716:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800371a:	059b      	lsls	r3, r3, #22
 800371c:	d5f5      	bpl.n	800370a <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 800371e:	2e00      	cmp	r6, #0
 8003720:	f040 814b 	bne.w	80039ba <HAL_RCC_OscConfig+0x45e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003724:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003726:	b1b8      	cbz	r0, 8003758 <HAL_RCC_OscConfig+0x1fc>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003728:	2d0c      	cmp	r5, #12
 800372a:	f000 8152 	beq.w	80039d2 <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <HAL_RCC_OscConfig+0x298>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003736:	f000 8116 	beq.w	8003966 <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_PLL_DISABLE();
 800373a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800373c:	f7fe ff0e 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003740:	4d2b      	ldr	r5, [pc, #172]	; (80037f0 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8003742:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003744:	e005      	b.n	8003752 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003746:	f7fe ff09 	bl	800255c <HAL_GetTick>
 800374a:	1b00      	subs	r0, r0, r4
 800374c:	2802      	cmp	r0, #2
 800374e:	f200 809e 	bhi.w	800388e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003752:	682b      	ldr	r3, [r5, #0]
 8003754:	019b      	lsls	r3, r3, #6
 8003756:	d4f6      	bmi.n	8003746 <HAL_RCC_OscConfig+0x1ea>
  return HAL_OK;
 8003758:	2000      	movs	r0, #0
}
 800375a:	b003      	add	sp, #12
 800375c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003760:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <HAL_RCC_OscConfig+0x294>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	059a      	lsls	r2, r3, #22
 8003766:	d502      	bpl.n	800376e <HAL_RCC_OscConfig+0x212>
 8003768:	69a3      	ldr	r3, [r4, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03b      	beq.n	80037e6 <HAL_RCC_OscConfig+0x28a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800376e:	4e20      	ldr	r6, [pc, #128]	; (80037f0 <HAL_RCC_OscConfig+0x294>)
 8003770:	6a20      	ldr	r0, [r4, #32]
 8003772:	6873      	ldr	r3, [r6, #4]
 8003774:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003778:	4298      	cmp	r0, r3
 800377a:	f240 80d7 	bls.w	800392c <HAL_RCC_OscConfig+0x3d0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800377e:	f7ff feab 	bl	80034d8 <RCC_SetFlashLatencyFromMSIRange>
 8003782:	2800      	cmp	r0, #0
 8003784:	d12f      	bne.n	80037e6 <HAL_RCC_OscConfig+0x28a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003786:	6872      	ldr	r2, [r6, #4]
 8003788:	6a23      	ldr	r3, [r4, #32]
 800378a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800378e:	431a      	orrs	r2, r3
 8003790:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003792:	6872      	ldr	r2, [r6, #4]
 8003794:	69e1      	ldr	r1, [r4, #28]
 8003796:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800379a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800379e:	6072      	str	r2, [r6, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037a0:	4a13      	ldr	r2, [pc, #76]	; (80037f0 <HAL_RCC_OscConfig+0x294>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037a2:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037a4:	6891      	ldr	r1, [r2, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037aa:	3301      	adds	r3, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037b0:	4a12      	ldr	r2, [pc, #72]	; (80037fc <HAL_RCC_OscConfig+0x2a0>)
 80037b2:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80037b6:	5c52      	ldrb	r2, [r2, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037b8:	4811      	ldr	r0, [pc, #68]	; (8003800 <HAL_RCC_OscConfig+0x2a4>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037ba:	40d3      	lsrs	r3, r2
        status = HAL_InitTick(uwTickPrio);
 80037bc:	4a11      	ldr	r2, [pc, #68]	; (8003804 <HAL_RCC_OscConfig+0x2a8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037be:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick(uwTickPrio);
 80037c0:	6810      	ldr	r0, [r2, #0]
 80037c2:	f7fe fe89 	bl	80024d8 <HAL_InitTick>
        if(status != HAL_OK)
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d1c7      	bne.n	800375a <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	e753      	b.n	8003676 <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037ce:	2e00      	cmp	r6, #0
 80037d0:	f43f aedb 	beq.w	800358a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	4a06      	ldr	r2, [pc, #24]	; (80037f0 <HAL_RCC_OscConfig+0x294>)
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	0392      	lsls	r2, r2, #14
 80037da:	f57f aeff 	bpl.w	80035dc <HAL_RCC_OscConfig+0x80>
 80037de:	6862      	ldr	r2, [r4, #4]
 80037e0:	2a00      	cmp	r2, #0
 80037e2:	f47f aefb 	bne.w	80035dc <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 80037e6:	2001      	movs	r0, #1
}
 80037e8:	b003      	add	sp, #12
 80037ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	42470000 	.word	0x42470000
 80037f8:	40007000 	.word	0x40007000
 80037fc:	08007178 	.word	0x08007178
 8003800:	20000004 	.word	0x20000004
 8003804:	2000000c 	.word	0x2000000c
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003808:	2e00      	cmp	r6, #0
 800380a:	f47f aeef 	bne.w	80035ec <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380e:	4a81      	ldr	r2, [pc, #516]	; (8003a14 <HAL_RCC_OscConfig+0x4b8>)
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	0792      	lsls	r2, r2, #30
 8003814:	d502      	bpl.n	800381c <HAL_RCC_OscConfig+0x2c0>
 8003816:	68e2      	ldr	r2, [r4, #12]
 8003818:	2a01      	cmp	r2, #1
 800381a:	d1e4      	bne.n	80037e6 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381c:	497d      	ldr	r1, [pc, #500]	; (8003a14 <HAL_RCC_OscConfig+0x4b8>)
 800381e:	6920      	ldr	r0, [r4, #16]
 8003820:	684a      	ldr	r2, [r1, #4]
 8003822:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8003826:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800382a:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800382c:	06d9      	lsls	r1, r3, #27
 800382e:	f57f af22 	bpl.w	8003676 <HAL_RCC_OscConfig+0x11a>
 8003832:	e6fa      	b.n	800362a <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003834:	4f77      	ldr	r7, [pc, #476]	; (8003a14 <HAL_RCC_OscConfig+0x4b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003840:	637b      	str	r3, [r7, #52]	; 0x34
 8003842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
      tickstart = HAL_GetTick();
 800384a:	f7fe fe87 	bl	800255c <HAL_GetTick>
 800384e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003850:	e005      	b.n	800385e <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003852:	f7fe fe83 	bl	800255c <HAL_GetTick>
 8003856:	eba0 0008 	sub.w	r0, r0, r8
 800385a:	4548      	cmp	r0, r9
 800385c:	d817      	bhi.n	800388e <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003860:	0598      	lsls	r0, r3, #22
 8003862:	d4f6      	bmi.n	8003852 <HAL_RCC_OscConfig+0x2f6>
    if(pwrclkchanged == SET)
 8003864:	2e00      	cmp	r6, #0
 8003866:	f43f af5d 	beq.w	8003724 <HAL_RCC_OscConfig+0x1c8>
 800386a:	e0a6      	b.n	80039ba <HAL_RCC_OscConfig+0x45e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003872:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003874:	f7fe fe72 	bl	800255c <HAL_GetTick>
 8003878:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	05da      	lsls	r2, r3, #23
 800387e:	f53f af29 	bmi.w	80036d4 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7fe fe6b 	bl	800255c <HAL_GetTick>
 8003886:	eba0 0008 	sub.w	r0, r0, r8
 800388a:	2864      	cmp	r0, #100	; 0x64
 800388c:	d9f5      	bls.n	800387a <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 800388e:	2003      	movs	r0, #3
}
 8003890:	b003      	add	sp, #12
 8003892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003896:	4f5f      	ldr	r7, [pc, #380]	; (8003a14 <HAL_RCC_OscConfig+0x4b8>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a6:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80038a8:	f7fe fe58 	bl	800255c <HAL_GetTick>
 80038ac:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038ae:	e005      	b.n	80038bc <HAL_RCC_OscConfig+0x360>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fe fe54 	bl	800255c <HAL_GetTick>
 80038b4:	eba0 0008 	sub.w	r0, r0, r8
 80038b8:	2864      	cmp	r0, #100	; 0x64
 80038ba:	d8e8      	bhi.n	800388e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	0398      	lsls	r0, r3, #14
 80038c0:	d4f6      	bmi.n	80038b0 <HAL_RCC_OscConfig+0x354>
 80038c2:	e68a      	b.n	80035da <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 80038c4:	4a54      	ldr	r2, [pc, #336]	; (8003a18 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038c6:	4f53      	ldr	r7, [pc, #332]	; (8003a14 <HAL_RCC_OscConfig+0x4b8>)
      __HAL_RCC_LSI_DISABLE();
 80038c8:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
      tickstart = HAL_GetTick();
 80038cc:	f7fe fe46 	bl	800255c <HAL_GetTick>
 80038d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038d2:	e004      	b.n	80038de <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d4:	f7fe fe42 	bl	800255c <HAL_GetTick>
 80038d8:	1b80      	subs	r0, r0, r6
 80038da:	2802      	cmp	r0, #2
 80038dc:	d8d7      	bhi.n	800388e <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e0:	079b      	lsls	r3, r3, #30
 80038e2:	d4f7      	bmi.n	80038d4 <HAL_RCC_OscConfig+0x378>
 80038e4:	e6df      	b.n	80036a6 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 80038e6:	4a4c      	ldr	r2, [pc, #304]	; (8003a18 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038e8:	4f4a      	ldr	r7, [pc, #296]	; (8003a14 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_HSI_DISABLE();
 80038ea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80038ec:	f7fe fe36 	bl	800255c <HAL_GetTick>
 80038f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038f2:	e004      	b.n	80038fe <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fe fe32 	bl	800255c <HAL_GetTick>
 80038f8:	1b80      	subs	r0, r0, r6
 80038fa:	2802      	cmp	r0, #2
 80038fc:	d8c7      	bhi.n	800388e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	0798      	lsls	r0, r3, #30
 8003902:	d4f7      	bmi.n	80038f4 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	e68e      	b.n	8003626 <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 8003908:	2600      	movs	r6, #0
 800390a:	e6de      	b.n	80036ca <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_MSI_DISABLE();
 800390c:	4a42      	ldr	r2, [pc, #264]	; (8003a18 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800390e:	4f41      	ldr	r7, [pc, #260]	; (8003a14 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_MSI_DISABLE();
 8003910:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003912:	f7fe fe23 	bl	800255c <HAL_GetTick>
 8003916:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003918:	e004      	b.n	8003924 <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800391a:	f7fe fe1f 	bl	800255c <HAL_GetTick>
 800391e:	1b80      	subs	r0, r0, r6
 8003920:	2802      	cmp	r0, #2
 8003922:	d8b4      	bhi.n	800388e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	0598      	lsls	r0, r3, #22
 8003928:	d4f7      	bmi.n	800391a <HAL_RCC_OscConfig+0x3be>
 800392a:	e74e      	b.n	80037ca <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800392c:	6873      	ldr	r3, [r6, #4]
 800392e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003932:	4303      	orrs	r3, r0
 8003934:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003936:	6873      	ldr	r3, [r6, #4]
 8003938:	69e2      	ldr	r2, [r4, #28]
 800393a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800393e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003942:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003944:	f7ff fdc8 	bl	80034d8 <RCC_SetFlashLatencyFromMSIRange>
 8003948:	2800      	cmp	r0, #0
 800394a:	f47f af4c 	bne.w	80037e6 <HAL_RCC_OscConfig+0x28a>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800394e:	6a23      	ldr	r3, [r4, #32]
 8003950:	e726      	b.n	80037a0 <HAL_RCC_OscConfig+0x244>
    return HAL_ERROR;
 8003952:	2001      	movs	r0, #1
}
 8003954:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003956:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e629      	b.n	80035ba <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 8003966:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003968:	f7fe fdf8 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800396c:	4e29      	ldr	r6, [pc, #164]	; (8003a14 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 800396e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003970:	e004      	b.n	800397c <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003972:	f7fe fdf3 	bl	800255c <HAL_GetTick>
 8003976:	1b40      	subs	r0, r0, r5
 8003978:	2802      	cmp	r0, #2
 800397a:	d888      	bhi.n	800388e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800397c:	6833      	ldr	r3, [r6, #0]
 800397e:	0199      	lsls	r1, r3, #6
 8003980:	d4f7      	bmi.n	8003972 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003982:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 8003986:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 8003988:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800398a:	68b2      	ldr	r2, [r6, #8]
 800398c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800398e:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8003992:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8003994:	4a20      	ldr	r2, [pc, #128]	; (8003a18 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003996:	4303      	orrs	r3, r0
 8003998:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 800399a:	6611      	str	r1, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 800399c:	f7fe fdde 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039a0:	4d1c      	ldr	r5, [pc, #112]	; (8003a14 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 80039a2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039a4:	e005      	b.n	80039b2 <HAL_RCC_OscConfig+0x456>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fe fdd9 	bl	800255c <HAL_GetTick>
 80039aa:	1b00      	subs	r0, r0, r4
 80039ac:	2802      	cmp	r0, #2
 80039ae:	f63f af6e 	bhi.w	800388e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039b2:	682b      	ldr	r3, [r5, #0]
 80039b4:	019a      	lsls	r2, r3, #6
 80039b6:	d5f6      	bpl.n	80039a6 <HAL_RCC_OscConfig+0x44a>
 80039b8:	e6ce      	b.n	8003758 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ba:	4a16      	ldr	r2, [pc, #88]	; (8003a14 <HAL_RCC_OscConfig+0x4b8>)
 80039bc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80039be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c2:	6253      	str	r3, [r2, #36]	; 0x24
 80039c4:	e6ae      	b.n	8003724 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c6:	4a13      	ldr	r2, [pc, #76]	; (8003a14 <HAL_RCC_OscConfig+0x4b8>)
 80039c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80039ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ce:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039d0:	e693      	b.n	80036fa <HAL_RCC_OscConfig+0x19e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d2:	2801      	cmp	r0, #1
 80039d4:	f43f aec1 	beq.w	800375a <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <HAL_RCC_OscConfig+0x4b8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 80039dc:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039de:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80039e2:	4291      	cmp	r1, r2
 80039e4:	f47f aeff 	bne.w	80037e6 <HAL_RCC_OscConfig+0x28a>
 80039e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80039ea:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ee:	4291      	cmp	r1, r2
 80039f0:	f47f aef9 	bne.w	80037e6 <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80039f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80039f6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 80039fa:	1a18      	subs	r0, r3, r0
 80039fc:	bf18      	it	ne
 80039fe:	2001      	movne	r0, #1
 8003a00:	e6ab      	b.n	800375a <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a06:	635a      	str	r2, [r3, #52]	; 0x34
 8003a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a0e:	635a      	str	r2, [r3, #52]	; 0x34
 8003a10:	e673      	b.n	80036fa <HAL_RCC_OscConfig+0x19e>
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	42470000 	.word	0x42470000

08003a1c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	f000 80c2 	beq.w	8003ba6 <HAL_RCC_ClockConfig+0x18a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a22:	4a7c      	ldr	r2, [pc, #496]	; (8003c14 <HAL_RCC_ClockConfig+0x1f8>)
{
 8003a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a28:	6813      	ldr	r3, [r2, #0]
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	428b      	cmp	r3, r1
 8003a32:	460d      	mov	r5, r1
 8003a34:	d213      	bcs.n	8003a5e <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	2901      	cmp	r1, #1
 8003a38:	d103      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x26>
 8003a3a:	6813      	ldr	r3, [r2, #0]
 8003a3c:	f043 0304 	orr.w	r3, r3, #4
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4a74      	ldr	r2, [pc, #464]	; (8003c14 <HAL_RCC_ClockConfig+0x1f8>)
 8003a44:	6813      	ldr	r3, [r2, #0]
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	432b      	orrs	r3, r5
 8003a4c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	6813      	ldr	r3, [r2, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	42ab      	cmp	r3, r5
 8003a56:	d002      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 8003a58:	2001      	movs	r0, #1
}
 8003a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	0799      	lsls	r1, r3, #30
 8003a62:	d506      	bpl.n	8003a72 <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a64:	496c      	ldr	r1, [pc, #432]	; (8003c18 <HAL_RCC_ClockConfig+0x1fc>)
 8003a66:	68a0      	ldr	r0, [r4, #8]
 8003a68:	688a      	ldr	r2, [r1, #8]
 8003a6a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a6e:	4302      	orrs	r2, r0
 8003a70:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a72:	07da      	lsls	r2, r3, #31
 8003a74:	d529      	bpl.n	8003aca <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a78:	4b67      	ldr	r3, [pc, #412]	; (8003c18 <HAL_RCC_ClockConfig+0x1fc>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7a:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a7c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7e:	f000 808e 	beq.w	8003b9e <HAL_RCC_ClockConfig+0x182>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a82:	2a03      	cmp	r2, #3
 8003a84:	f000 8085 	beq.w	8003b92 <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a88:	2a01      	cmp	r2, #1
 8003a8a:	f000 80be 	beq.w	8003c0a <HAL_RCC_ClockConfig+0x1ee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a8e:	0598      	lsls	r0, r3, #22
 8003a90:	d5e2      	bpl.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a92:	4e61      	ldr	r6, [pc, #388]	; (8003c18 <HAL_RCC_ClockConfig+0x1fc>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a94:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a98:	68b3      	ldr	r3, [r6, #8]
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003aa2:	f7fe fd5b 	bl	800255c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa6:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8003aa8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d055      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x13e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d05e      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d105      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xa6>
 8003ab6:	e066      	b.n	8003b86 <HAL_RCC_ClockConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7fe fd50 	bl	800255c <HAL_GetTick>
 8003abc:	1bc0      	subs	r0, r0, r7
 8003abe:	4540      	cmp	r0, r8
 8003ac0:	d873      	bhi.n	8003baa <HAL_RCC_ClockConfig+0x18e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ac2:	68b3      	ldr	r3, [r6, #8]
 8003ac4:	f013 0f0c 	tst.w	r3, #12
 8003ac8:	d1f6      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aca:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <HAL_RCC_ClockConfig+0x1f8>)
 8003acc:	6813      	ldr	r3, [r2, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	42ab      	cmp	r3, r5
 8003ad4:	d906      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	6813      	ldr	r3, [r2, #0]
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	6813      	ldr	r3, [r2, #0]
 8003ae0:	07da      	lsls	r2, r3, #31
 8003ae2:	d4b9      	bmi.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	0759      	lsls	r1, r3, #29
 8003ae8:	d506      	bpl.n	8003af8 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aea:	494b      	ldr	r1, [pc, #300]	; (8003c18 <HAL_RCC_ClockConfig+0x1fc>)
 8003aec:	68e0      	ldr	r0, [r4, #12]
 8003aee:	688a      	ldr	r2, [r1, #8]
 8003af0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003af4:	4302      	orrs	r2, r0
 8003af6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af8:	071b      	lsls	r3, r3, #28
 8003afa:	d420      	bmi.n	8003b3e <HAL_RCC_ClockConfig+0x122>
  tmpreg = RCC->CFGR;
 8003afc:	4946      	ldr	r1, [pc, #280]	; (8003c18 <HAL_RCC_ClockConfig+0x1fc>)
 8003afe:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8003b00:	f002 030c 	and.w	r3, r2, #12
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d065      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x1b8>
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	d050      	beq.n	8003bae <HAL_RCC_ClockConfig+0x192>
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d044      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x17e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003b14:	684b      	ldr	r3, [r1, #4]
 8003b16:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b1e:	4b3e      	ldr	r3, [pc, #248]	; (8003c18 <HAL_RCC_ClockConfig+0x1fc>)
 8003b20:	4a3e      	ldr	r2, [pc, #248]	; (8003c1c <HAL_RCC_ClockConfig+0x200>)
 8003b22:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 8003b24:	493e      	ldr	r1, [pc, #248]	; (8003c20 <HAL_RCC_ClockConfig+0x204>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b26:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b2a:	5cd3      	ldrb	r3, [r2, r3]
 8003b2c:	4a3d      	ldr	r2, [pc, #244]	; (8003c24 <HAL_RCC_ClockConfig+0x208>)
 8003b2e:	fa20 f303 	lsr.w	r3, r0, r3
}
 8003b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8003b36:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b38:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 8003b3a:	f7fe bccd 	b.w	80024d8 <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3e:	4a36      	ldr	r2, [pc, #216]	; (8003c18 <HAL_RCC_ClockConfig+0x1fc>)
 8003b40:	6921      	ldr	r1, [r4, #16]
 8003b42:	6893      	ldr	r3, [r2, #8]
 8003b44:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003b48:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b4c:	6093      	str	r3, [r2, #8]
 8003b4e:	e7d5      	b.n	8003afc <HAL_RCC_ClockConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b50:	f7fe fd04 	bl	800255c <HAL_GetTick>
 8003b54:	1bc3      	subs	r3, r0, r7
 8003b56:	4543      	cmp	r3, r8
 8003b58:	d827      	bhi.n	8003baa <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b5a:	68b3      	ldr	r3, [r6, #8]
 8003b5c:	f003 030c 	and.w	r3, r3, #12
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d1f5      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x134>
 8003b64:	e7b1      	b.n	8003aca <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b66:	f7fe fcf9 	bl	800255c <HAL_GetTick>
 8003b6a:	1bc0      	subs	r0, r0, r7
 8003b6c:	4540      	cmp	r0, r8
 8003b6e:	d81c      	bhi.n	8003baa <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b70:	68b3      	ldr	r3, [r6, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b0c      	cmp	r3, #12
 8003b78:	d1f5      	bne.n	8003b66 <HAL_RCC_ClockConfig+0x14a>
 8003b7a:	e7a6      	b.n	8003aca <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7c:	f7fe fcee 	bl	800255c <HAL_GetTick>
 8003b80:	1bc0      	subs	r0, r0, r7
 8003b82:	4540      	cmp	r0, r8
 8003b84:	d811      	bhi.n	8003baa <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b86:	68b3      	ldr	r3, [r6, #8]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d1f5      	bne.n	8003b7c <HAL_RCC_ClockConfig+0x160>
 8003b90:	e79b      	b.n	8003aca <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b92:	019f      	lsls	r7, r3, #6
 8003b94:	f53f af7d 	bmi.w	8003a92 <HAL_RCC_ClockConfig+0x76>
 8003b98:	e75e      	b.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
      sysclockfreq = HSI_VALUE;
 8003b9a:	4823      	ldr	r0, [pc, #140]	; (8003c28 <HAL_RCC_ClockConfig+0x20c>)
 8003b9c:	e7bf      	b.n	8003b1e <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b9e:	039b      	lsls	r3, r3, #14
 8003ba0:	f53f af77 	bmi.w	8003a92 <HAL_RCC_ClockConfig+0x76>
 8003ba4:	e758      	b.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 8003ba6:	2001      	movs	r0, #1
}
 8003ba8:	4770      	bx	lr
          return HAL_TIMEOUT;
 8003baa:	2003      	movs	r0, #3
 8003bac:	e755      	b.n	8003a5a <HAL_RCC_ClockConfig+0x3e>
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bae:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003bb0:	481e      	ldr	r0, [pc, #120]	; (8003c2c <HAL_RCC_ClockConfig+0x210>)
 8003bb2:	f3c2 4183 	ubfx	r1, r2, #18, #4
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bb6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003bba:	f3c2 5281 	ubfx	r2, r2, #22, #2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003bbe:	5c40      	ldrb	r0, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003bc0:	f102 0201 	add.w	r2, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc4:	d008      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x1bc>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003bc6:	491a      	ldr	r1, [pc, #104]	; (8003c30 <HAL_RCC_ClockConfig+0x214>)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	fba0 0101 	umull	r0, r1, r0, r1
 8003bce:	f7fd fab7 	bl	8001140 <__aeabi_uldivmod>
 8003bd2:	e7a4      	b.n	8003b1e <HAL_RCC_ClockConfig+0x102>
  switch (tmpreg & RCC_CFGR_SWS)
 8003bd4:	4816      	ldr	r0, [pc, #88]	; (8003c30 <HAL_RCC_ClockConfig+0x214>)
 8003bd6:	e7a2      	b.n	8003b1e <HAL_RCC_ClockConfig+0x102>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003bd8:	0141      	lsls	r1, r0, #5
 8003bda:	1a0d      	subs	r5, r1, r0
 8003bdc:	eb66 0606 	sbc.w	r6, r6, r6
 8003be0:	01b4      	lsls	r4, r6, #6
 8003be2:	01a9      	lsls	r1, r5, #6
 8003be4:	1b49      	subs	r1, r1, r5
 8003be6:	ea44 6495 	orr.w	r4, r4, r5, lsr #26
 8003bea:	eb64 0406 	sbc.w	r4, r4, r6
 8003bee:	00e4      	lsls	r4, r4, #3
 8003bf0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003bf4:	00c9      	lsls	r1, r1, #3
 8003bf6:	1809      	adds	r1, r1, r0
 8003bf8:	f144 0400 	adc.w	r4, r4, #0
 8003bfc:	02a4      	lsls	r4, r4, #10
 8003bfe:	0288      	lsls	r0, r1, #10
 8003c00:	ea44 5191 	orr.w	r1, r4, r1, lsr #22
 8003c04:	f7fd fa9c 	bl	8001140 <__aeabi_uldivmod>
 8003c08:	e789      	b.n	8003b1e <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0a:	079e      	lsls	r6, r3, #30
 8003c0c:	f53f af41 	bmi.w	8003a92 <HAL_RCC_ClockConfig+0x76>
 8003c10:	e722      	b.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
 8003c12:	bf00      	nop
 8003c14:	40023c00 	.word	0x40023c00
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	08007178 	.word	0x08007178
 8003c20:	2000000c 	.word	0x2000000c
 8003c24:	20000004 	.word	0x20000004
 8003c28:	00f42400 	.word	0x00f42400
 8003c2c:	08007190 	.word	0x08007190
 8003c30:	016e3600 	.word	0x016e3600

08003c34 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003c36:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	4905      	ldr	r1, [pc, #20]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003c3c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003c40:	5ccb      	ldrb	r3, [r1, r3]
 8003c42:	6810      	ldr	r0, [r2, #0]
}
 8003c44:	40d8      	lsrs	r0, r3
 8003c46:	4770      	bx	lr
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	20000004 	.word	0x20000004
 8003c50:	08007188 	.word	0x08007188

08003c54 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003c56:	4a05      	ldr	r2, [pc, #20]	; (8003c6c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4905      	ldr	r1, [pc, #20]	; (8003c70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003c5c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003c60:	5ccb      	ldrb	r3, [r1, r3]
 8003c62:	6810      	ldr	r0, [r2, #0]
}
 8003c64:	40d8      	lsrs	r0, r3
 8003c66:	4770      	bx	lr
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	20000004 	.word	0x20000004
 8003c70:	08007188 	.word	0x08007188

08003c74 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c74:	2800      	cmp	r0, #0
 8003c76:	f000 8081 	beq.w	8003d7c <HAL_UART_Init+0x108>
{
 8003c7a:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c80:	4604      	mov	r4, r0
 8003c82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d070      	beq.n	8003d6c <HAL_UART_Init+0xf8>
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c8a:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c8e:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c90:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8003c92:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c94:	4302      	orrs	r2, r0
 8003c96:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c98:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c9c:	4302      	orrs	r2, r0
 8003c9e:	69e0      	ldr	r0, [r4, #28]
 8003ca0:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 8003ca2:	68d8      	ldr	r0, [r3, #12]
 8003ca4:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8003ca8:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003caa:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cac:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cae:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003cb2:	4329      	orrs	r1, r5
 8003cb4:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003cb6:	68d9      	ldr	r1, [r3, #12]
 8003cb8:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003cbc:	f021 010c 	bic.w	r1, r1, #12
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cc4:	695a      	ldr	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003cc6:	492e      	ldr	r1, [pc, #184]	; (8003d80 <HAL_UART_Init+0x10c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cc8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ccc:	4302      	orrs	r2, r0
  if((huart->Instance == USART1))
 8003cce:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cd0:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1))
 8003cd2:	d050      	beq.n	8003d76 <HAL_UART_Init+0x102>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cd4:	f7ff ffae 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd8:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ce2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ce6:	6863      	ldr	r3, [r4, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce8:	d027      	beq.n	8003d3a <HAL_UART_Init+0xc6>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf0:	2564      	movs	r5, #100	; 0x64
 8003cf2:	4824      	ldr	r0, [pc, #144]	; (8003d84 <HAL_UART_Init+0x110>)
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	fba0 6103 	umull	r6, r1, r0, r3
 8003cfa:	0949      	lsrs	r1, r1, #5
 8003cfc:	fb05 3311 	mls	r3, r5, r1, r3
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	3332      	adds	r3, #50	; 0x32
 8003d04:	fba0 0303 	umull	r0, r3, r0, r3
 8003d08:	0109      	lsls	r1, r1, #4
 8003d0a:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8003d0e:	6093      	str	r3, [r2, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d10:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003d12:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d14:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 8003d16:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d18:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003d1c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d1e:	6953      	ldr	r3, [r2, #20]
 8003d20:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003d24:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003d26:	68d3      	ldr	r3, [r2, #12]
 8003d28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d2c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2e:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d30:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d34:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 8003d38:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d40:	2364      	movs	r3, #100	; 0x64
 8003d42:	4e10      	ldr	r6, [pc, #64]	; (8003d84 <HAL_UART_Init+0x110>)
 8003d44:	6822      	ldr	r2, [r4, #0]
 8003d46:	fba6 5100 	umull	r5, r1, r6, r0
 8003d4a:	094d      	lsrs	r5, r1, #5
 8003d4c:	fb03 0315 	mls	r3, r3, r5, r0
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	3332      	adds	r3, #50	; 0x32
 8003d54:	fba6 1303 	umull	r1, r3, r6, r3
 8003d58:	f3c3 1142 	ubfx	r1, r3, #5, #3
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8003d62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d66:	440b      	add	r3, r1
 8003d68:	6093      	str	r3, [r2, #8]
 8003d6a:	e7d1      	b.n	8003d10 <HAL_UART_Init+0x9c>
    huart->Lock = HAL_UNLOCKED;
 8003d6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003d70:	f7fe fa88 	bl	8002284 <HAL_UART_MspInit>
 8003d74:	e789      	b.n	8003c8a <HAL_UART_Init+0x16>
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d76:	f7ff ff6d 	bl	8003c54 <HAL_RCC_GetPCLK2Freq>
 8003d7a:	e7ad      	b.n	8003cd8 <HAL_UART_Init+0x64>
    return HAL_ERROR;
 8003d7c:	2001      	movs	r0, #1
}
 8003d7e:	4770      	bx	lr
 8003d80:	40013800 	.word	0x40013800
 8003d84:	51eb851f 	.word	0x51eb851f

08003d88 <HAL_UART_Transmit_DMA>:
{
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003d8c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8003d90:	2820      	cmp	r0, #32
 8003d92:	d12d      	bne.n	8003df0 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 8003d94:	b351      	cbz	r1, 8003dec <HAL_UART_Transmit_DMA+0x64>
 8003d96:	b34a      	cbz	r2, 8003dec <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 8003d98:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8003d9c:	2801      	cmp	r0, #1
 8003d9e:	d027      	beq.n	8003df0 <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da0:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003da2:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da6:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003daa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003dac:	4f11      	ldr	r7, [pc, #68]	; (8003df4 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003dae:	4e12      	ldr	r6, [pc, #72]	; (8003df8 <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 8003db0:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 8003db2:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db4:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 8003db6:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 8003db8:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dbc:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003dc4:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003dc8:	4e0c      	ldr	r6, [pc, #48]	; (8003dfc <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003dca:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 8003dcc:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003dce:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003dd0:	f7ff f92c 	bl	800302c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dd8:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8003dda:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003ddc:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8003dde:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003de8:	615a      	str	r2, [r3, #20]
}
 8003dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003dec:	2001      	movs	r0, #1
}
 8003dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003df0:	2002      	movs	r0, #2
}
 8003df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df4:	08003ea1 	.word	0x08003ea1
 8003df8:	08003ecd 	.word	0x08003ecd
 8003dfc:	08003ed9 	.word	0x08003ed9

08003e00 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e00:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d13f      	bne.n	8003e88 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 8003e08:	2900      	cmp	r1, #0
 8003e0a:	d03b      	beq.n	8003e84 <HAL_UART_Receive_DMA+0x84>
 8003e0c:	2a00      	cmp	r2, #0
 8003e0e:	d039      	beq.n	8003e84 <HAL_UART_Receive_DMA+0x84>
{
 8003e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 8003e12:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e16:	4604      	mov	r4, r0
 8003e18:	2b01      	cmp	r3, #1
{
 8003e1a:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 8003e1c:	d036      	beq.n	8003e8c <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1e:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003e20:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e24:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 8003e28:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e2a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e2c:	4f19      	ldr	r7, [pc, #100]	; (8003e94 <HAL_UART_Receive_DMA+0x94>)
 8003e2e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e30:	4e19      	ldr	r6, [pc, #100]	; (8003e98 <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 8003e34:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e38:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e3a:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e3c:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e40:	460a      	mov	r2, r1
 8003e42:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e44:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e48:	4e14      	ldr	r6, [pc, #80]	; (8003e9c <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e4a:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 8003e4c:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e4e:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e50:	f7ff f8ec 	bl	800302c <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003e54:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	9501      	str	r5, [sp, #4]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	9201      	str	r2, [sp, #4]
 8003e5e:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 8003e60:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003e64:	9201      	str	r2, [sp, #4]
 8003e66:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e6e:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e7e:	615a      	str	r2, [r3, #20]
}
 8003e80:	b003      	add	sp, #12
 8003e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003e84:	2001      	movs	r0, #1
}
 8003e86:	4770      	bx	lr
    return HAL_BUSY;
 8003e88:	2002      	movs	r0, #2
 8003e8a:	4770      	bx	lr
 8003e8c:	2002      	movs	r0, #2
}
 8003e8e:	b003      	add	sp, #12
 8003e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e92:	bf00      	nop
 8003e94:	08003f85 	.word	0x08003f85
 8003e98:	08003f69 	.word	0x08003f69
 8003e9c:	08003ed9 	.word	0x08003ed9

08003ea0 <UART_DMATransmitCplt>:
{
 8003ea0:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ea2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f013 0320 	ands.w	r3, r3, #32
 8003eac:	d10a      	bne.n	8003ec4 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003eae:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 8003eb0:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003eb2:	6953      	ldr	r3, [r2, #20]
 8003eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb8:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eba:	68d3      	ldr	r3, [r2, #12]
 8003ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec0:	60d3      	str	r3, [r2, #12]
}
 8003ec2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003ec4:	f7fd ff82 	bl	8001dcc <HAL_UART_TxCpltCallback>
}
 8003ec8:	bd08      	pop	{r3, pc}
 8003eca:	bf00      	nop

08003ecc <UART_DMATxHalfCplt>:
{
 8003ecc:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8003ece:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003ed0:	f7fd ff68 	bl	8001da4 <HAL_UART_TxHalfCpltCallback>
}
 8003ed4:	bd08      	pop	{r3, pc}
 8003ed6:	bf00      	nop

08003ed8 <UART_DMAError>:
{
 8003ed8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eda:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003edc:	6803      	ldr	r3, [r0, #0]
 8003ede:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ee0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8003ee4:	2a21      	cmp	r2, #33	; 0x21
 8003ee6:	d00b      	beq.n	8003f00 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee8:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003eea:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003eee:	2a22      	cmp	r2, #34	; 0x22
 8003ef0:	d016      	beq.n	8003f20 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ef2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003ef4:	f043 0310 	orr.w	r3, r3, #16
 8003ef8:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8003efa:	f7fe f8ef 	bl	80020dc <HAL_UART_ErrorCallback>
}
 8003efe:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f00:	0609      	lsls	r1, r1, #24
 8003f02:	d5f1      	bpl.n	8003ee8 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8003f04:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8003f06:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 8003f08:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f10:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003f12:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f18:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003f1c:	2a22      	cmp	r2, #34	; 0x22
 8003f1e:	d1e8      	bne.n	8003ef2 <UART_DMAError+0x1a>
 8003f20:	064a      	lsls	r2, r1, #25
 8003f22:	d5e6      	bpl.n	8003ef2 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8003f24:	2200      	movs	r2, #0
 8003f26:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f38:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003f3a:	2a01      	cmp	r2, #1
 8003f3c:	d103      	bne.n	8003f46 <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	f022 0210 	bic.w	r2, r2, #16
 8003f44:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 8003f46:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f48:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4e:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003f50:	e7cf      	b.n	8003ef2 <UART_DMAError+0x1a>
 8003f52:	bf00      	nop

08003f54 <UART_DMAAbortOnError>:
{
 8003f54:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003f56:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f58:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003f5a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f5c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003f5e:	f7fe f8bd 	bl	80020dc <HAL_UART_ErrorCallback>
}
 8003f62:	bd08      	pop	{r3, pc}

08003f64 <HAL_UARTEx_RxEventCallback>:
}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop

08003f68 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f68:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003f6a:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d002      	beq.n	8003f78 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f72:	f7fd ff59 	bl	8001e28 <HAL_UART_RxHalfCpltCallback>
}
 8003f76:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003f78:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003f7a:	0849      	lsrs	r1, r1, #1
 8003f7c:	f7ff fff2 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
}
 8003f80:	bd08      	pop	{r3, pc}
 8003f82:	bf00      	nop

08003f84 <UART_DMAReceiveCplt>:
{
 8003f84:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f86:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f88:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f013 0320 	ands.w	r3, r3, #32
 8003f90:	d113      	bne.n	8003fba <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 8003f92:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f94:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8003f96:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f98:	68d3      	ldr	r3, [r2, #12]
 8003f9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f9e:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa0:	6953      	ldr	r3, [r2, #20]
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa8:	6953      	ldr	r3, [r2, #20]
 8003faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fae:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d009      	beq.n	8003fce <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d002      	beq.n	8003fc6 <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 8003fc0:	f7fd ff36 	bl	8001e30 <HAL_UART_RxCpltCallback>
}
 8003fc4:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003fc8:	f7ff ffcc 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
}
 8003fcc:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fce:	68d3      	ldr	r3, [r2, #12]
 8003fd0:	f023 0310 	bic.w	r3, r3, #16
 8003fd4:	60d3      	str	r3, [r2, #12]
 8003fd6:	e7f0      	b.n	8003fba <UART_DMAReceiveCplt+0x36>

08003fd8 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd8:	6883      	ldr	r3, [r0, #8]
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fde:	d03b      	beq.n	8004058 <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fe0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d030      	beq.n	8004048 <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fe6:	6803      	ldr	r3, [r0, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fee:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003ff0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003ff6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003ffe:	bb53      	cbnz	r3, 8004056 <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 8004000:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004004:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004006:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004008:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800400a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800400c:	f021 0120 	bic.w	r1, r1, #32
 8004010:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004012:	68d1      	ldr	r1, [r2, #12]
 8004014:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004018:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800401a:	6951      	ldr	r1, [r2, #20]
 800401c:	f021 0101 	bic.w	r1, r1, #1
 8004020:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004022:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004026:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004028:	2901      	cmp	r1, #1
 800402a:	d120      	bne.n	800406e <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402c:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402e:	68d1      	ldr	r1, [r2, #12]
 8004030:	f021 0110 	bic.w	r1, r1, #16
 8004034:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004036:	6811      	ldr	r1, [r2, #0]
 8004038:	06c9      	lsls	r1, r1, #27
 800403a:	d422      	bmi.n	8004082 <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800403c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800403e:	f7ff ff91 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
}
 8004042:	b003      	add	sp, #12
 8004044:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004048:	6903      	ldr	r3, [r0, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1cb      	bne.n	8003fe6 <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800404e:	6803      	ldr	r3, [r0, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	7013      	strb	r3, [r2, #0]
 8004054:	e7cc      	b.n	8003ff0 <UART_Receive_IT.part.0.isra.0+0x18>
 8004056:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004058:	6903      	ldr	r3, [r0, #16]
 800405a:	b96b      	cbnz	r3, 8004078 <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800405c:	6802      	ldr	r2, [r0, #0]
 800405e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004060:	6852      	ldr	r2, [r2, #4]
 8004062:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004066:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800406a:	6283      	str	r3, [r0, #40]	; 0x28
 800406c:	e7c3      	b.n	8003ff6 <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 800406e:	f7fd fedf 	bl	8001e30 <HAL_UART_RxCpltCallback>
}
 8004072:	b003      	add	sp, #12
 8004074:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004078:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800407a:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	7013      	strb	r3, [r2, #0]
 8004080:	e7b6      	b.n	8003ff0 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	6813      	ldr	r3, [r2, #0]
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	6853      	ldr	r3, [r2, #4]
 800408a:	9301      	str	r3, [sp, #4]
 800408c:	9b01      	ldr	r3, [sp, #4]
 800408e:	e7d5      	b.n	800403c <UART_Receive_IT.part.0.isra.0+0x64>

08004090 <HAL_UART_IRQHandler>:
{
 8004090:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004092:	6803      	ldr	r3, [r0, #0]
{
 8004094:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004096:	681a      	ldr	r2, [r3, #0]
{
 8004098:	b083      	sub	sp, #12
  if (errorflags == RESET)
 800409a:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800409e:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040a0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80040a2:	d14e      	bne.n	8004142 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040a4:	0695      	lsls	r5, r2, #26
 80040a6:	d502      	bpl.n	80040ae <HAL_UART_IRQHandler+0x1e>
 80040a8:	068d      	lsls	r5, r1, #26
 80040aa:	f100 8090 	bmi.w	80041ce <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80040b0:	2801      	cmp	r0, #1
 80040b2:	d00b      	beq.n	80040cc <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040b4:	0610      	lsls	r0, r2, #24
 80040b6:	d502      	bpl.n	80040be <HAL_UART_IRQHandler+0x2e>
 80040b8:	060d      	lsls	r5, r1, #24
 80040ba:	f100 8092 	bmi.w	80041e2 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040be:	0650      	lsls	r0, r2, #25
 80040c0:	d502      	bpl.n	80040c8 <HAL_UART_IRQHandler+0x38>
 80040c2:	064a      	lsls	r2, r1, #25
 80040c4:	f100 80ab 	bmi.w	800421e <HAL_UART_IRQHandler+0x18e>
}
 80040c8:	b003      	add	sp, #12
 80040ca:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 80040cc:	06d0      	lsls	r0, r2, #27
 80040ce:	d5f1      	bpl.n	80040b4 <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80040d0:	06cd      	lsls	r5, r1, #27
 80040d2:	d5ef      	bpl.n	80040b4 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040d4:	2100      	movs	r1, #0
 80040d6:	9101      	str	r1, [sp, #4]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	9201      	str	r2, [sp, #4]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	9201      	str	r2, [sp, #4]
 80040e0:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80040e8:	f000 80d2 	beq.w	8004290 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80040ee:	6802      	ldr	r2, [r0, #0]
 80040f0:	6852      	ldr	r2, [r2, #4]
 80040f2:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 80040f4:	2a00      	cmp	r2, #0
 80040f6:	d0e7      	beq.n	80040c8 <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80040f8:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 80040fa:	4295      	cmp	r5, r2
 80040fc:	d9e4      	bls.n	80040c8 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 80040fe:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004100:	6982      	ldr	r2, [r0, #24]
 8004102:	2a20      	cmp	r2, #32
 8004104:	d016      	beq.n	8004134 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800410c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004116:	695a      	ldr	r2, [r3, #20]
 8004118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411c:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800411e:	2220      	movs	r2, #32
 8004120:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004124:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	f022 0210 	bic.w	r2, r2, #16
 800412c:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800412e:	f7fe ffc7 	bl	80030c0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004132:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8004134:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004136:	4620      	mov	r0, r4
 8004138:	1a69      	subs	r1, r5, r1
 800413a:	b289      	uxth	r1, r1
 800413c:	f7ff ff12 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
 8004140:	e7c2      	b.n	80040c8 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004142:	f005 0501 	and.w	r5, r5, #1
 8004146:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800414a:	4328      	orrs	r0, r5
 800414c:	d0af      	beq.n	80040ae <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800414e:	07d0      	lsls	r0, r2, #31
 8004150:	d505      	bpl.n	800415e <HAL_UART_IRQHandler+0xce>
 8004152:	05c8      	lsls	r0, r1, #23
 8004154:	d503      	bpl.n	800415e <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004156:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004158:	f040 0001 	orr.w	r0, r0, #1
 800415c:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800415e:	0750      	lsls	r0, r2, #29
 8004160:	d530      	bpl.n	80041c4 <HAL_UART_IRQHandler+0x134>
 8004162:	b14d      	cbz	r5, 8004178 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004164:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004166:	f040 0002 	orr.w	r0, r0, #2
 800416a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800416c:	0790      	lsls	r0, r2, #30
 800416e:	d503      	bpl.n	8004178 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004170:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004172:	f040 0004 	orr.w	r0, r0, #4
 8004176:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004178:	0710      	lsls	r0, r2, #28
 800417a:	d507      	bpl.n	800418c <HAL_UART_IRQHandler+0xfc>
 800417c:	f001 0020 	and.w	r0, r1, #32
 8004180:	4328      	orrs	r0, r5
 8004182:	d003      	beq.n	800418c <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004184:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004186:	f040 0008 	orr.w	r0, r0, #8
 800418a:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800418c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800418e:	2800      	cmp	r0, #0
 8004190:	d09a      	beq.n	80040c8 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004192:	0690      	lsls	r0, r2, #26
 8004194:	d509      	bpl.n	80041aa <HAL_UART_IRQHandler+0x11a>
 8004196:	068a      	lsls	r2, r1, #26
 8004198:	d507      	bpl.n	80041aa <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800419a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800419e:	2a22      	cmp	r2, #34	; 0x22
 80041a0:	d103      	bne.n	80041aa <HAL_UART_IRQHandler+0x11a>
 80041a2:	4620      	mov	r0, r4
 80041a4:	f7ff ff18 	bl	8003fd8 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041ac:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041ae:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041b2:	f005 0508 	and.w	r5, r5, #8
 80041b6:	4315      	orrs	r5, r2
 80041b8:	d13c      	bne.n	8004234 <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 80041ba:	4620      	mov	r0, r4
 80041bc:	f7fd ff8e 	bl	80020dc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c0:	6425      	str	r5, [r4, #64]	; 0x40
 80041c2:	e781      	b.n	80040c8 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041c4:	0790      	lsls	r0, r2, #30
 80041c6:	d5d7      	bpl.n	8004178 <HAL_UART_IRQHandler+0xe8>
 80041c8:	2d00      	cmp	r5, #0
 80041ca:	d1d1      	bne.n	8004170 <HAL_UART_IRQHandler+0xe0>
 80041cc:	e7d4      	b.n	8004178 <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041ce:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80041d2:	2b22      	cmp	r3, #34	; 0x22
 80041d4:	f47f af78 	bne.w	80040c8 <HAL_UART_IRQHandler+0x38>
}
 80041d8:	b003      	add	sp, #12
 80041da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041de:	f7ff befb 	b.w	8003fd8 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041e2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80041e6:	2a21      	cmp	r2, #33	; 0x21
 80041e8:	f47f af6e 	bne.w	80040c8 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ec:	68a2      	ldr	r2, [r4, #8]
 80041ee:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80041f2:	d06e      	beq.n	80042d2 <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041f4:	6a22      	ldr	r2, [r4, #32]
 80041f6:	1c51      	adds	r1, r2, #1
 80041f8:	6221      	str	r1, [r4, #32]
 80041fa:	7812      	ldrb	r2, [r2, #0]
 80041fc:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80041fe:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004200:	3a01      	subs	r2, #1
 8004202:	b292      	uxth	r2, r2
 8004204:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004206:	2a00      	cmp	r2, #0
 8004208:	f47f af5e 	bne.w	80040c8 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004212:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800421a:	60da      	str	r2, [r3, #12]
 800421c:	e754      	b.n	80040c8 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 800421e:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004220:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004222:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004228:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800422a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800422e:	f7fd fdcd 	bl	8001dcc <HAL_UART_TxCpltCallback>
    return;
 8004232:	e749      	b.n	80040c8 <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800423a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004244:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004246:	2a01      	cmp	r2, #1
 8004248:	d103      	bne.n	8004252 <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	f022 0210 	bic.w	r2, r2, #16
 8004250:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004254:	2120      	movs	r1, #32
 8004256:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425a:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	0655      	lsls	r5, r2, #25
 8004260:	d512      	bpl.n	8004288 <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004262:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004264:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800426a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800426c:	b160      	cbz	r0, 8004288 <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800426e:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <HAL_UART_IRQHandler+0x258>)
 8004270:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004272:	f7fe ff4d 	bl	8003110 <HAL_DMA_Abort_IT>
 8004276:	2800      	cmp	r0, #0
 8004278:	f43f af26 	beq.w	80040c8 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800427c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800427e:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8004280:	b003      	add	sp, #12
 8004282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004286:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004288:	4620      	mov	r0, r4
 800428a:	f7fd ff27 	bl	80020dc <HAL_UART_ErrorCallback>
 800428e:	e71b      	b.n	80040c8 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004290:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8004292:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004294:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8004296:	b289      	uxth	r1, r1
 8004298:	2900      	cmp	r1, #0
 800429a:	f43f af15 	beq.w	80040c8 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800429e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80042a0:	1a08      	subs	r0, r1, r0
 80042a2:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 80042a4:	2900      	cmp	r1, #0
 80042a6:	f43f af0f 	beq.w	80040c8 <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 80042aa:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ac:	68d8      	ldr	r0, [r3, #12]
 80042ae:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 80042b2:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	6958      	ldr	r0, [r3, #20]
 80042b6:	f020 0001 	bic.w	r0, r0, #1
 80042ba:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80042bc:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c0:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c2:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042c4:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c6:	f022 0210 	bic.w	r2, r2, #16
 80042ca:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042cc:	f7ff fe4a 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
 80042d0:	e6fa      	b.n	80040c8 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d2:	6922      	ldr	r2, [r4, #16]
 80042d4:	2a00      	cmp	r2, #0
 80042d6:	d18d      	bne.n	80041f4 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042d8:	6a22      	ldr	r2, [r4, #32]
 80042da:	f832 1b02 	ldrh.w	r1, [r2], #2
 80042de:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80042e2:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042e4:	6222      	str	r2, [r4, #32]
 80042e6:	e78a      	b.n	80041fe <HAL_UART_IRQHandler+0x16e>
 80042e8:	08003f55 	.word	0x08003f55

080042ec <__errno>:
 80042ec:	4b01      	ldr	r3, [pc, #4]	; (80042f4 <__errno+0x8>)
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000010 	.word	0x20000010

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	2600      	movs	r6, #0
 80042fc:	4d0c      	ldr	r5, [pc, #48]	; (8004330 <__libc_init_array+0x38>)
 80042fe:	4c0d      	ldr	r4, [pc, #52]	; (8004334 <__libc_init_array+0x3c>)
 8004300:	1b64      	subs	r4, r4, r5
 8004302:	10a4      	asrs	r4, r4, #2
 8004304:	42a6      	cmp	r6, r4
 8004306:	d109      	bne.n	800431c <__libc_init_array+0x24>
 8004308:	f002 ff0e 	bl	8007128 <_init>
 800430c:	2600      	movs	r6, #0
 800430e:	4d0a      	ldr	r5, [pc, #40]	; (8004338 <__libc_init_array+0x40>)
 8004310:	4c0a      	ldr	r4, [pc, #40]	; (800433c <__libc_init_array+0x44>)
 8004312:	1b64      	subs	r4, r4, r5
 8004314:	10a4      	asrs	r4, r4, #2
 8004316:	42a6      	cmp	r6, r4
 8004318:	d105      	bne.n	8004326 <__libc_init_array+0x2e>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004320:	4798      	blx	r3
 8004322:	3601      	adds	r6, #1
 8004324:	e7ee      	b.n	8004304 <__libc_init_array+0xc>
 8004326:	f855 3b04 	ldr.w	r3, [r5], #4
 800432a:	4798      	blx	r3
 800432c:	3601      	adds	r6, #1
 800432e:	e7f2      	b.n	8004316 <__libc_init_array+0x1e>
 8004330:	0800757c 	.word	0x0800757c
 8004334:	0800757c 	.word	0x0800757c
 8004338:	0800757c 	.word	0x0800757c
 800433c:	08007580 	.word	0x08007580

08004340 <memset>:
 8004340:	4603      	mov	r3, r0
 8004342:	4402      	add	r2, r0
 8004344:	4293      	cmp	r3, r2
 8004346:	d100      	bne.n	800434a <memset+0xa>
 8004348:	4770      	bx	lr
 800434a:	f803 1b01 	strb.w	r1, [r3], #1
 800434e:	e7f9      	b.n	8004344 <memset+0x4>

08004350 <__cvt>:
 8004350:	2b00      	cmp	r3, #0
 8004352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004356:	461f      	mov	r7, r3
 8004358:	bfbb      	ittet	lt
 800435a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800435e:	461f      	movlt	r7, r3
 8004360:	2300      	movge	r3, #0
 8004362:	232d      	movlt	r3, #45	; 0x2d
 8004364:	b088      	sub	sp, #32
 8004366:	4614      	mov	r4, r2
 8004368:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800436a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800436c:	7013      	strb	r3, [r2, #0]
 800436e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004370:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004374:	f023 0820 	bic.w	r8, r3, #32
 8004378:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800437c:	d005      	beq.n	800438a <__cvt+0x3a>
 800437e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004382:	d100      	bne.n	8004386 <__cvt+0x36>
 8004384:	3501      	adds	r5, #1
 8004386:	2302      	movs	r3, #2
 8004388:	e000      	b.n	800438c <__cvt+0x3c>
 800438a:	2303      	movs	r3, #3
 800438c:	aa07      	add	r2, sp, #28
 800438e:	9204      	str	r2, [sp, #16]
 8004390:	aa06      	add	r2, sp, #24
 8004392:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004396:	e9cd 3500 	strd	r3, r5, [sp]
 800439a:	4622      	mov	r2, r4
 800439c:	463b      	mov	r3, r7
 800439e:	f000 fcf7 	bl	8004d90 <_dtoa_r>
 80043a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043a6:	4606      	mov	r6, r0
 80043a8:	d102      	bne.n	80043b0 <__cvt+0x60>
 80043aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043ac:	07db      	lsls	r3, r3, #31
 80043ae:	d522      	bpl.n	80043f6 <__cvt+0xa6>
 80043b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043b4:	eb06 0905 	add.w	r9, r6, r5
 80043b8:	d110      	bne.n	80043dc <__cvt+0x8c>
 80043ba:	7833      	ldrb	r3, [r6, #0]
 80043bc:	2b30      	cmp	r3, #48	; 0x30
 80043be:	d10a      	bne.n	80043d6 <__cvt+0x86>
 80043c0:	2200      	movs	r2, #0
 80043c2:	2300      	movs	r3, #0
 80043c4:	4620      	mov	r0, r4
 80043c6:	4639      	mov	r1, r7
 80043c8:	f7fc fb06 	bl	80009d8 <__aeabi_dcmpeq>
 80043cc:	b918      	cbnz	r0, 80043d6 <__cvt+0x86>
 80043ce:	f1c5 0501 	rsb	r5, r5, #1
 80043d2:	f8ca 5000 	str.w	r5, [sl]
 80043d6:	f8da 3000 	ldr.w	r3, [sl]
 80043da:	4499      	add	r9, r3
 80043dc:	2200      	movs	r2, #0
 80043de:	2300      	movs	r3, #0
 80043e0:	4620      	mov	r0, r4
 80043e2:	4639      	mov	r1, r7
 80043e4:	f7fc faf8 	bl	80009d8 <__aeabi_dcmpeq>
 80043e8:	b108      	cbz	r0, 80043ee <__cvt+0x9e>
 80043ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80043ee:	2230      	movs	r2, #48	; 0x30
 80043f0:	9b07      	ldr	r3, [sp, #28]
 80043f2:	454b      	cmp	r3, r9
 80043f4:	d307      	bcc.n	8004406 <__cvt+0xb6>
 80043f6:	4630      	mov	r0, r6
 80043f8:	9b07      	ldr	r3, [sp, #28]
 80043fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043fc:	1b9b      	subs	r3, r3, r6
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	b008      	add	sp, #32
 8004402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004406:	1c59      	adds	r1, r3, #1
 8004408:	9107      	str	r1, [sp, #28]
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	e7f0      	b.n	80043f0 <__cvt+0xa0>

0800440e <__exponent>:
 800440e:	4603      	mov	r3, r0
 8004410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004412:	2900      	cmp	r1, #0
 8004414:	f803 2b02 	strb.w	r2, [r3], #2
 8004418:	bfb6      	itet	lt
 800441a:	222d      	movlt	r2, #45	; 0x2d
 800441c:	222b      	movge	r2, #43	; 0x2b
 800441e:	4249      	neglt	r1, r1
 8004420:	2909      	cmp	r1, #9
 8004422:	7042      	strb	r2, [r0, #1]
 8004424:	dd2b      	ble.n	800447e <__exponent+0x70>
 8004426:	f10d 0407 	add.w	r4, sp, #7
 800442a:	46a4      	mov	ip, r4
 800442c:	270a      	movs	r7, #10
 800442e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004432:	460a      	mov	r2, r1
 8004434:	46a6      	mov	lr, r4
 8004436:	fb07 1516 	mls	r5, r7, r6, r1
 800443a:	2a63      	cmp	r2, #99	; 0x63
 800443c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004440:	4631      	mov	r1, r6
 8004442:	f104 34ff 	add.w	r4, r4, #4294967295
 8004446:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800444a:	dcf0      	bgt.n	800442e <__exponent+0x20>
 800444c:	3130      	adds	r1, #48	; 0x30
 800444e:	f1ae 0502 	sub.w	r5, lr, #2
 8004452:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004456:	4629      	mov	r1, r5
 8004458:	1c44      	adds	r4, r0, #1
 800445a:	4561      	cmp	r1, ip
 800445c:	d30a      	bcc.n	8004474 <__exponent+0x66>
 800445e:	f10d 0209 	add.w	r2, sp, #9
 8004462:	eba2 020e 	sub.w	r2, r2, lr
 8004466:	4565      	cmp	r5, ip
 8004468:	bf88      	it	hi
 800446a:	2200      	movhi	r2, #0
 800446c:	4413      	add	r3, r2
 800446e:	1a18      	subs	r0, r3, r0
 8004470:	b003      	add	sp, #12
 8004472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004474:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004478:	f804 2f01 	strb.w	r2, [r4, #1]!
 800447c:	e7ed      	b.n	800445a <__exponent+0x4c>
 800447e:	2330      	movs	r3, #48	; 0x30
 8004480:	3130      	adds	r1, #48	; 0x30
 8004482:	7083      	strb	r3, [r0, #2]
 8004484:	70c1      	strb	r1, [r0, #3]
 8004486:	1d03      	adds	r3, r0, #4
 8004488:	e7f1      	b.n	800446e <__exponent+0x60>
	...

0800448c <_printf_float>:
 800448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004490:	b091      	sub	sp, #68	; 0x44
 8004492:	460c      	mov	r4, r1
 8004494:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004498:	4616      	mov	r6, r2
 800449a:	461f      	mov	r7, r3
 800449c:	4605      	mov	r5, r0
 800449e:	f001 fa65 	bl	800596c <_localeconv_r>
 80044a2:	6803      	ldr	r3, [r0, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	9309      	str	r3, [sp, #36]	; 0x24
 80044a8:	f7fb fe6a 	bl	8000180 <strlen>
 80044ac:	2300      	movs	r3, #0
 80044ae:	930e      	str	r3, [sp, #56]	; 0x38
 80044b0:	f8d8 3000 	ldr.w	r3, [r8]
 80044b4:	900a      	str	r0, [sp, #40]	; 0x28
 80044b6:	3307      	adds	r3, #7
 80044b8:	f023 0307 	bic.w	r3, r3, #7
 80044bc:	f103 0208 	add.w	r2, r3, #8
 80044c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80044c4:	f8d4 b000 	ldr.w	fp, [r4]
 80044c8:	f8c8 2000 	str.w	r2, [r8]
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80044d4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80044d8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80044dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80044de:	f04f 32ff 	mov.w	r2, #4294967295
 80044e2:	4640      	mov	r0, r8
 80044e4:	4b9c      	ldr	r3, [pc, #624]	; (8004758 <_printf_float+0x2cc>)
 80044e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044e8:	f7fc faa8 	bl	8000a3c <__aeabi_dcmpun>
 80044ec:	bb70      	cbnz	r0, 800454c <_printf_float+0xc0>
 80044ee:	f04f 32ff 	mov.w	r2, #4294967295
 80044f2:	4640      	mov	r0, r8
 80044f4:	4b98      	ldr	r3, [pc, #608]	; (8004758 <_printf_float+0x2cc>)
 80044f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044f8:	f7fc fa82 	bl	8000a00 <__aeabi_dcmple>
 80044fc:	bb30      	cbnz	r0, 800454c <_printf_float+0xc0>
 80044fe:	2200      	movs	r2, #0
 8004500:	2300      	movs	r3, #0
 8004502:	4640      	mov	r0, r8
 8004504:	4651      	mov	r1, sl
 8004506:	f7fc fa71 	bl	80009ec <__aeabi_dcmplt>
 800450a:	b110      	cbz	r0, 8004512 <_printf_float+0x86>
 800450c:	232d      	movs	r3, #45	; 0x2d
 800450e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004512:	4b92      	ldr	r3, [pc, #584]	; (800475c <_printf_float+0x2d0>)
 8004514:	4892      	ldr	r0, [pc, #584]	; (8004760 <_printf_float+0x2d4>)
 8004516:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800451a:	bf94      	ite	ls
 800451c:	4698      	movls	r8, r3
 800451e:	4680      	movhi	r8, r0
 8004520:	2303      	movs	r3, #3
 8004522:	f04f 0a00 	mov.w	sl, #0
 8004526:	6123      	str	r3, [r4, #16]
 8004528:	f02b 0304 	bic.w	r3, fp, #4
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	4633      	mov	r3, r6
 8004530:	4621      	mov	r1, r4
 8004532:	4628      	mov	r0, r5
 8004534:	9700      	str	r7, [sp, #0]
 8004536:	aa0f      	add	r2, sp, #60	; 0x3c
 8004538:	f000 f9d4 	bl	80048e4 <_printf_common>
 800453c:	3001      	adds	r0, #1
 800453e:	f040 8090 	bne.w	8004662 <_printf_float+0x1d6>
 8004542:	f04f 30ff 	mov.w	r0, #4294967295
 8004546:	b011      	add	sp, #68	; 0x44
 8004548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454c:	4642      	mov	r2, r8
 800454e:	4653      	mov	r3, sl
 8004550:	4640      	mov	r0, r8
 8004552:	4651      	mov	r1, sl
 8004554:	f7fc fa72 	bl	8000a3c <__aeabi_dcmpun>
 8004558:	b148      	cbz	r0, 800456e <_printf_float+0xe2>
 800455a:	f1ba 0f00 	cmp.w	sl, #0
 800455e:	bfb8      	it	lt
 8004560:	232d      	movlt	r3, #45	; 0x2d
 8004562:	4880      	ldr	r0, [pc, #512]	; (8004764 <_printf_float+0x2d8>)
 8004564:	bfb8      	it	lt
 8004566:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800456a:	4b7f      	ldr	r3, [pc, #508]	; (8004768 <_printf_float+0x2dc>)
 800456c:	e7d3      	b.n	8004516 <_printf_float+0x8a>
 800456e:	6863      	ldr	r3, [r4, #4]
 8004570:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	d142      	bne.n	80045fe <_printf_float+0x172>
 8004578:	2306      	movs	r3, #6
 800457a:	6063      	str	r3, [r4, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	9206      	str	r2, [sp, #24]
 8004580:	aa0e      	add	r2, sp, #56	; 0x38
 8004582:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004586:	aa0d      	add	r2, sp, #52	; 0x34
 8004588:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800458c:	9203      	str	r2, [sp, #12]
 800458e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004592:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	6863      	ldr	r3, [r4, #4]
 800459a:	4642      	mov	r2, r8
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	4628      	mov	r0, r5
 80045a0:	4653      	mov	r3, sl
 80045a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80045a4:	f7ff fed4 	bl	8004350 <__cvt>
 80045a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045aa:	4680      	mov	r8, r0
 80045ac:	2947      	cmp	r1, #71	; 0x47
 80045ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045b0:	d108      	bne.n	80045c4 <_printf_float+0x138>
 80045b2:	1cc8      	adds	r0, r1, #3
 80045b4:	db02      	blt.n	80045bc <_printf_float+0x130>
 80045b6:	6863      	ldr	r3, [r4, #4]
 80045b8:	4299      	cmp	r1, r3
 80045ba:	dd40      	ble.n	800463e <_printf_float+0x1b2>
 80045bc:	f1a9 0902 	sub.w	r9, r9, #2
 80045c0:	fa5f f989 	uxtb.w	r9, r9
 80045c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045c8:	d81f      	bhi.n	800460a <_printf_float+0x17e>
 80045ca:	464a      	mov	r2, r9
 80045cc:	3901      	subs	r1, #1
 80045ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045d2:	910d      	str	r1, [sp, #52]	; 0x34
 80045d4:	f7ff ff1b 	bl	800440e <__exponent>
 80045d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045da:	4682      	mov	sl, r0
 80045dc:	1813      	adds	r3, r2, r0
 80045de:	2a01      	cmp	r2, #1
 80045e0:	6123      	str	r3, [r4, #16]
 80045e2:	dc02      	bgt.n	80045ea <_printf_float+0x15e>
 80045e4:	6822      	ldr	r2, [r4, #0]
 80045e6:	07d2      	lsls	r2, r2, #31
 80045e8:	d501      	bpl.n	80045ee <_printf_float+0x162>
 80045ea:	3301      	adds	r3, #1
 80045ec:	6123      	str	r3, [r4, #16]
 80045ee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d09b      	beq.n	800452e <_printf_float+0xa2>
 80045f6:	232d      	movs	r3, #45	; 0x2d
 80045f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fc:	e797      	b.n	800452e <_printf_float+0xa2>
 80045fe:	2947      	cmp	r1, #71	; 0x47
 8004600:	d1bc      	bne.n	800457c <_printf_float+0xf0>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1ba      	bne.n	800457c <_printf_float+0xf0>
 8004606:	2301      	movs	r3, #1
 8004608:	e7b7      	b.n	800457a <_printf_float+0xee>
 800460a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800460e:	d118      	bne.n	8004642 <_printf_float+0x1b6>
 8004610:	2900      	cmp	r1, #0
 8004612:	6863      	ldr	r3, [r4, #4]
 8004614:	dd0b      	ble.n	800462e <_printf_float+0x1a2>
 8004616:	6121      	str	r1, [r4, #16]
 8004618:	b913      	cbnz	r3, 8004620 <_printf_float+0x194>
 800461a:	6822      	ldr	r2, [r4, #0]
 800461c:	07d0      	lsls	r0, r2, #31
 800461e:	d502      	bpl.n	8004626 <_printf_float+0x19a>
 8004620:	3301      	adds	r3, #1
 8004622:	440b      	add	r3, r1
 8004624:	6123      	str	r3, [r4, #16]
 8004626:	f04f 0a00 	mov.w	sl, #0
 800462a:	65a1      	str	r1, [r4, #88]	; 0x58
 800462c:	e7df      	b.n	80045ee <_printf_float+0x162>
 800462e:	b913      	cbnz	r3, 8004636 <_printf_float+0x1aa>
 8004630:	6822      	ldr	r2, [r4, #0]
 8004632:	07d2      	lsls	r2, r2, #31
 8004634:	d501      	bpl.n	800463a <_printf_float+0x1ae>
 8004636:	3302      	adds	r3, #2
 8004638:	e7f4      	b.n	8004624 <_printf_float+0x198>
 800463a:	2301      	movs	r3, #1
 800463c:	e7f2      	b.n	8004624 <_printf_float+0x198>
 800463e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004644:	4299      	cmp	r1, r3
 8004646:	db05      	blt.n	8004654 <_printf_float+0x1c8>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	6121      	str	r1, [r4, #16]
 800464c:	07d8      	lsls	r0, r3, #31
 800464e:	d5ea      	bpl.n	8004626 <_printf_float+0x19a>
 8004650:	1c4b      	adds	r3, r1, #1
 8004652:	e7e7      	b.n	8004624 <_printf_float+0x198>
 8004654:	2900      	cmp	r1, #0
 8004656:	bfcc      	ite	gt
 8004658:	2201      	movgt	r2, #1
 800465a:	f1c1 0202 	rsble	r2, r1, #2
 800465e:	4413      	add	r3, r2
 8004660:	e7e0      	b.n	8004624 <_printf_float+0x198>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	055a      	lsls	r2, r3, #21
 8004666:	d407      	bmi.n	8004678 <_printf_float+0x1ec>
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	4642      	mov	r2, r8
 800466c:	4631      	mov	r1, r6
 800466e:	4628      	mov	r0, r5
 8004670:	47b8      	blx	r7
 8004672:	3001      	adds	r0, #1
 8004674:	d12b      	bne.n	80046ce <_printf_float+0x242>
 8004676:	e764      	b.n	8004542 <_printf_float+0xb6>
 8004678:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800467c:	f240 80dd 	bls.w	800483a <_printf_float+0x3ae>
 8004680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004684:	2200      	movs	r2, #0
 8004686:	2300      	movs	r3, #0
 8004688:	f7fc f9a6 	bl	80009d8 <__aeabi_dcmpeq>
 800468c:	2800      	cmp	r0, #0
 800468e:	d033      	beq.n	80046f8 <_printf_float+0x26c>
 8004690:	2301      	movs	r3, #1
 8004692:	4631      	mov	r1, r6
 8004694:	4628      	mov	r0, r5
 8004696:	4a35      	ldr	r2, [pc, #212]	; (800476c <_printf_float+0x2e0>)
 8004698:	47b8      	blx	r7
 800469a:	3001      	adds	r0, #1
 800469c:	f43f af51 	beq.w	8004542 <_printf_float+0xb6>
 80046a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046a4:	429a      	cmp	r2, r3
 80046a6:	db02      	blt.n	80046ae <_printf_float+0x222>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	07d8      	lsls	r0, r3, #31
 80046ac:	d50f      	bpl.n	80046ce <_printf_float+0x242>
 80046ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046b2:	4631      	mov	r1, r6
 80046b4:	4628      	mov	r0, r5
 80046b6:	47b8      	blx	r7
 80046b8:	3001      	adds	r0, #1
 80046ba:	f43f af42 	beq.w	8004542 <_printf_float+0xb6>
 80046be:	f04f 0800 	mov.w	r8, #0
 80046c2:	f104 091a 	add.w	r9, r4, #26
 80046c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046c8:	3b01      	subs	r3, #1
 80046ca:	4543      	cmp	r3, r8
 80046cc:	dc09      	bgt.n	80046e2 <_printf_float+0x256>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	079b      	lsls	r3, r3, #30
 80046d2:	f100 8102 	bmi.w	80048da <_printf_float+0x44e>
 80046d6:	68e0      	ldr	r0, [r4, #12]
 80046d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046da:	4298      	cmp	r0, r3
 80046dc:	bfb8      	it	lt
 80046de:	4618      	movlt	r0, r3
 80046e0:	e731      	b.n	8004546 <_printf_float+0xba>
 80046e2:	2301      	movs	r3, #1
 80046e4:	464a      	mov	r2, r9
 80046e6:	4631      	mov	r1, r6
 80046e8:	4628      	mov	r0, r5
 80046ea:	47b8      	blx	r7
 80046ec:	3001      	adds	r0, #1
 80046ee:	f43f af28 	beq.w	8004542 <_printf_float+0xb6>
 80046f2:	f108 0801 	add.w	r8, r8, #1
 80046f6:	e7e6      	b.n	80046c6 <_printf_float+0x23a>
 80046f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	dc38      	bgt.n	8004770 <_printf_float+0x2e4>
 80046fe:	2301      	movs	r3, #1
 8004700:	4631      	mov	r1, r6
 8004702:	4628      	mov	r0, r5
 8004704:	4a19      	ldr	r2, [pc, #100]	; (800476c <_printf_float+0x2e0>)
 8004706:	47b8      	blx	r7
 8004708:	3001      	adds	r0, #1
 800470a:	f43f af1a 	beq.w	8004542 <_printf_float+0xb6>
 800470e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004712:	4313      	orrs	r3, r2
 8004714:	d102      	bne.n	800471c <_printf_float+0x290>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	07d9      	lsls	r1, r3, #31
 800471a:	d5d8      	bpl.n	80046ce <_printf_float+0x242>
 800471c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004720:	4631      	mov	r1, r6
 8004722:	4628      	mov	r0, r5
 8004724:	47b8      	blx	r7
 8004726:	3001      	adds	r0, #1
 8004728:	f43f af0b 	beq.w	8004542 <_printf_float+0xb6>
 800472c:	f04f 0900 	mov.w	r9, #0
 8004730:	f104 0a1a 	add.w	sl, r4, #26
 8004734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004736:	425b      	negs	r3, r3
 8004738:	454b      	cmp	r3, r9
 800473a:	dc01      	bgt.n	8004740 <_printf_float+0x2b4>
 800473c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800473e:	e794      	b.n	800466a <_printf_float+0x1de>
 8004740:	2301      	movs	r3, #1
 8004742:	4652      	mov	r2, sl
 8004744:	4631      	mov	r1, r6
 8004746:	4628      	mov	r0, r5
 8004748:	47b8      	blx	r7
 800474a:	3001      	adds	r0, #1
 800474c:	f43f aef9 	beq.w	8004542 <_printf_float+0xb6>
 8004750:	f109 0901 	add.w	r9, r9, #1
 8004754:	e7ee      	b.n	8004734 <_printf_float+0x2a8>
 8004756:	bf00      	nop
 8004758:	7fefffff 	.word	0x7fefffff
 800475c:	080071a0 	.word	0x080071a0
 8004760:	080071a4 	.word	0x080071a4
 8004764:	080071ac 	.word	0x080071ac
 8004768:	080071a8 	.word	0x080071a8
 800476c:	080071b0 	.word	0x080071b0
 8004770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004772:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004774:	429a      	cmp	r2, r3
 8004776:	bfa8      	it	ge
 8004778:	461a      	movge	r2, r3
 800477a:	2a00      	cmp	r2, #0
 800477c:	4691      	mov	r9, r2
 800477e:	dc37      	bgt.n	80047f0 <_printf_float+0x364>
 8004780:	f04f 0b00 	mov.w	fp, #0
 8004784:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004788:	f104 021a 	add.w	r2, r4, #26
 800478c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004790:	ebaa 0309 	sub.w	r3, sl, r9
 8004794:	455b      	cmp	r3, fp
 8004796:	dc33      	bgt.n	8004800 <_printf_float+0x374>
 8004798:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800479c:	429a      	cmp	r2, r3
 800479e:	db3b      	blt.n	8004818 <_printf_float+0x38c>
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	07da      	lsls	r2, r3, #31
 80047a4:	d438      	bmi.n	8004818 <_printf_float+0x38c>
 80047a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047aa:	eba3 020a 	sub.w	r2, r3, sl
 80047ae:	eba3 0901 	sub.w	r9, r3, r1
 80047b2:	4591      	cmp	r9, r2
 80047b4:	bfa8      	it	ge
 80047b6:	4691      	movge	r9, r2
 80047b8:	f1b9 0f00 	cmp.w	r9, #0
 80047bc:	dc34      	bgt.n	8004828 <_printf_float+0x39c>
 80047be:	f04f 0800 	mov.w	r8, #0
 80047c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047c6:	f104 0a1a 	add.w	sl, r4, #26
 80047ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	eba3 0309 	sub.w	r3, r3, r9
 80047d4:	4543      	cmp	r3, r8
 80047d6:	f77f af7a 	ble.w	80046ce <_printf_float+0x242>
 80047da:	2301      	movs	r3, #1
 80047dc:	4652      	mov	r2, sl
 80047de:	4631      	mov	r1, r6
 80047e0:	4628      	mov	r0, r5
 80047e2:	47b8      	blx	r7
 80047e4:	3001      	adds	r0, #1
 80047e6:	f43f aeac 	beq.w	8004542 <_printf_float+0xb6>
 80047ea:	f108 0801 	add.w	r8, r8, #1
 80047ee:	e7ec      	b.n	80047ca <_printf_float+0x33e>
 80047f0:	4613      	mov	r3, r2
 80047f2:	4631      	mov	r1, r6
 80047f4:	4642      	mov	r2, r8
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	d1c0      	bne.n	8004780 <_printf_float+0x2f4>
 80047fe:	e6a0      	b.n	8004542 <_printf_float+0xb6>
 8004800:	2301      	movs	r3, #1
 8004802:	4631      	mov	r1, r6
 8004804:	4628      	mov	r0, r5
 8004806:	920b      	str	r2, [sp, #44]	; 0x2c
 8004808:	47b8      	blx	r7
 800480a:	3001      	adds	r0, #1
 800480c:	f43f ae99 	beq.w	8004542 <_printf_float+0xb6>
 8004810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004812:	f10b 0b01 	add.w	fp, fp, #1
 8004816:	e7b9      	b.n	800478c <_printf_float+0x300>
 8004818:	4631      	mov	r1, r6
 800481a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800481e:	4628      	mov	r0, r5
 8004820:	47b8      	blx	r7
 8004822:	3001      	adds	r0, #1
 8004824:	d1bf      	bne.n	80047a6 <_printf_float+0x31a>
 8004826:	e68c      	b.n	8004542 <_printf_float+0xb6>
 8004828:	464b      	mov	r3, r9
 800482a:	4631      	mov	r1, r6
 800482c:	4628      	mov	r0, r5
 800482e:	eb08 020a 	add.w	r2, r8, sl
 8004832:	47b8      	blx	r7
 8004834:	3001      	adds	r0, #1
 8004836:	d1c2      	bne.n	80047be <_printf_float+0x332>
 8004838:	e683      	b.n	8004542 <_printf_float+0xb6>
 800483a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800483c:	2a01      	cmp	r2, #1
 800483e:	dc01      	bgt.n	8004844 <_printf_float+0x3b8>
 8004840:	07db      	lsls	r3, r3, #31
 8004842:	d537      	bpl.n	80048b4 <_printf_float+0x428>
 8004844:	2301      	movs	r3, #1
 8004846:	4642      	mov	r2, r8
 8004848:	4631      	mov	r1, r6
 800484a:	4628      	mov	r0, r5
 800484c:	47b8      	blx	r7
 800484e:	3001      	adds	r0, #1
 8004850:	f43f ae77 	beq.w	8004542 <_printf_float+0xb6>
 8004854:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004858:	4631      	mov	r1, r6
 800485a:	4628      	mov	r0, r5
 800485c:	47b8      	blx	r7
 800485e:	3001      	adds	r0, #1
 8004860:	f43f ae6f 	beq.w	8004542 <_printf_float+0xb6>
 8004864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004868:	2200      	movs	r2, #0
 800486a:	2300      	movs	r3, #0
 800486c:	f7fc f8b4 	bl	80009d8 <__aeabi_dcmpeq>
 8004870:	b9d8      	cbnz	r0, 80048aa <_printf_float+0x41e>
 8004872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004874:	f108 0201 	add.w	r2, r8, #1
 8004878:	3b01      	subs	r3, #1
 800487a:	4631      	mov	r1, r6
 800487c:	4628      	mov	r0, r5
 800487e:	47b8      	blx	r7
 8004880:	3001      	adds	r0, #1
 8004882:	d10e      	bne.n	80048a2 <_printf_float+0x416>
 8004884:	e65d      	b.n	8004542 <_printf_float+0xb6>
 8004886:	2301      	movs	r3, #1
 8004888:	464a      	mov	r2, r9
 800488a:	4631      	mov	r1, r6
 800488c:	4628      	mov	r0, r5
 800488e:	47b8      	blx	r7
 8004890:	3001      	adds	r0, #1
 8004892:	f43f ae56 	beq.w	8004542 <_printf_float+0xb6>
 8004896:	f108 0801 	add.w	r8, r8, #1
 800489a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800489c:	3b01      	subs	r3, #1
 800489e:	4543      	cmp	r3, r8
 80048a0:	dcf1      	bgt.n	8004886 <_printf_float+0x3fa>
 80048a2:	4653      	mov	r3, sl
 80048a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048a8:	e6e0      	b.n	800466c <_printf_float+0x1e0>
 80048aa:	f04f 0800 	mov.w	r8, #0
 80048ae:	f104 091a 	add.w	r9, r4, #26
 80048b2:	e7f2      	b.n	800489a <_printf_float+0x40e>
 80048b4:	2301      	movs	r3, #1
 80048b6:	4642      	mov	r2, r8
 80048b8:	e7df      	b.n	800487a <_printf_float+0x3ee>
 80048ba:	2301      	movs	r3, #1
 80048bc:	464a      	mov	r2, r9
 80048be:	4631      	mov	r1, r6
 80048c0:	4628      	mov	r0, r5
 80048c2:	47b8      	blx	r7
 80048c4:	3001      	adds	r0, #1
 80048c6:	f43f ae3c 	beq.w	8004542 <_printf_float+0xb6>
 80048ca:	f108 0801 	add.w	r8, r8, #1
 80048ce:	68e3      	ldr	r3, [r4, #12]
 80048d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80048d2:	1a5b      	subs	r3, r3, r1
 80048d4:	4543      	cmp	r3, r8
 80048d6:	dcf0      	bgt.n	80048ba <_printf_float+0x42e>
 80048d8:	e6fd      	b.n	80046d6 <_printf_float+0x24a>
 80048da:	f04f 0800 	mov.w	r8, #0
 80048de:	f104 0919 	add.w	r9, r4, #25
 80048e2:	e7f4      	b.n	80048ce <_printf_float+0x442>

080048e4 <_printf_common>:
 80048e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e8:	4616      	mov	r6, r2
 80048ea:	4699      	mov	r9, r3
 80048ec:	688a      	ldr	r2, [r1, #8]
 80048ee:	690b      	ldr	r3, [r1, #16]
 80048f0:	4607      	mov	r7, r0
 80048f2:	4293      	cmp	r3, r2
 80048f4:	bfb8      	it	lt
 80048f6:	4613      	movlt	r3, r2
 80048f8:	6033      	str	r3, [r6, #0]
 80048fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048fe:	460c      	mov	r4, r1
 8004900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004904:	b10a      	cbz	r2, 800490a <_printf_common+0x26>
 8004906:	3301      	adds	r3, #1
 8004908:	6033      	str	r3, [r6, #0]
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	0699      	lsls	r1, r3, #26
 800490e:	bf42      	ittt	mi
 8004910:	6833      	ldrmi	r3, [r6, #0]
 8004912:	3302      	addmi	r3, #2
 8004914:	6033      	strmi	r3, [r6, #0]
 8004916:	6825      	ldr	r5, [r4, #0]
 8004918:	f015 0506 	ands.w	r5, r5, #6
 800491c:	d106      	bne.n	800492c <_printf_common+0x48>
 800491e:	f104 0a19 	add.w	sl, r4, #25
 8004922:	68e3      	ldr	r3, [r4, #12]
 8004924:	6832      	ldr	r2, [r6, #0]
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	42ab      	cmp	r3, r5
 800492a:	dc28      	bgt.n	800497e <_printf_common+0x9a>
 800492c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004930:	1e13      	subs	r3, r2, #0
 8004932:	6822      	ldr	r2, [r4, #0]
 8004934:	bf18      	it	ne
 8004936:	2301      	movne	r3, #1
 8004938:	0692      	lsls	r2, r2, #26
 800493a:	d42d      	bmi.n	8004998 <_printf_common+0xb4>
 800493c:	4649      	mov	r1, r9
 800493e:	4638      	mov	r0, r7
 8004940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004944:	47c0      	blx	r8
 8004946:	3001      	adds	r0, #1
 8004948:	d020      	beq.n	800498c <_printf_common+0xa8>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	68e5      	ldr	r5, [r4, #12]
 800494e:	f003 0306 	and.w	r3, r3, #6
 8004952:	2b04      	cmp	r3, #4
 8004954:	bf18      	it	ne
 8004956:	2500      	movne	r5, #0
 8004958:	6832      	ldr	r2, [r6, #0]
 800495a:	f04f 0600 	mov.w	r6, #0
 800495e:	68a3      	ldr	r3, [r4, #8]
 8004960:	bf08      	it	eq
 8004962:	1aad      	subeq	r5, r5, r2
 8004964:	6922      	ldr	r2, [r4, #16]
 8004966:	bf08      	it	eq
 8004968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800496c:	4293      	cmp	r3, r2
 800496e:	bfc4      	itt	gt
 8004970:	1a9b      	subgt	r3, r3, r2
 8004972:	18ed      	addgt	r5, r5, r3
 8004974:	341a      	adds	r4, #26
 8004976:	42b5      	cmp	r5, r6
 8004978:	d11a      	bne.n	80049b0 <_printf_common+0xcc>
 800497a:	2000      	movs	r0, #0
 800497c:	e008      	b.n	8004990 <_printf_common+0xac>
 800497e:	2301      	movs	r3, #1
 8004980:	4652      	mov	r2, sl
 8004982:	4649      	mov	r1, r9
 8004984:	4638      	mov	r0, r7
 8004986:	47c0      	blx	r8
 8004988:	3001      	adds	r0, #1
 800498a:	d103      	bne.n	8004994 <_printf_common+0xb0>
 800498c:	f04f 30ff 	mov.w	r0, #4294967295
 8004990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004994:	3501      	adds	r5, #1
 8004996:	e7c4      	b.n	8004922 <_printf_common+0x3e>
 8004998:	2030      	movs	r0, #48	; 0x30
 800499a:	18e1      	adds	r1, r4, r3
 800499c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049a6:	4422      	add	r2, r4
 80049a8:	3302      	adds	r3, #2
 80049aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049ae:	e7c5      	b.n	800493c <_printf_common+0x58>
 80049b0:	2301      	movs	r3, #1
 80049b2:	4622      	mov	r2, r4
 80049b4:	4649      	mov	r1, r9
 80049b6:	4638      	mov	r0, r7
 80049b8:	47c0      	blx	r8
 80049ba:	3001      	adds	r0, #1
 80049bc:	d0e6      	beq.n	800498c <_printf_common+0xa8>
 80049be:	3601      	adds	r6, #1
 80049c0:	e7d9      	b.n	8004976 <_printf_common+0x92>
	...

080049c4 <_printf_i>:
 80049c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049c8:	7e0f      	ldrb	r7, [r1, #24]
 80049ca:	4691      	mov	r9, r2
 80049cc:	2f78      	cmp	r7, #120	; 0x78
 80049ce:	4680      	mov	r8, r0
 80049d0:	460c      	mov	r4, r1
 80049d2:	469a      	mov	sl, r3
 80049d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049da:	d807      	bhi.n	80049ec <_printf_i+0x28>
 80049dc:	2f62      	cmp	r7, #98	; 0x62
 80049de:	d80a      	bhi.n	80049f6 <_printf_i+0x32>
 80049e0:	2f00      	cmp	r7, #0
 80049e2:	f000 80d9 	beq.w	8004b98 <_printf_i+0x1d4>
 80049e6:	2f58      	cmp	r7, #88	; 0x58
 80049e8:	f000 80a4 	beq.w	8004b34 <_printf_i+0x170>
 80049ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049f4:	e03a      	b.n	8004a6c <_printf_i+0xa8>
 80049f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049fa:	2b15      	cmp	r3, #21
 80049fc:	d8f6      	bhi.n	80049ec <_printf_i+0x28>
 80049fe:	a101      	add	r1, pc, #4	; (adr r1, 8004a04 <_printf_i+0x40>)
 8004a00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a04:	08004a5d 	.word	0x08004a5d
 8004a08:	08004a71 	.word	0x08004a71
 8004a0c:	080049ed 	.word	0x080049ed
 8004a10:	080049ed 	.word	0x080049ed
 8004a14:	080049ed 	.word	0x080049ed
 8004a18:	080049ed 	.word	0x080049ed
 8004a1c:	08004a71 	.word	0x08004a71
 8004a20:	080049ed 	.word	0x080049ed
 8004a24:	080049ed 	.word	0x080049ed
 8004a28:	080049ed 	.word	0x080049ed
 8004a2c:	080049ed 	.word	0x080049ed
 8004a30:	08004b7f 	.word	0x08004b7f
 8004a34:	08004aa1 	.word	0x08004aa1
 8004a38:	08004b61 	.word	0x08004b61
 8004a3c:	080049ed 	.word	0x080049ed
 8004a40:	080049ed 	.word	0x080049ed
 8004a44:	08004ba1 	.word	0x08004ba1
 8004a48:	080049ed 	.word	0x080049ed
 8004a4c:	08004aa1 	.word	0x08004aa1
 8004a50:	080049ed 	.word	0x080049ed
 8004a54:	080049ed 	.word	0x080049ed
 8004a58:	08004b69 	.word	0x08004b69
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	1d1a      	adds	r2, r3, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	602a      	str	r2, [r5, #0]
 8004a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0a4      	b.n	8004bba <_printf_i+0x1f6>
 8004a70:	6820      	ldr	r0, [r4, #0]
 8004a72:	6829      	ldr	r1, [r5, #0]
 8004a74:	0606      	lsls	r6, r0, #24
 8004a76:	f101 0304 	add.w	r3, r1, #4
 8004a7a:	d50a      	bpl.n	8004a92 <_printf_i+0xce>
 8004a7c:	680e      	ldr	r6, [r1, #0]
 8004a7e:	602b      	str	r3, [r5, #0]
 8004a80:	2e00      	cmp	r6, #0
 8004a82:	da03      	bge.n	8004a8c <_printf_i+0xc8>
 8004a84:	232d      	movs	r3, #45	; 0x2d
 8004a86:	4276      	negs	r6, r6
 8004a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a8c:	230a      	movs	r3, #10
 8004a8e:	485e      	ldr	r0, [pc, #376]	; (8004c08 <_printf_i+0x244>)
 8004a90:	e019      	b.n	8004ac6 <_printf_i+0x102>
 8004a92:	680e      	ldr	r6, [r1, #0]
 8004a94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a98:	602b      	str	r3, [r5, #0]
 8004a9a:	bf18      	it	ne
 8004a9c:	b236      	sxthne	r6, r6
 8004a9e:	e7ef      	b.n	8004a80 <_printf_i+0xbc>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	6820      	ldr	r0, [r4, #0]
 8004aa4:	1d19      	adds	r1, r3, #4
 8004aa6:	6029      	str	r1, [r5, #0]
 8004aa8:	0601      	lsls	r1, r0, #24
 8004aaa:	d501      	bpl.n	8004ab0 <_printf_i+0xec>
 8004aac:	681e      	ldr	r6, [r3, #0]
 8004aae:	e002      	b.n	8004ab6 <_printf_i+0xf2>
 8004ab0:	0646      	lsls	r6, r0, #25
 8004ab2:	d5fb      	bpl.n	8004aac <_printf_i+0xe8>
 8004ab4:	881e      	ldrh	r6, [r3, #0]
 8004ab6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ab8:	bf0c      	ite	eq
 8004aba:	2308      	moveq	r3, #8
 8004abc:	230a      	movne	r3, #10
 8004abe:	4852      	ldr	r0, [pc, #328]	; (8004c08 <_printf_i+0x244>)
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ac6:	6865      	ldr	r5, [r4, #4]
 8004ac8:	2d00      	cmp	r5, #0
 8004aca:	bfa8      	it	ge
 8004acc:	6821      	ldrge	r1, [r4, #0]
 8004ace:	60a5      	str	r5, [r4, #8]
 8004ad0:	bfa4      	itt	ge
 8004ad2:	f021 0104 	bicge.w	r1, r1, #4
 8004ad6:	6021      	strge	r1, [r4, #0]
 8004ad8:	b90e      	cbnz	r6, 8004ade <_printf_i+0x11a>
 8004ada:	2d00      	cmp	r5, #0
 8004adc:	d04d      	beq.n	8004b7a <_printf_i+0x1b6>
 8004ade:	4615      	mov	r5, r2
 8004ae0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ae4:	fb03 6711 	mls	r7, r3, r1, r6
 8004ae8:	5dc7      	ldrb	r7, [r0, r7]
 8004aea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004aee:	4637      	mov	r7, r6
 8004af0:	42bb      	cmp	r3, r7
 8004af2:	460e      	mov	r6, r1
 8004af4:	d9f4      	bls.n	8004ae0 <_printf_i+0x11c>
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d10b      	bne.n	8004b12 <_printf_i+0x14e>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	07de      	lsls	r6, r3, #31
 8004afe:	d508      	bpl.n	8004b12 <_printf_i+0x14e>
 8004b00:	6923      	ldr	r3, [r4, #16]
 8004b02:	6861      	ldr	r1, [r4, #4]
 8004b04:	4299      	cmp	r1, r3
 8004b06:	bfde      	ittt	le
 8004b08:	2330      	movle	r3, #48	; 0x30
 8004b0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b12:	1b52      	subs	r2, r2, r5
 8004b14:	6122      	str	r2, [r4, #16]
 8004b16:	464b      	mov	r3, r9
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	f8cd a000 	str.w	sl, [sp]
 8004b20:	aa03      	add	r2, sp, #12
 8004b22:	f7ff fedf 	bl	80048e4 <_printf_common>
 8004b26:	3001      	adds	r0, #1
 8004b28:	d14c      	bne.n	8004bc4 <_printf_i+0x200>
 8004b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2e:	b004      	add	sp, #16
 8004b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b34:	4834      	ldr	r0, [pc, #208]	; (8004c08 <_printf_i+0x244>)
 8004b36:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b3a:	6829      	ldr	r1, [r5, #0]
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b42:	6029      	str	r1, [r5, #0]
 8004b44:	061d      	lsls	r5, r3, #24
 8004b46:	d514      	bpl.n	8004b72 <_printf_i+0x1ae>
 8004b48:	07df      	lsls	r7, r3, #31
 8004b4a:	bf44      	itt	mi
 8004b4c:	f043 0320 	orrmi.w	r3, r3, #32
 8004b50:	6023      	strmi	r3, [r4, #0]
 8004b52:	b91e      	cbnz	r6, 8004b5c <_printf_i+0x198>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	f023 0320 	bic.w	r3, r3, #32
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	2310      	movs	r3, #16
 8004b5e:	e7af      	b.n	8004ac0 <_printf_i+0xfc>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	f043 0320 	orr.w	r3, r3, #32
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	2378      	movs	r3, #120	; 0x78
 8004b6a:	4828      	ldr	r0, [pc, #160]	; (8004c0c <_printf_i+0x248>)
 8004b6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b70:	e7e3      	b.n	8004b3a <_printf_i+0x176>
 8004b72:	0659      	lsls	r1, r3, #25
 8004b74:	bf48      	it	mi
 8004b76:	b2b6      	uxthmi	r6, r6
 8004b78:	e7e6      	b.n	8004b48 <_printf_i+0x184>
 8004b7a:	4615      	mov	r5, r2
 8004b7c:	e7bb      	b.n	8004af6 <_printf_i+0x132>
 8004b7e:	682b      	ldr	r3, [r5, #0]
 8004b80:	6826      	ldr	r6, [r4, #0]
 8004b82:	1d18      	adds	r0, r3, #4
 8004b84:	6961      	ldr	r1, [r4, #20]
 8004b86:	6028      	str	r0, [r5, #0]
 8004b88:	0635      	lsls	r5, r6, #24
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	d501      	bpl.n	8004b92 <_printf_i+0x1ce>
 8004b8e:	6019      	str	r1, [r3, #0]
 8004b90:	e002      	b.n	8004b98 <_printf_i+0x1d4>
 8004b92:	0670      	lsls	r0, r6, #25
 8004b94:	d5fb      	bpl.n	8004b8e <_printf_i+0x1ca>
 8004b96:	8019      	strh	r1, [r3, #0]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4615      	mov	r5, r2
 8004b9c:	6123      	str	r3, [r4, #16]
 8004b9e:	e7ba      	b.n	8004b16 <_printf_i+0x152>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	1d1a      	adds	r2, r3, #4
 8004ba6:	602a      	str	r2, [r5, #0]
 8004ba8:	681d      	ldr	r5, [r3, #0]
 8004baa:	6862      	ldr	r2, [r4, #4]
 8004bac:	4628      	mov	r0, r5
 8004bae:	f000 fee9 	bl	8005984 <memchr>
 8004bb2:	b108      	cbz	r0, 8004bb8 <_printf_i+0x1f4>
 8004bb4:	1b40      	subs	r0, r0, r5
 8004bb6:	6060      	str	r0, [r4, #4]
 8004bb8:	6863      	ldr	r3, [r4, #4]
 8004bba:	6123      	str	r3, [r4, #16]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bc2:	e7a8      	b.n	8004b16 <_printf_i+0x152>
 8004bc4:	462a      	mov	r2, r5
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	4640      	mov	r0, r8
 8004bca:	6923      	ldr	r3, [r4, #16]
 8004bcc:	47d0      	blx	sl
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d0ab      	beq.n	8004b2a <_printf_i+0x166>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	079b      	lsls	r3, r3, #30
 8004bd6:	d413      	bmi.n	8004c00 <_printf_i+0x23c>
 8004bd8:	68e0      	ldr	r0, [r4, #12]
 8004bda:	9b03      	ldr	r3, [sp, #12]
 8004bdc:	4298      	cmp	r0, r3
 8004bde:	bfb8      	it	lt
 8004be0:	4618      	movlt	r0, r3
 8004be2:	e7a4      	b.n	8004b2e <_printf_i+0x16a>
 8004be4:	2301      	movs	r3, #1
 8004be6:	4632      	mov	r2, r6
 8004be8:	4649      	mov	r1, r9
 8004bea:	4640      	mov	r0, r8
 8004bec:	47d0      	blx	sl
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d09b      	beq.n	8004b2a <_printf_i+0x166>
 8004bf2:	3501      	adds	r5, #1
 8004bf4:	68e3      	ldr	r3, [r4, #12]
 8004bf6:	9903      	ldr	r1, [sp, #12]
 8004bf8:	1a5b      	subs	r3, r3, r1
 8004bfa:	42ab      	cmp	r3, r5
 8004bfc:	dcf2      	bgt.n	8004be4 <_printf_i+0x220>
 8004bfe:	e7eb      	b.n	8004bd8 <_printf_i+0x214>
 8004c00:	2500      	movs	r5, #0
 8004c02:	f104 0619 	add.w	r6, r4, #25
 8004c06:	e7f5      	b.n	8004bf4 <_printf_i+0x230>
 8004c08:	080071b2 	.word	0x080071b2
 8004c0c:	080071c3 	.word	0x080071c3

08004c10 <sniprintf>:
 8004c10:	b40c      	push	{r2, r3}
 8004c12:	b530      	push	{r4, r5, lr}
 8004c14:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <sniprintf+0x64>)
 8004c16:	1e0c      	subs	r4, r1, #0
 8004c18:	681d      	ldr	r5, [r3, #0]
 8004c1a:	b09d      	sub	sp, #116	; 0x74
 8004c1c:	da08      	bge.n	8004c30 <sniprintf+0x20>
 8004c1e:	238b      	movs	r3, #139	; 0x8b
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	602b      	str	r3, [r5, #0]
 8004c26:	b01d      	add	sp, #116	; 0x74
 8004c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c2c:	b002      	add	sp, #8
 8004c2e:	4770      	bx	lr
 8004c30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004c34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c38:	bf0c      	ite	eq
 8004c3a:	4623      	moveq	r3, r4
 8004c3c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c40:	9304      	str	r3, [sp, #16]
 8004c42:	9307      	str	r3, [sp, #28]
 8004c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c48:	9002      	str	r0, [sp, #8]
 8004c4a:	9006      	str	r0, [sp, #24]
 8004c4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c50:	4628      	mov	r0, r5
 8004c52:	ab21      	add	r3, sp, #132	; 0x84
 8004c54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c56:	a902      	add	r1, sp, #8
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	f001 fb7d 	bl	8006358 <_svfiprintf_r>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	bfbc      	itt	lt
 8004c62:	238b      	movlt	r3, #139	; 0x8b
 8004c64:	602b      	strlt	r3, [r5, #0]
 8004c66:	2c00      	cmp	r4, #0
 8004c68:	d0dd      	beq.n	8004c26 <sniprintf+0x16>
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	9b02      	ldr	r3, [sp, #8]
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e7d9      	b.n	8004c26 <sniprintf+0x16>
 8004c72:	bf00      	nop
 8004c74:	20000010 	.word	0x20000010

08004c78 <quorem>:
 8004c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	6903      	ldr	r3, [r0, #16]
 8004c7e:	690c      	ldr	r4, [r1, #16]
 8004c80:	4607      	mov	r7, r0
 8004c82:	42a3      	cmp	r3, r4
 8004c84:	f2c0 8082 	blt.w	8004d8c <quorem+0x114>
 8004c88:	3c01      	subs	r4, #1
 8004c8a:	f100 0514 	add.w	r5, r0, #20
 8004c8e:	f101 0814 	add.w	r8, r1, #20
 8004c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c96:	9301      	str	r3, [sp, #4]
 8004c98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ca8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004cac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004cb0:	d331      	bcc.n	8004d16 <quorem+0x9e>
 8004cb2:	f04f 0e00 	mov.w	lr, #0
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	46ac      	mov	ip, r5
 8004cba:	46f2      	mov	sl, lr
 8004cbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8004cc0:	b293      	uxth	r3, r2
 8004cc2:	fb06 e303 	mla	r3, r6, r3, lr
 8004cc6:	0c12      	lsrs	r2, r2, #16
 8004cc8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	fb06 e202 	mla	r2, r6, r2, lr
 8004cd2:	ebaa 0303 	sub.w	r3, sl, r3
 8004cd6:	f8dc a000 	ldr.w	sl, [ip]
 8004cda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004cde:	fa1f fa8a 	uxth.w	sl, sl
 8004ce2:	4453      	add	r3, sl
 8004ce4:	f8dc a000 	ldr.w	sl, [ip]
 8004ce8:	b292      	uxth	r2, r2
 8004cea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004cee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cf8:	4581      	cmp	r9, r0
 8004cfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004cfe:	f84c 3b04 	str.w	r3, [ip], #4
 8004d02:	d2db      	bcs.n	8004cbc <quorem+0x44>
 8004d04:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d08:	b92b      	cbnz	r3, 8004d16 <quorem+0x9e>
 8004d0a:	9b01      	ldr	r3, [sp, #4]
 8004d0c:	3b04      	subs	r3, #4
 8004d0e:	429d      	cmp	r5, r3
 8004d10:	461a      	mov	r2, r3
 8004d12:	d32f      	bcc.n	8004d74 <quorem+0xfc>
 8004d14:	613c      	str	r4, [r7, #16]
 8004d16:	4638      	mov	r0, r7
 8004d18:	f001 f8ce 	bl	8005eb8 <__mcmp>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	db25      	blt.n	8004d6c <quorem+0xf4>
 8004d20:	4628      	mov	r0, r5
 8004d22:	f04f 0c00 	mov.w	ip, #0
 8004d26:	3601      	adds	r6, #1
 8004d28:	f858 1b04 	ldr.w	r1, [r8], #4
 8004d2c:	f8d0 e000 	ldr.w	lr, [r0]
 8004d30:	b28b      	uxth	r3, r1
 8004d32:	ebac 0303 	sub.w	r3, ip, r3
 8004d36:	fa1f f28e 	uxth.w	r2, lr
 8004d3a:	4413      	add	r3, r2
 8004d3c:	0c0a      	lsrs	r2, r1, #16
 8004d3e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d4c:	45c1      	cmp	r9, r8
 8004d4e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d52:	f840 3b04 	str.w	r3, [r0], #4
 8004d56:	d2e7      	bcs.n	8004d28 <quorem+0xb0>
 8004d58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d60:	b922      	cbnz	r2, 8004d6c <quorem+0xf4>
 8004d62:	3b04      	subs	r3, #4
 8004d64:	429d      	cmp	r5, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	d30a      	bcc.n	8004d80 <quorem+0x108>
 8004d6a:	613c      	str	r4, [r7, #16]
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	b003      	add	sp, #12
 8004d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	3b04      	subs	r3, #4
 8004d78:	2a00      	cmp	r2, #0
 8004d7a:	d1cb      	bne.n	8004d14 <quorem+0x9c>
 8004d7c:	3c01      	subs	r4, #1
 8004d7e:	e7c6      	b.n	8004d0e <quorem+0x96>
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	3b04      	subs	r3, #4
 8004d84:	2a00      	cmp	r2, #0
 8004d86:	d1f0      	bne.n	8004d6a <quorem+0xf2>
 8004d88:	3c01      	subs	r4, #1
 8004d8a:	e7eb      	b.n	8004d64 <quorem+0xec>
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	e7ee      	b.n	8004d6e <quorem+0xf6>

08004d90 <_dtoa_r>:
 8004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	4616      	mov	r6, r2
 8004d96:	461f      	mov	r7, r3
 8004d98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004d9a:	b099      	sub	sp, #100	; 0x64
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004da2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004da6:	b974      	cbnz	r4, 8004dc6 <_dtoa_r+0x36>
 8004da8:	2010      	movs	r0, #16
 8004daa:	f000 fde3 	bl	8005974 <malloc>
 8004dae:	4602      	mov	r2, r0
 8004db0:	6268      	str	r0, [r5, #36]	; 0x24
 8004db2:	b920      	cbnz	r0, 8004dbe <_dtoa_r+0x2e>
 8004db4:	21ea      	movs	r1, #234	; 0xea
 8004db6:	4ba8      	ldr	r3, [pc, #672]	; (8005058 <_dtoa_r+0x2c8>)
 8004db8:	48a8      	ldr	r0, [pc, #672]	; (800505c <_dtoa_r+0x2cc>)
 8004dba:	f001 fbdd 	bl	8006578 <__assert_func>
 8004dbe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004dc2:	6004      	str	r4, [r0, #0]
 8004dc4:	60c4      	str	r4, [r0, #12]
 8004dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	b151      	cbz	r1, 8004de2 <_dtoa_r+0x52>
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	2301      	movs	r3, #1
 8004dd0:	4093      	lsls	r3, r2
 8004dd2:	604a      	str	r2, [r1, #4]
 8004dd4:	608b      	str	r3, [r1, #8]
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f000 fe30 	bl	8005a3c <_Bfree>
 8004ddc:	2200      	movs	r2, #0
 8004dde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	1e3b      	subs	r3, r7, #0
 8004de4:	bfaf      	iteee	ge
 8004de6:	2300      	movge	r3, #0
 8004de8:	2201      	movlt	r2, #1
 8004dea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004dee:	9305      	strlt	r3, [sp, #20]
 8004df0:	bfa8      	it	ge
 8004df2:	f8c8 3000 	strge.w	r3, [r8]
 8004df6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004dfa:	4b99      	ldr	r3, [pc, #612]	; (8005060 <_dtoa_r+0x2d0>)
 8004dfc:	bfb8      	it	lt
 8004dfe:	f8c8 2000 	strlt.w	r2, [r8]
 8004e02:	ea33 0309 	bics.w	r3, r3, r9
 8004e06:	d119      	bne.n	8004e3c <_dtoa_r+0xac>
 8004e08:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e14:	4333      	orrs	r3, r6
 8004e16:	f000 857f 	beq.w	8005918 <_dtoa_r+0xb88>
 8004e1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e1c:	b953      	cbnz	r3, 8004e34 <_dtoa_r+0xa4>
 8004e1e:	4b91      	ldr	r3, [pc, #580]	; (8005064 <_dtoa_r+0x2d4>)
 8004e20:	e022      	b.n	8004e68 <_dtoa_r+0xd8>
 8004e22:	4b91      	ldr	r3, [pc, #580]	; (8005068 <_dtoa_r+0x2d8>)
 8004e24:	9303      	str	r3, [sp, #12]
 8004e26:	3308      	adds	r3, #8
 8004e28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	9803      	ldr	r0, [sp, #12]
 8004e2e:	b019      	add	sp, #100	; 0x64
 8004e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e34:	4b8b      	ldr	r3, [pc, #556]	; (8005064 <_dtoa_r+0x2d4>)
 8004e36:	9303      	str	r3, [sp, #12]
 8004e38:	3303      	adds	r3, #3
 8004e3a:	e7f5      	b.n	8004e28 <_dtoa_r+0x98>
 8004e3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004e44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f7fb fdc4 	bl	80009d8 <__aeabi_dcmpeq>
 8004e50:	4680      	mov	r8, r0
 8004e52:	b158      	cbz	r0, 8004e6c <_dtoa_r+0xdc>
 8004e54:	2301      	movs	r3, #1
 8004e56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8558 	beq.w	8005912 <_dtoa_r+0xb82>
 8004e62:	4882      	ldr	r0, [pc, #520]	; (800506c <_dtoa_r+0x2dc>)
 8004e64:	6018      	str	r0, [r3, #0]
 8004e66:	1e43      	subs	r3, r0, #1
 8004e68:	9303      	str	r3, [sp, #12]
 8004e6a:	e7df      	b.n	8004e2c <_dtoa_r+0x9c>
 8004e6c:	ab16      	add	r3, sp, #88	; 0x58
 8004e6e:	9301      	str	r3, [sp, #4]
 8004e70:	ab17      	add	r3, sp, #92	; 0x5c
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	4628      	mov	r0, r5
 8004e76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e7a:	f001 f8c5 	bl	8006008 <__d2b>
 8004e7e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e82:	4683      	mov	fp, r0
 8004e84:	2c00      	cmp	r4, #0
 8004e86:	d07f      	beq.n	8004f88 <_dtoa_r+0x1f8>
 8004e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e8e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004e9a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004e9e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	4b72      	ldr	r3, [pc, #456]	; (8005070 <_dtoa_r+0x2e0>)
 8004ea6:	f7fb f977 	bl	8000198 <__aeabi_dsub>
 8004eaa:	a365      	add	r3, pc, #404	; (adr r3, 8005040 <_dtoa_r+0x2b0>)
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	f7fb fb2a 	bl	8000508 <__aeabi_dmul>
 8004eb4:	a364      	add	r3, pc, #400	; (adr r3, 8005048 <_dtoa_r+0x2b8>)
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	f7fb f96f 	bl	800019c <__adddf3>
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	460f      	mov	r7, r1
 8004ec4:	f7fb fab6 	bl	8000434 <__aeabi_i2d>
 8004ec8:	a361      	add	r3, pc, #388	; (adr r3, 8005050 <_dtoa_r+0x2c0>)
 8004eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ece:	f7fb fb1b 	bl	8000508 <__aeabi_dmul>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	4639      	mov	r1, r7
 8004eda:	f7fb f95f 	bl	800019c <__adddf3>
 8004ede:	4606      	mov	r6, r0
 8004ee0:	460f      	mov	r7, r1
 8004ee2:	f7fb fdc1 	bl	8000a68 <__aeabi_d2iz>
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	4682      	mov	sl, r0
 8004eea:	2300      	movs	r3, #0
 8004eec:	4630      	mov	r0, r6
 8004eee:	4639      	mov	r1, r7
 8004ef0:	f7fb fd7c 	bl	80009ec <__aeabi_dcmplt>
 8004ef4:	b148      	cbz	r0, 8004f0a <_dtoa_r+0x17a>
 8004ef6:	4650      	mov	r0, sl
 8004ef8:	f7fb fa9c 	bl	8000434 <__aeabi_i2d>
 8004efc:	4632      	mov	r2, r6
 8004efe:	463b      	mov	r3, r7
 8004f00:	f7fb fd6a 	bl	80009d8 <__aeabi_dcmpeq>
 8004f04:	b908      	cbnz	r0, 8004f0a <_dtoa_r+0x17a>
 8004f06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f0a:	f1ba 0f16 	cmp.w	sl, #22
 8004f0e:	d858      	bhi.n	8004fc2 <_dtoa_r+0x232>
 8004f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f14:	4b57      	ldr	r3, [pc, #348]	; (8005074 <_dtoa_r+0x2e4>)
 8004f16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb fd65 	bl	80009ec <__aeabi_dcmplt>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d04f      	beq.n	8004fc6 <_dtoa_r+0x236>
 8004f26:	2300      	movs	r3, #0
 8004f28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f30:	1b1c      	subs	r4, r3, r4
 8004f32:	1e63      	subs	r3, r4, #1
 8004f34:	9309      	str	r3, [sp, #36]	; 0x24
 8004f36:	bf49      	itett	mi
 8004f38:	f1c4 0301 	rsbmi	r3, r4, #1
 8004f3c:	2300      	movpl	r3, #0
 8004f3e:	9306      	strmi	r3, [sp, #24]
 8004f40:	2300      	movmi	r3, #0
 8004f42:	bf54      	ite	pl
 8004f44:	9306      	strpl	r3, [sp, #24]
 8004f46:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004f48:	f1ba 0f00 	cmp.w	sl, #0
 8004f4c:	db3d      	blt.n	8004fca <_dtoa_r+0x23a>
 8004f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f50:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004f54:	4453      	add	r3, sl
 8004f56:	9309      	str	r3, [sp, #36]	; 0x24
 8004f58:	2300      	movs	r3, #0
 8004f5a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f5e:	2b09      	cmp	r3, #9
 8004f60:	f200 808c 	bhi.w	800507c <_dtoa_r+0x2ec>
 8004f64:	2b05      	cmp	r3, #5
 8004f66:	bfc4      	itt	gt
 8004f68:	3b04      	subgt	r3, #4
 8004f6a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004f6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f6e:	bfc8      	it	gt
 8004f70:	2400      	movgt	r4, #0
 8004f72:	f1a3 0302 	sub.w	r3, r3, #2
 8004f76:	bfd8      	it	le
 8004f78:	2401      	movle	r4, #1
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	f200 808a 	bhi.w	8005094 <_dtoa_r+0x304>
 8004f80:	e8df f003 	tbb	[pc, r3]
 8004f84:	5b4d4f2d 	.word	0x5b4d4f2d
 8004f88:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004f8c:	441c      	add	r4, r3
 8004f8e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	bfc3      	ittte	gt
 8004f96:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f9a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004f9e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004fa2:	f1c3 0320 	rsble	r3, r3, #32
 8004fa6:	bfc6      	itte	gt
 8004fa8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004fac:	4318      	orrgt	r0, r3
 8004fae:	fa06 f003 	lslle.w	r0, r6, r3
 8004fb2:	f7fb fa2f 	bl	8000414 <__aeabi_ui2d>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004fbc:	3c01      	subs	r4, #1
 8004fbe:	9313      	str	r3, [sp, #76]	; 0x4c
 8004fc0:	e76f      	b.n	8004ea2 <_dtoa_r+0x112>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e7b2      	b.n	8004f2c <_dtoa_r+0x19c>
 8004fc6:	900f      	str	r0, [sp, #60]	; 0x3c
 8004fc8:	e7b1      	b.n	8004f2e <_dtoa_r+0x19e>
 8004fca:	9b06      	ldr	r3, [sp, #24]
 8004fcc:	eba3 030a 	sub.w	r3, r3, sl
 8004fd0:	9306      	str	r3, [sp, #24]
 8004fd2:	f1ca 0300 	rsb	r3, sl, #0
 8004fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8004fd8:	2300      	movs	r3, #0
 8004fda:	930e      	str	r3, [sp, #56]	; 0x38
 8004fdc:	e7be      	b.n	8004f5c <_dtoa_r+0x1cc>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fe2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	dc58      	bgt.n	800509a <_dtoa_r+0x30a>
 8004fe8:	f04f 0901 	mov.w	r9, #1
 8004fec:	464b      	mov	r3, r9
 8004fee:	f8cd 9020 	str.w	r9, [sp, #32]
 8004ff2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004ffa:	6042      	str	r2, [r0, #4]
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	f102 0614 	add.w	r6, r2, #20
 8005002:	429e      	cmp	r6, r3
 8005004:	6841      	ldr	r1, [r0, #4]
 8005006:	d94e      	bls.n	80050a6 <_dtoa_r+0x316>
 8005008:	4628      	mov	r0, r5
 800500a:	f000 fcd7 	bl	80059bc <_Balloc>
 800500e:	9003      	str	r0, [sp, #12]
 8005010:	2800      	cmp	r0, #0
 8005012:	d14c      	bne.n	80050ae <_dtoa_r+0x31e>
 8005014:	4602      	mov	r2, r0
 8005016:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800501a:	4b17      	ldr	r3, [pc, #92]	; (8005078 <_dtoa_r+0x2e8>)
 800501c:	e6cc      	b.n	8004db8 <_dtoa_r+0x28>
 800501e:	2301      	movs	r3, #1
 8005020:	e7de      	b.n	8004fe0 <_dtoa_r+0x250>
 8005022:	2300      	movs	r3, #0
 8005024:	930b      	str	r3, [sp, #44]	; 0x2c
 8005026:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005028:	eb0a 0903 	add.w	r9, sl, r3
 800502c:	f109 0301 	add.w	r3, r9, #1
 8005030:	2b01      	cmp	r3, #1
 8005032:	9308      	str	r3, [sp, #32]
 8005034:	bfb8      	it	lt
 8005036:	2301      	movlt	r3, #1
 8005038:	e7dd      	b.n	8004ff6 <_dtoa_r+0x266>
 800503a:	2301      	movs	r3, #1
 800503c:	e7f2      	b.n	8005024 <_dtoa_r+0x294>
 800503e:	bf00      	nop
 8005040:	636f4361 	.word	0x636f4361
 8005044:	3fd287a7 	.word	0x3fd287a7
 8005048:	8b60c8b3 	.word	0x8b60c8b3
 800504c:	3fc68a28 	.word	0x3fc68a28
 8005050:	509f79fb 	.word	0x509f79fb
 8005054:	3fd34413 	.word	0x3fd34413
 8005058:	080071e1 	.word	0x080071e1
 800505c:	080071f8 	.word	0x080071f8
 8005060:	7ff00000 	.word	0x7ff00000
 8005064:	080071dd 	.word	0x080071dd
 8005068:	080071d4 	.word	0x080071d4
 800506c:	080071b1 	.word	0x080071b1
 8005070:	3ff80000 	.word	0x3ff80000
 8005074:	080072e8 	.word	0x080072e8
 8005078:	08007253 	.word	0x08007253
 800507c:	2401      	movs	r4, #1
 800507e:	2300      	movs	r3, #0
 8005080:	940b      	str	r4, [sp, #44]	; 0x2c
 8005082:	9322      	str	r3, [sp, #136]	; 0x88
 8005084:	f04f 39ff 	mov.w	r9, #4294967295
 8005088:	2200      	movs	r2, #0
 800508a:	2312      	movs	r3, #18
 800508c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005090:	9223      	str	r2, [sp, #140]	; 0x8c
 8005092:	e7b0      	b.n	8004ff6 <_dtoa_r+0x266>
 8005094:	2301      	movs	r3, #1
 8005096:	930b      	str	r3, [sp, #44]	; 0x2c
 8005098:	e7f4      	b.n	8005084 <_dtoa_r+0x2f4>
 800509a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800509e:	464b      	mov	r3, r9
 80050a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80050a4:	e7a7      	b.n	8004ff6 <_dtoa_r+0x266>
 80050a6:	3101      	adds	r1, #1
 80050a8:	6041      	str	r1, [r0, #4]
 80050aa:	0052      	lsls	r2, r2, #1
 80050ac:	e7a7      	b.n	8004ffe <_dtoa_r+0x26e>
 80050ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050b0:	9a03      	ldr	r2, [sp, #12]
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	9b08      	ldr	r3, [sp, #32]
 80050b6:	2b0e      	cmp	r3, #14
 80050b8:	f200 80a8 	bhi.w	800520c <_dtoa_r+0x47c>
 80050bc:	2c00      	cmp	r4, #0
 80050be:	f000 80a5 	beq.w	800520c <_dtoa_r+0x47c>
 80050c2:	f1ba 0f00 	cmp.w	sl, #0
 80050c6:	dd34      	ble.n	8005132 <_dtoa_r+0x3a2>
 80050c8:	4a9a      	ldr	r2, [pc, #616]	; (8005334 <_dtoa_r+0x5a4>)
 80050ca:	f00a 030f 	and.w	r3, sl, #15
 80050ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050d2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80050d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80050de:	ea4f 142a 	mov.w	r4, sl, asr #4
 80050e2:	d016      	beq.n	8005112 <_dtoa_r+0x382>
 80050e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050e8:	4b93      	ldr	r3, [pc, #588]	; (8005338 <_dtoa_r+0x5a8>)
 80050ea:	2703      	movs	r7, #3
 80050ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050f0:	f7fb fb34 	bl	800075c <__aeabi_ddiv>
 80050f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050f8:	f004 040f 	and.w	r4, r4, #15
 80050fc:	4e8e      	ldr	r6, [pc, #568]	; (8005338 <_dtoa_r+0x5a8>)
 80050fe:	b954      	cbnz	r4, 8005116 <_dtoa_r+0x386>
 8005100:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005108:	f7fb fb28 	bl	800075c <__aeabi_ddiv>
 800510c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005110:	e029      	b.n	8005166 <_dtoa_r+0x3d6>
 8005112:	2702      	movs	r7, #2
 8005114:	e7f2      	b.n	80050fc <_dtoa_r+0x36c>
 8005116:	07e1      	lsls	r1, r4, #31
 8005118:	d508      	bpl.n	800512c <_dtoa_r+0x39c>
 800511a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800511e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005122:	f7fb f9f1 	bl	8000508 <__aeabi_dmul>
 8005126:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800512a:	3701      	adds	r7, #1
 800512c:	1064      	asrs	r4, r4, #1
 800512e:	3608      	adds	r6, #8
 8005130:	e7e5      	b.n	80050fe <_dtoa_r+0x36e>
 8005132:	f000 80a5 	beq.w	8005280 <_dtoa_r+0x4f0>
 8005136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800513a:	f1ca 0400 	rsb	r4, sl, #0
 800513e:	4b7d      	ldr	r3, [pc, #500]	; (8005334 <_dtoa_r+0x5a4>)
 8005140:	f004 020f 	and.w	r2, r4, #15
 8005144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f7fb f9dc 	bl	8000508 <__aeabi_dmul>
 8005150:	2702      	movs	r7, #2
 8005152:	2300      	movs	r3, #0
 8005154:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005158:	4e77      	ldr	r6, [pc, #476]	; (8005338 <_dtoa_r+0x5a8>)
 800515a:	1124      	asrs	r4, r4, #4
 800515c:	2c00      	cmp	r4, #0
 800515e:	f040 8084 	bne.w	800526a <_dtoa_r+0x4da>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1d2      	bne.n	800510c <_dtoa_r+0x37c>
 8005166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 808b 	beq.w	8005284 <_dtoa_r+0x4f4>
 800516e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005172:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005176:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800517a:	2200      	movs	r2, #0
 800517c:	4b6f      	ldr	r3, [pc, #444]	; (800533c <_dtoa_r+0x5ac>)
 800517e:	f7fb fc35 	bl	80009ec <__aeabi_dcmplt>
 8005182:	2800      	cmp	r0, #0
 8005184:	d07e      	beq.n	8005284 <_dtoa_r+0x4f4>
 8005186:	9b08      	ldr	r3, [sp, #32]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d07b      	beq.n	8005284 <_dtoa_r+0x4f4>
 800518c:	f1b9 0f00 	cmp.w	r9, #0
 8005190:	dd38      	ble.n	8005204 <_dtoa_r+0x474>
 8005192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005196:	2200      	movs	r2, #0
 8005198:	4b69      	ldr	r3, [pc, #420]	; (8005340 <_dtoa_r+0x5b0>)
 800519a:	f7fb f9b5 	bl	8000508 <__aeabi_dmul>
 800519e:	464c      	mov	r4, r9
 80051a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051a4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80051a8:	3701      	adds	r7, #1
 80051aa:	4638      	mov	r0, r7
 80051ac:	f7fb f942 	bl	8000434 <__aeabi_i2d>
 80051b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051b4:	f7fb f9a8 	bl	8000508 <__aeabi_dmul>
 80051b8:	2200      	movs	r2, #0
 80051ba:	4b62      	ldr	r3, [pc, #392]	; (8005344 <_dtoa_r+0x5b4>)
 80051bc:	f7fa ffee 	bl	800019c <__adddf3>
 80051c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80051c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051c8:	9611      	str	r6, [sp, #68]	; 0x44
 80051ca:	2c00      	cmp	r4, #0
 80051cc:	d15d      	bne.n	800528a <_dtoa_r+0x4fa>
 80051ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051d2:	2200      	movs	r2, #0
 80051d4:	4b5c      	ldr	r3, [pc, #368]	; (8005348 <_dtoa_r+0x5b8>)
 80051d6:	f7fa ffdf 	bl	8000198 <__aeabi_dsub>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051e2:	4633      	mov	r3, r6
 80051e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051e6:	f7fb fc1f 	bl	8000a28 <__aeabi_dcmpgt>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	f040 829c 	bne.w	8005728 <_dtoa_r+0x998>
 80051f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80051fa:	f7fb fbf7 	bl	80009ec <__aeabi_dcmplt>
 80051fe:	2800      	cmp	r0, #0
 8005200:	f040 8290 	bne.w	8005724 <_dtoa_r+0x994>
 8005204:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005208:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800520c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800520e:	2b00      	cmp	r3, #0
 8005210:	f2c0 8152 	blt.w	80054b8 <_dtoa_r+0x728>
 8005214:	f1ba 0f0e 	cmp.w	sl, #14
 8005218:	f300 814e 	bgt.w	80054b8 <_dtoa_r+0x728>
 800521c:	4b45      	ldr	r3, [pc, #276]	; (8005334 <_dtoa_r+0x5a4>)
 800521e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005222:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005226:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800522a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800522c:	2b00      	cmp	r3, #0
 800522e:	f280 80db 	bge.w	80053e8 <_dtoa_r+0x658>
 8005232:	9b08      	ldr	r3, [sp, #32]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f300 80d7 	bgt.w	80053e8 <_dtoa_r+0x658>
 800523a:	f040 8272 	bne.w	8005722 <_dtoa_r+0x992>
 800523e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005242:	2200      	movs	r2, #0
 8005244:	4b40      	ldr	r3, [pc, #256]	; (8005348 <_dtoa_r+0x5b8>)
 8005246:	f7fb f95f 	bl	8000508 <__aeabi_dmul>
 800524a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800524e:	f7fb fbe1 	bl	8000a14 <__aeabi_dcmpge>
 8005252:	9c08      	ldr	r4, [sp, #32]
 8005254:	4626      	mov	r6, r4
 8005256:	2800      	cmp	r0, #0
 8005258:	f040 8248 	bne.w	80056ec <_dtoa_r+0x95c>
 800525c:	2331      	movs	r3, #49	; 0x31
 800525e:	9f03      	ldr	r7, [sp, #12]
 8005260:	f10a 0a01 	add.w	sl, sl, #1
 8005264:	f807 3b01 	strb.w	r3, [r7], #1
 8005268:	e244      	b.n	80056f4 <_dtoa_r+0x964>
 800526a:	07e2      	lsls	r2, r4, #31
 800526c:	d505      	bpl.n	800527a <_dtoa_r+0x4ea>
 800526e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005272:	f7fb f949 	bl	8000508 <__aeabi_dmul>
 8005276:	2301      	movs	r3, #1
 8005278:	3701      	adds	r7, #1
 800527a:	1064      	asrs	r4, r4, #1
 800527c:	3608      	adds	r6, #8
 800527e:	e76d      	b.n	800515c <_dtoa_r+0x3cc>
 8005280:	2702      	movs	r7, #2
 8005282:	e770      	b.n	8005166 <_dtoa_r+0x3d6>
 8005284:	46d0      	mov	r8, sl
 8005286:	9c08      	ldr	r4, [sp, #32]
 8005288:	e78f      	b.n	80051aa <_dtoa_r+0x41a>
 800528a:	9903      	ldr	r1, [sp, #12]
 800528c:	4b29      	ldr	r3, [pc, #164]	; (8005334 <_dtoa_r+0x5a4>)
 800528e:	4421      	add	r1, r4
 8005290:	9112      	str	r1, [sp, #72]	; 0x48
 8005292:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005294:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005298:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800529c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052a0:	2900      	cmp	r1, #0
 80052a2:	d055      	beq.n	8005350 <_dtoa_r+0x5c0>
 80052a4:	2000      	movs	r0, #0
 80052a6:	4929      	ldr	r1, [pc, #164]	; (800534c <_dtoa_r+0x5bc>)
 80052a8:	f7fb fa58 	bl	800075c <__aeabi_ddiv>
 80052ac:	463b      	mov	r3, r7
 80052ae:	4632      	mov	r2, r6
 80052b0:	f7fa ff72 	bl	8000198 <__aeabi_dsub>
 80052b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052b8:	9f03      	ldr	r7, [sp, #12]
 80052ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052be:	f7fb fbd3 	bl	8000a68 <__aeabi_d2iz>
 80052c2:	4604      	mov	r4, r0
 80052c4:	f7fb f8b6 	bl	8000434 <__aeabi_i2d>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052d0:	f7fa ff62 	bl	8000198 <__aeabi_dsub>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	3430      	adds	r4, #48	; 0x30
 80052da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052e2:	f807 4b01 	strb.w	r4, [r7], #1
 80052e6:	f7fb fb81 	bl	80009ec <__aeabi_dcmplt>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d174      	bne.n	80053d8 <_dtoa_r+0x648>
 80052ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052f2:	2000      	movs	r0, #0
 80052f4:	4911      	ldr	r1, [pc, #68]	; (800533c <_dtoa_r+0x5ac>)
 80052f6:	f7fa ff4f 	bl	8000198 <__aeabi_dsub>
 80052fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052fe:	f7fb fb75 	bl	80009ec <__aeabi_dcmplt>
 8005302:	2800      	cmp	r0, #0
 8005304:	f040 80b7 	bne.w	8005476 <_dtoa_r+0x6e6>
 8005308:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800530a:	429f      	cmp	r7, r3
 800530c:	f43f af7a 	beq.w	8005204 <_dtoa_r+0x474>
 8005310:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005314:	2200      	movs	r2, #0
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <_dtoa_r+0x5b0>)
 8005318:	f7fb f8f6 	bl	8000508 <__aeabi_dmul>
 800531c:	2200      	movs	r2, #0
 800531e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005326:	4b06      	ldr	r3, [pc, #24]	; (8005340 <_dtoa_r+0x5b0>)
 8005328:	f7fb f8ee 	bl	8000508 <__aeabi_dmul>
 800532c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005330:	e7c3      	b.n	80052ba <_dtoa_r+0x52a>
 8005332:	bf00      	nop
 8005334:	080072e8 	.word	0x080072e8
 8005338:	080072c0 	.word	0x080072c0
 800533c:	3ff00000 	.word	0x3ff00000
 8005340:	40240000 	.word	0x40240000
 8005344:	401c0000 	.word	0x401c0000
 8005348:	40140000 	.word	0x40140000
 800534c:	3fe00000 	.word	0x3fe00000
 8005350:	4630      	mov	r0, r6
 8005352:	4639      	mov	r1, r7
 8005354:	f7fb f8d8 	bl	8000508 <__aeabi_dmul>
 8005358:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800535a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800535e:	9c03      	ldr	r4, [sp, #12]
 8005360:	9314      	str	r3, [sp, #80]	; 0x50
 8005362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005366:	f7fb fb7f 	bl	8000a68 <__aeabi_d2iz>
 800536a:	9015      	str	r0, [sp, #84]	; 0x54
 800536c:	f7fb f862 	bl	8000434 <__aeabi_i2d>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005378:	f7fa ff0e 	bl	8000198 <__aeabi_dsub>
 800537c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800537e:	4606      	mov	r6, r0
 8005380:	3330      	adds	r3, #48	; 0x30
 8005382:	f804 3b01 	strb.w	r3, [r4], #1
 8005386:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005388:	460f      	mov	r7, r1
 800538a:	429c      	cmp	r4, r3
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	d124      	bne.n	80053dc <_dtoa_r+0x64c>
 8005392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005396:	4bb0      	ldr	r3, [pc, #704]	; (8005658 <_dtoa_r+0x8c8>)
 8005398:	f7fa ff00 	bl	800019c <__adddf3>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4630      	mov	r0, r6
 80053a2:	4639      	mov	r1, r7
 80053a4:	f7fb fb40 	bl	8000a28 <__aeabi_dcmpgt>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	d163      	bne.n	8005474 <_dtoa_r+0x6e4>
 80053ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053b0:	2000      	movs	r0, #0
 80053b2:	49a9      	ldr	r1, [pc, #676]	; (8005658 <_dtoa_r+0x8c8>)
 80053b4:	f7fa fef0 	bl	8000198 <__aeabi_dsub>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4630      	mov	r0, r6
 80053be:	4639      	mov	r1, r7
 80053c0:	f7fb fb14 	bl	80009ec <__aeabi_dcmplt>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	f43f af1d 	beq.w	8005204 <_dtoa_r+0x474>
 80053ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80053cc:	1e7b      	subs	r3, r7, #1
 80053ce:	9314      	str	r3, [sp, #80]	; 0x50
 80053d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80053d4:	2b30      	cmp	r3, #48	; 0x30
 80053d6:	d0f8      	beq.n	80053ca <_dtoa_r+0x63a>
 80053d8:	46c2      	mov	sl, r8
 80053da:	e03b      	b.n	8005454 <_dtoa_r+0x6c4>
 80053dc:	4b9f      	ldr	r3, [pc, #636]	; (800565c <_dtoa_r+0x8cc>)
 80053de:	f7fb f893 	bl	8000508 <__aeabi_dmul>
 80053e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053e6:	e7bc      	b.n	8005362 <_dtoa_r+0x5d2>
 80053e8:	9f03      	ldr	r7, [sp, #12]
 80053ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80053ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053f2:	4640      	mov	r0, r8
 80053f4:	4649      	mov	r1, r9
 80053f6:	f7fb f9b1 	bl	800075c <__aeabi_ddiv>
 80053fa:	f7fb fb35 	bl	8000a68 <__aeabi_d2iz>
 80053fe:	4604      	mov	r4, r0
 8005400:	f7fb f818 	bl	8000434 <__aeabi_i2d>
 8005404:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005408:	f7fb f87e 	bl	8000508 <__aeabi_dmul>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4640      	mov	r0, r8
 8005412:	4649      	mov	r1, r9
 8005414:	f7fa fec0 	bl	8000198 <__aeabi_dsub>
 8005418:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800541c:	f807 6b01 	strb.w	r6, [r7], #1
 8005420:	9e03      	ldr	r6, [sp, #12]
 8005422:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005426:	1bbe      	subs	r6, r7, r6
 8005428:	45b4      	cmp	ip, r6
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	d136      	bne.n	800549e <_dtoa_r+0x70e>
 8005430:	f7fa feb4 	bl	800019c <__adddf3>
 8005434:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005438:	4680      	mov	r8, r0
 800543a:	4689      	mov	r9, r1
 800543c:	f7fb faf4 	bl	8000a28 <__aeabi_dcmpgt>
 8005440:	bb58      	cbnz	r0, 800549a <_dtoa_r+0x70a>
 8005442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005446:	4640      	mov	r0, r8
 8005448:	4649      	mov	r1, r9
 800544a:	f7fb fac5 	bl	80009d8 <__aeabi_dcmpeq>
 800544e:	b108      	cbz	r0, 8005454 <_dtoa_r+0x6c4>
 8005450:	07e1      	lsls	r1, r4, #31
 8005452:	d422      	bmi.n	800549a <_dtoa_r+0x70a>
 8005454:	4628      	mov	r0, r5
 8005456:	4659      	mov	r1, fp
 8005458:	f000 faf0 	bl	8005a3c <_Bfree>
 800545c:	2300      	movs	r3, #0
 800545e:	703b      	strb	r3, [r7, #0]
 8005460:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005462:	f10a 0001 	add.w	r0, sl, #1
 8005466:	6018      	str	r0, [r3, #0]
 8005468:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800546a:	2b00      	cmp	r3, #0
 800546c:	f43f acde 	beq.w	8004e2c <_dtoa_r+0x9c>
 8005470:	601f      	str	r7, [r3, #0]
 8005472:	e4db      	b.n	8004e2c <_dtoa_r+0x9c>
 8005474:	4627      	mov	r7, r4
 8005476:	463b      	mov	r3, r7
 8005478:	461f      	mov	r7, r3
 800547a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800547e:	2a39      	cmp	r2, #57	; 0x39
 8005480:	d107      	bne.n	8005492 <_dtoa_r+0x702>
 8005482:	9a03      	ldr	r2, [sp, #12]
 8005484:	429a      	cmp	r2, r3
 8005486:	d1f7      	bne.n	8005478 <_dtoa_r+0x6e8>
 8005488:	2230      	movs	r2, #48	; 0x30
 800548a:	9903      	ldr	r1, [sp, #12]
 800548c:	f108 0801 	add.w	r8, r8, #1
 8005490:	700a      	strb	r2, [r1, #0]
 8005492:	781a      	ldrb	r2, [r3, #0]
 8005494:	3201      	adds	r2, #1
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	e79e      	b.n	80053d8 <_dtoa_r+0x648>
 800549a:	46d0      	mov	r8, sl
 800549c:	e7eb      	b.n	8005476 <_dtoa_r+0x6e6>
 800549e:	2200      	movs	r2, #0
 80054a0:	4b6e      	ldr	r3, [pc, #440]	; (800565c <_dtoa_r+0x8cc>)
 80054a2:	f7fb f831 	bl	8000508 <__aeabi_dmul>
 80054a6:	2200      	movs	r2, #0
 80054a8:	2300      	movs	r3, #0
 80054aa:	4680      	mov	r8, r0
 80054ac:	4689      	mov	r9, r1
 80054ae:	f7fb fa93 	bl	80009d8 <__aeabi_dcmpeq>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	d09b      	beq.n	80053ee <_dtoa_r+0x65e>
 80054b6:	e7cd      	b.n	8005454 <_dtoa_r+0x6c4>
 80054b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054ba:	2a00      	cmp	r2, #0
 80054bc:	f000 80d0 	beq.w	8005660 <_dtoa_r+0x8d0>
 80054c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80054c2:	2a01      	cmp	r2, #1
 80054c4:	f300 80ae 	bgt.w	8005624 <_dtoa_r+0x894>
 80054c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80054ca:	2a00      	cmp	r2, #0
 80054cc:	f000 80a6 	beq.w	800561c <_dtoa_r+0x88c>
 80054d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80054d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80054d6:	9f06      	ldr	r7, [sp, #24]
 80054d8:	9a06      	ldr	r2, [sp, #24]
 80054da:	2101      	movs	r1, #1
 80054dc:	441a      	add	r2, r3
 80054de:	9206      	str	r2, [sp, #24]
 80054e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054e2:	4628      	mov	r0, r5
 80054e4:	441a      	add	r2, r3
 80054e6:	9209      	str	r2, [sp, #36]	; 0x24
 80054e8:	f000 fb5e 	bl	8005ba8 <__i2b>
 80054ec:	4606      	mov	r6, r0
 80054ee:	2f00      	cmp	r7, #0
 80054f0:	dd0c      	ble.n	800550c <_dtoa_r+0x77c>
 80054f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	dd09      	ble.n	800550c <_dtoa_r+0x77c>
 80054f8:	42bb      	cmp	r3, r7
 80054fa:	bfa8      	it	ge
 80054fc:	463b      	movge	r3, r7
 80054fe:	9a06      	ldr	r2, [sp, #24]
 8005500:	1aff      	subs	r7, r7, r3
 8005502:	1ad2      	subs	r2, r2, r3
 8005504:	9206      	str	r2, [sp, #24]
 8005506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	9309      	str	r3, [sp, #36]	; 0x24
 800550c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800550e:	b1f3      	cbz	r3, 800554e <_dtoa_r+0x7be>
 8005510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 80a8 	beq.w	8005668 <_dtoa_r+0x8d8>
 8005518:	2c00      	cmp	r4, #0
 800551a:	dd10      	ble.n	800553e <_dtoa_r+0x7ae>
 800551c:	4631      	mov	r1, r6
 800551e:	4622      	mov	r2, r4
 8005520:	4628      	mov	r0, r5
 8005522:	f000 fbff 	bl	8005d24 <__pow5mult>
 8005526:	465a      	mov	r2, fp
 8005528:	4601      	mov	r1, r0
 800552a:	4606      	mov	r6, r0
 800552c:	4628      	mov	r0, r5
 800552e:	f000 fb51 	bl	8005bd4 <__multiply>
 8005532:	4680      	mov	r8, r0
 8005534:	4659      	mov	r1, fp
 8005536:	4628      	mov	r0, r5
 8005538:	f000 fa80 	bl	8005a3c <_Bfree>
 800553c:	46c3      	mov	fp, r8
 800553e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005540:	1b1a      	subs	r2, r3, r4
 8005542:	d004      	beq.n	800554e <_dtoa_r+0x7be>
 8005544:	4659      	mov	r1, fp
 8005546:	4628      	mov	r0, r5
 8005548:	f000 fbec 	bl	8005d24 <__pow5mult>
 800554c:	4683      	mov	fp, r0
 800554e:	2101      	movs	r1, #1
 8005550:	4628      	mov	r0, r5
 8005552:	f000 fb29 	bl	8005ba8 <__i2b>
 8005556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005558:	4604      	mov	r4, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	f340 8086 	ble.w	800566c <_dtoa_r+0x8dc>
 8005560:	461a      	mov	r2, r3
 8005562:	4601      	mov	r1, r0
 8005564:	4628      	mov	r0, r5
 8005566:	f000 fbdd 	bl	8005d24 <__pow5mult>
 800556a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800556c:	4604      	mov	r4, r0
 800556e:	2b01      	cmp	r3, #1
 8005570:	dd7f      	ble.n	8005672 <_dtoa_r+0x8e2>
 8005572:	f04f 0800 	mov.w	r8, #0
 8005576:	6923      	ldr	r3, [r4, #16]
 8005578:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800557c:	6918      	ldr	r0, [r3, #16]
 800557e:	f000 fac5 	bl	8005b0c <__hi0bits>
 8005582:	f1c0 0020 	rsb	r0, r0, #32
 8005586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005588:	4418      	add	r0, r3
 800558a:	f010 001f 	ands.w	r0, r0, #31
 800558e:	f000 8092 	beq.w	80056b6 <_dtoa_r+0x926>
 8005592:	f1c0 0320 	rsb	r3, r0, #32
 8005596:	2b04      	cmp	r3, #4
 8005598:	f340 808a 	ble.w	80056b0 <_dtoa_r+0x920>
 800559c:	f1c0 001c 	rsb	r0, r0, #28
 80055a0:	9b06      	ldr	r3, [sp, #24]
 80055a2:	4407      	add	r7, r0
 80055a4:	4403      	add	r3, r0
 80055a6:	9306      	str	r3, [sp, #24]
 80055a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055aa:	4403      	add	r3, r0
 80055ac:	9309      	str	r3, [sp, #36]	; 0x24
 80055ae:	9b06      	ldr	r3, [sp, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	dd05      	ble.n	80055c0 <_dtoa_r+0x830>
 80055b4:	4659      	mov	r1, fp
 80055b6:	461a      	mov	r2, r3
 80055b8:	4628      	mov	r0, r5
 80055ba:	f000 fc0d 	bl	8005dd8 <__lshift>
 80055be:	4683      	mov	fp, r0
 80055c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	dd05      	ble.n	80055d2 <_dtoa_r+0x842>
 80055c6:	4621      	mov	r1, r4
 80055c8:	461a      	mov	r2, r3
 80055ca:	4628      	mov	r0, r5
 80055cc:	f000 fc04 	bl	8005dd8 <__lshift>
 80055d0:	4604      	mov	r4, r0
 80055d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d070      	beq.n	80056ba <_dtoa_r+0x92a>
 80055d8:	4621      	mov	r1, r4
 80055da:	4658      	mov	r0, fp
 80055dc:	f000 fc6c 	bl	8005eb8 <__mcmp>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	da6a      	bge.n	80056ba <_dtoa_r+0x92a>
 80055e4:	2300      	movs	r3, #0
 80055e6:	4659      	mov	r1, fp
 80055e8:	220a      	movs	r2, #10
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 fa48 	bl	8005a80 <__multadd>
 80055f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055f2:	4683      	mov	fp, r0
 80055f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8194 	beq.w	8005926 <_dtoa_r+0xb96>
 80055fe:	4631      	mov	r1, r6
 8005600:	2300      	movs	r3, #0
 8005602:	220a      	movs	r2, #10
 8005604:	4628      	mov	r0, r5
 8005606:	f000 fa3b 	bl	8005a80 <__multadd>
 800560a:	f1b9 0f00 	cmp.w	r9, #0
 800560e:	4606      	mov	r6, r0
 8005610:	f300 8093 	bgt.w	800573a <_dtoa_r+0x9aa>
 8005614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005616:	2b02      	cmp	r3, #2
 8005618:	dc57      	bgt.n	80056ca <_dtoa_r+0x93a>
 800561a:	e08e      	b.n	800573a <_dtoa_r+0x9aa>
 800561c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800561e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005622:	e757      	b.n	80054d4 <_dtoa_r+0x744>
 8005624:	9b08      	ldr	r3, [sp, #32]
 8005626:	1e5c      	subs	r4, r3, #1
 8005628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800562a:	42a3      	cmp	r3, r4
 800562c:	bfb7      	itett	lt
 800562e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005630:	1b1c      	subge	r4, r3, r4
 8005632:	1ae2      	sublt	r2, r4, r3
 8005634:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005636:	bfbe      	ittt	lt
 8005638:	940a      	strlt	r4, [sp, #40]	; 0x28
 800563a:	189b      	addlt	r3, r3, r2
 800563c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800563e:	9b08      	ldr	r3, [sp, #32]
 8005640:	bfb8      	it	lt
 8005642:	2400      	movlt	r4, #0
 8005644:	2b00      	cmp	r3, #0
 8005646:	bfbb      	ittet	lt
 8005648:	9b06      	ldrlt	r3, [sp, #24]
 800564a:	9a08      	ldrlt	r2, [sp, #32]
 800564c:	9f06      	ldrge	r7, [sp, #24]
 800564e:	1a9f      	sublt	r7, r3, r2
 8005650:	bfac      	ite	ge
 8005652:	9b08      	ldrge	r3, [sp, #32]
 8005654:	2300      	movlt	r3, #0
 8005656:	e73f      	b.n	80054d8 <_dtoa_r+0x748>
 8005658:	3fe00000 	.word	0x3fe00000
 800565c:	40240000 	.word	0x40240000
 8005660:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005662:	9f06      	ldr	r7, [sp, #24]
 8005664:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005666:	e742      	b.n	80054ee <_dtoa_r+0x75e>
 8005668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800566a:	e76b      	b.n	8005544 <_dtoa_r+0x7b4>
 800566c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800566e:	2b01      	cmp	r3, #1
 8005670:	dc19      	bgt.n	80056a6 <_dtoa_r+0x916>
 8005672:	9b04      	ldr	r3, [sp, #16]
 8005674:	b9bb      	cbnz	r3, 80056a6 <_dtoa_r+0x916>
 8005676:	9b05      	ldr	r3, [sp, #20]
 8005678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800567c:	b99b      	cbnz	r3, 80056a6 <_dtoa_r+0x916>
 800567e:	9b05      	ldr	r3, [sp, #20]
 8005680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005684:	0d1b      	lsrs	r3, r3, #20
 8005686:	051b      	lsls	r3, r3, #20
 8005688:	b183      	cbz	r3, 80056ac <_dtoa_r+0x91c>
 800568a:	f04f 0801 	mov.w	r8, #1
 800568e:	9b06      	ldr	r3, [sp, #24]
 8005690:	3301      	adds	r3, #1
 8005692:	9306      	str	r3, [sp, #24]
 8005694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005696:	3301      	adds	r3, #1
 8005698:	9309      	str	r3, [sp, #36]	; 0x24
 800569a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	f47f af6a 	bne.w	8005576 <_dtoa_r+0x7e6>
 80056a2:	2001      	movs	r0, #1
 80056a4:	e76f      	b.n	8005586 <_dtoa_r+0x7f6>
 80056a6:	f04f 0800 	mov.w	r8, #0
 80056aa:	e7f6      	b.n	800569a <_dtoa_r+0x90a>
 80056ac:	4698      	mov	r8, r3
 80056ae:	e7f4      	b.n	800569a <_dtoa_r+0x90a>
 80056b0:	f43f af7d 	beq.w	80055ae <_dtoa_r+0x81e>
 80056b4:	4618      	mov	r0, r3
 80056b6:	301c      	adds	r0, #28
 80056b8:	e772      	b.n	80055a0 <_dtoa_r+0x810>
 80056ba:	9b08      	ldr	r3, [sp, #32]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	dc36      	bgt.n	800572e <_dtoa_r+0x99e>
 80056c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	dd33      	ble.n	800572e <_dtoa_r+0x99e>
 80056c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056ca:	f1b9 0f00 	cmp.w	r9, #0
 80056ce:	d10d      	bne.n	80056ec <_dtoa_r+0x95c>
 80056d0:	4621      	mov	r1, r4
 80056d2:	464b      	mov	r3, r9
 80056d4:	2205      	movs	r2, #5
 80056d6:	4628      	mov	r0, r5
 80056d8:	f000 f9d2 	bl	8005a80 <__multadd>
 80056dc:	4601      	mov	r1, r0
 80056de:	4604      	mov	r4, r0
 80056e0:	4658      	mov	r0, fp
 80056e2:	f000 fbe9 	bl	8005eb8 <__mcmp>
 80056e6:	2800      	cmp	r0, #0
 80056e8:	f73f adb8 	bgt.w	800525c <_dtoa_r+0x4cc>
 80056ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056ee:	9f03      	ldr	r7, [sp, #12]
 80056f0:	ea6f 0a03 	mvn.w	sl, r3
 80056f4:	f04f 0800 	mov.w	r8, #0
 80056f8:	4621      	mov	r1, r4
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 f99e 	bl	8005a3c <_Bfree>
 8005700:	2e00      	cmp	r6, #0
 8005702:	f43f aea7 	beq.w	8005454 <_dtoa_r+0x6c4>
 8005706:	f1b8 0f00 	cmp.w	r8, #0
 800570a:	d005      	beq.n	8005718 <_dtoa_r+0x988>
 800570c:	45b0      	cmp	r8, r6
 800570e:	d003      	beq.n	8005718 <_dtoa_r+0x988>
 8005710:	4641      	mov	r1, r8
 8005712:	4628      	mov	r0, r5
 8005714:	f000 f992 	bl	8005a3c <_Bfree>
 8005718:	4631      	mov	r1, r6
 800571a:	4628      	mov	r0, r5
 800571c:	f000 f98e 	bl	8005a3c <_Bfree>
 8005720:	e698      	b.n	8005454 <_dtoa_r+0x6c4>
 8005722:	2400      	movs	r4, #0
 8005724:	4626      	mov	r6, r4
 8005726:	e7e1      	b.n	80056ec <_dtoa_r+0x95c>
 8005728:	46c2      	mov	sl, r8
 800572a:	4626      	mov	r6, r4
 800572c:	e596      	b.n	800525c <_dtoa_r+0x4cc>
 800572e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005730:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 80fd 	beq.w	8005934 <_dtoa_r+0xba4>
 800573a:	2f00      	cmp	r7, #0
 800573c:	dd05      	ble.n	800574a <_dtoa_r+0x9ba>
 800573e:	4631      	mov	r1, r6
 8005740:	463a      	mov	r2, r7
 8005742:	4628      	mov	r0, r5
 8005744:	f000 fb48 	bl	8005dd8 <__lshift>
 8005748:	4606      	mov	r6, r0
 800574a:	f1b8 0f00 	cmp.w	r8, #0
 800574e:	d05c      	beq.n	800580a <_dtoa_r+0xa7a>
 8005750:	4628      	mov	r0, r5
 8005752:	6871      	ldr	r1, [r6, #4]
 8005754:	f000 f932 	bl	80059bc <_Balloc>
 8005758:	4607      	mov	r7, r0
 800575a:	b928      	cbnz	r0, 8005768 <_dtoa_r+0x9d8>
 800575c:	4602      	mov	r2, r0
 800575e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005762:	4b7f      	ldr	r3, [pc, #508]	; (8005960 <_dtoa_r+0xbd0>)
 8005764:	f7ff bb28 	b.w	8004db8 <_dtoa_r+0x28>
 8005768:	6932      	ldr	r2, [r6, #16]
 800576a:	f106 010c 	add.w	r1, r6, #12
 800576e:	3202      	adds	r2, #2
 8005770:	0092      	lsls	r2, r2, #2
 8005772:	300c      	adds	r0, #12
 8005774:	f000 f914 	bl	80059a0 <memcpy>
 8005778:	2201      	movs	r2, #1
 800577a:	4639      	mov	r1, r7
 800577c:	4628      	mov	r0, r5
 800577e:	f000 fb2b 	bl	8005dd8 <__lshift>
 8005782:	46b0      	mov	r8, r6
 8005784:	4606      	mov	r6, r0
 8005786:	9b03      	ldr	r3, [sp, #12]
 8005788:	3301      	adds	r3, #1
 800578a:	9308      	str	r3, [sp, #32]
 800578c:	9b03      	ldr	r3, [sp, #12]
 800578e:	444b      	add	r3, r9
 8005790:	930a      	str	r3, [sp, #40]	; 0x28
 8005792:	9b04      	ldr	r3, [sp, #16]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	9309      	str	r3, [sp, #36]	; 0x24
 800579a:	9b08      	ldr	r3, [sp, #32]
 800579c:	4621      	mov	r1, r4
 800579e:	3b01      	subs	r3, #1
 80057a0:	4658      	mov	r0, fp
 80057a2:	9304      	str	r3, [sp, #16]
 80057a4:	f7ff fa68 	bl	8004c78 <quorem>
 80057a8:	4603      	mov	r3, r0
 80057aa:	4641      	mov	r1, r8
 80057ac:	3330      	adds	r3, #48	; 0x30
 80057ae:	9006      	str	r0, [sp, #24]
 80057b0:	4658      	mov	r0, fp
 80057b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80057b4:	f000 fb80 	bl	8005eb8 <__mcmp>
 80057b8:	4632      	mov	r2, r6
 80057ba:	4681      	mov	r9, r0
 80057bc:	4621      	mov	r1, r4
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 fb96 	bl	8005ef0 <__mdiff>
 80057c4:	68c2      	ldr	r2, [r0, #12]
 80057c6:	4607      	mov	r7, r0
 80057c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ca:	bb02      	cbnz	r2, 800580e <_dtoa_r+0xa7e>
 80057cc:	4601      	mov	r1, r0
 80057ce:	4658      	mov	r0, fp
 80057d0:	f000 fb72 	bl	8005eb8 <__mcmp>
 80057d4:	4602      	mov	r2, r0
 80057d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057d8:	4639      	mov	r1, r7
 80057da:	4628      	mov	r0, r5
 80057dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80057e0:	f000 f92c 	bl	8005a3c <_Bfree>
 80057e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057e8:	9f08      	ldr	r7, [sp, #32]
 80057ea:	ea43 0102 	orr.w	r1, r3, r2
 80057ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f0:	430b      	orrs	r3, r1
 80057f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f4:	d10d      	bne.n	8005812 <_dtoa_r+0xa82>
 80057f6:	2b39      	cmp	r3, #57	; 0x39
 80057f8:	d029      	beq.n	800584e <_dtoa_r+0xabe>
 80057fa:	f1b9 0f00 	cmp.w	r9, #0
 80057fe:	dd01      	ble.n	8005804 <_dtoa_r+0xa74>
 8005800:	9b06      	ldr	r3, [sp, #24]
 8005802:	3331      	adds	r3, #49	; 0x31
 8005804:	9a04      	ldr	r2, [sp, #16]
 8005806:	7013      	strb	r3, [r2, #0]
 8005808:	e776      	b.n	80056f8 <_dtoa_r+0x968>
 800580a:	4630      	mov	r0, r6
 800580c:	e7b9      	b.n	8005782 <_dtoa_r+0x9f2>
 800580e:	2201      	movs	r2, #1
 8005810:	e7e2      	b.n	80057d8 <_dtoa_r+0xa48>
 8005812:	f1b9 0f00 	cmp.w	r9, #0
 8005816:	db06      	blt.n	8005826 <_dtoa_r+0xa96>
 8005818:	9922      	ldr	r1, [sp, #136]	; 0x88
 800581a:	ea41 0909 	orr.w	r9, r1, r9
 800581e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005820:	ea59 0101 	orrs.w	r1, r9, r1
 8005824:	d120      	bne.n	8005868 <_dtoa_r+0xad8>
 8005826:	2a00      	cmp	r2, #0
 8005828:	ddec      	ble.n	8005804 <_dtoa_r+0xa74>
 800582a:	4659      	mov	r1, fp
 800582c:	2201      	movs	r2, #1
 800582e:	4628      	mov	r0, r5
 8005830:	9308      	str	r3, [sp, #32]
 8005832:	f000 fad1 	bl	8005dd8 <__lshift>
 8005836:	4621      	mov	r1, r4
 8005838:	4683      	mov	fp, r0
 800583a:	f000 fb3d 	bl	8005eb8 <__mcmp>
 800583e:	2800      	cmp	r0, #0
 8005840:	9b08      	ldr	r3, [sp, #32]
 8005842:	dc02      	bgt.n	800584a <_dtoa_r+0xaba>
 8005844:	d1de      	bne.n	8005804 <_dtoa_r+0xa74>
 8005846:	07da      	lsls	r2, r3, #31
 8005848:	d5dc      	bpl.n	8005804 <_dtoa_r+0xa74>
 800584a:	2b39      	cmp	r3, #57	; 0x39
 800584c:	d1d8      	bne.n	8005800 <_dtoa_r+0xa70>
 800584e:	2339      	movs	r3, #57	; 0x39
 8005850:	9a04      	ldr	r2, [sp, #16]
 8005852:	7013      	strb	r3, [r2, #0]
 8005854:	463b      	mov	r3, r7
 8005856:	461f      	mov	r7, r3
 8005858:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800585c:	3b01      	subs	r3, #1
 800585e:	2a39      	cmp	r2, #57	; 0x39
 8005860:	d050      	beq.n	8005904 <_dtoa_r+0xb74>
 8005862:	3201      	adds	r2, #1
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	e747      	b.n	80056f8 <_dtoa_r+0x968>
 8005868:	2a00      	cmp	r2, #0
 800586a:	dd03      	ble.n	8005874 <_dtoa_r+0xae4>
 800586c:	2b39      	cmp	r3, #57	; 0x39
 800586e:	d0ee      	beq.n	800584e <_dtoa_r+0xabe>
 8005870:	3301      	adds	r3, #1
 8005872:	e7c7      	b.n	8005804 <_dtoa_r+0xa74>
 8005874:	9a08      	ldr	r2, [sp, #32]
 8005876:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005878:	f802 3c01 	strb.w	r3, [r2, #-1]
 800587c:	428a      	cmp	r2, r1
 800587e:	d02a      	beq.n	80058d6 <_dtoa_r+0xb46>
 8005880:	4659      	mov	r1, fp
 8005882:	2300      	movs	r3, #0
 8005884:	220a      	movs	r2, #10
 8005886:	4628      	mov	r0, r5
 8005888:	f000 f8fa 	bl	8005a80 <__multadd>
 800588c:	45b0      	cmp	r8, r6
 800588e:	4683      	mov	fp, r0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	f04f 020a 	mov.w	r2, #10
 8005898:	4641      	mov	r1, r8
 800589a:	4628      	mov	r0, r5
 800589c:	d107      	bne.n	80058ae <_dtoa_r+0xb1e>
 800589e:	f000 f8ef 	bl	8005a80 <__multadd>
 80058a2:	4680      	mov	r8, r0
 80058a4:	4606      	mov	r6, r0
 80058a6:	9b08      	ldr	r3, [sp, #32]
 80058a8:	3301      	adds	r3, #1
 80058aa:	9308      	str	r3, [sp, #32]
 80058ac:	e775      	b.n	800579a <_dtoa_r+0xa0a>
 80058ae:	f000 f8e7 	bl	8005a80 <__multadd>
 80058b2:	4631      	mov	r1, r6
 80058b4:	4680      	mov	r8, r0
 80058b6:	2300      	movs	r3, #0
 80058b8:	220a      	movs	r2, #10
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 f8e0 	bl	8005a80 <__multadd>
 80058c0:	4606      	mov	r6, r0
 80058c2:	e7f0      	b.n	80058a6 <_dtoa_r+0xb16>
 80058c4:	f1b9 0f00 	cmp.w	r9, #0
 80058c8:	bfcc      	ite	gt
 80058ca:	464f      	movgt	r7, r9
 80058cc:	2701      	movle	r7, #1
 80058ce:	f04f 0800 	mov.w	r8, #0
 80058d2:	9a03      	ldr	r2, [sp, #12]
 80058d4:	4417      	add	r7, r2
 80058d6:	4659      	mov	r1, fp
 80058d8:	2201      	movs	r2, #1
 80058da:	4628      	mov	r0, r5
 80058dc:	9308      	str	r3, [sp, #32]
 80058de:	f000 fa7b 	bl	8005dd8 <__lshift>
 80058e2:	4621      	mov	r1, r4
 80058e4:	4683      	mov	fp, r0
 80058e6:	f000 fae7 	bl	8005eb8 <__mcmp>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	dcb2      	bgt.n	8005854 <_dtoa_r+0xac4>
 80058ee:	d102      	bne.n	80058f6 <_dtoa_r+0xb66>
 80058f0:	9b08      	ldr	r3, [sp, #32]
 80058f2:	07db      	lsls	r3, r3, #31
 80058f4:	d4ae      	bmi.n	8005854 <_dtoa_r+0xac4>
 80058f6:	463b      	mov	r3, r7
 80058f8:	461f      	mov	r7, r3
 80058fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058fe:	2a30      	cmp	r2, #48	; 0x30
 8005900:	d0fa      	beq.n	80058f8 <_dtoa_r+0xb68>
 8005902:	e6f9      	b.n	80056f8 <_dtoa_r+0x968>
 8005904:	9a03      	ldr	r2, [sp, #12]
 8005906:	429a      	cmp	r2, r3
 8005908:	d1a5      	bne.n	8005856 <_dtoa_r+0xac6>
 800590a:	2331      	movs	r3, #49	; 0x31
 800590c:	f10a 0a01 	add.w	sl, sl, #1
 8005910:	e779      	b.n	8005806 <_dtoa_r+0xa76>
 8005912:	4b14      	ldr	r3, [pc, #80]	; (8005964 <_dtoa_r+0xbd4>)
 8005914:	f7ff baa8 	b.w	8004e68 <_dtoa_r+0xd8>
 8005918:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800591a:	2b00      	cmp	r3, #0
 800591c:	f47f aa81 	bne.w	8004e22 <_dtoa_r+0x92>
 8005920:	4b11      	ldr	r3, [pc, #68]	; (8005968 <_dtoa_r+0xbd8>)
 8005922:	f7ff baa1 	b.w	8004e68 <_dtoa_r+0xd8>
 8005926:	f1b9 0f00 	cmp.w	r9, #0
 800592a:	dc03      	bgt.n	8005934 <_dtoa_r+0xba4>
 800592c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800592e:	2b02      	cmp	r3, #2
 8005930:	f73f aecb 	bgt.w	80056ca <_dtoa_r+0x93a>
 8005934:	9f03      	ldr	r7, [sp, #12]
 8005936:	4621      	mov	r1, r4
 8005938:	4658      	mov	r0, fp
 800593a:	f7ff f99d 	bl	8004c78 <quorem>
 800593e:	9a03      	ldr	r2, [sp, #12]
 8005940:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005944:	f807 3b01 	strb.w	r3, [r7], #1
 8005948:	1aba      	subs	r2, r7, r2
 800594a:	4591      	cmp	r9, r2
 800594c:	ddba      	ble.n	80058c4 <_dtoa_r+0xb34>
 800594e:	4659      	mov	r1, fp
 8005950:	2300      	movs	r3, #0
 8005952:	220a      	movs	r2, #10
 8005954:	4628      	mov	r0, r5
 8005956:	f000 f893 	bl	8005a80 <__multadd>
 800595a:	4683      	mov	fp, r0
 800595c:	e7eb      	b.n	8005936 <_dtoa_r+0xba6>
 800595e:	bf00      	nop
 8005960:	08007253 	.word	0x08007253
 8005964:	080071b0 	.word	0x080071b0
 8005968:	080071d4 	.word	0x080071d4

0800596c <_localeconv_r>:
 800596c:	4800      	ldr	r0, [pc, #0]	; (8005970 <_localeconv_r+0x4>)
 800596e:	4770      	bx	lr
 8005970:	20000164 	.word	0x20000164

08005974 <malloc>:
 8005974:	4b02      	ldr	r3, [pc, #8]	; (8005980 <malloc+0xc>)
 8005976:	4601      	mov	r1, r0
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	f000 bc1d 	b.w	80061b8 <_malloc_r>
 800597e:	bf00      	nop
 8005980:	20000010 	.word	0x20000010

08005984 <memchr>:
 8005984:	4603      	mov	r3, r0
 8005986:	b510      	push	{r4, lr}
 8005988:	b2c9      	uxtb	r1, r1
 800598a:	4402      	add	r2, r0
 800598c:	4293      	cmp	r3, r2
 800598e:	4618      	mov	r0, r3
 8005990:	d101      	bne.n	8005996 <memchr+0x12>
 8005992:	2000      	movs	r0, #0
 8005994:	e003      	b.n	800599e <memchr+0x1a>
 8005996:	7804      	ldrb	r4, [r0, #0]
 8005998:	3301      	adds	r3, #1
 800599a:	428c      	cmp	r4, r1
 800599c:	d1f6      	bne.n	800598c <memchr+0x8>
 800599e:	bd10      	pop	{r4, pc}

080059a0 <memcpy>:
 80059a0:	440a      	add	r2, r1
 80059a2:	4291      	cmp	r1, r2
 80059a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059a8:	d100      	bne.n	80059ac <memcpy+0xc>
 80059aa:	4770      	bx	lr
 80059ac:	b510      	push	{r4, lr}
 80059ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059b2:	4291      	cmp	r1, r2
 80059b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059b8:	d1f9      	bne.n	80059ae <memcpy+0xe>
 80059ba:	bd10      	pop	{r4, pc}

080059bc <_Balloc>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059c0:	4604      	mov	r4, r0
 80059c2:	460d      	mov	r5, r1
 80059c4:	b976      	cbnz	r6, 80059e4 <_Balloc+0x28>
 80059c6:	2010      	movs	r0, #16
 80059c8:	f7ff ffd4 	bl	8005974 <malloc>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6260      	str	r0, [r4, #36]	; 0x24
 80059d0:	b920      	cbnz	r0, 80059dc <_Balloc+0x20>
 80059d2:	2166      	movs	r1, #102	; 0x66
 80059d4:	4b17      	ldr	r3, [pc, #92]	; (8005a34 <_Balloc+0x78>)
 80059d6:	4818      	ldr	r0, [pc, #96]	; (8005a38 <_Balloc+0x7c>)
 80059d8:	f000 fdce 	bl	8006578 <__assert_func>
 80059dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059e0:	6006      	str	r6, [r0, #0]
 80059e2:	60c6      	str	r6, [r0, #12]
 80059e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059e6:	68f3      	ldr	r3, [r6, #12]
 80059e8:	b183      	cbz	r3, 8005a0c <_Balloc+0x50>
 80059ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059f2:	b9b8      	cbnz	r0, 8005a24 <_Balloc+0x68>
 80059f4:	2101      	movs	r1, #1
 80059f6:	fa01 f605 	lsl.w	r6, r1, r5
 80059fa:	1d72      	adds	r2, r6, #5
 80059fc:	4620      	mov	r0, r4
 80059fe:	0092      	lsls	r2, r2, #2
 8005a00:	f000 fb5e 	bl	80060c0 <_calloc_r>
 8005a04:	b160      	cbz	r0, 8005a20 <_Balloc+0x64>
 8005a06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a0a:	e00e      	b.n	8005a2a <_Balloc+0x6e>
 8005a0c:	2221      	movs	r2, #33	; 0x21
 8005a0e:	2104      	movs	r1, #4
 8005a10:	4620      	mov	r0, r4
 8005a12:	f000 fb55 	bl	80060c0 <_calloc_r>
 8005a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a18:	60f0      	str	r0, [r6, #12]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e4      	bne.n	80059ea <_Balloc+0x2e>
 8005a20:	2000      	movs	r0, #0
 8005a22:	bd70      	pop	{r4, r5, r6, pc}
 8005a24:	6802      	ldr	r2, [r0, #0]
 8005a26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a30:	e7f7      	b.n	8005a22 <_Balloc+0x66>
 8005a32:	bf00      	nop
 8005a34:	080071e1 	.word	0x080071e1
 8005a38:	08007264 	.word	0x08007264

08005a3c <_Bfree>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a40:	4605      	mov	r5, r0
 8005a42:	460c      	mov	r4, r1
 8005a44:	b976      	cbnz	r6, 8005a64 <_Bfree+0x28>
 8005a46:	2010      	movs	r0, #16
 8005a48:	f7ff ff94 	bl	8005974 <malloc>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6268      	str	r0, [r5, #36]	; 0x24
 8005a50:	b920      	cbnz	r0, 8005a5c <_Bfree+0x20>
 8005a52:	218a      	movs	r1, #138	; 0x8a
 8005a54:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <_Bfree+0x3c>)
 8005a56:	4809      	ldr	r0, [pc, #36]	; (8005a7c <_Bfree+0x40>)
 8005a58:	f000 fd8e 	bl	8006578 <__assert_func>
 8005a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a60:	6006      	str	r6, [r0, #0]
 8005a62:	60c6      	str	r6, [r0, #12]
 8005a64:	b13c      	cbz	r4, 8005a76 <_Bfree+0x3a>
 8005a66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a68:	6862      	ldr	r2, [r4, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a70:	6021      	str	r1, [r4, #0]
 8005a72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	080071e1 	.word	0x080071e1
 8005a7c:	08007264 	.word	0x08007264

08005a80 <__multadd>:
 8005a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a84:	4607      	mov	r7, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	461e      	mov	r6, r3
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	690d      	ldr	r5, [r1, #16]
 8005a8e:	f101 0c14 	add.w	ip, r1, #20
 8005a92:	f8dc 3000 	ldr.w	r3, [ip]
 8005a96:	3001      	adds	r0, #1
 8005a98:	b299      	uxth	r1, r3
 8005a9a:	fb02 6101 	mla	r1, r2, r1, r6
 8005a9e:	0c1e      	lsrs	r6, r3, #16
 8005aa0:	0c0b      	lsrs	r3, r1, #16
 8005aa2:	fb02 3306 	mla	r3, r2, r6, r3
 8005aa6:	b289      	uxth	r1, r1
 8005aa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005aac:	4285      	cmp	r5, r0
 8005aae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ab2:	f84c 1b04 	str.w	r1, [ip], #4
 8005ab6:	dcec      	bgt.n	8005a92 <__multadd+0x12>
 8005ab8:	b30e      	cbz	r6, 8005afe <__multadd+0x7e>
 8005aba:	68a3      	ldr	r3, [r4, #8]
 8005abc:	42ab      	cmp	r3, r5
 8005abe:	dc19      	bgt.n	8005af4 <__multadd+0x74>
 8005ac0:	6861      	ldr	r1, [r4, #4]
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	3101      	adds	r1, #1
 8005ac6:	f7ff ff79 	bl	80059bc <_Balloc>
 8005aca:	4680      	mov	r8, r0
 8005acc:	b928      	cbnz	r0, 8005ada <__multadd+0x5a>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	21b5      	movs	r1, #181	; 0xb5
 8005ad2:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <__multadd+0x84>)
 8005ad4:	480c      	ldr	r0, [pc, #48]	; (8005b08 <__multadd+0x88>)
 8005ad6:	f000 fd4f 	bl	8006578 <__assert_func>
 8005ada:	6922      	ldr	r2, [r4, #16]
 8005adc:	f104 010c 	add.w	r1, r4, #12
 8005ae0:	3202      	adds	r2, #2
 8005ae2:	0092      	lsls	r2, r2, #2
 8005ae4:	300c      	adds	r0, #12
 8005ae6:	f7ff ff5b 	bl	80059a0 <memcpy>
 8005aea:	4621      	mov	r1, r4
 8005aec:	4638      	mov	r0, r7
 8005aee:	f7ff ffa5 	bl	8005a3c <_Bfree>
 8005af2:	4644      	mov	r4, r8
 8005af4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005af8:	3501      	adds	r5, #1
 8005afa:	615e      	str	r6, [r3, #20]
 8005afc:	6125      	str	r5, [r4, #16]
 8005afe:	4620      	mov	r0, r4
 8005b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b04:	08007253 	.word	0x08007253
 8005b08:	08007264 	.word	0x08007264

08005b0c <__hi0bits>:
 8005b0c:	0c02      	lsrs	r2, r0, #16
 8005b0e:	0412      	lsls	r2, r2, #16
 8005b10:	4603      	mov	r3, r0
 8005b12:	b9ca      	cbnz	r2, 8005b48 <__hi0bits+0x3c>
 8005b14:	0403      	lsls	r3, r0, #16
 8005b16:	2010      	movs	r0, #16
 8005b18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b1c:	bf04      	itt	eq
 8005b1e:	021b      	lsleq	r3, r3, #8
 8005b20:	3008      	addeq	r0, #8
 8005b22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b26:	bf04      	itt	eq
 8005b28:	011b      	lsleq	r3, r3, #4
 8005b2a:	3004      	addeq	r0, #4
 8005b2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b30:	bf04      	itt	eq
 8005b32:	009b      	lsleq	r3, r3, #2
 8005b34:	3002      	addeq	r0, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	db05      	blt.n	8005b46 <__hi0bits+0x3a>
 8005b3a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005b3e:	f100 0001 	add.w	r0, r0, #1
 8005b42:	bf08      	it	eq
 8005b44:	2020      	moveq	r0, #32
 8005b46:	4770      	bx	lr
 8005b48:	2000      	movs	r0, #0
 8005b4a:	e7e5      	b.n	8005b18 <__hi0bits+0xc>

08005b4c <__lo0bits>:
 8005b4c:	6803      	ldr	r3, [r0, #0]
 8005b4e:	4602      	mov	r2, r0
 8005b50:	f013 0007 	ands.w	r0, r3, #7
 8005b54:	d00b      	beq.n	8005b6e <__lo0bits+0x22>
 8005b56:	07d9      	lsls	r1, r3, #31
 8005b58:	d421      	bmi.n	8005b9e <__lo0bits+0x52>
 8005b5a:	0798      	lsls	r0, r3, #30
 8005b5c:	bf49      	itett	mi
 8005b5e:	085b      	lsrmi	r3, r3, #1
 8005b60:	089b      	lsrpl	r3, r3, #2
 8005b62:	2001      	movmi	r0, #1
 8005b64:	6013      	strmi	r3, [r2, #0]
 8005b66:	bf5c      	itt	pl
 8005b68:	2002      	movpl	r0, #2
 8005b6a:	6013      	strpl	r3, [r2, #0]
 8005b6c:	4770      	bx	lr
 8005b6e:	b299      	uxth	r1, r3
 8005b70:	b909      	cbnz	r1, 8005b76 <__lo0bits+0x2a>
 8005b72:	2010      	movs	r0, #16
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	b2d9      	uxtb	r1, r3
 8005b78:	b909      	cbnz	r1, 8005b7e <__lo0bits+0x32>
 8005b7a:	3008      	adds	r0, #8
 8005b7c:	0a1b      	lsrs	r3, r3, #8
 8005b7e:	0719      	lsls	r1, r3, #28
 8005b80:	bf04      	itt	eq
 8005b82:	091b      	lsreq	r3, r3, #4
 8005b84:	3004      	addeq	r0, #4
 8005b86:	0799      	lsls	r1, r3, #30
 8005b88:	bf04      	itt	eq
 8005b8a:	089b      	lsreq	r3, r3, #2
 8005b8c:	3002      	addeq	r0, #2
 8005b8e:	07d9      	lsls	r1, r3, #31
 8005b90:	d403      	bmi.n	8005b9a <__lo0bits+0x4e>
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	f100 0001 	add.w	r0, r0, #1
 8005b98:	d003      	beq.n	8005ba2 <__lo0bits+0x56>
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	4770      	bx	lr
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	4770      	bx	lr
 8005ba2:	2020      	movs	r0, #32
 8005ba4:	4770      	bx	lr
	...

08005ba8 <__i2b>:
 8005ba8:	b510      	push	{r4, lr}
 8005baa:	460c      	mov	r4, r1
 8005bac:	2101      	movs	r1, #1
 8005bae:	f7ff ff05 	bl	80059bc <_Balloc>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	b928      	cbnz	r0, 8005bc2 <__i2b+0x1a>
 8005bb6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005bba:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <__i2b+0x24>)
 8005bbc:	4804      	ldr	r0, [pc, #16]	; (8005bd0 <__i2b+0x28>)
 8005bbe:	f000 fcdb 	bl	8006578 <__assert_func>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	6144      	str	r4, [r0, #20]
 8005bc6:	6103      	str	r3, [r0, #16]
 8005bc8:	bd10      	pop	{r4, pc}
 8005bca:	bf00      	nop
 8005bcc:	08007253 	.word	0x08007253
 8005bd0:	08007264 	.word	0x08007264

08005bd4 <__multiply>:
 8005bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	4691      	mov	r9, r2
 8005bda:	690a      	ldr	r2, [r1, #16]
 8005bdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005be0:	460c      	mov	r4, r1
 8005be2:	429a      	cmp	r2, r3
 8005be4:	bfbe      	ittt	lt
 8005be6:	460b      	movlt	r3, r1
 8005be8:	464c      	movlt	r4, r9
 8005bea:	4699      	movlt	r9, r3
 8005bec:	6927      	ldr	r7, [r4, #16]
 8005bee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005bf2:	68a3      	ldr	r3, [r4, #8]
 8005bf4:	6861      	ldr	r1, [r4, #4]
 8005bf6:	eb07 060a 	add.w	r6, r7, sl
 8005bfa:	42b3      	cmp	r3, r6
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	bfb8      	it	lt
 8005c00:	3101      	addlt	r1, #1
 8005c02:	f7ff fedb 	bl	80059bc <_Balloc>
 8005c06:	b930      	cbnz	r0, 8005c16 <__multiply+0x42>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	f240 115d 	movw	r1, #349	; 0x15d
 8005c0e:	4b43      	ldr	r3, [pc, #268]	; (8005d1c <__multiply+0x148>)
 8005c10:	4843      	ldr	r0, [pc, #268]	; (8005d20 <__multiply+0x14c>)
 8005c12:	f000 fcb1 	bl	8006578 <__assert_func>
 8005c16:	f100 0514 	add.w	r5, r0, #20
 8005c1a:	462b      	mov	r3, r5
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c22:	4543      	cmp	r3, r8
 8005c24:	d321      	bcc.n	8005c6a <__multiply+0x96>
 8005c26:	f104 0314 	add.w	r3, r4, #20
 8005c2a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005c2e:	f109 0314 	add.w	r3, r9, #20
 8005c32:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005c36:	9202      	str	r2, [sp, #8]
 8005c38:	1b3a      	subs	r2, r7, r4
 8005c3a:	3a15      	subs	r2, #21
 8005c3c:	f022 0203 	bic.w	r2, r2, #3
 8005c40:	3204      	adds	r2, #4
 8005c42:	f104 0115 	add.w	r1, r4, #21
 8005c46:	428f      	cmp	r7, r1
 8005c48:	bf38      	it	cc
 8005c4a:	2204      	movcc	r2, #4
 8005c4c:	9201      	str	r2, [sp, #4]
 8005c4e:	9a02      	ldr	r2, [sp, #8]
 8005c50:	9303      	str	r3, [sp, #12]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d80c      	bhi.n	8005c70 <__multiply+0x9c>
 8005c56:	2e00      	cmp	r6, #0
 8005c58:	dd03      	ble.n	8005c62 <__multiply+0x8e>
 8005c5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d059      	beq.n	8005d16 <__multiply+0x142>
 8005c62:	6106      	str	r6, [r0, #16]
 8005c64:	b005      	add	sp, #20
 8005c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6a:	f843 2b04 	str.w	r2, [r3], #4
 8005c6e:	e7d8      	b.n	8005c22 <__multiply+0x4e>
 8005c70:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c74:	f1ba 0f00 	cmp.w	sl, #0
 8005c78:	d023      	beq.n	8005cc2 <__multiply+0xee>
 8005c7a:	46a9      	mov	r9, r5
 8005c7c:	f04f 0c00 	mov.w	ip, #0
 8005c80:	f104 0e14 	add.w	lr, r4, #20
 8005c84:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c88:	f8d9 1000 	ldr.w	r1, [r9]
 8005c8c:	fa1f fb82 	uxth.w	fp, r2
 8005c90:	b289      	uxth	r1, r1
 8005c92:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c96:	4461      	add	r1, ip
 8005c98:	f8d9 c000 	ldr.w	ip, [r9]
 8005c9c:	0c12      	lsrs	r2, r2, #16
 8005c9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005ca2:	fb0a c202 	mla	r2, sl, r2, ip
 8005ca6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005caa:	b289      	uxth	r1, r1
 8005cac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005cb0:	4577      	cmp	r7, lr
 8005cb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005cb6:	f849 1b04 	str.w	r1, [r9], #4
 8005cba:	d8e3      	bhi.n	8005c84 <__multiply+0xb0>
 8005cbc:	9a01      	ldr	r2, [sp, #4]
 8005cbe:	f845 c002 	str.w	ip, [r5, r2]
 8005cc2:	9a03      	ldr	r2, [sp, #12]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005cca:	f1b9 0f00 	cmp.w	r9, #0
 8005cce:	d020      	beq.n	8005d12 <__multiply+0x13e>
 8005cd0:	46ae      	mov	lr, r5
 8005cd2:	f04f 0a00 	mov.w	sl, #0
 8005cd6:	6829      	ldr	r1, [r5, #0]
 8005cd8:	f104 0c14 	add.w	ip, r4, #20
 8005cdc:	f8bc b000 	ldrh.w	fp, [ip]
 8005ce0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ce4:	b289      	uxth	r1, r1
 8005ce6:	fb09 220b 	mla	r2, r9, fp, r2
 8005cea:	4492      	add	sl, r2
 8005cec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005cf0:	f84e 1b04 	str.w	r1, [lr], #4
 8005cf4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005cf8:	f8be 1000 	ldrh.w	r1, [lr]
 8005cfc:	0c12      	lsrs	r2, r2, #16
 8005cfe:	fb09 1102 	mla	r1, r9, r2, r1
 8005d02:	4567      	cmp	r7, ip
 8005d04:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005d08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d0c:	d8e6      	bhi.n	8005cdc <__multiply+0x108>
 8005d0e:	9a01      	ldr	r2, [sp, #4]
 8005d10:	50a9      	str	r1, [r5, r2]
 8005d12:	3504      	adds	r5, #4
 8005d14:	e79b      	b.n	8005c4e <__multiply+0x7a>
 8005d16:	3e01      	subs	r6, #1
 8005d18:	e79d      	b.n	8005c56 <__multiply+0x82>
 8005d1a:	bf00      	nop
 8005d1c:	08007253 	.word	0x08007253
 8005d20:	08007264 	.word	0x08007264

08005d24 <__pow5mult>:
 8005d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d28:	4615      	mov	r5, r2
 8005d2a:	f012 0203 	ands.w	r2, r2, #3
 8005d2e:	4606      	mov	r6, r0
 8005d30:	460f      	mov	r7, r1
 8005d32:	d007      	beq.n	8005d44 <__pow5mult+0x20>
 8005d34:	4c25      	ldr	r4, [pc, #148]	; (8005dcc <__pow5mult+0xa8>)
 8005d36:	3a01      	subs	r2, #1
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d3e:	f7ff fe9f 	bl	8005a80 <__multadd>
 8005d42:	4607      	mov	r7, r0
 8005d44:	10ad      	asrs	r5, r5, #2
 8005d46:	d03d      	beq.n	8005dc4 <__pow5mult+0xa0>
 8005d48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d4a:	b97c      	cbnz	r4, 8005d6c <__pow5mult+0x48>
 8005d4c:	2010      	movs	r0, #16
 8005d4e:	f7ff fe11 	bl	8005974 <malloc>
 8005d52:	4602      	mov	r2, r0
 8005d54:	6270      	str	r0, [r6, #36]	; 0x24
 8005d56:	b928      	cbnz	r0, 8005d64 <__pow5mult+0x40>
 8005d58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d5c:	4b1c      	ldr	r3, [pc, #112]	; (8005dd0 <__pow5mult+0xac>)
 8005d5e:	481d      	ldr	r0, [pc, #116]	; (8005dd4 <__pow5mult+0xb0>)
 8005d60:	f000 fc0a 	bl	8006578 <__assert_func>
 8005d64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d68:	6004      	str	r4, [r0, #0]
 8005d6a:	60c4      	str	r4, [r0, #12]
 8005d6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d74:	b94c      	cbnz	r4, 8005d8a <__pow5mult+0x66>
 8005d76:	f240 2171 	movw	r1, #625	; 0x271
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	f7ff ff14 	bl	8005ba8 <__i2b>
 8005d80:	2300      	movs	r3, #0
 8005d82:	4604      	mov	r4, r0
 8005d84:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d88:	6003      	str	r3, [r0, #0]
 8005d8a:	f04f 0900 	mov.w	r9, #0
 8005d8e:	07eb      	lsls	r3, r5, #31
 8005d90:	d50a      	bpl.n	8005da8 <__pow5mult+0x84>
 8005d92:	4639      	mov	r1, r7
 8005d94:	4622      	mov	r2, r4
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7ff ff1c 	bl	8005bd4 <__multiply>
 8005d9c:	4680      	mov	r8, r0
 8005d9e:	4639      	mov	r1, r7
 8005da0:	4630      	mov	r0, r6
 8005da2:	f7ff fe4b 	bl	8005a3c <_Bfree>
 8005da6:	4647      	mov	r7, r8
 8005da8:	106d      	asrs	r5, r5, #1
 8005daa:	d00b      	beq.n	8005dc4 <__pow5mult+0xa0>
 8005dac:	6820      	ldr	r0, [r4, #0]
 8005dae:	b938      	cbnz	r0, 8005dc0 <__pow5mult+0x9c>
 8005db0:	4622      	mov	r2, r4
 8005db2:	4621      	mov	r1, r4
 8005db4:	4630      	mov	r0, r6
 8005db6:	f7ff ff0d 	bl	8005bd4 <__multiply>
 8005dba:	6020      	str	r0, [r4, #0]
 8005dbc:	f8c0 9000 	str.w	r9, [r0]
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	e7e4      	b.n	8005d8e <__pow5mult+0x6a>
 8005dc4:	4638      	mov	r0, r7
 8005dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dca:	bf00      	nop
 8005dcc:	080073b0 	.word	0x080073b0
 8005dd0:	080071e1 	.word	0x080071e1
 8005dd4:	08007264 	.word	0x08007264

08005dd8 <__lshift>:
 8005dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ddc:	460c      	mov	r4, r1
 8005dde:	4607      	mov	r7, r0
 8005de0:	4691      	mov	r9, r2
 8005de2:	6923      	ldr	r3, [r4, #16]
 8005de4:	6849      	ldr	r1, [r1, #4]
 8005de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005dea:	68a3      	ldr	r3, [r4, #8]
 8005dec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005df0:	f108 0601 	add.w	r6, r8, #1
 8005df4:	42b3      	cmp	r3, r6
 8005df6:	db0b      	blt.n	8005e10 <__lshift+0x38>
 8005df8:	4638      	mov	r0, r7
 8005dfa:	f7ff fddf 	bl	80059bc <_Balloc>
 8005dfe:	4605      	mov	r5, r0
 8005e00:	b948      	cbnz	r0, 8005e16 <__lshift+0x3e>
 8005e02:	4602      	mov	r2, r0
 8005e04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e08:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <__lshift+0xd8>)
 8005e0a:	482a      	ldr	r0, [pc, #168]	; (8005eb4 <__lshift+0xdc>)
 8005e0c:	f000 fbb4 	bl	8006578 <__assert_func>
 8005e10:	3101      	adds	r1, #1
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	e7ee      	b.n	8005df4 <__lshift+0x1c>
 8005e16:	2300      	movs	r3, #0
 8005e18:	f100 0114 	add.w	r1, r0, #20
 8005e1c:	f100 0210 	add.w	r2, r0, #16
 8005e20:	4618      	mov	r0, r3
 8005e22:	4553      	cmp	r3, sl
 8005e24:	db37      	blt.n	8005e96 <__lshift+0xbe>
 8005e26:	6920      	ldr	r0, [r4, #16]
 8005e28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e2c:	f104 0314 	add.w	r3, r4, #20
 8005e30:	f019 091f 	ands.w	r9, r9, #31
 8005e34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e3c:	d02f      	beq.n	8005e9e <__lshift+0xc6>
 8005e3e:	468a      	mov	sl, r1
 8005e40:	f04f 0c00 	mov.w	ip, #0
 8005e44:	f1c9 0e20 	rsb	lr, r9, #32
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	fa02 f209 	lsl.w	r2, r2, r9
 8005e4e:	ea42 020c 	orr.w	r2, r2, ip
 8005e52:	f84a 2b04 	str.w	r2, [sl], #4
 8005e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e5a:	4298      	cmp	r0, r3
 8005e5c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005e60:	d8f2      	bhi.n	8005e48 <__lshift+0x70>
 8005e62:	1b03      	subs	r3, r0, r4
 8005e64:	3b15      	subs	r3, #21
 8005e66:	f023 0303 	bic.w	r3, r3, #3
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	f104 0215 	add.w	r2, r4, #21
 8005e70:	4290      	cmp	r0, r2
 8005e72:	bf38      	it	cc
 8005e74:	2304      	movcc	r3, #4
 8005e76:	f841 c003 	str.w	ip, [r1, r3]
 8005e7a:	f1bc 0f00 	cmp.w	ip, #0
 8005e7e:	d001      	beq.n	8005e84 <__lshift+0xac>
 8005e80:	f108 0602 	add.w	r6, r8, #2
 8005e84:	3e01      	subs	r6, #1
 8005e86:	4638      	mov	r0, r7
 8005e88:	4621      	mov	r1, r4
 8005e8a:	612e      	str	r6, [r5, #16]
 8005e8c:	f7ff fdd6 	bl	8005a3c <_Bfree>
 8005e90:	4628      	mov	r0, r5
 8005e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e96:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	e7c1      	b.n	8005e22 <__lshift+0x4a>
 8005e9e:	3904      	subs	r1, #4
 8005ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ea4:	4298      	cmp	r0, r3
 8005ea6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005eaa:	d8f9      	bhi.n	8005ea0 <__lshift+0xc8>
 8005eac:	e7ea      	b.n	8005e84 <__lshift+0xac>
 8005eae:	bf00      	nop
 8005eb0:	08007253 	.word	0x08007253
 8005eb4:	08007264 	.word	0x08007264

08005eb8 <__mcmp>:
 8005eb8:	4603      	mov	r3, r0
 8005eba:	690a      	ldr	r2, [r1, #16]
 8005ebc:	6900      	ldr	r0, [r0, #16]
 8005ebe:	b530      	push	{r4, r5, lr}
 8005ec0:	1a80      	subs	r0, r0, r2
 8005ec2:	d10d      	bne.n	8005ee0 <__mcmp+0x28>
 8005ec4:	3314      	adds	r3, #20
 8005ec6:	3114      	adds	r1, #20
 8005ec8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ecc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ed0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ed4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ed8:	4295      	cmp	r5, r2
 8005eda:	d002      	beq.n	8005ee2 <__mcmp+0x2a>
 8005edc:	d304      	bcc.n	8005ee8 <__mcmp+0x30>
 8005ede:	2001      	movs	r0, #1
 8005ee0:	bd30      	pop	{r4, r5, pc}
 8005ee2:	42a3      	cmp	r3, r4
 8005ee4:	d3f4      	bcc.n	8005ed0 <__mcmp+0x18>
 8005ee6:	e7fb      	b.n	8005ee0 <__mcmp+0x28>
 8005ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eec:	e7f8      	b.n	8005ee0 <__mcmp+0x28>
	...

08005ef0 <__mdiff>:
 8005ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef4:	460d      	mov	r5, r1
 8005ef6:	4607      	mov	r7, r0
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4628      	mov	r0, r5
 8005efc:	4614      	mov	r4, r2
 8005efe:	f7ff ffdb 	bl	8005eb8 <__mcmp>
 8005f02:	1e06      	subs	r6, r0, #0
 8005f04:	d111      	bne.n	8005f2a <__mdiff+0x3a>
 8005f06:	4631      	mov	r1, r6
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f7ff fd57 	bl	80059bc <_Balloc>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	b928      	cbnz	r0, 8005f1e <__mdiff+0x2e>
 8005f12:	f240 2132 	movw	r1, #562	; 0x232
 8005f16:	4b3a      	ldr	r3, [pc, #232]	; (8006000 <__mdiff+0x110>)
 8005f18:	483a      	ldr	r0, [pc, #232]	; (8006004 <__mdiff+0x114>)
 8005f1a:	f000 fb2d 	bl	8006578 <__assert_func>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f24:	4610      	mov	r0, r2
 8005f26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2a:	bfa4      	itt	ge
 8005f2c:	4623      	movge	r3, r4
 8005f2e:	462c      	movge	r4, r5
 8005f30:	4638      	mov	r0, r7
 8005f32:	6861      	ldr	r1, [r4, #4]
 8005f34:	bfa6      	itte	ge
 8005f36:	461d      	movge	r5, r3
 8005f38:	2600      	movge	r6, #0
 8005f3a:	2601      	movlt	r6, #1
 8005f3c:	f7ff fd3e 	bl	80059bc <_Balloc>
 8005f40:	4602      	mov	r2, r0
 8005f42:	b918      	cbnz	r0, 8005f4c <__mdiff+0x5c>
 8005f44:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f48:	4b2d      	ldr	r3, [pc, #180]	; (8006000 <__mdiff+0x110>)
 8005f4a:	e7e5      	b.n	8005f18 <__mdiff+0x28>
 8005f4c:	f102 0814 	add.w	r8, r2, #20
 8005f50:	46c2      	mov	sl, r8
 8005f52:	f04f 0c00 	mov.w	ip, #0
 8005f56:	6927      	ldr	r7, [r4, #16]
 8005f58:	60c6      	str	r6, [r0, #12]
 8005f5a:	692e      	ldr	r6, [r5, #16]
 8005f5c:	f104 0014 	add.w	r0, r4, #20
 8005f60:	f105 0914 	add.w	r9, r5, #20
 8005f64:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005f68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f6c:	3410      	adds	r4, #16
 8005f6e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005f72:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f76:	fa1f f18b 	uxth.w	r1, fp
 8005f7a:	448c      	add	ip, r1
 8005f7c:	b299      	uxth	r1, r3
 8005f7e:	0c1b      	lsrs	r3, r3, #16
 8005f80:	ebac 0101 	sub.w	r1, ip, r1
 8005f84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f88:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f8c:	b289      	uxth	r1, r1
 8005f8e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f92:	454e      	cmp	r6, r9
 8005f94:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f98:	f84a 3b04 	str.w	r3, [sl], #4
 8005f9c:	d8e7      	bhi.n	8005f6e <__mdiff+0x7e>
 8005f9e:	1b73      	subs	r3, r6, r5
 8005fa0:	3b15      	subs	r3, #21
 8005fa2:	f023 0303 	bic.w	r3, r3, #3
 8005fa6:	3515      	adds	r5, #21
 8005fa8:	3304      	adds	r3, #4
 8005faa:	42ae      	cmp	r6, r5
 8005fac:	bf38      	it	cc
 8005fae:	2304      	movcc	r3, #4
 8005fb0:	4418      	add	r0, r3
 8005fb2:	4443      	add	r3, r8
 8005fb4:	461e      	mov	r6, r3
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	4575      	cmp	r5, lr
 8005fba:	d30e      	bcc.n	8005fda <__mdiff+0xea>
 8005fbc:	f10e 0103 	add.w	r1, lr, #3
 8005fc0:	1a09      	subs	r1, r1, r0
 8005fc2:	f021 0103 	bic.w	r1, r1, #3
 8005fc6:	3803      	subs	r0, #3
 8005fc8:	4586      	cmp	lr, r0
 8005fca:	bf38      	it	cc
 8005fcc:	2100      	movcc	r1, #0
 8005fce:	4419      	add	r1, r3
 8005fd0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005fd4:	b18b      	cbz	r3, 8005ffa <__mdiff+0x10a>
 8005fd6:	6117      	str	r7, [r2, #16]
 8005fd8:	e7a4      	b.n	8005f24 <__mdiff+0x34>
 8005fda:	f855 8b04 	ldr.w	r8, [r5], #4
 8005fde:	fa1f f188 	uxth.w	r1, r8
 8005fe2:	4461      	add	r1, ip
 8005fe4:	140c      	asrs	r4, r1, #16
 8005fe6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005fea:	b289      	uxth	r1, r1
 8005fec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005ff0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005ff4:	f846 1b04 	str.w	r1, [r6], #4
 8005ff8:	e7de      	b.n	8005fb8 <__mdiff+0xc8>
 8005ffa:	3f01      	subs	r7, #1
 8005ffc:	e7e8      	b.n	8005fd0 <__mdiff+0xe0>
 8005ffe:	bf00      	nop
 8006000:	08007253 	.word	0x08007253
 8006004:	08007264 	.word	0x08007264

08006008 <__d2b>:
 8006008:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800600c:	2101      	movs	r1, #1
 800600e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006012:	4690      	mov	r8, r2
 8006014:	461d      	mov	r5, r3
 8006016:	f7ff fcd1 	bl	80059bc <_Balloc>
 800601a:	4604      	mov	r4, r0
 800601c:	b930      	cbnz	r0, 800602c <__d2b+0x24>
 800601e:	4602      	mov	r2, r0
 8006020:	f240 310a 	movw	r1, #778	; 0x30a
 8006024:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <__d2b+0xb0>)
 8006026:	4825      	ldr	r0, [pc, #148]	; (80060bc <__d2b+0xb4>)
 8006028:	f000 faa6 	bl	8006578 <__assert_func>
 800602c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006030:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006034:	bb2d      	cbnz	r5, 8006082 <__d2b+0x7a>
 8006036:	9301      	str	r3, [sp, #4]
 8006038:	f1b8 0300 	subs.w	r3, r8, #0
 800603c:	d026      	beq.n	800608c <__d2b+0x84>
 800603e:	4668      	mov	r0, sp
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	f7ff fd83 	bl	8005b4c <__lo0bits>
 8006046:	9900      	ldr	r1, [sp, #0]
 8006048:	b1f0      	cbz	r0, 8006088 <__d2b+0x80>
 800604a:	9a01      	ldr	r2, [sp, #4]
 800604c:	f1c0 0320 	rsb	r3, r0, #32
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	430b      	orrs	r3, r1
 8006056:	40c2      	lsrs	r2, r0
 8006058:	6163      	str	r3, [r4, #20]
 800605a:	9201      	str	r2, [sp, #4]
 800605c:	9b01      	ldr	r3, [sp, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	bf14      	ite	ne
 8006062:	2102      	movne	r1, #2
 8006064:	2101      	moveq	r1, #1
 8006066:	61a3      	str	r3, [r4, #24]
 8006068:	6121      	str	r1, [r4, #16]
 800606a:	b1c5      	cbz	r5, 800609e <__d2b+0x96>
 800606c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006070:	4405      	add	r5, r0
 8006072:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006076:	603d      	str	r5, [r7, #0]
 8006078:	6030      	str	r0, [r6, #0]
 800607a:	4620      	mov	r0, r4
 800607c:	b002      	add	sp, #8
 800607e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006086:	e7d6      	b.n	8006036 <__d2b+0x2e>
 8006088:	6161      	str	r1, [r4, #20]
 800608a:	e7e7      	b.n	800605c <__d2b+0x54>
 800608c:	a801      	add	r0, sp, #4
 800608e:	f7ff fd5d 	bl	8005b4c <__lo0bits>
 8006092:	2101      	movs	r1, #1
 8006094:	9b01      	ldr	r3, [sp, #4]
 8006096:	6121      	str	r1, [r4, #16]
 8006098:	6163      	str	r3, [r4, #20]
 800609a:	3020      	adds	r0, #32
 800609c:	e7e5      	b.n	800606a <__d2b+0x62>
 800609e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80060a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060a6:	6038      	str	r0, [r7, #0]
 80060a8:	6918      	ldr	r0, [r3, #16]
 80060aa:	f7ff fd2f 	bl	8005b0c <__hi0bits>
 80060ae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80060b2:	6031      	str	r1, [r6, #0]
 80060b4:	e7e1      	b.n	800607a <__d2b+0x72>
 80060b6:	bf00      	nop
 80060b8:	08007253 	.word	0x08007253
 80060bc:	08007264 	.word	0x08007264

080060c0 <_calloc_r>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	fba1 5402 	umull	r5, r4, r1, r2
 80060c6:	b934      	cbnz	r4, 80060d6 <_calloc_r+0x16>
 80060c8:	4629      	mov	r1, r5
 80060ca:	f000 f875 	bl	80061b8 <_malloc_r>
 80060ce:	4606      	mov	r6, r0
 80060d0:	b928      	cbnz	r0, 80060de <_calloc_r+0x1e>
 80060d2:	4630      	mov	r0, r6
 80060d4:	bd70      	pop	{r4, r5, r6, pc}
 80060d6:	220c      	movs	r2, #12
 80060d8:	2600      	movs	r6, #0
 80060da:	6002      	str	r2, [r0, #0]
 80060dc:	e7f9      	b.n	80060d2 <_calloc_r+0x12>
 80060de:	462a      	mov	r2, r5
 80060e0:	4621      	mov	r1, r4
 80060e2:	f7fe f92d 	bl	8004340 <memset>
 80060e6:	e7f4      	b.n	80060d2 <_calloc_r+0x12>

080060e8 <_free_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4605      	mov	r5, r0
 80060ec:	2900      	cmp	r1, #0
 80060ee:	d040      	beq.n	8006172 <_free_r+0x8a>
 80060f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f4:	1f0c      	subs	r4, r1, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bfb8      	it	lt
 80060fa:	18e4      	addlt	r4, r4, r3
 80060fc:	f000 fa98 	bl	8006630 <__malloc_lock>
 8006100:	4a1c      	ldr	r2, [pc, #112]	; (8006174 <_free_r+0x8c>)
 8006102:	6813      	ldr	r3, [r2, #0]
 8006104:	b933      	cbnz	r3, 8006114 <_free_r+0x2c>
 8006106:	6063      	str	r3, [r4, #4]
 8006108:	6014      	str	r4, [r2, #0]
 800610a:	4628      	mov	r0, r5
 800610c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006110:	f000 ba94 	b.w	800663c <__malloc_unlock>
 8006114:	42a3      	cmp	r3, r4
 8006116:	d908      	bls.n	800612a <_free_r+0x42>
 8006118:	6820      	ldr	r0, [r4, #0]
 800611a:	1821      	adds	r1, r4, r0
 800611c:	428b      	cmp	r3, r1
 800611e:	bf01      	itttt	eq
 8006120:	6819      	ldreq	r1, [r3, #0]
 8006122:	685b      	ldreq	r3, [r3, #4]
 8006124:	1809      	addeq	r1, r1, r0
 8006126:	6021      	streq	r1, [r4, #0]
 8006128:	e7ed      	b.n	8006106 <_free_r+0x1e>
 800612a:	461a      	mov	r2, r3
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	b10b      	cbz	r3, 8006134 <_free_r+0x4c>
 8006130:	42a3      	cmp	r3, r4
 8006132:	d9fa      	bls.n	800612a <_free_r+0x42>
 8006134:	6811      	ldr	r1, [r2, #0]
 8006136:	1850      	adds	r0, r2, r1
 8006138:	42a0      	cmp	r0, r4
 800613a:	d10b      	bne.n	8006154 <_free_r+0x6c>
 800613c:	6820      	ldr	r0, [r4, #0]
 800613e:	4401      	add	r1, r0
 8006140:	1850      	adds	r0, r2, r1
 8006142:	4283      	cmp	r3, r0
 8006144:	6011      	str	r1, [r2, #0]
 8006146:	d1e0      	bne.n	800610a <_free_r+0x22>
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	4401      	add	r1, r0
 800614e:	6011      	str	r1, [r2, #0]
 8006150:	6053      	str	r3, [r2, #4]
 8006152:	e7da      	b.n	800610a <_free_r+0x22>
 8006154:	d902      	bls.n	800615c <_free_r+0x74>
 8006156:	230c      	movs	r3, #12
 8006158:	602b      	str	r3, [r5, #0]
 800615a:	e7d6      	b.n	800610a <_free_r+0x22>
 800615c:	6820      	ldr	r0, [r4, #0]
 800615e:	1821      	adds	r1, r4, r0
 8006160:	428b      	cmp	r3, r1
 8006162:	bf01      	itttt	eq
 8006164:	6819      	ldreq	r1, [r3, #0]
 8006166:	685b      	ldreq	r3, [r3, #4]
 8006168:	1809      	addeq	r1, r1, r0
 800616a:	6021      	streq	r1, [r4, #0]
 800616c:	6063      	str	r3, [r4, #4]
 800616e:	6054      	str	r4, [r2, #4]
 8006170:	e7cb      	b.n	800610a <_free_r+0x22>
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	2000047c 	.word	0x2000047c

08006178 <sbrk_aligned>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	4e0e      	ldr	r6, [pc, #56]	; (80061b4 <sbrk_aligned+0x3c>)
 800617c:	460c      	mov	r4, r1
 800617e:	6831      	ldr	r1, [r6, #0]
 8006180:	4605      	mov	r5, r0
 8006182:	b911      	cbnz	r1, 800618a <sbrk_aligned+0x12>
 8006184:	f000 f9e8 	bl	8006558 <_sbrk_r>
 8006188:	6030      	str	r0, [r6, #0]
 800618a:	4621      	mov	r1, r4
 800618c:	4628      	mov	r0, r5
 800618e:	f000 f9e3 	bl	8006558 <_sbrk_r>
 8006192:	1c43      	adds	r3, r0, #1
 8006194:	d00a      	beq.n	80061ac <sbrk_aligned+0x34>
 8006196:	1cc4      	adds	r4, r0, #3
 8006198:	f024 0403 	bic.w	r4, r4, #3
 800619c:	42a0      	cmp	r0, r4
 800619e:	d007      	beq.n	80061b0 <sbrk_aligned+0x38>
 80061a0:	1a21      	subs	r1, r4, r0
 80061a2:	4628      	mov	r0, r5
 80061a4:	f000 f9d8 	bl	8006558 <_sbrk_r>
 80061a8:	3001      	adds	r0, #1
 80061aa:	d101      	bne.n	80061b0 <sbrk_aligned+0x38>
 80061ac:	f04f 34ff 	mov.w	r4, #4294967295
 80061b0:	4620      	mov	r0, r4
 80061b2:	bd70      	pop	{r4, r5, r6, pc}
 80061b4:	20000480 	.word	0x20000480

080061b8 <_malloc_r>:
 80061b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061bc:	1ccd      	adds	r5, r1, #3
 80061be:	f025 0503 	bic.w	r5, r5, #3
 80061c2:	3508      	adds	r5, #8
 80061c4:	2d0c      	cmp	r5, #12
 80061c6:	bf38      	it	cc
 80061c8:	250c      	movcc	r5, #12
 80061ca:	2d00      	cmp	r5, #0
 80061cc:	4607      	mov	r7, r0
 80061ce:	db01      	blt.n	80061d4 <_malloc_r+0x1c>
 80061d0:	42a9      	cmp	r1, r5
 80061d2:	d905      	bls.n	80061e0 <_malloc_r+0x28>
 80061d4:	230c      	movs	r3, #12
 80061d6:	2600      	movs	r6, #0
 80061d8:	603b      	str	r3, [r7, #0]
 80061da:	4630      	mov	r0, r6
 80061dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e0:	4e2e      	ldr	r6, [pc, #184]	; (800629c <_malloc_r+0xe4>)
 80061e2:	f000 fa25 	bl	8006630 <__malloc_lock>
 80061e6:	6833      	ldr	r3, [r6, #0]
 80061e8:	461c      	mov	r4, r3
 80061ea:	bb34      	cbnz	r4, 800623a <_malloc_r+0x82>
 80061ec:	4629      	mov	r1, r5
 80061ee:	4638      	mov	r0, r7
 80061f0:	f7ff ffc2 	bl	8006178 <sbrk_aligned>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	4604      	mov	r4, r0
 80061f8:	d14d      	bne.n	8006296 <_malloc_r+0xde>
 80061fa:	6834      	ldr	r4, [r6, #0]
 80061fc:	4626      	mov	r6, r4
 80061fe:	2e00      	cmp	r6, #0
 8006200:	d140      	bne.n	8006284 <_malloc_r+0xcc>
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	4631      	mov	r1, r6
 8006206:	4638      	mov	r0, r7
 8006208:	eb04 0803 	add.w	r8, r4, r3
 800620c:	f000 f9a4 	bl	8006558 <_sbrk_r>
 8006210:	4580      	cmp	r8, r0
 8006212:	d13a      	bne.n	800628a <_malloc_r+0xd2>
 8006214:	6821      	ldr	r1, [r4, #0]
 8006216:	3503      	adds	r5, #3
 8006218:	1a6d      	subs	r5, r5, r1
 800621a:	f025 0503 	bic.w	r5, r5, #3
 800621e:	3508      	adds	r5, #8
 8006220:	2d0c      	cmp	r5, #12
 8006222:	bf38      	it	cc
 8006224:	250c      	movcc	r5, #12
 8006226:	4638      	mov	r0, r7
 8006228:	4629      	mov	r1, r5
 800622a:	f7ff ffa5 	bl	8006178 <sbrk_aligned>
 800622e:	3001      	adds	r0, #1
 8006230:	d02b      	beq.n	800628a <_malloc_r+0xd2>
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	442b      	add	r3, r5
 8006236:	6023      	str	r3, [r4, #0]
 8006238:	e00e      	b.n	8006258 <_malloc_r+0xa0>
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	1b52      	subs	r2, r2, r5
 800623e:	d41e      	bmi.n	800627e <_malloc_r+0xc6>
 8006240:	2a0b      	cmp	r2, #11
 8006242:	d916      	bls.n	8006272 <_malloc_r+0xba>
 8006244:	1961      	adds	r1, r4, r5
 8006246:	42a3      	cmp	r3, r4
 8006248:	6025      	str	r5, [r4, #0]
 800624a:	bf18      	it	ne
 800624c:	6059      	strne	r1, [r3, #4]
 800624e:	6863      	ldr	r3, [r4, #4]
 8006250:	bf08      	it	eq
 8006252:	6031      	streq	r1, [r6, #0]
 8006254:	5162      	str	r2, [r4, r5]
 8006256:	604b      	str	r3, [r1, #4]
 8006258:	4638      	mov	r0, r7
 800625a:	f104 060b 	add.w	r6, r4, #11
 800625e:	f000 f9ed 	bl	800663c <__malloc_unlock>
 8006262:	f026 0607 	bic.w	r6, r6, #7
 8006266:	1d23      	adds	r3, r4, #4
 8006268:	1af2      	subs	r2, r6, r3
 800626a:	d0b6      	beq.n	80061da <_malloc_r+0x22>
 800626c:	1b9b      	subs	r3, r3, r6
 800626e:	50a3      	str	r3, [r4, r2]
 8006270:	e7b3      	b.n	80061da <_malloc_r+0x22>
 8006272:	6862      	ldr	r2, [r4, #4]
 8006274:	42a3      	cmp	r3, r4
 8006276:	bf0c      	ite	eq
 8006278:	6032      	streq	r2, [r6, #0]
 800627a:	605a      	strne	r2, [r3, #4]
 800627c:	e7ec      	b.n	8006258 <_malloc_r+0xa0>
 800627e:	4623      	mov	r3, r4
 8006280:	6864      	ldr	r4, [r4, #4]
 8006282:	e7b2      	b.n	80061ea <_malloc_r+0x32>
 8006284:	4634      	mov	r4, r6
 8006286:	6876      	ldr	r6, [r6, #4]
 8006288:	e7b9      	b.n	80061fe <_malloc_r+0x46>
 800628a:	230c      	movs	r3, #12
 800628c:	4638      	mov	r0, r7
 800628e:	603b      	str	r3, [r7, #0]
 8006290:	f000 f9d4 	bl	800663c <__malloc_unlock>
 8006294:	e7a1      	b.n	80061da <_malloc_r+0x22>
 8006296:	6025      	str	r5, [r4, #0]
 8006298:	e7de      	b.n	8006258 <_malloc_r+0xa0>
 800629a:	bf00      	nop
 800629c:	2000047c 	.word	0x2000047c

080062a0 <__ssputs_r>:
 80062a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a4:	688e      	ldr	r6, [r1, #8]
 80062a6:	4682      	mov	sl, r0
 80062a8:	429e      	cmp	r6, r3
 80062aa:	460c      	mov	r4, r1
 80062ac:	4690      	mov	r8, r2
 80062ae:	461f      	mov	r7, r3
 80062b0:	d838      	bhi.n	8006324 <__ssputs_r+0x84>
 80062b2:	898a      	ldrh	r2, [r1, #12]
 80062b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062b8:	d032      	beq.n	8006320 <__ssputs_r+0x80>
 80062ba:	6825      	ldr	r5, [r4, #0]
 80062bc:	6909      	ldr	r1, [r1, #16]
 80062be:	3301      	adds	r3, #1
 80062c0:	eba5 0901 	sub.w	r9, r5, r1
 80062c4:	6965      	ldr	r5, [r4, #20]
 80062c6:	444b      	add	r3, r9
 80062c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062d0:	106d      	asrs	r5, r5, #1
 80062d2:	429d      	cmp	r5, r3
 80062d4:	bf38      	it	cc
 80062d6:	461d      	movcc	r5, r3
 80062d8:	0553      	lsls	r3, r2, #21
 80062da:	d531      	bpl.n	8006340 <__ssputs_r+0xa0>
 80062dc:	4629      	mov	r1, r5
 80062de:	f7ff ff6b 	bl	80061b8 <_malloc_r>
 80062e2:	4606      	mov	r6, r0
 80062e4:	b950      	cbnz	r0, 80062fc <__ssputs_r+0x5c>
 80062e6:	230c      	movs	r3, #12
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	f8ca 3000 	str.w	r3, [sl]
 80062f0:	89a3      	ldrh	r3, [r4, #12]
 80062f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062f6:	81a3      	strh	r3, [r4, #12]
 80062f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fc:	464a      	mov	r2, r9
 80062fe:	6921      	ldr	r1, [r4, #16]
 8006300:	f7ff fb4e 	bl	80059a0 <memcpy>
 8006304:	89a3      	ldrh	r3, [r4, #12]
 8006306:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800630a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630e:	81a3      	strh	r3, [r4, #12]
 8006310:	6126      	str	r6, [r4, #16]
 8006312:	444e      	add	r6, r9
 8006314:	6026      	str	r6, [r4, #0]
 8006316:	463e      	mov	r6, r7
 8006318:	6165      	str	r5, [r4, #20]
 800631a:	eba5 0509 	sub.w	r5, r5, r9
 800631e:	60a5      	str	r5, [r4, #8]
 8006320:	42be      	cmp	r6, r7
 8006322:	d900      	bls.n	8006326 <__ssputs_r+0x86>
 8006324:	463e      	mov	r6, r7
 8006326:	4632      	mov	r2, r6
 8006328:	4641      	mov	r1, r8
 800632a:	6820      	ldr	r0, [r4, #0]
 800632c:	f000 f966 	bl	80065fc <memmove>
 8006330:	68a3      	ldr	r3, [r4, #8]
 8006332:	2000      	movs	r0, #0
 8006334:	1b9b      	subs	r3, r3, r6
 8006336:	60a3      	str	r3, [r4, #8]
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	4433      	add	r3, r6
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	e7db      	b.n	80062f8 <__ssputs_r+0x58>
 8006340:	462a      	mov	r2, r5
 8006342:	f000 f981 	bl	8006648 <_realloc_r>
 8006346:	4606      	mov	r6, r0
 8006348:	2800      	cmp	r0, #0
 800634a:	d1e1      	bne.n	8006310 <__ssputs_r+0x70>
 800634c:	4650      	mov	r0, sl
 800634e:	6921      	ldr	r1, [r4, #16]
 8006350:	f7ff feca 	bl	80060e8 <_free_r>
 8006354:	e7c7      	b.n	80062e6 <__ssputs_r+0x46>
	...

08006358 <_svfiprintf_r>:
 8006358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635c:	4698      	mov	r8, r3
 800635e:	898b      	ldrh	r3, [r1, #12]
 8006360:	4607      	mov	r7, r0
 8006362:	061b      	lsls	r3, r3, #24
 8006364:	460d      	mov	r5, r1
 8006366:	4614      	mov	r4, r2
 8006368:	b09d      	sub	sp, #116	; 0x74
 800636a:	d50e      	bpl.n	800638a <_svfiprintf_r+0x32>
 800636c:	690b      	ldr	r3, [r1, #16]
 800636e:	b963      	cbnz	r3, 800638a <_svfiprintf_r+0x32>
 8006370:	2140      	movs	r1, #64	; 0x40
 8006372:	f7ff ff21 	bl	80061b8 <_malloc_r>
 8006376:	6028      	str	r0, [r5, #0]
 8006378:	6128      	str	r0, [r5, #16]
 800637a:	b920      	cbnz	r0, 8006386 <_svfiprintf_r+0x2e>
 800637c:	230c      	movs	r3, #12
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	f04f 30ff 	mov.w	r0, #4294967295
 8006384:	e0d1      	b.n	800652a <_svfiprintf_r+0x1d2>
 8006386:	2340      	movs	r3, #64	; 0x40
 8006388:	616b      	str	r3, [r5, #20]
 800638a:	2300      	movs	r3, #0
 800638c:	9309      	str	r3, [sp, #36]	; 0x24
 800638e:	2320      	movs	r3, #32
 8006390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006394:	2330      	movs	r3, #48	; 0x30
 8006396:	f04f 0901 	mov.w	r9, #1
 800639a:	f8cd 800c 	str.w	r8, [sp, #12]
 800639e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006544 <_svfiprintf_r+0x1ec>
 80063a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063a6:	4623      	mov	r3, r4
 80063a8:	469a      	mov	sl, r3
 80063aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063ae:	b10a      	cbz	r2, 80063b4 <_svfiprintf_r+0x5c>
 80063b0:	2a25      	cmp	r2, #37	; 0x25
 80063b2:	d1f9      	bne.n	80063a8 <_svfiprintf_r+0x50>
 80063b4:	ebba 0b04 	subs.w	fp, sl, r4
 80063b8:	d00b      	beq.n	80063d2 <_svfiprintf_r+0x7a>
 80063ba:	465b      	mov	r3, fp
 80063bc:	4622      	mov	r2, r4
 80063be:	4629      	mov	r1, r5
 80063c0:	4638      	mov	r0, r7
 80063c2:	f7ff ff6d 	bl	80062a0 <__ssputs_r>
 80063c6:	3001      	adds	r0, #1
 80063c8:	f000 80aa 	beq.w	8006520 <_svfiprintf_r+0x1c8>
 80063cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ce:	445a      	add	r2, fp
 80063d0:	9209      	str	r2, [sp, #36]	; 0x24
 80063d2:	f89a 3000 	ldrb.w	r3, [sl]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 80a2 	beq.w	8006520 <_svfiprintf_r+0x1c8>
 80063dc:	2300      	movs	r3, #0
 80063de:	f04f 32ff 	mov.w	r2, #4294967295
 80063e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063e6:	f10a 0a01 	add.w	sl, sl, #1
 80063ea:	9304      	str	r3, [sp, #16]
 80063ec:	9307      	str	r3, [sp, #28]
 80063ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063f2:	931a      	str	r3, [sp, #104]	; 0x68
 80063f4:	4654      	mov	r4, sl
 80063f6:	2205      	movs	r2, #5
 80063f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063fc:	4851      	ldr	r0, [pc, #324]	; (8006544 <_svfiprintf_r+0x1ec>)
 80063fe:	f7ff fac1 	bl	8005984 <memchr>
 8006402:	9a04      	ldr	r2, [sp, #16]
 8006404:	b9d8      	cbnz	r0, 800643e <_svfiprintf_r+0xe6>
 8006406:	06d0      	lsls	r0, r2, #27
 8006408:	bf44      	itt	mi
 800640a:	2320      	movmi	r3, #32
 800640c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006410:	0711      	lsls	r1, r2, #28
 8006412:	bf44      	itt	mi
 8006414:	232b      	movmi	r3, #43	; 0x2b
 8006416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800641a:	f89a 3000 	ldrb.w	r3, [sl]
 800641e:	2b2a      	cmp	r3, #42	; 0x2a
 8006420:	d015      	beq.n	800644e <_svfiprintf_r+0xf6>
 8006422:	4654      	mov	r4, sl
 8006424:	2000      	movs	r0, #0
 8006426:	f04f 0c0a 	mov.w	ip, #10
 800642a:	9a07      	ldr	r2, [sp, #28]
 800642c:	4621      	mov	r1, r4
 800642e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006432:	3b30      	subs	r3, #48	; 0x30
 8006434:	2b09      	cmp	r3, #9
 8006436:	d94e      	bls.n	80064d6 <_svfiprintf_r+0x17e>
 8006438:	b1b0      	cbz	r0, 8006468 <_svfiprintf_r+0x110>
 800643a:	9207      	str	r2, [sp, #28]
 800643c:	e014      	b.n	8006468 <_svfiprintf_r+0x110>
 800643e:	eba0 0308 	sub.w	r3, r0, r8
 8006442:	fa09 f303 	lsl.w	r3, r9, r3
 8006446:	4313      	orrs	r3, r2
 8006448:	46a2      	mov	sl, r4
 800644a:	9304      	str	r3, [sp, #16]
 800644c:	e7d2      	b.n	80063f4 <_svfiprintf_r+0x9c>
 800644e:	9b03      	ldr	r3, [sp, #12]
 8006450:	1d19      	adds	r1, r3, #4
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	9103      	str	r1, [sp, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	bfbb      	ittet	lt
 800645a:	425b      	neglt	r3, r3
 800645c:	f042 0202 	orrlt.w	r2, r2, #2
 8006460:	9307      	strge	r3, [sp, #28]
 8006462:	9307      	strlt	r3, [sp, #28]
 8006464:	bfb8      	it	lt
 8006466:	9204      	strlt	r2, [sp, #16]
 8006468:	7823      	ldrb	r3, [r4, #0]
 800646a:	2b2e      	cmp	r3, #46	; 0x2e
 800646c:	d10c      	bne.n	8006488 <_svfiprintf_r+0x130>
 800646e:	7863      	ldrb	r3, [r4, #1]
 8006470:	2b2a      	cmp	r3, #42	; 0x2a
 8006472:	d135      	bne.n	80064e0 <_svfiprintf_r+0x188>
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	3402      	adds	r4, #2
 8006478:	1d1a      	adds	r2, r3, #4
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	9203      	str	r2, [sp, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	bfb8      	it	lt
 8006482:	f04f 33ff 	movlt.w	r3, #4294967295
 8006486:	9305      	str	r3, [sp, #20]
 8006488:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006548 <_svfiprintf_r+0x1f0>
 800648c:	2203      	movs	r2, #3
 800648e:	4650      	mov	r0, sl
 8006490:	7821      	ldrb	r1, [r4, #0]
 8006492:	f7ff fa77 	bl	8005984 <memchr>
 8006496:	b140      	cbz	r0, 80064aa <_svfiprintf_r+0x152>
 8006498:	2340      	movs	r3, #64	; 0x40
 800649a:	eba0 000a 	sub.w	r0, r0, sl
 800649e:	fa03 f000 	lsl.w	r0, r3, r0
 80064a2:	9b04      	ldr	r3, [sp, #16]
 80064a4:	3401      	adds	r4, #1
 80064a6:	4303      	orrs	r3, r0
 80064a8:	9304      	str	r3, [sp, #16]
 80064aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ae:	2206      	movs	r2, #6
 80064b0:	4826      	ldr	r0, [pc, #152]	; (800654c <_svfiprintf_r+0x1f4>)
 80064b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064b6:	f7ff fa65 	bl	8005984 <memchr>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d038      	beq.n	8006530 <_svfiprintf_r+0x1d8>
 80064be:	4b24      	ldr	r3, [pc, #144]	; (8006550 <_svfiprintf_r+0x1f8>)
 80064c0:	bb1b      	cbnz	r3, 800650a <_svfiprintf_r+0x1b2>
 80064c2:	9b03      	ldr	r3, [sp, #12]
 80064c4:	3307      	adds	r3, #7
 80064c6:	f023 0307 	bic.w	r3, r3, #7
 80064ca:	3308      	adds	r3, #8
 80064cc:	9303      	str	r3, [sp, #12]
 80064ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d0:	4433      	add	r3, r6
 80064d2:	9309      	str	r3, [sp, #36]	; 0x24
 80064d4:	e767      	b.n	80063a6 <_svfiprintf_r+0x4e>
 80064d6:	460c      	mov	r4, r1
 80064d8:	2001      	movs	r0, #1
 80064da:	fb0c 3202 	mla	r2, ip, r2, r3
 80064de:	e7a5      	b.n	800642c <_svfiprintf_r+0xd4>
 80064e0:	2300      	movs	r3, #0
 80064e2:	f04f 0c0a 	mov.w	ip, #10
 80064e6:	4619      	mov	r1, r3
 80064e8:	3401      	adds	r4, #1
 80064ea:	9305      	str	r3, [sp, #20]
 80064ec:	4620      	mov	r0, r4
 80064ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064f2:	3a30      	subs	r2, #48	; 0x30
 80064f4:	2a09      	cmp	r2, #9
 80064f6:	d903      	bls.n	8006500 <_svfiprintf_r+0x1a8>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0c5      	beq.n	8006488 <_svfiprintf_r+0x130>
 80064fc:	9105      	str	r1, [sp, #20]
 80064fe:	e7c3      	b.n	8006488 <_svfiprintf_r+0x130>
 8006500:	4604      	mov	r4, r0
 8006502:	2301      	movs	r3, #1
 8006504:	fb0c 2101 	mla	r1, ip, r1, r2
 8006508:	e7f0      	b.n	80064ec <_svfiprintf_r+0x194>
 800650a:	ab03      	add	r3, sp, #12
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	462a      	mov	r2, r5
 8006510:	4638      	mov	r0, r7
 8006512:	4b10      	ldr	r3, [pc, #64]	; (8006554 <_svfiprintf_r+0x1fc>)
 8006514:	a904      	add	r1, sp, #16
 8006516:	f7fd ffb9 	bl	800448c <_printf_float>
 800651a:	1c42      	adds	r2, r0, #1
 800651c:	4606      	mov	r6, r0
 800651e:	d1d6      	bne.n	80064ce <_svfiprintf_r+0x176>
 8006520:	89ab      	ldrh	r3, [r5, #12]
 8006522:	065b      	lsls	r3, r3, #25
 8006524:	f53f af2c 	bmi.w	8006380 <_svfiprintf_r+0x28>
 8006528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800652a:	b01d      	add	sp, #116	; 0x74
 800652c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006530:	ab03      	add	r3, sp, #12
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	462a      	mov	r2, r5
 8006536:	4638      	mov	r0, r7
 8006538:	4b06      	ldr	r3, [pc, #24]	; (8006554 <_svfiprintf_r+0x1fc>)
 800653a:	a904      	add	r1, sp, #16
 800653c:	f7fe fa42 	bl	80049c4 <_printf_i>
 8006540:	e7eb      	b.n	800651a <_svfiprintf_r+0x1c2>
 8006542:	bf00      	nop
 8006544:	080073bc 	.word	0x080073bc
 8006548:	080073c2 	.word	0x080073c2
 800654c:	080073c6 	.word	0x080073c6
 8006550:	0800448d 	.word	0x0800448d
 8006554:	080062a1 	.word	0x080062a1

08006558 <_sbrk_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	2300      	movs	r3, #0
 800655c:	4d05      	ldr	r5, [pc, #20]	; (8006574 <_sbrk_r+0x1c>)
 800655e:	4604      	mov	r4, r0
 8006560:	4608      	mov	r0, r1
 8006562:	602b      	str	r3, [r5, #0]
 8006564:	f7fb ff6c 	bl	8002440 <_sbrk>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_sbrk_r+0x1a>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_sbrk_r+0x1a>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	20000484 	.word	0x20000484

08006578 <__assert_func>:
 8006578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800657a:	4614      	mov	r4, r2
 800657c:	461a      	mov	r2, r3
 800657e:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <__assert_func+0x2c>)
 8006580:	4605      	mov	r5, r0
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68d8      	ldr	r0, [r3, #12]
 8006586:	b14c      	cbz	r4, 800659c <__assert_func+0x24>
 8006588:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <__assert_func+0x30>)
 800658a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800658e:	9100      	str	r1, [sp, #0]
 8006590:	462b      	mov	r3, r5
 8006592:	4906      	ldr	r1, [pc, #24]	; (80065ac <__assert_func+0x34>)
 8006594:	f000 f80e 	bl	80065b4 <fiprintf>
 8006598:	f000 faaa 	bl	8006af0 <abort>
 800659c:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <__assert_func+0x38>)
 800659e:	461c      	mov	r4, r3
 80065a0:	e7f3      	b.n	800658a <__assert_func+0x12>
 80065a2:	bf00      	nop
 80065a4:	20000010 	.word	0x20000010
 80065a8:	080073cd 	.word	0x080073cd
 80065ac:	080073da 	.word	0x080073da
 80065b0:	08007408 	.word	0x08007408

080065b4 <fiprintf>:
 80065b4:	b40e      	push	{r1, r2, r3}
 80065b6:	b503      	push	{r0, r1, lr}
 80065b8:	4601      	mov	r1, r0
 80065ba:	ab03      	add	r3, sp, #12
 80065bc:	4805      	ldr	r0, [pc, #20]	; (80065d4 <fiprintf+0x20>)
 80065be:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c2:	6800      	ldr	r0, [r0, #0]
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	f000 f895 	bl	80066f4 <_vfiprintf_r>
 80065ca:	b002      	add	sp, #8
 80065cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80065d0:	b003      	add	sp, #12
 80065d2:	4770      	bx	lr
 80065d4:	20000010 	.word	0x20000010

080065d8 <__ascii_mbtowc>:
 80065d8:	b082      	sub	sp, #8
 80065da:	b901      	cbnz	r1, 80065de <__ascii_mbtowc+0x6>
 80065dc:	a901      	add	r1, sp, #4
 80065de:	b142      	cbz	r2, 80065f2 <__ascii_mbtowc+0x1a>
 80065e0:	b14b      	cbz	r3, 80065f6 <__ascii_mbtowc+0x1e>
 80065e2:	7813      	ldrb	r3, [r2, #0]
 80065e4:	600b      	str	r3, [r1, #0]
 80065e6:	7812      	ldrb	r2, [r2, #0]
 80065e8:	1e10      	subs	r0, r2, #0
 80065ea:	bf18      	it	ne
 80065ec:	2001      	movne	r0, #1
 80065ee:	b002      	add	sp, #8
 80065f0:	4770      	bx	lr
 80065f2:	4610      	mov	r0, r2
 80065f4:	e7fb      	b.n	80065ee <__ascii_mbtowc+0x16>
 80065f6:	f06f 0001 	mvn.w	r0, #1
 80065fa:	e7f8      	b.n	80065ee <__ascii_mbtowc+0x16>

080065fc <memmove>:
 80065fc:	4288      	cmp	r0, r1
 80065fe:	b510      	push	{r4, lr}
 8006600:	eb01 0402 	add.w	r4, r1, r2
 8006604:	d902      	bls.n	800660c <memmove+0x10>
 8006606:	4284      	cmp	r4, r0
 8006608:	4623      	mov	r3, r4
 800660a:	d807      	bhi.n	800661c <memmove+0x20>
 800660c:	1e43      	subs	r3, r0, #1
 800660e:	42a1      	cmp	r1, r4
 8006610:	d008      	beq.n	8006624 <memmove+0x28>
 8006612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006616:	f803 2f01 	strb.w	r2, [r3, #1]!
 800661a:	e7f8      	b.n	800660e <memmove+0x12>
 800661c:	4601      	mov	r1, r0
 800661e:	4402      	add	r2, r0
 8006620:	428a      	cmp	r2, r1
 8006622:	d100      	bne.n	8006626 <memmove+0x2a>
 8006624:	bd10      	pop	{r4, pc}
 8006626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800662a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800662e:	e7f7      	b.n	8006620 <memmove+0x24>

08006630 <__malloc_lock>:
 8006630:	4801      	ldr	r0, [pc, #4]	; (8006638 <__malloc_lock+0x8>)
 8006632:	f000 bc19 	b.w	8006e68 <__retarget_lock_acquire_recursive>
 8006636:	bf00      	nop
 8006638:	20000488 	.word	0x20000488

0800663c <__malloc_unlock>:
 800663c:	4801      	ldr	r0, [pc, #4]	; (8006644 <__malloc_unlock+0x8>)
 800663e:	f000 bc14 	b.w	8006e6a <__retarget_lock_release_recursive>
 8006642:	bf00      	nop
 8006644:	20000488 	.word	0x20000488

08006648 <_realloc_r>:
 8006648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664c:	4680      	mov	r8, r0
 800664e:	4614      	mov	r4, r2
 8006650:	460e      	mov	r6, r1
 8006652:	b921      	cbnz	r1, 800665e <_realloc_r+0x16>
 8006654:	4611      	mov	r1, r2
 8006656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800665a:	f7ff bdad 	b.w	80061b8 <_malloc_r>
 800665e:	b92a      	cbnz	r2, 800666c <_realloc_r+0x24>
 8006660:	f7ff fd42 	bl	80060e8 <_free_r>
 8006664:	4625      	mov	r5, r4
 8006666:	4628      	mov	r0, r5
 8006668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800666c:	f000 fc64 	bl	8006f38 <_malloc_usable_size_r>
 8006670:	4284      	cmp	r4, r0
 8006672:	4607      	mov	r7, r0
 8006674:	d802      	bhi.n	800667c <_realloc_r+0x34>
 8006676:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800667a:	d812      	bhi.n	80066a2 <_realloc_r+0x5a>
 800667c:	4621      	mov	r1, r4
 800667e:	4640      	mov	r0, r8
 8006680:	f7ff fd9a 	bl	80061b8 <_malloc_r>
 8006684:	4605      	mov	r5, r0
 8006686:	2800      	cmp	r0, #0
 8006688:	d0ed      	beq.n	8006666 <_realloc_r+0x1e>
 800668a:	42bc      	cmp	r4, r7
 800668c:	4622      	mov	r2, r4
 800668e:	4631      	mov	r1, r6
 8006690:	bf28      	it	cs
 8006692:	463a      	movcs	r2, r7
 8006694:	f7ff f984 	bl	80059a0 <memcpy>
 8006698:	4631      	mov	r1, r6
 800669a:	4640      	mov	r0, r8
 800669c:	f7ff fd24 	bl	80060e8 <_free_r>
 80066a0:	e7e1      	b.n	8006666 <_realloc_r+0x1e>
 80066a2:	4635      	mov	r5, r6
 80066a4:	e7df      	b.n	8006666 <_realloc_r+0x1e>

080066a6 <__sfputc_r>:
 80066a6:	6893      	ldr	r3, [r2, #8]
 80066a8:	b410      	push	{r4}
 80066aa:	3b01      	subs	r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	6093      	str	r3, [r2, #8]
 80066b0:	da07      	bge.n	80066c2 <__sfputc_r+0x1c>
 80066b2:	6994      	ldr	r4, [r2, #24]
 80066b4:	42a3      	cmp	r3, r4
 80066b6:	db01      	blt.n	80066bc <__sfputc_r+0x16>
 80066b8:	290a      	cmp	r1, #10
 80066ba:	d102      	bne.n	80066c2 <__sfputc_r+0x1c>
 80066bc:	bc10      	pop	{r4}
 80066be:	f000 b949 	b.w	8006954 <__swbuf_r>
 80066c2:	6813      	ldr	r3, [r2, #0]
 80066c4:	1c58      	adds	r0, r3, #1
 80066c6:	6010      	str	r0, [r2, #0]
 80066c8:	7019      	strb	r1, [r3, #0]
 80066ca:	4608      	mov	r0, r1
 80066cc:	bc10      	pop	{r4}
 80066ce:	4770      	bx	lr

080066d0 <__sfputs_r>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	4606      	mov	r6, r0
 80066d4:	460f      	mov	r7, r1
 80066d6:	4614      	mov	r4, r2
 80066d8:	18d5      	adds	r5, r2, r3
 80066da:	42ac      	cmp	r4, r5
 80066dc:	d101      	bne.n	80066e2 <__sfputs_r+0x12>
 80066de:	2000      	movs	r0, #0
 80066e0:	e007      	b.n	80066f2 <__sfputs_r+0x22>
 80066e2:	463a      	mov	r2, r7
 80066e4:	4630      	mov	r0, r6
 80066e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ea:	f7ff ffdc 	bl	80066a6 <__sfputc_r>
 80066ee:	1c43      	adds	r3, r0, #1
 80066f0:	d1f3      	bne.n	80066da <__sfputs_r+0xa>
 80066f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080066f4 <_vfiprintf_r>:
 80066f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f8:	460d      	mov	r5, r1
 80066fa:	4614      	mov	r4, r2
 80066fc:	4698      	mov	r8, r3
 80066fe:	4606      	mov	r6, r0
 8006700:	b09d      	sub	sp, #116	; 0x74
 8006702:	b118      	cbz	r0, 800670c <_vfiprintf_r+0x18>
 8006704:	6983      	ldr	r3, [r0, #24]
 8006706:	b90b      	cbnz	r3, 800670c <_vfiprintf_r+0x18>
 8006708:	f000 fb10 	bl	8006d2c <__sinit>
 800670c:	4b89      	ldr	r3, [pc, #548]	; (8006934 <_vfiprintf_r+0x240>)
 800670e:	429d      	cmp	r5, r3
 8006710:	d11b      	bne.n	800674a <_vfiprintf_r+0x56>
 8006712:	6875      	ldr	r5, [r6, #4]
 8006714:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006716:	07d9      	lsls	r1, r3, #31
 8006718:	d405      	bmi.n	8006726 <_vfiprintf_r+0x32>
 800671a:	89ab      	ldrh	r3, [r5, #12]
 800671c:	059a      	lsls	r2, r3, #22
 800671e:	d402      	bmi.n	8006726 <_vfiprintf_r+0x32>
 8006720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006722:	f000 fba1 	bl	8006e68 <__retarget_lock_acquire_recursive>
 8006726:	89ab      	ldrh	r3, [r5, #12]
 8006728:	071b      	lsls	r3, r3, #28
 800672a:	d501      	bpl.n	8006730 <_vfiprintf_r+0x3c>
 800672c:	692b      	ldr	r3, [r5, #16]
 800672e:	b9eb      	cbnz	r3, 800676c <_vfiprintf_r+0x78>
 8006730:	4629      	mov	r1, r5
 8006732:	4630      	mov	r0, r6
 8006734:	f000 f96e 	bl	8006a14 <__swsetup_r>
 8006738:	b1c0      	cbz	r0, 800676c <_vfiprintf_r+0x78>
 800673a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800673c:	07dc      	lsls	r4, r3, #31
 800673e:	d50e      	bpl.n	800675e <_vfiprintf_r+0x6a>
 8006740:	f04f 30ff 	mov.w	r0, #4294967295
 8006744:	b01d      	add	sp, #116	; 0x74
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	4b7b      	ldr	r3, [pc, #492]	; (8006938 <_vfiprintf_r+0x244>)
 800674c:	429d      	cmp	r5, r3
 800674e:	d101      	bne.n	8006754 <_vfiprintf_r+0x60>
 8006750:	68b5      	ldr	r5, [r6, #8]
 8006752:	e7df      	b.n	8006714 <_vfiprintf_r+0x20>
 8006754:	4b79      	ldr	r3, [pc, #484]	; (800693c <_vfiprintf_r+0x248>)
 8006756:	429d      	cmp	r5, r3
 8006758:	bf08      	it	eq
 800675a:	68f5      	ldreq	r5, [r6, #12]
 800675c:	e7da      	b.n	8006714 <_vfiprintf_r+0x20>
 800675e:	89ab      	ldrh	r3, [r5, #12]
 8006760:	0598      	lsls	r0, r3, #22
 8006762:	d4ed      	bmi.n	8006740 <_vfiprintf_r+0x4c>
 8006764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006766:	f000 fb80 	bl	8006e6a <__retarget_lock_release_recursive>
 800676a:	e7e9      	b.n	8006740 <_vfiprintf_r+0x4c>
 800676c:	2300      	movs	r3, #0
 800676e:	9309      	str	r3, [sp, #36]	; 0x24
 8006770:	2320      	movs	r3, #32
 8006772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006776:	2330      	movs	r3, #48	; 0x30
 8006778:	f04f 0901 	mov.w	r9, #1
 800677c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006780:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006940 <_vfiprintf_r+0x24c>
 8006784:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006788:	4623      	mov	r3, r4
 800678a:	469a      	mov	sl, r3
 800678c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006790:	b10a      	cbz	r2, 8006796 <_vfiprintf_r+0xa2>
 8006792:	2a25      	cmp	r2, #37	; 0x25
 8006794:	d1f9      	bne.n	800678a <_vfiprintf_r+0x96>
 8006796:	ebba 0b04 	subs.w	fp, sl, r4
 800679a:	d00b      	beq.n	80067b4 <_vfiprintf_r+0xc0>
 800679c:	465b      	mov	r3, fp
 800679e:	4622      	mov	r2, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	4630      	mov	r0, r6
 80067a4:	f7ff ff94 	bl	80066d0 <__sfputs_r>
 80067a8:	3001      	adds	r0, #1
 80067aa:	f000 80aa 	beq.w	8006902 <_vfiprintf_r+0x20e>
 80067ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067b0:	445a      	add	r2, fp
 80067b2:	9209      	str	r2, [sp, #36]	; 0x24
 80067b4:	f89a 3000 	ldrb.w	r3, [sl]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80a2 	beq.w	8006902 <_vfiprintf_r+0x20e>
 80067be:	2300      	movs	r3, #0
 80067c0:	f04f 32ff 	mov.w	r2, #4294967295
 80067c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067c8:	f10a 0a01 	add.w	sl, sl, #1
 80067cc:	9304      	str	r3, [sp, #16]
 80067ce:	9307      	str	r3, [sp, #28]
 80067d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067d4:	931a      	str	r3, [sp, #104]	; 0x68
 80067d6:	4654      	mov	r4, sl
 80067d8:	2205      	movs	r2, #5
 80067da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067de:	4858      	ldr	r0, [pc, #352]	; (8006940 <_vfiprintf_r+0x24c>)
 80067e0:	f7ff f8d0 	bl	8005984 <memchr>
 80067e4:	9a04      	ldr	r2, [sp, #16]
 80067e6:	b9d8      	cbnz	r0, 8006820 <_vfiprintf_r+0x12c>
 80067e8:	06d1      	lsls	r1, r2, #27
 80067ea:	bf44      	itt	mi
 80067ec:	2320      	movmi	r3, #32
 80067ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067f2:	0713      	lsls	r3, r2, #28
 80067f4:	bf44      	itt	mi
 80067f6:	232b      	movmi	r3, #43	; 0x2b
 80067f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006800:	2b2a      	cmp	r3, #42	; 0x2a
 8006802:	d015      	beq.n	8006830 <_vfiprintf_r+0x13c>
 8006804:	4654      	mov	r4, sl
 8006806:	2000      	movs	r0, #0
 8006808:	f04f 0c0a 	mov.w	ip, #10
 800680c:	9a07      	ldr	r2, [sp, #28]
 800680e:	4621      	mov	r1, r4
 8006810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006814:	3b30      	subs	r3, #48	; 0x30
 8006816:	2b09      	cmp	r3, #9
 8006818:	d94e      	bls.n	80068b8 <_vfiprintf_r+0x1c4>
 800681a:	b1b0      	cbz	r0, 800684a <_vfiprintf_r+0x156>
 800681c:	9207      	str	r2, [sp, #28]
 800681e:	e014      	b.n	800684a <_vfiprintf_r+0x156>
 8006820:	eba0 0308 	sub.w	r3, r0, r8
 8006824:	fa09 f303 	lsl.w	r3, r9, r3
 8006828:	4313      	orrs	r3, r2
 800682a:	46a2      	mov	sl, r4
 800682c:	9304      	str	r3, [sp, #16]
 800682e:	e7d2      	b.n	80067d6 <_vfiprintf_r+0xe2>
 8006830:	9b03      	ldr	r3, [sp, #12]
 8006832:	1d19      	adds	r1, r3, #4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	9103      	str	r1, [sp, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	bfbb      	ittet	lt
 800683c:	425b      	neglt	r3, r3
 800683e:	f042 0202 	orrlt.w	r2, r2, #2
 8006842:	9307      	strge	r3, [sp, #28]
 8006844:	9307      	strlt	r3, [sp, #28]
 8006846:	bfb8      	it	lt
 8006848:	9204      	strlt	r2, [sp, #16]
 800684a:	7823      	ldrb	r3, [r4, #0]
 800684c:	2b2e      	cmp	r3, #46	; 0x2e
 800684e:	d10c      	bne.n	800686a <_vfiprintf_r+0x176>
 8006850:	7863      	ldrb	r3, [r4, #1]
 8006852:	2b2a      	cmp	r3, #42	; 0x2a
 8006854:	d135      	bne.n	80068c2 <_vfiprintf_r+0x1ce>
 8006856:	9b03      	ldr	r3, [sp, #12]
 8006858:	3402      	adds	r4, #2
 800685a:	1d1a      	adds	r2, r3, #4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	9203      	str	r2, [sp, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	bfb8      	it	lt
 8006864:	f04f 33ff 	movlt.w	r3, #4294967295
 8006868:	9305      	str	r3, [sp, #20]
 800686a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006944 <_vfiprintf_r+0x250>
 800686e:	2203      	movs	r2, #3
 8006870:	4650      	mov	r0, sl
 8006872:	7821      	ldrb	r1, [r4, #0]
 8006874:	f7ff f886 	bl	8005984 <memchr>
 8006878:	b140      	cbz	r0, 800688c <_vfiprintf_r+0x198>
 800687a:	2340      	movs	r3, #64	; 0x40
 800687c:	eba0 000a 	sub.w	r0, r0, sl
 8006880:	fa03 f000 	lsl.w	r0, r3, r0
 8006884:	9b04      	ldr	r3, [sp, #16]
 8006886:	3401      	adds	r4, #1
 8006888:	4303      	orrs	r3, r0
 800688a:	9304      	str	r3, [sp, #16]
 800688c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006890:	2206      	movs	r2, #6
 8006892:	482d      	ldr	r0, [pc, #180]	; (8006948 <_vfiprintf_r+0x254>)
 8006894:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006898:	f7ff f874 	bl	8005984 <memchr>
 800689c:	2800      	cmp	r0, #0
 800689e:	d03f      	beq.n	8006920 <_vfiprintf_r+0x22c>
 80068a0:	4b2a      	ldr	r3, [pc, #168]	; (800694c <_vfiprintf_r+0x258>)
 80068a2:	bb1b      	cbnz	r3, 80068ec <_vfiprintf_r+0x1f8>
 80068a4:	9b03      	ldr	r3, [sp, #12]
 80068a6:	3307      	adds	r3, #7
 80068a8:	f023 0307 	bic.w	r3, r3, #7
 80068ac:	3308      	adds	r3, #8
 80068ae:	9303      	str	r3, [sp, #12]
 80068b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b2:	443b      	add	r3, r7
 80068b4:	9309      	str	r3, [sp, #36]	; 0x24
 80068b6:	e767      	b.n	8006788 <_vfiprintf_r+0x94>
 80068b8:	460c      	mov	r4, r1
 80068ba:	2001      	movs	r0, #1
 80068bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80068c0:	e7a5      	b.n	800680e <_vfiprintf_r+0x11a>
 80068c2:	2300      	movs	r3, #0
 80068c4:	f04f 0c0a 	mov.w	ip, #10
 80068c8:	4619      	mov	r1, r3
 80068ca:	3401      	adds	r4, #1
 80068cc:	9305      	str	r3, [sp, #20]
 80068ce:	4620      	mov	r0, r4
 80068d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068d4:	3a30      	subs	r2, #48	; 0x30
 80068d6:	2a09      	cmp	r2, #9
 80068d8:	d903      	bls.n	80068e2 <_vfiprintf_r+0x1ee>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0c5      	beq.n	800686a <_vfiprintf_r+0x176>
 80068de:	9105      	str	r1, [sp, #20]
 80068e0:	e7c3      	b.n	800686a <_vfiprintf_r+0x176>
 80068e2:	4604      	mov	r4, r0
 80068e4:	2301      	movs	r3, #1
 80068e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80068ea:	e7f0      	b.n	80068ce <_vfiprintf_r+0x1da>
 80068ec:	ab03      	add	r3, sp, #12
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	462a      	mov	r2, r5
 80068f2:	4630      	mov	r0, r6
 80068f4:	4b16      	ldr	r3, [pc, #88]	; (8006950 <_vfiprintf_r+0x25c>)
 80068f6:	a904      	add	r1, sp, #16
 80068f8:	f7fd fdc8 	bl	800448c <_printf_float>
 80068fc:	4607      	mov	r7, r0
 80068fe:	1c78      	adds	r0, r7, #1
 8006900:	d1d6      	bne.n	80068b0 <_vfiprintf_r+0x1bc>
 8006902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006904:	07d9      	lsls	r1, r3, #31
 8006906:	d405      	bmi.n	8006914 <_vfiprintf_r+0x220>
 8006908:	89ab      	ldrh	r3, [r5, #12]
 800690a:	059a      	lsls	r2, r3, #22
 800690c:	d402      	bmi.n	8006914 <_vfiprintf_r+0x220>
 800690e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006910:	f000 faab 	bl	8006e6a <__retarget_lock_release_recursive>
 8006914:	89ab      	ldrh	r3, [r5, #12]
 8006916:	065b      	lsls	r3, r3, #25
 8006918:	f53f af12 	bmi.w	8006740 <_vfiprintf_r+0x4c>
 800691c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800691e:	e711      	b.n	8006744 <_vfiprintf_r+0x50>
 8006920:	ab03      	add	r3, sp, #12
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	462a      	mov	r2, r5
 8006926:	4630      	mov	r0, r6
 8006928:	4b09      	ldr	r3, [pc, #36]	; (8006950 <_vfiprintf_r+0x25c>)
 800692a:	a904      	add	r1, sp, #16
 800692c:	f7fe f84a 	bl	80049c4 <_printf_i>
 8006930:	e7e4      	b.n	80068fc <_vfiprintf_r+0x208>
 8006932:	bf00      	nop
 8006934:	08007534 	.word	0x08007534
 8006938:	08007554 	.word	0x08007554
 800693c:	08007514 	.word	0x08007514
 8006940:	080073bc 	.word	0x080073bc
 8006944:	080073c2 	.word	0x080073c2
 8006948:	080073c6 	.word	0x080073c6
 800694c:	0800448d 	.word	0x0800448d
 8006950:	080066d1 	.word	0x080066d1

08006954 <__swbuf_r>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	460e      	mov	r6, r1
 8006958:	4614      	mov	r4, r2
 800695a:	4605      	mov	r5, r0
 800695c:	b118      	cbz	r0, 8006966 <__swbuf_r+0x12>
 800695e:	6983      	ldr	r3, [r0, #24]
 8006960:	b90b      	cbnz	r3, 8006966 <__swbuf_r+0x12>
 8006962:	f000 f9e3 	bl	8006d2c <__sinit>
 8006966:	4b21      	ldr	r3, [pc, #132]	; (80069ec <__swbuf_r+0x98>)
 8006968:	429c      	cmp	r4, r3
 800696a:	d12b      	bne.n	80069c4 <__swbuf_r+0x70>
 800696c:	686c      	ldr	r4, [r5, #4]
 800696e:	69a3      	ldr	r3, [r4, #24]
 8006970:	60a3      	str	r3, [r4, #8]
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	071a      	lsls	r2, r3, #28
 8006976:	d52f      	bpl.n	80069d8 <__swbuf_r+0x84>
 8006978:	6923      	ldr	r3, [r4, #16]
 800697a:	b36b      	cbz	r3, 80069d8 <__swbuf_r+0x84>
 800697c:	6923      	ldr	r3, [r4, #16]
 800697e:	6820      	ldr	r0, [r4, #0]
 8006980:	b2f6      	uxtb	r6, r6
 8006982:	1ac0      	subs	r0, r0, r3
 8006984:	6963      	ldr	r3, [r4, #20]
 8006986:	4637      	mov	r7, r6
 8006988:	4283      	cmp	r3, r0
 800698a:	dc04      	bgt.n	8006996 <__swbuf_r+0x42>
 800698c:	4621      	mov	r1, r4
 800698e:	4628      	mov	r0, r5
 8006990:	f000 f938 	bl	8006c04 <_fflush_r>
 8006994:	bb30      	cbnz	r0, 80069e4 <__swbuf_r+0x90>
 8006996:	68a3      	ldr	r3, [r4, #8]
 8006998:	3001      	adds	r0, #1
 800699a:	3b01      	subs	r3, #1
 800699c:	60a3      	str	r3, [r4, #8]
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	6022      	str	r2, [r4, #0]
 80069a4:	701e      	strb	r6, [r3, #0]
 80069a6:	6963      	ldr	r3, [r4, #20]
 80069a8:	4283      	cmp	r3, r0
 80069aa:	d004      	beq.n	80069b6 <__swbuf_r+0x62>
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	07db      	lsls	r3, r3, #31
 80069b0:	d506      	bpl.n	80069c0 <__swbuf_r+0x6c>
 80069b2:	2e0a      	cmp	r6, #10
 80069b4:	d104      	bne.n	80069c0 <__swbuf_r+0x6c>
 80069b6:	4621      	mov	r1, r4
 80069b8:	4628      	mov	r0, r5
 80069ba:	f000 f923 	bl	8006c04 <_fflush_r>
 80069be:	b988      	cbnz	r0, 80069e4 <__swbuf_r+0x90>
 80069c0:	4638      	mov	r0, r7
 80069c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c4:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <__swbuf_r+0x9c>)
 80069c6:	429c      	cmp	r4, r3
 80069c8:	d101      	bne.n	80069ce <__swbuf_r+0x7a>
 80069ca:	68ac      	ldr	r4, [r5, #8]
 80069cc:	e7cf      	b.n	800696e <__swbuf_r+0x1a>
 80069ce:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <__swbuf_r+0xa0>)
 80069d0:	429c      	cmp	r4, r3
 80069d2:	bf08      	it	eq
 80069d4:	68ec      	ldreq	r4, [r5, #12]
 80069d6:	e7ca      	b.n	800696e <__swbuf_r+0x1a>
 80069d8:	4621      	mov	r1, r4
 80069da:	4628      	mov	r0, r5
 80069dc:	f000 f81a 	bl	8006a14 <__swsetup_r>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d0cb      	beq.n	800697c <__swbuf_r+0x28>
 80069e4:	f04f 37ff 	mov.w	r7, #4294967295
 80069e8:	e7ea      	b.n	80069c0 <__swbuf_r+0x6c>
 80069ea:	bf00      	nop
 80069ec:	08007534 	.word	0x08007534
 80069f0:	08007554 	.word	0x08007554
 80069f4:	08007514 	.word	0x08007514

080069f8 <__ascii_wctomb>:
 80069f8:	4603      	mov	r3, r0
 80069fa:	4608      	mov	r0, r1
 80069fc:	b141      	cbz	r1, 8006a10 <__ascii_wctomb+0x18>
 80069fe:	2aff      	cmp	r2, #255	; 0xff
 8006a00:	d904      	bls.n	8006a0c <__ascii_wctomb+0x14>
 8006a02:	228a      	movs	r2, #138	; 0x8a
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	4770      	bx	lr
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	700a      	strb	r2, [r1, #0]
 8006a10:	4770      	bx	lr
	...

08006a14 <__swsetup_r>:
 8006a14:	4b32      	ldr	r3, [pc, #200]	; (8006ae0 <__swsetup_r+0xcc>)
 8006a16:	b570      	push	{r4, r5, r6, lr}
 8006a18:	681d      	ldr	r5, [r3, #0]
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	b125      	cbz	r5, 8006a2a <__swsetup_r+0x16>
 8006a20:	69ab      	ldr	r3, [r5, #24]
 8006a22:	b913      	cbnz	r3, 8006a2a <__swsetup_r+0x16>
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 f981 	bl	8006d2c <__sinit>
 8006a2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <__swsetup_r+0xd0>)
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	d10f      	bne.n	8006a50 <__swsetup_r+0x3c>
 8006a30:	686c      	ldr	r4, [r5, #4]
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a38:	0719      	lsls	r1, r3, #28
 8006a3a:	d42c      	bmi.n	8006a96 <__swsetup_r+0x82>
 8006a3c:	06dd      	lsls	r5, r3, #27
 8006a3e:	d411      	bmi.n	8006a64 <__swsetup_r+0x50>
 8006a40:	2309      	movs	r3, #9
 8006a42:	6033      	str	r3, [r6, #0]
 8006a44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a48:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	e03e      	b.n	8006ace <__swsetup_r+0xba>
 8006a50:	4b25      	ldr	r3, [pc, #148]	; (8006ae8 <__swsetup_r+0xd4>)
 8006a52:	429c      	cmp	r4, r3
 8006a54:	d101      	bne.n	8006a5a <__swsetup_r+0x46>
 8006a56:	68ac      	ldr	r4, [r5, #8]
 8006a58:	e7eb      	b.n	8006a32 <__swsetup_r+0x1e>
 8006a5a:	4b24      	ldr	r3, [pc, #144]	; (8006aec <__swsetup_r+0xd8>)
 8006a5c:	429c      	cmp	r4, r3
 8006a5e:	bf08      	it	eq
 8006a60:	68ec      	ldreq	r4, [r5, #12]
 8006a62:	e7e6      	b.n	8006a32 <__swsetup_r+0x1e>
 8006a64:	0758      	lsls	r0, r3, #29
 8006a66:	d512      	bpl.n	8006a8e <__swsetup_r+0x7a>
 8006a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a6a:	b141      	cbz	r1, 8006a7e <__swsetup_r+0x6a>
 8006a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a70:	4299      	cmp	r1, r3
 8006a72:	d002      	beq.n	8006a7a <__swsetup_r+0x66>
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7ff fb37 	bl	80060e8 <_free_r>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6363      	str	r3, [r4, #52]	; 0x34
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	2300      	movs	r3, #0
 8006a88:	6063      	str	r3, [r4, #4]
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	f043 0308 	orr.w	r3, r3, #8
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	b94b      	cbnz	r3, 8006aae <__swsetup_r+0x9a>
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aa4:	d003      	beq.n	8006aae <__swsetup_r+0x9a>
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f000 fa05 	bl	8006eb8 <__smakebuf_r>
 8006aae:	89a0      	ldrh	r0, [r4, #12]
 8006ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ab4:	f010 0301 	ands.w	r3, r0, #1
 8006ab8:	d00a      	beq.n	8006ad0 <__swsetup_r+0xbc>
 8006aba:	2300      	movs	r3, #0
 8006abc:	60a3      	str	r3, [r4, #8]
 8006abe:	6963      	ldr	r3, [r4, #20]
 8006ac0:	425b      	negs	r3, r3
 8006ac2:	61a3      	str	r3, [r4, #24]
 8006ac4:	6923      	ldr	r3, [r4, #16]
 8006ac6:	b943      	cbnz	r3, 8006ada <__swsetup_r+0xc6>
 8006ac8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006acc:	d1ba      	bne.n	8006a44 <__swsetup_r+0x30>
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	0781      	lsls	r1, r0, #30
 8006ad2:	bf58      	it	pl
 8006ad4:	6963      	ldrpl	r3, [r4, #20]
 8006ad6:	60a3      	str	r3, [r4, #8]
 8006ad8:	e7f4      	b.n	8006ac4 <__swsetup_r+0xb0>
 8006ada:	2000      	movs	r0, #0
 8006adc:	e7f7      	b.n	8006ace <__swsetup_r+0xba>
 8006ade:	bf00      	nop
 8006ae0:	20000010 	.word	0x20000010
 8006ae4:	08007534 	.word	0x08007534
 8006ae8:	08007554 	.word	0x08007554
 8006aec:	08007514 	.word	0x08007514

08006af0 <abort>:
 8006af0:	2006      	movs	r0, #6
 8006af2:	b508      	push	{r3, lr}
 8006af4:	f000 fa50 	bl	8006f98 <raise>
 8006af8:	2001      	movs	r0, #1
 8006afa:	f7fb fc71 	bl	80023e0 <_exit>
	...

08006b00 <__sflush_r>:
 8006b00:	898a      	ldrh	r2, [r1, #12]
 8006b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b04:	4605      	mov	r5, r0
 8006b06:	0710      	lsls	r0, r2, #28
 8006b08:	460c      	mov	r4, r1
 8006b0a:	d457      	bmi.n	8006bbc <__sflush_r+0xbc>
 8006b0c:	684b      	ldr	r3, [r1, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	dc04      	bgt.n	8006b1c <__sflush_r+0x1c>
 8006b12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dc01      	bgt.n	8006b1c <__sflush_r+0x1c>
 8006b18:	2000      	movs	r0, #0
 8006b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b1e:	2e00      	cmp	r6, #0
 8006b20:	d0fa      	beq.n	8006b18 <__sflush_r+0x18>
 8006b22:	2300      	movs	r3, #0
 8006b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b28:	682f      	ldr	r7, [r5, #0]
 8006b2a:	602b      	str	r3, [r5, #0]
 8006b2c:	d032      	beq.n	8006b94 <__sflush_r+0x94>
 8006b2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	075a      	lsls	r2, r3, #29
 8006b34:	d505      	bpl.n	8006b42 <__sflush_r+0x42>
 8006b36:	6863      	ldr	r3, [r4, #4]
 8006b38:	1ac0      	subs	r0, r0, r3
 8006b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b3c:	b10b      	cbz	r3, 8006b42 <__sflush_r+0x42>
 8006b3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b40:	1ac0      	subs	r0, r0, r3
 8006b42:	2300      	movs	r3, #0
 8006b44:	4602      	mov	r2, r0
 8006b46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b48:	4628      	mov	r0, r5
 8006b4a:	6a21      	ldr	r1, [r4, #32]
 8006b4c:	47b0      	blx	r6
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	d106      	bne.n	8006b62 <__sflush_r+0x62>
 8006b54:	6829      	ldr	r1, [r5, #0]
 8006b56:	291d      	cmp	r1, #29
 8006b58:	d82c      	bhi.n	8006bb4 <__sflush_r+0xb4>
 8006b5a:	4a29      	ldr	r2, [pc, #164]	; (8006c00 <__sflush_r+0x100>)
 8006b5c:	40ca      	lsrs	r2, r1
 8006b5e:	07d6      	lsls	r6, r2, #31
 8006b60:	d528      	bpl.n	8006bb4 <__sflush_r+0xb4>
 8006b62:	2200      	movs	r2, #0
 8006b64:	6062      	str	r2, [r4, #4]
 8006b66:	6922      	ldr	r2, [r4, #16]
 8006b68:	04d9      	lsls	r1, r3, #19
 8006b6a:	6022      	str	r2, [r4, #0]
 8006b6c:	d504      	bpl.n	8006b78 <__sflush_r+0x78>
 8006b6e:	1c42      	adds	r2, r0, #1
 8006b70:	d101      	bne.n	8006b76 <__sflush_r+0x76>
 8006b72:	682b      	ldr	r3, [r5, #0]
 8006b74:	b903      	cbnz	r3, 8006b78 <__sflush_r+0x78>
 8006b76:	6560      	str	r0, [r4, #84]	; 0x54
 8006b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b7a:	602f      	str	r7, [r5, #0]
 8006b7c:	2900      	cmp	r1, #0
 8006b7e:	d0cb      	beq.n	8006b18 <__sflush_r+0x18>
 8006b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b84:	4299      	cmp	r1, r3
 8006b86:	d002      	beq.n	8006b8e <__sflush_r+0x8e>
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f7ff faad 	bl	80060e8 <_free_r>
 8006b8e:	2000      	movs	r0, #0
 8006b90:	6360      	str	r0, [r4, #52]	; 0x34
 8006b92:	e7c2      	b.n	8006b1a <__sflush_r+0x1a>
 8006b94:	6a21      	ldr	r1, [r4, #32]
 8006b96:	2301      	movs	r3, #1
 8006b98:	4628      	mov	r0, r5
 8006b9a:	47b0      	blx	r6
 8006b9c:	1c41      	adds	r1, r0, #1
 8006b9e:	d1c7      	bne.n	8006b30 <__sflush_r+0x30>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0c4      	beq.n	8006b30 <__sflush_r+0x30>
 8006ba6:	2b1d      	cmp	r3, #29
 8006ba8:	d001      	beq.n	8006bae <__sflush_r+0xae>
 8006baa:	2b16      	cmp	r3, #22
 8006bac:	d101      	bne.n	8006bb2 <__sflush_r+0xb2>
 8006bae:	602f      	str	r7, [r5, #0]
 8006bb0:	e7b2      	b.n	8006b18 <__sflush_r+0x18>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb8:	81a3      	strh	r3, [r4, #12]
 8006bba:	e7ae      	b.n	8006b1a <__sflush_r+0x1a>
 8006bbc:	690f      	ldr	r7, [r1, #16]
 8006bbe:	2f00      	cmp	r7, #0
 8006bc0:	d0aa      	beq.n	8006b18 <__sflush_r+0x18>
 8006bc2:	0793      	lsls	r3, r2, #30
 8006bc4:	bf18      	it	ne
 8006bc6:	2300      	movne	r3, #0
 8006bc8:	680e      	ldr	r6, [r1, #0]
 8006bca:	bf08      	it	eq
 8006bcc:	694b      	ldreq	r3, [r1, #20]
 8006bce:	1bf6      	subs	r6, r6, r7
 8006bd0:	600f      	str	r7, [r1, #0]
 8006bd2:	608b      	str	r3, [r1, #8]
 8006bd4:	2e00      	cmp	r6, #0
 8006bd6:	dd9f      	ble.n	8006b18 <__sflush_r+0x18>
 8006bd8:	4633      	mov	r3, r6
 8006bda:	463a      	mov	r2, r7
 8006bdc:	4628      	mov	r0, r5
 8006bde:	6a21      	ldr	r1, [r4, #32]
 8006be0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006be4:	47e0      	blx	ip
 8006be6:	2800      	cmp	r0, #0
 8006be8:	dc06      	bgt.n	8006bf8 <__sflush_r+0xf8>
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf4:	81a3      	strh	r3, [r4, #12]
 8006bf6:	e790      	b.n	8006b1a <__sflush_r+0x1a>
 8006bf8:	4407      	add	r7, r0
 8006bfa:	1a36      	subs	r6, r6, r0
 8006bfc:	e7ea      	b.n	8006bd4 <__sflush_r+0xd4>
 8006bfe:	bf00      	nop
 8006c00:	20400001 	.word	0x20400001

08006c04 <_fflush_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	690b      	ldr	r3, [r1, #16]
 8006c08:	4605      	mov	r5, r0
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	b913      	cbnz	r3, 8006c14 <_fflush_r+0x10>
 8006c0e:	2500      	movs	r5, #0
 8006c10:	4628      	mov	r0, r5
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	b118      	cbz	r0, 8006c1e <_fflush_r+0x1a>
 8006c16:	6983      	ldr	r3, [r0, #24]
 8006c18:	b90b      	cbnz	r3, 8006c1e <_fflush_r+0x1a>
 8006c1a:	f000 f887 	bl	8006d2c <__sinit>
 8006c1e:	4b14      	ldr	r3, [pc, #80]	; (8006c70 <_fflush_r+0x6c>)
 8006c20:	429c      	cmp	r4, r3
 8006c22:	d11b      	bne.n	8006c5c <_fflush_r+0x58>
 8006c24:	686c      	ldr	r4, [r5, #4]
 8006c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0ef      	beq.n	8006c0e <_fflush_r+0xa>
 8006c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c30:	07d0      	lsls	r0, r2, #31
 8006c32:	d404      	bmi.n	8006c3e <_fflush_r+0x3a>
 8006c34:	0599      	lsls	r1, r3, #22
 8006c36:	d402      	bmi.n	8006c3e <_fflush_r+0x3a>
 8006c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c3a:	f000 f915 	bl	8006e68 <__retarget_lock_acquire_recursive>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	4621      	mov	r1, r4
 8006c42:	f7ff ff5d 	bl	8006b00 <__sflush_r>
 8006c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c48:	4605      	mov	r5, r0
 8006c4a:	07da      	lsls	r2, r3, #31
 8006c4c:	d4e0      	bmi.n	8006c10 <_fflush_r+0xc>
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	059b      	lsls	r3, r3, #22
 8006c52:	d4dd      	bmi.n	8006c10 <_fflush_r+0xc>
 8006c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c56:	f000 f908 	bl	8006e6a <__retarget_lock_release_recursive>
 8006c5a:	e7d9      	b.n	8006c10 <_fflush_r+0xc>
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <_fflush_r+0x70>)
 8006c5e:	429c      	cmp	r4, r3
 8006c60:	d101      	bne.n	8006c66 <_fflush_r+0x62>
 8006c62:	68ac      	ldr	r4, [r5, #8]
 8006c64:	e7df      	b.n	8006c26 <_fflush_r+0x22>
 8006c66:	4b04      	ldr	r3, [pc, #16]	; (8006c78 <_fflush_r+0x74>)
 8006c68:	429c      	cmp	r4, r3
 8006c6a:	bf08      	it	eq
 8006c6c:	68ec      	ldreq	r4, [r5, #12]
 8006c6e:	e7da      	b.n	8006c26 <_fflush_r+0x22>
 8006c70:	08007534 	.word	0x08007534
 8006c74:	08007554 	.word	0x08007554
 8006c78:	08007514 	.word	0x08007514

08006c7c <std>:
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	4604      	mov	r4, r0
 8006c82:	e9c0 3300 	strd	r3, r3, [r0]
 8006c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c8a:	6083      	str	r3, [r0, #8]
 8006c8c:	8181      	strh	r1, [r0, #12]
 8006c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c90:	81c2      	strh	r2, [r0, #14]
 8006c92:	6183      	str	r3, [r0, #24]
 8006c94:	4619      	mov	r1, r3
 8006c96:	2208      	movs	r2, #8
 8006c98:	305c      	adds	r0, #92	; 0x5c
 8006c9a:	f7fd fb51 	bl	8004340 <memset>
 8006c9e:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <std+0x38>)
 8006ca0:	6224      	str	r4, [r4, #32]
 8006ca2:	6263      	str	r3, [r4, #36]	; 0x24
 8006ca4:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <std+0x3c>)
 8006ca6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ca8:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <std+0x40>)
 8006caa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cac:	4b04      	ldr	r3, [pc, #16]	; (8006cc0 <std+0x44>)
 8006cae:	6323      	str	r3, [r4, #48]	; 0x30
 8006cb0:	bd10      	pop	{r4, pc}
 8006cb2:	bf00      	nop
 8006cb4:	08006fd1 	.word	0x08006fd1
 8006cb8:	08006ff3 	.word	0x08006ff3
 8006cbc:	0800702b 	.word	0x0800702b
 8006cc0:	0800704f 	.word	0x0800704f

08006cc4 <_cleanup_r>:
 8006cc4:	4901      	ldr	r1, [pc, #4]	; (8006ccc <_cleanup_r+0x8>)
 8006cc6:	f000 b8af 	b.w	8006e28 <_fwalk_reent>
 8006cca:	bf00      	nop
 8006ccc:	08006c05 	.word	0x08006c05

08006cd0 <__sfmoreglue>:
 8006cd0:	2268      	movs	r2, #104	; 0x68
 8006cd2:	b570      	push	{r4, r5, r6, lr}
 8006cd4:	1e4d      	subs	r5, r1, #1
 8006cd6:	4355      	muls	r5, r2
 8006cd8:	460e      	mov	r6, r1
 8006cda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cde:	f7ff fa6b 	bl	80061b8 <_malloc_r>
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	b140      	cbz	r0, 8006cf8 <__sfmoreglue+0x28>
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	e9c0 1600 	strd	r1, r6, [r0]
 8006cec:	300c      	adds	r0, #12
 8006cee:	60a0      	str	r0, [r4, #8]
 8006cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cf4:	f7fd fb24 	bl	8004340 <memset>
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}

08006cfc <__sfp_lock_acquire>:
 8006cfc:	4801      	ldr	r0, [pc, #4]	; (8006d04 <__sfp_lock_acquire+0x8>)
 8006cfe:	f000 b8b3 	b.w	8006e68 <__retarget_lock_acquire_recursive>
 8006d02:	bf00      	nop
 8006d04:	20000489 	.word	0x20000489

08006d08 <__sfp_lock_release>:
 8006d08:	4801      	ldr	r0, [pc, #4]	; (8006d10 <__sfp_lock_release+0x8>)
 8006d0a:	f000 b8ae 	b.w	8006e6a <__retarget_lock_release_recursive>
 8006d0e:	bf00      	nop
 8006d10:	20000489 	.word	0x20000489

08006d14 <__sinit_lock_acquire>:
 8006d14:	4801      	ldr	r0, [pc, #4]	; (8006d1c <__sinit_lock_acquire+0x8>)
 8006d16:	f000 b8a7 	b.w	8006e68 <__retarget_lock_acquire_recursive>
 8006d1a:	bf00      	nop
 8006d1c:	2000048a 	.word	0x2000048a

08006d20 <__sinit_lock_release>:
 8006d20:	4801      	ldr	r0, [pc, #4]	; (8006d28 <__sinit_lock_release+0x8>)
 8006d22:	f000 b8a2 	b.w	8006e6a <__retarget_lock_release_recursive>
 8006d26:	bf00      	nop
 8006d28:	2000048a 	.word	0x2000048a

08006d2c <__sinit>:
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	4604      	mov	r4, r0
 8006d30:	f7ff fff0 	bl	8006d14 <__sinit_lock_acquire>
 8006d34:	69a3      	ldr	r3, [r4, #24]
 8006d36:	b11b      	cbz	r3, 8006d40 <__sinit+0x14>
 8006d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d3c:	f7ff bff0 	b.w	8006d20 <__sinit_lock_release>
 8006d40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d44:	6523      	str	r3, [r4, #80]	; 0x50
 8006d46:	4b13      	ldr	r3, [pc, #76]	; (8006d94 <__sinit+0x68>)
 8006d48:	4a13      	ldr	r2, [pc, #76]	; (8006d98 <__sinit+0x6c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d4e:	42a3      	cmp	r3, r4
 8006d50:	bf08      	it	eq
 8006d52:	2301      	moveq	r3, #1
 8006d54:	4620      	mov	r0, r4
 8006d56:	bf08      	it	eq
 8006d58:	61a3      	streq	r3, [r4, #24]
 8006d5a:	f000 f81f 	bl	8006d9c <__sfp>
 8006d5e:	6060      	str	r0, [r4, #4]
 8006d60:	4620      	mov	r0, r4
 8006d62:	f000 f81b 	bl	8006d9c <__sfp>
 8006d66:	60a0      	str	r0, [r4, #8]
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 f817 	bl	8006d9c <__sfp>
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2104      	movs	r1, #4
 8006d72:	60e0      	str	r0, [r4, #12]
 8006d74:	6860      	ldr	r0, [r4, #4]
 8006d76:	f7ff ff81 	bl	8006c7c <std>
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	2109      	movs	r1, #9
 8006d7e:	68a0      	ldr	r0, [r4, #8]
 8006d80:	f7ff ff7c 	bl	8006c7c <std>
 8006d84:	2202      	movs	r2, #2
 8006d86:	2112      	movs	r1, #18
 8006d88:	68e0      	ldr	r0, [r4, #12]
 8006d8a:	f7ff ff77 	bl	8006c7c <std>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	61a3      	str	r3, [r4, #24]
 8006d92:	e7d1      	b.n	8006d38 <__sinit+0xc>
 8006d94:	0800719c 	.word	0x0800719c
 8006d98:	08006cc5 	.word	0x08006cc5

08006d9c <__sfp>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	4607      	mov	r7, r0
 8006da0:	f7ff ffac 	bl	8006cfc <__sfp_lock_acquire>
 8006da4:	4b1e      	ldr	r3, [pc, #120]	; (8006e20 <__sfp+0x84>)
 8006da6:	681e      	ldr	r6, [r3, #0]
 8006da8:	69b3      	ldr	r3, [r6, #24]
 8006daa:	b913      	cbnz	r3, 8006db2 <__sfp+0x16>
 8006dac:	4630      	mov	r0, r6
 8006dae:	f7ff ffbd 	bl	8006d2c <__sinit>
 8006db2:	3648      	adds	r6, #72	; 0x48
 8006db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	d503      	bpl.n	8006dc4 <__sfp+0x28>
 8006dbc:	6833      	ldr	r3, [r6, #0]
 8006dbe:	b30b      	cbz	r3, 8006e04 <__sfp+0x68>
 8006dc0:	6836      	ldr	r6, [r6, #0]
 8006dc2:	e7f7      	b.n	8006db4 <__sfp+0x18>
 8006dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006dc8:	b9d5      	cbnz	r5, 8006e00 <__sfp+0x64>
 8006dca:	4b16      	ldr	r3, [pc, #88]	; (8006e24 <__sfp+0x88>)
 8006dcc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dd0:	60e3      	str	r3, [r4, #12]
 8006dd2:	6665      	str	r5, [r4, #100]	; 0x64
 8006dd4:	f000 f847 	bl	8006e66 <__retarget_lock_init_recursive>
 8006dd8:	f7ff ff96 	bl	8006d08 <__sfp_lock_release>
 8006ddc:	2208      	movs	r2, #8
 8006dde:	4629      	mov	r1, r5
 8006de0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006de4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006de8:	6025      	str	r5, [r4, #0]
 8006dea:	61a5      	str	r5, [r4, #24]
 8006dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006df0:	f7fd faa6 	bl	8004340 <memset>
 8006df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e00:	3468      	adds	r4, #104	; 0x68
 8006e02:	e7d9      	b.n	8006db8 <__sfp+0x1c>
 8006e04:	2104      	movs	r1, #4
 8006e06:	4638      	mov	r0, r7
 8006e08:	f7ff ff62 	bl	8006cd0 <__sfmoreglue>
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	6030      	str	r0, [r6, #0]
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d1d5      	bne.n	8006dc0 <__sfp+0x24>
 8006e14:	f7ff ff78 	bl	8006d08 <__sfp_lock_release>
 8006e18:	230c      	movs	r3, #12
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	e7ee      	b.n	8006dfc <__sfp+0x60>
 8006e1e:	bf00      	nop
 8006e20:	0800719c 	.word	0x0800719c
 8006e24:	ffff0001 	.word	0xffff0001

08006e28 <_fwalk_reent>:
 8006e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e2c:	4606      	mov	r6, r0
 8006e2e:	4688      	mov	r8, r1
 8006e30:	2700      	movs	r7, #0
 8006e32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e3a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e3e:	d505      	bpl.n	8006e4c <_fwalk_reent+0x24>
 8006e40:	6824      	ldr	r4, [r4, #0]
 8006e42:	2c00      	cmp	r4, #0
 8006e44:	d1f7      	bne.n	8006e36 <_fwalk_reent+0xe>
 8006e46:	4638      	mov	r0, r7
 8006e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e4c:	89ab      	ldrh	r3, [r5, #12]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d907      	bls.n	8006e62 <_fwalk_reent+0x3a>
 8006e52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e56:	3301      	adds	r3, #1
 8006e58:	d003      	beq.n	8006e62 <_fwalk_reent+0x3a>
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	47c0      	blx	r8
 8006e60:	4307      	orrs	r7, r0
 8006e62:	3568      	adds	r5, #104	; 0x68
 8006e64:	e7e9      	b.n	8006e3a <_fwalk_reent+0x12>

08006e66 <__retarget_lock_init_recursive>:
 8006e66:	4770      	bx	lr

08006e68 <__retarget_lock_acquire_recursive>:
 8006e68:	4770      	bx	lr

08006e6a <__retarget_lock_release_recursive>:
 8006e6a:	4770      	bx	lr

08006e6c <__swhatbuf_r>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	460e      	mov	r6, r1
 8006e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e74:	4614      	mov	r4, r2
 8006e76:	2900      	cmp	r1, #0
 8006e78:	461d      	mov	r5, r3
 8006e7a:	b096      	sub	sp, #88	; 0x58
 8006e7c:	da08      	bge.n	8006e90 <__swhatbuf_r+0x24>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e84:	602a      	str	r2, [r5, #0]
 8006e86:	061a      	lsls	r2, r3, #24
 8006e88:	d410      	bmi.n	8006eac <__swhatbuf_r+0x40>
 8006e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e8e:	e00e      	b.n	8006eae <__swhatbuf_r+0x42>
 8006e90:	466a      	mov	r2, sp
 8006e92:	f000 f903 	bl	800709c <_fstat_r>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	dbf1      	blt.n	8006e7e <__swhatbuf_r+0x12>
 8006e9a:	9a01      	ldr	r2, [sp, #4]
 8006e9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ea0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ea4:	425a      	negs	r2, r3
 8006ea6:	415a      	adcs	r2, r3
 8006ea8:	602a      	str	r2, [r5, #0]
 8006eaa:	e7ee      	b.n	8006e8a <__swhatbuf_r+0x1e>
 8006eac:	2340      	movs	r3, #64	; 0x40
 8006eae:	2000      	movs	r0, #0
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	b016      	add	sp, #88	; 0x58
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006eb8 <__smakebuf_r>:
 8006eb8:	898b      	ldrh	r3, [r1, #12]
 8006eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ebc:	079d      	lsls	r5, r3, #30
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	d507      	bpl.n	8006ed4 <__smakebuf_r+0x1c>
 8006ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	6123      	str	r3, [r4, #16]
 8006ecc:	2301      	movs	r3, #1
 8006ece:	6163      	str	r3, [r4, #20]
 8006ed0:	b002      	add	sp, #8
 8006ed2:	bd70      	pop	{r4, r5, r6, pc}
 8006ed4:	466a      	mov	r2, sp
 8006ed6:	ab01      	add	r3, sp, #4
 8006ed8:	f7ff ffc8 	bl	8006e6c <__swhatbuf_r>
 8006edc:	9900      	ldr	r1, [sp, #0]
 8006ede:	4605      	mov	r5, r0
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f7ff f969 	bl	80061b8 <_malloc_r>
 8006ee6:	b948      	cbnz	r0, 8006efc <__smakebuf_r+0x44>
 8006ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eec:	059a      	lsls	r2, r3, #22
 8006eee:	d4ef      	bmi.n	8006ed0 <__smakebuf_r+0x18>
 8006ef0:	f023 0303 	bic.w	r3, r3, #3
 8006ef4:	f043 0302 	orr.w	r3, r3, #2
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	e7e3      	b.n	8006ec4 <__smakebuf_r+0xc>
 8006efc:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <__smakebuf_r+0x7c>)
 8006efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	6020      	str	r0, [r4, #0]
 8006f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f08:	81a3      	strh	r3, [r4, #12]
 8006f0a:	9b00      	ldr	r3, [sp, #0]
 8006f0c:	6120      	str	r0, [r4, #16]
 8006f0e:	6163      	str	r3, [r4, #20]
 8006f10:	9b01      	ldr	r3, [sp, #4]
 8006f12:	b15b      	cbz	r3, 8006f2c <__smakebuf_r+0x74>
 8006f14:	4630      	mov	r0, r6
 8006f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f1a:	f000 f8d1 	bl	80070c0 <_isatty_r>
 8006f1e:	b128      	cbz	r0, 8006f2c <__smakebuf_r+0x74>
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	f043 0301 	orr.w	r3, r3, #1
 8006f2a:	81a3      	strh	r3, [r4, #12]
 8006f2c:	89a0      	ldrh	r0, [r4, #12]
 8006f2e:	4305      	orrs	r5, r0
 8006f30:	81a5      	strh	r5, [r4, #12]
 8006f32:	e7cd      	b.n	8006ed0 <__smakebuf_r+0x18>
 8006f34:	08006cc5 	.word	0x08006cc5

08006f38 <_malloc_usable_size_r>:
 8006f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f3c:	1f18      	subs	r0, r3, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	bfbc      	itt	lt
 8006f42:	580b      	ldrlt	r3, [r1, r0]
 8006f44:	18c0      	addlt	r0, r0, r3
 8006f46:	4770      	bx	lr

08006f48 <_raise_r>:
 8006f48:	291f      	cmp	r1, #31
 8006f4a:	b538      	push	{r3, r4, r5, lr}
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	460d      	mov	r5, r1
 8006f50:	d904      	bls.n	8006f5c <_raise_r+0x14>
 8006f52:	2316      	movs	r3, #22
 8006f54:	6003      	str	r3, [r0, #0]
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f5e:	b112      	cbz	r2, 8006f66 <_raise_r+0x1e>
 8006f60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f64:	b94b      	cbnz	r3, 8006f7a <_raise_r+0x32>
 8006f66:	4620      	mov	r0, r4
 8006f68:	f000 f830 	bl	8006fcc <_getpid_r>
 8006f6c:	462a      	mov	r2, r5
 8006f6e:	4601      	mov	r1, r0
 8006f70:	4620      	mov	r0, r4
 8006f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f76:	f000 b817 	b.w	8006fa8 <_kill_r>
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d00a      	beq.n	8006f94 <_raise_r+0x4c>
 8006f7e:	1c59      	adds	r1, r3, #1
 8006f80:	d103      	bne.n	8006f8a <_raise_r+0x42>
 8006f82:	2316      	movs	r3, #22
 8006f84:	6003      	str	r3, [r0, #0]
 8006f86:	2001      	movs	r0, #1
 8006f88:	e7e7      	b.n	8006f5a <_raise_r+0x12>
 8006f8a:	2400      	movs	r4, #0
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f92:	4798      	blx	r3
 8006f94:	2000      	movs	r0, #0
 8006f96:	e7e0      	b.n	8006f5a <_raise_r+0x12>

08006f98 <raise>:
 8006f98:	4b02      	ldr	r3, [pc, #8]	; (8006fa4 <raise+0xc>)
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	f7ff bfd3 	b.w	8006f48 <_raise_r>
 8006fa2:	bf00      	nop
 8006fa4:	20000010 	.word	0x20000010

08006fa8 <_kill_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	2300      	movs	r3, #0
 8006fac:	4d06      	ldr	r5, [pc, #24]	; (8006fc8 <_kill_r+0x20>)
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	602b      	str	r3, [r5, #0]
 8006fb6:	f7fb fa09 	bl	80023cc <_kill>
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	d102      	bne.n	8006fc4 <_kill_r+0x1c>
 8006fbe:	682b      	ldr	r3, [r5, #0]
 8006fc0:	b103      	cbz	r3, 8006fc4 <_kill_r+0x1c>
 8006fc2:	6023      	str	r3, [r4, #0]
 8006fc4:	bd38      	pop	{r3, r4, r5, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000484 	.word	0x20000484

08006fcc <_getpid_r>:
 8006fcc:	f7fb b9fc 	b.w	80023c8 <_getpid>

08006fd0 <__sread>:
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd8:	f000 f894 	bl	8007104 <_read_r>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	bfab      	itete	ge
 8006fe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fe2:	89a3      	ldrhlt	r3, [r4, #12]
 8006fe4:	181b      	addge	r3, r3, r0
 8006fe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fea:	bfac      	ite	ge
 8006fec:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fee:	81a3      	strhlt	r3, [r4, #12]
 8006ff0:	bd10      	pop	{r4, pc}

08006ff2 <__swrite>:
 8006ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff6:	461f      	mov	r7, r3
 8006ff8:	898b      	ldrh	r3, [r1, #12]
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	05db      	lsls	r3, r3, #23
 8006ffe:	460c      	mov	r4, r1
 8007000:	4616      	mov	r6, r2
 8007002:	d505      	bpl.n	8007010 <__swrite+0x1e>
 8007004:	2302      	movs	r3, #2
 8007006:	2200      	movs	r2, #0
 8007008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800700c:	f000 f868 	bl	80070e0 <_lseek_r>
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	4632      	mov	r2, r6
 8007014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007018:	81a3      	strh	r3, [r4, #12]
 800701a:	4628      	mov	r0, r5
 800701c:	463b      	mov	r3, r7
 800701e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007026:	f000 b817 	b.w	8007058 <_write_r>

0800702a <__sseek>:
 800702a:	b510      	push	{r4, lr}
 800702c:	460c      	mov	r4, r1
 800702e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007032:	f000 f855 	bl	80070e0 <_lseek_r>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	bf15      	itete	ne
 800703c:	6560      	strne	r0, [r4, #84]	; 0x54
 800703e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007046:	81a3      	strheq	r3, [r4, #12]
 8007048:	bf18      	it	ne
 800704a:	81a3      	strhne	r3, [r4, #12]
 800704c:	bd10      	pop	{r4, pc}

0800704e <__sclose>:
 800704e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007052:	f000 b813 	b.w	800707c <_close_r>
	...

08007058 <_write_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4604      	mov	r4, r0
 800705c:	4608      	mov	r0, r1
 800705e:	4611      	mov	r1, r2
 8007060:	2200      	movs	r2, #0
 8007062:	4d05      	ldr	r5, [pc, #20]	; (8007078 <_write_r+0x20>)
 8007064:	602a      	str	r2, [r5, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	f7fb f9ce 	bl	8002408 <_write>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_write_r+0x1e>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_write_r+0x1e>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	20000484 	.word	0x20000484

0800707c <_close_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	2300      	movs	r3, #0
 8007080:	4d05      	ldr	r5, [pc, #20]	; (8007098 <_close_r+0x1c>)
 8007082:	4604      	mov	r4, r0
 8007084:	4608      	mov	r0, r1
 8007086:	602b      	str	r3, [r5, #0]
 8007088:	f7fb f9cc 	bl	8002424 <_close>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_close_r+0x1a>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b103      	cbz	r3, 8007096 <_close_r+0x1a>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	20000484 	.word	0x20000484

0800709c <_fstat_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	2300      	movs	r3, #0
 80070a0:	4d06      	ldr	r5, [pc, #24]	; (80070bc <_fstat_r+0x20>)
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	602b      	str	r3, [r5, #0]
 80070aa:	f7fb f9bf 	bl	800242c <_fstat>
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	d102      	bne.n	80070b8 <_fstat_r+0x1c>
 80070b2:	682b      	ldr	r3, [r5, #0]
 80070b4:	b103      	cbz	r3, 80070b8 <_fstat_r+0x1c>
 80070b6:	6023      	str	r3, [r4, #0]
 80070b8:	bd38      	pop	{r3, r4, r5, pc}
 80070ba:	bf00      	nop
 80070bc:	20000484 	.word	0x20000484

080070c0 <_isatty_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	2300      	movs	r3, #0
 80070c4:	4d05      	ldr	r5, [pc, #20]	; (80070dc <_isatty_r+0x1c>)
 80070c6:	4604      	mov	r4, r0
 80070c8:	4608      	mov	r0, r1
 80070ca:	602b      	str	r3, [r5, #0]
 80070cc:	f7fb f9b4 	bl	8002438 <_isatty>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d102      	bne.n	80070da <_isatty_r+0x1a>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	b103      	cbz	r3, 80070da <_isatty_r+0x1a>
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	20000484 	.word	0x20000484

080070e0 <_lseek_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	2200      	movs	r2, #0
 80070ea:	4d05      	ldr	r5, [pc, #20]	; (8007100 <_lseek_r+0x20>)
 80070ec:	602a      	str	r2, [r5, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f7fb f9a4 	bl	800243c <_lseek>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_lseek_r+0x1e>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_lseek_r+0x1e>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	20000484 	.word	0x20000484

08007104 <_read_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4604      	mov	r4, r0
 8007108:	4608      	mov	r0, r1
 800710a:	4611      	mov	r1, r2
 800710c:	2200      	movs	r2, #0
 800710e:	4d05      	ldr	r5, [pc, #20]	; (8007124 <_read_r+0x20>)
 8007110:	602a      	str	r2, [r5, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	f7fb f96a 	bl	80023ec <_read>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d102      	bne.n	8007122 <_read_r+0x1e>
 800711c:	682b      	ldr	r3, [r5, #0]
 800711e:	b103      	cbz	r3, 8007122 <_read_r+0x1e>
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	20000484 	.word	0x20000484

08007128 <_init>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	bf00      	nop
 800712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712e:	bc08      	pop	{r3}
 8007130:	469e      	mov	lr, r3
 8007132:	4770      	bx	lr

08007134 <_fini>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	bf00      	nop
 8007138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713a:	bc08      	pop	{r3}
 800713c:	469e      	mov	lr, r3
 800713e:	4770      	bx	lr
