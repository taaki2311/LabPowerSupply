
SecondaryBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f24  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a4  080040a4  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040ac  080040ac  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080040b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000020  080040d4  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080040d4  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084f7  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d7  00000000  00000000  00028540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  00029f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f9d  00000000  00000000  0002afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092b1  00000000  00000000  0003ef4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dc39  00000000  00000000  000481fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5e37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002434  00000000  00000000  000c5e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000020 	.word	0x20000020
 8000158:	00000000 	.word	0x00000000
 800015c:	08004048 	.word	0x08004048

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000024 	.word	0x20000024
 8000178:	08004048 	.word	0x08004048

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_f2uiz>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	d20e      	bcs.n	8000746 <__aeabi_f2uiz+0x22>
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800072c:	d30b      	bcc.n	8000746 <__aeabi_f2uiz+0x22>
 800072e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d409      	bmi.n	800074c <__aeabi_f2uiz+0x28>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	4770      	bx	lr
 8000746:	f04f 0000 	mov.w	r0, #0
 800074a:	4770      	bx	lr
 800074c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000750:	d101      	bne.n	8000756 <__aeabi_f2uiz+0x32>
 8000752:	0242      	lsls	r2, r0, #9
 8000754:	d102      	bne.n	800075c <__aeabi_f2uiz+0x38>
 8000756:	f04f 30ff 	mov.w	r0, #4294967295
 800075a:	4770      	bx	lr
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <__aeabi_uldivmod>:
 8000764:	b953      	cbnz	r3, 800077c <__aeabi_uldivmod+0x18>
 8000766:	b94a      	cbnz	r2, 800077c <__aeabi_uldivmod+0x18>
 8000768:	2900      	cmp	r1, #0
 800076a:	bf08      	it	eq
 800076c:	2800      	cmpeq	r0, #0
 800076e:	bf1c      	itt	ne
 8000770:	f04f 31ff 	movne.w	r1, #4294967295
 8000774:	f04f 30ff 	movne.w	r0, #4294967295
 8000778:	f000 b976 	b.w	8000a68 <__aeabi_idiv0>
 800077c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000780:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000784:	f000 f806 	bl	8000794 <__udivmoddi4>
 8000788:	f8dd e004 	ldr.w	lr, [sp, #4]
 800078c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000790:	b004      	add	sp, #16
 8000792:	4770      	bx	lr

08000794 <__udivmoddi4>:
 8000794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000798:	9e08      	ldr	r6, [sp, #32]
 800079a:	460d      	mov	r5, r1
 800079c:	4604      	mov	r4, r0
 800079e:	4688      	mov	r8, r1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d14d      	bne.n	8000840 <__udivmoddi4+0xac>
 80007a4:	428a      	cmp	r2, r1
 80007a6:	4694      	mov	ip, r2
 80007a8:	d968      	bls.n	800087c <__udivmoddi4+0xe8>
 80007aa:	fab2 f282 	clz	r2, r2
 80007ae:	b152      	cbz	r2, 80007c6 <__udivmoddi4+0x32>
 80007b0:	fa01 f302 	lsl.w	r3, r1, r2
 80007b4:	f1c2 0120 	rsb	r1, r2, #32
 80007b8:	fa20 f101 	lsr.w	r1, r0, r1
 80007bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007c0:	ea41 0803 	orr.w	r8, r1, r3
 80007c4:	4094      	lsls	r4, r2
 80007c6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80007ca:	fbb8 f7f1 	udiv	r7, r8, r1
 80007ce:	fa1f fe8c 	uxth.w	lr, ip
 80007d2:	fb01 8817 	mls	r8, r1, r7, r8
 80007d6:	fb07 f00e 	mul.w	r0, r7, lr
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007e0:	4298      	cmp	r0, r3
 80007e2:	d90a      	bls.n	80007fa <__udivmoddi4+0x66>
 80007e4:	eb1c 0303 	adds.w	r3, ip, r3
 80007e8:	f107 35ff 	add.w	r5, r7, #4294967295
 80007ec:	f080 811e 	bcs.w	8000a2c <__udivmoddi4+0x298>
 80007f0:	4298      	cmp	r0, r3
 80007f2:	f240 811b 	bls.w	8000a2c <__udivmoddi4+0x298>
 80007f6:	3f02      	subs	r7, #2
 80007f8:	4463      	add	r3, ip
 80007fa:	1a1b      	subs	r3, r3, r0
 80007fc:	fbb3 f0f1 	udiv	r0, r3, r1
 8000800:	fb01 3310 	mls	r3, r1, r0, r3
 8000804:	fb00 fe0e 	mul.w	lr, r0, lr
 8000808:	b2a4      	uxth	r4, r4
 800080a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800080e:	45a6      	cmp	lr, r4
 8000810:	d90a      	bls.n	8000828 <__udivmoddi4+0x94>
 8000812:	eb1c 0404 	adds.w	r4, ip, r4
 8000816:	f100 33ff 	add.w	r3, r0, #4294967295
 800081a:	f080 8109 	bcs.w	8000a30 <__udivmoddi4+0x29c>
 800081e:	45a6      	cmp	lr, r4
 8000820:	f240 8106 	bls.w	8000a30 <__udivmoddi4+0x29c>
 8000824:	4464      	add	r4, ip
 8000826:	3802      	subs	r0, #2
 8000828:	2100      	movs	r1, #0
 800082a:	eba4 040e 	sub.w	r4, r4, lr
 800082e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000832:	b11e      	cbz	r6, 800083c <__udivmoddi4+0xa8>
 8000834:	2300      	movs	r3, #0
 8000836:	40d4      	lsrs	r4, r2
 8000838:	e9c6 4300 	strd	r4, r3, [r6]
 800083c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000840:	428b      	cmp	r3, r1
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0xc2>
 8000844:	2e00      	cmp	r6, #0
 8000846:	f000 80ee 	beq.w	8000a26 <__udivmoddi4+0x292>
 800084a:	2100      	movs	r1, #0
 800084c:	e9c6 0500 	strd	r0, r5, [r6]
 8000850:	4608      	mov	r0, r1
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f183 	clz	r1, r3
 800085a:	2900      	cmp	r1, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x160>
 800085e:	42ab      	cmp	r3, r5
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0xd4>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80fc 	bhi.w	8000a60 <__udivmoddi4+0x2cc>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb65 0303 	sbc.w	r3, r5, r3
 800086e:	2001      	movs	r0, #1
 8000870:	4698      	mov	r8, r3
 8000872:	2e00      	cmp	r6, #0
 8000874:	d0e2      	beq.n	800083c <__udivmoddi4+0xa8>
 8000876:	e9c6 4800 	strd	r4, r8, [r6]
 800087a:	e7df      	b.n	800083c <__udivmoddi4+0xa8>
 800087c:	b902      	cbnz	r2, 8000880 <__udivmoddi4+0xec>
 800087e:	deff      	udf	#255	; 0xff
 8000880:	fab2 f282 	clz	r2, r2
 8000884:	2a00      	cmp	r2, #0
 8000886:	f040 8091 	bne.w	80009ac <__udivmoddi4+0x218>
 800088a:	eba1 000c 	sub.w	r0, r1, ip
 800088e:	2101      	movs	r1, #1
 8000890:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000894:	fa1f fe8c 	uxth.w	lr, ip
 8000898:	fbb0 f3f7 	udiv	r3, r0, r7
 800089c:	fb07 0013 	mls	r0, r7, r3, r0
 80008a0:	0c25      	lsrs	r5, r4, #16
 80008a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008a6:	fb0e f003 	mul.w	r0, lr, r3
 80008aa:	42a8      	cmp	r0, r5
 80008ac:	d908      	bls.n	80008c0 <__udivmoddi4+0x12c>
 80008ae:	eb1c 0505 	adds.w	r5, ip, r5
 80008b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80008b6:	d202      	bcs.n	80008be <__udivmoddi4+0x12a>
 80008b8:	42a8      	cmp	r0, r5
 80008ba:	f200 80ce 	bhi.w	8000a5a <__udivmoddi4+0x2c6>
 80008be:	4643      	mov	r3, r8
 80008c0:	1a2d      	subs	r5, r5, r0
 80008c2:	fbb5 f0f7 	udiv	r0, r5, r7
 80008c6:	fb07 5510 	mls	r5, r7, r0, r5
 80008ca:	fb0e fe00 	mul.w	lr, lr, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008d4:	45a6      	cmp	lr, r4
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x156>
 80008d8:	eb1c 0404 	adds.w	r4, ip, r4
 80008dc:	f100 35ff 	add.w	r5, r0, #4294967295
 80008e0:	d202      	bcs.n	80008e8 <__udivmoddi4+0x154>
 80008e2:	45a6      	cmp	lr, r4
 80008e4:	f200 80b6 	bhi.w	8000a54 <__udivmoddi4+0x2c0>
 80008e8:	4628      	mov	r0, r5
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008f2:	e79e      	b.n	8000832 <__udivmoddi4+0x9e>
 80008f4:	f1c1 0720 	rsb	r7, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80008fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000902:	fa25 fa07 	lsr.w	sl, r5, r7
 8000906:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800090a:	fbba f8f9 	udiv	r8, sl, r9
 800090e:	fa20 f307 	lsr.w	r3, r0, r7
 8000912:	fb09 aa18 	mls	sl, r9, r8, sl
 8000916:	408d      	lsls	r5, r1
 8000918:	fa1f fe8c 	uxth.w	lr, ip
 800091c:	431d      	orrs	r5, r3
 800091e:	fa00 f301 	lsl.w	r3, r0, r1
 8000922:	fb08 f00e 	mul.w	r0, r8, lr
 8000926:	0c2c      	lsrs	r4, r5, #16
 8000928:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800092c:	42a0      	cmp	r0, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d90b      	bls.n	800094c <__udivmoddi4+0x1b8>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f108 3aff 	add.w	sl, r8, #4294967295
 800093c:	f080 8088 	bcs.w	8000a50 <__udivmoddi4+0x2bc>
 8000940:	42a0      	cmp	r0, r4
 8000942:	f240 8085 	bls.w	8000a50 <__udivmoddi4+0x2bc>
 8000946:	f1a8 0802 	sub.w	r8, r8, #2
 800094a:	4464      	add	r4, ip
 800094c:	1a24      	subs	r4, r4, r0
 800094e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000952:	fb09 4410 	mls	r4, r9, r0, r4
 8000956:	fb00 fe0e 	mul.w	lr, r0, lr
 800095a:	b2ad      	uxth	r5, r5
 800095c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000960:	45a6      	cmp	lr, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1e2>
 8000964:	eb1c 0404 	adds.w	r4, ip, r4
 8000968:	f100 35ff 	add.w	r5, r0, #4294967295
 800096c:	d26c      	bcs.n	8000a48 <__udivmoddi4+0x2b4>
 800096e:	45a6      	cmp	lr, r4
 8000970:	d96a      	bls.n	8000a48 <__udivmoddi4+0x2b4>
 8000972:	3802      	subs	r0, #2
 8000974:	4464      	add	r4, ip
 8000976:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800097a:	fba0 9502 	umull	r9, r5, r0, r2
 800097e:	eba4 040e 	sub.w	r4, r4, lr
 8000982:	42ac      	cmp	r4, r5
 8000984:	46c8      	mov	r8, r9
 8000986:	46ae      	mov	lr, r5
 8000988:	d356      	bcc.n	8000a38 <__udivmoddi4+0x2a4>
 800098a:	d053      	beq.n	8000a34 <__udivmoddi4+0x2a0>
 800098c:	2e00      	cmp	r6, #0
 800098e:	d069      	beq.n	8000a64 <__udivmoddi4+0x2d0>
 8000990:	ebb3 0208 	subs.w	r2, r3, r8
 8000994:	eb64 040e 	sbc.w	r4, r4, lr
 8000998:	fa22 f301 	lsr.w	r3, r2, r1
 800099c:	fa04 f707 	lsl.w	r7, r4, r7
 80009a0:	431f      	orrs	r7, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c6 7400 	strd	r7, r4, [r6]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e747      	b.n	800083c <__udivmoddi4+0xa8>
 80009ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b0:	f1c2 0120 	rsb	r1, r2, #32
 80009b4:	fa25 f301 	lsr.w	r3, r5, r1
 80009b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009bc:	fa20 f101 	lsr.w	r1, r0, r1
 80009c0:	4095      	lsls	r5, r2
 80009c2:	430d      	orrs	r5, r1
 80009c4:	fbb3 f1f7 	udiv	r1, r3, r7
 80009c8:	fb07 3311 	mls	r3, r7, r1, r3
 80009cc:	fa1f fe8c 	uxth.w	lr, ip
 80009d0:	0c28      	lsrs	r0, r5, #16
 80009d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d6:	fb01 f30e 	mul.w	r3, r1, lr
 80009da:	4283      	cmp	r3, r0
 80009dc:	fa04 f402 	lsl.w	r4, r4, r2
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x260>
 80009e2:	eb1c 0000 	adds.w	r0, ip, r0
 80009e6:	f101 38ff 	add.w	r8, r1, #4294967295
 80009ea:	d22f      	bcs.n	8000a4c <__udivmoddi4+0x2b8>
 80009ec:	4283      	cmp	r3, r0
 80009ee:	d92d      	bls.n	8000a4c <__udivmoddi4+0x2b8>
 80009f0:	3902      	subs	r1, #2
 80009f2:	4460      	add	r0, ip
 80009f4:	1ac0      	subs	r0, r0, r3
 80009f6:	fbb0 f3f7 	udiv	r3, r0, r7
 80009fa:	fb07 0013 	mls	r0, r7, r3, r0
 80009fe:	b2ad      	uxth	r5, r5
 8000a00:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a04:	fb03 f00e 	mul.w	r0, r3, lr
 8000a08:	42a8      	cmp	r0, r5
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x28a>
 8000a0c:	eb1c 0505 	adds.w	r5, ip, r5
 8000a10:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a14:	d216      	bcs.n	8000a44 <__udivmoddi4+0x2b0>
 8000a16:	42a8      	cmp	r0, r5
 8000a18:	d914      	bls.n	8000a44 <__udivmoddi4+0x2b0>
 8000a1a:	3b02      	subs	r3, #2
 8000a1c:	4465      	add	r5, ip
 8000a1e:	1a28      	subs	r0, r5, r0
 8000a20:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a24:	e738      	b.n	8000898 <__udivmoddi4+0x104>
 8000a26:	4631      	mov	r1, r6
 8000a28:	4630      	mov	r0, r6
 8000a2a:	e707      	b.n	800083c <__udivmoddi4+0xa8>
 8000a2c:	462f      	mov	r7, r5
 8000a2e:	e6e4      	b.n	80007fa <__udivmoddi4+0x66>
 8000a30:	4618      	mov	r0, r3
 8000a32:	e6f9      	b.n	8000828 <__udivmoddi4+0x94>
 8000a34:	454b      	cmp	r3, r9
 8000a36:	d2a9      	bcs.n	800098c <__udivmoddi4+0x1f8>
 8000a38:	ebb9 0802 	subs.w	r8, r9, r2
 8000a3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a40:	3801      	subs	r0, #1
 8000a42:	e7a3      	b.n	800098c <__udivmoddi4+0x1f8>
 8000a44:	4643      	mov	r3, r8
 8000a46:	e7ea      	b.n	8000a1e <__udivmoddi4+0x28a>
 8000a48:	4628      	mov	r0, r5
 8000a4a:	e794      	b.n	8000976 <__udivmoddi4+0x1e2>
 8000a4c:	4641      	mov	r1, r8
 8000a4e:	e7d1      	b.n	80009f4 <__udivmoddi4+0x260>
 8000a50:	46d0      	mov	r8, sl
 8000a52:	e77b      	b.n	800094c <__udivmoddi4+0x1b8>
 8000a54:	4464      	add	r4, ip
 8000a56:	3802      	subs	r0, #2
 8000a58:	e747      	b.n	80008ea <__udivmoddi4+0x156>
 8000a5a:	3b02      	subs	r3, #2
 8000a5c:	4465      	add	r5, ip
 8000a5e:	e72f      	b.n	80008c0 <__udivmoddi4+0x12c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e706      	b.n	8000872 <__udivmoddi4+0xde>
 8000a64:	4631      	mov	r1, r6
 8000a66:	e6e9      	b.n	800083c <__udivmoddi4+0xa8>

08000a68 <__aeabi_idiv0>:
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b087      	sub	sp, #28
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f000 fe94 	bl	800179e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a76:	f000 fa83 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7a:	f000 fbe5 	bl	8001248 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a7e:	f000 fbbd 	bl	80011fc <MX_DMA_Init>
  MX_ADC_Init();
 8000a82:	f000 fac9 	bl	8001018 <MX_ADC_Init>
  MX_DAC_Init();
 8000a86:	f000 fb59 	bl	800113c <MX_DAC_Init>
  MX_USART1_UART_Init();
 8000a8a:	f000 fb8b 	bl	80011a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ourInit();
 8000a8e:	f000 fc19 	bl	80012c4 <ourInit>

    /* USER CODE BEGIN 3 */

	  //Control channel here

	  if(voltnum1 <= 0.00){
 8000a92:	4b9d      	ldr	r3, [pc, #628]	; (8000d08 <main+0x29c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f04f 0100 	mov.w	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fe24 	bl	80006e8 <__aeabi_fcmple>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d004      	beq.n	8000ab0 <main+0x44>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	4898      	ldr	r0, [pc, #608]	; (8000d0c <main+0x2a0>)
 8000aac:	f002 fa56 	bl	8002f5c <HAL_GPIO_WritePin>
		  //HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_RESET);
	  }

	  uint16_t vrefvalue = (uint16_t)*vrefptr;
 8000ab0:	4b97      	ldr	r3, [pc, #604]	; (8000d10 <main+0x2a4>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	82fb      	strh	r3, [r7, #22]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)adc_vref);
 8000ab8:	8afb      	ldrh	r3, [r7, #22]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fc14 	bl	80002e8 <__aeabi_ui2f>
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	4b94      	ldr	r3, [pc, #592]	; (8000d14 <main+0x2a8>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fc0e 	bl	80002e8 <__aeabi_ui2f>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f7ff fd15 	bl	8000500 <__aeabi_fdiv>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	498f      	ldr	r1, [pc, #572]	; (8000d18 <main+0x2ac>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fc5c 	bl	8000398 <__aeabi_fmul>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	613b      	str	r3, [r7, #16]

	  float cur_num_temp = ((((float)3.0 * (float)adc_current * (float)vrefvalue)/((float)adc_vref * (float)4095) / (float)20) / (float)0.15);
 8000ae4:	4b8d      	ldr	r3, [pc, #564]	; (8000d1c <main+0x2b0>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fbfd 	bl	80002e8 <__aeabi_ui2f>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4989      	ldr	r1, [pc, #548]	; (8000d18 <main+0x2ac>)
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fc50 	bl	8000398 <__aeabi_fmul>
 8000af8:	4603      	mov	r3, r0
 8000afa:	461c      	mov	r4, r3
 8000afc:	8afb      	ldrh	r3, [r7, #22]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fbf2 	bl	80002e8 <__aeabi_ui2f>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4619      	mov	r1, r3
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f7ff fc45 	bl	8000398 <__aeabi_fmul>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461c      	mov	r4, r3
 8000b12:	4b80      	ldr	r3, [pc, #512]	; (8000d14 <main+0x2a8>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fbe6 	bl	80002e8 <__aeabi_ui2f>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4980      	ldr	r1, [pc, #512]	; (8000d20 <main+0x2b4>)
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fc39 	bl	8000398 <__aeabi_fmul>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f7ff fce8 	bl	8000500 <__aeabi_fdiv>
 8000b30:	4603      	mov	r3, r0
 8000b32:	497c      	ldr	r1, [pc, #496]	; (8000d24 <main+0x2b8>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fce3 	bl	8000500 <__aeabi_fdiv>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	497a      	ldr	r1, [pc, #488]	; (8000d28 <main+0x2bc>)
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fcde 	bl	8000500 <__aeabi_fdiv>
 8000b44:	4603      	mov	r3, r0
 8000b46:	60fb      	str	r3, [r7, #12]
	  if(cur_num_temp >= 0.0000){
 8000b48:	f04f 0100 	mov.w	r1, #0
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f7ff fdd5 	bl	80006fc <__aeabi_fcmpge>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <main+0xf4>
		  cur_num = cur_num_temp;
 8000b58:	4a74      	ldr	r2, [pc, #464]	; (8000d2c <main+0x2c0>)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e003      	b.n	8000b68 <main+0xfc>
	  }
	  else{
		  cur_num = 0.0000;
 8000b60:	4b72      	ldr	r3, [pc, #456]	; (8000d2c <main+0x2c0>)
 8000b62:	f04f 0200 	mov.w	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
	  }
	  //float cur_num = (((float)vddcalc * (float)adc_current * (float)4095) / (float)20) / (float)0.3;
	  float op_num_temp = ((float)3.0 * ((float)adc_opamp * (float)4.0) * (float)vrefvalue)/((float)adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 8000b68:	4b71      	ldr	r3, [pc, #452]	; (8000d30 <main+0x2c4>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fbbb 	bl	80002e8 <__aeabi_ui2f>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fc0d 	bl	8000398 <__aeabi_fmul>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4965      	ldr	r1, [pc, #404]	; (8000d18 <main+0x2ac>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fc08 	bl	8000398 <__aeabi_fmul>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	461c      	mov	r4, r3
 8000b8c:	8afb      	ldrh	r3, [r7, #22]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fbaa 	bl	80002e8 <__aeabi_ui2f>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4619      	mov	r1, r3
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f7ff fbfd 	bl	8000398 <__aeabi_fmul>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	461c      	mov	r4, r3
 8000ba2:	4b5c      	ldr	r3, [pc, #368]	; (8000d14 <main+0x2a8>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fb9e 	bl	80002e8 <__aeabi_ui2f>
 8000bac:	4603      	mov	r3, r0
 8000bae:	495c      	ldr	r1, [pc, #368]	; (8000d20 <main+0x2b4>)
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fbf1 	bl	8000398 <__aeabi_fmul>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4620      	mov	r0, r4
 8000bbc:	f7ff fca0 	bl	8000500 <__aeabi_fdiv>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461c      	mov	r4, r3
 8000bc4:	4b59      	ldr	r3, [pc, #356]	; (8000d2c <main+0x2c0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	495a      	ldr	r1, [pc, #360]	; (8000d34 <main+0x2c8>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fbe4 	bl	8000398 <__aeabi_fmul>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	f7ff fad5 	bl	8000184 <__aeabi_fsub>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	60bb      	str	r3, [r7, #8]
	  if(op_num_temp >= 0.0000){
 8000bde:	f04f 0100 	mov.w	r1, #0
 8000be2:	68b8      	ldr	r0, [r7, #8]
 8000be4:	f7ff fd8a 	bl	80006fc <__aeabi_fcmpge>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <main+0x18a>
		  op_num = op_num_temp;
 8000bee:	4a52      	ldr	r2, [pc, #328]	; (8000d38 <main+0x2cc>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	e003      	b.n	8000bfe <main+0x192>
	  }
	  else{
		  op_num = 0.0000;
 8000bf6:	4b50      	ldr	r3, [pc, #320]	; (8000d38 <main+0x2cc>)
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
	  }
	  float lin_num_temp = ((float)3.0 * ((float)adc_linear * (float)4.0) * (float)vrefvalue)/((float)adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 8000bfe:	4b4f      	ldr	r3, [pc, #316]	; (8000d3c <main+0x2d0>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fb70 	bl	80002e8 <__aeabi_ui2f>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fbc2 	bl	8000398 <__aeabi_fmul>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4940      	ldr	r1, [pc, #256]	; (8000d18 <main+0x2ac>)
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fbbd 	bl	8000398 <__aeabi_fmul>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461c      	mov	r4, r3
 8000c22:	8afb      	ldrh	r3, [r7, #22]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fb5f 	bl	80002e8 <__aeabi_ui2f>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4620      	mov	r0, r4
 8000c30:	f7ff fbb2 	bl	8000398 <__aeabi_fmul>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461c      	mov	r4, r3
 8000c38:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <main+0x2a8>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fb53 	bl	80002e8 <__aeabi_ui2f>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4936      	ldr	r1, [pc, #216]	; (8000d20 <main+0x2b4>)
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fba6 	bl	8000398 <__aeabi_fmul>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4620      	mov	r0, r4
 8000c52:	f7ff fc55 	bl	8000500 <__aeabi_fdiv>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461c      	mov	r4, r3
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <main+0x2c0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4935      	ldr	r1, [pc, #212]	; (8000d34 <main+0x2c8>)
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fb99 	bl	8000398 <__aeabi_fmul>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f7ff fa8a 	bl	8000184 <__aeabi_fsub>
 8000c70:	4603      	mov	r3, r0
 8000c72:	607b      	str	r3, [r7, #4]
	  if(lin_num_temp >= 0.0000){
 8000c74:	f04f 0100 	mov.w	r1, #0
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff fd3f 	bl	80006fc <__aeabi_fcmpge>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <main+0x220>
		  lin_num = lin_num_temp;
 8000c84:	4a2e      	ldr	r2, [pc, #184]	; (8000d40 <main+0x2d4>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	e003      	b.n	8000c94 <main+0x228>
	  }
	  else{
		  lin_num = 0.0000;
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <main+0x2d4>)
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
	  }
	  //float lin_num = ((float)vddcalc * (float)adc_linear * (float)4095) * (float)4;
	  float swi_num_temp = ((float)3.0 * ((float)adc_switching * (float)5.0) * (float)vrefvalue)/((float)adc_vref * (float)4095);
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <main+0x2d8>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fb25 	bl	80002e8 <__aeabi_ui2f>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4929      	ldr	r1, [pc, #164]	; (8000d48 <main+0x2dc>)
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fb78 	bl	8000398 <__aeabi_fmul>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	491b      	ldr	r1, [pc, #108]	; (8000d18 <main+0x2ac>)
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fb73 	bl	8000398 <__aeabi_fmul>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461c      	mov	r4, r3
 8000cb6:	8afb      	ldrh	r3, [r7, #22]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fb15 	bl	80002e8 <__aeabi_ui2f>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	f7ff fb68 	bl	8000398 <__aeabi_fmul>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461c      	mov	r4, r3
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <main+0x2a8>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fb09 	bl	80002e8 <__aeabi_ui2f>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4911      	ldr	r1, [pc, #68]	; (8000d20 <main+0x2b4>)
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fb5c 	bl	8000398 <__aeabi_fmul>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f7ff fc0b 	bl	8000500 <__aeabi_fdiv>
 8000cea:	4603      	mov	r3, r0
 8000cec:	603b      	str	r3, [r7, #0]
	  if(swi_num_temp >= 0.0000){
 8000cee:	f04f 0100 	mov.w	r1, #0
 8000cf2:	6838      	ldr	r0, [r7, #0]
 8000cf4:	f7ff fd02 	bl	80006fc <__aeabi_fcmpge>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d028      	beq.n	8000d50 <main+0x2e4>
		  swi_num = swi_num_temp;
 8000cfe:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <main+0x2e0>)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	e028      	b.n	8000d58 <main+0x2ec>
 8000d06:	bf00      	nop
 8000d08:	20000230 	.word	0x20000230
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	20000010 	.word	0x20000010
 8000d14:	2000024a 	.word	0x2000024a
 8000d18:	40400000 	.word	0x40400000
 8000d1c:	20000242 	.word	0x20000242
 8000d20:	457ff000 	.word	0x457ff000
 8000d24:	41a00000 	.word	0x41a00000
 8000d28:	3e19999a 	.word	0x3e19999a
 8000d2c:	20000254 	.word	0x20000254
 8000d30:	20000246 	.word	0x20000246
 8000d34:	3eb33333 	.word	0x3eb33333
 8000d38:	20000258 	.word	0x20000258
 8000d3c:	20000244 	.word	0x20000244
 8000d40:	20000250 	.word	0x20000250
 8000d44:	20000248 	.word	0x20000248
 8000d48:	40a00000 	.word	0x40a00000
 8000d4c:	2000025c 	.word	0x2000025c
	  }
	  else{
		  swi_num = 0.0000;
 8000d50:	4b78      	ldr	r3, [pc, #480]	; (8000f34 <main+0x4c8>)
 8000d52:	f04f 0200 	mov.w	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
	  }

	  if(first_shot){
 8000d58:	4b77      	ldr	r3, [pc, #476]	; (8000f38 <main+0x4cc>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d038      	beq.n	8000dd2 <main+0x366>
		  v1 = (uint16_t)((( (((float)voltnum1) / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8000d60:	4b76      	ldr	r3, [pc, #472]	; (8000f3c <main+0x4d0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fbc9 	bl	8000500 <__aeabi_fdiv>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4973      	ldr	r1, [pc, #460]	; (8000f40 <main+0x4d4>)
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fa08 	bl	8000188 <__addsf3>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	4972      	ldr	r1, [pc, #456]	; (8000f44 <main+0x4d8>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fb0b 	bl	8000398 <__aeabi_fmul>
 8000d82:	4603      	mov	r3, r0
 8000d84:	6939      	ldr	r1, [r7, #16]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fbba 	bl	8000500 <__aeabi_fdiv>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fcc8 	bl	8000724 <__aeabi_f2uiz>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	4b6b      	ldr	r3, [pc, #428]	; (8000f48 <main+0x4dc>)
 8000d9a:	801a      	strh	r2, [r3, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8000d9c:	4b6a      	ldr	r3, [pc, #424]	; (8000f48 <main+0x4dc>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	4869      	ldr	r0, [pc, #420]	; (8000f4c <main+0x4e0>)
 8000da6:	f001 fc2f 	bl	8002608 <HAL_DAC_SetValue>
		  correctedvoltnum1 = voltnum1;
 8000daa:	4b64      	ldr	r3, [pc, #400]	; (8000f3c <main+0x4d0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a68      	ldr	r2, [pc, #416]	; (8000f50 <main+0x4e4>)
 8000db0:	6013      	str	r3, [r2, #0]
		  integral = 0;
 8000db2:	4b68      	ldr	r3, [pc, #416]	; (8000f54 <main+0x4e8>)
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
		  error = 0;
 8000dba:	4b67      	ldr	r3, [pc, #412]	; (8000f58 <main+0x4ec>)
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
		  derivative = 0;
 8000dc2:	4b66      	ldr	r3, [pc, #408]	; (8000f5c <main+0x4f0>)
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
		  first_shot = 0;
 8000dca:	4b5b      	ldr	r3, [pc, #364]	; (8000f38 <main+0x4cc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e09d      	b.n	8000f0e <main+0x4a2>
*/



	  else {
		  error = lin_num - voltnum1;
 8000dd2:	4b63      	ldr	r3, [pc, #396]	; (8000f60 <main+0x4f4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a59      	ldr	r2, [pc, #356]	; (8000f3c <main+0x4d0>)
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff f9d1 	bl	8000184 <__aeabi_fsub>
 8000de2:	4603      	mov	r3, r0
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b5c      	ldr	r3, [pc, #368]	; (8000f58 <main+0x4ec>)
 8000de8:	601a      	str	r2, [r3, #0]
		  integral += error;
 8000dea:	4b5a      	ldr	r3, [pc, #360]	; (8000f54 <main+0x4e8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a5a      	ldr	r2, [pc, #360]	; (8000f58 <main+0x4ec>)
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff f9c7 	bl	8000188 <__addsf3>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b55      	ldr	r3, [pc, #340]	; (8000f54 <main+0x4e8>)
 8000e00:	601a      	str	r2, [r3, #0]
		  derivative = error - error_previous;
 8000e02:	4b55      	ldr	r3, [pc, #340]	; (8000f58 <main+0x4ec>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a57      	ldr	r2, [pc, #348]	; (8000f64 <main+0x4f8>)
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff f9b9 	bl	8000184 <__aeabi_fsub>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b51      	ldr	r3, [pc, #324]	; (8000f5c <main+0x4f0>)
 8000e18:	601a      	str	r2, [r3, #0]
		  error_previous = error;
 8000e1a:	4b4f      	ldr	r3, [pc, #316]	; (8000f58 <main+0x4ec>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a51      	ldr	r2, [pc, #324]	; (8000f64 <main+0x4f8>)
 8000e20:	6013      	str	r3, [r2, #0]
		  correction = P * error + I * integral + D * derivative;
 8000e22:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <main+0x4fc>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a4c      	ldr	r2, [pc, #304]	; (8000f58 <main+0x4ec>)
 8000e28:	6812      	ldr	r2, [r2, #0]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fab3 	bl	8000398 <__aeabi_fmul>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461c      	mov	r4, r3
 8000e36:	4b4d      	ldr	r3, [pc, #308]	; (8000f6c <main+0x500>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a46      	ldr	r2, [pc, #280]	; (8000f54 <main+0x4e8>)
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff faa9 	bl	8000398 <__aeabi_fmul>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f7ff f99c 	bl	8000188 <__addsf3>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461c      	mov	r4, r3
 8000e54:	4b46      	ldr	r3, [pc, #280]	; (8000f70 <main+0x504>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a40      	ldr	r2, [pc, #256]	; (8000f5c <main+0x4f0>)
 8000e5a:	6812      	ldr	r2, [r2, #0]
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fa9a 	bl	8000398 <__aeabi_fmul>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4619      	mov	r1, r3
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f7ff f98d 	bl	8000188 <__addsf3>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b40      	ldr	r3, [pc, #256]	; (8000f74 <main+0x508>)
 8000e74:	601a      	str	r2, [r3, #0]
		  correctedvoltnum1 = voltnum1 - correction;
 8000e76:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <main+0x4d0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a3e      	ldr	r2, [pc, #248]	; (8000f74 <main+0x508>)
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff f97f 	bl	8000184 <__aeabi_fsub>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <main+0x4e4>)
 8000e8c:	601a      	str	r2, [r3, #0]
		  if(correctedvoltnum1 > 12.0){
 8000e8e:	4b30      	ldr	r3, [pc, #192]	; (8000f50 <main+0x4e4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4939      	ldr	r1, [pc, #228]	; (8000f78 <main+0x50c>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fc3b 	bl	8000710 <__aeabi_fcmpgt>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <main+0x43c>
			  correctedvoltnum1 = 12.0;
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <main+0x4e4>)
 8000ea2:	4a35      	ldr	r2, [pc, #212]	; (8000f78 <main+0x50c>)
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	e00d      	b.n	8000ec4 <main+0x458>
		  }
		  else if(correctedvoltnum1 < 0.0){
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <main+0x4e4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f04f 0100 	mov.w	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fc0f 	bl	80006d4 <__aeabi_fcmplt>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <main+0x458>
			  correctedvoltnum1 = 0.0;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <main+0x4e4>)
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
		  }
		  v1 = (uint16_t)((( (correctedvoltnum1 / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <main+0x4e4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fb17 	bl	8000500 <__aeabi_fdiv>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	491a      	ldr	r1, [pc, #104]	; (8000f40 <main+0x4d4>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff f956 	bl	8000188 <__addsf3>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4919      	ldr	r1, [pc, #100]	; (8000f44 <main+0x4d8>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fa59 	bl	8000398 <__aeabi_fmul>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6939      	ldr	r1, [r7, #16]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fb08 	bl	8000500 <__aeabi_fdiv>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fc16 	bl	8000724 <__aeabi_f2uiz>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <main+0x4dc>)
 8000efe:	801a      	strh	r2, [r3, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <main+0x4dc>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	4810      	ldr	r0, [pc, #64]	; (8000f4c <main+0x4e0>)
 8000f0a:	f001 fb7d 	bl	8002608 <HAL_DAC_SetValue>
	  }

	  if(voltnum1 > 0.00){
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <main+0x4d0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f04f 0100 	mov.w	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fbfa 	bl	8000710 <__aeabi_fcmpgt>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d004      	beq.n	8000f2c <main+0x4c0>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2140      	movs	r1, #64	; 0x40
 8000f26:	4815      	ldr	r0, [pc, #84]	; (8000f7c <main+0x510>)
 8000f28:	f002 f818 	bl	8002f5c <HAL_GPIO_WritePin>
		  //HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_SET);
	  }

	  HAL_Delay(1);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f000 fca5 	bl	800187c <HAL_Delay>
  {
 8000f32:	e5ae      	b.n	8000a92 <main+0x26>
 8000f34:	2000025c 	.word	0x2000025c
 8000f38:	2000000c 	.word	0x2000000c
 8000f3c:	20000230 	.word	0x20000230
 8000f40:	3de4d9c9 	.word	0x3de4d9c9
 8000f44:	457ff000 	.word	0x457ff000
 8000f48:	2000024c 	.word	0x2000024c
 8000f4c:	200000d4 	.word	0x200000d4
 8000f50:	20000234 	.word	0x20000234
 8000f54:	20000268 	.word	0x20000268
 8000f58:	20000260 	.word	0x20000260
 8000f5c:	20000264 	.word	0x20000264
 8000f60:	20000250 	.word	0x20000250
 8000f64:	2000026c 	.word	0x2000026c
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000270 	.word	0x20000270
 8000f78:	41400000 	.word	0x41400000
 8000f7c:	40020000 	.word	0x40020000

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b092      	sub	sp, #72	; 0x48
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	2234      	movs	r2, #52	; 0x34
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 f83e 	bl	8004010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	463b      	mov	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <SystemClock_Config+0x94>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000faa:	4a1a      	ldr	r2, [pc, #104]	; (8001014 <SystemClock_Config+0x94>)
 8000fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000fb2:	2312      	movs	r3, #18
 8000fb4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fba:	2310      	movs	r3, #16
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000fc6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 ffd9 	bl	8002f8c <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000fe0:	f000 fa06 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f002 faf5 	bl	80035ec <HAL_RCC_ClockConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001008:	f000 f9f2 	bl	80013f0 <Error_Handler>
  }
}
 800100c:	bf00      	nop
 800100e:	3748      	adds	r7, #72	; 0x48
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40007000 	.word	0x40007000

08001018 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001028:	4b42      	ldr	r3, [pc, #264]	; (8001134 <MX_ADC_Init+0x11c>)
 800102a:	4a43      	ldr	r2, [pc, #268]	; (8001138 <MX_ADC_Init+0x120>)
 800102c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800102e:	4b41      	ldr	r3, [pc, #260]	; (8001134 <MX_ADC_Init+0x11c>)
 8001030:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001034:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001036:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <MX_ADC_Init+0x11c>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <MX_ADC_Init+0x11c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001042:	4b3c      	ldr	r3, [pc, #240]	; (8001134 <MX_ADC_Init+0x11c>)
 8001044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001048:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800104a:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <MX_ADC_Init+0x11c>)
 800104c:	2200      	movs	r2, #0
 800104e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001050:	4b38      	ldr	r3, [pc, #224]	; (8001134 <MX_ADC_Init+0x11c>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001056:	4b37      	ldr	r3, [pc, #220]	; (8001134 <MX_ADC_Init+0x11c>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800105c:	4b35      	ldr	r3, [pc, #212]	; (8001134 <MX_ADC_Init+0x11c>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001062:	4b34      	ldr	r3, [pc, #208]	; (8001134 <MX_ADC_Init+0x11c>)
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 5;
 800106a:	4b32      	ldr	r3, [pc, #200]	; (8001134 <MX_ADC_Init+0x11c>)
 800106c:	2205      	movs	r2, #5
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <MX_ADC_Init+0x11c>)
 8001072:	2200      	movs	r2, #0
 8001074:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001078:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <MX_ADC_Init+0x11c>)
 800107a:	2210      	movs	r2, #16
 800107c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107e:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <MX_ADC_Init+0x11c>)
 8001080:	2200      	movs	r2, #0
 8001082:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001084:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <MX_ADC_Init+0x11c>)
 8001086:	2201      	movs	r2, #1
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800108c:	4829      	ldr	r0, [pc, #164]	; (8001134 <MX_ADC_Init+0x11c>)
 800108e:	f000 fc17 	bl	80018c0 <HAL_ADC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8001098:	f000 f9aa 	bl	80013f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 80010a4:	2306      	movs	r3, #6
 80010a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4619      	mov	r1, r3
 80010ac:	4821      	ldr	r0, [pc, #132]	; (8001134 <MX_ADC_Init+0x11c>)
 80010ae:	f000 fec1 	bl	8001e34 <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80010b8:	f000 f99a 	bl	80013f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010bc:	2301      	movs	r3, #1
 80010be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	481a      	ldr	r0, [pc, #104]	; (8001134 <MX_ADC_Init+0x11c>)
 80010ca:	f000 feb3 	bl	8001e34 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80010d4:	f000 f98c 	bl	80013f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010d8:	2302      	movs	r3, #2
 80010da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010dc:	2303      	movs	r3, #3
 80010de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4619      	mov	r1, r3
 80010e4:	4813      	ldr	r0, [pc, #76]	; (8001134 <MX_ADC_Init+0x11c>)
 80010e6:	f000 fea5 	bl	8001e34 <HAL_ADC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC_Init+0xdc>
  {
    Error_Handler();
 80010f0:	f000 f97e 	bl	80013f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010f4:	2303      	movs	r3, #3
 80010f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <MX_ADC_Init+0x11c>)
 8001102:	f000 fe97 	bl	8001e34 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC_Init+0xf8>
  {
    Error_Handler();
 800110c:	f000 f970 	bl	80013f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001110:	2311      	movs	r3, #17
 8001112:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001114:	2305      	movs	r3, #5
 8001116:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_ADC_Init+0x11c>)
 800111e:	f000 fe89 	bl	8001e34 <HAL_ADC_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC_Init+0x114>
  {
    Error_Handler();
 8001128:	f000 f962 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000003c 	.word	0x2000003c
 8001138:	40012400 	.word	0x40012400

0800113c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_DAC_Init+0x60>)
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <MX_DAC_Init+0x64>)
 800114e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001150:	4812      	ldr	r0, [pc, #72]	; (800119c <MX_DAC_Init+0x60>)
 8001152:	f001 f9e6 	bl	8002522 <HAL_DAC_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800115c:	f000 f948 	bl	80013f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001160:	2300      	movs	r3, #0
 8001162:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	4619      	mov	r1, r3
 800116e:	480b      	ldr	r0, [pc, #44]	; (800119c <MX_DAC_Init+0x60>)
 8001170:	f001 fa6e 	bl	8002650 <HAL_DAC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800117a:	f000 f939 	bl	80013f0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	2210      	movs	r2, #16
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_DAC_Init+0x60>)
 8001186:	f001 fa63 	bl	8002650 <HAL_DAC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001190:	f000 f92e 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200000d4 	.word	0x200000d4
 80011a0:	40007400 	.word	0x40007400

080011a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_USART1_UART_Init+0x50>)
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <MX_USART1_UART_Init+0x54>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART1_UART_Init+0x50>)
 80011b0:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80011b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_USART1_UART_Init+0x50>)
 80011b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011bc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <MX_USART1_UART_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART1_UART_Init+0x50>)
 80011c6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80011ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART1_UART_Init+0x50>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART1_UART_Init+0x50>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART1_UART_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART1_UART_Init+0x50>)
 80011e0:	f002 fc88 	bl	8003af4 <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80011ea:	f000 f901 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200000e8 	.word	0x200000e8
 80011f8:	40013800 	.word	0x40013800

080011fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_DMA_Init+0x48>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <MX_DMA_Init+0x48>)
 8001208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800120c:	61d3      	str	r3, [r2, #28]
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <MX_DMA_Init+0x48>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	200b      	movs	r0, #11
 8001220:	f001 f949 	bl	80024b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001224:	200b      	movs	r0, #11
 8001226:	f001 f962 	bl	80024ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	200e      	movs	r0, #14
 8001230:	f001 f941 	bl	80024b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001234:	200e      	movs	r0, #14
 8001236:	f001 f95a 	bl	80024ee <HAL_NVIC_EnableIRQ>

}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_GPIO_Init+0x74>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a16      	ldr	r2, [pc, #88]	; (80012bc <MX_GPIO_Init+0x74>)
 8001264:	f043 0320 	orr.w	r3, r3, #32
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_GPIO_Init+0x74>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f003 0320 	and.w	r3, r3, #32
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_GPIO_Init+0x74>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	4a10      	ldr	r2, [pc, #64]	; (80012bc <MX_GPIO_Init+0x74>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	61d3      	str	r3, [r2, #28]
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_GPIO_Init+0x74>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	2140      	movs	r1, #64	; 0x40
 8001292:	480b      	ldr	r0, [pc, #44]	; (80012c0 <MX_GPIO_Init+0x78>)
 8001294:	f001 fe62 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Channel_Shutdown_Pin */
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001298:	2340      	movs	r3, #64	; 0x40
 800129a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_GPIO_Init+0x78>)
 80012b0:	f001 fc04 	bl	8002abc <HAL_GPIO_Init>

}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000

080012c4 <ourInit>:

/* USER CODE BEGIN 4 */

void ourInit(void){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 80012c8:	2201      	movs	r2, #1
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	4820      	ldr	r0, [pc, #128]	; (8001350 <ourInit+0x8c>)
 80012ce:	f001 fe45 	bl	8002f5c <HAL_GPIO_WritePin>
	/*
	 * The HAL library is dumb and tries to init the adc before the DMA which does not work
	 * if the ADC is using the DMA. This init code is placed in space reserved for CubeMx so
	 * manually reordering it will be overwritten every time we regenerate code.
	 */
	HAL_ADC_DeInit(&hadc);
 80012d2:	4820      	ldr	r0, [pc, #128]	; (8001354 <ourInit+0x90>)
 80012d4:	f000 fc3a 	bl	8001b4c <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 80012d8:	481f      	ldr	r0, [pc, #124]	; (8001358 <ourInit+0x94>)
 80012da:	f001 fa5f 	bl	800279c <HAL_DMA_DeInit>
	MX_DMA_Init();
 80012de:	f7ff ff8d 	bl	80011fc <MX_DMA_Init>
	MX_ADC_Init();
 80012e2:	f7ff fe99 	bl	8001018 <MX_ADC_Init>

	//Actually our init now
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adcvalues, 5);// start the adc in dma mode
 80012e6:	2205      	movs	r2, #5
 80012e8:	491c      	ldr	r1, [pc, #112]	; (800135c <ourInit+0x98>)
 80012ea:	481a      	ldr	r0, [pc, #104]	; (8001354 <ourInit+0x90>)
 80012ec:	f000 fd02 	bl	8001cf4 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80012f0:	2100      	movs	r1, #0
 80012f2:	481b      	ldr	r0, [pc, #108]	; (8001360 <ourInit+0x9c>)
 80012f4:	f001 f937 	bl	8002566 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80012f8:	2110      	movs	r1, #16
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <ourInit+0x9c>)
 80012fc:	f001 f933 	bl	8002566 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001300:	2300      	movs	r3, #0
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	4816      	ldr	r0, [pc, #88]	; (8001360 <ourInit+0x9c>)
 8001308:	f001 f97e 	bl	8002608 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 800130c:	2300      	movs	r3, #0
 800130e:	2200      	movs	r2, #0
 8001310:	2110      	movs	r1, #16
 8001312:	4813      	ldr	r0, [pc, #76]	; (8001360 <ourInit+0x9c>)
 8001314:	f001 f978 	bl	8002608 <HAL_DAC_SetValue>
	//LCD Init
	//lcd_psu_init();
	//Start display timer
	//HAL_TIM_Base_Start_IT(&htim3);

	memset (txbuffer, '\0', 64);  // clear the buffer
 8001318:	2240      	movs	r2, #64	; 0x40
 800131a:	2100      	movs	r1, #0
 800131c:	4811      	ldr	r0, [pc, #68]	; (8001364 <ourInit+0xa0>)
 800131e:	f002 fe77 	bl	8004010 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001322:	2240      	movs	r2, #64	; 0x40
 8001324:	2100      	movs	r1, #0
 8001326:	4810      	ldr	r0, [pc, #64]	; (8001368 <ourInit+0xa4>)
 8001328:	f002 fe72 	bl	8004010 <memset>
	memset (rxbuffercpy, '\0', 64);  // clear the buffer
 800132c:	2240      	movs	r2, #64	; 0x40
 800132e:	2100      	movs	r1, #0
 8001330:	480e      	ldr	r0, [pc, #56]	; (800136c <ourInit+0xa8>)
 8001332:	f002 fe6d 	bl	8004010 <memset>

	strncpy((char*)txbuffer, "Hello World From Second MCU\n", 64);
 8001336:	2240      	movs	r2, #64	; 0x40
 8001338:	490d      	ldr	r1, [pc, #52]	; (8001370 <ourInit+0xac>)
 800133a:	480a      	ldr	r0, [pc, #40]	; (8001364 <ourInit+0xa0>)
 800133c:	f002 fe70 	bl	8004020 <strncpy>

	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001340:	2240      	movs	r2, #64	; 0x40
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <ourInit+0xa0>)
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <ourInit+0xb0>)
 8001346:	f002 fc23 	bl	8003b90 <HAL_UART_Transmit_DMA>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40020000 	.word	0x40020000
 8001354:	2000003c 	.word	0x2000003c
 8001358:	20000090 	.word	0x20000090
 800135c:	20000238 	.word	0x20000238
 8001360:	200000d4 	.word	0x200000d4
 8001364:	20000170 	.word	0x20000170
 8001368:	200001b0 	.word	0x200001b0
 800136c:	200001f0 	.word	0x200001f0
 8001370:	08004060 	.word	0x08004060
 8001374:	200000e8 	.word	0x200000e8

08001378 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	adc_current = adcvalues[2];
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001382:	889a      	ldrh	r2, [r3, #4]
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_ADC_ConvCpltCallback+0x40>)
 8001386:	801a      	strh	r2, [r3, #0]
	adc_linear = adcvalues[1];
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x3c>)
 800138a:	885a      	ldrh	r2, [r3, #2]
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_ADC_ConvCpltCallback+0x44>)
 800138e:	801a      	strh	r2, [r3, #0]
	adc_opamp = adcvalues[0];
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001392:	881a      	ldrh	r2, [r3, #0]
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_ADC_ConvCpltCallback+0x48>)
 8001396:	801a      	strh	r2, [r3, #0]
	adc_switching = adcvalues[3];
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x3c>)
 800139a:	88da      	ldrh	r2, [r3, #6]
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_ADC_ConvCpltCallback+0x4c>)
 800139e:	801a      	strh	r2, [r3, #0]
	adc_vref = adcvalues[4];
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80013a2:	891a      	ldrh	r2, [r3, #8]
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_ADC_ConvCpltCallback+0x50>)
 80013a6:	801a      	strh	r2, [r3, #0]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000238 	.word	0x20000238
 80013b8:	20000242 	.word	0x20000242
 80013bc:	20000244 	.word	0x20000244
 80013c0:	20000246 	.word	0x20000246
 80013c4:	20000248 	.word	0x20000248
 80013c8:	2000024a 	.word	0x2000024a

080013cc <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]

}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>
	...

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_MspInit+0x58>)
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	4a13      	ldr	r2, [pc, #76]	; (8001454 <HAL_MspInit+0x58>)
 8001408:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800140c:	6253      	str	r3, [r2, #36]	; 0x24
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_MspInit+0x58>)
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_MspInit+0x58>)
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <HAL_MspInit+0x58>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6213      	str	r3, [r2, #32]
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_MspInit+0x58>)
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_MspInit+0x58>)
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	4a07      	ldr	r2, [pc, #28]	; (8001454 <HAL_MspInit+0x58>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6253      	str	r3, [r2, #36]	; 0x24
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_MspInit+0x58>)
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	40023800 	.word	0x40023800

08001458 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a29      	ldr	r2, [pc, #164]	; (800151c <HAL_ADC_MspInit+0xc4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d14b      	bne.n	8001512 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800147a:	4b29      	ldr	r3, [pc, #164]	; (8001520 <HAL_ADC_MspInit+0xc8>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a28      	ldr	r2, [pc, #160]	; (8001520 <HAL_ADC_MspInit+0xc8>)
 8001480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_ADC_MspInit+0xc8>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <HAL_ADC_MspInit+0xc8>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a22      	ldr	r2, [pc, #136]	; (8001520 <HAL_ADC_MspInit+0xc8>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	61d3      	str	r3, [r2, #28]
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_ADC_MspInit+0xc8>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80014aa:	230f      	movs	r3, #15
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ae:	2303      	movs	r3, #3
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4819      	ldr	r0, [pc, #100]	; (8001524 <HAL_ADC_MspInit+0xcc>)
 80014be:	f001 fafd 	bl	8002abc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_ADC_MspInit+0xd0>)
 80014c4:	4a19      	ldr	r2, [pc, #100]	; (800152c <HAL_ADC_MspInit+0xd4>)
 80014c6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <HAL_ADC_MspInit+0xd0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_ADC_MspInit+0xd0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_ADC_MspInit+0xd0>)
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_ADC_MspInit+0xd0>)
 80014dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014e0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_ADC_MspInit+0xd0>)
 80014e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <HAL_ADC_MspInit+0xd0>)
 80014ec:	2220      	movs	r2, #32
 80014ee:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_ADC_MspInit+0xd0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80014f6:	480c      	ldr	r0, [pc, #48]	; (8001528 <HAL_ADC_MspInit+0xd0>)
 80014f8:	f001 f8f8 	bl	80026ec <HAL_DMA_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8001502:	f7ff ff75 	bl	80013f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a07      	ldr	r2, [pc, #28]	; (8001528 <HAL_ADC_MspInit+0xd0>)
 800150a:	645a      	str	r2, [r3, #68]	; 0x44
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_ADC_MspInit+0xd0>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40012400 	.word	0x40012400
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000
 8001528:	20000090 	.word	0x20000090
 800152c:	40026008 	.word	0x40026008

08001530 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <HAL_ADC_MspDeInit+0x38>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d10e      	bne.n	8001560 <HAL_ADC_MspDeInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_ADC_MspDeInit+0x3c>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <HAL_ADC_MspDeInit+0x3c>)
 8001548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800154c:	6213      	str	r3, [r2, #32]
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 800154e:	210f      	movs	r1, #15
 8001550:	4807      	ldr	r0, [pc, #28]	; (8001570 <HAL_ADC_MspDeInit+0x40>)
 8001552:	f001 fc2b 	bl	8002dac <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4618      	mov	r0, r3
 800155c:	f001 f91e 	bl	800279c <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40012400 	.word	0x40012400
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000

08001574 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <HAL_DAC_MspInit+0x74>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d123      	bne.n	80015de <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_DAC_MspInit+0x78>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	4a14      	ldr	r2, [pc, #80]	; (80015ec <HAL_DAC_MspInit+0x78>)
 800159c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015a0:	6253      	str	r3, [r2, #36]	; 0x24
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_DAC_MspInit+0x78>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_DAC_MspInit+0x78>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_DAC_MspInit+0x78>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	61d3      	str	r3, [r2, #28]
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_DAC_MspInit+0x78>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015c6:	2330      	movs	r3, #48	; 0x30
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ca:	2303      	movs	r3, #3
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_DAC_MspInit+0x7c>)
 80015da:	f001 fa6f 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40007400 	.word	0x40007400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a2a      	ldr	r2, [pc, #168]	; (80016bc <HAL_UART_MspInit+0xc8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d14e      	bne.n	80016b4 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <HAL_UART_MspInit+0xcc>)
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	4a29      	ldr	r2, [pc, #164]	; (80016c0 <HAL_UART_MspInit+0xcc>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6213      	str	r3, [r2, #32]
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HAL_UART_MspInit+0xcc>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <HAL_UART_MspInit+0xcc>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a23      	ldr	r2, [pc, #140]	; (80016c0 <HAL_UART_MspInit+0xcc>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <HAL_UART_MspInit+0xcc>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001646:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001658:	2307      	movs	r3, #7
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <HAL_UART_MspInit+0xd0>)
 8001664:	f001 fa2a 	bl	8002abc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_UART_MspInit+0xd4>)
 800166a:	4a18      	ldr	r2, [pc, #96]	; (80016cc <HAL_UART_MspInit+0xd8>)
 800166c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_UART_MspInit+0xd4>)
 8001670:	2210      	movs	r2, #16
 8001672:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <HAL_UART_MspInit+0xd4>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <HAL_UART_MspInit+0xd4>)
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_UART_MspInit+0xd4>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_UART_MspInit+0xd4>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_UART_MspInit+0xd4>)
 800168e:	2220      	movs	r2, #32
 8001690:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <HAL_UART_MspInit+0xd4>)
 8001694:	2200      	movs	r2, #0
 8001696:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001698:	480b      	ldr	r0, [pc, #44]	; (80016c8 <HAL_UART_MspInit+0xd4>)
 800169a:	f001 f827 	bl	80026ec <HAL_DMA_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80016a4:	f7ff fea4 	bl	80013f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_UART_MspInit+0xd4>)
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34
 80016ae:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <HAL_UART_MspInit+0xd4>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	2000012c 	.word	0x2000012c
 80016cc:	40026044 	.word	0x40026044

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <NMI_Handler+0x4>

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001716:	f000 f895 	bl	8001844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <DMA1_Channel1_IRQHandler+0x10>)
 8001726:	f001 f8eb 	bl	8002900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000090 	.word	0x20000090

08001734 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <DMA1_Channel4_IRQHandler+0x10>)
 800173a:	f001 f8e1 	bl	8002900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2000012c 	.word	0x2000012c

08001748 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001756:	490d      	ldr	r1, [pc, #52]	; (800178c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800176c:	4c0a      	ldr	r4, [pc, #40]	; (8001798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800177a:	f7ff ffe5 	bl	8001748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800177e:	f002 fc23 	bl	8003fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001782:	f7ff f973 	bl	8000a6c <main>
  bx lr
 8001786:	4770      	bx	lr
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001790:	080040b4 	.word	0x080040b4
  ldr r2, =_sbss
 8001794:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001798:	20000278 	.word	0x20000278

0800179c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC1_IRQHandler>

0800179e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 fe79 	bl	80024a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ae:	200f      	movs	r0, #15
 80017b0:	f000 f80e 	bl	80017d0 <HAL_InitTick>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	71fb      	strb	r3, [r7, #7]
 80017be:	e001      	b.n	80017c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c0:	f7ff fe1c 	bl	80013fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017c4:	79fb      	ldrb	r3, [r7, #7]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017dc:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_InitTick+0x68>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d022      	beq.n	800182a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_InitTick+0x6c>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_InitTick+0x68>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fe86 	bl	800250a <HAL_SYSTICK_Config>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10f      	bne.n	8001824 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b0f      	cmp	r3, #15
 8001808:	d809      	bhi.n	800181e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180a:	2200      	movs	r2, #0
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	f04f 30ff 	mov.w	r0, #4294967295
 8001812:	f000 fe50 	bl	80024b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_InitTick+0x70>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e007      	b.n	800182e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
 8001822:	e004      	b.n	800182e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e001      	b.n	800182e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000001c 	.word	0x2000001c
 800183c:	20000014 	.word	0x20000014
 8001840:	20000018 	.word	0x20000018

08001844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_IncTick+0x1c>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_IncTick+0x20>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4413      	add	r3, r2
 8001852:	4a03      	ldr	r2, [pc, #12]	; (8001860 <HAL_IncTick+0x1c>)
 8001854:	6013      	str	r3, [r2, #0]
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000274 	.word	0x20000274
 8001864:	2000001c 	.word	0x2000001c

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b02      	ldr	r3, [pc, #8]	; (8001878 <HAL_GetTick+0x10>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	20000274 	.word	0x20000274

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff fff0 	bl	8001868 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001894:	d004      	beq.n	80018a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_Delay+0x40>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4413      	add	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a0:	bf00      	nop
 80018a2:	f7ff ffe1 	bl	8001868 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d8f7      	bhi.n	80018a2 <HAL_Delay+0x26>
  {
  }
}
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000001c 	.word	0x2000001c

080018c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08e      	sub	sp, #56	; 0x38
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e127      	b.n	8001b30 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d115      	bne.n	800191a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fc:	4b8e      	ldr	r3, [pc, #568]	; (8001b38 <HAL_ADC_Init+0x278>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a8d      	ldr	r2, [pc, #564]	; (8001b38 <HAL_ADC_Init+0x278>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	4b8b      	ldr	r3, [pc, #556]	; (8001b38 <HAL_ADC_Init+0x278>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fd9f 	bl	8001458 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 80ff 	bne.w	8001b26 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001930:	f023 0302 	bic.w	r3, r3, #2
 8001934:	f043 0202 	orr.w	r2, r3, #2
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800193c:	4b7f      	ldr	r3, [pc, #508]	; (8001b3c <HAL_ADC_Init+0x27c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	497c      	ldr	r1, [pc, #496]	; (8001b3c <HAL_ADC_Init+0x27c>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001956:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800195e:	4619      	mov	r1, r3
 8001960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001964:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800197a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001980:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	2302      	movs	r3, #2
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80019a2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80019a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a6:	4313      	orrs	r3, r2
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ae:	2b10      	cmp	r3, #16
 80019b0:	d007      	beq.n	80019c2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80019ba:	4313      	orrs	r3, r2
 80019bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019be:	4313      	orrs	r3, r2
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019cc:	2b40      	cmp	r3, #64	; 0x40
 80019ce:	d04f      	beq.n	8001a70 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d6:	4313      	orrs	r3, r2
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019e2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6912      	ldr	r2, [r2, #16]
 80019e8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80019ec:	d003      	beq.n	80019f6 <HAL_ADC_Init+0x136>
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6912      	ldr	r2, [r2, #16]
 80019f2:	2a01      	cmp	r2, #1
 80019f4:	d102      	bne.n	80019fc <HAL_ADC_Init+0x13c>
 80019f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019fa:	e000      	b.n	80019fe <HAL_ADC_Init+0x13e>
 80019fc:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80019fe:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a02:	4313      	orrs	r3, r2
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d125      	bne.n	8001a5c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d114      	bne.n	8001a44 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001a24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	fa92 f2a2 	rbit	r2, r2
 8001a2c:	617a      	str	r2, [r7, #20]
  return result;
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	fab2 f282 	clz	r2, r2
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
 8001a42:	e00b      	b.n	8001a5c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	f043 0220 	orr.w	r2, r3, #32
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a54:	f043 0201 	orr.w	r2, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <HAL_ADC_Init+0x280>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <HAL_ADC_Init+0x284>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a80:	430b      	orrs	r3, r1
 8001a82:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a8c:	d003      	beq.n	8001a96 <HAL_ADC_Init+0x1d6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d119      	bne.n	8001aca <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001aaa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	fa92 f2a2 	rbit	r2, r2
 8001ab2:	60fa      	str	r2, [r7, #12]
  return result;
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	fab2 f282 	clz	r2, r2
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	fa03 f202 	lsl.w	r2, r3, r2
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ac8:	e007      	b.n	8001ada <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_ADC_Init+0x288>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d10b      	bne.n	8001b02 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af4:	f023 0303 	bic.w	r3, r3, #3
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b00:	e014      	b.n	8001b2c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f023 0312 	bic.w	r3, r3, #18
 8001b0a:	f043 0210 	orr.w	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b24:	e002      	b.n	8001b2c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3738      	adds	r7, #56	; 0x38
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40012700 	.word	0x40012700
 8001b40:	fcfc16ff 	.word	0xfcfc16ff
 8001b44:	c0fff18d 	.word	0xc0fff18d
 8001b48:	bf80fffe 	.word	0xbf80fffe

08001b4c <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0bc      	b.n	8001cdc <HAL_ADC_DeInit+0x190>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f043 0202 	orr.w	r2, r3, #2
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fb0c 	bl	800218c <ADC_ConversionStop_Disable>
 8001b74:	4603      	mov	r3, r0
 8001b76:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 80a9 	bne.w	8001cd2 <HAL_ADC_DeInit+0x186>
  {
    /* ========== Reset ADC registers ========== */
    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f06f 021f 	mvn.w	r2, #31
 8001b88:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <HAL_ADC_DeInit+0x198>)
 8001b96:	400b      	ands	r3, r1
 8001b98:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JAUTO   | ADC_CR1_AWDSGL  | ADC_CR1_SCAN   |
                                    ADC_CR1_JEOCIE  | ADC_CR1_AWDIE   | ADC_CR1_EOCIE  |
                                    ADC_CR1_AWDCH                                       ));
    
    /* Reset register CR2 */
    ADC_CR2_CLEAR(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6899      	ldr	r1, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <HAL_ADC_DeInit+0x19c>)
 8001ba6:	400b      	ands	r3, r1
 8001ba8:	6093      	str	r3, [r2, #8]
    
    /* Reset register SMPR0 */
    ADC_SMPR0_CLEAR(hadc);
 8001baa:	bf00      	nop
    
    /* Reset register SMPR1 */
    ADC_SMPR1_CLEAR(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	0d5b      	lsrs	r3, r3, #21
 8001bb8:	055b      	lsls	r3, r3, #21
 8001bba:	60d3      	str	r3, [r2, #12]
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8001bca:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP16 | ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | 
                                      ADC_SMPR2_SMP13 | ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 |
                                      ADC_SMPR2_SMP10                                      ));
    
    /* Reset register SMPR3 */
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8001bda:	615a      	str	r2, [r3, #20]
                                      ADC_SMPR3_SMP6 | ADC_SMPR3_SMP5 | ADC_SMPR3_SMP4 | 
                                      ADC_SMPR3_SMP3 | ADC_SMPR3_SMP2 | ADC_SMPR3_SMP1 |
                                      ADC_SMPR3_SMP0                                    ));
    
    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001bea:	f023 030f 	bic.w	r3, r3, #15
 8001bee:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001bfe:	f023 030f 	bic.w	r3, r3, #15
 8001c02:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001c12:	f023 030f 	bic.w	r3, r3, #15
 8001c16:	6213      	str	r3, [r2, #32]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001c26:	f023 030f 	bic.w	r3, r3, #15
 8001c2a:	6253      	str	r3, [r2, #36]	; 0x24
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001c3a:	f023 030f 	bic.w	r3, r3, #15
 8001c3e:	6293      	str	r3, [r2, #40]	; 0x28
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001c4e:	f023 030f 	bic.w	r3, r3, #15
 8001c52:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <HAL_ADC_DeInit+0x1a0>)
 8001c60:	400b      	ands	r3, r1
 8001c62:	6313      	str	r3, [r2, #48]	; 0x30
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34
                                     ADC_SQR2_SQ21 | ADC_SQR2_SQ20 | ADC_SQR2_SQ19  ));
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8001c82:	639a      	str	r2, [r3, #56]	; 0x38
                                     ADC_SQR3_SQ15 | ADC_SQR3_SQ14 | ADC_SQR3_SQ13  ));
    
    /* Reset register SQR4 */
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8001c92:	63da      	str	r2, [r3, #60]	; 0x3c
                                     ADC_SQR4_SQ9  | ADC_SQR4_SQ8  | ADC_SQR4_SQ7   ));
    
    /* Reset register SQR5 */
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
                                     ADC_SQR5_SQ3 | ADC_SQR5_SQ2 | ADC_SQR5_SQ1  ));
    
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	0d9b      	lsrs	r3, r3, #22
 8001cb0:	059b      	lsls	r3, r3, #22
 8001cb2:	6453      	str	r3, [r2, #68]	; 0x44
    
    /* Reset registers JDR1, JDR2, JDR3, JDR4 */
    /* bits in access mode read only, no direct reset applicable*/
    
    /* Reset register CCR */
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HAL_ADC_DeInit+0x1a4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <HAL_ADC_DeInit+0x1a4>)
 8001cba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cbe:	6053      	str	r3, [r2, #4]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff fc35 	bl	8001530 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	64da      	str	r2, [r3, #76]	; 0x4c
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	f83c0000 	.word	0xf83c0000
 8001ce8:	8080f08c 	.word	0x8080f08c
 8001cec:	fe0f8000 	.word	0xfe0f8000
 8001cf0:	40012700 	.word	0x40012700

08001cf4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_ADC_Start_DMA+0x1e>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e074      	b.n	8001dfc <HAL_ADC_Start_DMA+0x108>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f9da 	bl	80020d4 <ADC_Enable>
 8001d20:	4603      	mov	r3, r0
 8001d22:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d167      	bne.n	8001dfa <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d68:	d106      	bne.n	8001d78 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6e:	f023 0206 	bic.w	r2, r3, #6
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	651a      	str	r2, [r3, #80]	; 0x50
 8001d76:	e002      	b.n	8001d7e <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <HAL_ADC_Start_DMA+0x110>)
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <HAL_ADC_Start_DMA+0x114>)
 8001d94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_ADC_Start_DMA+0x118>)
 8001d9c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001da6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001db6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dc6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3358      	adds	r3, #88	; 0x58
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f000 fd32 	bl	8002840 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d107      	bne.n	8001dfa <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001df8:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	0800220f 	.word	0x0800220f
 8001e08:	080022b7 	.word	0x080022b7
 8001e0c:	080022d3 	.word	0x080022d3

08001e10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x20>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e134      	b.n	80020be <HAL_ADC_ConfigChannel+0x28a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b06      	cmp	r3, #6
 8001e62:	d81c      	bhi.n	8001e9e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	3b05      	subs	r3, #5
 8001e76:	221f      	movs	r2, #31
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4019      	ands	r1, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3b05      	subs	r3, #5
 8001e90:	fa00 f203 	lsl.w	r2, r0, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e9c:	e07e      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d81c      	bhi.n	8001ee0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b23      	subs	r3, #35	; 0x23
 8001eb8:	221f      	movs	r2, #31
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	4019      	ands	r1, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	3b23      	subs	r3, #35	; 0x23
 8001ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ede:	e05d      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b12      	cmp	r3, #18
 8001ee6:	d81c      	bhi.n	8001f22 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b41      	subs	r3, #65	; 0x41
 8001efa:	221f      	movs	r2, #31
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	4019      	ands	r1, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	3b41      	subs	r3, #65	; 0x41
 8001f14:	fa00 f203 	lsl.w	r2, r0, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	639a      	str	r2, [r3, #56]	; 0x38
 8001f20:	e03c      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b18      	cmp	r3, #24
 8001f28:	d81c      	bhi.n	8001f64 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	3b5f      	subs	r3, #95	; 0x5f
 8001f3c:	221f      	movs	r2, #31
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	4019      	ands	r1, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	3b5f      	subs	r3, #95	; 0x5f
 8001f56:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	635a      	str	r2, [r3, #52]	; 0x34
 8001f62:	e01b      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	3b7d      	subs	r3, #125	; 0x7d
 8001f76:	221f      	movs	r2, #31
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	4019      	ands	r1, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3b7d      	subs	r3, #125	; 0x7d
 8001f90:	fa00 f203 	lsl.w	r2, r0, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b09      	cmp	r3, #9
 8001fa2:	d81a      	bhi.n	8001fda <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6959      	ldr	r1, [r3, #20]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	4019      	ands	r1, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6898      	ldr	r0, [r3, #8]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	615a      	str	r2, [r3, #20]
 8001fd8:	e042      	b.n	8002060 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b13      	cmp	r3, #19
 8001fe0:	d81c      	bhi.n	800201c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6919      	ldr	r1, [r3, #16]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3b1e      	subs	r3, #30
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	4019      	ands	r1, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6898      	ldr	r0, [r3, #8]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	3b1e      	subs	r3, #30
 800200e:	fa00 f203 	lsl.w	r2, r0, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	611a      	str	r2, [r3, #16]
 800201a:	e021      	b.n	8002060 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b1a      	cmp	r3, #26
 8002022:	d81c      	bhi.n	800205e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68d9      	ldr	r1, [r3, #12]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	3b3c      	subs	r3, #60	; 0x3c
 8002036:	2207      	movs	r2, #7
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	4019      	ands	r1, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	6898      	ldr	r0, [r3, #8]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	3b3c      	subs	r3, #60	; 0x3c
 8002050:	fa00 f203 	lsl.w	r2, r0, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	60da      	str	r2, [r3, #12]
 800205c:	e000      	b.n	8002060 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800205e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b10      	cmp	r3, #16
 8002066:	d003      	beq.n	8002070 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800206c:	2b11      	cmp	r3, #17
 800206e:	d121      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_ADC_ConfigChannel+0x294>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d11b      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_ADC_ConfigChannel+0x294>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a11      	ldr	r2, [pc, #68]	; (80020c8 <HAL_ADC_ConfigChannel+0x294>)
 8002082:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002086:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b10      	cmp	r3, #16
 800208e:	d111      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_ADC_ConfigChannel+0x298>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <HAL_ADC_ConfigChannel+0x29c>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0c9a      	lsrs	r2, r3, #18
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80020a6:	e002      	b.n	80020ae <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f9      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	40012700 	.word	0x40012700
 80020cc:	20000014 	.word	0x20000014
 80020d0:	431bde83 	.word	0x431bde83

080020d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	2b40      	cmp	r3, #64	; 0x40
 80020f0:	d043      	beq.n	800217a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <ADC_Enable+0xb0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a20      	ldr	r2, [pc, #128]	; (8002188 <ADC_Enable+0xb4>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	0c9a      	lsrs	r2, r3, #18
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002116:	e002      	b.n	800211e <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	3b01      	subs	r3, #1
 800211c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f9      	bne.n	8002118 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002124:	f7ff fba0 	bl	8001868 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800212a:	e01f      	b.n	800216c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800212c:	f7ff fb9c 	bl	8001868 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d918      	bls.n	800216c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b40      	cmp	r3, #64	; 0x40
 8002146:	d011      	beq.n	800216c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214c:	f043 0210 	orr.w	r2, r3, #16
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e007      	b.n	800217c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002176:	2b40      	cmp	r3, #64	; 0x40
 8002178:	d1d8      	bne.n	800212c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000014 	.word	0x20000014
 8002188:	431bde83 	.word	0x431bde83

0800218c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a2:	2b40      	cmp	r3, #64	; 0x40
 80021a4:	d12e      	bne.n	8002204 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0201 	bic.w	r2, r2, #1
 80021b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021b6:	f7ff fb57 	bl	8001868 <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021bc:	e01b      	b.n	80021f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80021be:	f7ff fb53 	bl	8001868 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d914      	bls.n	80021f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d6:	2b40      	cmp	r3, #64	; 0x40
 80021d8:	d10d      	bne.n	80021f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	f043 0210 	orr.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e007      	b.n	8002206 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002200:	2b40      	cmp	r3, #64	; 0x40
 8002202:	d0dc      	beq.n	80021be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002220:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002224:	2b00      	cmp	r3, #0
 8002226:	d13d      	bne.n	80022a4 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d12c      	bne.n	800229c <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002248:	2b00      	cmp	r3, #0
 800224a:	d127      	bne.n	800229c <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002264:	2b00      	cmp	r3, #0
 8002266:	d119      	bne.n	800229c <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0220 	bic.w	r2, r2, #32
 8002276:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f7ff f86b 	bl	8001378 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80022a2:	e004      	b.n	80022ae <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff fda3 	bl	8001e10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f0:	f043 0204 	orr.w	r2, r3, #4
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f7ff fd92 	bl	8001e22 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233a:	4a04      	ldr	r2, [pc, #16]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	60d3      	str	r3, [r2, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <__NVIC_GetPriorityGrouping+0x18>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0307 	and.w	r3, r3, #7
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	2b00      	cmp	r3, #0
 800237c:	db0b      	blt.n	8002396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4906      	ldr	r1, [pc, #24]	; (80023a0 <__NVIC_EnableIRQ+0x34>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2001      	movs	r0, #1
 800238e:	fa00 f202 	lsl.w	r2, r0, r2
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	e000e100 	.word	0xe000e100

080023a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	db0a      	blt.n	80023ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	490c      	ldr	r1, [pc, #48]	; (80023f0 <__NVIC_SetPriority+0x4c>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	440b      	add	r3, r1
 80023c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023cc:	e00a      	b.n	80023e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4908      	ldr	r1, [pc, #32]	; (80023f4 <__NVIC_SetPriority+0x50>)
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3b04      	subs	r3, #4
 80023dc:	0112      	lsls	r2, r2, #4
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	440b      	add	r3, r1
 80023e2:	761a      	strb	r2, [r3, #24]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000e100 	.word	0xe000e100
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f1c3 0307 	rsb	r3, r3, #7
 8002412:	2b04      	cmp	r3, #4
 8002414:	bf28      	it	cs
 8002416:	2304      	movcs	r3, #4
 8002418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3304      	adds	r3, #4
 800241e:	2b06      	cmp	r3, #6
 8002420:	d902      	bls.n	8002428 <NVIC_EncodePriority+0x30>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3b03      	subs	r3, #3
 8002426:	e000      	b.n	800242a <NVIC_EncodePriority+0x32>
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	f04f 32ff 	mov.w	r2, #4294967295
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002440:	f04f 31ff 	mov.w	r1, #4294967295
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	43d9      	mvns	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	4313      	orrs	r3, r2
         );
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800246c:	d301      	bcc.n	8002472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246e:	2301      	movs	r3, #1
 8002470:	e00f      	b.n	8002492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <SysTick_Config+0x40>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247a:	210f      	movs	r1, #15
 800247c:	f04f 30ff 	mov.w	r0, #4294967295
 8002480:	f7ff ff90 	bl	80023a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <SysTick_Config+0x40>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <SysTick_Config+0x40>)
 800248c:	2207      	movs	r2, #7
 800248e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	e000e010 	.word	0xe000e010

080024a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ff2d 	bl	8002308 <__NVIC_SetPriorityGrouping>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c8:	f7ff ff42 	bl	8002350 <__NVIC_GetPriorityGrouping>
 80024cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	6978      	ldr	r0, [r7, #20]
 80024d4:	f7ff ff90 	bl	80023f8 <NVIC_EncodePriority>
 80024d8:	4602      	mov	r2, r0
 80024da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff5f 	bl	80023a4 <__NVIC_SetPriority>
}
 80024e6:	bf00      	nop
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff35 	bl	800236c <__NVIC_EnableIRQ>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ffa2 	bl	800245c <SysTick_Config>
 8002518:	4603      	mov	r3, r0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e014      	b.n	800255e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	791b      	ldrb	r3, [r3, #4]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d105      	bne.n	800254a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff f815 	bl	8001574 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2202      	movs	r2, #2
 800254e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	795b      	ldrb	r3, [r3, #5]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_DAC_Start+0x16>
 8002578:	2302      	movs	r3, #2
 800257a:	e040      	b.n	80025fe <HAL_DAC_Start+0x98>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6819      	ldr	r1, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2201      	movs	r2, #1
 8002596:	409a      	lsls	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10f      	bne.n	80025c6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80025b0:	2b3c      	cmp	r3, #60	; 0x3c
 80025b2:	d11d      	bne.n	80025f0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	e014      	b.n	80025f0 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	213c      	movs	r1, #60	; 0x3c
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	429a      	cmp	r2, r3
 80025de:	d107      	bne.n	80025f0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0202 	orr.w	r2, r2, #2
 80025ee:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4413      	add	r3, r2
 800262c:	3308      	adds	r3, #8
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e004      	b.n	800263c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	3314      	adds	r3, #20
 800263a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	461a      	mov	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	795b      	ldrb	r3, [r3, #5]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_DAC_ConfigChannel+0x18>
 8002664:	2302      	movs	r3, #2
 8002666:	e03c      	b.n	80026e2 <HAL_DAC_ConfigChannel+0x92>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2202      	movs	r2, #2
 8002672:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4013      	ands	r3, r2
 8002690:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6819      	ldr	r1, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	22c0      	movs	r2, #192	; 0xc0
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43da      	mvns	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	400a      	ands	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e043      	b.n	8002786 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <HAL_DMA_Init+0xa4>)
 8002706:	4413      	add	r3, r2
 8002708:	4a22      	ldr	r2, [pc, #136]	; (8002794 <HAL_DMA_Init+0xa8>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	009a      	lsls	r2, r3, #2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <HAL_DMA_Init+0xac>)
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002736:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002740:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	bffd9ff8 	.word	0xbffd9ff8
 8002794:	cccccccd 	.word	0xcccccccd
 8002798:	40026000 	.word	0x40026000

0800279c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e03c      	b.n	8002828 <HAL_DMA_DeInit+0x8c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_DMA_DeInit+0x98>)
 80027c6:	4413      	add	r3, r2
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <HAL_DMA_DeInit+0x9c>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	009a      	lsls	r2, r3, #2
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a18      	ldr	r2, [pc, #96]	; (800283c <HAL_DMA_DeInit+0xa0>)
 80027da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f003 021c 	and.w	r2, r3, #28
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	2101      	movs	r1, #1
 80027f2:	fa01 f202 	lsl.w	r2, r1, r2
 80027f6:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	bffd9ff8 	.word	0xbffd9ff8
 8002838:	cccccccd 	.word	0xcccccccd
 800283c:	40026000 	.word	0x40026000

08002840 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_DMA_Start_IT+0x20>
 800285c:	2302      	movs	r3, #2
 800285e:	e04b      	b.n	80028f8 <HAL_DMA_Start_IT+0xb8>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	d13a      	bne.n	80028ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0201 	bic.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f8e0 	bl	8002a5e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 020e 	orr.w	r2, r2, #14
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	e00f      	b.n	80028d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0204 	bic.w	r2, r2, #4
 80028c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 020a 	orr.w	r2, r2, #10
 80028d6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e005      	b.n	80028f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80028f2:	2302      	movs	r3, #2
 80028f4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f003 031c 	and.w	r3, r3, #28
 8002920:	2204      	movs	r2, #4
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d026      	beq.n	800297a <HAL_DMA_IRQHandler+0x7a>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d021      	beq.n	800297a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0204 	bic.w	r2, r2, #4
 8002952:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f003 021c 	and.w	r2, r3, #28
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	2104      	movs	r1, #4
 8002962:	fa01 f202 	lsl.w	r2, r1, r2
 8002966:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d071      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002978:	e06c      	b.n	8002a54 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 031c 	and.w	r3, r3, #28
 8002982:	2202      	movs	r2, #2
 8002984:	409a      	lsls	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d02e      	beq.n	80029ec <HAL_DMA_IRQHandler+0xec>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d029      	beq.n	80029ec <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10b      	bne.n	80029be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 020a 	bic.w	r2, r2, #10
 80029b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 021c 	and.w	r2, r3, #28
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	2102      	movs	r1, #2
 80029cc:	fa01 f202 	lsl.w	r2, r1, r2
 80029d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d038      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029ea:	e033      	b.n	8002a54 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f003 031c 	and.w	r3, r3, #28
 80029f4:	2208      	movs	r2, #8
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d02a      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x156>
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d025      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 020e 	bic.w	r2, r2, #14
 8002a18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 021c 	and.w	r2, r3, #28
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
}
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f003 021c 	and.w	r2, r3, #28
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a78:	2101      	movs	r1, #1
 8002a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b10      	cmp	r3, #16
 8002a8e:	d108      	bne.n	8002aa2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002aa0:	e007      	b.n	8002ab2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	60da      	str	r2, [r3, #12]
}
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ad2:	e14e      	b.n	8002d72 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2101      	movs	r1, #1
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8140 	beq.w	8002d6c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d005      	beq.n	8002b04 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d130      	bne.n	8002b66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	f003 0201 	and.w	r2, r3, #1
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d017      	beq.n	8002ba2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d123      	bne.n	8002bf6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	08da      	lsrs	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3208      	adds	r2, #8
 8002bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	08da      	lsrs	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3208      	adds	r2, #8
 8002bf0:	6939      	ldr	r1, [r7, #16]
 8002bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2203      	movs	r2, #3
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0203 	and.w	r2, r3, #3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 809a 	beq.w	8002d6c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c38:	4b55      	ldr	r3, [pc, #340]	; (8002d90 <HAL_GPIO_Init+0x2d4>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4a54      	ldr	r2, [pc, #336]	; (8002d90 <HAL_GPIO_Init+0x2d4>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6213      	str	r3, [r2, #32]
 8002c44:	4b52      	ldr	r3, [pc, #328]	; (8002d90 <HAL_GPIO_Init+0x2d4>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c50:	4a50      	ldr	r2, [pc, #320]	; (8002d94 <HAL_GPIO_Init+0x2d8>)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	220f      	movs	r2, #15
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a48      	ldr	r2, [pc, #288]	; (8002d98 <HAL_GPIO_Init+0x2dc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <HAL_GPIO_Init+0x1e8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a47      	ldr	r2, [pc, #284]	; (8002d9c <HAL_GPIO_Init+0x2e0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00d      	beq.n	8002ca0 <HAL_GPIO_Init+0x1e4>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a46      	ldr	r2, [pc, #280]	; (8002da0 <HAL_GPIO_Init+0x2e4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d007      	beq.n	8002c9c <HAL_GPIO_Init+0x1e0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a45      	ldr	r2, [pc, #276]	; (8002da4 <HAL_GPIO_Init+0x2e8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_GPIO_Init+0x1dc>
 8002c94:	2303      	movs	r3, #3
 8002c96:	e006      	b.n	8002ca6 <HAL_GPIO_Init+0x1ea>
 8002c98:	2305      	movs	r3, #5
 8002c9a:	e004      	b.n	8002ca6 <HAL_GPIO_Init+0x1ea>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e002      	b.n	8002ca6 <HAL_GPIO_Init+0x1ea>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <HAL_GPIO_Init+0x1ea>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	f002 0203 	and.w	r2, r2, #3
 8002cac:	0092      	lsls	r2, r2, #2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cb6:	4937      	ldr	r1, [pc, #220]	; (8002d94 <HAL_GPIO_Init+0x2d8>)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc4:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <HAL_GPIO_Init+0x2ec>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(temp, iocurrent);
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ce8:	4a2f      	ldr	r2, [pc, #188]	; (8002da8 <HAL_GPIO_Init+0x2ec>)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cee:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <HAL_GPIO_Init+0x2ec>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x256>
        {
          SET_BIT(temp, iocurrent);
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d12:	4a25      	ldr	r2, [pc, #148]	; (8002da8 <HAL_GPIO_Init+0x2ec>)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d18:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <HAL_GPIO_Init+0x2ec>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x280>
        {
          SET_BIT(temp, iocurrent);
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d3c:	4a1a      	ldr	r2, [pc, #104]	; (8002da8 <HAL_GPIO_Init+0x2ec>)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d42:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_GPIO_Init+0x2ec>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x2aa>
        {
          SET_BIT(temp, iocurrent);
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <HAL_GPIO_Init+0x2ec>)
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f47f aea9 	bne.w	8002ad4 <HAL_GPIO_Init+0x18>
  }
}
 8002d82:	bf00      	nop
 8002d84:	bf00      	nop
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40020000 	.word	0x40020000
 8002d9c:	40020400 	.word	0x40020400
 8002da0:	40020800 	.word	0x40020800
 8002da4:	40020c00 	.word	0x40020c00
 8002da8:	40010400 	.word	0x40010400

08002dac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8002dc2:	e0b2      	b.n	8002f2a <HAL_GPIO_DeInit+0x17e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80a5 	beq.w	8002f24 <HAL_GPIO_DeInit+0x178>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 8002dda:	4a5a      	ldr	r2, [pc, #360]	; (8002f44 <HAL_GPIO_DeInit+0x198>)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	3302      	adds	r3, #2
 8002de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de6:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	220f      	movs	r2, #15
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a52      	ldr	r2, [pc, #328]	; (8002f48 <HAL_GPIO_DeInit+0x19c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d013      	beq.n	8002e2c <HAL_GPIO_DeInit+0x80>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a51      	ldr	r2, [pc, #324]	; (8002f4c <HAL_GPIO_DeInit+0x1a0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00d      	beq.n	8002e28 <HAL_GPIO_DeInit+0x7c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a50      	ldr	r2, [pc, #320]	; (8002f50 <HAL_GPIO_DeInit+0x1a4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d007      	beq.n	8002e24 <HAL_GPIO_DeInit+0x78>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a4f      	ldr	r2, [pc, #316]	; (8002f54 <HAL_GPIO_DeInit+0x1a8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d101      	bne.n	8002e20 <HAL_GPIO_DeInit+0x74>
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e006      	b.n	8002e2e <HAL_GPIO_DeInit+0x82>
 8002e20:	2305      	movs	r3, #5
 8002e22:	e004      	b.n	8002e2e <HAL_GPIO_DeInit+0x82>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e002      	b.n	8002e2e <HAL_GPIO_DeInit+0x82>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_GPIO_DeInit+0x82>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	f002 0203 	and.w	r2, r2, #3
 8002e34:	0092      	lsls	r2, r2, #2
 8002e36:	4093      	lsls	r3, r2
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d132      	bne.n	8002ea4 <HAL_GPIO_DeInit+0xf8>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002e3e:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <HAL_GPIO_DeInit+0x1ac>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	4944      	ldr	r1, [pc, #272]	; (8002f58 <HAL_GPIO_DeInit+0x1ac>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002e4c:	4b42      	ldr	r3, [pc, #264]	; (8002f58 <HAL_GPIO_DeInit+0x1ac>)
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	4940      	ldr	r1, [pc, #256]	; (8002f58 <HAL_GPIO_DeInit+0x1ac>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002e5a:	4b3f      	ldr	r3, [pc, #252]	; (8002f58 <HAL_GPIO_DeInit+0x1ac>)
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	493d      	ldr	r1, [pc, #244]	; (8002f58 <HAL_GPIO_DeInit+0x1ac>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002e68:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <HAL_GPIO_DeInit+0x1ac>)
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	4939      	ldr	r1, [pc, #228]	; (8002f58 <HAL_GPIO_DeInit+0x1ac>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	60cb      	str	r3, [r1, #12]

        tmp = (0x0FU) << (4 * (position & 0x03));
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	220f      	movs	r2, #15
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8002e86:	4a2f      	ldr	r2, [pc, #188]	; (8002f44 <HAL_GPIO_DeInit+0x198>)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	43da      	mvns	r2, r3
 8002e96:	482b      	ldr	r0, [pc, #172]	; (8002f44 <HAL_GPIO_DeInit+0x198>)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2103      	movs	r1, #3
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	08da      	lsrs	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3208      	adds	r2, #8
 8002ec2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	220f      	movs	r2, #15
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	08d2      	lsrs	r2, r2, #3
 8002eda:	4019      	ands	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3208      	adds	r2, #8
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2103      	movs	r1, #3
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	2101      	movs	r1, #1
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	401a      	ands	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	2103      	movs	r1, #3
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	401a      	ands	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	3301      	adds	r3, #1
 8002f28:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f47f af46 	bne.w	8002dc4 <HAL_GPIO_DeInit+0x18>
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40010000 	.word	0x40010000
 8002f48:	40020000 	.word	0x40020000
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	40020800 	.word	0x40020800
 8002f54:	40020c00 	.word	0x40020c00
 8002f58:	40010400 	.word	0x40010400

08002f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f6c:	787b      	ldrb	r3, [r7, #1]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002f78:	e003      	b.n	8002f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002f7a:	887b      	ldrh	r3, [r7, #2]
 8002f7c:	041a      	lsls	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	619a      	str	r2, [r3, #24]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e31d      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f9e:	4b94      	ldr	r3, [pc, #592]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa8:	4b91      	ldr	r3, [pc, #580]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d07b      	beq.n	80030b6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d006      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	d10f      	bne.n	8002fea <HAL_RCC_OscConfig+0x5e>
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd0:	d10b      	bne.n	8002fea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd2:	4b87      	ldr	r3, [pc, #540]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d06a      	beq.n	80030b4 <HAL_RCC_OscConfig+0x128>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d166      	bne.n	80030b4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e2f7      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d106      	bne.n	8003000 <HAL_RCC_OscConfig+0x74>
 8002ff2:	4b7f      	ldr	r3, [pc, #508]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a7e      	ldr	r2, [pc, #504]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e02d      	b.n	800305c <HAL_RCC_OscConfig+0xd0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10c      	bne.n	8003022 <HAL_RCC_OscConfig+0x96>
 8003008:	4b79      	ldr	r3, [pc, #484]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a78      	ldr	r2, [pc, #480]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 800300e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b76      	ldr	r3, [pc, #472]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a75      	ldr	r2, [pc, #468]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 800301a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	e01c      	b.n	800305c <HAL_RCC_OscConfig+0xd0>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0xb8>
 800302a:	4b71      	ldr	r3, [pc, #452]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a70      	ldr	r2, [pc, #448]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8003030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b6e      	ldr	r3, [pc, #440]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6d      	ldr	r2, [pc, #436]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0xd0>
 8003044:	4b6a      	ldr	r3, [pc, #424]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a69      	ldr	r2, [pc, #420]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 800304a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b67      	ldr	r3, [pc, #412]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a66      	ldr	r2, [pc, #408]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8003056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d013      	beq.n	800308c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe fc00 	bl	8001868 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7fe fbfc 	bl	8001868 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e2ad      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800307e:	4b5c      	ldr	r3, [pc, #368]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0xe0>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fe fbec 	bl	8001868 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003094:	f7fe fbe8 	bl	8001868 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e299      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030a6:	4b52      	ldr	r3, [pc, #328]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x108>
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d05a      	beq.n	8003178 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d119      	bne.n	8003102 <HAL_RCC_OscConfig+0x176>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d116      	bne.n	8003102 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d4:	4b46      	ldr	r3, [pc, #280]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_OscConfig+0x160>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e276      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ec:	4b40      	ldr	r3, [pc, #256]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	493d      	ldr	r1, [pc, #244]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003100:	e03a      	b.n	8003178 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d020      	beq.n	800314c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800310a:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <HAL_RCC_OscConfig+0x268>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fbaa 	bl	8001868 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003118:	f7fe fba6 	bl	8001868 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e257      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800312a:	4b31      	ldr	r3, [pc, #196]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003136:	4b2e      	ldr	r3, [pc, #184]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	492a      	ldr	r1, [pc, #168]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
 800314a:	e015      	b.n	8003178 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314c:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <HAL_RCC_OscConfig+0x268>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7fe fb89 	bl	8001868 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315a:	f7fe fb85 	bl	8001868 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e236      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800316c:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f0      	bne.n	800315a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80b8 	beq.w	80032f6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d170      	bne.n	800326e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800318c:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_OscConfig+0x218>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e21a      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1a      	ldr	r2, [r3, #32]
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d921      	bls.n	80031f8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fc3b 	bl	8003a34 <RCC_SetFlashLatencyFromMSIRange>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e208      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4906      	ldr	r1, [pc, #24]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	061b      	lsls	r3, r3, #24
 80031e8:	4901      	ldr	r1, [pc, #4]	; (80031f0 <HAL_RCC_OscConfig+0x264>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]
 80031ee:	e020      	b.n	8003232 <HAL_RCC_OscConfig+0x2a6>
 80031f0:	40023800 	.word	0x40023800
 80031f4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031f8:	4b99      	ldr	r3, [pc, #612]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4996      	ldr	r1, [pc, #600]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800320a:	4b95      	ldr	r3, [pc, #596]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	061b      	lsls	r3, r3, #24
 8003218:	4991      	ldr	r1, [pc, #580]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fc06 	bl	8003a34 <RCC_SetFlashLatencyFromMSIRange>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e1d3      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	0b5b      	lsrs	r3, r3, #13
 8003238:	3301      	adds	r3, #1
 800323a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003242:	4a87      	ldr	r2, [pc, #540]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003244:	6892      	ldr	r2, [r2, #8]
 8003246:	0912      	lsrs	r2, r2, #4
 8003248:	f002 020f 	and.w	r2, r2, #15
 800324c:	4985      	ldr	r1, [pc, #532]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 800324e:	5c8a      	ldrb	r2, [r1, r2]
 8003250:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003252:	4a85      	ldr	r2, [pc, #532]	; (8003468 <HAL_RCC_OscConfig+0x4dc>)
 8003254:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003256:	4b85      	ldr	r3, [pc, #532]	; (800346c <HAL_RCC_OscConfig+0x4e0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe fab8 	bl	80017d0 <HAL_InitTick>
 8003260:	4603      	mov	r3, r0
 8003262:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d045      	beq.n	80032f6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	e1b5      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d029      	beq.n	80032ca <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003276:	4b7e      	ldr	r3, [pc, #504]	; (8003470 <HAL_RCC_OscConfig+0x4e4>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe faf4 	bl	8001868 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003284:	f7fe faf0 	bl	8001868 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e1a1      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003296:	4b72      	ldr	r3, [pc, #456]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a2:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	496c      	ldr	r1, [pc, #432]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b4:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	061b      	lsls	r3, r3, #24
 80032c2:	4967      	ldr	r1, [pc, #412]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
 80032c8:	e015      	b.n	80032f6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032ca:	4b69      	ldr	r3, [pc, #420]	; (8003470 <HAL_RCC_OscConfig+0x4e4>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe faca 	bl	8001868 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032d8:	f7fe fac6 	bl	8001868 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e177      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032ea:	4b5d      	ldr	r3, [pc, #372]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d030      	beq.n	8003364 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d016      	beq.n	8003338 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330a:	4b5a      	ldr	r3, [pc, #360]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 800330c:	2201      	movs	r2, #1
 800330e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003310:	f7fe faaa 	bl	8001868 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003318:	f7fe faa6 	bl	8001868 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e157      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800332a:	4b4d      	ldr	r3, [pc, #308]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 800332c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0x38c>
 8003336:	e015      	b.n	8003364 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003338:	4b4e      	ldr	r3, [pc, #312]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333e:	f7fe fa93 	bl	8001868 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003346:	f7fe fa8f 	bl	8001868 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e140      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003358:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 800335a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f0      	bne.n	8003346 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80b5 	beq.w	80034dc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003376:	4b3a      	ldr	r3, [pc, #232]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10d      	bne.n	800339e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	4b37      	ldr	r3, [pc, #220]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	4a36      	ldr	r2, [pc, #216]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338c:	6253      	str	r3, [r2, #36]	; 0x24
 800338e:	4b34      	ldr	r3, [pc, #208]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339a:	2301      	movs	r3, #1
 800339c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_RCC_OscConfig+0x4ec>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d118      	bne.n	80033dc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033aa:	4b33      	ldr	r3, [pc, #204]	; (8003478 <HAL_RCC_OscConfig+0x4ec>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a32      	ldr	r2, [pc, #200]	; (8003478 <HAL_RCC_OscConfig+0x4ec>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fa57 	bl	8001868 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033be:	f7fe fa53 	bl	8001868 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b64      	cmp	r3, #100	; 0x64
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e104      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	4b29      	ldr	r3, [pc, #164]	; (8003478 <HAL_RCC_OscConfig+0x4ec>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d106      	bne.n	80033f2 <HAL_RCC_OscConfig+0x466>
 80033e4:	4b1e      	ldr	r3, [pc, #120]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 80033ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ee:	6353      	str	r3, [r2, #52]	; 0x34
 80033f0:	e02d      	b.n	800344e <HAL_RCC_OscConfig+0x4c2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x488>
 80033fa:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	4a18      	ldr	r2, [pc, #96]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003404:	6353      	str	r3, [r2, #52]	; 0x34
 8003406:	4b16      	ldr	r3, [pc, #88]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	4a15      	ldr	r2, [pc, #84]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 800340c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003410:	6353      	str	r3, [r2, #52]	; 0x34
 8003412:	e01c      	b.n	800344e <HAL_RCC_OscConfig+0x4c2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b05      	cmp	r3, #5
 800341a:	d10c      	bne.n	8003436 <HAL_RCC_OscConfig+0x4aa>
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 800341e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003420:	4a0f      	ldr	r2, [pc, #60]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003426:	6353      	str	r3, [r2, #52]	; 0x34
 8003428:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 800342a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342c:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 800342e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003432:	6353      	str	r3, [r2, #52]	; 0x34
 8003434:	e00b      	b.n	800344e <HAL_RCC_OscConfig+0x4c2>
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343a:	4a09      	ldr	r2, [pc, #36]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 800343c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003440:	6353      	str	r3, [r2, #52]	; 0x34
 8003442:	4b07      	ldr	r3, [pc, #28]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003446:	4a06      	ldr	r2, [pc, #24]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003448:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800344c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d024      	beq.n	80034a0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003456:	f7fe fa07 	bl	8001868 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800345c:	e019      	b.n	8003492 <HAL_RCC_OscConfig+0x506>
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	0800408c 	.word	0x0800408c
 8003468:	20000014 	.word	0x20000014
 800346c:	20000018 	.word	0x20000018
 8003470:	42470020 	.word	0x42470020
 8003474:	42470680 	.word	0x42470680
 8003478:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7fe f9f4 	bl	8001868 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0a3      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003492:	4b54      	ldr	r3, [pc, #336]	; (80035e4 <HAL_RCC_OscConfig+0x658>)
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0ee      	beq.n	800347c <HAL_RCC_OscConfig+0x4f0>
 800349e:	e014      	b.n	80034ca <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7fe f9e2 	bl	8001868 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fe f9de 	bl	8001868 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e08d      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034be:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <HAL_RCC_OscConfig+0x658>)
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1ee      	bne.n	80034a8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034ca:	7ffb      	ldrb	r3, [r7, #31]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d0:	4b44      	ldr	r3, [pc, #272]	; (80035e4 <HAL_RCC_OscConfig+0x658>)
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	4a43      	ldr	r2, [pc, #268]	; (80035e4 <HAL_RCC_OscConfig+0x658>)
 80034d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034da:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d079      	beq.n	80035d8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d056      	beq.n	8003598 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d13b      	bne.n	800356a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f2:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_OscConfig+0x65c>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fe f9b6 	bl	8001868 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe f9b2 	bl	8001868 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e063      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003512:	4b34      	ldr	r3, [pc, #208]	; (80035e4 <HAL_RCC_OscConfig+0x658>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351e:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_RCC_OscConfig+0x658>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	4319      	orrs	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	430b      	orrs	r3, r1
 8003536:	492b      	ldr	r1, [pc, #172]	; (80035e4 <HAL_RCC_OscConfig+0x658>)
 8003538:	4313      	orrs	r3, r2
 800353a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353c:	4b2a      	ldr	r3, [pc, #168]	; (80035e8 <HAL_RCC_OscConfig+0x65c>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7fe f991 	bl	8001868 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354a:	f7fe f98d 	bl	8001868 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e03e      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800355c:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <HAL_RCC_OscConfig+0x658>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x5be>
 8003568:	e036      	b.n	80035d8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <HAL_RCC_OscConfig+0x65c>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fe f97a 	bl	8001868 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe f976 	bl	8001868 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e027      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800358a:	4b16      	ldr	r3, [pc, #88]	; (80035e4 <HAL_RCC_OscConfig+0x658>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x5ec>
 8003596:	e01f      	b.n	80035d8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e01a      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <HAL_RCC_OscConfig+0x658>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d10d      	bne.n	80035d4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d106      	bne.n	80035d4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3720      	adds	r7, #32
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800
 80035e8:	42470060 	.word	0x42470060

080035ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e11a      	b.n	8003836 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003600:	4b8f      	ldr	r3, [pc, #572]	; (8003840 <HAL_RCC_ClockConfig+0x254>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d919      	bls.n	8003642 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d105      	bne.n	8003620 <HAL_RCC_ClockConfig+0x34>
 8003614:	4b8a      	ldr	r3, [pc, #552]	; (8003840 <HAL_RCC_ClockConfig+0x254>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a89      	ldr	r2, [pc, #548]	; (8003840 <HAL_RCC_ClockConfig+0x254>)
 800361a:	f043 0304 	orr.w	r3, r3, #4
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b87      	ldr	r3, [pc, #540]	; (8003840 <HAL_RCC_ClockConfig+0x254>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f023 0201 	bic.w	r2, r3, #1
 8003628:	4985      	ldr	r1, [pc, #532]	; (8003840 <HAL_RCC_ClockConfig+0x254>)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	4313      	orrs	r3, r2
 800362e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003630:	4b83      	ldr	r3, [pc, #524]	; (8003840 <HAL_RCC_ClockConfig+0x254>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d001      	beq.n	8003642 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0f9      	b.n	8003836 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364e:	4b7d      	ldr	r3, [pc, #500]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	497a      	ldr	r1, [pc, #488]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 800365c:	4313      	orrs	r3, r2
 800365e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 808e 	beq.w	800378a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003676:	4b73      	ldr	r3, [pc, #460]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d121      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e0d7      	b.n	8003836 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800368e:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d115      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0cb      	b.n	8003836 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036a6:	4b67      	ldr	r3, [pc, #412]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e0bf      	b.n	8003836 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80036b6:	4b63      	ldr	r3, [pc, #396]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0b7      	b.n	8003836 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036c6:	4b5f      	ldr	r3, [pc, #380]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f023 0203 	bic.w	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	495c      	ldr	r1, [pc, #368]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d8:	f7fe f8c6 	bl	8001868 <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d112      	bne.n	800370c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e8:	f7fe f8be 	bl	8001868 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e09b      	b.n	8003836 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036fe:	4b51      	ldr	r3, [pc, #324]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b08      	cmp	r3, #8
 8003708:	d1ee      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xfc>
 800370a:	e03e      	b.n	800378a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b03      	cmp	r3, #3
 8003712:	d112      	bne.n	800373a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003714:	e00a      	b.n	800372c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003716:	f7fe f8a7 	bl	8001868 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	; 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e084      	b.n	8003836 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800372c:	4b45      	ldr	r3, [pc, #276]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	2b0c      	cmp	r3, #12
 8003736:	d1ee      	bne.n	8003716 <HAL_RCC_ClockConfig+0x12a>
 8003738:	e027      	b.n	800378a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d11d      	bne.n	800377e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003742:	e00a      	b.n	800375a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003744:	f7fe f890 	bl	8001868 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e06d      	b.n	8003836 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800375a:	4b3a      	ldr	r3, [pc, #232]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b04      	cmp	r3, #4
 8003764:	d1ee      	bne.n	8003744 <HAL_RCC_ClockConfig+0x158>
 8003766:	e010      	b.n	800378a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003768:	f7fe f87e 	bl	8001868 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	; 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e05b      	b.n	8003836 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ee      	bne.n	8003768 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800378a:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_ClockConfig+0x254>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d219      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d105      	bne.n	80037aa <HAL_RCC_ClockConfig+0x1be>
 800379e:	4b28      	ldr	r3, [pc, #160]	; (8003840 <HAL_RCC_ClockConfig+0x254>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a27      	ldr	r2, [pc, #156]	; (8003840 <HAL_RCC_ClockConfig+0x254>)
 80037a4:	f043 0304 	orr.w	r3, r3, #4
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_RCC_ClockConfig+0x254>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 0201 	bic.w	r2, r3, #1
 80037b2:	4923      	ldr	r1, [pc, #140]	; (8003840 <HAL_RCC_ClockConfig+0x254>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_RCC_ClockConfig+0x254>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e034      	b.n	8003836 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4917      	ldr	r1, [pc, #92]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490f      	ldr	r1, [pc, #60]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800380a:	f000 f823 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 800380e:	4602      	mov	r2, r0
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <HAL_RCC_ClockConfig+0x258>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	490b      	ldr	r1, [pc, #44]	; (8003848 <HAL_RCC_ClockConfig+0x25c>)
 800381c:	5ccb      	ldrb	r3, [r1, r3]
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a0a      	ldr	r2, [pc, #40]	; (800384c <HAL_RCC_ClockConfig+0x260>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_RCC_ClockConfig+0x264>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fd ffd0 	bl	80017d0 <HAL_InitTick>
 8003830:	4603      	mov	r3, r0
 8003832:	72fb      	strb	r3, [r7, #11]

  return status;
 8003834:	7afb      	ldrb	r3, [r7, #11]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023c00 	.word	0x40023c00
 8003844:	40023800 	.word	0x40023800
 8003848:	0800408c 	.word	0x0800408c
 800384c:	20000014 	.word	0x20000014
 8003850:	20000018 	.word	0x20000018

08003854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003858:	b08e      	sub	sp, #56	; 0x38
 800385a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800385c:	4b58      	ldr	r3, [pc, #352]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x16c>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b0c      	cmp	r3, #12
 800386a:	d00d      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x34>
 800386c:	2b0c      	cmp	r3, #12
 800386e:	f200 8092 	bhi.w	8003996 <HAL_RCC_GetSysClockFreq+0x142>
 8003872:	2b04      	cmp	r3, #4
 8003874:	d002      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x28>
 8003876:	2b08      	cmp	r3, #8
 8003878:	d003      	beq.n	8003882 <HAL_RCC_GetSysClockFreq+0x2e>
 800387a:	e08c      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b51      	ldr	r3, [pc, #324]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x170>)
 800387e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003880:	e097      	b.n	80039b2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003882:	4b51      	ldr	r3, [pc, #324]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x174>)
 8003884:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003886:	e094      	b.n	80039b2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388a:	0c9b      	lsrs	r3, r3, #18
 800388c:	f003 020f 	and.w	r2, r3, #15
 8003890:	4b4e      	ldr	r3, [pc, #312]	; (80039cc <HAL_RCC_GetSysClockFreq+0x178>)
 8003892:	5c9b      	ldrb	r3, [r3, r2]
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	0d9b      	lsrs	r3, r3, #22
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	3301      	adds	r3, #1
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a2:	4b47      	ldr	r3, [pc, #284]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d021      	beq.n	80038f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	2200      	movs	r2, #0
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	61fa      	str	r2, [r7, #28]
 80038b6:	4b44      	ldr	r3, [pc, #272]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x174>)
 80038b8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80038bc:	464a      	mov	r2, r9
 80038be:	fb03 f202 	mul.w	r2, r3, r2
 80038c2:	2300      	movs	r3, #0
 80038c4:	4644      	mov	r4, r8
 80038c6:	fb04 f303 	mul.w	r3, r4, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	4a3e      	ldr	r2, [pc, #248]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x174>)
 80038ce:	4644      	mov	r4, r8
 80038d0:	fba4 0102 	umull	r0, r1, r4, r2
 80038d4:	440b      	add	r3, r1
 80038d6:	4619      	mov	r1, r3
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	2200      	movs	r2, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	617a      	str	r2, [r7, #20]
 80038e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038e4:	f7fc ff3e 	bl	8000764 <__aeabi_uldivmod>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4613      	mov	r3, r2
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
 80038f0:	e04e      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	2200      	movs	r2, #0
 80038f6:	469a      	mov	sl, r3
 80038f8:	4693      	mov	fp, r2
 80038fa:	4652      	mov	r2, sl
 80038fc:	465b      	mov	r3, fp
 80038fe:	f04f 0000 	mov.w	r0, #0
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	0159      	lsls	r1, r3, #5
 8003908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800390c:	0150      	lsls	r0, r2, #5
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	ebb2 080a 	subs.w	r8, r2, sl
 8003916:	eb63 090b 	sbc.w	r9, r3, fp
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003926:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800392a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800392e:	ebb2 0408 	subs.w	r4, r2, r8
 8003932:	eb63 0509 	sbc.w	r5, r3, r9
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	00eb      	lsls	r3, r5, #3
 8003940:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003944:	00e2      	lsls	r2, r4, #3
 8003946:	4614      	mov	r4, r2
 8003948:	461d      	mov	r5, r3
 800394a:	eb14 030a 	adds.w	r3, r4, sl
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	eb45 030b 	adc.w	r3, r5, fp
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003962:	4629      	mov	r1, r5
 8003964:	028b      	lsls	r3, r1, #10
 8003966:	4620      	mov	r0, r4
 8003968:	4629      	mov	r1, r5
 800396a:	4604      	mov	r4, r0
 800396c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003970:	4601      	mov	r1, r0
 8003972:	028a      	lsls	r2, r1, #10
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	2200      	movs	r2, #0
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	60fa      	str	r2, [r7, #12]
 8003980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003984:	f7fc feee 	bl	8000764 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4613      	mov	r3, r2
 800398e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8003990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003992:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003994:	e00d      	b.n	80039b2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003996:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	0b5b      	lsrs	r3, r3, #13
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	3301      	adds	r3, #1
 80039a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3738      	adds	r7, #56	; 0x38
 80039b8:	46bd      	mov	sp, r7
 80039ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800
 80039c4:	00f42400 	.word	0x00f42400
 80039c8:	016e3600 	.word	0x016e3600
 80039cc:	08004080 	.word	0x08004080

080039d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d4:	4b02      	ldr	r3, [pc, #8]	; (80039e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80039d6:	681b      	ldr	r3, [r3, #0]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr
 80039e0:	20000014 	.word	0x20000014

080039e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039e8:	f7ff fff2 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	4903      	ldr	r1, [pc, #12]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40023800 	.word	0x40023800
 8003a08:	0800409c 	.word	0x0800409c

08003a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a10:	f7ff ffde 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	0adb      	lsrs	r3, r3, #11
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4903      	ldr	r1, [pc, #12]	; (8003a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	0800409c 	.word	0x0800409c

08003a34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a40:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d12c      	bne.n	8003aa6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a4c:	4b26      	ldr	r3, [pc, #152]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003a58:	4b24      	ldr	r3, [pc, #144]	; (8003aec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	e016      	b.n	8003a92 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a64:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	6253      	str	r3, [r2, #36]	; 0x24
 8003a70:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003a84:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a86:	4b18      	ldr	r3, [pc, #96]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a90:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003a98:	d105      	bne.n	8003aa6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003aa0:	d101      	bne.n	8003aa6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d105      	bne.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003aac:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a0f      	ldr	r2, [pc, #60]	; (8003af0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ab2:	f043 0304 	orr.w	r3, r3, #4
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 0201 	bic.w	r2, r3, #1
 8003ac0:	490b      	ldr	r1, [pc, #44]	; (8003af0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d001      	beq.n	8003ada <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	371c      	adds	r7, #28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40007000 	.word	0x40007000
 8003af0:	40023c00 	.word	0x40023c00

08003af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e03f      	b.n	8003b86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fd6a 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	; 0x24
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f961 	bl	8003e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d153      	bne.n	8003c52 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_UART_Transmit_DMA+0x26>
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e04c      	b.n	8003c54 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_UART_Transmit_DMA+0x38>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e045      	b.n	8003c54 <HAL_UART_Transmit_DMA+0xc4>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	88fa      	ldrh	r2, [r7, #6]
 8003bda:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	88fa      	ldrh	r2, [r7, #6]
 8003be0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2221      	movs	r2, #33	; 0x21
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf4:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <HAL_UART_Transmit_DMA+0xcc>)
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	4a18      	ldr	r2, [pc, #96]	; (8003c60 <HAL_UART_Transmit_DMA+0xd0>)
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	4a17      	ldr	r2, [pc, #92]	; (8003c64 <HAL_UART_Transmit_DMA+0xd4>)
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003c10:	f107 0308 	add.w	r3, r7, #8
 8003c14:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3304      	adds	r3, #4
 8003c24:	461a      	mov	r2, r3
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	f7fe fe0a 	bl	8002840 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c34:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695a      	ldr	r2, [r3, #20]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c4c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e000      	b.n	8003c54 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003c52:	2302      	movs	r3, #2
  }
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	08003c7b 	.word	0x08003c7b
 8003c60:	08003ccd 	.word	0x08003ccd
 8003c64:	08003ce9 	.word	0x08003ce9

08003c68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d113      	bne.n	8003cbe <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003caa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cba:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cbc:	e002      	b.n	8003cc4 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7fd fb8d 	bl	80013de <HAL_UART_TxCpltCallback>
}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f7fd fb76 	bl	80013cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ce0:	bf00      	nop
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b21      	cmp	r3, #33	; 0x21
 8003d1a:	d108      	bne.n	8003d2e <UART_DMAError+0x46>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2200      	movs	r2, #0
 8003d26:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003d28:	68b8      	ldr	r0, [r7, #8]
 8003d2a:	f000 f827 	bl	8003d7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b22      	cmp	r3, #34	; 0x22
 8003d4e:	d108      	bne.n	8003d62 <UART_DMAError+0x7a>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003d5c:	68b8      	ldr	r0, [r7, #8]
 8003d5e:	f000 f822 	bl	8003da6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f043 0210 	orr.w	r2, r3, #16
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d6e:	68b8      	ldr	r0, [r7, #8]
 8003d70:	f7ff ff7a 	bl	8003c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003d92:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dbc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d107      	bne.n	8003de6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0210 	bic.w	r2, r2, #16
 8003de4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr
	...

08003e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e40:	f023 030c 	bic.w	r3, r3, #12
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a55      	ldr	r2, [pc, #340]	; (8003fc0 <UART_SetConfig+0x1c0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d103      	bne.n	8003e76 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e6e:	f7ff fdcd 	bl	8003a0c <HAL_RCC_GetPCLK2Freq>
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	e002      	b.n	8003e7c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e76:	f7ff fdb5 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 8003e7a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e84:	d14c      	bne.n	8003f20 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009a      	lsls	r2, r3, #2
 8003e90:	441a      	add	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	4a49      	ldr	r2, [pc, #292]	; (8003fc4 <UART_SetConfig+0x1c4>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	0119      	lsls	r1, r3, #4
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	009a      	lsls	r2, r3, #2
 8003eb0:	441a      	add	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ebc:	4b41      	ldr	r3, [pc, #260]	; (8003fc4 <UART_SetConfig+0x1c4>)
 8003ebe:	fba3 0302 	umull	r0, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	2064      	movs	r0, #100	; 0x64
 8003ec6:	fb00 f303 	mul.w	r3, r0, r3
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	3332      	adds	r3, #50	; 0x32
 8003ed0:	4a3c      	ldr	r2, [pc, #240]	; (8003fc4 <UART_SetConfig+0x1c4>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ede:	4419      	add	r1, r3
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009a      	lsls	r2, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef6:	4b33      	ldr	r3, [pc, #204]	; (8003fc4 <UART_SetConfig+0x1c4>)
 8003ef8:	fba3 0302 	umull	r0, r3, r3, r2
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	2064      	movs	r0, #100	; 0x64
 8003f00:	fb00 f303 	mul.w	r3, r0, r3
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	3332      	adds	r3, #50	; 0x32
 8003f0a:	4a2e      	ldr	r2, [pc, #184]	; (8003fc4 <UART_SetConfig+0x1c4>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	f003 0207 	and.w	r2, r3, #7
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f1e:	e04a      	b.n	8003fb6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	009a      	lsls	r2, r3, #2
 8003f2a:	441a      	add	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f36:	4a23      	ldr	r2, [pc, #140]	; (8003fc4 <UART_SetConfig+0x1c4>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	0119      	lsls	r1, r3, #4
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	009a      	lsls	r2, r3, #2
 8003f4a:	441a      	add	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f56:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <UART_SetConfig+0x1c4>)
 8003f58:	fba3 0302 	umull	r0, r3, r3, r2
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	2064      	movs	r0, #100	; 0x64
 8003f60:	fb00 f303 	mul.w	r3, r0, r3
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	3332      	adds	r3, #50	; 0x32
 8003f6a:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <UART_SetConfig+0x1c4>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f76:	4419      	add	r1, r3
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009a      	lsls	r2, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <UART_SetConfig+0x1c4>)
 8003f90:	fba3 0302 	umull	r0, r3, r3, r2
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	2064      	movs	r0, #100	; 0x64
 8003f98:	fb00 f303 	mul.w	r3, r0, r3
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	3332      	adds	r3, #50	; 0x32
 8003fa2:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <UART_SetConfig+0x1c4>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	f003 020f 	and.w	r2, r3, #15
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	440a      	add	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	51eb851f 	.word	0x51eb851f

08003fc8 <__libc_init_array>:
 8003fc8:	b570      	push	{r4, r5, r6, lr}
 8003fca:	2600      	movs	r6, #0
 8003fcc:	4d0c      	ldr	r5, [pc, #48]	; (8004000 <__libc_init_array+0x38>)
 8003fce:	4c0d      	ldr	r4, [pc, #52]	; (8004004 <__libc_init_array+0x3c>)
 8003fd0:	1b64      	subs	r4, r4, r5
 8003fd2:	10a4      	asrs	r4, r4, #2
 8003fd4:	42a6      	cmp	r6, r4
 8003fd6:	d109      	bne.n	8003fec <__libc_init_array+0x24>
 8003fd8:	f000 f836 	bl	8004048 <_init>
 8003fdc:	2600      	movs	r6, #0
 8003fde:	4d0a      	ldr	r5, [pc, #40]	; (8004008 <__libc_init_array+0x40>)
 8003fe0:	4c0a      	ldr	r4, [pc, #40]	; (800400c <__libc_init_array+0x44>)
 8003fe2:	1b64      	subs	r4, r4, r5
 8003fe4:	10a4      	asrs	r4, r4, #2
 8003fe6:	42a6      	cmp	r6, r4
 8003fe8:	d105      	bne.n	8003ff6 <__libc_init_array+0x2e>
 8003fea:	bd70      	pop	{r4, r5, r6, pc}
 8003fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff0:	4798      	blx	r3
 8003ff2:	3601      	adds	r6, #1
 8003ff4:	e7ee      	b.n	8003fd4 <__libc_init_array+0xc>
 8003ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffa:	4798      	blx	r3
 8003ffc:	3601      	adds	r6, #1
 8003ffe:	e7f2      	b.n	8003fe6 <__libc_init_array+0x1e>
 8004000:	080040ac 	.word	0x080040ac
 8004004:	080040ac 	.word	0x080040ac
 8004008:	080040ac 	.word	0x080040ac
 800400c:	080040b0 	.word	0x080040b0

08004010 <memset>:
 8004010:	4603      	mov	r3, r0
 8004012:	4402      	add	r2, r0
 8004014:	4293      	cmp	r3, r2
 8004016:	d100      	bne.n	800401a <memset+0xa>
 8004018:	4770      	bx	lr
 800401a:	f803 1b01 	strb.w	r1, [r3], #1
 800401e:	e7f9      	b.n	8004014 <memset+0x4>

08004020 <strncpy>:
 8004020:	4603      	mov	r3, r0
 8004022:	b510      	push	{r4, lr}
 8004024:	3901      	subs	r1, #1
 8004026:	b132      	cbz	r2, 8004036 <strncpy+0x16>
 8004028:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800402c:	3a01      	subs	r2, #1
 800402e:	f803 4b01 	strb.w	r4, [r3], #1
 8004032:	2c00      	cmp	r4, #0
 8004034:	d1f7      	bne.n	8004026 <strncpy+0x6>
 8004036:	2100      	movs	r1, #0
 8004038:	441a      	add	r2, r3
 800403a:	4293      	cmp	r3, r2
 800403c:	d100      	bne.n	8004040 <strncpy+0x20>
 800403e:	bd10      	pop	{r4, pc}
 8004040:	f803 1b01 	strb.w	r1, [r3], #1
 8004044:	e7f9      	b.n	800403a <strncpy+0x1a>
	...

08004048 <_init>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	bf00      	nop
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr

08004054 <_fini>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	bf00      	nop
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr
