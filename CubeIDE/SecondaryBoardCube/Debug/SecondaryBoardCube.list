
SecondaryBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f88  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080070c8  080070c8  000170c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074fc  080074fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007504  08007504  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800750c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001e0  080076ec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  080076ec  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccbb  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268e  00000000  00000000  0002cec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00006726  00000000  00000000  0002f552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  00035c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001308  00000000  00000000  00036500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000154bc  00000000  00000000  00037808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea8d  00000000  00000000  0004ccc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080ed9  00000000  00000000  0005b751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000dc62a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c64  00000000  00000000  000dc67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	080070b0 	.word	0x080070b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	080070b0 	.word	0x080070b0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__gesf2>:
 8000f74:	f04f 3cff 	mov.w	ip, #4294967295
 8000f78:	e006      	b.n	8000f88 <__cmpsf2+0x4>
 8000f7a:	bf00      	nop

08000f7c <__lesf2>:
 8000f7c:	f04f 0c01 	mov.w	ip, #1
 8000f80:	e002      	b.n	8000f88 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__cmpsf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	bf18      	it	ne
 8000f9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9e:	d011      	beq.n	8000fc4 <__cmpsf2+0x40>
 8000fa0:	b001      	add	sp, #4
 8000fa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa6:	bf18      	it	ne
 8000fa8:	ea90 0f01 	teqne	r0, r1
 8000fac:	bf58      	it	pl
 8000fae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fb2:	bf88      	it	hi
 8000fb4:	17c8      	asrhi	r0, r1, #31
 8000fb6:	bf38      	it	cc
 8000fb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fbc:	bf18      	it	ne
 8000fbe:	f040 0001 	orrne.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	d102      	bne.n	8000fd0 <__cmpsf2+0x4c>
 8000fca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fce:	d105      	bne.n	8000fdc <__cmpsf2+0x58>
 8000fd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd4:	d1e4      	bne.n	8000fa0 <__cmpsf2+0x1c>
 8000fd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fda:	d0e1      	beq.n	8000fa0 <__cmpsf2+0x1c>
 8000fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_cfrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4661      	mov	r1, ip
 8000fea:	e7ff      	b.n	8000fec <__aeabi_cfcmpeq>

08000fec <__aeabi_cfcmpeq>:
 8000fec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fee:	f7ff ffc9 	bl	8000f84 <__cmpsf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	bf48      	it	mi
 8000ff6:	f110 0f00 	cmnmi.w	r0, #0
 8000ffa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ffc <__aeabi_fcmpeq>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff fff4 	bl	8000fec <__aeabi_cfcmpeq>
 8001004:	bf0c      	ite	eq
 8001006:	2001      	moveq	r0, #1
 8001008:	2000      	movne	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmplt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffea 	bl	8000fec <__aeabi_cfcmpeq>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmple>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffe0 	bl	8000fec <__aeabi_cfcmpeq>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpge>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffd2 	bl	8000fe4 <__aeabi_cfrcmple>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpgt>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffc8 	bl	8000fe4 <__aeabi_cfrcmple>
 8001054:	bf34      	ite	cc
 8001056:	2001      	movcc	r0, #1
 8001058:	2000      	movcs	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_f2uiz>:
 8001060:	0042      	lsls	r2, r0, #1
 8001062:	d20e      	bcs.n	8001082 <__aeabi_f2uiz+0x22>
 8001064:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001068:	d30b      	bcc.n	8001082 <__aeabi_f2uiz+0x22>
 800106a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001072:	d409      	bmi.n	8001088 <__aeabi_f2uiz+0x28>
 8001074:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	4770      	bx	lr
 8001082:	f04f 0000 	mov.w	r0, #0
 8001086:	4770      	bx	lr
 8001088:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800108c:	d101      	bne.n	8001092 <__aeabi_f2uiz+0x32>
 800108e:	0242      	lsls	r2, r0, #9
 8001090:	d102      	bne.n	8001098 <__aeabi_f2uiz+0x38>
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	4770      	bx	lr
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295
 80010b4:	f000 b976 	b.w	80013a4 <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f806 	bl	80010d0 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	9e08      	ldr	r6, [sp, #32]
 80010d6:	460d      	mov	r5, r1
 80010d8:	4604      	mov	r4, r0
 80010da:	4688      	mov	r8, r1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d14d      	bne.n	800117c <__udivmoddi4+0xac>
 80010e0:	428a      	cmp	r2, r1
 80010e2:	4694      	mov	ip, r2
 80010e4:	d968      	bls.n	80011b8 <__udivmoddi4+0xe8>
 80010e6:	fab2 f282 	clz	r2, r2
 80010ea:	b152      	cbz	r2, 8001102 <__udivmoddi4+0x32>
 80010ec:	fa01 f302 	lsl.w	r3, r1, r2
 80010f0:	f1c2 0120 	rsb	r1, r2, #32
 80010f4:	fa20 f101 	lsr.w	r1, r0, r1
 80010f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010fc:	ea41 0803 	orr.w	r8, r1, r3
 8001100:	4094      	lsls	r4, r2
 8001102:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001106:	fbb8 f7f1 	udiv	r7, r8, r1
 800110a:	fa1f fe8c 	uxth.w	lr, ip
 800110e:	fb01 8817 	mls	r8, r1, r7, r8
 8001112:	fb07 f00e 	mul.w	r0, r7, lr
 8001116:	0c23      	lsrs	r3, r4, #16
 8001118:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800111c:	4298      	cmp	r0, r3
 800111e:	d90a      	bls.n	8001136 <__udivmoddi4+0x66>
 8001120:	eb1c 0303 	adds.w	r3, ip, r3
 8001124:	f107 35ff 	add.w	r5, r7, #4294967295
 8001128:	f080 811e 	bcs.w	8001368 <__udivmoddi4+0x298>
 800112c:	4298      	cmp	r0, r3
 800112e:	f240 811b 	bls.w	8001368 <__udivmoddi4+0x298>
 8001132:	3f02      	subs	r7, #2
 8001134:	4463      	add	r3, ip
 8001136:	1a1b      	subs	r3, r3, r0
 8001138:	fbb3 f0f1 	udiv	r0, r3, r1
 800113c:	fb01 3310 	mls	r3, r1, r0, r3
 8001140:	fb00 fe0e 	mul.w	lr, r0, lr
 8001144:	b2a4      	uxth	r4, r4
 8001146:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800114a:	45a6      	cmp	lr, r4
 800114c:	d90a      	bls.n	8001164 <__udivmoddi4+0x94>
 800114e:	eb1c 0404 	adds.w	r4, ip, r4
 8001152:	f100 33ff 	add.w	r3, r0, #4294967295
 8001156:	f080 8109 	bcs.w	800136c <__udivmoddi4+0x29c>
 800115a:	45a6      	cmp	lr, r4
 800115c:	f240 8106 	bls.w	800136c <__udivmoddi4+0x29c>
 8001160:	4464      	add	r4, ip
 8001162:	3802      	subs	r0, #2
 8001164:	2100      	movs	r1, #0
 8001166:	eba4 040e 	sub.w	r4, r4, lr
 800116a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800116e:	b11e      	cbz	r6, 8001178 <__udivmoddi4+0xa8>
 8001170:	2300      	movs	r3, #0
 8001172:	40d4      	lsrs	r4, r2
 8001174:	e9c6 4300 	strd	r4, r3, [r6]
 8001178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117c:	428b      	cmp	r3, r1
 800117e:	d908      	bls.n	8001192 <__udivmoddi4+0xc2>
 8001180:	2e00      	cmp	r6, #0
 8001182:	f000 80ee 	beq.w	8001362 <__udivmoddi4+0x292>
 8001186:	2100      	movs	r1, #0
 8001188:	e9c6 0500 	strd	r0, r5, [r6]
 800118c:	4608      	mov	r0, r1
 800118e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001192:	fab3 f183 	clz	r1, r3
 8001196:	2900      	cmp	r1, #0
 8001198:	d14a      	bne.n	8001230 <__udivmoddi4+0x160>
 800119a:	42ab      	cmp	r3, r5
 800119c:	d302      	bcc.n	80011a4 <__udivmoddi4+0xd4>
 800119e:	4282      	cmp	r2, r0
 80011a0:	f200 80fc 	bhi.w	800139c <__udivmoddi4+0x2cc>
 80011a4:	1a84      	subs	r4, r0, r2
 80011a6:	eb65 0303 	sbc.w	r3, r5, r3
 80011aa:	2001      	movs	r0, #1
 80011ac:	4698      	mov	r8, r3
 80011ae:	2e00      	cmp	r6, #0
 80011b0:	d0e2      	beq.n	8001178 <__udivmoddi4+0xa8>
 80011b2:	e9c6 4800 	strd	r4, r8, [r6]
 80011b6:	e7df      	b.n	8001178 <__udivmoddi4+0xa8>
 80011b8:	b902      	cbnz	r2, 80011bc <__udivmoddi4+0xec>
 80011ba:	deff      	udf	#255	; 0xff
 80011bc:	fab2 f282 	clz	r2, r2
 80011c0:	2a00      	cmp	r2, #0
 80011c2:	f040 8091 	bne.w	80012e8 <__udivmoddi4+0x218>
 80011c6:	eba1 000c 	sub.w	r0, r1, ip
 80011ca:	2101      	movs	r1, #1
 80011cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011d0:	fa1f fe8c 	uxth.w	lr, ip
 80011d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80011d8:	fb07 0013 	mls	r0, r7, r3, r0
 80011dc:	0c25      	lsrs	r5, r4, #16
 80011de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011e2:	fb0e f003 	mul.w	r0, lr, r3
 80011e6:	42a8      	cmp	r0, r5
 80011e8:	d908      	bls.n	80011fc <__udivmoddi4+0x12c>
 80011ea:	eb1c 0505 	adds.w	r5, ip, r5
 80011ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80011f2:	d202      	bcs.n	80011fa <__udivmoddi4+0x12a>
 80011f4:	42a8      	cmp	r0, r5
 80011f6:	f200 80ce 	bhi.w	8001396 <__udivmoddi4+0x2c6>
 80011fa:	4643      	mov	r3, r8
 80011fc:	1a2d      	subs	r5, r5, r0
 80011fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8001202:	fb07 5510 	mls	r5, r7, r0, r5
 8001206:	fb0e fe00 	mul.w	lr, lr, r0
 800120a:	b2a4      	uxth	r4, r4
 800120c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001210:	45a6      	cmp	lr, r4
 8001212:	d908      	bls.n	8001226 <__udivmoddi4+0x156>
 8001214:	eb1c 0404 	adds.w	r4, ip, r4
 8001218:	f100 35ff 	add.w	r5, r0, #4294967295
 800121c:	d202      	bcs.n	8001224 <__udivmoddi4+0x154>
 800121e:	45a6      	cmp	lr, r4
 8001220:	f200 80b6 	bhi.w	8001390 <__udivmoddi4+0x2c0>
 8001224:	4628      	mov	r0, r5
 8001226:	eba4 040e 	sub.w	r4, r4, lr
 800122a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800122e:	e79e      	b.n	800116e <__udivmoddi4+0x9e>
 8001230:	f1c1 0720 	rsb	r7, r1, #32
 8001234:	408b      	lsls	r3, r1
 8001236:	fa22 fc07 	lsr.w	ip, r2, r7
 800123a:	ea4c 0c03 	orr.w	ip, ip, r3
 800123e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001242:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001246:	fbba f8f9 	udiv	r8, sl, r9
 800124a:	fa20 f307 	lsr.w	r3, r0, r7
 800124e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001252:	408d      	lsls	r5, r1
 8001254:	fa1f fe8c 	uxth.w	lr, ip
 8001258:	431d      	orrs	r5, r3
 800125a:	fa00 f301 	lsl.w	r3, r0, r1
 800125e:	fb08 f00e 	mul.w	r0, r8, lr
 8001262:	0c2c      	lsrs	r4, r5, #16
 8001264:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001268:	42a0      	cmp	r0, r4
 800126a:	fa02 f201 	lsl.w	r2, r2, r1
 800126e:	d90b      	bls.n	8001288 <__udivmoddi4+0x1b8>
 8001270:	eb1c 0404 	adds.w	r4, ip, r4
 8001274:	f108 3aff 	add.w	sl, r8, #4294967295
 8001278:	f080 8088 	bcs.w	800138c <__udivmoddi4+0x2bc>
 800127c:	42a0      	cmp	r0, r4
 800127e:	f240 8085 	bls.w	800138c <__udivmoddi4+0x2bc>
 8001282:	f1a8 0802 	sub.w	r8, r8, #2
 8001286:	4464      	add	r4, ip
 8001288:	1a24      	subs	r4, r4, r0
 800128a:	fbb4 f0f9 	udiv	r0, r4, r9
 800128e:	fb09 4410 	mls	r4, r9, r0, r4
 8001292:	fb00 fe0e 	mul.w	lr, r0, lr
 8001296:	b2ad      	uxth	r5, r5
 8001298:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800129c:	45a6      	cmp	lr, r4
 800129e:	d908      	bls.n	80012b2 <__udivmoddi4+0x1e2>
 80012a0:	eb1c 0404 	adds.w	r4, ip, r4
 80012a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80012a8:	d26c      	bcs.n	8001384 <__udivmoddi4+0x2b4>
 80012aa:	45a6      	cmp	lr, r4
 80012ac:	d96a      	bls.n	8001384 <__udivmoddi4+0x2b4>
 80012ae:	3802      	subs	r0, #2
 80012b0:	4464      	add	r4, ip
 80012b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012b6:	fba0 9502 	umull	r9, r5, r0, r2
 80012ba:	eba4 040e 	sub.w	r4, r4, lr
 80012be:	42ac      	cmp	r4, r5
 80012c0:	46c8      	mov	r8, r9
 80012c2:	46ae      	mov	lr, r5
 80012c4:	d356      	bcc.n	8001374 <__udivmoddi4+0x2a4>
 80012c6:	d053      	beq.n	8001370 <__udivmoddi4+0x2a0>
 80012c8:	2e00      	cmp	r6, #0
 80012ca:	d069      	beq.n	80013a0 <__udivmoddi4+0x2d0>
 80012cc:	ebb3 0208 	subs.w	r2, r3, r8
 80012d0:	eb64 040e 	sbc.w	r4, r4, lr
 80012d4:	fa22 f301 	lsr.w	r3, r2, r1
 80012d8:	fa04 f707 	lsl.w	r7, r4, r7
 80012dc:	431f      	orrs	r7, r3
 80012de:	40cc      	lsrs	r4, r1
 80012e0:	e9c6 7400 	strd	r7, r4, [r6]
 80012e4:	2100      	movs	r1, #0
 80012e6:	e747      	b.n	8001178 <__udivmoddi4+0xa8>
 80012e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ec:	f1c2 0120 	rsb	r1, r2, #32
 80012f0:	fa25 f301 	lsr.w	r3, r5, r1
 80012f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012f8:	fa20 f101 	lsr.w	r1, r0, r1
 80012fc:	4095      	lsls	r5, r2
 80012fe:	430d      	orrs	r5, r1
 8001300:	fbb3 f1f7 	udiv	r1, r3, r7
 8001304:	fb07 3311 	mls	r3, r7, r1, r3
 8001308:	fa1f fe8c 	uxth.w	lr, ip
 800130c:	0c28      	lsrs	r0, r5, #16
 800130e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001312:	fb01 f30e 	mul.w	r3, r1, lr
 8001316:	4283      	cmp	r3, r0
 8001318:	fa04 f402 	lsl.w	r4, r4, r2
 800131c:	d908      	bls.n	8001330 <__udivmoddi4+0x260>
 800131e:	eb1c 0000 	adds.w	r0, ip, r0
 8001322:	f101 38ff 	add.w	r8, r1, #4294967295
 8001326:	d22f      	bcs.n	8001388 <__udivmoddi4+0x2b8>
 8001328:	4283      	cmp	r3, r0
 800132a:	d92d      	bls.n	8001388 <__udivmoddi4+0x2b8>
 800132c:	3902      	subs	r1, #2
 800132e:	4460      	add	r0, ip
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	fbb0 f3f7 	udiv	r3, r0, r7
 8001336:	fb07 0013 	mls	r0, r7, r3, r0
 800133a:	b2ad      	uxth	r5, r5
 800133c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001340:	fb03 f00e 	mul.w	r0, r3, lr
 8001344:	42a8      	cmp	r0, r5
 8001346:	d908      	bls.n	800135a <__udivmoddi4+0x28a>
 8001348:	eb1c 0505 	adds.w	r5, ip, r5
 800134c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001350:	d216      	bcs.n	8001380 <__udivmoddi4+0x2b0>
 8001352:	42a8      	cmp	r0, r5
 8001354:	d914      	bls.n	8001380 <__udivmoddi4+0x2b0>
 8001356:	3b02      	subs	r3, #2
 8001358:	4465      	add	r5, ip
 800135a:	1a28      	subs	r0, r5, r0
 800135c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001360:	e738      	b.n	80011d4 <__udivmoddi4+0x104>
 8001362:	4631      	mov	r1, r6
 8001364:	4630      	mov	r0, r6
 8001366:	e707      	b.n	8001178 <__udivmoddi4+0xa8>
 8001368:	462f      	mov	r7, r5
 800136a:	e6e4      	b.n	8001136 <__udivmoddi4+0x66>
 800136c:	4618      	mov	r0, r3
 800136e:	e6f9      	b.n	8001164 <__udivmoddi4+0x94>
 8001370:	454b      	cmp	r3, r9
 8001372:	d2a9      	bcs.n	80012c8 <__udivmoddi4+0x1f8>
 8001374:	ebb9 0802 	subs.w	r8, r9, r2
 8001378:	eb65 0e0c 	sbc.w	lr, r5, ip
 800137c:	3801      	subs	r0, #1
 800137e:	e7a3      	b.n	80012c8 <__udivmoddi4+0x1f8>
 8001380:	4643      	mov	r3, r8
 8001382:	e7ea      	b.n	800135a <__udivmoddi4+0x28a>
 8001384:	4628      	mov	r0, r5
 8001386:	e794      	b.n	80012b2 <__udivmoddi4+0x1e2>
 8001388:	4641      	mov	r1, r8
 800138a:	e7d1      	b.n	8001330 <__udivmoddi4+0x260>
 800138c:	46d0      	mov	r8, sl
 800138e:	e77b      	b.n	8001288 <__udivmoddi4+0x1b8>
 8001390:	4464      	add	r4, ip
 8001392:	3802      	subs	r0, #2
 8001394:	e747      	b.n	8001226 <__udivmoddi4+0x156>
 8001396:	3b02      	subs	r3, #2
 8001398:	4465      	add	r5, ip
 800139a:	e72f      	b.n	80011fc <__udivmoddi4+0x12c>
 800139c:	4608      	mov	r0, r1
 800139e:	e706      	b.n	80011ae <__udivmoddi4+0xde>
 80013a0:	4631      	mov	r1, r6
 80013a2:	e6e9      	b.n	8001178 <__udivmoddi4+0xa8>

080013a4 <__aeabi_idiv0>:
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <MX_ADC_Init>:

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80013a8:	2300      	movs	r3, #0
{
 80013aa:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80013ac:	4c3f      	ldr	r4, [pc, #252]	; (80014ac <MX_ADC_Init+0x104>)
{
 80013ae:	b08a      	sub	sp, #40	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b0:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80013b4:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80013b8:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80013bc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80013c0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013c4:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80013c8:	9304      	str	r3, [sp, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013ca:	9300      	str	r3, [sp, #0]
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 6;
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013cc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d0:	63a3      	str	r3, [r4, #56]	; 0x38
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80013d2:	9309      	str	r3, [sp, #36]	; 0x24
  hadc.Instance = ADC1;
 80013d4:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <MX_ADC_Init+0x108>)
  hadc.Init.ContinuousConvMode = ENABLE;
 80013d6:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80013d8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013dc:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc.Init.NbrOfConversion = 6;
 80013e0:	2606      	movs	r6, #6
  hadc.Instance = ADC1;
 80013e2:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e4:	2310      	movs	r3, #16
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013e6:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80013e8:	6061      	str	r1, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013ea:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 80013ec:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc.Init.NbrOfConversion = 6;
 80013f0:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 80013f2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f6:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013f8:	f001 f88c 	bl	8002514 <HAL_ADC_Init>
 80013fc:	b108      	cbz	r0, 8001402 <MX_ADC_Init+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fe:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	e7fe      	b.n	8001400 <MX_ADC_Init+0x58>
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001402:	2302      	movs	r3, #2
 8001404:	4a2b      	ldr	r2, [pc, #172]	; (80014b4 <MX_ADC_Init+0x10c>)
  AnalogWDGConfig.LowThreshold = 0;
 8001406:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 800140a:	a904      	add	r1, sp, #16
 800140c:	4620      	mov	r0, r4
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800140e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  AnalogWDGConfig.ITMode = ENABLE;
 8001412:	f88d 5018 	strb.w	r5, [sp, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8001416:	f001 fb83 	bl	8002b20 <HAL_ADC_AnalogWDGConfig>
 800141a:	b108      	cbz	r0, 8001420 <MX_ADC_Init+0x78>
 800141c:	b672      	cpsid	i
  while (1)
 800141e:	e7fe      	b.n	800141e <MX_ADC_Init+0x76>
  sConfig.Channel = ADC_CHANNEL_0;
 8001420:	2200      	movs	r2, #0
 8001422:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001424:	4669      	mov	r1, sp
 8001426:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8001428:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 800142c:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800142e:	f001 faab 	bl	8002988 <HAL_ADC_ConfigChannel>
 8001432:	b108      	cbz	r0, 8001438 <MX_ADC_Init+0x90>
 8001434:	b672      	cpsid	i
  while (1)
 8001436:	e7fe      	b.n	8001436 <MX_ADC_Init+0x8e>
  sConfig.Channel = ADC_CHANNEL_1;
 8001438:	2201      	movs	r2, #1
 800143a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800143c:	4669      	mov	r1, sp
 800143e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8001440:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001444:	f001 faa0 	bl	8002988 <HAL_ADC_ConfigChannel>
 8001448:	b108      	cbz	r0, 800144e <MX_ADC_Init+0xa6>
 800144a:	b672      	cpsid	i
  while (1)
 800144c:	e7fe      	b.n	800144c <MX_ADC_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_2;
 800144e:	2202      	movs	r2, #2
 8001450:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001452:	4669      	mov	r1, sp
 8001454:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8001456:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800145a:	f001 fa95 	bl	8002988 <HAL_ADC_ConfigChannel>
 800145e:	b108      	cbz	r0, 8001464 <MX_ADC_Init+0xbc>
 8001460:	b672      	cpsid	i
  while (1)
 8001462:	e7fe      	b.n	8001462 <MX_ADC_Init+0xba>
  sConfig.Channel = ADC_CHANNEL_3;
 8001464:	2203      	movs	r2, #3
 8001466:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001468:	4669      	mov	r1, sp
 800146a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 800146c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001470:	f001 fa8a 	bl	8002988 <HAL_ADC_ConfigChannel>
 8001474:	b108      	cbz	r0, 800147a <MX_ADC_Init+0xd2>
 8001476:	b672      	cpsid	i
  while (1)
 8001478:	e7fe      	b.n	8001478 <MX_ADC_Init+0xd0>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800147a:	2211      	movs	r2, #17
 800147c:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800147e:	4669      	mov	r1, sp
 8001480:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001482:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001486:	f001 fa7f 	bl	8002988 <HAL_ADC_ConfigChannel>
 800148a:	b108      	cbz	r0, 8001490 <MX_ADC_Init+0xe8>
 800148c:	b672      	cpsid	i
  while (1)
 800148e:	e7fe      	b.n	800148e <MX_ADC_Init+0xe6>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001490:	2210      	movs	r2, #16
 8001492:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001494:	4669      	mov	r1, sp
 8001496:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001498:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800149c:	f001 fa74 	bl	8002988 <HAL_ADC_ConfigChannel>
 80014a0:	b108      	cbz	r0, 80014a6 <MX_ADC_Init+0xfe>
 80014a2:	b672      	cpsid	i
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <MX_ADC_Init+0xfc>
}
 80014a6:	b00a      	add	sp, #40	; 0x28
 80014a8:	bd70      	pop	{r4, r5, r6, pc}
 80014aa:	bf00      	nop
 80014ac:	20000224 	.word	0x20000224
 80014b0:	40012400 	.word	0x40012400
 80014b4:	00800200 	.word	0x00800200

080014b8 <SystemClock_Config>:
{
 80014b8:	b530      	push	{r4, r5, lr}
 80014ba:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014bc:	2230      	movs	r2, #48	; 0x30
 80014be:	2100      	movs	r1, #0
 80014c0:	a807      	add	r0, sp, #28
 80014c2:	f002 ff01 	bl	80042c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c6:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80014c8:	2512      	movs	r5, #18
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ca:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014cc:	e9cd 3300 	strd	r3, r3, [sp]
 80014d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d4:	4a16      	ldr	r2, [pc, #88]	; (8001530 <SystemClock_Config+0x78>)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d6:	9304      	str	r3, [sp, #16]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d8:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014da:	2110      	movs	r1, #16
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014dc:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80014e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e4:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014e6:	2201      	movs	r2, #1
 80014e8:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80014ea:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ec:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014ee:	2500      	movs	r5, #0
 80014f0:	f44f 4420 	mov.w	r4, #40960	; 0xa000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014f6:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 80014fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014fe:	910a      	str	r1, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001500:	f001 fff0 	bl	80034e4 <HAL_RCC_OscConfig>
 8001504:	b108      	cbz	r0, 800150a <SystemClock_Config+0x52>
 8001506:	b672      	cpsid	i
  while (1)
 8001508:	e7fe      	b.n	8001508 <SystemClock_Config+0x50>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800150a:	4601      	mov	r1, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150c:	220f      	movs	r2, #15
 800150e:	2300      	movs	r3, #0
 8001510:	2400      	movs	r4, #0
 8001512:	2500      	movs	r5, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001514:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001516:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800151a:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001520:	f002 fa40 	bl	80039a4 <HAL_RCC_ClockConfig>
 8001524:	b108      	cbz	r0, 800152a <SystemClock_Config+0x72>
 8001526:	b672      	cpsid	i
  while (1)
 8001528:	e7fe      	b.n	8001528 <SystemClock_Config+0x70>
}
 800152a:	b015      	add	sp, #84	; 0x54
 800152c:	bd30      	pop	{r4, r5, pc}
 800152e:	bf00      	nop
 8001530:	40007000 	.word	0x40007000

08001534 <ourInit>:
void ourInit(void){
 8001534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_ADC_DeInit(&hadc);
 8001538:	4f41      	ldr	r7, [pc, #260]	; (8001640 <ourInit+0x10c>)
void ourInit(void){
 800153a:	b089      	sub	sp, #36	; 0x24
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 800153c:	2201      	movs	r2, #1
 800153e:	2140      	movs	r1, #64	; 0x40
 8001540:	4840      	ldr	r0, [pc, #256]	; (8001644 <ourInit+0x110>)
 8001542:	f001 ff89 	bl	8003458 <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 8001546:	4638      	mov	r0, r7
 8001548:	f001 f8b4 	bl	80026b4 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 800154c:	483e      	ldr	r0, [pc, #248]	; (8001648 <ourInit+0x114>)
 800154e:	f001 fd03 	bl	8002f58 <HAL_DMA_DeInit>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001554:	4b3d      	ldr	r3, [pc, #244]	; (800164c <ourInit+0x118>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001556:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001558:	69d9      	ldr	r1, [r3, #28]
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800155a:	4d3d      	ldr	r5, [pc, #244]	; (8001650 <ourInit+0x11c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800155c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001560:	61d9      	str	r1, [r3, #28]
 8001562:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001564:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800156a:	9307      	str	r3, [sp, #28]
 800156c:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800156e:	f001 fbbd 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001572:	200b      	movs	r0, #11
 8001574:	f001 fbf8 	bl	8002d68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	200e      	movs	r0, #14
 800157c:	4611      	mov	r1, r2
 800157e:	f001 fbb5 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001582:	200e      	movs	r0, #14
 8001584:	f001 fbf0 	bl	8002d68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	200f      	movs	r0, #15
 800158c:	4611      	mov	r1, r2
 800158e:	f001 fbad 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001592:	200f      	movs	r0, #15
 8001594:	f001 fbe8 	bl	8002d68 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 8001598:	f7ff ff06 	bl	80013a8 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_values, 6);// start the adc in dma mode
 800159c:	2206      	movs	r2, #6
 800159e:	4638      	mov	r0, r7
 80015a0:	492c      	ldr	r1, [pc, #176]	; (8001654 <ourInit+0x120>)
 80015a2:	f001 fb31 	bl	8002c08 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80015a6:	2100      	movs	r1, #0
 80015a8:	4628      	mov	r0, r5
 80015aa:	f001 fc2d 	bl	8002e08 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80015ae:	2110      	movs	r1, #16
 80015b0:	4628      	mov	r0, r5
 80015b2:	f001 fc29 	bl	8002e08 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80015b6:	2300      	movs	r3, #0
 80015b8:	4628      	mov	r0, r5
 80015ba:	461a      	mov	r2, r3
 80015bc:	4619      	mov	r1, r3
 80015be:	f001 fc53 	bl	8002e68 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 80015c2:	2300      	movs	r3, #0
	memset (txbuffer, '\0', 64);  // clear the buffer
 80015c4:	2440      	movs	r4, #64	; 0x40
 80015c6:	4e24      	ldr	r6, [pc, #144]	; (8001658 <ourInit+0x124>)
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 80015c8:	461a      	mov	r2, r3
 80015ca:	4628      	mov	r0, r5
 80015cc:	2110      	movs	r1, #16
 80015ce:	f001 fc4b 	bl	8002e68 <HAL_DAC_SetValue>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 80015d2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800165c <ourInit+0x128>
	memset (txbuffer, '\0', 64);  // clear the buffer
 80015d6:	4622      	mov	r2, r4
 80015d8:	2100      	movs	r1, #0
 80015da:	4630      	mov	r0, r6
 80015dc:	f002 fe74 	bl	80042c8 <memset>
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 80015e0:	4622      	mov	r2, r4
 80015e2:	2100      	movs	r1, #0
 80015e4:	481e      	ldr	r0, [pc, #120]	; (8001660 <ourInit+0x12c>)
 80015e6:	f002 fe6f 	bl	80042c8 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 80015ea:	4622      	mov	r2, r4
 80015ec:	2100      	movs	r1, #0
 80015ee:	4648      	mov	r0, r9
 80015f0:	f002 fe6a 	bl	80042c8 <memset>
	snprintf((char*)txbuffer, 32, "*STRT,%5.2f,%5.3f,%d,FNSH!", lin_num, cur_num, chstat_main);
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <ourInit+0x130>)
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 80015f6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8001668 <ourInit+0x134>
	snprintf((char*)txbuffer, 32, "*STRT,%5.2f,%5.3f,%d,FNSH!", lin_num, cur_num, chstat_main);
 80015fa:	681d      	ldr	r5, [r3, #0]
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <ourInit+0x138>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <ourInit+0x13c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b25b      	sxtb	r3, r3
 8001606:	9304      	str	r3, [sp, #16]
 8001608:	f7fe ff26 	bl	8000458 <__aeabi_f2d>
 800160c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001610:	4628      	mov	r0, r5
 8001612:	f7fe ff21 	bl	8000458 <__aeabi_f2d>
 8001616:	4a17      	ldr	r2, [pc, #92]	; (8001674 <ourInit+0x140>)
 8001618:	e9cd 0100 	strd	r0, r1, [sp]
 800161c:	2120      	movs	r1, #32
 800161e:	4630      	mov	r0, r6
 8001620:	f003 faba 	bl	8004b98 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001624:	4622      	mov	r2, r4
 8001626:	4631      	mov	r1, r6
 8001628:	4640      	mov	r0, r8
 800162a:	f002 fb71 	bl	8003d10 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 800162e:	4622      	mov	r2, r4
 8001630:	4649      	mov	r1, r9
 8001632:	4640      	mov	r0, r8
}
 8001634:	b009      	add	sp, #36	; 0x24
 8001636:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 800163a:	f002 bba5 	b.w	8003d88 <HAL_UART_Receive_DMA>
 800163e:	bf00      	nop
 8001640:	20000224 	.word	0x20000224
 8001644:	40020000 	.word	0x40020000
 8001648:	2000028c 	.word	0x2000028c
 800164c:	40023800 	.word	0x40023800
 8001650:	20000278 	.word	0x20000278
 8001654:	200001fc 	.word	0x200001fc
 8001658:	200003e8 	.word	0x200003e8
 800165c:	200003a4 	.word	0x200003a4
 8001660:	20000428 	.word	0x20000428
 8001664:	2000039c 	.word	0x2000039c
 8001668:	20000358 	.word	0x20000358
 800166c:	20000220 	.word	0x20000220
 8001670:	2000021c 	.word	0x2000021c
 8001674:	080070c8 	.word	0x080070c8

08001678 <main>:
{
 8001678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	2400      	movs	r4, #0
{
 800167e:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8001680:	f000 ff14 	bl	80024ac <HAL_Init>
  SystemClock_Config();
 8001684:	f7ff ff18 	bl	80014b8 <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 800168e:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	4d5d      	ldr	r5, [pc, #372]	; (8001808 <main+0x190>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001698:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	61eb      	str	r3, [r5, #28]
 80016a0:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80016a2:	485a      	ldr	r0, [pc, #360]	; (800180c <main+0x194>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	930a      	str	r3, [sp, #40]	; 0x28
 80016aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ac:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 80016ae:	2600      	movs	r6, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b0:	f043 0320 	orr.w	r3, r3, #32
 80016b4:	61eb      	str	r3, [r5, #28]
 80016b6:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 80016b8:	2700      	movs	r7, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ba:	f003 0320 	and.w	r3, r3, #32
 80016be:	930b      	str	r3, [sp, #44]	; 0x2c
 80016c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	69eb      	ldr	r3, [r5, #28]
  hdac.Instance = DAC;
 80016c4:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8001810 <main+0x198>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61eb      	str	r3, [r5, #28]
 80016cc:	69eb      	ldr	r3, [r5, #28]
 80016ce:	4013      	ands	r3, r2
 80016d0:	930c      	str	r3, [sp, #48]	; 0x30
 80016d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	69eb      	ldr	r3, [r5, #28]
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	61eb      	str	r3, [r5, #28]
 80016dc:	69eb      	ldr	r3, [r5, #28]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	930d      	str	r3, [sp, #52]	; 0x34
 80016e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80016e6:	f001 feb7 	bl	8003458 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin;
 80016ea:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80016ee:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	4848      	ldr	r0, [pc, #288]	; (8001814 <main+0x19c>)
 80016f2:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin;
 80016f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	f001 fd43 	bl	8003184 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001702:	4842      	ldr	r0, [pc, #264]	; (800180c <main+0x194>)
 8001704:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001706:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800170a:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 800170e:	f001 fd39 	bl	8003184 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_4_Pin|Unused_Pin_14_Pin|Unused_Pin_15_Pin|Unused_Pin_16_Pin
 8001712:	f649 1280 	movw	r2, #39296	; 0x9980
 8001716:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	483c      	ldr	r0, [pc, #240]	; (800180c <main+0x194>)
 800171a:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_4_Pin|Unused_Pin_14_Pin|Unused_Pin_15_Pin|Unused_Pin_16_Pin
 800171c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f001 fd2f 	bl	8003184 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_5_Pin|Unused_Pin_6_Pin|Unused_Pin_7_Pin|Unused_Pin_8_Pin
 8001726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800172a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	483a      	ldr	r0, [pc, #232]	; (8001818 <main+0x1a0>)
 800172e:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_5_Pin|Unused_Pin_6_Pin|Unused_Pin_7_Pin|Unused_Pin_8_Pin
 8001730:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001736:	f001 fd25 	bl	8003184 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800173a:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800173c:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800173e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001742:	61eb      	str	r3, [r5, #28]
 8001744:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001746:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800174c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800174e:	9309      	str	r3, [sp, #36]	; 0x24
 8001750:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001752:	f001 facb 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001756:	200b      	movs	r0, #11
 8001758:	f001 fb06 	bl	8002d68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800175c:	4622      	mov	r2, r4
 800175e:	4621      	mov	r1, r4
 8001760:	200e      	movs	r0, #14
 8001762:	f001 fac3 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001766:	200e      	movs	r0, #14
 8001768:	f001 fafe 	bl	8002d68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800176c:	4622      	mov	r2, r4
 800176e:	4621      	mov	r1, r4
 8001770:	200f      	movs	r0, #15
 8001772:	f001 fabb 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001776:	200f      	movs	r0, #15
 8001778:	f001 faf6 	bl	8002d68 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 800177c:	f7ff fe14 	bl	80013a8 <MX_ADC_Init>
  hdac.Instance = DAC;
 8001780:	4b26      	ldr	r3, [pc, #152]	; (800181c <main+0x1a4>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001782:	4640      	mov	r0, r8
  DAC_ChannelConfTypeDef sConfig = {0};
 8001784:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hdac.Instance = DAC;
 8001788:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800178c:	f001 fb26 	bl	8002ddc <HAL_DAC_Init>
 8001790:	b108      	cbz	r0, 8001796 <main+0x11e>
 8001792:	b672      	cpsid	i
  while (1)
 8001794:	e7fe      	b.n	8001794 <main+0x11c>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001796:	4602      	mov	r2, r0
 8001798:	a90e      	add	r1, sp, #56	; 0x38
 800179a:	4640      	mov	r0, r8
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800179c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017a0:	f001 fb78 	bl	8002e94 <HAL_DAC_ConfigChannel>
 80017a4:	b108      	cbz	r0, 80017aa <main+0x132>
 80017a6:	b672      	cpsid	i
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <main+0x130>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80017aa:	2210      	movs	r2, #16
 80017ac:	4640      	mov	r0, r8
 80017ae:	a90e      	add	r1, sp, #56	; 0x38
 80017b0:	f001 fb70 	bl	8002e94 <HAL_DAC_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b108      	cbz	r0, 80017bc <main+0x144>
 80017b8:	b672      	cpsid	i
  while (1)
 80017ba:	e7fe      	b.n	80017ba <main+0x142>
  huart1.Init.BaudRate = 9600;
 80017bc:	f44f 5516 	mov.w	r5, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80017c0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  huart1.Init.Parity = UART_PARITY_ODD;
 80017c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c8:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 80017ca:	4815      	ldr	r0, [pc, #84]	; (8001820 <main+0x1a8>)
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d0:	60c3      	str	r3, [r0, #12]
  huart1.Instance = USART1;
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <main+0x1ac>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80017d4:	e9c0 5401 	strd	r5, r4, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017d8:	e9c0 1204 	strd	r1, r2, [r0, #16]
  huart1.Instance = USART1;
 80017dc:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017de:	f002 fa0d 	bl	8003bfc <HAL_UART_Init>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	f040 8205 	bne.w	8001bf2 <main+0x57a>
  volatile float error = 0;
 80017e8:	2400      	movs	r4, #0
  ourInit();
 80017ea:	f7ff fea3 	bl	8001534 <ourInit>
  volatile float error = 0;
 80017ee:	f8df a038 	ldr.w	sl, [pc, #56]	; 8001828 <main+0x1b0>
 80017f2:	9404      	str	r4, [sp, #16]
  volatile float derivative = 0;
 80017f4:	f8df b034 	ldr.w	fp, [pc, #52]	; 800182c <main+0x1b4>
 80017f8:	9405      	str	r4, [sp, #20]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80017fa:	4e0d      	ldr	r6, [pc, #52]	; (8001830 <main+0x1b8>)
  volatile float integral = 0;
 80017fc:	9406      	str	r4, [sp, #24]
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 80017fe:	4d0d      	ldr	r5, [pc, #52]	; (8001834 <main+0x1bc>)
  volatile float error_previous = 0;
 8001800:	9407      	str	r4, [sp, #28]
  volatile float correction = 0;
 8001802:	9408      	str	r4, [sp, #32]
 8001804:	e01f      	b.n	8001846 <main+0x1ce>
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000
 8001810:	20000278 	.word	0x20000278
 8001814:	40020800 	.word	0x40020800
 8001818:	40020400 	.word	0x40020400
 800181c:	40007400 	.word	0x40007400
 8001820:	20000358 	.word	0x20000358
 8001824:	40013800 	.word	0x40013800
 8001828:	20000208 	.word	0x20000208
 800182c:	2000046c 	.word	0x2000046c
 8001830:	40400000 	.word	0x40400000
 8001834:	457ff000 	.word	0x457ff000
		ADC1->HTR = 4095;
 8001838:	f640 72ff 	movw	r2, #4095	; 0xfff
 800183c:	4bb4      	ldr	r3, [pc, #720]	; (8001b10 <main+0x498>)
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(1);
 8001840:	2001      	movs	r0, #1
 8001842:	f000 fe55 	bl	80024f0 <HAL_Delay>
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001846:	4bb3      	ldr	r3, [pc, #716]	; (8001b14 <main+0x49c>)
 8001848:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800184a:	8818      	ldrh	r0, [r3, #0]
 800184c:	f7ff f9ea 	bl	8000c24 <__aeabi_ui2f>
 8001850:	4680      	mov	r8, r0
 8001852:	f8ba 0008 	ldrh.w	r0, [sl, #8]
 8001856:	b280      	uxth	r0, r0
 8001858:	f7ff f9e4 	bl	8000c24 <__aeabi_ui2f>
 800185c:	4601      	mov	r1, r0
 800185e:	4640      	mov	r0, r8
 8001860:	f7ff faec 	bl	8000e3c <__aeabi_fdiv>
 8001864:	4631      	mov	r1, r6
 8001866:	f7ff fa35 	bl	8000cd4 <__aeabi_fmul>
 800186a:	4607      	mov	r7, r0
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 800186c:	f8ba 0004 	ldrh.w	r0, [sl, #4]
 8001870:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 8001874:	b280      	uxth	r0, r0
 8001876:	b29b      	uxth	r3, r3
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	f7ff f9d3 	bl	8000c24 <__aeabi_ui2f>
 800187e:	4631      	mov	r1, r6
 8001880:	f7ff fa28 	bl	8000cd4 <__aeabi_fmul>
 8001884:	4641      	mov	r1, r8
 8001886:	f7ff fa25 	bl	8000cd4 <__aeabi_fmul>
 800188a:	9b01      	ldr	r3, [sp, #4]
 800188c:	4681      	mov	r9, r0
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff f9c8 	bl	8000c24 <__aeabi_ui2f>
 8001894:	4629      	mov	r1, r5
 8001896:	f7ff fa1d 	bl	8000cd4 <__aeabi_fmul>
 800189a:	4601      	mov	r1, r0
 800189c:	4648      	mov	r0, r9
 800189e:	f7ff facd 	bl	8000e3c <__aeabi_fdiv>
 80018a2:	499d      	ldr	r1, [pc, #628]	; (8001b18 <main+0x4a0>)
 80018a4:	f7ff faca 	bl	8000e3c <__aeabi_fdiv>
 80018a8:	499c      	ldr	r1, [pc, #624]	; (8001b1c <main+0x4a4>)
 80018aa:	f7ff fac7 	bl	8000e3c <__aeabi_fdiv>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80018ae:	4621      	mov	r1, r4
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 80018b0:	4681      	mov	r9, r0
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80018b2:	f7ff fbc1 	bl	8001038 <__aeabi_fcmpge>
 80018b6:	b900      	cbnz	r0, 80018ba <main+0x242>
 80018b8:	46a1      	mov	r9, r4
 80018ba:	4b99      	ldr	r3, [pc, #612]	; (8001b20 <main+0x4a8>)
 80018bc:	f8c3 9000 	str.w	r9, [r3]
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80018c0:	f8ba 0000 	ldrh.w	r0, [sl]
 80018c4:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 80018c8:	b280      	uxth	r0, r0
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	f7ff f9a9 	bl	8000c24 <__aeabi_ui2f>
 80018d2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80018d6:	f7ff f9fd 	bl	8000cd4 <__aeabi_fmul>
 80018da:	4631      	mov	r1, r6
 80018dc:	f7ff f9fa 	bl	8000cd4 <__aeabi_fmul>
 80018e0:	4641      	mov	r1, r8
 80018e2:	f7ff f9f7 	bl	8000cd4 <__aeabi_fmul>
 80018e6:	9b01      	ldr	r3, [sp, #4]
 80018e8:	4681      	mov	r9, r0
 80018ea:	4618      	mov	r0, r3
 80018ec:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <main+0x4a8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	f7ff f997 	bl	8000c24 <__aeabi_ui2f>
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7ff f9ec 	bl	8000cd4 <__aeabi_fmul>
 80018fc:	4601      	mov	r1, r0
 80018fe:	4648      	mov	r0, r9
 8001900:	f7ff fa9c 	bl	8000e3c <__aeabi_fdiv>
 8001904:	9b01      	ldr	r3, [sp, #4]
 8001906:	4681      	mov	r9, r0
 8001908:	4986      	ldr	r1, [pc, #536]	; (8001b24 <main+0x4ac>)
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f9e2 	bl	8000cd4 <__aeabi_fmul>
 8001910:	4601      	mov	r1, r0
 8001912:	4648      	mov	r0, r9
 8001914:	f7ff f8d4 	bl	8000ac0 <__aeabi_fsub>
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 8001918:	4621      	mov	r1, r4
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 800191a:	4681      	mov	r9, r0
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 800191c:	f7ff fb8c 	bl	8001038 <__aeabi_fcmpge>
 8001920:	b900      	cbnz	r0, 8001924 <main+0x2ac>
 8001922:	46a1      	mov	r9, r4
 8001924:	4b80      	ldr	r3, [pc, #512]	; (8001b28 <main+0x4b0>)
 8001926:	f8c3 9000 	str.w	r9, [r3]
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 800192a:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800192e:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 8001932:	b280      	uxth	r0, r0
 8001934:	b29b      	uxth	r3, r3
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	f7ff f974 	bl	8000c24 <__aeabi_ui2f>
 800193c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001940:	f7ff f9c8 	bl	8000cd4 <__aeabi_fmul>
 8001944:	4631      	mov	r1, r6
 8001946:	f7ff f9c5 	bl	8000cd4 <__aeabi_fmul>
 800194a:	4641      	mov	r1, r8
 800194c:	f7ff f9c2 	bl	8000cd4 <__aeabi_fmul>
 8001950:	9b01      	ldr	r3, [sp, #4]
 8001952:	4681      	mov	r9, r0
 8001954:	4618      	mov	r0, r3
 8001956:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <main+0x4a8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	f7ff f962 	bl	8000c24 <__aeabi_ui2f>
 8001960:	4629      	mov	r1, r5
 8001962:	f7ff f9b7 	bl	8000cd4 <__aeabi_fmul>
 8001966:	4601      	mov	r1, r0
 8001968:	4648      	mov	r0, r9
 800196a:	f7ff fa67 	bl	8000e3c <__aeabi_fdiv>
 800196e:	9b01      	ldr	r3, [sp, #4]
 8001970:	4681      	mov	r9, r0
 8001972:	496c      	ldr	r1, [pc, #432]	; (8001b24 <main+0x4ac>)
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f9ad 	bl	8000cd4 <__aeabi_fmul>
 800197a:	4601      	mov	r1, r0
 800197c:	4648      	mov	r0, r9
 800197e:	f7ff f89f 	bl	8000ac0 <__aeabi_fsub>
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 8001982:	4621      	mov	r1, r4
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8001984:	4681      	mov	r9, r0
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 8001986:	f7ff fb57 	bl	8001038 <__aeabi_fcmpge>
 800198a:	b900      	cbnz	r0, 800198e <main+0x316>
 800198c:	46a1      	mov	r9, r4
 800198e:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <main+0x4b4>)
 8001990:	f8c3 9000 	str.w	r9, [r3]
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 8001994:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8001998:	f8ba 9008 	ldrh.w	r9, [sl, #8]
 800199c:	b280      	uxth	r0, r0
 800199e:	f7ff f941 	bl	8000c24 <__aeabi_ui2f>
 80019a2:	4963      	ldr	r1, [pc, #396]	; (8001b30 <main+0x4b8>)
 80019a4:	f7ff f996 	bl	8000cd4 <__aeabi_fmul>
 80019a8:	4631      	mov	r1, r6
 80019aa:	f7ff f993 	bl	8000cd4 <__aeabi_fmul>
 80019ae:	4641      	mov	r1, r8
 80019b0:	f7ff f990 	bl	8000cd4 <__aeabi_fmul>
 80019b4:	fa1f f989 	uxth.w	r9, r9
 80019b8:	4680      	mov	r8, r0
 80019ba:	4648      	mov	r0, r9
 80019bc:	f7ff f932 	bl	8000c24 <__aeabi_ui2f>
 80019c0:	4629      	mov	r1, r5
 80019c2:	f7ff f987 	bl	8000cd4 <__aeabi_fmul>
 80019c6:	4601      	mov	r1, r0
 80019c8:	4640      	mov	r0, r8
 80019ca:	f7ff fa37 	bl	8000e3c <__aeabi_fdiv>
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 80019ce:	4621      	mov	r1, r4
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 80019d0:	4680      	mov	r8, r0
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 80019d2:	f7ff fb31 	bl	8001038 <__aeabi_fcmpge>
 80019d6:	b900      	cbnz	r0, 80019da <main+0x362>
 80019d8:	46a0      	mov	r8, r4
 80019da:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <main+0x4bc>)
 80019dc:	f8c3 8000 	str.w	r8, [r3]
	  if(chstat_main == 1){
 80019e0:	4b55      	ldr	r3, [pc, #340]	; (8001b38 <main+0x4c0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	f000 811b 	beq.w	8001c20 <main+0x5a8>
		  if(op_num > (volt_set_main - 0.5) + margin){
 80019ea:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <main+0x4b0>)
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	f7fe fd33 	bl	8000458 <__aeabi_f2d>
 80019f2:	4680      	mov	r8, r0
 80019f4:	f8db 0000 	ldr.w	r0, [fp]
 80019f8:	4689      	mov	r9, r1
 80019fa:	f7fe fd2d 	bl	8000458 <__aeabi_f2d>
 80019fe:	2200      	movs	r2, #0
 8001a00:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <main+0x4c4>)
 8001a02:	f7fe fbc9 	bl	8000198 <__aeabi_dsub>
 8001a06:	a340      	add	r3, pc, #256	; (adr r3, 8001b08 <main+0x490>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	f7fe fbc6 	bl	800019c <__adddf3>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4640      	mov	r0, r8
 8001a16:	4649      	mov	r1, r9
 8001a18:	f7ff f806 	bl	8000a28 <__aeabi_dcmpgt>
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	f040 80f0 	bne.w	8001c02 <main+0x58a>
		  else if(op_num < (volt_set_main - 0.5) - margin){
 8001a22:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <main+0x4b0>)
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	f7fe fd17 	bl	8000458 <__aeabi_f2d>
 8001a2a:	4680      	mov	r8, r0
 8001a2c:	f8db 0000 	ldr.w	r0, [fp]
 8001a30:	4689      	mov	r9, r1
 8001a32:	f7fe fd11 	bl	8000458 <__aeabi_f2d>
 8001a36:	2200      	movs	r2, #0
 8001a38:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <main+0x4c4>)
 8001a3a:	f7fe fbad 	bl	8000198 <__aeabi_dsub>
 8001a3e:	a332      	add	r3, pc, #200	; (adr r3, 8001b08 <main+0x490>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fba8 	bl	8000198 <__aeabi_dsub>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4640      	mov	r0, r8
 8001a4e:	4649      	mov	r1, r9
 8001a50:	f7fe ffcc 	bl	80009ec <__aeabi_dcmplt>
 8001a54:	b190      	cbz	r0, 8001a7c <main+0x404>
			  if(v1 <= 4094){
 8001a56:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001a5a:	4939      	ldr	r1, [pc, #228]	; (8001b40 <main+0x4c8>)
 8001a5c:	880b      	ldrh	r3, [r1, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d803      	bhi.n	8001a6c <main+0x3f4>
				  v1++;
 8001a64:	880b      	ldrh	r3, [r1, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	800b      	strh	r3, [r1, #0]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <main+0x4c8>)
 8001a70:	4611      	mov	r1, r2
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	4833      	ldr	r0, [pc, #204]	; (8001b44 <main+0x4cc>)
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f001 f9f6 	bl	8002e68 <HAL_DAC_SetValue>
	  volatile float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)0.5))) * (float)4095 / (float)vddcalc);
 8001a7c:	f8db 0000 	ldr.w	r0, [fp]
 8001a80:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001a84:	f7ff f81e 	bl	8000ac4 <__addsf3>
 8001a88:	492f      	ldr	r1, [pc, #188]	; (8001b48 <main+0x4d0>)
 8001a8a:	f7ff f923 	bl	8000cd4 <__aeabi_fmul>
 8001a8e:	4601      	mov	r1, r0
 8001a90:	482e      	ldr	r0, [pc, #184]	; (8001b4c <main+0x4d4>)
 8001a92:	f7ff f815 	bl	8000ac0 <__aeabi_fsub>
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7ff f91c 	bl	8000cd4 <__aeabi_fmul>
 8001a9c:	4639      	mov	r1, r7
 8001a9e:	f7ff f9cd 	bl	8000e3c <__aeabi_fdiv>
 8001aa2:	900e      	str	r0, [sp, #56]	; 0x38
	  if(temp <= 0){
 8001aa4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	f7ff fabc 	bl	8001024 <__aeabi_fcmple>
 8001aac:	2800      	cmp	r0, #0
 8001aae:	f040 80b3 	bne.w	8001c18 <main+0x5a0>
	  else if(temp >= 4095){
 8001ab2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7ff fabf 	bl	8001038 <__aeabi_fcmpge>
 8001aba:	2800      	cmp	r0, #0
 8001abc:	f000 80e4 	beq.w	8001c88 <main+0x610>
		  v2 = 4095;
 8001ac0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001ac4:	4a22      	ldr	r2, [pc, #136]	; (8001b50 <main+0x4d8>)
 8001ac6:	8013      	strh	r3, [r2, #0]
	  if(volt_set_main > volt_set_main_old){
 8001ac8:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <main+0x4dc>)
 8001aca:	f8db 0000 	ldr.w	r0, [fp]
 8001ace:	6819      	ldr	r1, [r3, #0]
 8001ad0:	f7ff fabc 	bl	800104c <__aeabi_fcmpgt>
 8001ad4:	4607      	mov	r7, r0
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	f040 80c5 	bne.w	8001c66 <main+0x5ee>
	  else if(volt_set_main < volt_set_main_old){
 8001adc:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <main+0x4dc>)
 8001ade:	f8db 0000 	ldr.w	r0, [fp]
 8001ae2:	6819      	ldr	r1, [r3, #0]
 8001ae4:	f7ff fa94 	bl	8001010 <__aeabi_fcmplt>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <main+0x4c8>)
	  else if(volt_set_main < volt_set_main_old){
 8001aea:	4680      	mov	r8, r0
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
	  else if(volt_set_main < volt_set_main_old){
 8001af0:	2800      	cmp	r0, #0
 8001af2:	f000 80b1 	beq.w	8001c58 <main+0x5e0>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001af6:	463a      	mov	r2, r7
 8001af8:	4639      	mov	r1, r7
 8001afa:	4812      	ldr	r0, [pc, #72]	; (8001b44 <main+0x4cc>)
 8001afc:	f001 f9b4 	bl	8002e68 <HAL_DAC_SetValue>
 8001b00:	e02a      	b.n	8001b58 <main+0x4e0>
 8001b02:	bf00      	nop
 8001b04:	f3af 8000 	nop.w
 8001b08:	e0000000 	.word	0xe0000000
 8001b0c:	3f60624d 	.word	0x3f60624d
 8001b10:	40012400 	.word	0x40012400
 8001b14:	20000000 	.word	0x20000000
 8001b18:	41a00000 	.word	0x41a00000
 8001b1c:	3e19999a 	.word	0x3e19999a
 8001b20:	20000220 	.word	0x20000220
 8001b24:	3eb33333 	.word	0x3eb33333
 8001b28:	200003a0 	.word	0x200003a0
 8001b2c:	2000039c 	.word	0x2000039c
 8001b30:	40a00000 	.word	0x40a00000
 8001b34:	200003e4 	.word	0x200003e4
 8001b38:	2000021c 	.word	0x2000021c
 8001b3c:	3fe00000 	.word	0x3fe00000
 8001b40:	20000468 	.word	0x20000468
 8001b44:	20000278 	.word	0x20000278
 8001b48:	3e75c28f 	.word	0x3e75c28f
 8001b4c:	40800b78 	.word	0x40800b78
 8001b50:	2000046a 	.word	0x2000046a
 8001b54:	20000470 	.word	0x20000470
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 8001b58:	463a      	mov	r2, r7
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 8001b5a:	4b4f      	ldr	r3, [pc, #316]	; (8001c98 <main+0x620>)
 8001b5c:	2110      	movs	r1, #16
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	484e      	ldr	r0, [pc, #312]	; (8001c9c <main+0x624>)
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	f001 f980 	bl	8002e68 <HAL_DAC_SetValue>
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 8001b68:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <main+0x628>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d142      	bne.n	8001bf6 <main+0x57e>
 8001b70:	f8ba 3000 	ldrh.w	r3, [sl]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d93d      	bls.n	8001bf6 <main+0x57e>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2140      	movs	r1, #64	; 0x40
 8001b7e:	4849      	ldr	r0, [pc, #292]	; (8001ca4 <main+0x62c>)
 8001b80:	f001 fc6a 	bl	8003458 <HAL_GPIO_WritePin>
	  update_ADC_watchdog(amp_set_main);
 8001b84:	4b48      	ldr	r3, [pc, #288]	; (8001ca8 <main+0x630>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001b86:	4949      	ldr	r1, [pc, #292]	; (8001cac <main+0x634>)
	  update_ADC_watchdog(amp_set_main);
 8001b88:	6818      	ldr	r0, [r3, #0]
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001b8a:	f7ff f8a3 	bl	8000cd4 <__aeabi_fmul>
 8001b8e:	4948      	ldr	r1, [pc, #288]	; (8001cb0 <main+0x638>)
 8001b90:	f7ff f8a0 	bl	8000cd4 <__aeabi_fmul>
 8001b94:	4629      	mov	r1, r5
 8001b96:	f7ff f89d 	bl	8000cd4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001b9a:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <main+0x63c>)
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001b9c:	4607      	mov	r7, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001b9e:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8001ba0:	f8ba 9008 	ldrh.w	r9, [sl, #8]
 8001ba4:	8818      	ldrh	r0, [r3, #0]
 8001ba6:	f7ff f83d 	bl	8000c24 <__aeabi_ui2f>
 8001baa:	fa1f f989 	uxth.w	r9, r9
 8001bae:	4680      	mov	r8, r0
 8001bb0:	4648      	mov	r0, r9
 8001bb2:	f7ff f837 	bl	8000c24 <__aeabi_ui2f>
 8001bb6:	4601      	mov	r1, r0
 8001bb8:	4640      	mov	r0, r8
 8001bba:	f7ff f93f 	bl	8000e3c <__aeabi_fdiv>
 8001bbe:	4631      	mov	r1, r6
 8001bc0:	f7ff f888 	bl	8000cd4 <__aeabi_fmul>
 8001bc4:	4601      	mov	r1, r0
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001bc6:	4638      	mov	r0, r7
 8001bc8:	f7ff f938 	bl	8000e3c <__aeabi_fdiv>
 8001bcc:	f7ff fa48 	bl	8001060 <__aeabi_f2uiz>
	if(amp >= 4095){
 8001bd0:	f640 72fe 	movw	r2, #4094	; 0xffe
	volatile uint16_t amp = (uint16_t)( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001bd4:	b280      	uxth	r0, r0
 8001bd6:	f8ad 000e 	strh.w	r0, [sp, #14]
	if(amp >= 4095){
 8001bda:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4293      	cmp	r3, r2
 8001be2:	f63f ae29 	bhi.w	8001838 <main+0x1c0>
		ADC1->HTR = amp;
 8001be6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001bea:	4a33      	ldr	r2, [pc, #204]	; (8001cb8 <main+0x640>)
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	6293      	str	r3, [r2, #40]	; 0x28
 8001bf0:	e626      	b.n	8001840 <main+0x1c8>
 8001bf2:	b672      	cpsid	i
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <main+0x57c>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2140      	movs	r1, #64	; 0x40
 8001bfa:	482a      	ldr	r0, [pc, #168]	; (8001ca4 <main+0x62c>)
 8001bfc:	f001 fc2c 	bl	8003458 <HAL_GPIO_WritePin>
 8001c00:	e7c0      	b.n	8001b84 <main+0x50c>
			  if(v1 >= 1){
 8001c02:	4a2e      	ldr	r2, [pc, #184]	; (8001cbc <main+0x644>)
 8001c04:	8813      	ldrh	r3, [r2, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f43f af2f 	beq.w	8001a6c <main+0x3f4>
				  v1--;
 8001c0e:	8813      	ldrh	r3, [r2, #0]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	8013      	strh	r3, [r2, #0]
 8001c16:	e729      	b.n	8001a6c <main+0x3f4>
		  v2 = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <main+0x620>)
 8001c1c:	8013      	strh	r3, [r2, #0]
 8001c1e:	e753      	b.n	8001ac8 <main+0x450>
		  if(lin_num > volt_set_main + margin){
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <main+0x648>)
 8001c22:	f8db 0000 	ldr.w	r0, [fp]
 8001c26:	f8d3 8000 	ldr.w	r8, [r3]
 8001c2a:	4926      	ldr	r1, [pc, #152]	; (8001cc4 <main+0x64c>)
 8001c2c:	f7fe ff4a 	bl	8000ac4 <__addsf3>
 8001c30:	4641      	mov	r1, r8
 8001c32:	f7ff f9ed 	bl	8001010 <__aeabi_fcmplt>
 8001c36:	2800      	cmp	r0, #0
 8001c38:	d1e3      	bne.n	8001c02 <main+0x58a>
		  else if(lin_num < volt_set_main - margin){
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <main+0x648>)
 8001c3c:	f8db 0000 	ldr.w	r0, [fp]
 8001c40:	f8d3 8000 	ldr.w	r8, [r3]
 8001c44:	491f      	ldr	r1, [pc, #124]	; (8001cc4 <main+0x64c>)
 8001c46:	f7fe ff3b 	bl	8000ac0 <__aeabi_fsub>
 8001c4a:	4641      	mov	r1, r8
 8001c4c:	f7ff f9fe 	bl	800104c <__aeabi_fcmpgt>
 8001c50:	2800      	cmp	r0, #0
 8001c52:	f43f af13 	beq.w	8001a7c <main+0x404>
 8001c56:	e6fe      	b.n	8001a56 <main+0x3de>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	480f      	ldr	r0, [pc, #60]	; (8001c9c <main+0x624>)
 8001c5e:	f001 f903 	bl	8002e68 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 8001c62:	4642      	mov	r2, r8
 8001c64:	e779      	b.n	8001b5a <main+0x4e2>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <main+0x620>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	480a      	ldr	r0, [pc, #40]	; (8001c9c <main+0x624>)
 8001c72:	f001 f8f9 	bl	8002e68 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001c76:	2200      	movs	r2, #0
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <main+0x644>)
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	4807      	ldr	r0, [pc, #28]	; (8001c9c <main+0x624>)
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f001 f8f1 	bl	8002e68 <HAL_DAC_SetValue>
 8001c86:	e76f      	b.n	8001b68 <main+0x4f0>
		  v2 = (uint16_t)temp;
 8001c88:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001c8a:	f7ff f9e9 	bl	8001060 <__aeabi_f2uiz>
 8001c8e:	4a02      	ldr	r2, [pc, #8]	; (8001c98 <main+0x620>)
 8001c90:	b283      	uxth	r3, r0
 8001c92:	8013      	strh	r3, [r2, #0]
 8001c94:	e718      	b.n	8001ac8 <main+0x450>
 8001c96:	bf00      	nop
 8001c98:	2000046a 	.word	0x2000046a
 8001c9c:	20000278 	.word	0x20000278
 8001ca0:	2000021c 	.word	0x2000021c
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	20000214 	.word	0x20000214
 8001cac:	3e19999a 	.word	0x3e19999a
 8001cb0:	41a00000 	.word	0x41a00000
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	40012400 	.word	0x40012400
 8001cbc:	20000468 	.word	0x20000468
 8001cc0:	2000039c 	.word	0x2000039c
 8001cc4:	3b03126f 	.word	0x3b03126f

08001cc8 <HAL_ADC_ConvHalfCpltCallback>:
	adc_values_cpy[0] = adc_values[0];
 8001cc8:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001ccc:	8811      	ldrh	r1, [r2, #0]
 8001cce:	b289      	uxth	r1, r1
 8001cd0:	8019      	strh	r1, [r3, #0]
	adc_values_cpy[1] = adc_values[1];
 8001cd2:	8851      	ldrh	r1, [r2, #2]
 8001cd4:	b289      	uxth	r1, r1
 8001cd6:	8059      	strh	r1, [r3, #2]
	adc_values_cpy[2] = adc_values[2];
 8001cd8:	8892      	ldrh	r2, [r2, #4]
 8001cda:	b292      	uxth	r2, r2
 8001cdc:	809a      	strh	r2, [r3, #4]
}
 8001cde:	4770      	bx	lr
 8001ce0:	200001fc 	.word	0x200001fc
 8001ce4:	20000208 	.word	0x20000208

08001ce8 <HAL_ADC_ConvCpltCallback>:
	adc_values_cpy[3] = adc_values[3];
 8001ce8:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <HAL_ADC_ConvCpltCallback+0x18>)
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001cec:	88d1      	ldrh	r1, [r2, #6]
 8001cee:	b289      	uxth	r1, r1
 8001cf0:	80d9      	strh	r1, [r3, #6]
	adc_values_cpy[4] = adc_values[4];
 8001cf2:	8911      	ldrh	r1, [r2, #8]
 8001cf4:	b289      	uxth	r1, r1
 8001cf6:	8119      	strh	r1, [r3, #8]
	adc_values_cpy[5] = adc_values[5];
 8001cf8:	8952      	ldrh	r2, [r2, #10]
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	815a      	strh	r2, [r3, #10]
}
 8001cfe:	4770      	bx	lr
 8001d00:	200001fc 	.word	0x200001fc
 8001d04:	20000208 	.word	0x20000208

08001d08 <HAL_ADC_LevelOutOfWindowCallback>:
{
 8001d08:	b510      	push	{r4, lr}
	if(chstat_main == 1){
 8001d0a:	4c06      	ldr	r4, [pc, #24]	; (8001d24 <HAL_ADC_LevelOutOfWindowCallback+0x1c>)
 8001d0c:	7823      	ldrb	r3, [r4, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d000      	beq.n	8001d14 <HAL_ADC_LevelOutOfWindowCallback+0xc>
}
 8001d12:	bd10      	pop	{r4, pc}
 8001d14:	b25a      	sxtb	r2, r3
		HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001d16:	2140      	movs	r1, #64	; 0x40
 8001d18:	4803      	ldr	r0, [pc, #12]	; (8001d28 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 8001d1a:	f001 fb9d 	bl	8003458 <HAL_GPIO_WritePin>
		chstat_main = 2;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	7023      	strb	r3, [r4, #0]
}
 8001d22:	bd10      	pop	{r4, pc}
 8001d24:	2000021c 	.word	0x2000021c
 8001d28:	40020000 	.word	0x40020000

08001d2c <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8001d2c:	b430      	push	{r4, r5}
	memcpy(txbuffer, txbuffer_cpy, 64);  // copy the data to the buffer
 8001d2e:	4c07      	ldr	r4, [pc, #28]	; (8001d4c <HAL_UART_TxHalfCpltCallback+0x20>)
 8001d30:	4d07      	ldr	r5, [pc, #28]	; (8001d50 <HAL_UART_TxHalfCpltCallback+0x24>)
 8001d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d46:	bc30      	pop	{r4, r5}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	200003e8 	.word	0x200003e8
 8001d50:	20000428 	.word	0x20000428

08001d54 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001d54:	b5d0      	push	{r4, r6, r7, lr}
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001d56:	4c11      	ldr	r4, [pc, #68]	; (8001d9c <HAL_UART_TxCpltCallback+0x48>)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001d58:	b086      	sub	sp, #24
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001d5a:	2240      	movs	r2, #64	; 0x40
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f002 fab2 	bl	80042c8 <memset>
	snprintf((char*)txbuffer_cpy, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", lin_num, cur_num, chstat_main);
 8001d64:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <HAL_UART_TxCpltCallback+0x4c>)
 8001d66:	490f      	ldr	r1, [pc, #60]	; (8001da4 <HAL_UART_TxCpltCallback+0x50>)
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_UART_TxCpltCallback+0x54>)
 8001d6a:	680e      	ldr	r6, [r1, #0]
 8001d6c:	6810      	ldr	r0, [r2, #0]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	9304      	str	r3, [sp, #16]
 8001d74:	f7fe fb70 	bl	8000458 <__aeabi_f2d>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d82:	f7fe fb69 	bl	8000458 <__aeabi_f2d>
 8001d86:	4606      	mov	r6, r0
 8001d88:	460f      	mov	r7, r1
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	2120      	movs	r1, #32
 8001d8e:	e9cd 6700 	strd	r6, r7, [sp]
 8001d92:	4a06      	ldr	r2, [pc, #24]	; (8001dac <HAL_UART_TxCpltCallback+0x58>)
 8001d94:	f002 ff00 	bl	8004b98 <sniprintf>
}
 8001d98:	b006      	add	sp, #24
 8001d9a:	bdd0      	pop	{r4, r6, r7, pc}
 8001d9c:	20000428 	.word	0x20000428
 8001da0:	20000220 	.word	0x20000220
 8001da4:	2000039c 	.word	0x2000039c
 8001da8:	2000021c 	.word	0x2000021c
 8001dac:	080070e4 	.word	0x080070e4

08001db0 <HAL_UART_RxHalfCpltCallback>:
}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	0000      	movs	r0, r0
	...

08001db8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dbc:	4e9e      	ldr	r6, [pc, #632]	; (8002038 <HAL_UART_RxCpltCallback+0x280>)
	for(int i = 0; i < 64; i++){
 8001dbe:	2400      	movs	r4, #0
 8001dc0:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	e003      	b.n	8001dce <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 8001dc6:	3401      	adds	r4, #1
 8001dc8:	2c40      	cmp	r4, #64	; 0x40
 8001dca:	f000 811f 	beq.w	800200c <HAL_UART_RxCpltCallback+0x254>
		if(rxbuffer[i] == '*'){
 8001dce:	f813 5b01 	ldrb.w	r5, [r3], #1
 8001dd2:	2d2a      	cmp	r5, #42	; 0x2a
 8001dd4:	d1f7      	bne.n	8001dc6 <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 8001dd6:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 8001dd8:	2220      	movs	r2, #32
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4668      	mov	r0, sp
 8001dde:	f002 fa73 	bl	80042c8 <memset>
	for(int i = 0; i < 25; i++){
 8001de2:	f10d 33ff 	add.w	r3, sp, #4294967295
 8001de6:	aa06      	add	r2, sp, #24
 8001de8:	e000      	b.n	8001dec <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 8001dea:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 8001dec:	3401      	adds	r4, #1
 8001dee:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 8001df0:	2c40      	cmp	r4, #64	; 0x40
		rxbuffercpy[i] = rxbuffer[rxiter];
 8001df2:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 8001df6:	bf28      	it	cs
 8001df8:	2400      	movcs	r4, #0
	for(int i = 0; i < 25; i++){
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d1f5      	bne.n	8001dea <HAL_UART_RxCpltCallback+0x32>
	if( //Check start condition
 8001dfe:	f89d 3000 	ldrb.w	r3, [sp]
 8001e02:	2b2a      	cmp	r3, #42	; 0x2a
 8001e04:	d00c      	beq.n	8001e20 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	2100      	movs	r1, #0
 8001e0a:	488b      	ldr	r0, [pc, #556]	; (8002038 <HAL_UART_RxCpltCallback+0x280>)
 8001e0c:	f002 fa5c 	bl	80042c8 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001e10:	2240      	movs	r2, #64	; 0x40
 8001e12:	4989      	ldr	r1, [pc, #548]	; (8002038 <HAL_UART_RxCpltCallback+0x280>)
 8001e14:	4889      	ldr	r0, [pc, #548]	; (800203c <HAL_UART_RxCpltCallback+0x284>)
}
 8001e16:	b009      	add	sp, #36	; 0x24
 8001e18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001e1c:	f001 bfb4 	b.w	8003d88 <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 8001e20:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001e24:	2b53      	cmp	r3, #83	; 0x53
 8001e26:	d1ee      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
 8001e28:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001e2c:	2b54      	cmp	r3, #84	; 0x54
 8001e2e:	d1ea      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
 8001e30:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001e34:	2b52      	cmp	r3, #82	; 0x52
 8001e36:	d1e6      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
 8001e38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001e3c:	2b54      	cmp	r3, #84	; 0x54
 8001e3e:	d1e2      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
 8001e40:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001e44:	2b46      	cmp	r3, #70	; 0x46
 8001e46:	d1de      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 8001e48:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001e4c:	2b4e      	cmp	r3, #78	; 0x4e
 8001e4e:	d1da      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
 8001e50:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8001e54:	2b53      	cmp	r3, #83	; 0x53
 8001e56:	d1d6      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
 8001e58:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001e5c:	2b48      	cmp	r3, #72	; 0x48
 8001e5e:	d1d2      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
 8001e60:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001e64:	2b21      	cmp	r3, #33	; 0x21
 8001e66:	d1ce      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
 8001e68:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001e6c:	2b2c      	cmp	r3, #44	; 0x2c
 8001e6e:	d1ca      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8001e70:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001e74:	2b2c      	cmp	r3, #44	; 0x2c
 8001e76:	d1c6      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
 8001e78:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001e7c:	2b2c      	cmp	r3, #44	; 0x2c
 8001e7e:	d1c2      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
 8001e80:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8001e84:	2b2c      	cmp	r3, #44	; 0x2c
 8001e86:	d1be      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8001e88:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8001e8c:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8001e8e:	b2c3      	uxtb	r3, r0
 8001e90:	2b09      	cmp	r3, #9
 8001e92:	d8b8      	bhi.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8001e94:	f89d b007 	ldrb.w	fp, [sp, #7]
 8001e98:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 8001e9c:	fa5f f38b 	uxtb.w	r3, fp
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	d8b0      	bhi.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
 8001ea4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8001eaa:	d1ac      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8001eac:	f89d a009 	ldrb.w	sl, [sp, #9]
 8001eb0:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8001eb4:	fa5f f38a 	uxtb.w	r3, sl
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d8a4      	bhi.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8001ebc:	f89d 900a 	ldrb.w	r9, [sp, #10]
 8001ec0:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8001ec4:	fa5f f389 	uxtb.w	r3, r9
 8001ec8:	2b09      	cmp	r3, #9
 8001eca:	d89c      	bhi.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8001ecc:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8001ed0:	3e30      	subs	r6, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8001ed2:	b2f3      	uxtb	r3, r6
 8001ed4:	2b09      	cmp	r3, #9
 8001ed6:	d896      	bhi.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8001ed8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001edc:	2b2e      	cmp	r3, #46	; 0x2e
 8001ede:	d192      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
 8001ee0:	f89d 800e 	ldrb.w	r8, [sp, #14]
 8001ee4:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8001ee8:	fa5f f388 	uxtb.w	r3, r8
 8001eec:	2b09      	cmp	r3, #9
 8001eee:	d88a      	bhi.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8001ef0:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8001ef4:	3f30      	subs	r7, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8001ef6:	b2fb      	uxtb	r3, r7
 8001ef8:	2b09      	cmp	r3, #9
 8001efa:	d884      	bhi.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8001efc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8001f00:	3d30      	subs	r5, #48	; 0x30
 8001f02:	b2eb      	uxtb	r3, r5
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	f63f af7e 	bhi.w	8001e06 <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 8001f0a:	f89d 4012 	ldrb.w	r4, [sp, #18]
 8001f0e:	3c30      	subs	r4, #48	; 0x30
 8001f10:	b2e4      	uxtb	r4, r4
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8001f12:	2c02      	cmp	r4, #2
 8001f14:	f63f af77 	bhi.w	8001e06 <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8001f18:	f7fe fe88 	bl	8000c2c <__aeabi_i2f>
 8001f1c:	4948      	ldr	r1, [pc, #288]	; (8002040 <HAL_UART_RxCpltCallback+0x288>)
 8001f1e:	f7fe fed9 	bl	8000cd4 <__aeabi_fmul>
 8001f22:	2100      	movs	r1, #0
 8001f24:	f7fe fdce 	bl	8000ac4 <__addsf3>
 8001f28:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8001f2a:	4658      	mov	r0, fp
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8001f2c:	469b      	mov	fp, r3
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8001f2e:	f7fe fe7d 	bl	8000c2c <__aeabi_i2f>
 8001f32:	4659      	mov	r1, fp
 8001f34:	f7fe fdc6 	bl	8000ac4 <__addsf3>
 8001f38:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8001f3a:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8001f3c:	469a      	mov	sl, r3
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8001f3e:	f7fe fe75 	bl	8000c2c <__aeabi_i2f>
 8001f42:	493f      	ldr	r1, [pc, #252]	; (8002040 <HAL_UART_RxCpltCallback+0x288>)
 8001f44:	f7fe ff7a 	bl	8000e3c <__aeabi_fdiv>
 8001f48:	4651      	mov	r1, sl
 8001f4a:	f7fe fdbb 	bl	8000ac4 <__addsf3>
 8001f4e:	4603      	mov	r3, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8001f50:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8001f52:	4699      	mov	r9, r3
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8001f54:	f7fe fe6a 	bl	8000c2c <__aeabi_i2f>
 8001f58:	493a      	ldr	r1, [pc, #232]	; (8002044 <HAL_UART_RxCpltCallback+0x28c>)
 8001f5a:	f7fe ff6f 	bl	8000e3c <__aeabi_fdiv>
 8001f5e:	4649      	mov	r1, r9
 8001f60:	f7fe fdb0 	bl	8000ac4 <__addsf3>
 8001f64:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8001f66:	4630      	mov	r0, r6
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8001f68:	461e      	mov	r6, r3
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8001f6a:	f7fe fe5f 	bl	8000c2c <__aeabi_i2f>
 8001f6e:	2100      	movs	r1, #0
 8001f70:	f7fe fda8 	bl	8000ac4 <__addsf3>
 8001f74:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8001f76:	4640      	mov	r0, r8
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8001f78:	4698      	mov	r8, r3
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8001f7a:	f7fe fe57 	bl	8000c2c <__aeabi_i2f>
 8001f7e:	4930      	ldr	r1, [pc, #192]	; (8002040 <HAL_UART_RxCpltCallback+0x288>)
 8001f80:	f7fe ff5c 	bl	8000e3c <__aeabi_fdiv>
 8001f84:	4641      	mov	r1, r8
 8001f86:	f7fe fd9d 	bl	8000ac4 <__addsf3>
 8001f8a:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8001f8c:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8001f8e:	461f      	mov	r7, r3
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8001f90:	f7fe fe4c 	bl	8000c2c <__aeabi_i2f>
 8001f94:	492b      	ldr	r1, [pc, #172]	; (8002044 <HAL_UART_RxCpltCallback+0x28c>)
 8001f96:	f7fe ff51 	bl	8000e3c <__aeabi_fdiv>
 8001f9a:	4639      	mov	r1, r7
 8001f9c:	f7fe fd92 	bl	8000ac4 <__addsf3>
 8001fa0:	4603      	mov	r3, r0
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8001fa2:	4628      	mov	r0, r5
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8001fa4:	461d      	mov	r5, r3
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8001fa6:	f7fe fe41 	bl	8000c2c <__aeabi_i2f>
 8001faa:	4927      	ldr	r1, [pc, #156]	; (8002048 <HAL_UART_RxCpltCallback+0x290>)
 8001fac:	f7fe ff46 	bl	8000e3c <__aeabi_fdiv>
 8001fb0:	4629      	mov	r1, r5
 8001fb2:	f7fe fd87 	bl	8000ac4 <__addsf3>
		if(tempv2 >= 0.00 && tempv2 <= 12.00){
 8001fb6:	2100      	movs	r1, #0
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8001fb8:	4605      	mov	r5, r0
		if(tempv2 >= 0.00 && tempv2 <= 12.00){
 8001fba:	4630      	mov	r0, r6
 8001fbc:	f7ff f83c 	bl	8001038 <__aeabi_fcmpge>
 8001fc0:	b148      	cbz	r0, 8001fd6 <HAL_UART_RxCpltCallback+0x21e>
 8001fc2:	4630      	mov	r0, r6
 8001fc4:	4921      	ldr	r1, [pc, #132]	; (800204c <HAL_UART_RxCpltCallback+0x294>)
 8001fc6:	f7ff f82d 	bl	8001024 <__aeabi_fcmple>
 8001fca:	b120      	cbz	r0, 8001fd6 <HAL_UART_RxCpltCallback+0x21e>
			volt_set_main_old = volt_set_main;
 8001fcc:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_UART_RxCpltCallback+0x298>)
 8001fce:	4a21      	ldr	r2, [pc, #132]	; (8002054 <HAL_UART_RxCpltCallback+0x29c>)
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	6011      	str	r1, [r2, #0]
			volt_set_main = tempv2;
 8001fd4:	601e      	str	r6, [r3, #0]
		if(tempa2 >= 0.00 && tempa2 <= 0.8001){
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f7ff f82d 	bl	8001038 <__aeabi_fcmpge>
 8001fde:	b168      	cbz	r0, 8001ffc <HAL_UART_RxCpltCallback+0x244>
 8001fe0:	4628      	mov	r0, r5
 8001fe2:	f7fe fa39 	bl	8000458 <__aeabi_f2d>
 8001fe6:	a312      	add	r3, pc, #72	; (adr r3, 8002030 <HAL_UART_RxCpltCallback+0x278>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fd08 	bl	8000a00 <__aeabi_dcmple>
 8001ff0:	b120      	cbz	r0, 8001ffc <HAL_UART_RxCpltCallback+0x244>
			amp_set_main_old = amp_set_main;
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_UART_RxCpltCallback+0x2a0>)
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <HAL_UART_RxCpltCallback+0x2a4>)
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	6011      	str	r1, [r2, #0]
			amp_set_main = tempa2;
 8001ffa:	601d      	str	r5, [r3, #0]
		if(chstat_main == 0){
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_UART_RxCpltCallback+0x2a8>)
 8001ffe:	781a      	ldrb	r2, [r3, #0]
 8002000:	b93a      	cbnz	r2, 8002012 <HAL_UART_RxCpltCallback+0x25a>
			if(chstat_temp == 1){
 8002002:	2c01      	cmp	r4, #1
 8002004:	f47f aeff 	bne.w	8001e06 <HAL_UART_RxCpltCallback+0x4e>
				chstat_main = 0;
 8002008:	701c      	strb	r4, [r3, #0]
 800200a:	e6fc      	b.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 800200c:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 800200e:	7835      	ldrb	r5, [r6, #0]
 8002010:	e6e2      	b.n	8001dd8 <HAL_UART_RxCpltCallback+0x20>
		else if(chstat_main == 1){
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	2a01      	cmp	r2, #1
 8002016:	d003      	beq.n	8002020 <HAL_UART_RxCpltCallback+0x268>
		else if(chstat_main == 2){
 8002018:	781a      	ldrb	r2, [r3, #0]
 800201a:	2a02      	cmp	r2, #2
 800201c:	f47f aef3 	bne.w	8001e06 <HAL_UART_RxCpltCallback+0x4e>
			if(chstat_temp == 0){
 8002020:	2c00      	cmp	r4, #0
 8002022:	f47f aef0 	bne.w	8001e06 <HAL_UART_RxCpltCallback+0x4e>
				chstat_main = 0;
 8002026:	701c      	strb	r4, [r3, #0]
 8002028:	e6ed      	b.n	8001e06 <HAL_UART_RxCpltCallback+0x4e>
 800202a:	bf00      	nop
 800202c:	f3af 8000 	nop.w
 8002030:	50b0f27c 	.word	0x50b0f27c
 8002034:	3fe99a6b 	.word	0x3fe99a6b
 8002038:	200003a4 	.word	0x200003a4
 800203c:	20000358 	.word	0x20000358
 8002040:	41200000 	.word	0x41200000
 8002044:	42c80000 	.word	0x42c80000
 8002048:	447a0000 	.word	0x447a0000
 800204c:	41400000 	.word	0x41400000
 8002050:	2000046c 	.word	0x2000046c
 8002054:	20000470 	.word	0x20000470
 8002058:	20000214 	.word	0x20000214
 800205c:	20000218 	.word	0x20000218
 8002060:	2000021c 	.word	0x2000021c

08002064 <HAL_UART_ErrorCallback>:
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64); //Try again!
 8002064:	2240      	movs	r2, #64	; 0x40
 8002066:	4902      	ldr	r1, [pc, #8]	; (8002070 <HAL_UART_ErrorCallback+0xc>)
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <HAL_UART_ErrorCallback+0x10>)
 800206a:	f001 be8d 	b.w	8003d88 <HAL_UART_Receive_DMA>
 800206e:	bf00      	nop
 8002070:	200003a4 	.word	0x200003a4
 8002074:	20000358 	.word	0x20000358

08002078 <Error_Handler>:
 8002078:	b672      	cpsid	i
  while (1)
 800207a:	e7fe      	b.n	800207a <Error_Handler+0x2>

0800207c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <HAL_MspInit+0x40>)
{
 800207e:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8002080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002082:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002086:	625a      	str	r2, [r3, #36]	; 0x24
 8002088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800208e:	9201      	str	r2, [sp, #4]
 8002090:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	6a1a      	ldr	r2, [r3, #32]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	621a      	str	r2, [r3, #32]
 800209a:	6a1a      	ldr	r2, [r3, #32]
 800209c:	f002 0201 	and.w	r2, r2, #1
 80020a0:	9202      	str	r2, [sp, #8]
 80020a2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	9303      	str	r3, [sp, #12]
 80020b4:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b6:	b004      	add	sp, #16
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020c0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c2:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80020c4:	4b25      	ldr	r3, [pc, #148]	; (800215c <HAL_ADC_MspInit+0x9c>)
 80020c6:	6802      	ldr	r2, [r0, #0]
{
 80020c8:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 80020ca:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80020d0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80020d4:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 80020d6:	d001      	beq.n	80020dc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020d8:	b008      	add	sp, #32
 80020da:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020dc:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 80020e0:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e8:	621a      	str	r2, [r3, #32]
 80020ea:	6a1a      	ldr	r2, [r3, #32]
 80020ec:	4605      	mov	r5, r0
 80020ee:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80020f2:	9200      	str	r2, [sp, #0]
 80020f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	69da      	ldr	r2, [r3, #28]
    hdma_adc.Instance = DMA1_Channel1;
 80020f8:	4e19      	ldr	r6, [pc, #100]	; (8002160 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	61da      	str	r2, [r3, #28]
 8002100:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002102:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800210a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210c:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	4815      	ldr	r0, [pc, #84]	; (8002164 <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002110:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f001 f836 	bl	8003184 <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002118:	2380      	movs	r3, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 800211a:	4913      	ldr	r1, [pc, #76]	; (8002168 <HAL_ADC_MspInit+0xa8>)
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800211c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002120:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002124:	60f3      	str	r3, [r6, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002126:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800212a:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800212c:	4630      	mov	r0, r6
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800212e:	60b4      	str	r4, [r6, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002130:	61f4      	str	r4, [r6, #28]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002132:	6171      	str	r1, [r6, #20]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002134:	6132      	str	r2, [r6, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002136:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002138:	f000 fed6 	bl	8002ee8 <HAL_DMA_Init>
 800213c:	b958      	cbnz	r0, 8002156 <HAL_ADC_MspInit+0x96>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2012      	movs	r0, #18
 8002142:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002144:	646e      	str	r6, [r5, #68]	; 0x44
 8002146:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002148:	f000 fdd0 	bl	8002cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800214c:	2012      	movs	r0, #18
 800214e:	f000 fe0b 	bl	8002d68 <HAL_NVIC_EnableIRQ>
}
 8002152:	b008      	add	sp, #32
 8002154:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002156:	f7ff ff8f 	bl	8002078 <Error_Handler>
 800215a:	e7f0      	b.n	800213e <HAL_ADC_MspInit+0x7e>
 800215c:	40012400 	.word	0x40012400
 8002160:	2000028c 	.word	0x2000028c
 8002164:	40020000 	.word	0x40020000
 8002168:	40026008 	.word	0x40026008

0800216c <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_ADC_MspDeInit+0x30>)
 800216e:	6802      	ldr	r2, [r0, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d000      	beq.n	8002176 <HAL_ADC_MspDeInit+0xa>
 8002174:	4770      	bx	lr
{
 8002176:	b510      	push	{r4, lr}
 8002178:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_ADC_MspDeInit+0x34>)
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 800217c:	210f      	movs	r1, #15
    __HAL_RCC_ADC1_CLK_DISABLE();
 800217e:	6a13      	ldr	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8002180:	4808      	ldr	r0, [pc, #32]	; (80021a4 <HAL_ADC_MspDeInit+0x38>)
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002182:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002186:	6213      	str	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8002188:	f001 f8de 	bl	8003348 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 800218c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800218e:	f000 fee3 	bl	8002f58 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8002192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8002196:	2012      	movs	r0, #18
 8002198:	f000 bdf4 	b.w	8002d84 <HAL_NVIC_DisableIRQ>
 800219c:	40012400 	.word	0x40012400
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40020000 	.word	0x40020000

080021a8 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	2300      	movs	r3, #0
{
 80021aa:	b530      	push	{r4, r5, lr}
  if(hdac->Instance==DAC)
 80021ac:	4a14      	ldr	r2, [pc, #80]	; (8002200 <HAL_DAC_MspInit+0x58>)
 80021ae:	6801      	ldr	r1, [r0, #0]
{
 80021b0:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 80021b2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80021b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80021bc:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 80021be:	d001      	beq.n	80021c4 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80021c0:	b009      	add	sp, #36	; 0x24
 80021c2:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021c4:	2430      	movs	r4, #48	; 0x30
 80021c6:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_DAC_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	480f      	ldr	r0, [pc, #60]	; (8002208 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 80021cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC_CLK_ENABLE();
 80021d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
 80021d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d8:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80021dc:	9200      	str	r2, [sp, #0]
 80021de:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	f042 0201 	orr.w	r2, r2, #1
 80021e6:	61da      	str	r2, [r3, #28]
 80021e8:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021ea:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f000 ffc5 	bl	8003184 <HAL_GPIO_Init>
}
 80021fa:	b009      	add	sp, #36	; 0x24
 80021fc:	bd30      	pop	{r4, r5, pc}
 80021fe:	bf00      	nop
 8002200:	40007400 	.word	0x40007400
 8002204:	40023800 	.word	0x40023800
 8002208:	40020000 	.word	0x40020000

0800220c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800220c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220e:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8002210:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_UART_MspInit+0xcc>)
 8002212:	6802      	ldr	r2, [r0, #0]
{
 8002214:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8002216:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800221c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002220:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8002222:	d001      	beq.n	8002228 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002224:	b008      	add	sp, #32
 8002226:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002228:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800222c:	6a1a      	ldr	r2, [r3, #32]
 800222e:	4605      	mov	r5, r0
 8002230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002234:	621a      	str	r2, [r3, #32]
 8002236:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002238:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800223a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800223e:	9200      	str	r2, [sp, #0]
 8002240:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	69da      	ldr	r2, [r3, #28]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002244:	4e25      	ldr	r6, [pc, #148]	; (80022dc <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	61da      	str	r2, [r3, #28]
 800224c:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800224e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002258:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225c:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800225e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002262:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	481e      	ldr	r0, [pc, #120]	; (80022e0 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002268:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226a:	f000 ff8b 	bl	8003184 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800226e:	491d      	ldr	r1, [pc, #116]	; (80022e4 <HAL_UART_MspInit+0xd8>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002270:	2210      	movs	r2, #16
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002272:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002274:	6031      	str	r1, [r6, #0]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8002276:	2120      	movs	r1, #32
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002278:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800227a:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800227e:	60b4      	str	r4, [r6, #8]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002280:	61f4      	str	r4, [r6, #28]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8002282:	61b1      	str	r1, [r6, #24]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002284:	6072      	str	r2, [r6, #4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002286:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002288:	f000 fe2e 	bl	8002ee8 <HAL_DMA_Init>
 800228c:	b9e8      	cbnz	r0, 80022ca <HAL_UART_MspInit+0xbe>
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800228e:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002290:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002292:	4c15      	ldr	r4, [pc, #84]	; (80022e8 <HAL_UART_MspInit+0xdc>)
 8002294:	4915      	ldr	r1, [pc, #84]	; (80022ec <HAL_UART_MspInit+0xe0>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002296:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002298:	636e      	str	r6, [r5, #52]	; 0x34
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800229a:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800229e:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80022a2:	e9c4 3305 	strd	r3, r3, [r4, #20]
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80022a6:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80022a8:	6021      	str	r1, [r4, #0]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022aa:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022ac:	f000 fe1c 	bl	8002ee8 <HAL_DMA_Init>
 80022b0:	b970      	cbnz	r0, 80022d0 <HAL_UART_MspInit+0xc4>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2025      	movs	r0, #37	; 0x25
 80022b6:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022b8:	63ac      	str	r4, [r5, #56]	; 0x38
 80022ba:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022bc:	f000 fd16 	bl	8002cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022c0:	2025      	movs	r0, #37	; 0x25
 80022c2:	f000 fd51 	bl	8002d68 <HAL_NVIC_EnableIRQ>
}
 80022c6:	b008      	add	sp, #32
 80022c8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80022ca:	f7ff fed5 	bl	8002078 <Error_Handler>
 80022ce:	e7de      	b.n	800228e <HAL_UART_MspInit+0x82>
      Error_Handler();
 80022d0:	f7ff fed2 	bl	8002078 <Error_Handler>
 80022d4:	e7ed      	b.n	80022b2 <HAL_UART_MspInit+0xa6>
 80022d6:	bf00      	nop
 80022d8:	40013800 	.word	0x40013800
 80022dc:	20000314 	.word	0x20000314
 80022e0:	40020000 	.word	0x40020000
 80022e4:	40026044 	.word	0x40026044
 80022e8:	200002d0 	.word	0x200002d0
 80022ec:	40026058 	.word	0x40026058

080022f0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <NMI_Handler>
 80022f2:	bf00      	nop

080022f4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <HardFault_Handler>
 80022f6:	bf00      	nop

080022f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <MemManage_Handler>
 80022fa:	bf00      	nop

080022fc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <BusFault_Handler>
 80022fe:	bf00      	nop

08002300 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <UsageFault_Handler>
 8002302:	bf00      	nop

08002304 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop

08002308 <DebugMon_Handler>:
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop

0800230c <PendSV_Handler>:
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop

08002310 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002310:	f000 b8dc 	b.w	80024cc <HAL_IncTick>

08002314 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002314:	4801      	ldr	r0, [pc, #4]	; (800231c <DMA1_Channel1_IRQHandler+0x8>)
 8002316:	f000 bee7 	b.w	80030e8 <HAL_DMA_IRQHandler>
 800231a:	bf00      	nop
 800231c:	2000028c 	.word	0x2000028c

08002320 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002320:	4801      	ldr	r0, [pc, #4]	; (8002328 <DMA1_Channel4_IRQHandler+0x8>)
 8002322:	f000 bee1 	b.w	80030e8 <HAL_DMA_IRQHandler>
 8002326:	bf00      	nop
 8002328:	20000314 	.word	0x20000314

0800232c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800232c:	4801      	ldr	r0, [pc, #4]	; (8002334 <DMA1_Channel5_IRQHandler+0x8>)
 800232e:	f000 bedb 	b.w	80030e8 <HAL_DMA_IRQHandler>
 8002332:	bf00      	nop
 8002334:	200002d0 	.word	0x200002d0

08002338 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002338:	4801      	ldr	r0, [pc, #4]	; (8002340 <ADC1_IRQHandler+0x8>)
 800233a:	f000 ba8f 	b.w	800285c <HAL_ADC_IRQHandler>
 800233e:	bf00      	nop
 8002340:	20000224 	.word	0x20000224

08002344 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002344:	4801      	ldr	r0, [pc, #4]	; (800234c <USART1_IRQHandler+0x8>)
 8002346:	f001 be67 	b.w	8004018 <HAL_UART_IRQHandler>
 800234a:	bf00      	nop
 800234c:	20000358 	.word	0x20000358

08002350 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002350:	2001      	movs	r0, #1
 8002352:	4770      	bx	lr

08002354 <_kill>:

int _kill(int pid, int sig)
{
 8002354:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002356:	f001 ff8d 	bl	8004274 <__errno>
 800235a:	2216      	movs	r2, #22
 800235c:	4603      	mov	r3, r0
	return -1;
}
 800235e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8002362:	601a      	str	r2, [r3, #0]
}
 8002364:	bd08      	pop	{r3, pc}
 8002366:	bf00      	nop

08002368 <_exit>:

void _exit (int status)
{
 8002368:	b508      	push	{r3, lr}
	errno = EINVAL;
 800236a:	f001 ff83 	bl	8004274 <__errno>
 800236e:	2316      	movs	r3, #22
 8002370:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002372:	e7fe      	b.n	8002372 <_exit+0xa>

08002374 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002374:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	1e16      	subs	r6, r2, #0
 8002378:	dd07      	ble.n	800238a <_read+0x16>
 800237a:	460c      	mov	r4, r1
 800237c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800237e:	f3af 8000 	nop.w
 8002382:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002386:	42a5      	cmp	r5, r4
 8002388:	d1f9      	bne.n	800237e <_read+0xa>
	}

return len;
}
 800238a:	4630      	mov	r0, r6
 800238c:	bd70      	pop	{r4, r5, r6, pc}
 800238e:	bf00      	nop

08002390 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002390:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	1e16      	subs	r6, r2, #0
 8002394:	dd07      	ble.n	80023a6 <_write+0x16>
 8002396:	460c      	mov	r4, r1
 8002398:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800239a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800239e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a2:	42ac      	cmp	r4, r5
 80023a4:	d1f9      	bne.n	800239a <_write+0xa>
	}
	return len;
}
 80023a6:	4630      	mov	r0, r6
 80023a8:	bd70      	pop	{r4, r5, r6, pc}
 80023aa:	bf00      	nop

080023ac <_close>:

int _close(int file)
{
	return -1;
}
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop

080023b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80023b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80023b8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80023ba:	604b      	str	r3, [r1, #4]
}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop

080023c0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80023c0:	2001      	movs	r0, #1
 80023c2:	4770      	bx	lr

080023c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80023c4:	2000      	movs	r0, #0
 80023c6:	4770      	bx	lr

080023c8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c8:	490d      	ldr	r1, [pc, #52]	; (8002400 <_sbrk+0x38>)
{
 80023ca:	4603      	mov	r3, r0
 80023cc:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ce:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <_sbrk+0x3c>)
 80023d0:	4c0d      	ldr	r4, [pc, #52]	; (8002408 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80023d2:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80023d6:	b120      	cbz	r0, 80023e2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d8:	4403      	add	r3, r0
 80023da:	4293      	cmp	r3, r2
 80023dc:	d807      	bhi.n	80023ee <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80023de:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80023e0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80023e2:	4c0a      	ldr	r4, [pc, #40]	; (800240c <_sbrk+0x44>)
 80023e4:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80023e6:	4403      	add	r3, r0
 80023e8:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80023ea:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80023ec:	d9f7      	bls.n	80023de <_sbrk+0x16>
    errno = ENOMEM;
 80023ee:	f001 ff41 	bl	8004274 <__errno>
 80023f2:	220c      	movs	r2, #12
 80023f4:	4603      	mov	r3, r0
    return (void *)-1;
 80023f6:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80023fa:	601a      	str	r2, [r3, #0]
}
 80023fc:	bd10      	pop	{r4, pc}
 80023fe:	bf00      	nop
 8002400:	20000474 	.word	0x20000474
 8002404:	20001000 	.word	0x20001000
 8002408:	00000400 	.word	0x00000400
 800240c:	20000490 	.word	0x20000490

08002410 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop

08002414 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002414:	480c      	ldr	r0, [pc, #48]	; (8002448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002416:	490d      	ldr	r1, [pc, #52]	; (800244c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800241c:	e002      	b.n	8002424 <LoopCopyDataInit>

0800241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002422:	3304      	adds	r3, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002428:	d3f9      	bcc.n	800241e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800242c:	4c0a      	ldr	r4, [pc, #40]	; (8002458 <LoopFillZerobss+0x22>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002430:	e001      	b.n	8002436 <LoopFillZerobss>

08002432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002434:	3204      	adds	r2, #4

08002436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002438:	d3fb      	bcc.n	8002432 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800243a:	f7ff ffe9 	bl	8002410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800243e:	f001 ff1f 	bl	8004280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002442:	f7ff f919 	bl	8001678 <main>
  bx lr
 8002446:	4770      	bx	lr
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002450:	0800750c 	.word	0x0800750c
  ldr r2, =_sbss
 8002454:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002458:	2000048c 	.word	0x2000048c

0800245c <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800245c:	e7fe      	b.n	800245c <COMP_IRQHandler>
	...

08002460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002460:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_InitTick+0x40>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	b90b      	cbnz	r3, 800246c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002468:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800246a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800246c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	490b      	ldr	r1, [pc, #44]	; (80024a4 <HAL_InitTick+0x44>)
 8002476:	4605      	mov	r5, r0
 8002478:	6808      	ldr	r0, [r1, #0]
 800247a:	fbb0 f0f3 	udiv	r0, r0, r3
 800247e:	f000 fc95 	bl	8002dac <HAL_SYSTICK_Config>
 8002482:	4604      	mov	r4, r0
 8002484:	2800      	cmp	r0, #0
 8002486:	d1ef      	bne.n	8002468 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002488:	2d0f      	cmp	r5, #15
 800248a:	d8ed      	bhi.n	8002468 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800248c:	4602      	mov	r2, r0
 800248e:	4629      	mov	r1, r5
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f000 fc2a 	bl	8002cec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_InitTick+0x48>)
 800249a:	4620      	mov	r0, r4
 800249c:	601d      	str	r5, [r3, #0]
}
 800249e:	bd38      	pop	{r3, r4, r5, pc}
 80024a0:	20000008 	.word	0x20000008
 80024a4:	20000004 	.word	0x20000004
 80024a8:	2000000c 	.word	0x2000000c

080024ac <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ac:	2003      	movs	r0, #3
{
 80024ae:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b0:	f000 fc0a 	bl	8002cc8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024b4:	200f      	movs	r0, #15
 80024b6:	f7ff ffd3 	bl	8002460 <HAL_InitTick>
 80024ba:	b110      	cbz	r0, 80024c2 <HAL_Init+0x16>
    status = HAL_ERROR;
 80024bc:	2401      	movs	r4, #1
}
 80024be:	4620      	mov	r0, r4
 80024c0:	bd10      	pop	{r4, pc}
 80024c2:	4604      	mov	r4, r0
    HAL_MspInit();
 80024c4:	f7ff fdda 	bl	800207c <HAL_MspInit>
}
 80024c8:	4620      	mov	r0, r4
 80024ca:	bd10      	pop	{r4, pc}

080024cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80024cc:	4a03      	ldr	r2, [pc, #12]	; (80024dc <HAL_IncTick+0x10>)
 80024ce:	4904      	ldr	r1, [pc, #16]	; (80024e0 <HAL_IncTick+0x14>)
 80024d0:	6813      	ldr	r3, [r2, #0]
 80024d2:	6809      	ldr	r1, [r1, #0]
 80024d4:	440b      	add	r3, r1
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000478 	.word	0x20000478
 80024e0:	20000008 	.word	0x20000008

080024e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80024e4:	4b01      	ldr	r3, [pc, #4]	; (80024ec <HAL_GetTick+0x8>)
 80024e6:	6818      	ldr	r0, [r3, #0]
}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000478 	.word	0x20000478

080024f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff fff6 	bl	80024e4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80024fa:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80024fc:	d002      	beq.n	8002504 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <HAL_Delay+0x20>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002504:	f7ff ffee 	bl	80024e4 <HAL_GetTick>
 8002508:	1b40      	subs	r0, r0, r5
 800250a:	42a0      	cmp	r0, r4
 800250c:	d3fa      	bcc.n	8002504 <HAL_Delay+0x14>
  {
  }
}
 800250e:	bd38      	pop	{r3, r4, r5, pc}
 8002510:	20000008 	.word	0x20000008

08002514 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002514:	2800      	cmp	r0, #0
 8002516:	f000 80a9 	beq.w	800266c <HAL_ADC_Init+0x158>
{
 800251a:	b530      	push	{r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800251c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800251e:	4604      	mov	r4, r0
{
 8002520:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002522:	2b00      	cmp	r3, #0
 8002524:	d078      	beq.n	8002618 <HAL_ADC_Init+0x104>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002526:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002528:	06d8      	lsls	r0, r3, #27
 800252a:	d453      	bmi.n	80025d4 <HAL_ADC_Init+0xc0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800252c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800252e:	4a5c      	ldr	r2, [pc, #368]	; (80026a0 <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 8002530:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002534:	f023 0302 	bic.w	r3, r3, #2
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800253e:	6853      	ldr	r3, [r2, #4]
 8002540:	6861      	ldr	r1, [r4, #4]
 8002542:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002546:	430b      	orrs	r3, r1
 8002548:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800254e:	fa91 f1a1 	rbit	r1, r1
 8002552:	2302      	movs	r3, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002554:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002558:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002564:	6965      	ldr	r5, [r4, #20]
 8002566:	68e2      	ldr	r2, [r4, #12]
 8002568:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 800256c:	432a      	orrs	r2, r5
 800256e:	6a25      	ldr	r5, [r4, #32]
 8002570:	fa0c f101 	lsl.w	r1, ip, r1
 8002574:	432a      	orrs	r2, r5
 8002576:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002578:	6b61      	ldr	r1, [r4, #52]	; 0x34
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800257a:	fa00 f303 	lsl.w	r3, r0, r3
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800257e:	2910      	cmp	r1, #16
                hadc->Init.ChannelsBank                                        |
 8002580:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002584:	d002      	beq.n	800258c <HAL_ADC_Init+0x78>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002586:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002588:	4311      	orrs	r1, r2
 800258a:	430b      	orrs	r3, r1
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800258c:	6822      	ldr	r2, [r4, #0]
 800258e:	6811      	ldr	r1, [r2, #0]
 8002590:	0649      	lsls	r1, r1, #25
 8002592:	d551      	bpl.n	8002638 <HAL_ADC_Init+0x124>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002594:	6925      	ldr	r5, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002596:	6890      	ldr	r0, [r2, #8]
 8002598:	4942      	ldr	r1, [pc, #264]	; (80026a4 <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800259a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 800259e:	ea01 0100 	and.w	r1, r1, r0
 80025a2:	ea41 0103 	orr.w	r1, r1, r3
 80025a6:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025a8:	d017      	beq.n	80025da <HAL_ADC_Init+0xc6>
 80025aa:	2d01      	cmp	r5, #1
 80025ac:	d015      	beq.n	80025da <HAL_ADC_Init+0xc6>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80025ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80025b0:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 80025b4:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80025b6:	6891      	ldr	r1, [r2, #8]
 80025b8:	4a3b      	ldr	r2, [pc, #236]	; (80026a8 <HAL_ADC_Init+0x194>)
 80025ba:	400a      	ands	r2, r1
 80025bc:	429a      	cmp	r2, r3
 80025be:	d11f      	bne.n	8002600 <HAL_ADC_Init+0xec>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025c0:	2000      	movs	r0, #0
 80025c2:	6520      	str	r0, [r4, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80025d0:	b003      	add	sp, #12
 80025d2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80025d4:	2001      	movs	r0, #1
}
 80025d6:	b003      	add	sp, #12
 80025d8:	bd30      	pop	{r4, r5, pc}
 80025da:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80025de:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80025e0:	fa91 f1a1 	rbit	r1, r1
 80025e4:	fab1 f081 	clz	r0, r1
 80025e8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80025ea:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 80025ee:	3901      	subs	r1, #1
 80025f0:	4081      	lsls	r1, r0
 80025f2:	4329      	orrs	r1, r5
 80025f4:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80025f6:	6891      	ldr	r1, [r2, #8]
 80025f8:	4a2b      	ldr	r2, [pc, #172]	; (80026a8 <HAL_ADC_Init+0x194>)
 80025fa:	400a      	ands	r2, r1
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d0df      	beq.n	80025c0 <HAL_ADC_Init+0xac>
      tmp_hal_status = HAL_ERROR;
 8002600:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002602:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002604:	f023 0312 	bic.w	r3, r3, #18
 8002608:	f043 0310 	orr.w	r3, r3, #16
 800260c:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002610:	4303      	orrs	r3, r0
 8002612:	6523      	str	r3, [r4, #80]	; 0x50
}
 8002614:	b003      	add	sp, #12
 8002616:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002618:	4a24      	ldr	r2, [pc, #144]	; (80026ac <HAL_ADC_Init+0x198>)
    ADC_CLEAR_ERRORCODE(hadc);
 800261a:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 800261c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002620:	6a13      	ldr	r3, [r2, #32]
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6213      	str	r3, [r2, #32]
 8002628:	6a13      	ldr	r3, [r2, #32]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8002632:	f7ff fd45 	bl	80020c0 <HAL_ADC_MspInit>
 8002636:	e776      	b.n	8002526 <HAL_ADC_Init+0x12>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002638:	69a1      	ldr	r1, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800263a:	68a5      	ldr	r5, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800263c:	430b      	orrs	r3, r1
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800263e:	69e1      	ldr	r1, [r4, #28]
 8002640:	ea45 0c01 	orr.w	ip, r5, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002644:	6925      	ldr	r5, [r4, #16]
 8002646:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800264a:	d00c      	beq.n	8002666 <HAL_ADC_Init+0x152>
 800264c:	2d01      	cmp	r5, #1
 800264e:	d00a      	beq.n	8002666 <HAL_ADC_Init+0x152>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002650:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8002654:	2901      	cmp	r1, #1
 8002656:	d00b      	beq.n	8002670 <HAL_ADC_Init+0x15c>
        MODIFY_REG(hadc->Instance->CR1,
 8002658:	6850      	ldr	r0, [r2, #4]
 800265a:	4915      	ldr	r1, [pc, #84]	; (80026b0 <HAL_ADC_Init+0x19c>)
 800265c:	4001      	ands	r1, r0
 800265e:	ea41 010c 	orr.w	r1, r1, ip
 8002662:	6051      	str	r1, [r2, #4]
 8002664:	e797      	b.n	8002596 <HAL_ADC_Init+0x82>
                  hadc->Init.LowPowerAutoPowerOff           |
 8002666:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 800266a:	e7f1      	b.n	8002650 <HAL_ADC_Init+0x13c>
    return HAL_ERROR;
 800266c:	2001      	movs	r0, #1
}
 800266e:	4770      	bx	lr
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002670:	b968      	cbnz	r0, 800268e <HAL_ADC_Init+0x17a>
 8002672:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002676:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800267a:	fab1 f081 	clz	r0, r1
 800267e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002680:	3901      	subs	r1, #1
 8002682:	4081      	lsls	r1, r0
 8002684:	ea41 010c 	orr.w	r1, r1, ip
 8002688:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 800268c:	e7e4      	b.n	8002658 <HAL_ADC_Init+0x144>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800268e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002690:	f041 0120 	orr.w	r1, r1, #32
 8002694:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002696:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002698:	f041 0101 	orr.w	r1, r1, #1
 800269c:	6521      	str	r1, [r4, #80]	; 0x50
 800269e:	e7db      	b.n	8002658 <HAL_ADC_Init+0x144>
 80026a0:	40012700 	.word	0x40012700
 80026a4:	c0fff18d 	.word	0xc0fff18d
 80026a8:	bf80fffe 	.word	0xbf80fffe
 80026ac:	40023800 	.word	0x40023800
 80026b0:	fcfc16ff 	.word	0xfcfc16ff

080026b4 <HAL_ADC_DeInit>:
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026b4:	2800      	cmp	r0, #0
 80026b6:	d075      	beq.n	80027a4 <HAL_ADC_DeInit+0xf0>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80026b8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 80026ba:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80026bc:	f042 0202 	orr.w	r2, r2, #2
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026c0:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80026c2:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4604      	mov	r4, r0
 80026c8:	0655      	lsls	r5, r2, #25
 80026ca:	d453      	bmi.n	8002774 <HAL_ADC_DeInit+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 80026cc:	f06f 001f 	mvn.w	r0, #31
 80026d0:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80026d2:	6858      	ldr	r0, [r3, #4]
 80026d4:	4939      	ldr	r1, [pc, #228]	; (80027bc <HAL_ADC_DeInit+0x108>)
    ADC_CR2_CLEAR(hadc);
 80026d6:	4a3a      	ldr	r2, [pc, #232]	; (80027c0 <HAL_ADC_DeInit+0x10c>)
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80026d8:	4001      	ands	r1, r0
 80026da:	6059      	str	r1, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 80026dc:	6899      	ldr	r1, [r3, #8]
 80026de:	400a      	ands	r2, r1
 80026e0:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 80026e2:	bf00      	nop
    ADC_SMPR1_CLEAR(hadc);
 80026e4:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80026e6:	4a37      	ldr	r2, [pc, #220]	; (80027c4 <HAL_ADC_DeInit+0x110>)
    ADC_SMPR1_CLEAR(hadc);
 80026e8:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 80026ea:	4837      	ldr	r0, [pc, #220]	; (80027c8 <HAL_ADC_DeInit+0x114>)
    ADC_SMPR1_CLEAR(hadc);
 80026ec:	0d49      	lsrs	r1, r1, #21
 80026ee:	0549      	lsls	r1, r1, #21
 80026f0:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 80026f2:	6919      	ldr	r1, [r3, #16]
 80026f4:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80026f8:	6119      	str	r1, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 80026fa:	6959      	ldr	r1, [r3, #20]
 80026fc:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8002700:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8002702:	6999      	ldr	r1, [r3, #24]
 8002704:	4011      	ands	r1, r2
 8002706:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8002708:	69d9      	ldr	r1, [r3, #28]
 800270a:	4011      	ands	r1, r2
 800270c:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 800270e:	6a19      	ldr	r1, [r3, #32]
 8002710:	4011      	ands	r1, r2
 8002712:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8002714:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002716:	4011      	ands	r1, r2
 8002718:	6259      	str	r1, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 800271a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800271c:	4011      	ands	r1, r2
 800271e:	6299      	str	r1, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8002720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002722:	400a      	ands	r2, r1
 8002724:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8002726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8002728:	4928      	ldr	r1, [pc, #160]	; (80027cc <HAL_ADC_DeInit+0x118>)
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 800272a:	4010      	ands	r0, r2
 800272c:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 800272e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_ADC_MspDeInit(hadc);
 8002730:	4620      	mov	r0, r4
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8002732:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002736:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8002738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800273a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800273e:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 8002740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002742:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002746:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 8002748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 8002750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002752:	0d92      	lsrs	r2, r2, #22
 8002754:	0592      	lsls	r2, r2, #22
 8002756:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8002758:	684b      	ldr	r3, [r1, #4]
 800275a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800275e:	604b      	str	r3, [r1, #4]
    HAL_ADC_MspDeInit(hadc);
 8002760:	f7ff fd04 	bl	800216c <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002764:	2300      	movs	r3, #0
    hadc->State = HAL_ADC_STATE_RESET;
 8002766:	4618      	mov	r0, r3
    ADC_CLEAR_ERRORCODE(hadc);
 8002768:	6523      	str	r3, [r4, #80]	; 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 800276a:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 800276c:	2300      	movs	r3, #0
 800276e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 8002772:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800277c:	f7ff feb2 	bl	80024e4 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002780:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002782:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	0650      	lsls	r0, r2, #25
 8002788:	d5a0      	bpl.n	80026cc <HAL_ADC_DeInit+0x18>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800278a:	f7ff feab 	bl	80024e4 <HAL_GetTick>
 800278e:	1b40      	subs	r0, r0, r5
 8002790:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002792:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002794:	d902      	bls.n	800279c <HAL_ADC_DeInit+0xe8>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	0651      	lsls	r1, r2, #25
 800279a:	d405      	bmi.n	80027a8 <HAL_ADC_DeInit+0xf4>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	0652      	lsls	r2, r2, #25
 80027a0:	d4f3      	bmi.n	800278a <HAL_ADC_DeInit+0xd6>
 80027a2:	e793      	b.n	80026cc <HAL_ADC_DeInit+0x18>
    return HAL_ERROR;
 80027a4:	2001      	movs	r0, #1
}
 80027a6:	4770      	bx	lr
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80027ac:	f043 0310 	orr.w	r3, r3, #16
 80027b0:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80027b4:	4303      	orrs	r3, r0
 80027b6:	6523      	str	r3, [r4, #80]	; 0x50
  if (tmp_hal_status == HAL_OK)
 80027b8:	e7d8      	b.n	800276c <HAL_ADC_DeInit+0xb8>
 80027ba:	bf00      	nop
 80027bc:	f83c0000 	.word	0xf83c0000
 80027c0:	8080f08c 	.word	0x8080f08c
 80027c4:	fffff000 	.word	0xfffff000
 80027c8:	fe0f8000 	.word	0xfe0f8000
 80027cc:	40012700 	.word	0x40012700

080027d0 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027d4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80027d8:	d126      	bne.n	8002828 <ADC_DMAConvCplt+0x58>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027dc:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 80027e2:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027e4:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027e6:	688a      	ldr	r2, [r1, #8]
 80027e8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80027ec:	d118      	bne.n	8002820 <ADC_DMAConvCplt+0x50>
 80027ee:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80027f2:	b9aa      	cbnz	r2, 8002820 <ADC_DMAConvCplt+0x50>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027f4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027f6:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 80027fa:	d002      	beq.n	8002802 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80027fc:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027fe:	0550      	lsls	r0, r2, #21
 8002800:	d40e      	bmi.n	8002820 <ADC_DMAConvCplt+0x50>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002802:	684a      	ldr	r2, [r1, #4]
 8002804:	f022 0220 	bic.w	r2, r2, #32
 8002808:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800280a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800280c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002810:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002812:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002814:	04d2      	lsls	r2, r2, #19
 8002816:	d403      	bmi.n	8002820 <ADC_DMAConvCplt+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fa61 	bl	8001ce8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002826:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	4718      	bx	r3
 800282e:	bf00      	nop

08002830 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002830:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002832:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002834:	f7ff fa48 	bl	8001cc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002838:	bd08      	pop	{r3, pc}
 800283a:	bf00      	nop

0800283c <HAL_ADC_ErrorCallback>:
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop

08002840 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002840:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002842:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002844:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284a:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800284c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800284e:	f043 0304 	orr.w	r3, r3, #4
 8002852:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002854:	f7ff fff2 	bl	800283c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002858:	bd08      	pop	{r3, pc}
 800285a:	bf00      	nop

0800285c <HAL_ADC_IRQHandler>:
{
 800285c:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800285e:	6803      	ldr	r3, [r0, #0]
{
 8002860:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	0691      	lsls	r1, r2, #26
 8002866:	d502      	bpl.n	800286e <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	0792      	lsls	r2, r2, #30
 800286c:	d445      	bmi.n	80028fa <HAL_ADC_IRQHandler+0x9e>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	0612      	lsls	r2, r2, #24
 8002872:	d502      	bpl.n	800287a <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	0755      	lsls	r5, r2, #29
 8002878:	d40c      	bmi.n	8002894 <HAL_ADC_IRQHandler+0x38>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	0655      	lsls	r5, r2, #25
 800287e:	d502      	bpl.n	8002886 <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	07d0      	lsls	r0, r2, #31
 8002884:	d46f      	bmi.n	8002966 <HAL_ADC_IRQHandler+0x10a>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	0151      	lsls	r1, r2, #5
 800288a:	d502      	bpl.n	8002892 <HAL_ADC_IRQHandler+0x36>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	0692      	lsls	r2, r2, #26
 8002890:	d45c      	bmi.n	800294c <HAL_ADC_IRQHandler+0xf0>
}
 8002892:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002894:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002896:	06d0      	lsls	r0, r2, #27
 8002898:	d403      	bmi.n	80028a2 <HAL_ADC_IRQHandler+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800289a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800289c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028a0:	64e2      	str	r2, [r4, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80028a8:	d11f      	bne.n	80028ea <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028ac:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80028b0:	d002      	beq.n	80028b8 <HAL_ADC_IRQHandler+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80028b2:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028b4:	0551      	lsls	r1, r2, #21
 80028b6:	d418      	bmi.n	80028ea <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028b8:	685a      	ldr	r2, [r3, #4]
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80028ba:	0552      	lsls	r2, r2, #21
 80028bc:	d415      	bmi.n	80028ea <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028be:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028c0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80028c4:	d111      	bne.n	80028ea <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028c6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80028ca:	b972      	cbnz	r2, 80028ea <HAL_ADC_IRQHandler+0x8e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d2:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80028d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80028d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028da:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80028dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80028de:	05db      	lsls	r3, r3, #23
 80028e0:	d403      	bmi.n	80028ea <HAL_ADC_IRQHandler+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028ea:	4620      	mov	r0, r4
 80028ec:	f000 f9ea 	bl	8002cc4 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80028f0:	f06f 020c 	mvn.w	r2, #12
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e7bf      	b.n	800287a <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028fa:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80028fc:	06d5      	lsls	r5, r2, #27
 80028fe:	d403      	bmi.n	8002908 <HAL_ADC_IRQHandler+0xac>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002900:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002906:	64c2      	str	r2, [r0, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800290e:	d115      	bne.n	800293c <HAL_ADC_IRQHandler+0xe0>
 8002910:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8002914:	b992      	cbnz	r2, 800293c <HAL_ADC_IRQHandler+0xe0>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002918:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 800291c:	d12f      	bne.n	800297e <HAL_ADC_IRQHandler+0x122>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	f022 0220 	bic.w	r2, r2, #32
 8002924:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002926:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800292c:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800292e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002930:	04d9      	lsls	r1, r3, #19
 8002932:	d403      	bmi.n	800293c <HAL_ADC_IRQHandler+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002934:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_ConvCpltCallback(hadc);
 800293c:	4620      	mov	r0, r4
 800293e:	f7ff f9d3 	bl	8001ce8 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002942:	f06f 0212 	mvn.w	r2, #18
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e790      	b.n	800286e <HAL_ADC_IRQHandler+0x12>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800294c:	f06f 0520 	mvn.w	r5, #32
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002950:	6d22      	ldr	r2, [r4, #80]	; 0x50
      HAL_ADC_ErrorCallback(hadc);
 8002952:	4620      	mov	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002954:	f042 0202 	orr.w	r2, r2, #2
 8002958:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800295a:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800295c:	f7ff ff6e 	bl	800283c <HAL_ADC_ErrorCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	601d      	str	r5, [r3, #0]
}
 8002964:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002966:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002968:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800296a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296e:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002970:	f7ff f9ca 	bl	8001d08 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002974:	f06f 0201 	mvn.w	r2, #1
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	e783      	b.n	8002886 <HAL_ADC_IRQHandler+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800297e:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002980:	0550      	lsls	r0, r2, #21
 8002982:	d4db      	bmi.n	800293c <HAL_ADC_IRQHandler+0xe0>
 8002984:	e7cb      	b.n	800291e <HAL_ADC_IRQHandler+0xc2>
 8002986:	bf00      	nop

08002988 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8002988:	2300      	movs	r3, #0
{
 800298a:	b530      	push	{r4, r5, lr}
 800298c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800298e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002990:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8002994:	2b01      	cmp	r3, #1
 8002996:	f000 80aa 	beq.w	8002aee <HAL_ADC_ConfigChannel+0x166>
 800299a:	2301      	movs	r3, #1
 800299c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 80029a0:	684b      	ldr	r3, [r1, #4]
 80029a2:	4602      	mov	r2, r0
 80029a4:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR5,
 80029a6:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7)
 80029a8:	d924      	bls.n	80029f4 <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13)
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d866      	bhi.n	8002a7c <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SQR4,
 80029ae:	f04f 0c1f 	mov.w	ip, #31
 80029b2:	680c      	ldr	r4, [r1, #0]
 80029b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80029b8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80029ba:	3b23      	subs	r3, #35	; 0x23
 80029bc:	fa04 fe03 	lsl.w	lr, r4, r3
 80029c0:	fa0c f303 	lsl.w	r3, ip, r3
 80029c4:	ea25 0303 	bic.w	r3, r5, r3
 80029c8:	ea43 030e 	orr.w	r3, r3, lr
 80029cc:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel < ADC_CHANNEL_10)
 80029ce:	2c09      	cmp	r4, #9
 80029d0:	d822      	bhi.n	8002a18 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR3,
 80029d2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80029d6:	2407      	movs	r4, #7
 80029d8:	6943      	ldr	r3, [r0, #20]
 80029da:	6889      	ldr	r1, [r1, #8]
 80029dc:	40ac      	lsls	r4, r5
 80029de:	40a9      	lsls	r1, r5
 80029e0:	ea23 0404 	bic.w	r4, r3, r4
 80029e4:	430c      	orrs	r4, r1
 80029e6:	6144      	str	r4, [r0, #20]
  __HAL_UNLOCK(hadc);
 80029e8:	2300      	movs	r3, #0
  return tmp_hal_status;
 80029ea:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 80029ec:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
}
 80029f0:	b003      	add	sp, #12
 80029f2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR5,
 80029f4:	f04f 0c1f 	mov.w	ip, #31
 80029f8:	680c      	ldr	r4, [r1, #0]
 80029fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80029fe:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002a00:	3b05      	subs	r3, #5
 8002a02:	fa04 fe03 	lsl.w	lr, r4, r3
 8002a06:	fa0c f303 	lsl.w	r3, ip, r3
 8002a0a:	ea25 0303 	bic.w	r3, r5, r3
 8002a0e:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002a12:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SQR5,
 8002a14:	6403      	str	r3, [r0, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002a16:	d9dc      	bls.n	80029d2 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002a18:	2c13      	cmp	r4, #19
 8002a1a:	d844      	bhi.n	8002aa6 <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 8002a1c:	f04f 0c07 	mov.w	ip, #7
 8002a20:	688d      	ldr	r5, [r1, #8]
 8002a22:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8002a26:	6903      	ldr	r3, [r0, #16]
 8002a28:	391e      	subs	r1, #30
 8002a2a:	408d      	lsls	r5, r1
 8002a2c:	fa0c f101 	lsl.w	r1, ip, r1
 8002a30:	ea23 0301 	bic.w	r3, r3, r1
 8002a34:	432b      	orrs	r3, r5
 8002a36:	6103      	str	r3, [r0, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a38:	f1a4 0310 	sub.w	r3, r4, #16
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d8d3      	bhi.n	80029e8 <HAL_ADC_ConfigChannel+0x60>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002a40:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <HAL_ADC_ConfigChannel+0x18c>)
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	0209      	lsls	r1, r1, #8
 8002a46:	d4cf      	bmi.n	80029e8 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002a48:	6859      	ldr	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a4a:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002a4c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002a50:	6059      	str	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a52:	d1c9      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a54:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <HAL_ADC_ConfigChannel+0x190>)
 8002a56:	4931      	ldr	r1, [pc, #196]	; (8002b1c <HAL_ADC_ConfigChannel+0x194>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	fba1 1303 	umull	r1, r3, r1, r3
 8002a5e:	0c9b      	lsrs	r3, r3, #18
 8002a60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8002a68:	9b01      	ldr	r3, [sp, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0bc      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8002a6e:	9b01      	ldr	r3, [sp, #4]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8002a74:	9b01      	ldr	r3, [sp, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f9      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0xe6>
 8002a7a:	e7b5      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x60>
  else if (sConfig->Rank < 19)
 8002a7c:	2b12      	cmp	r3, #18
 8002a7e:	d925      	bls.n	8002acc <HAL_ADC_ConfigChannel+0x144>
  else if (sConfig->Rank < 25)
 8002a80:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 8002a82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 8002a86:	d835      	bhi.n	8002af4 <HAL_ADC_ConfigChannel+0x16c>
    MODIFY_REG(hadc->Instance->SQR2,
 8002a88:	f04f 0c1f 	mov.w	ip, #31
 8002a8c:	680c      	ldr	r4, [r1, #0]
 8002a8e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8002a90:	3b5f      	subs	r3, #95	; 0x5f
 8002a92:	fa04 fe03 	lsl.w	lr, r4, r3
 8002a96:	fa0c f303 	lsl.w	r3, ip, r3
 8002a9a:	ea25 0303 	bic.w	r3, r5, r3
 8002a9e:	ea43 030e 	orr.w	r3, r3, lr
 8002aa2:	6343      	str	r3, [r0, #52]	; 0x34
 8002aa4:	e793      	b.n	80029ce <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002aa6:	2c1a      	cmp	r4, #26
 8002aa8:	d80d      	bhi.n	8002ac6 <HAL_ADC_ConfigChannel+0x13e>
    MODIFY_REG(hadc->Instance->SMPR1,
 8002aaa:	2507      	movs	r5, #7
 8002aac:	6889      	ldr	r1, [r1, #8]
 8002aae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002ab2:	68c3      	ldr	r3, [r0, #12]
 8002ab4:	3c3c      	subs	r4, #60	; 0x3c
 8002ab6:	40a1      	lsls	r1, r4
 8002ab8:	fa05 f404 	lsl.w	r4, r5, r4
 8002abc:	ea23 0304 	bic.w	r3, r3, r4
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	60c3      	str	r3, [r0, #12]
 8002ac4:	e790      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x60>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002ac6:	bf00      	nop
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ac8:	680c      	ldr	r4, [r1, #0]
 8002aca:	e7b5      	b.n	8002a38 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR3,
 8002acc:	f04f 0c1f 	mov.w	ip, #31
 8002ad0:	680c      	ldr	r4, [r1, #0]
 8002ad2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ad6:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8002ad8:	3b41      	subs	r3, #65	; 0x41
 8002ada:	fa04 fe03 	lsl.w	lr, r4, r3
 8002ade:	fa0c f303 	lsl.w	r3, ip, r3
 8002ae2:	ea25 0303 	bic.w	r3, r5, r3
 8002ae6:	ea43 030e 	orr.w	r3, r3, lr
 8002aea:	6383      	str	r3, [r0, #56]	; 0x38
 8002aec:	e76f      	b.n	80029ce <HAL_ADC_ConfigChannel+0x46>
  __HAL_LOCK(hadc);
 8002aee:	2002      	movs	r0, #2
}
 8002af0:	b003      	add	sp, #12
 8002af2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR1,
 8002af4:	f04f 0c1f 	mov.w	ip, #31
 8002af8:	680c      	ldr	r4, [r1, #0]
 8002afa:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8002afc:	3b7d      	subs	r3, #125	; 0x7d
 8002afe:	fa04 fe03 	lsl.w	lr, r4, r3
 8002b02:	fa0c f303 	lsl.w	r3, ip, r3
 8002b06:	ea25 0303 	bic.w	r3, r5, r3
 8002b0a:	ea43 030e 	orr.w	r3, r3, lr
 8002b0e:	6303      	str	r3, [r0, #48]	; 0x30
 8002b10:	e75d      	b.n	80029ce <HAL_ADC_ConfigChannel+0x46>
 8002b12:	bf00      	nop
 8002b14:	40012700 	.word	0x40012700
 8002b18:	20000004 	.word	0x20000004
 8002b1c:	431bde83 	.word	0x431bde83

08002b20 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8002b20:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002b24:	680a      	ldr	r2, [r1, #0]
  __HAL_LOCK(hadc);
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d024      	beq.n	8002b74 <HAL_ADC_AnalogWDGConfig+0x54>
 8002b2a:	2301      	movs	r3, #1
{
 8002b2c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002b2e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if(AnalogWDGConfig->ITMode == ENABLE)
 8002b32:	7a0b      	ldrb	r3, [r1, #8]
 8002b34:	4686      	mov	lr, r0
 8002b36:	2b01      	cmp	r3, #1
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8002b38:	6803      	ldr	r3, [r0, #0]
  if(AnalogWDGConfig->ITMode == ENABLE)
 8002b3a:	d016      	beq.n	8002b6a <HAL_ADC_AnalogWDGConfig+0x4a>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8002b3c:	685c      	ldr	r4, [r3, #4]
 8002b3e:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8002b42:	605c      	str	r4, [r3, #4]
  __HAL_UNLOCK(hadc);
 8002b44:	f04f 0c00 	mov.w	ip, #0
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8002b48:	6858      	ldr	r0, [r3, #4]
 8002b4a:	4c0b      	ldr	r4, [pc, #44]	; (8002b78 <HAL_ADC_AnalogWDGConfig+0x58>)
 8002b4c:	4004      	ands	r4, r0
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 8002b4e:	6848      	ldr	r0, [r1, #4]
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8002b50:	605c      	str	r4, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 8002b52:	4302      	orrs	r2, r0
 8002b54:	6858      	ldr	r0, [r3, #4]
 8002b56:	4302      	orrs	r2, r0
 8002b58:	605a      	str	r2, [r3, #4]
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8002b5a:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8002b5e:	6298      	str	r0, [r3, #40]	; 0x28
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8002b60:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_UNLOCK(hadc);
 8002b62:	f88e c048 	strb.w	ip, [lr, #72]	; 0x48
  return HAL_OK;
 8002b66:	4660      	mov	r0, ip
}
 8002b68:	bd10      	pop	{r4, pc}
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8002b6a:	6858      	ldr	r0, [r3, #4]
 8002b6c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8002b70:	6058      	str	r0, [r3, #4]
 8002b72:	e7e7      	b.n	8002b44 <HAL_ADC_AnalogWDGConfig+0x24>
  __HAL_LOCK(hadc);
 8002b74:	2002      	movs	r0, #2
}
 8002b76:	4770      	bx	lr
 8002b78:	ff3ffde0 	.word	0xff3ffde0

08002b7c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 8002b7c:	2300      	movs	r3, #0
{
 8002b7e:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b80:	6802      	ldr	r2, [r0, #0]
{
 8002b82:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8002b84:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b86:	6813      	ldr	r3, [r2, #0]
 8002b88:	0659      	lsls	r1, r3, #25
 8002b8a:	d429      	bmi.n	8002be0 <ADC_Enable+0x64>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <ADC_Enable+0x84>)
 8002b8e:	4604      	mov	r4, r0
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	481c      	ldr	r0, [pc, #112]	; (8002c04 <ADC_Enable+0x88>)
    __HAL_ADC_ENABLE(hadc);
 8002b94:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002b96:	fba0 0303 	umull	r0, r3, r0, r3
 8002b9a:	0c9b      	lsrs	r3, r3, #18
 8002b9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8002ba0:	f041 0101 	orr.w	r1, r1, #1
 8002ba4:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002ba6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002ba8:	9b01      	ldr	r3, [sp, #4]
 8002baa:	b12b      	cbz	r3, 8002bb8 <ADC_Enable+0x3c>
      wait_loop_index--;
 8002bac:	9b01      	ldr	r3, [sp, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002bb2:	9b01      	ldr	r3, [sp, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f9      	bne.n	8002bac <ADC_Enable+0x30>
    tickstart = HAL_GetTick();    
 8002bb8:	f7ff fc94 	bl	80024e4 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bbc:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();    
 8002bbe:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	065a      	lsls	r2, r3, #25
 8002bc4:	d40c      	bmi.n	8002be0 <ADC_Enable+0x64>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002bc6:	f7ff fc8d 	bl	80024e4 <HAL_GetTick>
 8002bca:	1b43      	subs	r3, r0, r5
 8002bcc:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bce:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002bd0:	d903      	bls.n	8002bda <ADC_Enable+0x5e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8002bd8:	d005      	beq.n	8002be6 <ADC_Enable+0x6a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	065b      	lsls	r3, r3, #25
 8002bde:	d5f2      	bpl.n	8002bc6 <ADC_Enable+0x4a>
  return HAL_OK;
 8002be0:	2000      	movs	r0, #0
}
 8002be2:	b003      	add	sp, #12
 8002be4:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8002be6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 8002bea:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bee:	f043 0310 	orr.w	r3, r3, #16
 8002bf2:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002bf6:	4303      	orrs	r3, r0
 8002bf8:	6523      	str	r3, [r4, #80]	; 0x50
}
 8002bfa:	b003      	add	sp, #12
 8002bfc:	bd30      	pop	{r4, r5, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000004 	.word	0x20000004
 8002c04:	431bde83 	.word	0x431bde83

08002c08 <HAL_ADC_Start_DMA>:
{
 8002c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8002c0c:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 8002c10:	2d01      	cmp	r5, #1
 8002c12:	d04c      	beq.n	8002cae <HAL_ADC_Start_DMA+0xa6>
 8002c14:	2301      	movs	r3, #1
 8002c16:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	4688      	mov	r8, r1
 8002c1e:	4617      	mov	r7, r2
 8002c20:	f7ff ffac 	bl	8002b7c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002c24:	4605      	mov	r5, r0
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d13e      	bne.n	8002ca8 <HAL_ADC_Start_DMA+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 8002c2a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c2c:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002c2e:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8002c32:	f020 0001 	bic.w	r0, r0, #1
 8002c36:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8002c3a:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c3c:	6873      	ldr	r3, [r6, #4]
 8002c3e:	055b      	lsls	r3, r3, #21
 8002c40:	d505      	bpl.n	8002c4e <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002c44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c4c:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 8002c4e:	2100      	movs	r1, #0
 8002c50:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c54:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c58:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c5a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c5c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c60:	bf18      	it	ne
 8002c62:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c64:	4642      	mov	r2, r8
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c66:	bf18      	it	ne
 8002c68:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002c6c:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c6e:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c70:	4f11      	ldr	r7, [pc, #68]	; (8002cb8 <HAL_ADC_Start_DMA+0xb0>)
 8002c72:	6287      	str	r7, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c74:	4f11      	ldr	r7, [pc, #68]	; (8002cbc <HAL_ADC_Start_DMA+0xb4>)
 8002c76:	62c7      	str	r7, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c78:	4f11      	ldr	r7, [pc, #68]	; (8002cc0 <HAL_ADC_Start_DMA+0xb8>)
 8002c7a:	6307      	str	r7, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c7c:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c7e:	6871      	ldr	r1, [r6, #4]
 8002c80:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8002c84:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c86:	68b1      	ldr	r1, [r6, #8]
 8002c88:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002c8c:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c8e:	f106 0158 	add.w	r1, r6, #88	; 0x58
 8002c92:	f000 f98f 	bl	8002fb4 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002c9e:	d103      	bne.n	8002ca8 <HAL_ADC_Start_DMA+0xa0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ca6:	609a      	str	r2, [r3, #8]
}
 8002ca8:	4628      	mov	r0, r5
 8002caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 8002cae:	2502      	movs	r5, #2
}
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cb6:	bf00      	nop
 8002cb8:	080027d1 	.word	0x080027d1
 8002cbc:	08002831 	.word	0x08002831
 8002cc0:	08002841 	.word	0x08002841

08002cc4 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop

08002cc8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc8:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ccc:	4906      	ldr	r1, [pc, #24]	; (8002ce8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cce:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd6:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002ce4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002ce6:	4770      	bx	lr
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cec:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cee:	b500      	push	{lr}
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf6:	f1c3 0e07 	rsb	lr, r3, #7
 8002cfa:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfe:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d02:	bf28      	it	cs
 8002d04:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d08:	f1bc 0f06 	cmp.w	ip, #6
 8002d0c:	d91b      	bls.n	8002d46 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d0e:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d12:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d14:	fa0c fc03 	lsl.w	ip, ip, r3
 8002d18:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	f04f 3cff 	mov.w	ip, #4294967295
 8002d20:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002d24:	ea21 010c 	bic.w	r1, r1, ip
 8002d28:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002d2a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002d30:	db0c      	blt.n	8002d4c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	0109      	lsls	r1, r1, #4
 8002d34:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002d38:	b2c9      	uxtb	r1, r1
 8002d3a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002d3e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002d42:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d46:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d48:	4613      	mov	r3, r2
 8002d4a:	e7e7      	b.n	8002d1c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_NVIC_SetPriority+0x78>)
 8002d4e:	f000 000f 	and.w	r0, r0, #15
 8002d52:	0109      	lsls	r1, r1, #4
 8002d54:	b2c9      	uxtb	r1, r1
 8002d56:	4403      	add	r3, r0
 8002d58:	7619      	strb	r1, [r3, #24]
 8002d5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d5e:	bf00      	nop
 8002d60:	e000ed00 	.word	0xe000ed00
 8002d64:	e000ecfc 	.word	0xe000ecfc

08002d68 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	db07      	blt.n	8002d7c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f000 011f 	and.w	r1, r0, #31
 8002d72:	4a03      	ldr	r2, [pc, #12]	; (8002d80 <HAL_NVIC_EnableIRQ+0x18>)
 8002d74:	0940      	lsrs	r0, r0, #5
 8002d76:	408b      	lsls	r3, r1
 8002d78:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000e100 	.word	0xe000e100

08002d84 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d84:	2800      	cmp	r0, #0
 8002d86:	db0d      	blt.n	8002da4 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4907      	ldr	r1, [pc, #28]	; (8002da8 <HAL_NVIC_DisableIRQ+0x24>)
 8002d8c:	0943      	lsrs	r3, r0, #5
 8002d8e:	f000 001f 	and.w	r0, r0, #31
 8002d92:	3320      	adds	r3, #32
 8002d94:	fa02 f000 	lsl.w	r0, r2, r0
 8002d98:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002da0:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000e100 	.word	0xe000e100

08002dac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dac:	3801      	subs	r0, #1
 8002dae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002db2:	d20f      	bcs.n	8002dd4 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dbc:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dbe:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc0:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	4c05      	ldr	r4, [pc, #20]	; (8002dd8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dc4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dca:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dcc:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8002dce:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dd0:	6119      	str	r1, [r3, #16]
 8002dd2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8002ddc:	b188      	cbz	r0, 8002e02 <HAL_DAC_Init+0x26>
{
 8002dde:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002de0:	7903      	ldrb	r3, [r0, #4]
 8002de2:	4604      	mov	r4, r0
 8002de4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002de8:	b13b      	cbz	r3, 8002dfa <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002dea:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dec:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002dee:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002df0:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002df2:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002df4:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002df6:	4618      	mov	r0, r3
}
 8002df8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8002dfa:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8002dfc:	f7ff f9d4 	bl	80021a8 <HAL_DAC_MspInit>
 8002e00:	e7f3      	b.n	8002dea <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8002e02:	2001      	movs	r0, #1
}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop

08002e08 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e08:	7942      	ldrb	r2, [r0, #5]
 8002e0a:	2a01      	cmp	r2, #1
 8002e0c:	d02a      	beq.n	8002e64 <HAL_DAC_Start+0x5c>
{
 8002e0e:	b410      	push	{r4}
 8002e10:	4603      	mov	r3, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e12:	2402      	movs	r4, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e14:	2201      	movs	r2, #1
 8002e16:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e18:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e1a:	6804      	ldr	r4, [r0, #0]
 8002e1c:	f001 0c10 	and.w	ip, r1, #16
 8002e20:	fa02 f20c 	lsl.w	r2, r2, ip
 8002e24:	4322      	orrs	r2, r4
 8002e26:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 8002e28:	b979      	cbnz	r1, 8002e4a <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002e2a:	6802      	ldr	r2, [r0, #0]
 8002e2c:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8002e30:	2a3c      	cmp	r2, #60	; 0x3c
 8002e32:	d103      	bne.n	8002e3c <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002e34:	6842      	ldr	r2, [r0, #4]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e3c:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002e3e:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8002e40:	715a      	strb	r2, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8002e42:	7119      	strb	r1, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e44:	4610      	mov	r0, r2
}
 8002e46:	bc10      	pop	{r4}
 8002e48:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002e4a:	223c      	movs	r2, #60	; 0x3c
 8002e4c:	6801      	ldr	r1, [r0, #0]
 8002e4e:	fa02 fc0c 	lsl.w	ip, r2, ip
 8002e52:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8002e56:	4561      	cmp	r1, ip
 8002e58:	d1f0      	bne.n	8002e3c <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002e5a:	6842      	ldr	r2, [r0, #4]
 8002e5c:	f042 0202 	orr.w	r2, r2, #2
 8002e60:	6042      	str	r2, [r0, #4]
 8002e62:	e7eb      	b.n	8002e3c <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 8002e64:	2002      	movs	r0, #2
}
 8002e66:	4770      	bx	lr

08002e68 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002e68:	b410      	push	{r4}
  __IO uint32_t tmp = 0UL;
 8002e6a:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002e6c:	6800      	ldr	r0, [r0, #0]
{
 8002e6e:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8002e70:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8002e72:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8002e74:	b949      	cbnz	r1, 8002e8a <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e76:	9901      	ldr	r1, [sp, #4]
 8002e78:	3108      	adds	r1, #8
 8002e7a:	440a      	add	r2, r1
 8002e7c:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
}
 8002e7e:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8002e80:	9a01      	ldr	r2, [sp, #4]
 8002e82:	6013      	str	r3, [r2, #0]
}
 8002e84:	b003      	add	sp, #12
 8002e86:	bc10      	pop	{r4}
 8002e88:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e8a:	9901      	ldr	r1, [sp, #4]
 8002e8c:	3114      	adds	r1, #20
 8002e8e:	440a      	add	r2, r1
 8002e90:	9201      	str	r2, [sp, #4]
 8002e92:	e7f4      	b.n	8002e7e <HAL_DAC_SetValue+0x16>

08002e94 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e94:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e96:	7940      	ldrb	r0, [r0, #5]
 8002e98:	2801      	cmp	r0, #1
 8002e9a:	d022      	beq.n	8002ee2 <HAL_DAC_ConfigChannel+0x4e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e9c:	2002      	movs	r0, #2
{
 8002e9e:	b570      	push	{r4, r5, r6, lr}
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ea0:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002ea4:	f640 76fe 	movw	r6, #4094	; 0xffe

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ea8:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002eac:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eae:	7118      	strb	r0, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8002eb0:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002eb2:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002eb6:	f002 0210 	and.w	r2, r2, #16
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002eba:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002ebc:	4096      	lsls	r6, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ebe:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ec2:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 = hdac->Instance->CR;
 8002ec6:	6821      	ldr	r1, [r4, #0]

  /* Return function status */
  return HAL_OK;
 8002ec8:	4670      	mov	r0, lr
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002eca:	ea21 0106 	bic.w	r1, r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ece:	430a      	orrs	r2, r1
  hdac->Instance->CR = tmpreg1;
 8002ed0:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ed2:	6822      	ldr	r2, [r4, #0]
 8002ed4:	ea22 020c 	bic.w	r2, r2, ip
 8002ed8:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002eda:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8002edc:	f883 e005 	strb.w	lr, [r3, #5]
}
 8002ee0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 8002ee2:	2002      	movs	r0, #2
}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop

08002ee8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ee8:	b370      	cbz	r0, 8002f48 <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002eea:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eec:	2202      	movs	r2, #2
{
 8002eee:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ef0:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef4:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ef6:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ef8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8002efc:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efe:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002f00:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
  tmp |=  hdma->Init.Direction        |
 8002f04:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8002f08:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f0a:	4910      	ldr	r1, [pc, #64]	; (8002f4c <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0c:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f0e:	4d10      	ldr	r5, [pc, #64]	; (8002f50 <HAL_DMA_Init+0x68>)
 8002f10:	4401      	add	r1, r0
 8002f12:	fba5 5101 	umull	r5, r1, r5, r1
 8002f16:	0909      	lsrs	r1, r1, #4
 8002f18:	0089      	lsls	r1, r1, #2
 8002f1a:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1c:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002f1e:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f22:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f24:	6959      	ldr	r1, [r3, #20]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	6999      	ldr	r1, [r3, #24]
 8002f2a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f2c:	69d9      	ldr	r1, [r3, #28]
 8002f2e:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8002f30:	4908      	ldr	r1, [pc, #32]	; (8002f54 <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 8002f32:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 8002f36:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8002f38:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f3a:	639c      	str	r4, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f3c:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8002f40:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 8002f44:	4620      	mov	r0, r4
}
 8002f46:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002f48:	2001      	movs	r0, #1
}
 8002f4a:	4770      	bx	lr
 8002f4c:	bffd9ff8 	.word	0xbffd9ff8
 8002f50:	cccccccd 	.word	0xcccccccd
 8002f54:	40026000 	.word	0x40026000

08002f58 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002f58:	b320      	cbz	r0, 8002fa4 <HAL_DMA_DeInit+0x4c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002f5a:	4603      	mov	r3, r0

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f5c:	2101      	movs	r1, #1
{
 8002f5e:	b430      	push	{r4, r5}
  hdma->Instance->CCR = 0U;
 8002f60:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002f62:	6805      	ldr	r5, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f64:	4810      	ldr	r0, [pc, #64]	; (8002fa8 <HAL_DMA_DeInit+0x50>)
  __HAL_DMA_DISABLE(hdma);
 8002f66:	682a      	ldr	r2, [r5, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	602a      	str	r2, [r5, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	; (8002fac <HAL_DMA_DeInit+0x54>)
 8002f70:	442a      	add	r2, r5
 8002f72:	fba0 0202 	umull	r0, r2, r0, r2
 8002f76:	0912      	lsrs	r2, r2, #4
 8002f78:	0092      	lsls	r2, r2, #2
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f7c:	f002 021c 	and.w	r2, r2, #28
 8002f80:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8002f84:	490a      	ldr	r1, [pc, #40]	; (8002fb0 <HAL_DMA_DeInit+0x58>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8002f86:	4620      	mov	r0, r4
  hdma->DmaBaseAddress = DMA1;
 8002f88:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = 0U;
 8002f8a:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f8c:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8e:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdma);
 8002f90:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 8002f94:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 8002f98:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8002f9c:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
}
 8002fa0:	bc30      	pop	{r4, r5}
 8002fa2:	4770      	bx	lr
    return HAL_ERROR;
 8002fa4:	2001      	movs	r0, #1
}
 8002fa6:	4770      	bx	lr
 8002fa8:	cccccccd 	.word	0xcccccccd
 8002fac:	bffd9ff8 	.word	0xbffd9ff8
 8002fb0:	40026000 	.word	0x40026000

08002fb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fb4:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fb6:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002fba:	2801      	cmp	r0, #1
 8002fbc:	d042      	beq.n	8003044 <HAL_DMA_Start_IT+0x90>
{
 8002fbe:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8002fc0:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8002fc2:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002fc6:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fca:	42a0      	cmp	r0, r4
 8002fcc:	fa5f fe80 	uxtb.w	lr, r0
 8002fd0:	d004      	beq.n	8002fdc <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fd8:	2002      	movs	r0, #2
  }
  return status;
}
 8002fda:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fdc:	2002      	movs	r0, #2
 8002fde:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002fe4:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe8:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002fec:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fee:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8002ff2:	f025 0501 	bic.w	r5, r5, #1
 8002ff6:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ff8:	f000 001c 	and.w	r0, r0, #28
 8002ffc:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8003000:	fa0e f000 	lsl.w	r0, lr, r0
 8003004:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003006:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003008:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800300c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800300e:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003012:	bf0b      	itete	eq
 8003014:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003016:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003018:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800301a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800301c:	b14b      	cbz	r3, 8003032 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	f043 030e 	orr.w	r3, r3, #14
 8003024:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003026:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003028:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6023      	str	r3, [r4, #0]
}
 8003030:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	f023 0304 	bic.w	r3, r3, #4
 8003038:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	f043 030a 	orr.w	r3, r3, #10
 8003040:	6023      	str	r3, [r4, #0]
 8003042:	e7f0      	b.n	8003026 <HAL_DMA_Start_IT+0x72>
  __HAL_LOCK(hdma);
 8003044:	2002      	movs	r0, #2
}
 8003046:	4770      	bx	lr

08003048 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003048:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800304c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800304e:	2a02      	cmp	r2, #2
 8003050:	d006      	beq.n	8003060 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003052:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8003054:	2200      	movs	r2, #0
    return HAL_ERROR;
 8003056:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003058:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800305a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800305e:	4770      	bx	lr
{
 8003060:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003062:	f04f 0e01 	mov.w	lr, #1
    __HAL_UNLOCK(hdma);
 8003066:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800306a:	6802      	ldr	r2, [r0, #0]
 800306c:	6811      	ldr	r1, [r2, #0]
 800306e:	f021 010e 	bic.w	r1, r1, #14
 8003072:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003074:	6811      	ldr	r1, [r2, #0]
 8003076:	f021 0101 	bic.w	r1, r1, #1
 800307a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800307c:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8003080:	f002 021c 	and.w	r2, r2, #28
 8003084:	fa0e f202 	lsl.w	r2, lr, r2
 8003088:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800308a:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800308e:	f883 c020 	strb.w	ip, [r3, #32]
    return status;
 8003092:	4660      	mov	r0, ip
}
 8003094:	f85d fb04 	ldr.w	pc, [sp], #4

08003098 <HAL_DMA_Abort_IT>:
{
 8003098:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800309a:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800309e:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030a0:	2a02      	cmp	r2, #2
 80030a2:	d003      	beq.n	80030ac <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a4:	2204      	movs	r2, #4
    status = HAL_ERROR;
 80030a6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80030aa:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ac:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030ae:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030b2:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030b6:	f024 040e 	bic.w	r4, r4, #14
 80030ba:	600c      	str	r4, [r1, #0]
    __HAL_UNLOCK(hdma);
 80030bc:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 80030be:	680d      	ldr	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030c0:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 80030c4:	f025 0501 	bic.w	r5, r5, #1
 80030c8:	600d      	str	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030ca:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 80030cc:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030ce:	fa0c f202 	lsl.w	r2, ip, r2
 80030d2:	606a      	str	r2, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80030d4:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80030d8:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80030dc:	b111      	cbz	r1, 80030e4 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 80030de:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 80030e0:	4620      	mov	r0, r4
}
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80030e4:	4608      	mov	r0, r1
}
 80030e6:	bd38      	pop	{r3, r4, r5, pc}

080030e8 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030e8:	2204      	movs	r2, #4
{
 80030ea:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030ee:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030f0:	f003 031c 	and.w	r3, r3, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030f4:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80030f6:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030f8:	409a      	lsls	r2, r3
 80030fa:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 80030fc:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030fe:	d00e      	beq.n	800311e <HAL_DMA_IRQHandler+0x36>
 8003100:	f014 0f04 	tst.w	r4, #4
 8003104:	d00b      	beq.n	800311e <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003106:	682b      	ldr	r3, [r5, #0]
 8003108:	069b      	lsls	r3, r3, #26
 800310a:	d403      	bmi.n	8003114 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	f023 0304 	bic.w	r3, r3, #4
 8003112:	602b      	str	r3, [r5, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8003114:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003116:	6072      	str	r2, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8003118:	b1cb      	cbz	r3, 800314e <HAL_DMA_IRQHandler+0x66>
}
 800311a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800311c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800311e:	2202      	movs	r2, #2
 8003120:	409a      	lsls	r2, r3
 8003122:	420a      	tst	r2, r1
 8003124:	d015      	beq.n	8003152 <HAL_DMA_IRQHandler+0x6a>
 8003126:	f014 0f02 	tst.w	r4, #2
 800312a:	d012      	beq.n	8003152 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	0699      	lsls	r1, r3, #26
 8003130:	d406      	bmi.n	8003140 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003132:	682b      	ldr	r3, [r5, #0]
 8003134:	f023 030a 	bic.w	r3, r3, #10
 8003138:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800313a:	2301      	movs	r3, #1
 800313c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8003140:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 8003142:	6a83      	ldr	r3, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003144:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8003146:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e5      	bne.n	800311a <HAL_DMA_IRQHandler+0x32>
}
 800314e:	bc70      	pop	{r4, r5, r6}
 8003150:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003152:	2208      	movs	r2, #8
 8003154:	409a      	lsls	r2, r3
 8003156:	420a      	tst	r2, r1
 8003158:	d0f9      	beq.n	800314e <HAL_DMA_IRQHandler+0x66>
 800315a:	0722      	lsls	r2, r4, #28
 800315c:	d5f7      	bpl.n	800314e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800315e:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 8003160:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003162:	f022 020e 	bic.w	r2, r2, #14
 8003166:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003168:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 800316a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003172:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003174:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 8003178:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 800317c:	2900      	cmp	r1, #0
 800317e:	d0e6      	beq.n	800314e <HAL_DMA_IRQHandler+0x66>
}
 8003180:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003182:	4708      	bx	r1

08003184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003188:	680c      	ldr	r4, [r1, #0]
{
 800318a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 800318c:	2c00      	cmp	r4, #0
 800318e:	f000 80c4 	beq.w	800331a <HAL_GPIO_Init+0x196>
 8003192:	f04f 0e00 	mov.w	lr, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003196:	f04f 0b01 	mov.w	fp, #1
  uint32_t position = 0x00;
 800319a:	4673      	mov	r3, lr
 800319c:	468c      	mov	ip, r1
 800319e:	e068      	b.n	8003272 <HAL_GPIO_Init+0xee>
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a0:	2a03      	cmp	r2, #3
 80031a2:	f040 80b5 	bne.w	8003310 <HAL_GPIO_Init+0x18c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031a6:	fa02 f20e 	lsl.w	r2, r2, lr
 80031aa:	43d7      	mvns	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ac:	6805      	ldr	r5, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031ae:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80031b2:	ea07 0705 	and.w	r7, r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031b6:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 80031ba:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031bc:	d053      	beq.n	8003266 <HAL_GPIO_Init+0xe2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80031be:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c0:	4d5c      	ldr	r5, [pc, #368]	; (8003334 <HAL_GPIO_Init+0x1b0>)
 80031c2:	6a2a      	ldr	r2, [r5, #32]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	622a      	str	r2, [r5, #32]
 80031ca:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80031cc:	f003 0503 	and.w	r5, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d0:	f002 0201 	and.w	r2, r2, #1
 80031d4:	9203      	str	r2, [sp, #12]
 80031d6:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80031d8:	f023 0203 	bic.w	r2, r3, #3
 80031dc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80031e0:	00ad      	lsls	r5, r5, #2
 80031e2:	fa06 f805 	lsl.w	r8, r6, r5
 80031e6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031ea:	4e53      	ldr	r6, [pc, #332]	; (8003338 <HAL_GPIO_Init+0x1b4>)
        temp = SYSCFG->EXTICR[position >> 2];
 80031ec:	6897      	ldr	r7, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031ee:	42b0      	cmp	r0, r6
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80031f0:	ea27 0708 	bic.w	r7, r7, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031f4:	d013      	beq.n	800321e <HAL_GPIO_Init+0x9a>
 80031f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80031fa:	42b0      	cmp	r0, r6
 80031fc:	f000 8090 	beq.w	8003320 <HAL_GPIO_Init+0x19c>
 8003200:	4e4e      	ldr	r6, [pc, #312]	; (800333c <HAL_GPIO_Init+0x1b8>)
 8003202:	42b0      	cmp	r0, r6
 8003204:	f000 8090 	beq.w	8003328 <HAL_GPIO_Init+0x1a4>
 8003208:	4e4d      	ldr	r6, [pc, #308]	; (8003340 <HAL_GPIO_Init+0x1bc>)
 800320a:	42b0      	cmp	r0, r6
 800320c:	bf0b      	itete	eq
 800320e:	f04f 0803 	moveq.w	r8, #3
 8003212:	2605      	movne	r6, #5
 8003214:	fa08 f505 	lsleq.w	r5, r8, r5
 8003218:	fa06 f505 	lslne.w	r5, r6, r5
 800321c:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 800321e:	6097      	str	r7, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003220:	ea6f 070a 	mvn.w	r7, sl
        temp = EXTI->IMR;
 8003224:	4a47      	ldr	r2, [pc, #284]	; (8003344 <HAL_GPIO_Init+0x1c0>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003226:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 8003228:	6812      	ldr	r2, [r2, #0]
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->IMR = temp;
 800322a:	4d46      	ldr	r5, [pc, #280]	; (8003344 <HAL_GPIO_Init+0x1c0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800322c:	bf54      	ite	pl
 800322e:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8003230:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 8003234:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 8003236:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003238:	038a      	lsls	r2, r1, #14
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->EMR = temp;
 800323a:	4a42      	ldr	r2, [pc, #264]	; (8003344 <HAL_GPIO_Init+0x1c0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800323c:	bf54      	ite	pl
 800323e:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8003240:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR = temp;
 8003244:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003246:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003248:	02ce      	lsls	r6, r1, #11
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->RTSR = temp;
 800324a:	4a3e      	ldr	r2, [pc, #248]	; (8003344 <HAL_GPIO_Init+0x1c0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800324c:	bf54      	ite	pl
 800324e:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8003250:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR = temp;
 8003254:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8003256:	68d2      	ldr	r2, [r2, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003258:	0289      	lsls	r1, r1, #10
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->FTSR = temp;
 800325a:	493a      	ldr	r1, [pc, #232]	; (8003344 <HAL_GPIO_Init+0x1c0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800325c:	bf54      	ite	pl
 800325e:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8003260:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 8003264:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 8003266:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8003268:	fa34 f203 	lsrs.w	r2, r4, r3
 800326c:	f10e 0e02 	add.w	lr, lr, #2
 8003270:	d053      	beq.n	800331a <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003272:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent)
 8003276:	ea15 0a04 	ands.w	sl, r5, r4
 800327a:	d0f4      	beq.n	8003266 <HAL_GPIO_Init+0xe2>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800327c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8003280:	f001 0203 	and.w	r2, r1, #3
 8003284:	1e57      	subs	r7, r2, #1
 8003286:	2f01      	cmp	r7, #1
 8003288:	d88a      	bhi.n	80031a0 <HAL_GPIO_Init+0x1c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800328a:	f04f 0903 	mov.w	r9, #3
        temp = GPIOx->OSPEEDR;
 800328e:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003290:	f8dc 700c 	ldr.w	r7, [ip, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003294:	fa09 f90e 	lsl.w	r9, r9, lr
 8003298:	ea26 0609 	bic.w	r6, r6, r9
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800329c:	fa07 f70e 	lsl.w	r7, r7, lr
 80032a0:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 80032a2:	6087      	str	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032a4:	ea6f 0709 	mvn.w	r7, r9
        temp = GPIOx->OTYPER;
 80032a8:	f8d0 9004 	ldr.w	r9, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ac:	f3c1 1800 	ubfx	r8, r1, #4, #1
 80032b0:	fa08 f803 	lsl.w	r8, r8, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80032b4:	ea29 0505 	bic.w	r5, r9, r5
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b8:	ea48 0505 	orr.w	r5, r8, r5
        GPIOx->OTYPER = temp;
 80032bc:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 80032be:	68c5      	ldr	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c0:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80032c2:	ea05 0807 	and.w	r8, r5, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80032c6:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80032ca:	fa02 f20e 	lsl.w	r2, r2, lr
 80032ce:	fa05 f50e 	lsl.w	r5, r5, lr
 80032d2:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->PUPDR = temp;
 80032d6:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d8:	f47f af68 	bne.w	80031ac <HAL_GPIO_Init+0x28>
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80032dc:	f8dc 5010 	ldr.w	r5, [ip, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80032e0:	f003 0807 	and.w	r8, r3, #7
 80032e4:	ea4f 0888 	mov.w	r8, r8, lsl #2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80032e8:	fa05 f508 	lsl.w	r5, r5, r8
 80032ec:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80032ee:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3];
 80032f0:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80032f4:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 80032f8:	f8d9 6020 	ldr.w	r6, [r9, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80032fc:	fa05 f808 	lsl.w	r8, r5, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003300:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003302:	ea26 0808 	bic.w	r8, r6, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003306:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->AFR[position >> 3] = temp;
 800330a:	f8c9 5020 	str.w	r5, [r9, #32]
 800330e:	e74d      	b.n	80031ac <HAL_GPIO_Init+0x28>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003310:	2703      	movs	r7, #3
 8003312:	fa07 f70e 	lsl.w	r7, r7, lr
 8003316:	43ff      	mvns	r7, r7
 8003318:	e7d1      	b.n	80032be <HAL_GPIO_Init+0x13a>
  }
}
 800331a:	b005      	add	sp, #20
 800331c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003320:	fa0b f505 	lsl.w	r5, fp, r5
 8003324:	432f      	orrs	r7, r5
 8003326:	e77a      	b.n	800321e <HAL_GPIO_Init+0x9a>
 8003328:	f04f 0802 	mov.w	r8, #2
 800332c:	fa08 f505 	lsl.w	r5, r8, r5
 8003330:	432f      	orrs	r7, r5
 8003332:	e774      	b.n	800321e <HAL_GPIO_Init+0x9a>
 8003334:	40023800 	.word	0x40023800
 8003338:	40020000 	.word	0x40020000
 800333c:	40020800 	.word	0x40020800
 8003340:	40020c00 	.word	0x40020c00
 8003344:	40010400 	.word	0x40010400

08003348 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8003348:	2900      	cmp	r1, #0
 800334a:	d07b      	beq.n	8003444 <HAL_GPIO_DeInit+0xfc>
{
 800334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 8003350:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8003352:	2701      	movs	r7, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8003354:	f04f 090f 	mov.w	r9, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8003358:	f04f 0a03 	mov.w	sl, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800335c:	4e3a      	ldr	r6, [pc, #232]	; (8003448 <HAL_GPIO_DeInit+0x100>)
 800335e:	e04d      	b.n	80033fc <HAL_GPIO_DeInit+0xb4>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8003360:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8003364:	4558      	cmp	r0, fp
 8003366:	d065      	beq.n	8003434 <HAL_GPIO_DeInit+0xec>
 8003368:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 800344c <HAL_GPIO_DeInit+0x104>
 800336c:	4558      	cmp	r0, fp
 800336e:	d064      	beq.n	800343a <HAL_GPIO_DeInit+0xf2>
 8003370:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8003450 <HAL_GPIO_DeInit+0x108>
 8003374:	4558      	cmp	r0, fp
 8003376:	bf16      	itet	ne
 8003378:	f04f 0b05 	movne.w	fp, #5
 800337c:	fa0a f404 	lsleq.w	r4, sl, r4
 8003380:	fa0b f404 	lslne.w	r4, fp, r4
 8003384:	45a4      	cmp	ip, r4
 8003386:	d113      	bne.n	80033b0 <HAL_GPIO_DeInit+0x68>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003388:	6834      	ldr	r4, [r6, #0]
 800338a:	ea24 040e 	bic.w	r4, r4, lr
 800338e:	6034      	str	r4, [r6, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003390:	6874      	ldr	r4, [r6, #4]
 8003392:	ea24 040e 	bic.w	r4, r4, lr
 8003396:	6074      	str	r4, [r6, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003398:	68b4      	ldr	r4, [r6, #8]
 800339a:	ea24 040e 	bic.w	r4, r4, lr
 800339e:	60b4      	str	r4, [r6, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80033a0:	68f4      	ldr	r4, [r6, #12]
 80033a2:	ea24 040e 	bic.w	r4, r4, lr
 80033a6:	60f4      	str	r4, [r6, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80033a8:	68ac      	ldr	r4, [r5, #8]
 80033aa:	ea24 0408 	bic.w	r4, r4, r8
 80033ae:	60ac      	str	r4, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80033b0:	6805      	ldr	r5, [r0, #0]
 80033b2:	005c      	lsls	r4, r3, #1
 80033b4:	fa0a f404 	lsl.w	r4, sl, r4
 80033b8:	ea25 0504 	bic.w	r5, r5, r4

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 80033bc:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80033c0:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 80033c2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80033c6:	f003 0507 	and.w	r5, r3, #7
 80033ca:	f8dc e020 	ldr.w	lr, [ip, #32]
 80033ce:	00ad      	lsls	r5, r5, #2
 80033d0:	fa09 f505 	lsl.w	r5, r9, r5
 80033d4:	ea2e 0505 	bic.w	r5, lr, r5
 80033d8:	f8cc 5020 	str.w	r5, [ip, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80033dc:	68c5      	ldr	r5, [r0, #12]
 80033de:	ea25 0504 	bic.w	r5, r5, r4
 80033e2:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80033e4:	6845      	ldr	r5, [r0, #4]
 80033e6:	ea25 0202 	bic.w	r2, r5, r2
 80033ea:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033ec:	6882      	ldr	r2, [r0, #8]
 80033ee:	ea22 0404 	bic.w	r4, r2, r4
 80033f2:	6084      	str	r4, [r0, #8]
    }

    position++;
 80033f4:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 80033f6:	fa31 f203 	lsrs.w	r2, r1, r3
 80033fa:	d019      	beq.n	8003430 <HAL_GPIO_DeInit+0xe8>
    iocurrent = (GPIO_Pin) & (1U << position);
 80033fc:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 8003400:	ea12 0e01 	ands.w	lr, r2, r1
 8003404:	d0f6      	beq.n	80033f4 <HAL_GPIO_DeInit+0xac>
      tmp = SYSCFG->EXTICR[position >> 2];
 8003406:	f023 0503 	bic.w	r5, r3, #3
 800340a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800340e:	f8df b044 	ldr.w	fp, [pc, #68]	; 8003454 <HAL_GPIO_DeInit+0x10c>
 8003412:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8003416:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 800341a:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800341e:	00a4      	lsls	r4, r4, #2
 8003420:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8003424:	4558      	cmp	r0, fp
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8003426:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800342a:	d199      	bne.n	8003360 <HAL_GPIO_DeInit+0x18>
 800342c:	2400      	movs	r4, #0
 800342e:	e7a9      	b.n	8003384 <HAL_GPIO_DeInit+0x3c>
  }
}
 8003430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8003434:	fa07 f404 	lsl.w	r4, r7, r4
 8003438:	e7a4      	b.n	8003384 <HAL_GPIO_DeInit+0x3c>
 800343a:	f04f 0b02 	mov.w	fp, #2
 800343e:	fa0b f404 	lsl.w	r4, fp, r4
 8003442:	e79f      	b.n	8003384 <HAL_GPIO_DeInit+0x3c>
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010400 	.word	0x40010400
 800344c:	40020800 	.word	0x40020800
 8003450:	40020c00 	.word	0x40020c00
 8003454:	40020000 	.word	0x40020000

08003458 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003458:	b902      	cbnz	r2, 800345c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800345a:	0409      	lsls	r1, r1, #16
 800345c:	6181      	str	r1, [r0, #24]
  }
}
 800345e:	4770      	bx	lr

08003460 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 8003462:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800346a:	d116      	bne.n	800349a <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800346c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800346e:	00d2      	lsls	r2, r2, #3
 8003470:	d420      	bmi.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003474:	4919      	ldr	r1, [pc, #100]	; (80034dc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8003476:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800347a:	625a      	str	r2, [r3, #36]	; 0x24
 800347c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800347e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003482:	9201      	str	r2, [sp, #4]
 8003484:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003486:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003488:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800348a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800348e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003492:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8003496:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003498:	d013      	beq.n	80034c2 <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800349a:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800349c:	4a10      	ldr	r2, [pc, #64]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800349e:	6813      	ldr	r3, [r2, #0]
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	4303      	orrs	r3, r0
 80034a6:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034a8:	6813      	ldr	r3, [r2, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80034ae:	4058      	eors	r0, r3
 80034b0:	b002      	add	sp, #8
 80034b2:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80034bc:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80034c0:	d1eb      	bne.n	800349a <RCC_SetFlashLatencyFromMSIRange+0x3a>
 80034c2:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80034c6:	d1e8      	bne.n	800349a <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 80034c8:	4a05      	ldr	r2, [pc, #20]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 80034ca:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 80034cc:	6813      	ldr	r3, [r2, #0]
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	e7e2      	b.n	800349c <RCC_SetFlashLatencyFromMSIRange+0x3c>
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40007000 	.word	0x40007000
 80034e0:	40023c00 	.word	0x40023c00

080034e4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80034e4:	2800      	cmp	r0, #0
 80034e6:	f000 81f8 	beq.w	80038da <HAL_RCC_OscConfig+0x3f6>
{
 80034ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ee:	4aa2      	ldr	r2, [pc, #648]	; (8003778 <HAL_RCC_OscConfig+0x294>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f0:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f2:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034f4:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	07d9      	lsls	r1, r3, #31
 80034f8:	4604      	mov	r4, r0
{
 80034fa:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034fc:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003500:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003504:	d52e      	bpl.n	8003564 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003506:	2d08      	cmp	r5, #8
 8003508:	f000 8128 	beq.w	800375c <HAL_RCC_OscConfig+0x278>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800350c:	2d0c      	cmp	r5, #12
 800350e:	f000 8122 	beq.w	8003756 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003512:	6863      	ldr	r3, [r4, #4]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d00f      	beq.n	8003538 <HAL_RCC_OscConfig+0x54>
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8180 	beq.w	800381e <HAL_RCC_OscConfig+0x33a>
 800351e:	2b05      	cmp	r3, #5
 8003520:	4b95      	ldr	r3, [pc, #596]	; (8003778 <HAL_RCC_OscConfig+0x294>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	f000 81db 	beq.w	80038de <HAL_RCC_OscConfig+0x3fa>
 8003528:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	e004      	b.n	8003542 <HAL_RCC_OscConfig+0x5e>
 8003538:	4a8f      	ldr	r2, [pc, #572]	; (8003778 <HAL_RCC_OscConfig+0x294>)
 800353a:	6813      	ldr	r3, [r2, #0]
 800353c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003540:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003542:	f7fe ffcf 	bl	80024e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003546:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8003778 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 800354a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800354c:	e005      	b.n	800355a <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800354e:	f7fe ffc9 	bl	80024e4 <HAL_GetTick>
 8003552:	1bc0      	subs	r0, r0, r7
 8003554:	2864      	cmp	r0, #100	; 0x64
 8003556:	f200 815e 	bhi.w	8003816 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800355a:	f8d8 3000 	ldr.w	r3, [r8]
 800355e:	039b      	lsls	r3, r3, #14
 8003560:	d5f5      	bpl.n	800354e <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	0799      	lsls	r1, r3, #30
 8003566:	d522      	bpl.n	80035ae <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003568:	2d04      	cmp	r5, #4
 800356a:	f000 8114 	beq.w	8003796 <HAL_RCC_OscConfig+0x2b2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800356e:	2d0c      	cmp	r5, #12
 8003570:	f000 810e 	beq.w	8003790 <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003574:	68e3      	ldr	r3, [r4, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 8179 	beq.w	800386e <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 800357c:	2201      	movs	r2, #1
 800357e:	4b7f      	ldr	r3, [pc, #508]	; (800377c <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003580:	4f7d      	ldr	r7, [pc, #500]	; (8003778 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_ENABLE();
 8003582:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003584:	f7fe ffae 	bl	80024e4 <HAL_GetTick>
 8003588:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800358a:	e005      	b.n	8003598 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800358c:	f7fe ffaa 	bl	80024e4 <HAL_GetTick>
 8003590:	1b80      	subs	r0, r0, r6
 8003592:	2802      	cmp	r0, #2
 8003594:	f200 813f 	bhi.w	8003816 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	079b      	lsls	r3, r3, #30
 800359c:	d5f6      	bpl.n	800358c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6922      	ldr	r2, [r4, #16]
 80035a2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80035a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80035aa:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	06d9      	lsls	r1, r3, #27
 80035b0:	d525      	bpl.n	80035fe <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035b2:	2d00      	cmp	r5, #0
 80035b4:	f000 8098 	beq.w	80036e8 <HAL_RCC_OscConfig+0x204>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035b8:	69a3      	ldr	r3, [r4, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 816a 	beq.w	8003894 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_MSI_ENABLE();
 80035c0:	2201      	movs	r2, #1
 80035c2:	4b6e      	ldr	r3, [pc, #440]	; (800377c <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035c4:	4e6c      	ldr	r6, [pc, #432]	; (8003778 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_MSI_ENABLE();
 80035c6:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 80035c8:	f7fe ff8c 	bl	80024e4 <HAL_GetTick>
 80035cc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035ce:	e005      	b.n	80035dc <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035d0:	f7fe ff88 	bl	80024e4 <HAL_GetTick>
 80035d4:	1bc0      	subs	r0, r0, r7
 80035d6:	2802      	cmp	r0, #2
 80035d8:	f200 811d 	bhi.w	8003816 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035dc:	6833      	ldr	r3, [r6, #0]
 80035de:	059b      	lsls	r3, r3, #22
 80035e0:	d5f6      	bpl.n	80035d0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e2:	6873      	ldr	r3, [r6, #4]
 80035e4:	6a22      	ldr	r2, [r4, #32]
 80035e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80035ea:	4313      	orrs	r3, r2
 80035ec:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ee:	6873      	ldr	r3, [r6, #4]
 80035f0:	69e2      	ldr	r2, [r4, #28]
 80035f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80035fa:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	0719      	lsls	r1, r3, #28
 8003600:	d516      	bpl.n	8003630 <HAL_RCC_OscConfig+0x14c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003602:	6963      	ldr	r3, [r4, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8121 	beq.w	800384c <HAL_RCC_OscConfig+0x368>
      __HAL_RCC_LSI_ENABLE();
 800360a:	2201      	movs	r2, #1
 800360c:	4b5b      	ldr	r3, [pc, #364]	; (800377c <HAL_RCC_OscConfig+0x298>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800360e:	4f5a      	ldr	r7, [pc, #360]	; (8003778 <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_LSI_ENABLE();
 8003610:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8003614:	f7fe ff66 	bl	80024e4 <HAL_GetTick>
 8003618:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800361a:	e005      	b.n	8003628 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800361c:	f7fe ff62 	bl	80024e4 <HAL_GetTick>
 8003620:	1b80      	subs	r0, r0, r6
 8003622:	2802      	cmp	r0, #2
 8003624:	f200 80f7 	bhi.w	8003816 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362a:	079a      	lsls	r2, r3, #30
 800362c:	d5f6      	bpl.n	800361c <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	075e      	lsls	r6, r3, #29
 8003632:	d53b      	bpl.n	80036ac <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003634:	4b50      	ldr	r3, [pc, #320]	; (8003778 <HAL_RCC_OscConfig+0x294>)
 8003636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003638:	00d0      	lsls	r0, r2, #3
 800363a:	f100 8129 	bmi.w	8003890 <HAL_RCC_OscConfig+0x3ac>
      pwrclkchanged = SET;
 800363e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003642:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003646:	625a      	str	r2, [r3, #36]	; 0x24
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003652:	4f4b      	ldr	r7, [pc, #300]	; (8003780 <HAL_RCC_OscConfig+0x29c>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	05d9      	lsls	r1, r3, #23
 8003658:	f140 80cc 	bpl.w	80037f4 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800365c:	68a3      	ldr	r3, [r4, #8]
 800365e:	2b01      	cmp	r3, #1
 8003660:	f000 8175 	beq.w	800394e <HAL_RCC_OscConfig+0x46a>
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80a9 	beq.w	80037bc <HAL_RCC_OscConfig+0x2d8>
 800366a:	2b05      	cmp	r3, #5
 800366c:	4b42      	ldr	r3, [pc, #264]	; (8003778 <HAL_RCC_OscConfig+0x294>)
 800366e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003670:	f000 818b 	beq.w	800398a <HAL_RCC_OscConfig+0x4a6>
 8003674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003678:	635a      	str	r2, [r3, #52]	; 0x34
 800367a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003680:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003682:	f7fe ff2f 	bl	80024e4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800368a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800368c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8003778 <HAL_RCC_OscConfig+0x294>
 8003690:	e005      	b.n	800369e <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003692:	f7fe ff27 	bl	80024e4 <HAL_GetTick>
 8003696:	1bc0      	subs	r0, r0, r7
 8003698:	4548      	cmp	r0, r9
 800369a:	f200 80bc 	bhi.w	8003816 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800369e:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 80036a2:	059b      	lsls	r3, r3, #22
 80036a4:	d5f5      	bpl.n	8003692 <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 80036a6:	2e00      	cmp	r6, #0
 80036a8:	f040 814b 	bne.w	8003942 <HAL_RCC_OscConfig+0x45e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80036ae:	b1b8      	cbz	r0, 80036e0 <HAL_RCC_OscConfig+0x1fc>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b0:	2d0c      	cmp	r5, #12
 80036b2:	f000 8152 	beq.w	800395a <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	4b2f      	ldr	r3, [pc, #188]	; (800377c <HAL_RCC_OscConfig+0x298>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036be:	f000 8116 	beq.w	80038ee <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_PLL_DISABLE();
 80036c2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80036c4:	f7fe ff0e 	bl	80024e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036c8:	4d2b      	ldr	r5, [pc, #172]	; (8003778 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 80036ca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036cc:	e005      	b.n	80036da <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ce:	f7fe ff09 	bl	80024e4 <HAL_GetTick>
 80036d2:	1b00      	subs	r0, r0, r4
 80036d4:	2802      	cmp	r0, #2
 80036d6:	f200 809e 	bhi.w	8003816 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036da:	682b      	ldr	r3, [r5, #0]
 80036dc:	019b      	lsls	r3, r3, #6
 80036de:	d4f6      	bmi.n	80036ce <HAL_RCC_OscConfig+0x1ea>
  return HAL_OK;
 80036e0:	2000      	movs	r0, #0
}
 80036e2:	b003      	add	sp, #12
 80036e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036e8:	4b23      	ldr	r3, [pc, #140]	; (8003778 <HAL_RCC_OscConfig+0x294>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	059a      	lsls	r2, r3, #22
 80036ee:	d502      	bpl.n	80036f6 <HAL_RCC_OscConfig+0x212>
 80036f0:	69a3      	ldr	r3, [r4, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d03b      	beq.n	800376e <HAL_RCC_OscConfig+0x28a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036f6:	4e20      	ldr	r6, [pc, #128]	; (8003778 <HAL_RCC_OscConfig+0x294>)
 80036f8:	6a20      	ldr	r0, [r4, #32]
 80036fa:	6873      	ldr	r3, [r6, #4]
 80036fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003700:	4298      	cmp	r0, r3
 8003702:	f240 80d7 	bls.w	80038b4 <HAL_RCC_OscConfig+0x3d0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003706:	f7ff feab 	bl	8003460 <RCC_SetFlashLatencyFromMSIRange>
 800370a:	2800      	cmp	r0, #0
 800370c:	d12f      	bne.n	800376e <HAL_RCC_OscConfig+0x28a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800370e:	6872      	ldr	r2, [r6, #4]
 8003710:	6a23      	ldr	r3, [r4, #32]
 8003712:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003716:	431a      	orrs	r2, r3
 8003718:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800371a:	6872      	ldr	r2, [r6, #4]
 800371c:	69e1      	ldr	r1, [r4, #28]
 800371e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003722:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003726:	6072      	str	r2, [r6, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <HAL_RCC_OscConfig+0x294>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800372a:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800372c:	6891      	ldr	r1, [r2, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800372e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003732:	3301      	adds	r3, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003738:	4a12      	ldr	r2, [pc, #72]	; (8003784 <HAL_RCC_OscConfig+0x2a0>)
 800373a:	f3c1 1103 	ubfx	r1, r1, #4, #4
 800373e:	5c52      	ldrb	r2, [r2, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003740:	4811      	ldr	r0, [pc, #68]	; (8003788 <HAL_RCC_OscConfig+0x2a4>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003742:	40d3      	lsrs	r3, r2
        status = HAL_InitTick(uwTickPrio);
 8003744:	4a11      	ldr	r2, [pc, #68]	; (800378c <HAL_RCC_OscConfig+0x2a8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003746:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick(uwTickPrio);
 8003748:	6810      	ldr	r0, [r2, #0]
 800374a:	f7fe fe89 	bl	8002460 <HAL_InitTick>
        if(status != HAL_OK)
 800374e:	2800      	cmp	r0, #0
 8003750:	d1c7      	bne.n	80036e2 <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	e753      	b.n	80035fe <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003756:	2e00      	cmp	r6, #0
 8003758:	f43f aedb 	beq.w	8003512 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	4a06      	ldr	r2, [pc, #24]	; (8003778 <HAL_RCC_OscConfig+0x294>)
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	0392      	lsls	r2, r2, #14
 8003762:	f57f aeff 	bpl.w	8003564 <HAL_RCC_OscConfig+0x80>
 8003766:	6862      	ldr	r2, [r4, #4]
 8003768:	2a00      	cmp	r2, #0
 800376a:	f47f aefb 	bne.w	8003564 <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 800376e:	2001      	movs	r0, #1
}
 8003770:	b003      	add	sp, #12
 8003772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800
 800377c:	42470000 	.word	0x42470000
 8003780:	40007000 	.word	0x40007000
 8003784:	08007100 	.word	0x08007100
 8003788:	20000004 	.word	0x20000004
 800378c:	2000000c 	.word	0x2000000c
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003790:	2e00      	cmp	r6, #0
 8003792:	f47f aeef 	bne.w	8003574 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003796:	4a81      	ldr	r2, [pc, #516]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	0792      	lsls	r2, r2, #30
 800379c:	d502      	bpl.n	80037a4 <HAL_RCC_OscConfig+0x2c0>
 800379e:	68e2      	ldr	r2, [r4, #12]
 80037a0:	2a01      	cmp	r2, #1
 80037a2:	d1e4      	bne.n	800376e <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a4:	497d      	ldr	r1, [pc, #500]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80037a6:	6920      	ldr	r0, [r4, #16]
 80037a8:	684a      	ldr	r2, [r1, #4]
 80037aa:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80037ae:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80037b2:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037b4:	06d9      	lsls	r1, r3, #27
 80037b6:	f57f af22 	bpl.w	80035fe <HAL_RCC_OscConfig+0x11a>
 80037ba:	e6fa      	b.n	80035b2 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037bc:	4f77      	ldr	r7, [pc, #476]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037be:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037d0:	637b      	str	r3, [r7, #52]	; 0x34
      tickstart = HAL_GetTick();
 80037d2:	f7fe fe87 	bl	80024e4 <HAL_GetTick>
 80037d6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037d8:	e005      	b.n	80037e6 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fe fe83 	bl	80024e4 <HAL_GetTick>
 80037de:	eba0 0008 	sub.w	r0, r0, r8
 80037e2:	4548      	cmp	r0, r9
 80037e4:	d817      	bhi.n	8003816 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e8:	0598      	lsls	r0, r3, #22
 80037ea:	d4f6      	bmi.n	80037da <HAL_RCC_OscConfig+0x2f6>
    if(pwrclkchanged == SET)
 80037ec:	2e00      	cmp	r6, #0
 80037ee:	f43f af5d 	beq.w	80036ac <HAL_RCC_OscConfig+0x1c8>
 80037f2:	e0a6      	b.n	8003942 <HAL_RCC_OscConfig+0x45e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fa:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80037fc:	f7fe fe72 	bl	80024e4 <HAL_GetTick>
 8003800:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	05da      	lsls	r2, r3, #23
 8003806:	f53f af29 	bmi.w	800365c <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380a:	f7fe fe6b 	bl	80024e4 <HAL_GetTick>
 800380e:	eba0 0008 	sub.w	r0, r0, r8
 8003812:	2864      	cmp	r0, #100	; 0x64
 8003814:	d9f5      	bls.n	8003802 <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 8003816:	2003      	movs	r0, #3
}
 8003818:	b003      	add	sp, #12
 800381a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800381e:	4f5f      	ldr	r7, [pc, #380]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003830:	f7fe fe58 	bl	80024e4 <HAL_GetTick>
 8003834:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003836:	e005      	b.n	8003844 <HAL_RCC_OscConfig+0x360>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003838:	f7fe fe54 	bl	80024e4 <HAL_GetTick>
 800383c:	eba0 0008 	sub.w	r0, r0, r8
 8003840:	2864      	cmp	r0, #100	; 0x64
 8003842:	d8e8      	bhi.n	8003816 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	0398      	lsls	r0, r3, #14
 8003848:	d4f6      	bmi.n	8003838 <HAL_RCC_OscConfig+0x354>
 800384a:	e68a      	b.n	8003562 <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 800384c:	4a54      	ldr	r2, [pc, #336]	; (80039a0 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800384e:	4f53      	ldr	r7, [pc, #332]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
      __HAL_RCC_LSI_DISABLE();
 8003850:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8003854:	f7fe fe46 	bl	80024e4 <HAL_GetTick>
 8003858:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800385a:	e004      	b.n	8003866 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800385c:	f7fe fe42 	bl	80024e4 <HAL_GetTick>
 8003860:	1b80      	subs	r0, r0, r6
 8003862:	2802      	cmp	r0, #2
 8003864:	d8d7      	bhi.n	8003816 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003868:	079b      	lsls	r3, r3, #30
 800386a:	d4f7      	bmi.n	800385c <HAL_RCC_OscConfig+0x378>
 800386c:	e6df      	b.n	800362e <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 800386e:	4a4c      	ldr	r2, [pc, #304]	; (80039a0 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003870:	4f4a      	ldr	r7, [pc, #296]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_HSI_DISABLE();
 8003872:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003874:	f7fe fe36 	bl	80024e4 <HAL_GetTick>
 8003878:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800387a:	e004      	b.n	8003886 <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387c:	f7fe fe32 	bl	80024e4 <HAL_GetTick>
 8003880:	1b80      	subs	r0, r0, r6
 8003882:	2802      	cmp	r0, #2
 8003884:	d8c7      	bhi.n	8003816 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	0798      	lsls	r0, r3, #30
 800388a:	d4f7      	bmi.n	800387c <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	e68e      	b.n	80035ae <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 8003890:	2600      	movs	r6, #0
 8003892:	e6de      	b.n	8003652 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_MSI_DISABLE();
 8003894:	4a42      	ldr	r2, [pc, #264]	; (80039a0 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003896:	4f41      	ldr	r7, [pc, #260]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_MSI_DISABLE();
 8003898:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800389a:	f7fe fe23 	bl	80024e4 <HAL_GetTick>
 800389e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80038a0:	e004      	b.n	80038ac <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038a2:	f7fe fe1f 	bl	80024e4 <HAL_GetTick>
 80038a6:	1b80      	subs	r0, r0, r6
 80038a8:	2802      	cmp	r0, #2
 80038aa:	d8b4      	bhi.n	8003816 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	0598      	lsls	r0, r3, #22
 80038b0:	d4f7      	bmi.n	80038a2 <HAL_RCC_OscConfig+0x3be>
 80038b2:	e74e      	b.n	8003752 <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038b4:	6873      	ldr	r3, [r6, #4]
 80038b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80038ba:	4303      	orrs	r3, r0
 80038bc:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038be:	6873      	ldr	r3, [r6, #4]
 80038c0:	69e2      	ldr	r2, [r4, #28]
 80038c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80038ca:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038cc:	f7ff fdc8 	bl	8003460 <RCC_SetFlashLatencyFromMSIRange>
 80038d0:	2800      	cmp	r0, #0
 80038d2:	f47f af4c 	bne.w	800376e <HAL_RCC_OscConfig+0x28a>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80038d6:	6a23      	ldr	r3, [r4, #32]
 80038d8:	e726      	b.n	8003728 <HAL_RCC_OscConfig+0x244>
    return HAL_ERROR;
 80038da:	2001      	movs	r0, #1
}
 80038dc:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	e629      	b.n	8003542 <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 80038ee:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80038f0:	f7fe fdf8 	bl	80024e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038f4:	4e29      	ldr	r6, [pc, #164]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 80038f6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038f8:	e004      	b.n	8003904 <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fe fdf3 	bl	80024e4 <HAL_GetTick>
 80038fe:	1b40      	subs	r0, r0, r5
 8003900:	2802      	cmp	r0, #2
 8003902:	d888      	bhi.n	8003816 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003904:	6833      	ldr	r3, [r6, #0]
 8003906:	0199      	lsls	r1, r3, #6
 8003908:	d4f7      	bmi.n	80038fa <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800390a:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 800390e:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 8003910:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003912:	68b2      	ldr	r2, [r6, #8]
 8003914:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003916:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800391a:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800391c:	4a20      	ldr	r2, [pc, #128]	; (80039a0 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800391e:	4303      	orrs	r3, r0
 8003920:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 8003922:	6611      	str	r1, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003924:	f7fe fdde 	bl	80024e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003928:	4d1c      	ldr	r5, [pc, #112]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 800392a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800392c:	e005      	b.n	800393a <HAL_RCC_OscConfig+0x456>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392e:	f7fe fdd9 	bl	80024e4 <HAL_GetTick>
 8003932:	1b00      	subs	r0, r0, r4
 8003934:	2802      	cmp	r0, #2
 8003936:	f63f af6e 	bhi.w	8003816 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800393a:	682b      	ldr	r3, [r5, #0]
 800393c:	019a      	lsls	r2, r3, #6
 800393e:	d5f6      	bpl.n	800392e <HAL_RCC_OscConfig+0x44a>
 8003940:	e6ce      	b.n	80036e0 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003942:	4a16      	ldr	r2, [pc, #88]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003944:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394a:	6253      	str	r3, [r2, #36]	; 0x24
 800394c:	e6ae      	b.n	80036ac <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800394e:	4a13      	ldr	r2, [pc, #76]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003950:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003956:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003958:	e693      	b.n	8003682 <HAL_RCC_OscConfig+0x19e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800395a:	2801      	cmp	r0, #1
 800395c:	f43f aec1 	beq.w	80036e2 <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 8003964:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800396a:	4291      	cmp	r1, r2
 800396c:	f47f aeff 	bne.w	800376e <HAL_RCC_OscConfig+0x28a>
 8003970:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003972:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	4291      	cmp	r1, r2
 8003978:	f47f aef9 	bne.w	800376e <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800397c:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800397e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 8003982:	1a18      	subs	r0, r3, r0
 8003984:	bf18      	it	ne
 8003986:	2001      	movne	r0, #1
 8003988:	e6ab      	b.n	80036e2 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800398e:	635a      	str	r2, [r3, #52]	; 0x34
 8003990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003996:	635a      	str	r2, [r3, #52]	; 0x34
 8003998:	e673      	b.n	8003682 <HAL_RCC_OscConfig+0x19e>
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	42470000 	.word	0x42470000

080039a4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80039a4:	2800      	cmp	r0, #0
 80039a6:	f000 80c2 	beq.w	8003b2e <HAL_RCC_ClockConfig+0x18a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039aa:	4a7c      	ldr	r2, [pc, #496]	; (8003b9c <HAL_RCC_ClockConfig+0x1f8>)
{
 80039ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b0:	6813      	ldr	r3, [r2, #0]
 80039b2:	4604      	mov	r4, r0
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	428b      	cmp	r3, r1
 80039ba:	460d      	mov	r5, r1
 80039bc:	d213      	bcs.n	80039e6 <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	2901      	cmp	r1, #1
 80039c0:	d103      	bne.n	80039ca <HAL_RCC_ClockConfig+0x26>
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	f043 0304 	orr.w	r3, r3, #4
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4a74      	ldr	r2, [pc, #464]	; (8003b9c <HAL_RCC_ClockConfig+0x1f8>)
 80039cc:	6813      	ldr	r3, [r2, #0]
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	432b      	orrs	r3, r5
 80039d4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d6:	6813      	ldr	r3, [r2, #0]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	42ab      	cmp	r3, r5
 80039de:	d002      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 80039e0:	2001      	movs	r0, #1
}
 80039e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	0799      	lsls	r1, r3, #30
 80039ea:	d506      	bpl.n	80039fa <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ec:	496c      	ldr	r1, [pc, #432]	; (8003ba0 <HAL_RCC_ClockConfig+0x1fc>)
 80039ee:	68a0      	ldr	r0, [r4, #8]
 80039f0:	688a      	ldr	r2, [r1, #8]
 80039f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80039f6:	4302      	orrs	r2, r0
 80039f8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fa:	07da      	lsls	r2, r3, #31
 80039fc:	d529      	bpl.n	8003a52 <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fe:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a00:	4b67      	ldr	r3, [pc, #412]	; (8003ba0 <HAL_RCC_ClockConfig+0x1fc>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a02:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a04:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a06:	f000 808e 	beq.w	8003b26 <HAL_RCC_ClockConfig+0x182>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0a:	2a03      	cmp	r2, #3
 8003a0c:	f000 8085 	beq.w	8003b1a <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a10:	2a01      	cmp	r2, #1
 8003a12:	f000 80be 	beq.w	8003b92 <HAL_RCC_ClockConfig+0x1ee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a16:	0598      	lsls	r0, r3, #22
 8003a18:	d5e2      	bpl.n	80039e0 <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1a:	4e61      	ldr	r6, [pc, #388]	; (8003ba0 <HAL_RCC_ClockConfig+0x1fc>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a1c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a20:	68b3      	ldr	r3, [r6, #8]
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003a2a:	f7fe fd5b 	bl	80024e4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2e:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8003a30:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d055      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x13e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d05e      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xa6>
 8003a3e:	e066      	b.n	8003b0e <HAL_RCC_ClockConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a40:	f7fe fd50 	bl	80024e4 <HAL_GetTick>
 8003a44:	1bc0      	subs	r0, r0, r7
 8003a46:	4540      	cmp	r0, r8
 8003a48:	d873      	bhi.n	8003b32 <HAL_RCC_ClockConfig+0x18e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a4a:	68b3      	ldr	r3, [r6, #8]
 8003a4c:	f013 0f0c 	tst.w	r3, #12
 8003a50:	d1f6      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a52:	4a52      	ldr	r2, [pc, #328]	; (8003b9c <HAL_RCC_ClockConfig+0x1f8>)
 8003a54:	6813      	ldr	r3, [r2, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	42ab      	cmp	r3, r5
 8003a5c:	d906      	bls.n	8003a6c <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	6813      	ldr	r3, [r2, #0]
 8003a68:	07da      	lsls	r2, r3, #31
 8003a6a:	d4b9      	bmi.n	80039e0 <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	0759      	lsls	r1, r3, #29
 8003a70:	d506      	bpl.n	8003a80 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a72:	494b      	ldr	r1, [pc, #300]	; (8003ba0 <HAL_RCC_ClockConfig+0x1fc>)
 8003a74:	68e0      	ldr	r0, [r4, #12]
 8003a76:	688a      	ldr	r2, [r1, #8]
 8003a78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a7c:	4302      	orrs	r2, r0
 8003a7e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	071b      	lsls	r3, r3, #28
 8003a82:	d420      	bmi.n	8003ac6 <HAL_RCC_ClockConfig+0x122>
  tmpreg = RCC->CFGR;
 8003a84:	4946      	ldr	r1, [pc, #280]	; (8003ba0 <HAL_RCC_ClockConfig+0x1fc>)
 8003a86:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8003a88:	f002 030c 	and.w	r3, r2, #12
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d065      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x1b8>
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	d050      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x192>
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d044      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x17e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003a9c:	684b      	ldr	r3, [r1, #4]
 8003a9e:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aa6:	4b3e      	ldr	r3, [pc, #248]	; (8003ba0 <HAL_RCC_ClockConfig+0x1fc>)
 8003aa8:	4a3e      	ldr	r2, [pc, #248]	; (8003ba4 <HAL_RCC_ClockConfig+0x200>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 8003aac:	493e      	ldr	r1, [pc, #248]	; (8003ba8 <HAL_RCC_ClockConfig+0x204>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ab2:	5cd3      	ldrb	r3, [r2, r3]
 8003ab4:	4a3d      	ldr	r2, [pc, #244]	; (8003bac <HAL_RCC_ClockConfig+0x208>)
 8003ab6:	fa20 f303 	lsr.w	r3, r0, r3
}
 8003aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8003abe:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ac0:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 8003ac2:	f7fe bccd 	b.w	8002460 <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ac6:	4a36      	ldr	r2, [pc, #216]	; (8003ba0 <HAL_RCC_ClockConfig+0x1fc>)
 8003ac8:	6921      	ldr	r1, [r4, #16]
 8003aca:	6893      	ldr	r3, [r2, #8]
 8003acc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003ad0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ad4:	6093      	str	r3, [r2, #8]
 8003ad6:	e7d5      	b.n	8003a84 <HAL_RCC_ClockConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fe fd04 	bl	80024e4 <HAL_GetTick>
 8003adc:	1bc3      	subs	r3, r0, r7
 8003ade:	4543      	cmp	r3, r8
 8003ae0:	d827      	bhi.n	8003b32 <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ae2:	68b3      	ldr	r3, [r6, #8]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d1f5      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x134>
 8003aec:	e7b1      	b.n	8003a52 <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aee:	f7fe fcf9 	bl	80024e4 <HAL_GetTick>
 8003af2:	1bc0      	subs	r0, r0, r7
 8003af4:	4540      	cmp	r0, r8
 8003af6:	d81c      	bhi.n	8003b32 <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003af8:	68b3      	ldr	r3, [r6, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b0c      	cmp	r3, #12
 8003b00:	d1f5      	bne.n	8003aee <HAL_RCC_ClockConfig+0x14a>
 8003b02:	e7a6      	b.n	8003a52 <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b04:	f7fe fcee 	bl	80024e4 <HAL_GetTick>
 8003b08:	1bc0      	subs	r0, r0, r7
 8003b0a:	4540      	cmp	r0, r8
 8003b0c:	d811      	bhi.n	8003b32 <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b0e:	68b3      	ldr	r3, [r6, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d1f5      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x160>
 8003b18:	e79b      	b.n	8003a52 <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b1a:	019f      	lsls	r7, r3, #6
 8003b1c:	f53f af7d 	bmi.w	8003a1a <HAL_RCC_ClockConfig+0x76>
 8003b20:	e75e      	b.n	80039e0 <HAL_RCC_ClockConfig+0x3c>
      sysclockfreq = HSI_VALUE;
 8003b22:	4823      	ldr	r0, [pc, #140]	; (8003bb0 <HAL_RCC_ClockConfig+0x20c>)
 8003b24:	e7bf      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b26:	039b      	lsls	r3, r3, #14
 8003b28:	f53f af77 	bmi.w	8003a1a <HAL_RCC_ClockConfig+0x76>
 8003b2c:	e758      	b.n	80039e0 <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 8003b2e:	2001      	movs	r0, #1
}
 8003b30:	4770      	bx	lr
          return HAL_TIMEOUT;
 8003b32:	2003      	movs	r0, #3
 8003b34:	e755      	b.n	80039e2 <HAL_RCC_ClockConfig+0x3e>
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b36:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b38:	481e      	ldr	r0, [pc, #120]	; (8003bb4 <HAL_RCC_ClockConfig+0x210>)
 8003b3a:	f3c2 4183 	ubfx	r1, r2, #18, #4
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b3e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b42:	f3c2 5281 	ubfx	r2, r2, #22, #2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b46:	5c40      	ldrb	r0, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b48:	f102 0201 	add.w	r2, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b4c:	d008      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x1bc>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b4e:	491a      	ldr	r1, [pc, #104]	; (8003bb8 <HAL_RCC_ClockConfig+0x214>)
 8003b50:	2300      	movs	r3, #0
 8003b52:	fba0 0101 	umull	r0, r1, r0, r1
 8003b56:	f7fd faa3 	bl	80010a0 <__aeabi_uldivmod>
 8003b5a:	e7a4      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x102>
  switch (tmpreg & RCC_CFGR_SWS)
 8003b5c:	4816      	ldr	r0, [pc, #88]	; (8003bb8 <HAL_RCC_ClockConfig+0x214>)
 8003b5e:	e7a2      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x102>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b60:	0141      	lsls	r1, r0, #5
 8003b62:	1a0d      	subs	r5, r1, r0
 8003b64:	eb66 0606 	sbc.w	r6, r6, r6
 8003b68:	01b4      	lsls	r4, r6, #6
 8003b6a:	01a9      	lsls	r1, r5, #6
 8003b6c:	1b49      	subs	r1, r1, r5
 8003b6e:	ea44 6495 	orr.w	r4, r4, r5, lsr #26
 8003b72:	eb64 0406 	sbc.w	r4, r4, r6
 8003b76:	00e4      	lsls	r4, r4, #3
 8003b78:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003b7c:	00c9      	lsls	r1, r1, #3
 8003b7e:	1809      	adds	r1, r1, r0
 8003b80:	f144 0400 	adc.w	r4, r4, #0
 8003b84:	02a4      	lsls	r4, r4, #10
 8003b86:	0288      	lsls	r0, r1, #10
 8003b88:	ea44 5191 	orr.w	r1, r4, r1, lsr #22
 8003b8c:	f7fd fa88 	bl	80010a0 <__aeabi_uldivmod>
 8003b90:	e789      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b92:	079e      	lsls	r6, r3, #30
 8003b94:	f53f af41 	bmi.w	8003a1a <HAL_RCC_ClockConfig+0x76>
 8003b98:	e722      	b.n	80039e0 <HAL_RCC_ClockConfig+0x3c>
 8003b9a:	bf00      	nop
 8003b9c:	40023c00 	.word	0x40023c00
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	08007100 	.word	0x08007100
 8003ba8:	2000000c 	.word	0x2000000c
 8003bac:	20000004 	.word	0x20000004
 8003bb0:	00f42400 	.word	0x00f42400
 8003bb4:	08007118 	.word	0x08007118
 8003bb8:	016e3600 	.word	0x016e3600

08003bbc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003bbe:	4a05      	ldr	r2, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	4905      	ldr	r1, [pc, #20]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003bc4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003bc8:	5ccb      	ldrb	r3, [r1, r3]
 8003bca:	6810      	ldr	r0, [r2, #0]
}
 8003bcc:	40d8      	lsrs	r0, r3
 8003bce:	4770      	bx	lr
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	20000004 	.word	0x20000004
 8003bd8:	08007110 	.word	0x08007110

08003bdc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003bde:	4a05      	ldr	r2, [pc, #20]	; (8003bf4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	4905      	ldr	r1, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003be4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003be8:	5ccb      	ldrb	r3, [r1, r3]
 8003bea:	6810      	ldr	r0, [r2, #0]
}
 8003bec:	40d8      	lsrs	r0, r3
 8003bee:	4770      	bx	lr
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	20000004 	.word	0x20000004
 8003bf8:	08007110 	.word	0x08007110

08003bfc <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	f000 8081 	beq.w	8003d04 <HAL_UART_Init+0x108>
{
 8003c02:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c08:	4604      	mov	r4, r0
 8003c0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d070      	beq.n	8003cf4 <HAL_UART_Init+0xf8>
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c12:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c16:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c18:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8003c1a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c1c:	4302      	orrs	r2, r0
 8003c1e:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c20:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c24:	4302      	orrs	r2, r0
 8003c26:	69e0      	ldr	r0, [r4, #28]
 8003c28:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 8003c2a:	68d8      	ldr	r0, [r3, #12]
 8003c2c:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8003c30:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c32:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c34:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c36:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003c3a:	4329      	orrs	r1, r5
 8003c3c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003c3e:	68d9      	ldr	r1, [r3, #12]
 8003c40:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003c44:	f021 010c 	bic.w	r1, r1, #12
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c4c:	695a      	ldr	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003c4e:	492e      	ldr	r1, [pc, #184]	; (8003d08 <HAL_UART_Init+0x10c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c54:	4302      	orrs	r2, r0
  if((huart->Instance == USART1))
 8003c56:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c58:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1))
 8003c5a:	d050      	beq.n	8003cfe <HAL_UART_Init+0x102>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c5c:	f7ff ffae 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c60:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c6e:	6863      	ldr	r3, [r4, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c70:	d027      	beq.n	8003cc2 <HAL_UART_Init+0xc6>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c78:	2564      	movs	r5, #100	; 0x64
 8003c7a:	4824      	ldr	r0, [pc, #144]	; (8003d0c <HAL_UART_Init+0x110>)
 8003c7c:	6822      	ldr	r2, [r4, #0]
 8003c7e:	fba0 6103 	umull	r6, r1, r0, r3
 8003c82:	0949      	lsrs	r1, r1, #5
 8003c84:	fb05 3311 	mls	r3, r5, r1, r3
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	3332      	adds	r3, #50	; 0x32
 8003c8c:	fba0 0303 	umull	r0, r3, r0, r3
 8003c90:	0109      	lsls	r1, r1, #4
 8003c92:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8003c96:	6093      	str	r3, [r2, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003c9a:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9c:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 8003c9e:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003ca4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca6:	6953      	ldr	r3, [r2, #20]
 8003ca8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003cac:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003cae:	68d3      	ldr	r3, [r2, #12]
 8003cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cb4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb6:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cb8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 8003cc0:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cc8:	2364      	movs	r3, #100	; 0x64
 8003cca:	4e10      	ldr	r6, [pc, #64]	; (8003d0c <HAL_UART_Init+0x110>)
 8003ccc:	6822      	ldr	r2, [r4, #0]
 8003cce:	fba6 5100 	umull	r5, r1, r6, r0
 8003cd2:	094d      	lsrs	r5, r1, #5
 8003cd4:	fb03 0315 	mls	r3, r3, r5, r0
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	3332      	adds	r3, #50	; 0x32
 8003cdc:	fba6 1303 	umull	r1, r3, r6, r3
 8003ce0:	f3c3 1142 	ubfx	r1, r3, #5, #3
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8003cea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cee:	440b      	add	r3, r1
 8003cf0:	6093      	str	r3, [r2, #8]
 8003cf2:	e7d1      	b.n	8003c98 <HAL_UART_Init+0x9c>
    huart->Lock = HAL_UNLOCKED;
 8003cf4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003cf8:	f7fe fa88 	bl	800220c <HAL_UART_MspInit>
 8003cfc:	e789      	b.n	8003c12 <HAL_UART_Init+0x16>
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cfe:	f7ff ff6d 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 8003d02:	e7ad      	b.n	8003c60 <HAL_UART_Init+0x64>
    return HAL_ERROR;
 8003d04:	2001      	movs	r0, #1
}
 8003d06:	4770      	bx	lr
 8003d08:	40013800 	.word	0x40013800
 8003d0c:	51eb851f 	.word	0x51eb851f

08003d10 <HAL_UART_Transmit_DMA>:
{
 8003d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d12:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003d14:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8003d18:	2820      	cmp	r0, #32
 8003d1a:	d12d      	bne.n	8003d78 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 8003d1c:	b351      	cbz	r1, 8003d74 <HAL_UART_Transmit_DMA+0x64>
 8003d1e:	b34a      	cbz	r2, 8003d74 <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 8003d20:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8003d24:	2801      	cmp	r0, #1
 8003d26:	d027      	beq.n	8003d78 <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d28:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003d2a:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d2e:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003d32:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003d34:	4f11      	ldr	r7, [pc, #68]	; (8003d7c <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003d36:	4e12      	ldr	r6, [pc, #72]	; (8003d80 <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 8003d38:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 8003d3a:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 8003d3e:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 8003d40:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d44:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003d48:	4613      	mov	r3, r2
 8003d4a:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003d4c:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003d50:	4e0c      	ldr	r6, [pc, #48]	; (8003d84 <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003d52:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 8003d54:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003d56:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003d58:	f7ff f92c 	bl	8002fb4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003d5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d60:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8003d62:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003d64:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8003d66:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d70:	615a      	str	r2, [r3, #20]
}
 8003d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003d74:	2001      	movs	r0, #1
}
 8003d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003d78:	2002      	movs	r0, #2
}
 8003d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d7c:	08003e29 	.word	0x08003e29
 8003d80:	08003e55 	.word	0x08003e55
 8003d84:	08003e61 	.word	0x08003e61

08003d88 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d88:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d13f      	bne.n	8003e10 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 8003d90:	2900      	cmp	r1, #0
 8003d92:	d03b      	beq.n	8003e0c <HAL_UART_Receive_DMA+0x84>
 8003d94:	2a00      	cmp	r2, #0
 8003d96:	d039      	beq.n	8003e0c <HAL_UART_Receive_DMA+0x84>
{
 8003d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 8003d9a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003d9e:	4604      	mov	r4, r0
 8003da0:	2b01      	cmp	r3, #1
{
 8003da2:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 8003da4:	d036      	beq.n	8003e14 <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003da8:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dac:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 8003db0:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8003db2:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003db4:	4f19      	ldr	r7, [pc, #100]	; (8003e1c <HAL_UART_Receive_DMA+0x94>)
 8003db6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003db8:	4e19      	ldr	r6, [pc, #100]	; (8003e20 <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 8003dbc:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc0:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003dc2:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dc4:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003dc8:	460a      	mov	r2, r1
 8003dca:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003dcc:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003dd0:	4e14      	ldr	r6, [pc, #80]	; (8003e24 <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003dd2:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 8003dd4:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003dd6:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003dd8:	f7ff f8ec 	bl	8002fb4 <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003ddc:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	9501      	str	r5, [sp, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	9201      	str	r2, [sp, #4]
 8003de6:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 8003de8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003dec:	9201      	str	r2, [sp, #4]
 8003dee:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df6:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e06:	615a      	str	r2, [r3, #20]
}
 8003e08:	b003      	add	sp, #12
 8003e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003e0c:	2001      	movs	r0, #1
}
 8003e0e:	4770      	bx	lr
    return HAL_BUSY;
 8003e10:	2002      	movs	r0, #2
 8003e12:	4770      	bx	lr
 8003e14:	2002      	movs	r0, #2
}
 8003e16:	b003      	add	sp, #12
 8003e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	08003f0d 	.word	0x08003f0d
 8003e20:	08003ef1 	.word	0x08003ef1
 8003e24:	08003e61 	.word	0x08003e61

08003e28 <UART_DMATransmitCplt>:
{
 8003e28:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e2a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f013 0320 	ands.w	r3, r3, #32
 8003e34:	d10a      	bne.n	8003e4c <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e36:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 8003e38:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e3a:	6953      	ldr	r3, [r2, #20]
 8003e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e40:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e42:	68d3      	ldr	r3, [r2, #12]
 8003e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e48:	60d3      	str	r3, [r2, #12]
}
 8003e4a:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003e4c:	f7fd ff82 	bl	8001d54 <HAL_UART_TxCpltCallback>
}
 8003e50:	bd08      	pop	{r3, pc}
 8003e52:	bf00      	nop

08003e54 <UART_DMATxHalfCplt>:
{
 8003e54:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8003e56:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003e58:	f7fd ff68 	bl	8001d2c <HAL_UART_TxHalfCpltCallback>
}
 8003e5c:	bd08      	pop	{r3, pc}
 8003e5e:	bf00      	nop

08003e60 <UART_DMAError>:
{
 8003e60:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e62:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e64:	6803      	ldr	r3, [r0, #0]
 8003e66:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e68:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8003e6c:	2a21      	cmp	r2, #33	; 0x21
 8003e6e:	d00b      	beq.n	8003e88 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e70:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e72:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003e76:	2a22      	cmp	r2, #34	; 0x22
 8003e78:	d016      	beq.n	8003ea8 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003e7c:	f043 0310 	orr.w	r3, r3, #16
 8003e80:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8003e82:	f7fe f8ef 	bl	8002064 <HAL_UART_ErrorCallback>
}
 8003e86:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e88:	0609      	lsls	r1, r1, #24
 8003e8a:	d5f1      	bpl.n	8003e70 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8003e8c:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8003e8e:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 8003e90:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003e98:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003e9a:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e9e:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ea0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003ea4:	2a22      	cmp	r2, #34	; 0x22
 8003ea6:	d1e8      	bne.n	8003e7a <UART_DMAError+0x1a>
 8003ea8:	064a      	lsls	r2, r1, #25
 8003eaa:	d5e6      	bpl.n	8003e7a <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8003eac:	2200      	movs	r2, #0
 8003eae:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003eb6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ec2:	2a01      	cmp	r2, #1
 8003ec4:	d103      	bne.n	8003ece <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	f022 0210 	bic.w	r2, r2, #16
 8003ecc:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 8003ece:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003ed2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed6:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003ed8:	e7cf      	b.n	8003e7a <UART_DMAError+0x1a>
 8003eda:	bf00      	nop

08003edc <UART_DMAAbortOnError>:
{
 8003edc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003ede:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003ee2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ee4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003ee6:	f7fe f8bd 	bl	8002064 <HAL_UART_ErrorCallback>
}
 8003eea:	bd08      	pop	{r3, pc}

08003eec <HAL_UARTEx_RxEventCallback>:
}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop

08003ef0 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef0:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003ef2:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d002      	beq.n	8003f00 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8003efa:	f7fd ff59 	bl	8001db0 <HAL_UART_RxHalfCpltCallback>
}
 8003efe:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003f00:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003f02:	0849      	lsrs	r1, r1, #1
 8003f04:	f7ff fff2 	bl	8003eec <HAL_UARTEx_RxEventCallback>
}
 8003f08:	bd08      	pop	{r3, pc}
 8003f0a:	bf00      	nop

08003f0c <UART_DMAReceiveCplt>:
{
 8003f0c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f0e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f10:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f013 0320 	ands.w	r3, r3, #32
 8003f18:	d113      	bne.n	8003f42 <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f1c:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8003f1e:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f20:	68d3      	ldr	r3, [r2, #12]
 8003f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f26:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f28:	6953      	ldr	r3, [r2, #20]
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f30:	6953      	ldr	r3, [r2, #20]
 8003f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f36:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8003f38:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d009      	beq.n	8003f56 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f42:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d002      	beq.n	8003f4e <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 8003f48:	f7fd ff36 	bl	8001db8 <HAL_UART_RxCpltCallback>
}
 8003f4c:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f4e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003f50:	f7ff ffcc 	bl	8003eec <HAL_UARTEx_RxEventCallback>
}
 8003f54:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f56:	68d3      	ldr	r3, [r2, #12]
 8003f58:	f023 0310 	bic.w	r3, r3, #16
 8003f5c:	60d3      	str	r3, [r2, #12]
 8003f5e:	e7f0      	b.n	8003f42 <UART_DMAReceiveCplt+0x36>

08003f60 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f60:	6883      	ldr	r3, [r0, #8]
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	d03b      	beq.n	8003fe0 <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f68:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d030      	beq.n	8003fd0 <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f6e:	6803      	ldr	r3, [r0, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f76:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003f78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003f7e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003f86:	bb53      	cbnz	r3, 8003fde <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 8003f88:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f8c:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003f8e:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f90:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003f92:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f94:	f021 0120 	bic.w	r1, r1, #32
 8003f98:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f9a:	68d1      	ldr	r1, [r2, #12]
 8003f9c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003fa0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fa2:	6951      	ldr	r1, [r2, #20]
 8003fa4:	f021 0101 	bic.w	r1, r1, #1
 8003fa8:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003faa:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fae:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003fb0:	2901      	cmp	r1, #1
 8003fb2:	d120      	bne.n	8003ff6 <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb4:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb6:	68d1      	ldr	r1, [r2, #12]
 8003fb8:	f021 0110 	bic.w	r1, r1, #16
 8003fbc:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fbe:	6811      	ldr	r1, [r2, #0]
 8003fc0:	06c9      	lsls	r1, r1, #27
 8003fc2:	d422      	bmi.n	800400a <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003fc6:	f7ff ff91 	bl	8003eec <HAL_UARTEx_RxEventCallback>
}
 8003fca:	b003      	add	sp, #12
 8003fcc:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fd0:	6903      	ldr	r3, [r0, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1cb      	bne.n	8003f6e <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fd6:	6803      	ldr	r3, [r0, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	7013      	strb	r3, [r2, #0]
 8003fdc:	e7cc      	b.n	8003f78 <UART_Receive_IT.part.0.isra.0+0x18>
 8003fde:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe0:	6903      	ldr	r3, [r0, #16]
 8003fe2:	b96b      	cbnz	r3, 8004000 <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fe4:	6802      	ldr	r2, [r0, #0]
 8003fe6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003fe8:	6852      	ldr	r2, [r2, #4]
 8003fea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fee:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8003ff2:	6283      	str	r3, [r0, #40]	; 0x28
 8003ff4:	e7c3      	b.n	8003f7e <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8003ff6:	f7fd fedf 	bl	8001db8 <HAL_UART_RxCpltCallback>
}
 8003ffa:	b003      	add	sp, #12
 8003ffc:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004000:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004002:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	7013      	strb	r3, [r2, #0]
 8004008:	e7b6      	b.n	8003f78 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	6813      	ldr	r3, [r2, #0]
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	6853      	ldr	r3, [r2, #4]
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	9b01      	ldr	r3, [sp, #4]
 8004016:	e7d5      	b.n	8003fc4 <UART_Receive_IT.part.0.isra.0+0x64>

08004018 <HAL_UART_IRQHandler>:
{
 8004018:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800401a:	6803      	ldr	r3, [r0, #0]
{
 800401c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800401e:	681a      	ldr	r2, [r3, #0]
{
 8004020:	b083      	sub	sp, #12
  if (errorflags == RESET)
 8004022:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004026:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004028:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800402a:	d14e      	bne.n	80040ca <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800402c:	0695      	lsls	r5, r2, #26
 800402e:	d502      	bpl.n	8004036 <HAL_UART_IRQHandler+0x1e>
 8004030:	068d      	lsls	r5, r1, #26
 8004032:	f100 8090 	bmi.w	8004156 <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004036:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004038:	2801      	cmp	r0, #1
 800403a:	d00b      	beq.n	8004054 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800403c:	0610      	lsls	r0, r2, #24
 800403e:	d502      	bpl.n	8004046 <HAL_UART_IRQHandler+0x2e>
 8004040:	060d      	lsls	r5, r1, #24
 8004042:	f100 8092 	bmi.w	800416a <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004046:	0650      	lsls	r0, r2, #25
 8004048:	d502      	bpl.n	8004050 <HAL_UART_IRQHandler+0x38>
 800404a:	064a      	lsls	r2, r1, #25
 800404c:	f100 80ab 	bmi.w	80041a6 <HAL_UART_IRQHandler+0x18e>
}
 8004050:	b003      	add	sp, #12
 8004052:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004054:	06d0      	lsls	r0, r2, #27
 8004056:	d5f1      	bpl.n	800403c <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004058:	06cd      	lsls	r5, r1, #27
 800405a:	d5ef      	bpl.n	800403c <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800405c:	2100      	movs	r1, #0
 800405e:	9101      	str	r1, [sp, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	9201      	str	r2, [sp, #4]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	9201      	str	r2, [sp, #4]
 8004068:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004070:	f000 80d2 	beq.w	8004218 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004074:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004076:	6802      	ldr	r2, [r0, #0]
 8004078:	6852      	ldr	r2, [r2, #4]
 800407a:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800407c:	2a00      	cmp	r2, #0
 800407e:	d0e7      	beq.n	8004050 <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004080:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8004082:	4295      	cmp	r5, r2
 8004084:	d9e4      	bls.n	8004050 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8004086:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004088:	6982      	ldr	r2, [r0, #24]
 800408a:	2a20      	cmp	r2, #32
 800408c:	d016      	beq.n	80040bc <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004094:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a4:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 80040a6:	2220      	movs	r2, #32
 80040a8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ac:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	f022 0210 	bic.w	r2, r2, #16
 80040b4:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040b6:	f7fe ffc7 	bl	8003048 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ba:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 80040bc:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80040be:	4620      	mov	r0, r4
 80040c0:	1a69      	subs	r1, r5, r1
 80040c2:	b289      	uxth	r1, r1
 80040c4:	f7ff ff12 	bl	8003eec <HAL_UARTEx_RxEventCallback>
 80040c8:	e7c2      	b.n	8004050 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040ca:	f005 0501 	and.w	r5, r5, #1
 80040ce:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80040d2:	4328      	orrs	r0, r5
 80040d4:	d0af      	beq.n	8004036 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040d6:	07d0      	lsls	r0, r2, #31
 80040d8:	d505      	bpl.n	80040e6 <HAL_UART_IRQHandler+0xce>
 80040da:	05c8      	lsls	r0, r1, #23
 80040dc:	d503      	bpl.n	80040e6 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040de:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80040e0:	f040 0001 	orr.w	r0, r0, #1
 80040e4:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040e6:	0750      	lsls	r0, r2, #29
 80040e8:	d530      	bpl.n	800414c <HAL_UART_IRQHandler+0x134>
 80040ea:	b14d      	cbz	r5, 8004100 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040ec:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80040ee:	f040 0002 	orr.w	r0, r0, #2
 80040f2:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040f4:	0790      	lsls	r0, r2, #30
 80040f6:	d503      	bpl.n	8004100 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040f8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80040fa:	f040 0004 	orr.w	r0, r0, #4
 80040fe:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004100:	0710      	lsls	r0, r2, #28
 8004102:	d507      	bpl.n	8004114 <HAL_UART_IRQHandler+0xfc>
 8004104:	f001 0020 	and.w	r0, r1, #32
 8004108:	4328      	orrs	r0, r5
 800410a:	d003      	beq.n	8004114 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800410c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800410e:	f040 0008 	orr.w	r0, r0, #8
 8004112:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004114:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004116:	2800      	cmp	r0, #0
 8004118:	d09a      	beq.n	8004050 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800411a:	0690      	lsls	r0, r2, #26
 800411c:	d509      	bpl.n	8004132 <HAL_UART_IRQHandler+0x11a>
 800411e:	068a      	lsls	r2, r1, #26
 8004120:	d507      	bpl.n	8004132 <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004122:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004126:	2a22      	cmp	r2, #34	; 0x22
 8004128:	d103      	bne.n	8004132 <HAL_UART_IRQHandler+0x11a>
 800412a:	4620      	mov	r0, r4
 800412c:	f7ff ff18 	bl	8003f60 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004134:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004136:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800413a:	f005 0508 	and.w	r5, r5, #8
 800413e:	4315      	orrs	r5, r2
 8004140:	d13c      	bne.n	80041bc <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 8004142:	4620      	mov	r0, r4
 8004144:	f7fd ff8e 	bl	8002064 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004148:	6425      	str	r5, [r4, #64]	; 0x40
 800414a:	e781      	b.n	8004050 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800414c:	0790      	lsls	r0, r2, #30
 800414e:	d5d7      	bpl.n	8004100 <HAL_UART_IRQHandler+0xe8>
 8004150:	2d00      	cmp	r5, #0
 8004152:	d1d1      	bne.n	80040f8 <HAL_UART_IRQHandler+0xe0>
 8004154:	e7d4      	b.n	8004100 <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004156:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800415a:	2b22      	cmp	r3, #34	; 0x22
 800415c:	f47f af78 	bne.w	8004050 <HAL_UART_IRQHandler+0x38>
}
 8004160:	b003      	add	sp, #12
 8004162:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004166:	f7ff befb 	b.w	8003f60 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800416a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800416e:	2a21      	cmp	r2, #33	; 0x21
 8004170:	f47f af6e 	bne.w	8004050 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004174:	68a2      	ldr	r2, [r4, #8]
 8004176:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800417a:	d06e      	beq.n	800425a <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800417c:	6a22      	ldr	r2, [r4, #32]
 800417e:	1c51      	adds	r1, r2, #1
 8004180:	6221      	str	r1, [r4, #32]
 8004182:	7812      	ldrb	r2, [r2, #0]
 8004184:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004186:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004188:	3a01      	subs	r2, #1
 800418a:	b292      	uxth	r2, r2
 800418c:	84e2      	strh	r2, [r4, #38]	; 0x26
 800418e:	2a00      	cmp	r2, #0
 8004190:	f47f af5e 	bne.w	8004050 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800419a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041a2:	60da      	str	r2, [r3, #12]
 80041a4:	e754      	b.n	8004050 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 80041a6:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041a8:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80041aa:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80041b2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80041b6:	f7fd fdcd 	bl	8001d54 <HAL_UART_TxCpltCallback>
    return;
 80041ba:	e749      	b.n	8004050 <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80041ce:	2a01      	cmp	r2, #1
 80041d0:	d103      	bne.n	80041da <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	f022 0210 	bic.w	r2, r2, #16
 80041d8:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041da:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80041dc:	2120      	movs	r1, #32
 80041de:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	0655      	lsls	r5, r2, #25
 80041e8:	d512      	bpl.n	8004210 <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ea:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80041ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f2:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80041f4:	b160      	cbz	r0, 8004210 <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041f6:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <HAL_UART_IRQHandler+0x258>)
 80041f8:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041fa:	f7fe ff4d 	bl	8003098 <HAL_DMA_Abort_IT>
 80041fe:	2800      	cmp	r0, #0
 8004200:	f43f af26 	beq.w	8004050 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004204:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004206:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8004208:	b003      	add	sp, #12
 800420a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800420e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004210:	4620      	mov	r0, r4
 8004212:	f7fd ff27 	bl	8002064 <HAL_UART_ErrorCallback>
 8004216:	e71b      	b.n	8004050 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004218:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 800421a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800421c:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800421e:	b289      	uxth	r1, r1
 8004220:	2900      	cmp	r1, #0
 8004222:	f43f af15 	beq.w	8004050 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004226:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004228:	1a08      	subs	r0, r1, r0
 800422a:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800422c:	2900      	cmp	r1, #0
 800422e:	f43f af0f 	beq.w	8004050 <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 8004232:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004234:	68d8      	ldr	r0, [r3, #12]
 8004236:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800423a:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423c:	6958      	ldr	r0, [r3, #20]
 800423e:	f020 0001 	bic.w	r0, r0, #1
 8004242:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004244:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424a:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800424c:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424e:	f022 0210 	bic.w	r2, r2, #16
 8004252:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004254:	f7ff fe4a 	bl	8003eec <HAL_UARTEx_RxEventCallback>
 8004258:	e6fa      	b.n	8004050 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800425a:	6922      	ldr	r2, [r4, #16]
 800425c:	2a00      	cmp	r2, #0
 800425e:	d18d      	bne.n	800417c <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004260:	6a22      	ldr	r2, [r4, #32]
 8004262:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004266:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800426a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800426c:	6222      	str	r2, [r4, #32]
 800426e:	e78a      	b.n	8004186 <HAL_UART_IRQHandler+0x16e>
 8004270:	08003edd 	.word	0x08003edd

08004274 <__errno>:
 8004274:	4b01      	ldr	r3, [pc, #4]	; (800427c <__errno+0x8>)
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000010 	.word	0x20000010

08004280 <__libc_init_array>:
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	2600      	movs	r6, #0
 8004284:	4d0c      	ldr	r5, [pc, #48]	; (80042b8 <__libc_init_array+0x38>)
 8004286:	4c0d      	ldr	r4, [pc, #52]	; (80042bc <__libc_init_array+0x3c>)
 8004288:	1b64      	subs	r4, r4, r5
 800428a:	10a4      	asrs	r4, r4, #2
 800428c:	42a6      	cmp	r6, r4
 800428e:	d109      	bne.n	80042a4 <__libc_init_array+0x24>
 8004290:	f002 ff0e 	bl	80070b0 <_init>
 8004294:	2600      	movs	r6, #0
 8004296:	4d0a      	ldr	r5, [pc, #40]	; (80042c0 <__libc_init_array+0x40>)
 8004298:	4c0a      	ldr	r4, [pc, #40]	; (80042c4 <__libc_init_array+0x44>)
 800429a:	1b64      	subs	r4, r4, r5
 800429c:	10a4      	asrs	r4, r4, #2
 800429e:	42a6      	cmp	r6, r4
 80042a0:	d105      	bne.n	80042ae <__libc_init_array+0x2e>
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a8:	4798      	blx	r3
 80042aa:	3601      	adds	r6, #1
 80042ac:	e7ee      	b.n	800428c <__libc_init_array+0xc>
 80042ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b2:	4798      	blx	r3
 80042b4:	3601      	adds	r6, #1
 80042b6:	e7f2      	b.n	800429e <__libc_init_array+0x1e>
 80042b8:	08007504 	.word	0x08007504
 80042bc:	08007504 	.word	0x08007504
 80042c0:	08007504 	.word	0x08007504
 80042c4:	08007508 	.word	0x08007508

080042c8 <memset>:
 80042c8:	4603      	mov	r3, r0
 80042ca:	4402      	add	r2, r0
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d100      	bne.n	80042d2 <memset+0xa>
 80042d0:	4770      	bx	lr
 80042d2:	f803 1b01 	strb.w	r1, [r3], #1
 80042d6:	e7f9      	b.n	80042cc <memset+0x4>

080042d8 <__cvt>:
 80042d8:	2b00      	cmp	r3, #0
 80042da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042de:	461f      	mov	r7, r3
 80042e0:	bfbb      	ittet	lt
 80042e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80042e6:	461f      	movlt	r7, r3
 80042e8:	2300      	movge	r3, #0
 80042ea:	232d      	movlt	r3, #45	; 0x2d
 80042ec:	b088      	sub	sp, #32
 80042ee:	4614      	mov	r4, r2
 80042f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80042f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80042f4:	7013      	strb	r3, [r2, #0]
 80042f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80042f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80042fc:	f023 0820 	bic.w	r8, r3, #32
 8004300:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004304:	d005      	beq.n	8004312 <__cvt+0x3a>
 8004306:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800430a:	d100      	bne.n	800430e <__cvt+0x36>
 800430c:	3501      	adds	r5, #1
 800430e:	2302      	movs	r3, #2
 8004310:	e000      	b.n	8004314 <__cvt+0x3c>
 8004312:	2303      	movs	r3, #3
 8004314:	aa07      	add	r2, sp, #28
 8004316:	9204      	str	r2, [sp, #16]
 8004318:	aa06      	add	r2, sp, #24
 800431a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800431e:	e9cd 3500 	strd	r3, r5, [sp]
 8004322:	4622      	mov	r2, r4
 8004324:	463b      	mov	r3, r7
 8004326:	f000 fcf7 	bl	8004d18 <_dtoa_r>
 800432a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800432e:	4606      	mov	r6, r0
 8004330:	d102      	bne.n	8004338 <__cvt+0x60>
 8004332:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004334:	07db      	lsls	r3, r3, #31
 8004336:	d522      	bpl.n	800437e <__cvt+0xa6>
 8004338:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800433c:	eb06 0905 	add.w	r9, r6, r5
 8004340:	d110      	bne.n	8004364 <__cvt+0x8c>
 8004342:	7833      	ldrb	r3, [r6, #0]
 8004344:	2b30      	cmp	r3, #48	; 0x30
 8004346:	d10a      	bne.n	800435e <__cvt+0x86>
 8004348:	2200      	movs	r2, #0
 800434a:	2300      	movs	r3, #0
 800434c:	4620      	mov	r0, r4
 800434e:	4639      	mov	r1, r7
 8004350:	f7fc fb42 	bl	80009d8 <__aeabi_dcmpeq>
 8004354:	b918      	cbnz	r0, 800435e <__cvt+0x86>
 8004356:	f1c5 0501 	rsb	r5, r5, #1
 800435a:	f8ca 5000 	str.w	r5, [sl]
 800435e:	f8da 3000 	ldr.w	r3, [sl]
 8004362:	4499      	add	r9, r3
 8004364:	2200      	movs	r2, #0
 8004366:	2300      	movs	r3, #0
 8004368:	4620      	mov	r0, r4
 800436a:	4639      	mov	r1, r7
 800436c:	f7fc fb34 	bl	80009d8 <__aeabi_dcmpeq>
 8004370:	b108      	cbz	r0, 8004376 <__cvt+0x9e>
 8004372:	f8cd 901c 	str.w	r9, [sp, #28]
 8004376:	2230      	movs	r2, #48	; 0x30
 8004378:	9b07      	ldr	r3, [sp, #28]
 800437a:	454b      	cmp	r3, r9
 800437c:	d307      	bcc.n	800438e <__cvt+0xb6>
 800437e:	4630      	mov	r0, r6
 8004380:	9b07      	ldr	r3, [sp, #28]
 8004382:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004384:	1b9b      	subs	r3, r3, r6
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	b008      	add	sp, #32
 800438a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800438e:	1c59      	adds	r1, r3, #1
 8004390:	9107      	str	r1, [sp, #28]
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	e7f0      	b.n	8004378 <__cvt+0xa0>

08004396 <__exponent>:
 8004396:	4603      	mov	r3, r0
 8004398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800439a:	2900      	cmp	r1, #0
 800439c:	f803 2b02 	strb.w	r2, [r3], #2
 80043a0:	bfb6      	itet	lt
 80043a2:	222d      	movlt	r2, #45	; 0x2d
 80043a4:	222b      	movge	r2, #43	; 0x2b
 80043a6:	4249      	neglt	r1, r1
 80043a8:	2909      	cmp	r1, #9
 80043aa:	7042      	strb	r2, [r0, #1]
 80043ac:	dd2b      	ble.n	8004406 <__exponent+0x70>
 80043ae:	f10d 0407 	add.w	r4, sp, #7
 80043b2:	46a4      	mov	ip, r4
 80043b4:	270a      	movs	r7, #10
 80043b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80043ba:	460a      	mov	r2, r1
 80043bc:	46a6      	mov	lr, r4
 80043be:	fb07 1516 	mls	r5, r7, r6, r1
 80043c2:	2a63      	cmp	r2, #99	; 0x63
 80043c4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80043c8:	4631      	mov	r1, r6
 80043ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80043ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80043d2:	dcf0      	bgt.n	80043b6 <__exponent+0x20>
 80043d4:	3130      	adds	r1, #48	; 0x30
 80043d6:	f1ae 0502 	sub.w	r5, lr, #2
 80043da:	f804 1c01 	strb.w	r1, [r4, #-1]
 80043de:	4629      	mov	r1, r5
 80043e0:	1c44      	adds	r4, r0, #1
 80043e2:	4561      	cmp	r1, ip
 80043e4:	d30a      	bcc.n	80043fc <__exponent+0x66>
 80043e6:	f10d 0209 	add.w	r2, sp, #9
 80043ea:	eba2 020e 	sub.w	r2, r2, lr
 80043ee:	4565      	cmp	r5, ip
 80043f0:	bf88      	it	hi
 80043f2:	2200      	movhi	r2, #0
 80043f4:	4413      	add	r3, r2
 80043f6:	1a18      	subs	r0, r3, r0
 80043f8:	b003      	add	sp, #12
 80043fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004400:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004404:	e7ed      	b.n	80043e2 <__exponent+0x4c>
 8004406:	2330      	movs	r3, #48	; 0x30
 8004408:	3130      	adds	r1, #48	; 0x30
 800440a:	7083      	strb	r3, [r0, #2]
 800440c:	70c1      	strb	r1, [r0, #3]
 800440e:	1d03      	adds	r3, r0, #4
 8004410:	e7f1      	b.n	80043f6 <__exponent+0x60>
	...

08004414 <_printf_float>:
 8004414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004418:	b091      	sub	sp, #68	; 0x44
 800441a:	460c      	mov	r4, r1
 800441c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004420:	4616      	mov	r6, r2
 8004422:	461f      	mov	r7, r3
 8004424:	4605      	mov	r5, r0
 8004426:	f001 fa65 	bl	80058f4 <_localeconv_r>
 800442a:	6803      	ldr	r3, [r0, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	9309      	str	r3, [sp, #36]	; 0x24
 8004430:	f7fb fea6 	bl	8000180 <strlen>
 8004434:	2300      	movs	r3, #0
 8004436:	930e      	str	r3, [sp, #56]	; 0x38
 8004438:	f8d8 3000 	ldr.w	r3, [r8]
 800443c:	900a      	str	r0, [sp, #40]	; 0x28
 800443e:	3307      	adds	r3, #7
 8004440:	f023 0307 	bic.w	r3, r3, #7
 8004444:	f103 0208 	add.w	r2, r3, #8
 8004448:	f894 9018 	ldrb.w	r9, [r4, #24]
 800444c:	f8d4 b000 	ldr.w	fp, [r4]
 8004450:	f8c8 2000 	str.w	r2, [r8]
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800445c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004460:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004464:	930b      	str	r3, [sp, #44]	; 0x2c
 8004466:	f04f 32ff 	mov.w	r2, #4294967295
 800446a:	4640      	mov	r0, r8
 800446c:	4b9c      	ldr	r3, [pc, #624]	; (80046e0 <_printf_float+0x2cc>)
 800446e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004470:	f7fc fae4 	bl	8000a3c <__aeabi_dcmpun>
 8004474:	bb70      	cbnz	r0, 80044d4 <_printf_float+0xc0>
 8004476:	f04f 32ff 	mov.w	r2, #4294967295
 800447a:	4640      	mov	r0, r8
 800447c:	4b98      	ldr	r3, [pc, #608]	; (80046e0 <_printf_float+0x2cc>)
 800447e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004480:	f7fc fabe 	bl	8000a00 <__aeabi_dcmple>
 8004484:	bb30      	cbnz	r0, 80044d4 <_printf_float+0xc0>
 8004486:	2200      	movs	r2, #0
 8004488:	2300      	movs	r3, #0
 800448a:	4640      	mov	r0, r8
 800448c:	4651      	mov	r1, sl
 800448e:	f7fc faad 	bl	80009ec <__aeabi_dcmplt>
 8004492:	b110      	cbz	r0, 800449a <_printf_float+0x86>
 8004494:	232d      	movs	r3, #45	; 0x2d
 8004496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800449a:	4b92      	ldr	r3, [pc, #584]	; (80046e4 <_printf_float+0x2d0>)
 800449c:	4892      	ldr	r0, [pc, #584]	; (80046e8 <_printf_float+0x2d4>)
 800449e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044a2:	bf94      	ite	ls
 80044a4:	4698      	movls	r8, r3
 80044a6:	4680      	movhi	r8, r0
 80044a8:	2303      	movs	r3, #3
 80044aa:	f04f 0a00 	mov.w	sl, #0
 80044ae:	6123      	str	r3, [r4, #16]
 80044b0:	f02b 0304 	bic.w	r3, fp, #4
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	4633      	mov	r3, r6
 80044b8:	4621      	mov	r1, r4
 80044ba:	4628      	mov	r0, r5
 80044bc:	9700      	str	r7, [sp, #0]
 80044be:	aa0f      	add	r2, sp, #60	; 0x3c
 80044c0:	f000 f9d4 	bl	800486c <_printf_common>
 80044c4:	3001      	adds	r0, #1
 80044c6:	f040 8090 	bne.w	80045ea <_printf_float+0x1d6>
 80044ca:	f04f 30ff 	mov.w	r0, #4294967295
 80044ce:	b011      	add	sp, #68	; 0x44
 80044d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d4:	4642      	mov	r2, r8
 80044d6:	4653      	mov	r3, sl
 80044d8:	4640      	mov	r0, r8
 80044da:	4651      	mov	r1, sl
 80044dc:	f7fc faae 	bl	8000a3c <__aeabi_dcmpun>
 80044e0:	b148      	cbz	r0, 80044f6 <_printf_float+0xe2>
 80044e2:	f1ba 0f00 	cmp.w	sl, #0
 80044e6:	bfb8      	it	lt
 80044e8:	232d      	movlt	r3, #45	; 0x2d
 80044ea:	4880      	ldr	r0, [pc, #512]	; (80046ec <_printf_float+0x2d8>)
 80044ec:	bfb8      	it	lt
 80044ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80044f2:	4b7f      	ldr	r3, [pc, #508]	; (80046f0 <_printf_float+0x2dc>)
 80044f4:	e7d3      	b.n	800449e <_printf_float+0x8a>
 80044f6:	6863      	ldr	r3, [r4, #4]
 80044f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	d142      	bne.n	8004586 <_printf_float+0x172>
 8004500:	2306      	movs	r3, #6
 8004502:	6063      	str	r3, [r4, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	9206      	str	r2, [sp, #24]
 8004508:	aa0e      	add	r2, sp, #56	; 0x38
 800450a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800450e:	aa0d      	add	r2, sp, #52	; 0x34
 8004510:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004514:	9203      	str	r2, [sp, #12]
 8004516:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800451a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800451e:	6023      	str	r3, [r4, #0]
 8004520:	6863      	ldr	r3, [r4, #4]
 8004522:	4642      	mov	r2, r8
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	4628      	mov	r0, r5
 8004528:	4653      	mov	r3, sl
 800452a:	910b      	str	r1, [sp, #44]	; 0x2c
 800452c:	f7ff fed4 	bl	80042d8 <__cvt>
 8004530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004532:	4680      	mov	r8, r0
 8004534:	2947      	cmp	r1, #71	; 0x47
 8004536:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004538:	d108      	bne.n	800454c <_printf_float+0x138>
 800453a:	1cc8      	adds	r0, r1, #3
 800453c:	db02      	blt.n	8004544 <_printf_float+0x130>
 800453e:	6863      	ldr	r3, [r4, #4]
 8004540:	4299      	cmp	r1, r3
 8004542:	dd40      	ble.n	80045c6 <_printf_float+0x1b2>
 8004544:	f1a9 0902 	sub.w	r9, r9, #2
 8004548:	fa5f f989 	uxtb.w	r9, r9
 800454c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004550:	d81f      	bhi.n	8004592 <_printf_float+0x17e>
 8004552:	464a      	mov	r2, r9
 8004554:	3901      	subs	r1, #1
 8004556:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800455a:	910d      	str	r1, [sp, #52]	; 0x34
 800455c:	f7ff ff1b 	bl	8004396 <__exponent>
 8004560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004562:	4682      	mov	sl, r0
 8004564:	1813      	adds	r3, r2, r0
 8004566:	2a01      	cmp	r2, #1
 8004568:	6123      	str	r3, [r4, #16]
 800456a:	dc02      	bgt.n	8004572 <_printf_float+0x15e>
 800456c:	6822      	ldr	r2, [r4, #0]
 800456e:	07d2      	lsls	r2, r2, #31
 8004570:	d501      	bpl.n	8004576 <_printf_float+0x162>
 8004572:	3301      	adds	r3, #1
 8004574:	6123      	str	r3, [r4, #16]
 8004576:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800457a:	2b00      	cmp	r3, #0
 800457c:	d09b      	beq.n	80044b6 <_printf_float+0xa2>
 800457e:	232d      	movs	r3, #45	; 0x2d
 8004580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004584:	e797      	b.n	80044b6 <_printf_float+0xa2>
 8004586:	2947      	cmp	r1, #71	; 0x47
 8004588:	d1bc      	bne.n	8004504 <_printf_float+0xf0>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ba      	bne.n	8004504 <_printf_float+0xf0>
 800458e:	2301      	movs	r3, #1
 8004590:	e7b7      	b.n	8004502 <_printf_float+0xee>
 8004592:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004596:	d118      	bne.n	80045ca <_printf_float+0x1b6>
 8004598:	2900      	cmp	r1, #0
 800459a:	6863      	ldr	r3, [r4, #4]
 800459c:	dd0b      	ble.n	80045b6 <_printf_float+0x1a2>
 800459e:	6121      	str	r1, [r4, #16]
 80045a0:	b913      	cbnz	r3, 80045a8 <_printf_float+0x194>
 80045a2:	6822      	ldr	r2, [r4, #0]
 80045a4:	07d0      	lsls	r0, r2, #31
 80045a6:	d502      	bpl.n	80045ae <_printf_float+0x19a>
 80045a8:	3301      	adds	r3, #1
 80045aa:	440b      	add	r3, r1
 80045ac:	6123      	str	r3, [r4, #16]
 80045ae:	f04f 0a00 	mov.w	sl, #0
 80045b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80045b4:	e7df      	b.n	8004576 <_printf_float+0x162>
 80045b6:	b913      	cbnz	r3, 80045be <_printf_float+0x1aa>
 80045b8:	6822      	ldr	r2, [r4, #0]
 80045ba:	07d2      	lsls	r2, r2, #31
 80045bc:	d501      	bpl.n	80045c2 <_printf_float+0x1ae>
 80045be:	3302      	adds	r3, #2
 80045c0:	e7f4      	b.n	80045ac <_printf_float+0x198>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e7f2      	b.n	80045ac <_printf_float+0x198>
 80045c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80045ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045cc:	4299      	cmp	r1, r3
 80045ce:	db05      	blt.n	80045dc <_printf_float+0x1c8>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	6121      	str	r1, [r4, #16]
 80045d4:	07d8      	lsls	r0, r3, #31
 80045d6:	d5ea      	bpl.n	80045ae <_printf_float+0x19a>
 80045d8:	1c4b      	adds	r3, r1, #1
 80045da:	e7e7      	b.n	80045ac <_printf_float+0x198>
 80045dc:	2900      	cmp	r1, #0
 80045de:	bfcc      	ite	gt
 80045e0:	2201      	movgt	r2, #1
 80045e2:	f1c1 0202 	rsble	r2, r1, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	e7e0      	b.n	80045ac <_printf_float+0x198>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	055a      	lsls	r2, r3, #21
 80045ee:	d407      	bmi.n	8004600 <_printf_float+0x1ec>
 80045f0:	6923      	ldr	r3, [r4, #16]
 80045f2:	4642      	mov	r2, r8
 80045f4:	4631      	mov	r1, r6
 80045f6:	4628      	mov	r0, r5
 80045f8:	47b8      	blx	r7
 80045fa:	3001      	adds	r0, #1
 80045fc:	d12b      	bne.n	8004656 <_printf_float+0x242>
 80045fe:	e764      	b.n	80044ca <_printf_float+0xb6>
 8004600:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004604:	f240 80dd 	bls.w	80047c2 <_printf_float+0x3ae>
 8004608:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800460c:	2200      	movs	r2, #0
 800460e:	2300      	movs	r3, #0
 8004610:	f7fc f9e2 	bl	80009d8 <__aeabi_dcmpeq>
 8004614:	2800      	cmp	r0, #0
 8004616:	d033      	beq.n	8004680 <_printf_float+0x26c>
 8004618:	2301      	movs	r3, #1
 800461a:	4631      	mov	r1, r6
 800461c:	4628      	mov	r0, r5
 800461e:	4a35      	ldr	r2, [pc, #212]	; (80046f4 <_printf_float+0x2e0>)
 8004620:	47b8      	blx	r7
 8004622:	3001      	adds	r0, #1
 8004624:	f43f af51 	beq.w	80044ca <_printf_float+0xb6>
 8004628:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800462c:	429a      	cmp	r2, r3
 800462e:	db02      	blt.n	8004636 <_printf_float+0x222>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	07d8      	lsls	r0, r3, #31
 8004634:	d50f      	bpl.n	8004656 <_printf_float+0x242>
 8004636:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800463a:	4631      	mov	r1, r6
 800463c:	4628      	mov	r0, r5
 800463e:	47b8      	blx	r7
 8004640:	3001      	adds	r0, #1
 8004642:	f43f af42 	beq.w	80044ca <_printf_float+0xb6>
 8004646:	f04f 0800 	mov.w	r8, #0
 800464a:	f104 091a 	add.w	r9, r4, #26
 800464e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004650:	3b01      	subs	r3, #1
 8004652:	4543      	cmp	r3, r8
 8004654:	dc09      	bgt.n	800466a <_printf_float+0x256>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	079b      	lsls	r3, r3, #30
 800465a:	f100 8102 	bmi.w	8004862 <_printf_float+0x44e>
 800465e:	68e0      	ldr	r0, [r4, #12]
 8004660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004662:	4298      	cmp	r0, r3
 8004664:	bfb8      	it	lt
 8004666:	4618      	movlt	r0, r3
 8004668:	e731      	b.n	80044ce <_printf_float+0xba>
 800466a:	2301      	movs	r3, #1
 800466c:	464a      	mov	r2, r9
 800466e:	4631      	mov	r1, r6
 8004670:	4628      	mov	r0, r5
 8004672:	47b8      	blx	r7
 8004674:	3001      	adds	r0, #1
 8004676:	f43f af28 	beq.w	80044ca <_printf_float+0xb6>
 800467a:	f108 0801 	add.w	r8, r8, #1
 800467e:	e7e6      	b.n	800464e <_printf_float+0x23a>
 8004680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004682:	2b00      	cmp	r3, #0
 8004684:	dc38      	bgt.n	80046f8 <_printf_float+0x2e4>
 8004686:	2301      	movs	r3, #1
 8004688:	4631      	mov	r1, r6
 800468a:	4628      	mov	r0, r5
 800468c:	4a19      	ldr	r2, [pc, #100]	; (80046f4 <_printf_float+0x2e0>)
 800468e:	47b8      	blx	r7
 8004690:	3001      	adds	r0, #1
 8004692:	f43f af1a 	beq.w	80044ca <_printf_float+0xb6>
 8004696:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800469a:	4313      	orrs	r3, r2
 800469c:	d102      	bne.n	80046a4 <_printf_float+0x290>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	07d9      	lsls	r1, r3, #31
 80046a2:	d5d8      	bpl.n	8004656 <_printf_float+0x242>
 80046a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046a8:	4631      	mov	r1, r6
 80046aa:	4628      	mov	r0, r5
 80046ac:	47b8      	blx	r7
 80046ae:	3001      	adds	r0, #1
 80046b0:	f43f af0b 	beq.w	80044ca <_printf_float+0xb6>
 80046b4:	f04f 0900 	mov.w	r9, #0
 80046b8:	f104 0a1a 	add.w	sl, r4, #26
 80046bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046be:	425b      	negs	r3, r3
 80046c0:	454b      	cmp	r3, r9
 80046c2:	dc01      	bgt.n	80046c8 <_printf_float+0x2b4>
 80046c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046c6:	e794      	b.n	80045f2 <_printf_float+0x1de>
 80046c8:	2301      	movs	r3, #1
 80046ca:	4652      	mov	r2, sl
 80046cc:	4631      	mov	r1, r6
 80046ce:	4628      	mov	r0, r5
 80046d0:	47b8      	blx	r7
 80046d2:	3001      	adds	r0, #1
 80046d4:	f43f aef9 	beq.w	80044ca <_printf_float+0xb6>
 80046d8:	f109 0901 	add.w	r9, r9, #1
 80046dc:	e7ee      	b.n	80046bc <_printf_float+0x2a8>
 80046de:	bf00      	nop
 80046e0:	7fefffff 	.word	0x7fefffff
 80046e4:	08007128 	.word	0x08007128
 80046e8:	0800712c 	.word	0x0800712c
 80046ec:	08007134 	.word	0x08007134
 80046f0:	08007130 	.word	0x08007130
 80046f4:	08007138 	.word	0x08007138
 80046f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046fc:	429a      	cmp	r2, r3
 80046fe:	bfa8      	it	ge
 8004700:	461a      	movge	r2, r3
 8004702:	2a00      	cmp	r2, #0
 8004704:	4691      	mov	r9, r2
 8004706:	dc37      	bgt.n	8004778 <_printf_float+0x364>
 8004708:	f04f 0b00 	mov.w	fp, #0
 800470c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004710:	f104 021a 	add.w	r2, r4, #26
 8004714:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004718:	ebaa 0309 	sub.w	r3, sl, r9
 800471c:	455b      	cmp	r3, fp
 800471e:	dc33      	bgt.n	8004788 <_printf_float+0x374>
 8004720:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004724:	429a      	cmp	r2, r3
 8004726:	db3b      	blt.n	80047a0 <_printf_float+0x38c>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	07da      	lsls	r2, r3, #31
 800472c:	d438      	bmi.n	80047a0 <_printf_float+0x38c>
 800472e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004730:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004732:	eba3 020a 	sub.w	r2, r3, sl
 8004736:	eba3 0901 	sub.w	r9, r3, r1
 800473a:	4591      	cmp	r9, r2
 800473c:	bfa8      	it	ge
 800473e:	4691      	movge	r9, r2
 8004740:	f1b9 0f00 	cmp.w	r9, #0
 8004744:	dc34      	bgt.n	80047b0 <_printf_float+0x39c>
 8004746:	f04f 0800 	mov.w	r8, #0
 800474a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800474e:	f104 0a1a 	add.w	sl, r4, #26
 8004752:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	eba3 0309 	sub.w	r3, r3, r9
 800475c:	4543      	cmp	r3, r8
 800475e:	f77f af7a 	ble.w	8004656 <_printf_float+0x242>
 8004762:	2301      	movs	r3, #1
 8004764:	4652      	mov	r2, sl
 8004766:	4631      	mov	r1, r6
 8004768:	4628      	mov	r0, r5
 800476a:	47b8      	blx	r7
 800476c:	3001      	adds	r0, #1
 800476e:	f43f aeac 	beq.w	80044ca <_printf_float+0xb6>
 8004772:	f108 0801 	add.w	r8, r8, #1
 8004776:	e7ec      	b.n	8004752 <_printf_float+0x33e>
 8004778:	4613      	mov	r3, r2
 800477a:	4631      	mov	r1, r6
 800477c:	4642      	mov	r2, r8
 800477e:	4628      	mov	r0, r5
 8004780:	47b8      	blx	r7
 8004782:	3001      	adds	r0, #1
 8004784:	d1c0      	bne.n	8004708 <_printf_float+0x2f4>
 8004786:	e6a0      	b.n	80044ca <_printf_float+0xb6>
 8004788:	2301      	movs	r3, #1
 800478a:	4631      	mov	r1, r6
 800478c:	4628      	mov	r0, r5
 800478e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004790:	47b8      	blx	r7
 8004792:	3001      	adds	r0, #1
 8004794:	f43f ae99 	beq.w	80044ca <_printf_float+0xb6>
 8004798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800479a:	f10b 0b01 	add.w	fp, fp, #1
 800479e:	e7b9      	b.n	8004714 <_printf_float+0x300>
 80047a0:	4631      	mov	r1, r6
 80047a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047a6:	4628      	mov	r0, r5
 80047a8:	47b8      	blx	r7
 80047aa:	3001      	adds	r0, #1
 80047ac:	d1bf      	bne.n	800472e <_printf_float+0x31a>
 80047ae:	e68c      	b.n	80044ca <_printf_float+0xb6>
 80047b0:	464b      	mov	r3, r9
 80047b2:	4631      	mov	r1, r6
 80047b4:	4628      	mov	r0, r5
 80047b6:	eb08 020a 	add.w	r2, r8, sl
 80047ba:	47b8      	blx	r7
 80047bc:	3001      	adds	r0, #1
 80047be:	d1c2      	bne.n	8004746 <_printf_float+0x332>
 80047c0:	e683      	b.n	80044ca <_printf_float+0xb6>
 80047c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047c4:	2a01      	cmp	r2, #1
 80047c6:	dc01      	bgt.n	80047cc <_printf_float+0x3b8>
 80047c8:	07db      	lsls	r3, r3, #31
 80047ca:	d537      	bpl.n	800483c <_printf_float+0x428>
 80047cc:	2301      	movs	r3, #1
 80047ce:	4642      	mov	r2, r8
 80047d0:	4631      	mov	r1, r6
 80047d2:	4628      	mov	r0, r5
 80047d4:	47b8      	blx	r7
 80047d6:	3001      	adds	r0, #1
 80047d8:	f43f ae77 	beq.w	80044ca <_printf_float+0xb6>
 80047dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047e0:	4631      	mov	r1, r6
 80047e2:	4628      	mov	r0, r5
 80047e4:	47b8      	blx	r7
 80047e6:	3001      	adds	r0, #1
 80047e8:	f43f ae6f 	beq.w	80044ca <_printf_float+0xb6>
 80047ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047f0:	2200      	movs	r2, #0
 80047f2:	2300      	movs	r3, #0
 80047f4:	f7fc f8f0 	bl	80009d8 <__aeabi_dcmpeq>
 80047f8:	b9d8      	cbnz	r0, 8004832 <_printf_float+0x41e>
 80047fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047fc:	f108 0201 	add.w	r2, r8, #1
 8004800:	3b01      	subs	r3, #1
 8004802:	4631      	mov	r1, r6
 8004804:	4628      	mov	r0, r5
 8004806:	47b8      	blx	r7
 8004808:	3001      	adds	r0, #1
 800480a:	d10e      	bne.n	800482a <_printf_float+0x416>
 800480c:	e65d      	b.n	80044ca <_printf_float+0xb6>
 800480e:	2301      	movs	r3, #1
 8004810:	464a      	mov	r2, r9
 8004812:	4631      	mov	r1, r6
 8004814:	4628      	mov	r0, r5
 8004816:	47b8      	blx	r7
 8004818:	3001      	adds	r0, #1
 800481a:	f43f ae56 	beq.w	80044ca <_printf_float+0xb6>
 800481e:	f108 0801 	add.w	r8, r8, #1
 8004822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004824:	3b01      	subs	r3, #1
 8004826:	4543      	cmp	r3, r8
 8004828:	dcf1      	bgt.n	800480e <_printf_float+0x3fa>
 800482a:	4653      	mov	r3, sl
 800482c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004830:	e6e0      	b.n	80045f4 <_printf_float+0x1e0>
 8004832:	f04f 0800 	mov.w	r8, #0
 8004836:	f104 091a 	add.w	r9, r4, #26
 800483a:	e7f2      	b.n	8004822 <_printf_float+0x40e>
 800483c:	2301      	movs	r3, #1
 800483e:	4642      	mov	r2, r8
 8004840:	e7df      	b.n	8004802 <_printf_float+0x3ee>
 8004842:	2301      	movs	r3, #1
 8004844:	464a      	mov	r2, r9
 8004846:	4631      	mov	r1, r6
 8004848:	4628      	mov	r0, r5
 800484a:	47b8      	blx	r7
 800484c:	3001      	adds	r0, #1
 800484e:	f43f ae3c 	beq.w	80044ca <_printf_float+0xb6>
 8004852:	f108 0801 	add.w	r8, r8, #1
 8004856:	68e3      	ldr	r3, [r4, #12]
 8004858:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800485a:	1a5b      	subs	r3, r3, r1
 800485c:	4543      	cmp	r3, r8
 800485e:	dcf0      	bgt.n	8004842 <_printf_float+0x42e>
 8004860:	e6fd      	b.n	800465e <_printf_float+0x24a>
 8004862:	f04f 0800 	mov.w	r8, #0
 8004866:	f104 0919 	add.w	r9, r4, #25
 800486a:	e7f4      	b.n	8004856 <_printf_float+0x442>

0800486c <_printf_common>:
 800486c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004870:	4616      	mov	r6, r2
 8004872:	4699      	mov	r9, r3
 8004874:	688a      	ldr	r2, [r1, #8]
 8004876:	690b      	ldr	r3, [r1, #16]
 8004878:	4607      	mov	r7, r0
 800487a:	4293      	cmp	r3, r2
 800487c:	bfb8      	it	lt
 800487e:	4613      	movlt	r3, r2
 8004880:	6033      	str	r3, [r6, #0]
 8004882:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004886:	460c      	mov	r4, r1
 8004888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800488c:	b10a      	cbz	r2, 8004892 <_printf_common+0x26>
 800488e:	3301      	adds	r3, #1
 8004890:	6033      	str	r3, [r6, #0]
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	0699      	lsls	r1, r3, #26
 8004896:	bf42      	ittt	mi
 8004898:	6833      	ldrmi	r3, [r6, #0]
 800489a:	3302      	addmi	r3, #2
 800489c:	6033      	strmi	r3, [r6, #0]
 800489e:	6825      	ldr	r5, [r4, #0]
 80048a0:	f015 0506 	ands.w	r5, r5, #6
 80048a4:	d106      	bne.n	80048b4 <_printf_common+0x48>
 80048a6:	f104 0a19 	add.w	sl, r4, #25
 80048aa:	68e3      	ldr	r3, [r4, #12]
 80048ac:	6832      	ldr	r2, [r6, #0]
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	42ab      	cmp	r3, r5
 80048b2:	dc28      	bgt.n	8004906 <_printf_common+0x9a>
 80048b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048b8:	1e13      	subs	r3, r2, #0
 80048ba:	6822      	ldr	r2, [r4, #0]
 80048bc:	bf18      	it	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	0692      	lsls	r2, r2, #26
 80048c2:	d42d      	bmi.n	8004920 <_printf_common+0xb4>
 80048c4:	4649      	mov	r1, r9
 80048c6:	4638      	mov	r0, r7
 80048c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048cc:	47c0      	blx	r8
 80048ce:	3001      	adds	r0, #1
 80048d0:	d020      	beq.n	8004914 <_printf_common+0xa8>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	68e5      	ldr	r5, [r4, #12]
 80048d6:	f003 0306 	and.w	r3, r3, #6
 80048da:	2b04      	cmp	r3, #4
 80048dc:	bf18      	it	ne
 80048de:	2500      	movne	r5, #0
 80048e0:	6832      	ldr	r2, [r6, #0]
 80048e2:	f04f 0600 	mov.w	r6, #0
 80048e6:	68a3      	ldr	r3, [r4, #8]
 80048e8:	bf08      	it	eq
 80048ea:	1aad      	subeq	r5, r5, r2
 80048ec:	6922      	ldr	r2, [r4, #16]
 80048ee:	bf08      	it	eq
 80048f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048f4:	4293      	cmp	r3, r2
 80048f6:	bfc4      	itt	gt
 80048f8:	1a9b      	subgt	r3, r3, r2
 80048fa:	18ed      	addgt	r5, r5, r3
 80048fc:	341a      	adds	r4, #26
 80048fe:	42b5      	cmp	r5, r6
 8004900:	d11a      	bne.n	8004938 <_printf_common+0xcc>
 8004902:	2000      	movs	r0, #0
 8004904:	e008      	b.n	8004918 <_printf_common+0xac>
 8004906:	2301      	movs	r3, #1
 8004908:	4652      	mov	r2, sl
 800490a:	4649      	mov	r1, r9
 800490c:	4638      	mov	r0, r7
 800490e:	47c0      	blx	r8
 8004910:	3001      	adds	r0, #1
 8004912:	d103      	bne.n	800491c <_printf_common+0xb0>
 8004914:	f04f 30ff 	mov.w	r0, #4294967295
 8004918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491c:	3501      	adds	r5, #1
 800491e:	e7c4      	b.n	80048aa <_printf_common+0x3e>
 8004920:	2030      	movs	r0, #48	; 0x30
 8004922:	18e1      	adds	r1, r4, r3
 8004924:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800492e:	4422      	add	r2, r4
 8004930:	3302      	adds	r3, #2
 8004932:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004936:	e7c5      	b.n	80048c4 <_printf_common+0x58>
 8004938:	2301      	movs	r3, #1
 800493a:	4622      	mov	r2, r4
 800493c:	4649      	mov	r1, r9
 800493e:	4638      	mov	r0, r7
 8004940:	47c0      	blx	r8
 8004942:	3001      	adds	r0, #1
 8004944:	d0e6      	beq.n	8004914 <_printf_common+0xa8>
 8004946:	3601      	adds	r6, #1
 8004948:	e7d9      	b.n	80048fe <_printf_common+0x92>
	...

0800494c <_printf_i>:
 800494c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004950:	7e0f      	ldrb	r7, [r1, #24]
 8004952:	4691      	mov	r9, r2
 8004954:	2f78      	cmp	r7, #120	; 0x78
 8004956:	4680      	mov	r8, r0
 8004958:	460c      	mov	r4, r1
 800495a:	469a      	mov	sl, r3
 800495c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800495e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004962:	d807      	bhi.n	8004974 <_printf_i+0x28>
 8004964:	2f62      	cmp	r7, #98	; 0x62
 8004966:	d80a      	bhi.n	800497e <_printf_i+0x32>
 8004968:	2f00      	cmp	r7, #0
 800496a:	f000 80d9 	beq.w	8004b20 <_printf_i+0x1d4>
 800496e:	2f58      	cmp	r7, #88	; 0x58
 8004970:	f000 80a4 	beq.w	8004abc <_printf_i+0x170>
 8004974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800497c:	e03a      	b.n	80049f4 <_printf_i+0xa8>
 800497e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004982:	2b15      	cmp	r3, #21
 8004984:	d8f6      	bhi.n	8004974 <_printf_i+0x28>
 8004986:	a101      	add	r1, pc, #4	; (adr r1, 800498c <_printf_i+0x40>)
 8004988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800498c:	080049e5 	.word	0x080049e5
 8004990:	080049f9 	.word	0x080049f9
 8004994:	08004975 	.word	0x08004975
 8004998:	08004975 	.word	0x08004975
 800499c:	08004975 	.word	0x08004975
 80049a0:	08004975 	.word	0x08004975
 80049a4:	080049f9 	.word	0x080049f9
 80049a8:	08004975 	.word	0x08004975
 80049ac:	08004975 	.word	0x08004975
 80049b0:	08004975 	.word	0x08004975
 80049b4:	08004975 	.word	0x08004975
 80049b8:	08004b07 	.word	0x08004b07
 80049bc:	08004a29 	.word	0x08004a29
 80049c0:	08004ae9 	.word	0x08004ae9
 80049c4:	08004975 	.word	0x08004975
 80049c8:	08004975 	.word	0x08004975
 80049cc:	08004b29 	.word	0x08004b29
 80049d0:	08004975 	.word	0x08004975
 80049d4:	08004a29 	.word	0x08004a29
 80049d8:	08004975 	.word	0x08004975
 80049dc:	08004975 	.word	0x08004975
 80049e0:	08004af1 	.word	0x08004af1
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	1d1a      	adds	r2, r3, #4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	602a      	str	r2, [r5, #0]
 80049ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0a4      	b.n	8004b42 <_printf_i+0x1f6>
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	6829      	ldr	r1, [r5, #0]
 80049fc:	0606      	lsls	r6, r0, #24
 80049fe:	f101 0304 	add.w	r3, r1, #4
 8004a02:	d50a      	bpl.n	8004a1a <_printf_i+0xce>
 8004a04:	680e      	ldr	r6, [r1, #0]
 8004a06:	602b      	str	r3, [r5, #0]
 8004a08:	2e00      	cmp	r6, #0
 8004a0a:	da03      	bge.n	8004a14 <_printf_i+0xc8>
 8004a0c:	232d      	movs	r3, #45	; 0x2d
 8004a0e:	4276      	negs	r6, r6
 8004a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a14:	230a      	movs	r3, #10
 8004a16:	485e      	ldr	r0, [pc, #376]	; (8004b90 <_printf_i+0x244>)
 8004a18:	e019      	b.n	8004a4e <_printf_i+0x102>
 8004a1a:	680e      	ldr	r6, [r1, #0]
 8004a1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a20:	602b      	str	r3, [r5, #0]
 8004a22:	bf18      	it	ne
 8004a24:	b236      	sxthne	r6, r6
 8004a26:	e7ef      	b.n	8004a08 <_printf_i+0xbc>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	6820      	ldr	r0, [r4, #0]
 8004a2c:	1d19      	adds	r1, r3, #4
 8004a2e:	6029      	str	r1, [r5, #0]
 8004a30:	0601      	lsls	r1, r0, #24
 8004a32:	d501      	bpl.n	8004a38 <_printf_i+0xec>
 8004a34:	681e      	ldr	r6, [r3, #0]
 8004a36:	e002      	b.n	8004a3e <_printf_i+0xf2>
 8004a38:	0646      	lsls	r6, r0, #25
 8004a3a:	d5fb      	bpl.n	8004a34 <_printf_i+0xe8>
 8004a3c:	881e      	ldrh	r6, [r3, #0]
 8004a3e:	2f6f      	cmp	r7, #111	; 0x6f
 8004a40:	bf0c      	ite	eq
 8004a42:	2308      	moveq	r3, #8
 8004a44:	230a      	movne	r3, #10
 8004a46:	4852      	ldr	r0, [pc, #328]	; (8004b90 <_printf_i+0x244>)
 8004a48:	2100      	movs	r1, #0
 8004a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a4e:	6865      	ldr	r5, [r4, #4]
 8004a50:	2d00      	cmp	r5, #0
 8004a52:	bfa8      	it	ge
 8004a54:	6821      	ldrge	r1, [r4, #0]
 8004a56:	60a5      	str	r5, [r4, #8]
 8004a58:	bfa4      	itt	ge
 8004a5a:	f021 0104 	bicge.w	r1, r1, #4
 8004a5e:	6021      	strge	r1, [r4, #0]
 8004a60:	b90e      	cbnz	r6, 8004a66 <_printf_i+0x11a>
 8004a62:	2d00      	cmp	r5, #0
 8004a64:	d04d      	beq.n	8004b02 <_printf_i+0x1b6>
 8004a66:	4615      	mov	r5, r2
 8004a68:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a6c:	fb03 6711 	mls	r7, r3, r1, r6
 8004a70:	5dc7      	ldrb	r7, [r0, r7]
 8004a72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a76:	4637      	mov	r7, r6
 8004a78:	42bb      	cmp	r3, r7
 8004a7a:	460e      	mov	r6, r1
 8004a7c:	d9f4      	bls.n	8004a68 <_printf_i+0x11c>
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d10b      	bne.n	8004a9a <_printf_i+0x14e>
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	07de      	lsls	r6, r3, #31
 8004a86:	d508      	bpl.n	8004a9a <_printf_i+0x14e>
 8004a88:	6923      	ldr	r3, [r4, #16]
 8004a8a:	6861      	ldr	r1, [r4, #4]
 8004a8c:	4299      	cmp	r1, r3
 8004a8e:	bfde      	ittt	le
 8004a90:	2330      	movle	r3, #48	; 0x30
 8004a92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a9a:	1b52      	subs	r2, r2, r5
 8004a9c:	6122      	str	r2, [r4, #16]
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	f8cd a000 	str.w	sl, [sp]
 8004aa8:	aa03      	add	r2, sp, #12
 8004aaa:	f7ff fedf 	bl	800486c <_printf_common>
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d14c      	bne.n	8004b4c <_printf_i+0x200>
 8004ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab6:	b004      	add	sp, #16
 8004ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004abc:	4834      	ldr	r0, [pc, #208]	; (8004b90 <_printf_i+0x244>)
 8004abe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ac2:	6829      	ldr	r1, [r5, #0]
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aca:	6029      	str	r1, [r5, #0]
 8004acc:	061d      	lsls	r5, r3, #24
 8004ace:	d514      	bpl.n	8004afa <_printf_i+0x1ae>
 8004ad0:	07df      	lsls	r7, r3, #31
 8004ad2:	bf44      	itt	mi
 8004ad4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ad8:	6023      	strmi	r3, [r4, #0]
 8004ada:	b91e      	cbnz	r6, 8004ae4 <_printf_i+0x198>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	f023 0320 	bic.w	r3, r3, #32
 8004ae2:	6023      	str	r3, [r4, #0]
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	e7af      	b.n	8004a48 <_printf_i+0xfc>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	f043 0320 	orr.w	r3, r3, #32
 8004aee:	6023      	str	r3, [r4, #0]
 8004af0:	2378      	movs	r3, #120	; 0x78
 8004af2:	4828      	ldr	r0, [pc, #160]	; (8004b94 <_printf_i+0x248>)
 8004af4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004af8:	e7e3      	b.n	8004ac2 <_printf_i+0x176>
 8004afa:	0659      	lsls	r1, r3, #25
 8004afc:	bf48      	it	mi
 8004afe:	b2b6      	uxthmi	r6, r6
 8004b00:	e7e6      	b.n	8004ad0 <_printf_i+0x184>
 8004b02:	4615      	mov	r5, r2
 8004b04:	e7bb      	b.n	8004a7e <_printf_i+0x132>
 8004b06:	682b      	ldr	r3, [r5, #0]
 8004b08:	6826      	ldr	r6, [r4, #0]
 8004b0a:	1d18      	adds	r0, r3, #4
 8004b0c:	6961      	ldr	r1, [r4, #20]
 8004b0e:	6028      	str	r0, [r5, #0]
 8004b10:	0635      	lsls	r5, r6, #24
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	d501      	bpl.n	8004b1a <_printf_i+0x1ce>
 8004b16:	6019      	str	r1, [r3, #0]
 8004b18:	e002      	b.n	8004b20 <_printf_i+0x1d4>
 8004b1a:	0670      	lsls	r0, r6, #25
 8004b1c:	d5fb      	bpl.n	8004b16 <_printf_i+0x1ca>
 8004b1e:	8019      	strh	r1, [r3, #0]
 8004b20:	2300      	movs	r3, #0
 8004b22:	4615      	mov	r5, r2
 8004b24:	6123      	str	r3, [r4, #16]
 8004b26:	e7ba      	b.n	8004a9e <_printf_i+0x152>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	1d1a      	adds	r2, r3, #4
 8004b2e:	602a      	str	r2, [r5, #0]
 8004b30:	681d      	ldr	r5, [r3, #0]
 8004b32:	6862      	ldr	r2, [r4, #4]
 8004b34:	4628      	mov	r0, r5
 8004b36:	f000 fee9 	bl	800590c <memchr>
 8004b3a:	b108      	cbz	r0, 8004b40 <_printf_i+0x1f4>
 8004b3c:	1b40      	subs	r0, r0, r5
 8004b3e:	6060      	str	r0, [r4, #4]
 8004b40:	6863      	ldr	r3, [r4, #4]
 8004b42:	6123      	str	r3, [r4, #16]
 8004b44:	2300      	movs	r3, #0
 8004b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b4a:	e7a8      	b.n	8004a9e <_printf_i+0x152>
 8004b4c:	462a      	mov	r2, r5
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4640      	mov	r0, r8
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	47d0      	blx	sl
 8004b56:	3001      	adds	r0, #1
 8004b58:	d0ab      	beq.n	8004ab2 <_printf_i+0x166>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	079b      	lsls	r3, r3, #30
 8004b5e:	d413      	bmi.n	8004b88 <_printf_i+0x23c>
 8004b60:	68e0      	ldr	r0, [r4, #12]
 8004b62:	9b03      	ldr	r3, [sp, #12]
 8004b64:	4298      	cmp	r0, r3
 8004b66:	bfb8      	it	lt
 8004b68:	4618      	movlt	r0, r3
 8004b6a:	e7a4      	b.n	8004ab6 <_printf_i+0x16a>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4632      	mov	r2, r6
 8004b70:	4649      	mov	r1, r9
 8004b72:	4640      	mov	r0, r8
 8004b74:	47d0      	blx	sl
 8004b76:	3001      	adds	r0, #1
 8004b78:	d09b      	beq.n	8004ab2 <_printf_i+0x166>
 8004b7a:	3501      	adds	r5, #1
 8004b7c:	68e3      	ldr	r3, [r4, #12]
 8004b7e:	9903      	ldr	r1, [sp, #12]
 8004b80:	1a5b      	subs	r3, r3, r1
 8004b82:	42ab      	cmp	r3, r5
 8004b84:	dcf2      	bgt.n	8004b6c <_printf_i+0x220>
 8004b86:	e7eb      	b.n	8004b60 <_printf_i+0x214>
 8004b88:	2500      	movs	r5, #0
 8004b8a:	f104 0619 	add.w	r6, r4, #25
 8004b8e:	e7f5      	b.n	8004b7c <_printf_i+0x230>
 8004b90:	0800713a 	.word	0x0800713a
 8004b94:	0800714b 	.word	0x0800714b

08004b98 <sniprintf>:
 8004b98:	b40c      	push	{r2, r3}
 8004b9a:	b530      	push	{r4, r5, lr}
 8004b9c:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <sniprintf+0x64>)
 8004b9e:	1e0c      	subs	r4, r1, #0
 8004ba0:	681d      	ldr	r5, [r3, #0]
 8004ba2:	b09d      	sub	sp, #116	; 0x74
 8004ba4:	da08      	bge.n	8004bb8 <sniprintf+0x20>
 8004ba6:	238b      	movs	r3, #139	; 0x8b
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	b01d      	add	sp, #116	; 0x74
 8004bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bb4:	b002      	add	sp, #8
 8004bb6:	4770      	bx	lr
 8004bb8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004bbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004bc0:	bf0c      	ite	eq
 8004bc2:	4623      	moveq	r3, r4
 8004bc4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004bc8:	9304      	str	r3, [sp, #16]
 8004bca:	9307      	str	r3, [sp, #28]
 8004bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bd0:	9002      	str	r0, [sp, #8]
 8004bd2:	9006      	str	r0, [sp, #24]
 8004bd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004bd8:	4628      	mov	r0, r5
 8004bda:	ab21      	add	r3, sp, #132	; 0x84
 8004bdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004bde:	a902      	add	r1, sp, #8
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	f001 fb7d 	bl	80062e0 <_svfiprintf_r>
 8004be6:	1c43      	adds	r3, r0, #1
 8004be8:	bfbc      	itt	lt
 8004bea:	238b      	movlt	r3, #139	; 0x8b
 8004bec:	602b      	strlt	r3, [r5, #0]
 8004bee:	2c00      	cmp	r4, #0
 8004bf0:	d0dd      	beq.n	8004bae <sniprintf+0x16>
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	9b02      	ldr	r3, [sp, #8]
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	e7d9      	b.n	8004bae <sniprintf+0x16>
 8004bfa:	bf00      	nop
 8004bfc:	20000010 	.word	0x20000010

08004c00 <quorem>:
 8004c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c04:	6903      	ldr	r3, [r0, #16]
 8004c06:	690c      	ldr	r4, [r1, #16]
 8004c08:	4607      	mov	r7, r0
 8004c0a:	42a3      	cmp	r3, r4
 8004c0c:	f2c0 8082 	blt.w	8004d14 <quorem+0x114>
 8004c10:	3c01      	subs	r4, #1
 8004c12:	f100 0514 	add.w	r5, r0, #20
 8004c16:	f101 0814 	add.w	r8, r1, #20
 8004c1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c38:	d331      	bcc.n	8004c9e <quorem+0x9e>
 8004c3a:	f04f 0e00 	mov.w	lr, #0
 8004c3e:	4640      	mov	r0, r8
 8004c40:	46ac      	mov	ip, r5
 8004c42:	46f2      	mov	sl, lr
 8004c44:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c48:	b293      	uxth	r3, r2
 8004c4a:	fb06 e303 	mla	r3, r6, r3, lr
 8004c4e:	0c12      	lsrs	r2, r2, #16
 8004c50:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	fb06 e202 	mla	r2, r6, r2, lr
 8004c5a:	ebaa 0303 	sub.w	r3, sl, r3
 8004c5e:	f8dc a000 	ldr.w	sl, [ip]
 8004c62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c66:	fa1f fa8a 	uxth.w	sl, sl
 8004c6a:	4453      	add	r3, sl
 8004c6c:	f8dc a000 	ldr.w	sl, [ip]
 8004c70:	b292      	uxth	r2, r2
 8004c72:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c80:	4581      	cmp	r9, r0
 8004c82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c86:	f84c 3b04 	str.w	r3, [ip], #4
 8004c8a:	d2db      	bcs.n	8004c44 <quorem+0x44>
 8004c8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c90:	b92b      	cbnz	r3, 8004c9e <quorem+0x9e>
 8004c92:	9b01      	ldr	r3, [sp, #4]
 8004c94:	3b04      	subs	r3, #4
 8004c96:	429d      	cmp	r5, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	d32f      	bcc.n	8004cfc <quorem+0xfc>
 8004c9c:	613c      	str	r4, [r7, #16]
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	f001 f8ce 	bl	8005e40 <__mcmp>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	db25      	blt.n	8004cf4 <quorem+0xf4>
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f04f 0c00 	mov.w	ip, #0
 8004cae:	3601      	adds	r6, #1
 8004cb0:	f858 1b04 	ldr.w	r1, [r8], #4
 8004cb4:	f8d0 e000 	ldr.w	lr, [r0]
 8004cb8:	b28b      	uxth	r3, r1
 8004cba:	ebac 0303 	sub.w	r3, ip, r3
 8004cbe:	fa1f f28e 	uxth.w	r2, lr
 8004cc2:	4413      	add	r3, r2
 8004cc4:	0c0a      	lsrs	r2, r1, #16
 8004cc6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004cca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cd4:	45c1      	cmp	r9, r8
 8004cd6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004cda:	f840 3b04 	str.w	r3, [r0], #4
 8004cde:	d2e7      	bcs.n	8004cb0 <quorem+0xb0>
 8004ce0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ce4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ce8:	b922      	cbnz	r2, 8004cf4 <quorem+0xf4>
 8004cea:	3b04      	subs	r3, #4
 8004cec:	429d      	cmp	r5, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	d30a      	bcc.n	8004d08 <quorem+0x108>
 8004cf2:	613c      	str	r4, [r7, #16]
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	b003      	add	sp, #12
 8004cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfc:	6812      	ldr	r2, [r2, #0]
 8004cfe:	3b04      	subs	r3, #4
 8004d00:	2a00      	cmp	r2, #0
 8004d02:	d1cb      	bne.n	8004c9c <quorem+0x9c>
 8004d04:	3c01      	subs	r4, #1
 8004d06:	e7c6      	b.n	8004c96 <quorem+0x96>
 8004d08:	6812      	ldr	r2, [r2, #0]
 8004d0a:	3b04      	subs	r3, #4
 8004d0c:	2a00      	cmp	r2, #0
 8004d0e:	d1f0      	bne.n	8004cf2 <quorem+0xf2>
 8004d10:	3c01      	subs	r4, #1
 8004d12:	e7eb      	b.n	8004cec <quorem+0xec>
 8004d14:	2000      	movs	r0, #0
 8004d16:	e7ee      	b.n	8004cf6 <quorem+0xf6>

08004d18 <_dtoa_r>:
 8004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	4616      	mov	r6, r2
 8004d1e:	461f      	mov	r7, r3
 8004d20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004d22:	b099      	sub	sp, #100	; 0x64
 8004d24:	4605      	mov	r5, r0
 8004d26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d2a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004d2e:	b974      	cbnz	r4, 8004d4e <_dtoa_r+0x36>
 8004d30:	2010      	movs	r0, #16
 8004d32:	f000 fde3 	bl	80058fc <malloc>
 8004d36:	4602      	mov	r2, r0
 8004d38:	6268      	str	r0, [r5, #36]	; 0x24
 8004d3a:	b920      	cbnz	r0, 8004d46 <_dtoa_r+0x2e>
 8004d3c:	21ea      	movs	r1, #234	; 0xea
 8004d3e:	4ba8      	ldr	r3, [pc, #672]	; (8004fe0 <_dtoa_r+0x2c8>)
 8004d40:	48a8      	ldr	r0, [pc, #672]	; (8004fe4 <_dtoa_r+0x2cc>)
 8004d42:	f001 fbdd 	bl	8006500 <__assert_func>
 8004d46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d4a:	6004      	str	r4, [r0, #0]
 8004d4c:	60c4      	str	r4, [r0, #12]
 8004d4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	b151      	cbz	r1, 8004d6a <_dtoa_r+0x52>
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	2301      	movs	r3, #1
 8004d58:	4093      	lsls	r3, r2
 8004d5a:	604a      	str	r2, [r1, #4]
 8004d5c:	608b      	str	r3, [r1, #8]
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f000 fe30 	bl	80059c4 <_Bfree>
 8004d64:	2200      	movs	r2, #0
 8004d66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	1e3b      	subs	r3, r7, #0
 8004d6c:	bfaf      	iteee	ge
 8004d6e:	2300      	movge	r3, #0
 8004d70:	2201      	movlt	r2, #1
 8004d72:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d76:	9305      	strlt	r3, [sp, #20]
 8004d78:	bfa8      	it	ge
 8004d7a:	f8c8 3000 	strge.w	r3, [r8]
 8004d7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004d82:	4b99      	ldr	r3, [pc, #612]	; (8004fe8 <_dtoa_r+0x2d0>)
 8004d84:	bfb8      	it	lt
 8004d86:	f8c8 2000 	strlt.w	r2, [r8]
 8004d8a:	ea33 0309 	bics.w	r3, r3, r9
 8004d8e:	d119      	bne.n	8004dc4 <_dtoa_r+0xac>
 8004d90:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d9c:	4333      	orrs	r3, r6
 8004d9e:	f000 857f 	beq.w	80058a0 <_dtoa_r+0xb88>
 8004da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004da4:	b953      	cbnz	r3, 8004dbc <_dtoa_r+0xa4>
 8004da6:	4b91      	ldr	r3, [pc, #580]	; (8004fec <_dtoa_r+0x2d4>)
 8004da8:	e022      	b.n	8004df0 <_dtoa_r+0xd8>
 8004daa:	4b91      	ldr	r3, [pc, #580]	; (8004ff0 <_dtoa_r+0x2d8>)
 8004dac:	9303      	str	r3, [sp, #12]
 8004dae:	3308      	adds	r3, #8
 8004db0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	9803      	ldr	r0, [sp, #12]
 8004db6:	b019      	add	sp, #100	; 0x64
 8004db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dbc:	4b8b      	ldr	r3, [pc, #556]	; (8004fec <_dtoa_r+0x2d4>)
 8004dbe:	9303      	str	r3, [sp, #12]
 8004dc0:	3303      	adds	r3, #3
 8004dc2:	e7f5      	b.n	8004db0 <_dtoa_r+0x98>
 8004dc4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004dc8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004dcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f7fb fe00 	bl	80009d8 <__aeabi_dcmpeq>
 8004dd8:	4680      	mov	r8, r0
 8004dda:	b158      	cbz	r0, 8004df4 <_dtoa_r+0xdc>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8558 	beq.w	800589a <_dtoa_r+0xb82>
 8004dea:	4882      	ldr	r0, [pc, #520]	; (8004ff4 <_dtoa_r+0x2dc>)
 8004dec:	6018      	str	r0, [r3, #0]
 8004dee:	1e43      	subs	r3, r0, #1
 8004df0:	9303      	str	r3, [sp, #12]
 8004df2:	e7df      	b.n	8004db4 <_dtoa_r+0x9c>
 8004df4:	ab16      	add	r3, sp, #88	; 0x58
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	ab17      	add	r3, sp, #92	; 0x5c
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e02:	f001 f8c5 	bl	8005f90 <__d2b>
 8004e06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e0a:	4683      	mov	fp, r0
 8004e0c:	2c00      	cmp	r4, #0
 8004e0e:	d07f      	beq.n	8004f10 <_dtoa_r+0x1f8>
 8004e10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e16:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e1e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004e22:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004e26:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	4b72      	ldr	r3, [pc, #456]	; (8004ff8 <_dtoa_r+0x2e0>)
 8004e2e:	f7fb f9b3 	bl	8000198 <__aeabi_dsub>
 8004e32:	a365      	add	r3, pc, #404	; (adr r3, 8004fc8 <_dtoa_r+0x2b0>)
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	f7fb fb66 	bl	8000508 <__aeabi_dmul>
 8004e3c:	a364      	add	r3, pc, #400	; (adr r3, 8004fd0 <_dtoa_r+0x2b8>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	f7fb f9ab 	bl	800019c <__adddf3>
 8004e46:	4606      	mov	r6, r0
 8004e48:	4620      	mov	r0, r4
 8004e4a:	460f      	mov	r7, r1
 8004e4c:	f7fb faf2 	bl	8000434 <__aeabi_i2d>
 8004e50:	a361      	add	r3, pc, #388	; (adr r3, 8004fd8 <_dtoa_r+0x2c0>)
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	f7fb fb57 	bl	8000508 <__aeabi_dmul>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4630      	mov	r0, r6
 8004e60:	4639      	mov	r1, r7
 8004e62:	f7fb f99b 	bl	800019c <__adddf3>
 8004e66:	4606      	mov	r6, r0
 8004e68:	460f      	mov	r7, r1
 8004e6a:	f7fb fdfd 	bl	8000a68 <__aeabi_d2iz>
 8004e6e:	2200      	movs	r2, #0
 8004e70:	4682      	mov	sl, r0
 8004e72:	2300      	movs	r3, #0
 8004e74:	4630      	mov	r0, r6
 8004e76:	4639      	mov	r1, r7
 8004e78:	f7fb fdb8 	bl	80009ec <__aeabi_dcmplt>
 8004e7c:	b148      	cbz	r0, 8004e92 <_dtoa_r+0x17a>
 8004e7e:	4650      	mov	r0, sl
 8004e80:	f7fb fad8 	bl	8000434 <__aeabi_i2d>
 8004e84:	4632      	mov	r2, r6
 8004e86:	463b      	mov	r3, r7
 8004e88:	f7fb fda6 	bl	80009d8 <__aeabi_dcmpeq>
 8004e8c:	b908      	cbnz	r0, 8004e92 <_dtoa_r+0x17a>
 8004e8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e92:	f1ba 0f16 	cmp.w	sl, #22
 8004e96:	d858      	bhi.n	8004f4a <_dtoa_r+0x232>
 8004e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e9c:	4b57      	ldr	r3, [pc, #348]	; (8004ffc <_dtoa_r+0x2e4>)
 8004e9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	f7fb fda1 	bl	80009ec <__aeabi_dcmplt>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d04f      	beq.n	8004f4e <_dtoa_r+0x236>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004eb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004eb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004eb8:	1b1c      	subs	r4, r3, r4
 8004eba:	1e63      	subs	r3, r4, #1
 8004ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ebe:	bf49      	itett	mi
 8004ec0:	f1c4 0301 	rsbmi	r3, r4, #1
 8004ec4:	2300      	movpl	r3, #0
 8004ec6:	9306      	strmi	r3, [sp, #24]
 8004ec8:	2300      	movmi	r3, #0
 8004eca:	bf54      	ite	pl
 8004ecc:	9306      	strpl	r3, [sp, #24]
 8004ece:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004ed0:	f1ba 0f00 	cmp.w	sl, #0
 8004ed4:	db3d      	blt.n	8004f52 <_dtoa_r+0x23a>
 8004ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004edc:	4453      	add	r3, sl
 8004ede:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ee6:	2b09      	cmp	r3, #9
 8004ee8:	f200 808c 	bhi.w	8005004 <_dtoa_r+0x2ec>
 8004eec:	2b05      	cmp	r3, #5
 8004eee:	bfc4      	itt	gt
 8004ef0:	3b04      	subgt	r3, #4
 8004ef2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ef6:	bfc8      	it	gt
 8004ef8:	2400      	movgt	r4, #0
 8004efa:	f1a3 0302 	sub.w	r3, r3, #2
 8004efe:	bfd8      	it	le
 8004f00:	2401      	movle	r4, #1
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	f200 808a 	bhi.w	800501c <_dtoa_r+0x304>
 8004f08:	e8df f003 	tbb	[pc, r3]
 8004f0c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004f10:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004f14:	441c      	add	r4, r3
 8004f16:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	bfc3      	ittte	gt
 8004f1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f22:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004f26:	fa09 f303 	lslgt.w	r3, r9, r3
 8004f2a:	f1c3 0320 	rsble	r3, r3, #32
 8004f2e:	bfc6      	itte	gt
 8004f30:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004f34:	4318      	orrgt	r0, r3
 8004f36:	fa06 f003 	lslle.w	r0, r6, r3
 8004f3a:	f7fb fa6b 	bl	8000414 <__aeabi_ui2d>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004f44:	3c01      	subs	r4, #1
 8004f46:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f48:	e76f      	b.n	8004e2a <_dtoa_r+0x112>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e7b2      	b.n	8004eb4 <_dtoa_r+0x19c>
 8004f4e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f50:	e7b1      	b.n	8004eb6 <_dtoa_r+0x19e>
 8004f52:	9b06      	ldr	r3, [sp, #24]
 8004f54:	eba3 030a 	sub.w	r3, r3, sl
 8004f58:	9306      	str	r3, [sp, #24]
 8004f5a:	f1ca 0300 	rsb	r3, sl, #0
 8004f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f60:	2300      	movs	r3, #0
 8004f62:	930e      	str	r3, [sp, #56]	; 0x38
 8004f64:	e7be      	b.n	8004ee4 <_dtoa_r+0x1cc>
 8004f66:	2300      	movs	r3, #0
 8004f68:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	dc58      	bgt.n	8005022 <_dtoa_r+0x30a>
 8004f70:	f04f 0901 	mov.w	r9, #1
 8004f74:	464b      	mov	r3, r9
 8004f76:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f7a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004f7e:	2200      	movs	r2, #0
 8004f80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004f82:	6042      	str	r2, [r0, #4]
 8004f84:	2204      	movs	r2, #4
 8004f86:	f102 0614 	add.w	r6, r2, #20
 8004f8a:	429e      	cmp	r6, r3
 8004f8c:	6841      	ldr	r1, [r0, #4]
 8004f8e:	d94e      	bls.n	800502e <_dtoa_r+0x316>
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 fcd7 	bl	8005944 <_Balloc>
 8004f96:	9003      	str	r0, [sp, #12]
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d14c      	bne.n	8005036 <_dtoa_r+0x31e>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004fa2:	4b17      	ldr	r3, [pc, #92]	; (8005000 <_dtoa_r+0x2e8>)
 8004fa4:	e6cc      	b.n	8004d40 <_dtoa_r+0x28>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e7de      	b.n	8004f68 <_dtoa_r+0x250>
 8004faa:	2300      	movs	r3, #0
 8004fac:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fb0:	eb0a 0903 	add.w	r9, sl, r3
 8004fb4:	f109 0301 	add.w	r3, r9, #1
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	9308      	str	r3, [sp, #32]
 8004fbc:	bfb8      	it	lt
 8004fbe:	2301      	movlt	r3, #1
 8004fc0:	e7dd      	b.n	8004f7e <_dtoa_r+0x266>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e7f2      	b.n	8004fac <_dtoa_r+0x294>
 8004fc6:	bf00      	nop
 8004fc8:	636f4361 	.word	0x636f4361
 8004fcc:	3fd287a7 	.word	0x3fd287a7
 8004fd0:	8b60c8b3 	.word	0x8b60c8b3
 8004fd4:	3fc68a28 	.word	0x3fc68a28
 8004fd8:	509f79fb 	.word	0x509f79fb
 8004fdc:	3fd34413 	.word	0x3fd34413
 8004fe0:	08007169 	.word	0x08007169
 8004fe4:	08007180 	.word	0x08007180
 8004fe8:	7ff00000 	.word	0x7ff00000
 8004fec:	08007165 	.word	0x08007165
 8004ff0:	0800715c 	.word	0x0800715c
 8004ff4:	08007139 	.word	0x08007139
 8004ff8:	3ff80000 	.word	0x3ff80000
 8004ffc:	08007270 	.word	0x08007270
 8005000:	080071db 	.word	0x080071db
 8005004:	2401      	movs	r4, #1
 8005006:	2300      	movs	r3, #0
 8005008:	940b      	str	r4, [sp, #44]	; 0x2c
 800500a:	9322      	str	r3, [sp, #136]	; 0x88
 800500c:	f04f 39ff 	mov.w	r9, #4294967295
 8005010:	2200      	movs	r2, #0
 8005012:	2312      	movs	r3, #18
 8005014:	f8cd 9020 	str.w	r9, [sp, #32]
 8005018:	9223      	str	r2, [sp, #140]	; 0x8c
 800501a:	e7b0      	b.n	8004f7e <_dtoa_r+0x266>
 800501c:	2301      	movs	r3, #1
 800501e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005020:	e7f4      	b.n	800500c <_dtoa_r+0x2f4>
 8005022:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005026:	464b      	mov	r3, r9
 8005028:	f8cd 9020 	str.w	r9, [sp, #32]
 800502c:	e7a7      	b.n	8004f7e <_dtoa_r+0x266>
 800502e:	3101      	adds	r1, #1
 8005030:	6041      	str	r1, [r0, #4]
 8005032:	0052      	lsls	r2, r2, #1
 8005034:	e7a7      	b.n	8004f86 <_dtoa_r+0x26e>
 8005036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005038:	9a03      	ldr	r2, [sp, #12]
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	9b08      	ldr	r3, [sp, #32]
 800503e:	2b0e      	cmp	r3, #14
 8005040:	f200 80a8 	bhi.w	8005194 <_dtoa_r+0x47c>
 8005044:	2c00      	cmp	r4, #0
 8005046:	f000 80a5 	beq.w	8005194 <_dtoa_r+0x47c>
 800504a:	f1ba 0f00 	cmp.w	sl, #0
 800504e:	dd34      	ble.n	80050ba <_dtoa_r+0x3a2>
 8005050:	4a9a      	ldr	r2, [pc, #616]	; (80052bc <_dtoa_r+0x5a4>)
 8005052:	f00a 030f 	and.w	r3, sl, #15
 8005056:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800505a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800505e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005062:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005066:	ea4f 142a 	mov.w	r4, sl, asr #4
 800506a:	d016      	beq.n	800509a <_dtoa_r+0x382>
 800506c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005070:	4b93      	ldr	r3, [pc, #588]	; (80052c0 <_dtoa_r+0x5a8>)
 8005072:	2703      	movs	r7, #3
 8005074:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005078:	f7fb fb70 	bl	800075c <__aeabi_ddiv>
 800507c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005080:	f004 040f 	and.w	r4, r4, #15
 8005084:	4e8e      	ldr	r6, [pc, #568]	; (80052c0 <_dtoa_r+0x5a8>)
 8005086:	b954      	cbnz	r4, 800509e <_dtoa_r+0x386>
 8005088:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800508c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005090:	f7fb fb64 	bl	800075c <__aeabi_ddiv>
 8005094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005098:	e029      	b.n	80050ee <_dtoa_r+0x3d6>
 800509a:	2702      	movs	r7, #2
 800509c:	e7f2      	b.n	8005084 <_dtoa_r+0x36c>
 800509e:	07e1      	lsls	r1, r4, #31
 80050a0:	d508      	bpl.n	80050b4 <_dtoa_r+0x39c>
 80050a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050aa:	f7fb fa2d 	bl	8000508 <__aeabi_dmul>
 80050ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050b2:	3701      	adds	r7, #1
 80050b4:	1064      	asrs	r4, r4, #1
 80050b6:	3608      	adds	r6, #8
 80050b8:	e7e5      	b.n	8005086 <_dtoa_r+0x36e>
 80050ba:	f000 80a5 	beq.w	8005208 <_dtoa_r+0x4f0>
 80050be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050c2:	f1ca 0400 	rsb	r4, sl, #0
 80050c6:	4b7d      	ldr	r3, [pc, #500]	; (80052bc <_dtoa_r+0x5a4>)
 80050c8:	f004 020f 	and.w	r2, r4, #15
 80050cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	f7fb fa18 	bl	8000508 <__aeabi_dmul>
 80050d8:	2702      	movs	r7, #2
 80050da:	2300      	movs	r3, #0
 80050dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050e0:	4e77      	ldr	r6, [pc, #476]	; (80052c0 <_dtoa_r+0x5a8>)
 80050e2:	1124      	asrs	r4, r4, #4
 80050e4:	2c00      	cmp	r4, #0
 80050e6:	f040 8084 	bne.w	80051f2 <_dtoa_r+0x4da>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1d2      	bne.n	8005094 <_dtoa_r+0x37c>
 80050ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 808b 	beq.w	800520c <_dtoa_r+0x4f4>
 80050f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80050fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80050fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005102:	2200      	movs	r2, #0
 8005104:	4b6f      	ldr	r3, [pc, #444]	; (80052c4 <_dtoa_r+0x5ac>)
 8005106:	f7fb fc71 	bl	80009ec <__aeabi_dcmplt>
 800510a:	2800      	cmp	r0, #0
 800510c:	d07e      	beq.n	800520c <_dtoa_r+0x4f4>
 800510e:	9b08      	ldr	r3, [sp, #32]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d07b      	beq.n	800520c <_dtoa_r+0x4f4>
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	dd38      	ble.n	800518c <_dtoa_r+0x474>
 800511a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800511e:	2200      	movs	r2, #0
 8005120:	4b69      	ldr	r3, [pc, #420]	; (80052c8 <_dtoa_r+0x5b0>)
 8005122:	f7fb f9f1 	bl	8000508 <__aeabi_dmul>
 8005126:	464c      	mov	r4, r9
 8005128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800512c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005130:	3701      	adds	r7, #1
 8005132:	4638      	mov	r0, r7
 8005134:	f7fb f97e 	bl	8000434 <__aeabi_i2d>
 8005138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800513c:	f7fb f9e4 	bl	8000508 <__aeabi_dmul>
 8005140:	2200      	movs	r2, #0
 8005142:	4b62      	ldr	r3, [pc, #392]	; (80052cc <_dtoa_r+0x5b4>)
 8005144:	f7fb f82a 	bl	800019c <__adddf3>
 8005148:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800514c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005150:	9611      	str	r6, [sp, #68]	; 0x44
 8005152:	2c00      	cmp	r4, #0
 8005154:	d15d      	bne.n	8005212 <_dtoa_r+0x4fa>
 8005156:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800515a:	2200      	movs	r2, #0
 800515c:	4b5c      	ldr	r3, [pc, #368]	; (80052d0 <_dtoa_r+0x5b8>)
 800515e:	f7fb f81b 	bl	8000198 <__aeabi_dsub>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800516a:	4633      	mov	r3, r6
 800516c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800516e:	f7fb fc5b 	bl	8000a28 <__aeabi_dcmpgt>
 8005172:	2800      	cmp	r0, #0
 8005174:	f040 829c 	bne.w	80056b0 <_dtoa_r+0x998>
 8005178:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800517c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800517e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005182:	f7fb fc33 	bl	80009ec <__aeabi_dcmplt>
 8005186:	2800      	cmp	r0, #0
 8005188:	f040 8290 	bne.w	80056ac <_dtoa_r+0x994>
 800518c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005190:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005194:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005196:	2b00      	cmp	r3, #0
 8005198:	f2c0 8152 	blt.w	8005440 <_dtoa_r+0x728>
 800519c:	f1ba 0f0e 	cmp.w	sl, #14
 80051a0:	f300 814e 	bgt.w	8005440 <_dtoa_r+0x728>
 80051a4:	4b45      	ldr	r3, [pc, #276]	; (80052bc <_dtoa_r+0x5a4>)
 80051a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80051aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80051b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f280 80db 	bge.w	8005370 <_dtoa_r+0x658>
 80051ba:	9b08      	ldr	r3, [sp, #32]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f300 80d7 	bgt.w	8005370 <_dtoa_r+0x658>
 80051c2:	f040 8272 	bne.w	80056aa <_dtoa_r+0x992>
 80051c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051ca:	2200      	movs	r2, #0
 80051cc:	4b40      	ldr	r3, [pc, #256]	; (80052d0 <_dtoa_r+0x5b8>)
 80051ce:	f7fb f99b 	bl	8000508 <__aeabi_dmul>
 80051d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051d6:	f7fb fc1d 	bl	8000a14 <__aeabi_dcmpge>
 80051da:	9c08      	ldr	r4, [sp, #32]
 80051dc:	4626      	mov	r6, r4
 80051de:	2800      	cmp	r0, #0
 80051e0:	f040 8248 	bne.w	8005674 <_dtoa_r+0x95c>
 80051e4:	2331      	movs	r3, #49	; 0x31
 80051e6:	9f03      	ldr	r7, [sp, #12]
 80051e8:	f10a 0a01 	add.w	sl, sl, #1
 80051ec:	f807 3b01 	strb.w	r3, [r7], #1
 80051f0:	e244      	b.n	800567c <_dtoa_r+0x964>
 80051f2:	07e2      	lsls	r2, r4, #31
 80051f4:	d505      	bpl.n	8005202 <_dtoa_r+0x4ea>
 80051f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051fa:	f7fb f985 	bl	8000508 <__aeabi_dmul>
 80051fe:	2301      	movs	r3, #1
 8005200:	3701      	adds	r7, #1
 8005202:	1064      	asrs	r4, r4, #1
 8005204:	3608      	adds	r6, #8
 8005206:	e76d      	b.n	80050e4 <_dtoa_r+0x3cc>
 8005208:	2702      	movs	r7, #2
 800520a:	e770      	b.n	80050ee <_dtoa_r+0x3d6>
 800520c:	46d0      	mov	r8, sl
 800520e:	9c08      	ldr	r4, [sp, #32]
 8005210:	e78f      	b.n	8005132 <_dtoa_r+0x41a>
 8005212:	9903      	ldr	r1, [sp, #12]
 8005214:	4b29      	ldr	r3, [pc, #164]	; (80052bc <_dtoa_r+0x5a4>)
 8005216:	4421      	add	r1, r4
 8005218:	9112      	str	r1, [sp, #72]	; 0x48
 800521a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800521c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005220:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005224:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005228:	2900      	cmp	r1, #0
 800522a:	d055      	beq.n	80052d8 <_dtoa_r+0x5c0>
 800522c:	2000      	movs	r0, #0
 800522e:	4929      	ldr	r1, [pc, #164]	; (80052d4 <_dtoa_r+0x5bc>)
 8005230:	f7fb fa94 	bl	800075c <__aeabi_ddiv>
 8005234:	463b      	mov	r3, r7
 8005236:	4632      	mov	r2, r6
 8005238:	f7fa ffae 	bl	8000198 <__aeabi_dsub>
 800523c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005240:	9f03      	ldr	r7, [sp, #12]
 8005242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005246:	f7fb fc0f 	bl	8000a68 <__aeabi_d2iz>
 800524a:	4604      	mov	r4, r0
 800524c:	f7fb f8f2 	bl	8000434 <__aeabi_i2d>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005258:	f7fa ff9e 	bl	8000198 <__aeabi_dsub>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	3430      	adds	r4, #48	; 0x30
 8005262:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005266:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800526a:	f807 4b01 	strb.w	r4, [r7], #1
 800526e:	f7fb fbbd 	bl	80009ec <__aeabi_dcmplt>
 8005272:	2800      	cmp	r0, #0
 8005274:	d174      	bne.n	8005360 <_dtoa_r+0x648>
 8005276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800527a:	2000      	movs	r0, #0
 800527c:	4911      	ldr	r1, [pc, #68]	; (80052c4 <_dtoa_r+0x5ac>)
 800527e:	f7fa ff8b 	bl	8000198 <__aeabi_dsub>
 8005282:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005286:	f7fb fbb1 	bl	80009ec <__aeabi_dcmplt>
 800528a:	2800      	cmp	r0, #0
 800528c:	f040 80b7 	bne.w	80053fe <_dtoa_r+0x6e6>
 8005290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005292:	429f      	cmp	r7, r3
 8005294:	f43f af7a 	beq.w	800518c <_dtoa_r+0x474>
 8005298:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800529c:	2200      	movs	r2, #0
 800529e:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <_dtoa_r+0x5b0>)
 80052a0:	f7fb f932 	bl	8000508 <__aeabi_dmul>
 80052a4:	2200      	movs	r2, #0
 80052a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052ae:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <_dtoa_r+0x5b0>)
 80052b0:	f7fb f92a 	bl	8000508 <__aeabi_dmul>
 80052b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052b8:	e7c3      	b.n	8005242 <_dtoa_r+0x52a>
 80052ba:	bf00      	nop
 80052bc:	08007270 	.word	0x08007270
 80052c0:	08007248 	.word	0x08007248
 80052c4:	3ff00000 	.word	0x3ff00000
 80052c8:	40240000 	.word	0x40240000
 80052cc:	401c0000 	.word	0x401c0000
 80052d0:	40140000 	.word	0x40140000
 80052d4:	3fe00000 	.word	0x3fe00000
 80052d8:	4630      	mov	r0, r6
 80052da:	4639      	mov	r1, r7
 80052dc:	f7fb f914 	bl	8000508 <__aeabi_dmul>
 80052e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052e6:	9c03      	ldr	r4, [sp, #12]
 80052e8:	9314      	str	r3, [sp, #80]	; 0x50
 80052ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052ee:	f7fb fbbb 	bl	8000a68 <__aeabi_d2iz>
 80052f2:	9015      	str	r0, [sp, #84]	; 0x54
 80052f4:	f7fb f89e 	bl	8000434 <__aeabi_i2d>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005300:	f7fa ff4a 	bl	8000198 <__aeabi_dsub>
 8005304:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005306:	4606      	mov	r6, r0
 8005308:	3330      	adds	r3, #48	; 0x30
 800530a:	f804 3b01 	strb.w	r3, [r4], #1
 800530e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005310:	460f      	mov	r7, r1
 8005312:	429c      	cmp	r4, r3
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	d124      	bne.n	8005364 <_dtoa_r+0x64c>
 800531a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800531e:	4bb0      	ldr	r3, [pc, #704]	; (80055e0 <_dtoa_r+0x8c8>)
 8005320:	f7fa ff3c 	bl	800019c <__adddf3>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4630      	mov	r0, r6
 800532a:	4639      	mov	r1, r7
 800532c:	f7fb fb7c 	bl	8000a28 <__aeabi_dcmpgt>
 8005330:	2800      	cmp	r0, #0
 8005332:	d163      	bne.n	80053fc <_dtoa_r+0x6e4>
 8005334:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005338:	2000      	movs	r0, #0
 800533a:	49a9      	ldr	r1, [pc, #676]	; (80055e0 <_dtoa_r+0x8c8>)
 800533c:	f7fa ff2c 	bl	8000198 <__aeabi_dsub>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4630      	mov	r0, r6
 8005346:	4639      	mov	r1, r7
 8005348:	f7fb fb50 	bl	80009ec <__aeabi_dcmplt>
 800534c:	2800      	cmp	r0, #0
 800534e:	f43f af1d 	beq.w	800518c <_dtoa_r+0x474>
 8005352:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005354:	1e7b      	subs	r3, r7, #1
 8005356:	9314      	str	r3, [sp, #80]	; 0x50
 8005358:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800535c:	2b30      	cmp	r3, #48	; 0x30
 800535e:	d0f8      	beq.n	8005352 <_dtoa_r+0x63a>
 8005360:	46c2      	mov	sl, r8
 8005362:	e03b      	b.n	80053dc <_dtoa_r+0x6c4>
 8005364:	4b9f      	ldr	r3, [pc, #636]	; (80055e4 <_dtoa_r+0x8cc>)
 8005366:	f7fb f8cf 	bl	8000508 <__aeabi_dmul>
 800536a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800536e:	e7bc      	b.n	80052ea <_dtoa_r+0x5d2>
 8005370:	9f03      	ldr	r7, [sp, #12]
 8005372:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005376:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800537a:	4640      	mov	r0, r8
 800537c:	4649      	mov	r1, r9
 800537e:	f7fb f9ed 	bl	800075c <__aeabi_ddiv>
 8005382:	f7fb fb71 	bl	8000a68 <__aeabi_d2iz>
 8005386:	4604      	mov	r4, r0
 8005388:	f7fb f854 	bl	8000434 <__aeabi_i2d>
 800538c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005390:	f7fb f8ba 	bl	8000508 <__aeabi_dmul>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4640      	mov	r0, r8
 800539a:	4649      	mov	r1, r9
 800539c:	f7fa fefc 	bl	8000198 <__aeabi_dsub>
 80053a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80053a4:	f807 6b01 	strb.w	r6, [r7], #1
 80053a8:	9e03      	ldr	r6, [sp, #12]
 80053aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80053ae:	1bbe      	subs	r6, r7, r6
 80053b0:	45b4      	cmp	ip, r6
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	d136      	bne.n	8005426 <_dtoa_r+0x70e>
 80053b8:	f7fa fef0 	bl	800019c <__adddf3>
 80053bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053c0:	4680      	mov	r8, r0
 80053c2:	4689      	mov	r9, r1
 80053c4:	f7fb fb30 	bl	8000a28 <__aeabi_dcmpgt>
 80053c8:	bb58      	cbnz	r0, 8005422 <_dtoa_r+0x70a>
 80053ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053ce:	4640      	mov	r0, r8
 80053d0:	4649      	mov	r1, r9
 80053d2:	f7fb fb01 	bl	80009d8 <__aeabi_dcmpeq>
 80053d6:	b108      	cbz	r0, 80053dc <_dtoa_r+0x6c4>
 80053d8:	07e1      	lsls	r1, r4, #31
 80053da:	d422      	bmi.n	8005422 <_dtoa_r+0x70a>
 80053dc:	4628      	mov	r0, r5
 80053de:	4659      	mov	r1, fp
 80053e0:	f000 faf0 	bl	80059c4 <_Bfree>
 80053e4:	2300      	movs	r3, #0
 80053e6:	703b      	strb	r3, [r7, #0]
 80053e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80053ea:	f10a 0001 	add.w	r0, sl, #1
 80053ee:	6018      	str	r0, [r3, #0]
 80053f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f43f acde 	beq.w	8004db4 <_dtoa_r+0x9c>
 80053f8:	601f      	str	r7, [r3, #0]
 80053fa:	e4db      	b.n	8004db4 <_dtoa_r+0x9c>
 80053fc:	4627      	mov	r7, r4
 80053fe:	463b      	mov	r3, r7
 8005400:	461f      	mov	r7, r3
 8005402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005406:	2a39      	cmp	r2, #57	; 0x39
 8005408:	d107      	bne.n	800541a <_dtoa_r+0x702>
 800540a:	9a03      	ldr	r2, [sp, #12]
 800540c:	429a      	cmp	r2, r3
 800540e:	d1f7      	bne.n	8005400 <_dtoa_r+0x6e8>
 8005410:	2230      	movs	r2, #48	; 0x30
 8005412:	9903      	ldr	r1, [sp, #12]
 8005414:	f108 0801 	add.w	r8, r8, #1
 8005418:	700a      	strb	r2, [r1, #0]
 800541a:	781a      	ldrb	r2, [r3, #0]
 800541c:	3201      	adds	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	e79e      	b.n	8005360 <_dtoa_r+0x648>
 8005422:	46d0      	mov	r8, sl
 8005424:	e7eb      	b.n	80053fe <_dtoa_r+0x6e6>
 8005426:	2200      	movs	r2, #0
 8005428:	4b6e      	ldr	r3, [pc, #440]	; (80055e4 <_dtoa_r+0x8cc>)
 800542a:	f7fb f86d 	bl	8000508 <__aeabi_dmul>
 800542e:	2200      	movs	r2, #0
 8005430:	2300      	movs	r3, #0
 8005432:	4680      	mov	r8, r0
 8005434:	4689      	mov	r9, r1
 8005436:	f7fb facf 	bl	80009d8 <__aeabi_dcmpeq>
 800543a:	2800      	cmp	r0, #0
 800543c:	d09b      	beq.n	8005376 <_dtoa_r+0x65e>
 800543e:	e7cd      	b.n	80053dc <_dtoa_r+0x6c4>
 8005440:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005442:	2a00      	cmp	r2, #0
 8005444:	f000 80d0 	beq.w	80055e8 <_dtoa_r+0x8d0>
 8005448:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800544a:	2a01      	cmp	r2, #1
 800544c:	f300 80ae 	bgt.w	80055ac <_dtoa_r+0x894>
 8005450:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005452:	2a00      	cmp	r2, #0
 8005454:	f000 80a6 	beq.w	80055a4 <_dtoa_r+0x88c>
 8005458:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800545c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800545e:	9f06      	ldr	r7, [sp, #24]
 8005460:	9a06      	ldr	r2, [sp, #24]
 8005462:	2101      	movs	r1, #1
 8005464:	441a      	add	r2, r3
 8005466:	9206      	str	r2, [sp, #24]
 8005468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800546a:	4628      	mov	r0, r5
 800546c:	441a      	add	r2, r3
 800546e:	9209      	str	r2, [sp, #36]	; 0x24
 8005470:	f000 fb5e 	bl	8005b30 <__i2b>
 8005474:	4606      	mov	r6, r0
 8005476:	2f00      	cmp	r7, #0
 8005478:	dd0c      	ble.n	8005494 <_dtoa_r+0x77c>
 800547a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	dd09      	ble.n	8005494 <_dtoa_r+0x77c>
 8005480:	42bb      	cmp	r3, r7
 8005482:	bfa8      	it	ge
 8005484:	463b      	movge	r3, r7
 8005486:	9a06      	ldr	r2, [sp, #24]
 8005488:	1aff      	subs	r7, r7, r3
 800548a:	1ad2      	subs	r2, r2, r3
 800548c:	9206      	str	r2, [sp, #24]
 800548e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	9309      	str	r3, [sp, #36]	; 0x24
 8005494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005496:	b1f3      	cbz	r3, 80054d6 <_dtoa_r+0x7be>
 8005498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 80a8 	beq.w	80055f0 <_dtoa_r+0x8d8>
 80054a0:	2c00      	cmp	r4, #0
 80054a2:	dd10      	ble.n	80054c6 <_dtoa_r+0x7ae>
 80054a4:	4631      	mov	r1, r6
 80054a6:	4622      	mov	r2, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	f000 fbff 	bl	8005cac <__pow5mult>
 80054ae:	465a      	mov	r2, fp
 80054b0:	4601      	mov	r1, r0
 80054b2:	4606      	mov	r6, r0
 80054b4:	4628      	mov	r0, r5
 80054b6:	f000 fb51 	bl	8005b5c <__multiply>
 80054ba:	4680      	mov	r8, r0
 80054bc:	4659      	mov	r1, fp
 80054be:	4628      	mov	r0, r5
 80054c0:	f000 fa80 	bl	80059c4 <_Bfree>
 80054c4:	46c3      	mov	fp, r8
 80054c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c8:	1b1a      	subs	r2, r3, r4
 80054ca:	d004      	beq.n	80054d6 <_dtoa_r+0x7be>
 80054cc:	4659      	mov	r1, fp
 80054ce:	4628      	mov	r0, r5
 80054d0:	f000 fbec 	bl	8005cac <__pow5mult>
 80054d4:	4683      	mov	fp, r0
 80054d6:	2101      	movs	r1, #1
 80054d8:	4628      	mov	r0, r5
 80054da:	f000 fb29 	bl	8005b30 <__i2b>
 80054de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054e0:	4604      	mov	r4, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f340 8086 	ble.w	80055f4 <_dtoa_r+0x8dc>
 80054e8:	461a      	mov	r2, r3
 80054ea:	4601      	mov	r1, r0
 80054ec:	4628      	mov	r0, r5
 80054ee:	f000 fbdd 	bl	8005cac <__pow5mult>
 80054f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054f4:	4604      	mov	r4, r0
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	dd7f      	ble.n	80055fa <_dtoa_r+0x8e2>
 80054fa:	f04f 0800 	mov.w	r8, #0
 80054fe:	6923      	ldr	r3, [r4, #16]
 8005500:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005504:	6918      	ldr	r0, [r3, #16]
 8005506:	f000 fac5 	bl	8005a94 <__hi0bits>
 800550a:	f1c0 0020 	rsb	r0, r0, #32
 800550e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005510:	4418      	add	r0, r3
 8005512:	f010 001f 	ands.w	r0, r0, #31
 8005516:	f000 8092 	beq.w	800563e <_dtoa_r+0x926>
 800551a:	f1c0 0320 	rsb	r3, r0, #32
 800551e:	2b04      	cmp	r3, #4
 8005520:	f340 808a 	ble.w	8005638 <_dtoa_r+0x920>
 8005524:	f1c0 001c 	rsb	r0, r0, #28
 8005528:	9b06      	ldr	r3, [sp, #24]
 800552a:	4407      	add	r7, r0
 800552c:	4403      	add	r3, r0
 800552e:	9306      	str	r3, [sp, #24]
 8005530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005532:	4403      	add	r3, r0
 8005534:	9309      	str	r3, [sp, #36]	; 0x24
 8005536:	9b06      	ldr	r3, [sp, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	dd05      	ble.n	8005548 <_dtoa_r+0x830>
 800553c:	4659      	mov	r1, fp
 800553e:	461a      	mov	r2, r3
 8005540:	4628      	mov	r0, r5
 8005542:	f000 fc0d 	bl	8005d60 <__lshift>
 8005546:	4683      	mov	fp, r0
 8005548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554a:	2b00      	cmp	r3, #0
 800554c:	dd05      	ble.n	800555a <_dtoa_r+0x842>
 800554e:	4621      	mov	r1, r4
 8005550:	461a      	mov	r2, r3
 8005552:	4628      	mov	r0, r5
 8005554:	f000 fc04 	bl	8005d60 <__lshift>
 8005558:	4604      	mov	r4, r0
 800555a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d070      	beq.n	8005642 <_dtoa_r+0x92a>
 8005560:	4621      	mov	r1, r4
 8005562:	4658      	mov	r0, fp
 8005564:	f000 fc6c 	bl	8005e40 <__mcmp>
 8005568:	2800      	cmp	r0, #0
 800556a:	da6a      	bge.n	8005642 <_dtoa_r+0x92a>
 800556c:	2300      	movs	r3, #0
 800556e:	4659      	mov	r1, fp
 8005570:	220a      	movs	r2, #10
 8005572:	4628      	mov	r0, r5
 8005574:	f000 fa48 	bl	8005a08 <__multadd>
 8005578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800557a:	4683      	mov	fp, r0
 800557c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8194 	beq.w	80058ae <_dtoa_r+0xb96>
 8005586:	4631      	mov	r1, r6
 8005588:	2300      	movs	r3, #0
 800558a:	220a      	movs	r2, #10
 800558c:	4628      	mov	r0, r5
 800558e:	f000 fa3b 	bl	8005a08 <__multadd>
 8005592:	f1b9 0f00 	cmp.w	r9, #0
 8005596:	4606      	mov	r6, r0
 8005598:	f300 8093 	bgt.w	80056c2 <_dtoa_r+0x9aa>
 800559c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800559e:	2b02      	cmp	r3, #2
 80055a0:	dc57      	bgt.n	8005652 <_dtoa_r+0x93a>
 80055a2:	e08e      	b.n	80056c2 <_dtoa_r+0x9aa>
 80055a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80055aa:	e757      	b.n	800545c <_dtoa_r+0x744>
 80055ac:	9b08      	ldr	r3, [sp, #32]
 80055ae:	1e5c      	subs	r4, r3, #1
 80055b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b2:	42a3      	cmp	r3, r4
 80055b4:	bfb7      	itett	lt
 80055b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80055b8:	1b1c      	subge	r4, r3, r4
 80055ba:	1ae2      	sublt	r2, r4, r3
 80055bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80055be:	bfbe      	ittt	lt
 80055c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80055c2:	189b      	addlt	r3, r3, r2
 80055c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80055c6:	9b08      	ldr	r3, [sp, #32]
 80055c8:	bfb8      	it	lt
 80055ca:	2400      	movlt	r4, #0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bfbb      	ittet	lt
 80055d0:	9b06      	ldrlt	r3, [sp, #24]
 80055d2:	9a08      	ldrlt	r2, [sp, #32]
 80055d4:	9f06      	ldrge	r7, [sp, #24]
 80055d6:	1a9f      	sublt	r7, r3, r2
 80055d8:	bfac      	ite	ge
 80055da:	9b08      	ldrge	r3, [sp, #32]
 80055dc:	2300      	movlt	r3, #0
 80055de:	e73f      	b.n	8005460 <_dtoa_r+0x748>
 80055e0:	3fe00000 	.word	0x3fe00000
 80055e4:	40240000 	.word	0x40240000
 80055e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055ea:	9f06      	ldr	r7, [sp, #24]
 80055ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80055ee:	e742      	b.n	8005476 <_dtoa_r+0x75e>
 80055f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055f2:	e76b      	b.n	80054cc <_dtoa_r+0x7b4>
 80055f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	dc19      	bgt.n	800562e <_dtoa_r+0x916>
 80055fa:	9b04      	ldr	r3, [sp, #16]
 80055fc:	b9bb      	cbnz	r3, 800562e <_dtoa_r+0x916>
 80055fe:	9b05      	ldr	r3, [sp, #20]
 8005600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005604:	b99b      	cbnz	r3, 800562e <_dtoa_r+0x916>
 8005606:	9b05      	ldr	r3, [sp, #20]
 8005608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800560c:	0d1b      	lsrs	r3, r3, #20
 800560e:	051b      	lsls	r3, r3, #20
 8005610:	b183      	cbz	r3, 8005634 <_dtoa_r+0x91c>
 8005612:	f04f 0801 	mov.w	r8, #1
 8005616:	9b06      	ldr	r3, [sp, #24]
 8005618:	3301      	adds	r3, #1
 800561a:	9306      	str	r3, [sp, #24]
 800561c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561e:	3301      	adds	r3, #1
 8005620:	9309      	str	r3, [sp, #36]	; 0x24
 8005622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005624:	2b00      	cmp	r3, #0
 8005626:	f47f af6a 	bne.w	80054fe <_dtoa_r+0x7e6>
 800562a:	2001      	movs	r0, #1
 800562c:	e76f      	b.n	800550e <_dtoa_r+0x7f6>
 800562e:	f04f 0800 	mov.w	r8, #0
 8005632:	e7f6      	b.n	8005622 <_dtoa_r+0x90a>
 8005634:	4698      	mov	r8, r3
 8005636:	e7f4      	b.n	8005622 <_dtoa_r+0x90a>
 8005638:	f43f af7d 	beq.w	8005536 <_dtoa_r+0x81e>
 800563c:	4618      	mov	r0, r3
 800563e:	301c      	adds	r0, #28
 8005640:	e772      	b.n	8005528 <_dtoa_r+0x810>
 8005642:	9b08      	ldr	r3, [sp, #32]
 8005644:	2b00      	cmp	r3, #0
 8005646:	dc36      	bgt.n	80056b6 <_dtoa_r+0x99e>
 8005648:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800564a:	2b02      	cmp	r3, #2
 800564c:	dd33      	ble.n	80056b6 <_dtoa_r+0x99e>
 800564e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005652:	f1b9 0f00 	cmp.w	r9, #0
 8005656:	d10d      	bne.n	8005674 <_dtoa_r+0x95c>
 8005658:	4621      	mov	r1, r4
 800565a:	464b      	mov	r3, r9
 800565c:	2205      	movs	r2, #5
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f9d2 	bl	8005a08 <__multadd>
 8005664:	4601      	mov	r1, r0
 8005666:	4604      	mov	r4, r0
 8005668:	4658      	mov	r0, fp
 800566a:	f000 fbe9 	bl	8005e40 <__mcmp>
 800566e:	2800      	cmp	r0, #0
 8005670:	f73f adb8 	bgt.w	80051e4 <_dtoa_r+0x4cc>
 8005674:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005676:	9f03      	ldr	r7, [sp, #12]
 8005678:	ea6f 0a03 	mvn.w	sl, r3
 800567c:	f04f 0800 	mov.w	r8, #0
 8005680:	4621      	mov	r1, r4
 8005682:	4628      	mov	r0, r5
 8005684:	f000 f99e 	bl	80059c4 <_Bfree>
 8005688:	2e00      	cmp	r6, #0
 800568a:	f43f aea7 	beq.w	80053dc <_dtoa_r+0x6c4>
 800568e:	f1b8 0f00 	cmp.w	r8, #0
 8005692:	d005      	beq.n	80056a0 <_dtoa_r+0x988>
 8005694:	45b0      	cmp	r8, r6
 8005696:	d003      	beq.n	80056a0 <_dtoa_r+0x988>
 8005698:	4641      	mov	r1, r8
 800569a:	4628      	mov	r0, r5
 800569c:	f000 f992 	bl	80059c4 <_Bfree>
 80056a0:	4631      	mov	r1, r6
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 f98e 	bl	80059c4 <_Bfree>
 80056a8:	e698      	b.n	80053dc <_dtoa_r+0x6c4>
 80056aa:	2400      	movs	r4, #0
 80056ac:	4626      	mov	r6, r4
 80056ae:	e7e1      	b.n	8005674 <_dtoa_r+0x95c>
 80056b0:	46c2      	mov	sl, r8
 80056b2:	4626      	mov	r6, r4
 80056b4:	e596      	b.n	80051e4 <_dtoa_r+0x4cc>
 80056b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 80fd 	beq.w	80058bc <_dtoa_r+0xba4>
 80056c2:	2f00      	cmp	r7, #0
 80056c4:	dd05      	ble.n	80056d2 <_dtoa_r+0x9ba>
 80056c6:	4631      	mov	r1, r6
 80056c8:	463a      	mov	r2, r7
 80056ca:	4628      	mov	r0, r5
 80056cc:	f000 fb48 	bl	8005d60 <__lshift>
 80056d0:	4606      	mov	r6, r0
 80056d2:	f1b8 0f00 	cmp.w	r8, #0
 80056d6:	d05c      	beq.n	8005792 <_dtoa_r+0xa7a>
 80056d8:	4628      	mov	r0, r5
 80056da:	6871      	ldr	r1, [r6, #4]
 80056dc:	f000 f932 	bl	8005944 <_Balloc>
 80056e0:	4607      	mov	r7, r0
 80056e2:	b928      	cbnz	r0, 80056f0 <_dtoa_r+0x9d8>
 80056e4:	4602      	mov	r2, r0
 80056e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80056ea:	4b7f      	ldr	r3, [pc, #508]	; (80058e8 <_dtoa_r+0xbd0>)
 80056ec:	f7ff bb28 	b.w	8004d40 <_dtoa_r+0x28>
 80056f0:	6932      	ldr	r2, [r6, #16]
 80056f2:	f106 010c 	add.w	r1, r6, #12
 80056f6:	3202      	adds	r2, #2
 80056f8:	0092      	lsls	r2, r2, #2
 80056fa:	300c      	adds	r0, #12
 80056fc:	f000 f914 	bl	8005928 <memcpy>
 8005700:	2201      	movs	r2, #1
 8005702:	4639      	mov	r1, r7
 8005704:	4628      	mov	r0, r5
 8005706:	f000 fb2b 	bl	8005d60 <__lshift>
 800570a:	46b0      	mov	r8, r6
 800570c:	4606      	mov	r6, r0
 800570e:	9b03      	ldr	r3, [sp, #12]
 8005710:	3301      	adds	r3, #1
 8005712:	9308      	str	r3, [sp, #32]
 8005714:	9b03      	ldr	r3, [sp, #12]
 8005716:	444b      	add	r3, r9
 8005718:	930a      	str	r3, [sp, #40]	; 0x28
 800571a:	9b04      	ldr	r3, [sp, #16]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	9309      	str	r3, [sp, #36]	; 0x24
 8005722:	9b08      	ldr	r3, [sp, #32]
 8005724:	4621      	mov	r1, r4
 8005726:	3b01      	subs	r3, #1
 8005728:	4658      	mov	r0, fp
 800572a:	9304      	str	r3, [sp, #16]
 800572c:	f7ff fa68 	bl	8004c00 <quorem>
 8005730:	4603      	mov	r3, r0
 8005732:	4641      	mov	r1, r8
 8005734:	3330      	adds	r3, #48	; 0x30
 8005736:	9006      	str	r0, [sp, #24]
 8005738:	4658      	mov	r0, fp
 800573a:	930b      	str	r3, [sp, #44]	; 0x2c
 800573c:	f000 fb80 	bl	8005e40 <__mcmp>
 8005740:	4632      	mov	r2, r6
 8005742:	4681      	mov	r9, r0
 8005744:	4621      	mov	r1, r4
 8005746:	4628      	mov	r0, r5
 8005748:	f000 fb96 	bl	8005e78 <__mdiff>
 800574c:	68c2      	ldr	r2, [r0, #12]
 800574e:	4607      	mov	r7, r0
 8005750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005752:	bb02      	cbnz	r2, 8005796 <_dtoa_r+0xa7e>
 8005754:	4601      	mov	r1, r0
 8005756:	4658      	mov	r0, fp
 8005758:	f000 fb72 	bl	8005e40 <__mcmp>
 800575c:	4602      	mov	r2, r0
 800575e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005760:	4639      	mov	r1, r7
 8005762:	4628      	mov	r0, r5
 8005764:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005768:	f000 f92c 	bl	80059c4 <_Bfree>
 800576c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800576e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005770:	9f08      	ldr	r7, [sp, #32]
 8005772:	ea43 0102 	orr.w	r1, r3, r2
 8005776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005778:	430b      	orrs	r3, r1
 800577a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800577c:	d10d      	bne.n	800579a <_dtoa_r+0xa82>
 800577e:	2b39      	cmp	r3, #57	; 0x39
 8005780:	d029      	beq.n	80057d6 <_dtoa_r+0xabe>
 8005782:	f1b9 0f00 	cmp.w	r9, #0
 8005786:	dd01      	ble.n	800578c <_dtoa_r+0xa74>
 8005788:	9b06      	ldr	r3, [sp, #24]
 800578a:	3331      	adds	r3, #49	; 0x31
 800578c:	9a04      	ldr	r2, [sp, #16]
 800578e:	7013      	strb	r3, [r2, #0]
 8005790:	e776      	b.n	8005680 <_dtoa_r+0x968>
 8005792:	4630      	mov	r0, r6
 8005794:	e7b9      	b.n	800570a <_dtoa_r+0x9f2>
 8005796:	2201      	movs	r2, #1
 8005798:	e7e2      	b.n	8005760 <_dtoa_r+0xa48>
 800579a:	f1b9 0f00 	cmp.w	r9, #0
 800579e:	db06      	blt.n	80057ae <_dtoa_r+0xa96>
 80057a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80057a2:	ea41 0909 	orr.w	r9, r1, r9
 80057a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057a8:	ea59 0101 	orrs.w	r1, r9, r1
 80057ac:	d120      	bne.n	80057f0 <_dtoa_r+0xad8>
 80057ae:	2a00      	cmp	r2, #0
 80057b0:	ddec      	ble.n	800578c <_dtoa_r+0xa74>
 80057b2:	4659      	mov	r1, fp
 80057b4:	2201      	movs	r2, #1
 80057b6:	4628      	mov	r0, r5
 80057b8:	9308      	str	r3, [sp, #32]
 80057ba:	f000 fad1 	bl	8005d60 <__lshift>
 80057be:	4621      	mov	r1, r4
 80057c0:	4683      	mov	fp, r0
 80057c2:	f000 fb3d 	bl	8005e40 <__mcmp>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	9b08      	ldr	r3, [sp, #32]
 80057ca:	dc02      	bgt.n	80057d2 <_dtoa_r+0xaba>
 80057cc:	d1de      	bne.n	800578c <_dtoa_r+0xa74>
 80057ce:	07da      	lsls	r2, r3, #31
 80057d0:	d5dc      	bpl.n	800578c <_dtoa_r+0xa74>
 80057d2:	2b39      	cmp	r3, #57	; 0x39
 80057d4:	d1d8      	bne.n	8005788 <_dtoa_r+0xa70>
 80057d6:	2339      	movs	r3, #57	; 0x39
 80057d8:	9a04      	ldr	r2, [sp, #16]
 80057da:	7013      	strb	r3, [r2, #0]
 80057dc:	463b      	mov	r3, r7
 80057de:	461f      	mov	r7, r3
 80057e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	2a39      	cmp	r2, #57	; 0x39
 80057e8:	d050      	beq.n	800588c <_dtoa_r+0xb74>
 80057ea:	3201      	adds	r2, #1
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	e747      	b.n	8005680 <_dtoa_r+0x968>
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	dd03      	ble.n	80057fc <_dtoa_r+0xae4>
 80057f4:	2b39      	cmp	r3, #57	; 0x39
 80057f6:	d0ee      	beq.n	80057d6 <_dtoa_r+0xabe>
 80057f8:	3301      	adds	r3, #1
 80057fa:	e7c7      	b.n	800578c <_dtoa_r+0xa74>
 80057fc:	9a08      	ldr	r2, [sp, #32]
 80057fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005800:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005804:	428a      	cmp	r2, r1
 8005806:	d02a      	beq.n	800585e <_dtoa_r+0xb46>
 8005808:	4659      	mov	r1, fp
 800580a:	2300      	movs	r3, #0
 800580c:	220a      	movs	r2, #10
 800580e:	4628      	mov	r0, r5
 8005810:	f000 f8fa 	bl	8005a08 <__multadd>
 8005814:	45b0      	cmp	r8, r6
 8005816:	4683      	mov	fp, r0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	f04f 020a 	mov.w	r2, #10
 8005820:	4641      	mov	r1, r8
 8005822:	4628      	mov	r0, r5
 8005824:	d107      	bne.n	8005836 <_dtoa_r+0xb1e>
 8005826:	f000 f8ef 	bl	8005a08 <__multadd>
 800582a:	4680      	mov	r8, r0
 800582c:	4606      	mov	r6, r0
 800582e:	9b08      	ldr	r3, [sp, #32]
 8005830:	3301      	adds	r3, #1
 8005832:	9308      	str	r3, [sp, #32]
 8005834:	e775      	b.n	8005722 <_dtoa_r+0xa0a>
 8005836:	f000 f8e7 	bl	8005a08 <__multadd>
 800583a:	4631      	mov	r1, r6
 800583c:	4680      	mov	r8, r0
 800583e:	2300      	movs	r3, #0
 8005840:	220a      	movs	r2, #10
 8005842:	4628      	mov	r0, r5
 8005844:	f000 f8e0 	bl	8005a08 <__multadd>
 8005848:	4606      	mov	r6, r0
 800584a:	e7f0      	b.n	800582e <_dtoa_r+0xb16>
 800584c:	f1b9 0f00 	cmp.w	r9, #0
 8005850:	bfcc      	ite	gt
 8005852:	464f      	movgt	r7, r9
 8005854:	2701      	movle	r7, #1
 8005856:	f04f 0800 	mov.w	r8, #0
 800585a:	9a03      	ldr	r2, [sp, #12]
 800585c:	4417      	add	r7, r2
 800585e:	4659      	mov	r1, fp
 8005860:	2201      	movs	r2, #1
 8005862:	4628      	mov	r0, r5
 8005864:	9308      	str	r3, [sp, #32]
 8005866:	f000 fa7b 	bl	8005d60 <__lshift>
 800586a:	4621      	mov	r1, r4
 800586c:	4683      	mov	fp, r0
 800586e:	f000 fae7 	bl	8005e40 <__mcmp>
 8005872:	2800      	cmp	r0, #0
 8005874:	dcb2      	bgt.n	80057dc <_dtoa_r+0xac4>
 8005876:	d102      	bne.n	800587e <_dtoa_r+0xb66>
 8005878:	9b08      	ldr	r3, [sp, #32]
 800587a:	07db      	lsls	r3, r3, #31
 800587c:	d4ae      	bmi.n	80057dc <_dtoa_r+0xac4>
 800587e:	463b      	mov	r3, r7
 8005880:	461f      	mov	r7, r3
 8005882:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005886:	2a30      	cmp	r2, #48	; 0x30
 8005888:	d0fa      	beq.n	8005880 <_dtoa_r+0xb68>
 800588a:	e6f9      	b.n	8005680 <_dtoa_r+0x968>
 800588c:	9a03      	ldr	r2, [sp, #12]
 800588e:	429a      	cmp	r2, r3
 8005890:	d1a5      	bne.n	80057de <_dtoa_r+0xac6>
 8005892:	2331      	movs	r3, #49	; 0x31
 8005894:	f10a 0a01 	add.w	sl, sl, #1
 8005898:	e779      	b.n	800578e <_dtoa_r+0xa76>
 800589a:	4b14      	ldr	r3, [pc, #80]	; (80058ec <_dtoa_r+0xbd4>)
 800589c:	f7ff baa8 	b.w	8004df0 <_dtoa_r+0xd8>
 80058a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f47f aa81 	bne.w	8004daa <_dtoa_r+0x92>
 80058a8:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <_dtoa_r+0xbd8>)
 80058aa:	f7ff baa1 	b.w	8004df0 <_dtoa_r+0xd8>
 80058ae:	f1b9 0f00 	cmp.w	r9, #0
 80058b2:	dc03      	bgt.n	80058bc <_dtoa_r+0xba4>
 80058b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	f73f aecb 	bgt.w	8005652 <_dtoa_r+0x93a>
 80058bc:	9f03      	ldr	r7, [sp, #12]
 80058be:	4621      	mov	r1, r4
 80058c0:	4658      	mov	r0, fp
 80058c2:	f7ff f99d 	bl	8004c00 <quorem>
 80058c6:	9a03      	ldr	r2, [sp, #12]
 80058c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80058cc:	f807 3b01 	strb.w	r3, [r7], #1
 80058d0:	1aba      	subs	r2, r7, r2
 80058d2:	4591      	cmp	r9, r2
 80058d4:	ddba      	ble.n	800584c <_dtoa_r+0xb34>
 80058d6:	4659      	mov	r1, fp
 80058d8:	2300      	movs	r3, #0
 80058da:	220a      	movs	r2, #10
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 f893 	bl	8005a08 <__multadd>
 80058e2:	4683      	mov	fp, r0
 80058e4:	e7eb      	b.n	80058be <_dtoa_r+0xba6>
 80058e6:	bf00      	nop
 80058e8:	080071db 	.word	0x080071db
 80058ec:	08007138 	.word	0x08007138
 80058f0:	0800715c 	.word	0x0800715c

080058f4 <_localeconv_r>:
 80058f4:	4800      	ldr	r0, [pc, #0]	; (80058f8 <_localeconv_r+0x4>)
 80058f6:	4770      	bx	lr
 80058f8:	20000164 	.word	0x20000164

080058fc <malloc>:
 80058fc:	4b02      	ldr	r3, [pc, #8]	; (8005908 <malloc+0xc>)
 80058fe:	4601      	mov	r1, r0
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	f000 bc1d 	b.w	8006140 <_malloc_r>
 8005906:	bf00      	nop
 8005908:	20000010 	.word	0x20000010

0800590c <memchr>:
 800590c:	4603      	mov	r3, r0
 800590e:	b510      	push	{r4, lr}
 8005910:	b2c9      	uxtb	r1, r1
 8005912:	4402      	add	r2, r0
 8005914:	4293      	cmp	r3, r2
 8005916:	4618      	mov	r0, r3
 8005918:	d101      	bne.n	800591e <memchr+0x12>
 800591a:	2000      	movs	r0, #0
 800591c:	e003      	b.n	8005926 <memchr+0x1a>
 800591e:	7804      	ldrb	r4, [r0, #0]
 8005920:	3301      	adds	r3, #1
 8005922:	428c      	cmp	r4, r1
 8005924:	d1f6      	bne.n	8005914 <memchr+0x8>
 8005926:	bd10      	pop	{r4, pc}

08005928 <memcpy>:
 8005928:	440a      	add	r2, r1
 800592a:	4291      	cmp	r1, r2
 800592c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005930:	d100      	bne.n	8005934 <memcpy+0xc>
 8005932:	4770      	bx	lr
 8005934:	b510      	push	{r4, lr}
 8005936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800593a:	4291      	cmp	r1, r2
 800593c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005940:	d1f9      	bne.n	8005936 <memcpy+0xe>
 8005942:	bd10      	pop	{r4, pc}

08005944 <_Balloc>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005948:	4604      	mov	r4, r0
 800594a:	460d      	mov	r5, r1
 800594c:	b976      	cbnz	r6, 800596c <_Balloc+0x28>
 800594e:	2010      	movs	r0, #16
 8005950:	f7ff ffd4 	bl	80058fc <malloc>
 8005954:	4602      	mov	r2, r0
 8005956:	6260      	str	r0, [r4, #36]	; 0x24
 8005958:	b920      	cbnz	r0, 8005964 <_Balloc+0x20>
 800595a:	2166      	movs	r1, #102	; 0x66
 800595c:	4b17      	ldr	r3, [pc, #92]	; (80059bc <_Balloc+0x78>)
 800595e:	4818      	ldr	r0, [pc, #96]	; (80059c0 <_Balloc+0x7c>)
 8005960:	f000 fdce 	bl	8006500 <__assert_func>
 8005964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005968:	6006      	str	r6, [r0, #0]
 800596a:	60c6      	str	r6, [r0, #12]
 800596c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800596e:	68f3      	ldr	r3, [r6, #12]
 8005970:	b183      	cbz	r3, 8005994 <_Balloc+0x50>
 8005972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800597a:	b9b8      	cbnz	r0, 80059ac <_Balloc+0x68>
 800597c:	2101      	movs	r1, #1
 800597e:	fa01 f605 	lsl.w	r6, r1, r5
 8005982:	1d72      	adds	r2, r6, #5
 8005984:	4620      	mov	r0, r4
 8005986:	0092      	lsls	r2, r2, #2
 8005988:	f000 fb5e 	bl	8006048 <_calloc_r>
 800598c:	b160      	cbz	r0, 80059a8 <_Balloc+0x64>
 800598e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005992:	e00e      	b.n	80059b2 <_Balloc+0x6e>
 8005994:	2221      	movs	r2, #33	; 0x21
 8005996:	2104      	movs	r1, #4
 8005998:	4620      	mov	r0, r4
 800599a:	f000 fb55 	bl	8006048 <_calloc_r>
 800599e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059a0:	60f0      	str	r0, [r6, #12]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e4      	bne.n	8005972 <_Balloc+0x2e>
 80059a8:	2000      	movs	r0, #0
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	6802      	ldr	r2, [r0, #0]
 80059ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059b2:	2300      	movs	r3, #0
 80059b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059b8:	e7f7      	b.n	80059aa <_Balloc+0x66>
 80059ba:	bf00      	nop
 80059bc:	08007169 	.word	0x08007169
 80059c0:	080071ec 	.word	0x080071ec

080059c4 <_Bfree>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059c8:	4605      	mov	r5, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	b976      	cbnz	r6, 80059ec <_Bfree+0x28>
 80059ce:	2010      	movs	r0, #16
 80059d0:	f7ff ff94 	bl	80058fc <malloc>
 80059d4:	4602      	mov	r2, r0
 80059d6:	6268      	str	r0, [r5, #36]	; 0x24
 80059d8:	b920      	cbnz	r0, 80059e4 <_Bfree+0x20>
 80059da:	218a      	movs	r1, #138	; 0x8a
 80059dc:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <_Bfree+0x3c>)
 80059de:	4809      	ldr	r0, [pc, #36]	; (8005a04 <_Bfree+0x40>)
 80059e0:	f000 fd8e 	bl	8006500 <__assert_func>
 80059e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059e8:	6006      	str	r6, [r0, #0]
 80059ea:	60c6      	str	r6, [r0, #12]
 80059ec:	b13c      	cbz	r4, 80059fe <_Bfree+0x3a>
 80059ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059f0:	6862      	ldr	r2, [r4, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059f8:	6021      	str	r1, [r4, #0]
 80059fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	08007169 	.word	0x08007169
 8005a04:	080071ec 	.word	0x080071ec

08005a08 <__multadd>:
 8005a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	460c      	mov	r4, r1
 8005a10:	461e      	mov	r6, r3
 8005a12:	2000      	movs	r0, #0
 8005a14:	690d      	ldr	r5, [r1, #16]
 8005a16:	f101 0c14 	add.w	ip, r1, #20
 8005a1a:	f8dc 3000 	ldr.w	r3, [ip]
 8005a1e:	3001      	adds	r0, #1
 8005a20:	b299      	uxth	r1, r3
 8005a22:	fb02 6101 	mla	r1, r2, r1, r6
 8005a26:	0c1e      	lsrs	r6, r3, #16
 8005a28:	0c0b      	lsrs	r3, r1, #16
 8005a2a:	fb02 3306 	mla	r3, r2, r6, r3
 8005a2e:	b289      	uxth	r1, r1
 8005a30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a34:	4285      	cmp	r5, r0
 8005a36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a3a:	f84c 1b04 	str.w	r1, [ip], #4
 8005a3e:	dcec      	bgt.n	8005a1a <__multadd+0x12>
 8005a40:	b30e      	cbz	r6, 8005a86 <__multadd+0x7e>
 8005a42:	68a3      	ldr	r3, [r4, #8]
 8005a44:	42ab      	cmp	r3, r5
 8005a46:	dc19      	bgt.n	8005a7c <__multadd+0x74>
 8005a48:	6861      	ldr	r1, [r4, #4]
 8005a4a:	4638      	mov	r0, r7
 8005a4c:	3101      	adds	r1, #1
 8005a4e:	f7ff ff79 	bl	8005944 <_Balloc>
 8005a52:	4680      	mov	r8, r0
 8005a54:	b928      	cbnz	r0, 8005a62 <__multadd+0x5a>
 8005a56:	4602      	mov	r2, r0
 8005a58:	21b5      	movs	r1, #181	; 0xb5
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <__multadd+0x84>)
 8005a5c:	480c      	ldr	r0, [pc, #48]	; (8005a90 <__multadd+0x88>)
 8005a5e:	f000 fd4f 	bl	8006500 <__assert_func>
 8005a62:	6922      	ldr	r2, [r4, #16]
 8005a64:	f104 010c 	add.w	r1, r4, #12
 8005a68:	3202      	adds	r2, #2
 8005a6a:	0092      	lsls	r2, r2, #2
 8005a6c:	300c      	adds	r0, #12
 8005a6e:	f7ff ff5b 	bl	8005928 <memcpy>
 8005a72:	4621      	mov	r1, r4
 8005a74:	4638      	mov	r0, r7
 8005a76:	f7ff ffa5 	bl	80059c4 <_Bfree>
 8005a7a:	4644      	mov	r4, r8
 8005a7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a80:	3501      	adds	r5, #1
 8005a82:	615e      	str	r6, [r3, #20]
 8005a84:	6125      	str	r5, [r4, #16]
 8005a86:	4620      	mov	r0, r4
 8005a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a8c:	080071db 	.word	0x080071db
 8005a90:	080071ec 	.word	0x080071ec

08005a94 <__hi0bits>:
 8005a94:	0c02      	lsrs	r2, r0, #16
 8005a96:	0412      	lsls	r2, r2, #16
 8005a98:	4603      	mov	r3, r0
 8005a9a:	b9ca      	cbnz	r2, 8005ad0 <__hi0bits+0x3c>
 8005a9c:	0403      	lsls	r3, r0, #16
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005aa4:	bf04      	itt	eq
 8005aa6:	021b      	lsleq	r3, r3, #8
 8005aa8:	3008      	addeq	r0, #8
 8005aaa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005aae:	bf04      	itt	eq
 8005ab0:	011b      	lsleq	r3, r3, #4
 8005ab2:	3004      	addeq	r0, #4
 8005ab4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ab8:	bf04      	itt	eq
 8005aba:	009b      	lsleq	r3, r3, #2
 8005abc:	3002      	addeq	r0, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	db05      	blt.n	8005ace <__hi0bits+0x3a>
 8005ac2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005ac6:	f100 0001 	add.w	r0, r0, #1
 8005aca:	bf08      	it	eq
 8005acc:	2020      	moveq	r0, #32
 8005ace:	4770      	bx	lr
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	e7e5      	b.n	8005aa0 <__hi0bits+0xc>

08005ad4 <__lo0bits>:
 8005ad4:	6803      	ldr	r3, [r0, #0]
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	f013 0007 	ands.w	r0, r3, #7
 8005adc:	d00b      	beq.n	8005af6 <__lo0bits+0x22>
 8005ade:	07d9      	lsls	r1, r3, #31
 8005ae0:	d421      	bmi.n	8005b26 <__lo0bits+0x52>
 8005ae2:	0798      	lsls	r0, r3, #30
 8005ae4:	bf49      	itett	mi
 8005ae6:	085b      	lsrmi	r3, r3, #1
 8005ae8:	089b      	lsrpl	r3, r3, #2
 8005aea:	2001      	movmi	r0, #1
 8005aec:	6013      	strmi	r3, [r2, #0]
 8005aee:	bf5c      	itt	pl
 8005af0:	2002      	movpl	r0, #2
 8005af2:	6013      	strpl	r3, [r2, #0]
 8005af4:	4770      	bx	lr
 8005af6:	b299      	uxth	r1, r3
 8005af8:	b909      	cbnz	r1, 8005afe <__lo0bits+0x2a>
 8005afa:	2010      	movs	r0, #16
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	b2d9      	uxtb	r1, r3
 8005b00:	b909      	cbnz	r1, 8005b06 <__lo0bits+0x32>
 8005b02:	3008      	adds	r0, #8
 8005b04:	0a1b      	lsrs	r3, r3, #8
 8005b06:	0719      	lsls	r1, r3, #28
 8005b08:	bf04      	itt	eq
 8005b0a:	091b      	lsreq	r3, r3, #4
 8005b0c:	3004      	addeq	r0, #4
 8005b0e:	0799      	lsls	r1, r3, #30
 8005b10:	bf04      	itt	eq
 8005b12:	089b      	lsreq	r3, r3, #2
 8005b14:	3002      	addeq	r0, #2
 8005b16:	07d9      	lsls	r1, r3, #31
 8005b18:	d403      	bmi.n	8005b22 <__lo0bits+0x4e>
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	f100 0001 	add.w	r0, r0, #1
 8005b20:	d003      	beq.n	8005b2a <__lo0bits+0x56>
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	4770      	bx	lr
 8005b26:	2000      	movs	r0, #0
 8005b28:	4770      	bx	lr
 8005b2a:	2020      	movs	r0, #32
 8005b2c:	4770      	bx	lr
	...

08005b30 <__i2b>:
 8005b30:	b510      	push	{r4, lr}
 8005b32:	460c      	mov	r4, r1
 8005b34:	2101      	movs	r1, #1
 8005b36:	f7ff ff05 	bl	8005944 <_Balloc>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	b928      	cbnz	r0, 8005b4a <__i2b+0x1a>
 8005b3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b42:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <__i2b+0x24>)
 8005b44:	4804      	ldr	r0, [pc, #16]	; (8005b58 <__i2b+0x28>)
 8005b46:	f000 fcdb 	bl	8006500 <__assert_func>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	6144      	str	r4, [r0, #20]
 8005b4e:	6103      	str	r3, [r0, #16]
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	bf00      	nop
 8005b54:	080071db 	.word	0x080071db
 8005b58:	080071ec 	.word	0x080071ec

08005b5c <__multiply>:
 8005b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b60:	4691      	mov	r9, r2
 8005b62:	690a      	ldr	r2, [r1, #16]
 8005b64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b68:	460c      	mov	r4, r1
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	bfbe      	ittt	lt
 8005b6e:	460b      	movlt	r3, r1
 8005b70:	464c      	movlt	r4, r9
 8005b72:	4699      	movlt	r9, r3
 8005b74:	6927      	ldr	r7, [r4, #16]
 8005b76:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005b7a:	68a3      	ldr	r3, [r4, #8]
 8005b7c:	6861      	ldr	r1, [r4, #4]
 8005b7e:	eb07 060a 	add.w	r6, r7, sl
 8005b82:	42b3      	cmp	r3, r6
 8005b84:	b085      	sub	sp, #20
 8005b86:	bfb8      	it	lt
 8005b88:	3101      	addlt	r1, #1
 8005b8a:	f7ff fedb 	bl	8005944 <_Balloc>
 8005b8e:	b930      	cbnz	r0, 8005b9e <__multiply+0x42>
 8005b90:	4602      	mov	r2, r0
 8005b92:	f240 115d 	movw	r1, #349	; 0x15d
 8005b96:	4b43      	ldr	r3, [pc, #268]	; (8005ca4 <__multiply+0x148>)
 8005b98:	4843      	ldr	r0, [pc, #268]	; (8005ca8 <__multiply+0x14c>)
 8005b9a:	f000 fcb1 	bl	8006500 <__assert_func>
 8005b9e:	f100 0514 	add.w	r5, r0, #20
 8005ba2:	462b      	mov	r3, r5
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005baa:	4543      	cmp	r3, r8
 8005bac:	d321      	bcc.n	8005bf2 <__multiply+0x96>
 8005bae:	f104 0314 	add.w	r3, r4, #20
 8005bb2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005bb6:	f109 0314 	add.w	r3, r9, #20
 8005bba:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005bbe:	9202      	str	r2, [sp, #8]
 8005bc0:	1b3a      	subs	r2, r7, r4
 8005bc2:	3a15      	subs	r2, #21
 8005bc4:	f022 0203 	bic.w	r2, r2, #3
 8005bc8:	3204      	adds	r2, #4
 8005bca:	f104 0115 	add.w	r1, r4, #21
 8005bce:	428f      	cmp	r7, r1
 8005bd0:	bf38      	it	cc
 8005bd2:	2204      	movcc	r2, #4
 8005bd4:	9201      	str	r2, [sp, #4]
 8005bd6:	9a02      	ldr	r2, [sp, #8]
 8005bd8:	9303      	str	r3, [sp, #12]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d80c      	bhi.n	8005bf8 <__multiply+0x9c>
 8005bde:	2e00      	cmp	r6, #0
 8005be0:	dd03      	ble.n	8005bea <__multiply+0x8e>
 8005be2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d059      	beq.n	8005c9e <__multiply+0x142>
 8005bea:	6106      	str	r6, [r0, #16]
 8005bec:	b005      	add	sp, #20
 8005bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf2:	f843 2b04 	str.w	r2, [r3], #4
 8005bf6:	e7d8      	b.n	8005baa <__multiply+0x4e>
 8005bf8:	f8b3 a000 	ldrh.w	sl, [r3]
 8005bfc:	f1ba 0f00 	cmp.w	sl, #0
 8005c00:	d023      	beq.n	8005c4a <__multiply+0xee>
 8005c02:	46a9      	mov	r9, r5
 8005c04:	f04f 0c00 	mov.w	ip, #0
 8005c08:	f104 0e14 	add.w	lr, r4, #20
 8005c0c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c10:	f8d9 1000 	ldr.w	r1, [r9]
 8005c14:	fa1f fb82 	uxth.w	fp, r2
 8005c18:	b289      	uxth	r1, r1
 8005c1a:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c1e:	4461      	add	r1, ip
 8005c20:	f8d9 c000 	ldr.w	ip, [r9]
 8005c24:	0c12      	lsrs	r2, r2, #16
 8005c26:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005c2a:	fb0a c202 	mla	r2, sl, r2, ip
 8005c2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c32:	b289      	uxth	r1, r1
 8005c34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c38:	4577      	cmp	r7, lr
 8005c3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c3e:	f849 1b04 	str.w	r1, [r9], #4
 8005c42:	d8e3      	bhi.n	8005c0c <__multiply+0xb0>
 8005c44:	9a01      	ldr	r2, [sp, #4]
 8005c46:	f845 c002 	str.w	ip, [r5, r2]
 8005c4a:	9a03      	ldr	r2, [sp, #12]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c52:	f1b9 0f00 	cmp.w	r9, #0
 8005c56:	d020      	beq.n	8005c9a <__multiply+0x13e>
 8005c58:	46ae      	mov	lr, r5
 8005c5a:	f04f 0a00 	mov.w	sl, #0
 8005c5e:	6829      	ldr	r1, [r5, #0]
 8005c60:	f104 0c14 	add.w	ip, r4, #20
 8005c64:	f8bc b000 	ldrh.w	fp, [ip]
 8005c68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005c6c:	b289      	uxth	r1, r1
 8005c6e:	fb09 220b 	mla	r2, r9, fp, r2
 8005c72:	4492      	add	sl, r2
 8005c74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005c78:	f84e 1b04 	str.w	r1, [lr], #4
 8005c7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005c80:	f8be 1000 	ldrh.w	r1, [lr]
 8005c84:	0c12      	lsrs	r2, r2, #16
 8005c86:	fb09 1102 	mla	r1, r9, r2, r1
 8005c8a:	4567      	cmp	r7, ip
 8005c8c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005c90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c94:	d8e6      	bhi.n	8005c64 <__multiply+0x108>
 8005c96:	9a01      	ldr	r2, [sp, #4]
 8005c98:	50a9      	str	r1, [r5, r2]
 8005c9a:	3504      	adds	r5, #4
 8005c9c:	e79b      	b.n	8005bd6 <__multiply+0x7a>
 8005c9e:	3e01      	subs	r6, #1
 8005ca0:	e79d      	b.n	8005bde <__multiply+0x82>
 8005ca2:	bf00      	nop
 8005ca4:	080071db 	.word	0x080071db
 8005ca8:	080071ec 	.word	0x080071ec

08005cac <__pow5mult>:
 8005cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb0:	4615      	mov	r5, r2
 8005cb2:	f012 0203 	ands.w	r2, r2, #3
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	460f      	mov	r7, r1
 8005cba:	d007      	beq.n	8005ccc <__pow5mult+0x20>
 8005cbc:	4c25      	ldr	r4, [pc, #148]	; (8005d54 <__pow5mult+0xa8>)
 8005cbe:	3a01      	subs	r2, #1
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cc6:	f7ff fe9f 	bl	8005a08 <__multadd>
 8005cca:	4607      	mov	r7, r0
 8005ccc:	10ad      	asrs	r5, r5, #2
 8005cce:	d03d      	beq.n	8005d4c <__pow5mult+0xa0>
 8005cd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005cd2:	b97c      	cbnz	r4, 8005cf4 <__pow5mult+0x48>
 8005cd4:	2010      	movs	r0, #16
 8005cd6:	f7ff fe11 	bl	80058fc <malloc>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	6270      	str	r0, [r6, #36]	; 0x24
 8005cde:	b928      	cbnz	r0, 8005cec <__pow5mult+0x40>
 8005ce0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ce4:	4b1c      	ldr	r3, [pc, #112]	; (8005d58 <__pow5mult+0xac>)
 8005ce6:	481d      	ldr	r0, [pc, #116]	; (8005d5c <__pow5mult+0xb0>)
 8005ce8:	f000 fc0a 	bl	8006500 <__assert_func>
 8005cec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cf0:	6004      	str	r4, [r0, #0]
 8005cf2:	60c4      	str	r4, [r0, #12]
 8005cf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005cf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cfc:	b94c      	cbnz	r4, 8005d12 <__pow5mult+0x66>
 8005cfe:	f240 2171 	movw	r1, #625	; 0x271
 8005d02:	4630      	mov	r0, r6
 8005d04:	f7ff ff14 	bl	8005b30 <__i2b>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d10:	6003      	str	r3, [r0, #0]
 8005d12:	f04f 0900 	mov.w	r9, #0
 8005d16:	07eb      	lsls	r3, r5, #31
 8005d18:	d50a      	bpl.n	8005d30 <__pow5mult+0x84>
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	4630      	mov	r0, r6
 8005d20:	f7ff ff1c 	bl	8005b5c <__multiply>
 8005d24:	4680      	mov	r8, r0
 8005d26:	4639      	mov	r1, r7
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f7ff fe4b 	bl	80059c4 <_Bfree>
 8005d2e:	4647      	mov	r7, r8
 8005d30:	106d      	asrs	r5, r5, #1
 8005d32:	d00b      	beq.n	8005d4c <__pow5mult+0xa0>
 8005d34:	6820      	ldr	r0, [r4, #0]
 8005d36:	b938      	cbnz	r0, 8005d48 <__pow5mult+0x9c>
 8005d38:	4622      	mov	r2, r4
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	f7ff ff0d 	bl	8005b5c <__multiply>
 8005d42:	6020      	str	r0, [r4, #0]
 8005d44:	f8c0 9000 	str.w	r9, [r0]
 8005d48:	4604      	mov	r4, r0
 8005d4a:	e7e4      	b.n	8005d16 <__pow5mult+0x6a>
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d52:	bf00      	nop
 8005d54:	08007338 	.word	0x08007338
 8005d58:	08007169 	.word	0x08007169
 8005d5c:	080071ec 	.word	0x080071ec

08005d60 <__lshift>:
 8005d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d64:	460c      	mov	r4, r1
 8005d66:	4607      	mov	r7, r0
 8005d68:	4691      	mov	r9, r2
 8005d6a:	6923      	ldr	r3, [r4, #16]
 8005d6c:	6849      	ldr	r1, [r1, #4]
 8005d6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d72:	68a3      	ldr	r3, [r4, #8]
 8005d74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d78:	f108 0601 	add.w	r6, r8, #1
 8005d7c:	42b3      	cmp	r3, r6
 8005d7e:	db0b      	blt.n	8005d98 <__lshift+0x38>
 8005d80:	4638      	mov	r0, r7
 8005d82:	f7ff fddf 	bl	8005944 <_Balloc>
 8005d86:	4605      	mov	r5, r0
 8005d88:	b948      	cbnz	r0, 8005d9e <__lshift+0x3e>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005d90:	4b29      	ldr	r3, [pc, #164]	; (8005e38 <__lshift+0xd8>)
 8005d92:	482a      	ldr	r0, [pc, #168]	; (8005e3c <__lshift+0xdc>)
 8005d94:	f000 fbb4 	bl	8006500 <__assert_func>
 8005d98:	3101      	adds	r1, #1
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	e7ee      	b.n	8005d7c <__lshift+0x1c>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f100 0114 	add.w	r1, r0, #20
 8005da4:	f100 0210 	add.w	r2, r0, #16
 8005da8:	4618      	mov	r0, r3
 8005daa:	4553      	cmp	r3, sl
 8005dac:	db37      	blt.n	8005e1e <__lshift+0xbe>
 8005dae:	6920      	ldr	r0, [r4, #16]
 8005db0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005db4:	f104 0314 	add.w	r3, r4, #20
 8005db8:	f019 091f 	ands.w	r9, r9, #31
 8005dbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005dc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005dc4:	d02f      	beq.n	8005e26 <__lshift+0xc6>
 8005dc6:	468a      	mov	sl, r1
 8005dc8:	f04f 0c00 	mov.w	ip, #0
 8005dcc:	f1c9 0e20 	rsb	lr, r9, #32
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	fa02 f209 	lsl.w	r2, r2, r9
 8005dd6:	ea42 020c 	orr.w	r2, r2, ip
 8005dda:	f84a 2b04 	str.w	r2, [sl], #4
 8005dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8005de2:	4298      	cmp	r0, r3
 8005de4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005de8:	d8f2      	bhi.n	8005dd0 <__lshift+0x70>
 8005dea:	1b03      	subs	r3, r0, r4
 8005dec:	3b15      	subs	r3, #21
 8005dee:	f023 0303 	bic.w	r3, r3, #3
 8005df2:	3304      	adds	r3, #4
 8005df4:	f104 0215 	add.w	r2, r4, #21
 8005df8:	4290      	cmp	r0, r2
 8005dfa:	bf38      	it	cc
 8005dfc:	2304      	movcc	r3, #4
 8005dfe:	f841 c003 	str.w	ip, [r1, r3]
 8005e02:	f1bc 0f00 	cmp.w	ip, #0
 8005e06:	d001      	beq.n	8005e0c <__lshift+0xac>
 8005e08:	f108 0602 	add.w	r6, r8, #2
 8005e0c:	3e01      	subs	r6, #1
 8005e0e:	4638      	mov	r0, r7
 8005e10:	4621      	mov	r1, r4
 8005e12:	612e      	str	r6, [r5, #16]
 8005e14:	f7ff fdd6 	bl	80059c4 <_Bfree>
 8005e18:	4628      	mov	r0, r5
 8005e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e22:	3301      	adds	r3, #1
 8005e24:	e7c1      	b.n	8005daa <__lshift+0x4a>
 8005e26:	3904      	subs	r1, #4
 8005e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e2c:	4298      	cmp	r0, r3
 8005e2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e32:	d8f9      	bhi.n	8005e28 <__lshift+0xc8>
 8005e34:	e7ea      	b.n	8005e0c <__lshift+0xac>
 8005e36:	bf00      	nop
 8005e38:	080071db 	.word	0x080071db
 8005e3c:	080071ec 	.word	0x080071ec

08005e40 <__mcmp>:
 8005e40:	4603      	mov	r3, r0
 8005e42:	690a      	ldr	r2, [r1, #16]
 8005e44:	6900      	ldr	r0, [r0, #16]
 8005e46:	b530      	push	{r4, r5, lr}
 8005e48:	1a80      	subs	r0, r0, r2
 8005e4a:	d10d      	bne.n	8005e68 <__mcmp+0x28>
 8005e4c:	3314      	adds	r3, #20
 8005e4e:	3114      	adds	r1, #20
 8005e50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e60:	4295      	cmp	r5, r2
 8005e62:	d002      	beq.n	8005e6a <__mcmp+0x2a>
 8005e64:	d304      	bcc.n	8005e70 <__mcmp+0x30>
 8005e66:	2001      	movs	r0, #1
 8005e68:	bd30      	pop	{r4, r5, pc}
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	d3f4      	bcc.n	8005e58 <__mcmp+0x18>
 8005e6e:	e7fb      	b.n	8005e68 <__mcmp+0x28>
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295
 8005e74:	e7f8      	b.n	8005e68 <__mcmp+0x28>
	...

08005e78 <__mdiff>:
 8005e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	460d      	mov	r5, r1
 8005e7e:	4607      	mov	r7, r0
 8005e80:	4611      	mov	r1, r2
 8005e82:	4628      	mov	r0, r5
 8005e84:	4614      	mov	r4, r2
 8005e86:	f7ff ffdb 	bl	8005e40 <__mcmp>
 8005e8a:	1e06      	subs	r6, r0, #0
 8005e8c:	d111      	bne.n	8005eb2 <__mdiff+0x3a>
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4638      	mov	r0, r7
 8005e92:	f7ff fd57 	bl	8005944 <_Balloc>
 8005e96:	4602      	mov	r2, r0
 8005e98:	b928      	cbnz	r0, 8005ea6 <__mdiff+0x2e>
 8005e9a:	f240 2132 	movw	r1, #562	; 0x232
 8005e9e:	4b3a      	ldr	r3, [pc, #232]	; (8005f88 <__mdiff+0x110>)
 8005ea0:	483a      	ldr	r0, [pc, #232]	; (8005f8c <__mdiff+0x114>)
 8005ea2:	f000 fb2d 	bl	8006500 <__assert_func>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005eac:	4610      	mov	r0, r2
 8005eae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb2:	bfa4      	itt	ge
 8005eb4:	4623      	movge	r3, r4
 8005eb6:	462c      	movge	r4, r5
 8005eb8:	4638      	mov	r0, r7
 8005eba:	6861      	ldr	r1, [r4, #4]
 8005ebc:	bfa6      	itte	ge
 8005ebe:	461d      	movge	r5, r3
 8005ec0:	2600      	movge	r6, #0
 8005ec2:	2601      	movlt	r6, #1
 8005ec4:	f7ff fd3e 	bl	8005944 <_Balloc>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	b918      	cbnz	r0, 8005ed4 <__mdiff+0x5c>
 8005ecc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <__mdiff+0x110>)
 8005ed2:	e7e5      	b.n	8005ea0 <__mdiff+0x28>
 8005ed4:	f102 0814 	add.w	r8, r2, #20
 8005ed8:	46c2      	mov	sl, r8
 8005eda:	f04f 0c00 	mov.w	ip, #0
 8005ede:	6927      	ldr	r7, [r4, #16]
 8005ee0:	60c6      	str	r6, [r0, #12]
 8005ee2:	692e      	ldr	r6, [r5, #16]
 8005ee4:	f104 0014 	add.w	r0, r4, #20
 8005ee8:	f105 0914 	add.w	r9, r5, #20
 8005eec:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005ef0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005ef4:	3410      	adds	r4, #16
 8005ef6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005efa:	f859 3b04 	ldr.w	r3, [r9], #4
 8005efe:	fa1f f18b 	uxth.w	r1, fp
 8005f02:	448c      	add	ip, r1
 8005f04:	b299      	uxth	r1, r3
 8005f06:	0c1b      	lsrs	r3, r3, #16
 8005f08:	ebac 0101 	sub.w	r1, ip, r1
 8005f0c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f10:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f14:	b289      	uxth	r1, r1
 8005f16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f1a:	454e      	cmp	r6, r9
 8005f1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f20:	f84a 3b04 	str.w	r3, [sl], #4
 8005f24:	d8e7      	bhi.n	8005ef6 <__mdiff+0x7e>
 8005f26:	1b73      	subs	r3, r6, r5
 8005f28:	3b15      	subs	r3, #21
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	3515      	adds	r5, #21
 8005f30:	3304      	adds	r3, #4
 8005f32:	42ae      	cmp	r6, r5
 8005f34:	bf38      	it	cc
 8005f36:	2304      	movcc	r3, #4
 8005f38:	4418      	add	r0, r3
 8005f3a:	4443      	add	r3, r8
 8005f3c:	461e      	mov	r6, r3
 8005f3e:	4605      	mov	r5, r0
 8005f40:	4575      	cmp	r5, lr
 8005f42:	d30e      	bcc.n	8005f62 <__mdiff+0xea>
 8005f44:	f10e 0103 	add.w	r1, lr, #3
 8005f48:	1a09      	subs	r1, r1, r0
 8005f4a:	f021 0103 	bic.w	r1, r1, #3
 8005f4e:	3803      	subs	r0, #3
 8005f50:	4586      	cmp	lr, r0
 8005f52:	bf38      	it	cc
 8005f54:	2100      	movcc	r1, #0
 8005f56:	4419      	add	r1, r3
 8005f58:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005f5c:	b18b      	cbz	r3, 8005f82 <__mdiff+0x10a>
 8005f5e:	6117      	str	r7, [r2, #16]
 8005f60:	e7a4      	b.n	8005eac <__mdiff+0x34>
 8005f62:	f855 8b04 	ldr.w	r8, [r5], #4
 8005f66:	fa1f f188 	uxth.w	r1, r8
 8005f6a:	4461      	add	r1, ip
 8005f6c:	140c      	asrs	r4, r1, #16
 8005f6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005f72:	b289      	uxth	r1, r1
 8005f74:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005f78:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005f7c:	f846 1b04 	str.w	r1, [r6], #4
 8005f80:	e7de      	b.n	8005f40 <__mdiff+0xc8>
 8005f82:	3f01      	subs	r7, #1
 8005f84:	e7e8      	b.n	8005f58 <__mdiff+0xe0>
 8005f86:	bf00      	nop
 8005f88:	080071db 	.word	0x080071db
 8005f8c:	080071ec 	.word	0x080071ec

08005f90 <__d2b>:
 8005f90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f94:	2101      	movs	r1, #1
 8005f96:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005f9a:	4690      	mov	r8, r2
 8005f9c:	461d      	mov	r5, r3
 8005f9e:	f7ff fcd1 	bl	8005944 <_Balloc>
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	b930      	cbnz	r0, 8005fb4 <__d2b+0x24>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	f240 310a 	movw	r1, #778	; 0x30a
 8005fac:	4b24      	ldr	r3, [pc, #144]	; (8006040 <__d2b+0xb0>)
 8005fae:	4825      	ldr	r0, [pc, #148]	; (8006044 <__d2b+0xb4>)
 8005fb0:	f000 faa6 	bl	8006500 <__assert_func>
 8005fb4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005fb8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005fbc:	bb2d      	cbnz	r5, 800600a <__d2b+0x7a>
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	f1b8 0300 	subs.w	r3, r8, #0
 8005fc4:	d026      	beq.n	8006014 <__d2b+0x84>
 8005fc6:	4668      	mov	r0, sp
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	f7ff fd83 	bl	8005ad4 <__lo0bits>
 8005fce:	9900      	ldr	r1, [sp, #0]
 8005fd0:	b1f0      	cbz	r0, 8006010 <__d2b+0x80>
 8005fd2:	9a01      	ldr	r2, [sp, #4]
 8005fd4:	f1c0 0320 	rsb	r3, r0, #32
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	40c2      	lsrs	r2, r0
 8005fe0:	6163      	str	r3, [r4, #20]
 8005fe2:	9201      	str	r2, [sp, #4]
 8005fe4:	9b01      	ldr	r3, [sp, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bf14      	ite	ne
 8005fea:	2102      	movne	r1, #2
 8005fec:	2101      	moveq	r1, #1
 8005fee:	61a3      	str	r3, [r4, #24]
 8005ff0:	6121      	str	r1, [r4, #16]
 8005ff2:	b1c5      	cbz	r5, 8006026 <__d2b+0x96>
 8005ff4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ff8:	4405      	add	r5, r0
 8005ffa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ffe:	603d      	str	r5, [r7, #0]
 8006000:	6030      	str	r0, [r6, #0]
 8006002:	4620      	mov	r0, r4
 8006004:	b002      	add	sp, #8
 8006006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800600e:	e7d6      	b.n	8005fbe <__d2b+0x2e>
 8006010:	6161      	str	r1, [r4, #20]
 8006012:	e7e7      	b.n	8005fe4 <__d2b+0x54>
 8006014:	a801      	add	r0, sp, #4
 8006016:	f7ff fd5d 	bl	8005ad4 <__lo0bits>
 800601a:	2101      	movs	r1, #1
 800601c:	9b01      	ldr	r3, [sp, #4]
 800601e:	6121      	str	r1, [r4, #16]
 8006020:	6163      	str	r3, [r4, #20]
 8006022:	3020      	adds	r0, #32
 8006024:	e7e5      	b.n	8005ff2 <__d2b+0x62>
 8006026:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800602a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800602e:	6038      	str	r0, [r7, #0]
 8006030:	6918      	ldr	r0, [r3, #16]
 8006032:	f7ff fd2f 	bl	8005a94 <__hi0bits>
 8006036:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800603a:	6031      	str	r1, [r6, #0]
 800603c:	e7e1      	b.n	8006002 <__d2b+0x72>
 800603e:	bf00      	nop
 8006040:	080071db 	.word	0x080071db
 8006044:	080071ec 	.word	0x080071ec

08006048 <_calloc_r>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	fba1 5402 	umull	r5, r4, r1, r2
 800604e:	b934      	cbnz	r4, 800605e <_calloc_r+0x16>
 8006050:	4629      	mov	r1, r5
 8006052:	f000 f875 	bl	8006140 <_malloc_r>
 8006056:	4606      	mov	r6, r0
 8006058:	b928      	cbnz	r0, 8006066 <_calloc_r+0x1e>
 800605a:	4630      	mov	r0, r6
 800605c:	bd70      	pop	{r4, r5, r6, pc}
 800605e:	220c      	movs	r2, #12
 8006060:	2600      	movs	r6, #0
 8006062:	6002      	str	r2, [r0, #0]
 8006064:	e7f9      	b.n	800605a <_calloc_r+0x12>
 8006066:	462a      	mov	r2, r5
 8006068:	4621      	mov	r1, r4
 800606a:	f7fe f92d 	bl	80042c8 <memset>
 800606e:	e7f4      	b.n	800605a <_calloc_r+0x12>

08006070 <_free_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4605      	mov	r5, r0
 8006074:	2900      	cmp	r1, #0
 8006076:	d040      	beq.n	80060fa <_free_r+0x8a>
 8006078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800607c:	1f0c      	subs	r4, r1, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	bfb8      	it	lt
 8006082:	18e4      	addlt	r4, r4, r3
 8006084:	f000 fa98 	bl	80065b8 <__malloc_lock>
 8006088:	4a1c      	ldr	r2, [pc, #112]	; (80060fc <_free_r+0x8c>)
 800608a:	6813      	ldr	r3, [r2, #0]
 800608c:	b933      	cbnz	r3, 800609c <_free_r+0x2c>
 800608e:	6063      	str	r3, [r4, #4]
 8006090:	6014      	str	r4, [r2, #0]
 8006092:	4628      	mov	r0, r5
 8006094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006098:	f000 ba94 	b.w	80065c4 <__malloc_unlock>
 800609c:	42a3      	cmp	r3, r4
 800609e:	d908      	bls.n	80060b2 <_free_r+0x42>
 80060a0:	6820      	ldr	r0, [r4, #0]
 80060a2:	1821      	adds	r1, r4, r0
 80060a4:	428b      	cmp	r3, r1
 80060a6:	bf01      	itttt	eq
 80060a8:	6819      	ldreq	r1, [r3, #0]
 80060aa:	685b      	ldreq	r3, [r3, #4]
 80060ac:	1809      	addeq	r1, r1, r0
 80060ae:	6021      	streq	r1, [r4, #0]
 80060b0:	e7ed      	b.n	800608e <_free_r+0x1e>
 80060b2:	461a      	mov	r2, r3
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	b10b      	cbz	r3, 80060bc <_free_r+0x4c>
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	d9fa      	bls.n	80060b2 <_free_r+0x42>
 80060bc:	6811      	ldr	r1, [r2, #0]
 80060be:	1850      	adds	r0, r2, r1
 80060c0:	42a0      	cmp	r0, r4
 80060c2:	d10b      	bne.n	80060dc <_free_r+0x6c>
 80060c4:	6820      	ldr	r0, [r4, #0]
 80060c6:	4401      	add	r1, r0
 80060c8:	1850      	adds	r0, r2, r1
 80060ca:	4283      	cmp	r3, r0
 80060cc:	6011      	str	r1, [r2, #0]
 80060ce:	d1e0      	bne.n	8006092 <_free_r+0x22>
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	4401      	add	r1, r0
 80060d6:	6011      	str	r1, [r2, #0]
 80060d8:	6053      	str	r3, [r2, #4]
 80060da:	e7da      	b.n	8006092 <_free_r+0x22>
 80060dc:	d902      	bls.n	80060e4 <_free_r+0x74>
 80060de:	230c      	movs	r3, #12
 80060e0:	602b      	str	r3, [r5, #0]
 80060e2:	e7d6      	b.n	8006092 <_free_r+0x22>
 80060e4:	6820      	ldr	r0, [r4, #0]
 80060e6:	1821      	adds	r1, r4, r0
 80060e8:	428b      	cmp	r3, r1
 80060ea:	bf01      	itttt	eq
 80060ec:	6819      	ldreq	r1, [r3, #0]
 80060ee:	685b      	ldreq	r3, [r3, #4]
 80060f0:	1809      	addeq	r1, r1, r0
 80060f2:	6021      	streq	r1, [r4, #0]
 80060f4:	6063      	str	r3, [r4, #4]
 80060f6:	6054      	str	r4, [r2, #4]
 80060f8:	e7cb      	b.n	8006092 <_free_r+0x22>
 80060fa:	bd38      	pop	{r3, r4, r5, pc}
 80060fc:	2000047c 	.word	0x2000047c

08006100 <sbrk_aligned>:
 8006100:	b570      	push	{r4, r5, r6, lr}
 8006102:	4e0e      	ldr	r6, [pc, #56]	; (800613c <sbrk_aligned+0x3c>)
 8006104:	460c      	mov	r4, r1
 8006106:	6831      	ldr	r1, [r6, #0]
 8006108:	4605      	mov	r5, r0
 800610a:	b911      	cbnz	r1, 8006112 <sbrk_aligned+0x12>
 800610c:	f000 f9e8 	bl	80064e0 <_sbrk_r>
 8006110:	6030      	str	r0, [r6, #0]
 8006112:	4621      	mov	r1, r4
 8006114:	4628      	mov	r0, r5
 8006116:	f000 f9e3 	bl	80064e0 <_sbrk_r>
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	d00a      	beq.n	8006134 <sbrk_aligned+0x34>
 800611e:	1cc4      	adds	r4, r0, #3
 8006120:	f024 0403 	bic.w	r4, r4, #3
 8006124:	42a0      	cmp	r0, r4
 8006126:	d007      	beq.n	8006138 <sbrk_aligned+0x38>
 8006128:	1a21      	subs	r1, r4, r0
 800612a:	4628      	mov	r0, r5
 800612c:	f000 f9d8 	bl	80064e0 <_sbrk_r>
 8006130:	3001      	adds	r0, #1
 8006132:	d101      	bne.n	8006138 <sbrk_aligned+0x38>
 8006134:	f04f 34ff 	mov.w	r4, #4294967295
 8006138:	4620      	mov	r0, r4
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	20000480 	.word	0x20000480

08006140 <_malloc_r>:
 8006140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006144:	1ccd      	adds	r5, r1, #3
 8006146:	f025 0503 	bic.w	r5, r5, #3
 800614a:	3508      	adds	r5, #8
 800614c:	2d0c      	cmp	r5, #12
 800614e:	bf38      	it	cc
 8006150:	250c      	movcc	r5, #12
 8006152:	2d00      	cmp	r5, #0
 8006154:	4607      	mov	r7, r0
 8006156:	db01      	blt.n	800615c <_malloc_r+0x1c>
 8006158:	42a9      	cmp	r1, r5
 800615a:	d905      	bls.n	8006168 <_malloc_r+0x28>
 800615c:	230c      	movs	r3, #12
 800615e:	2600      	movs	r6, #0
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	4630      	mov	r0, r6
 8006164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006168:	4e2e      	ldr	r6, [pc, #184]	; (8006224 <_malloc_r+0xe4>)
 800616a:	f000 fa25 	bl	80065b8 <__malloc_lock>
 800616e:	6833      	ldr	r3, [r6, #0]
 8006170:	461c      	mov	r4, r3
 8006172:	bb34      	cbnz	r4, 80061c2 <_malloc_r+0x82>
 8006174:	4629      	mov	r1, r5
 8006176:	4638      	mov	r0, r7
 8006178:	f7ff ffc2 	bl	8006100 <sbrk_aligned>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	4604      	mov	r4, r0
 8006180:	d14d      	bne.n	800621e <_malloc_r+0xde>
 8006182:	6834      	ldr	r4, [r6, #0]
 8006184:	4626      	mov	r6, r4
 8006186:	2e00      	cmp	r6, #0
 8006188:	d140      	bne.n	800620c <_malloc_r+0xcc>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	4631      	mov	r1, r6
 800618e:	4638      	mov	r0, r7
 8006190:	eb04 0803 	add.w	r8, r4, r3
 8006194:	f000 f9a4 	bl	80064e0 <_sbrk_r>
 8006198:	4580      	cmp	r8, r0
 800619a:	d13a      	bne.n	8006212 <_malloc_r+0xd2>
 800619c:	6821      	ldr	r1, [r4, #0]
 800619e:	3503      	adds	r5, #3
 80061a0:	1a6d      	subs	r5, r5, r1
 80061a2:	f025 0503 	bic.w	r5, r5, #3
 80061a6:	3508      	adds	r5, #8
 80061a8:	2d0c      	cmp	r5, #12
 80061aa:	bf38      	it	cc
 80061ac:	250c      	movcc	r5, #12
 80061ae:	4638      	mov	r0, r7
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7ff ffa5 	bl	8006100 <sbrk_aligned>
 80061b6:	3001      	adds	r0, #1
 80061b8:	d02b      	beq.n	8006212 <_malloc_r+0xd2>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	442b      	add	r3, r5
 80061be:	6023      	str	r3, [r4, #0]
 80061c0:	e00e      	b.n	80061e0 <_malloc_r+0xa0>
 80061c2:	6822      	ldr	r2, [r4, #0]
 80061c4:	1b52      	subs	r2, r2, r5
 80061c6:	d41e      	bmi.n	8006206 <_malloc_r+0xc6>
 80061c8:	2a0b      	cmp	r2, #11
 80061ca:	d916      	bls.n	80061fa <_malloc_r+0xba>
 80061cc:	1961      	adds	r1, r4, r5
 80061ce:	42a3      	cmp	r3, r4
 80061d0:	6025      	str	r5, [r4, #0]
 80061d2:	bf18      	it	ne
 80061d4:	6059      	strne	r1, [r3, #4]
 80061d6:	6863      	ldr	r3, [r4, #4]
 80061d8:	bf08      	it	eq
 80061da:	6031      	streq	r1, [r6, #0]
 80061dc:	5162      	str	r2, [r4, r5]
 80061de:	604b      	str	r3, [r1, #4]
 80061e0:	4638      	mov	r0, r7
 80061e2:	f104 060b 	add.w	r6, r4, #11
 80061e6:	f000 f9ed 	bl	80065c4 <__malloc_unlock>
 80061ea:	f026 0607 	bic.w	r6, r6, #7
 80061ee:	1d23      	adds	r3, r4, #4
 80061f0:	1af2      	subs	r2, r6, r3
 80061f2:	d0b6      	beq.n	8006162 <_malloc_r+0x22>
 80061f4:	1b9b      	subs	r3, r3, r6
 80061f6:	50a3      	str	r3, [r4, r2]
 80061f8:	e7b3      	b.n	8006162 <_malloc_r+0x22>
 80061fa:	6862      	ldr	r2, [r4, #4]
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	bf0c      	ite	eq
 8006200:	6032      	streq	r2, [r6, #0]
 8006202:	605a      	strne	r2, [r3, #4]
 8006204:	e7ec      	b.n	80061e0 <_malloc_r+0xa0>
 8006206:	4623      	mov	r3, r4
 8006208:	6864      	ldr	r4, [r4, #4]
 800620a:	e7b2      	b.n	8006172 <_malloc_r+0x32>
 800620c:	4634      	mov	r4, r6
 800620e:	6876      	ldr	r6, [r6, #4]
 8006210:	e7b9      	b.n	8006186 <_malloc_r+0x46>
 8006212:	230c      	movs	r3, #12
 8006214:	4638      	mov	r0, r7
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	f000 f9d4 	bl	80065c4 <__malloc_unlock>
 800621c:	e7a1      	b.n	8006162 <_malloc_r+0x22>
 800621e:	6025      	str	r5, [r4, #0]
 8006220:	e7de      	b.n	80061e0 <_malloc_r+0xa0>
 8006222:	bf00      	nop
 8006224:	2000047c 	.word	0x2000047c

08006228 <__ssputs_r>:
 8006228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800622c:	688e      	ldr	r6, [r1, #8]
 800622e:	4682      	mov	sl, r0
 8006230:	429e      	cmp	r6, r3
 8006232:	460c      	mov	r4, r1
 8006234:	4690      	mov	r8, r2
 8006236:	461f      	mov	r7, r3
 8006238:	d838      	bhi.n	80062ac <__ssputs_r+0x84>
 800623a:	898a      	ldrh	r2, [r1, #12]
 800623c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006240:	d032      	beq.n	80062a8 <__ssputs_r+0x80>
 8006242:	6825      	ldr	r5, [r4, #0]
 8006244:	6909      	ldr	r1, [r1, #16]
 8006246:	3301      	adds	r3, #1
 8006248:	eba5 0901 	sub.w	r9, r5, r1
 800624c:	6965      	ldr	r5, [r4, #20]
 800624e:	444b      	add	r3, r9
 8006250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006258:	106d      	asrs	r5, r5, #1
 800625a:	429d      	cmp	r5, r3
 800625c:	bf38      	it	cc
 800625e:	461d      	movcc	r5, r3
 8006260:	0553      	lsls	r3, r2, #21
 8006262:	d531      	bpl.n	80062c8 <__ssputs_r+0xa0>
 8006264:	4629      	mov	r1, r5
 8006266:	f7ff ff6b 	bl	8006140 <_malloc_r>
 800626a:	4606      	mov	r6, r0
 800626c:	b950      	cbnz	r0, 8006284 <__ssputs_r+0x5c>
 800626e:	230c      	movs	r3, #12
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	f8ca 3000 	str.w	r3, [sl]
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800627e:	81a3      	strh	r3, [r4, #12]
 8006280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006284:	464a      	mov	r2, r9
 8006286:	6921      	ldr	r1, [r4, #16]
 8006288:	f7ff fb4e 	bl	8005928 <memcpy>
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006296:	81a3      	strh	r3, [r4, #12]
 8006298:	6126      	str	r6, [r4, #16]
 800629a:	444e      	add	r6, r9
 800629c:	6026      	str	r6, [r4, #0]
 800629e:	463e      	mov	r6, r7
 80062a0:	6165      	str	r5, [r4, #20]
 80062a2:	eba5 0509 	sub.w	r5, r5, r9
 80062a6:	60a5      	str	r5, [r4, #8]
 80062a8:	42be      	cmp	r6, r7
 80062aa:	d900      	bls.n	80062ae <__ssputs_r+0x86>
 80062ac:	463e      	mov	r6, r7
 80062ae:	4632      	mov	r2, r6
 80062b0:	4641      	mov	r1, r8
 80062b2:	6820      	ldr	r0, [r4, #0]
 80062b4:	f000 f966 	bl	8006584 <memmove>
 80062b8:	68a3      	ldr	r3, [r4, #8]
 80062ba:	2000      	movs	r0, #0
 80062bc:	1b9b      	subs	r3, r3, r6
 80062be:	60a3      	str	r3, [r4, #8]
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	4433      	add	r3, r6
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	e7db      	b.n	8006280 <__ssputs_r+0x58>
 80062c8:	462a      	mov	r2, r5
 80062ca:	f000 f981 	bl	80065d0 <_realloc_r>
 80062ce:	4606      	mov	r6, r0
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d1e1      	bne.n	8006298 <__ssputs_r+0x70>
 80062d4:	4650      	mov	r0, sl
 80062d6:	6921      	ldr	r1, [r4, #16]
 80062d8:	f7ff feca 	bl	8006070 <_free_r>
 80062dc:	e7c7      	b.n	800626e <__ssputs_r+0x46>
	...

080062e0 <_svfiprintf_r>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	4698      	mov	r8, r3
 80062e6:	898b      	ldrh	r3, [r1, #12]
 80062e8:	4607      	mov	r7, r0
 80062ea:	061b      	lsls	r3, r3, #24
 80062ec:	460d      	mov	r5, r1
 80062ee:	4614      	mov	r4, r2
 80062f0:	b09d      	sub	sp, #116	; 0x74
 80062f2:	d50e      	bpl.n	8006312 <_svfiprintf_r+0x32>
 80062f4:	690b      	ldr	r3, [r1, #16]
 80062f6:	b963      	cbnz	r3, 8006312 <_svfiprintf_r+0x32>
 80062f8:	2140      	movs	r1, #64	; 0x40
 80062fa:	f7ff ff21 	bl	8006140 <_malloc_r>
 80062fe:	6028      	str	r0, [r5, #0]
 8006300:	6128      	str	r0, [r5, #16]
 8006302:	b920      	cbnz	r0, 800630e <_svfiprintf_r+0x2e>
 8006304:	230c      	movs	r3, #12
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	f04f 30ff 	mov.w	r0, #4294967295
 800630c:	e0d1      	b.n	80064b2 <_svfiprintf_r+0x1d2>
 800630e:	2340      	movs	r3, #64	; 0x40
 8006310:	616b      	str	r3, [r5, #20]
 8006312:	2300      	movs	r3, #0
 8006314:	9309      	str	r3, [sp, #36]	; 0x24
 8006316:	2320      	movs	r3, #32
 8006318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800631c:	2330      	movs	r3, #48	; 0x30
 800631e:	f04f 0901 	mov.w	r9, #1
 8006322:	f8cd 800c 	str.w	r8, [sp, #12]
 8006326:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80064cc <_svfiprintf_r+0x1ec>
 800632a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800632e:	4623      	mov	r3, r4
 8006330:	469a      	mov	sl, r3
 8006332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006336:	b10a      	cbz	r2, 800633c <_svfiprintf_r+0x5c>
 8006338:	2a25      	cmp	r2, #37	; 0x25
 800633a:	d1f9      	bne.n	8006330 <_svfiprintf_r+0x50>
 800633c:	ebba 0b04 	subs.w	fp, sl, r4
 8006340:	d00b      	beq.n	800635a <_svfiprintf_r+0x7a>
 8006342:	465b      	mov	r3, fp
 8006344:	4622      	mov	r2, r4
 8006346:	4629      	mov	r1, r5
 8006348:	4638      	mov	r0, r7
 800634a:	f7ff ff6d 	bl	8006228 <__ssputs_r>
 800634e:	3001      	adds	r0, #1
 8006350:	f000 80aa 	beq.w	80064a8 <_svfiprintf_r+0x1c8>
 8006354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006356:	445a      	add	r2, fp
 8006358:	9209      	str	r2, [sp, #36]	; 0x24
 800635a:	f89a 3000 	ldrb.w	r3, [sl]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 80a2 	beq.w	80064a8 <_svfiprintf_r+0x1c8>
 8006364:	2300      	movs	r3, #0
 8006366:	f04f 32ff 	mov.w	r2, #4294967295
 800636a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800636e:	f10a 0a01 	add.w	sl, sl, #1
 8006372:	9304      	str	r3, [sp, #16]
 8006374:	9307      	str	r3, [sp, #28]
 8006376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800637a:	931a      	str	r3, [sp, #104]	; 0x68
 800637c:	4654      	mov	r4, sl
 800637e:	2205      	movs	r2, #5
 8006380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006384:	4851      	ldr	r0, [pc, #324]	; (80064cc <_svfiprintf_r+0x1ec>)
 8006386:	f7ff fac1 	bl	800590c <memchr>
 800638a:	9a04      	ldr	r2, [sp, #16]
 800638c:	b9d8      	cbnz	r0, 80063c6 <_svfiprintf_r+0xe6>
 800638e:	06d0      	lsls	r0, r2, #27
 8006390:	bf44      	itt	mi
 8006392:	2320      	movmi	r3, #32
 8006394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006398:	0711      	lsls	r1, r2, #28
 800639a:	bf44      	itt	mi
 800639c:	232b      	movmi	r3, #43	; 0x2b
 800639e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063a2:	f89a 3000 	ldrb.w	r3, [sl]
 80063a6:	2b2a      	cmp	r3, #42	; 0x2a
 80063a8:	d015      	beq.n	80063d6 <_svfiprintf_r+0xf6>
 80063aa:	4654      	mov	r4, sl
 80063ac:	2000      	movs	r0, #0
 80063ae:	f04f 0c0a 	mov.w	ip, #10
 80063b2:	9a07      	ldr	r2, [sp, #28]
 80063b4:	4621      	mov	r1, r4
 80063b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063ba:	3b30      	subs	r3, #48	; 0x30
 80063bc:	2b09      	cmp	r3, #9
 80063be:	d94e      	bls.n	800645e <_svfiprintf_r+0x17e>
 80063c0:	b1b0      	cbz	r0, 80063f0 <_svfiprintf_r+0x110>
 80063c2:	9207      	str	r2, [sp, #28]
 80063c4:	e014      	b.n	80063f0 <_svfiprintf_r+0x110>
 80063c6:	eba0 0308 	sub.w	r3, r0, r8
 80063ca:	fa09 f303 	lsl.w	r3, r9, r3
 80063ce:	4313      	orrs	r3, r2
 80063d0:	46a2      	mov	sl, r4
 80063d2:	9304      	str	r3, [sp, #16]
 80063d4:	e7d2      	b.n	800637c <_svfiprintf_r+0x9c>
 80063d6:	9b03      	ldr	r3, [sp, #12]
 80063d8:	1d19      	adds	r1, r3, #4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	9103      	str	r1, [sp, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bfbb      	ittet	lt
 80063e2:	425b      	neglt	r3, r3
 80063e4:	f042 0202 	orrlt.w	r2, r2, #2
 80063e8:	9307      	strge	r3, [sp, #28]
 80063ea:	9307      	strlt	r3, [sp, #28]
 80063ec:	bfb8      	it	lt
 80063ee:	9204      	strlt	r2, [sp, #16]
 80063f0:	7823      	ldrb	r3, [r4, #0]
 80063f2:	2b2e      	cmp	r3, #46	; 0x2e
 80063f4:	d10c      	bne.n	8006410 <_svfiprintf_r+0x130>
 80063f6:	7863      	ldrb	r3, [r4, #1]
 80063f8:	2b2a      	cmp	r3, #42	; 0x2a
 80063fa:	d135      	bne.n	8006468 <_svfiprintf_r+0x188>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	3402      	adds	r4, #2
 8006400:	1d1a      	adds	r2, r3, #4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	9203      	str	r2, [sp, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	bfb8      	it	lt
 800640a:	f04f 33ff 	movlt.w	r3, #4294967295
 800640e:	9305      	str	r3, [sp, #20]
 8006410:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80064d0 <_svfiprintf_r+0x1f0>
 8006414:	2203      	movs	r2, #3
 8006416:	4650      	mov	r0, sl
 8006418:	7821      	ldrb	r1, [r4, #0]
 800641a:	f7ff fa77 	bl	800590c <memchr>
 800641e:	b140      	cbz	r0, 8006432 <_svfiprintf_r+0x152>
 8006420:	2340      	movs	r3, #64	; 0x40
 8006422:	eba0 000a 	sub.w	r0, r0, sl
 8006426:	fa03 f000 	lsl.w	r0, r3, r0
 800642a:	9b04      	ldr	r3, [sp, #16]
 800642c:	3401      	adds	r4, #1
 800642e:	4303      	orrs	r3, r0
 8006430:	9304      	str	r3, [sp, #16]
 8006432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006436:	2206      	movs	r2, #6
 8006438:	4826      	ldr	r0, [pc, #152]	; (80064d4 <_svfiprintf_r+0x1f4>)
 800643a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800643e:	f7ff fa65 	bl	800590c <memchr>
 8006442:	2800      	cmp	r0, #0
 8006444:	d038      	beq.n	80064b8 <_svfiprintf_r+0x1d8>
 8006446:	4b24      	ldr	r3, [pc, #144]	; (80064d8 <_svfiprintf_r+0x1f8>)
 8006448:	bb1b      	cbnz	r3, 8006492 <_svfiprintf_r+0x1b2>
 800644a:	9b03      	ldr	r3, [sp, #12]
 800644c:	3307      	adds	r3, #7
 800644e:	f023 0307 	bic.w	r3, r3, #7
 8006452:	3308      	adds	r3, #8
 8006454:	9303      	str	r3, [sp, #12]
 8006456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006458:	4433      	add	r3, r6
 800645a:	9309      	str	r3, [sp, #36]	; 0x24
 800645c:	e767      	b.n	800632e <_svfiprintf_r+0x4e>
 800645e:	460c      	mov	r4, r1
 8006460:	2001      	movs	r0, #1
 8006462:	fb0c 3202 	mla	r2, ip, r2, r3
 8006466:	e7a5      	b.n	80063b4 <_svfiprintf_r+0xd4>
 8006468:	2300      	movs	r3, #0
 800646a:	f04f 0c0a 	mov.w	ip, #10
 800646e:	4619      	mov	r1, r3
 8006470:	3401      	adds	r4, #1
 8006472:	9305      	str	r3, [sp, #20]
 8006474:	4620      	mov	r0, r4
 8006476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800647a:	3a30      	subs	r2, #48	; 0x30
 800647c:	2a09      	cmp	r2, #9
 800647e:	d903      	bls.n	8006488 <_svfiprintf_r+0x1a8>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0c5      	beq.n	8006410 <_svfiprintf_r+0x130>
 8006484:	9105      	str	r1, [sp, #20]
 8006486:	e7c3      	b.n	8006410 <_svfiprintf_r+0x130>
 8006488:	4604      	mov	r4, r0
 800648a:	2301      	movs	r3, #1
 800648c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006490:	e7f0      	b.n	8006474 <_svfiprintf_r+0x194>
 8006492:	ab03      	add	r3, sp, #12
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	462a      	mov	r2, r5
 8006498:	4638      	mov	r0, r7
 800649a:	4b10      	ldr	r3, [pc, #64]	; (80064dc <_svfiprintf_r+0x1fc>)
 800649c:	a904      	add	r1, sp, #16
 800649e:	f7fd ffb9 	bl	8004414 <_printf_float>
 80064a2:	1c42      	adds	r2, r0, #1
 80064a4:	4606      	mov	r6, r0
 80064a6:	d1d6      	bne.n	8006456 <_svfiprintf_r+0x176>
 80064a8:	89ab      	ldrh	r3, [r5, #12]
 80064aa:	065b      	lsls	r3, r3, #25
 80064ac:	f53f af2c 	bmi.w	8006308 <_svfiprintf_r+0x28>
 80064b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064b2:	b01d      	add	sp, #116	; 0x74
 80064b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b8:	ab03      	add	r3, sp, #12
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	462a      	mov	r2, r5
 80064be:	4638      	mov	r0, r7
 80064c0:	4b06      	ldr	r3, [pc, #24]	; (80064dc <_svfiprintf_r+0x1fc>)
 80064c2:	a904      	add	r1, sp, #16
 80064c4:	f7fe fa42 	bl	800494c <_printf_i>
 80064c8:	e7eb      	b.n	80064a2 <_svfiprintf_r+0x1c2>
 80064ca:	bf00      	nop
 80064cc:	08007344 	.word	0x08007344
 80064d0:	0800734a 	.word	0x0800734a
 80064d4:	0800734e 	.word	0x0800734e
 80064d8:	08004415 	.word	0x08004415
 80064dc:	08006229 	.word	0x08006229

080064e0 <_sbrk_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	2300      	movs	r3, #0
 80064e4:	4d05      	ldr	r5, [pc, #20]	; (80064fc <_sbrk_r+0x1c>)
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	f7fb ff6c 	bl	80023c8 <_sbrk>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_sbrk_r+0x1a>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_sbrk_r+0x1a>
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	20000484 	.word	0x20000484

08006500 <__assert_func>:
 8006500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006502:	4614      	mov	r4, r2
 8006504:	461a      	mov	r2, r3
 8006506:	4b09      	ldr	r3, [pc, #36]	; (800652c <__assert_func+0x2c>)
 8006508:	4605      	mov	r5, r0
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68d8      	ldr	r0, [r3, #12]
 800650e:	b14c      	cbz	r4, 8006524 <__assert_func+0x24>
 8006510:	4b07      	ldr	r3, [pc, #28]	; (8006530 <__assert_func+0x30>)
 8006512:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006516:	9100      	str	r1, [sp, #0]
 8006518:	462b      	mov	r3, r5
 800651a:	4906      	ldr	r1, [pc, #24]	; (8006534 <__assert_func+0x34>)
 800651c:	f000 f80e 	bl	800653c <fiprintf>
 8006520:	f000 faaa 	bl	8006a78 <abort>
 8006524:	4b04      	ldr	r3, [pc, #16]	; (8006538 <__assert_func+0x38>)
 8006526:	461c      	mov	r4, r3
 8006528:	e7f3      	b.n	8006512 <__assert_func+0x12>
 800652a:	bf00      	nop
 800652c:	20000010 	.word	0x20000010
 8006530:	08007355 	.word	0x08007355
 8006534:	08007362 	.word	0x08007362
 8006538:	08007390 	.word	0x08007390

0800653c <fiprintf>:
 800653c:	b40e      	push	{r1, r2, r3}
 800653e:	b503      	push	{r0, r1, lr}
 8006540:	4601      	mov	r1, r0
 8006542:	ab03      	add	r3, sp, #12
 8006544:	4805      	ldr	r0, [pc, #20]	; (800655c <fiprintf+0x20>)
 8006546:	f853 2b04 	ldr.w	r2, [r3], #4
 800654a:	6800      	ldr	r0, [r0, #0]
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	f000 f895 	bl	800667c <_vfiprintf_r>
 8006552:	b002      	add	sp, #8
 8006554:	f85d eb04 	ldr.w	lr, [sp], #4
 8006558:	b003      	add	sp, #12
 800655a:	4770      	bx	lr
 800655c:	20000010 	.word	0x20000010

08006560 <__ascii_mbtowc>:
 8006560:	b082      	sub	sp, #8
 8006562:	b901      	cbnz	r1, 8006566 <__ascii_mbtowc+0x6>
 8006564:	a901      	add	r1, sp, #4
 8006566:	b142      	cbz	r2, 800657a <__ascii_mbtowc+0x1a>
 8006568:	b14b      	cbz	r3, 800657e <__ascii_mbtowc+0x1e>
 800656a:	7813      	ldrb	r3, [r2, #0]
 800656c:	600b      	str	r3, [r1, #0]
 800656e:	7812      	ldrb	r2, [r2, #0]
 8006570:	1e10      	subs	r0, r2, #0
 8006572:	bf18      	it	ne
 8006574:	2001      	movne	r0, #1
 8006576:	b002      	add	sp, #8
 8006578:	4770      	bx	lr
 800657a:	4610      	mov	r0, r2
 800657c:	e7fb      	b.n	8006576 <__ascii_mbtowc+0x16>
 800657e:	f06f 0001 	mvn.w	r0, #1
 8006582:	e7f8      	b.n	8006576 <__ascii_mbtowc+0x16>

08006584 <memmove>:
 8006584:	4288      	cmp	r0, r1
 8006586:	b510      	push	{r4, lr}
 8006588:	eb01 0402 	add.w	r4, r1, r2
 800658c:	d902      	bls.n	8006594 <memmove+0x10>
 800658e:	4284      	cmp	r4, r0
 8006590:	4623      	mov	r3, r4
 8006592:	d807      	bhi.n	80065a4 <memmove+0x20>
 8006594:	1e43      	subs	r3, r0, #1
 8006596:	42a1      	cmp	r1, r4
 8006598:	d008      	beq.n	80065ac <memmove+0x28>
 800659a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800659e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065a2:	e7f8      	b.n	8006596 <memmove+0x12>
 80065a4:	4601      	mov	r1, r0
 80065a6:	4402      	add	r2, r0
 80065a8:	428a      	cmp	r2, r1
 80065aa:	d100      	bne.n	80065ae <memmove+0x2a>
 80065ac:	bd10      	pop	{r4, pc}
 80065ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065b6:	e7f7      	b.n	80065a8 <memmove+0x24>

080065b8 <__malloc_lock>:
 80065b8:	4801      	ldr	r0, [pc, #4]	; (80065c0 <__malloc_lock+0x8>)
 80065ba:	f000 bc19 	b.w	8006df0 <__retarget_lock_acquire_recursive>
 80065be:	bf00      	nop
 80065c0:	20000488 	.word	0x20000488

080065c4 <__malloc_unlock>:
 80065c4:	4801      	ldr	r0, [pc, #4]	; (80065cc <__malloc_unlock+0x8>)
 80065c6:	f000 bc14 	b.w	8006df2 <__retarget_lock_release_recursive>
 80065ca:	bf00      	nop
 80065cc:	20000488 	.word	0x20000488

080065d0 <_realloc_r>:
 80065d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d4:	4680      	mov	r8, r0
 80065d6:	4614      	mov	r4, r2
 80065d8:	460e      	mov	r6, r1
 80065da:	b921      	cbnz	r1, 80065e6 <_realloc_r+0x16>
 80065dc:	4611      	mov	r1, r2
 80065de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065e2:	f7ff bdad 	b.w	8006140 <_malloc_r>
 80065e6:	b92a      	cbnz	r2, 80065f4 <_realloc_r+0x24>
 80065e8:	f7ff fd42 	bl	8006070 <_free_r>
 80065ec:	4625      	mov	r5, r4
 80065ee:	4628      	mov	r0, r5
 80065f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f4:	f000 fc64 	bl	8006ec0 <_malloc_usable_size_r>
 80065f8:	4284      	cmp	r4, r0
 80065fa:	4607      	mov	r7, r0
 80065fc:	d802      	bhi.n	8006604 <_realloc_r+0x34>
 80065fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006602:	d812      	bhi.n	800662a <_realloc_r+0x5a>
 8006604:	4621      	mov	r1, r4
 8006606:	4640      	mov	r0, r8
 8006608:	f7ff fd9a 	bl	8006140 <_malloc_r>
 800660c:	4605      	mov	r5, r0
 800660e:	2800      	cmp	r0, #0
 8006610:	d0ed      	beq.n	80065ee <_realloc_r+0x1e>
 8006612:	42bc      	cmp	r4, r7
 8006614:	4622      	mov	r2, r4
 8006616:	4631      	mov	r1, r6
 8006618:	bf28      	it	cs
 800661a:	463a      	movcs	r2, r7
 800661c:	f7ff f984 	bl	8005928 <memcpy>
 8006620:	4631      	mov	r1, r6
 8006622:	4640      	mov	r0, r8
 8006624:	f7ff fd24 	bl	8006070 <_free_r>
 8006628:	e7e1      	b.n	80065ee <_realloc_r+0x1e>
 800662a:	4635      	mov	r5, r6
 800662c:	e7df      	b.n	80065ee <_realloc_r+0x1e>

0800662e <__sfputc_r>:
 800662e:	6893      	ldr	r3, [r2, #8]
 8006630:	b410      	push	{r4}
 8006632:	3b01      	subs	r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	6093      	str	r3, [r2, #8]
 8006638:	da07      	bge.n	800664a <__sfputc_r+0x1c>
 800663a:	6994      	ldr	r4, [r2, #24]
 800663c:	42a3      	cmp	r3, r4
 800663e:	db01      	blt.n	8006644 <__sfputc_r+0x16>
 8006640:	290a      	cmp	r1, #10
 8006642:	d102      	bne.n	800664a <__sfputc_r+0x1c>
 8006644:	bc10      	pop	{r4}
 8006646:	f000 b949 	b.w	80068dc <__swbuf_r>
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	1c58      	adds	r0, r3, #1
 800664e:	6010      	str	r0, [r2, #0]
 8006650:	7019      	strb	r1, [r3, #0]
 8006652:	4608      	mov	r0, r1
 8006654:	bc10      	pop	{r4}
 8006656:	4770      	bx	lr

08006658 <__sfputs_r>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	4606      	mov	r6, r0
 800665c:	460f      	mov	r7, r1
 800665e:	4614      	mov	r4, r2
 8006660:	18d5      	adds	r5, r2, r3
 8006662:	42ac      	cmp	r4, r5
 8006664:	d101      	bne.n	800666a <__sfputs_r+0x12>
 8006666:	2000      	movs	r0, #0
 8006668:	e007      	b.n	800667a <__sfputs_r+0x22>
 800666a:	463a      	mov	r2, r7
 800666c:	4630      	mov	r0, r6
 800666e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006672:	f7ff ffdc 	bl	800662e <__sfputc_r>
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	d1f3      	bne.n	8006662 <__sfputs_r+0xa>
 800667a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800667c <_vfiprintf_r>:
 800667c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006680:	460d      	mov	r5, r1
 8006682:	4614      	mov	r4, r2
 8006684:	4698      	mov	r8, r3
 8006686:	4606      	mov	r6, r0
 8006688:	b09d      	sub	sp, #116	; 0x74
 800668a:	b118      	cbz	r0, 8006694 <_vfiprintf_r+0x18>
 800668c:	6983      	ldr	r3, [r0, #24]
 800668e:	b90b      	cbnz	r3, 8006694 <_vfiprintf_r+0x18>
 8006690:	f000 fb10 	bl	8006cb4 <__sinit>
 8006694:	4b89      	ldr	r3, [pc, #548]	; (80068bc <_vfiprintf_r+0x240>)
 8006696:	429d      	cmp	r5, r3
 8006698:	d11b      	bne.n	80066d2 <_vfiprintf_r+0x56>
 800669a:	6875      	ldr	r5, [r6, #4]
 800669c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800669e:	07d9      	lsls	r1, r3, #31
 80066a0:	d405      	bmi.n	80066ae <_vfiprintf_r+0x32>
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	059a      	lsls	r2, r3, #22
 80066a6:	d402      	bmi.n	80066ae <_vfiprintf_r+0x32>
 80066a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066aa:	f000 fba1 	bl	8006df0 <__retarget_lock_acquire_recursive>
 80066ae:	89ab      	ldrh	r3, [r5, #12]
 80066b0:	071b      	lsls	r3, r3, #28
 80066b2:	d501      	bpl.n	80066b8 <_vfiprintf_r+0x3c>
 80066b4:	692b      	ldr	r3, [r5, #16]
 80066b6:	b9eb      	cbnz	r3, 80066f4 <_vfiprintf_r+0x78>
 80066b8:	4629      	mov	r1, r5
 80066ba:	4630      	mov	r0, r6
 80066bc:	f000 f96e 	bl	800699c <__swsetup_r>
 80066c0:	b1c0      	cbz	r0, 80066f4 <_vfiprintf_r+0x78>
 80066c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066c4:	07dc      	lsls	r4, r3, #31
 80066c6:	d50e      	bpl.n	80066e6 <_vfiprintf_r+0x6a>
 80066c8:	f04f 30ff 	mov.w	r0, #4294967295
 80066cc:	b01d      	add	sp, #116	; 0x74
 80066ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d2:	4b7b      	ldr	r3, [pc, #492]	; (80068c0 <_vfiprintf_r+0x244>)
 80066d4:	429d      	cmp	r5, r3
 80066d6:	d101      	bne.n	80066dc <_vfiprintf_r+0x60>
 80066d8:	68b5      	ldr	r5, [r6, #8]
 80066da:	e7df      	b.n	800669c <_vfiprintf_r+0x20>
 80066dc:	4b79      	ldr	r3, [pc, #484]	; (80068c4 <_vfiprintf_r+0x248>)
 80066de:	429d      	cmp	r5, r3
 80066e0:	bf08      	it	eq
 80066e2:	68f5      	ldreq	r5, [r6, #12]
 80066e4:	e7da      	b.n	800669c <_vfiprintf_r+0x20>
 80066e6:	89ab      	ldrh	r3, [r5, #12]
 80066e8:	0598      	lsls	r0, r3, #22
 80066ea:	d4ed      	bmi.n	80066c8 <_vfiprintf_r+0x4c>
 80066ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ee:	f000 fb80 	bl	8006df2 <__retarget_lock_release_recursive>
 80066f2:	e7e9      	b.n	80066c8 <_vfiprintf_r+0x4c>
 80066f4:	2300      	movs	r3, #0
 80066f6:	9309      	str	r3, [sp, #36]	; 0x24
 80066f8:	2320      	movs	r3, #32
 80066fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066fe:	2330      	movs	r3, #48	; 0x30
 8006700:	f04f 0901 	mov.w	r9, #1
 8006704:	f8cd 800c 	str.w	r8, [sp, #12]
 8006708:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80068c8 <_vfiprintf_r+0x24c>
 800670c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006710:	4623      	mov	r3, r4
 8006712:	469a      	mov	sl, r3
 8006714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006718:	b10a      	cbz	r2, 800671e <_vfiprintf_r+0xa2>
 800671a:	2a25      	cmp	r2, #37	; 0x25
 800671c:	d1f9      	bne.n	8006712 <_vfiprintf_r+0x96>
 800671e:	ebba 0b04 	subs.w	fp, sl, r4
 8006722:	d00b      	beq.n	800673c <_vfiprintf_r+0xc0>
 8006724:	465b      	mov	r3, fp
 8006726:	4622      	mov	r2, r4
 8006728:	4629      	mov	r1, r5
 800672a:	4630      	mov	r0, r6
 800672c:	f7ff ff94 	bl	8006658 <__sfputs_r>
 8006730:	3001      	adds	r0, #1
 8006732:	f000 80aa 	beq.w	800688a <_vfiprintf_r+0x20e>
 8006736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006738:	445a      	add	r2, fp
 800673a:	9209      	str	r2, [sp, #36]	; 0x24
 800673c:	f89a 3000 	ldrb.w	r3, [sl]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 80a2 	beq.w	800688a <_vfiprintf_r+0x20e>
 8006746:	2300      	movs	r3, #0
 8006748:	f04f 32ff 	mov.w	r2, #4294967295
 800674c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006750:	f10a 0a01 	add.w	sl, sl, #1
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	9307      	str	r3, [sp, #28]
 8006758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800675c:	931a      	str	r3, [sp, #104]	; 0x68
 800675e:	4654      	mov	r4, sl
 8006760:	2205      	movs	r2, #5
 8006762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006766:	4858      	ldr	r0, [pc, #352]	; (80068c8 <_vfiprintf_r+0x24c>)
 8006768:	f7ff f8d0 	bl	800590c <memchr>
 800676c:	9a04      	ldr	r2, [sp, #16]
 800676e:	b9d8      	cbnz	r0, 80067a8 <_vfiprintf_r+0x12c>
 8006770:	06d1      	lsls	r1, r2, #27
 8006772:	bf44      	itt	mi
 8006774:	2320      	movmi	r3, #32
 8006776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800677a:	0713      	lsls	r3, r2, #28
 800677c:	bf44      	itt	mi
 800677e:	232b      	movmi	r3, #43	; 0x2b
 8006780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006784:	f89a 3000 	ldrb.w	r3, [sl]
 8006788:	2b2a      	cmp	r3, #42	; 0x2a
 800678a:	d015      	beq.n	80067b8 <_vfiprintf_r+0x13c>
 800678c:	4654      	mov	r4, sl
 800678e:	2000      	movs	r0, #0
 8006790:	f04f 0c0a 	mov.w	ip, #10
 8006794:	9a07      	ldr	r2, [sp, #28]
 8006796:	4621      	mov	r1, r4
 8006798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800679c:	3b30      	subs	r3, #48	; 0x30
 800679e:	2b09      	cmp	r3, #9
 80067a0:	d94e      	bls.n	8006840 <_vfiprintf_r+0x1c4>
 80067a2:	b1b0      	cbz	r0, 80067d2 <_vfiprintf_r+0x156>
 80067a4:	9207      	str	r2, [sp, #28]
 80067a6:	e014      	b.n	80067d2 <_vfiprintf_r+0x156>
 80067a8:	eba0 0308 	sub.w	r3, r0, r8
 80067ac:	fa09 f303 	lsl.w	r3, r9, r3
 80067b0:	4313      	orrs	r3, r2
 80067b2:	46a2      	mov	sl, r4
 80067b4:	9304      	str	r3, [sp, #16]
 80067b6:	e7d2      	b.n	800675e <_vfiprintf_r+0xe2>
 80067b8:	9b03      	ldr	r3, [sp, #12]
 80067ba:	1d19      	adds	r1, r3, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	9103      	str	r1, [sp, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bfbb      	ittet	lt
 80067c4:	425b      	neglt	r3, r3
 80067c6:	f042 0202 	orrlt.w	r2, r2, #2
 80067ca:	9307      	strge	r3, [sp, #28]
 80067cc:	9307      	strlt	r3, [sp, #28]
 80067ce:	bfb8      	it	lt
 80067d0:	9204      	strlt	r2, [sp, #16]
 80067d2:	7823      	ldrb	r3, [r4, #0]
 80067d4:	2b2e      	cmp	r3, #46	; 0x2e
 80067d6:	d10c      	bne.n	80067f2 <_vfiprintf_r+0x176>
 80067d8:	7863      	ldrb	r3, [r4, #1]
 80067da:	2b2a      	cmp	r3, #42	; 0x2a
 80067dc:	d135      	bne.n	800684a <_vfiprintf_r+0x1ce>
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	3402      	adds	r4, #2
 80067e2:	1d1a      	adds	r2, r3, #4
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	9203      	str	r2, [sp, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bfb8      	it	lt
 80067ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80067f0:	9305      	str	r3, [sp, #20]
 80067f2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80068cc <_vfiprintf_r+0x250>
 80067f6:	2203      	movs	r2, #3
 80067f8:	4650      	mov	r0, sl
 80067fa:	7821      	ldrb	r1, [r4, #0]
 80067fc:	f7ff f886 	bl	800590c <memchr>
 8006800:	b140      	cbz	r0, 8006814 <_vfiprintf_r+0x198>
 8006802:	2340      	movs	r3, #64	; 0x40
 8006804:	eba0 000a 	sub.w	r0, r0, sl
 8006808:	fa03 f000 	lsl.w	r0, r3, r0
 800680c:	9b04      	ldr	r3, [sp, #16]
 800680e:	3401      	adds	r4, #1
 8006810:	4303      	orrs	r3, r0
 8006812:	9304      	str	r3, [sp, #16]
 8006814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006818:	2206      	movs	r2, #6
 800681a:	482d      	ldr	r0, [pc, #180]	; (80068d0 <_vfiprintf_r+0x254>)
 800681c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006820:	f7ff f874 	bl	800590c <memchr>
 8006824:	2800      	cmp	r0, #0
 8006826:	d03f      	beq.n	80068a8 <_vfiprintf_r+0x22c>
 8006828:	4b2a      	ldr	r3, [pc, #168]	; (80068d4 <_vfiprintf_r+0x258>)
 800682a:	bb1b      	cbnz	r3, 8006874 <_vfiprintf_r+0x1f8>
 800682c:	9b03      	ldr	r3, [sp, #12]
 800682e:	3307      	adds	r3, #7
 8006830:	f023 0307 	bic.w	r3, r3, #7
 8006834:	3308      	adds	r3, #8
 8006836:	9303      	str	r3, [sp, #12]
 8006838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683a:	443b      	add	r3, r7
 800683c:	9309      	str	r3, [sp, #36]	; 0x24
 800683e:	e767      	b.n	8006710 <_vfiprintf_r+0x94>
 8006840:	460c      	mov	r4, r1
 8006842:	2001      	movs	r0, #1
 8006844:	fb0c 3202 	mla	r2, ip, r2, r3
 8006848:	e7a5      	b.n	8006796 <_vfiprintf_r+0x11a>
 800684a:	2300      	movs	r3, #0
 800684c:	f04f 0c0a 	mov.w	ip, #10
 8006850:	4619      	mov	r1, r3
 8006852:	3401      	adds	r4, #1
 8006854:	9305      	str	r3, [sp, #20]
 8006856:	4620      	mov	r0, r4
 8006858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800685c:	3a30      	subs	r2, #48	; 0x30
 800685e:	2a09      	cmp	r2, #9
 8006860:	d903      	bls.n	800686a <_vfiprintf_r+0x1ee>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0c5      	beq.n	80067f2 <_vfiprintf_r+0x176>
 8006866:	9105      	str	r1, [sp, #20]
 8006868:	e7c3      	b.n	80067f2 <_vfiprintf_r+0x176>
 800686a:	4604      	mov	r4, r0
 800686c:	2301      	movs	r3, #1
 800686e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006872:	e7f0      	b.n	8006856 <_vfiprintf_r+0x1da>
 8006874:	ab03      	add	r3, sp, #12
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	462a      	mov	r2, r5
 800687a:	4630      	mov	r0, r6
 800687c:	4b16      	ldr	r3, [pc, #88]	; (80068d8 <_vfiprintf_r+0x25c>)
 800687e:	a904      	add	r1, sp, #16
 8006880:	f7fd fdc8 	bl	8004414 <_printf_float>
 8006884:	4607      	mov	r7, r0
 8006886:	1c78      	adds	r0, r7, #1
 8006888:	d1d6      	bne.n	8006838 <_vfiprintf_r+0x1bc>
 800688a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800688c:	07d9      	lsls	r1, r3, #31
 800688e:	d405      	bmi.n	800689c <_vfiprintf_r+0x220>
 8006890:	89ab      	ldrh	r3, [r5, #12]
 8006892:	059a      	lsls	r2, r3, #22
 8006894:	d402      	bmi.n	800689c <_vfiprintf_r+0x220>
 8006896:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006898:	f000 faab 	bl	8006df2 <__retarget_lock_release_recursive>
 800689c:	89ab      	ldrh	r3, [r5, #12]
 800689e:	065b      	lsls	r3, r3, #25
 80068a0:	f53f af12 	bmi.w	80066c8 <_vfiprintf_r+0x4c>
 80068a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068a6:	e711      	b.n	80066cc <_vfiprintf_r+0x50>
 80068a8:	ab03      	add	r3, sp, #12
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	462a      	mov	r2, r5
 80068ae:	4630      	mov	r0, r6
 80068b0:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <_vfiprintf_r+0x25c>)
 80068b2:	a904      	add	r1, sp, #16
 80068b4:	f7fe f84a 	bl	800494c <_printf_i>
 80068b8:	e7e4      	b.n	8006884 <_vfiprintf_r+0x208>
 80068ba:	bf00      	nop
 80068bc:	080074bc 	.word	0x080074bc
 80068c0:	080074dc 	.word	0x080074dc
 80068c4:	0800749c 	.word	0x0800749c
 80068c8:	08007344 	.word	0x08007344
 80068cc:	0800734a 	.word	0x0800734a
 80068d0:	0800734e 	.word	0x0800734e
 80068d4:	08004415 	.word	0x08004415
 80068d8:	08006659 	.word	0x08006659

080068dc <__swbuf_r>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	460e      	mov	r6, r1
 80068e0:	4614      	mov	r4, r2
 80068e2:	4605      	mov	r5, r0
 80068e4:	b118      	cbz	r0, 80068ee <__swbuf_r+0x12>
 80068e6:	6983      	ldr	r3, [r0, #24]
 80068e8:	b90b      	cbnz	r3, 80068ee <__swbuf_r+0x12>
 80068ea:	f000 f9e3 	bl	8006cb4 <__sinit>
 80068ee:	4b21      	ldr	r3, [pc, #132]	; (8006974 <__swbuf_r+0x98>)
 80068f0:	429c      	cmp	r4, r3
 80068f2:	d12b      	bne.n	800694c <__swbuf_r+0x70>
 80068f4:	686c      	ldr	r4, [r5, #4]
 80068f6:	69a3      	ldr	r3, [r4, #24]
 80068f8:	60a3      	str	r3, [r4, #8]
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	071a      	lsls	r2, r3, #28
 80068fe:	d52f      	bpl.n	8006960 <__swbuf_r+0x84>
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	b36b      	cbz	r3, 8006960 <__swbuf_r+0x84>
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	6820      	ldr	r0, [r4, #0]
 8006908:	b2f6      	uxtb	r6, r6
 800690a:	1ac0      	subs	r0, r0, r3
 800690c:	6963      	ldr	r3, [r4, #20]
 800690e:	4637      	mov	r7, r6
 8006910:	4283      	cmp	r3, r0
 8006912:	dc04      	bgt.n	800691e <__swbuf_r+0x42>
 8006914:	4621      	mov	r1, r4
 8006916:	4628      	mov	r0, r5
 8006918:	f000 f938 	bl	8006b8c <_fflush_r>
 800691c:	bb30      	cbnz	r0, 800696c <__swbuf_r+0x90>
 800691e:	68a3      	ldr	r3, [r4, #8]
 8006920:	3001      	adds	r0, #1
 8006922:	3b01      	subs	r3, #1
 8006924:	60a3      	str	r3, [r4, #8]
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	6022      	str	r2, [r4, #0]
 800692c:	701e      	strb	r6, [r3, #0]
 800692e:	6963      	ldr	r3, [r4, #20]
 8006930:	4283      	cmp	r3, r0
 8006932:	d004      	beq.n	800693e <__swbuf_r+0x62>
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	07db      	lsls	r3, r3, #31
 8006938:	d506      	bpl.n	8006948 <__swbuf_r+0x6c>
 800693a:	2e0a      	cmp	r6, #10
 800693c:	d104      	bne.n	8006948 <__swbuf_r+0x6c>
 800693e:	4621      	mov	r1, r4
 8006940:	4628      	mov	r0, r5
 8006942:	f000 f923 	bl	8006b8c <_fflush_r>
 8006946:	b988      	cbnz	r0, 800696c <__swbuf_r+0x90>
 8006948:	4638      	mov	r0, r7
 800694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <__swbuf_r+0x9c>)
 800694e:	429c      	cmp	r4, r3
 8006950:	d101      	bne.n	8006956 <__swbuf_r+0x7a>
 8006952:	68ac      	ldr	r4, [r5, #8]
 8006954:	e7cf      	b.n	80068f6 <__swbuf_r+0x1a>
 8006956:	4b09      	ldr	r3, [pc, #36]	; (800697c <__swbuf_r+0xa0>)
 8006958:	429c      	cmp	r4, r3
 800695a:	bf08      	it	eq
 800695c:	68ec      	ldreq	r4, [r5, #12]
 800695e:	e7ca      	b.n	80068f6 <__swbuf_r+0x1a>
 8006960:	4621      	mov	r1, r4
 8006962:	4628      	mov	r0, r5
 8006964:	f000 f81a 	bl	800699c <__swsetup_r>
 8006968:	2800      	cmp	r0, #0
 800696a:	d0cb      	beq.n	8006904 <__swbuf_r+0x28>
 800696c:	f04f 37ff 	mov.w	r7, #4294967295
 8006970:	e7ea      	b.n	8006948 <__swbuf_r+0x6c>
 8006972:	bf00      	nop
 8006974:	080074bc 	.word	0x080074bc
 8006978:	080074dc 	.word	0x080074dc
 800697c:	0800749c 	.word	0x0800749c

08006980 <__ascii_wctomb>:
 8006980:	4603      	mov	r3, r0
 8006982:	4608      	mov	r0, r1
 8006984:	b141      	cbz	r1, 8006998 <__ascii_wctomb+0x18>
 8006986:	2aff      	cmp	r2, #255	; 0xff
 8006988:	d904      	bls.n	8006994 <__ascii_wctomb+0x14>
 800698a:	228a      	movs	r2, #138	; 0x8a
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	4770      	bx	lr
 8006994:	2001      	movs	r0, #1
 8006996:	700a      	strb	r2, [r1, #0]
 8006998:	4770      	bx	lr
	...

0800699c <__swsetup_r>:
 800699c:	4b32      	ldr	r3, [pc, #200]	; (8006a68 <__swsetup_r+0xcc>)
 800699e:	b570      	push	{r4, r5, r6, lr}
 80069a0:	681d      	ldr	r5, [r3, #0]
 80069a2:	4606      	mov	r6, r0
 80069a4:	460c      	mov	r4, r1
 80069a6:	b125      	cbz	r5, 80069b2 <__swsetup_r+0x16>
 80069a8:	69ab      	ldr	r3, [r5, #24]
 80069aa:	b913      	cbnz	r3, 80069b2 <__swsetup_r+0x16>
 80069ac:	4628      	mov	r0, r5
 80069ae:	f000 f981 	bl	8006cb4 <__sinit>
 80069b2:	4b2e      	ldr	r3, [pc, #184]	; (8006a6c <__swsetup_r+0xd0>)
 80069b4:	429c      	cmp	r4, r3
 80069b6:	d10f      	bne.n	80069d8 <__swsetup_r+0x3c>
 80069b8:	686c      	ldr	r4, [r5, #4]
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069c0:	0719      	lsls	r1, r3, #28
 80069c2:	d42c      	bmi.n	8006a1e <__swsetup_r+0x82>
 80069c4:	06dd      	lsls	r5, r3, #27
 80069c6:	d411      	bmi.n	80069ec <__swsetup_r+0x50>
 80069c8:	2309      	movs	r3, #9
 80069ca:	6033      	str	r3, [r6, #0]
 80069cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295
 80069d4:	81a3      	strh	r3, [r4, #12]
 80069d6:	e03e      	b.n	8006a56 <__swsetup_r+0xba>
 80069d8:	4b25      	ldr	r3, [pc, #148]	; (8006a70 <__swsetup_r+0xd4>)
 80069da:	429c      	cmp	r4, r3
 80069dc:	d101      	bne.n	80069e2 <__swsetup_r+0x46>
 80069de:	68ac      	ldr	r4, [r5, #8]
 80069e0:	e7eb      	b.n	80069ba <__swsetup_r+0x1e>
 80069e2:	4b24      	ldr	r3, [pc, #144]	; (8006a74 <__swsetup_r+0xd8>)
 80069e4:	429c      	cmp	r4, r3
 80069e6:	bf08      	it	eq
 80069e8:	68ec      	ldreq	r4, [r5, #12]
 80069ea:	e7e6      	b.n	80069ba <__swsetup_r+0x1e>
 80069ec:	0758      	lsls	r0, r3, #29
 80069ee:	d512      	bpl.n	8006a16 <__swsetup_r+0x7a>
 80069f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069f2:	b141      	cbz	r1, 8006a06 <__swsetup_r+0x6a>
 80069f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069f8:	4299      	cmp	r1, r3
 80069fa:	d002      	beq.n	8006a02 <__swsetup_r+0x66>
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7ff fb37 	bl	8006070 <_free_r>
 8006a02:	2300      	movs	r3, #0
 8006a04:	6363      	str	r3, [r4, #52]	; 0x34
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	6063      	str	r3, [r4, #4]
 8006a12:	6923      	ldr	r3, [r4, #16]
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	f043 0308 	orr.w	r3, r3, #8
 8006a1c:	81a3      	strh	r3, [r4, #12]
 8006a1e:	6923      	ldr	r3, [r4, #16]
 8006a20:	b94b      	cbnz	r3, 8006a36 <__swsetup_r+0x9a>
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a2c:	d003      	beq.n	8006a36 <__swsetup_r+0x9a>
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4630      	mov	r0, r6
 8006a32:	f000 fa05 	bl	8006e40 <__smakebuf_r>
 8006a36:	89a0      	ldrh	r0, [r4, #12]
 8006a38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a3c:	f010 0301 	ands.w	r3, r0, #1
 8006a40:	d00a      	beq.n	8006a58 <__swsetup_r+0xbc>
 8006a42:	2300      	movs	r3, #0
 8006a44:	60a3      	str	r3, [r4, #8]
 8006a46:	6963      	ldr	r3, [r4, #20]
 8006a48:	425b      	negs	r3, r3
 8006a4a:	61a3      	str	r3, [r4, #24]
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	b943      	cbnz	r3, 8006a62 <__swsetup_r+0xc6>
 8006a50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a54:	d1ba      	bne.n	80069cc <__swsetup_r+0x30>
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	0781      	lsls	r1, r0, #30
 8006a5a:	bf58      	it	pl
 8006a5c:	6963      	ldrpl	r3, [r4, #20]
 8006a5e:	60a3      	str	r3, [r4, #8]
 8006a60:	e7f4      	b.n	8006a4c <__swsetup_r+0xb0>
 8006a62:	2000      	movs	r0, #0
 8006a64:	e7f7      	b.n	8006a56 <__swsetup_r+0xba>
 8006a66:	bf00      	nop
 8006a68:	20000010 	.word	0x20000010
 8006a6c:	080074bc 	.word	0x080074bc
 8006a70:	080074dc 	.word	0x080074dc
 8006a74:	0800749c 	.word	0x0800749c

08006a78 <abort>:
 8006a78:	2006      	movs	r0, #6
 8006a7a:	b508      	push	{r3, lr}
 8006a7c:	f000 fa50 	bl	8006f20 <raise>
 8006a80:	2001      	movs	r0, #1
 8006a82:	f7fb fc71 	bl	8002368 <_exit>
	...

08006a88 <__sflush_r>:
 8006a88:	898a      	ldrh	r2, [r1, #12]
 8006a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	0710      	lsls	r0, r2, #28
 8006a90:	460c      	mov	r4, r1
 8006a92:	d457      	bmi.n	8006b44 <__sflush_r+0xbc>
 8006a94:	684b      	ldr	r3, [r1, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dc04      	bgt.n	8006aa4 <__sflush_r+0x1c>
 8006a9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	dc01      	bgt.n	8006aa4 <__sflush_r+0x1c>
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aa6:	2e00      	cmp	r6, #0
 8006aa8:	d0fa      	beq.n	8006aa0 <__sflush_r+0x18>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ab0:	682f      	ldr	r7, [r5, #0]
 8006ab2:	602b      	str	r3, [r5, #0]
 8006ab4:	d032      	beq.n	8006b1c <__sflush_r+0x94>
 8006ab6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	075a      	lsls	r2, r3, #29
 8006abc:	d505      	bpl.n	8006aca <__sflush_r+0x42>
 8006abe:	6863      	ldr	r3, [r4, #4]
 8006ac0:	1ac0      	subs	r0, r0, r3
 8006ac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ac4:	b10b      	cbz	r3, 8006aca <__sflush_r+0x42>
 8006ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ac8:	1ac0      	subs	r0, r0, r3
 8006aca:	2300      	movs	r3, #0
 8006acc:	4602      	mov	r2, r0
 8006ace:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	6a21      	ldr	r1, [r4, #32]
 8006ad4:	47b0      	blx	r6
 8006ad6:	1c43      	adds	r3, r0, #1
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	d106      	bne.n	8006aea <__sflush_r+0x62>
 8006adc:	6829      	ldr	r1, [r5, #0]
 8006ade:	291d      	cmp	r1, #29
 8006ae0:	d82c      	bhi.n	8006b3c <__sflush_r+0xb4>
 8006ae2:	4a29      	ldr	r2, [pc, #164]	; (8006b88 <__sflush_r+0x100>)
 8006ae4:	40ca      	lsrs	r2, r1
 8006ae6:	07d6      	lsls	r6, r2, #31
 8006ae8:	d528      	bpl.n	8006b3c <__sflush_r+0xb4>
 8006aea:	2200      	movs	r2, #0
 8006aec:	6062      	str	r2, [r4, #4]
 8006aee:	6922      	ldr	r2, [r4, #16]
 8006af0:	04d9      	lsls	r1, r3, #19
 8006af2:	6022      	str	r2, [r4, #0]
 8006af4:	d504      	bpl.n	8006b00 <__sflush_r+0x78>
 8006af6:	1c42      	adds	r2, r0, #1
 8006af8:	d101      	bne.n	8006afe <__sflush_r+0x76>
 8006afa:	682b      	ldr	r3, [r5, #0]
 8006afc:	b903      	cbnz	r3, 8006b00 <__sflush_r+0x78>
 8006afe:	6560      	str	r0, [r4, #84]	; 0x54
 8006b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b02:	602f      	str	r7, [r5, #0]
 8006b04:	2900      	cmp	r1, #0
 8006b06:	d0cb      	beq.n	8006aa0 <__sflush_r+0x18>
 8006b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b0c:	4299      	cmp	r1, r3
 8006b0e:	d002      	beq.n	8006b16 <__sflush_r+0x8e>
 8006b10:	4628      	mov	r0, r5
 8006b12:	f7ff faad 	bl	8006070 <_free_r>
 8006b16:	2000      	movs	r0, #0
 8006b18:	6360      	str	r0, [r4, #52]	; 0x34
 8006b1a:	e7c2      	b.n	8006aa2 <__sflush_r+0x1a>
 8006b1c:	6a21      	ldr	r1, [r4, #32]
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b0      	blx	r6
 8006b24:	1c41      	adds	r1, r0, #1
 8006b26:	d1c7      	bne.n	8006ab8 <__sflush_r+0x30>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0c4      	beq.n	8006ab8 <__sflush_r+0x30>
 8006b2e:	2b1d      	cmp	r3, #29
 8006b30:	d001      	beq.n	8006b36 <__sflush_r+0xae>
 8006b32:	2b16      	cmp	r3, #22
 8006b34:	d101      	bne.n	8006b3a <__sflush_r+0xb2>
 8006b36:	602f      	str	r7, [r5, #0]
 8006b38:	e7b2      	b.n	8006aa0 <__sflush_r+0x18>
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b40:	81a3      	strh	r3, [r4, #12]
 8006b42:	e7ae      	b.n	8006aa2 <__sflush_r+0x1a>
 8006b44:	690f      	ldr	r7, [r1, #16]
 8006b46:	2f00      	cmp	r7, #0
 8006b48:	d0aa      	beq.n	8006aa0 <__sflush_r+0x18>
 8006b4a:	0793      	lsls	r3, r2, #30
 8006b4c:	bf18      	it	ne
 8006b4e:	2300      	movne	r3, #0
 8006b50:	680e      	ldr	r6, [r1, #0]
 8006b52:	bf08      	it	eq
 8006b54:	694b      	ldreq	r3, [r1, #20]
 8006b56:	1bf6      	subs	r6, r6, r7
 8006b58:	600f      	str	r7, [r1, #0]
 8006b5a:	608b      	str	r3, [r1, #8]
 8006b5c:	2e00      	cmp	r6, #0
 8006b5e:	dd9f      	ble.n	8006aa0 <__sflush_r+0x18>
 8006b60:	4633      	mov	r3, r6
 8006b62:	463a      	mov	r2, r7
 8006b64:	4628      	mov	r0, r5
 8006b66:	6a21      	ldr	r1, [r4, #32]
 8006b68:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006b6c:	47e0      	blx	ip
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	dc06      	bgt.n	8006b80 <__sflush_r+0xf8>
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295
 8006b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b7c:	81a3      	strh	r3, [r4, #12]
 8006b7e:	e790      	b.n	8006aa2 <__sflush_r+0x1a>
 8006b80:	4407      	add	r7, r0
 8006b82:	1a36      	subs	r6, r6, r0
 8006b84:	e7ea      	b.n	8006b5c <__sflush_r+0xd4>
 8006b86:	bf00      	nop
 8006b88:	20400001 	.word	0x20400001

08006b8c <_fflush_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	690b      	ldr	r3, [r1, #16]
 8006b90:	4605      	mov	r5, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	b913      	cbnz	r3, 8006b9c <_fflush_r+0x10>
 8006b96:	2500      	movs	r5, #0
 8006b98:	4628      	mov	r0, r5
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	b118      	cbz	r0, 8006ba6 <_fflush_r+0x1a>
 8006b9e:	6983      	ldr	r3, [r0, #24]
 8006ba0:	b90b      	cbnz	r3, 8006ba6 <_fflush_r+0x1a>
 8006ba2:	f000 f887 	bl	8006cb4 <__sinit>
 8006ba6:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <_fflush_r+0x6c>)
 8006ba8:	429c      	cmp	r4, r3
 8006baa:	d11b      	bne.n	8006be4 <_fflush_r+0x58>
 8006bac:	686c      	ldr	r4, [r5, #4]
 8006bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0ef      	beq.n	8006b96 <_fflush_r+0xa>
 8006bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bb8:	07d0      	lsls	r0, r2, #31
 8006bba:	d404      	bmi.n	8006bc6 <_fflush_r+0x3a>
 8006bbc:	0599      	lsls	r1, r3, #22
 8006bbe:	d402      	bmi.n	8006bc6 <_fflush_r+0x3a>
 8006bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bc2:	f000 f915 	bl	8006df0 <__retarget_lock_acquire_recursive>
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	4621      	mov	r1, r4
 8006bca:	f7ff ff5d 	bl	8006a88 <__sflush_r>
 8006bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	07da      	lsls	r2, r3, #31
 8006bd4:	d4e0      	bmi.n	8006b98 <_fflush_r+0xc>
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	059b      	lsls	r3, r3, #22
 8006bda:	d4dd      	bmi.n	8006b98 <_fflush_r+0xc>
 8006bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bde:	f000 f908 	bl	8006df2 <__retarget_lock_release_recursive>
 8006be2:	e7d9      	b.n	8006b98 <_fflush_r+0xc>
 8006be4:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <_fflush_r+0x70>)
 8006be6:	429c      	cmp	r4, r3
 8006be8:	d101      	bne.n	8006bee <_fflush_r+0x62>
 8006bea:	68ac      	ldr	r4, [r5, #8]
 8006bec:	e7df      	b.n	8006bae <_fflush_r+0x22>
 8006bee:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <_fflush_r+0x74>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	bf08      	it	eq
 8006bf4:	68ec      	ldreq	r4, [r5, #12]
 8006bf6:	e7da      	b.n	8006bae <_fflush_r+0x22>
 8006bf8:	080074bc 	.word	0x080074bc
 8006bfc:	080074dc 	.word	0x080074dc
 8006c00:	0800749c 	.word	0x0800749c

08006c04 <std>:
 8006c04:	2300      	movs	r3, #0
 8006c06:	b510      	push	{r4, lr}
 8006c08:	4604      	mov	r4, r0
 8006c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c12:	6083      	str	r3, [r0, #8]
 8006c14:	8181      	strh	r1, [r0, #12]
 8006c16:	6643      	str	r3, [r0, #100]	; 0x64
 8006c18:	81c2      	strh	r2, [r0, #14]
 8006c1a:	6183      	str	r3, [r0, #24]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	2208      	movs	r2, #8
 8006c20:	305c      	adds	r0, #92	; 0x5c
 8006c22:	f7fd fb51 	bl	80042c8 <memset>
 8006c26:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <std+0x38>)
 8006c28:	6224      	str	r4, [r4, #32]
 8006c2a:	6263      	str	r3, [r4, #36]	; 0x24
 8006c2c:	4b04      	ldr	r3, [pc, #16]	; (8006c40 <std+0x3c>)
 8006c2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c30:	4b04      	ldr	r3, [pc, #16]	; (8006c44 <std+0x40>)
 8006c32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c34:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <std+0x44>)
 8006c36:	6323      	str	r3, [r4, #48]	; 0x30
 8006c38:	bd10      	pop	{r4, pc}
 8006c3a:	bf00      	nop
 8006c3c:	08006f59 	.word	0x08006f59
 8006c40:	08006f7b 	.word	0x08006f7b
 8006c44:	08006fb3 	.word	0x08006fb3
 8006c48:	08006fd7 	.word	0x08006fd7

08006c4c <_cleanup_r>:
 8006c4c:	4901      	ldr	r1, [pc, #4]	; (8006c54 <_cleanup_r+0x8>)
 8006c4e:	f000 b8af 	b.w	8006db0 <_fwalk_reent>
 8006c52:	bf00      	nop
 8006c54:	08006b8d 	.word	0x08006b8d

08006c58 <__sfmoreglue>:
 8006c58:	2268      	movs	r2, #104	; 0x68
 8006c5a:	b570      	push	{r4, r5, r6, lr}
 8006c5c:	1e4d      	subs	r5, r1, #1
 8006c5e:	4355      	muls	r5, r2
 8006c60:	460e      	mov	r6, r1
 8006c62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c66:	f7ff fa6b 	bl	8006140 <_malloc_r>
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	b140      	cbz	r0, 8006c80 <__sfmoreglue+0x28>
 8006c6e:	2100      	movs	r1, #0
 8006c70:	e9c0 1600 	strd	r1, r6, [r0]
 8006c74:	300c      	adds	r0, #12
 8006c76:	60a0      	str	r0, [r4, #8]
 8006c78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c7c:	f7fd fb24 	bl	80042c8 <memset>
 8006c80:	4620      	mov	r0, r4
 8006c82:	bd70      	pop	{r4, r5, r6, pc}

08006c84 <__sfp_lock_acquire>:
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <__sfp_lock_acquire+0x8>)
 8006c86:	f000 b8b3 	b.w	8006df0 <__retarget_lock_acquire_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	20000489 	.word	0x20000489

08006c90 <__sfp_lock_release>:
 8006c90:	4801      	ldr	r0, [pc, #4]	; (8006c98 <__sfp_lock_release+0x8>)
 8006c92:	f000 b8ae 	b.w	8006df2 <__retarget_lock_release_recursive>
 8006c96:	bf00      	nop
 8006c98:	20000489 	.word	0x20000489

08006c9c <__sinit_lock_acquire>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	; (8006ca4 <__sinit_lock_acquire+0x8>)
 8006c9e:	f000 b8a7 	b.w	8006df0 <__retarget_lock_acquire_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	2000048a 	.word	0x2000048a

08006ca8 <__sinit_lock_release>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	; (8006cb0 <__sinit_lock_release+0x8>)
 8006caa:	f000 b8a2 	b.w	8006df2 <__retarget_lock_release_recursive>
 8006cae:	bf00      	nop
 8006cb0:	2000048a 	.word	0x2000048a

08006cb4 <__sinit>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	f7ff fff0 	bl	8006c9c <__sinit_lock_acquire>
 8006cbc:	69a3      	ldr	r3, [r4, #24]
 8006cbe:	b11b      	cbz	r3, 8006cc8 <__sinit+0x14>
 8006cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc4:	f7ff bff0 	b.w	8006ca8 <__sinit_lock_release>
 8006cc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ccc:	6523      	str	r3, [r4, #80]	; 0x50
 8006cce:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <__sinit+0x68>)
 8006cd0:	4a13      	ldr	r2, [pc, #76]	; (8006d20 <__sinit+0x6c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cd6:	42a3      	cmp	r3, r4
 8006cd8:	bf08      	it	eq
 8006cda:	2301      	moveq	r3, #1
 8006cdc:	4620      	mov	r0, r4
 8006cde:	bf08      	it	eq
 8006ce0:	61a3      	streq	r3, [r4, #24]
 8006ce2:	f000 f81f 	bl	8006d24 <__sfp>
 8006ce6:	6060      	str	r0, [r4, #4]
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 f81b 	bl	8006d24 <__sfp>
 8006cee:	60a0      	str	r0, [r4, #8]
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f000 f817 	bl	8006d24 <__sfp>
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2104      	movs	r1, #4
 8006cfa:	60e0      	str	r0, [r4, #12]
 8006cfc:	6860      	ldr	r0, [r4, #4]
 8006cfe:	f7ff ff81 	bl	8006c04 <std>
 8006d02:	2201      	movs	r2, #1
 8006d04:	2109      	movs	r1, #9
 8006d06:	68a0      	ldr	r0, [r4, #8]
 8006d08:	f7ff ff7c 	bl	8006c04 <std>
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	2112      	movs	r1, #18
 8006d10:	68e0      	ldr	r0, [r4, #12]
 8006d12:	f7ff ff77 	bl	8006c04 <std>
 8006d16:	2301      	movs	r3, #1
 8006d18:	61a3      	str	r3, [r4, #24]
 8006d1a:	e7d1      	b.n	8006cc0 <__sinit+0xc>
 8006d1c:	08007124 	.word	0x08007124
 8006d20:	08006c4d 	.word	0x08006c4d

08006d24 <__sfp>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	4607      	mov	r7, r0
 8006d28:	f7ff ffac 	bl	8006c84 <__sfp_lock_acquire>
 8006d2c:	4b1e      	ldr	r3, [pc, #120]	; (8006da8 <__sfp+0x84>)
 8006d2e:	681e      	ldr	r6, [r3, #0]
 8006d30:	69b3      	ldr	r3, [r6, #24]
 8006d32:	b913      	cbnz	r3, 8006d3a <__sfp+0x16>
 8006d34:	4630      	mov	r0, r6
 8006d36:	f7ff ffbd 	bl	8006cb4 <__sinit>
 8006d3a:	3648      	adds	r6, #72	; 0x48
 8006d3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	d503      	bpl.n	8006d4c <__sfp+0x28>
 8006d44:	6833      	ldr	r3, [r6, #0]
 8006d46:	b30b      	cbz	r3, 8006d8c <__sfp+0x68>
 8006d48:	6836      	ldr	r6, [r6, #0]
 8006d4a:	e7f7      	b.n	8006d3c <__sfp+0x18>
 8006d4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d50:	b9d5      	cbnz	r5, 8006d88 <__sfp+0x64>
 8006d52:	4b16      	ldr	r3, [pc, #88]	; (8006dac <__sfp+0x88>)
 8006d54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d58:	60e3      	str	r3, [r4, #12]
 8006d5a:	6665      	str	r5, [r4, #100]	; 0x64
 8006d5c:	f000 f847 	bl	8006dee <__retarget_lock_init_recursive>
 8006d60:	f7ff ff96 	bl	8006c90 <__sfp_lock_release>
 8006d64:	2208      	movs	r2, #8
 8006d66:	4629      	mov	r1, r5
 8006d68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d70:	6025      	str	r5, [r4, #0]
 8006d72:	61a5      	str	r5, [r4, #24]
 8006d74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d78:	f7fd faa6 	bl	80042c8 <memset>
 8006d7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d84:	4620      	mov	r0, r4
 8006d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d88:	3468      	adds	r4, #104	; 0x68
 8006d8a:	e7d9      	b.n	8006d40 <__sfp+0x1c>
 8006d8c:	2104      	movs	r1, #4
 8006d8e:	4638      	mov	r0, r7
 8006d90:	f7ff ff62 	bl	8006c58 <__sfmoreglue>
 8006d94:	4604      	mov	r4, r0
 8006d96:	6030      	str	r0, [r6, #0]
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d1d5      	bne.n	8006d48 <__sfp+0x24>
 8006d9c:	f7ff ff78 	bl	8006c90 <__sfp_lock_release>
 8006da0:	230c      	movs	r3, #12
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	e7ee      	b.n	8006d84 <__sfp+0x60>
 8006da6:	bf00      	nop
 8006da8:	08007124 	.word	0x08007124
 8006dac:	ffff0001 	.word	0xffff0001

08006db0 <_fwalk_reent>:
 8006db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db4:	4606      	mov	r6, r0
 8006db6:	4688      	mov	r8, r1
 8006db8:	2700      	movs	r7, #0
 8006dba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006dbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dc2:	f1b9 0901 	subs.w	r9, r9, #1
 8006dc6:	d505      	bpl.n	8006dd4 <_fwalk_reent+0x24>
 8006dc8:	6824      	ldr	r4, [r4, #0]
 8006dca:	2c00      	cmp	r4, #0
 8006dcc:	d1f7      	bne.n	8006dbe <_fwalk_reent+0xe>
 8006dce:	4638      	mov	r0, r7
 8006dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd4:	89ab      	ldrh	r3, [r5, #12]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d907      	bls.n	8006dea <_fwalk_reent+0x3a>
 8006dda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dde:	3301      	adds	r3, #1
 8006de0:	d003      	beq.n	8006dea <_fwalk_reent+0x3a>
 8006de2:	4629      	mov	r1, r5
 8006de4:	4630      	mov	r0, r6
 8006de6:	47c0      	blx	r8
 8006de8:	4307      	orrs	r7, r0
 8006dea:	3568      	adds	r5, #104	; 0x68
 8006dec:	e7e9      	b.n	8006dc2 <_fwalk_reent+0x12>

08006dee <__retarget_lock_init_recursive>:
 8006dee:	4770      	bx	lr

08006df0 <__retarget_lock_acquire_recursive>:
 8006df0:	4770      	bx	lr

08006df2 <__retarget_lock_release_recursive>:
 8006df2:	4770      	bx	lr

08006df4 <__swhatbuf_r>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	460e      	mov	r6, r1
 8006df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	461d      	mov	r5, r3
 8006e02:	b096      	sub	sp, #88	; 0x58
 8006e04:	da08      	bge.n	8006e18 <__swhatbuf_r+0x24>
 8006e06:	2200      	movs	r2, #0
 8006e08:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e0c:	602a      	str	r2, [r5, #0]
 8006e0e:	061a      	lsls	r2, r3, #24
 8006e10:	d410      	bmi.n	8006e34 <__swhatbuf_r+0x40>
 8006e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e16:	e00e      	b.n	8006e36 <__swhatbuf_r+0x42>
 8006e18:	466a      	mov	r2, sp
 8006e1a:	f000 f903 	bl	8007024 <_fstat_r>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	dbf1      	blt.n	8006e06 <__swhatbuf_r+0x12>
 8006e22:	9a01      	ldr	r2, [sp, #4]
 8006e24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e2c:	425a      	negs	r2, r3
 8006e2e:	415a      	adcs	r2, r3
 8006e30:	602a      	str	r2, [r5, #0]
 8006e32:	e7ee      	b.n	8006e12 <__swhatbuf_r+0x1e>
 8006e34:	2340      	movs	r3, #64	; 0x40
 8006e36:	2000      	movs	r0, #0
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	b016      	add	sp, #88	; 0x58
 8006e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e40 <__smakebuf_r>:
 8006e40:	898b      	ldrh	r3, [r1, #12]
 8006e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e44:	079d      	lsls	r5, r3, #30
 8006e46:	4606      	mov	r6, r0
 8006e48:	460c      	mov	r4, r1
 8006e4a:	d507      	bpl.n	8006e5c <__smakebuf_r+0x1c>
 8006e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	6123      	str	r3, [r4, #16]
 8006e54:	2301      	movs	r3, #1
 8006e56:	6163      	str	r3, [r4, #20]
 8006e58:	b002      	add	sp, #8
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	466a      	mov	r2, sp
 8006e5e:	ab01      	add	r3, sp, #4
 8006e60:	f7ff ffc8 	bl	8006df4 <__swhatbuf_r>
 8006e64:	9900      	ldr	r1, [sp, #0]
 8006e66:	4605      	mov	r5, r0
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7ff f969 	bl	8006140 <_malloc_r>
 8006e6e:	b948      	cbnz	r0, 8006e84 <__smakebuf_r+0x44>
 8006e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e74:	059a      	lsls	r2, r3, #22
 8006e76:	d4ef      	bmi.n	8006e58 <__smakebuf_r+0x18>
 8006e78:	f023 0303 	bic.w	r3, r3, #3
 8006e7c:	f043 0302 	orr.w	r3, r3, #2
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	e7e3      	b.n	8006e4c <__smakebuf_r+0xc>
 8006e84:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <__smakebuf_r+0x7c>)
 8006e86:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	6020      	str	r0, [r4, #0]
 8006e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e90:	81a3      	strh	r3, [r4, #12]
 8006e92:	9b00      	ldr	r3, [sp, #0]
 8006e94:	6120      	str	r0, [r4, #16]
 8006e96:	6163      	str	r3, [r4, #20]
 8006e98:	9b01      	ldr	r3, [sp, #4]
 8006e9a:	b15b      	cbz	r3, 8006eb4 <__smakebuf_r+0x74>
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ea2:	f000 f8d1 	bl	8007048 <_isatty_r>
 8006ea6:	b128      	cbz	r0, 8006eb4 <__smakebuf_r+0x74>
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	f023 0303 	bic.w	r3, r3, #3
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	81a3      	strh	r3, [r4, #12]
 8006eb4:	89a0      	ldrh	r0, [r4, #12]
 8006eb6:	4305      	orrs	r5, r0
 8006eb8:	81a5      	strh	r5, [r4, #12]
 8006eba:	e7cd      	b.n	8006e58 <__smakebuf_r+0x18>
 8006ebc:	08006c4d 	.word	0x08006c4d

08006ec0 <_malloc_usable_size_r>:
 8006ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec4:	1f18      	subs	r0, r3, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bfbc      	itt	lt
 8006eca:	580b      	ldrlt	r3, [r1, r0]
 8006ecc:	18c0      	addlt	r0, r0, r3
 8006ece:	4770      	bx	lr

08006ed0 <_raise_r>:
 8006ed0:	291f      	cmp	r1, #31
 8006ed2:	b538      	push	{r3, r4, r5, lr}
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	460d      	mov	r5, r1
 8006ed8:	d904      	bls.n	8006ee4 <_raise_r+0x14>
 8006eda:	2316      	movs	r3, #22
 8006edc:	6003      	str	r3, [r0, #0]
 8006ede:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ee6:	b112      	cbz	r2, 8006eee <_raise_r+0x1e>
 8006ee8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006eec:	b94b      	cbnz	r3, 8006f02 <_raise_r+0x32>
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 f830 	bl	8006f54 <_getpid_r>
 8006ef4:	462a      	mov	r2, r5
 8006ef6:	4601      	mov	r1, r0
 8006ef8:	4620      	mov	r0, r4
 8006efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006efe:	f000 b817 	b.w	8006f30 <_kill_r>
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d00a      	beq.n	8006f1c <_raise_r+0x4c>
 8006f06:	1c59      	adds	r1, r3, #1
 8006f08:	d103      	bne.n	8006f12 <_raise_r+0x42>
 8006f0a:	2316      	movs	r3, #22
 8006f0c:	6003      	str	r3, [r0, #0]
 8006f0e:	2001      	movs	r0, #1
 8006f10:	e7e7      	b.n	8006ee2 <_raise_r+0x12>
 8006f12:	2400      	movs	r4, #0
 8006f14:	4628      	mov	r0, r5
 8006f16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f1a:	4798      	blx	r3
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e7e0      	b.n	8006ee2 <_raise_r+0x12>

08006f20 <raise>:
 8006f20:	4b02      	ldr	r3, [pc, #8]	; (8006f2c <raise+0xc>)
 8006f22:	4601      	mov	r1, r0
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	f7ff bfd3 	b.w	8006ed0 <_raise_r>
 8006f2a:	bf00      	nop
 8006f2c:	20000010 	.word	0x20000010

08006f30 <_kill_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	2300      	movs	r3, #0
 8006f34:	4d06      	ldr	r5, [pc, #24]	; (8006f50 <_kill_r+0x20>)
 8006f36:	4604      	mov	r4, r0
 8006f38:	4608      	mov	r0, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	602b      	str	r3, [r5, #0]
 8006f3e:	f7fb fa09 	bl	8002354 <_kill>
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	d102      	bne.n	8006f4c <_kill_r+0x1c>
 8006f46:	682b      	ldr	r3, [r5, #0]
 8006f48:	b103      	cbz	r3, 8006f4c <_kill_r+0x1c>
 8006f4a:	6023      	str	r3, [r4, #0]
 8006f4c:	bd38      	pop	{r3, r4, r5, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000484 	.word	0x20000484

08006f54 <_getpid_r>:
 8006f54:	f7fb b9fc 	b.w	8002350 <_getpid>

08006f58 <__sread>:
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f60:	f000 f894 	bl	800708c <_read_r>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	bfab      	itete	ge
 8006f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f6c:	181b      	addge	r3, r3, r0
 8006f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f72:	bfac      	ite	ge
 8006f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f76:	81a3      	strhlt	r3, [r4, #12]
 8006f78:	bd10      	pop	{r4, pc}

08006f7a <__swrite>:
 8006f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7e:	461f      	mov	r7, r3
 8006f80:	898b      	ldrh	r3, [r1, #12]
 8006f82:	4605      	mov	r5, r0
 8006f84:	05db      	lsls	r3, r3, #23
 8006f86:	460c      	mov	r4, r1
 8006f88:	4616      	mov	r6, r2
 8006f8a:	d505      	bpl.n	8006f98 <__swrite+0x1e>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f94:	f000 f868 	bl	8007068 <_lseek_r>
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	4632      	mov	r2, r6
 8006f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	463b      	mov	r3, r7
 8006fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fae:	f000 b817 	b.w	8006fe0 <_write_r>

08006fb2 <__sseek>:
 8006fb2:	b510      	push	{r4, lr}
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fba:	f000 f855 	bl	8007068 <_lseek_r>
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	bf15      	itete	ne
 8006fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fce:	81a3      	strheq	r3, [r4, #12]
 8006fd0:	bf18      	it	ne
 8006fd2:	81a3      	strhne	r3, [r4, #12]
 8006fd4:	bd10      	pop	{r4, pc}

08006fd6 <__sclose>:
 8006fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fda:	f000 b813 	b.w	8007004 <_close_r>
	...

08006fe0 <_write_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4d05      	ldr	r5, [pc, #20]	; (8007000 <_write_r+0x20>)
 8006fec:	602a      	str	r2, [r5, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f7fb f9ce 	bl	8002390 <_write>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_write_r+0x1e>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_write_r+0x1e>
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	20000484 	.word	0x20000484

08007004 <_close_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	2300      	movs	r3, #0
 8007008:	4d05      	ldr	r5, [pc, #20]	; (8007020 <_close_r+0x1c>)
 800700a:	4604      	mov	r4, r0
 800700c:	4608      	mov	r0, r1
 800700e:	602b      	str	r3, [r5, #0]
 8007010:	f7fb f9cc 	bl	80023ac <_close>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_close_r+0x1a>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_close_r+0x1a>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	20000484 	.word	0x20000484

08007024 <_fstat_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	2300      	movs	r3, #0
 8007028:	4d06      	ldr	r5, [pc, #24]	; (8007044 <_fstat_r+0x20>)
 800702a:	4604      	mov	r4, r0
 800702c:	4608      	mov	r0, r1
 800702e:	4611      	mov	r1, r2
 8007030:	602b      	str	r3, [r5, #0]
 8007032:	f7fb f9bf 	bl	80023b4 <_fstat>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	d102      	bne.n	8007040 <_fstat_r+0x1c>
 800703a:	682b      	ldr	r3, [r5, #0]
 800703c:	b103      	cbz	r3, 8007040 <_fstat_r+0x1c>
 800703e:	6023      	str	r3, [r4, #0]
 8007040:	bd38      	pop	{r3, r4, r5, pc}
 8007042:	bf00      	nop
 8007044:	20000484 	.word	0x20000484

08007048 <_isatty_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	2300      	movs	r3, #0
 800704c:	4d05      	ldr	r5, [pc, #20]	; (8007064 <_isatty_r+0x1c>)
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	f7fb f9b4 	bl	80023c0 <_isatty>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_isatty_r+0x1a>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_isatty_r+0x1a>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20000484 	.word	0x20000484

08007068 <_lseek_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	2200      	movs	r2, #0
 8007072:	4d05      	ldr	r5, [pc, #20]	; (8007088 <_lseek_r+0x20>)
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7fb f9a4 	bl	80023c4 <_lseek>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_lseek_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_lseek_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20000484 	.word	0x20000484

0800708c <_read_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4604      	mov	r4, r0
 8007090:	4608      	mov	r0, r1
 8007092:	4611      	mov	r1, r2
 8007094:	2200      	movs	r2, #0
 8007096:	4d05      	ldr	r5, [pc, #20]	; (80070ac <_read_r+0x20>)
 8007098:	602a      	str	r2, [r5, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	f7fb f96a 	bl	8002374 <_read>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_read_r+0x1e>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_read_r+0x1e>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	20000484 	.word	0x20000484

080070b0 <_init>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	bf00      	nop
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr

080070bc <_fini>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	bf00      	nop
 80070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c2:	bc08      	pop	{r3}
 80070c4:	469e      	mov	lr, r3
 80070c6:	4770      	bx	lr
